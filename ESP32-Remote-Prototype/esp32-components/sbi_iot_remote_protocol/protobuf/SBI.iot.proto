syntax = "proto3";

// A2A = Anyone to anyone
// C2S = Client to server (client = remote)
// S2C = Server to client
package SBI.iot;

import 'SBI.iot.common.proto';

/* Unfortunately, C code enum make it mandatory to ensure the name is globally unique. */

enum EQOS
{
    EQOS_FireAndForget = 0;
    EQOS_NeedAcknowledge = 1;
};

enum EDEVICETYPE
{
	EDEVICETYPE_None = 0;
	EDEVICETYPE_IoTServer_V1 = 1;
	EDEVICETYPE_Remote_V1 = 2;
}

message DeviceInfo
{
	EDEVICETYPE device_type = 1;
	SBI.iot.common.Version sw_version = 2;
}

message RemoteState
{
	float temperatureC_curr = 1;
	float humidityPerc_curr = 2;
}


message C2SGetStatus
{
	RemoteState remote_state = 1;
}

enum ESTOVESTATE {
	ESTOVESTATE_ZEROING_STEPPER = 0;
	ESTOVESTATE_WAITING = 1;
	ESTOVESTATE_RELOAD_IGNITION = 2;
	ESTOVESTATE_TEMPERATURE_RISE = 3;
	ESTOVESTATE_COMBUSTION_HIGH = 4;
	ESTOVESTATE_COMBUSTION_LOW = 5;
	ESTOVESTATE_COMBUSTION_SUPERLOW = 6;
	ESTOVESTATE_COAL_LOW = 7;
	ESTOVESTATE_FLAME_LOSS = 8;
	ESTOVESTATE_COAL_HIGH = 9;
	ESTOVESTATE_OVERTEMP = 10;
	ESTOVESTATE_SAFETY = 11;
	ESTOVESTATE_PRODUCTION_TEST = 12;

	ESTOVESTATE_COMBUSTION_HIGH_OPEN = 13;
	ESTOVESTATE_COMBUSTION_HIGH_CLOSE = 14;
	ESTOVESTATE_COMBUSTION_LOW_OPEN = 15;
	ESTOVESTATE_COMBUSTION_LOW_CLOSE = 16;
}

message S2CGetStatusResp
{
	message StoveState
	{
		SBI.iot.common.FanspeedSet fan_speed_set = 1;
		SBI.iot.common.FanspeedBoundary fan_speed_boundary = 3;
		SBI.iot.common.TemperatureSet temperature_set = 2;
		bool is_open_air = 4;
		reserved 5;
		SBI.iot.common.DateTime datetime = 6;
	}

	DeviceInfo device_info = 1;
	StoveState stove_state = 2;
}

message C2SChangeSettingSP
{
	SBI.iot.common.FanspeedSet fan_speed_set = 1;
	SBI.iot.common.TemperatureSet temperature_set = 2;
}

message S2CChangeSettingSPResp
{
	// New settings, the stove can refuse new settings
	SBI.iot.common.FanspeedSet fan_speed_set = 1;
	SBI.iot.common.TemperatureSet temperature_set = 2;
}

message C2SScan
{
	DeviceInfo device_info = 1;
}

message S2CScanResp
{
	DeviceInfo device_info = 1;
}

message C2SPairingReq
{
	DeviceInfo device_info = 1;
	bytes encryption_key = 2;	// 16 bytes key
}

message C2SPairingReqResp
{
	enum EResponse
	{
		OK = 0;
		IncompatibleDevice = 1;
		InvalidKey = 2;
	}

	DeviceInfo device_info = 1;
	EResponse response = 2;
}

message Cmd
{
	uint32 seq_number = 1;
	EQOS eQoS = 2;
	oneof payload
	{
		C2SScan c2s_scan = 0x20;
		S2CScanResp s2c_scan_resp = 0x21;
	
		C2SGetStatus c2s_get_status = 0x22;
		S2CGetStatusResp s2c_get_status_resp = 0x23;

		C2SChangeSettingSP c2s_change_settingsp = 0x24;
		S2CChangeSettingSPResp s2c_change_settingsp_resp = 0x25;
	}
}
