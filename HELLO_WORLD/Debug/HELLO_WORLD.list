
HELLO_WORLD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007988  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08007b78  08007b78  00017b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c14  08007c14  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007c14  08007c14  00017c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c1c  08007c1c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c1c  08007c1c  00017c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c20  08007c20  00017c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007c24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ad8  20000010  08007c34  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ae8  08007c34  00021ae8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a7e6  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ab3  00000000  00000000  0003a81f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001750  00000000  00000000  0003e2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001610  00000000  00000000  0003fa28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020977  00000000  00000000  00041038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019bec  00000000  00000000  000619af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0f20  00000000  00000000  0007b59b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013c4bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006254  00000000  00000000  0013c510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000010 	.word	0x20000010
 800020c:	00000000 	.word	0x00000000
 8000210:	08007b60 	.word	0x08007b60

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000014 	.word	0x20000014
 800022c:	08007b60 	.word	0x08007b60

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b96e 	b.w	8000524 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	468e      	mov	lr, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	f040 8083 	bne.w	8000378 <__udivmoddi4+0x118>
 8000272:	428a      	cmp	r2, r1
 8000274:	4617      	mov	r7, r2
 8000276:	d947      	bls.n	8000308 <__udivmoddi4+0xa8>
 8000278:	fab2 f382 	clz	r3, r2
 800027c:	b14b      	cbz	r3, 8000292 <__udivmoddi4+0x32>
 800027e:	f1c3 0120 	rsb	r1, r3, #32
 8000282:	fa05 fe03 	lsl.w	lr, r5, r3
 8000286:	fa20 f101 	lsr.w	r1, r0, r1
 800028a:	409f      	lsls	r7, r3
 800028c:	ea41 0e0e 	orr.w	lr, r1, lr
 8000290:	409c      	lsls	r4, r3
 8000292:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000296:	fbbe fcf8 	udiv	ip, lr, r8
 800029a:	fa1f f987 	uxth.w	r9, r7
 800029e:	fb08 e21c 	mls	r2, r8, ip, lr
 80002a2:	fb0c f009 	mul.w	r0, ip, r9
 80002a6:	0c21      	lsrs	r1, r4, #16
 80002a8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80002ac:	4290      	cmp	r0, r2
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x66>
 80002b0:	18ba      	adds	r2, r7, r2
 80002b2:	f10c 31ff 	add.w	r1, ip, #4294967295
 80002b6:	f080 8118 	bcs.w	80004ea <__udivmoddi4+0x28a>
 80002ba:	4290      	cmp	r0, r2
 80002bc:	f240 8115 	bls.w	80004ea <__udivmoddi4+0x28a>
 80002c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80002c4:	443a      	add	r2, r7
 80002c6:	1a12      	subs	r2, r2, r0
 80002c8:	fbb2 f0f8 	udiv	r0, r2, r8
 80002cc:	fb08 2210 	mls	r2, r8, r0, r2
 80002d0:	fb00 f109 	mul.w	r1, r0, r9
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	42a1      	cmp	r1, r4
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002de:	193c      	adds	r4, r7, r4
 80002e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e4:	f080 8103 	bcs.w	80004ee <__udivmoddi4+0x28e>
 80002e8:	42a1      	cmp	r1, r4
 80002ea:	f240 8100 	bls.w	80004ee <__udivmoddi4+0x28e>
 80002ee:	3802      	subs	r0, #2
 80002f0:	443c      	add	r4, r7
 80002f2:	1a64      	subs	r4, r4, r1
 80002f4:	2100      	movs	r1, #0
 80002f6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002fa:	b11e      	cbz	r6, 8000304 <__udivmoddi4+0xa4>
 80002fc:	2200      	movs	r2, #0
 80002fe:	40dc      	lsrs	r4, r3
 8000300:	e9c6 4200 	strd	r4, r2, [r6]
 8000304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xac>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f382 	clz	r3, r2
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14f      	bne.n	80003b4 <__udivmoddi4+0x154>
 8000314:	1a8d      	subs	r5, r1, r2
 8000316:	2101      	movs	r1, #1
 8000318:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800031c:	fa1f f882 	uxth.w	r8, r2
 8000320:	fbb5 fcfe 	udiv	ip, r5, lr
 8000324:	fb0e 551c 	mls	r5, lr, ip, r5
 8000328:	fb08 f00c 	mul.w	r0, r8, ip
 800032c:	0c22      	lsrs	r2, r4, #16
 800032e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000332:	42a8      	cmp	r0, r5
 8000334:	d907      	bls.n	8000346 <__udivmoddi4+0xe6>
 8000336:	197d      	adds	r5, r7, r5
 8000338:	f10c 32ff 	add.w	r2, ip, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0xe4>
 800033e:	42a8      	cmp	r0, r5
 8000340:	f200 80e9 	bhi.w	8000516 <__udivmoddi4+0x2b6>
 8000344:	4694      	mov	ip, r2
 8000346:	1a2d      	subs	r5, r5, r0
 8000348:	fbb5 f0fe 	udiv	r0, r5, lr
 800034c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800035a:	45a0      	cmp	r8, r4
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x10e>
 800035e:	193c      	adds	r4, r7, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x10c>
 8000366:	45a0      	cmp	r8, r4
 8000368:	f200 80d9 	bhi.w	800051e <__udivmoddi4+0x2be>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 0408 	sub.w	r4, r4, r8
 8000372:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000376:	e7c0      	b.n	80002fa <__udivmoddi4+0x9a>
 8000378:	428b      	cmp	r3, r1
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x12e>
 800037c:	2e00      	cmp	r6, #0
 800037e:	f000 80b1 	beq.w	80004e4 <__udivmoddi4+0x284>
 8000382:	2100      	movs	r1, #0
 8000384:	e9c6 0500 	strd	r0, r5, [r6]
 8000388:	4608      	mov	r0, r1
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f183 	clz	r1, r3
 8000392:	2900      	cmp	r1, #0
 8000394:	d14b      	bne.n	800042e <__udivmoddi4+0x1ce>
 8000396:	42ab      	cmp	r3, r5
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0x140>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80b9 	bhi.w	8000512 <__udivmoddi4+0x2b2>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb65 0303 	sbc.w	r3, r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	469e      	mov	lr, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0aa      	beq.n	8000304 <__udivmoddi4+0xa4>
 80003ae:	e9c6 4e00 	strd	r4, lr, [r6]
 80003b2:	e7a7      	b.n	8000304 <__udivmoddi4+0xa4>
 80003b4:	409f      	lsls	r7, r3
 80003b6:	f1c3 0220 	rsb	r2, r3, #32
 80003ba:	40d1      	lsrs	r1, r2
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003c4:	fa1f f887 	uxth.w	r8, r7
 80003c8:	fb0e 1110 	mls	r1, lr, r0, r1
 80003cc:	fa24 f202 	lsr.w	r2, r4, r2
 80003d0:	409d      	lsls	r5, r3
 80003d2:	fb00 fc08 	mul.w	ip, r0, r8
 80003d6:	432a      	orrs	r2, r5
 80003d8:	0c15      	lsrs	r5, r2, #16
 80003da:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80003de:	45ac      	cmp	ip, r5
 80003e0:	fa04 f403 	lsl.w	r4, r4, r3
 80003e4:	d909      	bls.n	80003fa <__udivmoddi4+0x19a>
 80003e6:	197d      	adds	r5, r7, r5
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	f080 808f 	bcs.w	800050e <__udivmoddi4+0x2ae>
 80003f0:	45ac      	cmp	ip, r5
 80003f2:	f240 808c 	bls.w	800050e <__udivmoddi4+0x2ae>
 80003f6:	3802      	subs	r0, #2
 80003f8:	443d      	add	r5, r7
 80003fa:	eba5 050c 	sub.w	r5, r5, ip
 80003fe:	fbb5 f1fe 	udiv	r1, r5, lr
 8000402:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000406:	fb01 f908 	mul.w	r9, r1, r8
 800040a:	b295      	uxth	r5, r2
 800040c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000410:	45a9      	cmp	r9, r5
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x1c4>
 8000414:	197d      	adds	r5, r7, r5
 8000416:	f101 32ff 	add.w	r2, r1, #4294967295
 800041a:	d274      	bcs.n	8000506 <__udivmoddi4+0x2a6>
 800041c:	45a9      	cmp	r9, r5
 800041e:	d972      	bls.n	8000506 <__udivmoddi4+0x2a6>
 8000420:	3902      	subs	r1, #2
 8000422:	443d      	add	r5, r7
 8000424:	eba5 0509 	sub.w	r5, r5, r9
 8000428:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800042c:	e778      	b.n	8000320 <__udivmoddi4+0xc0>
 800042e:	f1c1 0720 	rsb	r7, r1, #32
 8000432:	408b      	lsls	r3, r1
 8000434:	fa22 fc07 	lsr.w	ip, r2, r7
 8000438:	ea4c 0c03 	orr.w	ip, ip, r3
 800043c:	fa25 f407 	lsr.w	r4, r5, r7
 8000440:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000444:	fbb4 f9fe 	udiv	r9, r4, lr
 8000448:	fa1f f88c 	uxth.w	r8, ip
 800044c:	fb0e 4419 	mls	r4, lr, r9, r4
 8000450:	fa20 f307 	lsr.w	r3, r0, r7
 8000454:	fb09 fa08 	mul.w	sl, r9, r8
 8000458:	408d      	lsls	r5, r1
 800045a:	431d      	orrs	r5, r3
 800045c:	0c2b      	lsrs	r3, r5, #16
 800045e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000462:	45a2      	cmp	sl, r4
 8000464:	fa02 f201 	lsl.w	r2, r2, r1
 8000468:	fa00 f301 	lsl.w	r3, r0, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0x222>
 800046e:	eb1c 0404 	adds.w	r4, ip, r4
 8000472:	f109 30ff 	add.w	r0, r9, #4294967295
 8000476:	d248      	bcs.n	800050a <__udivmoddi4+0x2aa>
 8000478:	45a2      	cmp	sl, r4
 800047a:	d946      	bls.n	800050a <__udivmoddi4+0x2aa>
 800047c:	f1a9 0902 	sub.w	r9, r9, #2
 8000480:	4464      	add	r4, ip
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	fbb4 f0fe 	udiv	r0, r4, lr
 800048a:	fb0e 4410 	mls	r4, lr, r0, r4
 800048e:	fb00 fa08 	mul.w	sl, r0, r8
 8000492:	b2ad      	uxth	r5, r5
 8000494:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000498:	45a2      	cmp	sl, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x24e>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f100 35ff 	add.w	r5, r0, #4294967295
 80004a4:	d22d      	bcs.n	8000502 <__udivmoddi4+0x2a2>
 80004a6:	45a2      	cmp	sl, r4
 80004a8:	d92b      	bls.n	8000502 <__udivmoddi4+0x2a2>
 80004aa:	3802      	subs	r0, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b2:	fba0 8902 	umull	r8, r9, r0, r2
 80004b6:	eba4 040a 	sub.w	r4, r4, sl
 80004ba:	454c      	cmp	r4, r9
 80004bc:	46c6      	mov	lr, r8
 80004be:	464d      	mov	r5, r9
 80004c0:	d319      	bcc.n	80004f6 <__udivmoddi4+0x296>
 80004c2:	d016      	beq.n	80004f2 <__udivmoddi4+0x292>
 80004c4:	b15e      	cbz	r6, 80004de <__udivmoddi4+0x27e>
 80004c6:	ebb3 020e 	subs.w	r2, r3, lr
 80004ca:	eb64 0405 	sbc.w	r4, r4, r5
 80004ce:	fa04 f707 	lsl.w	r7, r4, r7
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431f      	orrs	r7, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c6 7400 	strd	r7, r4, [r6]
 80004de:	2100      	movs	r1, #0
 80004e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e4:	4631      	mov	r1, r6
 80004e6:	4630      	mov	r0, r6
 80004e8:	e70c      	b.n	8000304 <__udivmoddi4+0xa4>
 80004ea:	468c      	mov	ip, r1
 80004ec:	e6eb      	b.n	80002c6 <__udivmoddi4+0x66>
 80004ee:	4610      	mov	r0, r2
 80004f0:	e6ff      	b.n	80002f2 <__udivmoddi4+0x92>
 80004f2:	4543      	cmp	r3, r8
 80004f4:	d2e6      	bcs.n	80004c4 <__udivmoddi4+0x264>
 80004f6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004fa:	eb69 050c 	sbc.w	r5, r9, ip
 80004fe:	3801      	subs	r0, #1
 8000500:	e7e0      	b.n	80004c4 <__udivmoddi4+0x264>
 8000502:	4628      	mov	r0, r5
 8000504:	e7d3      	b.n	80004ae <__udivmoddi4+0x24e>
 8000506:	4611      	mov	r1, r2
 8000508:	e78c      	b.n	8000424 <__udivmoddi4+0x1c4>
 800050a:	4681      	mov	r9, r0
 800050c:	e7b9      	b.n	8000482 <__udivmoddi4+0x222>
 800050e:	4608      	mov	r0, r1
 8000510:	e773      	b.n	80003fa <__udivmoddi4+0x19a>
 8000512:	4608      	mov	r0, r1
 8000514:	e749      	b.n	80003aa <__udivmoddi4+0x14a>
 8000516:	f1ac 0c02 	sub.w	ip, ip, #2
 800051a:	443d      	add	r5, r7
 800051c:	e713      	b.n	8000346 <__udivmoddi4+0xe6>
 800051e:	3802      	subs	r0, #2
 8000520:	443c      	add	r4, r7
 8000522:	e724      	b.n	800036e <__udivmoddi4+0x10e>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	4a06      	ldr	r2, [pc, #24]	; (8000550 <vApplicationGetIdleTaskMemory+0x28>)
 8000538:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	4a05      	ldr	r2, [pc, #20]	; (8000554 <vApplicationGetIdleTaskMemory+0x2c>)
 800053e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2280      	movs	r2, #128	; 0x80
 8000544:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr
 8000550:	2000002c 	.word	0x2000002c
 8000554:	20000080 	.word	0x20000080

08000558 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	60f8      	str	r0, [r7, #12]
 8000560:	60b9      	str	r1, [r7, #8]
 8000562:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	4a07      	ldr	r2, [pc, #28]	; (8000584 <vApplicationGetTimerTaskMemory+0x2c>)
 8000568:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800056a:	68bb      	ldr	r3, [r7, #8]
 800056c:	4a06      	ldr	r2, [pc, #24]	; (8000588 <vApplicationGetTimerTaskMemory+0x30>)
 800056e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000576:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000578:	bf00      	nop
 800057a:	3714      	adds	r7, #20
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	20000280 	.word	0x20000280
 8000588:	200002d4 	.word	0x200002d4

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b5b0      	push	{r4, r5, r7, lr}
 800058e:	b08c      	sub	sp, #48	; 0x30
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f000 fcd7 	bl	8000f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f84d 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f000 f9a3 	bl	80008e4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800059e:	f000 f923 	bl	80007e8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005a2:	f000 f94b 	bl	800083c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005a6:	f000 f973 	bl	8000890 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80005aa:	f000 f8a5 	bl	80006f8 <MX_I2C1_Init>
  MX_RTC_Init();
 80005ae:	f000 f8d1 	bl	8000754 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(STATUS_LED1_GPIO_Port,STATUS_LED1_Pin,RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2108      	movs	r1, #8
 80005b6:	4819      	ldr	r0, [pc, #100]	; (800061c <main+0x90>)
 80005b8:	f001 f885 	bl	80016c6 <HAL_GPIO_WritePin>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of I2CSemaphore */
  osSemaphoreDef(I2CSemaphore);
 80005bc:	2300      	movs	r3, #0
 80005be:	62bb      	str	r3, [r7, #40]	; 0x28
 80005c0:	2300      	movs	r3, #0
 80005c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2CSemaphoreHandle = osSemaphoreCreate(osSemaphore(I2CSemaphore), 1);
 80005c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005c8:	2101      	movs	r1, #1
 80005ca:	4618      	mov	r0, r3
 80005cc:	f004 fe2a 	bl	8005224 <osSemaphoreCreate>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4a13      	ldr	r2, [pc, #76]	; (8000620 <main+0x94>)
 80005d4:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of Timer */
  osTimerDef(Timer, TimerCallback);
 80005d6:	4b13      	ldr	r3, [pc, #76]	; (8000624 <main+0x98>)
 80005d8:	623b      	str	r3, [r7, #32]
 80005da:	2300      	movs	r3, #0
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
  TimerHandle = osTimerCreate(osTimer(Timer), osTimerPeriodic, NULL);
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	2200      	movs	r2, #0
 80005e4:	2101      	movs	r1, #1
 80005e6:	4618      	mov	r0, r3
 80005e8:	f004 fde8 	bl	80051bc <osTimerCreate>
 80005ec:	4603      	mov	r3, r0
 80005ee:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <main+0x9c>)
 80005f0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <main+0xa0>)
 80005f4:	1d3c      	adds	r4, r7, #4
 80005f6:	461d      	mov	r5, r3
 80005f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000600:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f004 fd77 	bl	80050fc <osThreadCreate>
 800060e:	4603      	mov	r3, r0
 8000610:	4a07      	ldr	r2, [pc, #28]	; (8000630 <main+0xa4>)
 8000612:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000614:	f004 fd6b 	bl	80050ee <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000618:	e7fe      	b.n	8000618 <main+0x8c>
 800061a:	bf00      	nop
 800061c:	40011000 	.word	0x40011000
 8000620:	200019b8 	.word	0x200019b8
 8000624:	08000ac1 	.word	0x08000ac1
 8000628:	20001a00 	.word	0x20001a00
 800062c:	08007b84 	.word	0x08007b84
 8000630:	2000191c 	.word	0x2000191c

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b09c      	sub	sp, #112	; 0x70
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800063e:	2238      	movs	r2, #56	; 0x38
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f007 fa84 	bl	8007b50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2220      	movs	r2, #32
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f007 fa76 	bl	8007b50 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000664:	230a      	movs	r3, #10
 8000666:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000668:	2301      	movs	r3, #1
 800066a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066c:	2310      	movs	r3, #16
 800066e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000670:	2301      	movs	r3, #1
 8000672:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8000674:	2300      	movs	r3, #0
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000678:	2302      	movs	r3, #2
 800067a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800067c:	2300      	movs	r3, #0
 800067e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000680:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000684:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8000686:	2300      	movs	r3, #0
 8000688:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800068e:	4618      	mov	r0, r3
 8000690:	f002 fe56 	bl	8003340 <HAL_RCC_OscConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800069a:	f000 fa2d 	bl	8000af8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069e:	230f      	movs	r3, #15
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a2:	2302      	movs	r3, #2
 80006a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b8:	2101      	movs	r1, #1
 80006ba:	4618      	mov	r0, r3
 80006bc:	f003 f956 	bl	800396c <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006c6:	f000 fa17 	bl	8000af8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80006ca:	2301      	movs	r3, #1
 80006cc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80006ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006d2:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	4618      	mov	r0, r3
 80006d8:	f003 fb96 	bl	8003e08 <HAL_RCCEx_PeriphCLKConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80006e2:	f000 fa09 	bl	8000af8 <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80006e6:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <SystemClock_Config+0xc0>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	601a      	str	r2, [r3, #0]
}
 80006ec:	bf00      	nop
 80006ee:	3770      	adds	r7, #112	; 0x70
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	42420070 	.word	0x42420070

080006f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_I2C1_Init+0x50>)
 80006fe:	4a13      	ldr	r2, [pc, #76]	; (800074c <MX_I2C1_Init+0x54>)
 8000700:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_I2C1_Init+0x50>)
 8000704:	4a12      	ldr	r2, [pc, #72]	; (8000750 <MX_I2C1_Init+0x58>)
 8000706:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_I2C1_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_I2C1_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_I2C1_Init+0x50>)
 8000716:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800071a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <MX_I2C1_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_I2C1_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_I2C1_Init+0x50>)
 8000736:	f000 ffdf 	bl	80016f8 <HAL_I2C_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000740:	f000 f9da 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20001964 	.word	0x20001964
 800074c:	40005400 	.word	0x40005400
 8000750:	000186a0 	.word	0x000186a0

08000754 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2100      	movs	r1, #0
 800075e:	460a      	mov	r2, r1
 8000760:	801a      	strh	r2, [r3, #0]
 8000762:	460a      	mov	r2, r1
 8000764:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000766:	2300      	movs	r3, #0
 8000768:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800076a:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <MX_RTC_Init+0x8c>)
 800076c:	4a1d      	ldr	r2, [pc, #116]	; (80007e4 <MX_RTC_Init+0x90>)
 800076e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000770:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <MX_RTC_Init+0x8c>)
 8000772:	f04f 32ff 	mov.w	r2, #4294967295
 8000776:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8000778:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <MX_RTC_Init+0x8c>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800077e:	4818      	ldr	r0, [pc, #96]	; (80007e0 <MX_RTC_Init+0x8c>)
 8000780:	f003 fdd8 	bl	8004334 <HAL_RTC_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 800078a:	f000 f9b5 	bl	8000af8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800078e:	2300      	movs	r3, #0
 8000790:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000792:	2300      	movs	r3, #0
 8000794:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000796:	2300      	movs	r3, #0
 8000798:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2201      	movs	r2, #1
 800079e:	4619      	mov	r1, r3
 80007a0:	480f      	ldr	r0, [pc, #60]	; (80007e0 <MX_RTC_Init+0x8c>)
 80007a2:	f003 fe5d 	bl	8004460 <HAL_RTC_SetTime>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 80007ac:	f000 f9a4 	bl	8000af8 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80007b0:	2301      	movs	r3, #1
 80007b2:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80007b4:	2301      	movs	r3, #1
 80007b6:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 80007bc:	2300      	movs	r3, #0
 80007be:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80007c0:	463b      	mov	r3, r7
 80007c2:	2201      	movs	r2, #1
 80007c4:	4619      	mov	r1, r3
 80007c6:	4806      	ldr	r0, [pc, #24]	; (80007e0 <MX_RTC_Init+0x8c>)
 80007c8:	f003 fee2 	bl	8004590 <HAL_RTC_SetDate>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80007d2:	f000 f991 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20001a04 	.word	0x20001a04
 80007e4:	40002800 	.word	0x40002800

080007e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 80007ee:	4a12      	ldr	r2, [pc, #72]	; (8000838 <MX_USART1_UART_Init+0x50>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 80007f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 8000820:	f004 fb72 	bl	8004f08 <HAL_UART_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800082a:	f000 f965 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200019bc 	.word	0x200019bc
 8000838:	40013800 	.word	0x40013800

0800083c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000842:	4a12      	ldr	r2, [pc, #72]	; (800088c <MX_USART2_UART_Init+0x50>)
 8000844:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000848:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800084c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000862:	220c      	movs	r2, #12
 8000864:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000874:	f004 fb48 	bl	8004f08 <HAL_UART_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800087e:	f000 f93b 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20001a18 	.word	0x20001a18
 800088c:	40004400 	.word	0x40004400

08000890 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_USART3_UART_Init+0x4c>)
 8000896:	4a12      	ldr	r2, [pc, #72]	; (80008e0 <MX_USART3_UART_Init+0x50>)
 8000898:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <MX_USART3_UART_Init+0x4c>)
 800089c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_USART3_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_USART3_UART_Init+0x4c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_USART3_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_USART3_UART_Init+0x4c>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_USART3_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_USART3_UART_Init+0x4c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_USART3_UART_Init+0x4c>)
 80008c8:	f004 fb1e 	bl	8004f08 <HAL_UART_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008d2:	f000 f911 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20001920 	.word	0x20001920
 80008e0:	40004800 	.word	0x40004800

080008e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 0310 	add.w	r3, r7, #16
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f8:	4b5a      	ldr	r3, [pc, #360]	; (8000a64 <MX_GPIO_Init+0x180>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	4a59      	ldr	r2, [pc, #356]	; (8000a64 <MX_GPIO_Init+0x180>)
 80008fe:	f043 0310 	orr.w	r3, r3, #16
 8000902:	6193      	str	r3, [r2, #24]
 8000904:	4b57      	ldr	r3, [pc, #348]	; (8000a64 <MX_GPIO_Init+0x180>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	f003 0310 	and.w	r3, r3, #16
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000910:	4b54      	ldr	r3, [pc, #336]	; (8000a64 <MX_GPIO_Init+0x180>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	4a53      	ldr	r2, [pc, #332]	; (8000a64 <MX_GPIO_Init+0x180>)
 8000916:	f043 0320 	orr.w	r3, r3, #32
 800091a:	6193      	str	r3, [r2, #24]
 800091c:	4b51      	ldr	r3, [pc, #324]	; (8000a64 <MX_GPIO_Init+0x180>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f003 0320 	and.w	r3, r3, #32
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000928:	4b4e      	ldr	r3, [pc, #312]	; (8000a64 <MX_GPIO_Init+0x180>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	4a4d      	ldr	r2, [pc, #308]	; (8000a64 <MX_GPIO_Init+0x180>)
 800092e:	f043 0304 	orr.w	r3, r3, #4
 8000932:	6193      	str	r3, [r2, #24]
 8000934:	4b4b      	ldr	r3, [pc, #300]	; (8000a64 <MX_GPIO_Init+0x180>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	f003 0304 	and.w	r3, r3, #4
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000940:	4b48      	ldr	r3, [pc, #288]	; (8000a64 <MX_GPIO_Init+0x180>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a47      	ldr	r2, [pc, #284]	; (8000a64 <MX_GPIO_Init+0x180>)
 8000946:	f043 0308 	orr.w	r3, r3, #8
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b45      	ldr	r3, [pc, #276]	; (8000a64 <MX_GPIO_Init+0x180>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f003 0308 	and.w	r3, r3, #8
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Step2_LowCurrent_Pin|uc_Stepper_Sleep_Pin|Step3_ENABLE_Pin|SPEED2_COIL_Pin
 8000958:	2200      	movs	r2, #0
 800095a:	f643 71f0 	movw	r1, #16368	; 0x3ff0
 800095e:	4842      	ldr	r0, [pc, #264]	; (8000a68 <MX_GPIO_Init+0x184>)
 8000960:	f000 feb1 	bl	80016c6 <HAL_GPIO_WritePin>
                          |SPEED3_COIL_Pin|Step2_DIR_Pin|Step1_LowCurrent_Pin|Step2_STEP_Pin
                          |Step2_RESET_Pin|Step2_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STATUS_LED0_Pin|STATUS_LED1_Pin, GPIO_PIN_SET);
 8000964:	2201      	movs	r2, #1
 8000966:	210c      	movs	r1, #12
 8000968:	483f      	ldr	r0, [pc, #252]	; (8000a68 <MX_GPIO_Init+0x184>)
 800096a:	f000 feac 	bl	80016c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_ON_Pin|Step3_DIR_Pin|AFK_Var_Pin|uc_Stepper_SleepA8_Pin
 800096e:	2200      	movs	r2, #0
 8000970:	f248 11a2 	movw	r1, #33186	; 0x81a2
 8000974:	483d      	ldr	r0, [pc, #244]	; (8000a6c <MX_GPIO_Init+0x188>)
 8000976:	f000 fea6 	bl	80016c6 <HAL_GPIO_WritePin>
                          |USB_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_LED2_GPIO_Port, STATUS_LED2_Pin, GPIO_PIN_SET);
 800097a:	2201      	movs	r2, #1
 800097c:	2110      	movs	r1, #16
 800097e:	483b      	ldr	r0, [pc, #236]	; (8000a6c <MX_GPIO_Init+0x188>)
 8000980:	f000 fea1 	bl	80016c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Step3_STEP_Pin|Step3_LowCurrent_Pin|Stepper_HalfStep_Pin|Step1_STEP_Pin
 8000984:	2200      	movs	r2, #0
 8000986:	f248 013e 	movw	r1, #32830	; 0x803e
 800098a:	4839      	ldr	r0, [pc, #228]	; (8000a70 <MX_GPIO_Init+0x18c>)
 800098c:	f000 fe9b 	bl	80016c6 <HAL_GPIO_WritePin>
                          |Step1_RESET_Pin|Step1_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Step1_DIR_GPIO_Port, Step1_DIR_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	2104      	movs	r1, #4
 8000994:	4837      	ldr	r0, [pc, #220]	; (8000a74 <MX_GPIO_Init+0x190>)
 8000996:	f000 fe96 	bl	80016c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Step2_LowCurrent_Pin STATUS_LED0_Pin STATUS_LED1_Pin uc_Stepper_Sleep_Pin
                           Step3_ENABLE_Pin SPEED2_COIL_Pin SPEED3_COIL_Pin Step2_DIR_Pin
                           Step1_LowCurrent_Pin Step2_STEP_Pin Step2_RESET_Pin Step2_ENABLE_Pin */
  GPIO_InitStruct.Pin = Step2_LowCurrent_Pin|STATUS_LED0_Pin|STATUS_LED1_Pin|uc_Stepper_Sleep_Pin
 800099a:	f643 73fc 	movw	r3, #16380	; 0x3ffc
 800099e:	613b      	str	r3, [r7, #16]
                          |Step3_ENABLE_Pin|SPEED2_COIL_Pin|SPEED3_COIL_Pin|Step2_DIR_Pin
                          |Step1_LowCurrent_Pin|Step2_STEP_Pin|Step2_RESET_Pin|Step2_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a0:	2301      	movs	r3, #1
 80009a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2302      	movs	r3, #2
 80009aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ac:	f107 0310 	add.w	r3, r7, #16
 80009b0:	4619      	mov	r1, r3
 80009b2:	482d      	ldr	r0, [pc, #180]	; (8000a68 <MX_GPIO_Init+0x184>)
 80009b4:	f000 fcec 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_switch1_Pin Limit_switch2_Pin */
  GPIO_InitStruct.Pin = Limit_switch1_Pin|Limit_switch2_Pin;
 80009b8:	2303      	movs	r3, #3
 80009ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	4619      	mov	r1, r3
 80009ca:	4827      	ldr	r0, [pc, #156]	; (8000a68 <MX_GPIO_Init+0x184>)
 80009cc:	f000 fce0 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_ON_Pin STATUS_LED2_Pin Step3_DIR_Pin AFK_Var_Pin
                           uc_Stepper_SleepA8_Pin USB_ENABLE_Pin */
  GPIO_InitStruct.Pin = Buzzer_ON_Pin|STATUS_LED2_Pin|Step3_DIR_Pin|AFK_Var_Pin
 80009d0:	f248 13b2 	movw	r3, #33202	; 0x81b2
 80009d4:	613b      	str	r3, [r7, #16]
                          |uc_Stepper_SleepA8_Pin|USB_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2302      	movs	r3, #2
 80009e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f107 0310 	add.w	r3, r7, #16
 80009e6:	4619      	mov	r1, r3
 80009e8:	4820      	ldr	r0, [pc, #128]	; (8000a6c <MX_GPIO_Init+0x188>)
 80009ea:	f000 fcd1 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : Limit_switch3_Pin */
  GPIO_InitStruct.Pin = Limit_switch3_Pin;
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Limit_switch3_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 0310 	add.w	r3, r7, #16
 80009fe:	4619      	mov	r1, r3
 8000a00:	481a      	ldr	r0, [pc, #104]	; (8000a6c <MX_GPIO_Init+0x188>)
 8000a02:	f000 fcc5 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_switch_Door_Pin Thermostat_Input_Pin Safety_ON_Pin Interlock_Input_Pin
                           Button_Input_Pin USB_Fault_Pin */
  GPIO_InitStruct.Pin = Limit_switch_Door_Pin|Thermostat_Input_Pin|Safety_ON_Pin|Interlock_Input_Pin
 8000a06:	f247 3301 	movw	r3, #29441	; 0x7301
 8000a0a:	613b      	str	r3, [r7, #16]
                          |Button_Input_Pin|USB_Fault_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4815      	ldr	r0, [pc, #84]	; (8000a70 <MX_GPIO_Init+0x18c>)
 8000a1c:	f000 fcb8 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pins : Step3_STEP_Pin Step3_LowCurrent_Pin Stepper_HalfStep_Pin Step1_STEP_Pin
                           Step1_RESET_Pin Step1_ENABLE_Pin */
  GPIO_InitStruct.Pin = Step3_STEP_Pin|Step3_LowCurrent_Pin|Stepper_HalfStep_Pin|Step1_STEP_Pin
 8000a20:	f248 033e 	movw	r3, #32830	; 0x803e
 8000a24:	613b      	str	r3, [r7, #16]
                          |Step1_RESET_Pin|Step1_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a32:	f107 0310 	add.w	r3, r7, #16
 8000a36:	4619      	mov	r1, r3
 8000a38:	480d      	ldr	r0, [pc, #52]	; (8000a70 <MX_GPIO_Init+0x18c>)
 8000a3a:	f000 fca9 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : Step1_DIR_Pin */
  GPIO_InitStruct.Pin = Step1_DIR_Pin;
 8000a3e:	2304      	movs	r3, #4
 8000a40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Step1_DIR_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 0310 	add.w	r3, r7, #16
 8000a52:	4619      	mov	r1, r3
 8000a54:	4807      	ldr	r0, [pc, #28]	; (8000a74 <MX_GPIO_Init+0x190>)
 8000a56:	f000 fc9b 	bl	8001390 <HAL_GPIO_Init>

}
 8000a5a:	bf00      	nop
 8000a5c:	3720      	adds	r7, #32
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40021000 	.word	0x40021000
 8000a68:	40011000 	.word	0x40011000
 8000a6c:	40010800 	.word	0x40010800
 8000a70:	40010c00 	.word	0x40010c00
 8000a74:	40011400 	.word	0x40011400

08000a78 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a80:	2001      	movs	r0, #1
 8000a82:	f004 fb87 	bl	8005194 <osDelay>
    if(!HAL_GPIO_ReadPin(Limit_switch1_GPIO_Port,Limit_switch1_Pin) || !HAL_GPIO_ReadPin(Limit_switch2_GPIO_Port,Limit_switch2_Pin))
 8000a86:	2101      	movs	r1, #1
 8000a88:	480c      	ldr	r0, [pc, #48]	; (8000abc <StartDefaultTask+0x44>)
 8000a8a:	f000 fe05 	bl	8001698 <HAL_GPIO_ReadPin>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d006      	beq.n	8000aa2 <StartDefaultTask+0x2a>
 8000a94:	2102      	movs	r1, #2
 8000a96:	4809      	ldr	r0, [pc, #36]	; (8000abc <StartDefaultTask+0x44>)
 8000a98:	f000 fdfe 	bl	8001698 <HAL_GPIO_ReadPin>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d105      	bne.n	8000aae <StartDefaultTask+0x36>
    {
    	HAL_GPIO_WritePin(STATUS_LED0_GPIO_Port,STATUS_LED0_Pin,RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2104      	movs	r1, #4
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <StartDefaultTask+0x44>)
 8000aa8:	f000 fe0d 	bl	80016c6 <HAL_GPIO_WritePin>
 8000aac:	e004      	b.n	8000ab8 <StartDefaultTask+0x40>
    }else
    {
    	HAL_GPIO_WritePin(STATUS_LED0_GPIO_Port,STATUS_LED0_Pin,SET);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	2104      	movs	r1, #4
 8000ab2:	4802      	ldr	r0, [pc, #8]	; (8000abc <StartDefaultTask+0x44>)
 8000ab4:	f000 fe07 	bl	80016c6 <HAL_GPIO_WritePin>
    osDelay(1);
 8000ab8:	e7e2      	b.n	8000a80 <StartDefaultTask+0x8>
 8000aba:	bf00      	nop
 8000abc:	40011000 	.word	0x40011000

08000ac0 <TimerCallback>:
  /* USER CODE END 5 */
}

/* TimerCallback function */
void TimerCallback(void const * argument)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TimerCallback */

  /* USER CODE END TimerCallback */
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr
	...

08000ad4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d101      	bne.n	8000aea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ae6:	f000 fa43 	bl	8000f70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40012c00 	.word	0x40012c00

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
}
 8000afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <Error_Handler+0x8>
	...

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b0a:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <HAL_MspInit+0x68>)
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	4a17      	ldr	r2, [pc, #92]	; (8000b6c <HAL_MspInit+0x68>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6193      	str	r3, [r2, #24]
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <HAL_MspInit+0x68>)
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <HAL_MspInit+0x68>)
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	4a11      	ldr	r2, [pc, #68]	; (8000b6c <HAL_MspInit+0x68>)
 8000b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b2c:	61d3      	str	r3, [r2, #28]
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <HAL_MspInit+0x68>)
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	210f      	movs	r1, #15
 8000b3e:	f06f 0001 	mvn.w	r0, #1
 8000b42:	f000 fae6 	bl	8001112 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b46:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <HAL_MspInit+0x6c>)
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <HAL_MspInit+0x6c>)
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b62:	bf00      	nop
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40010000 	.word	0x40010000

08000b74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b088      	sub	sp, #32
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a1d      	ldr	r2, [pc, #116]	; (8000c04 <HAL_I2C_MspInit+0x90>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d133      	bne.n	8000bfc <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b94:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <HAL_I2C_MspInit+0x94>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	4a1b      	ldr	r2, [pc, #108]	; (8000c08 <HAL_I2C_MspInit+0x94>)
 8000b9a:	f043 0308 	orr.w	r3, r3, #8
 8000b9e:	6193      	str	r3, [r2, #24]
 8000ba0:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <HAL_I2C_MspInit+0x94>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	f003 0308 	and.w	r3, r3, #8
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 8000bac:	23c0      	movs	r3, #192	; 0xc0
 8000bae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bb0:	2312      	movs	r3, #18
 8000bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb8:	f107 0310 	add.w	r3, r7, #16
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4813      	ldr	r0, [pc, #76]	; (8000c0c <HAL_I2C_MspInit+0x98>)
 8000bc0:	f000 fbe6 	bl	8001390 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bc4:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <HAL_I2C_MspInit+0x94>)
 8000bc6:	69db      	ldr	r3, [r3, #28]
 8000bc8:	4a0f      	ldr	r2, [pc, #60]	; (8000c08 <HAL_I2C_MspInit+0x94>)
 8000bca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bce:	61d3      	str	r3, [r2, #28]
 8000bd0:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <HAL_I2C_MspInit+0x94>)
 8000bd2:	69db      	ldr	r3, [r3, #28]
 8000bd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2105      	movs	r1, #5
 8000be0:	201f      	movs	r0, #31
 8000be2:	f000 fa96 	bl	8001112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000be6:	201f      	movs	r0, #31
 8000be8:	f000 faaf 	bl	800114a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2105      	movs	r1, #5
 8000bf0:	2020      	movs	r0, #32
 8000bf2:	f000 fa8e 	bl	8001112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000bf6:	2020      	movs	r0, #32
 8000bf8:	f000 faa7 	bl	800114a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bfc:	bf00      	nop
 8000bfe:	3720      	adds	r7, #32
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40005400 	.word	0x40005400
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	40010c00 	.word	0x40010c00

08000c10 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a0b      	ldr	r2, [pc, #44]	; (8000c4c <HAL_RTC_MspInit+0x3c>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d110      	bne.n	8000c44 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000c22:	f002 fb81 	bl	8003328 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000c26:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <HAL_RTC_MspInit+0x40>)
 8000c28:	69db      	ldr	r3, [r3, #28]
 8000c2a:	4a09      	ldr	r2, [pc, #36]	; (8000c50 <HAL_RTC_MspInit+0x40>)
 8000c2c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c30:	61d3      	str	r3, [r2, #28]
 8000c32:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <HAL_RTC_MspInit+0x40>)
 8000c34:	69db      	ldr	r3, [r3, #28]
 8000c36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c3e:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <HAL_RTC_MspInit+0x44>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c44:	bf00      	nop
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40002800 	.word	0x40002800
 8000c50:	40021000 	.word	0x40021000
 8000c54:	4242043c 	.word	0x4242043c

08000c58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08c      	sub	sp, #48	; 0x30
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0320 	add.w	r3, r7, #32
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a53      	ldr	r2, [pc, #332]	; (8000dc0 <HAL_UART_MspInit+0x168>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d132      	bne.n	8000cde <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c78:	4b52      	ldr	r3, [pc, #328]	; (8000dc4 <HAL_UART_MspInit+0x16c>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	4a51      	ldr	r2, [pc, #324]	; (8000dc4 <HAL_UART_MspInit+0x16c>)
 8000c7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c82:	6193      	str	r3, [r2, #24]
 8000c84:	4b4f      	ldr	r3, [pc, #316]	; (8000dc4 <HAL_UART_MspInit+0x16c>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c8c:	61fb      	str	r3, [r7, #28]
 8000c8e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c90:	4b4c      	ldr	r3, [pc, #304]	; (8000dc4 <HAL_UART_MspInit+0x16c>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	4a4b      	ldr	r2, [pc, #300]	; (8000dc4 <HAL_UART_MspInit+0x16c>)
 8000c96:	f043 0304 	orr.w	r3, r3, #4
 8000c9a:	6193      	str	r3, [r2, #24]
 8000c9c:	4b49      	ldr	r3, [pc, #292]	; (8000dc4 <HAL_UART_MspInit+0x16c>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	f003 0304 	and.w	r3, r3, #4
 8000ca4:	61bb      	str	r3, [r7, #24]
 8000ca6:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ca8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f107 0320 	add.w	r3, r7, #32
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4842      	ldr	r0, [pc, #264]	; (8000dc8 <HAL_UART_MspInit+0x170>)
 8000cbe:	f000 fb67 	bl	8001390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd0:	f107 0320 	add.w	r3, r7, #32
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	483c      	ldr	r0, [pc, #240]	; (8000dc8 <HAL_UART_MspInit+0x170>)
 8000cd8:	f000 fb5a 	bl	8001390 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cdc:	e06c      	b.n	8000db8 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART2)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a3a      	ldr	r2, [pc, #232]	; (8000dcc <HAL_UART_MspInit+0x174>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d130      	bne.n	8000d4a <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ce8:	4b36      	ldr	r3, [pc, #216]	; (8000dc4 <HAL_UART_MspInit+0x16c>)
 8000cea:	69db      	ldr	r3, [r3, #28]
 8000cec:	4a35      	ldr	r2, [pc, #212]	; (8000dc4 <HAL_UART_MspInit+0x16c>)
 8000cee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf2:	61d3      	str	r3, [r2, #28]
 8000cf4:	4b33      	ldr	r3, [pc, #204]	; (8000dc4 <HAL_UART_MspInit+0x16c>)
 8000cf6:	69db      	ldr	r3, [r3, #28]
 8000cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	4b30      	ldr	r3, [pc, #192]	; (8000dc4 <HAL_UART_MspInit+0x16c>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a2f      	ldr	r2, [pc, #188]	; (8000dc4 <HAL_UART_MspInit+0x16c>)
 8000d06:	f043 0304 	orr.w	r3, r3, #4
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b2d      	ldr	r3, [pc, #180]	; (8000dc4 <HAL_UART_MspInit+0x16c>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0304 	and.w	r3, r3, #4
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d18:	2304      	movs	r3, #4
 8000d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d20:	2303      	movs	r3, #3
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d24:	f107 0320 	add.w	r3, r7, #32
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4827      	ldr	r0, [pc, #156]	; (8000dc8 <HAL_UART_MspInit+0x170>)
 8000d2c:	f000 fb30 	bl	8001390 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d30:	2308      	movs	r3, #8
 8000d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d34:	2300      	movs	r3, #0
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3c:	f107 0320 	add.w	r3, r7, #32
 8000d40:	4619      	mov	r1, r3
 8000d42:	4821      	ldr	r0, [pc, #132]	; (8000dc8 <HAL_UART_MspInit+0x170>)
 8000d44:	f000 fb24 	bl	8001390 <HAL_GPIO_Init>
}
 8000d48:	e036      	b.n	8000db8 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a20      	ldr	r2, [pc, #128]	; (8000dd0 <HAL_UART_MspInit+0x178>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d131      	bne.n	8000db8 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d54:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <HAL_UART_MspInit+0x16c>)
 8000d56:	69db      	ldr	r3, [r3, #28]
 8000d58:	4a1a      	ldr	r2, [pc, #104]	; (8000dc4 <HAL_UART_MspInit+0x16c>)
 8000d5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d5e:	61d3      	str	r3, [r2, #28]
 8000d60:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <HAL_UART_MspInit+0x16c>)
 8000d62:	69db      	ldr	r3, [r3, #28]
 8000d64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6c:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <HAL_UART_MspInit+0x16c>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	4a14      	ldr	r2, [pc, #80]	; (8000dc4 <HAL_UART_MspInit+0x16c>)
 8000d72:	f043 0308 	orr.w	r3, r3, #8
 8000d76:	6193      	str	r3, [r2, #24]
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_UART_MspInit+0x16c>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f003 0308 	and.w	r3, r3, #8
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d92:	f107 0320 	add.w	r3, r7, #32
 8000d96:	4619      	mov	r1, r3
 8000d98:	480e      	ldr	r0, [pc, #56]	; (8000dd4 <HAL_UART_MspInit+0x17c>)
 8000d9a:	f000 faf9 	bl	8001390 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dac:	f107 0320 	add.w	r3, r7, #32
 8000db0:	4619      	mov	r1, r3
 8000db2:	4808      	ldr	r0, [pc, #32]	; (8000dd4 <HAL_UART_MspInit+0x17c>)
 8000db4:	f000 faec 	bl	8001390 <HAL_GPIO_Init>
}
 8000db8:	bf00      	nop
 8000dba:	3730      	adds	r7, #48	; 0x30
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40013800 	.word	0x40013800
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40010800 	.word	0x40010800
 8000dcc:	40004400 	.word	0x40004400
 8000dd0:	40004800 	.word	0x40004800
 8000dd4:	40010c00 	.word	0x40010c00

08000dd8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08c      	sub	sp, #48	; 0x30
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000de8:	2200      	movs	r2, #0
 8000dea:	6879      	ldr	r1, [r7, #4]
 8000dec:	2019      	movs	r0, #25
 8000dee:	f000 f990 	bl	8001112 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000df2:	2019      	movs	r0, #25
 8000df4:	f000 f9a9 	bl	800114a <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000df8:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <HAL_InitTick+0x9c>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	4a1d      	ldr	r2, [pc, #116]	; (8000e74 <HAL_InitTick+0x9c>)
 8000dfe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e02:	6193      	str	r3, [r2, #24]
 8000e04:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <HAL_InitTick+0x9c>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e10:	f107 0210 	add.w	r2, r7, #16
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	4611      	mov	r1, r2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f002 ffa6 	bl	8003d6c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e20:	f002 ff90 	bl	8003d44 <HAL_RCC_GetPCLK2Freq>
 8000e24:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e28:	4a13      	ldr	r2, [pc, #76]	; (8000e78 <HAL_InitTick+0xa0>)
 8000e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2e:	0c9b      	lsrs	r3, r3, #18
 8000e30:	3b01      	subs	r3, #1
 8000e32:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <HAL_InitTick+0xa4>)
 8000e36:	4a12      	ldr	r2, [pc, #72]	; (8000e80 <HAL_InitTick+0xa8>)
 8000e38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <HAL_InitTick+0xa4>)
 8000e3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e40:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e42:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <HAL_InitTick+0xa4>)
 8000e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e46:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <HAL_InitTick+0xa4>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <HAL_InitTick+0xa4>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000e54:	4809      	ldr	r0, [pc, #36]	; (8000e7c <HAL_InitTick+0xa4>)
 8000e56:	f003 fdfb 	bl	8004a50 <HAL_TIM_Base_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d104      	bne.n	8000e6a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000e60:	4806      	ldr	r0, [pc, #24]	; (8000e7c <HAL_InitTick+0xa4>)
 8000e62:	f003 fe4d 	bl	8004b00 <HAL_TIM_Base_Start_IT>
 8000e66:	4603      	mov	r3, r0
 8000e68:	e000      	b.n	8000e6c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3730      	adds	r7, #48	; 0x30
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40021000 	.word	0x40021000
 8000e78:	431bde83 	.word	0x431bde83
 8000e7c:	20001a5c 	.word	0x20001a5c
 8000e80:	40012c00 	.word	0x40012c00

08000e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <NMI_Handler+0x4>

08000e8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <HardFault_Handler+0x4>

08000e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <MemManage_Handler+0x4>

08000e96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <BusFault_Handler+0x4>

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <UsageFault_Handler+0x4>

08000ea2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr
	...

08000eb0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000eb4:	4802      	ldr	r0, [pc, #8]	; (8000ec0 <TIM1_UP_IRQHandler+0x10>)
 8000eb6:	f003 fe7d 	bl	8004bb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20001a5c 	.word	0x20001a5c

08000ec4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000ec8:	4802      	ldr	r0, [pc, #8]	; (8000ed4 <I2C1_EV_IRQHandler+0x10>)
 8000eca:	f000 fd59 	bl	8001980 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20001964 	.word	0x20001964

08000ed8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <I2C1_ER_IRQHandler+0x10>)
 8000ede:	f000 fec0 	bl	8001c62 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20001964 	.word	0x20001964

08000eec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr

08000ef8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef8:	480c      	ldr	r0, [pc, #48]	; (8000f2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000efa:	490d      	ldr	r1, [pc, #52]	; (8000f30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f00:	e002      	b.n	8000f08 <LoopCopyDataInit>

08000f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f06:	3304      	adds	r3, #4

08000f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f0c:	d3f9      	bcc.n	8000f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f10:	4c0a      	ldr	r4, [pc, #40]	; (8000f3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f14:	e001      	b.n	8000f1a <LoopFillZerobss>

08000f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f18:	3204      	adds	r2, #4

08000f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f1c:	d3fb      	bcc.n	8000f16 <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f1e:	f7ff ffe5 	bl	8000eec <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000f22:	f006 fde3 	bl	8007aec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f26:	f7ff fb31 	bl	800058c <main>
  bx lr
 8000f2a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f30:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f34:	08007c24 	.word	0x08007c24
  ldr r2, =_sbss
 8000f38:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f3c:	20001ae8 	.word	0x20001ae8

08000f40 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f40:	e7fe      	b.n	8000f40 <ADC1_2_IRQHandler>
	...

08000f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <HAL_Init+0x28>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <HAL_Init+0x28>)
 8000f4e:	f043 0310 	orr.w	r3, r3, #16
 8000f52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f54:	2003      	movs	r0, #3
 8000f56:	f000 f8d1 	bl	80010fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f7ff ff3c 	bl	8000dd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f60:	f7ff fdd0 	bl	8000b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40022000 	.word	0x40022000

08000f70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <HAL_IncTick+0x1c>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <HAL_IncTick+0x20>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4413      	add	r3, r2
 8000f80:	4a03      	ldr	r2, [pc, #12]	; (8000f90 <HAL_IncTick+0x20>)
 8000f82:	6013      	str	r3, [r2, #0]
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	20001aa4 	.word	0x20001aa4

08000f94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b02      	ldr	r3, [pc, #8]	; (8000fa4 <HAL_GetTick+0x10>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr
 8000fa4:	20001aa4 	.word	0x20001aa4

08000fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fda:	4a04      	ldr	r2, [pc, #16]	; (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	60d3      	str	r3, [r2, #12]
}
 8000fe0:	bf00      	nop
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	0a1b      	lsrs	r3, r3, #8
 8000ffa:	f003 0307 	and.w	r3, r3, #7
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	2b00      	cmp	r3, #0
 800101c:	db0b      	blt.n	8001036 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	f003 021f 	and.w	r2, r3, #31
 8001024:	4906      	ldr	r1, [pc, #24]	; (8001040 <__NVIC_EnableIRQ+0x34>)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	095b      	lsrs	r3, r3, #5
 800102c:	2001      	movs	r0, #1
 800102e:	fa00 f202 	lsl.w	r2, r0, r2
 8001032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr
 8001040:	e000e100 	.word	0xe000e100

08001044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001054:	2b00      	cmp	r3, #0
 8001056:	db0a      	blt.n	800106e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	b2da      	uxtb	r2, r3
 800105c:	490c      	ldr	r1, [pc, #48]	; (8001090 <__NVIC_SetPriority+0x4c>)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	0112      	lsls	r2, r2, #4
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	440b      	add	r3, r1
 8001068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800106c:	e00a      	b.n	8001084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4908      	ldr	r1, [pc, #32]	; (8001094 <__NVIC_SetPriority+0x50>)
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	3b04      	subs	r3, #4
 800107c:	0112      	lsls	r2, r2, #4
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	440b      	add	r3, r1
 8001082:	761a      	strb	r2, [r3, #24]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000e100 	.word	0xe000e100
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001098:	b480      	push	{r7}
 800109a:	b089      	sub	sp, #36	; 0x24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f1c3 0307 	rsb	r3, r3, #7
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	bf28      	it	cs
 80010b6:	2304      	movcs	r3, #4
 80010b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3304      	adds	r3, #4
 80010be:	2b06      	cmp	r3, #6
 80010c0:	d902      	bls.n	80010c8 <NVIC_EncodePriority+0x30>
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3b03      	subs	r3, #3
 80010c6:	e000      	b.n	80010ca <NVIC_EncodePriority+0x32>
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	f04f 32ff 	mov.w	r2, #4294967295
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43da      	mvns	r2, r3
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	401a      	ands	r2, r3
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e0:	f04f 31ff 	mov.w	r1, #4294967295
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ea:	43d9      	mvns	r1, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	4313      	orrs	r3, r2
         );
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3724      	adds	r7, #36	; 0x24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr

080010fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff4f 	bl	8000fa8 <__NVIC_SetPriorityGrouping>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001112:	b580      	push	{r7, lr}
 8001114:	b086      	sub	sp, #24
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
 800111e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001124:	f7ff ff64 	bl	8000ff0 <__NVIC_GetPriorityGrouping>
 8001128:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	68b9      	ldr	r1, [r7, #8]
 800112e:	6978      	ldr	r0, [r7, #20]
 8001130:	f7ff ffb2 	bl	8001098 <NVIC_EncodePriority>
 8001134:	4602      	mov	r2, r0
 8001136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff81 	bl	8001044 <__NVIC_SetPriority>
}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff57 	bl	800100c <__NVIC_EnableIRQ>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001170:	2300      	movs	r3, #0
 8001172:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800117a:	2b02      	cmp	r3, #2
 800117c:	d005      	beq.n	800118a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2204      	movs	r2, #4
 8001182:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	73fb      	strb	r3, [r7, #15]
 8001188:	e0d6      	b.n	8001338 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f022 020e 	bic.w	r2, r2, #14
 8001198:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f022 0201 	bic.w	r2, r2, #1
 80011a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	461a      	mov	r2, r3
 80011b0:	4b64      	ldr	r3, [pc, #400]	; (8001344 <HAL_DMA_Abort_IT+0x1dc>)
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d958      	bls.n	8001268 <HAL_DMA_Abort_IT+0x100>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a63      	ldr	r2, [pc, #396]	; (8001348 <HAL_DMA_Abort_IT+0x1e0>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d04f      	beq.n	8001260 <HAL_DMA_Abort_IT+0xf8>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a61      	ldr	r2, [pc, #388]	; (800134c <HAL_DMA_Abort_IT+0x1e4>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d048      	beq.n	800125c <HAL_DMA_Abort_IT+0xf4>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a60      	ldr	r2, [pc, #384]	; (8001350 <HAL_DMA_Abort_IT+0x1e8>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d040      	beq.n	8001256 <HAL_DMA_Abort_IT+0xee>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a5e      	ldr	r2, [pc, #376]	; (8001354 <HAL_DMA_Abort_IT+0x1ec>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d038      	beq.n	8001250 <HAL_DMA_Abort_IT+0xe8>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a5d      	ldr	r2, [pc, #372]	; (8001358 <HAL_DMA_Abort_IT+0x1f0>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d030      	beq.n	800124a <HAL_DMA_Abort_IT+0xe2>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a5b      	ldr	r2, [pc, #364]	; (800135c <HAL_DMA_Abort_IT+0x1f4>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d028      	beq.n	8001244 <HAL_DMA_Abort_IT+0xdc>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a53      	ldr	r2, [pc, #332]	; (8001344 <HAL_DMA_Abort_IT+0x1dc>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d020      	beq.n	800123e <HAL_DMA_Abort_IT+0xd6>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a57      	ldr	r2, [pc, #348]	; (8001360 <HAL_DMA_Abort_IT+0x1f8>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d019      	beq.n	800123a <HAL_DMA_Abort_IT+0xd2>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a56      	ldr	r2, [pc, #344]	; (8001364 <HAL_DMA_Abort_IT+0x1fc>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d012      	beq.n	8001236 <HAL_DMA_Abort_IT+0xce>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a54      	ldr	r2, [pc, #336]	; (8001368 <HAL_DMA_Abort_IT+0x200>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d00a      	beq.n	8001230 <HAL_DMA_Abort_IT+0xc8>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a53      	ldr	r2, [pc, #332]	; (800136c <HAL_DMA_Abort_IT+0x204>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d102      	bne.n	800122a <HAL_DMA_Abort_IT+0xc2>
 8001224:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001228:	e01b      	b.n	8001262 <HAL_DMA_Abort_IT+0xfa>
 800122a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800122e:	e018      	b.n	8001262 <HAL_DMA_Abort_IT+0xfa>
 8001230:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001234:	e015      	b.n	8001262 <HAL_DMA_Abort_IT+0xfa>
 8001236:	2310      	movs	r3, #16
 8001238:	e013      	b.n	8001262 <HAL_DMA_Abort_IT+0xfa>
 800123a:	2301      	movs	r3, #1
 800123c:	e011      	b.n	8001262 <HAL_DMA_Abort_IT+0xfa>
 800123e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001242:	e00e      	b.n	8001262 <HAL_DMA_Abort_IT+0xfa>
 8001244:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001248:	e00b      	b.n	8001262 <HAL_DMA_Abort_IT+0xfa>
 800124a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800124e:	e008      	b.n	8001262 <HAL_DMA_Abort_IT+0xfa>
 8001250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001254:	e005      	b.n	8001262 <HAL_DMA_Abort_IT+0xfa>
 8001256:	f44f 7380 	mov.w	r3, #256	; 0x100
 800125a:	e002      	b.n	8001262 <HAL_DMA_Abort_IT+0xfa>
 800125c:	2310      	movs	r3, #16
 800125e:	e000      	b.n	8001262 <HAL_DMA_Abort_IT+0xfa>
 8001260:	2301      	movs	r3, #1
 8001262:	4a43      	ldr	r2, [pc, #268]	; (8001370 <HAL_DMA_Abort_IT+0x208>)
 8001264:	6053      	str	r3, [r2, #4]
 8001266:	e057      	b.n	8001318 <HAL_DMA_Abort_IT+0x1b0>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a36      	ldr	r2, [pc, #216]	; (8001348 <HAL_DMA_Abort_IT+0x1e0>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d04f      	beq.n	8001312 <HAL_DMA_Abort_IT+0x1aa>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a35      	ldr	r2, [pc, #212]	; (800134c <HAL_DMA_Abort_IT+0x1e4>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d048      	beq.n	800130e <HAL_DMA_Abort_IT+0x1a6>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a33      	ldr	r2, [pc, #204]	; (8001350 <HAL_DMA_Abort_IT+0x1e8>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d040      	beq.n	8001308 <HAL_DMA_Abort_IT+0x1a0>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a32      	ldr	r2, [pc, #200]	; (8001354 <HAL_DMA_Abort_IT+0x1ec>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d038      	beq.n	8001302 <HAL_DMA_Abort_IT+0x19a>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a30      	ldr	r2, [pc, #192]	; (8001358 <HAL_DMA_Abort_IT+0x1f0>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d030      	beq.n	80012fc <HAL_DMA_Abort_IT+0x194>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a2f      	ldr	r2, [pc, #188]	; (800135c <HAL_DMA_Abort_IT+0x1f4>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d028      	beq.n	80012f6 <HAL_DMA_Abort_IT+0x18e>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a26      	ldr	r2, [pc, #152]	; (8001344 <HAL_DMA_Abort_IT+0x1dc>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d020      	beq.n	80012f0 <HAL_DMA_Abort_IT+0x188>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a2b      	ldr	r2, [pc, #172]	; (8001360 <HAL_DMA_Abort_IT+0x1f8>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d019      	beq.n	80012ec <HAL_DMA_Abort_IT+0x184>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a29      	ldr	r2, [pc, #164]	; (8001364 <HAL_DMA_Abort_IT+0x1fc>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d012      	beq.n	80012e8 <HAL_DMA_Abort_IT+0x180>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a28      	ldr	r2, [pc, #160]	; (8001368 <HAL_DMA_Abort_IT+0x200>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d00a      	beq.n	80012e2 <HAL_DMA_Abort_IT+0x17a>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a26      	ldr	r2, [pc, #152]	; (800136c <HAL_DMA_Abort_IT+0x204>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d102      	bne.n	80012dc <HAL_DMA_Abort_IT+0x174>
 80012d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012da:	e01b      	b.n	8001314 <HAL_DMA_Abort_IT+0x1ac>
 80012dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e0:	e018      	b.n	8001314 <HAL_DMA_Abort_IT+0x1ac>
 80012e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012e6:	e015      	b.n	8001314 <HAL_DMA_Abort_IT+0x1ac>
 80012e8:	2310      	movs	r3, #16
 80012ea:	e013      	b.n	8001314 <HAL_DMA_Abort_IT+0x1ac>
 80012ec:	2301      	movs	r3, #1
 80012ee:	e011      	b.n	8001314 <HAL_DMA_Abort_IT+0x1ac>
 80012f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012f4:	e00e      	b.n	8001314 <HAL_DMA_Abort_IT+0x1ac>
 80012f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012fa:	e00b      	b.n	8001314 <HAL_DMA_Abort_IT+0x1ac>
 80012fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001300:	e008      	b.n	8001314 <HAL_DMA_Abort_IT+0x1ac>
 8001302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001306:	e005      	b.n	8001314 <HAL_DMA_Abort_IT+0x1ac>
 8001308:	f44f 7380 	mov.w	r3, #256	; 0x100
 800130c:	e002      	b.n	8001314 <HAL_DMA_Abort_IT+0x1ac>
 800130e:	2310      	movs	r3, #16
 8001310:	e000      	b.n	8001314 <HAL_DMA_Abort_IT+0x1ac>
 8001312:	2301      	movs	r3, #1
 8001314:	4a17      	ldr	r2, [pc, #92]	; (8001374 <HAL_DMA_Abort_IT+0x20c>)
 8001316:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2201      	movs	r2, #1
 800131c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	4798      	blx	r3
    } 
  }
  return status;
 8001338:	7bfb      	ldrb	r3, [r7, #15]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40020080 	.word	0x40020080
 8001348:	40020008 	.word	0x40020008
 800134c:	4002001c 	.word	0x4002001c
 8001350:	40020030 	.word	0x40020030
 8001354:	40020044 	.word	0x40020044
 8001358:	40020058 	.word	0x40020058
 800135c:	4002006c 	.word	0x4002006c
 8001360:	40020408 	.word	0x40020408
 8001364:	4002041c 	.word	0x4002041c
 8001368:	40020430 	.word	0x40020430
 800136c:	40020444 	.word	0x40020444
 8001370:	40020400 	.word	0x40020400
 8001374:	40020000 	.word	0x40020000

08001378 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8001386:	4618      	mov	r0, r3
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001390:	b480      	push	{r7}
 8001392:	b08b      	sub	sp, #44	; 0x2c
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800139a:	2300      	movs	r3, #0
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a2:	e169      	b.n	8001678 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013a4:	2201      	movs	r2, #1
 80013a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	69fa      	ldr	r2, [r7, #28]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	429a      	cmp	r2, r3
 80013be:	f040 8158 	bne.w	8001672 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	4a9a      	ldr	r2, [pc, #616]	; (8001630 <HAL_GPIO_Init+0x2a0>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d05e      	beq.n	800148a <HAL_GPIO_Init+0xfa>
 80013cc:	4a98      	ldr	r2, [pc, #608]	; (8001630 <HAL_GPIO_Init+0x2a0>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d875      	bhi.n	80014be <HAL_GPIO_Init+0x12e>
 80013d2:	4a98      	ldr	r2, [pc, #608]	; (8001634 <HAL_GPIO_Init+0x2a4>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d058      	beq.n	800148a <HAL_GPIO_Init+0xfa>
 80013d8:	4a96      	ldr	r2, [pc, #600]	; (8001634 <HAL_GPIO_Init+0x2a4>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d86f      	bhi.n	80014be <HAL_GPIO_Init+0x12e>
 80013de:	4a96      	ldr	r2, [pc, #600]	; (8001638 <HAL_GPIO_Init+0x2a8>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d052      	beq.n	800148a <HAL_GPIO_Init+0xfa>
 80013e4:	4a94      	ldr	r2, [pc, #592]	; (8001638 <HAL_GPIO_Init+0x2a8>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d869      	bhi.n	80014be <HAL_GPIO_Init+0x12e>
 80013ea:	4a94      	ldr	r2, [pc, #592]	; (800163c <HAL_GPIO_Init+0x2ac>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d04c      	beq.n	800148a <HAL_GPIO_Init+0xfa>
 80013f0:	4a92      	ldr	r2, [pc, #584]	; (800163c <HAL_GPIO_Init+0x2ac>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d863      	bhi.n	80014be <HAL_GPIO_Init+0x12e>
 80013f6:	4a92      	ldr	r2, [pc, #584]	; (8001640 <HAL_GPIO_Init+0x2b0>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d046      	beq.n	800148a <HAL_GPIO_Init+0xfa>
 80013fc:	4a90      	ldr	r2, [pc, #576]	; (8001640 <HAL_GPIO_Init+0x2b0>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d85d      	bhi.n	80014be <HAL_GPIO_Init+0x12e>
 8001402:	2b12      	cmp	r3, #18
 8001404:	d82a      	bhi.n	800145c <HAL_GPIO_Init+0xcc>
 8001406:	2b12      	cmp	r3, #18
 8001408:	d859      	bhi.n	80014be <HAL_GPIO_Init+0x12e>
 800140a:	a201      	add	r2, pc, #4	; (adr r2, 8001410 <HAL_GPIO_Init+0x80>)
 800140c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001410:	0800148b 	.word	0x0800148b
 8001414:	08001465 	.word	0x08001465
 8001418:	08001477 	.word	0x08001477
 800141c:	080014b9 	.word	0x080014b9
 8001420:	080014bf 	.word	0x080014bf
 8001424:	080014bf 	.word	0x080014bf
 8001428:	080014bf 	.word	0x080014bf
 800142c:	080014bf 	.word	0x080014bf
 8001430:	080014bf 	.word	0x080014bf
 8001434:	080014bf 	.word	0x080014bf
 8001438:	080014bf 	.word	0x080014bf
 800143c:	080014bf 	.word	0x080014bf
 8001440:	080014bf 	.word	0x080014bf
 8001444:	080014bf 	.word	0x080014bf
 8001448:	080014bf 	.word	0x080014bf
 800144c:	080014bf 	.word	0x080014bf
 8001450:	080014bf 	.word	0x080014bf
 8001454:	0800146d 	.word	0x0800146d
 8001458:	08001481 	.word	0x08001481
 800145c:	4a79      	ldr	r2, [pc, #484]	; (8001644 <HAL_GPIO_Init+0x2b4>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d013      	beq.n	800148a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001462:	e02c      	b.n	80014be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	623b      	str	r3, [r7, #32]
          break;
 800146a:	e029      	b.n	80014c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	3304      	adds	r3, #4
 8001472:	623b      	str	r3, [r7, #32]
          break;
 8001474:	e024      	b.n	80014c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	3308      	adds	r3, #8
 800147c:	623b      	str	r3, [r7, #32]
          break;
 800147e:	e01f      	b.n	80014c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	330c      	adds	r3, #12
 8001486:	623b      	str	r3, [r7, #32]
          break;
 8001488:	e01a      	b.n	80014c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d102      	bne.n	8001498 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001492:	2304      	movs	r3, #4
 8001494:	623b      	str	r3, [r7, #32]
          break;
 8001496:	e013      	b.n	80014c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d105      	bne.n	80014ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014a0:	2308      	movs	r3, #8
 80014a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	69fa      	ldr	r2, [r7, #28]
 80014a8:	611a      	str	r2, [r3, #16]
          break;
 80014aa:	e009      	b.n	80014c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014ac:	2308      	movs	r3, #8
 80014ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69fa      	ldr	r2, [r7, #28]
 80014b4:	615a      	str	r2, [r3, #20]
          break;
 80014b6:	e003      	b.n	80014c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014b8:	2300      	movs	r3, #0
 80014ba:	623b      	str	r3, [r7, #32]
          break;
 80014bc:	e000      	b.n	80014c0 <HAL_GPIO_Init+0x130>
          break;
 80014be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	2bff      	cmp	r3, #255	; 0xff
 80014c4:	d801      	bhi.n	80014ca <HAL_GPIO_Init+0x13a>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	e001      	b.n	80014ce <HAL_GPIO_Init+0x13e>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3304      	adds	r3, #4
 80014ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	2bff      	cmp	r3, #255	; 0xff
 80014d4:	d802      	bhi.n	80014dc <HAL_GPIO_Init+0x14c>
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	e002      	b.n	80014e2 <HAL_GPIO_Init+0x152>
 80014dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014de:	3b08      	subs	r3, #8
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	210f      	movs	r1, #15
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	fa01 f303 	lsl.w	r3, r1, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	401a      	ands	r2, r3
 80014f4:	6a39      	ldr	r1, [r7, #32]
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	fa01 f303 	lsl.w	r3, r1, r3
 80014fc:	431a      	orrs	r2, r3
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 80b1 	beq.w	8001672 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001510:	4b4d      	ldr	r3, [pc, #308]	; (8001648 <HAL_GPIO_Init+0x2b8>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	4a4c      	ldr	r2, [pc, #304]	; (8001648 <HAL_GPIO_Init+0x2b8>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6193      	str	r3, [r2, #24]
 800151c:	4b4a      	ldr	r3, [pc, #296]	; (8001648 <HAL_GPIO_Init+0x2b8>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001528:	4a48      	ldr	r2, [pc, #288]	; (800164c <HAL_GPIO_Init+0x2bc>)
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	089b      	lsrs	r3, r3, #2
 800152e:	3302      	adds	r3, #2
 8001530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001534:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	f003 0303 	and.w	r3, r3, #3
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	220f      	movs	r2, #15
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	4013      	ands	r3, r2
 800154a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a40      	ldr	r2, [pc, #256]	; (8001650 <HAL_GPIO_Init+0x2c0>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d013      	beq.n	800157c <HAL_GPIO_Init+0x1ec>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a3f      	ldr	r2, [pc, #252]	; (8001654 <HAL_GPIO_Init+0x2c4>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d00d      	beq.n	8001578 <HAL_GPIO_Init+0x1e8>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a3e      	ldr	r2, [pc, #248]	; (8001658 <HAL_GPIO_Init+0x2c8>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d007      	beq.n	8001574 <HAL_GPIO_Init+0x1e4>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a3d      	ldr	r2, [pc, #244]	; (800165c <HAL_GPIO_Init+0x2cc>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d101      	bne.n	8001570 <HAL_GPIO_Init+0x1e0>
 800156c:	2303      	movs	r3, #3
 800156e:	e006      	b.n	800157e <HAL_GPIO_Init+0x1ee>
 8001570:	2304      	movs	r3, #4
 8001572:	e004      	b.n	800157e <HAL_GPIO_Init+0x1ee>
 8001574:	2302      	movs	r3, #2
 8001576:	e002      	b.n	800157e <HAL_GPIO_Init+0x1ee>
 8001578:	2301      	movs	r3, #1
 800157a:	e000      	b.n	800157e <HAL_GPIO_Init+0x1ee>
 800157c:	2300      	movs	r3, #0
 800157e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001580:	f002 0203 	and.w	r2, r2, #3
 8001584:	0092      	lsls	r2, r2, #2
 8001586:	4093      	lsls	r3, r2
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	4313      	orrs	r3, r2
 800158c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800158e:	492f      	ldr	r1, [pc, #188]	; (800164c <HAL_GPIO_Init+0x2bc>)
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	089b      	lsrs	r3, r3, #2
 8001594:	3302      	adds	r3, #2
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d006      	beq.n	80015b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015a8:	4b2d      	ldr	r3, [pc, #180]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	492c      	ldr	r1, [pc, #176]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	600b      	str	r3, [r1, #0]
 80015b4:	e006      	b.n	80015c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015b6:	4b2a      	ldr	r3, [pc, #168]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	43db      	mvns	r3, r3
 80015be:	4928      	ldr	r1, [pc, #160]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 80015c0:	4013      	ands	r3, r2
 80015c2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d006      	beq.n	80015de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015d0:	4b23      	ldr	r3, [pc, #140]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	4922      	ldr	r1, [pc, #136]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	4313      	orrs	r3, r2
 80015da:	604b      	str	r3, [r1, #4]
 80015dc:	e006      	b.n	80015ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015de:	4b20      	ldr	r3, [pc, #128]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	491e      	ldr	r1, [pc, #120]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 80015e8:	4013      	ands	r3, r2
 80015ea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d006      	beq.n	8001606 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015f8:	4b19      	ldr	r3, [pc, #100]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	4918      	ldr	r1, [pc, #96]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	4313      	orrs	r3, r2
 8001602:	608b      	str	r3, [r1, #8]
 8001604:	e006      	b.n	8001614 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	43db      	mvns	r3, r3
 800160e:	4914      	ldr	r1, [pc, #80]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 8001610:	4013      	ands	r3, r2
 8001612:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d021      	beq.n	8001664 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001620:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 8001622:	68da      	ldr	r2, [r3, #12]
 8001624:	490e      	ldr	r1, [pc, #56]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	4313      	orrs	r3, r2
 800162a:	60cb      	str	r3, [r1, #12]
 800162c:	e021      	b.n	8001672 <HAL_GPIO_Init+0x2e2>
 800162e:	bf00      	nop
 8001630:	10320000 	.word	0x10320000
 8001634:	10310000 	.word	0x10310000
 8001638:	10220000 	.word	0x10220000
 800163c:	10210000 	.word	0x10210000
 8001640:	10120000 	.word	0x10120000
 8001644:	10110000 	.word	0x10110000
 8001648:	40021000 	.word	0x40021000
 800164c:	40010000 	.word	0x40010000
 8001650:	40010800 	.word	0x40010800
 8001654:	40010c00 	.word	0x40010c00
 8001658:	40011000 	.word	0x40011000
 800165c:	40011400 	.word	0x40011400
 8001660:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001664:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <HAL_GPIO_Init+0x304>)
 8001666:	68da      	ldr	r2, [r3, #12]
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	43db      	mvns	r3, r3
 800166c:	4909      	ldr	r1, [pc, #36]	; (8001694 <HAL_GPIO_Init+0x304>)
 800166e:	4013      	ands	r3, r2
 8001670:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	3301      	adds	r3, #1
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	fa22 f303 	lsr.w	r3, r2, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	f47f ae8e 	bne.w	80013a4 <HAL_GPIO_Init+0x14>
  }
}
 8001688:	bf00      	nop
 800168a:	bf00      	nop
 800168c:	372c      	adds	r7, #44	; 0x2c
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr
 8001694:	40010400 	.word	0x40010400

08001698 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	887b      	ldrh	r3, [r7, #2]
 80016aa:	4013      	ands	r3, r2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d002      	beq.n	80016b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016b0:	2301      	movs	r3, #1
 80016b2:	73fb      	strb	r3, [r7, #15]
 80016b4:	e001      	b.n	80016ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016b6:	2300      	movs	r3, #0
 80016b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr

080016c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	460b      	mov	r3, r1
 80016d0:	807b      	strh	r3, [r7, #2]
 80016d2:	4613      	mov	r3, r2
 80016d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016d6:	787b      	ldrb	r3, [r7, #1]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016dc:	887a      	ldrh	r2, [r7, #2]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016e2:	e003      	b.n	80016ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016e4:	887b      	ldrh	r3, [r7, #2]
 80016e6:	041a      	lsls	r2, r3, #16
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	611a      	str	r2, [r3, #16]
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr
	...

080016f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e12b      	b.n	8001962 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d106      	bne.n	8001724 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff fa28 	bl	8000b74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2224      	movs	r2, #36	; 0x24
 8001728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0201 	bic.w	r2, r2, #1
 800173a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800174a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800175a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800175c:	f002 fade 	bl	8003d1c <HAL_RCC_GetPCLK1Freq>
 8001760:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	4a81      	ldr	r2, [pc, #516]	; (800196c <HAL_I2C_Init+0x274>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d807      	bhi.n	800177c <HAL_I2C_Init+0x84>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4a80      	ldr	r2, [pc, #512]	; (8001970 <HAL_I2C_Init+0x278>)
 8001770:	4293      	cmp	r3, r2
 8001772:	bf94      	ite	ls
 8001774:	2301      	movls	r3, #1
 8001776:	2300      	movhi	r3, #0
 8001778:	b2db      	uxtb	r3, r3
 800177a:	e006      	b.n	800178a <HAL_I2C_Init+0x92>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4a7d      	ldr	r2, [pc, #500]	; (8001974 <HAL_I2C_Init+0x27c>)
 8001780:	4293      	cmp	r3, r2
 8001782:	bf94      	ite	ls
 8001784:	2301      	movls	r3, #1
 8001786:	2300      	movhi	r3, #0
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e0e7      	b.n	8001962 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4a78      	ldr	r2, [pc, #480]	; (8001978 <HAL_I2C_Init+0x280>)
 8001796:	fba2 2303 	umull	r2, r3, r2, r3
 800179a:	0c9b      	lsrs	r3, r3, #18
 800179c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68ba      	ldr	r2, [r7, #8]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	4a6a      	ldr	r2, [pc, #424]	; (800196c <HAL_I2C_Init+0x274>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d802      	bhi.n	80017cc <HAL_I2C_Init+0xd4>
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	3301      	adds	r3, #1
 80017ca:	e009      	b.n	80017e0 <HAL_I2C_Init+0xe8>
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017d2:	fb02 f303 	mul.w	r3, r2, r3
 80017d6:	4a69      	ldr	r2, [pc, #420]	; (800197c <HAL_I2C_Init+0x284>)
 80017d8:	fba2 2303 	umull	r2, r3, r2, r3
 80017dc:	099b      	lsrs	r3, r3, #6
 80017de:	3301      	adds	r3, #1
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6812      	ldr	r2, [r2, #0]
 80017e4:	430b      	orrs	r3, r1
 80017e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80017f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	495c      	ldr	r1, [pc, #368]	; (800196c <HAL_I2C_Init+0x274>)
 80017fc:	428b      	cmp	r3, r1
 80017fe:	d819      	bhi.n	8001834 <HAL_I2C_Init+0x13c>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	1e59      	subs	r1, r3, #1
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	fbb1 f3f3 	udiv	r3, r1, r3
 800180e:	1c59      	adds	r1, r3, #1
 8001810:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001814:	400b      	ands	r3, r1
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00a      	beq.n	8001830 <HAL_I2C_Init+0x138>
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	1e59      	subs	r1, r3, #1
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	fbb1 f3f3 	udiv	r3, r1, r3
 8001828:	3301      	adds	r3, #1
 800182a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800182e:	e051      	b.n	80018d4 <HAL_I2C_Init+0x1dc>
 8001830:	2304      	movs	r3, #4
 8001832:	e04f      	b.n	80018d4 <HAL_I2C_Init+0x1dc>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d111      	bne.n	8001860 <HAL_I2C_Init+0x168>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	1e58      	subs	r0, r3, #1
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6859      	ldr	r1, [r3, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	440b      	add	r3, r1
 800184a:	fbb0 f3f3 	udiv	r3, r0, r3
 800184e:	3301      	adds	r3, #1
 8001850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001854:	2b00      	cmp	r3, #0
 8001856:	bf0c      	ite	eq
 8001858:	2301      	moveq	r3, #1
 800185a:	2300      	movne	r3, #0
 800185c:	b2db      	uxtb	r3, r3
 800185e:	e012      	b.n	8001886 <HAL_I2C_Init+0x18e>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	1e58      	subs	r0, r3, #1
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6859      	ldr	r1, [r3, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	0099      	lsls	r1, r3, #2
 8001870:	440b      	add	r3, r1
 8001872:	fbb0 f3f3 	udiv	r3, r0, r3
 8001876:	3301      	adds	r3, #1
 8001878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800187c:	2b00      	cmp	r3, #0
 800187e:	bf0c      	ite	eq
 8001880:	2301      	moveq	r3, #1
 8001882:	2300      	movne	r3, #0
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_I2C_Init+0x196>
 800188a:	2301      	movs	r3, #1
 800188c:	e022      	b.n	80018d4 <HAL_I2C_Init+0x1dc>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10e      	bne.n	80018b4 <HAL_I2C_Init+0x1bc>
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	1e58      	subs	r0, r3, #1
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6859      	ldr	r1, [r3, #4]
 800189e:	460b      	mov	r3, r1
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	440b      	add	r3, r1
 80018a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80018a8:	3301      	adds	r3, #1
 80018aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018b2:	e00f      	b.n	80018d4 <HAL_I2C_Init+0x1dc>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	1e58      	subs	r0, r3, #1
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6859      	ldr	r1, [r3, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	0099      	lsls	r1, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ca:	3301      	adds	r3, #1
 80018cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	6809      	ldr	r1, [r1, #0]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69da      	ldr	r2, [r3, #28]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001902:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6911      	ldr	r1, [r2, #16]
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	68d2      	ldr	r2, [r2, #12]
 800190e:	4311      	orrs	r1, r2
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	6812      	ldr	r2, [r2, #0]
 8001914:	430b      	orrs	r3, r1
 8001916:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	695a      	ldr	r2, [r3, #20]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 0201 	orr.w	r2, r2, #1
 8001942:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2220      	movs	r2, #32
 800194e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	000186a0 	.word	0x000186a0
 8001970:	001e847f 	.word	0x001e847f
 8001974:	003d08ff 	.word	0x003d08ff
 8001978:	431bde83 	.word	0x431bde83
 800197c:	10624dd3 	.word	0x10624dd3

08001980 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001988:	2300      	movs	r3, #0
 800198a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001998:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80019a0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019a8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	2b10      	cmp	r3, #16
 80019ae:	d003      	beq.n	80019b8 <HAL_I2C_EV_IRQHandler+0x38>
 80019b0:	7bfb      	ldrb	r3, [r7, #15]
 80019b2:	2b40      	cmp	r3, #64	; 0x40
 80019b4:	f040 80c1 	bne.w	8001b3a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10d      	bne.n	80019ee <HAL_I2C_EV_IRQHandler+0x6e>
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80019d8:	d003      	beq.n	80019e2 <HAL_I2C_EV_IRQHandler+0x62>
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80019e0:	d101      	bne.n	80019e6 <HAL_I2C_EV_IRQHandler+0x66>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <HAL_I2C_EV_IRQHandler+0x68>
 80019e6:	2300      	movs	r3, #0
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	f000 8132 	beq.w	8001c52 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00c      	beq.n	8001a12 <HAL_I2C_EV_IRQHandler+0x92>
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	0a5b      	lsrs	r3, r3, #9
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d006      	beq.n	8001a12 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f001 fc75 	bl	80032f4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 fd77 	bl	80024fe <I2C_Master_SB>
 8001a10:	e092      	b.n	8001b38 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	08db      	lsrs	r3, r3, #3
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d009      	beq.n	8001a32 <HAL_I2C_EV_IRQHandler+0xb2>
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	0a5b      	lsrs	r3, r3, #9
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 fdec 	bl	8002608 <I2C_Master_ADD10>
 8001a30:	e082      	b.n	8001b38 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	085b      	lsrs	r3, r3, #1
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d009      	beq.n	8001a52 <HAL_I2C_EV_IRQHandler+0xd2>
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	0a5b      	lsrs	r3, r3, #9
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 fe05 	bl	800265a <I2C_Master_ADDR>
 8001a50:	e072      	b.n	8001b38 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	089b      	lsrs	r3, r3, #2
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d03b      	beq.n	8001ad6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a6c:	f000 80f3 	beq.w	8001c56 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	09db      	lsrs	r3, r3, #7
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00f      	beq.n	8001a9c <HAL_I2C_EV_IRQHandler+0x11c>
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	0a9b      	lsrs	r3, r3, #10
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d009      	beq.n	8001a9c <HAL_I2C_EV_IRQHandler+0x11c>
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	089b      	lsrs	r3, r3, #2
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d103      	bne.n	8001a9c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 f9f1 	bl	8001e7c <I2C_MasterTransmit_TXE>
 8001a9a:	e04d      	b.n	8001b38 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	089b      	lsrs	r3, r3, #2
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 80d6 	beq.w	8001c56 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	0a5b      	lsrs	r3, r3, #9
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 80cf 	beq.w	8001c56 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001ab8:	7bbb      	ldrb	r3, [r7, #14]
 8001aba:	2b21      	cmp	r3, #33	; 0x21
 8001abc:	d103      	bne.n	8001ac6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 fa78 	bl	8001fb4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ac4:	e0c7      	b.n	8001c56 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	2b40      	cmp	r3, #64	; 0x40
 8001aca:	f040 80c4 	bne.w	8001c56 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 fae6 	bl	80020a0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ad4:	e0bf      	b.n	8001c56 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ae0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ae4:	f000 80b7 	beq.w	8001c56 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	099b      	lsrs	r3, r3, #6
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00f      	beq.n	8001b14 <HAL_I2C_EV_IRQHandler+0x194>
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	0a9b      	lsrs	r3, r3, #10
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d009      	beq.n	8001b14 <HAL_I2C_EV_IRQHandler+0x194>
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	089b      	lsrs	r3, r3, #2
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d103      	bne.n	8001b14 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 fb5b 	bl	80021c8 <I2C_MasterReceive_RXNE>
 8001b12:	e011      	b.n	8001b38 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	089b      	lsrs	r3, r3, #2
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 809a 	beq.w	8001c56 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	0a5b      	lsrs	r3, r3, #9
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 8093 	beq.w	8001c56 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 fbfa 	bl	800232a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b36:	e08e      	b.n	8001c56 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001b38:	e08d      	b.n	8001c56 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d004      	beq.n	8001b4c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	61fb      	str	r3, [r7, #28]
 8001b4a:	e007      	b.n	8001b5c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	085b      	lsrs	r3, r3, #1
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d012      	beq.n	8001b8e <HAL_I2C_EV_IRQHandler+0x20e>
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	0a5b      	lsrs	r3, r3, #9
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00c      	beq.n	8001b8e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001b84:	69b9      	ldr	r1, [r7, #24]
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 ffbe 	bl	8002b08 <I2C_Slave_ADDR>
 8001b8c:	e066      	b.n	8001c5c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	091b      	lsrs	r3, r3, #4
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d009      	beq.n	8001bae <HAL_I2C_EV_IRQHandler+0x22e>
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	0a5b      	lsrs	r3, r3, #9
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 fff8 	bl	8002b9c <I2C_Slave_STOPF>
 8001bac:	e056      	b.n	8001c5c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001bae:	7bbb      	ldrb	r3, [r7, #14]
 8001bb0:	2b21      	cmp	r3, #33	; 0x21
 8001bb2:	d002      	beq.n	8001bba <HAL_I2C_EV_IRQHandler+0x23a>
 8001bb4:	7bbb      	ldrb	r3, [r7, #14]
 8001bb6:	2b29      	cmp	r3, #41	; 0x29
 8001bb8:	d125      	bne.n	8001c06 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	09db      	lsrs	r3, r3, #7
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00f      	beq.n	8001be6 <HAL_I2C_EV_IRQHandler+0x266>
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	0a9b      	lsrs	r3, r3, #10
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d009      	beq.n	8001be6 <HAL_I2C_EV_IRQHandler+0x266>
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	089b      	lsrs	r3, r3, #2
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d103      	bne.n	8001be6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 fed6 	bl	8002990 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001be4:	e039      	b.n	8001c5a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	089b      	lsrs	r3, r3, #2
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d033      	beq.n	8001c5a <HAL_I2C_EV_IRQHandler+0x2da>
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	0a5b      	lsrs	r3, r3, #9
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d02d      	beq.n	8001c5a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 ff03 	bl	8002a0a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c04:	e029      	b.n	8001c5a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	099b      	lsrs	r3, r3, #6
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00f      	beq.n	8001c32 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	0a9b      	lsrs	r3, r3, #10
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d009      	beq.n	8001c32 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	089b      	lsrs	r3, r3, #2
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d103      	bne.n	8001c32 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 ff0d 	bl	8002a4a <I2C_SlaveReceive_RXNE>
 8001c30:	e014      	b.n	8001c5c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	089b      	lsrs	r3, r3, #2
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00e      	beq.n	8001c5c <HAL_I2C_EV_IRQHandler+0x2dc>
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	0a5b      	lsrs	r3, r3, #9
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d008      	beq.n	8001c5c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 ff3b 	bl	8002ac6 <I2C_SlaveReceive_BTF>
 8001c50:	e004      	b.n	8001c5c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001c52:	bf00      	nop
 8001c54:	e002      	b.n	8001c5c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c56:	bf00      	nop
 8001c58:	e000      	b.n	8001c5c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c5a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001c5c:	3720      	adds	r7, #32
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b08a      	sub	sp, #40	; 0x28
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c84:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001c86:	6a3b      	ldr	r3, [r7, #32]
 8001c88:	0a1b      	lsrs	r3, r3, #8
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d016      	beq.n	8001cc0 <HAL_I2C_ER_IRQHandler+0x5e>
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	0a1b      	lsrs	r3, r3, #8
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d010      	beq.n	8001cc0 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001cae:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cbe:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001cc0:	6a3b      	ldr	r3, [r7, #32]
 8001cc2:	0a5b      	lsrs	r3, r3, #9
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00e      	beq.n	8001cea <HAL_I2C_ER_IRQHandler+0x88>
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	0a1b      	lsrs	r3, r3, #8
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d008      	beq.n	8001cea <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	f043 0302 	orr.w	r3, r3, #2
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001ce8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	0a9b      	lsrs	r3, r3, #10
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d03f      	beq.n	8001d76 <HAL_I2C_ER_IRQHandler+0x114>
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	0a1b      	lsrs	r3, r3, #8
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d039      	beq.n	8001d76 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8001d02:	7efb      	ldrb	r3, [r7, #27]
 8001d04:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d14:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001d1c:	7ebb      	ldrb	r3, [r7, #26]
 8001d1e:	2b20      	cmp	r3, #32
 8001d20:	d112      	bne.n	8001d48 <HAL_I2C_ER_IRQHandler+0xe6>
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d10f      	bne.n	8001d48 <HAL_I2C_ER_IRQHandler+0xe6>
 8001d28:	7cfb      	ldrb	r3, [r7, #19]
 8001d2a:	2b21      	cmp	r3, #33	; 0x21
 8001d2c:	d008      	beq.n	8001d40 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001d2e:	7cfb      	ldrb	r3, [r7, #19]
 8001d30:	2b29      	cmp	r3, #41	; 0x29
 8001d32:	d005      	beq.n	8001d40 <HAL_I2C_ER_IRQHandler+0xde>
 8001d34:	7cfb      	ldrb	r3, [r7, #19]
 8001d36:	2b28      	cmp	r3, #40	; 0x28
 8001d38:	d106      	bne.n	8001d48 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2b21      	cmp	r3, #33	; 0x21
 8001d3e:	d103      	bne.n	8001d48 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f001 f85b 	bl	8002dfc <I2C_Slave_AF>
 8001d46:	e016      	b.n	8001d76 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d50:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	f043 0304 	orr.w	r3, r3, #4
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001d5a:	7efb      	ldrb	r3, [r7, #27]
 8001d5c:	2b10      	cmp	r3, #16
 8001d5e:	d002      	beq.n	8001d66 <HAL_I2C_ER_IRQHandler+0x104>
 8001d60:	7efb      	ldrb	r3, [r7, #27]
 8001d62:	2b40      	cmp	r3, #64	; 0x40
 8001d64:	d107      	bne.n	8001d76 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d74:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001d76:	6a3b      	ldr	r3, [r7, #32]
 8001d78:	0adb      	lsrs	r3, r3, #11
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00e      	beq.n	8001da0 <HAL_I2C_ER_IRQHandler+0x13e>
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	0a1b      	lsrs	r3, r3, #8
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d008      	beq.n	8001da0 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	f043 0308 	orr.w	r3, r3, #8
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001d9e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d008      	beq.n	8001db8 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	431a      	orrs	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f001 f892 	bl	8002edc <I2C_ITError>
  }
}
 8001db8:	bf00      	nop
 8001dba:	3728      	adds	r7, #40	; 0x28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr

08001dd2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr

08001de4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr

08001df6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr

08001e08 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	70fb      	strb	r3, [r7, #3]
 8001e14:	4613      	mov	r3, r2
 8001e16:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr

08001e22 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr

08001e34 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr

08001e46 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr

08001e58 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr

08001e6a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e8a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e92:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e98:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d150      	bne.n	8001f44 <I2C_MasterTransmit_TXE+0xc8>
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	2b21      	cmp	r3, #33	; 0x21
 8001ea6:	d14d      	bne.n	8001f44 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	2b08      	cmp	r3, #8
 8001eac:	d01d      	beq.n	8001eea <I2C_MasterTransmit_TXE+0x6e>
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	2b20      	cmp	r3, #32
 8001eb2:	d01a      	beq.n	8001eea <I2C_MasterTransmit_TXE+0x6e>
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001eba:	d016      	beq.n	8001eea <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001eca:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2211      	movs	r2, #17
 8001ed0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2220      	movs	r2, #32
 8001ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff ff6c 	bl	8001dc0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001ee8:	e060      	b.n	8001fac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ef8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f08:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2220      	movs	r2, #32
 8001f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b40      	cmp	r3, #64	; 0x40
 8001f22:	d107      	bne.n	8001f34 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff ff81 	bl	8001e34 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001f32:	e03b      	b.n	8001fac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff ff3f 	bl	8001dc0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001f42:	e033      	b.n	8001fac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	2b21      	cmp	r3, #33	; 0x21
 8001f48:	d005      	beq.n	8001f56 <I2C_MasterTransmit_TXE+0xda>
 8001f4a:	7bbb      	ldrb	r3, [r7, #14]
 8001f4c:	2b40      	cmp	r3, #64	; 0x40
 8001f4e:	d12d      	bne.n	8001fac <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	2b22      	cmp	r3, #34	; 0x22
 8001f54:	d12a      	bne.n	8001fac <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d108      	bne.n	8001f72 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f6e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001f70:	e01c      	b.n	8001fac <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b40      	cmp	r3, #64	; 0x40
 8001f7c:	d103      	bne.n	8001f86 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f88e 	bl	80020a0 <I2C_MemoryTransmit_TXE_BTF>
}
 8001f84:	e012      	b.n	8001fac <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	781a      	ldrb	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001faa:	e7ff      	b.n	8001fac <I2C_MasterTransmit_TXE+0x130>
 8001fac:	bf00      	nop
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b21      	cmp	r3, #33	; 0x21
 8001fcc:	d164      	bne.n	8002098 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d012      	beq.n	8001ffe <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	781a      	ldrb	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe8:	1c5a      	adds	r2, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001ffc:	e04c      	b.n	8002098 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2b08      	cmp	r3, #8
 8002002:	d01d      	beq.n	8002040 <I2C_MasterTransmit_BTF+0x8c>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2b20      	cmp	r3, #32
 8002008:	d01a      	beq.n	8002040 <I2C_MasterTransmit_BTF+0x8c>
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002010:	d016      	beq.n	8002040 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002020:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2211      	movs	r2, #17
 8002026:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2220      	movs	r2, #32
 8002034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff fec1 	bl	8001dc0 <HAL_I2C_MasterTxCpltCallback>
}
 800203e:	e02b      	b.n	8002098 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800204e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800205e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2220      	movs	r2, #32
 800206a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b40      	cmp	r3, #64	; 0x40
 8002078:	d107      	bne.n	800208a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff fed6 	bl	8001e34 <HAL_I2C_MemTxCpltCallback>
}
 8002088:	e006      	b.n	8002098 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7ff fe94 	bl	8001dc0 <HAL_I2C_MasterTxCpltCallback>
}
 8002098:	bf00      	nop
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d11d      	bne.n	80020f4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d10b      	bne.n	80020d8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020d0:	1c9a      	adds	r2, r3, #2
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80020d6:	e073      	b.n	80021c0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020dc:	b29b      	uxth	r3, r3
 80020de:	121b      	asrs	r3, r3, #8
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80020f2:	e065      	b.n	80021c0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d10b      	bne.n	8002114 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002100:	b2da      	uxtb	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800210c:	1c5a      	adds	r2, r3, #1
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002112:	e055      	b.n	80021c0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002118:	2b02      	cmp	r3, #2
 800211a:	d151      	bne.n	80021c0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	2b22      	cmp	r3, #34	; 0x22
 8002120:	d10d      	bne.n	800213e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002130:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002136:	1c5a      	adds	r2, r3, #1
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800213c:	e040      	b.n	80021c0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002142:	b29b      	uxth	r3, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	d015      	beq.n	8002174 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002148:	7bfb      	ldrb	r3, [r7, #15]
 800214a:	2b21      	cmp	r3, #33	; 0x21
 800214c:	d112      	bne.n	8002174 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002152:	781a      	ldrb	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002168:	b29b      	uxth	r3, r3
 800216a:	3b01      	subs	r3, #1
 800216c:	b29a      	uxth	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002172:	e025      	b.n	80021c0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002178:	b29b      	uxth	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d120      	bne.n	80021c0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800217e:	7bfb      	ldrb	r3, [r7, #15]
 8002180:	2b21      	cmp	r3, #33	; 0x21
 8002182:	d11d      	bne.n	80021c0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002192:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021a2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2220      	movs	r2, #32
 80021ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff fe3a 	bl	8001e34 <HAL_I2C_MemTxCpltCallback>
}
 80021c0:	bf00      	nop
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b22      	cmp	r3, #34	; 0x22
 80021da:	f040 80a2 	bne.w	8002322 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2b03      	cmp	r3, #3
 80021ea:	d921      	bls.n	8002230 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	691a      	ldr	r2, [r3, #16]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002208:	b29b      	uxth	r3, r3
 800220a:	3b01      	subs	r3, #1
 800220c:	b29a      	uxth	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002216:	b29b      	uxth	r3, r3
 8002218:	2b03      	cmp	r3, #3
 800221a:	f040 8082 	bne.w	8002322 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800222c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800222e:	e078      	b.n	8002322 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002234:	2b02      	cmp	r3, #2
 8002236:	d074      	beq.n	8002322 <I2C_MasterReceive_RXNE+0x15a>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d002      	beq.n	8002244 <I2C_MasterReceive_RXNE+0x7c>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d16e      	bne.n	8002322 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f001 f823 	bl	8003290 <I2C_WaitOnSTOPRequestThroughIT>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d142      	bne.n	80022d6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800225e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800226e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691a      	ldr	r2, [r3, #16]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228c:	b29b      	uxth	r3, r3
 800228e:	3b01      	subs	r3, #1
 8002290:	b29a      	uxth	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2220      	movs	r2, #32
 800229a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b40      	cmp	r3, #64	; 0x40
 80022a8:	d10a      	bne.n	80022c0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff fdc4 	bl	8001e46 <HAL_I2C_MemRxCpltCallback>
}
 80022be:	e030      	b.n	8002322 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2212      	movs	r2, #18
 80022cc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff fd7f 	bl	8001dd2 <HAL_I2C_MasterRxCpltCallback>
}
 80022d4:	e025      	b.n	8002322 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80022e4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	691a      	ldr	r2, [r3, #16]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002302:	b29b      	uxth	r3, r3
 8002304:	3b01      	subs	r3, #1
 8002306:	b29a      	uxth	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2220      	movs	r2, #32
 8002310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff fd9b 	bl	8001e58 <HAL_I2C_ErrorCallback>
}
 8002322:	bf00      	nop
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b084      	sub	sp, #16
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002336:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233c:	b29b      	uxth	r3, r3
 800233e:	2b04      	cmp	r3, #4
 8002340:	d11b      	bne.n	800237a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002350:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	691a      	ldr	r2, [r3, #16]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236e:	b29b      	uxth	r3, r3
 8002370:	3b01      	subs	r3, #1
 8002372:	b29a      	uxth	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002378:	e0bd      	b.n	80024f6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237e:	b29b      	uxth	r3, r3
 8002380:	2b03      	cmp	r3, #3
 8002382:	d129      	bne.n	80023d8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002392:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2b04      	cmp	r3, #4
 8002398:	d00a      	beq.n	80023b0 <I2C_MasterReceive_BTF+0x86>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2b02      	cmp	r3, #2
 800239e:	d007      	beq.n	80023b0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ae:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691a      	ldr	r2, [r3, #16]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	3b01      	subs	r3, #1
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80023d6:	e08e      	b.n	80024f6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023dc:	b29b      	uxth	r3, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d176      	bne.n	80024d0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d002      	beq.n	80023ee <I2C_MasterReceive_BTF+0xc4>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2b10      	cmp	r3, #16
 80023ec:	d108      	bne.n	8002400 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	e019      	b.n	8002434 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2b04      	cmp	r3, #4
 8002404:	d002      	beq.n	800240c <I2C_MasterReceive_BTF+0xe2>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2b02      	cmp	r3, #2
 800240a:	d108      	bne.n	800241e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	e00a      	b.n	8002434 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2b10      	cmp	r3, #16
 8002422:	d007      	beq.n	8002434 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002432:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	691a      	ldr	r2, [r3, #16]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002450:	b29b      	uxth	r3, r3
 8002452:	3b01      	subs	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	691a      	ldr	r2, [r3, #16]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246c:	1c5a      	adds	r2, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002476:	b29b      	uxth	r3, r3
 8002478:	3b01      	subs	r3, #1
 800247a:	b29a      	uxth	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800248e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2220      	movs	r2, #32
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b40      	cmp	r3, #64	; 0x40
 80024a2:	d10a      	bne.n	80024ba <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff fcc7 	bl	8001e46 <HAL_I2C_MemRxCpltCallback>
}
 80024b8:	e01d      	b.n	80024f6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2212      	movs	r2, #18
 80024c6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7ff fc82 	bl	8001dd2 <HAL_I2C_MasterRxCpltCallback>
}
 80024ce:	e012      	b.n	80024f6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691a      	ldr	r2, [r3, #16]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80024f6:	bf00      	nop
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b40      	cmp	r3, #64	; 0x40
 8002510:	d117      	bne.n	8002542 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002516:	2b00      	cmp	r3, #0
 8002518:	d109      	bne.n	800252e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251e:	b2db      	uxtb	r3, r3
 8002520:	461a      	mov	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800252a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800252c:	e067      	b.n	80025fe <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002532:	b2db      	uxtb	r3, r3
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	b2da      	uxtb	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	611a      	str	r2, [r3, #16]
}
 8002540:	e05d      	b.n	80025fe <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800254a:	d133      	bne.n	80025b4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b21      	cmp	r3, #33	; 0x21
 8002556:	d109      	bne.n	800256c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255c:	b2db      	uxtb	r3, r3
 800255e:	461a      	mov	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002568:	611a      	str	r2, [r3, #16]
 800256a:	e008      	b.n	800257e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002570:	b2db      	uxtb	r3, r3
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	b2da      	uxtb	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002582:	2b00      	cmp	r3, #0
 8002584:	d004      	beq.n	8002590 <I2C_Master_SB+0x92>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	2b00      	cmp	r3, #0
 800258e:	d108      	bne.n	80025a2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002594:	2b00      	cmp	r3, #0
 8002596:	d032      	beq.n	80025fe <I2C_Master_SB+0x100>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d02d      	beq.n	80025fe <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025b0:	605a      	str	r2, [r3, #4]
}
 80025b2:	e024      	b.n	80025fe <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10e      	bne.n	80025da <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	11db      	asrs	r3, r3, #7
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	f003 0306 	and.w	r3, r3, #6
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	f063 030f 	orn	r3, r3, #15
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	611a      	str	r2, [r3, #16]
}
 80025d8:	e011      	b.n	80025fe <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d10d      	bne.n	80025fe <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	11db      	asrs	r3, r3, #7
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	f003 0306 	and.w	r3, r3, #6
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	f063 030e 	orn	r3, r3, #14
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	611a      	str	r2, [r3, #16]
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002614:	b2da      	uxtb	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002620:	2b00      	cmp	r3, #0
 8002622:	d004      	beq.n	800262e <I2C_Master_ADD10+0x26>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262a:	2b00      	cmp	r3, #0
 800262c:	d108      	bne.n	8002640 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00c      	beq.n	8002650 <I2C_Master_ADD10+0x48>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263c:	2b00      	cmp	r3, #0
 800263e:	d007      	beq.n	8002650 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800264e:	605a      	str	r2, [r3, #4]
  }
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr

0800265a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800265a:	b480      	push	{r7}
 800265c:	b091      	sub	sp, #68	; 0x44
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002668:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b22      	cmp	r3, #34	; 0x22
 8002682:	f040 8174 	bne.w	800296e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10f      	bne.n	80026ae <I2C_Master_ADDR+0x54>
 800268e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002692:	2b40      	cmp	r3, #64	; 0x40
 8002694:	d10b      	bne.n	80026ae <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002696:	2300      	movs	r3, #0
 8002698:	633b      	str	r3, [r7, #48]	; 0x30
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	633b      	str	r3, [r7, #48]	; 0x30
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	633b      	str	r3, [r7, #48]	; 0x30
 80026aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ac:	e16b      	b.n	8002986 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d11d      	bne.n	80026f2 <I2C_Master_ADDR+0x98>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80026be:	d118      	bne.n	80026f2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026c0:	2300      	movs	r3, #0
 80026c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026e4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ea:	1c5a      	adds	r2, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	651a      	str	r2, [r3, #80]	; 0x50
 80026f0:	e149      	b.n	8002986 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d113      	bne.n	8002724 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026fc:	2300      	movs	r3, #0
 80026fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	62bb      	str	r3, [r7, #40]	; 0x28
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002710:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	e120      	b.n	8002966 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002728:	b29b      	uxth	r3, r3
 800272a:	2b01      	cmp	r3, #1
 800272c:	f040 808a 	bne.w	8002844 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002732:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002736:	d137      	bne.n	80027a8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002746:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002752:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002756:	d113      	bne.n	8002780 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002766:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002768:	2300      	movs	r3, #0
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	e0f2      	b.n	8002966 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002780:	2300      	movs	r3, #0
 8002782:	623b      	str	r3, [r7, #32]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	623b      	str	r3, [r7, #32]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	623b      	str	r3, [r7, #32]
 8002794:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	e0de      	b.n	8002966 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80027a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027aa:	2b08      	cmp	r3, #8
 80027ac:	d02e      	beq.n	800280c <I2C_Master_ADDR+0x1b2>
 80027ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b0:	2b20      	cmp	r3, #32
 80027b2:	d02b      	beq.n	800280c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80027b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b6:	2b12      	cmp	r3, #18
 80027b8:	d102      	bne.n	80027c0 <I2C_Master_ADDR+0x166>
 80027ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d125      	bne.n	800280c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80027c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d00e      	beq.n	80027e4 <I2C_Master_ADDR+0x18a>
 80027c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d00b      	beq.n	80027e4 <I2C_Master_ADDR+0x18a>
 80027cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ce:	2b10      	cmp	r3, #16
 80027d0:	d008      	beq.n	80027e4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	e007      	b.n	80027f4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027f2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027f4:	2300      	movs	r3, #0
 80027f6:	61fb      	str	r3, [r7, #28]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	61fb      	str	r3, [r7, #28]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	61fb      	str	r3, [r7, #28]
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	e0ac      	b.n	8002966 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800281a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800281c:	2300      	movs	r3, #0
 800281e:	61bb      	str	r3, [r7, #24]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	61bb      	str	r3, [r7, #24]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	61bb      	str	r3, [r7, #24]
 8002830:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	e090      	b.n	8002966 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002848:	b29b      	uxth	r3, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d158      	bne.n	8002900 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800284e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002850:	2b04      	cmp	r3, #4
 8002852:	d021      	beq.n	8002898 <I2C_Master_ADDR+0x23e>
 8002854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002856:	2b02      	cmp	r3, #2
 8002858:	d01e      	beq.n	8002898 <I2C_Master_ADDR+0x23e>
 800285a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800285c:	2b10      	cmp	r3, #16
 800285e:	d01b      	beq.n	8002898 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800286e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	617b      	str	r3, [r7, #20]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	617b      	str	r3, [r7, #20]
 8002884:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	e012      	b.n	80028be <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028a6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a8:	2300      	movs	r3, #0
 80028aa:	613b      	str	r3, [r7, #16]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	613b      	str	r3, [r7, #16]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	613b      	str	r3, [r7, #16]
 80028bc:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028cc:	d14b      	bne.n	8002966 <I2C_Master_ADDR+0x30c>
 80028ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028d4:	d00b      	beq.n	80028ee <I2C_Master_ADDR+0x294>
 80028d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d008      	beq.n	80028ee <I2C_Master_ADDR+0x294>
 80028dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d005      	beq.n	80028ee <I2C_Master_ADDR+0x294>
 80028e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e4:	2b10      	cmp	r3, #16
 80028e6:	d002      	beq.n	80028ee <I2C_Master_ADDR+0x294>
 80028e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ea:	2b20      	cmp	r3, #32
 80028ec:	d13b      	bne.n	8002966 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80028fc:	605a      	str	r2, [r3, #4]
 80028fe:	e032      	b.n	8002966 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800290e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800291a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800291e:	d117      	bne.n	8002950 <I2C_Master_ADDR+0x2f6>
 8002920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002922:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002926:	d00b      	beq.n	8002940 <I2C_Master_ADDR+0x2e6>
 8002928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292a:	2b01      	cmp	r3, #1
 800292c:	d008      	beq.n	8002940 <I2C_Master_ADDR+0x2e6>
 800292e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002930:	2b08      	cmp	r3, #8
 8002932:	d005      	beq.n	8002940 <I2C_Master_ADDR+0x2e6>
 8002934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002936:	2b10      	cmp	r3, #16
 8002938:	d002      	beq.n	8002940 <I2C_Master_ADDR+0x2e6>
 800293a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800293c:	2b20      	cmp	r3, #32
 800293e:	d107      	bne.n	8002950 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800294e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002950:	2300      	movs	r3, #0
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800296c:	e00b      	b.n	8002986 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800296e:	2300      	movs	r3, #0
 8002970:	60bb      	str	r3, [r7, #8]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	60bb      	str	r3, [r7, #8]
 8002982:	68bb      	ldr	r3, [r7, #8]
}
 8002984:	e7ff      	b.n	8002986 <I2C_Master_ADDR+0x32c>
 8002986:	bf00      	nop
 8002988:	3744      	adds	r7, #68	; 0x44
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800299e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d02b      	beq.n	8002a02 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	781a      	ldrb	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	3b01      	subs	r3, #1
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d114      	bne.n	8002a02 <I2C_SlaveTransmit_TXE+0x72>
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
 80029da:	2b29      	cmp	r3, #41	; 0x29
 80029dc:	d111      	bne.n	8002a02 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ec:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2221      	movs	r2, #33	; 0x21
 80029f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2228      	movs	r2, #40	; 0x28
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7ff f9f1 	bl	8001de4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002a02:	bf00      	nop
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d011      	beq.n	8002a40 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	781a      	ldrb	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr

08002a4a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a58:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d02c      	beq.n	8002abe <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691a      	ldr	r2, [r3, #16]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	1c5a      	adds	r2, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	3b01      	subs	r3, #1
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d114      	bne.n	8002abe <I2C_SlaveReceive_RXNE+0x74>
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	2b2a      	cmp	r3, #42	; 0x2a
 8002a98:	d111      	bne.n	8002abe <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aa8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2222      	movs	r2, #34	; 0x22
 8002aae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2228      	movs	r2, #40	; 0x28
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7ff f99c 	bl	8001df6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002abe:	bf00      	nop
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d012      	beq.n	8002afe <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	691a      	ldr	r2, [r3, #16]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	3b01      	subs	r3, #1
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr

08002b08 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002b12:	2300      	movs	r3, #0
 8002b14:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b22:	2b28      	cmp	r3, #40	; 0x28
 8002b24:	d127      	bne.n	8002b76 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b34:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	089b      	lsrs	r3, r3, #2
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002b42:	2301      	movs	r3, #1
 8002b44:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	09db      	lsrs	r3, r3, #7
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d103      	bne.n	8002b5a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	81bb      	strh	r3, [r7, #12]
 8002b58:	e002      	b.n	8002b60 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002b68:	89ba      	ldrh	r2, [r7, #12]
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7ff f94a 	bl	8001e08 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002b74:	e00e      	b.n	8002b94 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b76:	2300      	movs	r3, #0
 8002b78:	60bb      	str	r3, [r7, #8]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	60bb      	str	r3, [r7, #8]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002b94:	bf00      	nop
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002baa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002bba:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60bb      	str	r3, [r7, #8]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	60bb      	str	r3, [r7, #8]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0201 	orr.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002be8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bf8:	d172      	bne.n	8002ce0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	2b22      	cmp	r3, #34	; 0x22
 8002bfe:	d002      	beq.n	8002c06 <I2C_Slave_STOPF+0x6a>
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
 8002c02:	2b2a      	cmp	r3, #42	; 0x2a
 8002c04:	d135      	bne.n	8002c72 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d005      	beq.n	8002c2a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f043 0204 	orr.w	r2, r3, #4
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c38:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fe fb9a 	bl	8001378 <HAL_DMA_GetState>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d049      	beq.n	8002cde <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4e:	4a69      	ldr	r2, [pc, #420]	; (8002df4 <I2C_Slave_STOPF+0x258>)
 8002c50:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fe fa86 	bl	8001168 <HAL_DMA_Abort_IT>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d03d      	beq.n	8002cde <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c6c:	4610      	mov	r0, r2
 8002c6e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c70:	e035      	b.n	8002cde <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d005      	beq.n	8002c96 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f043 0204 	orr.w	r2, r3, #4
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ca4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fe fb64 	bl	8001378 <HAL_DMA_GetState>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d014      	beq.n	8002ce0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cba:	4a4e      	ldr	r2, [pc, #312]	; (8002df4 <I2C_Slave_STOPF+0x258>)
 8002cbc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fe fa50 	bl	8001168 <HAL_DMA_Abort_IT>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d008      	beq.n	8002ce0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002cd8:	4610      	mov	r0, r2
 8002cda:	4798      	blx	r3
 8002cdc:	e000      	b.n	8002ce0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002cde:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d03e      	beq.n	8002d68 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d112      	bne.n	8002d1e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691a      	ldr	r2, [r3, #16]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	1c5a      	adds	r2, r3, #1
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d28:	2b40      	cmp	r3, #64	; 0x40
 8002d2a:	d112      	bne.n	8002d52 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d005      	beq.n	8002d68 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	f043 0204 	orr.w	r2, r3, #4
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f8b3 	bl	8002edc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002d76:	e039      	b.n	8002dec <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
 8002d7a:	2b2a      	cmp	r3, #42	; 0x2a
 8002d7c:	d109      	bne.n	8002d92 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2228      	movs	r2, #40	; 0x28
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f7ff f832 	bl	8001df6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b28      	cmp	r3, #40	; 0x28
 8002d9c:	d111      	bne.n	8002dc2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a15      	ldr	r2, [pc, #84]	; (8002df8 <I2C_Slave_STOPF+0x25c>)
 8002da2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2220      	movs	r2, #32
 8002dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff f831 	bl	8001e22 <HAL_I2C_ListenCpltCallback>
}
 8002dc0:	e014      	b.n	8002dec <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	2b22      	cmp	r3, #34	; 0x22
 8002dc8:	d002      	beq.n	8002dd0 <I2C_Slave_STOPF+0x234>
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
 8002dcc:	2b22      	cmp	r3, #34	; 0x22
 8002dce:	d10d      	bne.n	8002dec <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff f805 	bl	8001df6 <HAL_I2C_SlaveRxCpltCallback>
}
 8002dec:	bf00      	nop
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	08003141 	.word	0x08003141
 8002df8:	ffff0000 	.word	0xffff0000

08002dfc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e10:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d002      	beq.n	8002e1e <I2C_Slave_AF+0x22>
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2b20      	cmp	r3, #32
 8002e1c:	d129      	bne.n	8002e72 <I2C_Slave_AF+0x76>
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	2b28      	cmp	r3, #40	; 0x28
 8002e22:	d126      	bne.n	8002e72 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a2c      	ldr	r2, [pc, #176]	; (8002ed8 <I2C_Slave_AF+0xdc>)
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e38:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e42:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e52:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7fe ffd9 	bl	8001e22 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002e70:	e02e      	b.n	8002ed0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
 8002e74:	2b21      	cmp	r3, #33	; 0x21
 8002e76:	d126      	bne.n	8002ec6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a17      	ldr	r2, [pc, #92]	; (8002ed8 <I2C_Slave_AF+0xdc>)
 8002e7c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2221      	movs	r2, #33	; 0x21
 8002e82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ea2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002eac:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ebc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7fe ff90 	bl	8001de4 <HAL_I2C_SlaveTxCpltCallback>
}
 8002ec4:	e004      	b.n	8002ed0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ece:	615a      	str	r2, [r3, #20]
}
 8002ed0:	bf00      	nop
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	ffff0000 	.word	0xffff0000

08002edc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ef2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002ef4:	7bbb      	ldrb	r3, [r7, #14]
 8002ef6:	2b10      	cmp	r3, #16
 8002ef8:	d002      	beq.n	8002f00 <I2C_ITError+0x24>
 8002efa:	7bbb      	ldrb	r3, [r7, #14]
 8002efc:	2b40      	cmp	r3, #64	; 0x40
 8002efe:	d10a      	bne.n	8002f16 <I2C_ITError+0x3a>
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
 8002f02:	2b22      	cmp	r3, #34	; 0x22
 8002f04:	d107      	bne.n	8002f16 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f14:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
 8002f18:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f1c:	2b28      	cmp	r3, #40	; 0x28
 8002f1e:	d107      	bne.n	8002f30 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2228      	movs	r2, #40	; 0x28
 8002f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002f2e:	e015      	b.n	8002f5c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f3e:	d00a      	beq.n	8002f56 <I2C_ITError+0x7a>
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
 8002f42:	2b60      	cmp	r3, #96	; 0x60
 8002f44:	d007      	beq.n	8002f56 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f6a:	d161      	bne.n	8003030 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f7a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f80:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d020      	beq.n	8002fca <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f8c:	4a6a      	ldr	r2, [pc, #424]	; (8003138 <I2C_ITError+0x25c>)
 8002f8e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fe f8e7 	bl	8001168 <HAL_DMA_Abort_IT>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 8089 	beq.w	80030b4 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 0201 	bic.w	r2, r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	4798      	blx	r3
 8002fc8:	e074      	b.n	80030b4 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fce:	4a5a      	ldr	r2, [pc, #360]	; (8003138 <I2C_ITError+0x25c>)
 8002fd0:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fe f8c6 	bl	8001168 <HAL_DMA_Abort_IT>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d068      	beq.n	80030b4 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fec:	2b40      	cmp	r3, #64	; 0x40
 8002fee:	d10b      	bne.n	8003008 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	691a      	ldr	r2, [r3, #16]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	1c5a      	adds	r2, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0201 	bic.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2220      	movs	r2, #32
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800302a:	4610      	mov	r0, r2
 800302c:	4798      	blx	r3
 800302e:	e041      	b.n	80030b4 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b60      	cmp	r3, #96	; 0x60
 800303a:	d125      	bne.n	8003088 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003054:	2b40      	cmp	r3, #64	; 0x40
 8003056:	d10b      	bne.n	8003070 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	691a      	ldr	r2, [r3, #16]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0201 	bic.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7fe fef2 	bl	8001e6a <HAL_I2C_AbortCpltCallback>
 8003086:	e015      	b.n	80030b4 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003092:	2b40      	cmp	r3, #64	; 0x40
 8003094:	d10b      	bne.n	80030ae <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	691a      	ldr	r2, [r3, #16]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	1c5a      	adds	r2, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7fe fed2 	bl	8001e58 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10e      	bne.n	80030e2 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d109      	bne.n	80030e2 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d104      	bne.n	80030e2 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d007      	beq.n	80030f2 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030f0:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f8:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	2b04      	cmp	r3, #4
 8003104:	d113      	bne.n	800312e <I2C_ITError+0x252>
 8003106:	7bfb      	ldrb	r3, [r7, #15]
 8003108:	2b28      	cmp	r3, #40	; 0x28
 800310a:	d110      	bne.n	800312e <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a0b      	ldr	r2, [pc, #44]	; (800313c <I2C_ITError+0x260>)
 8003110:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7fe fe7a 	bl	8001e22 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800312e:	bf00      	nop
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	08003141 	.word	0x08003141
 800313c:	ffff0000 	.word	0xffff0000

08003140 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003148:	2300      	movs	r3, #0
 800314a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003158:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800315a:	4b4b      	ldr	r3, [pc, #300]	; (8003288 <I2C_DMAAbort+0x148>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	08db      	lsrs	r3, r3, #3
 8003160:	4a4a      	ldr	r2, [pc, #296]	; (800328c <I2C_DMAAbort+0x14c>)
 8003162:	fba2 2303 	umull	r2, r3, r2, r3
 8003166:	0a1a      	lsrs	r2, r3, #8
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	00da      	lsls	r2, r3, #3
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d106      	bne.n	8003188 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	f043 0220 	orr.w	r2, r3, #32
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003186:	e00a      	b.n	800319e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	3b01      	subs	r3, #1
 800318c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800319c:	d0ea      	beq.n	8003174 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031aa:	2200      	movs	r2, #0
 80031ac:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ba:	2200      	movs	r2, #0
 80031bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031cc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2200      	movs	r2, #0
 80031d2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e0:	2200      	movs	r2, #0
 80031e2:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f0:	2200      	movs	r2, #0
 80031f2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0201 	bic.w	r2, r2, #1
 8003202:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b60      	cmp	r3, #96	; 0x60
 800320e:	d10e      	bne.n	800322e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	2200      	movs	r2, #0
 8003224:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003226:	6978      	ldr	r0, [r7, #20]
 8003228:	f7fe fe1f 	bl	8001e6a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800322c:	e027      	b.n	800327e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800322e:	7cfb      	ldrb	r3, [r7, #19]
 8003230:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003234:	2b28      	cmp	r3, #40	; 0x28
 8003236:	d117      	bne.n	8003268 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0201 	orr.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003256:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	2200      	movs	r2, #0
 800325c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2228      	movs	r2, #40	; 0x28
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003266:	e007      	b.n	8003278 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003278:	6978      	ldr	r0, [r7, #20]
 800327a:	f7fe fded 	bl	8001e58 <HAL_I2C_ErrorCallback>
}
 800327e:	bf00      	nop
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	20000000 	.word	0x20000000
 800328c:	14f8b589 	.word	0x14f8b589

08003290 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800329c:	4b13      	ldr	r3, [pc, #76]	; (80032ec <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	08db      	lsrs	r3, r3, #3
 80032a2:	4a13      	ldr	r2, [pc, #76]	; (80032f0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80032a4:	fba2 2303 	umull	r2, r3, r2, r3
 80032a8:	0a1a      	lsrs	r2, r3, #8
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	3b01      	subs	r3, #1
 80032b6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d107      	bne.n	80032ce <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	f043 0220 	orr.w	r2, r3, #32
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e008      	b.n	80032e0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032dc:	d0e9      	beq.n	80032b2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	20000000 	.word	0x20000000
 80032f0:	14f8b589 	.word	0x14f8b589

080032f4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003300:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003304:	d103      	bne.n	800330e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800330c:	e007      	b.n	800331e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003312:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003316:	d102      	bne.n	800331e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2208      	movs	r2, #8
 800331c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr

08003328 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800332c:	4b03      	ldr	r3, [pc, #12]	; (800333c <HAL_PWR_EnableBkUpAccess+0x14>)
 800332e:	2201      	movs	r2, #1
 8003330:	601a      	str	r2, [r3, #0]
}
 8003332:	bf00      	nop
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	420e0020 	.word	0x420e0020

08003340 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e304      	b.n	800395c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 8087 	beq.w	800346e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003360:	4b92      	ldr	r3, [pc, #584]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f003 030c 	and.w	r3, r3, #12
 8003368:	2b04      	cmp	r3, #4
 800336a:	d00c      	beq.n	8003386 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800336c:	4b8f      	ldr	r3, [pc, #572]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 030c 	and.w	r3, r3, #12
 8003374:	2b08      	cmp	r3, #8
 8003376:	d112      	bne.n	800339e <HAL_RCC_OscConfig+0x5e>
 8003378:	4b8c      	ldr	r3, [pc, #560]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003384:	d10b      	bne.n	800339e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003386:	4b89      	ldr	r3, [pc, #548]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d06c      	beq.n	800346c <HAL_RCC_OscConfig+0x12c>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d168      	bne.n	800346c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e2de      	b.n	800395c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a6:	d106      	bne.n	80033b6 <HAL_RCC_OscConfig+0x76>
 80033a8:	4b80      	ldr	r3, [pc, #512]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a7f      	ldr	r2, [pc, #508]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 80033ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b2:	6013      	str	r3, [r2, #0]
 80033b4:	e02e      	b.n	8003414 <HAL_RCC_OscConfig+0xd4>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10c      	bne.n	80033d8 <HAL_RCC_OscConfig+0x98>
 80033be:	4b7b      	ldr	r3, [pc, #492]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a7a      	ldr	r2, [pc, #488]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 80033c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	4b78      	ldr	r3, [pc, #480]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a77      	ldr	r2, [pc, #476]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 80033d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	e01d      	b.n	8003414 <HAL_RCC_OscConfig+0xd4>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033e0:	d10c      	bne.n	80033fc <HAL_RCC_OscConfig+0xbc>
 80033e2:	4b72      	ldr	r3, [pc, #456]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a71      	ldr	r2, [pc, #452]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 80033e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	4b6f      	ldr	r3, [pc, #444]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a6e      	ldr	r2, [pc, #440]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 80033f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	e00b      	b.n	8003414 <HAL_RCC_OscConfig+0xd4>
 80033fc:	4b6b      	ldr	r3, [pc, #428]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a6a      	ldr	r2, [pc, #424]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 8003402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003406:	6013      	str	r3, [r2, #0]
 8003408:	4b68      	ldr	r3, [pc, #416]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a67      	ldr	r2, [pc, #412]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 800340e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003412:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d013      	beq.n	8003444 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341c:	f7fd fdba 	bl	8000f94 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003424:	f7fd fdb6 	bl	8000f94 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b64      	cmp	r3, #100	; 0x64
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e292      	b.n	800395c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003436:	4b5d      	ldr	r3, [pc, #372]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0f0      	beq.n	8003424 <HAL_RCC_OscConfig+0xe4>
 8003442:	e014      	b.n	800346e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003444:	f7fd fda6 	bl	8000f94 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800344c:	f7fd fda2 	bl	8000f94 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b64      	cmp	r3, #100	; 0x64
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e27e      	b.n	800395c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345e:	4b53      	ldr	r3, [pc, #332]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0x10c>
 800346a:	e000      	b.n	800346e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800346c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d063      	beq.n	8003542 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800347a:	4b4c      	ldr	r3, [pc, #304]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f003 030c 	and.w	r3, r3, #12
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00b      	beq.n	800349e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003486:	4b49      	ldr	r3, [pc, #292]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f003 030c 	and.w	r3, r3, #12
 800348e:	2b08      	cmp	r3, #8
 8003490:	d11c      	bne.n	80034cc <HAL_RCC_OscConfig+0x18c>
 8003492:	4b46      	ldr	r3, [pc, #280]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d116      	bne.n	80034cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800349e:	4b43      	ldr	r3, [pc, #268]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d005      	beq.n	80034b6 <HAL_RCC_OscConfig+0x176>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d001      	beq.n	80034b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e252      	b.n	800395c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b6:	4b3d      	ldr	r3, [pc, #244]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	4939      	ldr	r1, [pc, #228]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ca:	e03a      	b.n	8003542 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d020      	beq.n	8003516 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034d4:	4b36      	ldr	r3, [pc, #216]	; (80035b0 <HAL_RCC_OscConfig+0x270>)
 80034d6:	2201      	movs	r2, #1
 80034d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034da:	f7fd fd5b 	bl	8000f94 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034e2:	f7fd fd57 	bl	8000f94 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e233      	b.n	800395c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f4:	4b2d      	ldr	r3, [pc, #180]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0f0      	beq.n	80034e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003500:	4b2a      	ldr	r3, [pc, #168]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	4927      	ldr	r1, [pc, #156]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 8003510:	4313      	orrs	r3, r2
 8003512:	600b      	str	r3, [r1, #0]
 8003514:	e015      	b.n	8003542 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003516:	4b26      	ldr	r3, [pc, #152]	; (80035b0 <HAL_RCC_OscConfig+0x270>)
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800351c:	f7fd fd3a 	bl	8000f94 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003524:	f7fd fd36 	bl	8000f94 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e212      	b.n	800395c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003536:	4b1d      	ldr	r3, [pc, #116]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f0      	bne.n	8003524 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	2b00      	cmp	r3, #0
 800354c:	d03a      	beq.n	80035c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d019      	beq.n	800358a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003556:	4b17      	ldr	r3, [pc, #92]	; (80035b4 <HAL_RCC_OscConfig+0x274>)
 8003558:	2201      	movs	r2, #1
 800355a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800355c:	f7fd fd1a 	bl	8000f94 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003564:	f7fd fd16 	bl	8000f94 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e1f2      	b.n	800395c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003576:	4b0d      	ldr	r3, [pc, #52]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0f0      	beq.n	8003564 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003582:	2001      	movs	r0, #1
 8003584:	f000 fc22 	bl	8003dcc <RCC_Delay>
 8003588:	e01c      	b.n	80035c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800358a:	4b0a      	ldr	r3, [pc, #40]	; (80035b4 <HAL_RCC_OscConfig+0x274>)
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003590:	f7fd fd00 	bl	8000f94 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003596:	e00f      	b.n	80035b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003598:	f7fd fcfc 	bl	8000f94 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d908      	bls.n	80035b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e1d8      	b.n	800395c <HAL_RCC_OscConfig+0x61c>
 80035aa:	bf00      	nop
 80035ac:	40021000 	.word	0x40021000
 80035b0:	42420000 	.word	0x42420000
 80035b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b8:	4b9b      	ldr	r3, [pc, #620]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1e9      	bne.n	8003598 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 80a6 	beq.w	800371e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035d2:	2300      	movs	r3, #0
 80035d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035d6:	4b94      	ldr	r3, [pc, #592]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10d      	bne.n	80035fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e2:	4b91      	ldr	r3, [pc, #580]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	4a90      	ldr	r2, [pc, #576]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 80035e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ec:	61d3      	str	r3, [r2, #28]
 80035ee:	4b8e      	ldr	r3, [pc, #568]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f6:	60bb      	str	r3, [r7, #8]
 80035f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035fa:	2301      	movs	r3, #1
 80035fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fe:	4b8b      	ldr	r3, [pc, #556]	; (800382c <HAL_RCC_OscConfig+0x4ec>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003606:	2b00      	cmp	r3, #0
 8003608:	d118      	bne.n	800363c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800360a:	4b88      	ldr	r3, [pc, #544]	; (800382c <HAL_RCC_OscConfig+0x4ec>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a87      	ldr	r2, [pc, #540]	; (800382c <HAL_RCC_OscConfig+0x4ec>)
 8003610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003616:	f7fd fcbd 	bl	8000f94 <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800361e:	f7fd fcb9 	bl	8000f94 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b64      	cmp	r3, #100	; 0x64
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e195      	b.n	800395c <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003630:	4b7e      	ldr	r3, [pc, #504]	; (800382c <HAL_RCC_OscConfig+0x4ec>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0f0      	beq.n	800361e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d106      	bne.n	8003652 <HAL_RCC_OscConfig+0x312>
 8003644:	4b78      	ldr	r3, [pc, #480]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	4a77      	ldr	r2, [pc, #476]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	6213      	str	r3, [r2, #32]
 8003650:	e02d      	b.n	80036ae <HAL_RCC_OscConfig+0x36e>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10c      	bne.n	8003674 <HAL_RCC_OscConfig+0x334>
 800365a:	4b73      	ldr	r3, [pc, #460]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	4a72      	ldr	r2, [pc, #456]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 8003660:	f023 0301 	bic.w	r3, r3, #1
 8003664:	6213      	str	r3, [r2, #32]
 8003666:	4b70      	ldr	r3, [pc, #448]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	4a6f      	ldr	r2, [pc, #444]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 800366c:	f023 0304 	bic.w	r3, r3, #4
 8003670:	6213      	str	r3, [r2, #32]
 8003672:	e01c      	b.n	80036ae <HAL_RCC_OscConfig+0x36e>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	2b05      	cmp	r3, #5
 800367a:	d10c      	bne.n	8003696 <HAL_RCC_OscConfig+0x356>
 800367c:	4b6a      	ldr	r3, [pc, #424]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	4a69      	ldr	r2, [pc, #420]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 8003682:	f043 0304 	orr.w	r3, r3, #4
 8003686:	6213      	str	r3, [r2, #32]
 8003688:	4b67      	ldr	r3, [pc, #412]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	4a66      	ldr	r2, [pc, #408]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	6213      	str	r3, [r2, #32]
 8003694:	e00b      	b.n	80036ae <HAL_RCC_OscConfig+0x36e>
 8003696:	4b64      	ldr	r3, [pc, #400]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	4a63      	ldr	r2, [pc, #396]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 800369c:	f023 0301 	bic.w	r3, r3, #1
 80036a0:	6213      	str	r3, [r2, #32]
 80036a2:	4b61      	ldr	r3, [pc, #388]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	4a60      	ldr	r2, [pc, #384]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 80036a8:	f023 0304 	bic.w	r3, r3, #4
 80036ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d015      	beq.n	80036e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036b6:	f7fd fc6d 	bl	8000f94 <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036bc:	e00a      	b.n	80036d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036be:	f7fd fc69 	bl	8000f94 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e143      	b.n	800395c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d4:	4b54      	ldr	r3, [pc, #336]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0ee      	beq.n	80036be <HAL_RCC_OscConfig+0x37e>
 80036e0:	e014      	b.n	800370c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e2:	f7fd fc57 	bl	8000f94 <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036e8:	e00a      	b.n	8003700 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ea:	f7fd fc53 	bl	8000f94 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e12d      	b.n	800395c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003700:	4b49      	ldr	r3, [pc, #292]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1ee      	bne.n	80036ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800370c:	7dfb      	ldrb	r3, [r7, #23]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d105      	bne.n	800371e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003712:	4b45      	ldr	r3, [pc, #276]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	4a44      	ldr	r2, [pc, #272]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 8003718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800371c:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 808c 	beq.w	8003840 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003728:	4b3f      	ldr	r3, [pc, #252]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003734:	d10e      	bne.n	8003754 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003736:	4b3c      	ldr	r3, [pc, #240]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800373e:	2b08      	cmp	r3, #8
 8003740:	d108      	bne.n	8003754 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8003742:	4b39      	ldr	r3, [pc, #228]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 8003744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800374a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800374e:	d101      	bne.n	8003754 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e103      	b.n	800395c <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	2b02      	cmp	r3, #2
 800375a:	d14e      	bne.n	80037fa <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800375c:	4b32      	ldr	r3, [pc, #200]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d009      	beq.n	800377c <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8003768:	4b2f      	ldr	r3, [pc, #188]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003774:	429a      	cmp	r2, r3
 8003776:	d001      	beq.n	800377c <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0ef      	b.n	800395c <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800377c:	4b2c      	ldr	r3, [pc, #176]	; (8003830 <HAL_RCC_OscConfig+0x4f0>)
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003782:	f7fd fc07 	bl	8000f94 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003788:	e008      	b.n	800379c <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800378a:	f7fd fc03 	bl	8000f94 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b64      	cmp	r3, #100	; 0x64
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e0df      	b.n	800395c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 800379c:	4b22      	ldr	r3, [pc, #136]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1f0      	bne.n	800378a <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80037a8:	4b1f      	ldr	r3, [pc, #124]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 80037aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b4:	491c      	ldr	r1, [pc, #112]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80037ba:	4b1b      	ldr	r3, [pc, #108]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 80037bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037be:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	4918      	ldr	r1, [pc, #96]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80037cc:	4b18      	ldr	r3, [pc, #96]	; (8003830 <HAL_RCC_OscConfig+0x4f0>)
 80037ce:	2201      	movs	r2, #1
 80037d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d2:	f7fd fbdf 	bl	8000f94 <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80037da:	f7fd fbdb 	bl	8000f94 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b64      	cmp	r3, #100	; 0x64
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e0b7      	b.n	800395c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80037ec:	4b0e      	ldr	r3, [pc, #56]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0f0      	beq.n	80037da <HAL_RCC_OscConfig+0x49a>
 80037f8:	e022      	b.n	8003840 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80037fa:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 80037fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fe:	4a0a      	ldr	r2, [pc, #40]	; (8003828 <HAL_RCC_OscConfig+0x4e8>)
 8003800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003804:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003806:	4b0a      	ldr	r3, [pc, #40]	; (8003830 <HAL_RCC_OscConfig+0x4f0>)
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380c:	f7fd fbc2 	bl	8000f94 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003812:	e00f      	b.n	8003834 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003814:	f7fd fbbe 	bl	8000f94 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b64      	cmp	r3, #100	; 0x64
 8003820:	d908      	bls.n	8003834 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e09a      	b.n	800395c <HAL_RCC_OscConfig+0x61c>
 8003826:	bf00      	nop
 8003828:	40021000 	.word	0x40021000
 800382c:	40007000 	.word	0x40007000
 8003830:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003834:	4b4b      	ldr	r3, [pc, #300]	; (8003964 <HAL_RCC_OscConfig+0x624>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1e9      	bne.n	8003814 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 8088 	beq.w	800395a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800384a:	4b46      	ldr	r3, [pc, #280]	; (8003964 <HAL_RCC_OscConfig+0x624>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f003 030c 	and.w	r3, r3, #12
 8003852:	2b08      	cmp	r3, #8
 8003854:	d068      	beq.n	8003928 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	2b02      	cmp	r3, #2
 800385c:	d14d      	bne.n	80038fa <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800385e:	4b42      	ldr	r3, [pc, #264]	; (8003968 <HAL_RCC_OscConfig+0x628>)
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003864:	f7fd fb96 	bl	8000f94 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800386c:	f7fd fb92 	bl	8000f94 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e06e      	b.n	800395c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800387e:	4b39      	ldr	r3, [pc, #228]	; (8003964 <HAL_RCC_OscConfig+0x624>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1f0      	bne.n	800386c <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003892:	d10f      	bne.n	80038b4 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8003894:	4b33      	ldr	r3, [pc, #204]	; (8003964 <HAL_RCC_OscConfig+0x624>)
 8003896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	4931      	ldr	r1, [pc, #196]	; (8003964 <HAL_RCC_OscConfig+0x624>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038a2:	4b30      	ldr	r3, [pc, #192]	; (8003964 <HAL_RCC_OscConfig+0x624>)
 80038a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a6:	f023 020f 	bic.w	r2, r3, #15
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	492d      	ldr	r1, [pc, #180]	; (8003964 <HAL_RCC_OscConfig+0x624>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038b4:	4b2b      	ldr	r3, [pc, #172]	; (8003964 <HAL_RCC_OscConfig+0x624>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c4:	430b      	orrs	r3, r1
 80038c6:	4927      	ldr	r1, [pc, #156]	; (8003964 <HAL_RCC_OscConfig+0x624>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038cc:	4b26      	ldr	r3, [pc, #152]	; (8003968 <HAL_RCC_OscConfig+0x628>)
 80038ce:	2201      	movs	r2, #1
 80038d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d2:	f7fd fb5f 	bl	8000f94 <HAL_GetTick>
 80038d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038d8:	e008      	b.n	80038ec <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038da:	f7fd fb5b 	bl	8000f94 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e037      	b.n	800395c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038ec:	4b1d      	ldr	r3, [pc, #116]	; (8003964 <HAL_RCC_OscConfig+0x624>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d0f0      	beq.n	80038da <HAL_RCC_OscConfig+0x59a>
 80038f8:	e02f      	b.n	800395a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038fa:	4b1b      	ldr	r3, [pc, #108]	; (8003968 <HAL_RCC_OscConfig+0x628>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003900:	f7fd fb48 	bl	8000f94 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003908:	f7fd fb44 	bl	8000f94 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e020      	b.n	800395c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800391a:	4b12      	ldr	r3, [pc, #72]	; (8003964 <HAL_RCC_OscConfig+0x624>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1f0      	bne.n	8003908 <HAL_RCC_OscConfig+0x5c8>
 8003926:	e018      	b.n	800395a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d101      	bne.n	8003934 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e013      	b.n	800395c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003934:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <HAL_RCC_OscConfig+0x624>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	429a      	cmp	r2, r3
 8003946:	d106      	bne.n	8003956 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003952:	429a      	cmp	r2, r3
 8003954:	d001      	beq.n	800395a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e000      	b.n	800395c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3718      	adds	r7, #24
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40021000 	.word	0x40021000
 8003968:	42420060 	.word	0x42420060

0800396c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e0d0      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003980:	4b6a      	ldr	r3, [pc, #424]	; (8003b2c <HAL_RCC_ClockConfig+0x1c0>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d910      	bls.n	80039b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398e:	4b67      	ldr	r3, [pc, #412]	; (8003b2c <HAL_RCC_ClockConfig+0x1c0>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f023 0207 	bic.w	r2, r3, #7
 8003996:	4965      	ldr	r1, [pc, #404]	; (8003b2c <HAL_RCC_ClockConfig+0x1c0>)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	4313      	orrs	r3, r2
 800399c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800399e:	4b63      	ldr	r3, [pc, #396]	; (8003b2c <HAL_RCC_ClockConfig+0x1c0>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d001      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e0b8      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d020      	beq.n	80039fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d005      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039c8:	4b59      	ldr	r3, [pc, #356]	; (8003b30 <HAL_RCC_ClockConfig+0x1c4>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	4a58      	ldr	r2, [pc, #352]	; (8003b30 <HAL_RCC_ClockConfig+0x1c4>)
 80039ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0308 	and.w	r3, r3, #8
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d005      	beq.n	80039ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039e0:	4b53      	ldr	r3, [pc, #332]	; (8003b30 <HAL_RCC_ClockConfig+0x1c4>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	4a52      	ldr	r2, [pc, #328]	; (8003b30 <HAL_RCC_ClockConfig+0x1c4>)
 80039e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80039ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039ec:	4b50      	ldr	r3, [pc, #320]	; (8003b30 <HAL_RCC_ClockConfig+0x1c4>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	494d      	ldr	r1, [pc, #308]	; (8003b30 <HAL_RCC_ClockConfig+0x1c4>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d040      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d107      	bne.n	8003a22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a12:	4b47      	ldr	r3, [pc, #284]	; (8003b30 <HAL_RCC_ClockConfig+0x1c4>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d115      	bne.n	8003a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e07f      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d107      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a2a:	4b41      	ldr	r3, [pc, #260]	; (8003b30 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d109      	bne.n	8003a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e073      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a3a:	4b3d      	ldr	r3, [pc, #244]	; (8003b30 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e06b      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a4a:	4b39      	ldr	r3, [pc, #228]	; (8003b30 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f023 0203 	bic.w	r2, r3, #3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	4936      	ldr	r1, [pc, #216]	; (8003b30 <HAL_RCC_ClockConfig+0x1c4>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a5c:	f7fd fa9a 	bl	8000f94 <HAL_GetTick>
 8003a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a62:	e00a      	b.n	8003a7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a64:	f7fd fa96 	bl	8000f94 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e053      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7a:	4b2d      	ldr	r3, [pc, #180]	; (8003b30 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f003 020c 	and.w	r2, r3, #12
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d1eb      	bne.n	8003a64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a8c:	4b27      	ldr	r3, [pc, #156]	; (8003b2c <HAL_RCC_ClockConfig+0x1c0>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d210      	bcs.n	8003abc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9a:	4b24      	ldr	r3, [pc, #144]	; (8003b2c <HAL_RCC_ClockConfig+0x1c0>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f023 0207 	bic.w	r2, r3, #7
 8003aa2:	4922      	ldr	r1, [pc, #136]	; (8003b2c <HAL_RCC_ClockConfig+0x1c0>)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aaa:	4b20      	ldr	r3, [pc, #128]	; (8003b2c <HAL_RCC_ClockConfig+0x1c0>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0307 	and.w	r3, r3, #7
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d001      	beq.n	8003abc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e032      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d008      	beq.n	8003ada <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ac8:	4b19      	ldr	r3, [pc, #100]	; (8003b30 <HAL_RCC_ClockConfig+0x1c4>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	4916      	ldr	r1, [pc, #88]	; (8003b30 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0308 	and.w	r3, r3, #8
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d009      	beq.n	8003afa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ae6:	4b12      	ldr	r3, [pc, #72]	; (8003b30 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	490e      	ldr	r1, [pc, #56]	; (8003b30 <HAL_RCC_ClockConfig+0x1c4>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003afa:	f000 f821 	bl	8003b40 <HAL_RCC_GetSysClockFreq>
 8003afe:	4602      	mov	r2, r0
 8003b00:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <HAL_RCC_ClockConfig+0x1c4>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	091b      	lsrs	r3, r3, #4
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	490a      	ldr	r1, [pc, #40]	; (8003b34 <HAL_RCC_ClockConfig+0x1c8>)
 8003b0c:	5ccb      	ldrb	r3, [r1, r3]
 8003b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b12:	4a09      	ldr	r2, [pc, #36]	; (8003b38 <HAL_RCC_ClockConfig+0x1cc>)
 8003b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b16:	4b09      	ldr	r3, [pc, #36]	; (8003b3c <HAL_RCC_ClockConfig+0x1d0>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fd f95c 	bl	8000dd8 <HAL_InitTick>

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40022000 	.word	0x40022000
 8003b30:	40021000 	.word	0x40021000
 8003b34:	08007bfc 	.word	0x08007bfc
 8003b38:	20000000 	.word	0x20000000
 8003b3c:	20000004 	.word	0x20000004

08003b40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b44:	b091      	sub	sp, #68	; 0x44
 8003b46:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8003b48:	4b6a      	ldr	r3, [pc, #424]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x1b4>)
 8003b4a:	f107 0414 	add.w	r4, r7, #20
 8003b4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b50:	c407      	stmia	r4!, {r0, r1, r2}
 8003b52:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8003b54:	4b68      	ldr	r3, [pc, #416]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b56:	1d3c      	adds	r4, r7, #4
 8003b58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	637b      	str	r3, [r7, #52]	; 0x34
 8003b62:	2300      	movs	r3, #0
 8003b64:	633b      	str	r3, [r7, #48]	; 0x30
 8003b66:	2300      	movs	r3, #0
 8003b68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b76:	2300      	movs	r3, #0
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b7a:	4b60      	ldr	r3, [pc, #384]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b82:	f003 030c 	and.w	r3, r3, #12
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d002      	beq.n	8003b90 <HAL_RCC_GetSysClockFreq+0x50>
 8003b8a:	2b08      	cmp	r3, #8
 8003b8c:	d003      	beq.n	8003b96 <HAL_RCC_GetSysClockFreq+0x56>
 8003b8e:	e0a8      	b.n	8003ce2 <HAL_RCC_GetSysClockFreq+0x1a2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b90:	4b5b      	ldr	r3, [pc, #364]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003b92:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b94:	e0a8      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x1a8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b98:	0c9b      	lsrs	r3, r3, #18
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8003ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 808e 	beq.w	8003cd2 <HAL_RCC_GetSysClockFreq+0x192>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8003bb6:	4b51      	ldr	r3, [pc, #324]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8003bc8:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8003bca:	4b4c      	ldr	r3, [pc, #304]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d06b      	beq.n	8003cae <HAL_RCC_GetSysClockFreq+0x16e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8003bd6:	4b49      	ldr	r3, [pc, #292]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bda:	091b      	lsrs	r3, r3, #4
 8003bdc:	f003 030f 	and.w	r3, r3, #15
 8003be0:	3301      	adds	r3, #1
 8003be2:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8003be4:	4b45      	ldr	r3, [pc, #276]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be8:	0a1b      	lsrs	r3, r3, #8
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	3302      	adds	r3, #2
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f04f 0100 	mov.w	r1, #0
 8003bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	fb02 f501 	mul.w	r5, r2, r1
 8003c06:	fb00 f403 	mul.w	r4, r0, r3
 8003c0a:	192e      	adds	r6, r5, r4
 8003c0c:	fba0 4502 	umull	r4, r5, r0, r2
 8003c10:	1973      	adds	r3, r6, r5
 8003c12:	461d      	mov	r5, r3
 8003c14:	4620      	mov	r0, r4
 8003c16:	4629      	mov	r1, r5
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	014b      	lsls	r3, r1, #5
 8003c22:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c26:	0142      	lsls	r2, r0, #5
 8003c28:	4610      	mov	r0, r2
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	1b00      	subs	r0, r0, r4
 8003c2e:	eb61 0105 	sbc.w	r1, r1, r5
 8003c32:	f04f 0200 	mov.w	r2, #0
 8003c36:	f04f 0300 	mov.w	r3, #0
 8003c3a:	018b      	lsls	r3, r1, #6
 8003c3c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c40:	0182      	lsls	r2, r0, #6
 8003c42:	1a12      	subs	r2, r2, r0
 8003c44:	eb63 0301 	sbc.w	r3, r3, r1
 8003c48:	f04f 0000 	mov.w	r0, #0
 8003c4c:	f04f 0100 	mov.w	r1, #0
 8003c50:	00d9      	lsls	r1, r3, #3
 8003c52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c56:	00d0      	lsls	r0, r2, #3
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	1912      	adds	r2, r2, r4
 8003c5e:	eb45 0303 	adc.w	r3, r5, r3
 8003c62:	f04f 0000 	mov.w	r0, #0
 8003c66:	f04f 0100 	mov.w	r1, #0
 8003c6a:	0259      	lsls	r1, r3, #9
 8003c6c:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003c70:	0250      	lsls	r0, r2, #9
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	4690      	mov	r8, r2
 8003c78:	4699      	mov	r9, r3
 8003c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f04f 0100 	mov.w	r1, #0
 8003c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c84:	461a      	mov	r2, r3
 8003c86:	f04f 0300 	mov.w	r3, #0
 8003c8a:	fb02 f501 	mul.w	r5, r2, r1
 8003c8e:	fb00 f403 	mul.w	r4, r0, r3
 8003c92:	442c      	add	r4, r5
 8003c94:	fba0 2302 	umull	r2, r3, r0, r2
 8003c98:	18e1      	adds	r1, r4, r3
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4640      	mov	r0, r8
 8003c9e:	4649      	mov	r1, r9
 8003ca0:	f7fc fac6 	bl	8000230 <__aeabi_uldivmod>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	4613      	mov	r3, r2
 8003caa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cac:	e007      	b.n	8003cbe <HAL_RCC_GetSysClockFreq+0x17e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8003cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb0:	4a13      	ldr	r2, [pc, #76]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003cb2:	fb02 f203 	mul.w	r2, r2, r3
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8003cbe:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d108      	bne.n	8003cdc <HAL_RCC_GetSysClockFreq+0x19c>
        {
          pllclk = pllclk / 2;
 8003cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ccc:	085b      	lsrs	r3, r3, #1
 8003cce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cd0:	e004      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0x19c>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd4:	4a0b      	ldr	r2, [pc, #44]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x1c4>)
 8003cd6:	fb02 f303 	mul.w	r3, r2, r3
 8003cda:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8003cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cde:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ce0:	e002      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x1a8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ce2:	4b07      	ldr	r3, [pc, #28]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003ce4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ce6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3744      	adds	r7, #68	; 0x44
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003cf4:	08007ba0 	.word	0x08007ba0
 8003cf8:	08007bb0 	.word	0x08007bb0
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	007a1200 	.word	0x007a1200
 8003d04:	003d0900 	.word	0x003d0900

08003d08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d0c:	4b02      	ldr	r3, [pc, #8]	; (8003d18 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bc80      	pop	{r7}
 8003d16:	4770      	bx	lr
 8003d18:	20000000 	.word	0x20000000

08003d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d20:	f7ff fff2 	bl	8003d08 <HAL_RCC_GetHCLKFreq>
 8003d24:	4602      	mov	r2, r0
 8003d26:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	0a1b      	lsrs	r3, r3, #8
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	4903      	ldr	r1, [pc, #12]	; (8003d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d32:	5ccb      	ldrb	r3, [r1, r3]
 8003d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	08007c0c 	.word	0x08007c0c

08003d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d48:	f7ff ffde 	bl	8003d08 <HAL_RCC_GetHCLKFreq>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	0adb      	lsrs	r3, r3, #11
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	4903      	ldr	r1, [pc, #12]	; (8003d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d5a:	5ccb      	ldrb	r3, [r1, r3]
 8003d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40021000 	.word	0x40021000
 8003d68:	08007c0c 	.word	0x08007c0c

08003d6c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	220f      	movs	r2, #15
 8003d7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d7c:	4b11      	ldr	r3, [pc, #68]	; (8003dc4 <HAL_RCC_GetClockConfig+0x58>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f003 0203 	and.w	r2, r3, #3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d88:	4b0e      	ldr	r3, [pc, #56]	; (8003dc4 <HAL_RCC_GetClockConfig+0x58>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d94:	4b0b      	ldr	r3, [pc, #44]	; (8003dc4 <HAL_RCC_GetClockConfig+0x58>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003da0:	4b08      	ldr	r3, [pc, #32]	; (8003dc4 <HAL_RCC_GetClockConfig+0x58>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	08db      	lsrs	r3, r3, #3
 8003da6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003dae:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <HAL_RCC_GetClockConfig+0x5c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0207 	and.w	r2, r3, #7
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bc80      	pop	{r7}
 8003dc2:	4770      	bx	lr
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	40022000 	.word	0x40022000

08003dcc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003dd4:	4b0a      	ldr	r3, [pc, #40]	; (8003e00 <RCC_Delay+0x34>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a0a      	ldr	r2, [pc, #40]	; (8003e04 <RCC_Delay+0x38>)
 8003dda:	fba2 2303 	umull	r2, r3, r2, r3
 8003dde:	0a5b      	lsrs	r3, r3, #9
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	fb02 f303 	mul.w	r3, r2, r3
 8003de6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003de8:	bf00      	nop
  }
  while (Delay --);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	1e5a      	subs	r2, r3, #1
 8003dee:	60fa      	str	r2, [r7, #12]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1f9      	bne.n	8003de8 <RCC_Delay+0x1c>
}
 8003df4:	bf00      	nop
 8003df6:	bf00      	nop
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr
 8003e00:	20000000 	.word	0x20000000
 8003e04:	10624dd3 	.word	0x10624dd3

08003e08 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b088      	sub	sp, #32
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	617b      	str	r3, [r7, #20]
 8003e14:	2300      	movs	r3, #0
 8003e16:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d07d      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e2c:	4b8b      	ldr	r3, [pc, #556]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10d      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e38:	4b88      	ldr	r3, [pc, #544]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e3a:	69db      	ldr	r3, [r3, #28]
 8003e3c:	4a87      	ldr	r2, [pc, #540]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e42:	61d3      	str	r3, [r2, #28]
 8003e44:	4b85      	ldr	r3, [pc, #532]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e50:	2301      	movs	r3, #1
 8003e52:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e54:	4b82      	ldr	r3, [pc, #520]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d118      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e60:	4b7f      	ldr	r3, [pc, #508]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a7e      	ldr	r2, [pc, #504]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e6c:	f7fd f892 	bl	8000f94 <HAL_GetTick>
 8003e70:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e72:	e008      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e74:	f7fd f88e 	bl	8000f94 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b64      	cmp	r3, #100	; 0x64
 8003e80:	d901      	bls.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e0e5      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e86:	4b76      	ldr	r3, [pc, #472]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0f0      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e92:	4b72      	ldr	r3, [pc, #456]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e9a:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d02e      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d027      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003eb0:	4b6a      	ldr	r3, [pc, #424]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eb8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003eba:	4b6a      	ldr	r3, [pc, #424]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ec0:	4b68      	ldr	r3, [pc, #416]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ec6:	4a65      	ldr	r2, [pc, #404]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d014      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed6:	f7fd f85d 	bl	8000f94 <HAL_GetTick>
 8003eda:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003edc:	e00a      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ede:	f7fd f859 	bl	8000f94 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e0ae      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef4:	4b59      	ldr	r3, [pc, #356]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0ee      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f00:	4b56      	ldr	r3, [pc, #344]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	4953      	ldr	r1, [pc, #332]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f12:	7efb      	ldrb	r3, [r7, #27]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d105      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f18:	4b50      	ldr	r3, [pc, #320]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	4a4f      	ldr	r2, [pc, #316]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f22:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d008      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f30:	4b4a      	ldr	r3, [pc, #296]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	4947      	ldr	r1, [pc, #284]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0304 	and.w	r3, r3, #4
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d008      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003f4e:	4b43      	ldr	r3, [pc, #268]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	4940      	ldr	r1, [pc, #256]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0308 	and.w	r3, r3, #8
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d008      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8003f6c:	4b3b      	ldr	r3, [pc, #236]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f70:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	4938      	ldr	r1, [pc, #224]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8003f7e:	4b37      	ldr	r3, [pc, #220]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d105      	bne.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8003f8a:	4b34      	ldr	r3, [pc, #208]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8003f96:	2301      	movs	r3, #1
 8003f98:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d148      	bne.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8003fa0:	4b2e      	ldr	r3, [pc, #184]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d138      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8003fac:	4b2b      	ldr	r3, [pc, #172]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d009      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8003fb8:	4b28      	ldr	r3, [pc, #160]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d001      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e042      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8003fcc:	4b23      	ldr	r3, [pc, #140]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	4920      	ldr	r1, [pc, #128]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8003fde:	4b1f      	ldr	r3, [pc, #124]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe2:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	491c      	ldr	r1, [pc, #112]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8003ff0:	4b1d      	ldr	r3, [pc, #116]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff6:	f7fc ffcd 	bl	8000f94 <HAL_GetTick>
 8003ffa:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ffc:	e008      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ffe:	f7fc ffc9 	bl	8000f94 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b64      	cmp	r3, #100	; 0x64
 800400a:	d901      	bls.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e020      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004010:	4b12      	ldr	r3, [pc, #72]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d0f0      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800401c:	e009      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 800401e:	4b0f      	ldr	r3, [pc, #60]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004022:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	429a      	cmp	r2, r3
 800402c:	d001      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e00f      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0310 	and.w	r3, r3, #16
 800403a:	2b00      	cmp	r3, #0
 800403c:	d008      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800403e:	4b07      	ldr	r3, [pc, #28]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	4904      	ldr	r1, [pc, #16]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800404c:	4313      	orrs	r3, r2
 800404e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3720      	adds	r7, #32
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	40021000 	.word	0x40021000
 8004060:	40007000 	.word	0x40007000
 8004064:	42420440 	.word	0x42420440
 8004068:	42420070 	.word	0x42420070

0800406c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800406c:	b590      	push	{r4, r7, lr}
 800406e:	b093      	sub	sp, #76	; 0x4c
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8004074:	4ba9      	ldr	r3, [pc, #676]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8004076:	f107 0418 	add.w	r4, r7, #24
 800407a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800407c:	c407      	stmia	r4!, {r0, r1, r2}
 800407e:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8004080:	4ba7      	ldr	r3, [pc, #668]	; (8004320 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004082:	f107 0408 	add.w	r4, r7, #8
 8004086:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004088:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800408c:	2300      	movs	r3, #0
 800408e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004090:	2300      	movs	r3, #0
 8004092:	647b      	str	r3, [r7, #68]	; 0x44
 8004094:	2300      	movs	r3, #0
 8004096:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
 8004098:	2300      	movs	r3, #0
 800409a:	637b      	str	r3, [r7, #52]	; 0x34
 800409c:	2300      	movs	r3, #0
 800409e:	633b      	str	r3, [r7, #48]	; 0x30
 80040a0:	2300      	movs	r3, #0
 80040a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[2] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80040a8:	2300      	movs	r3, #0
 80040aa:	643b      	str	r3, [r7, #64]	; 0x40
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	2b0f      	cmp	r3, #15
 80040b2:	f200 8124 	bhi.w	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 80040b6:	a201      	add	r2, pc, #4	; (adr r2, 80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 80040b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040bc:	0800427d 	.word	0x0800427d
 80040c0:	080042e3 	.word	0x080042e3
 80040c4:	080042ff 	.word	0x080042ff
 80040c8:	080041db 	.word	0x080041db
 80040cc:	080042ff 	.word	0x080042ff
 80040d0:	080042ff 	.word	0x080042ff
 80040d4:	080042ff 	.word	0x080042ff
 80040d8:	0800422d 	.word	0x0800422d
 80040dc:	080042ff 	.word	0x080042ff
 80040e0:	080042ff 	.word	0x080042ff
 80040e4:	080042ff 	.word	0x080042ff
 80040e8:	080042ff 	.word	0x080042ff
 80040ec:	080042ff 	.word	0x080042ff
 80040f0:	080042ff 	.word	0x080042ff
 80040f4:	080042ff 	.word	0x080042ff
 80040f8:	080040fd 	.word	0x080040fd
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80040fc:	4b89      	ldr	r3, [pc, #548]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004102:	4b88      	ldr	r3, [pc, #544]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 80f9 	beq.w	8004302 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004112:	0c9b      	lsrs	r3, r3, #18
 8004114:	f003 030f 	and.w	r3, r3, #15
 8004118:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800411c:	4413      	add	r3, r2
 800411e:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8004122:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d03e      	beq.n	80041ac <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800412e:	4b7d      	ldr	r3, [pc, #500]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800413a:	4413      	add	r3, r2
 800413c:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8004140:	63fb      	str	r3, [r7, #60]	; 0x3c
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8004142:	4b78      	ldr	r3, [pc, #480]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d01c      	beq.n	8004188 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800414e:	4b75      	ldr	r3, [pc, #468]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004152:	091b      	lsrs	r3, r3, #4
 8004154:	f003 030f 	and.w	r3, r3, #15
 8004158:	3301      	adds	r3, #1
 800415a:	62fb      	str	r3, [r7, #44]	; 0x2c
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 800415c:	4b71      	ldr	r3, [pc, #452]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800415e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004160:	0a1b      	lsrs	r3, r3, #8
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	3302      	adds	r3, #2
 8004168:	637b      	str	r3, [r7, #52]	; 0x34
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 800416a:	4a6f      	ldr	r2, [pc, #444]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800416c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004172:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004174:	fb02 f203 	mul.w	r2, r2, r3
 8004178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800417a:	fbb2 f2f3 	udiv	r2, r2, r3
 800417e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004180:	fb02 f303 	mul.w	r3, r2, r3
 8004184:	647b      	str	r3, [r7, #68]	; 0x44
 8004186:	e007      	b.n	8004198 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004188:	4a67      	ldr	r2, [pc, #412]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800418a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800418c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004192:	fb02 f303 	mul.w	r3, r2, r3
 8004196:	647b      	str	r3, [r7, #68]	; 0x44
          }

          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8004198:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800419c:	461a      	mov	r2, r3
 800419e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d108      	bne.n	80041b6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
          {
            pllclk = pllclk / 2;
 80041a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041a6:	085b      	lsrs	r3, r3, #1
 80041a8:	647b      	str	r3, [r7, #68]	; 0x44
 80041aa:	e004      	b.n	80041b6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ae:	4a5f      	ldr	r2, [pc, #380]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80041b0:	fb02 f303 	mul.w	r3, r2, r3
 80041b4:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 80041b6:	4b5b      	ldr	r3, [pc, #364]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041c2:	d102      	bne.n	80041ca <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        {
          /* Prescaler of 2 selected for USB */
          frequency = pllclk;
 80041c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041c6:	643b      	str	r3, [r7, #64]	; 0x40
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80041c8:	e09b      	b.n	8004302 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          frequency = (2 * pllclk) / 3;
 80041ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	4a58      	ldr	r2, [pc, #352]	; (8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80041d0:	fba2 2303 	umull	r2, r3, r2, r3
 80041d4:	085b      	lsrs	r3, r3, #1
 80041d6:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80041d8:	e093      	b.n	8004302 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 80041da:	4b52      	ldr	r3, [pc, #328]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80041dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d103      	bne.n	80041ee <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        /* SYSCLK used as source clock for I2S2 */
        frequency = HAL_RCC_GetSysClockFreq();
 80041e6:	f7ff fcab 	bl	8003b40 <HAL_RCC_GetSysClockFreq>
 80041ea:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80041ec:	e08b      	b.n	8004306 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 80041ee:	4b4d      	ldr	r3, [pc, #308]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 8085 	beq.w	8004306 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80041fc:	4b49      	ldr	r3, [pc, #292]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004200:	091b      	lsrs	r3, r3, #4
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	3301      	adds	r3, #1
 8004208:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 800420a:	4b46      	ldr	r3, [pc, #280]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800420c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420e:	0b1b      	lsrs	r3, r3, #12
 8004210:	f003 030f 	and.w	r3, r3, #15
 8004214:	3302      	adds	r3, #2
 8004216:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8004218:	4a43      	ldr	r2, [pc, #268]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800421a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004222:	fb02 f303 	mul.w	r3, r2, r3
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800422a:	e06c      	b.n	8004306 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 800422c:	4b3d      	ldr	r3, [pc, #244]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d103      	bne.n	8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
      {
        /* SYSCLK used as source clock for I2S3 */
        frequency = HAL_RCC_GetSysClockFreq();
 8004238:	f7ff fc82 	bl	8003b40 <HAL_RCC_GetSysClockFreq>
 800423c:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800423e:	e064      	b.n	800430a <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8004240:	4b38      	ldr	r3, [pc, #224]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d05e      	beq.n	800430a <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800424c:	4b35      	ldr	r3, [pc, #212]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800424e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004250:	091b      	lsrs	r3, r3, #4
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	3301      	adds	r3, #1
 8004258:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 800425a:	4b32      	ldr	r3, [pc, #200]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800425c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425e:	0b1b      	lsrs	r3, r3, #12
 8004260:	f003 030f 	and.w	r3, r3, #15
 8004264:	3302      	adds	r3, #2
 8004266:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8004268:	4a2f      	ldr	r2, [pc, #188]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800426a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004272:	fb02 f303 	mul.w	r3, r2, r3
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800427a:	e046      	b.n	800430a <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800427c:	4b29      	ldr	r3, [pc, #164]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004284:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800428c:	d108      	bne.n	80042a0 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 800428e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
      {
        frequency = LSE_VALUE;
 8004298:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800429c:	643b      	str	r3, [r7, #64]	; 0x40
 800429e:	e01f      	b.n	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80042a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042aa:	d109      	bne.n	80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80042ac:	4b1d      	ldr	r3, [pc, #116]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
      {
        frequency = LSI_VALUE;
 80042b8:	f649 4340 	movw	r3, #40000	; 0x9c40
 80042bc:	643b      	str	r3, [r7, #64]	; 0x40
 80042be:	e00f      	b.n	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80042c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042ca:	d120      	bne.n	800430e <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 80042cc:	4b15      	ldr	r3, [pc, #84]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d01a      	beq.n	800430e <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
      {
        frequency = HSE_VALUE / 128U;
 80042d8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80042dc:	643b      	str	r3, [r7, #64]	; 0x40
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80042de:	e016      	b.n	800430e <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 80042e0:	e015      	b.n	800430e <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80042e2:	f7ff fd2f 	bl	8003d44 <HAL_RCC_GetPCLK2Freq>
 80042e6:	4602      	mov	r2, r0
 80042e8:	4b0e      	ldr	r3, [pc, #56]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	0b9b      	lsrs	r3, r3, #14
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	3301      	adds	r3, #1
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042fa:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80042fc:	e008      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
    }
    default:
    {
      break;
 80042fe:	bf00      	nop
 8004300:	e006      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8004302:	bf00      	nop
 8004304:	e004      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8004306:	bf00      	nop
 8004308:	e002      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 800430a:	bf00      	nop
 800430c:	e000      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 800430e:	bf00      	nop
    }
  }
  return (frequency);
 8004310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004312:	4618      	mov	r0, r3
 8004314:	374c      	adds	r7, #76	; 0x4c
 8004316:	46bd      	mov	sp, r7
 8004318:	bd90      	pop	{r4, r7, pc}
 800431a:	bf00      	nop
 800431c:	08007bc0 	.word	0x08007bc0
 8004320:	08007bd0 	.word	0x08007bd0
 8004324:	40021000 	.word	0x40021000
 8004328:	007a1200 	.word	0x007a1200
 800432c:	003d0900 	.word	0x003d0900
 8004330:	aaaaaaab 	.word	0xaaaaaaab

08004334 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e084      	b.n	8004454 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	7c5b      	ldrb	r3, [r3, #17]
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d105      	bne.n	8004360 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7fc fc58 	bl	8000c10 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f9c8 	bl	80046fc <HAL_RTC_WaitForSynchro>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d004      	beq.n	800437c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2204      	movs	r2, #4
 8004376:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e06b      	b.n	8004454 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 fa81 	bl	8004884 <RTC_EnterInitMode>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d004      	beq.n	8004392 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2204      	movs	r2, #4
 800438c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e060      	b.n	8004454 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 0207 	bic.w	r2, r2, #7
 80043a0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d005      	beq.n	80043b6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80043aa:	4b2c      	ldr	r3, [pc, #176]	; (800445c <HAL_RTC_Init+0x128>)
 80043ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ae:	4a2b      	ldr	r2, [pc, #172]	; (800445c <HAL_RTC_Init+0x128>)
 80043b0:	f023 0301 	bic.w	r3, r3, #1
 80043b4:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80043b6:	4b29      	ldr	r3, [pc, #164]	; (800445c <HAL_RTC_Init+0x128>)
 80043b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ba:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	4926      	ldr	r1, [pc, #152]	; (800445c <HAL_RTC_Init+0x128>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d0:	d003      	beq.n	80043da <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	e00e      	b.n	80043f8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80043da:	2001      	movs	r0, #1
 80043dc:	f7ff fe46 	bl	800406c <HAL_RCCEx_GetPeriphCLKFreq>
 80043e0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d104      	bne.n	80043f2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2204      	movs	r2, #4
 80043ec:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e030      	b.n	8004454 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	3b01      	subs	r3, #1
 80043f6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f023 010f 	bic.w	r1, r3, #15
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	0c1a      	lsrs	r2, r3, #16
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	0c1b      	lsrs	r3, r3, #16
 8004416:	041b      	lsls	r3, r3, #16
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	b291      	uxth	r1, r2
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	6812      	ldr	r2, [r2, #0]
 8004420:	430b      	orrs	r3, r1
 8004422:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 fa55 	bl	80048d4 <RTC_ExitInitMode>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d004      	beq.n	800443a <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2204      	movs	r2, #4
 8004434:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e00c      	b.n	8004454 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8004452:	2300      	movs	r3, #0
  }
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40006c00 	.word	0x40006c00

08004460 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004460:	b590      	push	{r4, r7, lr}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800446c:	2300      	movs	r3, #0
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	2300      	movs	r3, #0
 8004472:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d002      	beq.n	8004480 <HAL_RTC_SetTime+0x20>
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e080      	b.n	8004586 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	7c1b      	ldrb	r3, [r3, #16]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d101      	bne.n	8004490 <HAL_RTC_SetTime+0x30>
 800448c:	2302      	movs	r3, #2
 800448e:	e07a      	b.n	8004586 <HAL_RTC_SetTime+0x126>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2201      	movs	r2, #1
 8004494:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2202      	movs	r2, #2
 800449a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d113      	bne.n	80044ca <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	461a      	mov	r2, r3
 80044a8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80044ac:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	785b      	ldrb	r3, [r3, #1]
 80044b4:	4619      	mov	r1, r3
 80044b6:	460b      	mov	r3, r1
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	1a5b      	subs	r3, r3, r1
 80044bc:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80044be:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80044c4:	4413      	add	r3, r2
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	e01e      	b.n	8004508 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 fa28 	bl	8004924 <RTC_Bcd2ToByte>
 80044d4:	4603      	mov	r3, r0
 80044d6:	461a      	mov	r2, r3
 80044d8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80044dc:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	785b      	ldrb	r3, [r3, #1]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 fa1d 	bl	8004924 <RTC_Bcd2ToByte>
 80044ea:	4603      	mov	r3, r0
 80044ec:	461a      	mov	r2, r3
 80044ee:	4613      	mov	r3, r2
 80044f0:	011b      	lsls	r3, r3, #4
 80044f2:	1a9b      	subs	r3, r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80044f6:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	789b      	ldrb	r3, [r3, #2]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 fa11 	bl	8004924 <RTC_Bcd2ToByte>
 8004502:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004504:	4423      	add	r3, r4
 8004506:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004508:	6979      	ldr	r1, [r7, #20]
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 f953 	bl	80047b6 <RTC_WriteTimeCounter>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d007      	beq.n	8004526 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2204      	movs	r2, #4
 800451a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e02f      	b.n	8004586 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0205 	bic.w	r2, r2, #5
 8004534:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 f964 	bl	8004804 <RTC_ReadAlarmCounter>
 800453c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004544:	d018      	beq.n	8004578 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	429a      	cmp	r2, r3
 800454c:	d214      	bcs.n	8004578 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004554:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004558:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800455a:	6939      	ldr	r1, [r7, #16]
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 f96a 	bl	8004836 <RTC_WriteAlarmCounter>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d007      	beq.n	8004578 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2204      	movs	r2, #4
 800456c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e006      	b.n	8004586 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2201      	movs	r2, #1
 800457c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004584:	2300      	movs	r3, #0
  }
}
 8004586:	4618      	mov	r0, r3
 8004588:	371c      	adds	r7, #28
 800458a:	46bd      	mov	sp, r7
 800458c:	bd90      	pop	{r4, r7, pc}
	...

08004590 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b088      	sub	sp, #32
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	61fb      	str	r3, [r7, #28]
 80045a0:	2300      	movs	r3, #0
 80045a2:	61bb      	str	r3, [r7, #24]
 80045a4:	2300      	movs	r3, #0
 80045a6:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <HAL_RTC_SetDate+0x24>
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d101      	bne.n	80045b8 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e097      	b.n	80046e8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	7c1b      	ldrb	r3, [r3, #16]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d101      	bne.n	80045c4 <HAL_RTC_SetDate+0x34>
 80045c0:	2302      	movs	r3, #2
 80045c2:	e091      	b.n	80046e8 <HAL_RTC_SetDate+0x158>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2201      	movs	r2, #1
 80045c8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2202      	movs	r2, #2
 80045ce:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10c      	bne.n	80045f0 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	78da      	ldrb	r2, [r3, #3]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	785a      	ldrb	r2, [r3, #1]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	789a      	ldrb	r2, [r3, #2]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	739a      	strb	r2, [r3, #14]
 80045ee:	e01a      	b.n	8004626 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	78db      	ldrb	r3, [r3, #3]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 f995 	bl	8004924 <RTC_Bcd2ToByte>
 80045fa:	4603      	mov	r3, r0
 80045fc:	461a      	mov	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	785b      	ldrb	r3, [r3, #1]
 8004606:	4618      	mov	r0, r3
 8004608:	f000 f98c 	bl	8004924 <RTC_Bcd2ToByte>
 800460c:	4603      	mov	r3, r0
 800460e:	461a      	mov	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	789b      	ldrb	r3, [r3, #2]
 8004618:	4618      	mov	r0, r3
 800461a:	f000 f983 	bl	8004924 <RTC_Bcd2ToByte>
 800461e:	4603      	mov	r3, r0
 8004620:	461a      	mov	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	7bdb      	ldrb	r3, [r3, #15]
 800462a:	4618      	mov	r0, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	7b59      	ldrb	r1, [r3, #13]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	7b9b      	ldrb	r3, [r3, #14]
 8004634:	461a      	mov	r2, r3
 8004636:	f000 f993 	bl	8004960 <RTC_WeekDayNum>
 800463a:	4603      	mov	r3, r0
 800463c:	461a      	mov	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	7b1a      	ldrb	r2, [r3, #12]
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 f883 	bl	8004756 <RTC_ReadTimeCounter>
 8004650:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	4a26      	ldr	r2, [pc, #152]	; (80046f0 <HAL_RTC_SetDate+0x160>)
 8004656:	fba2 2303 	umull	r2, r3, r2, r3
 800465a:	0adb      	lsrs	r3, r3, #11
 800465c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	2b18      	cmp	r3, #24
 8004662:	d93a      	bls.n	80046da <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	4a23      	ldr	r2, [pc, #140]	; (80046f4 <HAL_RTC_SetDate+0x164>)
 8004668:	fba2 2303 	umull	r2, r3, r2, r3
 800466c:	091b      	lsrs	r3, r3, #4
 800466e:	4a22      	ldr	r2, [pc, #136]	; (80046f8 <HAL_RTC_SetDate+0x168>)
 8004670:	fb02 f303 	mul.w	r3, r2, r3
 8004674:	69fa      	ldr	r2, [r7, #28]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800467a:	69f9      	ldr	r1, [r7, #28]
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 f89a 	bl	80047b6 <RTC_WriteTimeCounter>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d007      	beq.n	8004698 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2204      	movs	r2, #4
 800468c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e027      	b.n	80046e8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 f8b3 	bl	8004804 <RTC_ReadAlarmCounter>
 800469e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a6:	d018      	beq.n	80046da <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d214      	bcs.n	80046da <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80046b6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80046ba:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80046bc:	69b9      	ldr	r1, [r7, #24]
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 f8b9 	bl	8004836 <RTC_WriteAlarmCounter>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d007      	beq.n	80046da <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2204      	movs	r2, #4
 80046ce:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e006      	b.n	80046e8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2201      	movs	r2, #1
 80046de:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3720      	adds	r7, #32
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	91a2b3c5 	.word	0x91a2b3c5
 80046f4:	aaaaaaab 	.word	0xaaaaaaab
 80046f8:	00015180 	.word	0x00015180

080046fc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e01d      	b.n	800474e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 0208 	bic.w	r2, r2, #8
 8004720:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004722:	f7fc fc37 	bl	8000f94 <HAL_GetTick>
 8004726:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004728:	e009      	b.n	800473e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800472a:	f7fc fc33 	bl	8000f94 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004738:	d901      	bls.n	800473e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e007      	b.n	800474e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f003 0308 	and.w	r3, r3, #8
 8004748:	2b00      	cmp	r3, #0
 800474a:	d0ee      	beq.n	800472a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004756:	b480      	push	{r7}
 8004758:	b087      	sub	sp, #28
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800475e:	2300      	movs	r3, #0
 8004760:	827b      	strh	r3, [r7, #18]
 8004762:	2300      	movs	r3, #0
 8004764:	823b      	strh	r3, [r7, #16]
 8004766:	2300      	movs	r3, #0
 8004768:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800476a:	2300      	movs	r3, #0
 800476c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004786:	8a7a      	ldrh	r2, [r7, #18]
 8004788:	8a3b      	ldrh	r3, [r7, #16]
 800478a:	429a      	cmp	r2, r3
 800478c:	d008      	beq.n	80047a0 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800478e:	8a3b      	ldrh	r3, [r7, #16]
 8004790:	041a      	lsls	r2, r3, #16
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	b29b      	uxth	r3, r3
 800479a:	4313      	orrs	r3, r2
 800479c:	617b      	str	r3, [r7, #20]
 800479e:	e004      	b.n	80047aa <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80047a0:	8a7b      	ldrh	r3, [r7, #18]
 80047a2:	041a      	lsls	r2, r3, #16
 80047a4:	89fb      	ldrh	r3, [r7, #14]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80047aa:	697b      	ldr	r3, [r7, #20]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	371c      	adds	r7, #28
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bc80      	pop	{r7}
 80047b4:	4770      	bx	lr

080047b6 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b084      	sub	sp, #16
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
 80047be:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047c0:	2300      	movs	r3, #0
 80047c2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f85d 	bl	8004884 <RTC_EnterInitMode>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	73fb      	strb	r3, [r7, #15]
 80047d4:	e011      	b.n	80047fa <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	0c12      	lsrs	r2, r2, #16
 80047de:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	b292      	uxth	r2, r2
 80047e8:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f872 	bl	80048d4 <RTC_ExitInitMode>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800480c:	2300      	movs	r3, #0
 800480e:	81fb      	strh	r3, [r7, #14]
 8004810:	2300      	movs	r3, #0
 8004812:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004824:	89fb      	ldrh	r3, [r7, #14]
 8004826:	041a      	lsls	r2, r3, #16
 8004828:	89bb      	ldrh	r3, [r7, #12]
 800482a:	4313      	orrs	r3, r2
}
 800482c:	4618      	mov	r0, r3
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	bc80      	pop	{r7}
 8004834:	4770      	bx	lr

08004836 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b084      	sub	sp, #16
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004840:	2300      	movs	r3, #0
 8004842:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 f81d 	bl	8004884 <RTC_EnterInitMode>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	73fb      	strb	r3, [r7, #15]
 8004854:	e011      	b.n	800487a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	0c12      	lsrs	r2, r2, #16
 800485e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	b292      	uxth	r2, r2
 8004868:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f832 	bl	80048d4 <RTC_ExitInitMode>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800487a:	7bfb      	ldrb	r3, [r7, #15]
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004890:	f7fc fb80 	bl	8000f94 <HAL_GetTick>
 8004894:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004896:	e009      	b.n	80048ac <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004898:	f7fc fb7c 	bl	8000f94 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048a6:	d901      	bls.n	80048ac <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e00f      	b.n	80048cc <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f003 0320 	and.w	r3, r3, #32
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0ee      	beq.n	8004898 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f042 0210 	orr.w	r2, r2, #16
 80048c8:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 0210 	bic.w	r2, r2, #16
 80048ee:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80048f0:	f7fc fb50 	bl	8000f94 <HAL_GetTick>
 80048f4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80048f6:	e009      	b.n	800490c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80048f8:	f7fc fb4c 	bl	8000f94 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004906:	d901      	bls.n	800490c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e007      	b.n	800491c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f003 0320 	and.w	r3, r3, #32
 8004916:	2b00      	cmp	r3, #0
 8004918:	d0ee      	beq.n	80048f8 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	4603      	mov	r3, r0
 800492c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800492e:	2300      	movs	r3, #0
 8004930:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004932:	79fb      	ldrb	r3, [r7, #7]
 8004934:	091b      	lsrs	r3, r3, #4
 8004936:	b2db      	uxtb	r3, r3
 8004938:	461a      	mov	r2, r3
 800493a:	4613      	mov	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004944:	79fb      	ldrb	r3, [r7, #7]
 8004946:	f003 030f 	and.w	r3, r3, #15
 800494a:	b2da      	uxtb	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	b2db      	uxtb	r3, r3
 8004950:	4413      	add	r3, r2
 8004952:	b2db      	uxtb	r3, r3
}
 8004954:	4618      	mov	r0, r3
 8004956:	3714      	adds	r7, #20
 8004958:	46bd      	mov	sp, r7
 800495a:	bc80      	pop	{r7}
 800495c:	4770      	bx	lr
	...

08004960 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	460b      	mov	r3, r1
 800496a:	70fb      	strb	r3, [r7, #3]
 800496c:	4613      	mov	r3, r2
 800496e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8004970:	2300      	movs	r3, #0
 8004972:	60bb      	str	r3, [r7, #8]
 8004974:	2300      	movs	r3, #0
 8004976:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800497e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8004980:	78fb      	ldrb	r3, [r7, #3]
 8004982:	2b02      	cmp	r3, #2
 8004984:	d82d      	bhi.n	80049e2 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004986:	78fa      	ldrb	r2, [r7, #3]
 8004988:	4613      	mov	r3, r2
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	4413      	add	r3, r2
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	1a9b      	subs	r3, r3, r2
 8004992:	4a2c      	ldr	r2, [pc, #176]	; (8004a44 <RTC_WeekDayNum+0xe4>)
 8004994:	fba2 2303 	umull	r2, r3, r2, r3
 8004998:	085a      	lsrs	r2, r3, #1
 800499a:	78bb      	ldrb	r3, [r7, #2]
 800499c:	441a      	add	r2, r3
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	441a      	add	r2, r3
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	3b01      	subs	r3, #1
 80049a6:	089b      	lsrs	r3, r3, #2
 80049a8:	441a      	add	r2, r3
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	3b01      	subs	r3, #1
 80049ae:	4926      	ldr	r1, [pc, #152]	; (8004a48 <RTC_WeekDayNum+0xe8>)
 80049b0:	fba1 1303 	umull	r1, r3, r1, r3
 80049b4:	095b      	lsrs	r3, r3, #5
 80049b6:	1ad2      	subs	r2, r2, r3
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	3b01      	subs	r3, #1
 80049bc:	4922      	ldr	r1, [pc, #136]	; (8004a48 <RTC_WeekDayNum+0xe8>)
 80049be:	fba1 1303 	umull	r1, r3, r1, r3
 80049c2:	09db      	lsrs	r3, r3, #7
 80049c4:	4413      	add	r3, r2
 80049c6:	1d1a      	adds	r2, r3, #4
 80049c8:	4b20      	ldr	r3, [pc, #128]	; (8004a4c <RTC_WeekDayNum+0xec>)
 80049ca:	fba3 1302 	umull	r1, r3, r3, r2
 80049ce:	1ad1      	subs	r1, r2, r3
 80049d0:	0849      	lsrs	r1, r1, #1
 80049d2:	440b      	add	r3, r1
 80049d4:	0899      	lsrs	r1, r3, #2
 80049d6:	460b      	mov	r3, r1
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	1a5b      	subs	r3, r3, r1
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	e029      	b.n	8004a36 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80049e2:	78fa      	ldrb	r2, [r7, #3]
 80049e4:	4613      	mov	r3, r2
 80049e6:	005b      	lsls	r3, r3, #1
 80049e8:	4413      	add	r3, r2
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	1a9b      	subs	r3, r3, r2
 80049ee:	4a15      	ldr	r2, [pc, #84]	; (8004a44 <RTC_WeekDayNum+0xe4>)
 80049f0:	fba2 2303 	umull	r2, r3, r2, r3
 80049f4:	085a      	lsrs	r2, r3, #1
 80049f6:	78bb      	ldrb	r3, [r7, #2]
 80049f8:	441a      	add	r2, r3
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	441a      	add	r2, r3
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	089b      	lsrs	r3, r3, #2
 8004a02:	441a      	add	r2, r3
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	4910      	ldr	r1, [pc, #64]	; (8004a48 <RTC_WeekDayNum+0xe8>)
 8004a08:	fba1 1303 	umull	r1, r3, r1, r3
 8004a0c:	095b      	lsrs	r3, r3, #5
 8004a0e:	1ad2      	subs	r2, r2, r3
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	490d      	ldr	r1, [pc, #52]	; (8004a48 <RTC_WeekDayNum+0xe8>)
 8004a14:	fba1 1303 	umull	r1, r3, r1, r3
 8004a18:	09db      	lsrs	r3, r3, #7
 8004a1a:	4413      	add	r3, r2
 8004a1c:	1c9a      	adds	r2, r3, #2
 8004a1e:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <RTC_WeekDayNum+0xec>)
 8004a20:	fba3 1302 	umull	r1, r3, r3, r2
 8004a24:	1ad1      	subs	r1, r2, r3
 8004a26:	0849      	lsrs	r1, r1, #1
 8004a28:	440b      	add	r3, r1
 8004a2a:	0899      	lsrs	r1, r3, #2
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	1a5b      	subs	r3, r3, r1
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	b2db      	uxtb	r3, r3
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bc80      	pop	{r7}
 8004a42:	4770      	bx	lr
 8004a44:	38e38e39 	.word	0x38e38e39
 8004a48:	51eb851f 	.word	0x51eb851f
 8004a4c:	24924925 	.word	0x24924925

08004a50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e041      	b.n	8004ae6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d106      	bne.n	8004a7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f839 	bl	8004aee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	3304      	adds	r3, #4
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4610      	mov	r0, r2
 8004a90:	f000 f9bc 	bl	8004e0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3708      	adds	r7, #8
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bc80      	pop	{r7}
 8004afe:	4770      	bx	lr

08004b00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d001      	beq.n	8004b18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e03f      	b.n	8004b98 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68da      	ldr	r2, [r3, #12]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a1b      	ldr	r2, [pc, #108]	; (8004ba4 <HAL_TIM_Base_Start_IT+0xa4>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d013      	beq.n	8004b62 <HAL_TIM_Base_Start_IT+0x62>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b42:	d00e      	beq.n	8004b62 <HAL_TIM_Base_Start_IT+0x62>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a17      	ldr	r2, [pc, #92]	; (8004ba8 <HAL_TIM_Base_Start_IT+0xa8>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d009      	beq.n	8004b62 <HAL_TIM_Base_Start_IT+0x62>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a16      	ldr	r2, [pc, #88]	; (8004bac <HAL_TIM_Base_Start_IT+0xac>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d004      	beq.n	8004b62 <HAL_TIM_Base_Start_IT+0x62>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a14      	ldr	r2, [pc, #80]	; (8004bb0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d111      	bne.n	8004b86 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f003 0307 	and.w	r3, r3, #7
 8004b6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2b06      	cmp	r3, #6
 8004b72:	d010      	beq.n	8004b96 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0201 	orr.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b84:	e007      	b.n	8004b96 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f042 0201 	orr.w	r2, r2, #1
 8004b94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bc80      	pop	{r7}
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	40012c00 	.word	0x40012c00
 8004ba8:	40000400 	.word	0x40000400
 8004bac:	40000800 	.word	0x40000800
 8004bb0:	40000c00 	.word	0x40000c00

08004bb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d122      	bne.n	8004c10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d11b      	bne.n	8004c10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f06f 0202 	mvn.w	r2, #2
 8004be0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f8ed 	bl	8004dd6 <HAL_TIM_IC_CaptureCallback>
 8004bfc:	e005      	b.n	8004c0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f8e0 	bl	8004dc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 f8ef 	bl	8004de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	f003 0304 	and.w	r3, r3, #4
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	d122      	bne.n	8004c64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f003 0304 	and.w	r3, r3, #4
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d11b      	bne.n	8004c64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f06f 0204 	mvn.w	r2, #4
 8004c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2202      	movs	r2, #2
 8004c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d003      	beq.n	8004c52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f8c3 	bl	8004dd6 <HAL_TIM_IC_CaptureCallback>
 8004c50:	e005      	b.n	8004c5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f8b6 	bl	8004dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 f8c5 	bl	8004de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	f003 0308 	and.w	r3, r3, #8
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	d122      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f003 0308 	and.w	r3, r3, #8
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d11b      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f06f 0208 	mvn.w	r2, #8
 8004c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2204      	movs	r2, #4
 8004c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	f003 0303 	and.w	r3, r3, #3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f899 	bl	8004dd6 <HAL_TIM_IC_CaptureCallback>
 8004ca4:	e005      	b.n	8004cb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f88c 	bl	8004dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f89b 	bl	8004de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	f003 0310 	and.w	r3, r3, #16
 8004cc2:	2b10      	cmp	r3, #16
 8004cc4:	d122      	bne.n	8004d0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f003 0310 	and.w	r3, r3, #16
 8004cd0:	2b10      	cmp	r3, #16
 8004cd2:	d11b      	bne.n	8004d0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f06f 0210 	mvn.w	r2, #16
 8004cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2208      	movs	r2, #8
 8004ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f86f 	bl	8004dd6 <HAL_TIM_IC_CaptureCallback>
 8004cf8:	e005      	b.n	8004d06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f862 	bl	8004dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f871 	bl	8004de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d10e      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d107      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f06f 0201 	mvn.w	r2, #1
 8004d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7fb fece 	bl	8000ad4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d42:	2b80      	cmp	r3, #128	; 0x80
 8004d44:	d10e      	bne.n	8004d64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d50:	2b80      	cmp	r3, #128	; 0x80
 8004d52:	d107      	bne.n	8004d64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f8c9 	bl	8004ef6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6e:	2b40      	cmp	r3, #64	; 0x40
 8004d70:	d10e      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7c:	2b40      	cmp	r3, #64	; 0x40
 8004d7e:	d107      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f835 	bl	8004dfa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	f003 0320 	and.w	r3, r3, #32
 8004d9a:	2b20      	cmp	r3, #32
 8004d9c:	d10e      	bne.n	8004dbc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f003 0320 	and.w	r3, r3, #32
 8004da8:	2b20      	cmp	r3, #32
 8004daa:	d107      	bne.n	8004dbc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f06f 0220 	mvn.w	r2, #32
 8004db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f894 	bl	8004ee4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dbc:	bf00      	nop
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bc80      	pop	{r7}
 8004dd4:	4770      	bx	lr

08004dd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b083      	sub	sp, #12
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dde:	bf00      	nop
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bc80      	pop	{r7}
 8004de6:	4770      	bx	lr

08004de8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bc80      	pop	{r7}
 8004df8:	4770      	bx	lr

08004dfa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b083      	sub	sp, #12
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e02:	bf00      	nop
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bc80      	pop	{r7}
 8004e0a:	4770      	bx	lr

08004e0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a2d      	ldr	r2, [pc, #180]	; (8004ed4 <TIM_Base_SetConfig+0xc8>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d00f      	beq.n	8004e44 <TIM_Base_SetConfig+0x38>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e2a:	d00b      	beq.n	8004e44 <TIM_Base_SetConfig+0x38>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a2a      	ldr	r2, [pc, #168]	; (8004ed8 <TIM_Base_SetConfig+0xcc>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d007      	beq.n	8004e44 <TIM_Base_SetConfig+0x38>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a29      	ldr	r2, [pc, #164]	; (8004edc <TIM_Base_SetConfig+0xd0>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d003      	beq.n	8004e44 <TIM_Base_SetConfig+0x38>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a28      	ldr	r2, [pc, #160]	; (8004ee0 <TIM_Base_SetConfig+0xd4>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d108      	bne.n	8004e56 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a1e      	ldr	r2, [pc, #120]	; (8004ed4 <TIM_Base_SetConfig+0xc8>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d00f      	beq.n	8004e7e <TIM_Base_SetConfig+0x72>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e64:	d00b      	beq.n	8004e7e <TIM_Base_SetConfig+0x72>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a1b      	ldr	r2, [pc, #108]	; (8004ed8 <TIM_Base_SetConfig+0xcc>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d007      	beq.n	8004e7e <TIM_Base_SetConfig+0x72>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a1a      	ldr	r2, [pc, #104]	; (8004edc <TIM_Base_SetConfig+0xd0>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d003      	beq.n	8004e7e <TIM_Base_SetConfig+0x72>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a19      	ldr	r2, [pc, #100]	; (8004ee0 <TIM_Base_SetConfig+0xd4>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d108      	bne.n	8004e90 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a07      	ldr	r2, [pc, #28]	; (8004ed4 <TIM_Base_SetConfig+0xc8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d103      	bne.n	8004ec4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	691a      	ldr	r2, [r3, #16]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	615a      	str	r2, [r3, #20]
}
 8004eca:	bf00      	nop
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bc80      	pop	{r7}
 8004ed2:	4770      	bx	lr
 8004ed4:	40012c00 	.word	0x40012c00
 8004ed8:	40000400 	.word	0x40000400
 8004edc:	40000800 	.word	0x40000800
 8004ee0:	40000c00 	.word	0x40000c00

08004ee4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bc80      	pop	{r7}
 8004ef4:	4770      	bx	lr

08004ef6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bc80      	pop	{r7}
 8004f06:	4770      	bx	lr

08004f08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e03f      	b.n	8004f9a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d106      	bne.n	8004f34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7fb fe92 	bl	8000c58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2224      	movs	r2, #36	; 0x24
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68da      	ldr	r2, [r3, #12]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f829 	bl	8004fa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	691a      	ldr	r2, [r3, #16]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	695a      	ldr	r2, [r3, #20]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68da      	ldr	r2, [r3, #12]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
	...

08004fa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68da      	ldr	r2, [r3, #12]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	689a      	ldr	r2, [r3, #8]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004fde:	f023 030c 	bic.w	r3, r3, #12
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	6812      	ldr	r2, [r2, #0]
 8004fe6:	68b9      	ldr	r1, [r7, #8]
 8004fe8:	430b      	orrs	r3, r1
 8004fea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	699a      	ldr	r2, [r3, #24]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a2c      	ldr	r2, [pc, #176]	; (80050b8 <UART_SetConfig+0x114>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d103      	bne.n	8005014 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800500c:	f7fe fe9a 	bl	8003d44 <HAL_RCC_GetPCLK2Freq>
 8005010:	60f8      	str	r0, [r7, #12]
 8005012:	e002      	b.n	800501a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005014:	f7fe fe82 	bl	8003d1c <HAL_RCC_GetPCLK1Freq>
 8005018:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	4613      	mov	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4413      	add	r3, r2
 8005022:	009a      	lsls	r2, r3, #2
 8005024:	441a      	add	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005030:	4a22      	ldr	r2, [pc, #136]	; (80050bc <UART_SetConfig+0x118>)
 8005032:	fba2 2303 	umull	r2, r3, r2, r3
 8005036:	095b      	lsrs	r3, r3, #5
 8005038:	0119      	lsls	r1, r3, #4
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	4613      	mov	r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	009a      	lsls	r2, r3, #2
 8005044:	441a      	add	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005050:	4b1a      	ldr	r3, [pc, #104]	; (80050bc <UART_SetConfig+0x118>)
 8005052:	fba3 0302 	umull	r0, r3, r3, r2
 8005056:	095b      	lsrs	r3, r3, #5
 8005058:	2064      	movs	r0, #100	; 0x64
 800505a:	fb00 f303 	mul.w	r3, r0, r3
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	011b      	lsls	r3, r3, #4
 8005062:	3332      	adds	r3, #50	; 0x32
 8005064:	4a15      	ldr	r2, [pc, #84]	; (80050bc <UART_SetConfig+0x118>)
 8005066:	fba2 2303 	umull	r2, r3, r2, r3
 800506a:	095b      	lsrs	r3, r3, #5
 800506c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005070:	4419      	add	r1, r3
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	4613      	mov	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	009a      	lsls	r2, r3, #2
 800507c:	441a      	add	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	fbb2 f2f3 	udiv	r2, r2, r3
 8005088:	4b0c      	ldr	r3, [pc, #48]	; (80050bc <UART_SetConfig+0x118>)
 800508a:	fba3 0302 	umull	r0, r3, r3, r2
 800508e:	095b      	lsrs	r3, r3, #5
 8005090:	2064      	movs	r0, #100	; 0x64
 8005092:	fb00 f303 	mul.w	r3, r0, r3
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	011b      	lsls	r3, r3, #4
 800509a:	3332      	adds	r3, #50	; 0x32
 800509c:	4a07      	ldr	r2, [pc, #28]	; (80050bc <UART_SetConfig+0x118>)
 800509e:	fba2 2303 	umull	r2, r3, r2, r3
 80050a2:	095b      	lsrs	r3, r3, #5
 80050a4:	f003 020f 	and.w	r2, r3, #15
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	440a      	add	r2, r1
 80050ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80050b0:	bf00      	nop
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	40013800 	.word	0x40013800
 80050bc:	51eb851f 	.word	0x51eb851f

080050c0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	4603      	mov	r3, r0
 80050c8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80050ca:	2300      	movs	r3, #0
 80050cc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80050ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050d2:	2b84      	cmp	r3, #132	; 0x84
 80050d4:	d005      	beq.n	80050e2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80050d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4413      	add	r3, r2
 80050de:	3303      	adds	r3, #3
 80050e0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80050e2:	68fb      	ldr	r3, [r7, #12]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bc80      	pop	{r7}
 80050ec:	4770      	bx	lr

080050ee <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80050f2:	f001 f85d 	bl	80061b0 <vTaskStartScheduler>
  
  return osOK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	bd80      	pop	{r7, pc}

080050fc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80050fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050fe:	b089      	sub	sp, #36	; 0x24
 8005100:	af04      	add	r7, sp, #16
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d020      	beq.n	8005150 <osThreadCreate+0x54>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d01c      	beq.n	8005150 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685c      	ldr	r4, [r3, #4]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681d      	ldr	r5, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	691e      	ldr	r6, [r3, #16]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005128:	4618      	mov	r0, r3
 800512a:	f7ff ffc9 	bl	80050c0 <makeFreeRtosPriority>
 800512e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005138:	9202      	str	r2, [sp, #8]
 800513a:	9301      	str	r3, [sp, #4]
 800513c:	9100      	str	r1, [sp, #0]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	4632      	mov	r2, r6
 8005142:	4629      	mov	r1, r5
 8005144:	4620      	mov	r0, r4
 8005146:	f000 fe6d 	bl	8005e24 <xTaskCreateStatic>
 800514a:	4603      	mov	r3, r0
 800514c:	60fb      	str	r3, [r7, #12]
 800514e:	e01c      	b.n	800518a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685c      	ldr	r4, [r3, #4]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800515c:	b29e      	uxth	r6, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005164:	4618      	mov	r0, r3
 8005166:	f7ff ffab 	bl	80050c0 <makeFreeRtosPriority>
 800516a:	4602      	mov	r2, r0
 800516c:	f107 030c 	add.w	r3, r7, #12
 8005170:	9301      	str	r3, [sp, #4]
 8005172:	9200      	str	r2, [sp, #0]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	4632      	mov	r2, r6
 8005178:	4629      	mov	r1, r5
 800517a:	4620      	mov	r0, r4
 800517c:	f000 feae 	bl	8005edc <xTaskCreate>
 8005180:	4603      	mov	r3, r0
 8005182:	2b01      	cmp	r3, #1
 8005184:	d001      	beq.n	800518a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005186:	2300      	movs	r3, #0
 8005188:	e000      	b.n	800518c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800518a:	68fb      	ldr	r3, [r7, #12]
}
 800518c:	4618      	mov	r0, r3
 800518e:	3714      	adds	r7, #20
 8005190:	46bd      	mov	sp, r7
 8005192:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005194 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <osDelay+0x16>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	e000      	b.n	80051ac <osDelay+0x18>
 80051aa:	2301      	movs	r3, #1
 80051ac:	4618      	mov	r0, r3
 80051ae:	f000 ffcb 	bl	8006148 <vTaskDelay>
  
  return osOK;
 80051b2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af02      	add	r7, sp, #8
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	460b      	mov	r3, r1
 80051c6:	607a      	str	r2, [r7, #4]
 80051c8:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d013      	beq.n	80051fa <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 80051d2:	7afb      	ldrb	r3, [r7, #11]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d101      	bne.n	80051dc <osTimerCreate+0x20>
 80051d8:	2101      	movs	r1, #1
 80051da:	e000      	b.n	80051de <osTimerCreate+0x22>
 80051dc:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80051e6:	9201      	str	r2, [sp, #4]
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	460a      	mov	r2, r1
 80051ee:	2101      	movs	r1, #1
 80051f0:	480b      	ldr	r0, [pc, #44]	; (8005220 <osTimerCreate+0x64>)
 80051f2:	f001 fd96 	bl	8006d22 <xTimerCreateStatic>
 80051f6:	4603      	mov	r3, r0
 80051f8:	e00e      	b.n	8005218 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 80051fa:	7afb      	ldrb	r3, [r7, #11]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d101      	bne.n	8005204 <osTimerCreate+0x48>
 8005200:	2201      	movs	r2, #1
 8005202:	e000      	b.n	8005206 <osTimerCreate+0x4a>
 8005204:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2101      	movs	r1, #1
 8005210:	4803      	ldr	r0, [pc, #12]	; (8005220 <osTimerCreate+0x64>)
 8005212:	f001 fd65 	bl	8006ce0 <xTimerCreate>
 8005216:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8005218:	4618      	mov	r0, r3
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	08007be0 	.word	0x08007be0

08005224 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005224:	b580      	push	{r7, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af02      	add	r7, sp, #8
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00f      	beq.n	8005256 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d10a      	bne.n	8005252 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	2203      	movs	r2, #3
 8005242:	9200      	str	r2, [sp, #0]
 8005244:	2200      	movs	r2, #0
 8005246:	2100      	movs	r1, #0
 8005248:	2001      	movs	r0, #1
 800524a:	f000 f935 	bl	80054b8 <xQueueGenericCreateStatic>
 800524e:	4603      	mov	r3, r0
 8005250:	e016      	b.n	8005280 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005252:	2300      	movs	r3, #0
 8005254:	e014      	b.n	8005280 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d110      	bne.n	800527e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800525c:	2203      	movs	r2, #3
 800525e:	2100      	movs	r1, #0
 8005260:	2001      	movs	r0, #1
 8005262:	f000 f9a0 	bl	80055a6 <xQueueGenericCreate>
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d005      	beq.n	800527a <osSemaphoreCreate+0x56>
 800526e:	2300      	movs	r3, #0
 8005270:	2200      	movs	r2, #0
 8005272:	2100      	movs	r1, #0
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f000 f9f3 	bl	8005660 <xQueueGenericSend>
      return sema;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	e000      	b.n	8005280 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800527e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f103 0208 	add.w	r2, r3, #8
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f04f 32ff 	mov.w	r2, #4294967295
 80052a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f103 0208 	add.w	r2, r3, #8
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f103 0208 	add.w	r2, r3, #8
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bc80      	pop	{r7}
 80052c4:	4770      	bx	lr

080052c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80052c6:	b480      	push	{r7}
 80052c8:	b083      	sub	sp, #12
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	bc80      	pop	{r7}
 80052dc:	4770      	bx	lr

080052de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052de:	b480      	push	{r7}
 80052e0:	b085      	sub	sp, #20
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
 80052e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	1c5a      	adds	r2, r3, #1
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	601a      	str	r2, [r3, #0]
}
 800531a:	bf00      	nop
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	bc80      	pop	{r7}
 8005322:	4770      	bx	lr

08005324 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533a:	d103      	bne.n	8005344 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	60fb      	str	r3, [r7, #12]
 8005342:	e00c      	b.n	800535e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	3308      	adds	r3, #8
 8005348:	60fb      	str	r3, [r7, #12]
 800534a:	e002      	b.n	8005352 <vListInsert+0x2e>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	60fb      	str	r3, [r7, #12]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	429a      	cmp	r2, r3
 800535c:	d2f6      	bcs.n	800534c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	1c5a      	adds	r2, r3, #1
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	601a      	str	r2, [r3, #0]
}
 800538a:	bf00      	nop
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	bc80      	pop	{r7}
 8005392:	4770      	bx	lr

08005394 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	6892      	ldr	r2, [r2, #8]
 80053aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	6852      	ldr	r2, [r2, #4]
 80053b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d103      	bne.n	80053c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	1e5a      	subs	r2, r3, #1
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bc80      	pop	{r7}
 80053e4:	4770      	bx	lr
	...

080053e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10a      	bne.n	8005412 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80053fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005400:	f383 8811 	msr	BASEPRI, r3
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	f3bf 8f4f 	dsb	sy
 800540c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800540e:	bf00      	nop
 8005410:	e7fe      	b.n	8005410 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005412:	f002 f893 	bl	800753c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800541e:	68f9      	ldr	r1, [r7, #12]
 8005420:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005422:	fb01 f303 	mul.w	r3, r1, r3
 8005426:	441a      	add	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005442:	3b01      	subs	r3, #1
 8005444:	68f9      	ldr	r1, [r7, #12]
 8005446:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005448:	fb01 f303 	mul.w	r3, r1, r3
 800544c:	441a      	add	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	22ff      	movs	r2, #255	; 0xff
 8005456:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	22ff      	movs	r2, #255	; 0xff
 800545e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d114      	bne.n	8005492 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d01a      	beq.n	80054a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	3310      	adds	r3, #16
 8005474:	4618      	mov	r0, r3
 8005476:	f001 f921 	bl	80066bc <xTaskRemoveFromEventList>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d012      	beq.n	80054a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005480:	4b0c      	ldr	r3, [pc, #48]	; (80054b4 <xQueueGenericReset+0xcc>)
 8005482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	e009      	b.n	80054a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	3310      	adds	r3, #16
 8005496:	4618      	mov	r0, r3
 8005498:	f7ff fef6 	bl	8005288 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	3324      	adds	r3, #36	; 0x24
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7ff fef1 	bl	8005288 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80054a6:	f002 f879 	bl	800759c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80054aa:	2301      	movs	r3, #1
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	e000ed04 	.word	0xe000ed04

080054b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b08e      	sub	sp, #56	; 0x38
 80054bc:	af02      	add	r7, sp, #8
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
 80054c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10a      	bne.n	80054e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80054cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d0:	f383 8811 	msr	BASEPRI, r3
 80054d4:	f3bf 8f6f 	isb	sy
 80054d8:	f3bf 8f4f 	dsb	sy
 80054dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80054de:	bf00      	nop
 80054e0:	e7fe      	b.n	80054e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10a      	bne.n	80054fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80054e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ec:	f383 8811 	msr	BASEPRI, r3
 80054f0:	f3bf 8f6f 	isb	sy
 80054f4:	f3bf 8f4f 	dsb	sy
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80054fa:	bf00      	nop
 80054fc:	e7fe      	b.n	80054fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <xQueueGenericCreateStatic+0x52>
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <xQueueGenericCreateStatic+0x56>
 800550a:	2301      	movs	r3, #1
 800550c:	e000      	b.n	8005510 <xQueueGenericCreateStatic+0x58>
 800550e:	2300      	movs	r3, #0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10a      	bne.n	800552a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	623b      	str	r3, [r7, #32]
}
 8005526:	bf00      	nop
 8005528:	e7fe      	b.n	8005528 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d102      	bne.n	8005536 <xQueueGenericCreateStatic+0x7e>
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <xQueueGenericCreateStatic+0x82>
 8005536:	2301      	movs	r3, #1
 8005538:	e000      	b.n	800553c <xQueueGenericCreateStatic+0x84>
 800553a:	2300      	movs	r3, #0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10a      	bne.n	8005556 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	61fb      	str	r3, [r7, #28]
}
 8005552:	bf00      	nop
 8005554:	e7fe      	b.n	8005554 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005556:	2348      	movs	r3, #72	; 0x48
 8005558:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2b48      	cmp	r3, #72	; 0x48
 800555e:	d00a      	beq.n	8005576 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005564:	f383 8811 	msr	BASEPRI, r3
 8005568:	f3bf 8f6f 	isb	sy
 800556c:	f3bf 8f4f 	dsb	sy
 8005570:	61bb      	str	r3, [r7, #24]
}
 8005572:	bf00      	nop
 8005574:	e7fe      	b.n	8005574 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800557a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00d      	beq.n	800559c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005588:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800558c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558e:	9300      	str	r3, [sp, #0]
 8005590:	4613      	mov	r3, r2
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	68b9      	ldr	r1, [r7, #8]
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f000 f843 	bl	8005622 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800559c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800559e:	4618      	mov	r0, r3
 80055a0:	3730      	adds	r7, #48	; 0x30
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b08a      	sub	sp, #40	; 0x28
 80055aa:	af02      	add	r7, sp, #8
 80055ac:	60f8      	str	r0, [r7, #12]
 80055ae:	60b9      	str	r1, [r7, #8]
 80055b0:	4613      	mov	r3, r2
 80055b2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10a      	bne.n	80055d0 <xQueueGenericCreate+0x2a>
	__asm volatile
 80055ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055be:	f383 8811 	msr	BASEPRI, r3
 80055c2:	f3bf 8f6f 	isb	sy
 80055c6:	f3bf 8f4f 	dsb	sy
 80055ca:	613b      	str	r3, [r7, #16]
}
 80055cc:	bf00      	nop
 80055ce:	e7fe      	b.n	80055ce <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d102      	bne.n	80055dc <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80055d6:	2300      	movs	r3, #0
 80055d8:	61fb      	str	r3, [r7, #28]
 80055da:	e004      	b.n	80055e6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	fb02 f303 	mul.w	r3, r2, r3
 80055e4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	3348      	adds	r3, #72	; 0x48
 80055ea:	4618      	mov	r0, r3
 80055ec:	f002 f8a6 	bl	800773c <pvPortMalloc>
 80055f0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00f      	beq.n	8005618 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	3348      	adds	r3, #72	; 0x48
 80055fc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005606:	79fa      	ldrb	r2, [r7, #7]
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	4613      	mov	r3, r2
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	68b9      	ldr	r1, [r7, #8]
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 f805 	bl	8005622 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005618:	69bb      	ldr	r3, [r7, #24]
	}
 800561a:	4618      	mov	r0, r3
 800561c:	3720      	adds	r7, #32
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b084      	sub	sp, #16
 8005626:	af00      	add	r7, sp, #0
 8005628:	60f8      	str	r0, [r7, #12]
 800562a:	60b9      	str	r1, [r7, #8]
 800562c:	607a      	str	r2, [r7, #4]
 800562e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d103      	bne.n	800563e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	e002      	b.n	8005644 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005650:	2101      	movs	r1, #1
 8005652:	69b8      	ldr	r0, [r7, #24]
 8005654:	f7ff fec8 	bl	80053e8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005658:	bf00      	nop
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b08e      	sub	sp, #56	; 0x38
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800566e:	2300      	movs	r3, #0
 8005670:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10a      	bne.n	8005692 <xQueueGenericSend+0x32>
	__asm volatile
 800567c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005680:	f383 8811 	msr	BASEPRI, r3
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800568e:	bf00      	nop
 8005690:	e7fe      	b.n	8005690 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d103      	bne.n	80056a0 <xQueueGenericSend+0x40>
 8005698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <xQueueGenericSend+0x44>
 80056a0:	2301      	movs	r3, #1
 80056a2:	e000      	b.n	80056a6 <xQueueGenericSend+0x46>
 80056a4:	2300      	movs	r3, #0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10a      	bne.n	80056c0 <xQueueGenericSend+0x60>
	__asm volatile
 80056aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80056bc:	bf00      	nop
 80056be:	e7fe      	b.n	80056be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d103      	bne.n	80056ce <xQueueGenericSend+0x6e>
 80056c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d101      	bne.n	80056d2 <xQueueGenericSend+0x72>
 80056ce:	2301      	movs	r3, #1
 80056d0:	e000      	b.n	80056d4 <xQueueGenericSend+0x74>
 80056d2:	2300      	movs	r3, #0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10a      	bne.n	80056ee <xQueueGenericSend+0x8e>
	__asm volatile
 80056d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056dc:	f383 8811 	msr	BASEPRI, r3
 80056e0:	f3bf 8f6f 	isb	sy
 80056e4:	f3bf 8f4f 	dsb	sy
 80056e8:	623b      	str	r3, [r7, #32]
}
 80056ea:	bf00      	nop
 80056ec:	e7fe      	b.n	80056ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056ee:	f001 f9a5 	bl	8006a3c <xTaskGetSchedulerState>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d102      	bne.n	80056fe <xQueueGenericSend+0x9e>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d101      	bne.n	8005702 <xQueueGenericSend+0xa2>
 80056fe:	2301      	movs	r3, #1
 8005700:	e000      	b.n	8005704 <xQueueGenericSend+0xa4>
 8005702:	2300      	movs	r3, #0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10a      	bne.n	800571e <xQueueGenericSend+0xbe>
	__asm volatile
 8005708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570c:	f383 8811 	msr	BASEPRI, r3
 8005710:	f3bf 8f6f 	isb	sy
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	61fb      	str	r3, [r7, #28]
}
 800571a:	bf00      	nop
 800571c:	e7fe      	b.n	800571c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800571e:	f001 ff0d 	bl	800753c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572a:	429a      	cmp	r2, r3
 800572c:	d302      	bcc.n	8005734 <xQueueGenericSend+0xd4>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b02      	cmp	r3, #2
 8005732:	d129      	bne.n	8005788 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	68b9      	ldr	r1, [r7, #8]
 8005738:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800573a:	f000 fa07 	bl	8005b4c <prvCopyDataToQueue>
 800573e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005744:	2b00      	cmp	r3, #0
 8005746:	d010      	beq.n	800576a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574a:	3324      	adds	r3, #36	; 0x24
 800574c:	4618      	mov	r0, r3
 800574e:	f000 ffb5 	bl	80066bc <xTaskRemoveFromEventList>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d013      	beq.n	8005780 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005758:	4b3f      	ldr	r3, [pc, #252]	; (8005858 <xQueueGenericSend+0x1f8>)
 800575a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800575e:	601a      	str	r2, [r3, #0]
 8005760:	f3bf 8f4f 	dsb	sy
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	e00a      	b.n	8005780 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800576a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576c:	2b00      	cmp	r3, #0
 800576e:	d007      	beq.n	8005780 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005770:	4b39      	ldr	r3, [pc, #228]	; (8005858 <xQueueGenericSend+0x1f8>)
 8005772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005780:	f001 ff0c 	bl	800759c <vPortExitCritical>
				return pdPASS;
 8005784:	2301      	movs	r3, #1
 8005786:	e063      	b.n	8005850 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d103      	bne.n	8005796 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800578e:	f001 ff05 	bl	800759c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005792:	2300      	movs	r3, #0
 8005794:	e05c      	b.n	8005850 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005798:	2b00      	cmp	r3, #0
 800579a:	d106      	bne.n	80057aa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800579c:	f107 0314 	add.w	r3, r7, #20
 80057a0:	4618      	mov	r0, r3
 80057a2:	f000 ffed 	bl	8006780 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057a6:	2301      	movs	r3, #1
 80057a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057aa:	f001 fef7 	bl	800759c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057ae:	f000 fd65 	bl	800627c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057b2:	f001 fec3 	bl	800753c <vPortEnterCritical>
 80057b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057bc:	b25b      	sxtb	r3, r3
 80057be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c2:	d103      	bne.n	80057cc <xQueueGenericSend+0x16c>
 80057c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057d2:	b25b      	sxtb	r3, r3
 80057d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d8:	d103      	bne.n	80057e2 <xQueueGenericSend+0x182>
 80057da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057e2:	f001 fedb 	bl	800759c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057e6:	1d3a      	adds	r2, r7, #4
 80057e8:	f107 0314 	add.w	r3, r7, #20
 80057ec:	4611      	mov	r1, r2
 80057ee:	4618      	mov	r0, r3
 80057f0:	f000 ffdc 	bl	80067ac <xTaskCheckForTimeOut>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d124      	bne.n	8005844 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80057fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057fc:	f000 fa9e 	bl	8005d3c <prvIsQueueFull>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d018      	beq.n	8005838 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005808:	3310      	adds	r3, #16
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	4611      	mov	r1, r2
 800580e:	4618      	mov	r0, r3
 8005810:	f000 ff04 	bl	800661c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005816:	f000 fa29 	bl	8005c6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800581a:	f000 fd3d 	bl	8006298 <xTaskResumeAll>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	f47f af7c 	bne.w	800571e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005826:	4b0c      	ldr	r3, [pc, #48]	; (8005858 <xQueueGenericSend+0x1f8>)
 8005828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800582c:	601a      	str	r2, [r3, #0]
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	e772      	b.n	800571e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005838:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800583a:	f000 fa17 	bl	8005c6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800583e:	f000 fd2b 	bl	8006298 <xTaskResumeAll>
 8005842:	e76c      	b.n	800571e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005844:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005846:	f000 fa11 	bl	8005c6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800584a:	f000 fd25 	bl	8006298 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800584e:	2300      	movs	r3, #0
		}
	}
}
 8005850:	4618      	mov	r0, r3
 8005852:	3738      	adds	r7, #56	; 0x38
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	e000ed04 	.word	0xe000ed04

0800585c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b08e      	sub	sp, #56	; 0x38
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
 8005868:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800586e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10a      	bne.n	800588a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005878:	f383 8811 	msr	BASEPRI, r3
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005886:	bf00      	nop
 8005888:	e7fe      	b.n	8005888 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d103      	bne.n	8005898 <xQueueGenericSendFromISR+0x3c>
 8005890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <xQueueGenericSendFromISR+0x40>
 8005898:	2301      	movs	r3, #1
 800589a:	e000      	b.n	800589e <xQueueGenericSendFromISR+0x42>
 800589c:	2300      	movs	r3, #0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10a      	bne.n	80058b8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80058a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a6:	f383 8811 	msr	BASEPRI, r3
 80058aa:	f3bf 8f6f 	isb	sy
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	623b      	str	r3, [r7, #32]
}
 80058b4:	bf00      	nop
 80058b6:	e7fe      	b.n	80058b6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d103      	bne.n	80058c6 <xQueueGenericSendFromISR+0x6a>
 80058be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d101      	bne.n	80058ca <xQueueGenericSendFromISR+0x6e>
 80058c6:	2301      	movs	r3, #1
 80058c8:	e000      	b.n	80058cc <xQueueGenericSendFromISR+0x70>
 80058ca:	2300      	movs	r3, #0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10a      	bne.n	80058e6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80058d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d4:	f383 8811 	msr	BASEPRI, r3
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	61fb      	str	r3, [r7, #28]
}
 80058e2:	bf00      	nop
 80058e4:	e7fe      	b.n	80058e4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058e6:	f001 feeb 	bl	80076c0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80058ea:	f3ef 8211 	mrs	r2, BASEPRI
 80058ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	61ba      	str	r2, [r7, #24]
 8005900:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005902:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005904:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800590a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800590e:	429a      	cmp	r2, r3
 8005910:	d302      	bcc.n	8005918 <xQueueGenericSendFromISR+0xbc>
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b02      	cmp	r3, #2
 8005916:	d12c      	bne.n	8005972 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800591e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	68b9      	ldr	r1, [r7, #8]
 8005926:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005928:	f000 f910 	bl	8005b4c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800592c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005934:	d112      	bne.n	800595c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593a:	2b00      	cmp	r3, #0
 800593c:	d016      	beq.n	800596c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800593e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005940:	3324      	adds	r3, #36	; 0x24
 8005942:	4618      	mov	r0, r3
 8005944:	f000 feba 	bl	80066bc <xTaskRemoveFromEventList>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00e      	beq.n	800596c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00b      	beq.n	800596c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	e007      	b.n	800596c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800595c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005960:	3301      	adds	r3, #1
 8005962:	b2db      	uxtb	r3, r3
 8005964:	b25a      	sxtb	r2, r3
 8005966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800596c:	2301      	movs	r3, #1
 800596e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005970:	e001      	b.n	8005976 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005972:	2300      	movs	r3, #0
 8005974:	637b      	str	r3, [r7, #52]	; 0x34
 8005976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005978:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005980:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005984:	4618      	mov	r0, r3
 8005986:	3738      	adds	r7, #56	; 0x38
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b08c      	sub	sp, #48	; 0x30
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005998:	2300      	movs	r3, #0
 800599a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80059a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10a      	bne.n	80059bc <xQueueReceive+0x30>
	__asm volatile
 80059a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	623b      	str	r3, [r7, #32]
}
 80059b8:	bf00      	nop
 80059ba:	e7fe      	b.n	80059ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d103      	bne.n	80059ca <xQueueReceive+0x3e>
 80059c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <xQueueReceive+0x42>
 80059ca:	2301      	movs	r3, #1
 80059cc:	e000      	b.n	80059d0 <xQueueReceive+0x44>
 80059ce:	2300      	movs	r3, #0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10a      	bne.n	80059ea <xQueueReceive+0x5e>
	__asm volatile
 80059d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d8:	f383 8811 	msr	BASEPRI, r3
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	61fb      	str	r3, [r7, #28]
}
 80059e6:	bf00      	nop
 80059e8:	e7fe      	b.n	80059e8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059ea:	f001 f827 	bl	8006a3c <xTaskGetSchedulerState>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d102      	bne.n	80059fa <xQueueReceive+0x6e>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <xQueueReceive+0x72>
 80059fa:	2301      	movs	r3, #1
 80059fc:	e000      	b.n	8005a00 <xQueueReceive+0x74>
 80059fe:	2300      	movs	r3, #0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10a      	bne.n	8005a1a <xQueueReceive+0x8e>
	__asm volatile
 8005a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	61bb      	str	r3, [r7, #24]
}
 8005a16:	bf00      	nop
 8005a18:	e7fe      	b.n	8005a18 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a1a:	f001 fd8f 	bl	800753c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a22:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d01f      	beq.n	8005a6a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a2a:	68b9      	ldr	r1, [r7, #8]
 8005a2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a2e:	f000 f8f7 	bl	8005c20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a34:	1e5a      	subs	r2, r3, #1
 8005a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a38:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00f      	beq.n	8005a62 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a44:	3310      	adds	r3, #16
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 fe38 	bl	80066bc <xTaskRemoveFromEventList>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d007      	beq.n	8005a62 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a52:	4b3d      	ldr	r3, [pc, #244]	; (8005b48 <xQueueReceive+0x1bc>)
 8005a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a58:	601a      	str	r2, [r3, #0]
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a62:	f001 fd9b 	bl	800759c <vPortExitCritical>
				return pdPASS;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e069      	b.n	8005b3e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d103      	bne.n	8005a78 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a70:	f001 fd94 	bl	800759c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a74:	2300      	movs	r3, #0
 8005a76:	e062      	b.n	8005b3e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d106      	bne.n	8005a8c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a7e:	f107 0310 	add.w	r3, r7, #16
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 fe7c 	bl	8006780 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a8c:	f001 fd86 	bl	800759c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a90:	f000 fbf4 	bl	800627c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a94:	f001 fd52 	bl	800753c <vPortEnterCritical>
 8005a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a9e:	b25b      	sxtb	r3, r3
 8005aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa4:	d103      	bne.n	8005aae <xQueueReceive+0x122>
 8005aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ab4:	b25b      	sxtb	r3, r3
 8005ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aba:	d103      	bne.n	8005ac4 <xQueueReceive+0x138>
 8005abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ac4:	f001 fd6a 	bl	800759c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ac8:	1d3a      	adds	r2, r7, #4
 8005aca:	f107 0310 	add.w	r3, r7, #16
 8005ace:	4611      	mov	r1, r2
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 fe6b 	bl	80067ac <xTaskCheckForTimeOut>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d123      	bne.n	8005b24 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005adc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ade:	f000 f917 	bl	8005d10 <prvIsQueueEmpty>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d017      	beq.n	8005b18 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aea:	3324      	adds	r3, #36	; 0x24
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	4611      	mov	r1, r2
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 fd93 	bl	800661c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005af6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005af8:	f000 f8b8 	bl	8005c6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005afc:	f000 fbcc 	bl	8006298 <xTaskResumeAll>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d189      	bne.n	8005a1a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005b06:	4b10      	ldr	r3, [pc, #64]	; (8005b48 <xQueueReceive+0x1bc>)
 8005b08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b0c:	601a      	str	r2, [r3, #0]
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	e780      	b.n	8005a1a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b1a:	f000 f8a7 	bl	8005c6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b1e:	f000 fbbb 	bl	8006298 <xTaskResumeAll>
 8005b22:	e77a      	b.n	8005a1a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b26:	f000 f8a1 	bl	8005c6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b2a:	f000 fbb5 	bl	8006298 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b30:	f000 f8ee 	bl	8005d10 <prvIsQueueEmpty>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f43f af6f 	beq.w	8005a1a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3730      	adds	r7, #48	; 0x30
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	e000ed04 	.word	0xe000ed04

08005b4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10d      	bne.n	8005b86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d14d      	bne.n	8005c0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 ff7e 	bl	8006a78 <xTaskPriorityDisinherit>
 8005b7c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	605a      	str	r2, [r3, #4]
 8005b84:	e043      	b.n	8005c0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d119      	bne.n	8005bc0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6898      	ldr	r0, [r3, #8]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b94:	461a      	mov	r2, r3
 8005b96:	68b9      	ldr	r1, [r7, #8]
 8005b98:	f001 ffcc 	bl	8007b34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	689a      	ldr	r2, [r3, #8]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba4:	441a      	add	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	689a      	ldr	r2, [r3, #8]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d32b      	bcc.n	8005c0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	609a      	str	r2, [r3, #8]
 8005bbe:	e026      	b.n	8005c0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	68d8      	ldr	r0, [r3, #12]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc8:	461a      	mov	r2, r3
 8005bca:	68b9      	ldr	r1, [r7, #8]
 8005bcc:	f001 ffb2 	bl	8007b34 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	68da      	ldr	r2, [r3, #12]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd8:	425b      	negs	r3, r3
 8005bda:	441a      	add	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	68da      	ldr	r2, [r3, #12]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d207      	bcs.n	8005bfc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf4:	425b      	negs	r3, r3
 8005bf6:	441a      	add	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d105      	bne.n	8005c0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d002      	beq.n	8005c0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	1c5a      	adds	r2, r3, #1
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c16:	697b      	ldr	r3, [r7, #20]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3718      	adds	r7, #24
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d018      	beq.n	8005c64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68da      	ldr	r2, [r3, #12]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3a:	441a      	add	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	68da      	ldr	r2, [r3, #12]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d303      	bcc.n	8005c54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68d9      	ldr	r1, [r3, #12]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	6838      	ldr	r0, [r7, #0]
 8005c60:	f001 ff68 	bl	8007b34 <memcpy>
	}
}
 8005c64:	bf00      	nop
 8005c66:	3708      	adds	r7, #8
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005c74:	f001 fc62 	bl	800753c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c80:	e011      	b.n	8005ca6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d012      	beq.n	8005cb0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	3324      	adds	r3, #36	; 0x24
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 fd14 	bl	80066bc <xTaskRemoveFromEventList>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005c9a:	f000 fde9 	bl	8006870 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	dce9      	bgt.n	8005c82 <prvUnlockQueue+0x16>
 8005cae:	e000      	b.n	8005cb2 <prvUnlockQueue+0x46>
					break;
 8005cb0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	22ff      	movs	r2, #255	; 0xff
 8005cb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005cba:	f001 fc6f 	bl	800759c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005cbe:	f001 fc3d 	bl	800753c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cc8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cca:	e011      	b.n	8005cf0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d012      	beq.n	8005cfa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	3310      	adds	r3, #16
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 fcef 	bl	80066bc <xTaskRemoveFromEventList>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d001      	beq.n	8005ce8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ce4:	f000 fdc4 	bl	8006870 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ce8:	7bbb      	ldrb	r3, [r7, #14]
 8005cea:	3b01      	subs	r3, #1
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	dce9      	bgt.n	8005ccc <prvUnlockQueue+0x60>
 8005cf8:	e000      	b.n	8005cfc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005cfa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	22ff      	movs	r2, #255	; 0xff
 8005d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d04:	f001 fc4a 	bl	800759c <vPortExitCritical>
}
 8005d08:	bf00      	nop
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d18:	f001 fc10 	bl	800753c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d102      	bne.n	8005d2a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d24:	2301      	movs	r3, #1
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	e001      	b.n	8005d2e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d2e:	f001 fc35 	bl	800759c <vPortExitCritical>

	return xReturn;
 8005d32:	68fb      	ldr	r3, [r7, #12]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d44:	f001 fbfa 	bl	800753c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d102      	bne.n	8005d5a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d54:	2301      	movs	r3, #1
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	e001      	b.n	8005d5e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d5e:	f001 fc1d 	bl	800759c <vPortExitCritical>

	return xReturn;
 8005d62:	68fb      	ldr	r3, [r7, #12]
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d76:	2300      	movs	r3, #0
 8005d78:	60fb      	str	r3, [r7, #12]
 8005d7a:	e014      	b.n	8005da6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005d7c:	4a0e      	ldr	r2, [pc, #56]	; (8005db8 <vQueueAddToRegistry+0x4c>)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10b      	bne.n	8005da0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005d88:	490b      	ldr	r1, [pc, #44]	; (8005db8 <vQueueAddToRegistry+0x4c>)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005d92:	4a09      	ldr	r2, [pc, #36]	; (8005db8 <vQueueAddToRegistry+0x4c>)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	00db      	lsls	r3, r3, #3
 8005d98:	4413      	add	r3, r2
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005d9e:	e006      	b.n	8005dae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	3301      	adds	r3, #1
 8005da4:	60fb      	str	r3, [r7, #12]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2b07      	cmp	r3, #7
 8005daa:	d9e7      	bls.n	8005d7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005dac:	bf00      	nop
 8005dae:	bf00      	nop
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bc80      	pop	{r7}
 8005db6:	4770      	bx	lr
 8005db8:	20001aa8 	.word	0x20001aa8

08005dbc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b086      	sub	sp, #24
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005dcc:	f001 fbb6 	bl	800753c <vPortEnterCritical>
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dd6:	b25b      	sxtb	r3, r3
 8005dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ddc:	d103      	bne.n	8005de6 <vQueueWaitForMessageRestricted+0x2a>
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dec:	b25b      	sxtb	r3, r3
 8005dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df2:	d103      	bne.n	8005dfc <vQueueWaitForMessageRestricted+0x40>
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dfc:	f001 fbce 	bl	800759c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d106      	bne.n	8005e16 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	3324      	adds	r3, #36	; 0x24
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	68b9      	ldr	r1, [r7, #8]
 8005e10:	4618      	mov	r0, r3
 8005e12:	f000 fc27 	bl	8006664 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005e16:	6978      	ldr	r0, [r7, #20]
 8005e18:	f7ff ff28 	bl	8005c6c <prvUnlockQueue>
	}
 8005e1c:	bf00      	nop
 8005e1e:	3718      	adds	r7, #24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b08e      	sub	sp, #56	; 0x38
 8005e28:	af04      	add	r7, sp, #16
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
 8005e30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d10a      	bne.n	8005e4e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3c:	f383 8811 	msr	BASEPRI, r3
 8005e40:	f3bf 8f6f 	isb	sy
 8005e44:	f3bf 8f4f 	dsb	sy
 8005e48:	623b      	str	r3, [r7, #32]
}
 8005e4a:	bf00      	nop
 8005e4c:	e7fe      	b.n	8005e4c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10a      	bne.n	8005e6a <xTaskCreateStatic+0x46>
	__asm volatile
 8005e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e58:	f383 8811 	msr	BASEPRI, r3
 8005e5c:	f3bf 8f6f 	isb	sy
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	61fb      	str	r3, [r7, #28]
}
 8005e66:	bf00      	nop
 8005e68:	e7fe      	b.n	8005e68 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e6a:	2354      	movs	r3, #84	; 0x54
 8005e6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	2b54      	cmp	r3, #84	; 0x54
 8005e72:	d00a      	beq.n	8005e8a <xTaskCreateStatic+0x66>
	__asm volatile
 8005e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e78:	f383 8811 	msr	BASEPRI, r3
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	61bb      	str	r3, [r7, #24]
}
 8005e86:	bf00      	nop
 8005e88:	e7fe      	b.n	8005e88 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d01e      	beq.n	8005ece <xTaskCreateStatic+0xaa>
 8005e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d01b      	beq.n	8005ece <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e98:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e9e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	9303      	str	r3, [sp, #12]
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	9302      	str	r3, [sp, #8]
 8005eb0:	f107 0314 	add.w	r3, r7, #20
 8005eb4:	9301      	str	r3, [sp, #4]
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb8:	9300      	str	r3, [sp, #0]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	68b9      	ldr	r1, [r7, #8]
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 f850 	bl	8005f66 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ec6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ec8:	f000 f8d4 	bl	8006074 <prvAddNewTaskToReadyList>
 8005ecc:	e001      	b.n	8005ed2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005ed2:	697b      	ldr	r3, [r7, #20]
	}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3728      	adds	r7, #40	; 0x28
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b08c      	sub	sp, #48	; 0x30
 8005ee0:	af04      	add	r7, sp, #16
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	603b      	str	r3, [r7, #0]
 8005ee8:	4613      	mov	r3, r2
 8005eea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005eec:	88fb      	ldrh	r3, [r7, #6]
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f001 fc23 	bl	800773c <pvPortMalloc>
 8005ef6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00e      	beq.n	8005f1c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005efe:	2054      	movs	r0, #84	; 0x54
 8005f00:	f001 fc1c 	bl	800773c <pvPortMalloc>
 8005f04:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d003      	beq.n	8005f14 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	631a      	str	r2, [r3, #48]	; 0x30
 8005f12:	e005      	b.n	8005f20 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f14:	6978      	ldr	r0, [r7, #20]
 8005f16:	f001 fcd5 	bl	80078c4 <vPortFree>
 8005f1a:	e001      	b.n	8005f20 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d017      	beq.n	8005f56 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f2e:	88fa      	ldrh	r2, [r7, #6]
 8005f30:	2300      	movs	r3, #0
 8005f32:	9303      	str	r3, [sp, #12]
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	9302      	str	r3, [sp, #8]
 8005f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3a:	9301      	str	r3, [sp, #4]
 8005f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	68b9      	ldr	r1, [r7, #8]
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f000 f80e 	bl	8005f66 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f4a:	69f8      	ldr	r0, [r7, #28]
 8005f4c:	f000 f892 	bl	8006074 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f50:	2301      	movs	r3, #1
 8005f52:	61bb      	str	r3, [r7, #24]
 8005f54:	e002      	b.n	8005f5c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f56:	f04f 33ff 	mov.w	r3, #4294967295
 8005f5a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f5c:	69bb      	ldr	r3, [r7, #24]
	}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3720      	adds	r7, #32
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b088      	sub	sp, #32
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	60f8      	str	r0, [r7, #12]
 8005f6e:	60b9      	str	r1, [r7, #8]
 8005f70:	607a      	str	r2, [r7, #4]
 8005f72:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f76:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	21a5      	movs	r1, #165	; 0xa5
 8005f80:	f001 fde6 	bl	8007b50 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4413      	add	r3, r2
 8005f94:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	f023 0307 	bic.w	r3, r3, #7
 8005f9c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	f003 0307 	and.w	r3, r3, #7
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00a      	beq.n	8005fbe <prvInitialiseNewTask+0x58>
	__asm volatile
 8005fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fac:	f383 8811 	msr	BASEPRI, r3
 8005fb0:	f3bf 8f6f 	isb	sy
 8005fb4:	f3bf 8f4f 	dsb	sy
 8005fb8:	617b      	str	r3, [r7, #20]
}
 8005fba:	bf00      	nop
 8005fbc:	e7fe      	b.n	8005fbc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	61fb      	str	r3, [r7, #28]
 8005fc2:	e012      	b.n	8005fea <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	4413      	add	r3, r2
 8005fca:	7819      	ldrb	r1, [r3, #0]
 8005fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	3334      	adds	r3, #52	; 0x34
 8005fd4:	460a      	mov	r2, r1
 8005fd6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	4413      	add	r3, r2
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d006      	beq.n	8005ff2 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	61fb      	str	r3, [r7, #28]
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	2b0f      	cmp	r3, #15
 8005fee:	d9e9      	bls.n	8005fc4 <prvInitialiseNewTask+0x5e>
 8005ff0:	e000      	b.n	8005ff4 <prvInitialiseNewTask+0x8e>
		{
			break;
 8005ff2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffe:	2b06      	cmp	r3, #6
 8006000:	d901      	bls.n	8006006 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006002:	2306      	movs	r3, #6
 8006004:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006008:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800600a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800600c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006010:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006014:	2200      	movs	r2, #0
 8006016:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601a:	3304      	adds	r3, #4
 800601c:	4618      	mov	r0, r3
 800601e:	f7ff f952 	bl	80052c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006024:	3318      	adds	r3, #24
 8006026:	4618      	mov	r0, r3
 8006028:	f7ff f94d 	bl	80052c6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800602c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006030:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006034:	f1c3 0207 	rsb	r2, r3, #7
 8006038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800603c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006040:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006044:	2200      	movs	r2, #0
 8006046:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604a:	2200      	movs	r2, #0
 800604c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	68f9      	ldr	r1, [r7, #12]
 8006054:	69b8      	ldr	r0, [r7, #24]
 8006056:	f001 f983 	bl	8007360 <pxPortInitialiseStack>
 800605a:	4602      	mov	r2, r0
 800605c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006062:	2b00      	cmp	r3, #0
 8006064:	d002      	beq.n	800606c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800606a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800606c:	bf00      	nop
 800606e:	3720      	adds	r7, #32
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800607c:	f001 fa5e 	bl	800753c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006080:	4b2a      	ldr	r3, [pc, #168]	; (800612c <prvAddNewTaskToReadyList+0xb8>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	3301      	adds	r3, #1
 8006086:	4a29      	ldr	r2, [pc, #164]	; (800612c <prvAddNewTaskToReadyList+0xb8>)
 8006088:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800608a:	4b29      	ldr	r3, [pc, #164]	; (8006130 <prvAddNewTaskToReadyList+0xbc>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d109      	bne.n	80060a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006092:	4a27      	ldr	r2, [pc, #156]	; (8006130 <prvAddNewTaskToReadyList+0xbc>)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006098:	4b24      	ldr	r3, [pc, #144]	; (800612c <prvAddNewTaskToReadyList+0xb8>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d110      	bne.n	80060c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80060a0:	f000 fc0a 	bl	80068b8 <prvInitialiseTaskLists>
 80060a4:	e00d      	b.n	80060c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060a6:	4b23      	ldr	r3, [pc, #140]	; (8006134 <prvAddNewTaskToReadyList+0xc0>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d109      	bne.n	80060c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060ae:	4b20      	ldr	r3, [pc, #128]	; (8006130 <prvAddNewTaskToReadyList+0xbc>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d802      	bhi.n	80060c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80060bc:	4a1c      	ldr	r2, [pc, #112]	; (8006130 <prvAddNewTaskToReadyList+0xbc>)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80060c2:	4b1d      	ldr	r3, [pc, #116]	; (8006138 <prvAddNewTaskToReadyList+0xc4>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	3301      	adds	r3, #1
 80060c8:	4a1b      	ldr	r2, [pc, #108]	; (8006138 <prvAddNewTaskToReadyList+0xc4>)
 80060ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d0:	2201      	movs	r2, #1
 80060d2:	409a      	lsls	r2, r3
 80060d4:	4b19      	ldr	r3, [pc, #100]	; (800613c <prvAddNewTaskToReadyList+0xc8>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4313      	orrs	r3, r2
 80060da:	4a18      	ldr	r2, [pc, #96]	; (800613c <prvAddNewTaskToReadyList+0xc8>)
 80060dc:	6013      	str	r3, [r2, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e2:	4613      	mov	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4413      	add	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4a15      	ldr	r2, [pc, #84]	; (8006140 <prvAddNewTaskToReadyList+0xcc>)
 80060ec:	441a      	add	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	3304      	adds	r3, #4
 80060f2:	4619      	mov	r1, r3
 80060f4:	4610      	mov	r0, r2
 80060f6:	f7ff f8f2 	bl	80052de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80060fa:	f001 fa4f 	bl	800759c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80060fe:	4b0d      	ldr	r3, [pc, #52]	; (8006134 <prvAddNewTaskToReadyList+0xc0>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00e      	beq.n	8006124 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006106:	4b0a      	ldr	r3, [pc, #40]	; (8006130 <prvAddNewTaskToReadyList+0xbc>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006110:	429a      	cmp	r2, r3
 8006112:	d207      	bcs.n	8006124 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006114:	4b0b      	ldr	r3, [pc, #44]	; (8006144 <prvAddNewTaskToReadyList+0xd0>)
 8006116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800611a:	601a      	str	r2, [r3, #0]
 800611c:	f3bf 8f4f 	dsb	sy
 8006120:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006124:	bf00      	nop
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	200007d4 	.word	0x200007d4
 8006130:	200006d4 	.word	0x200006d4
 8006134:	200007e0 	.word	0x200007e0
 8006138:	200007f0 	.word	0x200007f0
 800613c:	200007dc 	.word	0x200007dc
 8006140:	200006d8 	.word	0x200006d8
 8006144:	e000ed04 	.word	0xe000ed04

08006148 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006150:	2300      	movs	r3, #0
 8006152:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d017      	beq.n	800618a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800615a:	4b13      	ldr	r3, [pc, #76]	; (80061a8 <vTaskDelay+0x60>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00a      	beq.n	8006178 <vTaskDelay+0x30>
	__asm volatile
 8006162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	60bb      	str	r3, [r7, #8]
}
 8006174:	bf00      	nop
 8006176:	e7fe      	b.n	8006176 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006178:	f000 f880 	bl	800627c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800617c:	2100      	movs	r1, #0
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fd00 	bl	8006b84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006184:	f000 f888 	bl	8006298 <xTaskResumeAll>
 8006188:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d107      	bne.n	80061a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006190:	4b06      	ldr	r3, [pc, #24]	; (80061ac <vTaskDelay+0x64>)
 8006192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006196:	601a      	str	r2, [r3, #0]
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061a0:	bf00      	nop
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	200007fc 	.word	0x200007fc
 80061ac:	e000ed04 	.word	0xe000ed04

080061b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b08a      	sub	sp, #40	; 0x28
 80061b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80061b6:	2300      	movs	r3, #0
 80061b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80061ba:	2300      	movs	r3, #0
 80061bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80061be:	463a      	mov	r2, r7
 80061c0:	1d39      	adds	r1, r7, #4
 80061c2:	f107 0308 	add.w	r3, r7, #8
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7fa f9ae 	bl	8000528 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80061cc:	6839      	ldr	r1, [r7, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	9202      	str	r2, [sp, #8]
 80061d4:	9301      	str	r3, [sp, #4]
 80061d6:	2300      	movs	r3, #0
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	2300      	movs	r3, #0
 80061dc:	460a      	mov	r2, r1
 80061de:	4921      	ldr	r1, [pc, #132]	; (8006264 <vTaskStartScheduler+0xb4>)
 80061e0:	4821      	ldr	r0, [pc, #132]	; (8006268 <vTaskStartScheduler+0xb8>)
 80061e2:	f7ff fe1f 	bl	8005e24 <xTaskCreateStatic>
 80061e6:	4603      	mov	r3, r0
 80061e8:	4a20      	ldr	r2, [pc, #128]	; (800626c <vTaskStartScheduler+0xbc>)
 80061ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80061ec:	4b1f      	ldr	r3, [pc, #124]	; (800626c <vTaskStartScheduler+0xbc>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d002      	beq.n	80061fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80061f4:	2301      	movs	r3, #1
 80061f6:	617b      	str	r3, [r7, #20]
 80061f8:	e001      	b.n	80061fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80061fa:	2300      	movs	r3, #0
 80061fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d102      	bne.n	800620a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006204:	f000 fd24 	bl	8006c50 <xTimerCreateTimerTask>
 8006208:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d116      	bne.n	800623e <vTaskStartScheduler+0x8e>
	__asm volatile
 8006210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006214:	f383 8811 	msr	BASEPRI, r3
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	613b      	str	r3, [r7, #16]
}
 8006222:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006224:	4b12      	ldr	r3, [pc, #72]	; (8006270 <vTaskStartScheduler+0xc0>)
 8006226:	f04f 32ff 	mov.w	r2, #4294967295
 800622a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800622c:	4b11      	ldr	r3, [pc, #68]	; (8006274 <vTaskStartScheduler+0xc4>)
 800622e:	2201      	movs	r2, #1
 8006230:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006232:	4b11      	ldr	r3, [pc, #68]	; (8006278 <vTaskStartScheduler+0xc8>)
 8006234:	2200      	movs	r2, #0
 8006236:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006238:	f001 f90e 	bl	8007458 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800623c:	e00e      	b.n	800625c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006244:	d10a      	bne.n	800625c <vTaskStartScheduler+0xac>
	__asm volatile
 8006246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624a:	f383 8811 	msr	BASEPRI, r3
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	f3bf 8f4f 	dsb	sy
 8006256:	60fb      	str	r3, [r7, #12]
}
 8006258:	bf00      	nop
 800625a:	e7fe      	b.n	800625a <vTaskStartScheduler+0xaa>
}
 800625c:	bf00      	nop
 800625e:	3718      	adds	r7, #24
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	08007be4 	.word	0x08007be4
 8006268:	08006889 	.word	0x08006889
 800626c:	200007f8 	.word	0x200007f8
 8006270:	200007f4 	.word	0x200007f4
 8006274:	200007e0 	.word	0x200007e0
 8006278:	200007d8 	.word	0x200007d8

0800627c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800627c:	b480      	push	{r7}
 800627e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006280:	4b04      	ldr	r3, [pc, #16]	; (8006294 <vTaskSuspendAll+0x18>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	3301      	adds	r3, #1
 8006286:	4a03      	ldr	r2, [pc, #12]	; (8006294 <vTaskSuspendAll+0x18>)
 8006288:	6013      	str	r3, [r2, #0]
}
 800628a:	bf00      	nop
 800628c:	46bd      	mov	sp, r7
 800628e:	bc80      	pop	{r7}
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	200007fc 	.word	0x200007fc

08006298 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800629e:	2300      	movs	r3, #0
 80062a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80062a2:	2300      	movs	r3, #0
 80062a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80062a6:	4b41      	ldr	r3, [pc, #260]	; (80063ac <xTaskResumeAll+0x114>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10a      	bne.n	80062c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80062ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	603b      	str	r3, [r7, #0]
}
 80062c0:	bf00      	nop
 80062c2:	e7fe      	b.n	80062c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80062c4:	f001 f93a 	bl	800753c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80062c8:	4b38      	ldr	r3, [pc, #224]	; (80063ac <xTaskResumeAll+0x114>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	3b01      	subs	r3, #1
 80062ce:	4a37      	ldr	r2, [pc, #220]	; (80063ac <xTaskResumeAll+0x114>)
 80062d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062d2:	4b36      	ldr	r3, [pc, #216]	; (80063ac <xTaskResumeAll+0x114>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d161      	bne.n	800639e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80062da:	4b35      	ldr	r3, [pc, #212]	; (80063b0 <xTaskResumeAll+0x118>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d05d      	beq.n	800639e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062e2:	e02e      	b.n	8006342 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80062e4:	4b33      	ldr	r3, [pc, #204]	; (80063b4 <xTaskResumeAll+0x11c>)
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	3318      	adds	r3, #24
 80062f0:	4618      	mov	r0, r3
 80062f2:	f7ff f84f 	bl	8005394 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	3304      	adds	r3, #4
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7ff f84a 	bl	8005394 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006304:	2201      	movs	r2, #1
 8006306:	409a      	lsls	r2, r3
 8006308:	4b2b      	ldr	r3, [pc, #172]	; (80063b8 <xTaskResumeAll+0x120>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4313      	orrs	r3, r2
 800630e:	4a2a      	ldr	r2, [pc, #168]	; (80063b8 <xTaskResumeAll+0x120>)
 8006310:	6013      	str	r3, [r2, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006316:	4613      	mov	r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	4413      	add	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4a27      	ldr	r2, [pc, #156]	; (80063bc <xTaskResumeAll+0x124>)
 8006320:	441a      	add	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	3304      	adds	r3, #4
 8006326:	4619      	mov	r1, r3
 8006328:	4610      	mov	r0, r2
 800632a:	f7fe ffd8 	bl	80052de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006332:	4b23      	ldr	r3, [pc, #140]	; (80063c0 <xTaskResumeAll+0x128>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006338:	429a      	cmp	r2, r3
 800633a:	d302      	bcc.n	8006342 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800633c:	4b21      	ldr	r3, [pc, #132]	; (80063c4 <xTaskResumeAll+0x12c>)
 800633e:	2201      	movs	r2, #1
 8006340:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006342:	4b1c      	ldr	r3, [pc, #112]	; (80063b4 <xTaskResumeAll+0x11c>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1cc      	bne.n	80062e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d001      	beq.n	8006354 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006350:	f000 fb50 	bl	80069f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006354:	4b1c      	ldr	r3, [pc, #112]	; (80063c8 <xTaskResumeAll+0x130>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d010      	beq.n	8006382 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006360:	f000 f844 	bl	80063ec <xTaskIncrementTick>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d002      	beq.n	8006370 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800636a:	4b16      	ldr	r3, [pc, #88]	; (80063c4 <xTaskResumeAll+0x12c>)
 800636c:	2201      	movs	r2, #1
 800636e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	3b01      	subs	r3, #1
 8006374:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1f1      	bne.n	8006360 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800637c:	4b12      	ldr	r3, [pc, #72]	; (80063c8 <xTaskResumeAll+0x130>)
 800637e:	2200      	movs	r2, #0
 8006380:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006382:	4b10      	ldr	r3, [pc, #64]	; (80063c4 <xTaskResumeAll+0x12c>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d009      	beq.n	800639e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800638a:	2301      	movs	r3, #1
 800638c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800638e:	4b0f      	ldr	r3, [pc, #60]	; (80063cc <xTaskResumeAll+0x134>)
 8006390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006394:	601a      	str	r2, [r3, #0]
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800639e:	f001 f8fd 	bl	800759c <vPortExitCritical>

	return xAlreadyYielded;
 80063a2:	68bb      	ldr	r3, [r7, #8]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	200007fc 	.word	0x200007fc
 80063b0:	200007d4 	.word	0x200007d4
 80063b4:	20000794 	.word	0x20000794
 80063b8:	200007dc 	.word	0x200007dc
 80063bc:	200006d8 	.word	0x200006d8
 80063c0:	200006d4 	.word	0x200006d4
 80063c4:	200007e8 	.word	0x200007e8
 80063c8:	200007e4 	.word	0x200007e4
 80063cc:	e000ed04 	.word	0xe000ed04

080063d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80063d6:	4b04      	ldr	r3, [pc, #16]	; (80063e8 <xTaskGetTickCount+0x18>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80063dc:	687b      	ldr	r3, [r7, #4]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bc80      	pop	{r7}
 80063e6:	4770      	bx	lr
 80063e8:	200007d8 	.word	0x200007d8

080063ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b086      	sub	sp, #24
 80063f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80063f2:	2300      	movs	r3, #0
 80063f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063f6:	4b51      	ldr	r3, [pc, #324]	; (800653c <xTaskIncrementTick+0x150>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f040 808d 	bne.w	800651a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006400:	4b4f      	ldr	r3, [pc, #316]	; (8006540 <xTaskIncrementTick+0x154>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	3301      	adds	r3, #1
 8006406:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006408:	4a4d      	ldr	r2, [pc, #308]	; (8006540 <xTaskIncrementTick+0x154>)
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d120      	bne.n	8006456 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006414:	4b4b      	ldr	r3, [pc, #300]	; (8006544 <xTaskIncrementTick+0x158>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00a      	beq.n	8006434 <xTaskIncrementTick+0x48>
	__asm volatile
 800641e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	603b      	str	r3, [r7, #0]
}
 8006430:	bf00      	nop
 8006432:	e7fe      	b.n	8006432 <xTaskIncrementTick+0x46>
 8006434:	4b43      	ldr	r3, [pc, #268]	; (8006544 <xTaskIncrementTick+0x158>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	60fb      	str	r3, [r7, #12]
 800643a:	4b43      	ldr	r3, [pc, #268]	; (8006548 <xTaskIncrementTick+0x15c>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a41      	ldr	r2, [pc, #260]	; (8006544 <xTaskIncrementTick+0x158>)
 8006440:	6013      	str	r3, [r2, #0]
 8006442:	4a41      	ldr	r2, [pc, #260]	; (8006548 <xTaskIncrementTick+0x15c>)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6013      	str	r3, [r2, #0]
 8006448:	4b40      	ldr	r3, [pc, #256]	; (800654c <xTaskIncrementTick+0x160>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	3301      	adds	r3, #1
 800644e:	4a3f      	ldr	r2, [pc, #252]	; (800654c <xTaskIncrementTick+0x160>)
 8006450:	6013      	str	r3, [r2, #0]
 8006452:	f000 facf 	bl	80069f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006456:	4b3e      	ldr	r3, [pc, #248]	; (8006550 <xTaskIncrementTick+0x164>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	429a      	cmp	r2, r3
 800645e:	d34d      	bcc.n	80064fc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006460:	4b38      	ldr	r3, [pc, #224]	; (8006544 <xTaskIncrementTick+0x158>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <xTaskIncrementTick+0x82>
 800646a:	2301      	movs	r3, #1
 800646c:	e000      	b.n	8006470 <xTaskIncrementTick+0x84>
 800646e:	2300      	movs	r3, #0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d004      	beq.n	800647e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006474:	4b36      	ldr	r3, [pc, #216]	; (8006550 <xTaskIncrementTick+0x164>)
 8006476:	f04f 32ff 	mov.w	r2, #4294967295
 800647a:	601a      	str	r2, [r3, #0]
					break;
 800647c:	e03e      	b.n	80064fc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800647e:	4b31      	ldr	r3, [pc, #196]	; (8006544 <xTaskIncrementTick+0x158>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	429a      	cmp	r2, r3
 8006494:	d203      	bcs.n	800649e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006496:	4a2e      	ldr	r2, [pc, #184]	; (8006550 <xTaskIncrementTick+0x164>)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6013      	str	r3, [r2, #0]
						break;
 800649c:	e02e      	b.n	80064fc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	3304      	adds	r3, #4
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fe ff76 	bl	8005394 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d004      	beq.n	80064ba <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	3318      	adds	r3, #24
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7fe ff6d 	bl	8005394 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064be:	2201      	movs	r2, #1
 80064c0:	409a      	lsls	r2, r3
 80064c2:	4b24      	ldr	r3, [pc, #144]	; (8006554 <xTaskIncrementTick+0x168>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	4a22      	ldr	r2, [pc, #136]	; (8006554 <xTaskIncrementTick+0x168>)
 80064ca:	6013      	str	r3, [r2, #0]
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d0:	4613      	mov	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4413      	add	r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4a1f      	ldr	r2, [pc, #124]	; (8006558 <xTaskIncrementTick+0x16c>)
 80064da:	441a      	add	r2, r3
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	3304      	adds	r3, #4
 80064e0:	4619      	mov	r1, r3
 80064e2:	4610      	mov	r0, r2
 80064e4:	f7fe fefb 	bl	80052de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ec:	4b1b      	ldr	r3, [pc, #108]	; (800655c <xTaskIncrementTick+0x170>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d3b4      	bcc.n	8006460 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80064f6:	2301      	movs	r3, #1
 80064f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064fa:	e7b1      	b.n	8006460 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80064fc:	4b17      	ldr	r3, [pc, #92]	; (800655c <xTaskIncrementTick+0x170>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006502:	4915      	ldr	r1, [pc, #84]	; (8006558 <xTaskIncrementTick+0x16c>)
 8006504:	4613      	mov	r3, r2
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	440b      	add	r3, r1
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d907      	bls.n	8006524 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006514:	2301      	movs	r3, #1
 8006516:	617b      	str	r3, [r7, #20]
 8006518:	e004      	b.n	8006524 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800651a:	4b11      	ldr	r3, [pc, #68]	; (8006560 <xTaskIncrementTick+0x174>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	3301      	adds	r3, #1
 8006520:	4a0f      	ldr	r2, [pc, #60]	; (8006560 <xTaskIncrementTick+0x174>)
 8006522:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006524:	4b0f      	ldr	r3, [pc, #60]	; (8006564 <xTaskIncrementTick+0x178>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d001      	beq.n	8006530 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800652c:	2301      	movs	r3, #1
 800652e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006530:	697b      	ldr	r3, [r7, #20]
}
 8006532:	4618      	mov	r0, r3
 8006534:	3718      	adds	r7, #24
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	200007fc 	.word	0x200007fc
 8006540:	200007d8 	.word	0x200007d8
 8006544:	2000078c 	.word	0x2000078c
 8006548:	20000790 	.word	0x20000790
 800654c:	200007ec 	.word	0x200007ec
 8006550:	200007f4 	.word	0x200007f4
 8006554:	200007dc 	.word	0x200007dc
 8006558:	200006d8 	.word	0x200006d8
 800655c:	200006d4 	.word	0x200006d4
 8006560:	200007e4 	.word	0x200007e4
 8006564:	200007e8 	.word	0x200007e8

08006568 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006568:	b480      	push	{r7}
 800656a:	b087      	sub	sp, #28
 800656c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800656e:	4b26      	ldr	r3, [pc, #152]	; (8006608 <vTaskSwitchContext+0xa0>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d003      	beq.n	800657e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006576:	4b25      	ldr	r3, [pc, #148]	; (800660c <vTaskSwitchContext+0xa4>)
 8006578:	2201      	movs	r2, #1
 800657a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800657c:	e03f      	b.n	80065fe <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800657e:	4b23      	ldr	r3, [pc, #140]	; (800660c <vTaskSwitchContext+0xa4>)
 8006580:	2200      	movs	r2, #0
 8006582:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006584:	4b22      	ldr	r3, [pc, #136]	; (8006610 <vTaskSwitchContext+0xa8>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	fab3 f383 	clz	r3, r3
 8006590:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006592:	7afb      	ldrb	r3, [r7, #11]
 8006594:	f1c3 031f 	rsb	r3, r3, #31
 8006598:	617b      	str	r3, [r7, #20]
 800659a:	491e      	ldr	r1, [pc, #120]	; (8006614 <vTaskSwitchContext+0xac>)
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	4613      	mov	r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4413      	add	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	440b      	add	r3, r1
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10a      	bne.n	80065c4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80065ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b2:	f383 8811 	msr	BASEPRI, r3
 80065b6:	f3bf 8f6f 	isb	sy
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	607b      	str	r3, [r7, #4]
}
 80065c0:	bf00      	nop
 80065c2:	e7fe      	b.n	80065c2 <vTaskSwitchContext+0x5a>
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	4613      	mov	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4a11      	ldr	r2, [pc, #68]	; (8006614 <vTaskSwitchContext+0xac>)
 80065d0:	4413      	add	r3, r2
 80065d2:	613b      	str	r3, [r7, #16]
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	685a      	ldr	r2, [r3, #4]
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	605a      	str	r2, [r3, #4]
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	685a      	ldr	r2, [r3, #4]
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	3308      	adds	r3, #8
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d104      	bne.n	80065f4 <vTaskSwitchContext+0x8c>
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	605a      	str	r2, [r3, #4]
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	4a07      	ldr	r2, [pc, #28]	; (8006618 <vTaskSwitchContext+0xb0>)
 80065fc:	6013      	str	r3, [r2, #0]
}
 80065fe:	bf00      	nop
 8006600:	371c      	adds	r7, #28
 8006602:	46bd      	mov	sp, r7
 8006604:	bc80      	pop	{r7}
 8006606:	4770      	bx	lr
 8006608:	200007fc 	.word	0x200007fc
 800660c:	200007e8 	.word	0x200007e8
 8006610:	200007dc 	.word	0x200007dc
 8006614:	200006d8 	.word	0x200006d8
 8006618:	200006d4 	.word	0x200006d4

0800661c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10a      	bne.n	8006642 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800662c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006630:	f383 8811 	msr	BASEPRI, r3
 8006634:	f3bf 8f6f 	isb	sy
 8006638:	f3bf 8f4f 	dsb	sy
 800663c:	60fb      	str	r3, [r7, #12]
}
 800663e:	bf00      	nop
 8006640:	e7fe      	b.n	8006640 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006642:	4b07      	ldr	r3, [pc, #28]	; (8006660 <vTaskPlaceOnEventList+0x44>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	3318      	adds	r3, #24
 8006648:	4619      	mov	r1, r3
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f7fe fe6a 	bl	8005324 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006650:	2101      	movs	r1, #1
 8006652:	6838      	ldr	r0, [r7, #0]
 8006654:	f000 fa96 	bl	8006b84 <prvAddCurrentTaskToDelayedList>
}
 8006658:	bf00      	nop
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	200006d4 	.word	0x200006d4

08006664 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10a      	bne.n	800668c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667a:	f383 8811 	msr	BASEPRI, r3
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	f3bf 8f4f 	dsb	sy
 8006686:	617b      	str	r3, [r7, #20]
}
 8006688:	bf00      	nop
 800668a:	e7fe      	b.n	800668a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800668c:	4b0a      	ldr	r3, [pc, #40]	; (80066b8 <vTaskPlaceOnEventListRestricted+0x54>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	3318      	adds	r3, #24
 8006692:	4619      	mov	r1, r3
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f7fe fe22 	bl	80052de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d002      	beq.n	80066a6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80066a0:	f04f 33ff 	mov.w	r3, #4294967295
 80066a4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80066a6:	6879      	ldr	r1, [r7, #4]
 80066a8:	68b8      	ldr	r0, [r7, #8]
 80066aa:	f000 fa6b 	bl	8006b84 <prvAddCurrentTaskToDelayedList>
	}
 80066ae:	bf00      	nop
 80066b0:	3718      	adds	r7, #24
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	200006d4 	.word	0x200006d4

080066bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10a      	bne.n	80066e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80066d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d6:	f383 8811 	msr	BASEPRI, r3
 80066da:	f3bf 8f6f 	isb	sy
 80066de:	f3bf 8f4f 	dsb	sy
 80066e2:	60fb      	str	r3, [r7, #12]
}
 80066e4:	bf00      	nop
 80066e6:	e7fe      	b.n	80066e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	3318      	adds	r3, #24
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7fe fe51 	bl	8005394 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066f2:	4b1d      	ldr	r3, [pc, #116]	; (8006768 <xTaskRemoveFromEventList+0xac>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d11c      	bne.n	8006734 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	3304      	adds	r3, #4
 80066fe:	4618      	mov	r0, r3
 8006700:	f7fe fe48 	bl	8005394 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006708:	2201      	movs	r2, #1
 800670a:	409a      	lsls	r2, r3
 800670c:	4b17      	ldr	r3, [pc, #92]	; (800676c <xTaskRemoveFromEventList+0xb0>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4313      	orrs	r3, r2
 8006712:	4a16      	ldr	r2, [pc, #88]	; (800676c <xTaskRemoveFromEventList+0xb0>)
 8006714:	6013      	str	r3, [r2, #0]
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800671a:	4613      	mov	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4413      	add	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4a13      	ldr	r2, [pc, #76]	; (8006770 <xTaskRemoveFromEventList+0xb4>)
 8006724:	441a      	add	r2, r3
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	3304      	adds	r3, #4
 800672a:	4619      	mov	r1, r3
 800672c:	4610      	mov	r0, r2
 800672e:	f7fe fdd6 	bl	80052de <vListInsertEnd>
 8006732:	e005      	b.n	8006740 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	3318      	adds	r3, #24
 8006738:	4619      	mov	r1, r3
 800673a:	480e      	ldr	r0, [pc, #56]	; (8006774 <xTaskRemoveFromEventList+0xb8>)
 800673c:	f7fe fdcf 	bl	80052de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006744:	4b0c      	ldr	r3, [pc, #48]	; (8006778 <xTaskRemoveFromEventList+0xbc>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674a:	429a      	cmp	r2, r3
 800674c:	d905      	bls.n	800675a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800674e:	2301      	movs	r3, #1
 8006750:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006752:	4b0a      	ldr	r3, [pc, #40]	; (800677c <xTaskRemoveFromEventList+0xc0>)
 8006754:	2201      	movs	r2, #1
 8006756:	601a      	str	r2, [r3, #0]
 8006758:	e001      	b.n	800675e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800675a:	2300      	movs	r3, #0
 800675c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800675e:	697b      	ldr	r3, [r7, #20]
}
 8006760:	4618      	mov	r0, r3
 8006762:	3718      	adds	r7, #24
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	200007fc 	.word	0x200007fc
 800676c:	200007dc 	.word	0x200007dc
 8006770:	200006d8 	.word	0x200006d8
 8006774:	20000794 	.word	0x20000794
 8006778:	200006d4 	.word	0x200006d4
 800677c:	200007e8 	.word	0x200007e8

08006780 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006788:	4b06      	ldr	r3, [pc, #24]	; (80067a4 <vTaskInternalSetTimeOutState+0x24>)
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006790:	4b05      	ldr	r3, [pc, #20]	; (80067a8 <vTaskInternalSetTimeOutState+0x28>)
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	605a      	str	r2, [r3, #4]
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	bc80      	pop	{r7}
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	200007ec 	.word	0x200007ec
 80067a8:	200007d8 	.word	0x200007d8

080067ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b088      	sub	sp, #32
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d10a      	bne.n	80067d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80067bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c0:	f383 8811 	msr	BASEPRI, r3
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	f3bf 8f4f 	dsb	sy
 80067cc:	613b      	str	r3, [r7, #16]
}
 80067ce:	bf00      	nop
 80067d0:	e7fe      	b.n	80067d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10a      	bne.n	80067ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80067d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067dc:	f383 8811 	msr	BASEPRI, r3
 80067e0:	f3bf 8f6f 	isb	sy
 80067e4:	f3bf 8f4f 	dsb	sy
 80067e8:	60fb      	str	r3, [r7, #12]
}
 80067ea:	bf00      	nop
 80067ec:	e7fe      	b.n	80067ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80067ee:	f000 fea5 	bl	800753c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80067f2:	4b1d      	ldr	r3, [pc, #116]	; (8006868 <xTaskCheckForTimeOut+0xbc>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	69ba      	ldr	r2, [r7, #24]
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800680a:	d102      	bne.n	8006812 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800680c:	2300      	movs	r3, #0
 800680e:	61fb      	str	r3, [r7, #28]
 8006810:	e023      	b.n	800685a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	4b15      	ldr	r3, [pc, #84]	; (800686c <xTaskCheckForTimeOut+0xc0>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	429a      	cmp	r2, r3
 800681c:	d007      	beq.n	800682e <xTaskCheckForTimeOut+0x82>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	69ba      	ldr	r2, [r7, #24]
 8006824:	429a      	cmp	r2, r3
 8006826:	d302      	bcc.n	800682e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006828:	2301      	movs	r3, #1
 800682a:	61fb      	str	r3, [r7, #28]
 800682c:	e015      	b.n	800685a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	429a      	cmp	r2, r3
 8006836:	d20b      	bcs.n	8006850 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	1ad2      	subs	r2, r2, r3
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f7ff ff9b 	bl	8006780 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800684a:	2300      	movs	r3, #0
 800684c:	61fb      	str	r3, [r7, #28]
 800684e:	e004      	b.n	800685a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	2200      	movs	r2, #0
 8006854:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006856:	2301      	movs	r3, #1
 8006858:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800685a:	f000 fe9f 	bl	800759c <vPortExitCritical>

	return xReturn;
 800685e:	69fb      	ldr	r3, [r7, #28]
}
 8006860:	4618      	mov	r0, r3
 8006862:	3720      	adds	r7, #32
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	200007d8 	.word	0x200007d8
 800686c:	200007ec 	.word	0x200007ec

08006870 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006870:	b480      	push	{r7}
 8006872:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006874:	4b03      	ldr	r3, [pc, #12]	; (8006884 <vTaskMissedYield+0x14>)
 8006876:	2201      	movs	r2, #1
 8006878:	601a      	str	r2, [r3, #0]
}
 800687a:	bf00      	nop
 800687c:	46bd      	mov	sp, r7
 800687e:	bc80      	pop	{r7}
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	200007e8 	.word	0x200007e8

08006888 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006890:	f000 f852 	bl	8006938 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006894:	4b06      	ldr	r3, [pc, #24]	; (80068b0 <prvIdleTask+0x28>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d9f9      	bls.n	8006890 <prvIdleTask+0x8>
			{
				taskYIELD();
 800689c:	4b05      	ldr	r3, [pc, #20]	; (80068b4 <prvIdleTask+0x2c>)
 800689e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068a2:	601a      	str	r2, [r3, #0]
 80068a4:	f3bf 8f4f 	dsb	sy
 80068a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80068ac:	e7f0      	b.n	8006890 <prvIdleTask+0x8>
 80068ae:	bf00      	nop
 80068b0:	200006d8 	.word	0x200006d8
 80068b4:	e000ed04 	.word	0xe000ed04

080068b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068be:	2300      	movs	r3, #0
 80068c0:	607b      	str	r3, [r7, #4]
 80068c2:	e00c      	b.n	80068de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	4613      	mov	r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4413      	add	r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4a12      	ldr	r2, [pc, #72]	; (8006918 <prvInitialiseTaskLists+0x60>)
 80068d0:	4413      	add	r3, r2
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7fe fcd8 	bl	8005288 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	3301      	adds	r3, #1
 80068dc:	607b      	str	r3, [r7, #4]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2b06      	cmp	r3, #6
 80068e2:	d9ef      	bls.n	80068c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80068e4:	480d      	ldr	r0, [pc, #52]	; (800691c <prvInitialiseTaskLists+0x64>)
 80068e6:	f7fe fccf 	bl	8005288 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80068ea:	480d      	ldr	r0, [pc, #52]	; (8006920 <prvInitialiseTaskLists+0x68>)
 80068ec:	f7fe fccc 	bl	8005288 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80068f0:	480c      	ldr	r0, [pc, #48]	; (8006924 <prvInitialiseTaskLists+0x6c>)
 80068f2:	f7fe fcc9 	bl	8005288 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80068f6:	480c      	ldr	r0, [pc, #48]	; (8006928 <prvInitialiseTaskLists+0x70>)
 80068f8:	f7fe fcc6 	bl	8005288 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80068fc:	480b      	ldr	r0, [pc, #44]	; (800692c <prvInitialiseTaskLists+0x74>)
 80068fe:	f7fe fcc3 	bl	8005288 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006902:	4b0b      	ldr	r3, [pc, #44]	; (8006930 <prvInitialiseTaskLists+0x78>)
 8006904:	4a05      	ldr	r2, [pc, #20]	; (800691c <prvInitialiseTaskLists+0x64>)
 8006906:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006908:	4b0a      	ldr	r3, [pc, #40]	; (8006934 <prvInitialiseTaskLists+0x7c>)
 800690a:	4a05      	ldr	r2, [pc, #20]	; (8006920 <prvInitialiseTaskLists+0x68>)
 800690c:	601a      	str	r2, [r3, #0]
}
 800690e:	bf00      	nop
 8006910:	3708      	adds	r7, #8
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	200006d8 	.word	0x200006d8
 800691c:	20000764 	.word	0x20000764
 8006920:	20000778 	.word	0x20000778
 8006924:	20000794 	.word	0x20000794
 8006928:	200007a8 	.word	0x200007a8
 800692c:	200007c0 	.word	0x200007c0
 8006930:	2000078c 	.word	0x2000078c
 8006934:	20000790 	.word	0x20000790

08006938 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800693e:	e019      	b.n	8006974 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006940:	f000 fdfc 	bl	800753c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006944:	4b10      	ldr	r3, [pc, #64]	; (8006988 <prvCheckTasksWaitingTermination+0x50>)
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	3304      	adds	r3, #4
 8006950:	4618      	mov	r0, r3
 8006952:	f7fe fd1f 	bl	8005394 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006956:	4b0d      	ldr	r3, [pc, #52]	; (800698c <prvCheckTasksWaitingTermination+0x54>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	3b01      	subs	r3, #1
 800695c:	4a0b      	ldr	r2, [pc, #44]	; (800698c <prvCheckTasksWaitingTermination+0x54>)
 800695e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006960:	4b0b      	ldr	r3, [pc, #44]	; (8006990 <prvCheckTasksWaitingTermination+0x58>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	3b01      	subs	r3, #1
 8006966:	4a0a      	ldr	r2, [pc, #40]	; (8006990 <prvCheckTasksWaitingTermination+0x58>)
 8006968:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800696a:	f000 fe17 	bl	800759c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f810 	bl	8006994 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006974:	4b06      	ldr	r3, [pc, #24]	; (8006990 <prvCheckTasksWaitingTermination+0x58>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1e1      	bne.n	8006940 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800697c:	bf00      	nop
 800697e:	bf00      	nop
 8006980:	3708      	adds	r7, #8
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	200007a8 	.word	0x200007a8
 800698c:	200007d4 	.word	0x200007d4
 8006990:	200007bc 	.word	0x200007bc

08006994 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d108      	bne.n	80069b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069aa:	4618      	mov	r0, r3
 80069ac:	f000 ff8a 	bl	80078c4 <vPortFree>
				vPortFree( pxTCB );
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 ff87 	bl	80078c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80069b6:	e018      	b.n	80069ea <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d103      	bne.n	80069ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 ff7e 	bl	80078c4 <vPortFree>
	}
 80069c8:	e00f      	b.n	80069ea <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d00a      	beq.n	80069ea <prvDeleteTCB+0x56>
	__asm volatile
 80069d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d8:	f383 8811 	msr	BASEPRI, r3
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	60fb      	str	r3, [r7, #12]
}
 80069e6:	bf00      	nop
 80069e8:	e7fe      	b.n	80069e8 <prvDeleteTCB+0x54>
	}
 80069ea:	bf00      	nop
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
	...

080069f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069fa:	4b0e      	ldr	r3, [pc, #56]	; (8006a34 <prvResetNextTaskUnblockTime+0x40>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <prvResetNextTaskUnblockTime+0x14>
 8006a04:	2301      	movs	r3, #1
 8006a06:	e000      	b.n	8006a0a <prvResetNextTaskUnblockTime+0x16>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d004      	beq.n	8006a18 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a0e:	4b0a      	ldr	r3, [pc, #40]	; (8006a38 <prvResetNextTaskUnblockTime+0x44>)
 8006a10:	f04f 32ff 	mov.w	r2, #4294967295
 8006a14:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a16:	e008      	b.n	8006a2a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006a18:	4b06      	ldr	r3, [pc, #24]	; (8006a34 <prvResetNextTaskUnblockTime+0x40>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	4a04      	ldr	r2, [pc, #16]	; (8006a38 <prvResetNextTaskUnblockTime+0x44>)
 8006a28:	6013      	str	r3, [r2, #0]
}
 8006a2a:	bf00      	nop
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bc80      	pop	{r7}
 8006a32:	4770      	bx	lr
 8006a34:	2000078c 	.word	0x2000078c
 8006a38:	200007f4 	.word	0x200007f4

08006a3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a42:	4b0b      	ldr	r3, [pc, #44]	; (8006a70 <xTaskGetSchedulerState+0x34>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d102      	bne.n	8006a50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	607b      	str	r3, [r7, #4]
 8006a4e:	e008      	b.n	8006a62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a50:	4b08      	ldr	r3, [pc, #32]	; (8006a74 <xTaskGetSchedulerState+0x38>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d102      	bne.n	8006a5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a58:	2302      	movs	r3, #2
 8006a5a:	607b      	str	r3, [r7, #4]
 8006a5c:	e001      	b.n	8006a62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a62:	687b      	ldr	r3, [r7, #4]
	}
 8006a64:	4618      	mov	r0, r3
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bc80      	pop	{r7}
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	200007e0 	.word	0x200007e0
 8006a74:	200007fc 	.word	0x200007fc

08006a78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a84:	2300      	movs	r3, #0
 8006a86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d06e      	beq.n	8006b6c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a8e:	4b3a      	ldr	r3, [pc, #232]	; (8006b78 <xTaskPriorityDisinherit+0x100>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	693a      	ldr	r2, [r7, #16]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d00a      	beq.n	8006aae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9c:	f383 8811 	msr	BASEPRI, r3
 8006aa0:	f3bf 8f6f 	isb	sy
 8006aa4:	f3bf 8f4f 	dsb	sy
 8006aa8:	60fb      	str	r3, [r7, #12]
}
 8006aaa:	bf00      	nop
 8006aac:	e7fe      	b.n	8006aac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10a      	bne.n	8006acc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aba:	f383 8811 	msr	BASEPRI, r3
 8006abe:	f3bf 8f6f 	isb	sy
 8006ac2:	f3bf 8f4f 	dsb	sy
 8006ac6:	60bb      	str	r3, [r7, #8]
}
 8006ac8:	bf00      	nop
 8006aca:	e7fe      	b.n	8006aca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ad0:	1e5a      	subs	r2, r3, #1
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d044      	beq.n	8006b6c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d140      	bne.n	8006b6c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	3304      	adds	r3, #4
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7fe fc50 	bl	8005394 <uxListRemove>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d115      	bne.n	8006b26 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006afe:	491f      	ldr	r1, [pc, #124]	; (8006b7c <xTaskPriorityDisinherit+0x104>)
 8006b00:	4613      	mov	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	440b      	add	r3, r1
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d10a      	bne.n	8006b26 <xTaskPriorityDisinherit+0xae>
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b14:	2201      	movs	r2, #1
 8006b16:	fa02 f303 	lsl.w	r3, r2, r3
 8006b1a:	43da      	mvns	r2, r3
 8006b1c:	4b18      	ldr	r3, [pc, #96]	; (8006b80 <xTaskPriorityDisinherit+0x108>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4013      	ands	r3, r2
 8006b22:	4a17      	ldr	r2, [pc, #92]	; (8006b80 <xTaskPriorityDisinherit+0x108>)
 8006b24:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b32:	f1c3 0207 	rsb	r2, r3, #7
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3e:	2201      	movs	r2, #1
 8006b40:	409a      	lsls	r2, r3
 8006b42:	4b0f      	ldr	r3, [pc, #60]	; (8006b80 <xTaskPriorityDisinherit+0x108>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	4a0d      	ldr	r2, [pc, #52]	; (8006b80 <xTaskPriorityDisinherit+0x108>)
 8006b4a:	6013      	str	r3, [r2, #0]
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b50:	4613      	mov	r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4a08      	ldr	r2, [pc, #32]	; (8006b7c <xTaskPriorityDisinherit+0x104>)
 8006b5a:	441a      	add	r2, r3
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	3304      	adds	r3, #4
 8006b60:	4619      	mov	r1, r3
 8006b62:	4610      	mov	r0, r2
 8006b64:	f7fe fbbb 	bl	80052de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b6c:	697b      	ldr	r3, [r7, #20]
	}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3718      	adds	r7, #24
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	200006d4 	.word	0x200006d4
 8006b7c:	200006d8 	.word	0x200006d8
 8006b80:	200007dc 	.word	0x200007dc

08006b84 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b8e:	4b29      	ldr	r3, [pc, #164]	; (8006c34 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b94:	4b28      	ldr	r3, [pc, #160]	; (8006c38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	3304      	adds	r3, #4
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7fe fbfa 	bl	8005394 <uxListRemove>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d10b      	bne.n	8006bbe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006ba6:	4b24      	ldr	r3, [pc, #144]	; (8006c38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bac:	2201      	movs	r2, #1
 8006bae:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb2:	43da      	mvns	r2, r3
 8006bb4:	4b21      	ldr	r3, [pc, #132]	; (8006c3c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4013      	ands	r3, r2
 8006bba:	4a20      	ldr	r2, [pc, #128]	; (8006c3c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006bbc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc4:	d10a      	bne.n	8006bdc <prvAddCurrentTaskToDelayedList+0x58>
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d007      	beq.n	8006bdc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bcc:	4b1a      	ldr	r3, [pc, #104]	; (8006c38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	3304      	adds	r3, #4
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	481a      	ldr	r0, [pc, #104]	; (8006c40 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006bd6:	f7fe fb82 	bl	80052de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006bda:	e026      	b.n	8006c2a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4413      	add	r3, r2
 8006be2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006be4:	4b14      	ldr	r3, [pc, #80]	; (8006c38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68ba      	ldr	r2, [r7, #8]
 8006bea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d209      	bcs.n	8006c08 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bf4:	4b13      	ldr	r3, [pc, #76]	; (8006c44 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	4b0f      	ldr	r3, [pc, #60]	; (8006c38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	3304      	adds	r3, #4
 8006bfe:	4619      	mov	r1, r3
 8006c00:	4610      	mov	r0, r2
 8006c02:	f7fe fb8f 	bl	8005324 <vListInsert>
}
 8006c06:	e010      	b.n	8006c2a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c08:	4b0f      	ldr	r3, [pc, #60]	; (8006c48 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	4b0a      	ldr	r3, [pc, #40]	; (8006c38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3304      	adds	r3, #4
 8006c12:	4619      	mov	r1, r3
 8006c14:	4610      	mov	r0, r2
 8006c16:	f7fe fb85 	bl	8005324 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c1a:	4b0c      	ldr	r3, [pc, #48]	; (8006c4c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d202      	bcs.n	8006c2a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006c24:	4a09      	ldr	r2, [pc, #36]	; (8006c4c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	6013      	str	r3, [r2, #0]
}
 8006c2a:	bf00      	nop
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	200007d8 	.word	0x200007d8
 8006c38:	200006d4 	.word	0x200006d4
 8006c3c:	200007dc 	.word	0x200007dc
 8006c40:	200007c0 	.word	0x200007c0
 8006c44:	20000790 	.word	0x20000790
 8006c48:	2000078c 	.word	0x2000078c
 8006c4c:	200007f4 	.word	0x200007f4

08006c50 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b08a      	sub	sp, #40	; 0x28
 8006c54:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006c56:	2300      	movs	r3, #0
 8006c58:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006c5a:	f000 fb41 	bl	80072e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006c5e:	4b1c      	ldr	r3, [pc, #112]	; (8006cd0 <xTimerCreateTimerTask+0x80>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d021      	beq.n	8006caa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006c66:	2300      	movs	r3, #0
 8006c68:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006c6e:	1d3a      	adds	r2, r7, #4
 8006c70:	f107 0108 	add.w	r1, r7, #8
 8006c74:	f107 030c 	add.w	r3, r7, #12
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7f9 fc6d 	bl	8000558 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006c7e:	6879      	ldr	r1, [r7, #4]
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	9202      	str	r2, [sp, #8]
 8006c86:	9301      	str	r3, [sp, #4]
 8006c88:	2302      	movs	r3, #2
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	460a      	mov	r2, r1
 8006c90:	4910      	ldr	r1, [pc, #64]	; (8006cd4 <xTimerCreateTimerTask+0x84>)
 8006c92:	4811      	ldr	r0, [pc, #68]	; (8006cd8 <xTimerCreateTimerTask+0x88>)
 8006c94:	f7ff f8c6 	bl	8005e24 <xTaskCreateStatic>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	4a10      	ldr	r2, [pc, #64]	; (8006cdc <xTimerCreateTimerTask+0x8c>)
 8006c9c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006c9e:	4b0f      	ldr	r3, [pc, #60]	; (8006cdc <xTimerCreateTimerTask+0x8c>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d001      	beq.n	8006caa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10a      	bne.n	8006cc6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb4:	f383 8811 	msr	BASEPRI, r3
 8006cb8:	f3bf 8f6f 	isb	sy
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	613b      	str	r3, [r7, #16]
}
 8006cc2:	bf00      	nop
 8006cc4:	e7fe      	b.n	8006cc4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006cc6:	697b      	ldr	r3, [r7, #20]
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3718      	adds	r7, #24
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	20000830 	.word	0x20000830
 8006cd4:	08007bec 	.word	0x08007bec
 8006cd8:	08006f1d 	.word	0x08006f1d
 8006cdc:	20000834 	.word	0x20000834

08006ce0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b088      	sub	sp, #32
 8006ce4:	af02      	add	r7, sp, #8
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
 8006cec:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8006cee:	202c      	movs	r0, #44	; 0x2c
 8006cf0:	f000 fd24 	bl	800773c <pvPortMalloc>
 8006cf4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00d      	beq.n	8006d18 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	9301      	str	r3, [sp, #4]
 8006d00:	6a3b      	ldr	r3, [r7, #32]
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	68b9      	ldr	r1, [r7, #8]
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f000 f846 	bl	8006d9c <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8006d18:	697b      	ldr	r3, [r7, #20]
	}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3718      	adds	r7, #24
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b08a      	sub	sp, #40	; 0x28
 8006d26:	af02      	add	r7, sp, #8
 8006d28:	60f8      	str	r0, [r7, #12]
 8006d2a:	60b9      	str	r1, [r7, #8]
 8006d2c:	607a      	str	r2, [r7, #4]
 8006d2e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006d30:	232c      	movs	r3, #44	; 0x2c
 8006d32:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	2b2c      	cmp	r3, #44	; 0x2c
 8006d38:	d00a      	beq.n	8006d50 <xTimerCreateStatic+0x2e>
	__asm volatile
 8006d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3e:	f383 8811 	msr	BASEPRI, r3
 8006d42:	f3bf 8f6f 	isb	sy
 8006d46:	f3bf 8f4f 	dsb	sy
 8006d4a:	61bb      	str	r3, [r7, #24]
}
 8006d4c:	bf00      	nop
 8006d4e:	e7fe      	b.n	8006d4e <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8006d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10a      	bne.n	8006d6c <xTimerCreateStatic+0x4a>
	__asm volatile
 8006d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5a:	f383 8811 	msr	BASEPRI, r3
 8006d5e:	f3bf 8f6f 	isb	sy
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	617b      	str	r3, [r7, #20]
}
 8006d68:	bf00      	nop
 8006d6a:	e7fe      	b.n	8006d6a <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6e:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00d      	beq.n	8006d92 <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	9301      	str	r3, [sp, #4]
 8006d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	68b9      	ldr	r1, [r7, #8]
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f000 f809 	bl	8006d9c <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8006d92:	69fb      	ldr	r3, [r7, #28]
	}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3720      	adds	r7, #32
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b086      	sub	sp, #24
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]
 8006da8:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d10a      	bne.n	8006dc6 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8006db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db4:	f383 8811 	msr	BASEPRI, r3
 8006db8:	f3bf 8f6f 	isb	sy
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	617b      	str	r3, [r7, #20]
}
 8006dc2:	bf00      	nop
 8006dc4:	e7fe      	b.n	8006dc4 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8006dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d015      	beq.n	8006df8 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006dcc:	f000 fa88 	bl	80072e0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8006de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de4:	683a      	ldr	r2, [r7, #0]
 8006de6:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	6a3a      	ldr	r2, [r7, #32]
 8006dec:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df0:	3304      	adds	r3, #4
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7fe fa67 	bl	80052c6 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006df8:	bf00      	nop
 8006dfa:	3718      	adds	r7, #24
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b08a      	sub	sp, #40	; 0x28
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
 8006e0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10a      	bne.n	8006e2e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1c:	f383 8811 	msr	BASEPRI, r3
 8006e20:	f3bf 8f6f 	isb	sy
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	623b      	str	r3, [r7, #32]
}
 8006e2a:	bf00      	nop
 8006e2c:	e7fe      	b.n	8006e2c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006e2e:	4b1a      	ldr	r3, [pc, #104]	; (8006e98 <xTimerGenericCommand+0x98>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d02a      	beq.n	8006e8c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	2b05      	cmp	r3, #5
 8006e46:	dc18      	bgt.n	8006e7a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006e48:	f7ff fdf8 	bl	8006a3c <xTaskGetSchedulerState>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d109      	bne.n	8006e66 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006e52:	4b11      	ldr	r3, [pc, #68]	; (8006e98 <xTimerGenericCommand+0x98>)
 8006e54:	6818      	ldr	r0, [r3, #0]
 8006e56:	f107 0114 	add.w	r1, r7, #20
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e5e:	f7fe fbff 	bl	8005660 <xQueueGenericSend>
 8006e62:	6278      	str	r0, [r7, #36]	; 0x24
 8006e64:	e012      	b.n	8006e8c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006e66:	4b0c      	ldr	r3, [pc, #48]	; (8006e98 <xTimerGenericCommand+0x98>)
 8006e68:	6818      	ldr	r0, [r3, #0]
 8006e6a:	f107 0114 	add.w	r1, r7, #20
 8006e6e:	2300      	movs	r3, #0
 8006e70:	2200      	movs	r2, #0
 8006e72:	f7fe fbf5 	bl	8005660 <xQueueGenericSend>
 8006e76:	6278      	str	r0, [r7, #36]	; 0x24
 8006e78:	e008      	b.n	8006e8c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e7a:	4b07      	ldr	r3, [pc, #28]	; (8006e98 <xTimerGenericCommand+0x98>)
 8006e7c:	6818      	ldr	r0, [r3, #0]
 8006e7e:	f107 0114 	add.w	r1, r7, #20
 8006e82:	2300      	movs	r3, #0
 8006e84:	683a      	ldr	r2, [r7, #0]
 8006e86:	f7fe fce9 	bl	800585c <xQueueGenericSendFromISR>
 8006e8a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3728      	adds	r7, #40	; 0x28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	20000830 	.word	0x20000830

08006e9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b088      	sub	sp, #32
 8006ea0:	af02      	add	r7, sp, #8
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ea6:	4b1c      	ldr	r3, [pc, #112]	; (8006f18 <prvProcessExpiredTimer+0x7c>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	3304      	adds	r3, #4
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7fe fa6d 	bl	8005394 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	69db      	ldr	r3, [r3, #28]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d122      	bne.n	8006f08 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	699a      	ldr	r2, [r3, #24]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	18d1      	adds	r1, r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	683a      	ldr	r2, [r7, #0]
 8006ece:	6978      	ldr	r0, [r7, #20]
 8006ed0:	f000 f8c8 	bl	8007064 <prvInsertTimerInActiveList>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d016      	beq.n	8006f08 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006eda:	2300      	movs	r3, #0
 8006edc:	9300      	str	r3, [sp, #0]
 8006ede:	2300      	movs	r3, #0
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	6978      	ldr	r0, [r7, #20]
 8006ee6:	f7ff ff8b 	bl	8006e00 <xTimerGenericCommand>
 8006eea:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10a      	bne.n	8006f08 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef6:	f383 8811 	msr	BASEPRI, r3
 8006efa:	f3bf 8f6f 	isb	sy
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	60fb      	str	r3, [r7, #12]
}
 8006f04:	bf00      	nop
 8006f06:	e7fe      	b.n	8006f06 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0c:	6978      	ldr	r0, [r7, #20]
 8006f0e:	4798      	blx	r3
}
 8006f10:	bf00      	nop
 8006f12:	3718      	adds	r7, #24
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	20000828 	.word	0x20000828

08006f1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f24:	f107 0308 	add.w	r3, r7, #8
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f000 f857 	bl	8006fdc <prvGetNextExpireTime>
 8006f2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	4619      	mov	r1, r3
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f000 f803 	bl	8006f40 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006f3a:	f000 f8d5 	bl	80070e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f3e:	e7f1      	b.n	8006f24 <prvTimerTask+0x8>

08006f40 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006f4a:	f7ff f997 	bl	800627c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f4e:	f107 0308 	add.w	r3, r7, #8
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 f866 	bl	8007024 <prvSampleTimeNow>
 8006f58:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d130      	bne.n	8006fc2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10a      	bne.n	8006f7c <prvProcessTimerOrBlockTask+0x3c>
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d806      	bhi.n	8006f7c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006f6e:	f7ff f993 	bl	8006298 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f72:	68f9      	ldr	r1, [r7, #12]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f7ff ff91 	bl	8006e9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f7a:	e024      	b.n	8006fc6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d008      	beq.n	8006f94 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f82:	4b13      	ldr	r3, [pc, #76]	; (8006fd0 <prvProcessTimerOrBlockTask+0x90>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	bf0c      	ite	eq
 8006f8c:	2301      	moveq	r3, #1
 8006f8e:	2300      	movne	r3, #0
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f94:	4b0f      	ldr	r3, [pc, #60]	; (8006fd4 <prvProcessTimerOrBlockTask+0x94>)
 8006f96:	6818      	ldr	r0, [r3, #0]
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	683a      	ldr	r2, [r7, #0]
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	f7fe ff0b 	bl	8005dbc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006fa6:	f7ff f977 	bl	8006298 <xTaskResumeAll>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10a      	bne.n	8006fc6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006fb0:	4b09      	ldr	r3, [pc, #36]	; (8006fd8 <prvProcessTimerOrBlockTask+0x98>)
 8006fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	f3bf 8f6f 	isb	sy
}
 8006fc0:	e001      	b.n	8006fc6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006fc2:	f7ff f969 	bl	8006298 <xTaskResumeAll>
}
 8006fc6:	bf00      	nop
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	2000082c 	.word	0x2000082c
 8006fd4:	20000830 	.word	0x20000830
 8006fd8:	e000ed04 	.word	0xe000ed04

08006fdc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006fe4:	4b0e      	ldr	r3, [pc, #56]	; (8007020 <prvGetNextExpireTime+0x44>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	bf0c      	ite	eq
 8006fee:	2301      	moveq	r3, #1
 8006ff0:	2300      	movne	r3, #0
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d105      	bne.n	800700e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007002:	4b07      	ldr	r3, [pc, #28]	; (8007020 <prvGetNextExpireTime+0x44>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	60fb      	str	r3, [r7, #12]
 800700c:	e001      	b.n	8007012 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800700e:	2300      	movs	r3, #0
 8007010:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007012:	68fb      	ldr	r3, [r7, #12]
}
 8007014:	4618      	mov	r0, r3
 8007016:	3714      	adds	r7, #20
 8007018:	46bd      	mov	sp, r7
 800701a:	bc80      	pop	{r7}
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	20000828 	.word	0x20000828

08007024 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800702c:	f7ff f9d0 	bl	80063d0 <xTaskGetTickCount>
 8007030:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007032:	4b0b      	ldr	r3, [pc, #44]	; (8007060 <prvSampleTimeNow+0x3c>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	429a      	cmp	r2, r3
 800703a:	d205      	bcs.n	8007048 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800703c:	f000 f8ee 	bl	800721c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	601a      	str	r2, [r3, #0]
 8007046:	e002      	b.n	800704e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800704e:	4a04      	ldr	r2, [pc, #16]	; (8007060 <prvSampleTimeNow+0x3c>)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007054:	68fb      	ldr	r3, [r7, #12]
}
 8007056:	4618      	mov	r0, r3
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	20000838 	.word	0x20000838

08007064 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
 8007070:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007072:	2300      	movs	r3, #0
 8007074:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	429a      	cmp	r2, r3
 8007088:	d812      	bhi.n	80070b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	1ad2      	subs	r2, r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	429a      	cmp	r2, r3
 8007096:	d302      	bcc.n	800709e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007098:	2301      	movs	r3, #1
 800709a:	617b      	str	r3, [r7, #20]
 800709c:	e01b      	b.n	80070d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800709e:	4b10      	ldr	r3, [pc, #64]	; (80070e0 <prvInsertTimerInActiveList+0x7c>)
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	3304      	adds	r3, #4
 80070a6:	4619      	mov	r1, r3
 80070a8:	4610      	mov	r0, r2
 80070aa:	f7fe f93b 	bl	8005324 <vListInsert>
 80070ae:	e012      	b.n	80070d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d206      	bcs.n	80070c6 <prvInsertTimerInActiveList+0x62>
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d302      	bcc.n	80070c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80070c0:	2301      	movs	r3, #1
 80070c2:	617b      	str	r3, [r7, #20]
 80070c4:	e007      	b.n	80070d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070c6:	4b07      	ldr	r3, [pc, #28]	; (80070e4 <prvInsertTimerInActiveList+0x80>)
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	3304      	adds	r3, #4
 80070ce:	4619      	mov	r1, r3
 80070d0:	4610      	mov	r0, r2
 80070d2:	f7fe f927 	bl	8005324 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80070d6:	697b      	ldr	r3, [r7, #20]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3718      	adds	r7, #24
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	2000082c 	.word	0x2000082c
 80070e4:	20000828 	.word	0x20000828

080070e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b08c      	sub	sp, #48	; 0x30
 80070ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070ee:	e081      	b.n	80071f4 <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	db7d      	blt.n	80071f2 <prvProcessReceivedCommands+0x10a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80070fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fc:	695b      	ldr	r3, [r3, #20]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d004      	beq.n	800710c <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007104:	3304      	adds	r3, #4
 8007106:	4618      	mov	r0, r3
 8007108:	f7fe f944 	bl	8005394 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800710c:	1d3b      	adds	r3, r7, #4
 800710e:	4618      	mov	r0, r3
 8007110:	f7ff ff88 	bl	8007024 <prvSampleTimeNow>
 8007114:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	2b09      	cmp	r3, #9
 800711a:	d86b      	bhi.n	80071f4 <prvProcessReceivedCommands+0x10c>
 800711c:	a201      	add	r2, pc, #4	; (adr r2, 8007124 <prvProcessReceivedCommands+0x3c>)
 800711e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007122:	bf00      	nop
 8007124:	0800714d 	.word	0x0800714d
 8007128:	0800714d 	.word	0x0800714d
 800712c:	0800714d 	.word	0x0800714d
 8007130:	080071f5 	.word	0x080071f5
 8007134:	080071a9 	.word	0x080071a9
 8007138:	080071e1 	.word	0x080071e1
 800713c:	0800714d 	.word	0x0800714d
 8007140:	0800714d 	.word	0x0800714d
 8007144:	080071f5 	.word	0x080071f5
 8007148:	080071a9 	.word	0x080071a9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	18d1      	adds	r1, r2, r3
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6a3a      	ldr	r2, [r7, #32]
 8007158:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800715a:	f7ff ff83 	bl	8007064 <prvInsertTimerInActiveList>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d047      	beq.n	80071f4 <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007168:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800716a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800716c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716e:	69db      	ldr	r3, [r3, #28]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d13f      	bne.n	80071f4 <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	441a      	add	r2, r3
 800717c:	2300      	movs	r3, #0
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	2300      	movs	r3, #0
 8007182:	2100      	movs	r1, #0
 8007184:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007186:	f7ff fe3b 	bl	8006e00 <xTimerGenericCommand>
 800718a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d130      	bne.n	80071f4 <prvProcessReceivedCommands+0x10c>
	__asm volatile
 8007192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	61bb      	str	r3, [r7, #24]
}
 80071a4:	bf00      	nop
 80071a6:	e7fe      	b.n	80071a6 <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80071ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10a      	bne.n	80071cc <prvProcessReceivedCommands+0xe4>
	__asm volatile
 80071b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ba:	f383 8811 	msr	BASEPRI, r3
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f3bf 8f4f 	dsb	sy
 80071c6:	617b      	str	r3, [r7, #20]
}
 80071c8:	bf00      	nop
 80071ca:	e7fe      	b.n	80071ca <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	699a      	ldr	r2, [r3, #24]
 80071d0:	6a3b      	ldr	r3, [r7, #32]
 80071d2:	18d1      	adds	r1, r2, r3
 80071d4:	6a3b      	ldr	r3, [r7, #32]
 80071d6:	6a3a      	ldr	r2, [r7, #32]
 80071d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071da:	f7ff ff43 	bl	8007064 <prvInsertTimerInActiveList>
					break;
 80071de:	e009      	b.n	80071f4 <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80071e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d104      	bne.n	80071f4 <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 80071ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071ec:	f000 fb6a 	bl	80078c4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80071f0:	e000      	b.n	80071f4 <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80071f2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80071f4:	4b08      	ldr	r3, [pc, #32]	; (8007218 <prvProcessReceivedCommands+0x130>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f107 0108 	add.w	r1, r7, #8
 80071fc:	2200      	movs	r2, #0
 80071fe:	4618      	mov	r0, r3
 8007200:	f7fe fbc4 	bl	800598c <xQueueReceive>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	f47f af72 	bne.w	80070f0 <prvProcessReceivedCommands+0x8>
	}
}
 800720c:	bf00      	nop
 800720e:	bf00      	nop
 8007210:	3728      	adds	r7, #40	; 0x28
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	20000830 	.word	0x20000830

0800721c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b088      	sub	sp, #32
 8007220:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007222:	e045      	b.n	80072b0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007224:	4b2c      	ldr	r3, [pc, #176]	; (80072d8 <prvSwitchTimerLists+0xbc>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800722e:	4b2a      	ldr	r3, [pc, #168]	; (80072d8 <prvSwitchTimerLists+0xbc>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	3304      	adds	r3, #4
 800723c:	4618      	mov	r0, r3
 800723e:	f7fe f8a9 	bl	8005394 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	69db      	ldr	r3, [r3, #28]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d12e      	bne.n	80072b0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	693a      	ldr	r2, [r7, #16]
 8007258:	4413      	add	r3, r2
 800725a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	429a      	cmp	r2, r3
 8007262:	d90e      	bls.n	8007282 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007270:	4b19      	ldr	r3, [pc, #100]	; (80072d8 <prvSwitchTimerLists+0xbc>)
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	3304      	adds	r3, #4
 8007278:	4619      	mov	r1, r3
 800727a:	4610      	mov	r0, r2
 800727c:	f7fe f852 	bl	8005324 <vListInsert>
 8007280:	e016      	b.n	80072b0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007282:	2300      	movs	r3, #0
 8007284:	9300      	str	r3, [sp, #0]
 8007286:	2300      	movs	r3, #0
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	2100      	movs	r1, #0
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f7ff fdb7 	bl	8006e00 <xTimerGenericCommand>
 8007292:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d10a      	bne.n	80072b0 <prvSwitchTimerLists+0x94>
	__asm volatile
 800729a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800729e:	f383 8811 	msr	BASEPRI, r3
 80072a2:	f3bf 8f6f 	isb	sy
 80072a6:	f3bf 8f4f 	dsb	sy
 80072aa:	603b      	str	r3, [r7, #0]
}
 80072ac:	bf00      	nop
 80072ae:	e7fe      	b.n	80072ae <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80072b0:	4b09      	ldr	r3, [pc, #36]	; (80072d8 <prvSwitchTimerLists+0xbc>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d1b4      	bne.n	8007224 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80072ba:	4b07      	ldr	r3, [pc, #28]	; (80072d8 <prvSwitchTimerLists+0xbc>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80072c0:	4b06      	ldr	r3, [pc, #24]	; (80072dc <prvSwitchTimerLists+0xc0>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a04      	ldr	r2, [pc, #16]	; (80072d8 <prvSwitchTimerLists+0xbc>)
 80072c6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80072c8:	4a04      	ldr	r2, [pc, #16]	; (80072dc <prvSwitchTimerLists+0xc0>)
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	6013      	str	r3, [r2, #0]
}
 80072ce:	bf00      	nop
 80072d0:	3718      	adds	r7, #24
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	20000828 	.word	0x20000828
 80072dc:	2000082c 	.word	0x2000082c

080072e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80072e6:	f000 f929 	bl	800753c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80072ea:	4b15      	ldr	r3, [pc, #84]	; (8007340 <prvCheckForValidListAndQueue+0x60>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d120      	bne.n	8007334 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80072f2:	4814      	ldr	r0, [pc, #80]	; (8007344 <prvCheckForValidListAndQueue+0x64>)
 80072f4:	f7fd ffc8 	bl	8005288 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80072f8:	4813      	ldr	r0, [pc, #76]	; (8007348 <prvCheckForValidListAndQueue+0x68>)
 80072fa:	f7fd ffc5 	bl	8005288 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80072fe:	4b13      	ldr	r3, [pc, #76]	; (800734c <prvCheckForValidListAndQueue+0x6c>)
 8007300:	4a10      	ldr	r2, [pc, #64]	; (8007344 <prvCheckForValidListAndQueue+0x64>)
 8007302:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007304:	4b12      	ldr	r3, [pc, #72]	; (8007350 <prvCheckForValidListAndQueue+0x70>)
 8007306:	4a10      	ldr	r2, [pc, #64]	; (8007348 <prvCheckForValidListAndQueue+0x68>)
 8007308:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800730a:	2300      	movs	r3, #0
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	4b11      	ldr	r3, [pc, #68]	; (8007354 <prvCheckForValidListAndQueue+0x74>)
 8007310:	4a11      	ldr	r2, [pc, #68]	; (8007358 <prvCheckForValidListAndQueue+0x78>)
 8007312:	210c      	movs	r1, #12
 8007314:	200a      	movs	r0, #10
 8007316:	f7fe f8cf 	bl	80054b8 <xQueueGenericCreateStatic>
 800731a:	4603      	mov	r3, r0
 800731c:	4a08      	ldr	r2, [pc, #32]	; (8007340 <prvCheckForValidListAndQueue+0x60>)
 800731e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007320:	4b07      	ldr	r3, [pc, #28]	; (8007340 <prvCheckForValidListAndQueue+0x60>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d005      	beq.n	8007334 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007328:	4b05      	ldr	r3, [pc, #20]	; (8007340 <prvCheckForValidListAndQueue+0x60>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	490b      	ldr	r1, [pc, #44]	; (800735c <prvCheckForValidListAndQueue+0x7c>)
 800732e:	4618      	mov	r0, r3
 8007330:	f7fe fd1c 	bl	8005d6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007334:	f000 f932 	bl	800759c <vPortExitCritical>
}
 8007338:	bf00      	nop
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	20000830 	.word	0x20000830
 8007344:	20000800 	.word	0x20000800
 8007348:	20000814 	.word	0x20000814
 800734c:	20000828 	.word	0x20000828
 8007350:	2000082c 	.word	0x2000082c
 8007354:	200008b4 	.word	0x200008b4
 8007358:	2000083c 	.word	0x2000083c
 800735c:	08007bf4 	.word	0x08007bf4

08007360 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	3b04      	subs	r3, #4
 8007370:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007378:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	3b04      	subs	r3, #4
 800737e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	f023 0201 	bic.w	r2, r3, #1
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	3b04      	subs	r3, #4
 800738e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007390:	4a08      	ldr	r2, [pc, #32]	; (80073b4 <pxPortInitialiseStack+0x54>)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	3b14      	subs	r3, #20
 800739a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	3b20      	subs	r3, #32
 80073a6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80073a8:	68fb      	ldr	r3, [r7, #12]
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3714      	adds	r7, #20
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bc80      	pop	{r7}
 80073b2:	4770      	bx	lr
 80073b4:	080073b9 	.word	0x080073b9

080073b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80073be:	2300      	movs	r3, #0
 80073c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80073c2:	4b12      	ldr	r3, [pc, #72]	; (800740c <prvTaskExitError+0x54>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ca:	d00a      	beq.n	80073e2 <prvTaskExitError+0x2a>
	__asm volatile
 80073cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d0:	f383 8811 	msr	BASEPRI, r3
 80073d4:	f3bf 8f6f 	isb	sy
 80073d8:	f3bf 8f4f 	dsb	sy
 80073dc:	60fb      	str	r3, [r7, #12]
}
 80073de:	bf00      	nop
 80073e0:	e7fe      	b.n	80073e0 <prvTaskExitError+0x28>
	__asm volatile
 80073e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	60bb      	str	r3, [r7, #8]
}
 80073f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80073f6:	bf00      	nop
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d0fc      	beq.n	80073f8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80073fe:	bf00      	nop
 8007400:	bf00      	nop
 8007402:	3714      	adds	r7, #20
 8007404:	46bd      	mov	sp, r7
 8007406:	bc80      	pop	{r7}
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	2000000c 	.word	0x2000000c

08007410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007410:	4b07      	ldr	r3, [pc, #28]	; (8007430 <pxCurrentTCBConst2>)
 8007412:	6819      	ldr	r1, [r3, #0]
 8007414:	6808      	ldr	r0, [r1, #0]
 8007416:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800741a:	f380 8809 	msr	PSP, r0
 800741e:	f3bf 8f6f 	isb	sy
 8007422:	f04f 0000 	mov.w	r0, #0
 8007426:	f380 8811 	msr	BASEPRI, r0
 800742a:	f04e 0e0d 	orr.w	lr, lr, #13
 800742e:	4770      	bx	lr

08007430 <pxCurrentTCBConst2>:
 8007430:	200006d4 	.word	0x200006d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007434:	bf00      	nop
 8007436:	bf00      	nop

08007438 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007438:	4806      	ldr	r0, [pc, #24]	; (8007454 <prvPortStartFirstTask+0x1c>)
 800743a:	6800      	ldr	r0, [r0, #0]
 800743c:	6800      	ldr	r0, [r0, #0]
 800743e:	f380 8808 	msr	MSP, r0
 8007442:	b662      	cpsie	i
 8007444:	b661      	cpsie	f
 8007446:	f3bf 8f4f 	dsb	sy
 800744a:	f3bf 8f6f 	isb	sy
 800744e:	df00      	svc	0
 8007450:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007452:	bf00      	nop
 8007454:	e000ed08 	.word	0xe000ed08

08007458 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800745e:	4b32      	ldr	r3, [pc, #200]	; (8007528 <xPortStartScheduler+0xd0>)
 8007460:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	b2db      	uxtb	r3, r3
 8007468:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	22ff      	movs	r2, #255	; 0xff
 800746e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	b2db      	uxtb	r3, r3
 8007476:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007478:	78fb      	ldrb	r3, [r7, #3]
 800747a:	b2db      	uxtb	r3, r3
 800747c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007480:	b2da      	uxtb	r2, r3
 8007482:	4b2a      	ldr	r3, [pc, #168]	; (800752c <xPortStartScheduler+0xd4>)
 8007484:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007486:	4b2a      	ldr	r3, [pc, #168]	; (8007530 <xPortStartScheduler+0xd8>)
 8007488:	2207      	movs	r2, #7
 800748a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800748c:	e009      	b.n	80074a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800748e:	4b28      	ldr	r3, [pc, #160]	; (8007530 <xPortStartScheduler+0xd8>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	3b01      	subs	r3, #1
 8007494:	4a26      	ldr	r2, [pc, #152]	; (8007530 <xPortStartScheduler+0xd8>)
 8007496:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007498:	78fb      	ldrb	r3, [r7, #3]
 800749a:	b2db      	uxtb	r3, r3
 800749c:	005b      	lsls	r3, r3, #1
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074a2:	78fb      	ldrb	r3, [r7, #3]
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074aa:	2b80      	cmp	r3, #128	; 0x80
 80074ac:	d0ef      	beq.n	800748e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80074ae:	4b20      	ldr	r3, [pc, #128]	; (8007530 <xPortStartScheduler+0xd8>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f1c3 0307 	rsb	r3, r3, #7
 80074b6:	2b04      	cmp	r3, #4
 80074b8:	d00a      	beq.n	80074d0 <xPortStartScheduler+0x78>
	__asm volatile
 80074ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074be:	f383 8811 	msr	BASEPRI, r3
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	60bb      	str	r3, [r7, #8]
}
 80074cc:	bf00      	nop
 80074ce:	e7fe      	b.n	80074ce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80074d0:	4b17      	ldr	r3, [pc, #92]	; (8007530 <xPortStartScheduler+0xd8>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	021b      	lsls	r3, r3, #8
 80074d6:	4a16      	ldr	r2, [pc, #88]	; (8007530 <xPortStartScheduler+0xd8>)
 80074d8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80074da:	4b15      	ldr	r3, [pc, #84]	; (8007530 <xPortStartScheduler+0xd8>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80074e2:	4a13      	ldr	r2, [pc, #76]	; (8007530 <xPortStartScheduler+0xd8>)
 80074e4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80074ee:	4b11      	ldr	r3, [pc, #68]	; (8007534 <xPortStartScheduler+0xdc>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a10      	ldr	r2, [pc, #64]	; (8007534 <xPortStartScheduler+0xdc>)
 80074f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80074f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80074fa:	4b0e      	ldr	r3, [pc, #56]	; (8007534 <xPortStartScheduler+0xdc>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a0d      	ldr	r2, [pc, #52]	; (8007534 <xPortStartScheduler+0xdc>)
 8007500:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007504:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007506:	f000 f8b9 	bl	800767c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800750a:	4b0b      	ldr	r3, [pc, #44]	; (8007538 <xPortStartScheduler+0xe0>)
 800750c:	2200      	movs	r2, #0
 800750e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007510:	f7ff ff92 	bl	8007438 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007514:	f7ff f828 	bl	8006568 <vTaskSwitchContext>
	prvTaskExitError();
 8007518:	f7ff ff4e 	bl	80073b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	e000e400 	.word	0xe000e400
 800752c:	200008fc 	.word	0x200008fc
 8007530:	20000900 	.word	0x20000900
 8007534:	e000ed20 	.word	0xe000ed20
 8007538:	2000000c 	.word	0x2000000c

0800753c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
	__asm volatile
 8007542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007546:	f383 8811 	msr	BASEPRI, r3
 800754a:	f3bf 8f6f 	isb	sy
 800754e:	f3bf 8f4f 	dsb	sy
 8007552:	607b      	str	r3, [r7, #4]
}
 8007554:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007556:	4b0f      	ldr	r3, [pc, #60]	; (8007594 <vPortEnterCritical+0x58>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	3301      	adds	r3, #1
 800755c:	4a0d      	ldr	r2, [pc, #52]	; (8007594 <vPortEnterCritical+0x58>)
 800755e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007560:	4b0c      	ldr	r3, [pc, #48]	; (8007594 <vPortEnterCritical+0x58>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d10f      	bne.n	8007588 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007568:	4b0b      	ldr	r3, [pc, #44]	; (8007598 <vPortEnterCritical+0x5c>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00a      	beq.n	8007588 <vPortEnterCritical+0x4c>
	__asm volatile
 8007572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007576:	f383 8811 	msr	BASEPRI, r3
 800757a:	f3bf 8f6f 	isb	sy
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	603b      	str	r3, [r7, #0]
}
 8007584:	bf00      	nop
 8007586:	e7fe      	b.n	8007586 <vPortEnterCritical+0x4a>
	}
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	bc80      	pop	{r7}
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	2000000c 	.word	0x2000000c
 8007598:	e000ed04 	.word	0xe000ed04

0800759c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80075a2:	4b11      	ldr	r3, [pc, #68]	; (80075e8 <vPortExitCritical+0x4c>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10a      	bne.n	80075c0 <vPortExitCritical+0x24>
	__asm volatile
 80075aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ae:	f383 8811 	msr	BASEPRI, r3
 80075b2:	f3bf 8f6f 	isb	sy
 80075b6:	f3bf 8f4f 	dsb	sy
 80075ba:	607b      	str	r3, [r7, #4]
}
 80075bc:	bf00      	nop
 80075be:	e7fe      	b.n	80075be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80075c0:	4b09      	ldr	r3, [pc, #36]	; (80075e8 <vPortExitCritical+0x4c>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	3b01      	subs	r3, #1
 80075c6:	4a08      	ldr	r2, [pc, #32]	; (80075e8 <vPortExitCritical+0x4c>)
 80075c8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80075ca:	4b07      	ldr	r3, [pc, #28]	; (80075e8 <vPortExitCritical+0x4c>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d105      	bne.n	80075de <vPortExitCritical+0x42>
 80075d2:	2300      	movs	r3, #0
 80075d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	f383 8811 	msr	BASEPRI, r3
}
 80075dc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80075de:	bf00      	nop
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bc80      	pop	{r7}
 80075e6:	4770      	bx	lr
 80075e8:	2000000c 	.word	0x2000000c
 80075ec:	00000000 	.word	0x00000000

080075f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80075f0:	f3ef 8009 	mrs	r0, PSP
 80075f4:	f3bf 8f6f 	isb	sy
 80075f8:	4b0d      	ldr	r3, [pc, #52]	; (8007630 <pxCurrentTCBConst>)
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007600:	6010      	str	r0, [r2, #0]
 8007602:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007606:	f04f 0050 	mov.w	r0, #80	; 0x50
 800760a:	f380 8811 	msr	BASEPRI, r0
 800760e:	f7fe ffab 	bl	8006568 <vTaskSwitchContext>
 8007612:	f04f 0000 	mov.w	r0, #0
 8007616:	f380 8811 	msr	BASEPRI, r0
 800761a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800761e:	6819      	ldr	r1, [r3, #0]
 8007620:	6808      	ldr	r0, [r1, #0]
 8007622:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007626:	f380 8809 	msr	PSP, r0
 800762a:	f3bf 8f6f 	isb	sy
 800762e:	4770      	bx	lr

08007630 <pxCurrentTCBConst>:
 8007630:	200006d4 	.word	0x200006d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007634:	bf00      	nop
 8007636:	bf00      	nop

08007638 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
	__asm volatile
 800763e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007642:	f383 8811 	msr	BASEPRI, r3
 8007646:	f3bf 8f6f 	isb	sy
 800764a:	f3bf 8f4f 	dsb	sy
 800764e:	607b      	str	r3, [r7, #4]
}
 8007650:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007652:	f7fe fecb 	bl	80063ec <xTaskIncrementTick>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d003      	beq.n	8007664 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800765c:	4b06      	ldr	r3, [pc, #24]	; (8007678 <SysTick_Handler+0x40>)
 800765e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007662:	601a      	str	r2, [r3, #0]
 8007664:	2300      	movs	r3, #0
 8007666:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	f383 8811 	msr	BASEPRI, r3
}
 800766e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007670:	bf00      	nop
 8007672:	3708      	adds	r7, #8
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	e000ed04 	.word	0xe000ed04

0800767c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800767c:	b480      	push	{r7}
 800767e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007680:	4b0a      	ldr	r3, [pc, #40]	; (80076ac <vPortSetupTimerInterrupt+0x30>)
 8007682:	2200      	movs	r2, #0
 8007684:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007686:	4b0a      	ldr	r3, [pc, #40]	; (80076b0 <vPortSetupTimerInterrupt+0x34>)
 8007688:	2200      	movs	r2, #0
 800768a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800768c:	4b09      	ldr	r3, [pc, #36]	; (80076b4 <vPortSetupTimerInterrupt+0x38>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a09      	ldr	r2, [pc, #36]	; (80076b8 <vPortSetupTimerInterrupt+0x3c>)
 8007692:	fba2 2303 	umull	r2, r3, r2, r3
 8007696:	099b      	lsrs	r3, r3, #6
 8007698:	4a08      	ldr	r2, [pc, #32]	; (80076bc <vPortSetupTimerInterrupt+0x40>)
 800769a:	3b01      	subs	r3, #1
 800769c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800769e:	4b03      	ldr	r3, [pc, #12]	; (80076ac <vPortSetupTimerInterrupt+0x30>)
 80076a0:	2207      	movs	r2, #7
 80076a2:	601a      	str	r2, [r3, #0]
}
 80076a4:	bf00      	nop
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bc80      	pop	{r7}
 80076aa:	4770      	bx	lr
 80076ac:	e000e010 	.word	0xe000e010
 80076b0:	e000e018 	.word	0xe000e018
 80076b4:	20000000 	.word	0x20000000
 80076b8:	10624dd3 	.word	0x10624dd3
 80076bc:	e000e014 	.word	0xe000e014

080076c0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80076c6:	f3ef 8305 	mrs	r3, IPSR
 80076ca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2b0f      	cmp	r3, #15
 80076d0:	d914      	bls.n	80076fc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80076d2:	4a16      	ldr	r2, [pc, #88]	; (800772c <vPortValidateInterruptPriority+0x6c>)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	4413      	add	r3, r2
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80076dc:	4b14      	ldr	r3, [pc, #80]	; (8007730 <vPortValidateInterruptPriority+0x70>)
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	7afa      	ldrb	r2, [r7, #11]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d20a      	bcs.n	80076fc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80076e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ea:	f383 8811 	msr	BASEPRI, r3
 80076ee:	f3bf 8f6f 	isb	sy
 80076f2:	f3bf 8f4f 	dsb	sy
 80076f6:	607b      	str	r3, [r7, #4]
}
 80076f8:	bf00      	nop
 80076fa:	e7fe      	b.n	80076fa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80076fc:	4b0d      	ldr	r3, [pc, #52]	; (8007734 <vPortValidateInterruptPriority+0x74>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007704:	4b0c      	ldr	r3, [pc, #48]	; (8007738 <vPortValidateInterruptPriority+0x78>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	429a      	cmp	r2, r3
 800770a:	d90a      	bls.n	8007722 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800770c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007710:	f383 8811 	msr	BASEPRI, r3
 8007714:	f3bf 8f6f 	isb	sy
 8007718:	f3bf 8f4f 	dsb	sy
 800771c:	603b      	str	r3, [r7, #0]
}
 800771e:	bf00      	nop
 8007720:	e7fe      	b.n	8007720 <vPortValidateInterruptPriority+0x60>
	}
 8007722:	bf00      	nop
 8007724:	3714      	adds	r7, #20
 8007726:	46bd      	mov	sp, r7
 8007728:	bc80      	pop	{r7}
 800772a:	4770      	bx	lr
 800772c:	e000e3f0 	.word	0xe000e3f0
 8007730:	200008fc 	.word	0x200008fc
 8007734:	e000ed0c 	.word	0xe000ed0c
 8007738:	20000900 	.word	0x20000900

0800773c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b08a      	sub	sp, #40	; 0x28
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007744:	2300      	movs	r3, #0
 8007746:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007748:	f7fe fd98 	bl	800627c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800774c:	4b58      	ldr	r3, [pc, #352]	; (80078b0 <pvPortMalloc+0x174>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d101      	bne.n	8007758 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007754:	f000 f910 	bl	8007978 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007758:	4b56      	ldr	r3, [pc, #344]	; (80078b4 <pvPortMalloc+0x178>)
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4013      	ands	r3, r2
 8007760:	2b00      	cmp	r3, #0
 8007762:	f040 808e 	bne.w	8007882 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d01d      	beq.n	80077a8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800776c:	2208      	movs	r2, #8
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4413      	add	r3, r2
 8007772:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f003 0307 	and.w	r3, r3, #7
 800777a:	2b00      	cmp	r3, #0
 800777c:	d014      	beq.n	80077a8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f023 0307 	bic.w	r3, r3, #7
 8007784:	3308      	adds	r3, #8
 8007786:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f003 0307 	and.w	r3, r3, #7
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00a      	beq.n	80077a8 <pvPortMalloc+0x6c>
	__asm volatile
 8007792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007796:	f383 8811 	msr	BASEPRI, r3
 800779a:	f3bf 8f6f 	isb	sy
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	617b      	str	r3, [r7, #20]
}
 80077a4:	bf00      	nop
 80077a6:	e7fe      	b.n	80077a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d069      	beq.n	8007882 <pvPortMalloc+0x146>
 80077ae:	4b42      	ldr	r3, [pc, #264]	; (80078b8 <pvPortMalloc+0x17c>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d864      	bhi.n	8007882 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80077b8:	4b40      	ldr	r3, [pc, #256]	; (80078bc <pvPortMalloc+0x180>)
 80077ba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80077bc:	4b3f      	ldr	r3, [pc, #252]	; (80078bc <pvPortMalloc+0x180>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077c2:	e004      	b.n	80077ce <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80077c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d903      	bls.n	80077e0 <pvPortMalloc+0xa4>
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1f1      	bne.n	80077c4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80077e0:	4b33      	ldr	r3, [pc, #204]	; (80078b0 <pvPortMalloc+0x174>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d04b      	beq.n	8007882 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80077ea:	6a3b      	ldr	r3, [r7, #32]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	2208      	movs	r2, #8
 80077f0:	4413      	add	r3, r2
 80077f2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80077f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	6a3b      	ldr	r3, [r7, #32]
 80077fa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80077fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fe:	685a      	ldr	r2, [r3, #4]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	1ad2      	subs	r2, r2, r3
 8007804:	2308      	movs	r3, #8
 8007806:	005b      	lsls	r3, r3, #1
 8007808:	429a      	cmp	r2, r3
 800780a:	d91f      	bls.n	800784c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800780c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4413      	add	r3, r2
 8007812:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	f003 0307 	and.w	r3, r3, #7
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00a      	beq.n	8007834 <pvPortMalloc+0xf8>
	__asm volatile
 800781e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	613b      	str	r3, [r7, #16]
}
 8007830:	bf00      	nop
 8007832:	e7fe      	b.n	8007832 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007836:	685a      	ldr	r2, [r3, #4]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	1ad2      	subs	r2, r2, r3
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007846:	69b8      	ldr	r0, [r7, #24]
 8007848:	f000 f8f8 	bl	8007a3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800784c:	4b1a      	ldr	r3, [pc, #104]	; (80078b8 <pvPortMalloc+0x17c>)
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	4a18      	ldr	r2, [pc, #96]	; (80078b8 <pvPortMalloc+0x17c>)
 8007858:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800785a:	4b17      	ldr	r3, [pc, #92]	; (80078b8 <pvPortMalloc+0x17c>)
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	4b18      	ldr	r3, [pc, #96]	; (80078c0 <pvPortMalloc+0x184>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	429a      	cmp	r2, r3
 8007864:	d203      	bcs.n	800786e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007866:	4b14      	ldr	r3, [pc, #80]	; (80078b8 <pvPortMalloc+0x17c>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a15      	ldr	r2, [pc, #84]	; (80078c0 <pvPortMalloc+0x184>)
 800786c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800786e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007870:	685a      	ldr	r2, [r3, #4]
 8007872:	4b10      	ldr	r3, [pc, #64]	; (80078b4 <pvPortMalloc+0x178>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	431a      	orrs	r2, r3
 8007878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800787c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787e:	2200      	movs	r2, #0
 8007880:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007882:	f7fe fd09 	bl	8006298 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	f003 0307 	and.w	r3, r3, #7
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00a      	beq.n	80078a6 <pvPortMalloc+0x16a>
	__asm volatile
 8007890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007894:	f383 8811 	msr	BASEPRI, r3
 8007898:	f3bf 8f6f 	isb	sy
 800789c:	f3bf 8f4f 	dsb	sy
 80078a0:	60fb      	str	r3, [r7, #12]
}
 80078a2:	bf00      	nop
 80078a4:	e7fe      	b.n	80078a4 <pvPortMalloc+0x168>
	return pvReturn;
 80078a6:	69fb      	ldr	r3, [r7, #28]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3728      	adds	r7, #40	; 0x28
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	2000190c 	.word	0x2000190c
 80078b4:	20001918 	.word	0x20001918
 80078b8:	20001910 	.word	0x20001910
 80078bc:	20001904 	.word	0x20001904
 80078c0:	20001914 	.word	0x20001914

080078c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b086      	sub	sp, #24
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d048      	beq.n	8007968 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80078d6:	2308      	movs	r3, #8
 80078d8:	425b      	negs	r3, r3
 80078da:	697a      	ldr	r2, [r7, #20]
 80078dc:	4413      	add	r3, r2
 80078de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	685a      	ldr	r2, [r3, #4]
 80078e8:	4b21      	ldr	r3, [pc, #132]	; (8007970 <vPortFree+0xac>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4013      	ands	r3, r2
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d10a      	bne.n	8007908 <vPortFree+0x44>
	__asm volatile
 80078f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f6:	f383 8811 	msr	BASEPRI, r3
 80078fa:	f3bf 8f6f 	isb	sy
 80078fe:	f3bf 8f4f 	dsb	sy
 8007902:	60fb      	str	r3, [r7, #12]
}
 8007904:	bf00      	nop
 8007906:	e7fe      	b.n	8007906 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00a      	beq.n	8007926 <vPortFree+0x62>
	__asm volatile
 8007910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007914:	f383 8811 	msr	BASEPRI, r3
 8007918:	f3bf 8f6f 	isb	sy
 800791c:	f3bf 8f4f 	dsb	sy
 8007920:	60bb      	str	r3, [r7, #8]
}
 8007922:	bf00      	nop
 8007924:	e7fe      	b.n	8007924 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	685a      	ldr	r2, [r3, #4]
 800792a:	4b11      	ldr	r3, [pc, #68]	; (8007970 <vPortFree+0xac>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4013      	ands	r3, r2
 8007930:	2b00      	cmp	r3, #0
 8007932:	d019      	beq.n	8007968 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d115      	bne.n	8007968 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	685a      	ldr	r2, [r3, #4]
 8007940:	4b0b      	ldr	r3, [pc, #44]	; (8007970 <vPortFree+0xac>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	43db      	mvns	r3, r3
 8007946:	401a      	ands	r2, r3
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800794c:	f7fe fc96 	bl	800627c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	685a      	ldr	r2, [r3, #4]
 8007954:	4b07      	ldr	r3, [pc, #28]	; (8007974 <vPortFree+0xb0>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4413      	add	r3, r2
 800795a:	4a06      	ldr	r2, [pc, #24]	; (8007974 <vPortFree+0xb0>)
 800795c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800795e:	6938      	ldr	r0, [r7, #16]
 8007960:	f000 f86c 	bl	8007a3c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007964:	f7fe fc98 	bl	8006298 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007968:	bf00      	nop
 800796a:	3718      	adds	r7, #24
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}
 8007970:	20001918 	.word	0x20001918
 8007974:	20001910 	.word	0x20001910

08007978 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800797e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007982:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007984:	4b27      	ldr	r3, [pc, #156]	; (8007a24 <prvHeapInit+0xac>)
 8007986:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f003 0307 	and.w	r3, r3, #7
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00c      	beq.n	80079ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	3307      	adds	r3, #7
 8007996:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f023 0307 	bic.w	r3, r3, #7
 800799e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	4a1f      	ldr	r2, [pc, #124]	; (8007a24 <prvHeapInit+0xac>)
 80079a8:	4413      	add	r3, r2
 80079aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80079b0:	4a1d      	ldr	r2, [pc, #116]	; (8007a28 <prvHeapInit+0xb0>)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80079b6:	4b1c      	ldr	r3, [pc, #112]	; (8007a28 <prvHeapInit+0xb0>)
 80079b8:	2200      	movs	r2, #0
 80079ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	4413      	add	r3, r2
 80079c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80079c4:	2208      	movs	r2, #8
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	1a9b      	subs	r3, r3, r2
 80079ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f023 0307 	bic.w	r3, r3, #7
 80079d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	4a15      	ldr	r2, [pc, #84]	; (8007a2c <prvHeapInit+0xb4>)
 80079d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80079da:	4b14      	ldr	r3, [pc, #80]	; (8007a2c <prvHeapInit+0xb4>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2200      	movs	r2, #0
 80079e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80079e2:	4b12      	ldr	r3, [pc, #72]	; (8007a2c <prvHeapInit+0xb4>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2200      	movs	r2, #0
 80079e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	1ad2      	subs	r2, r2, r3
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80079f8:	4b0c      	ldr	r3, [pc, #48]	; (8007a2c <prvHeapInit+0xb4>)
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	4a0a      	ldr	r2, [pc, #40]	; (8007a30 <prvHeapInit+0xb8>)
 8007a06:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	4a09      	ldr	r2, [pc, #36]	; (8007a34 <prvHeapInit+0xbc>)
 8007a0e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a10:	4b09      	ldr	r3, [pc, #36]	; (8007a38 <prvHeapInit+0xc0>)
 8007a12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007a16:	601a      	str	r2, [r3, #0]
}
 8007a18:	bf00      	nop
 8007a1a:	3714      	adds	r7, #20
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bc80      	pop	{r7}
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	20000904 	.word	0x20000904
 8007a28:	20001904 	.word	0x20001904
 8007a2c:	2000190c 	.word	0x2000190c
 8007a30:	20001914 	.word	0x20001914
 8007a34:	20001910 	.word	0x20001910
 8007a38:	20001918 	.word	0x20001918

08007a3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a44:	4b27      	ldr	r3, [pc, #156]	; (8007ae4 <prvInsertBlockIntoFreeList+0xa8>)
 8007a46:	60fb      	str	r3, [r7, #12]
 8007a48:	e002      	b.n	8007a50 <prvInsertBlockIntoFreeList+0x14>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	60fb      	str	r3, [r7, #12]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d8f7      	bhi.n	8007a4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	68ba      	ldr	r2, [r7, #8]
 8007a64:	4413      	add	r3, r2
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d108      	bne.n	8007a7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	685a      	ldr	r2, [r3, #4]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	441a      	add	r2, r3
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	68ba      	ldr	r2, [r7, #8]
 8007a88:	441a      	add	r2, r3
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d118      	bne.n	8007ac4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	4b14      	ldr	r3, [pc, #80]	; (8007ae8 <prvInsertBlockIntoFreeList+0xac>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d00d      	beq.n	8007aba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	685a      	ldr	r2, [r3, #4]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	441a      	add	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	601a      	str	r2, [r3, #0]
 8007ab8:	e008      	b.n	8007acc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007aba:	4b0b      	ldr	r3, [pc, #44]	; (8007ae8 <prvInsertBlockIntoFreeList+0xac>)
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	601a      	str	r2, [r3, #0]
 8007ac2:	e003      	b.n	8007acc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d002      	beq.n	8007ada <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ada:	bf00      	nop
 8007adc:	3714      	adds	r7, #20
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bc80      	pop	{r7}
 8007ae2:	4770      	bx	lr
 8007ae4:	20001904 	.word	0x20001904
 8007ae8:	2000190c 	.word	0x2000190c

08007aec <__libc_init_array>:
 8007aec:	b570      	push	{r4, r5, r6, lr}
 8007aee:	2600      	movs	r6, #0
 8007af0:	4d0c      	ldr	r5, [pc, #48]	; (8007b24 <__libc_init_array+0x38>)
 8007af2:	4c0d      	ldr	r4, [pc, #52]	; (8007b28 <__libc_init_array+0x3c>)
 8007af4:	1b64      	subs	r4, r4, r5
 8007af6:	10a4      	asrs	r4, r4, #2
 8007af8:	42a6      	cmp	r6, r4
 8007afa:	d109      	bne.n	8007b10 <__libc_init_array+0x24>
 8007afc:	f000 f830 	bl	8007b60 <_init>
 8007b00:	2600      	movs	r6, #0
 8007b02:	4d0a      	ldr	r5, [pc, #40]	; (8007b2c <__libc_init_array+0x40>)
 8007b04:	4c0a      	ldr	r4, [pc, #40]	; (8007b30 <__libc_init_array+0x44>)
 8007b06:	1b64      	subs	r4, r4, r5
 8007b08:	10a4      	asrs	r4, r4, #2
 8007b0a:	42a6      	cmp	r6, r4
 8007b0c:	d105      	bne.n	8007b1a <__libc_init_array+0x2e>
 8007b0e:	bd70      	pop	{r4, r5, r6, pc}
 8007b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b14:	4798      	blx	r3
 8007b16:	3601      	adds	r6, #1
 8007b18:	e7ee      	b.n	8007af8 <__libc_init_array+0xc>
 8007b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b1e:	4798      	blx	r3
 8007b20:	3601      	adds	r6, #1
 8007b22:	e7f2      	b.n	8007b0a <__libc_init_array+0x1e>
 8007b24:	08007c1c 	.word	0x08007c1c
 8007b28:	08007c1c 	.word	0x08007c1c
 8007b2c:	08007c1c 	.word	0x08007c1c
 8007b30:	08007c20 	.word	0x08007c20

08007b34 <memcpy>:
 8007b34:	440a      	add	r2, r1
 8007b36:	4291      	cmp	r1, r2
 8007b38:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b3c:	d100      	bne.n	8007b40 <memcpy+0xc>
 8007b3e:	4770      	bx	lr
 8007b40:	b510      	push	{r4, lr}
 8007b42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b46:	4291      	cmp	r1, r2
 8007b48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b4c:	d1f9      	bne.n	8007b42 <memcpy+0xe>
 8007b4e:	bd10      	pop	{r4, pc}

08007b50 <memset>:
 8007b50:	4603      	mov	r3, r0
 8007b52:	4402      	add	r2, r0
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d100      	bne.n	8007b5a <memset+0xa>
 8007b58:	4770      	bx	lr
 8007b5a:	f803 1b01 	strb.w	r1, [r3], #1
 8007b5e:	e7f9      	b.n	8007b54 <memset+0x4>

08007b60 <_init>:
 8007b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b62:	bf00      	nop
 8007b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b66:	bc08      	pop	{r3}
 8007b68:	469e      	mov	lr, r3
 8007b6a:	4770      	bx	lr

08007b6c <_fini>:
 8007b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b6e:	bf00      	nop
 8007b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b72:	bc08      	pop	{r3}
 8007b74:	469e      	mov	lr, r3
 8007b76:	4770      	bx	lr
