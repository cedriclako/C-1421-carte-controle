
HELLO_WORLD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef2c  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  0800f120  0800f120  0001f120  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f648  0800f648  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f648  0800f648  0001f648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f650  0800f650  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f650  0800f650  0001f650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f654  0800f654  0001f654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  0800f658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002fd4  200000c0  0800f718  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003094  0800f718  00023094  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026cfa  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005283  00000000  00000000  00046de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b38  00000000  00000000  0004c068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001938  00000000  00000000  0004dba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024d51  00000000  00000000  0004f4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020ef5  00000000  00000000  00074229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7579  00000000  00000000  0009511e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015c697  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d7c  00000000  00000000  0015c6ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200000c0 	.word	0x200000c0
 800020c:	00000000 	.word	0x00000000
 8000210:	0800f104 	.word	0x0800f104

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200000c4 	.word	0x200000c4
 800022c:	0800f104 	.word	0x0800f104

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2f>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b10:	bf24      	itt	cs
 8000b12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1a:	d90d      	bls.n	8000b38 <__aeabi_d2f+0x30>
 8000b1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b3c:	d121      	bne.n	8000b82 <__aeabi_d2f+0x7a>
 8000b3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b42:	bfbc      	itt	lt
 8000b44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	4770      	bxlt	lr
 8000b4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b52:	f1c2 0218 	rsb	r2, r2, #24
 8000b56:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b62:	bf18      	it	ne
 8000b64:	f040 0001 	orrne.w	r0, r0, #1
 8000b68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b74:	ea40 000c 	orr.w	r0, r0, ip
 8000b78:	fa23 f302 	lsr.w	r3, r3, r2
 8000b7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b80:	e7cc      	b.n	8000b1c <__aeabi_d2f+0x14>
 8000b82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b86:	d107      	bne.n	8000b98 <__aeabi_d2f+0x90>
 8000b88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b8c:	bf1e      	ittt	ne
 8000b8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b96:	4770      	bxne	lr
 8000b98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_frsub>:
 8000ba8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bac:	e002      	b.n	8000bb4 <__addsf3>
 8000bae:	bf00      	nop

08000bb0 <__aeabi_fsub>:
 8000bb0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bb4 <__addsf3>:
 8000bb4:	0042      	lsls	r2, r0, #1
 8000bb6:	bf1f      	itttt	ne
 8000bb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bbc:	ea92 0f03 	teqne	r2, r3
 8000bc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc8:	d06a      	beq.n	8000ca0 <__addsf3+0xec>
 8000bca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bd2:	bfc1      	itttt	gt
 8000bd4:	18d2      	addgt	r2, r2, r3
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	4048      	eorgt	r0, r1
 8000bda:	4041      	eorgt	r1, r0
 8000bdc:	bfb8      	it	lt
 8000bde:	425b      	neglt	r3, r3
 8000be0:	2b19      	cmp	r3, #25
 8000be2:	bf88      	it	hi
 8000be4:	4770      	bxhi	lr
 8000be6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bfa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bfe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c02:	bf18      	it	ne
 8000c04:	4249      	negne	r1, r1
 8000c06:	ea92 0f03 	teq	r2, r3
 8000c0a:	d03f      	beq.n	8000c8c <__addsf3+0xd8>
 8000c0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c10:	fa41 fc03 	asr.w	ip, r1, r3
 8000c14:	eb10 000c 	adds.w	r0, r0, ip
 8000c18:	f1c3 0320 	rsb	r3, r3, #32
 8000c1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c24:	d502      	bpl.n	8000c2c <__addsf3+0x78>
 8000c26:	4249      	negs	r1, r1
 8000c28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c30:	d313      	bcc.n	8000c5a <__addsf3+0xa6>
 8000c32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c36:	d306      	bcc.n	8000c46 <__addsf3+0x92>
 8000c38:	0840      	lsrs	r0, r0, #1
 8000c3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3e:	f102 0201 	add.w	r2, r2, #1
 8000c42:	2afe      	cmp	r2, #254	; 0xfe
 8000c44:	d251      	bcs.n	8000cea <__addsf3+0x136>
 8000c46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4e:	bf08      	it	eq
 8000c50:	f020 0001 	biceq.w	r0, r0, #1
 8000c54:	ea40 0003 	orr.w	r0, r0, r3
 8000c58:	4770      	bx	lr
 8000c5a:	0049      	lsls	r1, r1, #1
 8000c5c:	eb40 0000 	adc.w	r0, r0, r0
 8000c60:	3a01      	subs	r2, #1
 8000c62:	bf28      	it	cs
 8000c64:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c68:	d2ed      	bcs.n	8000c46 <__addsf3+0x92>
 8000c6a:	fab0 fc80 	clz	ip, r0
 8000c6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c72:	ebb2 020c 	subs.w	r2, r2, ip
 8000c76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c7a:	bfaa      	itet	ge
 8000c7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c80:	4252      	neglt	r2, r2
 8000c82:	4318      	orrge	r0, r3
 8000c84:	bfbc      	itt	lt
 8000c86:	40d0      	lsrlt	r0, r2
 8000c88:	4318      	orrlt	r0, r3
 8000c8a:	4770      	bx	lr
 8000c8c:	f092 0f00 	teq	r2, #0
 8000c90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c94:	bf06      	itte	eq
 8000c96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c9a:	3201      	addeq	r2, #1
 8000c9c:	3b01      	subne	r3, #1
 8000c9e:	e7b5      	b.n	8000c0c <__addsf3+0x58>
 8000ca0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca8:	bf18      	it	ne
 8000caa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cae:	d021      	beq.n	8000cf4 <__addsf3+0x140>
 8000cb0:	ea92 0f03 	teq	r2, r3
 8000cb4:	d004      	beq.n	8000cc0 <__addsf3+0x10c>
 8000cb6:	f092 0f00 	teq	r2, #0
 8000cba:	bf08      	it	eq
 8000cbc:	4608      	moveq	r0, r1
 8000cbe:	4770      	bx	lr
 8000cc0:	ea90 0f01 	teq	r0, r1
 8000cc4:	bf1c      	itt	ne
 8000cc6:	2000      	movne	r0, #0
 8000cc8:	4770      	bxne	lr
 8000cca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cce:	d104      	bne.n	8000cda <__addsf3+0x126>
 8000cd0:	0040      	lsls	r0, r0, #1
 8000cd2:	bf28      	it	cs
 8000cd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd8:	4770      	bx	lr
 8000cda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cde:	bf3c      	itt	cc
 8000ce0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bxcc	lr
 8000ce6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf2:	4770      	bx	lr
 8000cf4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf8:	bf16      	itet	ne
 8000cfa:	4608      	movne	r0, r1
 8000cfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d00:	4601      	movne	r1, r0
 8000d02:	0242      	lsls	r2, r0, #9
 8000d04:	bf06      	itte	eq
 8000d06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d0a:	ea90 0f01 	teqeq	r0, r1
 8000d0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d12:	4770      	bx	lr

08000d14 <__aeabi_ui2f>:
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e004      	b.n	8000d24 <__aeabi_i2f+0x8>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_i2f>:
 8000d1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d20:	bf48      	it	mi
 8000d22:	4240      	negmi	r0, r0
 8000d24:	ea5f 0c00 	movs.w	ip, r0
 8000d28:	bf08      	it	eq
 8000d2a:	4770      	bxeq	lr
 8000d2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d30:	4601      	mov	r1, r0
 8000d32:	f04f 0000 	mov.w	r0, #0
 8000d36:	e01c      	b.n	8000d72 <__aeabi_l2f+0x2a>

08000d38 <__aeabi_ul2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e00a      	b.n	8000d5c <__aeabi_l2f+0x14>
 8000d46:	bf00      	nop

08000d48 <__aeabi_l2f>:
 8000d48:	ea50 0201 	orrs.w	r2, r0, r1
 8000d4c:	bf08      	it	eq
 8000d4e:	4770      	bxeq	lr
 8000d50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d54:	d502      	bpl.n	8000d5c <__aeabi_l2f+0x14>
 8000d56:	4240      	negs	r0, r0
 8000d58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5c:	ea5f 0c01 	movs.w	ip, r1
 8000d60:	bf02      	ittt	eq
 8000d62:	4684      	moveq	ip, r0
 8000d64:	4601      	moveq	r1, r0
 8000d66:	2000      	moveq	r0, #0
 8000d68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d6c:	bf08      	it	eq
 8000d6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d76:	fabc f28c 	clz	r2, ip
 8000d7a:	3a08      	subs	r2, #8
 8000d7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d80:	db10      	blt.n	8000da4 <__aeabi_l2f+0x5c>
 8000d82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d86:	4463      	add	r3, ip
 8000d88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d94:	fa20 f202 	lsr.w	r2, r0, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f102 0220 	add.w	r2, r2, #32
 8000da8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dac:	f1c2 0220 	rsb	r2, r2, #32
 8000db0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db4:	fa21 f202 	lsr.w	r2, r1, r2
 8000db8:	eb43 0002 	adc.w	r0, r3, r2
 8000dbc:	bf08      	it	eq
 8000dbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc2:	4770      	bx	lr

08000dc4 <__aeabi_fmul>:
 8000dc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dcc:	bf1e      	ittt	ne
 8000dce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dd2:	ea92 0f0c 	teqne	r2, ip
 8000dd6:	ea93 0f0c 	teqne	r3, ip
 8000dda:	d06f      	beq.n	8000ebc <__aeabi_fmul+0xf8>
 8000ddc:	441a      	add	r2, r3
 8000dde:	ea80 0c01 	eor.w	ip, r0, r1
 8000de2:	0240      	lsls	r0, r0, #9
 8000de4:	bf18      	it	ne
 8000de6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dea:	d01e      	beq.n	8000e2a <__aeabi_fmul+0x66>
 8000dec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000df0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000df4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dfc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e00:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e04:	bf3e      	ittt	cc
 8000e06:	0049      	lslcc	r1, r1, #1
 8000e08:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e0c:	005b      	lslcc	r3, r3, #1
 8000e0e:	ea40 0001 	orr.w	r0, r0, r1
 8000e12:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e16:	2afd      	cmp	r2, #253	; 0xfd
 8000e18:	d81d      	bhi.n	8000e56 <__aeabi_fmul+0x92>
 8000e1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e22:	bf08      	it	eq
 8000e24:	f020 0001 	biceq.w	r0, r0, #1
 8000e28:	4770      	bx	lr
 8000e2a:	f090 0f00 	teq	r0, #0
 8000e2e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e32:	bf08      	it	eq
 8000e34:	0249      	lsleq	r1, r1, #9
 8000e36:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e3a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e3e:	3a7f      	subs	r2, #127	; 0x7f
 8000e40:	bfc2      	ittt	gt
 8000e42:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e46:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e4a:	4770      	bxgt	lr
 8000e4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	3a01      	subs	r2, #1
 8000e56:	dc5d      	bgt.n	8000f14 <__aeabi_fmul+0x150>
 8000e58:	f112 0f19 	cmn.w	r2, #25
 8000e5c:	bfdc      	itt	le
 8000e5e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e62:	4770      	bxle	lr
 8000e64:	f1c2 0200 	rsb	r2, r2, #0
 8000e68:	0041      	lsls	r1, r0, #1
 8000e6a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e6e:	f1c2 0220 	rsb	r2, r2, #32
 8000e72:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e76:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e7a:	f140 0000 	adc.w	r0, r0, #0
 8000e7e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e82:	bf08      	it	eq
 8000e84:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e88:	4770      	bx	lr
 8000e8a:	f092 0f00 	teq	r2, #0
 8000e8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e92:	bf02      	ittt	eq
 8000e94:	0040      	lsleq	r0, r0, #1
 8000e96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e9a:	3a01      	subeq	r2, #1
 8000e9c:	d0f9      	beq.n	8000e92 <__aeabi_fmul+0xce>
 8000e9e:	ea40 000c 	orr.w	r0, r0, ip
 8000ea2:	f093 0f00 	teq	r3, #0
 8000ea6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	bf02      	ittt	eq
 8000eac:	0049      	lsleq	r1, r1, #1
 8000eae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eb2:	3b01      	subeq	r3, #1
 8000eb4:	d0f9      	beq.n	8000eaa <__aeabi_fmul+0xe6>
 8000eb6:	ea41 010c 	orr.w	r1, r1, ip
 8000eba:	e78f      	b.n	8000ddc <__aeabi_fmul+0x18>
 8000ebc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ec0:	ea92 0f0c 	teq	r2, ip
 8000ec4:	bf18      	it	ne
 8000ec6:	ea93 0f0c 	teqne	r3, ip
 8000eca:	d00a      	beq.n	8000ee2 <__aeabi_fmul+0x11e>
 8000ecc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ed0:	bf18      	it	ne
 8000ed2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ed6:	d1d8      	bne.n	8000e8a <__aeabi_fmul+0xc6>
 8000ed8:	ea80 0001 	eor.w	r0, r0, r1
 8000edc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ee0:	4770      	bx	lr
 8000ee2:	f090 0f00 	teq	r0, #0
 8000ee6:	bf17      	itett	ne
 8000ee8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eec:	4608      	moveq	r0, r1
 8000eee:	f091 0f00 	teqne	r1, #0
 8000ef2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ef6:	d014      	beq.n	8000f22 <__aeabi_fmul+0x15e>
 8000ef8:	ea92 0f0c 	teq	r2, ip
 8000efc:	d101      	bne.n	8000f02 <__aeabi_fmul+0x13e>
 8000efe:	0242      	lsls	r2, r0, #9
 8000f00:	d10f      	bne.n	8000f22 <__aeabi_fmul+0x15e>
 8000f02:	ea93 0f0c 	teq	r3, ip
 8000f06:	d103      	bne.n	8000f10 <__aeabi_fmul+0x14c>
 8000f08:	024b      	lsls	r3, r1, #9
 8000f0a:	bf18      	it	ne
 8000f0c:	4608      	movne	r0, r1
 8000f0e:	d108      	bne.n	8000f22 <__aeabi_fmul+0x15e>
 8000f10:	ea80 0001 	eor.w	r0, r0, r1
 8000f14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f20:	4770      	bx	lr
 8000f22:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f26:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f2a:	4770      	bx	lr

08000f2c <__aeabi_fdiv>:
 8000f2c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f30:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f34:	bf1e      	ittt	ne
 8000f36:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f3a:	ea92 0f0c 	teqne	r2, ip
 8000f3e:	ea93 0f0c 	teqne	r3, ip
 8000f42:	d069      	beq.n	8001018 <__aeabi_fdiv+0xec>
 8000f44:	eba2 0203 	sub.w	r2, r2, r3
 8000f48:	ea80 0c01 	eor.w	ip, r0, r1
 8000f4c:	0249      	lsls	r1, r1, #9
 8000f4e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f52:	d037      	beq.n	8000fc4 <__aeabi_fdiv+0x98>
 8000f54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f58:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f5c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f60:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f64:	428b      	cmp	r3, r1
 8000f66:	bf38      	it	cc
 8000f68:	005b      	lslcc	r3, r3, #1
 8000f6a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f6e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f72:	428b      	cmp	r3, r1
 8000f74:	bf24      	itt	cs
 8000f76:	1a5b      	subcs	r3, r3, r1
 8000f78:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f7c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f80:	bf24      	itt	cs
 8000f82:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f86:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f8a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f8e:	bf24      	itt	cs
 8000f90:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f94:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f98:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f9c:	bf24      	itt	cs
 8000f9e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fa2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fa6:	011b      	lsls	r3, r3, #4
 8000fa8:	bf18      	it	ne
 8000faa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fae:	d1e0      	bne.n	8000f72 <__aeabi_fdiv+0x46>
 8000fb0:	2afd      	cmp	r2, #253	; 0xfd
 8000fb2:	f63f af50 	bhi.w	8000e56 <__aeabi_fmul+0x92>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fbc:	bf08      	it	eq
 8000fbe:	f020 0001 	biceq.w	r0, r0, #1
 8000fc2:	4770      	bx	lr
 8000fc4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fc8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fcc:	327f      	adds	r2, #127	; 0x7f
 8000fce:	bfc2      	ittt	gt
 8000fd0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fd4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd8:	4770      	bxgt	lr
 8000fda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fde:	f04f 0300 	mov.w	r3, #0
 8000fe2:	3a01      	subs	r2, #1
 8000fe4:	e737      	b.n	8000e56 <__aeabi_fmul+0x92>
 8000fe6:	f092 0f00 	teq	r2, #0
 8000fea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fee:	bf02      	ittt	eq
 8000ff0:	0040      	lsleq	r0, r0, #1
 8000ff2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ff6:	3a01      	subeq	r2, #1
 8000ff8:	d0f9      	beq.n	8000fee <__aeabi_fdiv+0xc2>
 8000ffa:	ea40 000c 	orr.w	r0, r0, ip
 8000ffe:	f093 0f00 	teq	r3, #0
 8001002:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001006:	bf02      	ittt	eq
 8001008:	0049      	lsleq	r1, r1, #1
 800100a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800100e:	3b01      	subeq	r3, #1
 8001010:	d0f9      	beq.n	8001006 <__aeabi_fdiv+0xda>
 8001012:	ea41 010c 	orr.w	r1, r1, ip
 8001016:	e795      	b.n	8000f44 <__aeabi_fdiv+0x18>
 8001018:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800101c:	ea92 0f0c 	teq	r2, ip
 8001020:	d108      	bne.n	8001034 <__aeabi_fdiv+0x108>
 8001022:	0242      	lsls	r2, r0, #9
 8001024:	f47f af7d 	bne.w	8000f22 <__aeabi_fmul+0x15e>
 8001028:	ea93 0f0c 	teq	r3, ip
 800102c:	f47f af70 	bne.w	8000f10 <__aeabi_fmul+0x14c>
 8001030:	4608      	mov	r0, r1
 8001032:	e776      	b.n	8000f22 <__aeabi_fmul+0x15e>
 8001034:	ea93 0f0c 	teq	r3, ip
 8001038:	d104      	bne.n	8001044 <__aeabi_fdiv+0x118>
 800103a:	024b      	lsls	r3, r1, #9
 800103c:	f43f af4c 	beq.w	8000ed8 <__aeabi_fmul+0x114>
 8001040:	4608      	mov	r0, r1
 8001042:	e76e      	b.n	8000f22 <__aeabi_fmul+0x15e>
 8001044:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001048:	bf18      	it	ne
 800104a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800104e:	d1ca      	bne.n	8000fe6 <__aeabi_fdiv+0xba>
 8001050:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001054:	f47f af5c 	bne.w	8000f10 <__aeabi_fmul+0x14c>
 8001058:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800105c:	f47f af3c 	bne.w	8000ed8 <__aeabi_fmul+0x114>
 8001060:	e75f      	b.n	8000f22 <__aeabi_fmul+0x15e>
 8001062:	bf00      	nop

08001064 <__gesf2>:
 8001064:	f04f 3cff 	mov.w	ip, #4294967295
 8001068:	e006      	b.n	8001078 <__cmpsf2+0x4>
 800106a:	bf00      	nop

0800106c <__lesf2>:
 800106c:	f04f 0c01 	mov.w	ip, #1
 8001070:	e002      	b.n	8001078 <__cmpsf2+0x4>
 8001072:	bf00      	nop

08001074 <__cmpsf2>:
 8001074:	f04f 0c01 	mov.w	ip, #1
 8001078:	f84d cd04 	str.w	ip, [sp, #-4]!
 800107c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001080:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001084:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001088:	bf18      	it	ne
 800108a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800108e:	d011      	beq.n	80010b4 <__cmpsf2+0x40>
 8001090:	b001      	add	sp, #4
 8001092:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001096:	bf18      	it	ne
 8001098:	ea90 0f01 	teqne	r0, r1
 800109c:	bf58      	it	pl
 800109e:	ebb2 0003 	subspl.w	r0, r2, r3
 80010a2:	bf88      	it	hi
 80010a4:	17c8      	asrhi	r0, r1, #31
 80010a6:	bf38      	it	cc
 80010a8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010ac:	bf18      	it	ne
 80010ae:	f040 0001 	orrne.w	r0, r0, #1
 80010b2:	4770      	bx	lr
 80010b4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010b8:	d102      	bne.n	80010c0 <__cmpsf2+0x4c>
 80010ba:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010be:	d105      	bne.n	80010cc <__cmpsf2+0x58>
 80010c0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010c4:	d1e4      	bne.n	8001090 <__cmpsf2+0x1c>
 80010c6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ca:	d0e1      	beq.n	8001090 <__cmpsf2+0x1c>
 80010cc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop

080010d4 <__aeabi_cfrcmple>:
 80010d4:	4684      	mov	ip, r0
 80010d6:	4608      	mov	r0, r1
 80010d8:	4661      	mov	r1, ip
 80010da:	e7ff      	b.n	80010dc <__aeabi_cfcmpeq>

080010dc <__aeabi_cfcmpeq>:
 80010dc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010de:	f7ff ffc9 	bl	8001074 <__cmpsf2>
 80010e2:	2800      	cmp	r0, #0
 80010e4:	bf48      	it	mi
 80010e6:	f110 0f00 	cmnmi.w	r0, #0
 80010ea:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ec <__aeabi_fcmpeq>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff fff4 	bl	80010dc <__aeabi_cfcmpeq>
 80010f4:	bf0c      	ite	eq
 80010f6:	2001      	moveq	r0, #1
 80010f8:	2000      	movne	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_fcmplt>:
 8001100:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001104:	f7ff ffea 	bl	80010dc <__aeabi_cfcmpeq>
 8001108:	bf34      	ite	cc
 800110a:	2001      	movcc	r0, #1
 800110c:	2000      	movcs	r0, #0
 800110e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001112:	bf00      	nop

08001114 <__aeabi_fcmple>:
 8001114:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001118:	f7ff ffe0 	bl	80010dc <__aeabi_cfcmpeq>
 800111c:	bf94      	ite	ls
 800111e:	2001      	movls	r0, #1
 8001120:	2000      	movhi	r0, #0
 8001122:	f85d fb08 	ldr.w	pc, [sp], #8
 8001126:	bf00      	nop

08001128 <__aeabi_fcmpge>:
 8001128:	f84d ed08 	str.w	lr, [sp, #-8]!
 800112c:	f7ff ffd2 	bl	80010d4 <__aeabi_cfrcmple>
 8001130:	bf94      	ite	ls
 8001132:	2001      	movls	r0, #1
 8001134:	2000      	movhi	r0, #0
 8001136:	f85d fb08 	ldr.w	pc, [sp], #8
 800113a:	bf00      	nop

0800113c <__aeabi_fcmpgt>:
 800113c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001140:	f7ff ffc8 	bl	80010d4 <__aeabi_cfrcmple>
 8001144:	bf34      	ite	cc
 8001146:	2001      	movcc	r0, #1
 8001148:	2000      	movcs	r0, #0
 800114a:	f85d fb08 	ldr.w	pc, [sp], #8
 800114e:	bf00      	nop

08001150 <__aeabi_f2iz>:
 8001150:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001154:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001158:	d30f      	bcc.n	800117a <__aeabi_f2iz+0x2a>
 800115a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800115e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001162:	d90d      	bls.n	8001180 <__aeabi_f2iz+0x30>
 8001164:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001168:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800116c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001170:	fa23 f002 	lsr.w	r0, r3, r2
 8001174:	bf18      	it	ne
 8001176:	4240      	negne	r0, r0
 8001178:	4770      	bx	lr
 800117a:	f04f 0000 	mov.w	r0, #0
 800117e:	4770      	bx	lr
 8001180:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001184:	d101      	bne.n	800118a <__aeabi_f2iz+0x3a>
 8001186:	0242      	lsls	r2, r0, #9
 8001188:	d105      	bne.n	8001196 <__aeabi_f2iz+0x46>
 800118a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800118e:	bf08      	it	eq
 8001190:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001194:	4770      	bx	lr
 8001196:	f04f 0000 	mov.w	r0, #0
 800119a:	4770      	bx	lr

0800119c <__aeabi_f2uiz>:
 800119c:	0042      	lsls	r2, r0, #1
 800119e:	d20e      	bcs.n	80011be <__aeabi_f2uiz+0x22>
 80011a0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011a4:	d30b      	bcc.n	80011be <__aeabi_f2uiz+0x22>
 80011a6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011aa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011ae:	d409      	bmi.n	80011c4 <__aeabi_f2uiz+0x28>
 80011b0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011b8:	fa23 f002 	lsr.w	r0, r3, r2
 80011bc:	4770      	bx	lr
 80011be:	f04f 0000 	mov.w	r0, #0
 80011c2:	4770      	bx	lr
 80011c4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011c8:	d101      	bne.n	80011ce <__aeabi_f2uiz+0x32>
 80011ca:	0242      	lsls	r2, r0, #9
 80011cc:	d102      	bne.n	80011d4 <__aeabi_f2uiz+0x38>
 80011ce:	f04f 30ff 	mov.w	r0, #4294967295
 80011d2:	4770      	bx	lr
 80011d4:	f04f 0000 	mov.w	r0, #0
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop

080011dc <__aeabi_uldivmod>:
 80011dc:	b953      	cbnz	r3, 80011f4 <__aeabi_uldivmod+0x18>
 80011de:	b94a      	cbnz	r2, 80011f4 <__aeabi_uldivmod+0x18>
 80011e0:	2900      	cmp	r1, #0
 80011e2:	bf08      	it	eq
 80011e4:	2800      	cmpeq	r0, #0
 80011e6:	bf1c      	itt	ne
 80011e8:	f04f 31ff 	movne.w	r1, #4294967295
 80011ec:	f04f 30ff 	movne.w	r0, #4294967295
 80011f0:	f000 b96e 	b.w	80014d0 <__aeabi_idiv0>
 80011f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80011f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011fc:	f000 f806 	bl	800120c <__udivmoddi4>
 8001200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001208:	b004      	add	sp, #16
 800120a:	4770      	bx	lr

0800120c <__udivmoddi4>:
 800120c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001210:	9e08      	ldr	r6, [sp, #32]
 8001212:	460d      	mov	r5, r1
 8001214:	4604      	mov	r4, r0
 8001216:	468e      	mov	lr, r1
 8001218:	2b00      	cmp	r3, #0
 800121a:	f040 8083 	bne.w	8001324 <__udivmoddi4+0x118>
 800121e:	428a      	cmp	r2, r1
 8001220:	4617      	mov	r7, r2
 8001222:	d947      	bls.n	80012b4 <__udivmoddi4+0xa8>
 8001224:	fab2 f382 	clz	r3, r2
 8001228:	b14b      	cbz	r3, 800123e <__udivmoddi4+0x32>
 800122a:	f1c3 0120 	rsb	r1, r3, #32
 800122e:	fa05 fe03 	lsl.w	lr, r5, r3
 8001232:	fa20 f101 	lsr.w	r1, r0, r1
 8001236:	409f      	lsls	r7, r3
 8001238:	ea41 0e0e 	orr.w	lr, r1, lr
 800123c:	409c      	lsls	r4, r3
 800123e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001242:	fbbe fcf8 	udiv	ip, lr, r8
 8001246:	fa1f f987 	uxth.w	r9, r7
 800124a:	fb08 e21c 	mls	r2, r8, ip, lr
 800124e:	fb0c f009 	mul.w	r0, ip, r9
 8001252:	0c21      	lsrs	r1, r4, #16
 8001254:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001258:	4290      	cmp	r0, r2
 800125a:	d90a      	bls.n	8001272 <__udivmoddi4+0x66>
 800125c:	18ba      	adds	r2, r7, r2
 800125e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8001262:	f080 8118 	bcs.w	8001496 <__udivmoddi4+0x28a>
 8001266:	4290      	cmp	r0, r2
 8001268:	f240 8115 	bls.w	8001496 <__udivmoddi4+0x28a>
 800126c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001270:	443a      	add	r2, r7
 8001272:	1a12      	subs	r2, r2, r0
 8001274:	fbb2 f0f8 	udiv	r0, r2, r8
 8001278:	fb08 2210 	mls	r2, r8, r0, r2
 800127c:	fb00 f109 	mul.w	r1, r0, r9
 8001280:	b2a4      	uxth	r4, r4
 8001282:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001286:	42a1      	cmp	r1, r4
 8001288:	d909      	bls.n	800129e <__udivmoddi4+0x92>
 800128a:	193c      	adds	r4, r7, r4
 800128c:	f100 32ff 	add.w	r2, r0, #4294967295
 8001290:	f080 8103 	bcs.w	800149a <__udivmoddi4+0x28e>
 8001294:	42a1      	cmp	r1, r4
 8001296:	f240 8100 	bls.w	800149a <__udivmoddi4+0x28e>
 800129a:	3802      	subs	r0, #2
 800129c:	443c      	add	r4, r7
 800129e:	1a64      	subs	r4, r4, r1
 80012a0:	2100      	movs	r1, #0
 80012a2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80012a6:	b11e      	cbz	r6, 80012b0 <__udivmoddi4+0xa4>
 80012a8:	2200      	movs	r2, #0
 80012aa:	40dc      	lsrs	r4, r3
 80012ac:	e9c6 4200 	strd	r4, r2, [r6]
 80012b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012b4:	b902      	cbnz	r2, 80012b8 <__udivmoddi4+0xac>
 80012b6:	deff      	udf	#255	; 0xff
 80012b8:	fab2 f382 	clz	r3, r2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d14f      	bne.n	8001360 <__udivmoddi4+0x154>
 80012c0:	1a8d      	subs	r5, r1, r2
 80012c2:	2101      	movs	r1, #1
 80012c4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80012c8:	fa1f f882 	uxth.w	r8, r2
 80012cc:	fbb5 fcfe 	udiv	ip, r5, lr
 80012d0:	fb0e 551c 	mls	r5, lr, ip, r5
 80012d4:	fb08 f00c 	mul.w	r0, r8, ip
 80012d8:	0c22      	lsrs	r2, r4, #16
 80012da:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80012de:	42a8      	cmp	r0, r5
 80012e0:	d907      	bls.n	80012f2 <__udivmoddi4+0xe6>
 80012e2:	197d      	adds	r5, r7, r5
 80012e4:	f10c 32ff 	add.w	r2, ip, #4294967295
 80012e8:	d202      	bcs.n	80012f0 <__udivmoddi4+0xe4>
 80012ea:	42a8      	cmp	r0, r5
 80012ec:	f200 80e9 	bhi.w	80014c2 <__udivmoddi4+0x2b6>
 80012f0:	4694      	mov	ip, r2
 80012f2:	1a2d      	subs	r5, r5, r0
 80012f4:	fbb5 f0fe 	udiv	r0, r5, lr
 80012f8:	fb0e 5510 	mls	r5, lr, r0, r5
 80012fc:	fb08 f800 	mul.w	r8, r8, r0
 8001300:	b2a4      	uxth	r4, r4
 8001302:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001306:	45a0      	cmp	r8, r4
 8001308:	d907      	bls.n	800131a <__udivmoddi4+0x10e>
 800130a:	193c      	adds	r4, r7, r4
 800130c:	f100 32ff 	add.w	r2, r0, #4294967295
 8001310:	d202      	bcs.n	8001318 <__udivmoddi4+0x10c>
 8001312:	45a0      	cmp	r8, r4
 8001314:	f200 80d9 	bhi.w	80014ca <__udivmoddi4+0x2be>
 8001318:	4610      	mov	r0, r2
 800131a:	eba4 0408 	sub.w	r4, r4, r8
 800131e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001322:	e7c0      	b.n	80012a6 <__udivmoddi4+0x9a>
 8001324:	428b      	cmp	r3, r1
 8001326:	d908      	bls.n	800133a <__udivmoddi4+0x12e>
 8001328:	2e00      	cmp	r6, #0
 800132a:	f000 80b1 	beq.w	8001490 <__udivmoddi4+0x284>
 800132e:	2100      	movs	r1, #0
 8001330:	e9c6 0500 	strd	r0, r5, [r6]
 8001334:	4608      	mov	r0, r1
 8001336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800133a:	fab3 f183 	clz	r1, r3
 800133e:	2900      	cmp	r1, #0
 8001340:	d14b      	bne.n	80013da <__udivmoddi4+0x1ce>
 8001342:	42ab      	cmp	r3, r5
 8001344:	d302      	bcc.n	800134c <__udivmoddi4+0x140>
 8001346:	4282      	cmp	r2, r0
 8001348:	f200 80b9 	bhi.w	80014be <__udivmoddi4+0x2b2>
 800134c:	1a84      	subs	r4, r0, r2
 800134e:	eb65 0303 	sbc.w	r3, r5, r3
 8001352:	2001      	movs	r0, #1
 8001354:	469e      	mov	lr, r3
 8001356:	2e00      	cmp	r6, #0
 8001358:	d0aa      	beq.n	80012b0 <__udivmoddi4+0xa4>
 800135a:	e9c6 4e00 	strd	r4, lr, [r6]
 800135e:	e7a7      	b.n	80012b0 <__udivmoddi4+0xa4>
 8001360:	409f      	lsls	r7, r3
 8001362:	f1c3 0220 	rsb	r2, r3, #32
 8001366:	40d1      	lsrs	r1, r2
 8001368:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800136c:	fbb1 f0fe 	udiv	r0, r1, lr
 8001370:	fa1f f887 	uxth.w	r8, r7
 8001374:	fb0e 1110 	mls	r1, lr, r0, r1
 8001378:	fa24 f202 	lsr.w	r2, r4, r2
 800137c:	409d      	lsls	r5, r3
 800137e:	fb00 fc08 	mul.w	ip, r0, r8
 8001382:	432a      	orrs	r2, r5
 8001384:	0c15      	lsrs	r5, r2, #16
 8001386:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800138a:	45ac      	cmp	ip, r5
 800138c:	fa04 f403 	lsl.w	r4, r4, r3
 8001390:	d909      	bls.n	80013a6 <__udivmoddi4+0x19a>
 8001392:	197d      	adds	r5, r7, r5
 8001394:	f100 31ff 	add.w	r1, r0, #4294967295
 8001398:	f080 808f 	bcs.w	80014ba <__udivmoddi4+0x2ae>
 800139c:	45ac      	cmp	ip, r5
 800139e:	f240 808c 	bls.w	80014ba <__udivmoddi4+0x2ae>
 80013a2:	3802      	subs	r0, #2
 80013a4:	443d      	add	r5, r7
 80013a6:	eba5 050c 	sub.w	r5, r5, ip
 80013aa:	fbb5 f1fe 	udiv	r1, r5, lr
 80013ae:	fb0e 5c11 	mls	ip, lr, r1, r5
 80013b2:	fb01 f908 	mul.w	r9, r1, r8
 80013b6:	b295      	uxth	r5, r2
 80013b8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80013bc:	45a9      	cmp	r9, r5
 80013be:	d907      	bls.n	80013d0 <__udivmoddi4+0x1c4>
 80013c0:	197d      	adds	r5, r7, r5
 80013c2:	f101 32ff 	add.w	r2, r1, #4294967295
 80013c6:	d274      	bcs.n	80014b2 <__udivmoddi4+0x2a6>
 80013c8:	45a9      	cmp	r9, r5
 80013ca:	d972      	bls.n	80014b2 <__udivmoddi4+0x2a6>
 80013cc:	3902      	subs	r1, #2
 80013ce:	443d      	add	r5, r7
 80013d0:	eba5 0509 	sub.w	r5, r5, r9
 80013d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013d8:	e778      	b.n	80012cc <__udivmoddi4+0xc0>
 80013da:	f1c1 0720 	rsb	r7, r1, #32
 80013de:	408b      	lsls	r3, r1
 80013e0:	fa22 fc07 	lsr.w	ip, r2, r7
 80013e4:	ea4c 0c03 	orr.w	ip, ip, r3
 80013e8:	fa25 f407 	lsr.w	r4, r5, r7
 80013ec:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80013f0:	fbb4 f9fe 	udiv	r9, r4, lr
 80013f4:	fa1f f88c 	uxth.w	r8, ip
 80013f8:	fb0e 4419 	mls	r4, lr, r9, r4
 80013fc:	fa20 f307 	lsr.w	r3, r0, r7
 8001400:	fb09 fa08 	mul.w	sl, r9, r8
 8001404:	408d      	lsls	r5, r1
 8001406:	431d      	orrs	r5, r3
 8001408:	0c2b      	lsrs	r3, r5, #16
 800140a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800140e:	45a2      	cmp	sl, r4
 8001410:	fa02 f201 	lsl.w	r2, r2, r1
 8001414:	fa00 f301 	lsl.w	r3, r0, r1
 8001418:	d909      	bls.n	800142e <__udivmoddi4+0x222>
 800141a:	eb1c 0404 	adds.w	r4, ip, r4
 800141e:	f109 30ff 	add.w	r0, r9, #4294967295
 8001422:	d248      	bcs.n	80014b6 <__udivmoddi4+0x2aa>
 8001424:	45a2      	cmp	sl, r4
 8001426:	d946      	bls.n	80014b6 <__udivmoddi4+0x2aa>
 8001428:	f1a9 0902 	sub.w	r9, r9, #2
 800142c:	4464      	add	r4, ip
 800142e:	eba4 040a 	sub.w	r4, r4, sl
 8001432:	fbb4 f0fe 	udiv	r0, r4, lr
 8001436:	fb0e 4410 	mls	r4, lr, r0, r4
 800143a:	fb00 fa08 	mul.w	sl, r0, r8
 800143e:	b2ad      	uxth	r5, r5
 8001440:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001444:	45a2      	cmp	sl, r4
 8001446:	d908      	bls.n	800145a <__udivmoddi4+0x24e>
 8001448:	eb1c 0404 	adds.w	r4, ip, r4
 800144c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001450:	d22d      	bcs.n	80014ae <__udivmoddi4+0x2a2>
 8001452:	45a2      	cmp	sl, r4
 8001454:	d92b      	bls.n	80014ae <__udivmoddi4+0x2a2>
 8001456:	3802      	subs	r0, #2
 8001458:	4464      	add	r4, ip
 800145a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800145e:	fba0 8902 	umull	r8, r9, r0, r2
 8001462:	eba4 040a 	sub.w	r4, r4, sl
 8001466:	454c      	cmp	r4, r9
 8001468:	46c6      	mov	lr, r8
 800146a:	464d      	mov	r5, r9
 800146c:	d319      	bcc.n	80014a2 <__udivmoddi4+0x296>
 800146e:	d016      	beq.n	800149e <__udivmoddi4+0x292>
 8001470:	b15e      	cbz	r6, 800148a <__udivmoddi4+0x27e>
 8001472:	ebb3 020e 	subs.w	r2, r3, lr
 8001476:	eb64 0405 	sbc.w	r4, r4, r5
 800147a:	fa04 f707 	lsl.w	r7, r4, r7
 800147e:	fa22 f301 	lsr.w	r3, r2, r1
 8001482:	431f      	orrs	r7, r3
 8001484:	40cc      	lsrs	r4, r1
 8001486:	e9c6 7400 	strd	r7, r4, [r6]
 800148a:	2100      	movs	r1, #0
 800148c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001490:	4631      	mov	r1, r6
 8001492:	4630      	mov	r0, r6
 8001494:	e70c      	b.n	80012b0 <__udivmoddi4+0xa4>
 8001496:	468c      	mov	ip, r1
 8001498:	e6eb      	b.n	8001272 <__udivmoddi4+0x66>
 800149a:	4610      	mov	r0, r2
 800149c:	e6ff      	b.n	800129e <__udivmoddi4+0x92>
 800149e:	4543      	cmp	r3, r8
 80014a0:	d2e6      	bcs.n	8001470 <__udivmoddi4+0x264>
 80014a2:	ebb8 0e02 	subs.w	lr, r8, r2
 80014a6:	eb69 050c 	sbc.w	r5, r9, ip
 80014aa:	3801      	subs	r0, #1
 80014ac:	e7e0      	b.n	8001470 <__udivmoddi4+0x264>
 80014ae:	4628      	mov	r0, r5
 80014b0:	e7d3      	b.n	800145a <__udivmoddi4+0x24e>
 80014b2:	4611      	mov	r1, r2
 80014b4:	e78c      	b.n	80013d0 <__udivmoddi4+0x1c4>
 80014b6:	4681      	mov	r9, r0
 80014b8:	e7b9      	b.n	800142e <__udivmoddi4+0x222>
 80014ba:	4608      	mov	r0, r1
 80014bc:	e773      	b.n	80013a6 <__udivmoddi4+0x19a>
 80014be:	4608      	mov	r0, r1
 80014c0:	e749      	b.n	8001356 <__udivmoddi4+0x14a>
 80014c2:	f1ac 0c02 	sub.w	ip, ip, #2
 80014c6:	443d      	add	r5, r7
 80014c8:	e713      	b.n	80012f2 <__udivmoddi4+0xe6>
 80014ca:	3802      	subs	r0, #2
 80014cc:	443c      	add	r4, r7
 80014ce:	e724      	b.n	800131a <__udivmoddi4+0x10e>

080014d0 <__aeabi_idiv0>:
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop

080014d4 <DebugManager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Steppermanager */
void DebugManager(void const * argument)
{
 80014d4:	b5b0      	push	{r4, r5, r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

	State TempAlgoState;

	for(;;)
	{
		osDelay(5000);
 80014dc:	f241 3088 	movw	r0, #5000	; 0x1388
 80014e0:	f008 fd8f 	bl	800a002 <osDelay>
		HAL_RTC_GetTime(&hrtc,&sTime,0);
 80014e4:	2200      	movs	r2, #0
 80014e6:	4973      	ldr	r1, [pc, #460]	; (80016b4 <DebugManager+0x1e0>)
 80014e8:	4873      	ldr	r0, [pc, #460]	; (80016b8 <DebugManager+0x1e4>)
 80014ea:	f007 fcbb 	bl	8008e64 <HAL_RTC_GetTime>
		printf("#");
 80014ee:	2023      	movs	r0, #35	; 0x23
 80014f0:	f00b fed4 	bl	800d29c <putchar>
		printf("%02i:%02i:%02i ",sTime.Hours,sTime.Minutes,sTime.Seconds);
 80014f4:	4b6f      	ldr	r3, [pc, #444]	; (80016b4 <DebugManager+0x1e0>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4619      	mov	r1, r3
 80014fa:	4b6e      	ldr	r3, [pc, #440]	; (80016b4 <DebugManager+0x1e0>)
 80014fc:	785b      	ldrb	r3, [r3, #1]
 80014fe:	461a      	mov	r2, r3
 8001500:	4b6c      	ldr	r3, [pc, #432]	; (80016b4 <DebugManager+0x1e0>)
 8001502:	789b      	ldrb	r3, [r3, #2]
 8001504:	486d      	ldr	r0, [pc, #436]	; (80016bc <DebugManager+0x1e8>)
 8001506:	f00b feb1 	bl	800d26c <iprintf>
		printf("Tavant:%iF TArriere:%iF Plenum:%iF ",Algo_getBaffleTemp()/10,Algo_getRearTemp()/10,Algo_getPlenumTemp()/10);
 800150a:	f002 fd81 	bl	8004010 <Algo_getBaffleTemp>
 800150e:	4603      	mov	r3, r0
 8001510:	4a6b      	ldr	r2, [pc, #428]	; (80016c0 <DebugManager+0x1ec>)
 8001512:	fb82 1203 	smull	r1, r2, r2, r3
 8001516:	1092      	asrs	r2, r2, #2
 8001518:	17db      	asrs	r3, r3, #31
 800151a:	1ad4      	subs	r4, r2, r3
 800151c:	f002 fd6e 	bl	8003ffc <Algo_getRearTemp>
 8001520:	4603      	mov	r3, r0
 8001522:	4a67      	ldr	r2, [pc, #412]	; (80016c0 <DebugManager+0x1ec>)
 8001524:	fb82 1203 	smull	r1, r2, r2, r3
 8001528:	1092      	asrs	r2, r2, #2
 800152a:	17db      	asrs	r3, r3, #31
 800152c:	1ad5      	subs	r5, r2, r3
 800152e:	f002 fd87 	bl	8004040 <Algo_getPlenumTemp>
 8001532:	4603      	mov	r3, r0
 8001534:	4a62      	ldr	r2, [pc, #392]	; (80016c0 <DebugManager+0x1ec>)
 8001536:	fb82 1203 	smull	r1, r2, r2, r3
 800153a:	1092      	asrs	r2, r2, #2
 800153c:	17db      	asrs	r3, r3, #31
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	462a      	mov	r2, r5
 8001542:	4621      	mov	r1, r4
 8001544:	485f      	ldr	r0, [pc, #380]	; (80016c4 <DebugManager+0x1f0>)
 8001546:	f00b fe91 	bl	800d26c <iprintf>
		printf("State:");
 800154a:	485f      	ldr	r0, [pc, #380]	; (80016c8 <DebugManager+0x1f4>)
 800154c:	f00b fe8e 	bl	800d26c <iprintf>

		TempAlgoState = Algo_getState();
 8001550:	f002 fd28 	bl	8003fa4 <Algo_getState>
 8001554:	4603      	mov	r3, r0
 8001556:	73fb      	strb	r3, [r7, #15]
		switch (TempAlgoState) {
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	2b0c      	cmp	r3, #12
 800155c:	d850      	bhi.n	8001600 <DebugManager+0x12c>
 800155e:	a201      	add	r2, pc, #4	; (adr r2, 8001564 <DebugManager+0x90>)
 8001560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001564:	08001599 	.word	0x08001599
 8001568:	080015a1 	.word	0x080015a1
 800156c:	080015c9 	.word	0x080015c9
 8001570:	080015a9 	.word	0x080015a9
 8001574:	080015b1 	.word	0x080015b1
 8001578:	080015b9 	.word	0x080015b9
 800157c:	080015c1 	.word	0x080015c1
 8001580:	080015e1 	.word	0x080015e1
 8001584:	080015d1 	.word	0x080015d1
 8001588:	080015d9 	.word	0x080015d9
 800158c:	080015e9 	.word	0x080015e9
 8001590:	080015f1 	.word	0x080015f1
 8001594:	080015f9 	.word	0x080015f9
			case ZEROING_STEPPER:
				printf("ZEROING_STEP");
 8001598:	484c      	ldr	r0, [pc, #304]	; (80016cc <DebugManager+0x1f8>)
 800159a:	f00b fe67 	bl	800d26c <iprintf>
				break;
 800159e:	e033      	b.n	8001608 <DebugManager+0x134>
			case WAITING:
				printf("WAITING");
 80015a0:	484b      	ldr	r0, [pc, #300]	; (80016d0 <DebugManager+0x1fc>)
 80015a2:	f00b fe63 	bl	800d26c <iprintf>
				break;
 80015a6:	e02f      	b.n	8001608 <DebugManager+0x134>
			case TEMPERATURE_RISE:
				printf("TEMP_RISE");
 80015a8:	484a      	ldr	r0, [pc, #296]	; (80016d4 <DebugManager+0x200>)
 80015aa:	f00b fe5f 	bl	800d26c <iprintf>
				break;
 80015ae:	e02b      	b.n	8001608 <DebugManager+0x134>
			case COMBUSTION_LOW:
				printf("COMB_LOW");
 80015b0:	4849      	ldr	r0, [pc, #292]	; (80016d8 <DebugManager+0x204>)
 80015b2:	f00b fe5b 	bl	800d26c <iprintf>
				break;
 80015b6:	e027      	b.n	8001608 <DebugManager+0x134>
			case COMBUSTION_LOW2:
				printf("COMB_LOW2");
 80015b8:	4848      	ldr	r0, [pc, #288]	; (80016dc <DebugManager+0x208>)
 80015ba:	f00b fe57 	bl	800d26c <iprintf>
				break;
 80015be:	e023      	b.n	8001608 <DebugManager+0x134>
			case COMBUSTION_HIGH:
				printf("COMB_HIGH");
 80015c0:	4847      	ldr	r0, [pc, #284]	; (80016e0 <DebugManager+0x20c>)
 80015c2:	f00b fe53 	bl	800d26c <iprintf>
				break;
 80015c6:	e01f      	b.n	8001608 <DebugManager+0x134>
			case RELOAD_IGNITION:
				printf("RELOAD_IGNI");
 80015c8:	4846      	ldr	r0, [pc, #280]	; (80016e4 <DebugManager+0x210>)
 80015ca:	f00b fe4f 	bl	800d26c <iprintf>
				break;
 80015ce:	e01b      	b.n	8001608 <DebugManager+0x134>
			case FLAME_LOSS:
				printf("FLAME_LOSS");
 80015d0:	4845      	ldr	r0, [pc, #276]	; (80016e8 <DebugManager+0x214>)
 80015d2:	f00b fe4b 	bl	800d26c <iprintf>
				break;
 80015d6:	e017      	b.n	8001608 <DebugManager+0x134>
			case COAL_HIGH:
				printf("COAL_HIGH");
 80015d8:	4844      	ldr	r0, [pc, #272]	; (80016ec <DebugManager+0x218>)
 80015da:	f00b fe47 	bl	800d26c <iprintf>
				break;
 80015de:	e013      	b.n	8001608 <DebugManager+0x134>
			case COAL_LOW:
				printf("COAL_LOW");
 80015e0:	4843      	ldr	r0, [pc, #268]	; (80016f0 <DebugManager+0x21c>)
 80015e2:	f00b fe43 	bl	800d26c <iprintf>
				break;
 80015e6:	e00f      	b.n	8001608 <DebugManager+0x134>
			case OVERTEMP:
				printf("OVERTEMP");
 80015e8:	4842      	ldr	r0, [pc, #264]	; (80016f4 <DebugManager+0x220>)
 80015ea:	f00b fe3f 	bl	800d26c <iprintf>
				break;
 80015ee:	e00b      	b.n	8001608 <DebugManager+0x134>
			case SAFETY:
				printf("SAFETY");
 80015f0:	4841      	ldr	r0, [pc, #260]	; (80016f8 <DebugManager+0x224>)
 80015f2:	f00b fe3b 	bl	800d26c <iprintf>
				break;
 80015f6:	e007      	b.n	8001608 <DebugManager+0x134>
			case PRODUCTION_TEST:
				printf("PRODTEST");
 80015f8:	4840      	ldr	r0, [pc, #256]	; (80016fc <DebugManager+0x228>)
 80015fa:	f00b fe37 	bl	800d26c <iprintf>
				break;
 80015fe:	e003      	b.n	8001608 <DebugManager+0x134>
			default:
				printf("UNKNOWN");
 8001600:	483f      	ldr	r0, [pc, #252]	; (8001700 <DebugManager+0x22c>)
 8001602:	f00b fe33 	bl	800d26c <iprintf>
				break;
 8001606:	bf00      	nop
		}
		printf(" tStat:");
 8001608:	483e      	ldr	r0, [pc, #248]	; (8001704 <DebugManager+0x230>)
 800160a:	f00b fe2f 	bl	800d26c <iprintf>
		if (Algo_getThermostatRequest())
 800160e:	f002 fd45 	bl	800409c <Algo_getThermostatRequest>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <DebugManager+0x14c>
		{
			printf("ON ");
 8001618:	483b      	ldr	r0, [pc, #236]	; (8001708 <DebugManager+0x234>)
 800161a:	f00b fe27 	bl	800d26c <iprintf>
 800161e:	e002      	b.n	8001626 <DebugManager+0x152>
		}
		else
		{
			printf("OFF ");
 8001620:	483a      	ldr	r0, [pc, #232]	; (800170c <DebugManager+0x238>)
 8001622:	f00b fe23 	bl	800d26c <iprintf>
		}
		printf("dTav:%i",(int)Algo_getBaffleTempSlope());
 8001626:	f002 fc7b 	bl	8003f20 <Algo_getBaffleTempSlope>
 800162a:	4603      	mov	r3, r0
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff fd8f 	bl	8001150 <__aeabi_f2iz>
 8001632:	4603      	mov	r3, r0
 8001634:	4619      	mov	r1, r3
 8001636:	4836      	ldr	r0, [pc, #216]	; (8001710 <DebugManager+0x23c>)
 8001638:	f00b fe18 	bl	800d26c <iprintf>
		printf(" FanSpeed:%i ",Mot_getFanSpeed());
 800163c:	f000 fd3c 	bl	80020b8 <Mot_getFanSpeed>
 8001640:	4603      	mov	r3, r0
 8001642:	4619      	mov	r1, r3
 8001644:	4833      	ldr	r0, [pc, #204]	; (8001714 <DebugManager+0x240>)
 8001646:	f00b fe11 	bl	800d26c <iprintf>
		printf("Grille:%i ",	Algo_getGrill()*9/10);
 800164a:	f002 fd0d 	bl	8004068 <Algo_getGrill>
 800164e:	4602      	mov	r2, r0
 8001650:	4613      	mov	r3, r2
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	4413      	add	r3, r2
 8001656:	4a1a      	ldr	r2, [pc, #104]	; (80016c0 <DebugManager+0x1ec>)
 8001658:	fb82 1203 	smull	r1, r2, r2, r3
 800165c:	1092      	asrs	r2, r2, #2
 800165e:	17db      	asrs	r3, r3, #31
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	4619      	mov	r1, r3
 8001664:	482c      	ldr	r0, [pc, #176]	; (8001718 <DebugManager+0x244>)
 8001666:	f00b fe01 	bl	800d26c <iprintf>
		printf("PIDPos:%i ",PIDTrapPosition*9/10);
 800166a:	4b2c      	ldr	r3, [pc, #176]	; (800171c <DebugManager+0x248>)
 800166c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001670:	461a      	mov	r2, r3
 8001672:	4613      	mov	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	4413      	add	r3, r2
 8001678:	4a11      	ldr	r2, [pc, #68]	; (80016c0 <DebugManager+0x1ec>)
 800167a:	fb82 1203 	smull	r1, r2, r2, r3
 800167e:	1092      	asrs	r2, r2, #2
 8001680:	17db      	asrs	r3, r3, #31
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	4619      	mov	r1, r3
 8001686:	4826      	ldr	r0, [pc, #152]	; (8001720 <DebugManager+0x24c>)
 8001688:	f00b fdf0 	bl	800d26c <iprintf>
		printf("PrimSec:%i",Algo_getPrimary()*9/10);
 800168c:	f002 fce2 	bl	8004054 <Algo_getPrimary>
 8001690:	4602      	mov	r2, r0
 8001692:	4613      	mov	r3, r2
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	4413      	add	r3, r2
 8001698:	4a09      	ldr	r2, [pc, #36]	; (80016c0 <DebugManager+0x1ec>)
 800169a:	fb82 1203 	smull	r1, r2, r2, r3
 800169e:	1092      	asrs	r2, r2, #2
 80016a0:	17db      	asrs	r3, r3, #31
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	4619      	mov	r1, r3
 80016a6:	481f      	ldr	r0, [pc, #124]	; (8001724 <DebugManager+0x250>)
 80016a8:	f00b fde0 	bl	800d26c <iprintf>
		printf("*\n\r");
 80016ac:	481e      	ldr	r0, [pc, #120]	; (8001728 <DebugManager+0x254>)
 80016ae:	f00b fddd 	bl	800d26c <iprintf>
		osDelay(5000);
 80016b2:	e713      	b.n	80014dc <DebugManager+0x8>
 80016b4:	20002f88 	.word	0x20002f88
 80016b8:	20002fe0 	.word	0x20002fe0
 80016bc:	0800f120 	.word	0x0800f120
 80016c0:	66666667 	.word	0x66666667
 80016c4:	0800f130 	.word	0x0800f130
 80016c8:	0800f154 	.word	0x0800f154
 80016cc:	0800f15c 	.word	0x0800f15c
 80016d0:	0800f16c 	.word	0x0800f16c
 80016d4:	0800f174 	.word	0x0800f174
 80016d8:	0800f180 	.word	0x0800f180
 80016dc:	0800f18c 	.word	0x0800f18c
 80016e0:	0800f198 	.word	0x0800f198
 80016e4:	0800f1a4 	.word	0x0800f1a4
 80016e8:	0800f1b0 	.word	0x0800f1b0
 80016ec:	0800f1bc 	.word	0x0800f1bc
 80016f0:	0800f1c8 	.word	0x0800f1c8
 80016f4:	0800f1d4 	.word	0x0800f1d4
 80016f8:	0800f1e0 	.word	0x0800f1e0
 80016fc:	0800f1e8 	.word	0x0800f1e8
 8001700:	0800f1f4 	.word	0x0800f1f4
 8001704:	0800f1fc 	.word	0x0800f1fc
 8001708:	0800f204 	.word	0x0800f204
 800170c:	0800f208 	.word	0x0800f208
 8001710:	0800f210 	.word	0x0800f210
 8001714:	0800f218 	.word	0x0800f218
 8001718:	0800f228 	.word	0x0800f228
 800171c:	2000060c 	.word	0x2000060c
 8001720:	0800f234 	.word	0x0800f234
 8001724:	0800f240 	.word	0x0800f240
 8001728:	0800f24c 	.word	0x0800f24c

0800172c <__io_putchar>:

//UART_HandleTypeDef huart3;
//UART_HandleTypeDef huart2;
//UART_HandleTypeDef huart1;

int __io_putchar(int ch) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001734:	1d39      	adds	r1, r7, #4
 8001736:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800173a:	2201      	movs	r2, #1
 800173c:	4803      	ldr	r0, [pc, #12]	; (800174c <__io_putchar+0x20>)
 800173e:	f008 fa6a 	bl	8009c16 <HAL_UART_Transmit>
  return ch;
 8001742:	687b      	ldr	r3, [r7, #4]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20002f94 	.word	0x20002f94

08001750 <readModel>:

}
*/

FurnaceModel readModel()
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
	FurnaceModel model = 0;  //default to Heatmax
 8001756:	2300      	movs	r3, #0
 8001758:	71fb      	strb	r3, [r7, #7]
	if(GPIO_PIN_SET == HAL_GPIO_ReadPin(Model_bit0_GPIO_Port,Model_bit0_Pin))
	{
		model +=4;
	}
*/
	return model;
 800175a:	79fb      	ldrb	r3, [r7, #7]
}
 800175c:	4618      	mov	r0, r3
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr
	...

08001768 <HmiManager>:

void HmiManager()
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
	static uint32_t LastButtonPressedTime_ms = 0;
	static uint32_t LastButttonToggle_ms =0;
	uint32_t LastButttonToggleTemp_ms =0;
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
    bool interlockActive;

	for(;;)
	{

		osDelay(50);
 8001772:	2032      	movs	r0, #50	; 0x32
 8001774:	f008 fc45 	bl	800a002 <osDelay>
		State algostate = Algo_getState();
 8001778:	f002 fc14 	bl	8003fa4 <Algo_getState>
 800177c:	4603      	mov	r3, r0
 800177e:	72fb      	strb	r3, [r7, #11]
		uint32_t kerneltime = osKernelSysTick();
 8001780:	f008 fbe3 	bl	8009f4a <osKernelSysTick>
 8001784:	6078      	str	r0, [r7, #4]

		tStatDemand = (HAL_GPIO_ReadPin(Thermostat_Input_GPIO_Port,Thermostat_Input_Pin) == GPIO_PIN_RESET);
 8001786:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800178a:	48a6      	ldr	r0, [pc, #664]	; (8001a24 <HmiManager+0x2bc>)
 800178c:	f004 fa2a 	bl	8005be4 <HAL_GPIO_ReadPin>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	bf0c      	ite	eq
 8001796:	2301      	moveq	r3, #1
 8001798:	2300      	movne	r3, #0
 800179a:	70fb      	strb	r3, [r7, #3]
		interlockActive = (HAL_GPIO_ReadPin(Interlock_Input_GPIO_Port,Interlock_Input_Pin) == GPIO_PIN_RESET);
 800179c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017a0:	48a0      	ldr	r0, [pc, #640]	; (8001a24 <HmiManager+0x2bc>)
 80017a2:	f004 fa1f 	bl	8005be4 <HAL_GPIO_ReadPin>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	bf0c      	ite	eq
 80017ac:	2301      	moveq	r3, #1
 80017ae:	2300      	movne	r3, #0
 80017b0:	70bb      	strb	r3, [r7, #2]

		Algo_setThermostatRequest(tStatDemand);
 80017b2:	78fb      	ldrb	r3, [r7, #3]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f002 fc61 	bl	800407c <Algo_setThermostatRequest>
		Algo_setInterlockRequest(interlockActive);
 80017ba:	78bb      	ldrb	r3, [r7, #2]
 80017bc:	4618      	mov	r0, r3
 80017be:	f002 fc77 	bl	80040b0 <Algo_setInterlockRequest>

		if(algostate !=PRODUCTION_TEST)
 80017c2:	7afb      	ldrb	r3, [r7, #11]
 80017c4:	2b0c      	cmp	r3, #12
 80017c6:	f000 8089 	beq.w	80018dc <HmiManager+0x174>
			//{
			//	HAL_GPIO_TogglePin(Button_LED_GPIO_Port, Button_LED_Pin);
			//}
			//else
			//{
				if( (tStatDemand || Algo_getInterlockRequest()) && (Algo_getState() !=SAFETY && Algo_getState() != OVERTEMP && !ButtonBlinkingrequired) )
 80017ca:	78fb      	ldrb	r3, [r7, #3]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d104      	bne.n	80017da <HmiManager+0x72>
 80017d0:	f002 fc7e 	bl	80040d0 <Algo_getInterlockRequest>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d029      	beq.n	800182e <HmiManager+0xc6>
 80017da:	f002 fbe3 	bl	8003fa4 <Algo_getState>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b0b      	cmp	r3, #11
 80017e2:	d024      	beq.n	800182e <HmiManager+0xc6>
 80017e4:	f002 fbde 	bl	8003fa4 <Algo_getState>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b0a      	cmp	r3, #10
 80017ec:	d01f      	beq.n	800182e <HmiManager+0xc6>
 80017ee:	4b8e      	ldr	r3, [pc, #568]	; (8001a28 <HmiManager+0x2c0>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	f083 0301 	eor.w	r3, r3, #1
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d018      	beq.n	800182e <HmiManager+0xc6>
				{
					if(Algo_getInterlockRequest() || Algo_getRearTemp() < 4000) //if rear temp below 400F, furnace is too cold and reignition is needded
 80017fc:	f002 fc68 	bl	80040d0 <Algo_getInterlockRequest>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d105      	bne.n	8001812 <HmiManager+0xaa>
 8001806:	f002 fbf9 	bl	8003ffc <Algo_getRearTemp>
 800180a:	4603      	mov	r3, r0
 800180c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001810:	da06      	bge.n	8001820 <HmiManager+0xb8>
					{
						SetButtonLed_OFF();
 8001812:	2200      	movs	r2, #0
 8001814:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001818:	4884      	ldr	r0, [pc, #528]	; (8001a2c <HmiManager+0x2c4>)
 800181a:	f004 f9fa 	bl	8005c12 <HAL_GPIO_WritePin>
					if(Algo_getInterlockRequest() || Algo_getRearTemp() < 4000) //if rear temp below 400F, furnace is too cold and reignition is needded
 800181e:	e119      	b.n	8001a54 <HmiManager+0x2ec>
					}
					else
					{
						SetButtonLed_ON();
 8001820:	2201      	movs	r2, #1
 8001822:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001826:	4881      	ldr	r0, [pc, #516]	; (8001a2c <HmiManager+0x2c4>)
 8001828:	f004 f9f3 	bl	8005c12 <HAL_GPIO_WritePin>
					if(Algo_getInterlockRequest() || Algo_getRearTemp() < 4000) //if rear temp below 400F, furnace is too cold and reignition is needded
 800182c:	e112      	b.n	8001a54 <HmiManager+0x2ec>
					}
				}
				else if(Algo_getBaffleTemp()>4000 || Algo_getState() ==SAFETY || Algo_getState() ==OVERTEMP || ButtonBlinkingrequired)
 800182e:	f002 fbef 	bl	8004010 <Algo_getBaffleTemp>
 8001832:	4603      	mov	r3, r0
 8001834:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001838:	dc0d      	bgt.n	8001856 <HmiManager+0xee>
 800183a:	f002 fbb3 	bl	8003fa4 <Algo_getState>
 800183e:	4603      	mov	r3, r0
 8001840:	2b0b      	cmp	r3, #11
 8001842:	d008      	beq.n	8001856 <HmiManager+0xee>
 8001844:	f002 fbae 	bl	8003fa4 <Algo_getState>
 8001848:	4603      	mov	r3, r0
 800184a:	2b0a      	cmp	r3, #10
 800184c:	d003      	beq.n	8001856 <HmiManager+0xee>
 800184e:	4b76      	ldr	r3, [pc, #472]	; (8001a28 <HmiManager+0x2c0>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d03b      	beq.n	80018ce <HmiManager+0x166>
				{
					if(Algo_getState() ==SAFETY || Algo_getState() ==OVERTEMP)
 8001856:	f002 fba5 	bl	8003fa4 <Algo_getState>
 800185a:	4603      	mov	r3, r0
 800185c:	2b0b      	cmp	r3, #11
 800185e:	d004      	beq.n	800186a <HmiManager+0x102>
 8001860:	f002 fba0 	bl	8003fa4 <Algo_getState>
 8001864:	4603      	mov	r3, r0
 8001866:	2b0a      	cmp	r3, #10
 8001868:	d104      	bne.n	8001874 <HmiManager+0x10c>
					{
						LastButttonToggleTemp_ms = LastButttonToggle_ms+100;
 800186a:	4b71      	ldr	r3, [pc, #452]	; (8001a30 <HmiManager+0x2c8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	3364      	adds	r3, #100	; 0x64
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	e00d      	b.n	8001890 <HmiManager+0x128>
					}
					else if (ButtonBlinkingrequired)
 8001874:	4b6c      	ldr	r3, [pc, #432]	; (8001a28 <HmiManager+0x2c0>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d004      	beq.n	8001886 <HmiManager+0x11e>
					{
						LastButttonToggleTemp_ms = LastButttonToggle_ms+50;
 800187c:	4b6c      	ldr	r3, [pc, #432]	; (8001a30 <HmiManager+0x2c8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	3332      	adds	r3, #50	; 0x32
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	e004      	b.n	8001890 <HmiManager+0x128>
					}
					else
					{
						LastButttonToggleTemp_ms = LastButttonToggle_ms+1500;
 8001886:	4b6a      	ldr	r3, [pc, #424]	; (8001a30 <HmiManager+0x2c8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 800188e:	60fb      	str	r3, [r7, #12]
					}
					if((LastButttonToggleTemp_ms) < kerneltime) //1Hz
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	429a      	cmp	r2, r3
 8001896:	f080 80dd 	bcs.w	8001a54 <HmiManager+0x2ec>
					{
						if(ButtonBlinkingrequired && (buttonblinkrequirecount >=0))
 800189a:	4b63      	ldr	r3, [pc, #396]	; (8001a28 <HmiManager+0x2c0>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00c      	beq.n	80018bc <HmiManager+0x154>
						{
							buttonblinkrequirecount--;
 80018a2:	4b64      	ldr	r3, [pc, #400]	; (8001a34 <HmiManager+0x2cc>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4b62      	ldr	r3, [pc, #392]	; (8001a34 <HmiManager+0x2cc>)
 80018ac:	701a      	strb	r2, [r3, #0]
							if(buttonblinkrequirecount ==0)
 80018ae:	4b61      	ldr	r3, [pc, #388]	; (8001a34 <HmiManager+0x2cc>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d102      	bne.n	80018bc <HmiManager+0x154>
							{
								ButtonBlinkingrequired = false;
 80018b6:	4b5c      	ldr	r3, [pc, #368]	; (8001a28 <HmiManager+0x2c0>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	701a      	strb	r2, [r3, #0]
							}
						}
						LastButttonToggle_ms = kerneltime;
 80018bc:	4a5c      	ldr	r2, [pc, #368]	; (8001a30 <HmiManager+0x2c8>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6013      	str	r3, [r2, #0]
						HAL_GPIO_TogglePin(Button_LED_GPIO_Port, Button_LED_Pin);
 80018c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018c6:	4859      	ldr	r0, [pc, #356]	; (8001a2c <HmiManager+0x2c4>)
 80018c8:	f004 f9bb 	bl	8005c42 <HAL_GPIO_TogglePin>
					if((LastButttonToggleTemp_ms) < kerneltime) //1Hz
 80018cc:	e0c2      	b.n	8001a54 <HmiManager+0x2ec>
					}
				}
				else
				{
					SetButtonLed_OFF();
 80018ce:	2200      	movs	r2, #0
 80018d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018d4:	4855      	ldr	r0, [pc, #340]	; (8001a2c <HmiManager+0x2c4>)
 80018d6:	f004 f99c 	bl	8005c12 <HAL_GPIO_WritePin>
 80018da:	e0bb      	b.n	8001a54 <HmiManager+0x2ec>
				}
			//}
		}
		else
		{
			currentState = getTestState();
 80018dc:	f000 fdbc 	bl	8002458 <getTestState>
 80018e0:	4603      	mov	r3, r0
 80018e2:	461a      	mov	r2, r3
 80018e4:	4b54      	ldr	r3, [pc, #336]	; (8001a38 <HmiManager+0x2d0>)
 80018e6:	701a      	strb	r2, [r3, #0]
			void Algo_clearReloadRequest(); // in case we generate an event on function entry
			if(currentState == THERMO_REAR_TEST)
 80018e8:	4b53      	ldr	r3, [pc, #332]	; (8001a38 <HmiManager+0x2d0>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d117      	bne.n	8001920 <HmiManager+0x1b8>
				thermocoupleTestPeriod = (float)1000/Algo_getRearTemp()*800;
 80018f0:	f002 fb84 	bl	8003ffc <Algo_getRearTemp>
 80018f4:	4603      	mov	r3, r0
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fa10 	bl	8000d1c <__aeabi_i2f>
 80018fc:	4603      	mov	r3, r0
 80018fe:	4619      	mov	r1, r3
 8001900:	484e      	ldr	r0, [pc, #312]	; (8001a3c <HmiManager+0x2d4>)
 8001902:	f7ff fb13 	bl	8000f2c <__aeabi_fdiv>
 8001906:	4603      	mov	r3, r0
 8001908:	494d      	ldr	r1, [pc, #308]	; (8001a40 <HmiManager+0x2d8>)
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fa5a 	bl	8000dc4 <__aeabi_fmul>
 8001910:	4603      	mov	r3, r0
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fc42 	bl	800119c <__aeabi_f2uiz>
 8001918:	4603      	mov	r3, r0
 800191a:	4a4a      	ldr	r2, [pc, #296]	; (8001a44 <HmiManager+0x2dc>)
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	e036      	b.n	800198e <HmiManager+0x226>
			else if (currentState== THERMO_BAFFLE_TEST)
 8001920:	4b45      	ldr	r3, [pc, #276]	; (8001a38 <HmiManager+0x2d0>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b03      	cmp	r3, #3
 8001926:	d117      	bne.n	8001958 <HmiManager+0x1f0>
				thermocoupleTestPeriod = (float)1000/Algo_getBaffleTemp()*800;
 8001928:	f002 fb72 	bl	8004010 <Algo_getBaffleTemp>
 800192c:	4603      	mov	r3, r0
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff f9f4 	bl	8000d1c <__aeabi_i2f>
 8001934:	4603      	mov	r3, r0
 8001936:	4619      	mov	r1, r3
 8001938:	4840      	ldr	r0, [pc, #256]	; (8001a3c <HmiManager+0x2d4>)
 800193a:	f7ff faf7 	bl	8000f2c <__aeabi_fdiv>
 800193e:	4603      	mov	r3, r0
 8001940:	493f      	ldr	r1, [pc, #252]	; (8001a40 <HmiManager+0x2d8>)
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fa3e 	bl	8000dc4 <__aeabi_fmul>
 8001948:	4603      	mov	r3, r0
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fc26 	bl	800119c <__aeabi_f2uiz>
 8001950:	4603      	mov	r3, r0
 8001952:	4a3c      	ldr	r2, [pc, #240]	; (8001a44 <HmiManager+0x2dc>)
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	e01a      	b.n	800198e <HmiManager+0x226>
			else if (currentState== PLENUM_RTD_TEST)
 8001958:	4b37      	ldr	r3, [pc, #220]	; (8001a38 <HmiManager+0x2d0>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b04      	cmp	r3, #4
 800195e:	d116      	bne.n	800198e <HmiManager+0x226>
				thermocoupleTestPeriod = (float)1000/Algo_getPlenumTemp()*1000;
 8001960:	f002 fb6e 	bl	8004040 <Algo_getPlenumTemp>
 8001964:	4603      	mov	r3, r0
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff f9d8 	bl	8000d1c <__aeabi_i2f>
 800196c:	4603      	mov	r3, r0
 800196e:	4619      	mov	r1, r3
 8001970:	4832      	ldr	r0, [pc, #200]	; (8001a3c <HmiManager+0x2d4>)
 8001972:	f7ff fadb 	bl	8000f2c <__aeabi_fdiv>
 8001976:	4603      	mov	r3, r0
 8001978:	4930      	ldr	r1, [pc, #192]	; (8001a3c <HmiManager+0x2d4>)
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff fa22 	bl	8000dc4 <__aeabi_fmul>
 8001980:	4603      	mov	r3, r0
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fc0a 	bl	800119c <__aeabi_f2uiz>
 8001988:	4603      	mov	r3, r0
 800198a:	4a2e      	ldr	r2, [pc, #184]	; (8001a44 <HmiManager+0x2dc>)
 800198c:	6013      	str	r3, [r2, #0]

			if (currentState == THERMO_REAR_TEST
 800198e:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <HmiManager+0x2d0>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b02      	cmp	r3, #2
 8001994:	d007      	beq.n	80019a6 <HmiManager+0x23e>
					|| currentState == THERMO_BAFFLE_TEST
 8001996:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <HmiManager+0x2d0>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b03      	cmp	r3, #3
 800199c:	d003      	beq.n	80019a6 <HmiManager+0x23e>
					|| currentState == PLENUM_RTD_TEST)
 800199e:	4b26      	ldr	r3, [pc, #152]	; (8001a38 <HmiManager+0x2d0>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d110      	bne.n	80019c8 <HmiManager+0x260>
			{
				if((LastButttonToggle_ms+thermocoupleTestPeriod) < kerneltime)
 80019a6:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <HmiManager+0x2c8>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	4b26      	ldr	r3, [pc, #152]	; (8001a44 <HmiManager+0x2dc>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4413      	add	r3, r2
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d94e      	bls.n	8001a54 <HmiManager+0x2ec>
				{
					LastButttonToggle_ms = kerneltime;
 80019b6:	4a1e      	ldr	r2, [pc, #120]	; (8001a30 <HmiManager+0x2c8>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6013      	str	r3, [r2, #0]
					ToggleButtonLed();
 80019bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019c0:	481a      	ldr	r0, [pc, #104]	; (8001a2c <HmiManager+0x2c4>)
 80019c2:	f004 f93e 	bl	8005c42 <HAL_GPIO_TogglePin>
				if((LastButttonToggle_ms+thermocoupleTestPeriod) < kerneltime)
 80019c6:	e045      	b.n	8001a54 <HmiManager+0x2ec>
				}
			}
			else if (currentState == THERMOSTAT_TEST)
 80019c8:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <HmiManager+0x2d0>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b07      	cmp	r3, #7
 80019ce:	d112      	bne.n	80019f6 <HmiManager+0x28e>
			{
				Algo_getThermostatRequest()?SetButtonLed_ON():SetButtonLed_OFF();
 80019d0:	f002 fb64 	bl	800409c <Algo_getThermostatRequest>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d006      	beq.n	80019e8 <HmiManager+0x280>
 80019da:	2201      	movs	r2, #1
 80019dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019e0:	4812      	ldr	r0, [pc, #72]	; (8001a2c <HmiManager+0x2c4>)
 80019e2:	f004 f916 	bl	8005c12 <HAL_GPIO_WritePin>
 80019e6:	e035      	b.n	8001a54 <HmiManager+0x2ec>
 80019e8:	2200      	movs	r2, #0
 80019ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019ee:	480f      	ldr	r0, [pc, #60]	; (8001a2c <HmiManager+0x2c4>)
 80019f0:	f004 f90f 	bl	8005c12 <HAL_GPIO_WritePin>
 80019f4:	e02e      	b.n	8001a54 <HmiManager+0x2ec>
			}
			else if(currentState == INTERLOCK_TEST)
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <HmiManager+0x2d0>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b08      	cmp	r3, #8
 80019fc:	d124      	bne.n	8001a48 <HmiManager+0x2e0>
			{
				Algo_getInterlockRequest()?SetButtonLed_ON():SetButtonLed_OFF();
 80019fe:	f002 fb67 	bl	80040d0 <Algo_getInterlockRequest>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d006      	beq.n	8001a16 <HmiManager+0x2ae>
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a0e:	4807      	ldr	r0, [pc, #28]	; (8001a2c <HmiManager+0x2c4>)
 8001a10:	f004 f8ff 	bl	8005c12 <HAL_GPIO_WritePin>
 8001a14:	e01e      	b.n	8001a54 <HmiManager+0x2ec>
 8001a16:	2200      	movs	r2, #0
 8001a18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a1c:	4803      	ldr	r0, [pc, #12]	; (8001a2c <HmiManager+0x2c4>)
 8001a1e:	f004 f8f8 	bl	8005c12 <HAL_GPIO_WritePin>
 8001a22:	e017      	b.n	8001a54 <HmiManager+0x2ec>
 8001a24:	40010c00 	.word	0x40010c00
 8001a28:	200000dc 	.word	0x200000dc
 8001a2c:	40010800 	.word	0x40010800
 8001a30:	200000e0 	.word	0x200000e0
 8001a34:	200000e4 	.word	0x200000e4
 8001a38:	200000e5 	.word	0x200000e5
 8001a3c:	447a0000 	.word	0x447a0000
 8001a40:	44480000 	.word	0x44480000
 8001a44:	200000e8 	.word	0x200000e8
			}
			else
			{
				SetButtonLed_OFF();
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a4e:	4821      	ldr	r0, [pc, #132]	; (8001ad4 <HmiManager+0x36c>)
 8001a50:	f004 f8df 	bl	8005c12 <HAL_GPIO_WritePin>
			}
		}
		if(algostate !=PRODUCTION_TEST)
 8001a54:	7afb      	ldrb	r3, [r7, #11]
 8001a56:	2b0c      	cmp	r3, #12
 8001a58:	d01c      	beq.n	8001a94 <HmiManager+0x32c>
		{
			if(GPIO_PIN_SET==HAL_GPIO_ReadPin(Button_Input_GPIO_Port,Button_Input_Pin))
 8001a5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a5e:	481e      	ldr	r0, [pc, #120]	; (8001ad8 <HmiManager+0x370>)
 8001a60:	f004 f8c0 	bl	8005be4 <HAL_GPIO_ReadPin>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d10f      	bne.n	8001a8a <HmiManager+0x322>
			{
				if ((LastButtonPressedTime_ms+100) < kerneltime)
 8001a6a:	4b1c      	ldr	r3, [pc, #112]	; (8001adc <HmiManager+0x374>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	3364      	adds	r3, #100	; 0x64
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d90e      	bls.n	8001a94 <HmiManager+0x32c>
				{
					Algo_startChargement(kerneltime);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f002 fb34 	bl	80040e4 <Algo_startChargement>
					ButtonBlinkingrequired = true;
 8001a7c:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <HmiManager+0x378>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	701a      	strb	r2, [r3, #0]
					buttonblinkrequirecount = 6;
 8001a82:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <HmiManager+0x37c>)
 8001a84:	2206      	movs	r2, #6
 8001a86:	701a      	strb	r2, [r3, #0]
 8001a88:	e004      	b.n	8001a94 <HmiManager+0x32c>
				}
			}
			else
			{
				LastButtonPressedTime_ms = osKernelSysTick();
 8001a8a:	f008 fa5e 	bl	8009f4a <osKernelSysTick>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	4a12      	ldr	r2, [pc, #72]	; (8001adc <HmiManager+0x374>)
 8001a92:	6013      	str	r3, [r2, #0]
			}
		}

//Status bit Handling
		switch(algostate)
 8001a94:	7afb      	ldrb	r3, [r7, #11]
 8001a96:	3b0a      	subs	r3, #10
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d805      	bhi.n	8001aa8 <HmiManager+0x340>
		{
			case SAFETY:
			case OVERTEMP:
				Set_STATUS_BIT2_ON();
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2110      	movs	r1, #16
 8001aa0:	480c      	ldr	r0, [pc, #48]	; (8001ad4 <HmiManager+0x36c>)
 8001aa2:	f004 f8b6 	bl	8005c12 <HAL_GPIO_WritePin>
				break;
 8001aa6:	e005      	b.n	8001ab4 <HmiManager+0x34c>
			default:
				Set_STATUS_BIT2_OFF();
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	2110      	movs	r1, #16
 8001aac:	4809      	ldr	r0, [pc, #36]	; (8001ad4 <HmiManager+0x36c>)
 8001aae:	f004 f8b0 	bl	8005c12 <HAL_GPIO_WritePin>
				break;
 8001ab2:	bf00      	nop
		}
		//tStatDemand?Set_STATUS_BIT0_ON():Set_STATUS_BIT0_OFF();
		interlockActive?Set_STATUS_BIT1_ON():Set_STATUS_BIT1_OFF();
 8001ab4:	78bb      	ldrb	r3, [r7, #2]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d005      	beq.n	8001ac6 <HmiManager+0x35e>
 8001aba:	2200      	movs	r2, #0
 8001abc:	2108      	movs	r1, #8
 8001abe:	480a      	ldr	r0, [pc, #40]	; (8001ae8 <HmiManager+0x380>)
 8001ac0:	f004 f8a7 	bl	8005c12 <HAL_GPIO_WritePin>
 8001ac4:	e655      	b.n	8001772 <HmiManager+0xa>
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	2108      	movs	r1, #8
 8001aca:	4807      	ldr	r0, [pc, #28]	; (8001ae8 <HmiManager+0x380>)
 8001acc:	f004 f8a1 	bl	8005c12 <HAL_GPIO_WritePin>
	{
 8001ad0:	e64f      	b.n	8001772 <HmiManager+0xa>
 8001ad2:	bf00      	nop
 8001ad4:	40010800 	.word	0x40010800
 8001ad8:	40010c00 	.word	0x40010c00
 8001adc:	200000ec 	.word	0x200000ec
 8001ae0:	200000dc 	.word	0x200000dc
 8001ae4:	200000e4 	.word	0x200000e4
 8001ae8:	40011000 	.word	0x40011000

08001aec <Steppermanager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Steppermanager */
void Steppermanager(void const * argument)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
	//sleep is active low but we inverse the logic with transistor
	//static int BoostPosition = 0;
	//static int PrimarySecondaryPosition = 0;
	//printf("\n Stepper manager running");

	HAL_GPIO_WritePin(uc_Stepper_Sleep_GPIO_Port,uc_Stepper_Sleep_Pin,RESET);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2110      	movs	r1, #16
 8001af8:	4811      	ldr	r0, [pc, #68]	; (8001b40 <Steppermanager+0x54>)
 8001afa:	f004 f88a 	bl	8005c12 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(Stepper_HalfStep_GPIO_Port,Stepper_HalfStep_Pin,SET);
	Algo_init();
 8001afe:	f001 fa7d 	bl	8002ffc <Algo_init>
  {
//#ifdef TEST_MOTEUR
//	vStepperPositioning(tman_getMoteur1Req(),&BoostPosition,BoostStepper);
//	vStepperPositioning(tman_getMoteur2Req(),&PrimarySecondaryPosition,PrimaryStepper);
//#else
	osDelay(50);
 8001b02:	2032      	movs	r0, #50	; 0x32
 8001b04:	f008 fa7d 	bl	800a002 <osDelay>

	Algo_task(osKernelSysTick());
 8001b08:	f008 fa1f 	bl	8009f4a <osKernelSysTick>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f002 f9ea 	bl	8003ee8 <Algo_task>
	if(Algo_getState() != PRODUCTION_TEST)
 8001b14:	f002 fa46 	bl	8003fa4 <Algo_getState>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b0c      	cmp	r3, #12
 8001b1c:	d0f1      	beq.n	8001b02 <Steppermanager+0x16>
	{
		vStepperPositioning(Algo_getGrill(),&stepperPosition[BoostStepper],BoostStepper);
 8001b1e:	f002 faa3 	bl	8004068 <Algo_getGrill>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2201      	movs	r2, #1
 8001b26:	4907      	ldr	r1, [pc, #28]	; (8001b44 <Steppermanager+0x58>)
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f000 f80f 	bl	8001b4c <vStepperPositioning>
		vStepperPositioning(Algo_getPrimary(),&stepperPosition[PrimaryStepper],PrimaryStepper);
 8001b2e:	f002 fa91 	bl	8004054 <Algo_getPrimary>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2200      	movs	r2, #0
 8001b36:	4904      	ldr	r1, [pc, #16]	; (8001b48 <Steppermanager+0x5c>)
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f000 f807 	bl	8001b4c <vStepperPositioning>
	osDelay(50);
 8001b3e:	e7e0      	b.n	8001b02 <Steppermanager+0x16>
 8001b40:	40011000 	.word	0x40011000
 8001b44:	20002f24 	.word	0x20002f24
 8001b48:	20002f20 	.word	0x20002f20

08001b4c <vStepperPositioning>:
#define secondaryStepperMin 13
#endif
*/

void vStepperPositioning(int RequestedPosition,int *CurrentPosition, motor_t MotorId)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	4613      	mov	r3, r2
 8001b58:	71fb      	strb	r3, [r7, #7]
    //MotorControl_t* pstMotorControl;
    //pstMotorControl = &stMotor[MotorId];
    int StepToPerform = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]

    bool StepperToZero = false;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	74fb      	strb	r3, [r7, #19]

    StepperToZero = vLimitSwitchActive(MotorId);
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f000 f91d 	bl	8001da4 <vLimitSwitchActive>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	74fb      	strb	r3, [r7, #19]

    if(StepperToZero)
 8001b6e:	7cfb      	ldrb	r3, [r7, #19]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d015      	beq.n	8001ba0 <vStepperPositioning+0x54>
    {
    	switch(MotorId)
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d00e      	beq.n	8001b98 <vStepperPositioning+0x4c>
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	dc12      	bgt.n	8001ba4 <vStepperPositioning+0x58>
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d002      	beq.n	8001b88 <vStepperPositioning+0x3c>
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d004      	beq.n	8001b90 <vStepperPositioning+0x44>
    		break;
    	case SecondaryStepper:
    		*CurrentPosition = SECONDARY_MINIMUM_OPENING;
    		break;
    	default:
    		break;
 8001b86:	e00d      	b.n	8001ba4 <vStepperPositioning+0x58>
    		*CurrentPosition = PRIMARY_MINIMUM_OPENING	;
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	220d      	movs	r2, #13
 8001b8c:	601a      	str	r2, [r3, #0]
    		break;
 8001b8e:	e00a      	b.n	8001ba6 <vStepperPositioning+0x5a>
    		*CurrentPosition = 0;
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
    		break;
 8001b96:	e006      	b.n	8001ba6 <vStepperPositioning+0x5a>
    		*CurrentPosition = SECONDARY_MINIMUM_OPENING;
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	220d      	movs	r2, #13
 8001b9c:	601a      	str	r2, [r3, #0]
    		break;
 8001b9e:	e002      	b.n	8001ba6 <vStepperPositioning+0x5a>
    	else
    	{
    		*CurrentPosition = 0;
    	}
*/
    }
 8001ba0:	bf00      	nop
 8001ba2:	e000      	b.n	8001ba6 <vStepperPositioning+0x5a>
    		break;
 8001ba4:	bf00      	nop
    StepToPerform = *CurrentPosition - RequestedPosition;
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	617b      	str	r3, [r7, #20]

	switch(MotorId)
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d020      	beq.n	8001bf8 <vStepperPositioning+0xac>
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	dc2b      	bgt.n	8001c12 <vStepperPositioning+0xc6>
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d002      	beq.n	8001bc4 <vStepperPositioning+0x78>
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d00d      	beq.n	8001bde <vStepperPositioning+0x92>
		{
			StepToPerform = 1;
		}
		break;
	default:
		break;
 8001bc2:	e026      	b.n	8001c12 <vStepperPositioning+0xc6>
		if (*CurrentPosition == PRIMARY_MINIMUM_OPENING	 && !StepperToZero)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b0d      	cmp	r3, #13
 8001bca:	d124      	bne.n	8001c16 <vStepperPositioning+0xca>
 8001bcc:	7cfb      	ldrb	r3, [r7, #19]
 8001bce:	f083 0301 	eor.w	r3, r3, #1
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d01e      	beq.n	8001c16 <vStepperPositioning+0xca>
			StepToPerform = 1;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	617b      	str	r3, [r7, #20]
		break;
 8001bdc:	e01b      	b.n	8001c16 <vStepperPositioning+0xca>
		if (*CurrentPosition == 0 && !StepperToZero)
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d119      	bne.n	8001c1a <vStepperPositioning+0xce>
 8001be6:	7cfb      	ldrb	r3, [r7, #19]
 8001be8:	f083 0301 	eor.w	r3, r3, #1
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d013      	beq.n	8001c1a <vStepperPositioning+0xce>
			StepToPerform = 1;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	617b      	str	r3, [r7, #20]
		break;
 8001bf6:	e010      	b.n	8001c1a <vStepperPositioning+0xce>
		if (*CurrentPosition == SECONDARY_MINIMUM_OPENING && !StepperToZero)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b0d      	cmp	r3, #13
 8001bfe:	d10e      	bne.n	8001c1e <vStepperPositioning+0xd2>
 8001c00:	7cfb      	ldrb	r3, [r7, #19]
 8001c02:	f083 0301 	eor.w	r3, r3, #1
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d008      	beq.n	8001c1e <vStepperPositioning+0xd2>
			StepToPerform = 1;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	617b      	str	r3, [r7, #20]
		break;
 8001c10:	e005      	b.n	8001c1e <vStepperPositioning+0xd2>
		break;
 8001c12:	bf00      	nop
 8001c14:	e070      	b.n	8001cf8 <vStepperPositioning+0x1ac>
		break;
 8001c16:	bf00      	nop
 8001c18:	e06e      	b.n	8001cf8 <vStepperPositioning+0x1ac>
		break;
 8001c1a:	bf00      	nop
 8001c1c:	e06c      	b.n	8001cf8 <vStepperPositioning+0x1ac>
		break;
 8001c1e:	bf00      	nop
		{
			StepToPerform = 1;
		}
    }
*/
    while (StepToPerform != 0)
 8001c20:	e06a      	b.n	8001cf8 <vStepperPositioning+0x1ac>
    {
    	vEnableStepper(MotorId);
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f000 f8f9 	bl	8001e1c <vEnableStepper>
    	vStepperMaxTorque(MotorId,true);
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f000 f934 	bl	8001e9c <vStepperMaxTorque>
    	//osDelay(20);
    	if(StepToPerform > 0)
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	dd43      	ble.n	8001cc2 <vStepperPositioning+0x176>
		{
			vSetStepperMotorDirection(MotorId, Closing);
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 f9a4 	bl	8001f8c <vSetStepperMotorDirection>
			*CurrentPosition = *CurrentPosition -1;
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	1e5a      	subs	r2, r3, #1
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	601a      	str	r2, [r3, #0]

			switch(MotorId)
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d01c      	beq.n	8001c8e <vStepperPositioning+0x142>
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	dc25      	bgt.n	8001ca4 <vStepperPositioning+0x158>
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d002      	beq.n	8001c62 <vStepperPositioning+0x116>
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d00b      	beq.n	8001c78 <vStepperPositioning+0x12c>
					*CurrentPosition = SECONDARY_MINIMUM_OPENING;
					vDisableStepper(SecondaryStepper);
				}
				break;
			default:
				break;
 8001c60:	e020      	b.n	8001ca4 <vStepperPositioning+0x158>
				if (*CurrentPosition < PRIMARY_MINIMUM_OPENING	)
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2b0c      	cmp	r3, #12
 8001c68:	dc1e      	bgt.n	8001ca8 <vStepperPositioning+0x15c>
					*CurrentPosition = PRIMARY_MINIMUM_OPENING	;
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	220d      	movs	r2, #13
 8001c6e:	601a      	str	r2, [r3, #0]
					vDisableStepper(PrimaryStepper);
 8001c70:	2000      	movs	r0, #0
 8001c72:	f000 f95f 	bl	8001f34 <vDisableStepper>
				break;
 8001c76:	e017      	b.n	8001ca8 <vStepperPositioning+0x15c>
				if(*CurrentPosition < 0)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	da15      	bge.n	8001cac <vStepperPositioning+0x160>
					*CurrentPosition = 0;
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
					vDisableStepper(BoostStepper);
 8001c86:	2001      	movs	r0, #1
 8001c88:	f000 f954 	bl	8001f34 <vDisableStepper>
				break;
 8001c8c:	e00e      	b.n	8001cac <vStepperPositioning+0x160>
				if (*CurrentPosition < SECONDARY_MINIMUM_OPENING)
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2b0c      	cmp	r3, #12
 8001c94:	dc0c      	bgt.n	8001cb0 <vStepperPositioning+0x164>
					*CurrentPosition = SECONDARY_MINIMUM_OPENING;
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	220d      	movs	r2, #13
 8001c9a:	601a      	str	r2, [r3, #0]
					vDisableStepper(SecondaryStepper);
 8001c9c:	2002      	movs	r0, #2
 8001c9e:	f000 f949 	bl	8001f34 <vDisableStepper>
				break;
 8001ca2:	e005      	b.n	8001cb0 <vStepperPositioning+0x164>
				break;
 8001ca4:	bf00      	nop
 8001ca6:	e004      	b.n	8001cb2 <vStepperPositioning+0x166>
				break;
 8001ca8:	bf00      	nop
 8001caa:	e002      	b.n	8001cb2 <vStepperPositioning+0x166>
				break;
 8001cac:	bf00      	nop
 8001cae:	e000      	b.n	8001cb2 <vStepperPositioning+0x166>
				break;
 8001cb0:	bf00      	nop
			{
				*CurrentPosition = primaryStepperMin;
				vDisableStepper(PrimaryStepper);
			}
			*/
 			vToggleOneStep(MotorId);
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f000 f827 	bl	8001d08 <vToggleOneStep>
			StepToPerform--;
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	e01a      	b.n	8001cf8 <vStepperPositioning+0x1ac>
		}
		else if(StepToPerform < 0)
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	da17      	bge.n	8001cf8 <vStepperPositioning+0x1ac>
		{
			vEnableStepper(MotorId);
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 f8a6 	bl	8001e1c <vEnableStepper>
			osDelay(50);
 8001cd0:	2032      	movs	r0, #50	; 0x32
 8001cd2:	f008 f996 	bl	800a002 <osDelay>
			vSetStepperMotorDirection(MotorId, Opening);
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	2101      	movs	r1, #1
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f000 f956 	bl	8001f8c <vSetStepperMotorDirection>
			*CurrentPosition = *CurrentPosition + 1;
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	601a      	str	r2, [r3, #0]
			vToggleOneStep(MotorId);
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f000 f80b 	bl	8001d08 <vToggleOneStep>
			StepToPerform++;
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	617b      	str	r3, [r7, #20]
    while (StepToPerform != 0)
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d191      	bne.n	8001c22 <vStepperPositioning+0xd6>
	//vStepperMaxTorque(MotorId,false);
    //vStepperMaxTorque(MotorId,true); TODO : re-enable max torque
    //osDelay(100);
	//vDisableStepper(MotorId);

}
 8001cfe:	bf00      	nop
 8001d00:	bf00      	nop
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <vToggleOneStep>:

void vToggleOneStep(motor_t Motor)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]
    switch(Motor)
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d02a      	beq.n	8001d6e <vToggleOneStep+0x66>
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	dc39      	bgt.n	8001d90 <vToggleOneStep+0x88>
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d002      	beq.n	8001d26 <vToggleOneStep+0x1e>
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d011      	beq.n	8001d48 <vToggleOneStep+0x40>
            osDelay(10);
            Secondary_Step_SetHigh();
            osDelay(10);
            break;
        default:
            break;
 8001d24:	e034      	b.n	8001d90 <vToggleOneStep+0x88>
            Primary_Step_SetLow();
 8001d26:	2200      	movs	r2, #0
 8001d28:	2108      	movs	r1, #8
 8001d2a:	481c      	ldr	r0, [pc, #112]	; (8001d9c <vToggleOneStep+0x94>)
 8001d2c:	f003 ff71 	bl	8005c12 <HAL_GPIO_WritePin>
            osDelay(10);
 8001d30:	200a      	movs	r0, #10
 8001d32:	f008 f966 	bl	800a002 <osDelay>
            Primary_Step_SetHigh();
 8001d36:	2201      	movs	r2, #1
 8001d38:	2108      	movs	r1, #8
 8001d3a:	4818      	ldr	r0, [pc, #96]	; (8001d9c <vToggleOneStep+0x94>)
 8001d3c:	f003 ff69 	bl	8005c12 <HAL_GPIO_WritePin>
            osDelay(10);
 8001d40:	200a      	movs	r0, #10
 8001d42:	f008 f95e 	bl	800a002 <osDelay>
            break;
 8001d46:	e024      	b.n	8001d92 <vToggleOneStep+0x8a>
            Boost_Step_SetLow();
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d4e:	4814      	ldr	r0, [pc, #80]	; (8001da0 <vToggleOneStep+0x98>)
 8001d50:	f003 ff5f 	bl	8005c12 <HAL_GPIO_WritePin>
            osDelay(10);
 8001d54:	200a      	movs	r0, #10
 8001d56:	f008 f954 	bl	800a002 <osDelay>
            Boost_Step_SetHigh();
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d60:	480f      	ldr	r0, [pc, #60]	; (8001da0 <vToggleOneStep+0x98>)
 8001d62:	f003 ff56 	bl	8005c12 <HAL_GPIO_WritePin>
            osDelay(10);
 8001d66:	200a      	movs	r0, #10
 8001d68:	f008 f94b 	bl	800a002 <osDelay>
            break;
 8001d6c:	e011      	b.n	8001d92 <vToggleOneStep+0x8a>
            Secondary_Step_SetLow();
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2102      	movs	r1, #2
 8001d72:	480a      	ldr	r0, [pc, #40]	; (8001d9c <vToggleOneStep+0x94>)
 8001d74:	f003 ff4d 	bl	8005c12 <HAL_GPIO_WritePin>
            osDelay(10);
 8001d78:	200a      	movs	r0, #10
 8001d7a:	f008 f942 	bl	800a002 <osDelay>
            Secondary_Step_SetHigh();
 8001d7e:	2201      	movs	r2, #1
 8001d80:	2102      	movs	r1, #2
 8001d82:	4806      	ldr	r0, [pc, #24]	; (8001d9c <vToggleOneStep+0x94>)
 8001d84:	f003 ff45 	bl	8005c12 <HAL_GPIO_WritePin>
            osDelay(10);
 8001d88:	200a      	movs	r0, #10
 8001d8a:	f008 f93a 	bl	800a002 <osDelay>
            break;
 8001d8e:	e000      	b.n	8001d92 <vToggleOneStep+0x8a>
            break;
 8001d90:	bf00      	nop
    }
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40010c00 	.word	0x40010c00
 8001da0:	40011000 	.word	0x40011000

08001da4 <vLimitSwitchActive>:
bool vLimitSwitchActive(motor_t MotorId)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	71fb      	strb	r3, [r7, #7]
	bool active=false;
 8001dae:	2300      	movs	r3, #0
 8001db0:	73fb      	strb	r3, [r7, #15]
    switch(MotorId)
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d01c      	beq.n	8001df2 <vLimitSwitchActive+0x4e>
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	dc25      	bgt.n	8001e08 <vLimitSwitchActive+0x64>
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d002      	beq.n	8001dc6 <vLimitSwitchActive+0x22>
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d00b      	beq.n	8001ddc <vLimitSwitchActive+0x38>
        	break;
        case SecondaryStepper:
        	active = (GPIO_PIN_RESET == HAL_GPIO_ReadPin(Limit_switch3_GPIO_Port,Limit_switch3_Pin));
        	break;
        default:
            break;
 8001dc4:	e020      	b.n	8001e08 <vLimitSwitchActive+0x64>
        	active = (GPIO_PIN_RESET == HAL_GPIO_ReadPin(Limit_switch1_GPIO_Port,Limit_switch1_Pin));
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	4812      	ldr	r0, [pc, #72]	; (8001e14 <vLimitSwitchActive+0x70>)
 8001dca:	f003 ff0b 	bl	8005be4 <HAL_GPIO_ReadPin>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	bf0c      	ite	eq
 8001dd4:	2301      	moveq	r3, #1
 8001dd6:	2300      	movne	r3, #0
 8001dd8:	73fb      	strb	r3, [r7, #15]
            break;
 8001dda:	e016      	b.n	8001e0a <vLimitSwitchActive+0x66>
        	active = (GPIO_PIN_RESET == HAL_GPIO_ReadPin(Limit_switch2_GPIO_Port,Limit_switch2_Pin));
 8001ddc:	2102      	movs	r1, #2
 8001dde:	480d      	ldr	r0, [pc, #52]	; (8001e14 <vLimitSwitchActive+0x70>)
 8001de0:	f003 ff00 	bl	8005be4 <HAL_GPIO_ReadPin>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	bf0c      	ite	eq
 8001dea:	2301      	moveq	r3, #1
 8001dec:	2300      	movne	r3, #0
 8001dee:	73fb      	strb	r3, [r7, #15]
        	break;
 8001df0:	e00b      	b.n	8001e0a <vLimitSwitchActive+0x66>
        	active = (GPIO_PIN_RESET == HAL_GPIO_ReadPin(Limit_switch3_GPIO_Port,Limit_switch3_Pin));
 8001df2:	2140      	movs	r1, #64	; 0x40
 8001df4:	4808      	ldr	r0, [pc, #32]	; (8001e18 <vLimitSwitchActive+0x74>)
 8001df6:	f003 fef5 	bl	8005be4 <HAL_GPIO_ReadPin>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	bf0c      	ite	eq
 8001e00:	2301      	moveq	r3, #1
 8001e02:	2300      	movne	r3, #0
 8001e04:	73fb      	strb	r3, [r7, #15]
        	break;
 8001e06:	e000      	b.n	8001e0a <vLimitSwitchActive+0x66>
            break;
 8001e08:	bf00      	nop
    }
    return active;
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40011000 	.word	0x40011000
 8001e18:	40010800 	.word	0x40010800

08001e1c <vEnableStepper>:

void vEnableStepper(motor_t Motor)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	71fb      	strb	r3, [r7, #7]
    Step1_2_3_WAKE();
 8001e26:	2200      	movs	r2, #0
 8001e28:	2110      	movs	r1, #16
 8001e2a:	481a      	ldr	r0, [pc, #104]	; (8001e94 <vEnableStepper+0x78>)
 8001e2c:	f003 fef1 	bl	8005c12 <HAL_GPIO_WritePin>
	switch(Motor)
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d01e      	beq.n	8001e74 <vEnableStepper+0x58>
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	dc27      	bgt.n	8001e8a <vEnableStepper+0x6e>
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d002      	beq.n	8001e44 <vEnableStepper+0x28>
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d00b      	beq.n	8001e5a <vEnableStepper+0x3e>
        	Secondary_ENABLE();
        	Secondary_nRESET();

            break;
        default:
            break;
 8001e42:	e022      	b.n	8001e8a <vEnableStepper+0x6e>
            Primary_ENABLE();
 8001e44:	2200      	movs	r2, #0
 8001e46:	2120      	movs	r1, #32
 8001e48:	4813      	ldr	r0, [pc, #76]	; (8001e98 <vEnableStepper+0x7c>)
 8001e4a:	f003 fee2 	bl	8005c12 <HAL_GPIO_WritePin>
            Primary_nRESET();
 8001e4e:	2201      	movs	r2, #1
 8001e50:	2110      	movs	r1, #16
 8001e52:	4811      	ldr	r0, [pc, #68]	; (8001e98 <vEnableStepper+0x7c>)
 8001e54:	f003 fedd 	bl	8005c12 <HAL_GPIO_WritePin>
            break;
 8001e58:	e018      	b.n	8001e8c <vEnableStepper+0x70>
            Boost_ENABLE();
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e60:	480c      	ldr	r0, [pc, #48]	; (8001e94 <vEnableStepper+0x78>)
 8001e62:	f003 fed6 	bl	8005c12 <HAL_GPIO_WritePin>
            Boost_nRESET();
 8001e66:	2201      	movs	r2, #1
 8001e68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e6c:	4809      	ldr	r0, [pc, #36]	; (8001e94 <vEnableStepper+0x78>)
 8001e6e:	f003 fed0 	bl	8005c12 <HAL_GPIO_WritePin>
            break;
 8001e72:	e00b      	b.n	8001e8c <vEnableStepper+0x70>
        	Secondary_ENABLE();
 8001e74:	2200      	movs	r2, #0
 8001e76:	2120      	movs	r1, #32
 8001e78:	4806      	ldr	r0, [pc, #24]	; (8001e94 <vEnableStepper+0x78>)
 8001e7a:	f003 feca 	bl	8005c12 <HAL_GPIO_WritePin>
        	Secondary_nRESET();
 8001e7e:	2201      	movs	r2, #1
 8001e80:	2104      	movs	r1, #4
 8001e82:	4804      	ldr	r0, [pc, #16]	; (8001e94 <vEnableStepper+0x78>)
 8001e84:	f003 fec5 	bl	8005c12 <HAL_GPIO_WritePin>
            break;
 8001e88:	e000      	b.n	8001e8c <vEnableStepper+0x70>
            break;
 8001e8a:	bf00      	nop
    }
}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40011000 	.word	0x40011000
 8001e98:	40010c00 	.word	0x40010c00

08001e9c <vStepperMaxTorque>:
void vStepperMaxTorque(motor_t Motor,bool bApplyMaxTorque)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	460a      	mov	r2, r1
 8001ea6:	71fb      	strb	r3, [r7, #7]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	71bb      	strb	r3, [r7, #6]
	switch(Motor)
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d028      	beq.n	8001f04 <vStepperMaxTorque+0x68>
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	dc35      	bgt.n	8001f22 <vStepperMaxTorque+0x86>
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d002      	beq.n	8001ec0 <vStepperMaxTorque+0x24>
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d011      	beq.n	8001ee2 <vStepperMaxTorque+0x46>
			{
        		Secondary_TorqueMin();
        	}
            break;
        default:
            break;
 8001ebe:	e030      	b.n	8001f22 <vStepperMaxTorque+0x86>
        	if(bApplyMaxTorque)
 8001ec0:	79bb      	ldrb	r3, [r7, #6]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d006      	beq.n	8001ed4 <vStepperMaxTorque+0x38>
        		Primary_TorqueMax();
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ecc:	4817      	ldr	r0, [pc, #92]	; (8001f2c <vStepperMaxTorque+0x90>)
 8001ece:	f003 fea0 	bl	8005c12 <HAL_GPIO_WritePin>
            break;
 8001ed2:	e027      	b.n	8001f24 <vStepperMaxTorque+0x88>
        		Primary_TorqueMin();
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001eda:	4814      	ldr	r0, [pc, #80]	; (8001f2c <vStepperMaxTorque+0x90>)
 8001edc:	f003 fe99 	bl	8005c12 <HAL_GPIO_WritePin>
            break;
 8001ee0:	e020      	b.n	8001f24 <vStepperMaxTorque+0x88>
        	if(bApplyMaxTorque)
 8001ee2:	79bb      	ldrb	r3, [r7, #6]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d006      	beq.n	8001ef6 <vStepperMaxTorque+0x5a>
        		Boost_TorqueMax();
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eee:	480f      	ldr	r0, [pc, #60]	; (8001f2c <vStepperMaxTorque+0x90>)
 8001ef0:	f003 fe8f 	bl	8005c12 <HAL_GPIO_WritePin>
            break;
 8001ef4:	e016      	b.n	8001f24 <vStepperMaxTorque+0x88>
        		Boost_TorqueMin();
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001efc:	480b      	ldr	r0, [pc, #44]	; (8001f2c <vStepperMaxTorque+0x90>)
 8001efe:	f003 fe88 	bl	8005c12 <HAL_GPIO_WritePin>
            break;
 8001f02:	e00f      	b.n	8001f24 <vStepperMaxTorque+0x88>
        	if(bApplyMaxTorque)
 8001f04:	79bb      	ldrb	r3, [r7, #6]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d005      	beq.n	8001f16 <vStepperMaxTorque+0x7a>
        		Secondary_TorqueMax();
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2104      	movs	r1, #4
 8001f0e:	4808      	ldr	r0, [pc, #32]	; (8001f30 <vStepperMaxTorque+0x94>)
 8001f10:	f003 fe7f 	bl	8005c12 <HAL_GPIO_WritePin>
            break;
 8001f14:	e006      	b.n	8001f24 <vStepperMaxTorque+0x88>
        		Secondary_TorqueMin();
 8001f16:	2201      	movs	r2, #1
 8001f18:	2104      	movs	r1, #4
 8001f1a:	4805      	ldr	r0, [pc, #20]	; (8001f30 <vStepperMaxTorque+0x94>)
 8001f1c:	f003 fe79 	bl	8005c12 <HAL_GPIO_WritePin>
            break;
 8001f20:	e000      	b.n	8001f24 <vStepperMaxTorque+0x88>
            break;
 8001f22:	bf00      	nop
    }
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40011000 	.word	0x40011000
 8001f30:	40010c00 	.word	0x40010c00

08001f34 <vDisableStepper>:

void vDisableStepper(motor_t Motor)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
	//Step1_2_3_SLEEP();
    switch(Motor)
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d013      	beq.n	8001f6c <vDisableStepper+0x38>
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	dc17      	bgt.n	8001f78 <vDisableStepper+0x44>
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d002      	beq.n	8001f52 <vDisableStepper+0x1e>
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d006      	beq.n	8001f5e <vDisableStepper+0x2a>
            break;
        case SecondaryStepper:
        	Secondary_DISABLE();
        	break;
        default:
            break;
 8001f50:	e012      	b.n	8001f78 <vDisableStepper+0x44>
            Primary_DISABLE();
 8001f52:	2201      	movs	r2, #1
 8001f54:	2120      	movs	r1, #32
 8001f56:	480b      	ldr	r0, [pc, #44]	; (8001f84 <vDisableStepper+0x50>)
 8001f58:	f003 fe5b 	bl	8005c12 <HAL_GPIO_WritePin>
            break;
 8001f5c:	e00d      	b.n	8001f7a <vDisableStepper+0x46>
            Boost_DISABLE();
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f64:	4808      	ldr	r0, [pc, #32]	; (8001f88 <vDisableStepper+0x54>)
 8001f66:	f003 fe54 	bl	8005c12 <HAL_GPIO_WritePin>
            break;
 8001f6a:	e006      	b.n	8001f7a <vDisableStepper+0x46>
        	Secondary_DISABLE();
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	2120      	movs	r1, #32
 8001f70:	4805      	ldr	r0, [pc, #20]	; (8001f88 <vDisableStepper+0x54>)
 8001f72:	f003 fe4e 	bl	8005c12 <HAL_GPIO_WritePin>
        	break;
 8001f76:	e000      	b.n	8001f7a <vDisableStepper+0x46>
            break;
 8001f78:	bf00      	nop
    }
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40010c00 	.word	0x40010c00
 8001f88:	40011000 	.word	0x40011000

08001f8c <vSetStepperMotorDirection>:

void vSetStepperMotorDirection(motor_t Motor, motor_direction_t Direction)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	460a      	mov	r2, r1
 8001f96:	71fb      	strb	r3, [r7, #7]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	71bb      	strb	r3, [r7, #6]
    switch(Motor)
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d026      	beq.n	8001ff0 <vSetStepperMotorDirection+0x64>
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	dc33      	bgt.n	800200e <vSetStepperMotorDirection+0x82>
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d002      	beq.n	8001fb0 <vSetStepperMotorDirection+0x24>
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d00f      	beq.n	8001fce <vSetStepperMotorDirection+0x42>
 8001fae:	e02e      	b.n	800200e <vSetStepperMotorDirection+0x82>
    {
    case PrimaryStepper:
        if(Direction == Opening)
 8001fb0:	79bb      	ldrb	r3, [r7, #6]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d105      	bne.n	8001fc2 <vSetStepperMotorDirection+0x36>
        {
        	Primary_DIR_SetHigh();
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	2104      	movs	r1, #4
 8001fba:	4817      	ldr	r0, [pc, #92]	; (8002018 <vSetStepperMotorDirection+0x8c>)
 8001fbc:	f003 fe29 	bl	8005c12 <HAL_GPIO_WritePin>
        }
        else
        {
        	Primary_DIR_SetLow();
        }
        break;
 8001fc0:	e026      	b.n	8002010 <vSetStepperMotorDirection+0x84>
        	Primary_DIR_SetLow();
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2104      	movs	r1, #4
 8001fc6:	4814      	ldr	r0, [pc, #80]	; (8002018 <vSetStepperMotorDirection+0x8c>)
 8001fc8:	f003 fe23 	bl	8005c12 <HAL_GPIO_WritePin>
        break;
 8001fcc:	e020      	b.n	8002010 <vSetStepperMotorDirection+0x84>
    case BoostStepper:
        if(Direction == Opening)
 8001fce:	79bb      	ldrb	r3, [r7, #6]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d106      	bne.n	8001fe2 <vSetStepperMotorDirection+0x56>
        {
        	Boost_DIR_SetHigh();
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fda:	4810      	ldr	r0, [pc, #64]	; (800201c <vSetStepperMotorDirection+0x90>)
 8001fdc:	f003 fe19 	bl	8005c12 <HAL_GPIO_WritePin>
        }
        else
        {
        	Boost_DIR_SetLow();
        }
        break;
 8001fe0:	e016      	b.n	8002010 <vSetStepperMotorDirection+0x84>
        	Boost_DIR_SetLow();
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fe8:	480c      	ldr	r0, [pc, #48]	; (800201c <vSetStepperMotorDirection+0x90>)
 8001fea:	f003 fe12 	bl	8005c12 <HAL_GPIO_WritePin>
        break;
 8001fee:	e00f      	b.n	8002010 <vSetStepperMotorDirection+0x84>
    case SecondaryStepper:
        if(Direction == Opening)
 8001ff0:	79bb      	ldrb	r3, [r7, #6]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d105      	bne.n	8002002 <vSetStepperMotorDirection+0x76>
        {
        	Secondary_DIR_SetHigh();
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	2120      	movs	r1, #32
 8001ffa:	4809      	ldr	r0, [pc, #36]	; (8002020 <vSetStepperMotorDirection+0x94>)
 8001ffc:	f003 fe09 	bl	8005c12 <HAL_GPIO_WritePin>
        }
        else
        {
        	Secondary_DIR_SetLow();
        }
        break;
 8002000:	e006      	b.n	8002010 <vSetStepperMotorDirection+0x84>
        	Secondary_DIR_SetLow();
 8002002:	2200      	movs	r2, #0
 8002004:	2120      	movs	r1, #32
 8002006:	4806      	ldr	r0, [pc, #24]	; (8002020 <vSetStepperMotorDirection+0x94>)
 8002008:	f003 fe03 	bl	8005c12 <HAL_GPIO_WritePin>
        break;
 800200c:	e000      	b.n	8002010 <vSetStepperMotorDirection+0x84>
    default:
    	while(1);
 800200e:	e7fe      	b.n	800200e <vSetStepperMotorDirection+0x82>
    {
        while(1);
        //wrong motor argument
    }
    */
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40011400 	.word	0x40011400
 800201c:	40011000 	.word	0x40011000
 8002020:	40010800 	.word	0x40010800

08002024 <vSetSpeed>:
{
    return &stMotor[Index];
}

void vSetSpeed(Mot_FanSpeed RequestedSpeed)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	71fb      	strb	r3, [r7, #7]
	  switch (RequestedSpeed)
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	2b03      	cmp	r3, #3
 8002032:	d022      	beq.n	800207a <vSetSpeed+0x56>
 8002034:	2b03      	cmp	r3, #3
 8002036:	dc2e      	bgt.n	8002096 <vSetSpeed+0x72>
 8002038:	2b01      	cmp	r3, #1
 800203a:	d002      	beq.n	8002042 <vSetSpeed+0x1e>
 800203c:	2b02      	cmp	r3, #2
 800203e:	d00e      	beq.n	800205e <vSetSpeed+0x3a>
 8002040:	e029      	b.n	8002096 <vSetSpeed+0x72>
	  {
		  case 1://speed1
			  HAL_GPIO_WritePin(SPEED2_COIL_GPIO_Port,SPEED2_COIL_Pin,RESET);
 8002042:	2200      	movs	r2, #0
 8002044:	2140      	movs	r1, #64	; 0x40
 8002046:	481b      	ldr	r0, [pc, #108]	; (80020b4 <vSetSpeed+0x90>)
 8002048:	f003 fde3 	bl	8005c12 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SPEED3_COIL_GPIO_Port,SPEED3_COIL_Pin,RESET);
 800204c:	2200      	movs	r2, #0
 800204e:	2180      	movs	r1, #128	; 0x80
 8002050:	4818      	ldr	r0, [pc, #96]	; (80020b4 <vSetSpeed+0x90>)
 8002052:	f003 fdde 	bl	8005c12 <HAL_GPIO_WritePin>
			  osDelay(200);//break before make
 8002056:	20c8      	movs	r0, #200	; 0xc8
 8002058:	f007 ffd3 	bl	800a002 <osDelay>
			  //HAL_GPIO_WritePin(SPEED1_COIL_GPIO_Port,SPEED1_COIL_Pin,SET);
			  break;
 800205c:	e026      	b.n	80020ac <vSetSpeed+0x88>
		  case 2://speed2
			  HAL_GPIO_WritePin(SPEED3_COIL_GPIO_Port,SPEED3_COIL_Pin,RESET);
 800205e:	2200      	movs	r2, #0
 8002060:	2180      	movs	r1, #128	; 0x80
 8002062:	4814      	ldr	r0, [pc, #80]	; (80020b4 <vSetSpeed+0x90>)
 8002064:	f003 fdd5 	bl	8005c12 <HAL_GPIO_WritePin>
			  //HAL_GPIO_WritePin(SPEED1_COIL_GPIO_Port,SPEED1_COIL_Pin,RESET);
			  osDelay(200);//break before make
 8002068:	20c8      	movs	r0, #200	; 0xc8
 800206a:	f007 ffca 	bl	800a002 <osDelay>
			  HAL_GPIO_WritePin(SPEED2_COIL_GPIO_Port,SPEED2_COIL_Pin,SET);
 800206e:	2201      	movs	r2, #1
 8002070:	2140      	movs	r1, #64	; 0x40
 8002072:	4810      	ldr	r0, [pc, #64]	; (80020b4 <vSetSpeed+0x90>)
 8002074:	f003 fdcd 	bl	8005c12 <HAL_GPIO_WritePin>
			  break;
 8002078:	e018      	b.n	80020ac <vSetSpeed+0x88>
		  case 3://speed3
			  //HAL_GPIO_WritePin(SPEED1_COIL_GPIO_Port,SPEED1_COIL_Pin,RESET);
			  HAL_GPIO_WritePin(SPEED2_COIL_GPIO_Port,SPEED2_COIL_Pin,RESET);
 800207a:	2200      	movs	r2, #0
 800207c:	2140      	movs	r1, #64	; 0x40
 800207e:	480d      	ldr	r0, [pc, #52]	; (80020b4 <vSetSpeed+0x90>)
 8002080:	f003 fdc7 	bl	8005c12 <HAL_GPIO_WritePin>
			  osDelay(200);//break before make
 8002084:	20c8      	movs	r0, #200	; 0xc8
 8002086:	f007 ffbc 	bl	800a002 <osDelay>
			  HAL_GPIO_WritePin(SPEED3_COIL_GPIO_Port,SPEED3_COIL_Pin,SET);
 800208a:	2201      	movs	r2, #1
 800208c:	2180      	movs	r1, #128	; 0x80
 800208e:	4809      	ldr	r0, [pc, #36]	; (80020b4 <vSetSpeed+0x90>)
 8002090:	f003 fdbf 	bl	8005c12 <HAL_GPIO_WritePin>
			  break;
 8002094:	e00a      	b.n	80020ac <vSetSpeed+0x88>
		  case 4: //speed4 controlled by hardware
		  default: //stop
			  //HAL_GPIO_WritePin(SPEED1_COIL_GPIO_Port,SPEED1_COIL_Pin,RESET);
			  HAL_GPIO_WritePin(SPEED2_COIL_GPIO_Port,SPEED2_COIL_Pin,RESET);
 8002096:	2200      	movs	r2, #0
 8002098:	2140      	movs	r1, #64	; 0x40
 800209a:	4806      	ldr	r0, [pc, #24]	; (80020b4 <vSetSpeed+0x90>)
 800209c:	f003 fdb9 	bl	8005c12 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SPEED3_COIL_GPIO_Port,SPEED3_COIL_Pin,RESET);
 80020a0:	2200      	movs	r2, #0
 80020a2:	2180      	movs	r1, #128	; 0x80
 80020a4:	4803      	ldr	r0, [pc, #12]	; (80020b4 <vSetSpeed+0x90>)
 80020a6:	f003 fdb4 	bl	8005c12 <HAL_GPIO_WritePin>
			  break;
 80020aa:	bf00      	nop
	  }
}
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40011000 	.word	0x40011000

080020b8 <Mot_getFanSpeed>:

Mot_FanSpeed Mot_getFanSpeed() {
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return plenumSpeed;
 80020bc:	4b02      	ldr	r3, [pc, #8]	; (80020c8 <Mot_getFanSpeed+0x10>)
 80020be:	781b      	ldrb	r3, [r3, #0]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr
 80020c8:	200000f0 	.word	0x200000f0

080020cc <StepperMotorProdTest>:
	  }
  plenumPreviousSpeed = plenumSpeed;
}

void StepperMotorProdTest(motor_t MotorId)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	71fb      	strb	r3, [r7, #7]
	// on ouvre jusqu'à ce que la limite switch soit inactive,
	// on ferme jusqu'à ce qu'elle soit active
	//on va au max et on ferme sur la switch
	//on ouvre à 25% et on désactive les moteurs.

	vSetStepperMotorDirection(MotorId, Opening);
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	2101      	movs	r1, #1
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff ff56 	bl	8001f8c <vSetStepperMotorDirection>
	vEnableStepper(MotorId);
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fe9a 	bl	8001e1c <vEnableStepper>
	while(vLimitSwitchActive(MotorId))
 80020e8:	e006      	b.n	80020f8 <StepperMotorProdTest+0x2c>
	{
		vToggleOneStep(MotorId);
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff fe0b 	bl	8001d08 <vToggleOneStep>
		osDelay(5);
 80020f2:	2005      	movs	r0, #5
 80020f4:	f007 ff85 	bl	800a002 <osDelay>
	while(vLimitSwitchActive(MotorId))
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff fe52 	bl	8001da4 <vLimitSwitchActive>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f1      	bne.n	80020ea <StepperMotorProdTest+0x1e>
	}
	vSetStepperMotorDirection(MotorId, Closing);
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	2100      	movs	r1, #0
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff ff3e 	bl	8001f8c <vSetStepperMotorDirection>
	while(!vLimitSwitchActive(MotorId))
 8002110:	e006      	b.n	8002120 <StepperMotorProdTest+0x54>
	{
		vToggleOneStep(MotorId);
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff fdf7 	bl	8001d08 <vToggleOneStep>
		osDelay(5);
 800211a:	2005      	movs	r0, #5
 800211c:	f007 ff71 	bl	800a002 <osDelay>
	while(!vLimitSwitchActive(MotorId))
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff fe3e 	bl	8001da4 <vLimitSwitchActive>
 8002128:	4603      	mov	r3, r0
 800212a:	f083 0301 	eor.w	r3, r3, #1
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1ee      	bne.n	8002112 <StepperMotorProdTest+0x46>
	}
	vSetStepperMotorDirection(MotorId, Opening);
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	2101      	movs	r1, #1
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ff27 	bl	8001f8c <vSetStepperMotorDirection>
	int stepToFull;
	stepToFull = (MotorId == PrimaryStepper)?STEP_RANGE_PRIMARY:STEP_RANGE_GRILL;
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <StepperMotorProdTest+0x7c>
 8002144:	23bb      	movs	r3, #187	; 0xbb
 8002146:	e000      	b.n	800214a <StepperMotorProdTest+0x7e>
 8002148:	2364      	movs	r3, #100	; 0x64
 800214a:	60bb      	str	r3, [r7, #8]
	int i;
	for (i=0;i<=stepToFull;i++)
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	e009      	b.n	8002166 <StepperMotorProdTest+0x9a>
	{
		vToggleOneStep(MotorId);
 8002152:	79fb      	ldrb	r3, [r7, #7]
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff fdd7 	bl	8001d08 <vToggleOneStep>
		osDelay(5);
 800215a:	2005      	movs	r0, #5
 800215c:	f007 ff51 	bl	800a002 <osDelay>
	for (i=0;i<=stepToFull;i++)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	3301      	adds	r3, #1
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	429a      	cmp	r2, r3
 800216c:	ddf1      	ble.n	8002152 <StepperMotorProdTest+0x86>
	}
	vSetStepperMotorDirection(MotorId, Closing);
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	2100      	movs	r1, #0
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff ff0a 	bl	8001f8c <vSetStepperMotorDirection>
	for (i=0;i<=stepToFull;i++)
 8002178:	2300      	movs	r3, #0
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	e009      	b.n	8002192 <StepperMotorProdTest+0xc6>
	{
		vToggleOneStep(MotorId);
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff fdc1 	bl	8001d08 <vToggleOneStep>
		osDelay(5);
 8002186:	2005      	movs	r0, #5
 8002188:	f007 ff3b 	bl	800a002 <osDelay>
	for (i=0;i<=stepToFull;i++)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	3301      	adds	r3, #1
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	429a      	cmp	r2, r3
 8002198:	ddf1      	ble.n	800217e <StepperMotorProdTest+0xb2>
	}
	//repeat for proper 0
	vSetStepperMotorDirection(MotorId, Opening);
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	2101      	movs	r1, #1
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fef4 	bl	8001f8c <vSetStepperMotorDirection>
	while(vLimitSwitchActive(MotorId))
 80021a4:	e006      	b.n	80021b4 <StepperMotorProdTest+0xe8>
	{
		vToggleOneStep(MotorId);
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fdad 	bl	8001d08 <vToggleOneStep>
		osDelay(5);
 80021ae:	2005      	movs	r0, #5
 80021b0:	f007 ff27 	bl	800a002 <osDelay>
	while(vLimitSwitchActive(MotorId))
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fdf4 	bl	8001da4 <vLimitSwitchActive>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f1      	bne.n	80021a6 <StepperMotorProdTest+0xda>
	}
	vSetStepperMotorDirection(MotorId, Closing);
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	2100      	movs	r1, #0
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff fee0 	bl	8001f8c <vSetStepperMotorDirection>
	while(!vLimitSwitchActive(MotorId))
 80021cc:	e006      	b.n	80021dc <StepperMotorProdTest+0x110>
	{
		vToggleOneStep(MotorId);
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff fd99 	bl	8001d08 <vToggleOneStep>
		osDelay(5);
 80021d6:	2005      	movs	r0, #5
 80021d8:	f007 ff13 	bl	800a002 <osDelay>
	while(!vLimitSwitchActive(MotorId))
 80021dc:	79fb      	ldrb	r3, [r7, #7]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff fde0 	bl	8001da4 <vLimitSwitchActive>
 80021e4:	4603      	mov	r3, r0
 80021e6:	f083 0301 	eor.w	r3, r3, #1
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1ee      	bne.n	80021ce <StepperMotorProdTest+0x102>
	}
	vSetStepperMotorDirection(MotorId, Opening);
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	2101      	movs	r1, #1
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff fec9 	bl	8001f8c <vSetStepperMotorDirection>
	for (i=0;i<=stepToFull/3;i++)
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	e009      	b.n	8002214 <StepperMotorProdTest+0x148>
	{
		vToggleOneStep(MotorId);
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fd80 	bl	8001d08 <vToggleOneStep>
		osDelay(5);
 8002208:	2005      	movs	r0, #5
 800220a:	f007 fefa 	bl	800a002 <osDelay>
	for (i=0;i<=stepToFull/3;i++)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	3301      	adds	r3, #1
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	4a08      	ldr	r2, [pc, #32]	; (8002238 <StepperMotorProdTest+0x16c>)
 8002218:	fb82 1203 	smull	r1, r2, r2, r3
 800221c:	17db      	asrs	r3, r3, #31
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	429a      	cmp	r2, r3
 8002224:	ddec      	ble.n	8002200 <StepperMotorProdTest+0x134>
	}
	vDisableStepper(MotorId);
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fe83 	bl	8001f34 <vDisableStepper>
}
 800222e:	bf00      	nop
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	55555556 	.word	0x55555556

0800223c <AllMotorToZero>:
void AllMotorToZero()
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
	int i=0;
 8002242:	2300      	movs	r3, #0
 8002244:	607b      	str	r3, [r7, #4]

	for(i=0;i<NumberOfMotors;i++)
 8002246:	2300      	movs	r3, #0
 8002248:	607b      	str	r3, [r7, #4]
 800224a:	e03d      	b.n	80022c8 <AllMotorToZero+0x8c>
	{
		vEnableStepper(i);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	b2db      	uxtb	r3, r3
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff fde3 	bl	8001e1c <vEnableStepper>
		vSetStepperMotorDirection(i, Opening);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2101      	movs	r1, #1
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff fe95 	bl	8001f8c <vSetStepperMotorDirection>
		while(vLimitSwitchActive(i))
 8002262:	e007      	b.n	8002274 <AllMotorToZero+0x38>
		{
			vToggleOneStep(i);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	b2db      	uxtb	r3, r3
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff fd4d 	bl	8001d08 <vToggleOneStep>
			osDelay(5);
 800226e:	2005      	movs	r0, #5
 8002270:	f007 fec7 	bl	800a002 <osDelay>
		while(vLimitSwitchActive(i))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	b2db      	uxtb	r3, r3
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff fd93 	bl	8001da4 <vLimitSwitchActive>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1ef      	bne.n	8002264 <AllMotorToZero+0x28>
		}
		vSetStepperMotorDirection(i, Closing);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2100      	movs	r1, #0
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fe7e 	bl	8001f8c <vSetStepperMotorDirection>
		while(!vLimitSwitchActive(i))
 8002290:	e007      	b.n	80022a2 <AllMotorToZero+0x66>
		{
			vToggleOneStep(i);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fd36 	bl	8001d08 <vToggleOneStep>
			osDelay(5);
 800229c:	2005      	movs	r0, #5
 800229e:	f007 feb0 	bl	800a002 <osDelay>
		while(!vLimitSwitchActive(i))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fd7c 	bl	8001da4 <vLimitSwitchActive>
 80022ac:	4603      	mov	r3, r0
 80022ae:	f083 0301 	eor.w	r3, r3, #1
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1ec      	bne.n	8002292 <AllMotorToZero+0x56>
		}
		vDisableStepper(i);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fe39 	bl	8001f34 <vDisableStepper>
	for(i=0;i<NumberOfMotors;i++)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	3301      	adds	r3, #1
 80022c6:	607b      	str	r3, [r7, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	ddbe      	ble.n	800224c <AllMotorToZero+0x10>
	}
}
 80022ce:	bf00      	nop
 80022d0:	bf00      	nop
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <initPID>:
    return (pTerm + dTerm + iTerm); //iTerm +

}

void initPID(PIDtype* pid, float ki, float kd, float kp,int iErrorMax, int iErrorMin)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
 80022e4:	603b      	str	r3, [r7, #0]
	pid->dLastValue = 0;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
	pid->iErrorMax = iErrorMax;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	609a      	str	r2, [r3, #8]
	pid->iErrorMin = iErrorMin;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	69fa      	ldr	r2, [r7, #28]
 80022f6:	60da      	str	r2, [r3, #12]
	pid->previousError = 0;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	611a      	str	r2, [r3, #16]
	pid->kd = kd;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	61da      	str	r2, [r3, #28]
	pid->ki = ki;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	619a      	str	r2, [r3, #24]
	pid->kp = kp;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	615a      	str	r2, [r3, #20]
	pid->PIDPosition = 0;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	621a      	str	r2, [r3, #32]
}
 8002316:	bf00      	nop
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr

08002320 <TestButtonWalkthrough>:
//static Test* pTestState = &TestList[MOTOR_SPEED1_TEST];
static Test TestState = COMPLETED;
Test getTestState();

void TestButtonWalkthrough(Test* pteststate)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
	static int debounceCounter=0;

	//function used to "harshly" debounce with timer and stuff for production testing
	if(GPIO_PIN_SET==HAL_GPIO_ReadPin(Button_Input_GPIO_Port,Button_Input_Pin))
 8002328:	f44f 7180 	mov.w	r1, #256	; 0x100
 800232c:	4819      	ldr	r0, [pc, #100]	; (8002394 <TestButtonWalkthrough+0x74>)
 800232e:	f003 fc59 	bl	8005be4 <HAL_GPIO_ReadPin>
 8002332:	4603      	mov	r3, r0
 8002334:	2b01      	cmp	r3, #1
 8002336:	d125      	bne.n	8002384 <TestButtonWalkthrough+0x64>
	{
		debounceCounter++;
 8002338:	4b17      	ldr	r3, [pc, #92]	; (8002398 <TestButtonWalkthrough+0x78>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	3301      	adds	r3, #1
 800233e:	4a16      	ldr	r2, [pc, #88]	; (8002398 <TestButtonWalkthrough+0x78>)
 8002340:	6013      	str	r3, [r2, #0]
		if(debounceCounter > 1)
 8002342:	4b15      	ldr	r3, [pc, #84]	; (8002398 <TestButtonWalkthrough+0x78>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2b01      	cmp	r3, #1
 8002348:	dd1f      	ble.n	800238a <TestButtonWalkthrough+0x6a>
		{
			(*pteststate)++; //increment the test sequence.
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	3301      	adds	r3, #1
 8002350:	b2da      	uxtb	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	701a      	strb	r2, [r3, #0]
			if(*pteststate >=NB_OF_TEST)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b08      	cmp	r3, #8
 800235c:	d905      	bls.n	800236a <TestButtonWalkthrough+0x4a>
			{
				*pteststate = 0;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	701a      	strb	r2, [r3, #0]
				Algo_setState(ZEROING_STEPPER);
 8002364:	2000      	movs	r0, #0
 8002366:	f001 fe0d 	bl	8003f84 <Algo_setState>
			}
			debounceCounter = 0 ;
 800236a:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <TestButtonWalkthrough+0x78>)
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
			while(GPIO_PIN_SET==HAL_GPIO_ReadPin(Button_Input_GPIO_Port,Button_Input_Pin)){}; // stay here if button is maintained
 8002370:	bf00      	nop
 8002372:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002376:	4807      	ldr	r0, [pc, #28]	; (8002394 <TestButtonWalkthrough+0x74>)
 8002378:	f003 fc34 	bl	8005be4 <HAL_GPIO_ReadPin>
 800237c:	4603      	mov	r3, r0
 800237e:	2b01      	cmp	r3, #1
 8002380:	d0f7      	beq.n	8002372 <TestButtonWalkthrough+0x52>
	}
	else
	{
		debounceCounter =0;
	}
}
 8002382:	e002      	b.n	800238a <TestButtonWalkthrough+0x6a>
		debounceCounter =0;
 8002384:	4b04      	ldr	r3, [pc, #16]	; (8002398 <TestButtonWalkthrough+0x78>)
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40010c00 	.word	0x40010c00
 8002398:	200000f4 	.word	0x200000f4

0800239c <TestRunner>:

void TestRunner()
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
	//pTestState = &TestList[MOTOR_SPEED1_TEST];
	// we are going to use the status led to encode the test step

	switch (TestState) {
 80023a0:	4b2c      	ldr	r3, [pc, #176]	; (8002454 <TestRunner+0xb8>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d851      	bhi.n	800244c <TestRunner+0xb0>
 80023a8:	a201      	add	r2, pc, #4	; (adr r2, 80023b0 <TestRunner+0x14>)
 80023aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ae:	bf00      	nop
 80023b0:	080023d5 	.word	0x080023d5
 80023b4:	080023dd 	.word	0x080023dd
 80023b8:	080023eb 	.word	0x080023eb
 80023bc:	080023f9 	.word	0x080023f9
 80023c0:	08002401 	.word	0x08002401
 80023c4:	08002409 	.word	0x08002409
 80023c8:	08002423 	.word	0x08002423
 80023cc:	0800243d 	.word	0x0800243d
 80023d0:	08002445 	.word	0x08002445
		case COMPLETED:
			//setStatusBit(TestState);
			TestButtonWalkthrough(&TestState);
 80023d4:	481f      	ldr	r0, [pc, #124]	; (8002454 <TestRunner+0xb8>)
 80023d6:	f7ff ffa3 	bl	8002320 <TestButtonWalkthrough>
			break;
 80023da:	e038      	b.n	800244e <TestRunner+0xb2>
		case MOTOR_SPEED1_TEST:
			vSetSpeed(1);
 80023dc:	2001      	movs	r0, #1
 80023de:	f7ff fe21 	bl	8002024 <vSetSpeed>
			//setStatusBit(TestState);
			TestButtonWalkthrough(&TestState);
 80023e2:	481c      	ldr	r0, [pc, #112]	; (8002454 <TestRunner+0xb8>)
 80023e4:	f7ff ff9c 	bl	8002320 <TestButtonWalkthrough>
			break;
 80023e8:	e031      	b.n	800244e <TestRunner+0xb2>
		case THERMO_REAR_TEST:
			vSetSpeed(0);
 80023ea:	2000      	movs	r0, #0
 80023ec:	f7ff fe1a 	bl	8002024 <vSetSpeed>
			//setStatusBit(1);
			TestButtonWalkthrough(&TestState);
 80023f0:	4818      	ldr	r0, [pc, #96]	; (8002454 <TestRunner+0xb8>)
 80023f2:	f7ff ff95 	bl	8002320 <TestButtonWalkthrough>
			break;
 80023f6:	e02a      	b.n	800244e <TestRunner+0xb2>
		case THERMO_BAFFLE_TEST:
			//setStatusBit(2);
			TestButtonWalkthrough(&TestState);
 80023f8:	4816      	ldr	r0, [pc, #88]	; (8002454 <TestRunner+0xb8>)
 80023fa:	f7ff ff91 	bl	8002320 <TestButtonWalkthrough>
			break;
 80023fe:	e026      	b.n	800244e <TestRunner+0xb2>
		case PLENUM_RTD_TEST:
			//setStatusBit(3);
			TestButtonWalkthrough(&TestState);
 8002400:	4814      	ldr	r0, [pc, #80]	; (8002454 <TestRunner+0xb8>)
 8002402:	f7ff ff8d 	bl	8002320 <TestButtonWalkthrough>
			break;
 8002406:	e022      	b.n	800244e <TestRunner+0xb2>
		case STEPPER_MOTOR1_TEST:
			//setStatusBit(4);
			StepperMotorProdTest(PrimaryStepper);
 8002408:	2000      	movs	r0, #0
 800240a:	f7ff fe5f 	bl	80020cc <StepperMotorProdTest>
			TestButtonWalkthrough(&TestState);
 800240e:	4811      	ldr	r0, [pc, #68]	; (8002454 <TestRunner+0xb8>)
 8002410:	f7ff ff86 	bl	8002320 <TestButtonWalkthrough>
			TestState++;
 8002414:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <TestRunner+0xb8>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	3301      	adds	r3, #1
 800241a:	b2da      	uxtb	r2, r3
 800241c:	4b0d      	ldr	r3, [pc, #52]	; (8002454 <TestRunner+0xb8>)
 800241e:	701a      	strb	r2, [r3, #0]
			break;
 8002420:	e015      	b.n	800244e <TestRunner+0xb2>
		case STEPPER_MOTOR2_TEST:
			//setStatusBit(5);
			StepperMotorProdTest(BoostStepper);
 8002422:	2001      	movs	r0, #1
 8002424:	f7ff fe52 	bl	80020cc <StepperMotorProdTest>
			TestButtonWalkthrough(&TestState);
 8002428:	480a      	ldr	r0, [pc, #40]	; (8002454 <TestRunner+0xb8>)
 800242a:	f7ff ff79 	bl	8002320 <TestButtonWalkthrough>
			TestState++;
 800242e:	4b09      	ldr	r3, [pc, #36]	; (8002454 <TestRunner+0xb8>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	3301      	adds	r3, #1
 8002434:	b2da      	uxtb	r2, r3
 8002436:	4b07      	ldr	r3, [pc, #28]	; (8002454 <TestRunner+0xb8>)
 8002438:	701a      	strb	r2, [r3, #0]
			break;
 800243a:	e008      	b.n	800244e <TestRunner+0xb2>
		case THERMOSTAT_TEST:
			//setStatusBit(6);
			TestButtonWalkthrough(&TestState);
 800243c:	4805      	ldr	r0, [pc, #20]	; (8002454 <TestRunner+0xb8>)
 800243e:	f7ff ff6f 	bl	8002320 <TestButtonWalkthrough>
			break;
 8002442:	e004      	b.n	800244e <TestRunner+0xb2>
		case INTERLOCK_TEST:
			//setStatusBit(7);
			TestButtonWalkthrough(&TestState);
 8002444:	4803      	ldr	r0, [pc, #12]	; (8002454 <TestRunner+0xb8>)
 8002446:	f7ff ff6b 	bl	8002320 <TestButtonWalkthrough>
			break;
 800244a:	e000      	b.n	800244e <TestRunner+0xb2>
		default:
			break;
 800244c:	bf00      	nop
	}
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	200000f1 	.word	0x200000f1

08002458 <getTestState>:
Test getTestState()
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
	return TestState;
 800245c:	4b02      	ldr	r3, [pc, #8]	; (8002468 <getTestState+0x10>)
 800245e:	781b      	ldrb	r3, [r3, #0]
}
 8002460:	4618      	mov	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr
 8002468:	200000f1 	.word	0x200000f1
 800246c:	00000000 	.word	0x00000000

08002470 <TemperatureManager>:
/* USER CODE END Header_TemperatureManager */
uint8_t dummy =0;


void TemperatureManager(void const * argument)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b096      	sub	sp, #88	; 0x58
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TemperatureManager */
	osSemaphoreDef(I2CSemaphoreHandle);
 8002478:	2300      	movs	r3, #0
 800247a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800247c:	2300      	movs	r3, #0
 800247e:	643b      	str	r3, [r7, #64]	; 0x40
    I2CSemaphoreHandle = osSemaphoreCreate(osSemaphore(I2CSemaphoreHandle), 1);
 8002480:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002484:	2101      	movs	r1, #1
 8002486:	4618      	mov	r0, r3
 8002488:	f007 fe40 	bl	800a10c <osSemaphoreCreate>
 800248c:	4603      	mov	r3, r0
 800248e:	4ab6      	ldr	r2, [pc, #728]	; (8002768 <TemperatureManager+0x2f8>)
 8002490:	6013      	str	r3, [r2, #0]
    osSemaphoreWait(I2CSemaphoreHandle,1); //decrement semaphore value for the lack of way to create a semaphore with a count of 0.
 8002492:	4bb5      	ldr	r3, [pc, #724]	; (8002768 <TemperatureManager+0x2f8>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2101      	movs	r1, #1
 8002498:	4618      	mov	r0, r3
 800249a:	f007 fe69 	bl	800a170 <osSemaphoreWait>

    uint8_t ADCConfigByte[NUMBER_OF_ADC_CH] = {0x9F,0xBF,0xDC,0xFF}; // Channel 3 is for RTD,Gain=1 //channel 4 is for the pressure sensor, Gain =1
 800249e:	4bb3      	ldr	r3, [pc, #716]	; (800276c <TemperatureManager+0x2fc>)
 80024a0:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t i32tempReading=0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	657b      	str	r3, [r7, #84]	; 0x54
    int i =0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	653b      	str	r3, [r7, #80]	; 0x50
    float AdcArray[NUMBER_OF_ADC_CH];
    float TemperatureCelsius[NUMBER_OF_ADC_CH-1];
    float TemperatureFarenheit[NUMBER_OF_ADC_CH-1];
	float tColdJunction;
	float temp1;
    uint32_t PreviousWakeTime = osKernelSysTick(); //must be nitialized before first use
 80024aa:	f007 fd4e 	bl	8009f4a <osKernelSysTick>
 80024ae:	4603      	mov	r3, r0
 80024b0:	60bb      	str	r3, [r7, #8]
    bool DataReady;

    /* Infinite loop */
    for(;;)
    {
    	osDelayUntil(&PreviousWakeTime,5000);
 80024b2:	f107 0308 	add.w	r3, r7, #8
 80024b6:	f241 3188 	movw	r1, #5000	; 0x1388
 80024ba:	4618      	mov	r0, r3
 80024bc:	f007 fedc 	bl	800a278 <osDelayUntil>
    	//HAL_GPIO_TogglePin(USB_LED_GPIO_Port,USB_LED_Pin);

    	//coldjunction temperature
		//temp1 = uCAdcData[1]*3.3/4096;  //Vout=TC x TA + VoC where TC = 10mV/C V0C->500mV
		temp1 = 0.800;		///TODO: fetch this value from external ADC (I2C)
 80024c0:	4bab      	ldr	r3, [pc, #684]	; (8002770 <TemperatureManager+0x300>)
 80024c2:	64bb      	str	r3, [r7, #72]	; 0x48
		tColdJunction = (temp1-0.500)/.010;
 80024c4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80024c6:	f7fe f817 	bl	80004f8 <__aeabi_f2d>
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	4ba9      	ldr	r3, [pc, #676]	; (8002774 <TemperatureManager+0x304>)
 80024d0:	f7fd feb2 	bl	8000238 <__aeabi_dsub>
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	4610      	mov	r0, r2
 80024da:	4619      	mov	r1, r3
 80024dc:	a39e      	add	r3, pc, #632	; (adr r3, 8002758 <TemperatureManager+0x2e8>)
 80024de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e2:	f7fe f98b 	bl	80007fc <__aeabi_ddiv>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	4610      	mov	r0, r2
 80024ec:	4619      	mov	r1, r3
 80024ee:	f7fe fb0b 	bl	8000b08 <__aeabi_d2f>
 80024f2:	4603      	mov	r3, r0
 80024f4:	647b      	str	r3, [r7, #68]	; 0x44

		for (i=FrontThermocouple;i<PlenumRtd;i++) //we don't need to read ADC input 3 and 4
 80024f6:	2300      	movs	r3, #0
 80024f8:	653b      	str	r3, [r7, #80]	; 0x50
 80024fa:	e0bf      	b.n	800267c <TemperatureManager+0x20c>
		{

			HAL_I2C_Master_Transmit_IT(&hi2c1, ADC_ADDRESS_7BIT,&ADCConfigByte[i],1);
 80024fc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002502:	441a      	add	r2, r3
 8002504:	2301      	movs	r3, #1
 8002506:	21d0      	movs	r1, #208	; 0xd0
 8002508:	489b      	ldr	r0, [pc, #620]	; (8002778 <TemperatureManager+0x308>)
 800250a:	f003 fd27 	bl	8005f5c <HAL_I2C_Master_Transmit_IT>
			//osSemaphoreWait(I2CSemaphoreHandle,osWaitForever); //wait forever @@@@ to restart and I2C transaction in case of hang up sys
			if(osErrorOS == osSemaphoreWait(I2CSemaphoreHandle,1000)) //wait 500ms for an answer or retry
 800250e:	4b96      	ldr	r3, [pc, #600]	; (8002768 <TemperatureManager+0x2f8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002516:	4618      	mov	r0, r3
 8002518:	f007 fe2a 	bl	800a170 <osSemaphoreWait>
 800251c:	4603      	mov	r3, r0
 800251e:	2bff      	cmp	r3, #255	; 0xff
 8002520:	d10f      	bne.n	8002542 <TemperatureManager+0xd2>
			{
				//clearly something is wrong Abort the transmission
				//HAL_GPIO_WritePin(STATUS_LED0_GPIO_Port,STATUS_LED0_Pin,RESET);
				HAL_I2C_Master_Abort_IT(&hi2c1,ADC_ADDRESS_7BIT);
 8002522:	21d0      	movs	r1, #208	; 0xd0
 8002524:	4894      	ldr	r0, [pc, #592]	; (8002778 <TemperatureManager+0x308>)
 8002526:	f003 fe69 	bl	80061fc <HAL_I2C_Master_Abort_IT>
				HAL_I2C_DeInit(&hi2c1);
 800252a:	4893      	ldr	r0, [pc, #588]	; (8002778 <TemperatureManager+0x308>)
 800252c:	f003 fce6 	bl	8005efc <HAL_I2C_DeInit>
				osDelay(100);
 8002530:	2064      	movs	r0, #100	; 0x64
 8002532:	f007 fd66 	bl	800a002 <osDelay>
				MX_I2C1_Init();
 8002536:	f002 f849 	bl	80045cc <MX_I2C1_Init>
				osDelay(100);
 800253a:	2064      	movs	r0, #100	; 0x64
 800253c:	f007 fd61 	bl	800a002 <osDelay>
 8002540:	e02d      	b.n	800259e <TemperatureManager+0x12e>
			}
			else
			{
				//do something in the callback
				HAL_GPIO_WritePin(STATUS_LED1_GPIO_Port,STATUS_LED1_Pin,RESET);
 8002542:	2200      	movs	r2, #0
 8002544:	2108      	movs	r1, #8
 8002546:	488d      	ldr	r0, [pc, #564]	; (800277c <TemperatureManager+0x30c>)
 8002548:	f003 fb63 	bl	8005c12 <HAL_GPIO_WritePin>
				do{
					DataReady = false;
 800254c:	2300      	movs	r3, #0
 800254e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					osDelay(300); //wait to give the chance to the ADC to complete the conversion 1/3.75 = 266ms
 8002552:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002556:	f007 fd54 	bl	800a002 <osDelay>
					HAL_I2C_Master_Receive_IT(&hi2c1, ADC_ADDRESS_7BIT,adcData,4);
 800255a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800255e:	2304      	movs	r3, #4
 8002560:	21d0      	movs	r1, #208	; 0xd0
 8002562:	4885      	ldr	r0, [pc, #532]	; (8002778 <TemperatureManager+0x308>)
 8002564:	f003 fd9e 	bl	80060a4 <HAL_I2C_Master_Receive_IT>
					//osSemaphoreWait(I2CSemaphoreHandle,osWaitForever); //wait forever @@@@ to restart and I2C transaction in case of hang up sys
					if(osErrorOS == osSemaphoreWait(I2CSemaphoreHandle,500)) //wait 500ms for an answer or retry
 8002568:	4b7f      	ldr	r3, [pc, #508]	; (8002768 <TemperatureManager+0x2f8>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002570:	4618      	mov	r0, r3
 8002572:	f007 fdfd 	bl	800a170 <osSemaphoreWait>
 8002576:	4603      	mov	r3, r0
 8002578:	2bff      	cmp	r3, #255	; 0xff
 800257a:	d008      	beq.n	800258e <TemperatureManager+0x11e>
					{
						continue;
					}
					else
					{
						DataReady = (IsDataNew(adcData[3]));
 800257c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002580:	b25b      	sxtb	r3, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	b2db      	uxtb	r3, r3
 8002586:	09db      	lsrs	r3, r3, #7
 8002588:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800258c:	e000      	b.n	8002590 <TemperatureManager+0x120>
						continue;
 800258e:	bf00      	nop
					}

				}while (!DataReady);
 8002590:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002594:	f083 0301 	eor.w	r3, r3, #1
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1d6      	bne.n	800254c <TemperatureManager+0xdc>
			}
			i32tempReading = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	657b      	str	r3, [r7, #84]	; 0x54
			i32tempReading = (adcData[0] << 30) + (adcData[1] << 22)  + (adcData[2] << 14); // justify the result for 32bit storage
 80025a2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025a6:	079a      	lsls	r2, r3, #30
 80025a8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025ac:	059b      	lsls	r3, r3, #22
 80025ae:	441a      	add	r2, r3
 80025b0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80025b4:	039b      	lsls	r3, r3, #14
 80025b6:	4413      	add	r3, r2
 80025b8:	657b      	str	r3, [r7, #84]	; 0x54
			if (i32tempReading < 0){
 80025ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025bc:	2b00      	cmp	r3, #0
 80025be:	da02      	bge.n	80025c6 <TemperatureManager+0x156>
				i32tempReading = -i32tempReading;
 80025c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c2:	425b      	negs	r3, r3
 80025c4:	657b      	str	r3, [r7, #84]	; 0x54
			}
			i32tempReading = (i32tempReading) >> 14;
 80025c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c8:	139b      	asrs	r3, r3, #14
 80025ca:	657b      	str	r3, [r7, #84]	; 0x54

			//AdcArray[i] = ((float)(abs(i32tempReading))*15.625)/8; //15.625uV par bit  gain = 8
			AdcArray[i] = ((float)(i32tempReading)*15.625)/8; //15.625uV par bit  gain = 8
 80025cc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80025ce:	f7fe fba5 	bl	8000d1c <__aeabi_i2f>
 80025d2:	4603      	mov	r3, r0
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fd ff8f 	bl	80004f8 <__aeabi_f2d>
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	4b68      	ldr	r3, [pc, #416]	; (8002780 <TemperatureManager+0x310>)
 80025e0:	f7fd ffe2 	bl	80005a8 <__aeabi_dmul>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4610      	mov	r0, r2
 80025ea:	4619      	mov	r1, r3
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	4b64      	ldr	r3, [pc, #400]	; (8002784 <TemperatureManager+0x314>)
 80025f2:	f7fe f903 	bl	80007fc <__aeabi_ddiv>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4610      	mov	r0, r2
 80025fc:	4619      	mov	r1, r3
 80025fe:	f7fe fa83 	bl	8000b08 <__aeabi_d2f>
 8002602:	4602      	mov	r2, r0
 8002604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800260c:	440b      	add	r3, r1
 800260e:	f843 2c34 	str.w	r2, [r3, #-52]
			TemperatureCelsius[i] = uVtoDegreeCTypeK(AdcArray[i], tColdJunction); //6.7//26.1 //board is self heating to 7.3 above ambient
 8002612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800261a:	4413      	add	r3, r2
 800261c:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8002620:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002622:	4618      	mov	r0, r3
 8002624:	f000 f8f0 	bl	8002808 <uVtoDegreeCTypeK>
 8002628:	4602      	mov	r2, r0
 800262a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002632:	440b      	add	r3, r1
 8002634:	f843 2c40 	str.w	r2, [r3, #-64]
			TemperatureFarenheit[i] = TemperatureCelsius[i]*9/5+32;
 8002638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002640:	4413      	add	r3, r2
 8002642:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8002646:	4950      	ldr	r1, [pc, #320]	; (8002788 <TemperatureManager+0x318>)
 8002648:	4618      	mov	r0, r3
 800264a:	f7fe fbbb 	bl	8000dc4 <__aeabi_fmul>
 800264e:	4603      	mov	r3, r0
 8002650:	494e      	ldr	r1, [pc, #312]	; (800278c <TemperatureManager+0x31c>)
 8002652:	4618      	mov	r0, r3
 8002654:	f7fe fc6a 	bl	8000f2c <__aeabi_fdiv>
 8002658:	4603      	mov	r3, r0
 800265a:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 800265e:	4618      	mov	r0, r3
 8002660:	f7fe faa8 	bl	8000bb4 <__addsf3>
 8002664:	4603      	mov	r3, r0
 8002666:	461a      	mov	r2, r3
 8002668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002670:	440b      	add	r3, r1
 8002672:	f843 2c4c 	str.w	r2, [r3, #-76]
		for (i=FrontThermocouple;i<PlenumRtd;i++) //we don't need to read ADC input 3 and 4
 8002676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002678:	3301      	adds	r3, #1
 800267a:	653b      	str	r3, [r7, #80]	; 0x50
 800267c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800267e:	2b01      	cmp	r3, #1
 8002680:	f77f af3c 	ble.w	80024fc <TemperatureManager+0x8c>

		}

    	//temp1 = uCAdcData[0]*3.3/4096; //12bit internal ADC reference to 3.3V
		temp1 = 2.0;
 8002684:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002688:	64bb      	str	r3, [r7, #72]	; 0x48
		if(temp1 < 1.65)
 800268a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800268c:	f7fd ff34 	bl	80004f8 <__aeabi_f2d>
 8002690:	a333      	add	r3, pc, #204	; (adr r3, 8002760 <TemperatureManager+0x2f0>)
 8002692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002696:	f7fe f9f9 	bl	8000a8c <__aeabi_dcmplt>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d009      	beq.n	80026b4 <TemperatureManager+0x244>
		{
			//polynome appoximation go nuts below that voltage range
			TemperatureCelsius[i] = 0;
 80026a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80026a8:	4413      	add	r3, r2
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	f843 2c40 	str.w	r2, [r3, #-64]
 80026b2:	e00a      	b.n	80026ca <TemperatureManager+0x25a>
		}
		else
		{
			TemperatureCelsius[i] = VtoDegreeCRtd(temp1);
 80026b4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80026b6:	f000 fbcb 	bl	8002e50 <VtoDegreeCRtd>
 80026ba:	4602      	mov	r2, r0
 80026bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80026c4:	440b      	add	r3, r1
 80026c6:	f843 2c40 	str.w	r2, [r3, #-64]
		}
		TemperatureFarenheit[i] = TemperatureCelsius[i]*9/5+32;
 80026ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80026d2:	4413      	add	r3, r2
 80026d4:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80026d8:	492b      	ldr	r1, [pc, #172]	; (8002788 <TemperatureManager+0x318>)
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fe fb72 	bl	8000dc4 <__aeabi_fmul>
 80026e0:	4603      	mov	r3, r0
 80026e2:	492a      	ldr	r1, [pc, #168]	; (800278c <TemperatureManager+0x31c>)
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fe fc21 	bl	8000f2c <__aeabi_fdiv>
 80026ea:	4603      	mov	r3, r0
 80026ec:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7fe fa5f 	bl	8000bb4 <__addsf3>
 80026f6:	4603      	mov	r3, r0
 80026f8:	461a      	mov	r2, r3
 80026fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002702:	440b      	add	r3, r1
 8002704:	f843 2c4c 	str.w	r2, [r3, #-76]

		Algo_setBaffleTemp((int)(TemperatureFarenheit[FrontThermocouple]*10));
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4921      	ldr	r1, [pc, #132]	; (8002790 <TemperatureManager+0x320>)
 800270c:	4618      	mov	r0, r3
 800270e:	f7fe fb59 	bl	8000dc4 <__aeabi_fmul>
 8002712:	4603      	mov	r3, r0
 8002714:	4618      	mov	r0, r3
 8002716:	f7fe fd1b 	bl	8001150 <__aeabi_f2iz>
 800271a:	4603      	mov	r3, r0
 800271c:	4618      	mov	r0, r3
 800271e:	f001 fc4b 	bl	8003fb8 <Algo_setBaffleTemp>
		Algo_setRearTemp((int)(TemperatureFarenheit[RearThermocouple]*10));
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	491a      	ldr	r1, [pc, #104]	; (8002790 <TemperatureManager+0x320>)
 8002726:	4618      	mov	r0, r3
 8002728:	f7fe fb4c 	bl	8000dc4 <__aeabi_fmul>
 800272c:	4603      	mov	r3, r0
 800272e:	4618      	mov	r0, r3
 8002730:	f7fe fd0e 	bl	8001150 <__aeabi_f2iz>
 8002734:	4603      	mov	r3, r0
 8002736:	4618      	mov	r0, r3
 8002738:	f001 fc52 	bl	8003fe0 <Algo_setRearTemp>
		Algo_setPlenumTemp((int)(TemperatureFarenheit[PlenumRtd]*10));
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	4914      	ldr	r1, [pc, #80]	; (8002790 <TemperatureManager+0x320>)
 8002740:	4618      	mov	r0, r3
 8002742:	f7fe fb3f 	bl	8000dc4 <__aeabi_fmul>
 8002746:	4603      	mov	r3, r0
 8002748:	4618      	mov	r0, r3
 800274a:	f7fe fd01 	bl	8001150 <__aeabi_f2iz>
 800274e:	4603      	mov	r3, r0
 8002750:	4618      	mov	r0, r3
 8002752:	f001 fc67 	bl	8004024 <Algo_setPlenumTemp>
    	osDelayUntil(&PreviousWakeTime,5000);
 8002756:	e6ac      	b.n	80024b2 <TemperatureManager+0x42>
 8002758:	47ae147b 	.word	0x47ae147b
 800275c:	3f847ae1 	.word	0x3f847ae1
 8002760:	66666666 	.word	0x66666666
 8002764:	3ffa6666 	.word	0x3ffa6666
 8002768:	20002f80 	.word	0x20002f80
 800276c:	ffdcbf9f 	.word	0xffdcbf9f
 8002770:	3f4ccccd 	.word	0x3f4ccccd
 8002774:	3fe00000 	.word	0x3fe00000
 8002778:	20002f2c 	.word	0x20002f2c
 800277c:	40011000 	.word	0x40011000
 8002780:	402f4000 	.word	0x402f4000
 8002784:	40200000 	.word	0x40200000
 8002788:	41100000 	.word	0x41100000
 800278c:	40a00000 	.word	0x40a00000
 8002790:	41200000 	.word	0x41200000

08002794 <HAL_I2C_MasterTxCpltCallback>:

  	}
  /* USER CODE END TemperatureManager */
}
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(I2CSemaphoreHandle);
 800279c:	4b04      	ldr	r3, [pc, #16]	; (80027b0 <HAL_I2C_MasterTxCpltCallback+0x1c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f007 fd33 	bl	800a20c <osSemaphoreRelease>
}
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20002f80 	.word	0x20002f80

080027b4 <HAL_I2C_MasterRxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(I2CSemaphoreHandle);
 80027bc:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <HAL_I2C_MasterRxCpltCallback+0x1c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f007 fd23 	bl	800a20c <osSemaphoreRelease>
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20002f80 	.word	0x20002f80

080027d4 <HAL_I2C_ErrorCallback>:
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
	uint32_t errorcode = hi2c->ErrorCode;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	60fb      	str	r3, [r7, #12]
}
 80027e2:	bf00      	nop
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <HAL_I2C_AbortCpltCallback>:
void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
	uint32_t errorcode = hi2c->ErrorCode;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	60fb      	str	r3, [r7, #12]
}
 80027fa:	bf00      	nop
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr
 8002804:	0000      	movs	r0, r0
	...

08002808 <uVtoDegreeCTypeK>:
#define T_COEF_A0 1.185976E-1
#define T_COEF_A1 -1.183432E-4
#define T_COEF_A2 1.269686E2

float uVtoDegreeCTypeK(float uVdata,float Tref)
{
 8002808:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800280c:	b08a      	sub	sp, #40	; 0x28
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
 8002812:	6039      	str	r1, [r7, #0]
    double Vref = T_COEF_C0 + T_COEF_C1*Tref + T_COEF_C2*pow(Tref,2) + T_COEF_C3*pow(Tref,3) + T_COEF_C4*pow(Tref,4) + T_COEF_C5*pow(Tref,5) + T_COEF_C6*pow(Tref,6) + T_COEF_C7*pow(Tref,7) + T_COEF_C8*pow(Tref,8) + T_COEF_C9*pow(Tref,9)+T_COEF_A0*pow(2.718281828,T_COEF_A1*(Tref-T_COEF_A2)*(Tref-T_COEF_A2));
 8002814:	6838      	ldr	r0, [r7, #0]
 8002816:	f7fd fe6f 	bl	80004f8 <__aeabi_f2d>
 800281a:	a3cd      	add	r3, pc, #820	; (adr r3, 8002b50 <uVtoDegreeCTypeK+0x348>)
 800281c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002820:	f7fd fec2 	bl	80005a8 <__aeabi_dmul>
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	4610      	mov	r0, r2
 800282a:	4619      	mov	r1, r3
 800282c:	a3ca      	add	r3, pc, #808	; (adr r3, 8002b58 <uVtoDegreeCTypeK+0x350>)
 800282e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002832:	f7fd fd01 	bl	8000238 <__aeabi_dsub>
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	4614      	mov	r4, r2
 800283c:	461d      	mov	r5, r3
 800283e:	6838      	ldr	r0, [r7, #0]
 8002840:	f7fd fe5a 	bl	80004f8 <__aeabi_f2d>
 8002844:	f04f 0200 	mov.w	r2, #0
 8002848:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800284c:	f00b fcca 	bl	800e1e4 <pow>
 8002850:	a3c3      	add	r3, pc, #780	; (adr r3, 8002b60 <uVtoDegreeCTypeK+0x358>)
 8002852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002856:	f7fd fea7 	bl	80005a8 <__aeabi_dmul>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	4620      	mov	r0, r4
 8002860:	4629      	mov	r1, r5
 8002862:	f7fd fceb 	bl	800023c <__adddf3>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	4614      	mov	r4, r2
 800286c:	461d      	mov	r5, r3
 800286e:	6838      	ldr	r0, [r7, #0]
 8002870:	f7fd fe42 	bl	80004f8 <__aeabi_f2d>
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	4bdd      	ldr	r3, [pc, #884]	; (8002bf0 <uVtoDegreeCTypeK+0x3e8>)
 800287a:	f00b fcb3 	bl	800e1e4 <pow>
 800287e:	a3ba      	add	r3, pc, #744	; (adr r3, 8002b68 <uVtoDegreeCTypeK+0x360>)
 8002880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002884:	f7fd fe90 	bl	80005a8 <__aeabi_dmul>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4620      	mov	r0, r4
 800288e:	4629      	mov	r1, r5
 8002890:	f7fd fcd4 	bl	800023c <__adddf3>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4614      	mov	r4, r2
 800289a:	461d      	mov	r5, r3
 800289c:	6838      	ldr	r0, [r7, #0]
 800289e:	f7fd fe2b 	bl	80004f8 <__aeabi_f2d>
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	4bd3      	ldr	r3, [pc, #844]	; (8002bf4 <uVtoDegreeCTypeK+0x3ec>)
 80028a8:	f00b fc9c 	bl	800e1e4 <pow>
 80028ac:	a3b0      	add	r3, pc, #704	; (adr r3, 8002b70 <uVtoDegreeCTypeK+0x368>)
 80028ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b2:	f7fd fe79 	bl	80005a8 <__aeabi_dmul>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4620      	mov	r0, r4
 80028bc:	4629      	mov	r1, r5
 80028be:	f7fd fcbd 	bl	800023c <__adddf3>
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	4614      	mov	r4, r2
 80028c8:	461d      	mov	r5, r3
 80028ca:	6838      	ldr	r0, [r7, #0]
 80028cc:	f7fd fe14 	bl	80004f8 <__aeabi_f2d>
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	4bc8      	ldr	r3, [pc, #800]	; (8002bf8 <uVtoDegreeCTypeK+0x3f0>)
 80028d6:	f00b fc85 	bl	800e1e4 <pow>
 80028da:	a3a7      	add	r3, pc, #668	; (adr r3, 8002b78 <uVtoDegreeCTypeK+0x370>)
 80028dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e0:	f7fd fe62 	bl	80005a8 <__aeabi_dmul>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4620      	mov	r0, r4
 80028ea:	4629      	mov	r1, r5
 80028ec:	f7fd fca6 	bl	800023c <__adddf3>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4614      	mov	r4, r2
 80028f6:	461d      	mov	r5, r3
 80028f8:	6838      	ldr	r0, [r7, #0]
 80028fa:	f7fd fdfd 	bl	80004f8 <__aeabi_f2d>
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	4bbe      	ldr	r3, [pc, #760]	; (8002bfc <uVtoDegreeCTypeK+0x3f4>)
 8002904:	f00b fc6e 	bl	800e1e4 <pow>
 8002908:	a39d      	add	r3, pc, #628	; (adr r3, 8002b80 <uVtoDegreeCTypeK+0x378>)
 800290a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290e:	f7fd fe4b 	bl	80005a8 <__aeabi_dmul>
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	4620      	mov	r0, r4
 8002918:	4629      	mov	r1, r5
 800291a:	f7fd fc8f 	bl	800023c <__adddf3>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4614      	mov	r4, r2
 8002924:	461d      	mov	r5, r3
 8002926:	6838      	ldr	r0, [r7, #0]
 8002928:	f7fd fde6 	bl	80004f8 <__aeabi_f2d>
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	4bb3      	ldr	r3, [pc, #716]	; (8002c00 <uVtoDegreeCTypeK+0x3f8>)
 8002932:	f00b fc57 	bl	800e1e4 <pow>
 8002936:	a394      	add	r3, pc, #592	; (adr r3, 8002b88 <uVtoDegreeCTypeK+0x380>)
 8002938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293c:	f7fd fe34 	bl	80005a8 <__aeabi_dmul>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4620      	mov	r0, r4
 8002946:	4629      	mov	r1, r5
 8002948:	f7fd fc78 	bl	800023c <__adddf3>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4614      	mov	r4, r2
 8002952:	461d      	mov	r5, r3
 8002954:	6838      	ldr	r0, [r7, #0]
 8002956:	f7fd fdcf 	bl	80004f8 <__aeabi_f2d>
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	4ba9      	ldr	r3, [pc, #676]	; (8002c04 <uVtoDegreeCTypeK+0x3fc>)
 8002960:	f00b fc40 	bl	800e1e4 <pow>
 8002964:	a38a      	add	r3, pc, #552	; (adr r3, 8002b90 <uVtoDegreeCTypeK+0x388>)
 8002966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296a:	f7fd fe1d 	bl	80005a8 <__aeabi_dmul>
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	4620      	mov	r0, r4
 8002974:	4629      	mov	r1, r5
 8002976:	f7fd fc61 	bl	800023c <__adddf3>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	4614      	mov	r4, r2
 8002980:	461d      	mov	r5, r3
 8002982:	6838      	ldr	r0, [r7, #0]
 8002984:	f7fd fdb8 	bl	80004f8 <__aeabi_f2d>
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	4b9e      	ldr	r3, [pc, #632]	; (8002c08 <uVtoDegreeCTypeK+0x400>)
 800298e:	f00b fc29 	bl	800e1e4 <pow>
 8002992:	a381      	add	r3, pc, #516	; (adr r3, 8002b98 <uVtoDegreeCTypeK+0x390>)
 8002994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002998:	f7fd fe06 	bl	80005a8 <__aeabi_dmul>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4620      	mov	r0, r4
 80029a2:	4629      	mov	r1, r5
 80029a4:	f7fd fc4a 	bl	800023c <__adddf3>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4614      	mov	r4, r2
 80029ae:	461d      	mov	r5, r3
 80029b0:	6838      	ldr	r0, [r7, #0]
 80029b2:	f7fd fda1 	bl	80004f8 <__aeabi_f2d>
 80029b6:	a37a      	add	r3, pc, #488	; (adr r3, 8002ba0 <uVtoDegreeCTypeK+0x398>)
 80029b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029bc:	f7fd fc3c 	bl	8000238 <__aeabi_dsub>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4610      	mov	r0, r2
 80029c6:	4619      	mov	r1, r3
 80029c8:	a377      	add	r3, pc, #476	; (adr r3, 8002ba8 <uVtoDegreeCTypeK+0x3a0>)
 80029ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ce:	f7fd fdeb 	bl	80005a8 <__aeabi_dmul>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4690      	mov	r8, r2
 80029d8:	4699      	mov	r9, r3
 80029da:	6838      	ldr	r0, [r7, #0]
 80029dc:	f7fd fd8c 	bl	80004f8 <__aeabi_f2d>
 80029e0:	a36f      	add	r3, pc, #444	; (adr r3, 8002ba0 <uVtoDegreeCTypeK+0x398>)
 80029e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e6:	f7fd fc27 	bl	8000238 <__aeabi_dsub>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4640      	mov	r0, r8
 80029f0:	4649      	mov	r1, r9
 80029f2:	f7fd fdd9 	bl	80005a8 <__aeabi_dmul>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	a16d      	add	r1, pc, #436	; (adr r1, 8002bb0 <uVtoDegreeCTypeK+0x3a8>)
 80029fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a00:	f00b fbf0 	bl	800e1e4 <pow>
 8002a04:	a36c      	add	r3, pc, #432	; (adr r3, 8002bb8 <uVtoDegreeCTypeK+0x3b0>)
 8002a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0a:	f7fd fdcd 	bl	80005a8 <__aeabi_dmul>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	4620      	mov	r0, r4
 8002a14:	4629      	mov	r1, r5
 8002a16:	f7fd fc11 	bl	800023c <__adddf3>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double Vmeas = uVdata/1000; //value need to be in mV
 8002a22:	497a      	ldr	r1, [pc, #488]	; (8002c0c <uVtoDegreeCTypeK+0x404>)
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7fe fa81 	bl	8000f2c <__aeabi_fdiv>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7fd fd63 	bl	80004f8 <__aeabi_f2d>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double totalV = Vmeas + Vref;
 8002a3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a3e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a42:	f7fd fbfb 	bl	800023c <__adddf3>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	e9c7 2302 	strd	r2, r3, [r7, #8]

    double t90;
    if(totalV < 20.644)
 8002a4e:	a35c      	add	r3, pc, #368	; (adr r3, 8002bc0 <uVtoDegreeCTypeK+0x3b8>)
 8002a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a58:	f7fe f818 	bl	8000a8c <__aeabi_dcmplt>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 812a 	beq.w	8002cb8 <uVtoDegreeCTypeK+0x4b0>
    {
     t90 = T_COEF_D0_0_500 + T_COEF_D1_0_500 *totalV + T_COEF_D2_0_500 *pow(totalV,2) + T_COEF_D3_0_500 *pow(totalV,3) + T_COEF_D4_0_500 *pow(totalV,4) + T_COEF_D5_0_500 *pow(totalV,5) + T_COEF_D6_0_500 *pow(totalV,6) + T_COEF_D7_0_500 *pow(totalV,7) + T_COEF_D8_0_500 *pow(totalV,8) + T_COEF_D9_0_500 *pow(totalV,9);
 8002a64:	a358      	add	r3, pc, #352	; (adr r3, 8002bc8 <uVtoDegreeCTypeK+0x3c0>)
 8002a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a6e:	f7fd fd9b 	bl	80005a8 <__aeabi_dmul>
 8002a72:	4602      	mov	r2, r0
 8002a74:	460b      	mov	r3, r1
 8002a76:	4610      	mov	r0, r2
 8002a78:	4619      	mov	r1, r3
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	f04f 0300 	mov.w	r3, #0
 8002a82:	f7fd fbdb 	bl	800023c <__adddf3>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	4614      	mov	r4, r2
 8002a8c:	461d      	mov	r5, r3
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a9a:	f00b fba3 	bl	800e1e4 <pow>
 8002a9e:	a34c      	add	r3, pc, #304	; (adr r3, 8002bd0 <uVtoDegreeCTypeK+0x3c8>)
 8002aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa4:	f7fd fd80 	bl	80005a8 <__aeabi_dmul>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	4620      	mov	r0, r4
 8002aae:	4629      	mov	r1, r5
 8002ab0:	f7fd fbc4 	bl	800023c <__adddf3>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	4614      	mov	r4, r2
 8002aba:	461d      	mov	r5, r3
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	4b4b      	ldr	r3, [pc, #300]	; (8002bf0 <uVtoDegreeCTypeK+0x3e8>)
 8002ac2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ac6:	f00b fb8d 	bl	800e1e4 <pow>
 8002aca:	a343      	add	r3, pc, #268	; (adr r3, 8002bd8 <uVtoDegreeCTypeK+0x3d0>)
 8002acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad0:	f7fd fd6a 	bl	80005a8 <__aeabi_dmul>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4620      	mov	r0, r4
 8002ada:	4629      	mov	r1, r5
 8002adc:	f7fd fbae 	bl	800023c <__adddf3>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4614      	mov	r4, r2
 8002ae6:	461d      	mov	r5, r3
 8002ae8:	f04f 0200 	mov.w	r2, #0
 8002aec:	4b41      	ldr	r3, [pc, #260]	; (8002bf4 <uVtoDegreeCTypeK+0x3ec>)
 8002aee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002af2:	f00b fb77 	bl	800e1e4 <pow>
 8002af6:	a33a      	add	r3, pc, #232	; (adr r3, 8002be0 <uVtoDegreeCTypeK+0x3d8>)
 8002af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afc:	f7fd fd54 	bl	80005a8 <__aeabi_dmul>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	4620      	mov	r0, r4
 8002b06:	4629      	mov	r1, r5
 8002b08:	f7fd fb98 	bl	800023c <__adddf3>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4614      	mov	r4, r2
 8002b12:	461d      	mov	r5, r3
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	4b37      	ldr	r3, [pc, #220]	; (8002bf8 <uVtoDegreeCTypeK+0x3f0>)
 8002b1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b1e:	f00b fb61 	bl	800e1e4 <pow>
 8002b22:	a331      	add	r3, pc, #196	; (adr r3, 8002be8 <uVtoDegreeCTypeK+0x3e0>)
 8002b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b28:	f7fd fd3e 	bl	80005a8 <__aeabi_dmul>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4620      	mov	r0, r4
 8002b32:	4629      	mov	r1, r5
 8002b34:	f7fd fb82 	bl	800023c <__adddf3>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4614      	mov	r4, r2
 8002b3e:	461d      	mov	r5, r3
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	4b2d      	ldr	r3, [pc, #180]	; (8002bfc <uVtoDegreeCTypeK+0x3f4>)
 8002b46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b4a:	e061      	b.n	8002c10 <uVtoDegreeCTypeK+0x408>
 8002b4c:	f3af 8000 	nop.w
 8002b50:	ecfa2196 	.word	0xecfa2196
 8002b54:	3fa3ed7a 	.word	0x3fa3ed7a
 8002b58:	c4b5b30b 	.word	0xc4b5b30b
 8002b5c:	3f9205d7 	.word	0x3f9205d7
 8002b60:	f72891e7 	.word	0xf72891e7
 8002b64:	3ef375d4 	.word	0x3ef375d4
 8002b68:	7a34de08 	.word	0x7a34de08
 8002b6c:	be7ab2ac 	.word	0xbe7ab2ac
 8002b70:	b676ec5f 	.word	0xb676ec5f
 8002b74:	3df5e184 	.word	0x3df5e184
 8002b78:	c620f2a8 	.word	0xc620f2a8
 8002b7c:	bd63ba97 	.word	0xbd63ba97
 8002b80:	e5aa091d 	.word	0xe5aa091d
 8002b84:	3cc43402 	.word	0x3cc43402
 8002b88:	01c8db89 	.word	0x01c8db89
 8002b8c:	bc17a08b 	.word	0xbc17a08b
 8002b90:	b8001899 	.word	0xb8001899
 8002b94:	3b5d5cb4 	.word	0x3b5d5cb4
 8002b98:	51ff39ec 	.word	0x51ff39ec
 8002b9c:	ba8df847 	.word	0xba8df847
 8002ba0:	8adab9f5 	.word	0x8adab9f5
 8002ba4:	405fbdfd 	.word	0x405fbdfd
 8002ba8:	b1df7541 	.word	0xb1df7541
 8002bac:	bf1f05e0 	.word	0xbf1f05e0
 8002bb0:	8b04919b 	.word	0x8b04919b
 8002bb4:	4005bf0a 	.word	0x4005bf0a
 8002bb8:	8d6253b2 	.word	0x8d6253b2
 8002bbc:	3fbe5c69 	.word	0x3fbe5c69
 8002bc0:	2f1a9fbe 	.word	0x2f1a9fbe
 8002bc4:	4034a4dd 	.word	0x4034a4dd
 8002bc8:	886594af 	.word	0x886594af
 8002bcc:	40391563 	.word	0x40391563
 8002bd0:	f62184e0 	.word	0xf62184e0
 8002bd4:	3fb41f32 	.word	0x3fb41f32
 8002bd8:	3c90aa07 	.word	0x3c90aa07
 8002bdc:	bfd00521 	.word	0xbfd00521
 8002be0:	cf12f82a 	.word	0xcf12f82a
 8002be4:	3fb5497e 	.word	0x3fb5497e
 8002be8:	55785780 	.word	0x55785780
 8002bec:	bf89266f 	.word	0xbf89266f
 8002bf0:	40080000 	.word	0x40080000
 8002bf4:	40100000 	.word	0x40100000
 8002bf8:	40140000 	.word	0x40140000
 8002bfc:	40180000 	.word	0x40180000
 8002c00:	401c0000 	.word	0x401c0000
 8002c04:	40200000 	.word	0x40200000
 8002c08:	40220000 	.word	0x40220000
 8002c0c:	447a0000 	.word	0x447a0000
 8002c10:	f00b fae8 	bl	800e1e4 <pow>
 8002c14:	a370      	add	r3, pc, #448	; (adr r3, 8002dd8 <uVtoDegreeCTypeK+0x5d0>)
 8002c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1a:	f7fd fcc5 	bl	80005a8 <__aeabi_dmul>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4620      	mov	r0, r4
 8002c24:	4629      	mov	r1, r5
 8002c26:	f7fd fb09 	bl	800023c <__adddf3>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4614      	mov	r4, r2
 8002c30:	461d      	mov	r5, r3
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	4b7e      	ldr	r3, [pc, #504]	; (8002e30 <uVtoDegreeCTypeK+0x628>)
 8002c38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c3c:	f00b fad2 	bl	800e1e4 <pow>
 8002c40:	a367      	add	r3, pc, #412	; (adr r3, 8002de0 <uVtoDegreeCTypeK+0x5d8>)
 8002c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c46:	f7fd fcaf 	bl	80005a8 <__aeabi_dmul>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	4620      	mov	r0, r4
 8002c50:	4629      	mov	r1, r5
 8002c52:	f7fd faf3 	bl	800023c <__adddf3>
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	4614      	mov	r4, r2
 8002c5c:	461d      	mov	r5, r3
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	4b74      	ldr	r3, [pc, #464]	; (8002e34 <uVtoDegreeCTypeK+0x62c>)
 8002c64:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c68:	f00b fabc 	bl	800e1e4 <pow>
 8002c6c:	a35e      	add	r3, pc, #376	; (adr r3, 8002de8 <uVtoDegreeCTypeK+0x5e0>)
 8002c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c72:	f7fd fc99 	bl	80005a8 <__aeabi_dmul>
 8002c76:	4602      	mov	r2, r0
 8002c78:	460b      	mov	r3, r1
 8002c7a:	4620      	mov	r0, r4
 8002c7c:	4629      	mov	r1, r5
 8002c7e:	f7fd fadd 	bl	800023c <__adddf3>
 8002c82:	4602      	mov	r2, r0
 8002c84:	460b      	mov	r3, r1
 8002c86:	4614      	mov	r4, r2
 8002c88:	461d      	mov	r5, r3
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	4b6a      	ldr	r3, [pc, #424]	; (8002e38 <uVtoDegreeCTypeK+0x630>)
 8002c90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c94:	f00b faa6 	bl	800e1e4 <pow>
 8002c98:	a355      	add	r3, pc, #340	; (adr r3, 8002df0 <uVtoDegreeCTypeK+0x5e8>)
 8002c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9e:	f7fd fc83 	bl	80005a8 <__aeabi_dmul>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4620      	mov	r0, r4
 8002ca8:	4629      	mov	r1, r5
 8002caa:	f7fd fac7 	bl	800023c <__adddf3>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002cb6:	e082      	b.n	8002dbe <uVtoDegreeCTypeK+0x5b6>
    }
    else
    {
	    t90 = T_COEF_D0_500_1372 + T_COEF_D1_500_1372 *totalV + T_COEF_D2_500_1372 *pow(totalV,2) + T_COEF_D3_500_1372 *pow(totalV,3) + T_COEF_D4_500_1372 *pow(totalV,4) + T_COEF_D5_500_1372 *pow(totalV,5) + T_COEF_D6_500_1372 *pow(totalV,6);
 8002cb8:	a34f      	add	r3, pc, #316	; (adr r3, 8002df8 <uVtoDegreeCTypeK+0x5f0>)
 8002cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cbe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002cc2:	f7fd fc71 	bl	80005a8 <__aeabi_dmul>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	4610      	mov	r0, r2
 8002ccc:	4619      	mov	r1, r3
 8002cce:	a34c      	add	r3, pc, #304	; (adr r3, 8002e00 <uVtoDegreeCTypeK+0x5f8>)
 8002cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd4:	f7fd fab0 	bl	8000238 <__aeabi_dsub>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4614      	mov	r4, r2
 8002cde:	461d      	mov	r5, r3
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ce8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002cec:	f00b fa7a 	bl	800e1e4 <pow>
 8002cf0:	a345      	add	r3, pc, #276	; (adr r3, 8002e08 <uVtoDegreeCTypeK+0x600>)
 8002cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf6:	f7fd fc57 	bl	80005a8 <__aeabi_dmul>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	4620      	mov	r0, r4
 8002d00:	4629      	mov	r1, r5
 8002d02:	f7fd fa9b 	bl	800023c <__adddf3>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4614      	mov	r4, r2
 8002d0c:	461d      	mov	r5, r3
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	4b4a      	ldr	r3, [pc, #296]	; (8002e3c <uVtoDegreeCTypeK+0x634>)
 8002d14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d18:	f00b fa64 	bl	800e1e4 <pow>
 8002d1c:	a33c      	add	r3, pc, #240	; (adr r3, 8002e10 <uVtoDegreeCTypeK+0x608>)
 8002d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d22:	f7fd fc41 	bl	80005a8 <__aeabi_dmul>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	4629      	mov	r1, r5
 8002d2e:	f7fd fa85 	bl	800023c <__adddf3>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	4614      	mov	r4, r2
 8002d38:	461d      	mov	r5, r3
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	4b40      	ldr	r3, [pc, #256]	; (8002e40 <uVtoDegreeCTypeK+0x638>)
 8002d40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d44:	f00b fa4e 	bl	800e1e4 <pow>
 8002d48:	a333      	add	r3, pc, #204	; (adr r3, 8002e18 <uVtoDegreeCTypeK+0x610>)
 8002d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4e:	f7fd fc2b 	bl	80005a8 <__aeabi_dmul>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4620      	mov	r0, r4
 8002d58:	4629      	mov	r1, r5
 8002d5a:	f7fd fa6f 	bl	800023c <__adddf3>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4614      	mov	r4, r2
 8002d64:	461d      	mov	r5, r3
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	4b36      	ldr	r3, [pc, #216]	; (8002e44 <uVtoDegreeCTypeK+0x63c>)
 8002d6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d70:	f00b fa38 	bl	800e1e4 <pow>
 8002d74:	a32a      	add	r3, pc, #168	; (adr r3, 8002e20 <uVtoDegreeCTypeK+0x618>)
 8002d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7a:	f7fd fc15 	bl	80005a8 <__aeabi_dmul>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4620      	mov	r0, r4
 8002d84:	4629      	mov	r1, r5
 8002d86:	f7fd fa59 	bl	800023c <__adddf3>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4614      	mov	r4, r2
 8002d90:	461d      	mov	r5, r3
 8002d92:	f04f 0200 	mov.w	r2, #0
 8002d96:	4b2c      	ldr	r3, [pc, #176]	; (8002e48 <uVtoDegreeCTypeK+0x640>)
 8002d98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d9c:	f00b fa22 	bl	800e1e4 <pow>
 8002da0:	a321      	add	r3, pc, #132	; (adr r3, 8002e28 <uVtoDegreeCTypeK+0x620>)
 8002da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da6:	f7fd fbff 	bl	80005a8 <__aeabi_dmul>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4620      	mov	r0, r4
 8002db0:	4629      	mov	r1, r5
 8002db2:	f7fd fa43 	bl	800023c <__adddf3>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }

    return (float)t90;
 8002dbe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002dc2:	f7fd fea1 	bl	8000b08 <__aeabi_d2f>
 8002dc6:	4603      	mov	r3, r0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3728      	adds	r7, #40	; 0x28
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002dd2:	bf00      	nop
 8002dd4:	f3af 8000 	nop.w
 8002dd8:	598742c5 	.word	0x598742c5
 8002ddc:	3f50101c 	.word	0x3f50101c
 8002de0:	8fe5dfc5 	.word	0x8fe5dfc5
 8002de4:	bf072311 	.word	0xbf072311
 8002de8:	d5041d19 	.word	0xd5041d19
 8002dec:	3eb1beee 	.word	0x3eb1beee
 8002df0:	f20e972b 	.word	0xf20e972b
 8002df4:	be469b94 	.word	0xbe469b94
 8002df8:	251c193b 	.word	0x251c193b
 8002dfc:	404826af 	.word	0x404826af
 8002e00:	1d14e3bd 	.word	0x1d14e3bd
 8002e04:	406079c9 	.word	0x406079c9
 8002e08:	7dffe020 	.word	0x7dffe020
 8002e0c:	bffa587c 	.word	0xbffa587c
 8002e10:	72875bff 	.word	0x72875bff
 8002e14:	3fabfabb 	.word	0x3fabfabb
 8002e18:	43f14f16 	.word	0x43f14f16
 8002e1c:	bf4f9f9b 	.word	0xbf4f9f9b
 8002e20:	31b5afb6 	.word	0x31b5afb6
 8002e24:	3ee275a4 	.word	0x3ee275a4
 8002e28:	f722eba7 	.word	0xf722eba7
 8002e2c:	be60b376 	.word	0xbe60b376
 8002e30:	401c0000 	.word	0x401c0000
 8002e34:	40200000 	.word	0x40200000
 8002e38:	40220000 	.word	0x40220000
 8002e3c:	40080000 	.word	0x40080000
 8002e40:	40100000 	.word	0x40100000
 8002e44:	40140000 	.word	0x40140000
 8002e48:	40180000 	.word	0x40180000
 8002e4c:	00000000 	.word	0x00000000

08002e50 <VtoDegreeCRtd>:
float VtoDegreeCRtd(float Vdata)
{
 8002e50:	b5b0      	push	{r4, r5, r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
	//using a y = 366.02x^2 -942.3x +561.55 where x is the ADC voltage and y is the temperature in C
	return (Vdata*Vdata)*366.02 - 942.3*Vdata + 561.55;
 8002e58:	6879      	ldr	r1, [r7, #4]
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7fd ffb2 	bl	8000dc4 <__aeabi_fmul>
 8002e60:	4603      	mov	r3, r0
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fd fb48 	bl	80004f8 <__aeabi_f2d>
 8002e68:	a315      	add	r3, pc, #84	; (adr r3, 8002ec0 <VtoDegreeCRtd+0x70>)
 8002e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6e:	f7fd fb9b 	bl	80005a8 <__aeabi_dmul>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4614      	mov	r4, r2
 8002e78:	461d      	mov	r5, r3
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7fd fb3c 	bl	80004f8 <__aeabi_f2d>
 8002e80:	a311      	add	r3, pc, #68	; (adr r3, 8002ec8 <VtoDegreeCRtd+0x78>)
 8002e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e86:	f7fd fb8f 	bl	80005a8 <__aeabi_dmul>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	4620      	mov	r0, r4
 8002e90:	4629      	mov	r1, r5
 8002e92:	f7fd f9d1 	bl	8000238 <__aeabi_dsub>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	a30c      	add	r3, pc, #48	; (adr r3, 8002ed0 <VtoDegreeCRtd+0x80>)
 8002ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea4:	f7fd f9ca 	bl	800023c <__adddf3>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4610      	mov	r0, r2
 8002eae:	4619      	mov	r1, r3
 8002eb0:	f7fd fe2a 	bl	8000b08 <__aeabi_d2f>
 8002eb4:	4603      	mov	r3, r0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bdb0      	pop	{r4, r5, r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	eb851eb8 	.word	0xeb851eb8
 8002ec4:	4076e051 	.word	0x4076e051
 8002ec8:	66666666 	.word	0x66666666
 8002ecc:	408d7266 	.word	0x408d7266
 8002ed0:	66666666 	.word	0x66666666
 8002ed4:	40818c66 	.word	0x40818c66

08002ed8 <AirInput_forceAperture>:
#include "air_input.h"

#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))

void AirInput_forceAperture( AirInput * self, int aperture) {
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  aperture = constrain(aperture, self->minValue, self->maxValue); //TODO: MIN_VALEUR IS NOT ZERO FOR THE PRIMARY
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	da02      	bge.n	8002ef2 <AirInput_forceAperture+0x1a>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	e005      	b.n	8002efe <AirInput_forceAperture+0x26>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691a      	ldr	r2, [r3, #16]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	bfa8      	it	ge
 8002efc:	4613      	movge	r3, r2
 8002efe:	603b      	str	r3, [r7, #0]
  self->aperture = aperture;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	601a      	str	r2, [r3, #0]
  self->setPoint = aperture;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	605a      	str	r2, [r3, #4]
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr

08002f16 <AirInput_getAperture>:


int AirInput_getAperture( AirInput * self) {
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  return self->aperture;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr

08002f2c <AirInput_InPosition>:
bool AirInput_InPosition( AirInput * self)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
	return self->aperture == self->setPoint;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	bf0c      	ite	eq
 8002f40:	2301      	moveq	r3, #1
 8002f42:	2300      	movne	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr

08002f50 <AirInput_setAjustement>:
  self->setPoint = setPoint;
  self->secPerStep = secPerStep;
}


void AirInput_setAjustement( AirInput * self, int adjustement, uint32_t secPerStep) {
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  self->setPoint += adjustement;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	441a      	add	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	605a      	str	r2, [r3, #4]
  self->setPoint = constrain(self->setPoint, self->minValue, self->maxValue);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	da02      	bge.n	8002f7a <AirInput_setAjustement+0x2a>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	e006      	b.n	8002f88 <AirInput_setAjustement+0x38>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	4293      	cmp	r3, r2
 8002f84:	bfa8      	it	ge
 8002f86:	4613      	movge	r3, r2
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	6053      	str	r3, [r2, #4]
  self->secPerStep = secPerStep;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	609a      	str	r2, [r3, #8]
}
 8002f92:	bf00      	nop
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <AirInput_task>:


void AirInput_task( AirInput * self, uint32_t currentTime_ms) {
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]

  if (self->aperture != self->setPoint) {
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d01f      	beq.n	8002ff2 <AirInput_task+0x56>
    if ((currentTime_ms - self->timeRefRampe) >= (self->secPerStep * 1000)) {
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	1ad2      	subs	r2, r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002fc2:	fb01 f303 	mul.w	r3, r1, r3
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d313      	bcc.n	8002ff2 <AirInput_task+0x56>
      self->timeRefRampe = currentTime_ms;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	60da      	str	r2, [r3, #12]
      if (self->setPoint > self->aperture) {
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	dd05      	ble.n	8002fe8 <AirInput_task+0x4c>
        self->aperture++;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	601a      	str	r2, [r3, #0]
      } else {
        self->aperture--;
      }
    }
  }
}
 8002fe6:	e004      	b.n	8002ff2 <AirInput_task+0x56>
        self->aperture--;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	1e5a      	subs	r2, r3, #1
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	601a      	str	r2, [r3, #0]
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr

08002ffc <Algo_init>:
		AirInput* grill, const uint8_t MinGrill, const uint8_t MaxGrill);
void AirAdjustment(int adjustement, const uint32_t secondPerStep,
		AirInput* primaire, const uint8_t MinPrimary, const uint8_t MaxPrimary,
		AirInput* grill, const uint8_t MinGrill, const uint8_t MaxGrill);

void Algo_init() {
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0

  if(GPIO_PIN_SET==HAL_GPIO_ReadPin(Button_Input_GPIO_Port,Button_Input_Pin))
 8003000:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003004:	4819      	ldr	r0, [pc, #100]	; (800306c <Algo_init+0x70>)
 8003006:	f002 fded 	bl	8005be4 <HAL_GPIO_ReadPin>
 800300a:	4603      	mov	r3, r0
 800300c:	2b01      	cmp	r3, #1
 800300e:	d103      	bne.n	8003018 <Algo_init+0x1c>
  {
	  currentState = PRODUCTION_TEST;
 8003010:	4b17      	ldr	r3, [pc, #92]	; (8003070 <Algo_init+0x74>)
 8003012:	220c      	movs	r2, #12
 8003014:	701a      	strb	r2, [r3, #0]
 8003016:	e002      	b.n	800301e <Algo_init+0x22>
  }
  else
  {
	  currentState = ZEROING_STEPPER;
 8003018:	4b15      	ldr	r3, [pc, #84]	; (8003070 <Algo_init+0x74>)
 800301a:	2200      	movs	r2, #0
 800301c:	701a      	strb	r2, [r3, #0]
  }

  reloadingEvent = false;
 800301e:	4b15      	ldr	r3, [pc, #84]	; (8003074 <Algo_init+0x78>)
 8003020:	2200      	movs	r2, #0
 8003022:	701a      	strb	r2, [r3, #0]
  AirInput_forceAperture(&primary, PRIMARY_CLOSED);
 8003024:	210d      	movs	r1, #13
 8003026:	4814      	ldr	r0, [pc, #80]	; (8003078 <Algo_init+0x7c>)
 8003028:	f7ff ff56 	bl	8002ed8 <AirInput_forceAperture>
  AirInput_forceAperture(&grill, GRILL_CLOSED);
 800302c:	2100      	movs	r1, #0
 800302e:	4813      	ldr	r0, [pc, #76]	; (800307c <Algo_init+0x80>)
 8003030:	f7ff ff52 	bl	8002ed8 <AirInput_forceAperture>
  AirInput_forceAperture(&secondary, SECONDARY_CLOSED);
 8003034:	210d      	movs	r1, #13
 8003036:	4812      	ldr	r0, [pc, #72]	; (8003080 <Algo_init+0x84>)
 8003038:	f7ff ff4e 	bl	8002ed8 <AirInput_forceAperture>
  baffleTemperature = 0;
 800303c:	4b11      	ldr	r3, [pc, #68]	; (8003084 <Algo_init+0x88>)
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]
  rearTemperature = 0;
 8003042:	4b11      	ldr	r3, [pc, #68]	; (8003088 <Algo_init+0x8c>)
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]
  thermostatRequest = false;
 8003048:	4b10      	ldr	r3, [pc, #64]	; (800308c <Algo_init+0x90>)
 800304a:	2200      	movs	r2, #0
 800304c:	701a      	strb	r2, [r3, #0]
  delLoadingEnd = ALGO_DEL_OFF;
 800304e:	4b10      	ldr	r3, [pc, #64]	; (8003090 <Algo_init+0x94>)
 8003050:	2200      	movs	r2, #0
 8003052:	701a      	strb	r2, [r3, #0]
  delFermeturePorte = ALGO_DEL_OFF;
 8003054:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <Algo_init+0x98>)
 8003056:	2200      	movs	r2, #0
 8003058:	701a      	strb	r2, [r3, #0]
  Slope_init(&slopeBaffleTemp, frontTempDataStore, NB_DATA, SAMPLING_RATE);
 800305a:	4b0f      	ldr	r3, [pc, #60]	; (8003098 <Algo_init+0x9c>)
 800305c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003060:	490e      	ldr	r1, [pc, #56]	; (800309c <Algo_init+0xa0>)
 8003062:	480f      	ldr	r0, [pc, #60]	; (80030a0 <Algo_init+0xa4>)
 8003064:	f001 fd52 	bl	8004b0c <Slope_init>
}
 8003068:	bf00      	nop
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40010c00 	.word	0x40010c00
 8003070:	200000f8 	.word	0x200000f8
 8003074:	200000f9 	.word	0x200000f9
 8003078:	20000000 	.word	0x20000000
 800307c:	20000018 	.word	0x20000018
 8003080:	20000030 	.word	0x20000030
 8003084:	20000100 	.word	0x20000100
 8003088:	20000104 	.word	0x20000104
 800308c:	2000010c 	.word	0x2000010c
 8003090:	200000fb 	.word	0x200000fb
 8003094:	200000fc 	.word	0x200000fc
 8003098:	3e4ccccd 	.word	0x3e4ccccd
 800309c:	20000110 	.word	0x20000110
 80030a0:	200005c4 	.word	0x200005c4

080030a4 <manageStateMachine>:

static void manageStateMachine(uint32_t currentTime_ms) {
 80030a4:	b590      	push	{r4, r7, lr}
 80030a6:	b093      	sub	sp, #76	; 0x4c
 80030a8:	af04      	add	r7, sp, #16
 80030aa:	6078      	str	r0, [r7, #4]

	  State nextState = currentState;
 80030ac:	4bb3      	ldr	r3, [pc, #716]	; (800337c <manageStateMachine+0x2d8>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  float dTavant;
	  int adjustement;
	  FurnaceModel Model = readModel();
 80030b4:	f7fe fb4c 	bl	8001750 <readModel>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  Model = HEATMAX; //c'était une bonne idée les dip switch, mais on le fera pas :) pis HeatMax c'est la HeatCommander oh yeah!
 80030be:	2300      	movs	r3, #0
 80030c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  const uint32_t SEC_PER_STEP_COMB_LOW = 6;
	  const uint32_t SEC_PER_STEP_COMB_HIGH = 6;
	  const uint32_t SEC_PER_STEP_COAL_HIGH = 12;
#else
	  //pour palier au fait qu'on applique des 1/2 pas, nous divisons les valeurs de NOVIKA 2019-12-04
	  const uint32_t SEC_PER_STEP_TEMP_RISE = 6;
 80030c4:	2306      	movs	r3, #6
 80030c6:	62bb      	str	r3, [r7, #40]	; 0x28
	  const uint32_t SEC_PER_STEP_COMB_LOW = 3;
 80030c8:	2303      	movs	r3, #3
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24
	  const uint32_t SEC_PER_STEP_COMB_HIGH = 6;
 80030cc:	2306      	movs	r3, #6
 80030ce:	623b      	str	r3, [r7, #32]
	  const uint32_t SEC_PER_STEP_COAL_HIGH = 6;
 80030d0:	2306      	movs	r3, #6
 80030d2:	61fb      	str	r3, [r7, #28]
#endif

	  //calculate time used in the state transition.
	  timeSinceStateEntry = currentTime_ms - stateChangeTimeRef;
 80030d4:	4baa      	ldr	r3, [pc, #680]	; (8003380 <manageStateMachine+0x2dc>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	4aa9      	ldr	r2, [pc, #676]	; (8003384 <manageStateMachine+0x2e0>)
 80030de:	6013      	str	r3, [r2, #0]
	  uint32_t timeInTemperatureRise = 0;
 80030e0:	2300      	movs	r3, #0
 80030e2:	61bb      	str	r3, [r7, #24]
#if PID_CONTROL_ON
	  static uint32_t Pidtimeref = 0;
	  uint32_t TimeSinceLastPIDUpdate = currentTime_ms - Pidtimeref;
#endif
	  uint32_t TimeForStep = currentTime_ms - timeRefAutoMode;
 80030e4:	4ba8      	ldr	r3, [pc, #672]	; (8003388 <manageStateMachine+0x2e4>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	617b      	str	r3, [r7, #20]

	  // TODO: la periode utilisée pour le calcule de la pente n'est pas définie
  //       dans le document
  dTavant = computeSlopeBaffleTemp(2); //�tait 300, selon ce que Novika utilise test du 2019-12-04.
 80030ee:	2002      	movs	r0, #2
 80030f0:	f000 ff20 	bl	8003f34 <computeSlopeBaffleTemp>
 80030f4:	6138      	str	r0, [r7, #16]
  	  	  	  	  	  	  	  	  	  // la d�riv� risque d'�tre sketch, une mesure de temp�rature /5 secondes si on
  int deltaTemperature = 0;
 80030f6:	2300      	movs	r3, #0
 80030f8:	60fb      	str	r3, [r7, #12]
  /* Perform state's actions. */
  switch (currentState) {
 80030fa:	4ba0      	ldr	r3, [pc, #640]	; (800337c <manageStateMachine+0x2d8>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	3b01      	subs	r3, #1
 8003100:	2b0b      	cmp	r3, #11
 8003102:	d81b      	bhi.n	800313c <manageStateMachine+0x98>
 8003104:	a201      	add	r2, pc, #4	; (adr r2, 800310c <manageStateMachine+0x68>)
 8003106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800310a:	bf00      	nop
 800310c:	080031cb 	.word	0x080031cb
 8003110:	080032b1 	.word	0x080032b1
 8003114:	0800335b 	.word	0x0800335b
 8003118:	08003711 	.word	0x08003711
 800311c:	0800313d 	.word	0x0800313d
 8003120:	08003589 	.word	0x08003589
 8003124:	08003a37 	.word	0x08003a37
 8003128:	08003a89 	.word	0x08003a89
 800312c:	08003b59 	.word	0x08003b59
 8003130:	08003c91 	.word	0x08003c91
 8003134:	08003c91 	.word	0x08003c91
 8003138:	08003d23 	.word	0x08003d23

    default:
    case ZEROING_STEPPER:
		AirInput_forceAperture(&primary, PrimaryMotorParam[Model].MinWaiting);
 800313c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003140:	4a92      	ldr	r2, [pc, #584]	; (800338c <manageStateMachine+0x2e8>)
 8003142:	015b      	lsls	r3, r3, #5
 8003144:	4413      	add	r3, r2
 8003146:	3302      	adds	r3, #2
 8003148:	f9b3 3000 	ldrsh.w	r3, [r3]
 800314c:	4619      	mov	r1, r3
 800314e:	4890      	ldr	r0, [pc, #576]	; (8003390 <manageStateMachine+0x2ec>)
 8003150:	f7ff fec2 	bl	8002ed8 <AirInput_forceAperture>
		AirInput_forceAperture(&grill, BoostMotorParam[Model].MinWaiting);
 8003154:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003158:	4a8e      	ldr	r2, [pc, #568]	; (8003394 <manageStateMachine+0x2f0>)
 800315a:	015b      	lsls	r3, r3, #5
 800315c:	4413      	add	r3, r2
 800315e:	3302      	adds	r3, #2
 8003160:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003164:	4619      	mov	r1, r3
 8003166:	488c      	ldr	r0, [pc, #560]	; (8003398 <manageStateMachine+0x2f4>)
 8003168:	f7ff feb6 	bl	8002ed8 <AirInput_forceAperture>
		AirInput_forceAperture(&secondary, SecondaryMotorParam[Model].MinWaiting);
 800316c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003170:	4a8a      	ldr	r2, [pc, #552]	; (800339c <manageStateMachine+0x2f8>)
 8003172:	015b      	lsls	r3, r3, #5
 8003174:	4413      	add	r3, r2
 8003176:	3302      	adds	r3, #2
 8003178:	f9b3 3000 	ldrsh.w	r3, [r3]
 800317c:	4619      	mov	r1, r3
 800317e:	4888      	ldr	r0, [pc, #544]	; (80033a0 <manageStateMachine+0x2fc>)
 8003180:	f7ff feaa 	bl	8002ed8 <AirInput_forceAperture>
		AllMotorToZero(); //set all motors to zero
 8003184:	f7ff f85a 	bl	800223c <AllMotorToZero>
		while(!AirInput_InPosition(&grill) || !AirInput_InPosition(&primary) || !AirInput_InPosition(&secondary))
 8003188:	bf00      	nop
 800318a:	4883      	ldr	r0, [pc, #524]	; (8003398 <manageStateMachine+0x2f4>)
 800318c:	f7ff fece 	bl	8002f2c <AirInput_InPosition>
 8003190:	4603      	mov	r3, r0
 8003192:	f083 0301 	eor.w	r3, r3, #1
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1f6      	bne.n	800318a <manageStateMachine+0xe6>
 800319c:	487c      	ldr	r0, [pc, #496]	; (8003390 <manageStateMachine+0x2ec>)
 800319e:	f7ff fec5 	bl	8002f2c <AirInput_InPosition>
 80031a2:	4603      	mov	r3, r0
 80031a4:	f083 0301 	eor.w	r3, r3, #1
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1ed      	bne.n	800318a <manageStateMachine+0xe6>
 80031ae:	487c      	ldr	r0, [pc, #496]	; (80033a0 <manageStateMachine+0x2fc>)
 80031b0:	f7ff febc 	bl	8002f2c <AirInput_InPosition>
 80031b4:	4603      	mov	r3, r0
 80031b6:	f083 0301 	eor.w	r3, r3, #1
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1e4      	bne.n	800318a <manageStateMachine+0xe6>
		{
		};
		nextState = WAITING;
 80031c0:	2301      	movs	r3, #1
 80031c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		break;
 80031c6:	f000 bdc4 	b.w	8003d52 <manageStateMachine+0xcae>
    case WAITING:

    	AirInput_forceAperture(&primary, PrimaryMotorParam[Model].MaxWaiting);// PRIMARY_CLOSED_SECONDARY_FULL_OPEN);
 80031ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80031ce:	4a6f      	ldr	r2, [pc, #444]	; (800338c <manageStateMachine+0x2e8>)
 80031d0:	015b      	lsls	r3, r3, #5
 80031d2:	4413      	add	r3, r2
 80031d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031d8:	4619      	mov	r1, r3
 80031da:	486d      	ldr	r0, [pc, #436]	; (8003390 <manageStateMachine+0x2ec>)
 80031dc:	f7ff fe7c 	bl	8002ed8 <AirInput_forceAperture>
    	AirInput_forceAperture(&grill, BoostMotorParam[Model].MaxWaiting);// GRILL_CLOSED);
 80031e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80031e4:	4a6b      	ldr	r2, [pc, #428]	; (8003394 <manageStateMachine+0x2f0>)
 80031e6:	015b      	lsls	r3, r3, #5
 80031e8:	4413      	add	r3, r2
 80031ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031ee:	4619      	mov	r1, r3
 80031f0:	4869      	ldr	r0, [pc, #420]	; (8003398 <manageStateMachine+0x2f4>)
 80031f2:	f7ff fe71 	bl	8002ed8 <AirInput_forceAperture>
    	AirInput_forceAperture(&secondary, SecondaryMotorParam[Model].MaxWaiting);
 80031f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80031fa:	4a68      	ldr	r2, [pc, #416]	; (800339c <manageStateMachine+0x2f8>)
 80031fc:	015b      	lsls	r3, r3, #5
 80031fe:	4413      	add	r3, r2
 8003200:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003204:	4619      	mov	r1, r3
 8003206:	4866      	ldr	r0, [pc, #408]	; (80033a0 <manageStateMachine+0x2fc>)
 8003208:	f7ff fe66 	bl	8002ed8 <AirInput_forceAperture>
    	delLoadingEnd = ALGO_DEL_OFF;
 800320c:	4b65      	ldr	r3, [pc, #404]	; (80033a4 <manageStateMachine+0x300>)
 800320e:	2200      	movs	r2, #0
 8003210:	701a      	strb	r2, [r3, #0]
    	delFermeturePorte = ALGO_DEL_OFF;
 8003212:	4b65      	ldr	r3, [pc, #404]	; (80033a8 <manageStateMachine+0x304>)
 8003214:	2200      	movs	r2, #0
 8003216:	701a      	strb	r2, [r3, #0]



		if(baffleTemperature > 8000 && rearTemperature > 7000 && (!Algo_getInterlockRequest()))
 8003218:	4b64      	ldr	r3, [pc, #400]	; (80033ac <manageStateMachine+0x308>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8003220:	dd15      	ble.n	800324e <manageStateMachine+0x1aa>
 8003222:	4b63      	ldr	r3, [pc, #396]	; (80033b0 <manageStateMachine+0x30c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f641 3258 	movw	r2, #7000	; 0x1b58
 800322a:	4293      	cmp	r3, r2
 800322c:	dd0f      	ble.n	800324e <manageStateMachine+0x1aa>
 800322e:	f000 ff4f 	bl	80040d0 <Algo_getInterlockRequest>
 8003232:	4603      	mov	r3, r0
 8003234:	f083 0301 	eor.w	r3, r3, #1
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d007      	beq.n	800324e <manageStateMachine+0x1aa>
		{
		  nextState = TEMPERATURE_RISE; //the only way this can happen is if we lost power we don't want to go back in reload/temprise
 800323e:	2303      	movs	r3, #3
 8003240:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  reloadingEvent = false;
 8003244:	4b5b      	ldr	r3, [pc, #364]	; (80033b4 <manageStateMachine+0x310>)
 8003246:	2200      	movs	r2, #0
 8003248:	701a      	strb	r2, [r3, #0]
		  nextState = RELOAD_IGNITION;
		  reloadingEvent = false;
		  initPID(&TemperaturePID,Ki,Kd,Kp,20,-20); // pas utilisé
		}

		break;
 800324a:	f000 bd71 	b.w	8003d30 <manageStateMachine+0xc8c>
		else if ((baffleTemperature > TemperatureParam[Model].WaitingToIgnition || reloadingEvent) && (!Algo_getInterlockRequest()) ) { //at 95F, someone is starting a fire
 800324e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003252:	4959      	ldr	r1, [pc, #356]	; (80033b8 <manageStateMachine+0x314>)
 8003254:	4613      	mov	r3, r2
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	4413      	add	r3, r2
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	440b      	add	r3, r1
 800325e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003262:	461a      	mov	r2, r3
 8003264:	4b51      	ldr	r3, [pc, #324]	; (80033ac <manageStateMachine+0x308>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	db04      	blt.n	8003276 <manageStateMachine+0x1d2>
 800326c:	4b51      	ldr	r3, [pc, #324]	; (80033b4 <manageStateMachine+0x310>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 855d 	beq.w	8003d30 <manageStateMachine+0xc8c>
 8003276:	f000 ff2b 	bl	80040d0 <Algo_getInterlockRequest>
 800327a:	4603      	mov	r3, r0
 800327c:	f083 0301 	eor.w	r3, r3, #1
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 8554 	beq.w	8003d30 <manageStateMachine+0xc8c>
		  nextState = RELOAD_IGNITION;
 8003288:	2302      	movs	r3, #2
 800328a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  reloadingEvent = false;
 800328e:	4b49      	ldr	r3, [pc, #292]	; (80033b4 <manageStateMachine+0x310>)
 8003290:	2200      	movs	r2, #0
 8003292:	701a      	strb	r2, [r3, #0]
		  initPID(&TemperaturePID,Ki,Kd,Kp,20,-20); // pas utilisé
 8003294:	f06f 0313 	mvn.w	r3, #19
 8003298:	9301      	str	r3, [sp, #4]
 800329a:	2314      	movs	r3, #20
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	4b47      	ldr	r3, [pc, #284]	; (80033bc <manageStateMachine+0x318>)
 80032a0:	4a47      	ldr	r2, [pc, #284]	; (80033c0 <manageStateMachine+0x31c>)
 80032a2:	f04f 0100 	mov.w	r1, #0
 80032a6:	4847      	ldr	r0, [pc, #284]	; (80033c4 <manageStateMachine+0x320>)
 80032a8:	f7ff f816 	bl	80022d8 <initPID>
		break;
 80032ac:	f000 bd40 	b.w	8003d30 <manageStateMachine+0xc8c>

    case RELOAD_IGNITION:

		AirInput_forceAperture(&primary, PrimaryMotorParam[Model].MaxReload);// PRIMARY_SECONDARY_FULL_OPEN);
 80032b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80032b4:	4a35      	ldr	r2, [pc, #212]	; (800338c <manageStateMachine+0x2e8>)
 80032b6:	015b      	lsls	r3, r3, #5
 80032b8:	4413      	add	r3, r2
 80032ba:	3304      	adds	r3, #4
 80032bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032c0:	4619      	mov	r1, r3
 80032c2:	4833      	ldr	r0, [pc, #204]	; (8003390 <manageStateMachine+0x2ec>)
 80032c4:	f7ff fe08 	bl	8002ed8 <AirInput_forceAperture>
		AirInput_forceAperture(&grill, BoostMotorParam[Model].MaxReload);// 39); //2020-03-20 28 //2020-03-18 100
 80032c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80032cc:	4a31      	ldr	r2, [pc, #196]	; (8003394 <manageStateMachine+0x2f0>)
 80032ce:	015b      	lsls	r3, r3, #5
 80032d0:	4413      	add	r3, r2
 80032d2:	3304      	adds	r3, #4
 80032d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032d8:	4619      	mov	r1, r3
 80032da:	482f      	ldr	r0, [pc, #188]	; (8003398 <manageStateMachine+0x2f4>)
 80032dc:	f7ff fdfc 	bl	8002ed8 <AirInput_forceAperture>
		AirInput_forceAperture(&secondary, SecondaryMotorParam[Model].MaxReload);
 80032e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80032e4:	4a2d      	ldr	r2, [pc, #180]	; (800339c <manageStateMachine+0x2f8>)
 80032e6:	015b      	lsls	r3, r3, #5
 80032e8:	4413      	add	r3, r2
 80032ea:	3304      	adds	r3, #4
 80032ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032f0:	4619      	mov	r1, r3
 80032f2:	482b      	ldr	r0, [pc, #172]	; (80033a0 <manageStateMachine+0x2fc>)
 80032f4:	f7ff fdf0 	bl	8002ed8 <AirInput_forceAperture>

		if (((baffleTemperature > TemperatureParam[Model].IgnitionToTrise) && (timeSinceStateEntry >= MINUTES(1))) || (baffleTemperature > 10000)) {
 80032f8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80032fc:	492e      	ldr	r1, [pc, #184]	; (80033b8 <manageStateMachine+0x314>)
 80032fe:	4613      	mov	r3, r2
 8003300:	011b      	lsls	r3, r3, #4
 8003302:	4413      	add	r3, r2
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	440b      	add	r3, r1
 8003308:	3302      	adds	r3, #2
 800330a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800330e:	461a      	mov	r2, r3
 8003310:	4b26      	ldr	r3, [pc, #152]	; (80033ac <manageStateMachine+0x308>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	429a      	cmp	r2, r3
 8003316:	da05      	bge.n	8003324 <manageStateMachine+0x280>
 8003318:	4b1a      	ldr	r3, [pc, #104]	; (8003384 <manageStateMachine+0x2e0>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8003320:	4293      	cmp	r3, r2
 8003322:	d805      	bhi.n	8003330 <manageStateMachine+0x28c>
 8003324:	4b21      	ldr	r3, [pc, #132]	; (80033ac <manageStateMachine+0x308>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f242 7210 	movw	r2, #10000	; 0x2710
 800332c:	4293      	cmp	r3, r2
 800332e:	dd09      	ble.n	8003344 <manageStateMachine+0x2a0>
		nextState = TEMPERATURE_RISE;
 8003330:	2303      	movs	r3, #3
 8003332:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		reloadingEvent = false;
 8003336:	4b1f      	ldr	r3, [pc, #124]	; (80033b4 <manageStateMachine+0x310>)
 8003338:	2200      	movs	r2, #0
 800333a:	701a      	strb	r2, [r3, #0]
		AirInput_forceAperture(&grill, GRILL_CLOSED);
 800333c:	2100      	movs	r1, #0
 800333e:	4816      	ldr	r0, [pc, #88]	; (8003398 <manageStateMachine+0x2f4>)
 8003340:	f7ff fdca 	bl	8002ed8 <AirInput_forceAperture>
		}
		if(timeSinceStateEntry >= MINUTES(20))
 8003344:	4b0f      	ldr	r3, [pc, #60]	; (8003384 <manageStateMachine+0x2e0>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a1f      	ldr	r2, [pc, #124]	; (80033c8 <manageStateMachine+0x324>)
 800334a:	4293      	cmp	r3, r2
 800334c:	f240 84f2 	bls.w	8003d34 <manageStateMachine+0xc90>
		{
		  //ignition fail or coal was hot enough to make us enter in Ignition we go back to WAITING
		  nextState = ZEROING_STEPPER;
 8003350:	2300      	movs	r3, #0
 8003352:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}
      break;
 8003356:	f000 bced 	b.w	8003d34 <manageStateMachine+0xc90>

    case TEMPERATURE_RISE:

		targetTemperature = thermostatRequest ? TemperatureParam[Model].TriseTargetHigh : TemperatureParam[Model].TriseTargetLow;
 800335a:	4b1c      	ldr	r3, [pc, #112]	; (80033cc <manageStateMachine+0x328>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d036      	beq.n	80033d0 <manageStateMachine+0x32c>
 8003362:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003366:	4914      	ldr	r1, [pc, #80]	; (80033b8 <manageStateMachine+0x314>)
 8003368:	4613      	mov	r3, r2
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	4413      	add	r3, r2
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	440b      	add	r3, r1
 8003372:	3306      	adds	r3, #6
 8003374:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003378:	461a      	mov	r2, r3
 800337a:	e035      	b.n	80033e8 <manageStateMachine+0x344>
 800337c:	200000f8 	.word	0x200000f8
 8003380:	20000610 	.word	0x20000610
 8003384:	200005e0 	.word	0x200005e0
 8003388:	20000614 	.word	0x20000614
 800338c:	0800f498 	.word	0x0800f498
 8003390:	20000000 	.word	0x20000000
 8003394:	0800f4d8 	.word	0x0800f4d8
 8003398:	20000018 	.word	0x20000018
 800339c:	0800f518 	.word	0x0800f518
 80033a0:	20000030 	.word	0x20000030
 80033a4:	200000fb 	.word	0x200000fb
 80033a8:	200000fc 	.word	0x200000fc
 80033ac:	20000100 	.word	0x20000100
 80033b0:	20000104 	.word	0x20000104
 80033b4:	200000f9 	.word	0x200000f9
 80033b8:	0800f454 	.word	0x0800f454
 80033bc:	3da3d70a 	.word	0x3da3d70a
 80033c0:	3ca3d70a 	.word	0x3ca3d70a
 80033c4:	200005e8 	.word	0x200005e8
 80033c8:	00124f7f 	.word	0x00124f7f
 80033cc:	2000010c 	.word	0x2000010c
 80033d0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80033d4:	495a      	ldr	r1, [pc, #360]	; (8003540 <manageStateMachine+0x49c>)
 80033d6:	4613      	mov	r3, r2
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	4413      	add	r3, r2
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	440b      	add	r3, r1
 80033e0:	3304      	adds	r3, #4
 80033e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033e6:	461a      	mov	r2, r3
 80033e8:	4b56      	ldr	r3, [pc, #344]	; (8003544 <manageStateMachine+0x4a0>)
 80033ea:	601a      	str	r2, [r3, #0]

		if(historyState != currentState){
 80033ec:	4b56      	ldr	r3, [pc, #344]	; (8003548 <manageStateMachine+0x4a4>)
 80033ee:	781a      	ldrb	r2, [r3, #0]
 80033f0:	4b56      	ldr	r3, [pc, #344]	; (800354c <manageStateMachine+0x4a8>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d027      	beq.n	8003448 <manageStateMachine+0x3a4>
		  AirInput_forceAperture(&primary, PrimaryMotorParam[Model].MaxTempRise);
 80033f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033fc:	4a54      	ldr	r2, [pc, #336]	; (8003550 <manageStateMachine+0x4ac>)
 80033fe:	015b      	lsls	r3, r3, #5
 8003400:	4413      	add	r3, r2
 8003402:	3308      	adds	r3, #8
 8003404:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003408:	4619      	mov	r1, r3
 800340a:	4852      	ldr	r0, [pc, #328]	; (8003554 <manageStateMachine+0x4b0>)
 800340c:	f7ff fd64 	bl	8002ed8 <AirInput_forceAperture>
		  AirInput_forceAperture(&grill, BoostMotorParam[Model].MaxTempRise);
 8003410:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003414:	4a50      	ldr	r2, [pc, #320]	; (8003558 <manageStateMachine+0x4b4>)
 8003416:	015b      	lsls	r3, r3, #5
 8003418:	4413      	add	r3, r2
 800341a:	3308      	adds	r3, #8
 800341c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003420:	4619      	mov	r1, r3
 8003422:	484e      	ldr	r0, [pc, #312]	; (800355c <manageStateMachine+0x4b8>)
 8003424:	f7ff fd58 	bl	8002ed8 <AirInput_forceAperture>
		  AirInput_forceAperture(&secondary, SecondaryMotorParam[Model].MaxTempRise);
 8003428:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800342c:	4a4c      	ldr	r2, [pc, #304]	; (8003560 <manageStateMachine+0x4bc>)
 800342e:	015b      	lsls	r3, r3, #5
 8003430:	4413      	add	r3, r2
 8003432:	3308      	adds	r3, #8
 8003434:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003438:	4619      	mov	r1, r3
 800343a:	484a      	ldr	r0, [pc, #296]	; (8003564 <manageStateMachine+0x4c0>)
 800343c:	f7ff fd4c 	bl	8002ed8 <AirInput_forceAperture>
		  historyState = currentState;
 8003440:	4b42      	ldr	r3, [pc, #264]	; (800354c <manageStateMachine+0x4a8>)
 8003442:	781a      	ldrb	r2, [r3, #0]
 8003444:	4b40      	ldr	r3, [pc, #256]	; (8003548 <manageStateMachine+0x4a4>)
 8003446:	701a      	strb	r2, [r3, #0]
		   to +/- 3 steps, it should take 3 * sec per step to complete
		   the movement. Reevaluate the control at that maximum period. */
//		if((timeSinceStateEntry >= MINUTES(3)) ||  (baffleTemperature > targetTemperature)) //3minutes // changemenet 2 min 2021-12-03
		//asservie seulement si on est depuis 3 minutes dans Temperature Rise ou qu'on a atteint 650 ou 660

			if (TimeForStep >= (1 * SEC_PER_STEP_TEMP_RISE * 1000)) { // changer de 3 a 2 2021-12-03
 8003448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800344e:	fb02 f303 	mul.w	r3, r2, r3
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	429a      	cmp	r2, r3
 8003456:	d338      	bcc.n	80034ca <manageStateMachine+0x426>
			  timeRefAutoMode = currentTime_ms;
 8003458:	4a43      	ldr	r2, [pc, #268]	; (8003568 <manageStateMachine+0x4c4>)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6013      	str	r3, [r2, #0]

			  adjustement = computeAjustement(targetTemperature, dTavant);
 800345e:	4b39      	ldr	r3, [pc, #228]	; (8003544 <manageStateMachine+0x4a0>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6939      	ldr	r1, [r7, #16]
 8003464:	4618      	mov	r0, r3
 8003466:	f000 fe55 	bl	8004114 <computeAjustement>
 800346a:	6338      	str	r0, [r7, #48]	; 0x30
			  AirAdjustment(adjustement, SEC_PER_STEP_TEMP_RISE,
							  &primary, PrimaryMotorParam[Model].MinTempRise, PrimaryMotorParam[Model].MaxTempRise,
 800346c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003470:	4a37      	ldr	r2, [pc, #220]	; (8003550 <manageStateMachine+0x4ac>)
 8003472:	015b      	lsls	r3, r3, #5
 8003474:	4413      	add	r3, r2
 8003476:	330a      	adds	r3, #10
 8003478:	f9b3 3000 	ldrsh.w	r3, [r3]
			  AirAdjustment(adjustement, SEC_PER_STEP_TEMP_RISE,
 800347c:	b2d8      	uxtb	r0, r3
							  &primary, PrimaryMotorParam[Model].MinTempRise, PrimaryMotorParam[Model].MaxTempRise,
 800347e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003482:	4a33      	ldr	r2, [pc, #204]	; (8003550 <manageStateMachine+0x4ac>)
 8003484:	015b      	lsls	r3, r3, #5
 8003486:	4413      	add	r3, r2
 8003488:	3308      	adds	r3, #8
 800348a:	f9b3 3000 	ldrsh.w	r3, [r3]
			  AirAdjustment(adjustement, SEC_PER_STEP_TEMP_RISE,
 800348e:	b2db      	uxtb	r3, r3
							  &grill, BoostMotorParam[Model].MinTempRise,BoostMotorParam[Model].MaxTempRise);
 8003490:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003494:	4930      	ldr	r1, [pc, #192]	; (8003558 <manageStateMachine+0x4b4>)
 8003496:	0152      	lsls	r2, r2, #5
 8003498:	440a      	add	r2, r1
 800349a:	320a      	adds	r2, #10
 800349c:	f9b2 2000 	ldrsh.w	r2, [r2]
			  AirAdjustment(adjustement, SEC_PER_STEP_TEMP_RISE,
 80034a0:	b2d2      	uxtb	r2, r2
							  &grill, BoostMotorParam[Model].MinTempRise,BoostMotorParam[Model].MaxTempRise);
 80034a2:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80034a6:	4c2c      	ldr	r4, [pc, #176]	; (8003558 <manageStateMachine+0x4b4>)
 80034a8:	0149      	lsls	r1, r1, #5
 80034aa:	4421      	add	r1, r4
 80034ac:	3108      	adds	r1, #8
 80034ae:	f9b1 1000 	ldrsh.w	r1, [r1]
			  AirAdjustment(adjustement, SEC_PER_STEP_TEMP_RISE,
 80034b2:	b2c9      	uxtb	r1, r1
 80034b4:	9103      	str	r1, [sp, #12]
 80034b6:	9202      	str	r2, [sp, #8]
 80034b8:	4a28      	ldr	r2, [pc, #160]	; (800355c <manageStateMachine+0x4b8>)
 80034ba:	9201      	str	r2, [sp, #4]
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	4603      	mov	r3, r0
 80034c0:	4a24      	ldr	r2, [pc, #144]	; (8003554 <manageStateMachine+0x4b0>)
 80034c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034c6:	f000 fe79 	bl	80041bc <AirAdjustment>
			}
			timeInTemperatureRise = thermostatRequest ? MINUTES(10):MINUTES(7);
 80034ca:	4b28      	ldr	r3, [pc, #160]	; (800356c <manageStateMachine+0x4c8>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <manageStateMachine+0x432>
 80034d2:	4b27      	ldr	r3, [pc, #156]	; (8003570 <manageStateMachine+0x4cc>)
 80034d4:	e000      	b.n	80034d8 <manageStateMachine+0x434>
 80034d6:	4b27      	ldr	r3, [pc, #156]	; (8003574 <manageStateMachine+0x4d0>)
 80034d8:	61bb      	str	r3, [r7, #24]
			if ( timeSinceStateEntry > timeInTemperatureRise && (baffleTemperature > targetTemperature))
 80034da:	4b27      	ldr	r3, [pc, #156]	; (8003578 <manageStateMachine+0x4d4>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d20e      	bcs.n	8003502 <manageStateMachine+0x45e>
 80034e4:	4b25      	ldr	r3, [pc, #148]	; (800357c <manageStateMachine+0x4d8>)
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	4b16      	ldr	r3, [pc, #88]	; (8003544 <manageStateMachine+0x4a0>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	dd08      	ble.n	8003502 <manageStateMachine+0x45e>
			{
			  nextState = thermostatRequest ? COMBUSTION_HIGH : COMBUSTION_LOW;
 80034f0:	4b1e      	ldr	r3, [pc, #120]	; (800356c <manageStateMachine+0x4c8>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <manageStateMachine+0x458>
 80034f8:	2306      	movs	r3, #6
 80034fa:	e000      	b.n	80034fe <manageStateMachine+0x45a>
 80034fc:	2304      	movs	r3, #4
 80034fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}


#endif
		if(reloadingEvent || (baffleTemperature < 3000)) {// changé pour 300 au lieu de 460 2022-03-04
 8003502:	4b1f      	ldr	r3, [pc, #124]	; (8003580 <manageStateMachine+0x4dc>)
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d105      	bne.n	8003516 <manageStateMachine+0x472>
 800350a:	4b1c      	ldr	r3, [pc, #112]	; (800357c <manageStateMachine+0x4d8>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8003512:	4293      	cmp	r3, r2
 8003514:	dc04      	bgt.n	8003520 <manageStateMachine+0x47c>
			nextState = ZEROING_STEPPER;
 8003516:	2300      	movs	r3, #0
 8003518:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		{
			nextState = thermostatRequest ? COMBUSTION_HIGH : COMBUSTION_LOW;
		}

      break;
 800351c:	f000 bc0c 	b.w	8003d38 <manageStateMachine+0xc94>
		else if(timeSinceStateEntry > MINUTES(30))
 8003520:	4b15      	ldr	r3, [pc, #84]	; (8003578 <manageStateMachine+0x4d4>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a17      	ldr	r2, [pc, #92]	; (8003584 <manageStateMachine+0x4e0>)
 8003526:	4293      	cmp	r3, r2
 8003528:	f240 8406 	bls.w	8003d38 <manageStateMachine+0xc94>
			nextState = thermostatRequest ? COMBUSTION_HIGH : COMBUSTION_LOW;
 800352c:	4b0f      	ldr	r3, [pc, #60]	; (800356c <manageStateMachine+0x4c8>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <manageStateMachine+0x494>
 8003534:	2306      	movs	r3, #6
 8003536:	e000      	b.n	800353a <manageStateMachine+0x496>
 8003538:	2304      	movs	r3, #4
 800353a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      break;
 800353e:	e3fb      	b.n	8003d38 <manageStateMachine+0xc94>
 8003540:	0800f454 	.word	0x0800f454
 8003544:	20000618 	.word	0x20000618
 8003548:	2000061c 	.word	0x2000061c
 800354c:	200000f8 	.word	0x200000f8
 8003550:	0800f498 	.word	0x0800f498
 8003554:	20000000 	.word	0x20000000
 8003558:	0800f4d8 	.word	0x0800f4d8
 800355c:	20000018 	.word	0x20000018
 8003560:	0800f518 	.word	0x0800f518
 8003564:	20000030 	.word	0x20000030
 8003568:	20000614 	.word	0x20000614
 800356c:	2000010c 	.word	0x2000010c
 8003570:	000927c0 	.word	0x000927c0
 8003574:	000668a0 	.word	0x000668a0
 8003578:	200005e0 	.word	0x200005e0
 800357c:	20000100 	.word	0x20000100
 8003580:	200000f9 	.word	0x200000f9
 8003584:	001b7740 	.word	0x001b7740

	case COMBUSTION_HIGH:
			if(historyState != currentState){
 8003588:	4b94      	ldr	r3, [pc, #592]	; (80037dc <manageStateMachine+0x738>)
 800358a:	781a      	ldrb	r2, [r3, #0]
 800358c:	4b94      	ldr	r3, [pc, #592]	; (80037e0 <manageStateMachine+0x73c>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	429a      	cmp	r2, r3
 8003592:	d02e      	beq.n	80035f2 <manageStateMachine+0x54e>

				StateEntryControlAdjustment(&primary, PrimaryMotorParam[Model].MinCombHigh, PrimaryMotorParam[Model].MaxCombHigh,
 8003594:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003598:	4a92      	ldr	r2, [pc, #584]	; (80037e4 <manageStateMachine+0x740>)
 800359a:	015b      	lsls	r3, r3, #5
 800359c:	4413      	add	r3, r2
 800359e:	3316      	adds	r3, #22
 80035a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035a4:	b2d9      	uxtb	r1, r3
 80035a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80035aa:	4a8e      	ldr	r2, [pc, #568]	; (80037e4 <manageStateMachine+0x740>)
 80035ac:	015b      	lsls	r3, r3, #5
 80035ae:	4413      	add	r3, r2
 80035b0:	3314      	adds	r3, #20
 80035b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035b6:	b2d8      	uxtb	r0, r3
							  				&grill, BoostMotorParam[Model].MinCombHigh,BoostMotorParam[Model].MaxCombHigh);
 80035b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80035bc:	4a8a      	ldr	r2, [pc, #552]	; (80037e8 <manageStateMachine+0x744>)
 80035be:	015b      	lsls	r3, r3, #5
 80035c0:	4413      	add	r3, r2
 80035c2:	3316      	adds	r3, #22
 80035c4:	f9b3 3000 	ldrsh.w	r3, [r3]
				StateEntryControlAdjustment(&primary, PrimaryMotorParam[Model].MinCombHigh, PrimaryMotorParam[Model].MaxCombHigh,
 80035c8:	b2db      	uxtb	r3, r3
							  				&grill, BoostMotorParam[Model].MinCombHigh,BoostMotorParam[Model].MaxCombHigh);
 80035ca:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80035ce:	4c86      	ldr	r4, [pc, #536]	; (80037e8 <manageStateMachine+0x744>)
 80035d0:	0152      	lsls	r2, r2, #5
 80035d2:	4422      	add	r2, r4
 80035d4:	3214      	adds	r2, #20
 80035d6:	f9b2 2000 	ldrsh.w	r2, [r2]
				StateEntryControlAdjustment(&primary, PrimaryMotorParam[Model].MinCombHigh, PrimaryMotorParam[Model].MaxCombHigh,
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	9201      	str	r2, [sp, #4]
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	4b82      	ldr	r3, [pc, #520]	; (80037ec <manageStateMachine+0x748>)
 80035e2:	4602      	mov	r2, r0
 80035e4:	4882      	ldr	r0, [pc, #520]	; (80037f0 <manageStateMachine+0x74c>)
 80035e6:	f000 fe2f 	bl	8004248 <StateEntryControlAdjustment>
				historyState = currentState;
 80035ea:	4b7d      	ldr	r3, [pc, #500]	; (80037e0 <manageStateMachine+0x73c>)
 80035ec:	781a      	ldrb	r2, [r3, #0]
 80035ee:	4b7b      	ldr	r3, [pc, #492]	; (80037dc <manageStateMachine+0x738>)
 80035f0:	701a      	strb	r2, [r3, #0]
            }
#else
            /* Since the control algo (i.e. computeAjustement) is limited
               to +/- 3 steps, it whould take 3 * sec per step to complete
               the mouvement. Reevaluate the control at that maximum period. */
            if (TimeForStep >= (3 * SEC_PER_STEP_COMB_HIGH * 1000)&& AirInput_InPosition(&grill) && AirInput_InPosition(&primary) ) {
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80035f8:	fb02 f303 	mul.w	r3, r2, r3
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d34d      	bcc.n	800369e <manageStateMachine+0x5fa>
 8003602:	487a      	ldr	r0, [pc, #488]	; (80037ec <manageStateMachine+0x748>)
 8003604:	f7ff fc92 	bl	8002f2c <AirInput_InPosition>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d047      	beq.n	800369e <manageStateMachine+0x5fa>
 800360e:	4878      	ldr	r0, [pc, #480]	; (80037f0 <manageStateMachine+0x74c>)
 8003610:	f7ff fc8c 	bl	8002f2c <AirInput_InPosition>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d041      	beq.n	800369e <manageStateMachine+0x5fa>
              timeRefAutoMode = currentTime_ms;
 800361a:	4a76      	ldr	r2, [pc, #472]	; (80037f4 <manageStateMachine+0x750>)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6013      	str	r3, [r2, #0]
              adjustement = computeAjustement(TemperatureParam[Model].CombHighTarget, dTavant);
 8003620:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003624:	4974      	ldr	r1, [pc, #464]	; (80037f8 <manageStateMachine+0x754>)
 8003626:	4613      	mov	r3, r2
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	4413      	add	r3, r2
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	440b      	add	r3, r1
 8003630:	330a      	adds	r3, #10
 8003632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003636:	6939      	ldr	r1, [r7, #16]
 8003638:	4618      	mov	r0, r3
 800363a:	f000 fd6b 	bl	8004114 <computeAjustement>
 800363e:	6338      	str	r0, [r7, #48]	; 0x30
			  AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
											&primary, PrimaryMotorParam[Model].MinCombHigh, PrimaryMotorParam[Model].MaxCombHigh,
 8003640:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003644:	4a67      	ldr	r2, [pc, #412]	; (80037e4 <manageStateMachine+0x740>)
 8003646:	015b      	lsls	r3, r3, #5
 8003648:	4413      	add	r3, r2
 800364a:	3316      	adds	r3, #22
 800364c:	f9b3 3000 	ldrsh.w	r3, [r3]
			  AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 8003650:	b2d8      	uxtb	r0, r3
											&primary, PrimaryMotorParam[Model].MinCombHigh, PrimaryMotorParam[Model].MaxCombHigh,
 8003652:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003656:	4a63      	ldr	r2, [pc, #396]	; (80037e4 <manageStateMachine+0x740>)
 8003658:	015b      	lsls	r3, r3, #5
 800365a:	4413      	add	r3, r2
 800365c:	3314      	adds	r3, #20
 800365e:	f9b3 3000 	ldrsh.w	r3, [r3]
			  AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 8003662:	b2db      	uxtb	r3, r3
							  				&grill, BoostMotorParam[Model].MinCombHigh,BoostMotorParam[Model].MaxCombHigh);
 8003664:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003668:	495f      	ldr	r1, [pc, #380]	; (80037e8 <manageStateMachine+0x744>)
 800366a:	0152      	lsls	r2, r2, #5
 800366c:	440a      	add	r2, r1
 800366e:	3216      	adds	r2, #22
 8003670:	f9b2 2000 	ldrsh.w	r2, [r2]
			  AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 8003674:	b2d2      	uxtb	r2, r2
							  				&grill, BoostMotorParam[Model].MinCombHigh,BoostMotorParam[Model].MaxCombHigh);
 8003676:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800367a:	4c5b      	ldr	r4, [pc, #364]	; (80037e8 <manageStateMachine+0x744>)
 800367c:	0149      	lsls	r1, r1, #5
 800367e:	4421      	add	r1, r4
 8003680:	3114      	adds	r1, #20
 8003682:	f9b1 1000 	ldrsh.w	r1, [r1]
			  AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 8003686:	b2c9      	uxtb	r1, r1
 8003688:	9103      	str	r1, [sp, #12]
 800368a:	9202      	str	r2, [sp, #8]
 800368c:	4a57      	ldr	r2, [pc, #348]	; (80037ec <manageStateMachine+0x748>)
 800368e:	9201      	str	r2, [sp, #4]
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	4603      	mov	r3, r0
 8003694:	4a56      	ldr	r2, [pc, #344]	; (80037f0 <manageStateMachine+0x74c>)
 8003696:	6a39      	ldr	r1, [r7, #32]
 8003698:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800369a:	f000 fd8f 	bl	80041bc <AirAdjustment>

            }
#endif
            if ( ((baffleTemperature) >= (rearTemperature-TemperatureParam[Model].CoalDeltaTemp)) // changement de <= à >= UFEC 23 2021-11-23
 800369e:	4b57      	ldr	r3, [pc, #348]	; (80037fc <manageStateMachine+0x758>)
 80036a0:	6819      	ldr	r1, [r3, #0]
 80036a2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80036a6:	4854      	ldr	r0, [pc, #336]	; (80037f8 <manageStateMachine+0x754>)
 80036a8:	4613      	mov	r3, r2
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	4413      	add	r3, r2
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	4403      	add	r3, r0
 80036b2:	3316      	adds	r3, #22
 80036b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036b8:	1aca      	subs	r2, r1, r3
 80036ba:	4b51      	ldr	r3, [pc, #324]	; (8003800 <manageStateMachine+0x75c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	dc12      	bgt.n	80036e8 <manageStateMachine+0x644>
            		&& (TemperatureParam[Model].CoalCrossOverRearHigh > rearTemperature) ) //détection de l'état coal/braise
 80036c2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80036c6:	494c      	ldr	r1, [pc, #304]	; (80037f8 <manageStateMachine+0x754>)
 80036c8:	4613      	mov	r3, r2
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	4413      	add	r3, r2
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	440b      	add	r3, r1
 80036d2:	3314      	adds	r3, #20
 80036d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036d8:	461a      	mov	r2, r3
 80036da:	4b48      	ldr	r3, [pc, #288]	; (80037fc <manageStateMachine+0x758>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	dd02      	ble.n	80036e8 <manageStateMachine+0x644>
            {
            	nextState = COAL_HIGH;
 80036e2:	2309      	movs	r3, #9
 80036e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            }
            if (!thermostatRequest) {
 80036e8:	4b46      	ldr	r3, [pc, #280]	; (8003804 <manageStateMachine+0x760>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	f083 0301 	eor.w	r3, r3, #1
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <manageStateMachine+0x65a>

              nextState = COMBUSTION_LOW;
 80036f6:	2304      	movs	r3, #4
 80036f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            } else if (reloadingEvent) {
              nextState = ZEROING_STEPPER;
            }

          break;
 80036fc:	e31e      	b.n	8003d3c <manageStateMachine+0xc98>
            } else if (reloadingEvent) {
 80036fe:	4b42      	ldr	r3, [pc, #264]	; (8003808 <manageStateMachine+0x764>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 831a 	beq.w	8003d3c <manageStateMachine+0xc98>
              nextState = ZEROING_STEPPER;
 8003708:	2300      	movs	r3, #0
 800370a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          break;
 800370e:	e315      	b.n	8003d3c <manageStateMachine+0xc98>

    case COMBUSTION_LOW:
    	//HAL_GPIO_WritePin(SPEED1_COIL_GPIO_Port,SPEED1_COIL_Pin,RESET);//desactive le relai pour activer la carte 2 PLV 15/12/21
		if(historyState != currentState){
 8003710:	4b32      	ldr	r3, [pc, #200]	; (80037dc <manageStateMachine+0x738>)
 8003712:	781a      	ldrb	r2, [r3, #0]
 8003714:	4b32      	ldr	r3, [pc, #200]	; (80037e0 <manageStateMachine+0x73c>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	429a      	cmp	r2, r3
 800371a:	d02e      	beq.n	800377a <manageStateMachine+0x6d6>

			StateEntryControlAdjustment(&primary, PrimaryMotorParam[Model].MinCombLow, PrimaryMotorParam[Model].MaxCombLow,
 800371c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003720:	4a30      	ldr	r2, [pc, #192]	; (80037e4 <manageStateMachine+0x740>)
 8003722:	015b      	lsls	r3, r3, #5
 8003724:	4413      	add	r3, r2
 8003726:	330e      	adds	r3, #14
 8003728:	f9b3 3000 	ldrsh.w	r3, [r3]
 800372c:	b2d9      	uxtb	r1, r3
 800372e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003732:	4a2c      	ldr	r2, [pc, #176]	; (80037e4 <manageStateMachine+0x740>)
 8003734:	015b      	lsls	r3, r3, #5
 8003736:	4413      	add	r3, r2
 8003738:	330c      	adds	r3, #12
 800373a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800373e:	b2d8      	uxtb	r0, r3
							  			&grill, BoostMotorParam[Model].MinCombLow,BoostMotorParam[Model].MaxCombLow);
 8003740:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003744:	4a28      	ldr	r2, [pc, #160]	; (80037e8 <manageStateMachine+0x744>)
 8003746:	015b      	lsls	r3, r3, #5
 8003748:	4413      	add	r3, r2
 800374a:	330e      	adds	r3, #14
 800374c:	f9b3 3000 	ldrsh.w	r3, [r3]
			StateEntryControlAdjustment(&primary, PrimaryMotorParam[Model].MinCombLow, PrimaryMotorParam[Model].MaxCombLow,
 8003750:	b2db      	uxtb	r3, r3
							  			&grill, BoostMotorParam[Model].MinCombLow,BoostMotorParam[Model].MaxCombLow);
 8003752:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003756:	4c24      	ldr	r4, [pc, #144]	; (80037e8 <manageStateMachine+0x744>)
 8003758:	0152      	lsls	r2, r2, #5
 800375a:	4422      	add	r2, r4
 800375c:	320c      	adds	r2, #12
 800375e:	f9b2 2000 	ldrsh.w	r2, [r2]
			StateEntryControlAdjustment(&primary, PrimaryMotorParam[Model].MinCombLow, PrimaryMotorParam[Model].MaxCombLow,
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	9201      	str	r2, [sp, #4]
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	4b20      	ldr	r3, [pc, #128]	; (80037ec <manageStateMachine+0x748>)
 800376a:	4602      	mov	r2, r0
 800376c:	4820      	ldr	r0, [pc, #128]	; (80037f0 <manageStateMachine+0x74c>)
 800376e:	f000 fd6b 	bl	8004248 <StateEntryControlAdjustment>
		    historyState = currentState;
 8003772:	4b1b      	ldr	r3, [pc, #108]	; (80037e0 <manageStateMachine+0x73c>)
 8003774:	781a      	ldrb	r2, [r3, #0]
 8003776:	4b19      	ldr	r3, [pc, #100]	; (80037dc <manageStateMachine+0x738>)
 8003778:	701a      	strb	r2, [r3, #0]
        	PIDTrapPosition = PIDTrapPosition > PRIMARY_SECONDARY_FULL_OPEN?PRIMARY_SECONDARY_FULL_OPEN:PIDTrapPosition<0?0:PIDTrapPosition;

        }
		AirInput_forceAperture(&primary,PIDTrapPosition);
#else
		deltaTemperature = abs(rearTemperature - baffleTemperature);
 800377a:	4b20      	ldr	r3, [pc, #128]	; (80037fc <manageStateMachine+0x758>)
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	4b20      	ldr	r3, [pc, #128]	; (8003800 <manageStateMachine+0x75c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	bfb8      	it	lt
 8003788:	425b      	neglt	r3, r3
 800378a:	60fb      	str	r3, [r7, #12]

		if (rearTemperature < TemperatureParam[Model].FlameLoss && ( deltaTemperature < TemperatureParam[Model].FlameLossDelta)) { //changement de reartemp pour le flameloss au lieu de baffletemp GTF 2022-08-30
 800378c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003790:	4919      	ldr	r1, [pc, #100]	; (80037f8 <manageStateMachine+0x754>)
 8003792:	4613      	mov	r3, r2
 8003794:	011b      	lsls	r3, r3, #4
 8003796:	4413      	add	r3, r2
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	440b      	add	r3, r1
 800379c:	330e      	adds	r3, #14
 800379e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037a2:	461a      	mov	r2, r3
 80037a4:	4b15      	ldr	r3, [pc, #84]	; (80037fc <manageStateMachine+0x758>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	dd2f      	ble.n	800380c <manageStateMachine+0x768>
 80037ac:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80037b0:	4911      	ldr	r1, [pc, #68]	; (80037f8 <manageStateMachine+0x754>)
 80037b2:	4613      	mov	r3, r2
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	4413      	add	r3, r2
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	440b      	add	r3, r1
 80037bc:	3310      	adds	r3, #16
 80037be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037c2:	461a      	mov	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4293      	cmp	r3, r2
 80037c8:	da20      	bge.n	800380c <manageStateMachine+0x768>
			nextState = FLAME_LOSS;
 80037ca:	2308      	movs	r3, #8
 80037cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			AirInput_forceAperture(&grill, GRILL_FULL_OPEN);
 80037d0:	2164      	movs	r1, #100	; 0x64
 80037d2:	4806      	ldr	r0, [pc, #24]	; (80037ec <manageStateMachine+0x748>)
 80037d4:	f7ff fb80 	bl	8002ed8 <AirInput_forceAperture>
 80037d8:	e0f7      	b.n	80039ca <manageStateMachine+0x926>
 80037da:	bf00      	nop
 80037dc:	2000061c 	.word	0x2000061c
 80037e0:	200000f8 	.word	0x200000f8
 80037e4:	0800f498 	.word	0x0800f498
 80037e8:	0800f4d8 	.word	0x0800f4d8
 80037ec:	20000018 	.word	0x20000018
 80037f0:	20000000 	.word	0x20000000
 80037f4:	20000614 	.word	0x20000614
 80037f8:	0800f454 	.word	0x0800f454
 80037fc:	20000104 	.word	0x20000104
 8003800:	20000100 	.word	0x20000100
 8003804:	2000010c 	.word	0x2000010c
 8003808:	200000f9 	.word	0x200000f9
		}
		else{
			//we loss the flamme but we are not in coal yet, we reopen the grill
		  //AirInput_setSetPoint(&grill, GRILL_CLOSED, SEC_PER_STEP_COMB_LOW);
		  if (TimeForStep >= (1 * SEC_PER_STEP_COMB_LOW * 1000)
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003812:	fb02 f303 	mul.w	r3, r2, r3
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	429a      	cmp	r2, r3
 800381a:	f0c0 80d6 	bcc.w	80039ca <manageStateMachine+0x926>
				  && AirInput_InPosition(&grill)
 800381e:	48bf      	ldr	r0, [pc, #764]	; (8003b1c <manageStateMachine+0xa78>)
 8003820:	f7ff fb84 	bl	8002f2c <AirInput_InPosition>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 80cf 	beq.w	80039ca <manageStateMachine+0x926>
				  && AirInput_InPosition(&primary)
 800382c:	48bc      	ldr	r0, [pc, #752]	; (8003b20 <manageStateMachine+0xa7c>)
 800382e:	f7ff fb7d 	bl	8002f2c <AirInput_InPosition>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 80c8 	beq.w	80039ca <manageStateMachine+0x926>
				  && (timeSinceStateEntry >=MINUTES(2)) ) {
 800383a:	4bba      	ldr	r3, [pc, #744]	; (8003b24 <manageStateMachine+0xa80>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4aba      	ldr	r2, [pc, #744]	; (8003b28 <manageStateMachine+0xa84>)
 8003840:	4293      	cmp	r3, r2
 8003842:	f240 80c2 	bls.w	80039ca <manageStateMachine+0x926>

			timeRefAutoMode = currentTime_ms;
 8003846:	4ab9      	ldr	r2, [pc, #740]	; (8003b2c <manageStateMachine+0xa88>)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6013      	str	r3, [r2, #0]

			adjustement = computeAjustement(TemperatureParam[Model].CombLowTarget, dTavant);
 800384c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003850:	49b7      	ldr	r1, [pc, #732]	; (8003b30 <manageStateMachine+0xa8c>)
 8003852:	4613      	mov	r3, r2
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	4413      	add	r3, r2
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	440b      	add	r3, r1
 800385c:	3308      	adds	r3, #8
 800385e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003862:	6939      	ldr	r1, [r7, #16]
 8003864:	4618      	mov	r0, r3
 8003866:	f000 fc55 	bl	8004114 <computeAjustement>
 800386a:	6338      	str	r0, [r7, #48]	; 0x30

			if (timeSinceStateEntry > MINUTES(60) && (rearTemperature > TemperatureParam[Model].CombLowtoSuperLow)) //changé 35 min pour 60
 800386c:	4bad      	ldr	r3, [pc, #692]	; (8003b24 <manageStateMachine+0xa80>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4ab0      	ldr	r2, [pc, #704]	; (8003b34 <manageStateMachine+0xa90>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d97a      	bls.n	800396c <manageStateMachine+0x8c8>
 8003876:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800387a:	49ad      	ldr	r1, [pc, #692]	; (8003b30 <manageStateMachine+0xa8c>)
 800387c:	4613      	mov	r3, r2
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	4413      	add	r3, r2
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	440b      	add	r3, r1
 8003886:	330c      	adds	r3, #12
 8003888:	f9b3 3000 	ldrsh.w	r3, [r3]
 800388c:	461a      	mov	r2, r3
 800388e:	4baa      	ldr	r3, [pc, #680]	; (8003b38 <manageStateMachine+0xa94>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	da6a      	bge.n	800396c <manageStateMachine+0x8c8>
			{		
				StateEntryControlAdjustment(&primary,PrimaryMotorParam[Model].MinCombSuperLow,PrimaryMotorParam[Model].MaxCombSuperLow,
 8003896:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800389a:	4aa8      	ldr	r2, [pc, #672]	; (8003b3c <manageStateMachine+0xa98>)
 800389c:	015b      	lsls	r3, r3, #5
 800389e:	4413      	add	r3, r2
 80038a0:	3312      	adds	r3, #18
 80038a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038a6:	b2d9      	uxtb	r1, r3
 80038a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038ac:	4aa3      	ldr	r2, [pc, #652]	; (8003b3c <manageStateMachine+0xa98>)
 80038ae:	015b      	lsls	r3, r3, #5
 80038b0:	4413      	add	r3, r2
 80038b2:	3310      	adds	r3, #16
 80038b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038b8:	b2d8      	uxtb	r0, r3
											&grill,BoostMotorParam[Model].MinCombSuperLow,BoostMotorParam[Model].MaxCombSuperLow);
 80038ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038be:	4aa0      	ldr	r2, [pc, #640]	; (8003b40 <manageStateMachine+0xa9c>)
 80038c0:	015b      	lsls	r3, r3, #5
 80038c2:	4413      	add	r3, r2
 80038c4:	3312      	adds	r3, #18
 80038c6:	f9b3 3000 	ldrsh.w	r3, [r3]
				StateEntryControlAdjustment(&primary,PrimaryMotorParam[Model].MinCombSuperLow,PrimaryMotorParam[Model].MaxCombSuperLow,
 80038ca:	b2db      	uxtb	r3, r3
											&grill,BoostMotorParam[Model].MinCombSuperLow,BoostMotorParam[Model].MaxCombSuperLow);
 80038cc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80038d0:	4c9b      	ldr	r4, [pc, #620]	; (8003b40 <manageStateMachine+0xa9c>)
 80038d2:	0152      	lsls	r2, r2, #5
 80038d4:	4422      	add	r2, r4
 80038d6:	3210      	adds	r2, #16
 80038d8:	f9b2 2000 	ldrsh.w	r2, [r2]
				StateEntryControlAdjustment(&primary,PrimaryMotorParam[Model].MinCombSuperLow,PrimaryMotorParam[Model].MaxCombSuperLow,
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	9201      	str	r2, [sp, #4]
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	4b8e      	ldr	r3, [pc, #568]	; (8003b1c <manageStateMachine+0xa78>)
 80038e4:	4602      	mov	r2, r0
 80038e6:	488e      	ldr	r0, [pc, #568]	; (8003b20 <manageStateMachine+0xa7c>)
 80038e8:	f000 fcae 	bl	8004248 <StateEntryControlAdjustment>
				adjustement = computeAjustement(TemperatureParam[Model].CombLowtoSuperLow, dTavant);
 80038ec:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80038f0:	498f      	ldr	r1, [pc, #572]	; (8003b30 <manageStateMachine+0xa8c>)
 80038f2:	4613      	mov	r3, r2
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	4413      	add	r3, r2
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	440b      	add	r3, r1
 80038fc:	330c      	adds	r3, #12
 80038fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003902:	6939      	ldr	r1, [r7, #16]
 8003904:	4618      	mov	r0, r3
 8003906:	f000 fc05 	bl	8004114 <computeAjustement>
 800390a:	6338      	str	r0, [r7, #48]	; 0x30
			
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
									&primary,PrimaryMotorParam[Model].MinCombSuperLow,PrimaryMotorParam[Model].MaxCombSuperLow,
 800390c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003910:	4a8a      	ldr	r2, [pc, #552]	; (8003b3c <manageStateMachine+0xa98>)
 8003912:	015b      	lsls	r3, r3, #5
 8003914:	4413      	add	r3, r2
 8003916:	3312      	adds	r3, #18
 8003918:	f9b3 3000 	ldrsh.w	r3, [r3]
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 800391c:	b2d8      	uxtb	r0, r3
									&primary,PrimaryMotorParam[Model].MinCombSuperLow,PrimaryMotorParam[Model].MaxCombSuperLow,
 800391e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003922:	4a86      	ldr	r2, [pc, #536]	; (8003b3c <manageStateMachine+0xa98>)
 8003924:	015b      	lsls	r3, r3, #5
 8003926:	4413      	add	r3, r2
 8003928:	3310      	adds	r3, #16
 800392a:	f9b3 3000 	ldrsh.w	r3, [r3]
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 800392e:	b2db      	uxtb	r3, r3
									&grill,BoostMotorParam[Model].MinCombSuperLow,BoostMotorParam[Model].MaxCombSuperLow);
 8003930:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003934:	4982      	ldr	r1, [pc, #520]	; (8003b40 <manageStateMachine+0xa9c>)
 8003936:	0152      	lsls	r2, r2, #5
 8003938:	440a      	add	r2, r1
 800393a:	3212      	adds	r2, #18
 800393c:	f9b2 2000 	ldrsh.w	r2, [r2]
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 8003940:	b2d2      	uxtb	r2, r2
									&grill,BoostMotorParam[Model].MinCombSuperLow,BoostMotorParam[Model].MaxCombSuperLow);
 8003942:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003946:	4c7e      	ldr	r4, [pc, #504]	; (8003b40 <manageStateMachine+0xa9c>)
 8003948:	0149      	lsls	r1, r1, #5
 800394a:	4421      	add	r1, r4
 800394c:	3110      	adds	r1, #16
 800394e:	f9b1 1000 	ldrsh.w	r1, [r1]
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 8003952:	b2c9      	uxtb	r1, r1
 8003954:	9103      	str	r1, [sp, #12]
 8003956:	9202      	str	r2, [sp, #8]
 8003958:	4a70      	ldr	r2, [pc, #448]	; (8003b1c <manageStateMachine+0xa78>)
 800395a:	9201      	str	r2, [sp, #4]
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	4603      	mov	r3, r0
 8003960:	4a6f      	ldr	r2, [pc, #444]	; (8003b20 <manageStateMachine+0xa7c>)
 8003962:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003964:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003966:	f000 fc29 	bl	80041bc <AirAdjustment>
 800396a:	e02e      	b.n	80039ca <manageStateMachine+0x926>
			
			}
			else
			{
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
							  &primary, PrimaryMotorParam[Model].MinCombLow, PrimaryMotorParam[Model].MaxCombLow,
 800396c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003970:	4a72      	ldr	r2, [pc, #456]	; (8003b3c <manageStateMachine+0xa98>)
 8003972:	015b      	lsls	r3, r3, #5
 8003974:	4413      	add	r3, r2
 8003976:	330e      	adds	r3, #14
 8003978:	f9b3 3000 	ldrsh.w	r3, [r3]
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 800397c:	b2d8      	uxtb	r0, r3
							  &primary, PrimaryMotorParam[Model].MinCombLow, PrimaryMotorParam[Model].MaxCombLow,
 800397e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003982:	4a6e      	ldr	r2, [pc, #440]	; (8003b3c <manageStateMachine+0xa98>)
 8003984:	015b      	lsls	r3, r3, #5
 8003986:	4413      	add	r3, r2
 8003988:	330c      	adds	r3, #12
 800398a:	f9b3 3000 	ldrsh.w	r3, [r3]
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 800398e:	b2db      	uxtb	r3, r3
							  &grill,BoostMotorParam[Model].MinCombLow,BoostMotorParam[Model].MaxCombLow);
 8003990:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003994:	496a      	ldr	r1, [pc, #424]	; (8003b40 <manageStateMachine+0xa9c>)
 8003996:	0152      	lsls	r2, r2, #5
 8003998:	440a      	add	r2, r1
 800399a:	320e      	adds	r2, #14
 800399c:	f9b2 2000 	ldrsh.w	r2, [r2]
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 80039a0:	b2d2      	uxtb	r2, r2
							  &grill,BoostMotorParam[Model].MinCombLow,BoostMotorParam[Model].MaxCombLow);
 80039a2:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80039a6:	4c66      	ldr	r4, [pc, #408]	; (8003b40 <manageStateMachine+0xa9c>)
 80039a8:	0149      	lsls	r1, r1, #5
 80039aa:	4421      	add	r1, r4
 80039ac:	310c      	adds	r1, #12
 80039ae:	f9b1 1000 	ldrsh.w	r1, [r1]
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 80039b2:	b2c9      	uxtb	r1, r1
 80039b4:	9103      	str	r1, [sp, #12]
 80039b6:	9202      	str	r2, [sp, #8]
 80039b8:	4a58      	ldr	r2, [pc, #352]	; (8003b1c <manageStateMachine+0xa78>)
 80039ba:	9201      	str	r2, [sp, #4]
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	4603      	mov	r3, r0
 80039c0:	4a57      	ldr	r2, [pc, #348]	; (8003b20 <manageStateMachine+0xa7c>)
 80039c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039c6:	f000 fbf9 	bl	80041bc <AirAdjustment>
			}
  	  	  }
		}

#endif
		if ( (baffleTemperature <= (rearTemperature-TemperatureParam[Model].CoalDeltaTemp)) //RETOUR À <= ET CHANGEMENENT POUR 200 POUR LE COALCROSSOVERLOW gtf 2022-08-30
 80039ca:	4b5b      	ldr	r3, [pc, #364]	; (8003b38 <manageStateMachine+0xa94>)
 80039cc:	6819      	ldr	r1, [r3, #0]
 80039ce:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80039d2:	4857      	ldr	r0, [pc, #348]	; (8003b30 <manageStateMachine+0xa8c>)
 80039d4:	4613      	mov	r3, r2
 80039d6:	011b      	lsls	r3, r3, #4
 80039d8:	4413      	add	r3, r2
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	4403      	add	r3, r0
 80039de:	3316      	adds	r3, #22
 80039e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039e4:	1aca      	subs	r2, r1, r3
 80039e6:	4b57      	ldr	r3, [pc, #348]	; (8003b44 <manageStateMachine+0xaa0>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	db12      	blt.n	8003a14 <manageStateMachine+0x970>
				&& (rearTemperature < TemperatureParam[Model].CoalCrossOverRearLow) )
 80039ee:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80039f2:	494f      	ldr	r1, [pc, #316]	; (8003b30 <manageStateMachine+0xa8c>)
 80039f4:	4613      	mov	r3, r2
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	4413      	add	r3, r2
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	440b      	add	r3, r1
 80039fe:	3312      	adds	r3, #18
 8003a00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a04:	461a      	mov	r2, r3
 8003a06:	4b4c      	ldr	r3, [pc, #304]	; (8003b38 <manageStateMachine+0xa94>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	dd02      	ble.n	8003a14 <manageStateMachine+0x970>
        {
        	nextState = COAL_LOW;
 8003a0e:	2307      	movs	r3, #7
 8003a10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        if (thermostatRequest) {
 8003a14:	4b4c      	ldr	r3, [pc, #304]	; (8003b48 <manageStateMachine+0xaa4>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <manageStateMachine+0x980>
          nextState = COMBUSTION_HIGH;
 8003a1c:	2306      	movs	r3, #6
 8003a1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        } else if (reloadingEvent) {
          nextState = ZEROING_STEPPER;
        }
      break;
 8003a22:	e18d      	b.n	8003d40 <manageStateMachine+0xc9c>
        } else if (reloadingEvent) {
 8003a24:	4b49      	ldr	r3, [pc, #292]	; (8003b4c <manageStateMachine+0xaa8>)
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 8189 	beq.w	8003d40 <manageStateMachine+0xc9c>
          nextState = ZEROING_STEPPER;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      break;
 8003a34:	e184      	b.n	8003d40 <manageStateMachine+0xc9c>

    case COAL_LOW: //remplacement de la logic du low pour la logic du high de la fournaise pour UFEC 23 2021-11-23

    	//HAL_GPIO_WritePin(SPEED1_COIL_GPIO_Port,SPEED1_COIL_Pin,SET);//active le relai pour activer la carte 2 PLV 15/12/21
    	AirInput_forceAperture(&primary, PrimaryMotorParam[Model].MaxCoalLow);
 8003a36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a3a:	4a40      	ldr	r2, [pc, #256]	; (8003b3c <manageStateMachine+0xa98>)
 8003a3c:	015b      	lsls	r3, r3, #5
 8003a3e:	4413      	add	r3, r2
 8003a40:	331c      	adds	r3, #28
 8003a42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a46:	4619      	mov	r1, r3
 8003a48:	4835      	ldr	r0, [pc, #212]	; (8003b20 <manageStateMachine+0xa7c>)
 8003a4a:	f7ff fa45 	bl	8002ed8 <AirInput_forceAperture>
    	AirInput_forceAperture(&grill, BoostMotorParam[Model].MaxCoalLow);
 8003a4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a52:	4a3b      	ldr	r2, [pc, #236]	; (8003b40 <manageStateMachine+0xa9c>)
 8003a54:	015b      	lsls	r3, r3, #5
 8003a56:	4413      	add	r3, r2
 8003a58:	331c      	adds	r3, #28
 8003a5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a5e:	4619      	mov	r1, r3
 8003a60:	482e      	ldr	r0, [pc, #184]	; (8003b1c <manageStateMachine+0xa78>)
 8003a62:	f7ff fa39 	bl	8002ed8 <AirInput_forceAperture>
    	if (thermostatRequest) {
 8003a66:	4b38      	ldr	r3, [pc, #224]	; (8003b48 <manageStateMachine+0xaa4>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <manageStateMachine+0x9d2>
    	          nextState = COAL_HIGH;
 8003a6e:	2309      	movs	r3, #9
 8003a70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    	    	//}else if (reloadingEvent) {
    	          //  nextState = ZEROING_STEPPER;
    	        //}else if (baffleTemperature > TemperatureParam[Model].CombLowTarget){
    	        	//nextState = COMBUSTION_LOW;
    	        //}
    	break;
 8003a74:	e166      	b.n	8003d44 <manageStateMachine+0xca0>
    	}else if (reloadingEvent) {
 8003a76:	4b35      	ldr	r3, [pc, #212]	; (8003b4c <manageStateMachine+0xaa8>)
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 8162 	beq.w	8003d44 <manageStateMachine+0xca0>
            nextState = ZEROING_STEPPER;
 8003a80:	2300      	movs	r3, #0
 8003a82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    	break;
 8003a86:	e15d      	b.n	8003d44 <manageStateMachine+0xca0>

    case FLAME_LOSS:
    	deltaTemperature = abs(rearTemperature - baffleTemperature);
 8003a88:	4b2b      	ldr	r3, [pc, #172]	; (8003b38 <manageStateMachine+0xa94>)
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	4b2d      	ldr	r3, [pc, #180]	; (8003b44 <manageStateMachine+0xaa0>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	bfb8      	it	lt
 8003a96:	425b      	neglt	r3, r3
 8003a98:	60fb      	str	r3, [r7, #12]
    	if( deltaTemperature > TemperatureParam[Model].FlameLossDelta && timeSinceStateEntry >= MINUTES(1))
 8003a9a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003a9e:	4924      	ldr	r1, [pc, #144]	; (8003b30 <manageStateMachine+0xa8c>)
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	011b      	lsls	r3, r3, #4
 8003aa4:	4413      	add	r3, r2
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	440b      	add	r3, r1
 8003aaa:	3310      	adds	r3, #16
 8003aac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	dd0d      	ble.n	8003ad4 <manageStateMachine+0xa30>
 8003ab8:	4b1a      	ldr	r3, [pc, #104]	; (8003b24 <manageStateMachine+0xa80>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d907      	bls.n	8003ad4 <manageStateMachine+0xa30>
    	{
    		nextState = historyState;
 8003ac4:	4b22      	ldr	r3, [pc, #136]	; (8003b50 <manageStateMachine+0xaac>)
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    		AirInput_forceAperture(&grill, GRILL_CLOSED);
 8003acc:	2100      	movs	r1, #0
 8003ace:	4813      	ldr	r0, [pc, #76]	; (8003b1c <manageStateMachine+0xa78>)
 8003ad0:	f7ff fa02 	bl	8002ed8 <AirInput_forceAperture>
    	}
		if(reloadingEvent) {
 8003ad4:	4b1d      	ldr	r3, [pc, #116]	; (8003b4c <manageStateMachine+0xaa8>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <manageStateMachine+0xa40>
			nextState = ZEROING_STEPPER;
 8003adc:	2300      	movs	r3, #0
 8003ade:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}
		else if((rearTemperature < TemperatureParam[Model].CoalCrossOverRearLow) && timeSinceStateEntry >= MINUTES(5))
		{
			nextState = COAL_HIGH;
		}
    	break;
 8003ae2:	e131      	b.n	8003d48 <manageStateMachine+0xca4>
		else if((rearTemperature < TemperatureParam[Model].CoalCrossOverRearLow) && timeSinceStateEntry >= MINUTES(5))
 8003ae4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003ae8:	4911      	ldr	r1, [pc, #68]	; (8003b30 <manageStateMachine+0xa8c>)
 8003aea:	4613      	mov	r3, r2
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	4413      	add	r3, r2
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	440b      	add	r3, r1
 8003af4:	3312      	adds	r3, #18
 8003af6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003afa:	461a      	mov	r2, r3
 8003afc:	4b0e      	ldr	r3, [pc, #56]	; (8003b38 <manageStateMachine+0xa94>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	f340 8121 	ble.w	8003d48 <manageStateMachine+0xca4>
 8003b06:	4b07      	ldr	r3, [pc, #28]	; (8003b24 <manageStateMachine+0xa80>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a12      	ldr	r2, [pc, #72]	; (8003b54 <manageStateMachine+0xab0>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	f240 811b 	bls.w	8003d48 <manageStateMachine+0xca4>
			nextState = COAL_HIGH;
 8003b12:	2309      	movs	r3, #9
 8003b14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    	break;
 8003b18:	e116      	b.n	8003d48 <manageStateMachine+0xca4>
 8003b1a:	bf00      	nop
 8003b1c:	20000018 	.word	0x20000018
 8003b20:	20000000 	.word	0x20000000
 8003b24:	200005e0 	.word	0x200005e0
 8003b28:	0001d4bf 	.word	0x0001d4bf
 8003b2c:	20000614 	.word	0x20000614
 8003b30:	0800f454 	.word	0x0800f454
 8003b34:	0036ee80 	.word	0x0036ee80
 8003b38:	20000104 	.word	0x20000104
 8003b3c:	0800f498 	.word	0x0800f498
 8003b40:	0800f4d8 	.word	0x0800f4d8
 8003b44:	20000100 	.word	0x20000100
 8003b48:	2000010c 	.word	0x2000010c
 8003b4c:	200000f9 	.word	0x200000f9
 8003b50:	2000061c 	.word	0x2000061c
 8003b54:	000493df 	.word	0x000493df

    case COAL_HIGH:
		if(historyState != currentState){
 8003b58:	4bb9      	ldr	r3, [pc, #740]	; (8003e40 <manageStateMachine+0xd9c>)
 8003b5a:	781a      	ldrb	r2, [r3, #0]
 8003b5c:	4bb9      	ldr	r3, [pc, #740]	; (8003e44 <manageStateMachine+0xda0>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d01d      	beq.n	8003ba0 <manageStateMachine+0xafc>
			StateEntryControlAdjustment(&primary,PrimaryMotorParam[Model].MinCoalHigh, PrimaryMotorParam[Model].MaxCoalHigh,
 8003b64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b68:	4ab7      	ldr	r2, [pc, #732]	; (8003e48 <manageStateMachine+0xda4>)
 8003b6a:	015b      	lsls	r3, r3, #5
 8003b6c:	4413      	add	r3, r2
 8003b6e:	331a      	adds	r3, #26
 8003b70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b74:	b2d9      	uxtb	r1, r3
 8003b76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b7a:	4ab3      	ldr	r2, [pc, #716]	; (8003e48 <manageStateMachine+0xda4>)
 8003b7c:	015b      	lsls	r3, r3, #5
 8003b7e:	4413      	add	r3, r2
 8003b80:	3318      	adds	r3, #24
 8003b82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	2300      	movs	r3, #0
 8003b8a:	9301      	str	r3, [sp, #4]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	4bae      	ldr	r3, [pc, #696]	; (8003e4c <manageStateMachine+0xda8>)
 8003b92:	48af      	ldr	r0, [pc, #700]	; (8003e50 <manageStateMachine+0xdac>)
 8003b94:	f000 fb58 	bl	8004248 <StateEntryControlAdjustment>
											&grill,GRILL_CLOSED,GRILL_CLOSED);
		    historyState = currentState;
 8003b98:	4baa      	ldr	r3, [pc, #680]	; (8003e44 <manageStateMachine+0xda0>)
 8003b9a:	781a      	ldrb	r2, [r3, #0]
 8003b9c:	4ba8      	ldr	r3, [pc, #672]	; (8003e40 <manageStateMachine+0xd9c>)
 8003b9e:	701a      	strb	r2, [r3, #0]
		}
        /* Since the control algo (i.e. computeAjustement) is limited
           to +/- 3 steps, it whould take 3 * sec per step to complete
           the mouvement. Reevaluate the control at that maximum period. */
        if (TimeForStep >= (3 * SEC_PER_STEP_COAL_HIGH * 1000)) {
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003ba6:	fb02 f303 	mul.w	r3, r2, r3
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d348      	bcc.n	8003c42 <manageStateMachine+0xb9e>
        	if(rearTemperature > 9000) /// C'EST QUOI ÇA GTF 2022-03-11
 8003bb0:	4ba8      	ldr	r3, [pc, #672]	; (8003e54 <manageStateMachine+0xdb0>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f242 3228 	movw	r2, #9000	; 0x2328
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	dd03      	ble.n	8003bc4 <manageStateMachine+0xb20>
        	{
        		adjustement = -1; //Si T > 900, on ferme. Sinon on suit le tableau d'ajustement
 8003bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc0:	633b      	str	r3, [r7, #48]	; 0x30
 8003bc2:	e00f      	b.n	8003be4 <manageStateMachine+0xb40>
        	}
        	else
        	{
        		adjustement = computeAjustement( TemperatureParam[Model].CombHighTarget, dTavant);
 8003bc4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003bc8:	49a3      	ldr	r1, [pc, #652]	; (8003e58 <manageStateMachine+0xdb4>)
 8003bca:	4613      	mov	r3, r2
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	4413      	add	r3, r2
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	440b      	add	r3, r1
 8003bd4:	330a      	adds	r3, #10
 8003bd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bda:	6939      	ldr	r1, [r7, #16]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 fa99 	bl	8004114 <computeAjustement>
 8003be2:	6338      	str	r0, [r7, #48]	; 0x30
        	}
            AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
					  	  	  &primary, PrimaryMotorParam[Model].MinCoalHigh, PrimaryMotorParam[Model].MaxCoalHigh,
 8003be4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003be8:	4a97      	ldr	r2, [pc, #604]	; (8003e48 <manageStateMachine+0xda4>)
 8003bea:	015b      	lsls	r3, r3, #5
 8003bec:	4413      	add	r3, r2
 8003bee:	331a      	adds	r3, #26
 8003bf0:	f9b3 3000 	ldrsh.w	r3, [r3]
            AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 8003bf4:	b2d8      	uxtb	r0, r3
					  	  	  &primary, PrimaryMotorParam[Model].MinCoalHigh, PrimaryMotorParam[Model].MaxCoalHigh,
 8003bf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003bfa:	4a93      	ldr	r2, [pc, #588]	; (8003e48 <manageStateMachine+0xda4>)
 8003bfc:	015b      	lsls	r3, r3, #5
 8003bfe:	4413      	add	r3, r2
 8003c00:	3318      	adds	r3, #24
 8003c02:	f9b3 3000 	ldrsh.w	r3, [r3]
            AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 8003c06:	b2db      	uxtb	r3, r3
							  &grill, BoostMotorParam[Model].MinCoalHigh, BoostMotorParam[Model].MaxCoalHigh);
 8003c08:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003c0c:	4993      	ldr	r1, [pc, #588]	; (8003e5c <manageStateMachine+0xdb8>)
 8003c0e:	0152      	lsls	r2, r2, #5
 8003c10:	440a      	add	r2, r1
 8003c12:	321a      	adds	r2, #26
 8003c14:	f9b2 2000 	ldrsh.w	r2, [r2]
            AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 8003c18:	b2d2      	uxtb	r2, r2
							  &grill, BoostMotorParam[Model].MinCoalHigh, BoostMotorParam[Model].MaxCoalHigh);
 8003c1a:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003c1e:	4c8f      	ldr	r4, [pc, #572]	; (8003e5c <manageStateMachine+0xdb8>)
 8003c20:	0149      	lsls	r1, r1, #5
 8003c22:	4421      	add	r1, r4
 8003c24:	3118      	adds	r1, #24
 8003c26:	f9b1 1000 	ldrsh.w	r1, [r1]
            AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 8003c2a:	b2c9      	uxtb	r1, r1
 8003c2c:	9103      	str	r1, [sp, #12]
 8003c2e:	9202      	str	r2, [sp, #8]
 8003c30:	4a86      	ldr	r2, [pc, #536]	; (8003e4c <manageStateMachine+0xda8>)
 8003c32:	9201      	str	r2, [sp, #4]
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	4603      	mov	r3, r0
 8003c38:	4a85      	ldr	r2, [pc, #532]	; (8003e50 <manageStateMachine+0xdac>)
 8003c3a:	6a39      	ldr	r1, [r7, #32]
 8003c3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c3e:	f000 fabd 	bl	80041bc <AirAdjustment>
        }

    	if (!thermostatRequest) {
 8003c42:	4b87      	ldr	r3, [pc, #540]	; (8003e60 <manageStateMachine+0xdbc>)
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	f083 0301 	eor.w	r3, r3, #1
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <manageStateMachine+0xbb4>
    	          nextState = COAL_LOW;
 8003c50:	2307      	movs	r3, #7
 8003c52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    	}else if (reloadingEvent) {
            nextState = ZEROING_STEPPER;
        }else if (baffleTemperature > TemperatureParam[Model].CombLowTarget){
        	nextState = COMBUSTION_HIGH;
        }
    	break;
 8003c56:	e079      	b.n	8003d4c <manageStateMachine+0xca8>
    	}else if (reloadingEvent) {
 8003c58:	4b82      	ldr	r3, [pc, #520]	; (8003e64 <manageStateMachine+0xdc0>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d003      	beq.n	8003c68 <manageStateMachine+0xbc4>
            nextState = ZEROING_STEPPER;
 8003c60:	2300      	movs	r3, #0
 8003c62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    	break;
 8003c66:	e071      	b.n	8003d4c <manageStateMachine+0xca8>
        }else if (baffleTemperature > TemperatureParam[Model].CombLowTarget){
 8003c68:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003c6c:	497a      	ldr	r1, [pc, #488]	; (8003e58 <manageStateMachine+0xdb4>)
 8003c6e:	4613      	mov	r3, r2
 8003c70:	011b      	lsls	r3, r3, #4
 8003c72:	4413      	add	r3, r2
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	440b      	add	r3, r1
 8003c78:	3308      	adds	r3, #8
 8003c7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	4b79      	ldr	r3, [pc, #484]	; (8003e68 <manageStateMachine+0xdc4>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	da61      	bge.n	8003d4c <manageStateMachine+0xca8>
        	nextState = COMBUSTION_HIGH;
 8003c88:	2306      	movs	r3, #6
 8003c8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    	break;
 8003c8e:	e05d      	b.n	8003d4c <manageStateMachine+0xca8>

    case OVERTEMP:
    case SAFETY:
      AirInput_forceAperture(&grill, GRILL_CLOSED);
 8003c90:	2100      	movs	r1, #0
 8003c92:	486e      	ldr	r0, [pc, #440]	; (8003e4c <manageStateMachine+0xda8>)
 8003c94:	f7ff f920 	bl	8002ed8 <AirInput_forceAperture>
      AirInput_forceAperture(&primary, PRIMARY_CLOSED);
 8003c98:	210d      	movs	r1, #13
 8003c9a:	486d      	ldr	r0, [pc, #436]	; (8003e50 <manageStateMachine+0xdac>)
 8003c9c:	f7ff f91c 	bl	8002ed8 <AirInput_forceAperture>

      if ((baffleTemperature < TemperatureParam[Model].OverheatBaffle)
 8003ca0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003ca4:	496c      	ldr	r1, [pc, #432]	; (8003e58 <manageStateMachine+0xdb4>)
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	011b      	lsls	r3, r3, #4
 8003caa:	4413      	add	r3, r2
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	440b      	add	r3, r1
 8003cb0:	331e      	adds	r3, #30
 8003cb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	4b6b      	ldr	r3, [pc, #428]	; (8003e68 <manageStateMachine+0xdc4>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	dd47      	ble.n	8003d50 <manageStateMachine+0xcac>
    		  && (rearTemperature < TemperatureParam[Model].OverheatChamber)
 8003cc0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003cc4:	4964      	ldr	r1, [pc, #400]	; (8003e58 <manageStateMachine+0xdb4>)
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	4413      	add	r3, r2
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	440b      	add	r3, r1
 8003cd0:	3320      	adds	r3, #32
 8003cd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	4b5e      	ldr	r3, [pc, #376]	; (8003e54 <manageStateMachine+0xdb0>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	dd37      	ble.n	8003d50 <manageStateMachine+0xcac>
			  && (Algo_getPlenumTemp() < TemperatureParam[Model].OverheatPlenumExit)){
 8003ce0:	f000 f9ae 	bl	8004040 <Algo_getPlenumTemp>
 8003ce4:	4601      	mov	r1, r0
 8003ce6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003cea:	485b      	ldr	r0, [pc, #364]	; (8003e58 <manageStateMachine+0xdb4>)
 8003cec:	4613      	mov	r3, r2
 8003cee:	011b      	lsls	r3, r3, #4
 8003cf0:	4413      	add	r3, r2
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	4403      	add	r3, r0
 8003cf6:	331c      	adds	r3, #28
 8003cf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cfc:	4299      	cmp	r1, r3
 8003cfe:	da27      	bge.n	8003d50 <manageStateMachine+0xcac>
    	  if(historyState == SAFETY || historyState == OVERTEMP)
 8003d00:	4b4f      	ldr	r3, [pc, #316]	; (8003e40 <manageStateMachine+0xd9c>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	2b0b      	cmp	r3, #11
 8003d06:	d003      	beq.n	8003d10 <manageStateMachine+0xc6c>
 8003d08:	4b4d      	ldr	r3, [pc, #308]	; (8003e40 <manageStateMachine+0xd9c>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b0a      	cmp	r3, #10
 8003d0e:	d103      	bne.n	8003d18 <manageStateMachine+0xc74>
    	  {
    		  nextState = ZEROING_STEPPER; //autre façon de fermer les trappes
 8003d10:	2300      	movs	r3, #0
 8003d12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    	  else
    	  {
    		  nextState = historyState;
    	  }
      }
      break;
 8003d16:	e01b      	b.n	8003d50 <manageStateMachine+0xcac>
    		  nextState = historyState;
 8003d18:	4b49      	ldr	r3, [pc, #292]	; (8003e40 <manageStateMachine+0xd9c>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      break;
 8003d20:	e016      	b.n	8003d50 <manageStateMachine+0xcac>

    case PRODUCTION_TEST:
    	TestRunner();
 8003d22:	f7fe fb3b 	bl	800239c <TestRunner>
		nextState = currentState;  //assign the current state in the runner
 8003d26:	4b47      	ldr	r3, [pc, #284]	; (8003e44 <manageStateMachine+0xda0>)
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    	break;
 8003d2e:	e010      	b.n	8003d52 <manageStateMachine+0xcae>
		break;
 8003d30:	bf00      	nop
 8003d32:	e00e      	b.n	8003d52 <manageStateMachine+0xcae>
      break;
 8003d34:	bf00      	nop
 8003d36:	e00c      	b.n	8003d52 <manageStateMachine+0xcae>
      break;
 8003d38:	bf00      	nop
 8003d3a:	e00a      	b.n	8003d52 <manageStateMachine+0xcae>
          break;
 8003d3c:	bf00      	nop
 8003d3e:	e008      	b.n	8003d52 <manageStateMachine+0xcae>
      break;
 8003d40:	bf00      	nop
 8003d42:	e006      	b.n	8003d52 <manageStateMachine+0xcae>
    	break;
 8003d44:	bf00      	nop
 8003d46:	e004      	b.n	8003d52 <manageStateMachine+0xcae>
    	break;
 8003d48:	bf00      	nop
 8003d4a:	e002      	b.n	8003d52 <manageStateMachine+0xcae>
    	break;
 8003d4c:	bf00      	nop
 8003d4e:	e000      	b.n	8003d52 <manageStateMachine+0xcae>
      break;
 8003d50:	bf00      	nop
  }

	if((GPIO_PIN_SET==HAL_GPIO_ReadPin(Safety_ON_GPIO_Port,Safety_ON_Pin)) && (currentState !=PRODUCTION_TEST))
 8003d52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d56:	4845      	ldr	r0, [pc, #276]	; (8003e6c <manageStateMachine+0xdc8>)
 8003d58:	f001 ff44 	bl	8005be4 <HAL_GPIO_ReadPin>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d110      	bne.n	8003d84 <manageStateMachine+0xce0>
 8003d62:	4b38      	ldr	r3, [pc, #224]	; (8003e44 <manageStateMachine+0xda0>)
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	2b0c      	cmp	r3, #12
 8003d68:	d00c      	beq.n	8003d84 <manageStateMachine+0xce0>
	{
		uint32_t kerneltime = osKernelSysTick();
 8003d6a:	f006 f8ee 	bl	8009f4a <osKernelSysTick>
 8003d6e:	60b8      	str	r0, [r7, #8]
		if ((Safetydebounce_ms+100) < kerneltime)
 8003d70:	4b3f      	ldr	r3, [pc, #252]	; (8003e70 <manageStateMachine+0xdcc>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	3364      	adds	r3, #100	; 0x64
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d909      	bls.n	8003d90 <manageStateMachine+0xcec>
		{
			nextState = SAFETY; //force the safety state
 8003d7c:	230b      	movs	r3, #11
 8003d7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	{
 8003d82:	e005      	b.n	8003d90 <manageStateMachine+0xcec>
		}
	}
	else
	{
		Safetydebounce_ms = osKernelSysTick();
 8003d84:	f006 f8e1 	bl	8009f4a <osKernelSysTick>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	4a39      	ldr	r2, [pc, #228]	; (8003e70 <manageStateMachine+0xdcc>)
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	e000      	b.n	8003d92 <manageStateMachine+0xcee>
	{
 8003d90:	bf00      	nop
	}

  /* Perform superstate action's */
  switch (currentState) {
 8003d92:	4b2c      	ldr	r3, [pc, #176]	; (8003e44 <manageStateMachine+0xda0>)
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d04f      	beq.n	8003e3a <manageStateMachine+0xd96>
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	dd02      	ble.n	8003da4 <manageStateMachine+0xd00>
 8003d9e:	3b0a      	subs	r3, #10
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d94a      	bls.n	8003e3a <manageStateMachine+0xd96>

    default:
	if ((baffleTemperature > TemperatureParam[Model].OverheatBaffle) || (rearTemperature > TemperatureParam[Model].OverheatChamber) || (Algo_getPlenumTemp()>TemperatureParam[Model].OverheatPlenum)) {
 8003da4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003da8:	492b      	ldr	r1, [pc, #172]	; (8003e58 <manageStateMachine+0xdb4>)
 8003daa:	4613      	mov	r3, r2
 8003dac:	011b      	lsls	r3, r3, #4
 8003dae:	4413      	add	r3, r2
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	440b      	add	r3, r1
 8003db4:	331e      	adds	r3, #30
 8003db6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	4b2a      	ldr	r3, [pc, #168]	; (8003e68 <manageStateMachine+0xdc4>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	db1f      	blt.n	8003e04 <manageStateMachine+0xd60>
 8003dc4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003dc8:	4923      	ldr	r1, [pc, #140]	; (8003e58 <manageStateMachine+0xdb4>)
 8003dca:	4613      	mov	r3, r2
 8003dcc:	011b      	lsls	r3, r3, #4
 8003dce:	4413      	add	r3, r2
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	440b      	add	r3, r1
 8003dd4:	3320      	adds	r3, #32
 8003dd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	4b1d      	ldr	r3, [pc, #116]	; (8003e54 <manageStateMachine+0xdb0>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	db0f      	blt.n	8003e04 <manageStateMachine+0xd60>
 8003de4:	f000 f92c 	bl	8004040 <Algo_getPlenumTemp>
 8003de8:	4601      	mov	r1, r0
 8003dea:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003dee:	481a      	ldr	r0, [pc, #104]	; (8003e58 <manageStateMachine+0xdb4>)
 8003df0:	4613      	mov	r3, r2
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	4413      	add	r3, r2
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	4403      	add	r3, r0
 8003dfa:	331a      	adds	r3, #26
 8003dfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e00:	4299      	cmp	r1, r3
 8003e02:	dd02      	ble.n	8003e0a <manageStateMachine+0xd66>
		nextState = OVERTEMP;
 8003e04:	230a      	movs	r3, #10
 8003e06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}
	if(currentState != RELOAD_IGNITION)
 8003e0a:	4b0e      	ldr	r3, [pc, #56]	; (8003e44 <manageStateMachine+0xda0>)
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d032      	beq.n	8003e78 <manageStateMachine+0xdd4>
	{
		if ((baffleTemperature < ColdStoveTemp) && (rearTemperature < ColdStoveTemp) && timeSinceStateEntry > MINUTES(1)) {
 8003e12:	4b15      	ldr	r3, [pc, #84]	; (8003e68 <manageStateMachine+0xdc4>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8003e1a:	da2d      	bge.n	8003e78 <manageStateMachine+0xdd4>
 8003e1c:	4b0d      	ldr	r3, [pc, #52]	; (8003e54 <manageStateMachine+0xdb0>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8003e24:	da28      	bge.n	8003e78 <manageStateMachine+0xdd4>
 8003e26:	4b13      	ldr	r3, [pc, #76]	; (8003e74 <manageStateMachine+0xdd0>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d922      	bls.n	8003e78 <manageStateMachine+0xdd4>
		nextState = WAITING;
 8003e32:	2301      	movs	r3, #1
 8003e34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}
	}
      break;
 8003e38:	e01e      	b.n	8003e78 <manageStateMachine+0xdd4>
    //case RELOAD_IGNITION:
    case OVERTEMP:
    case SAFETY:
    case PRODUCTION_TEST:
      /* do nothing */
      break;
 8003e3a:	bf00      	nop
 8003e3c:	e01d      	b.n	8003e7a <manageStateMachine+0xdd6>
 8003e3e:	bf00      	nop
 8003e40:	2000061c 	.word	0x2000061c
 8003e44:	200000f8 	.word	0x200000f8
 8003e48:	0800f498 	.word	0x0800f498
 8003e4c:	20000018 	.word	0x20000018
 8003e50:	20000000 	.word	0x20000000
 8003e54:	20000104 	.word	0x20000104
 8003e58:	0800f454 	.word	0x0800f454
 8003e5c:	0800f4d8 	.word	0x0800f4d8
 8003e60:	2000010c 	.word	0x2000010c
 8003e64:	200000f9 	.word	0x200000f9
 8003e68:	20000100 	.word	0x20000100
 8003e6c:	40010c00 	.word	0x40010c00
 8003e70:	20000620 	.word	0x20000620
 8003e74:	200005e0 	.word	0x200005e0
      break;
 8003e78:	bf00      	nop
  }
  if(Algo_getInterlockRequest() && (currentState !=PRODUCTION_TEST))
 8003e7a:	f000 f929 	bl	80040d0 <Algo_getInterlockRequest>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d006      	beq.n	8003e92 <manageStateMachine+0xdee>
 8003e84:	4b15      	ldr	r3, [pc, #84]	; (8003edc <manageStateMachine+0xe38>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	2b0c      	cmp	r3, #12
 8003e8a:	d002      	beq.n	8003e92 <manageStateMachine+0xdee>
  {
  		nextState = WAITING;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  if (nextState != currentState) {
 8003e92:	4b12      	ldr	r3, [pc, #72]	; (8003edc <manageStateMachine+0xe38>)
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d01a      	beq.n	8003ed4 <manageStateMachine+0xe30>

	if ((currentState == COMBUSTION_HIGH  && nextState == COMBUSTION_LOW) || (currentState == COMBUSTION_LOW && nextState == COMBUSTION_HIGH))
 8003e9e:	4b0f      	ldr	r3, [pc, #60]	; (8003edc <manageStateMachine+0xe38>)
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	2b06      	cmp	r3, #6
 8003ea4:	d103      	bne.n	8003eae <manageStateMachine+0xe0a>
 8003ea6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	d00a      	beq.n	8003ec4 <manageStateMachine+0xe20>
 8003eae:	4b0b      	ldr	r3, [pc, #44]	; (8003edc <manageStateMachine+0xe38>)
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d103      	bne.n	8003ebe <manageStateMachine+0xe1a>
 8003eb6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003eba:	2b06      	cmp	r3, #6
 8003ebc:	d002      	beq.n	8003ec4 <manageStateMachine+0xe20>
	{
		//do not update the state stateChangeTimeRef
	}
	else
	{
	    stateChangeTimeRef = currentTime_ms;
 8003ebe:	4a08      	ldr	r2, [pc, #32]	; (8003ee0 <manageStateMachine+0xe3c>)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6013      	str	r3, [r2, #0]
	}
	historyState = currentState;
 8003ec4:	4b05      	ldr	r3, [pc, #20]	; (8003edc <manageStateMachine+0xe38>)
 8003ec6:	781a      	ldrb	r2, [r3, #0]
 8003ec8:	4b06      	ldr	r3, [pc, #24]	; (8003ee4 <manageStateMachine+0xe40>)
 8003eca:	701a      	strb	r2, [r3, #0]
    currentState = nextState;
 8003ecc:	4a03      	ldr	r2, [pc, #12]	; (8003edc <manageStateMachine+0xe38>)
 8003ece:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003ed2:	7013      	strb	r3, [r2, #0]
  }
}
 8003ed4:	bf00      	nop
 8003ed6:	373c      	adds	r7, #60	; 0x3c
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd90      	pop	{r4, r7, pc}
 8003edc:	200000f8 	.word	0x200000f8
 8003ee0:	20000610 	.word	0x20000610
 8003ee4:	2000061c 	.word	0x2000061c

08003ee8 <Algo_task>:

void Algo_task(uint32_t currentTime_ms) {
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]

  manageStateMachine(currentTime_ms);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f7ff f8d7 	bl	80030a4 <manageStateMachine>
//  managePlenumSpeed(Algo_getPlenumTemp(),Algo_getThermostatRequest(),currentTime_ms);

  if(Algo_getState()!= PRODUCTION_TEST)
 8003ef6:	f000 f855 	bl	8003fa4 <Algo_getState>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b0c      	cmp	r3, #12
 8003efe:	d007      	beq.n	8003f10 <Algo_task+0x28>
  {
	  AirInput_task( &primary, currentTime_ms);
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	4805      	ldr	r0, [pc, #20]	; (8003f18 <Algo_task+0x30>)
 8003f04:	f7ff f84a 	bl	8002f9c <AirInput_task>
	  AirInput_task( &grill, currentTime_ms);
 8003f08:	6879      	ldr	r1, [r7, #4]
 8003f0a:	4804      	ldr	r0, [pc, #16]	; (8003f1c <Algo_task+0x34>)
 8003f0c:	f7ff f846 	bl	8002f9c <AirInput_task>
  }
}
 8003f10:	bf00      	nop
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	20000000 	.word	0x20000000
 8003f1c:	20000018 	.word	0x20000018

08003f20 <Algo_getBaffleTempSlope>:

void Algo_setSimulatorMode( bool active) {
  simulatorMode = active;
}

float Algo_getBaffleTempSlope() {
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
  return Algo_slopeBaffleTemp;
 8003f24:	4b02      	ldr	r3, [pc, #8]	; (8003f30 <Algo_getBaffleTempSlope+0x10>)
 8003f26:	681b      	ldr	r3, [r3, #0]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bc80      	pop	{r7}
 8003f2e:	4770      	bx	lr
 8003f30:	200005dc 	.word	0x200005dc

08003f34 <computeSlopeBaffleTemp>:

/* Returns temperature slope in [*C / s] */
static float computeSlopeBaffleTemp(unsigned int nbData) {
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  if (simulatorMode)
 8003f3c:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <computeSlopeBaffleTemp+0x3c>)
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d002      	beq.n	8003f4a <computeSlopeBaffleTemp+0x16>
  {
    return Algo_Simulator_slopeBaffleTemp;
 8003f44:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <computeSlopeBaffleTemp+0x40>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	e00e      	b.n	8003f68 <computeSlopeBaffleTemp+0x34>
  }
  else
  {
	Algo_slopeBaffleTemp = Slope_compute(&slopeBaffleTemp, nbData) / 10.0;
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	480a      	ldr	r0, [pc, #40]	; (8003f78 <computeSlopeBaffleTemp+0x44>)
 8003f4e:	f000 fe23 	bl	8004b98 <Slope_compute>
 8003f52:	4603      	mov	r3, r0
 8003f54:	4909      	ldr	r1, [pc, #36]	; (8003f7c <computeSlopeBaffleTemp+0x48>)
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fc ffe8 	bl	8000f2c <__aeabi_fdiv>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	461a      	mov	r2, r3
 8003f60:	4b07      	ldr	r3, [pc, #28]	; (8003f80 <computeSlopeBaffleTemp+0x4c>)
 8003f62:	601a      	str	r2, [r3, #0]
    return Algo_slopeBaffleTemp;
 8003f64:	4b06      	ldr	r3, [pc, #24]	; (8003f80 <computeSlopeBaffleTemp+0x4c>)
 8003f66:	681b      	ldr	r3, [r3, #0]
  }
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	200005c0 	.word	0x200005c0
 8003f74:	200005d8 	.word	0x200005d8
 8003f78:	200005c4 	.word	0x200005c4
 8003f7c:	41200000 	.word	0x41200000
 8003f80:	200005dc 	.word	0x200005dc

08003f84 <Algo_setState>:

void Algo_setState(State state) {
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	71fb      	strb	r3, [r7, #7]
  //if (simulatorMode) {
    currentState = state;
 8003f8e:	4a04      	ldr	r2, [pc, #16]	; (8003fa0 <Algo_setState+0x1c>)
 8003f90:	79fb      	ldrb	r3, [r7, #7]
 8003f92:	7013      	strb	r3, [r2, #0]
  //}
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	200000f8 	.word	0x200000f8

08003fa4 <Algo_getState>:

State Algo_getState() {
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  return currentState;
 8003fa8:	4b02      	ldr	r3, [pc, #8]	; (8003fb4 <Algo_getState+0x10>)
 8003faa:	781b      	ldrb	r3, [r3, #0]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bc80      	pop	{r7}
 8003fb2:	4770      	bx	lr
 8003fb4:	200000f8 	.word	0x200000f8

08003fb8 <Algo_setBaffleTemp>:
uint32_t getStateTime(){
  return timeSinceStateEntry;
}

void Algo_setBaffleTemp(int temp) {
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  baffleTemperature = temp;
 8003fc0:	4a05      	ldr	r2, [pc, #20]	; (8003fd8 <Algo_setBaffleTemp+0x20>)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6013      	str	r3, [r2, #0]
  Slope_addData(&slopeBaffleTemp, temp);
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	4804      	ldr	r0, [pc, #16]	; (8003fdc <Algo_setBaffleTemp+0x24>)
 8003fca:	f000 fdba 	bl	8004b42 <Slope_addData>
}
 8003fce:	bf00      	nop
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	20000100 	.word	0x20000100
 8003fdc:	200005c4 	.word	0x200005c4

08003fe0 <Algo_setRearTemp>:

void Algo_setRearTemp(int temp) {
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  rearTemperature = temp;
 8003fe8:	4a03      	ldr	r2, [pc, #12]	; (8003ff8 <Algo_setRearTemp+0x18>)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6013      	str	r3, [r2, #0]
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr
 8003ff8:	20000104 	.word	0x20000104

08003ffc <Algo_getRearTemp>:
int Algo_getRearTemp() {
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
  return rearTemperature;
 8004000:	4b02      	ldr	r3, [pc, #8]	; (800400c <Algo_getRearTemp+0x10>)
 8004002:	681b      	ldr	r3, [r3, #0]
}
 8004004:	4618      	mov	r0, r3
 8004006:	46bd      	mov	sp, r7
 8004008:	bc80      	pop	{r7}
 800400a:	4770      	bx	lr
 800400c:	20000104 	.word	0x20000104

08004010 <Algo_getBaffleTemp>:

int Algo_getBaffleTemp() {
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
  return baffleTemperature;
 8004014:	4b02      	ldr	r3, [pc, #8]	; (8004020 <Algo_getBaffleTemp+0x10>)
 8004016:	681b      	ldr	r3, [r3, #0]
}
 8004018:	4618      	mov	r0, r3
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr
 8004020:	20000100 	.word	0x20000100

08004024 <Algo_setPlenumTemp>:

void Algo_setPlenumTemp(int temp) {
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  plenumTemp = temp;
 800402c:	4a03      	ldr	r2, [pc, #12]	; (800403c <Algo_setPlenumTemp+0x18>)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6013      	str	r3, [r2, #0]
}
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	bc80      	pop	{r7}
 800403a:	4770      	bx	lr
 800403c:	20000108 	.word	0x20000108

08004040 <Algo_getPlenumTemp>:
int Algo_getPlenumTemp() {
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  return plenumTemp;
 8004044:	4b02      	ldr	r3, [pc, #8]	; (8004050 <Algo_getPlenumTemp+0x10>)
 8004046:	681b      	ldr	r3, [r3, #0]
}
 8004048:	4618      	mov	r0, r3
 800404a:	46bd      	mov	sp, r7
 800404c:	bc80      	pop	{r7}
 800404e:	4770      	bx	lr
 8004050:	20000108 	.word	0x20000108

08004054 <Algo_getPrimary>:

int Algo_getPrimary() {
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
  return AirInput_getAperture(&primary);
 8004058:	4802      	ldr	r0, [pc, #8]	; (8004064 <Algo_getPrimary+0x10>)
 800405a:	f7fe ff5c 	bl	8002f16 <AirInput_getAperture>
 800405e:	4603      	mov	r3, r0
}
 8004060:	4618      	mov	r0, r3
 8004062:	bd80      	pop	{r7, pc}
 8004064:	20000000 	.word	0x20000000

08004068 <Algo_getGrill>:

int Algo_getGrill() {
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  return AirInput_getAperture(&grill);
 800406c:	4802      	ldr	r0, [pc, #8]	; (8004078 <Algo_getGrill+0x10>)
 800406e:	f7fe ff52 	bl	8002f16 <AirInput_getAperture>
 8004072:	4603      	mov	r3, r0
}
 8004074:	4618      	mov	r0, r3
 8004076:	bd80      	pop	{r7, pc}
 8004078:	20000018 	.word	0x20000018

0800407c <Algo_setThermostatRequest>:

Algo_DELState Algo_getStateFermeturePorte() {
  return delFermeturePorte;
}

void Algo_setThermostatRequest(bool demand) {
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	4603      	mov	r3, r0
 8004084:	71fb      	strb	r3, [r7, #7]
  thermostatRequest = demand;
 8004086:	4a04      	ldr	r2, [pc, #16]	; (8004098 <Algo_setThermostatRequest+0x1c>)
 8004088:	79fb      	ldrb	r3, [r7, #7]
 800408a:	7013      	strb	r3, [r2, #0]
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	bc80      	pop	{r7}
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	2000010c 	.word	0x2000010c

0800409c <Algo_getThermostatRequest>:
bool Algo_getThermostatRequest() {
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  return thermostatRequest;
 80040a0:	4b02      	ldr	r3, [pc, #8]	; (80040ac <Algo_getThermostatRequest+0x10>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bc80      	pop	{r7}
 80040aa:	4770      	bx	lr
 80040ac:	2000010c 	.word	0x2000010c

080040b0 <Algo_setInterlockRequest>:
void Algo_setInterlockRequest(bool demand) {
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	4603      	mov	r3, r0
 80040b8:	71fb      	strb	r3, [r7, #7]
	interlockRequest = demand;
 80040ba:	4a04      	ldr	r2, [pc, #16]	; (80040cc <Algo_setInterlockRequest+0x1c>)
 80040bc:	79fb      	ldrb	r3, [r7, #7]
 80040be:	7013      	strb	r3, [r2, #0]
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bc80      	pop	{r7}
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	2000010d 	.word	0x2000010d

080040d0 <Algo_getInterlockRequest>:
bool Algo_getInterlockRequest() {
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  return interlockRequest;
 80040d4:	4b02      	ldr	r3, [pc, #8]	; (80040e0 <Algo_getInterlockRequest+0x10>)
 80040d6:	781b      	ldrb	r3, [r3, #0]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	46bd      	mov	sp, r7
 80040dc:	bc80      	pop	{r7}
 80040de:	4770      	bx	lr
 80040e0:	2000010d 	.word	0x2000010d

080040e4 <Algo_startChargement>:

void Algo_startChargement(uint32_t currentTime_ms) {
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  reloadingEvent = true;
 80040ec:	4b06      	ldr	r3, [pc, #24]	; (8004108 <Algo_startChargement+0x24>)
 80040ee:	2201      	movs	r2, #1
 80040f0:	701a      	strb	r2, [r3, #0]
  fanPauseRequired = true;
 80040f2:	4b06      	ldr	r3, [pc, #24]	; (800410c <Algo_startChargement+0x28>)
 80040f4:	2201      	movs	r2, #1
 80040f6:	701a      	strb	r2, [r3, #0]
  TimeOfReloadRequest = currentTime_ms;
 80040f8:	4a05      	ldr	r2, [pc, #20]	; (8004110 <Algo_startChargement+0x2c>)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6013      	str	r3, [r2, #0]
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr
 8004108:	200000f9 	.word	0x200000f9
 800410c:	200000fa 	.word	0x200000fa
 8004110:	200005e4 	.word	0x200005e4

08004114 <computeAjustement>:

void Algo_clearReloadRequest() {
  reloadingEvent = false;
}

static int computeAjustement( int tempTarget_tenthF, float dTempAvant_FperS) {
 8004114:	b5b0      	push	{r4, r5, r7, lr}
 8004116:	b08e      	sub	sp, #56	; 0x38
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]

  //                  [line][column]
  const int adjustment[3][3] = {
 800411e:	4b23      	ldr	r3, [pc, #140]	; (80041ac <computeAjustement+0x98>)
 8004120:	f107 040c 	add.w	r4, r7, #12
 8004124:	461d      	mov	r5, r3
 8004126:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004128:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800412a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800412c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800412e:	682b      	ldr	r3, [r5, #0]
 8004130:	6023      	str	r3, [r4, #0]
  };

  unsigned int line;
  unsigned int column;

  if (baffleTemperature > (tempTarget_tenthF + 50)) {
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004138:	4b1d      	ldr	r3, [pc, #116]	; (80041b0 <computeAjustement+0x9c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	429a      	cmp	r2, r3
 800413e:	da02      	bge.n	8004146 <computeAjustement+0x32>
    line = 0;
 8004140:	2300      	movs	r3, #0
 8004142:	637b      	str	r3, [r7, #52]	; 0x34
 8004144:	e00b      	b.n	800415e <computeAjustement+0x4a>
  } else if (baffleTemperature >= (tempTarget_tenthF - 50)) {
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f1a3 0232 	sub.w	r2, r3, #50	; 0x32
 800414c:	4b18      	ldr	r3, [pc, #96]	; (80041b0 <computeAjustement+0x9c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	429a      	cmp	r2, r3
 8004152:	dc02      	bgt.n	800415a <computeAjustement+0x46>
    line = 1;
 8004154:	2301      	movs	r3, #1
 8004156:	637b      	str	r3, [r7, #52]	; 0x34
 8004158:	e001      	b.n	800415e <computeAjustement+0x4a>
  } else {
    line = 2;
 800415a:	2302      	movs	r3, #2
 800415c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if (dTempAvant_FperS < -6.0) {
 800415e:	4915      	ldr	r1, [pc, #84]	; (80041b4 <computeAjustement+0xa0>)
 8004160:	6838      	ldr	r0, [r7, #0]
 8004162:	f7fc ffcd 	bl	8001100 <__aeabi_fcmplt>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d002      	beq.n	8004172 <computeAjustement+0x5e>
    column = 0;
 800416c:	2300      	movs	r3, #0
 800416e:	633b      	str	r3, [r7, #48]	; 0x30
 8004170:	e00b      	b.n	800418a <computeAjustement+0x76>
  } else if (dTempAvant_FperS <= 6.0) {
 8004172:	4911      	ldr	r1, [pc, #68]	; (80041b8 <computeAjustement+0xa4>)
 8004174:	6838      	ldr	r0, [r7, #0]
 8004176:	f7fc ffcd 	bl	8001114 <__aeabi_fcmple>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <computeAjustement+0x72>
    column = 1;
 8004180:	2301      	movs	r3, #1
 8004182:	633b      	str	r3, [r7, #48]	; 0x30
 8004184:	e001      	b.n	800418a <computeAjustement+0x76>
  } else {
    column = 2;
 8004186:	2302      	movs	r3, #2
 8004188:	633b      	str	r3, [r7, #48]	; 0x30
  }

  return adjustment[line][column];
 800418a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800418c:	4613      	mov	r3, r2
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	4413      	add	r3, r2
 8004192:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004194:	4413      	add	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800419c:	4413      	add	r3, r2
 800419e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3738      	adds	r7, #56	; 0x38
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bdb0      	pop	{r4, r5, r7, pc}
 80041aa:	bf00      	nop
 80041ac:	0800f250 	.word	0x0800f250
 80041b0:	20000100 	.word	0x20000100
 80041b4:	c0c00000 	.word	0xc0c00000
 80041b8:	40c00000 	.word	0x40c00000

080041bc <AirAdjustment>:

void AirAdjustment(int adjustement, const uint32_t secondPerStep,
		AirInput* primaire, const uint8_t MinPrimary, const uint8_t MaxPrimary,
		AirInput* grill, const uint8_t MinGrill, const uint8_t MaxGrill)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
 80041c8:	70fb      	strb	r3, [r7, #3]
	if (adjustement > 0)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	dd1a      	ble.n	8004206 <AirAdjustment+0x4a>
	{
		if (AirInput_getAperture(primaire) >= MaxPrimary)
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7fe fea0 	bl	8002f16 <AirInput_getAperture>
 80041d6:	4602      	mov	r2, r0
 80041d8:	7e3b      	ldrb	r3, [r7, #24]
 80041da:	429a      	cmp	r2, r3
 80041dc:	db0d      	blt.n	80041fa <AirAdjustment+0x3e>
		{
			if (AirInput_getAperture(grill) < MaxGrill)
 80041de:	69f8      	ldr	r0, [r7, #28]
 80041e0:	f7fe fe99 	bl	8002f16 <AirInput_getAperture>
 80041e4:	4602      	mov	r2, r0
 80041e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80041ea:	429a      	cmp	r2, r3
 80041ec:	da28      	bge.n	8004240 <AirAdjustment+0x84>
			{
				AirInput_setAjustement(grill, adjustement, secondPerStep);
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	68f9      	ldr	r1, [r7, #12]
 80041f2:	69f8      	ldr	r0, [r7, #28]
 80041f4:	f7fe feac 	bl	8002f50 <AirInput_setAjustement>
				AirInput_setAjustement(primaire, adjustement,secondPerStep);
			}
		}
	}
	/*else{do nothing} air setting doesn't need further adjustment*/
}
 80041f8:	e022      	b.n	8004240 <AirAdjustment+0x84>
			AirInput_setAjustement(primaire, adjustement, secondPerStep);
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	68f9      	ldr	r1, [r7, #12]
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7fe fea6 	bl	8002f50 <AirInput_setAjustement>
}
 8004204:	e01c      	b.n	8004240 <AirAdjustment+0x84>
	else if (adjustement < 0)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2b00      	cmp	r3, #0
 800420a:	da19      	bge.n	8004240 <AirAdjustment+0x84>
		if (AirInput_getAperture(grill) > MinGrill)
 800420c:	69f8      	ldr	r0, [r7, #28]
 800420e:	f7fe fe82 	bl	8002f16 <AirInput_getAperture>
 8004212:	4602      	mov	r2, r0
 8004214:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004218:	429a      	cmp	r2, r3
 800421a:	dd05      	ble.n	8004228 <AirAdjustment+0x6c>
			AirInput_setAjustement(grill, adjustement,secondPerStep);
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	68f9      	ldr	r1, [r7, #12]
 8004220:	69f8      	ldr	r0, [r7, #28]
 8004222:	f7fe fe95 	bl	8002f50 <AirInput_setAjustement>
}
 8004226:	e00b      	b.n	8004240 <AirAdjustment+0x84>
			if(AirInput_getAperture(primaire) > MinPrimary)
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7fe fe74 	bl	8002f16 <AirInput_getAperture>
 800422e:	4602      	mov	r2, r0
 8004230:	78fb      	ldrb	r3, [r7, #3]
 8004232:	429a      	cmp	r2, r3
 8004234:	dd04      	ble.n	8004240 <AirAdjustment+0x84>
				AirInput_setAjustement(primaire, adjustement,secondPerStep);
 8004236:	68ba      	ldr	r2, [r7, #8]
 8004238:	68f9      	ldr	r1, [r7, #12]
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7fe fe88 	bl	8002f50 <AirInput_setAjustement>
}
 8004240:	bf00      	nop
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <StateEntryControlAdjustment>:


void StateEntryControlAdjustment( AirInput* primaireSecondaire, const uint8_t MinPrimary, const uint8_t MaxPrimary,
		AirInput* grill, const uint8_t MinGrill, const uint8_t MaxGrill)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08a      	sub	sp, #40	; 0x28
 800424c:	af04      	add	r7, sp, #16
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	607b      	str	r3, [r7, #4]
 8004252:	460b      	mov	r3, r1
 8004254:	72fb      	strb	r3, [r7, #11]
 8004256:	4613      	mov	r3, r2
 8004258:	72bb      	strb	r3, [r7, #10]
	int aperture = AirInput_getAperture(primaireSecondaire);
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f7fe fe5b 	bl	8002f16 <AirInput_getAperture>
 8004260:	6178      	str	r0, [r7, #20]
	int apertureAdjustment = 0;
 8004262:	2300      	movs	r3, #0
 8004264:	613b      	str	r3, [r7, #16]
	if (aperture >= MaxPrimary)
 8004266:	7abb      	ldrb	r3, [r7, #10]
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	429a      	cmp	r2, r3
 800426c:	db15      	blt.n	800429a <StateEntryControlAdjustment+0x52>
	{
		apertureAdjustment = MaxPrimary - aperture;
 800426e:	7aba      	ldrb	r2, [r7, #10]
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	613b      	str	r3, [r7, #16]
		AirAdjustment(apertureAdjustment,2,primaireSecondaire,MinPrimary,MaxPrimary,grill,MinGrill,MaxGrill);
 8004276:	7afa      	ldrb	r2, [r7, #11]
 8004278:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800427c:	9303      	str	r3, [sp, #12]
 800427e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004282:	9302      	str	r3, [sp, #8]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	9301      	str	r3, [sp, #4]
 8004288:	7abb      	ldrb	r3, [r7, #10]
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	4613      	mov	r3, r2
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	2102      	movs	r1, #2
 8004292:	6938      	ldr	r0, [r7, #16]
 8004294:	f7ff ff92 	bl	80041bc <AirAdjustment>
 8004298:	e018      	b.n	80042cc <StateEntryControlAdjustment+0x84>
	}
	else if (aperture <= MinPrimary)
 800429a:	7afb      	ldrb	r3, [r7, #11]
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	429a      	cmp	r2, r3
 80042a0:	dc14      	bgt.n	80042cc <StateEntryControlAdjustment+0x84>
	{
		apertureAdjustment = MinPrimary - aperture;
 80042a2:	7afa      	ldrb	r2, [r7, #11]
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	613b      	str	r3, [r7, #16]
		AirAdjustment(apertureAdjustment,2,primaireSecondaire,MinPrimary,MaxPrimary,grill,MinGrill,MaxGrill);
 80042aa:	7afa      	ldrb	r2, [r7, #11]
 80042ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80042b0:	9303      	str	r3, [sp, #12]
 80042b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80042b6:	9302      	str	r3, [sp, #8]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	9301      	str	r3, [sp, #4]
 80042bc:	7abb      	ldrb	r3, [r7, #10]
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	4613      	mov	r3, r2
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	2102      	movs	r1, #2
 80042c6:	6938      	ldr	r0, [r7, #16]
 80042c8:	f7ff ff78 	bl	80041bc <AirAdjustment>
	}

	aperture = AirInput_getAperture(grill);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f7fe fe22 	bl	8002f16 <AirInput_getAperture>
 80042d2:	6178      	str	r0, [r7, #20]
	if (aperture >= MaxGrill)
 80042d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	429a      	cmp	r2, r3
 80042dc:	db16      	blt.n	800430c <StateEntryControlAdjustment+0xc4>
	{
		apertureAdjustment = MaxGrill - aperture;
 80042de:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	613b      	str	r3, [r7, #16]
		AirAdjustment(apertureAdjustment,1,primaireSecondaire,MinPrimary,MaxPrimary,grill,MinGrill,MaxGrill);
 80042e8:	7afa      	ldrb	r2, [r7, #11]
 80042ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80042ee:	9303      	str	r3, [sp, #12]
 80042f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80042f4:	9302      	str	r3, [sp, #8]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	9301      	str	r3, [sp, #4]
 80042fa:	7abb      	ldrb	r3, [r7, #10]
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	4613      	mov	r3, r2
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	2101      	movs	r1, #1
 8004304:	6938      	ldr	r0, [r7, #16]
 8004306:	f7ff ff59 	bl	80041bc <AirAdjustment>
	else if (aperture <= MinGrill)
	{
		apertureAdjustment = MinGrill - aperture;
		AirAdjustment(apertureAdjustment,1,primaireSecondaire,MinPrimary,MaxPrimary,grill,MinGrill,MaxGrill);
	}
}
 800430a:	e01a      	b.n	8004342 <StateEntryControlAdjustment+0xfa>
	else if (aperture <= MinGrill)
 800430c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	429a      	cmp	r2, r3
 8004314:	dc15      	bgt.n	8004342 <StateEntryControlAdjustment+0xfa>
		apertureAdjustment = MinGrill - aperture;
 8004316:	f897 2020 	ldrb.w	r2, [r7, #32]
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	613b      	str	r3, [r7, #16]
		AirAdjustment(apertureAdjustment,1,primaireSecondaire,MinPrimary,MaxPrimary,grill,MinGrill,MaxGrill);
 8004320:	7afa      	ldrb	r2, [r7, #11]
 8004322:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004326:	9303      	str	r3, [sp, #12]
 8004328:	f897 3020 	ldrb.w	r3, [r7, #32]
 800432c:	9302      	str	r3, [sp, #8]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	9301      	str	r3, [sp, #4]
 8004332:	7abb      	ldrb	r3, [r7, #10]
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	4613      	mov	r3, r2
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	2101      	movs	r1, #1
 800433c:	6938      	ldr	r0, [r7, #16]
 800433e:	f7ff ff3d 	bl	80041bc <AirAdjustment>
}
 8004342:	bf00      	nop
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
	...

0800434c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4a06      	ldr	r2, [pc, #24]	; (8004374 <vApplicationGetIdleTaskMemory+0x28>)
 800435c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	4a05      	ldr	r2, [pc, #20]	; (8004378 <vApplicationGetIdleTaskMemory+0x2c>)
 8004362:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2280      	movs	r2, #128	; 0x80
 8004368:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800436a:	bf00      	nop
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	bc80      	pop	{r7}
 8004372:	4770      	bx	lr
 8004374:	20000624 	.word	0x20000624
 8004378:	20000678 	.word	0x20000678

0800437c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4a07      	ldr	r2, [pc, #28]	; (80043a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800438c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	4a06      	ldr	r2, [pc, #24]	; (80043ac <vApplicationGetTimerTaskMemory+0x30>)
 8004392:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f44f 7280 	mov.w	r2, #256	; 0x100
 800439a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800439c:	bf00      	nop
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bc80      	pop	{r7}
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	20000878 	.word	0x20000878
 80043ac:	200008cc 	.word	0x200008cc

080043b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80043b0:	b5b0      	push	{r4, r5, r7, lr}
 80043b2:	b0a8      	sub	sp, #160	; 0xa0
 80043b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80043b6:	f000 ff7d 	bl	80052b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80043ba:	f000 f8a1 	bl	8004500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80043be:	f000 f9a7 	bl	8004710 <MX_GPIO_Init>
  MX_I2C1_Init();
 80043c2:	f000 f903 	bl	80045cc <MX_I2C1_Init>
  MX_RTC_Init();
 80043c6:	f000 f92f 	bl	8004628 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80043ca:	f000 f977 	bl	80046bc <MX_USART1_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of I2CSemaphore */
  osSemaphoreDef(I2CSemaphore);
 80043ce:	2300      	movs	r3, #0
 80043d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043d4:	2300      	movs	r3, #0
 80043d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  I2CSemaphoreHandle = osSemaphoreCreate(osSemaphore(I2CSemaphore), 1);
 80043da:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80043de:	2101      	movs	r1, #1
 80043e0:	4618      	mov	r0, r3
 80043e2:	f005 fe93 	bl	800a10c <osSemaphoreCreate>
 80043e6:	4603      	mov	r3, r0
 80043e8:	4a38      	ldr	r2, [pc, #224]	; (80044cc <main+0x11c>)
 80043ea:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of Timer */
  osTimerDef(Timer, TimerCallback);
 80043ec:	4b38      	ldr	r3, [pc, #224]	; (80044d0 <main+0x120>)
 80043ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043f2:	2300      	movs	r3, #0
 80043f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  TimerHandle = osTimerCreate(osTimer(Timer), osTimerPeriodic, NULL);
 80043f8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80043fc:	2200      	movs	r2, #0
 80043fe:	2101      	movs	r1, #1
 8004400:	4618      	mov	r0, r3
 8004402:	f005 fe13 	bl	800a02c <osTimerCreate>
 8004406:	4603      	mov	r3, r0
 8004408:	4a32      	ldr	r2, [pc, #200]	; (80044d4 <main+0x124>)
 800440a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800440c:	4b32      	ldr	r3, [pc, #200]	; (80044d8 <main+0x128>)
 800440e:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8004412:	461d      	mov	r5, r3
 8004414:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004416:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004418:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800441c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004420:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004424:	2100      	movs	r1, #0
 8004426:	4618      	mov	r0, r3
 8004428:	f005 fd9f 	bl	8009f6a <osThreadCreate>
 800442c:	4603      	mov	r3, r0
 800442e:	4a2b      	ldr	r2, [pc, #172]	; (80044dc <main+0x12c>)
 8004430:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  osThreadDef(TemperatureMeas, TemperatureManager, osPriorityNormal, 0, 512); //TODO: Validate maximum stack needed adding printf end in Hard Fault handler
 8004432:	4b2b      	ldr	r3, [pc, #172]	; (80044e0 <main+0x130>)
 8004434:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8004438:	461d      	mov	r5, r3
 800443a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800443c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800443e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004442:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TemperatureMeasHandle = osThreadCreate(osThread(TemperatureMeas), NULL);
 8004446:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800444a:	2100      	movs	r1, #0
 800444c:	4618      	mov	r0, r3
 800444e:	f005 fd8c 	bl	8009f6a <osThreadCreate>
 8004452:	4603      	mov	r3, r0
 8004454:	4a23      	ldr	r2, [pc, #140]	; (80044e4 <main+0x134>)
 8004456:	6013      	str	r3, [r2, #0]

  osThreadDef(StepperManagerT, Steppermanager, osPriorityNormal, 0, 128);
 8004458:	4b23      	ldr	r3, [pc, #140]	; (80044e8 <main+0x138>)
 800445a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800445e:	461d      	mov	r5, r3
 8004460:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004464:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004468:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  StepperManagerTHandle = osThreadCreate(osThread(StepperManagerT), NULL);
 800446c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004470:	2100      	movs	r1, #0
 8004472:	4618      	mov	r0, r3
 8004474:	f005 fd79 	bl	8009f6a <osThreadCreate>
 8004478:	4603      	mov	r3, r0
 800447a:	4a1c      	ldr	r2, [pc, #112]	; (80044ec <main+0x13c>)
 800447c:	6013      	str	r3, [r2, #0]

  osThreadDef(DebugManagerT, DebugManager, osPriorityNormal, 0, 512);
 800447e:	4b1c      	ldr	r3, [pc, #112]	; (80044f0 <main+0x140>)
 8004480:	f107 0420 	add.w	r4, r7, #32
 8004484:	461d      	mov	r5, r3
 8004486:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004488:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800448a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800448e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DebugManagerTHandle = osThreadCreate(osThread(DebugManagerT), NULL);
 8004492:	f107 0320 	add.w	r3, r7, #32
 8004496:	2100      	movs	r1, #0
 8004498:	4618      	mov	r0, r3
 800449a:	f005 fd66 	bl	8009f6a <osThreadCreate>
 800449e:	4603      	mov	r3, r0
 80044a0:	4a14      	ldr	r2, [pc, #80]	; (80044f4 <main+0x144>)
 80044a2:	6013      	str	r3, [r2, #0]

  osThreadDef(HmiManagerT, HmiManager, osPriorityNormal, 0, 128);
 80044a4:	4b14      	ldr	r3, [pc, #80]	; (80044f8 <main+0x148>)
 80044a6:	1d3c      	adds	r4, r7, #4
 80044a8:	461d      	mov	r5, r3
 80044aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80044b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HmiManagerTHandle = osThreadCreate(osThread(HmiManagerT), NULL);
 80044b6:	1d3b      	adds	r3, r7, #4
 80044b8:	2100      	movs	r1, #0
 80044ba:	4618      	mov	r0, r3
 80044bc:	f005 fd55 	bl	8009f6a <osThreadCreate>
 80044c0:	4603      	mov	r3, r0
 80044c2:	4a0e      	ldr	r2, [pc, #56]	; (80044fc <main+0x14c>)
 80044c4:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80044c6:	f005 fd39 	bl	8009f3c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80044ca:	e7fe      	b.n	80044ca <main+0x11a>
 80044cc:	20002f80 	.word	0x20002f80
 80044d0:	08004ab5 	.word	0x08004ab5
 80044d4:	20002fdc 	.word	0x20002fdc
 80044d8:	0800f2bc 	.word	0x0800f2bc
 80044dc:	20002f84 	.word	0x20002f84
 80044e0:	0800f2d8 	.word	0x0800f2d8
 80044e4:	20002fd8 	.word	0x20002fd8
 80044e8:	0800f2f4 	.word	0x0800f2f4
 80044ec:	20002ff4 	.word	0x20002ff4
 80044f0:	0800f310 	.word	0x0800f310
 80044f4:	20002f90 	.word	0x20002f90
 80044f8:	0800f32c 	.word	0x0800f32c
 80044fc:	20002f8c 	.word	0x20002f8c

08004500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b09c      	sub	sp, #112	; 0x70
 8004504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004506:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800450a:	2238      	movs	r2, #56	; 0x38
 800450c:	2100      	movs	r1, #0
 800450e:	4618      	mov	r0, r3
 8004510:	f008 fea4 	bl	800d25c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	605a      	str	r2, [r3, #4]
 800451e:	609a      	str	r2, [r3, #8]
 8004520:	60da      	str	r2, [r3, #12]
 8004522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004524:	1d3b      	adds	r3, r7, #4
 8004526:	2220      	movs	r2, #32
 8004528:	2100      	movs	r1, #0
 800452a:	4618      	mov	r0, r3
 800452c:	f008 fe96 	bl	800d25c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004530:	2309      	movs	r3, #9
 8004532:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004534:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004538:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800453a:	2300      	movs	r3, #0
 800453c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800453e:	2301      	movs	r3, #1
 8004540:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004542:	2301      	movs	r3, #1
 8004544:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8004546:	2300      	movs	r3, #0
 8004548:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800454a:	2302      	movs	r3, #2
 800454c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800454e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004552:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8004554:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004558:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 800455a:	2300      	movs	r3, #0
 800455c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800455e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004562:	4618      	mov	r0, r3
 8004564:	f003 fb56 	bl	8007c14 <HAL_RCC_OscConfig>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800456e:	f000 fac3 	bl	8004af8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004572:	230f      	movs	r3, #15
 8004574:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004576:	2302      	movs	r3, #2
 8004578:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800457a:	2300      	movs	r3, #0
 800457c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800457e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004582:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004584:	2300      	movs	r3, #0
 8004586:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800458c:	2101      	movs	r1, #1
 800458e:	4618      	mov	r0, r3
 8004590:	f003 fe56 	bl	8008240 <HAL_RCC_ClockConfig>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800459a:	f000 faad 	bl	8004af8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800459e:	2301      	movs	r3, #1
 80045a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80045a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045a6:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80045a8:	1d3b      	adds	r3, r7, #4
 80045aa:	4618      	mov	r0, r3
 80045ac:	f004 f896 	bl	80086dc <HAL_RCCEx_PeriphCLKConfig>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <SystemClock_Config+0xba>
  {
    Error_Handler();
 80045b6:	f000 fa9f 	bl	8004af8 <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80045ba:	4b03      	ldr	r3, [pc, #12]	; (80045c8 <SystemClock_Config+0xc8>)
 80045bc:	2201      	movs	r2, #1
 80045be:	601a      	str	r2, [r3, #0]
}
 80045c0:	bf00      	nop
 80045c2:	3770      	adds	r7, #112	; 0x70
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	42420070 	.word	0x42420070

080045cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80045d0:	4b12      	ldr	r3, [pc, #72]	; (800461c <MX_I2C1_Init+0x50>)
 80045d2:	4a13      	ldr	r2, [pc, #76]	; (8004620 <MX_I2C1_Init+0x54>)
 80045d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80045d6:	4b11      	ldr	r3, [pc, #68]	; (800461c <MX_I2C1_Init+0x50>)
 80045d8:	4a12      	ldr	r2, [pc, #72]	; (8004624 <MX_I2C1_Init+0x58>)
 80045da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80045dc:	4b0f      	ldr	r3, [pc, #60]	; (800461c <MX_I2C1_Init+0x50>)
 80045de:	2200      	movs	r2, #0
 80045e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80045e2:	4b0e      	ldr	r3, [pc, #56]	; (800461c <MX_I2C1_Init+0x50>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80045e8:	4b0c      	ldr	r3, [pc, #48]	; (800461c <MX_I2C1_Init+0x50>)
 80045ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80045ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80045f0:	4b0a      	ldr	r3, [pc, #40]	; (800461c <MX_I2C1_Init+0x50>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80045f6:	4b09      	ldr	r3, [pc, #36]	; (800461c <MX_I2C1_Init+0x50>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80045fc:	4b07      	ldr	r3, [pc, #28]	; (800461c <MX_I2C1_Init+0x50>)
 80045fe:	2200      	movs	r2, #0
 8004600:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004602:	4b06      	ldr	r3, [pc, #24]	; (800461c <MX_I2C1_Init+0x50>)
 8004604:	2200      	movs	r2, #0
 8004606:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004608:	4804      	ldr	r0, [pc, #16]	; (800461c <MX_I2C1_Init+0x50>)
 800460a:	f001 fb33 	bl	8005c74 <HAL_I2C_Init>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004614:	f000 fa70 	bl	8004af8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004618:	bf00      	nop
 800461a:	bd80      	pop	{r7, pc}
 800461c:	20002f2c 	.word	0x20002f2c
 8004620:	40005400 	.word	0x40005400
 8004624:	000186a0 	.word	0x000186a0

08004628 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800462e:	1d3b      	adds	r3, r7, #4
 8004630:	2100      	movs	r1, #0
 8004632:	460a      	mov	r2, r1
 8004634:	801a      	strh	r2, [r3, #0]
 8004636:	460a      	mov	r2, r1
 8004638:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800463a:	2300      	movs	r3, #0
 800463c:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800463e:	4b1d      	ldr	r3, [pc, #116]	; (80046b4 <MX_RTC_Init+0x8c>)
 8004640:	4a1d      	ldr	r2, [pc, #116]	; (80046b8 <MX_RTC_Init+0x90>)
 8004642:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8004644:	4b1b      	ldr	r3, [pc, #108]	; (80046b4 <MX_RTC_Init+0x8c>)
 8004646:	f04f 32ff 	mov.w	r2, #4294967295
 800464a:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 800464c:	4b19      	ldr	r3, [pc, #100]	; (80046b4 <MX_RTC_Init+0x8c>)
 800464e:	2200      	movs	r2, #0
 8004650:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004652:	4818      	ldr	r0, [pc, #96]	; (80046b4 <MX_RTC_Init+0x8c>)
 8004654:	f004 fad8 	bl	8008c08 <HAL_RTC_Init>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 800465e:	f000 fa4b 	bl	8004af8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8004662:	2300      	movs	r3, #0
 8004664:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8004666:	2300      	movs	r3, #0
 8004668:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800466a:	2300      	movs	r3, #0
 800466c:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800466e:	1d3b      	adds	r3, r7, #4
 8004670:	2201      	movs	r2, #1
 8004672:	4619      	mov	r1, r3
 8004674:	480f      	ldr	r0, [pc, #60]	; (80046b4 <MX_RTC_Init+0x8c>)
 8004676:	f004 fb5d 	bl	8008d34 <HAL_RTC_SetTime>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8004680:	f000 fa3a 	bl	8004af8 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004684:	2301      	movs	r3, #1
 8004686:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004688:	2301      	movs	r3, #1
 800468a:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 800468c:	2301      	movs	r3, #1
 800468e:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8004690:	2300      	movs	r3, #0
 8004692:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8004694:	463b      	mov	r3, r7
 8004696:	2201      	movs	r2, #1
 8004698:	4619      	mov	r1, r3
 800469a:	4806      	ldr	r0, [pc, #24]	; (80046b4 <MX_RTC_Init+0x8c>)
 800469c:	f004 fcba 	bl	8009014 <HAL_RTC_SetDate>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80046a6:	f000 fa27 	bl	8004af8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80046aa:	bf00      	nop
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	20002fe0 	.word	0x20002fe0
 80046b8:	40002800 	.word	0x40002800

080046bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80046c0:	4b11      	ldr	r3, [pc, #68]	; (8004708 <MX_USART1_UART_Init+0x4c>)
 80046c2:	4a12      	ldr	r2, [pc, #72]	; (800470c <MX_USART1_UART_Init+0x50>)
 80046c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80046c6:	4b10      	ldr	r3, [pc, #64]	; (8004708 <MX_USART1_UART_Init+0x4c>)
 80046c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80046cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80046ce:	4b0e      	ldr	r3, [pc, #56]	; (8004708 <MX_USART1_UART_Init+0x4c>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80046d4:	4b0c      	ldr	r3, [pc, #48]	; (8004708 <MX_USART1_UART_Init+0x4c>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80046da:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <MX_USART1_UART_Init+0x4c>)
 80046dc:	2200      	movs	r2, #0
 80046de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80046e0:	4b09      	ldr	r3, [pc, #36]	; (8004708 <MX_USART1_UART_Init+0x4c>)
 80046e2:	220c      	movs	r2, #12
 80046e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046e6:	4b08      	ldr	r3, [pc, #32]	; (8004708 <MX_USART1_UART_Init+0x4c>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80046ec:	4b06      	ldr	r3, [pc, #24]	; (8004708 <MX_USART1_UART_Init+0x4c>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80046f2:	4805      	ldr	r0, [pc, #20]	; (8004708 <MX_USART1_UART_Init+0x4c>)
 80046f4:	f005 fa42 	bl	8009b7c <HAL_UART_Init>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80046fe:	f000 f9fb 	bl	8004af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004702:	bf00      	nop
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	20002f94 	.word	0x20002f94
 800470c:	40013800 	.word	0x40013800

08004710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b088      	sub	sp, #32
 8004714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004716:	f107 0310 	add.w	r3, r7, #16
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	605a      	str	r2, [r3, #4]
 8004720:	609a      	str	r2, [r3, #8]
 8004722:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004724:	4b76      	ldr	r3, [pc, #472]	; (8004900 <MX_GPIO_Init+0x1f0>)
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	4a75      	ldr	r2, [pc, #468]	; (8004900 <MX_GPIO_Init+0x1f0>)
 800472a:	f043 0310 	orr.w	r3, r3, #16
 800472e:	6193      	str	r3, [r2, #24]
 8004730:	4b73      	ldr	r3, [pc, #460]	; (8004900 <MX_GPIO_Init+0x1f0>)
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	f003 0310 	and.w	r3, r3, #16
 8004738:	60fb      	str	r3, [r7, #12]
 800473a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800473c:	4b70      	ldr	r3, [pc, #448]	; (8004900 <MX_GPIO_Init+0x1f0>)
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	4a6f      	ldr	r2, [pc, #444]	; (8004900 <MX_GPIO_Init+0x1f0>)
 8004742:	f043 0320 	orr.w	r3, r3, #32
 8004746:	6193      	str	r3, [r2, #24]
 8004748:	4b6d      	ldr	r3, [pc, #436]	; (8004900 <MX_GPIO_Init+0x1f0>)
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	f003 0320 	and.w	r3, r3, #32
 8004750:	60bb      	str	r3, [r7, #8]
 8004752:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004754:	4b6a      	ldr	r3, [pc, #424]	; (8004900 <MX_GPIO_Init+0x1f0>)
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	4a69      	ldr	r2, [pc, #420]	; (8004900 <MX_GPIO_Init+0x1f0>)
 800475a:	f043 0304 	orr.w	r3, r3, #4
 800475e:	6193      	str	r3, [r2, #24]
 8004760:	4b67      	ldr	r3, [pc, #412]	; (8004900 <MX_GPIO_Init+0x1f0>)
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	f003 0304 	and.w	r3, r3, #4
 8004768:	607b      	str	r3, [r7, #4]
 800476a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800476c:	4b64      	ldr	r3, [pc, #400]	; (8004900 <MX_GPIO_Init+0x1f0>)
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	4a63      	ldr	r2, [pc, #396]	; (8004900 <MX_GPIO_Init+0x1f0>)
 8004772:	f043 0308 	orr.w	r3, r3, #8
 8004776:	6193      	str	r3, [r2, #24]
 8004778:	4b61      	ldr	r3, [pc, #388]	; (8004900 <MX_GPIO_Init+0x1f0>)
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	f003 0308 	and.w	r3, r3, #8
 8004780:	603b      	str	r3, [r7, #0]
 8004782:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Step2_LowCurrent_Pin|uc_Stepper_Sleep_Pin|SPEED2_COIL_Pin|SPEED3_COIL_Pin
 8004784:	2200      	movs	r2, #0
 8004786:	f242 71d0 	movw	r1, #10192	; 0x27d0
 800478a:	485e      	ldr	r0, [pc, #376]	; (8004904 <MX_GPIO_Init+0x1f4>)
 800478c:	f001 fa41 	bl	8005c12 <HAL_GPIO_WritePin>
                          |Step2_DIR_Pin|Step1_LowCurrent_Pin|Step2_STEP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Step3_RESET_Pin|STATUS_LED1_Pin|Step3_ENABLE_Pin|Step2_RESET_Pin
 8004790:	2201      	movs	r2, #1
 8004792:	f641 012c 	movw	r1, #6188	; 0x182c
 8004796:	485b      	ldr	r0, [pc, #364]	; (8004904 <MX_GPIO_Init+0x1f4>)
 8004798:	f001 fa3b 	bl	8005c12 <HAL_GPIO_WritePin>
                          |Step2_ENABLE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_ON_Pin|Step3_DIR_Pin|AFK_Var_Pin|USB_ENABLE_Pin, GPIO_PIN_RESET);
 800479c:	2200      	movs	r2, #0
 800479e:	f248 01a2 	movw	r1, #32930	; 0x80a2
 80047a2:	4859      	ldr	r0, [pc, #356]	; (8004908 <MX_GPIO_Init+0x1f8>)
 80047a4:	f001 fa35 	bl	8005c12 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STATUS_LED2_Pin|Button_LED_Pin, GPIO_PIN_SET);
 80047a8:	2201      	movs	r2, #1
 80047aa:	f44f 7188 	mov.w	r1, #272	; 0x110
 80047ae:	4856      	ldr	r0, [pc, #344]	; (8004908 <MX_GPIO_Init+0x1f8>)
 80047b0:	f001 fa2f 	bl	8005c12 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Step3_STEP_Pin|Step3_LowCurrent_Pin|Stepper_HalfStep_Pin|Step1_STEP_Pin, GPIO_PIN_RESET);
 80047b4:	2200      	movs	r2, #0
 80047b6:	f248 010e 	movw	r1, #32782	; 0x800e
 80047ba:	4854      	ldr	r0, [pc, #336]	; (800490c <MX_GPIO_Init+0x1fc>)
 80047bc:	f001 fa29 	bl	8005c12 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Step1_DIR_GPIO_Port, Step1_DIR_Pin, GPIO_PIN_RESET);
 80047c0:	2200      	movs	r2, #0
 80047c2:	2104      	movs	r1, #4
 80047c4:	4852      	ldr	r0, [pc, #328]	; (8004910 <MX_GPIO_Init+0x200>)
 80047c6:	f001 fa24 	bl	8005c12 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Step1_RESET_Pin|Step1_ENABLE_Pin, GPIO_PIN_SET);
 80047ca:	2201      	movs	r2, #1
 80047cc:	2130      	movs	r1, #48	; 0x30
 80047ce:	484f      	ldr	r0, [pc, #316]	; (800490c <MX_GPIO_Init+0x1fc>)
 80047d0:	f001 fa1f 	bl	8005c12 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Step2_LowCurrent_Pin Step3_RESET_Pin STATUS_LED1_Pin uc_Stepper_Sleep_Pin
                           Step3_ENABLE_Pin SPEED2_COIL_Pin SPEED3_COIL_Pin Step2_DIR_Pin
                           Step1_LowCurrent_Pin Step2_STEP_Pin Step2_RESET_Pin Step2_ENABLE_Pin */
  GPIO_InitStruct.Pin = Step2_LowCurrent_Pin|Step3_RESET_Pin|STATUS_LED1_Pin|uc_Stepper_Sleep_Pin
 80047d4:	f643 73fc 	movw	r3, #16380	; 0x3ffc
 80047d8:	613b      	str	r3, [r7, #16]
                          |Step3_ENABLE_Pin|SPEED2_COIL_Pin|SPEED3_COIL_Pin|Step2_DIR_Pin
                          |Step1_LowCurrent_Pin|Step2_STEP_Pin|Step2_RESET_Pin|Step2_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047da:	2301      	movs	r3, #1
 80047dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047de:	2300      	movs	r3, #0
 80047e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047e2:	2302      	movs	r3, #2
 80047e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047e6:	f107 0310 	add.w	r3, r7, #16
 80047ea:	4619      	mov	r1, r3
 80047ec:	4845      	ldr	r0, [pc, #276]	; (8004904 <MX_GPIO_Init+0x1f4>)
 80047ee:	f000 ffb9 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_switch1_Pin Limit_switch2_Pin */
  GPIO_InitStruct.Pin = Limit_switch1_Pin|Limit_switch2_Pin;
 80047f2:	2303      	movs	r3, #3
 80047f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047f6:	2300      	movs	r3, #0
 80047f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047fa:	2300      	movs	r3, #0
 80047fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047fe:	f107 0310 	add.w	r3, r7, #16
 8004802:	4619      	mov	r1, r3
 8004804:	483f      	ldr	r0, [pc, #252]	; (8004904 <MX_GPIO_Init+0x1f4>)
 8004806:	f000 ffad 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_ON_Pin STATUS_LED2_Pin Step3_DIR_Pin AFK_Var_Pin
                           Button_LED_Pin USB_ENABLE_Pin */
  GPIO_InitStruct.Pin = Buzzer_ON_Pin|STATUS_LED2_Pin|Step3_DIR_Pin|AFK_Var_Pin
 800480a:	f248 13b2 	movw	r3, #33202	; 0x81b2
 800480e:	613b      	str	r3, [r7, #16]
                          |Button_LED_Pin|USB_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004810:	2301      	movs	r3, #1
 8004812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004814:	2300      	movs	r3, #0
 8004816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004818:	2302      	movs	r3, #2
 800481a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800481c:	f107 0310 	add.w	r3, r7, #16
 8004820:	4619      	mov	r1, r3
 8004822:	4839      	ldr	r0, [pc, #228]	; (8004908 <MX_GPIO_Init+0x1f8>)
 8004824:	f000 ff9e 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004828:	2304      	movs	r3, #4
 800482a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800482c:	2302      	movs	r3, #2
 800482e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004830:	2303      	movs	r3, #3
 8004832:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004834:	f107 0310 	add.w	r3, r7, #16
 8004838:	4619      	mov	r1, r3
 800483a:	4833      	ldr	r0, [pc, #204]	; (8004908 <MX_GPIO_Init+0x1f8>)
 800483c:	f000 ff92 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004840:	2308      	movs	r3, #8
 8004842:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004844:	2300      	movs	r3, #0
 8004846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004848:	2300      	movs	r3, #0
 800484a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800484c:	f107 0310 	add.w	r3, r7, #16
 8004850:	4619      	mov	r1, r3
 8004852:	482d      	ldr	r0, [pc, #180]	; (8004908 <MX_GPIO_Init+0x1f8>)
 8004854:	f000 ff86 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pin : Limit_switch3_Pin */
  GPIO_InitStruct.Pin = Limit_switch3_Pin;
 8004858:	2340      	movs	r3, #64	; 0x40
 800485a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800485c:	2300      	movs	r3, #0
 800485e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004860:	2300      	movs	r3, #0
 8004862:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Limit_switch3_GPIO_Port, &GPIO_InitStruct);
 8004864:	f107 0310 	add.w	r3, r7, #16
 8004868:	4619      	mov	r1, r3
 800486a:	4827      	ldr	r0, [pc, #156]	; (8004908 <MX_GPIO_Init+0x1f8>)
 800486c:	f000 ff7a 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_switch_Door_Pin Thermostat_Input_Pin Safety_ON_Pin Interlock_Input_Pin
                           Button_Input_Pin USB_Fault_Pin */
  GPIO_InitStruct.Pin = Limit_switch_Door_Pin|Thermostat_Input_Pin|Safety_ON_Pin|Interlock_Input_Pin
 8004870:	f247 3301 	movw	r3, #29441	; 0x7301
 8004874:	613b      	str	r3, [r7, #16]
                          |Button_Input_Pin|USB_Fault_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004876:	2300      	movs	r3, #0
 8004878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800487a:	2300      	movs	r3, #0
 800487c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800487e:	f107 0310 	add.w	r3, r7, #16
 8004882:	4619      	mov	r1, r3
 8004884:	4821      	ldr	r0, [pc, #132]	; (800490c <MX_GPIO_Init+0x1fc>)
 8004886:	f000 ff6d 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pins : Step3_STEP_Pin Step3_LowCurrent_Pin Stepper_HalfStep_Pin Step1_STEP_Pin
                           Step1_RESET_Pin Step1_ENABLE_Pin */
  GPIO_InitStruct.Pin = Step3_STEP_Pin|Step3_LowCurrent_Pin|Stepper_HalfStep_Pin|Step1_STEP_Pin
 800488a:	f248 033e 	movw	r3, #32830	; 0x803e
 800488e:	613b      	str	r3, [r7, #16]
                          |Step1_RESET_Pin|Step1_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004890:	2301      	movs	r3, #1
 8004892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004894:	2300      	movs	r3, #0
 8004896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004898:	2302      	movs	r3, #2
 800489a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800489c:	f107 0310 	add.w	r3, r7, #16
 80048a0:	4619      	mov	r1, r3
 80048a2:	481a      	ldr	r0, [pc, #104]	; (800490c <MX_GPIO_Init+0x1fc>)
 80048a4:	f000 ff5e 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80048a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ae:	2302      	movs	r3, #2
 80048b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80048b2:	2303      	movs	r3, #3
 80048b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048b6:	f107 0310 	add.w	r3, r7, #16
 80048ba:	4619      	mov	r1, r3
 80048bc:	4813      	ldr	r0, [pc, #76]	; (800490c <MX_GPIO_Init+0x1fc>)
 80048be:	f000 ff51 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80048c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80048c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048c8:	2300      	movs	r3, #0
 80048ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048cc:	2300      	movs	r3, #0
 80048ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048d0:	f107 0310 	add.w	r3, r7, #16
 80048d4:	4619      	mov	r1, r3
 80048d6:	480d      	ldr	r0, [pc, #52]	; (800490c <MX_GPIO_Init+0x1fc>)
 80048d8:	f000 ff44 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pin : Step1_DIR_Pin */
  GPIO_InitStruct.Pin = Step1_DIR_Pin;
 80048dc:	2304      	movs	r3, #4
 80048de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048e0:	2301      	movs	r3, #1
 80048e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e4:	2300      	movs	r3, #0
 80048e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048e8:	2302      	movs	r3, #2
 80048ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Step1_DIR_GPIO_Port, &GPIO_InitStruct);
 80048ec:	f107 0310 	add.w	r3, r7, #16
 80048f0:	4619      	mov	r1, r3
 80048f2:	4807      	ldr	r0, [pc, #28]	; (8004910 <MX_GPIO_Init+0x200>)
 80048f4:	f000 ff36 	bl	8005764 <HAL_GPIO_Init>

}
 80048f8:	bf00      	nop
 80048fa:	3720      	adds	r7, #32
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	40021000 	.word	0x40021000
 8004904:	40011000 	.word	0x40011000
 8004908:	40010800 	.word	0x40010800
 800490c:	40010c00 	.word	0x40010c00
 8004910:	40011400 	.word	0x40011400

08004914 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	printf("-------------------------------\n\r"); //TODO: if we remove this call, go to hardfault handler  or fail to execute
 800491c:	4858      	ldr	r0, [pc, #352]	; (8004a80 <StartDefaultTask+0x16c>)
 800491e:	f008 fca5 	bl	800d26c <iprintf>

	    switch (readModel())
 8004922:	f7fc ff15 	bl	8001750 <readModel>
 8004926:	4603      	mov	r3, r0
 8004928:	2b05      	cmp	r3, #5
 800492a:	d827      	bhi.n	800497c <StartDefaultTask+0x68>
 800492c:	a201      	add	r2, pc, #4	; (adr r2, 8004934 <StartDefaultTask+0x20>)
 800492e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004932:	bf00      	nop
 8004934:	0800494d 	.word	0x0800494d
 8004938:	08004955 	.word	0x08004955
 800493c:	0800495d 	.word	0x0800495d
 8004940:	08004965 	.word	0x08004965
 8004944:	0800496d 	.word	0x0800496d
 8004948:	08004975 	.word	0x08004975
	    {
	    	  case HEATMAX:
	  	   	  printf("HeatCom CaddyAdv");
 800494c:	484d      	ldr	r0, [pc, #308]	; (8004a84 <StartDefaultTask+0x170>)
 800494e:	f008 fc8d 	bl	800d26c <iprintf>
	  	  break;
 8004952:	e017      	b.n	8004984 <StartDefaultTask+0x70>
	    	  case CADDY_ADVANCED:
	    		  printf("Caddy Advanced");
 8004954:	484c      	ldr	r0, [pc, #304]	; (8004a88 <StartDefaultTask+0x174>)
 8004956:	f008 fc89 	bl	800d26c <iprintf>
	  	  break;
 800495a:	e013      	b.n	8004984 <StartDefaultTask+0x70>
	    	  case HEATPACK:
	    		  printf("Heatpack");
 800495c:	484b      	ldr	r0, [pc, #300]	; (8004a8c <StartDefaultTask+0x178>)
 800495e:	f008 fc85 	bl	800d26c <iprintf>
	  	  break;
 8004962:	e00f      	b.n	8004984 <StartDefaultTask+0x70>
	    	  case MINI_CADDY:
	    		  printf("Mini Caddy");
 8004964:	484a      	ldr	r0, [pc, #296]	; (8004a90 <StartDefaultTask+0x17c>)
 8004966:	f008 fc81 	bl	800d26c <iprintf>
	    	  break;
 800496a:	e00b      	b.n	8004984 <StartDefaultTask+0x70>
	    	  case HEATPRO:
	    		  printf("HeatPro");
 800496c:	4849      	ldr	r0, [pc, #292]	; (8004a94 <StartDefaultTask+0x180>)
 800496e:	f008 fc7d 	bl	800d26c <iprintf>
	  	  break;
 8004972:	e007      	b.n	8004984 <StartDefaultTask+0x70>
	    	  case MAX_CADDY:
	    		  printf("Max Caddy");
 8004974:	4848      	ldr	r0, [pc, #288]	; (8004a98 <StartDefaultTask+0x184>)
 8004976:	f008 fc79 	bl	800d26c <iprintf>
	  	  break;
 800497a:	e003      	b.n	8004984 <StartDefaultTask+0x70>
	    	  default:
	    		  printf("Invalid Model");
 800497c:	4847      	ldr	r0, [pc, #284]	; (8004a9c <StartDefaultTask+0x188>)
 800497e:	f008 fc75 	bl	800d26c <iprintf>
	    		break;
 8004982:	bf00      	nop
	    }
	    uint32_t j=0; //for a dumbass delay
 8004984:	2300      	movs	r3, #0
 8004986:	60fb      	str	r3, [r7, #12]
	    //HAL_GPIO_WritePin(STATUS_LED0_GPIO_Port,STATUS_LED0_Pin,SET);
	    HAL_GPIO_WritePin(STATUS_LED1_GPIO_Port,STATUS_LED1_Pin,SET);
 8004988:	2201      	movs	r2, #1
 800498a:	2108      	movs	r1, #8
 800498c:	4844      	ldr	r0, [pc, #272]	; (8004aa0 <StartDefaultTask+0x18c>)
 800498e:	f001 f940 	bl	8005c12 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(STATUS_LED2_GPIO_Port,STATUS_LED2_Pin,SET);
 8004992:	2201      	movs	r2, #1
 8004994:	2110      	movs	r1, #16
 8004996:	4843      	ldr	r0, [pc, #268]	; (8004aa4 <StartDefaultTask+0x190>)
 8004998:	f001 f93b 	bl	8005c12 <HAL_GPIO_WritePin>
	    for(j=0;j<10000000;j++){asm("NOP");}
 800499c:	2300      	movs	r3, #0
 800499e:	60fb      	str	r3, [r7, #12]
 80049a0:	e003      	b.n	80049aa <StartDefaultTask+0x96>
 80049a2:	bf00      	nop
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	3301      	adds	r3, #1
 80049a8:	60fb      	str	r3, [r7, #12]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	4a3e      	ldr	r2, [pc, #248]	; (8004aa8 <StartDefaultTask+0x194>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d3f7      	bcc.n	80049a2 <StartDefaultTask+0x8e>
	    printf(" Version %i.%i.%i\n\r",MAJOR_VER,MINOR_VER,REVISION_VER);
 80049b2:	2308      	movs	r3, #8
 80049b4:	2200      	movs	r2, #0
 80049b6:	2101      	movs	r1, #1
 80049b8:	483c      	ldr	r0, [pc, #240]	; (8004aac <StartDefaultTask+0x198>)
 80049ba:	f008 fc57 	bl	800d26c <iprintf>


	    int i=0;
 80049be:	2300      	movs	r3, #0
 80049c0:	60bb      	str	r3, [r7, #8]

	    for(i=0;i<MAJOR_VER;i++)
 80049c2:	2300      	movs	r3, #0
 80049c4:	60bb      	str	r3, [r7, #8]
 80049c6:	e002      	b.n	80049ce <StartDefaultTask+0xba>
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	3301      	adds	r3, #1
 80049cc:	60bb      	str	r3, [r7, #8]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	ddf9      	ble.n	80049c8 <StartDefaultTask+0xb4>
	  	  //HAL_GPIO_WritePin(STATUS_LED0_GPIO_Port,STATUS_LED0_Pin,RESET);
	  	  //for(j=0;j<5000000;j++){asm("NOP");}
	  	  //HAL_GPIO_WritePin(STATUS_LED0_GPIO_Port,STATUS_LED0_Pin,SET);
	  	  //for(j=0;j<5000000;j++){asm("NOP");}
	    }
	    for(i=0;i<MINOR_VER;i++)
 80049d4:	2300      	movs	r3, #0
 80049d6:	60bb      	str	r3, [r7, #8]
 80049d8:	e022      	b.n	8004a20 <StartDefaultTask+0x10c>
	    {
	  	  HAL_GPIO_WritePin(STATUS_LED1_GPIO_Port,STATUS_LED1_Pin,RESET);
 80049da:	2200      	movs	r2, #0
 80049dc:	2108      	movs	r1, #8
 80049de:	4830      	ldr	r0, [pc, #192]	; (8004aa0 <StartDefaultTask+0x18c>)
 80049e0:	f001 f917 	bl	8005c12 <HAL_GPIO_WritePin>
	  	  for(j=0;j<5000000;j++){asm("NOP");}
 80049e4:	2300      	movs	r3, #0
 80049e6:	60fb      	str	r3, [r7, #12]
 80049e8:	e003      	b.n	80049f2 <StartDefaultTask+0xde>
 80049ea:	bf00      	nop
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	3301      	adds	r3, #1
 80049f0:	60fb      	str	r3, [r7, #12]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4a2e      	ldr	r2, [pc, #184]	; (8004ab0 <StartDefaultTask+0x19c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d9f7      	bls.n	80049ea <StartDefaultTask+0xd6>
	  	  HAL_GPIO_WritePin(STATUS_LED1_GPIO_Port,STATUS_LED1_Pin,SET);
 80049fa:	2201      	movs	r2, #1
 80049fc:	2108      	movs	r1, #8
 80049fe:	4828      	ldr	r0, [pc, #160]	; (8004aa0 <StartDefaultTask+0x18c>)
 8004a00:	f001 f907 	bl	8005c12 <HAL_GPIO_WritePin>
	  	  for(j=0;j<5000000;j++){asm("NOP");}
 8004a04:	2300      	movs	r3, #0
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	e003      	b.n	8004a12 <StartDefaultTask+0xfe>
 8004a0a:	bf00      	nop
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	60fb      	str	r3, [r7, #12]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4a26      	ldr	r2, [pc, #152]	; (8004ab0 <StartDefaultTask+0x19c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d9f7      	bls.n	8004a0a <StartDefaultTask+0xf6>
	    for(i=0;i<MINOR_VER;i++)
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	60bb      	str	r3, [r7, #8]
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	dbd9      	blt.n	80049da <StartDefaultTask+0xc6>
	    }
	    for(i=0;i<REVISION_VER;i++)
 8004a26:	2300      	movs	r3, #0
 8004a28:	60bb      	str	r3, [r7, #8]
 8004a2a:	e022      	b.n	8004a72 <StartDefaultTask+0x15e>
	    {
	  	  HAL_GPIO_WritePin(STATUS_LED2_GPIO_Port,STATUS_LED2_Pin,RESET);
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	2110      	movs	r1, #16
 8004a30:	481c      	ldr	r0, [pc, #112]	; (8004aa4 <StartDefaultTask+0x190>)
 8004a32:	f001 f8ee 	bl	8005c12 <HAL_GPIO_WritePin>
	  	  for(j=0;j<5000000;j++){asm("NOP");}
 8004a36:	2300      	movs	r3, #0
 8004a38:	60fb      	str	r3, [r7, #12]
 8004a3a:	e003      	b.n	8004a44 <StartDefaultTask+0x130>
 8004a3c:	bf00      	nop
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	3301      	adds	r3, #1
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4a1a      	ldr	r2, [pc, #104]	; (8004ab0 <StartDefaultTask+0x19c>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d9f7      	bls.n	8004a3c <StartDefaultTask+0x128>
	  	  HAL_GPIO_WritePin(STATUS_LED2_GPIO_Port,STATUS_LED2_Pin,SET);
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	2110      	movs	r1, #16
 8004a50:	4814      	ldr	r0, [pc, #80]	; (8004aa4 <StartDefaultTask+0x190>)
 8004a52:	f001 f8de 	bl	8005c12 <HAL_GPIO_WritePin>
	  	  for(j=0;j<5000000;j++){asm("NOP");}
 8004a56:	2300      	movs	r3, #0
 8004a58:	60fb      	str	r3, [r7, #12]
 8004a5a:	e003      	b.n	8004a64 <StartDefaultTask+0x150>
 8004a5c:	bf00      	nop
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	3301      	adds	r3, #1
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4a12      	ldr	r2, [pc, #72]	; (8004ab0 <StartDefaultTask+0x19c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d9f7      	bls.n	8004a5c <StartDefaultTask+0x148>
	    for(i=0;i<REVISION_VER;i++)
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	60bb      	str	r3, [r7, #8]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2b07      	cmp	r3, #7
 8004a76:	ddd9      	ble.n	8004a2c <StartDefaultTask+0x118>
	    }
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8004a78:	2001      	movs	r0, #1
 8004a7a:	f005 fac2 	bl	800a002 <osDelay>
 8004a7e:	e7fb      	b.n	8004a78 <StartDefaultTask+0x164>
 8004a80:	0800f348 	.word	0x0800f348
 8004a84:	0800f36c 	.word	0x0800f36c
 8004a88:	0800f380 	.word	0x0800f380
 8004a8c:	0800f390 	.word	0x0800f390
 8004a90:	0800f39c 	.word	0x0800f39c
 8004a94:	0800f3a8 	.word	0x0800f3a8
 8004a98:	0800f3b0 	.word	0x0800f3b0
 8004a9c:	0800f3bc 	.word	0x0800f3bc
 8004aa0:	40011000 	.word	0x40011000
 8004aa4:	40010800 	.word	0x40010800
 8004aa8:	00989680 	.word	0x00989680
 8004aac:	0800f3cc 	.word	0x0800f3cc
 8004ab0:	004c4b3f 	.word	0x004c4b3f

08004ab4 <TimerCallback>:
  /* USER CODE END 5 */
}

/* TimerCallback function */
void TimerCallback(void const * argument)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TimerCallback */
	osTimerStop(TimerHandle);
 8004abc:	4b04      	ldr	r3, [pc, #16]	; (8004ad0 <TimerCallback+0x1c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f005 fae7 	bl	800a094 <osTimerStop>
  /* USER CODE END TimerCallback */
}
 8004ac6:	bf00      	nop
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	20002fdc 	.word	0x20002fdc

08004ad4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a04      	ldr	r2, [pc, #16]	; (8004af4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d101      	bne.n	8004aea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004ae6:	f000 fbfb 	bl	80052e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004aea:	bf00      	nop
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	40012c00 	.word	0x40012c00

08004af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	printf("Error Handler called");
 8004afc:	4802      	ldr	r0, [pc, #8]	; (8004b08 <Error_Handler+0x10>)
 8004afe:	f008 fbb5 	bl	800d26c <iprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004b02:	b672      	cpsid	i
}
 8004b04:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004b06:	e7fe      	b.n	8004b06 <Error_Handler+0xe>
 8004b08:	0800f3e0 	.word	0x0800f3e0

08004b0c <Slope_init>:
  https://www.embeddedrelated.com/showcode/323.php
*/

#include "slope.h"

void Slope_init(Slope * slope, int dataStore[], unsigned int nbDataMax, float samplingRate) {
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
 8004b18:	603b      	str	r3, [r7, #0]
  if (sizeof(uint64_t) != 8) {
    // ERROR: the size of int64_t on this platform is not supported.
    while(true) {;}
  }

  slope->dataStore = dataStore;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	601a      	str	r2, [r3, #0]
  slope->nbDataMax = nbDataMax;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	605a      	str	r2, [r3, #4]
  slope->nbDataInDataStore = 0;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	609a      	str	r2, [r3, #8]
  slope->dataIndex = 0;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	60da      	str	r2, [r3, #12]
  slope->samplingRate = samplingRate;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	611a      	str	r2, [r3, #16]
}
 8004b38:	bf00      	nop
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bc80      	pop	{r7}
 8004b40:	4770      	bx	lr

08004b42 <Slope_addData>:

void Slope_addData(Slope * slope, int data) {
 8004b42:	b480      	push	{r7}
 8004b44:	b083      	sub	sp, #12
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
 8004b4a:	6039      	str	r1, [r7, #0]

  if (slope->nbDataInDataStore < slope->nbDataMax) {
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d204      	bcs.n	8004b62 <Slope_addData+0x20>
    slope->nbDataInDataStore++;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	609a      	str	r2, [r3, #8]
  }

  slope->dataStore[slope->dataIndex] = data;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	601a      	str	r2, [r3, #0]
  slope->dataIndex++;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	1c5a      	adds	r2, r3, #1
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	60da      	str	r2, [r3, #12]
  if (slope->dataIndex >= slope->nbDataMax) {
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d302      	bcc.n	8004b8e <Slope_addData+0x4c>
    slope->dataIndex = 0;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	60da      	str	r2, [r3, #12]
  }
}
 8004b8e:	bf00      	nop
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bc80      	pop	{r7}
 8004b96:	4770      	bx	lr

08004b98 <Slope_compute>:

float Slope_compute(Slope * slope, unsigned int nbData) {
 8004b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b9c:	b097      	sub	sp, #92	; 0x5c
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	61f8      	str	r0, [r7, #28]
 8004ba2:	61b9      	str	r1, [r7, #24]

  int64_t nbDataToUse;
  int64_t sumX = 0;
 8004ba4:	f04f 0200 	mov.w	r2, #0
 8004ba8:	f04f 0300 	mov.w	r3, #0
 8004bac:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  int64_t sumY = 0;
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	f04f 0300 	mov.w	r3, #0
 8004bb8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  int64_t sumXY = 0;
 8004bbc:	f04f 0200 	mov.w	r2, #0
 8004bc0:	f04f 0300 	mov.w	r3, #0
 8004bc4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
   int64_t sumX2 = 0;
 8004bc8:	f04f 0200 	mov.w	r2, #0
 8004bcc:	f04f 0300 	mov.w	r3, #0
 8004bd0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  unsigned int readingIndex;
  float slopeValue;

  if (nbData > slope->nbDataInDataStore) {
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d907      	bls.n	8004bee <Slope_compute+0x56>
    nbDataToUse = slope->nbDataInDataStore;
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	461a      	mov	r2, r3
 8004be4:	f04f 0300 	mov.w	r3, #0
 8004be8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8004bec:	e005      	b.n	8004bfa <Slope_compute+0x62>
  } else {
    nbDataToUse = nbData;
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	f04f 0300 	mov.w	r3, #0
 8004bf6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  }

  if (slope->dataIndex >= nbDataToUse) {
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f04f 0100 	mov.w	r1, #0
 8004c04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c08:	4290      	cmp	r0, r2
 8004c0a:	eb71 0303 	sbcs.w	r3, r1, r3
 8004c0e:	db05      	blt.n	8004c1c <Slope_compute+0x84>
    readingIndex = slope->dataIndex - nbDataToUse;
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	68da      	ldr	r2, [r3, #12]
 8004c14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c1a:	e007      	b.n	8004c2c <Slope_compute+0x94>
  } else {
    readingIndex = slope->nbDataInDataStore - (nbDataToUse - slope->dataIndex);
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	6899      	ldr	r1, [r3, #8]
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	68da      	ldr	r2, [r3, #12]
 8004c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	440b      	add	r3, r1
 8004c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (int32_t i = 0; i < nbDataToUse; i++) {
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c30:	e04c      	b.n	8004ccc <Slope_compute+0x134>

    sumX += i;
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	4618      	mov	r0, r3
 8004c36:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8004c3a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c3e:	1814      	adds	r4, r2, r0
 8004c40:	eb43 0501 	adc.w	r5, r3, r1
 8004c44:	e9c7 4512 	strd	r4, r5, [r7, #72]	; 0x48
    sumY += slope->dataStore[readingIndex];
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4618      	mov	r0, r3
 8004c56:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8004c5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c5e:	eb12 0800 	adds.w	r8, r2, r0
 8004c62:	eb43 0901 	adc.w	r9, r3, r1
 8004c66:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
    sumXY += (i * slope->dataStore[readingIndex]); // ATTENTION: TODO: trouver un moyen de tester si on fait un overflow
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c78:	fb02 f303 	mul.w	r3, r2, r3
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8004c82:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c86:	eb12 0a00 	adds.w	sl, r2, r0
 8004c8a:	eb43 0b01 	adc.w	fp, r3, r1
 8004c8e:	e9c7 ab0e 	strd	sl, fp, [r7, #56]	; 0x38
    sumX2 += i * i;
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	fb03 f303 	mul.w	r3, r3, r3
 8004c98:	4618      	mov	r0, r3
 8004c9a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8004c9e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004ca2:	1816      	adds	r6, r2, r0
 8004ca4:	603e      	str	r6, [r7, #0]
 8004ca6:	414b      	adcs	r3, r1
 8004ca8:	607b      	str	r3, [r7, #4]
 8004caa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cae:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    readingIndex++;
 8004cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (readingIndex >= slope->nbDataInDataStore) {
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d301      	bcc.n	8004cc6 <Slope_compute+0x12e>
      readingIndex = 0;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (int32_t i = 0; i < nbDataToUse; i++) {
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc8:	3301      	adds	r3, #1
 8004cca:	627b      	str	r3, [r7, #36]	; 0x24
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	4618      	mov	r0, r3
 8004cd0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8004cd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004cd8:	4290      	cmp	r0, r2
 8004cda:	eb71 0303 	sbcs.w	r3, r1, r3
 8004cde:	dba8      	blt.n	8004c32 <Slope_compute+0x9a>
    }
  }

  if ((sumX != 0) || (sumX2 != 0)) {
 8004ce0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	d103      	bne.n	8004cf0 <Slope_compute+0x158>
 8004ce8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004cec:	4313      	orrs	r3, r2
 8004cee:	d05d      	beq.n	8004dac <Slope_compute+0x214>
    slopeValue = (((sumX * sumY) - (nbDataToUse * sumXY)) * 1.0) / (((sumX * sumX) - (nbDataToUse * sumX2)) * 1.0);
 8004cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cf4:	fb02 f203 	mul.w	r2, r2, r3
 8004cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cfa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004cfc:	fb01 f303 	mul.w	r3, r1, r3
 8004d00:	4413      	add	r3, r2
 8004d02:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004d04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d06:	fba1 0102 	umull	r0, r1, r1, r2
 8004d0a:	440b      	add	r3, r1
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d12:	fb02 f203 	mul.w	r2, r2, r3
 8004d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d18:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8004d1a:	fb04 f303 	mul.w	r3, r4, r3
 8004d1e:	18d4      	adds	r4, r2, r3
 8004d20:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d24:	fba2 2303 	umull	r2, r3, r2, r3
 8004d28:	441c      	add	r4, r3
 8004d2a:	4623      	mov	r3, r4
 8004d2c:	1a84      	subs	r4, r0, r2
 8004d2e:	613c      	str	r4, [r7, #16]
 8004d30:	eb61 0303 	sbc.w	r3, r1, r3
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d3a:	f7fb fc07 	bl	800054c <__aeabi_l2d>
 8004d3e:	4604      	mov	r4, r0
 8004d40:	460d      	mov	r5, r1
 8004d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d46:	fb02 f203 	mul.w	r2, r2, r3
 8004d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d4c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004d4e:	fb01 f303 	mul.w	r3, r1, r3
 8004d52:	441a      	add	r2, r3
 8004d54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d56:	fba3 0103 	umull	r0, r1, r3, r3
 8004d5a:	1853      	adds	r3, r2, r1
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d62:	fb02 f203 	mul.w	r2, r2, r3
 8004d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d68:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 8004d6a:	fb06 f303 	mul.w	r3, r6, r3
 8004d6e:	18d6      	adds	r6, r2, r3
 8004d70:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d74:	fba2 2303 	umull	r2, r3, r2, r3
 8004d78:	441e      	add	r6, r3
 8004d7a:	4633      	mov	r3, r6
 8004d7c:	1a86      	subs	r6, r0, r2
 8004d7e:	60be      	str	r6, [r7, #8]
 8004d80:	eb61 0303 	sbc.w	r3, r1, r3
 8004d84:	60fb      	str	r3, [r7, #12]
 8004d86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d8a:	f7fb fbdf 	bl	800054c <__aeabi_l2d>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	460b      	mov	r3, r1
 8004d92:	4620      	mov	r0, r4
 8004d94:	4629      	mov	r1, r5
 8004d96:	f7fb fd31 	bl	80007fc <__aeabi_ddiv>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	4610      	mov	r0, r2
 8004da0:	4619      	mov	r1, r3
 8004da2:	f7fb feb1 	bl	8000b08 <__aeabi_d2f>
 8004da6:	4603      	mov	r3, r0
 8004da8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004daa:	e002      	b.n	8004db2 <Slope_compute+0x21a>
  } else {
    slopeValue = 0.0;
 8004dac:	f04f 0300 	mov.w	r3, #0
 8004db0:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  return slopeValue * slope->samplingRate;
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7fc f803 	bl	8000dc4 <__aeabi_fmul>
 8004dbe:	4603      	mov	r3, r0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	375c      	adds	r7, #92	; 0x5c
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004dd2:	4b18      	ldr	r3, [pc, #96]	; (8004e34 <HAL_MspInit+0x68>)
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	4a17      	ldr	r2, [pc, #92]	; (8004e34 <HAL_MspInit+0x68>)
 8004dd8:	f043 0301 	orr.w	r3, r3, #1
 8004ddc:	6193      	str	r3, [r2, #24]
 8004dde:	4b15      	ldr	r3, [pc, #84]	; (8004e34 <HAL_MspInit+0x68>)
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	60bb      	str	r3, [r7, #8]
 8004de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004dea:	4b12      	ldr	r3, [pc, #72]	; (8004e34 <HAL_MspInit+0x68>)
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	4a11      	ldr	r2, [pc, #68]	; (8004e34 <HAL_MspInit+0x68>)
 8004df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004df4:	61d3      	str	r3, [r2, #28]
 8004df6:	4b0f      	ldr	r3, [pc, #60]	; (8004e34 <HAL_MspInit+0x68>)
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dfe:	607b      	str	r3, [r7, #4]
 8004e00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004e02:	2200      	movs	r2, #0
 8004e04:	210f      	movs	r1, #15
 8004e06:	f06f 0001 	mvn.w	r0, #1
 8004e0a:	f000 fb5e 	bl	80054ca <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004e0e:	4b0a      	ldr	r3, [pc, #40]	; (8004e38 <HAL_MspInit+0x6c>)
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	4a04      	ldr	r2, [pc, #16]	; (8004e38 <HAL_MspInit+0x6c>)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e2a:	bf00      	nop
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	40021000 	.word	0x40021000
 8004e38:	40010000 	.word	0x40010000

08004e3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b088      	sub	sp, #32
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e44:	f107 0310 	add.w	r3, r7, #16
 8004e48:	2200      	movs	r2, #0
 8004e4a:	601a      	str	r2, [r3, #0]
 8004e4c:	605a      	str	r2, [r3, #4]
 8004e4e:	609a      	str	r2, [r3, #8]
 8004e50:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a1d      	ldr	r2, [pc, #116]	; (8004ecc <HAL_I2C_MspInit+0x90>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d133      	bne.n	8004ec4 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e5c:	4b1c      	ldr	r3, [pc, #112]	; (8004ed0 <HAL_I2C_MspInit+0x94>)
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	4a1b      	ldr	r2, [pc, #108]	; (8004ed0 <HAL_I2C_MspInit+0x94>)
 8004e62:	f043 0308 	orr.w	r3, r3, #8
 8004e66:	6193      	str	r3, [r2, #24]
 8004e68:	4b19      	ldr	r3, [pc, #100]	; (8004ed0 <HAL_I2C_MspInit+0x94>)
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	f003 0308 	and.w	r3, r3, #8
 8004e70:	60fb      	str	r3, [r7, #12]
 8004e72:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 8004e74:	23c0      	movs	r3, #192	; 0xc0
 8004e76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e78:	2312      	movs	r3, #18
 8004e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e80:	f107 0310 	add.w	r3, r7, #16
 8004e84:	4619      	mov	r1, r3
 8004e86:	4813      	ldr	r0, [pc, #76]	; (8004ed4 <HAL_I2C_MspInit+0x98>)
 8004e88:	f000 fc6c 	bl	8005764 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004e8c:	4b10      	ldr	r3, [pc, #64]	; (8004ed0 <HAL_I2C_MspInit+0x94>)
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	4a0f      	ldr	r2, [pc, #60]	; (8004ed0 <HAL_I2C_MspInit+0x94>)
 8004e92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e96:	61d3      	str	r3, [r2, #28]
 8004e98:	4b0d      	ldr	r3, [pc, #52]	; (8004ed0 <HAL_I2C_MspInit+0x94>)
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ea0:	60bb      	str	r3, [r7, #8]
 8004ea2:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	2105      	movs	r1, #5
 8004ea8:	201f      	movs	r0, #31
 8004eaa:	f000 fb0e 	bl	80054ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004eae:	201f      	movs	r0, #31
 8004eb0:	f000 fb27 	bl	8005502 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	2105      	movs	r1, #5
 8004eb8:	2020      	movs	r0, #32
 8004eba:	f000 fb06 	bl	80054ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004ebe:	2020      	movs	r0, #32
 8004ec0:	f000 fb1f 	bl	8005502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004ec4:	bf00      	nop
 8004ec6:	3720      	adds	r7, #32
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	40005400 	.word	0x40005400
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	40010c00 	.word	0x40010c00

08004ed8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a0d      	ldr	r2, [pc, #52]	; (8004f1c <HAL_I2C_MspDeInit+0x44>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d113      	bne.n	8004f12 <HAL_I2C_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004eea:	4b0d      	ldr	r3, [pc, #52]	; (8004f20 <HAL_I2C_MspDeInit+0x48>)
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	4a0c      	ldr	r2, [pc, #48]	; (8004f20 <HAL_I2C_MspDeInit+0x48>)
 8004ef0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ef4:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C_SDA_GPIO_Port, I2C_SDA_Pin);
 8004ef6:	2140      	movs	r1, #64	; 0x40
 8004ef8:	480a      	ldr	r0, [pc, #40]	; (8004f24 <HAL_I2C_MspDeInit+0x4c>)
 8004efa:	f000 fdb7 	bl	8005a6c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C_SCL_GPIO_Port, I2C_SCL_Pin);
 8004efe:	2180      	movs	r1, #128	; 0x80
 8004f00:	4808      	ldr	r0, [pc, #32]	; (8004f24 <HAL_I2C_MspDeInit+0x4c>)
 8004f02:	f000 fdb3 	bl	8005a6c <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8004f06:	201f      	movs	r0, #31
 8004f08:	f000 fb09 	bl	800551e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8004f0c:	2020      	movs	r0, #32
 8004f0e:	f000 fb06 	bl	800551e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8004f12:	bf00      	nop
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	40005400 	.word	0x40005400
 8004f20:	40021000 	.word	0x40021000
 8004f24:	40010c00 	.word	0x40010c00

08004f28 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a0b      	ldr	r2, [pc, #44]	; (8004f64 <HAL_RTC_MspInit+0x3c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d110      	bne.n	8004f5c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8004f3a:	f002 fe5f 	bl	8007bfc <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8004f3e:	4b0a      	ldr	r3, [pc, #40]	; (8004f68 <HAL_RTC_MspInit+0x40>)
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	4a09      	ldr	r2, [pc, #36]	; (8004f68 <HAL_RTC_MspInit+0x40>)
 8004f44:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f48:	61d3      	str	r3, [r2, #28]
 8004f4a:	4b07      	ldr	r3, [pc, #28]	; (8004f68 <HAL_RTC_MspInit+0x40>)
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004f56:	4b05      	ldr	r3, [pc, #20]	; (8004f6c <HAL_RTC_MspInit+0x44>)
 8004f58:	2201      	movs	r2, #1
 8004f5a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004f5c:	bf00      	nop
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	40002800 	.word	0x40002800
 8004f68:	40021000 	.word	0x40021000
 8004f6c:	4242043c 	.word	0x4242043c

08004f70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b088      	sub	sp, #32
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f78:	f107 0310 	add.w	r3, r7, #16
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	601a      	str	r2, [r3, #0]
 8004f80:	605a      	str	r2, [r3, #4]
 8004f82:	609a      	str	r2, [r3, #8]
 8004f84:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a1c      	ldr	r2, [pc, #112]	; (8004ffc <HAL_UART_MspInit+0x8c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d131      	bne.n	8004ff4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004f90:	4b1b      	ldr	r3, [pc, #108]	; (8005000 <HAL_UART_MspInit+0x90>)
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	4a1a      	ldr	r2, [pc, #104]	; (8005000 <HAL_UART_MspInit+0x90>)
 8004f96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f9a:	6193      	str	r3, [r2, #24]
 8004f9c:	4b18      	ldr	r3, [pc, #96]	; (8005000 <HAL_UART_MspInit+0x90>)
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fa4:	60fb      	str	r3, [r7, #12]
 8004fa6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fa8:	4b15      	ldr	r3, [pc, #84]	; (8005000 <HAL_UART_MspInit+0x90>)
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	4a14      	ldr	r2, [pc, #80]	; (8005000 <HAL_UART_MspInit+0x90>)
 8004fae:	f043 0304 	orr.w	r3, r3, #4
 8004fb2:	6193      	str	r3, [r2, #24]
 8004fb4:	4b12      	ldr	r3, [pc, #72]	; (8005000 <HAL_UART_MspInit+0x90>)
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	60bb      	str	r3, [r7, #8]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004fc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fce:	f107 0310 	add.w	r3, r7, #16
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	480b      	ldr	r0, [pc, #44]	; (8005004 <HAL_UART_MspInit+0x94>)
 8004fd6:	f000 fbc5 	bl	8005764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004fda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fe8:	f107 0310 	add.w	r3, r7, #16
 8004fec:	4619      	mov	r1, r3
 8004fee:	4805      	ldr	r0, [pc, #20]	; (8005004 <HAL_UART_MspInit+0x94>)
 8004ff0:	f000 fbb8 	bl	8005764 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004ff4:	bf00      	nop
 8004ff6:	3720      	adds	r7, #32
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	40013800 	.word	0x40013800
 8005000:	40021000 	.word	0x40021000
 8005004:	40010800 	.word	0x40010800

08005008 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b08c      	sub	sp, #48	; 0x30
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005010:	2300      	movs	r3, #0
 8005012:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005014:	2300      	movs	r3, #0
 8005016:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8005018:	2200      	movs	r2, #0
 800501a:	6879      	ldr	r1, [r7, #4]
 800501c:	2019      	movs	r0, #25
 800501e:	f000 fa54 	bl	80054ca <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8005022:	2019      	movs	r0, #25
 8005024:	f000 fa6d 	bl	8005502 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005028:	4b1e      	ldr	r3, [pc, #120]	; (80050a4 <HAL_InitTick+0x9c>)
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	4a1d      	ldr	r2, [pc, #116]	; (80050a4 <HAL_InitTick+0x9c>)
 800502e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005032:	6193      	str	r3, [r2, #24]
 8005034:	4b1b      	ldr	r3, [pc, #108]	; (80050a4 <HAL_InitTick+0x9c>)
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800503c:	60fb      	str	r3, [r7, #12]
 800503e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005040:	f107 0210 	add.w	r2, r7, #16
 8005044:	f107 0314 	add.w	r3, r7, #20
 8005048:	4611      	mov	r1, r2
 800504a:	4618      	mov	r0, r3
 800504c:	f003 faf8 	bl	8008640 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005050:	f003 fae2 	bl	8008618 <HAL_RCC_GetPCLK2Freq>
 8005054:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005058:	4a13      	ldr	r2, [pc, #76]	; (80050a8 <HAL_InitTick+0xa0>)
 800505a:	fba2 2303 	umull	r2, r3, r2, r3
 800505e:	0c9b      	lsrs	r3, r3, #18
 8005060:	3b01      	subs	r3, #1
 8005062:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005064:	4b11      	ldr	r3, [pc, #68]	; (80050ac <HAL_InitTick+0xa4>)
 8005066:	4a12      	ldr	r2, [pc, #72]	; (80050b0 <HAL_InitTick+0xa8>)
 8005068:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800506a:	4b10      	ldr	r3, [pc, #64]	; (80050ac <HAL_InitTick+0xa4>)
 800506c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005070:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005072:	4a0e      	ldr	r2, [pc, #56]	; (80050ac <HAL_InitTick+0xa4>)
 8005074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005076:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005078:	4b0c      	ldr	r3, [pc, #48]	; (80050ac <HAL_InitTick+0xa4>)
 800507a:	2200      	movs	r2, #0
 800507c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800507e:	4b0b      	ldr	r3, [pc, #44]	; (80050ac <HAL_InitTick+0xa4>)
 8005080:	2200      	movs	r2, #0
 8005082:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005084:	4809      	ldr	r0, [pc, #36]	; (80050ac <HAL_InitTick+0xa4>)
 8005086:	f004 fb1d 	bl	80096c4 <HAL_TIM_Base_Init>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d104      	bne.n	800509a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8005090:	4806      	ldr	r0, [pc, #24]	; (80050ac <HAL_InitTick+0xa4>)
 8005092:	f004 fb6f 	bl	8009774 <HAL_TIM_Base_Start_IT>
 8005096:	4603      	mov	r3, r0
 8005098:	e000      	b.n	800509c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
}
 800509c:	4618      	mov	r0, r3
 800509e:	3730      	adds	r7, #48	; 0x30
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	40021000 	.word	0x40021000
 80050a8:	431bde83 	.word	0x431bde83
 80050ac:	20002ff8 	.word	0x20002ff8
 80050b0:	40012c00 	.word	0x40012c00

080050b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050b4:	b480      	push	{r7}
 80050b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80050b8:	e7fe      	b.n	80050b8 <NMI_Handler+0x4>

080050ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050ba:	b480      	push	{r7}
 80050bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050be:	e7fe      	b.n	80050be <HardFault_Handler+0x4>

080050c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80050c0:	b480      	push	{r7}
 80050c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80050c4:	e7fe      	b.n	80050c4 <MemManage_Handler+0x4>

080050c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80050c6:	b480      	push	{r7}
 80050c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80050ca:	e7fe      	b.n	80050ca <BusFault_Handler+0x4>

080050cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80050d0:	e7fe      	b.n	80050d0 <UsageFault_Handler+0x4>

080050d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80050d2:	b480      	push	{r7}
 80050d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80050d6:	bf00      	nop
 80050d8:	46bd      	mov	sp, r7
 80050da:	bc80      	pop	{r7}
 80050dc:	4770      	bx	lr
	...

080050e0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80050e4:	4802      	ldr	r0, [pc, #8]	; (80050f0 <TIM1_UP_IRQHandler+0x10>)
 80050e6:	f004 fb9f 	bl	8009828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80050ea:	bf00      	nop
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	20002ff8 	.word	0x20002ff8

080050f4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80050f8:	4802      	ldr	r0, [pc, #8]	; (8005104 <I2C1_EV_IRQHandler+0x10>)
 80050fa:	f001 f8ce 	bl	800629a <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80050fe:	bf00      	nop
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	20002f2c 	.word	0x20002f2c

08005108 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800510c:	4802      	ldr	r0, [pc, #8]	; (8005118 <I2C1_ER_IRQHandler+0x10>)
 800510e:	f001 fa35 	bl	800657c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8005112:	bf00      	nop
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	20002f2c 	.word	0x20002f2c

0800511c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005128:	2300      	movs	r3, #0
 800512a:	617b      	str	r3, [r7, #20]
 800512c:	e00a      	b.n	8005144 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800512e:	f3af 8000 	nop.w
 8005132:	4601      	mov	r1, r0
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	60ba      	str	r2, [r7, #8]
 800513a:	b2ca      	uxtb	r2, r1
 800513c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	3301      	adds	r3, #1
 8005142:	617b      	str	r3, [r7, #20]
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	429a      	cmp	r2, r3
 800514a:	dbf0      	blt.n	800512e <_read+0x12>
	}

return len;
 800514c:	687b      	ldr	r3, [r7, #4]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3718      	adds	r7, #24
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b086      	sub	sp, #24
 800515a:	af00      	add	r7, sp, #0
 800515c:	60f8      	str	r0, [r7, #12]
 800515e:	60b9      	str	r1, [r7, #8]
 8005160:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005162:	2300      	movs	r3, #0
 8005164:	617b      	str	r3, [r7, #20]
 8005166:	e009      	b.n	800517c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	60ba      	str	r2, [r7, #8]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	4618      	mov	r0, r3
 8005172:	f7fc fadb 	bl	800172c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	3301      	adds	r3, #1
 800517a:	617b      	str	r3, [r7, #20]
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	429a      	cmp	r2, r3
 8005182:	dbf1      	blt.n	8005168 <_write+0x12>
	}
	return len;
 8005184:	687b      	ldr	r3, [r7, #4]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3718      	adds	r7, #24
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <_close>:

int _close(int file)
{
 800518e:	b480      	push	{r7}
 8005190:	b083      	sub	sp, #12
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
	return -1;
 8005196:	f04f 33ff 	mov.w	r3, #4294967295
}
 800519a:	4618      	mov	r0, r3
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	bc80      	pop	{r7}
 80051a2:	4770      	bx	lr

080051a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80051b4:	605a      	str	r2, [r3, #4]
	return 0;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	bc80      	pop	{r7}
 80051c0:	4770      	bx	lr

080051c2 <_isatty>:

int _isatty(int file)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
	return 1;
 80051ca:	2301      	movs	r3, #1
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bc80      	pop	{r7}
 80051d4:	4770      	bx	lr

080051d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b085      	sub	sp, #20
 80051da:	af00      	add	r7, sp, #0
 80051dc:	60f8      	str	r0, [r7, #12]
 80051de:	60b9      	str	r1, [r7, #8]
 80051e0:	607a      	str	r2, [r7, #4]
	return 0;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bc80      	pop	{r7}
 80051ec:	4770      	bx	lr
	...

080051f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80051f8:	4a14      	ldr	r2, [pc, #80]	; (800524c <_sbrk+0x5c>)
 80051fa:	4b15      	ldr	r3, [pc, #84]	; (8005250 <_sbrk+0x60>)
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005204:	4b13      	ldr	r3, [pc, #76]	; (8005254 <_sbrk+0x64>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d102      	bne.n	8005212 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800520c:	4b11      	ldr	r3, [pc, #68]	; (8005254 <_sbrk+0x64>)
 800520e:	4a12      	ldr	r2, [pc, #72]	; (8005258 <_sbrk+0x68>)
 8005210:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005212:	4b10      	ldr	r3, [pc, #64]	; (8005254 <_sbrk+0x64>)
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4413      	add	r3, r2
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	429a      	cmp	r2, r3
 800521e:	d207      	bcs.n	8005230 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005220:	f007 ffe4 	bl	800d1ec <__errno>
 8005224:	4603      	mov	r3, r0
 8005226:	220c      	movs	r2, #12
 8005228:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800522a:	f04f 33ff 	mov.w	r3, #4294967295
 800522e:	e009      	b.n	8005244 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005230:	4b08      	ldr	r3, [pc, #32]	; (8005254 <_sbrk+0x64>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005236:	4b07      	ldr	r3, [pc, #28]	; (8005254 <_sbrk+0x64>)
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4413      	add	r3, r2
 800523e:	4a05      	ldr	r2, [pc, #20]	; (8005254 <_sbrk+0x64>)
 8005240:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005242:	68fb      	ldr	r3, [r7, #12]
}
 8005244:	4618      	mov	r0, r3
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	20010000 	.word	0x20010000
 8005250:	00000400 	.word	0x00000400
 8005254:	20000ccc 	.word	0x20000ccc
 8005258:	20003098 	.word	0x20003098

0800525c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005260:	bf00      	nop
 8005262:	46bd      	mov	sp, r7
 8005264:	bc80      	pop	{r7}
 8005266:	4770      	bx	lr

08005268 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005268:	480c      	ldr	r0, [pc, #48]	; (800529c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800526a:	490d      	ldr	r1, [pc, #52]	; (80052a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800526c:	4a0d      	ldr	r2, [pc, #52]	; (80052a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800526e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005270:	e002      	b.n	8005278 <LoopCopyDataInit>

08005272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005276:	3304      	adds	r3, #4

08005278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800527a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800527c:	d3f9      	bcc.n	8005272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800527e:	4a0a      	ldr	r2, [pc, #40]	; (80052a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005280:	4c0a      	ldr	r4, [pc, #40]	; (80052ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8005282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005284:	e001      	b.n	800528a <LoopFillZerobss>

08005286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005288:	3204      	adds	r2, #4

0800528a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800528a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800528c:	d3fb      	bcc.n	8005286 <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 800528e:	f7ff ffe5 	bl	800525c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005292:	f007 ffb1 	bl	800d1f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005296:	f7ff f88b 	bl	80043b0 <main>
  bx lr
 800529a:	4770      	bx	lr
  ldr r0, =_sdata
 800529c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80052a0:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 80052a4:	0800f658 	.word	0x0800f658
  ldr r2, =_sbss
 80052a8:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 80052ac:	20003094 	.word	0x20003094

080052b0 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80052b0:	e7fe      	b.n	80052b0 <ADC1_2_IRQHandler>
	...

080052b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80052b8:	4b08      	ldr	r3, [pc, #32]	; (80052dc <HAL_Init+0x28>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a07      	ldr	r2, [pc, #28]	; (80052dc <HAL_Init+0x28>)
 80052be:	f043 0310 	orr.w	r3, r3, #16
 80052c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052c4:	2003      	movs	r0, #3
 80052c6:	f000 f8f5 	bl	80054b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80052ca:	2000      	movs	r0, #0
 80052cc:	f7ff fe9c 	bl	8005008 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80052d0:	f7ff fd7c 	bl	8004dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	40022000 	.word	0x40022000

080052e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052e0:	b480      	push	{r7}
 80052e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80052e4:	4b05      	ldr	r3, [pc, #20]	; (80052fc <HAL_IncTick+0x1c>)
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	461a      	mov	r2, r3
 80052ea:	4b05      	ldr	r3, [pc, #20]	; (8005300 <HAL_IncTick+0x20>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4413      	add	r3, r2
 80052f0:	4a03      	ldr	r2, [pc, #12]	; (8005300 <HAL_IncTick+0x20>)
 80052f2:	6013      	str	r3, [r2, #0]
}
 80052f4:	bf00      	nop
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bc80      	pop	{r7}
 80052fa:	4770      	bx	lr
 80052fc:	20000050 	.word	0x20000050
 8005300:	20003040 	.word	0x20003040

08005304 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005304:	b480      	push	{r7}
 8005306:	af00      	add	r7, sp, #0
  return uwTick;
 8005308:	4b02      	ldr	r3, [pc, #8]	; (8005314 <HAL_GetTick+0x10>)
 800530a:	681b      	ldr	r3, [r3, #0]
}
 800530c:	4618      	mov	r0, r3
 800530e:	46bd      	mov	sp, r7
 8005310:	bc80      	pop	{r7}
 8005312:	4770      	bx	lr
 8005314:	20003040 	.word	0x20003040

08005318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f003 0307 	and.w	r3, r3, #7
 8005326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005328:	4b0c      	ldr	r3, [pc, #48]	; (800535c <__NVIC_SetPriorityGrouping+0x44>)
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005334:	4013      	ands	r3, r2
 8005336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005340:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800534a:	4a04      	ldr	r2, [pc, #16]	; (800535c <__NVIC_SetPriorityGrouping+0x44>)
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	60d3      	str	r3, [r2, #12]
}
 8005350:	bf00      	nop
 8005352:	3714      	adds	r7, #20
 8005354:	46bd      	mov	sp, r7
 8005356:	bc80      	pop	{r7}
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	e000ed00 	.word	0xe000ed00

08005360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005360:	b480      	push	{r7}
 8005362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005364:	4b04      	ldr	r3, [pc, #16]	; (8005378 <__NVIC_GetPriorityGrouping+0x18>)
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	0a1b      	lsrs	r3, r3, #8
 800536a:	f003 0307 	and.w	r3, r3, #7
}
 800536e:	4618      	mov	r0, r3
 8005370:	46bd      	mov	sp, r7
 8005372:	bc80      	pop	{r7}
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	e000ed00 	.word	0xe000ed00

0800537c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	4603      	mov	r3, r0
 8005384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800538a:	2b00      	cmp	r3, #0
 800538c:	db0b      	blt.n	80053a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800538e:	79fb      	ldrb	r3, [r7, #7]
 8005390:	f003 021f 	and.w	r2, r3, #31
 8005394:	4906      	ldr	r1, [pc, #24]	; (80053b0 <__NVIC_EnableIRQ+0x34>)
 8005396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800539a:	095b      	lsrs	r3, r3, #5
 800539c:	2001      	movs	r0, #1
 800539e:	fa00 f202 	lsl.w	r2, r0, r2
 80053a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bc80      	pop	{r7}
 80053ae:	4770      	bx	lr
 80053b0:	e000e100 	.word	0xe000e100

080053b4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	4603      	mov	r3, r0
 80053bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	db12      	blt.n	80053ec <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053c6:	79fb      	ldrb	r3, [r7, #7]
 80053c8:	f003 021f 	and.w	r2, r3, #31
 80053cc:	490a      	ldr	r1, [pc, #40]	; (80053f8 <__NVIC_DisableIRQ+0x44>)
 80053ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053d2:	095b      	lsrs	r3, r3, #5
 80053d4:	2001      	movs	r0, #1
 80053d6:	fa00 f202 	lsl.w	r2, r0, r2
 80053da:	3320      	adds	r3, #32
 80053dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80053e0:	f3bf 8f4f 	dsb	sy
}
 80053e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80053e6:	f3bf 8f6f 	isb	sy
}
 80053ea:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bc80      	pop	{r7}
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	e000e100 	.word	0xe000e100

080053fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	4603      	mov	r3, r0
 8005404:	6039      	str	r1, [r7, #0]
 8005406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800540c:	2b00      	cmp	r3, #0
 800540e:	db0a      	blt.n	8005426 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	b2da      	uxtb	r2, r3
 8005414:	490c      	ldr	r1, [pc, #48]	; (8005448 <__NVIC_SetPriority+0x4c>)
 8005416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800541a:	0112      	lsls	r2, r2, #4
 800541c:	b2d2      	uxtb	r2, r2
 800541e:	440b      	add	r3, r1
 8005420:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005424:	e00a      	b.n	800543c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	b2da      	uxtb	r2, r3
 800542a:	4908      	ldr	r1, [pc, #32]	; (800544c <__NVIC_SetPriority+0x50>)
 800542c:	79fb      	ldrb	r3, [r7, #7]
 800542e:	f003 030f 	and.w	r3, r3, #15
 8005432:	3b04      	subs	r3, #4
 8005434:	0112      	lsls	r2, r2, #4
 8005436:	b2d2      	uxtb	r2, r2
 8005438:	440b      	add	r3, r1
 800543a:	761a      	strb	r2, [r3, #24]
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	bc80      	pop	{r7}
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	e000e100 	.word	0xe000e100
 800544c:	e000ed00 	.word	0xe000ed00

08005450 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005450:	b480      	push	{r7}
 8005452:	b089      	sub	sp, #36	; 0x24
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f003 0307 	and.w	r3, r3, #7
 8005462:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	f1c3 0307 	rsb	r3, r3, #7
 800546a:	2b04      	cmp	r3, #4
 800546c:	bf28      	it	cs
 800546e:	2304      	movcs	r3, #4
 8005470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	3304      	adds	r3, #4
 8005476:	2b06      	cmp	r3, #6
 8005478:	d902      	bls.n	8005480 <NVIC_EncodePriority+0x30>
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	3b03      	subs	r3, #3
 800547e:	e000      	b.n	8005482 <NVIC_EncodePriority+0x32>
 8005480:	2300      	movs	r3, #0
 8005482:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005484:	f04f 32ff 	mov.w	r2, #4294967295
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	fa02 f303 	lsl.w	r3, r2, r3
 800548e:	43da      	mvns	r2, r3
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	401a      	ands	r2, r3
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005498:	f04f 31ff 	mov.w	r1, #4294967295
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	fa01 f303 	lsl.w	r3, r1, r3
 80054a2:	43d9      	mvns	r1, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054a8:	4313      	orrs	r3, r2
         );
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3724      	adds	r7, #36	; 0x24
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bc80      	pop	{r7}
 80054b2:	4770      	bx	lr

080054b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f7ff ff2b 	bl	8005318 <__NVIC_SetPriorityGrouping>
}
 80054c2:	bf00      	nop
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b086      	sub	sp, #24
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	4603      	mov	r3, r0
 80054d2:	60b9      	str	r1, [r7, #8]
 80054d4:	607a      	str	r2, [r7, #4]
 80054d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80054d8:	2300      	movs	r3, #0
 80054da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80054dc:	f7ff ff40 	bl	8005360 <__NVIC_GetPriorityGrouping>
 80054e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	68b9      	ldr	r1, [r7, #8]
 80054e6:	6978      	ldr	r0, [r7, #20]
 80054e8:	f7ff ffb2 	bl	8005450 <NVIC_EncodePriority>
 80054ec:	4602      	mov	r2, r0
 80054ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054f2:	4611      	mov	r1, r2
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7ff ff81 	bl	80053fc <__NVIC_SetPriority>
}
 80054fa:	bf00      	nop
 80054fc:	3718      	adds	r7, #24
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b082      	sub	sp, #8
 8005506:	af00      	add	r7, sp, #0
 8005508:	4603      	mov	r3, r0
 800550a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800550c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005510:	4618      	mov	r0, r3
 8005512:	f7ff ff33 	bl	800537c <__NVIC_EnableIRQ>
}
 8005516:	bf00      	nop
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b082      	sub	sp, #8
 8005522:	af00      	add	r7, sp, #0
 8005524:	4603      	mov	r3, r0
 8005526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800552c:	4618      	mov	r0, r3
 800552e:	f7ff ff41 	bl	80053b4 <__NVIC_DisableIRQ>
}
 8005532:	bf00      	nop
 8005534:	3708      	adds	r7, #8
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
	...

0800553c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005544:	2300      	movs	r3, #0
 8005546:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800554e:	2b02      	cmp	r3, #2
 8005550:	d005      	beq.n	800555e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2204      	movs	r2, #4
 8005556:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	73fb      	strb	r3, [r7, #15]
 800555c:	e0d6      	b.n	800570c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 020e 	bic.w	r2, r2, #14
 800556c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f022 0201 	bic.w	r2, r2, #1
 800557c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	461a      	mov	r2, r3
 8005584:	4b64      	ldr	r3, [pc, #400]	; (8005718 <HAL_DMA_Abort_IT+0x1dc>)
 8005586:	429a      	cmp	r2, r3
 8005588:	d958      	bls.n	800563c <HAL_DMA_Abort_IT+0x100>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a63      	ldr	r2, [pc, #396]	; (800571c <HAL_DMA_Abort_IT+0x1e0>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d04f      	beq.n	8005634 <HAL_DMA_Abort_IT+0xf8>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a61      	ldr	r2, [pc, #388]	; (8005720 <HAL_DMA_Abort_IT+0x1e4>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d048      	beq.n	8005630 <HAL_DMA_Abort_IT+0xf4>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a60      	ldr	r2, [pc, #384]	; (8005724 <HAL_DMA_Abort_IT+0x1e8>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d040      	beq.n	800562a <HAL_DMA_Abort_IT+0xee>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a5e      	ldr	r2, [pc, #376]	; (8005728 <HAL_DMA_Abort_IT+0x1ec>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d038      	beq.n	8005624 <HAL_DMA_Abort_IT+0xe8>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a5d      	ldr	r2, [pc, #372]	; (800572c <HAL_DMA_Abort_IT+0x1f0>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d030      	beq.n	800561e <HAL_DMA_Abort_IT+0xe2>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a5b      	ldr	r2, [pc, #364]	; (8005730 <HAL_DMA_Abort_IT+0x1f4>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d028      	beq.n	8005618 <HAL_DMA_Abort_IT+0xdc>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a53      	ldr	r2, [pc, #332]	; (8005718 <HAL_DMA_Abort_IT+0x1dc>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d020      	beq.n	8005612 <HAL_DMA_Abort_IT+0xd6>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a57      	ldr	r2, [pc, #348]	; (8005734 <HAL_DMA_Abort_IT+0x1f8>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d019      	beq.n	800560e <HAL_DMA_Abort_IT+0xd2>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a56      	ldr	r2, [pc, #344]	; (8005738 <HAL_DMA_Abort_IT+0x1fc>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d012      	beq.n	800560a <HAL_DMA_Abort_IT+0xce>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a54      	ldr	r2, [pc, #336]	; (800573c <HAL_DMA_Abort_IT+0x200>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d00a      	beq.n	8005604 <HAL_DMA_Abort_IT+0xc8>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a53      	ldr	r2, [pc, #332]	; (8005740 <HAL_DMA_Abort_IT+0x204>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d102      	bne.n	80055fe <HAL_DMA_Abort_IT+0xc2>
 80055f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055fc:	e01b      	b.n	8005636 <HAL_DMA_Abort_IT+0xfa>
 80055fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005602:	e018      	b.n	8005636 <HAL_DMA_Abort_IT+0xfa>
 8005604:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005608:	e015      	b.n	8005636 <HAL_DMA_Abort_IT+0xfa>
 800560a:	2310      	movs	r3, #16
 800560c:	e013      	b.n	8005636 <HAL_DMA_Abort_IT+0xfa>
 800560e:	2301      	movs	r3, #1
 8005610:	e011      	b.n	8005636 <HAL_DMA_Abort_IT+0xfa>
 8005612:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005616:	e00e      	b.n	8005636 <HAL_DMA_Abort_IT+0xfa>
 8005618:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800561c:	e00b      	b.n	8005636 <HAL_DMA_Abort_IT+0xfa>
 800561e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005622:	e008      	b.n	8005636 <HAL_DMA_Abort_IT+0xfa>
 8005624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005628:	e005      	b.n	8005636 <HAL_DMA_Abort_IT+0xfa>
 800562a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800562e:	e002      	b.n	8005636 <HAL_DMA_Abort_IT+0xfa>
 8005630:	2310      	movs	r3, #16
 8005632:	e000      	b.n	8005636 <HAL_DMA_Abort_IT+0xfa>
 8005634:	2301      	movs	r3, #1
 8005636:	4a43      	ldr	r2, [pc, #268]	; (8005744 <HAL_DMA_Abort_IT+0x208>)
 8005638:	6053      	str	r3, [r2, #4]
 800563a:	e057      	b.n	80056ec <HAL_DMA_Abort_IT+0x1b0>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a36      	ldr	r2, [pc, #216]	; (800571c <HAL_DMA_Abort_IT+0x1e0>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d04f      	beq.n	80056e6 <HAL_DMA_Abort_IT+0x1aa>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a35      	ldr	r2, [pc, #212]	; (8005720 <HAL_DMA_Abort_IT+0x1e4>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d048      	beq.n	80056e2 <HAL_DMA_Abort_IT+0x1a6>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a33      	ldr	r2, [pc, #204]	; (8005724 <HAL_DMA_Abort_IT+0x1e8>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d040      	beq.n	80056dc <HAL_DMA_Abort_IT+0x1a0>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a32      	ldr	r2, [pc, #200]	; (8005728 <HAL_DMA_Abort_IT+0x1ec>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d038      	beq.n	80056d6 <HAL_DMA_Abort_IT+0x19a>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a30      	ldr	r2, [pc, #192]	; (800572c <HAL_DMA_Abort_IT+0x1f0>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d030      	beq.n	80056d0 <HAL_DMA_Abort_IT+0x194>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a2f      	ldr	r2, [pc, #188]	; (8005730 <HAL_DMA_Abort_IT+0x1f4>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d028      	beq.n	80056ca <HAL_DMA_Abort_IT+0x18e>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a26      	ldr	r2, [pc, #152]	; (8005718 <HAL_DMA_Abort_IT+0x1dc>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d020      	beq.n	80056c4 <HAL_DMA_Abort_IT+0x188>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a2b      	ldr	r2, [pc, #172]	; (8005734 <HAL_DMA_Abort_IT+0x1f8>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d019      	beq.n	80056c0 <HAL_DMA_Abort_IT+0x184>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a29      	ldr	r2, [pc, #164]	; (8005738 <HAL_DMA_Abort_IT+0x1fc>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d012      	beq.n	80056bc <HAL_DMA_Abort_IT+0x180>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a28      	ldr	r2, [pc, #160]	; (800573c <HAL_DMA_Abort_IT+0x200>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d00a      	beq.n	80056b6 <HAL_DMA_Abort_IT+0x17a>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a26      	ldr	r2, [pc, #152]	; (8005740 <HAL_DMA_Abort_IT+0x204>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d102      	bne.n	80056b0 <HAL_DMA_Abort_IT+0x174>
 80056aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056ae:	e01b      	b.n	80056e8 <HAL_DMA_Abort_IT+0x1ac>
 80056b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80056b4:	e018      	b.n	80056e8 <HAL_DMA_Abort_IT+0x1ac>
 80056b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056ba:	e015      	b.n	80056e8 <HAL_DMA_Abort_IT+0x1ac>
 80056bc:	2310      	movs	r3, #16
 80056be:	e013      	b.n	80056e8 <HAL_DMA_Abort_IT+0x1ac>
 80056c0:	2301      	movs	r3, #1
 80056c2:	e011      	b.n	80056e8 <HAL_DMA_Abort_IT+0x1ac>
 80056c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056c8:	e00e      	b.n	80056e8 <HAL_DMA_Abort_IT+0x1ac>
 80056ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80056ce:	e00b      	b.n	80056e8 <HAL_DMA_Abort_IT+0x1ac>
 80056d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80056d4:	e008      	b.n	80056e8 <HAL_DMA_Abort_IT+0x1ac>
 80056d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056da:	e005      	b.n	80056e8 <HAL_DMA_Abort_IT+0x1ac>
 80056dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056e0:	e002      	b.n	80056e8 <HAL_DMA_Abort_IT+0x1ac>
 80056e2:	2310      	movs	r3, #16
 80056e4:	e000      	b.n	80056e8 <HAL_DMA_Abort_IT+0x1ac>
 80056e6:	2301      	movs	r3, #1
 80056e8:	4a17      	ldr	r2, [pc, #92]	; (8005748 <HAL_DMA_Abort_IT+0x20c>)
 80056ea:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005700:	2b00      	cmp	r3, #0
 8005702:	d003      	beq.n	800570c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	4798      	blx	r3
    } 
  }
  return status;
 800570c:	7bfb      	ldrb	r3, [r7, #15]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	40020080 	.word	0x40020080
 800571c:	40020008 	.word	0x40020008
 8005720:	4002001c 	.word	0x4002001c
 8005724:	40020030 	.word	0x40020030
 8005728:	40020044 	.word	0x40020044
 800572c:	40020058 	.word	0x40020058
 8005730:	4002006c 	.word	0x4002006c
 8005734:	40020408 	.word	0x40020408
 8005738:	4002041c 	.word	0x4002041c
 800573c:	40020430 	.word	0x40020430
 8005740:	40020444 	.word	0x40020444
 8005744:	40020400 	.word	0x40020400
 8005748:	40020000 	.word	0x40020000

0800574c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 800575a:	4618      	mov	r0, r3
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	bc80      	pop	{r7}
 8005762:	4770      	bx	lr

08005764 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005764:	b480      	push	{r7}
 8005766:	b08b      	sub	sp, #44	; 0x2c
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800576e:	2300      	movs	r3, #0
 8005770:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005772:	2300      	movs	r3, #0
 8005774:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005776:	e169      	b.n	8005a4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005778:	2201      	movs	r2, #1
 800577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577c:	fa02 f303 	lsl.w	r3, r2, r3
 8005780:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	69fa      	ldr	r2, [r7, #28]
 8005788:	4013      	ands	r3, r2
 800578a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	429a      	cmp	r2, r3
 8005792:	f040 8158 	bne.w	8005a46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	4a9a      	ldr	r2, [pc, #616]	; (8005a04 <HAL_GPIO_Init+0x2a0>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d05e      	beq.n	800585e <HAL_GPIO_Init+0xfa>
 80057a0:	4a98      	ldr	r2, [pc, #608]	; (8005a04 <HAL_GPIO_Init+0x2a0>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d875      	bhi.n	8005892 <HAL_GPIO_Init+0x12e>
 80057a6:	4a98      	ldr	r2, [pc, #608]	; (8005a08 <HAL_GPIO_Init+0x2a4>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d058      	beq.n	800585e <HAL_GPIO_Init+0xfa>
 80057ac:	4a96      	ldr	r2, [pc, #600]	; (8005a08 <HAL_GPIO_Init+0x2a4>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d86f      	bhi.n	8005892 <HAL_GPIO_Init+0x12e>
 80057b2:	4a96      	ldr	r2, [pc, #600]	; (8005a0c <HAL_GPIO_Init+0x2a8>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d052      	beq.n	800585e <HAL_GPIO_Init+0xfa>
 80057b8:	4a94      	ldr	r2, [pc, #592]	; (8005a0c <HAL_GPIO_Init+0x2a8>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d869      	bhi.n	8005892 <HAL_GPIO_Init+0x12e>
 80057be:	4a94      	ldr	r2, [pc, #592]	; (8005a10 <HAL_GPIO_Init+0x2ac>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d04c      	beq.n	800585e <HAL_GPIO_Init+0xfa>
 80057c4:	4a92      	ldr	r2, [pc, #584]	; (8005a10 <HAL_GPIO_Init+0x2ac>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d863      	bhi.n	8005892 <HAL_GPIO_Init+0x12e>
 80057ca:	4a92      	ldr	r2, [pc, #584]	; (8005a14 <HAL_GPIO_Init+0x2b0>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d046      	beq.n	800585e <HAL_GPIO_Init+0xfa>
 80057d0:	4a90      	ldr	r2, [pc, #576]	; (8005a14 <HAL_GPIO_Init+0x2b0>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d85d      	bhi.n	8005892 <HAL_GPIO_Init+0x12e>
 80057d6:	2b12      	cmp	r3, #18
 80057d8:	d82a      	bhi.n	8005830 <HAL_GPIO_Init+0xcc>
 80057da:	2b12      	cmp	r3, #18
 80057dc:	d859      	bhi.n	8005892 <HAL_GPIO_Init+0x12e>
 80057de:	a201      	add	r2, pc, #4	; (adr r2, 80057e4 <HAL_GPIO_Init+0x80>)
 80057e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e4:	0800585f 	.word	0x0800585f
 80057e8:	08005839 	.word	0x08005839
 80057ec:	0800584b 	.word	0x0800584b
 80057f0:	0800588d 	.word	0x0800588d
 80057f4:	08005893 	.word	0x08005893
 80057f8:	08005893 	.word	0x08005893
 80057fc:	08005893 	.word	0x08005893
 8005800:	08005893 	.word	0x08005893
 8005804:	08005893 	.word	0x08005893
 8005808:	08005893 	.word	0x08005893
 800580c:	08005893 	.word	0x08005893
 8005810:	08005893 	.word	0x08005893
 8005814:	08005893 	.word	0x08005893
 8005818:	08005893 	.word	0x08005893
 800581c:	08005893 	.word	0x08005893
 8005820:	08005893 	.word	0x08005893
 8005824:	08005893 	.word	0x08005893
 8005828:	08005841 	.word	0x08005841
 800582c:	08005855 	.word	0x08005855
 8005830:	4a79      	ldr	r2, [pc, #484]	; (8005a18 <HAL_GPIO_Init+0x2b4>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d013      	beq.n	800585e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005836:	e02c      	b.n	8005892 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	623b      	str	r3, [r7, #32]
          break;
 800583e:	e029      	b.n	8005894 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	3304      	adds	r3, #4
 8005846:	623b      	str	r3, [r7, #32]
          break;
 8005848:	e024      	b.n	8005894 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	3308      	adds	r3, #8
 8005850:	623b      	str	r3, [r7, #32]
          break;
 8005852:	e01f      	b.n	8005894 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	330c      	adds	r3, #12
 800585a:	623b      	str	r3, [r7, #32]
          break;
 800585c:	e01a      	b.n	8005894 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d102      	bne.n	800586c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005866:	2304      	movs	r3, #4
 8005868:	623b      	str	r3, [r7, #32]
          break;
 800586a:	e013      	b.n	8005894 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d105      	bne.n	8005880 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005874:	2308      	movs	r3, #8
 8005876:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	69fa      	ldr	r2, [r7, #28]
 800587c:	611a      	str	r2, [r3, #16]
          break;
 800587e:	e009      	b.n	8005894 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005880:	2308      	movs	r3, #8
 8005882:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	69fa      	ldr	r2, [r7, #28]
 8005888:	615a      	str	r2, [r3, #20]
          break;
 800588a:	e003      	b.n	8005894 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800588c:	2300      	movs	r3, #0
 800588e:	623b      	str	r3, [r7, #32]
          break;
 8005890:	e000      	b.n	8005894 <HAL_GPIO_Init+0x130>
          break;
 8005892:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	2bff      	cmp	r3, #255	; 0xff
 8005898:	d801      	bhi.n	800589e <HAL_GPIO_Init+0x13a>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	e001      	b.n	80058a2 <HAL_GPIO_Init+0x13e>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	3304      	adds	r3, #4
 80058a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	2bff      	cmp	r3, #255	; 0xff
 80058a8:	d802      	bhi.n	80058b0 <HAL_GPIO_Init+0x14c>
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	e002      	b.n	80058b6 <HAL_GPIO_Init+0x152>
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	3b08      	subs	r3, #8
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	210f      	movs	r1, #15
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	fa01 f303 	lsl.w	r3, r1, r3
 80058c4:	43db      	mvns	r3, r3
 80058c6:	401a      	ands	r2, r3
 80058c8:	6a39      	ldr	r1, [r7, #32]
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	fa01 f303 	lsl.w	r3, r1, r3
 80058d0:	431a      	orrs	r2, r3
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f000 80b1 	beq.w	8005a46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80058e4:	4b4d      	ldr	r3, [pc, #308]	; (8005a1c <HAL_GPIO_Init+0x2b8>)
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	4a4c      	ldr	r2, [pc, #304]	; (8005a1c <HAL_GPIO_Init+0x2b8>)
 80058ea:	f043 0301 	orr.w	r3, r3, #1
 80058ee:	6193      	str	r3, [r2, #24]
 80058f0:	4b4a      	ldr	r3, [pc, #296]	; (8005a1c <HAL_GPIO_Init+0x2b8>)
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	60bb      	str	r3, [r7, #8]
 80058fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80058fc:	4a48      	ldr	r2, [pc, #288]	; (8005a20 <HAL_GPIO_Init+0x2bc>)
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	089b      	lsrs	r3, r3, #2
 8005902:	3302      	adds	r3, #2
 8005904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005908:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	f003 0303 	and.w	r3, r3, #3
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	220f      	movs	r2, #15
 8005914:	fa02 f303 	lsl.w	r3, r2, r3
 8005918:	43db      	mvns	r3, r3
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	4013      	ands	r3, r2
 800591e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a40      	ldr	r2, [pc, #256]	; (8005a24 <HAL_GPIO_Init+0x2c0>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d013      	beq.n	8005950 <HAL_GPIO_Init+0x1ec>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a3f      	ldr	r2, [pc, #252]	; (8005a28 <HAL_GPIO_Init+0x2c4>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d00d      	beq.n	800594c <HAL_GPIO_Init+0x1e8>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a3e      	ldr	r2, [pc, #248]	; (8005a2c <HAL_GPIO_Init+0x2c8>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d007      	beq.n	8005948 <HAL_GPIO_Init+0x1e4>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a3d      	ldr	r2, [pc, #244]	; (8005a30 <HAL_GPIO_Init+0x2cc>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d101      	bne.n	8005944 <HAL_GPIO_Init+0x1e0>
 8005940:	2303      	movs	r3, #3
 8005942:	e006      	b.n	8005952 <HAL_GPIO_Init+0x1ee>
 8005944:	2304      	movs	r3, #4
 8005946:	e004      	b.n	8005952 <HAL_GPIO_Init+0x1ee>
 8005948:	2302      	movs	r3, #2
 800594a:	e002      	b.n	8005952 <HAL_GPIO_Init+0x1ee>
 800594c:	2301      	movs	r3, #1
 800594e:	e000      	b.n	8005952 <HAL_GPIO_Init+0x1ee>
 8005950:	2300      	movs	r3, #0
 8005952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005954:	f002 0203 	and.w	r2, r2, #3
 8005958:	0092      	lsls	r2, r2, #2
 800595a:	4093      	lsls	r3, r2
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	4313      	orrs	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005962:	492f      	ldr	r1, [pc, #188]	; (8005a20 <HAL_GPIO_Init+0x2bc>)
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	089b      	lsrs	r3, r3, #2
 8005968:	3302      	adds	r3, #2
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d006      	beq.n	800598a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800597c:	4b2d      	ldr	r3, [pc, #180]	; (8005a34 <HAL_GPIO_Init+0x2d0>)
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	492c      	ldr	r1, [pc, #176]	; (8005a34 <HAL_GPIO_Init+0x2d0>)
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	4313      	orrs	r3, r2
 8005986:	600b      	str	r3, [r1, #0]
 8005988:	e006      	b.n	8005998 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800598a:	4b2a      	ldr	r3, [pc, #168]	; (8005a34 <HAL_GPIO_Init+0x2d0>)
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	43db      	mvns	r3, r3
 8005992:	4928      	ldr	r1, [pc, #160]	; (8005a34 <HAL_GPIO_Init+0x2d0>)
 8005994:	4013      	ands	r3, r2
 8005996:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d006      	beq.n	80059b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80059a4:	4b23      	ldr	r3, [pc, #140]	; (8005a34 <HAL_GPIO_Init+0x2d0>)
 80059a6:	685a      	ldr	r2, [r3, #4]
 80059a8:	4922      	ldr	r1, [pc, #136]	; (8005a34 <HAL_GPIO_Init+0x2d0>)
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	604b      	str	r3, [r1, #4]
 80059b0:	e006      	b.n	80059c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80059b2:	4b20      	ldr	r3, [pc, #128]	; (8005a34 <HAL_GPIO_Init+0x2d0>)
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	43db      	mvns	r3, r3
 80059ba:	491e      	ldr	r1, [pc, #120]	; (8005a34 <HAL_GPIO_Init+0x2d0>)
 80059bc:	4013      	ands	r3, r2
 80059be:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d006      	beq.n	80059da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80059cc:	4b19      	ldr	r3, [pc, #100]	; (8005a34 <HAL_GPIO_Init+0x2d0>)
 80059ce:	689a      	ldr	r2, [r3, #8]
 80059d0:	4918      	ldr	r1, [pc, #96]	; (8005a34 <HAL_GPIO_Init+0x2d0>)
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	608b      	str	r3, [r1, #8]
 80059d8:	e006      	b.n	80059e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80059da:	4b16      	ldr	r3, [pc, #88]	; (8005a34 <HAL_GPIO_Init+0x2d0>)
 80059dc:	689a      	ldr	r2, [r3, #8]
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	43db      	mvns	r3, r3
 80059e2:	4914      	ldr	r1, [pc, #80]	; (8005a34 <HAL_GPIO_Init+0x2d0>)
 80059e4:	4013      	ands	r3, r2
 80059e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d021      	beq.n	8005a38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80059f4:	4b0f      	ldr	r3, [pc, #60]	; (8005a34 <HAL_GPIO_Init+0x2d0>)
 80059f6:	68da      	ldr	r2, [r3, #12]
 80059f8:	490e      	ldr	r1, [pc, #56]	; (8005a34 <HAL_GPIO_Init+0x2d0>)
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	60cb      	str	r3, [r1, #12]
 8005a00:	e021      	b.n	8005a46 <HAL_GPIO_Init+0x2e2>
 8005a02:	bf00      	nop
 8005a04:	10320000 	.word	0x10320000
 8005a08:	10310000 	.word	0x10310000
 8005a0c:	10220000 	.word	0x10220000
 8005a10:	10210000 	.word	0x10210000
 8005a14:	10120000 	.word	0x10120000
 8005a18:	10110000 	.word	0x10110000
 8005a1c:	40021000 	.word	0x40021000
 8005a20:	40010000 	.word	0x40010000
 8005a24:	40010800 	.word	0x40010800
 8005a28:	40010c00 	.word	0x40010c00
 8005a2c:	40011000 	.word	0x40011000
 8005a30:	40011400 	.word	0x40011400
 8005a34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005a38:	4b0b      	ldr	r3, [pc, #44]	; (8005a68 <HAL_GPIO_Init+0x304>)
 8005a3a:	68da      	ldr	r2, [r3, #12]
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	43db      	mvns	r3, r3
 8005a40:	4909      	ldr	r1, [pc, #36]	; (8005a68 <HAL_GPIO_Init+0x304>)
 8005a42:	4013      	ands	r3, r2
 8005a44:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a48:	3301      	adds	r3, #1
 8005a4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	fa22 f303 	lsr.w	r3, r2, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f47f ae8e 	bne.w	8005778 <HAL_GPIO_Init+0x14>
  }
}
 8005a5c:	bf00      	nop
 8005a5e:	bf00      	nop
 8005a60:	372c      	adds	r7, #44	; 0x2c
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bc80      	pop	{r7}
 8005a66:	4770      	bx	lr
 8005a68:	40010400 	.word	0x40010400

08005a6c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b089      	sub	sp, #36	; 0x24
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005a76:	2300      	movs	r3, #0
 8005a78:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8005a7a:	e09a      	b.n	8005bb2 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	fa02 f303 	lsl.w	r3, r2, r3
 8005a84:	683a      	ldr	r2, [r7, #0]
 8005a86:	4013      	ands	r3, r2
 8005a88:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 808d 	beq.w	8005bac <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8005a92:	4a4e      	ldr	r2, [pc, #312]	; (8005bcc <HAL_GPIO_DeInit+0x160>)
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	089b      	lsrs	r3, r3, #2
 8005a98:	3302      	adds	r3, #2
 8005a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a9e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	f003 0303 	and.w	r3, r3, #3
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	220f      	movs	r2, #15
 8005aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a46      	ldr	r2, [pc, #280]	; (8005bd0 <HAL_GPIO_DeInit+0x164>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d013      	beq.n	8005ae4 <HAL_GPIO_DeInit+0x78>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a45      	ldr	r2, [pc, #276]	; (8005bd4 <HAL_GPIO_DeInit+0x168>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d00d      	beq.n	8005ae0 <HAL_GPIO_DeInit+0x74>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a44      	ldr	r2, [pc, #272]	; (8005bd8 <HAL_GPIO_DeInit+0x16c>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d007      	beq.n	8005adc <HAL_GPIO_DeInit+0x70>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a43      	ldr	r2, [pc, #268]	; (8005bdc <HAL_GPIO_DeInit+0x170>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d101      	bne.n	8005ad8 <HAL_GPIO_DeInit+0x6c>
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e006      	b.n	8005ae6 <HAL_GPIO_DeInit+0x7a>
 8005ad8:	2304      	movs	r3, #4
 8005ada:	e004      	b.n	8005ae6 <HAL_GPIO_DeInit+0x7a>
 8005adc:	2302      	movs	r3, #2
 8005ade:	e002      	b.n	8005ae6 <HAL_GPIO_DeInit+0x7a>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e000      	b.n	8005ae6 <HAL_GPIO_DeInit+0x7a>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	69fa      	ldr	r2, [r7, #28]
 8005ae8:	f002 0203 	and.w	r2, r2, #3
 8005aec:	0092      	lsls	r2, r2, #2
 8005aee:	4093      	lsls	r3, r2
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d132      	bne.n	8005b5c <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	f003 0303 	and.w	r3, r3, #3
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	220f      	movs	r2, #15
 8005b00:	fa02 f303 	lsl.w	r3, r2, r3
 8005b04:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8005b06:	4a31      	ldr	r2, [pc, #196]	; (8005bcc <HAL_GPIO_DeInit+0x160>)
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	089b      	lsrs	r3, r3, #2
 8005b0c:	3302      	adds	r3, #2
 8005b0e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	43da      	mvns	r2, r3
 8005b16:	482d      	ldr	r0, [pc, #180]	; (8005bcc <HAL_GPIO_DeInit+0x160>)
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	089b      	lsrs	r3, r3, #2
 8005b1c:	400a      	ands	r2, r1
 8005b1e:	3302      	adds	r3, #2
 8005b20:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8005b24:	4b2e      	ldr	r3, [pc, #184]	; (8005be0 <HAL_GPIO_DeInit+0x174>)
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	43db      	mvns	r3, r3
 8005b2c:	492c      	ldr	r1, [pc, #176]	; (8005be0 <HAL_GPIO_DeInit+0x174>)
 8005b2e:	4013      	ands	r3, r2
 8005b30:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8005b32:	4b2b      	ldr	r3, [pc, #172]	; (8005be0 <HAL_GPIO_DeInit+0x174>)
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	43db      	mvns	r3, r3
 8005b3a:	4929      	ldr	r1, [pc, #164]	; (8005be0 <HAL_GPIO_DeInit+0x174>)
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8005b40:	4b27      	ldr	r3, [pc, #156]	; (8005be0 <HAL_GPIO_DeInit+0x174>)
 8005b42:	689a      	ldr	r2, [r3, #8]
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	43db      	mvns	r3, r3
 8005b48:	4925      	ldr	r1, [pc, #148]	; (8005be0 <HAL_GPIO_DeInit+0x174>)
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8005b4e:	4b24      	ldr	r3, [pc, #144]	; (8005be0 <HAL_GPIO_DeInit+0x174>)
 8005b50:	68da      	ldr	r2, [r3, #12]
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	43db      	mvns	r3, r3
 8005b56:	4922      	ldr	r1, [pc, #136]	; (8005be0 <HAL_GPIO_DeInit+0x174>)
 8005b58:	4013      	ands	r3, r2
 8005b5a:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	2bff      	cmp	r3, #255	; 0xff
 8005b60:	d801      	bhi.n	8005b66 <HAL_GPIO_DeInit+0xfa>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	e001      	b.n	8005b6a <HAL_GPIO_DeInit+0xfe>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	3304      	adds	r3, #4
 8005b6a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	2bff      	cmp	r3, #255	; 0xff
 8005b70:	d802      	bhi.n	8005b78 <HAL_GPIO_DeInit+0x10c>
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	e002      	b.n	8005b7e <HAL_GPIO_DeInit+0x112>
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	3b08      	subs	r3, #8
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	210f      	movs	r1, #15
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	fa01 f303 	lsl.w	r3, r1, r3
 8005b8c:	43db      	mvns	r3, r3
 8005b8e:	401a      	ands	r2, r3
 8005b90:	2104      	movs	r1, #4
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	fa01 f303 	lsl.w	r3, r1, r3
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68da      	ldr	r2, [r3, #12]
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	43db      	mvns	r3, r3
 8005ba6:	401a      	ands	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f47f af5e 	bne.w	8005a7c <HAL_GPIO_DeInit+0x10>
  }
}
 8005bc0:	bf00      	nop
 8005bc2:	bf00      	nop
 8005bc4:	3724      	adds	r7, #36	; 0x24
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bc80      	pop	{r7}
 8005bca:	4770      	bx	lr
 8005bcc:	40010000 	.word	0x40010000
 8005bd0:	40010800 	.word	0x40010800
 8005bd4:	40010c00 	.word	0x40010c00
 8005bd8:	40011000 	.word	0x40011000
 8005bdc:	40011400 	.word	0x40011400
 8005be0:	40010400 	.word	0x40010400

08005be4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	460b      	mov	r3, r1
 8005bee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689a      	ldr	r2, [r3, #8]
 8005bf4:	887b      	ldrh	r3, [r7, #2]
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d002      	beq.n	8005c02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	73fb      	strb	r3, [r7, #15]
 8005c00:	e001      	b.n	8005c06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005c02:	2300      	movs	r3, #0
 8005c04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bc80      	pop	{r7}
 8005c10:	4770      	bx	lr

08005c12 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b083      	sub	sp, #12
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	807b      	strh	r3, [r7, #2]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c22:	787b      	ldrb	r3, [r7, #1]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d003      	beq.n	8005c30 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c28:	887a      	ldrh	r2, [r7, #2]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005c2e:	e003      	b.n	8005c38 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005c30:	887b      	ldrh	r3, [r7, #2]
 8005c32:	041a      	lsls	r2, r3, #16
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	611a      	str	r2, [r3, #16]
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bc80      	pop	{r7}
 8005c40:	4770      	bx	lr

08005c42 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b085      	sub	sp, #20
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005c54:	887a      	ldrh	r2, [r7, #2]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	041a      	lsls	r2, r3, #16
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	43d9      	mvns	r1, r3
 8005c60:	887b      	ldrh	r3, [r7, #2]
 8005c62:	400b      	ands	r3, r1
 8005c64:	431a      	orrs	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	611a      	str	r2, [r3, #16]
}
 8005c6a:	bf00      	nop
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bc80      	pop	{r7}
 8005c72:	4770      	bx	lr

08005c74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d101      	bne.n	8005c86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e12b      	b.n	8005ede <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d106      	bne.n	8005ca0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f7ff f8ce 	bl	8004e3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2224      	movs	r2, #36	; 0x24
 8005ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 0201 	bic.w	r2, r2, #1
 8005cb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005cd8:	f002 fc8a 	bl	80085f0 <HAL_RCC_GetPCLK1Freq>
 8005cdc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	4a81      	ldr	r2, [pc, #516]	; (8005ee8 <HAL_I2C_Init+0x274>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d807      	bhi.n	8005cf8 <HAL_I2C_Init+0x84>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	4a80      	ldr	r2, [pc, #512]	; (8005eec <HAL_I2C_Init+0x278>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	bf94      	ite	ls
 8005cf0:	2301      	movls	r3, #1
 8005cf2:	2300      	movhi	r3, #0
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	e006      	b.n	8005d06 <HAL_I2C_Init+0x92>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4a7d      	ldr	r2, [pc, #500]	; (8005ef0 <HAL_I2C_Init+0x27c>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	bf94      	ite	ls
 8005d00:	2301      	movls	r3, #1
 8005d02:	2300      	movhi	r3, #0
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d001      	beq.n	8005d0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e0e7      	b.n	8005ede <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	4a78      	ldr	r2, [pc, #480]	; (8005ef4 <HAL_I2C_Init+0x280>)
 8005d12:	fba2 2303 	umull	r2, r3, r2, r3
 8005d16:	0c9b      	lsrs	r3, r3, #18
 8005d18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	6a1b      	ldr	r3, [r3, #32]
 8005d34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	4a6a      	ldr	r2, [pc, #424]	; (8005ee8 <HAL_I2C_Init+0x274>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d802      	bhi.n	8005d48 <HAL_I2C_Init+0xd4>
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	3301      	adds	r3, #1
 8005d46:	e009      	b.n	8005d5c <HAL_I2C_Init+0xe8>
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005d4e:	fb02 f303 	mul.w	r3, r2, r3
 8005d52:	4a69      	ldr	r2, [pc, #420]	; (8005ef8 <HAL_I2C_Init+0x284>)
 8005d54:	fba2 2303 	umull	r2, r3, r2, r3
 8005d58:	099b      	lsrs	r3, r3, #6
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	6812      	ldr	r2, [r2, #0]
 8005d60:	430b      	orrs	r3, r1
 8005d62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	69db      	ldr	r3, [r3, #28]
 8005d6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005d6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	495c      	ldr	r1, [pc, #368]	; (8005ee8 <HAL_I2C_Init+0x274>)
 8005d78:	428b      	cmp	r3, r1
 8005d7a:	d819      	bhi.n	8005db0 <HAL_I2C_Init+0x13c>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	1e59      	subs	r1, r3, #1
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	005b      	lsls	r3, r3, #1
 8005d86:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d8a:	1c59      	adds	r1, r3, #1
 8005d8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005d90:	400b      	ands	r3, r1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00a      	beq.n	8005dac <HAL_I2C_Init+0x138>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	1e59      	subs	r1, r3, #1
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	005b      	lsls	r3, r3, #1
 8005da0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005da4:	3301      	adds	r3, #1
 8005da6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005daa:	e051      	b.n	8005e50 <HAL_I2C_Init+0x1dc>
 8005dac:	2304      	movs	r3, #4
 8005dae:	e04f      	b.n	8005e50 <HAL_I2C_Init+0x1dc>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d111      	bne.n	8005ddc <HAL_I2C_Init+0x168>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	1e58      	subs	r0, r3, #1
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6859      	ldr	r1, [r3, #4]
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	005b      	lsls	r3, r3, #1
 8005dc4:	440b      	add	r3, r1
 8005dc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dca:	3301      	adds	r3, #1
 8005dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	bf0c      	ite	eq
 8005dd4:	2301      	moveq	r3, #1
 8005dd6:	2300      	movne	r3, #0
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	e012      	b.n	8005e02 <HAL_I2C_Init+0x18e>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	1e58      	subs	r0, r3, #1
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6859      	ldr	r1, [r3, #4]
 8005de4:	460b      	mov	r3, r1
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	440b      	add	r3, r1
 8005dea:	0099      	lsls	r1, r3, #2
 8005dec:	440b      	add	r3, r1
 8005dee:	fbb0 f3f3 	udiv	r3, r0, r3
 8005df2:	3301      	adds	r3, #1
 8005df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	bf0c      	ite	eq
 8005dfc:	2301      	moveq	r3, #1
 8005dfe:	2300      	movne	r3, #0
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <HAL_I2C_Init+0x196>
 8005e06:	2301      	movs	r3, #1
 8005e08:	e022      	b.n	8005e50 <HAL_I2C_Init+0x1dc>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10e      	bne.n	8005e30 <HAL_I2C_Init+0x1bc>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	1e58      	subs	r0, r3, #1
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6859      	ldr	r1, [r3, #4]
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	005b      	lsls	r3, r3, #1
 8005e1e:	440b      	add	r3, r1
 8005e20:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e24:	3301      	adds	r3, #1
 8005e26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e2e:	e00f      	b.n	8005e50 <HAL_I2C_Init+0x1dc>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	1e58      	subs	r0, r3, #1
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6859      	ldr	r1, [r3, #4]
 8005e38:	460b      	mov	r3, r1
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	440b      	add	r3, r1
 8005e3e:	0099      	lsls	r1, r3, #2
 8005e40:	440b      	add	r3, r1
 8005e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e46:	3301      	adds	r3, #1
 8005e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e50:	6879      	ldr	r1, [r7, #4]
 8005e52:	6809      	ldr	r1, [r1, #0]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	69da      	ldr	r2, [r3, #28]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	431a      	orrs	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	430a      	orrs	r2, r1
 8005e72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005e7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	6911      	ldr	r1, [r2, #16]
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	68d2      	ldr	r2, [r2, #12]
 8005e8a:	4311      	orrs	r1, r2
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	6812      	ldr	r2, [r2, #0]
 8005e90:	430b      	orrs	r3, r1
 8005e92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	695a      	ldr	r2, [r3, #20]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	430a      	orrs	r2, r1
 8005eae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f042 0201 	orr.w	r2, r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	000186a0 	.word	0x000186a0
 8005eec:	001e847f 	.word	0x001e847f
 8005ef0:	003d08ff 	.word	0x003d08ff
 8005ef4:	431bde83 	.word	0x431bde83
 8005ef8:	10624dd3 	.word	0x10624dd3

08005efc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e021      	b.n	8005f52 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2224      	movs	r2, #36	; 0x24
 8005f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f022 0201 	bic.w	r2, r2, #1
 8005f24:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7fe ffd6 	bl	8004ed8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
	...

08005f5c <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b087      	sub	sp, #28
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	607a      	str	r2, [r7, #4]
 8005f66:	461a      	mov	r2, r3
 8005f68:	460b      	mov	r3, r1
 8005f6a:	817b      	strh	r3, [r7, #10]
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005f70:	2300      	movs	r3, #0
 8005f72:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	2b20      	cmp	r3, #32
 8005f7e:	f040 8085 	bne.w	800608c <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005f82:	4b45      	ldr	r3, [pc, #276]	; (8006098 <HAL_I2C_Master_Transmit_IT+0x13c>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	08db      	lsrs	r3, r3, #3
 8005f88:	4a44      	ldr	r2, [pc, #272]	; (800609c <HAL_I2C_Master_Transmit_IT+0x140>)
 8005f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f8e:	0a1a      	lsrs	r2, r3, #8
 8005f90:	4613      	mov	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	009a      	lsls	r2, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d116      	bne.n	8005fd6 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc2:	f043 0220 	orr.w	r2, r3, #32
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e05b      	b.n	800608e <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	f003 0302 	and.w	r3, r3, #2
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d0db      	beq.n	8005f9c <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d101      	bne.n	8005ff2 <HAL_I2C_Master_Transmit_IT+0x96>
 8005fee:	2302      	movs	r3, #2
 8005ff0:	e04d      	b.n	800608e <HAL_I2C_Master_Transmit_IT+0x132>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0301 	and.w	r3, r3, #1
 8006004:	2b01      	cmp	r3, #1
 8006006:	d007      	beq.n	8006018 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f042 0201 	orr.w	r2, r2, #1
 8006016:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006026:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2221      	movs	r2, #33	; 0x21
 800602c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2210      	movs	r2, #16
 8006034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	893a      	ldrh	r2, [r7, #8]
 8006048:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800604e:	b29a      	uxth	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	4a12      	ldr	r2, [pc, #72]	; (80060a0 <HAL_I2C_Master_Transmit_IT+0x144>)
 8006058:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800605a:	897a      	ldrh	r2, [r7, #10]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006076:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006086:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006088:	2300      	movs	r3, #0
 800608a:	e000      	b.n	800608e <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 800608c:	2302      	movs	r3, #2
  }
}
 800608e:	4618      	mov	r0, r3
 8006090:	371c      	adds	r7, #28
 8006092:	46bd      	mov	sp, r7
 8006094:	bc80      	pop	{r7}
 8006096:	4770      	bx	lr
 8006098:	20000048 	.word	0x20000048
 800609c:	14f8b589 	.word	0x14f8b589
 80060a0:	ffff0000 	.word	0xffff0000

080060a4 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b087      	sub	sp, #28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	607a      	str	r2, [r7, #4]
 80060ae:	461a      	mov	r2, r3
 80060b0:	460b      	mov	r3, r1
 80060b2:	817b      	strh	r3, [r7, #10]
 80060b4:	4613      	mov	r3, r2
 80060b6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80060b8:	2300      	movs	r3, #0
 80060ba:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	2b20      	cmp	r3, #32
 80060c6:	f040 808d 	bne.w	80061e4 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80060ca:	4b49      	ldr	r3, [pc, #292]	; (80061f0 <HAL_I2C_Master_Receive_IT+0x14c>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	08db      	lsrs	r3, r3, #3
 80060d0:	4a48      	ldr	r2, [pc, #288]	; (80061f4 <HAL_I2C_Master_Receive_IT+0x150>)
 80060d2:	fba2 2303 	umull	r2, r3, r2, r3
 80060d6:	0a1a      	lsrs	r2, r3, #8
 80060d8:	4613      	mov	r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	009a      	lsls	r2, r3, #2
 80060e0:	4413      	add	r3, r2
 80060e2:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	3b01      	subs	r3, #1
 80060e8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d116      	bne.n	800611e <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2220      	movs	r2, #32
 80060fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610a:	f043 0220 	orr.w	r2, r3, #32
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e063      	b.n	80061e6 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	f003 0302 	and.w	r3, r3, #2
 8006128:	2b02      	cmp	r3, #2
 800612a:	d0db      	beq.n	80060e4 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006132:	2b01      	cmp	r3, #1
 8006134:	d101      	bne.n	800613a <HAL_I2C_Master_Receive_IT+0x96>
 8006136:	2302      	movs	r3, #2
 8006138:	e055      	b.n	80061e6 <HAL_I2C_Master_Receive_IT+0x142>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0301 	and.w	r3, r3, #1
 800614c:	2b01      	cmp	r3, #1
 800614e:	d007      	beq.n	8006160 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f042 0201 	orr.w	r2, r2, #1
 800615e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800616e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2222      	movs	r2, #34	; 0x22
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2210      	movs	r2, #16
 800617c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	893a      	ldrh	r2, [r7, #8]
 8006190:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006196:	b29a      	uxth	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4a16      	ldr	r2, [pc, #88]	; (80061f8 <HAL_I2C_Master_Receive_IT+0x154>)
 80061a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80061a2:	897a      	ldrh	r2, [r7, #10]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80061be:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061ce:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061de:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80061e0:	2300      	movs	r3, #0
 80061e2:	e000      	b.n	80061e6 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 80061e4:	2302      	movs	r3, #2
  }
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	371c      	adds	r7, #28
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bc80      	pop	{r7}
 80061ee:	4770      	bx	lr
 80061f0:	20000048 	.word	0x20000048
 80061f4:	14f8b589 	.word	0x14f8b589
 80061f8:	ffff0000 	.word	0xffff0000

080061fc <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	460b      	mov	r3, r1
 8006206:	807b      	strh	r3, [r7, #2]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800620e:	73fb      	strb	r3, [r7, #15]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(DevAddress);

  /* Abort Master transfer during Receive or Transmit process    */
  if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && (CurrentMode == HAL_I2C_MODE_MASTER))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	2b02      	cmp	r3, #2
 800621c:	d138      	bne.n	8006290 <HAL_I2C_Master_Abort_IT+0x94>
 800621e:	7bfb      	ldrb	r3, [r7, #15]
 8006220:	2b10      	cmp	r3, #16
 8006222:	d135      	bne.n	8006290 <HAL_I2C_Master_Abort_IT+0x94>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800622a:	2b01      	cmp	r3, #1
 800622c:	d101      	bne.n	8006232 <HAL_I2C_Master_Abort_IT+0x36>
 800622e:	2302      	movs	r3, #2
 8006230:	e02f      	b.n	8006292 <HAL_I2C_Master_Abort_IT+0x96>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hi2c->PreviousState = I2C_STATE_NONE;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_ABORT;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2260      	movs	r2, #96	; 0x60
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006256:	601a      	str	r2, [r3, #0]

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006266:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800627c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f001 fa92 	bl	80077b0 <I2C_ITError>

    return HAL_OK;
 800628c:	2300      	movs	r3, #0
 800628e:	e000      	b.n	8006292 <HAL_I2C_Master_Abort_IT+0x96>
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    /* Or periphal is not in busy state, mean there is no active sequence to be abort */
    return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
  }
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b088      	sub	sp, #32
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80062a2:	2300      	movs	r3, #0
 80062a4:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b2:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062ba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062c2:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80062c4:	7bfb      	ldrb	r3, [r7, #15]
 80062c6:	2b10      	cmp	r3, #16
 80062c8:	d003      	beq.n	80062d2 <HAL_I2C_EV_IRQHandler+0x38>
 80062ca:	7bfb      	ldrb	r3, [r7, #15]
 80062cc:	2b40      	cmp	r3, #64	; 0x40
 80062ce:	f040 80c1 	bne.w	8006454 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	695b      	ldr	r3, [r3, #20]
 80062e0:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10d      	bne.n	8006308 <HAL_I2C_EV_IRQHandler+0x6e>
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80062f2:	d003      	beq.n	80062fc <HAL_I2C_EV_IRQHandler+0x62>
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80062fa:	d101      	bne.n	8006300 <HAL_I2C_EV_IRQHandler+0x66>
 80062fc:	2301      	movs	r3, #1
 80062fe:	e000      	b.n	8006302 <HAL_I2C_EV_IRQHandler+0x68>
 8006300:	2300      	movs	r3, #0
 8006302:	2b01      	cmp	r3, #1
 8006304:	f000 8132 	beq.w	800656c <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00c      	beq.n	800632c <HAL_I2C_EV_IRQHandler+0x92>
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	0a5b      	lsrs	r3, r3, #9
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b00      	cmp	r3, #0
 800631c:	d006      	beq.n	800632c <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f001 fc52 	bl	8007bc8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 fd53 	bl	8006dd0 <I2C_Master_SB>
 800632a:	e092      	b.n	8006452 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	08db      	lsrs	r3, r3, #3
 8006330:	f003 0301 	and.w	r3, r3, #1
 8006334:	2b00      	cmp	r3, #0
 8006336:	d009      	beq.n	800634c <HAL_I2C_EV_IRQHandler+0xb2>
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	0a5b      	lsrs	r3, r3, #9
 800633c:	f003 0301 	and.w	r3, r3, #1
 8006340:	2b00      	cmp	r3, #0
 8006342:	d003      	beq.n	800634c <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 fdc8 	bl	8006eda <I2C_Master_ADD10>
 800634a:	e082      	b.n	8006452 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	085b      	lsrs	r3, r3, #1
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	2b00      	cmp	r3, #0
 8006356:	d009      	beq.n	800636c <HAL_I2C_EV_IRQHandler+0xd2>
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	0a5b      	lsrs	r3, r3, #9
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	2b00      	cmp	r3, #0
 8006362:	d003      	beq.n	800636c <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 fde1 	bl	8006f2c <I2C_Master_ADDR>
 800636a:	e072      	b.n	8006452 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	089b      	lsrs	r3, r3, #2
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b00      	cmp	r3, #0
 8006376:	d03b      	beq.n	80063f0 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006382:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006386:	f000 80f3 	beq.w	8006570 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	09db      	lsrs	r3, r3, #7
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00f      	beq.n	80063b6 <HAL_I2C_EV_IRQHandler+0x11c>
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	0a9b      	lsrs	r3, r3, #10
 800639a:	f003 0301 	and.w	r3, r3, #1
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d009      	beq.n	80063b6 <HAL_I2C_EV_IRQHandler+0x11c>
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	089b      	lsrs	r3, r3, #2
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d103      	bne.n	80063b6 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f9cd 	bl	800674e <I2C_MasterTransmit_TXE>
 80063b4:	e04d      	b.n	8006452 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	089b      	lsrs	r3, r3, #2
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f000 80d6 	beq.w	8006570 <HAL_I2C_EV_IRQHandler+0x2d6>
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	0a5b      	lsrs	r3, r3, #9
 80063c8:	f003 0301 	and.w	r3, r3, #1
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f000 80cf 	beq.w	8006570 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80063d2:	7bbb      	ldrb	r3, [r7, #14]
 80063d4:	2b21      	cmp	r3, #33	; 0x21
 80063d6:	d103      	bne.n	80063e0 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fa54 	bl	8006886 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80063de:	e0c7      	b.n	8006570 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80063e0:	7bfb      	ldrb	r3, [r7, #15]
 80063e2:	2b40      	cmp	r3, #64	; 0x40
 80063e4:	f040 80c4 	bne.w	8006570 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fac2 	bl	8006972 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80063ee:	e0bf      	b.n	8006570 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063fe:	f000 80b7 	beq.w	8006570 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	099b      	lsrs	r3, r3, #6
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00f      	beq.n	800642e <HAL_I2C_EV_IRQHandler+0x194>
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	0a9b      	lsrs	r3, r3, #10
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	2b00      	cmp	r3, #0
 8006418:	d009      	beq.n	800642e <HAL_I2C_EV_IRQHandler+0x194>
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	089b      	lsrs	r3, r3, #2
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	d103      	bne.n	800642e <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fb37 	bl	8006a9a <I2C_MasterReceive_RXNE>
 800642c:	e011      	b.n	8006452 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	089b      	lsrs	r3, r3, #2
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	f000 809a 	beq.w	8006570 <HAL_I2C_EV_IRQHandler+0x2d6>
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	0a5b      	lsrs	r3, r3, #9
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 8093 	beq.w	8006570 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 fbd6 	bl	8006bfc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006450:	e08e      	b.n	8006570 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006452:	e08d      	b.n	8006570 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006458:	2b00      	cmp	r3, #0
 800645a:	d004      	beq.n	8006466 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	61fb      	str	r3, [r7, #28]
 8006464:	e007      	b.n	8006476 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	085b      	lsrs	r3, r3, #1
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	2b00      	cmp	r3, #0
 8006480:	d012      	beq.n	80064a8 <HAL_I2C_EV_IRQHandler+0x20e>
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	0a5b      	lsrs	r3, r3, #9
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00c      	beq.n	80064a8 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006492:	2b00      	cmp	r3, #0
 8006494:	d003      	beq.n	800649e <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800649e:	69b9      	ldr	r1, [r7, #24]
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 ff9a 	bl	80073da <I2C_Slave_ADDR>
 80064a6:	e066      	b.n	8006576 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	091b      	lsrs	r3, r3, #4
 80064ac:	f003 0301 	and.w	r3, r3, #1
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d009      	beq.n	80064c8 <HAL_I2C_EV_IRQHandler+0x22e>
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	0a5b      	lsrs	r3, r3, #9
 80064b8:	f003 0301 	and.w	r3, r3, #1
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d003      	beq.n	80064c8 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 ffd5 	bl	8007470 <I2C_Slave_STOPF>
 80064c6:	e056      	b.n	8006576 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80064c8:	7bbb      	ldrb	r3, [r7, #14]
 80064ca:	2b21      	cmp	r3, #33	; 0x21
 80064cc:	d002      	beq.n	80064d4 <HAL_I2C_EV_IRQHandler+0x23a>
 80064ce:	7bbb      	ldrb	r3, [r7, #14]
 80064d0:	2b29      	cmp	r3, #41	; 0x29
 80064d2:	d125      	bne.n	8006520 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	09db      	lsrs	r3, r3, #7
 80064d8:	f003 0301 	and.w	r3, r3, #1
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00f      	beq.n	8006500 <HAL_I2C_EV_IRQHandler+0x266>
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	0a9b      	lsrs	r3, r3, #10
 80064e4:	f003 0301 	and.w	r3, r3, #1
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d009      	beq.n	8006500 <HAL_I2C_EV_IRQHandler+0x266>
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	089b      	lsrs	r3, r3, #2
 80064f0:	f003 0301 	and.w	r3, r3, #1
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d103      	bne.n	8006500 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 feb2 	bl	8007262 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80064fe:	e039      	b.n	8006574 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	089b      	lsrs	r3, r3, #2
 8006504:	f003 0301 	and.w	r3, r3, #1
 8006508:	2b00      	cmp	r3, #0
 800650a:	d033      	beq.n	8006574 <HAL_I2C_EV_IRQHandler+0x2da>
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	0a5b      	lsrs	r3, r3, #9
 8006510:	f003 0301 	and.w	r3, r3, #1
 8006514:	2b00      	cmp	r3, #0
 8006516:	d02d      	beq.n	8006574 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 fedf 	bl	80072dc <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800651e:	e029      	b.n	8006574 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	099b      	lsrs	r3, r3, #6
 8006524:	f003 0301 	and.w	r3, r3, #1
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00f      	beq.n	800654c <HAL_I2C_EV_IRQHandler+0x2b2>
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	0a9b      	lsrs	r3, r3, #10
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	2b00      	cmp	r3, #0
 8006536:	d009      	beq.n	800654c <HAL_I2C_EV_IRQHandler+0x2b2>
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	089b      	lsrs	r3, r3, #2
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b00      	cmp	r3, #0
 8006542:	d103      	bne.n	800654c <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 fee9 	bl	800731c <I2C_SlaveReceive_RXNE>
 800654a:	e014      	b.n	8006576 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	089b      	lsrs	r3, r3, #2
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00e      	beq.n	8006576 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	0a5b      	lsrs	r3, r3, #9
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	2b00      	cmp	r3, #0
 8006562:	d008      	beq.n	8006576 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 ff17 	bl	8007398 <I2C_SlaveReceive_BTF>
 800656a:	e004      	b.n	8006576 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800656c:	bf00      	nop
 800656e:	e002      	b.n	8006576 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006570:	bf00      	nop
 8006572:	e000      	b.n	8006576 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006574:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006576:	3720      	adds	r7, #32
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b08a      	sub	sp, #40	; 0x28
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006594:	2300      	movs	r3, #0
 8006596:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800659e:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80065a0:	6a3b      	ldr	r3, [r7, #32]
 80065a2:	0a1b      	lsrs	r3, r3, #8
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d016      	beq.n	80065da <HAL_I2C_ER_IRQHandler+0x5e>
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	0a1b      	lsrs	r3, r3, #8
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d010      	beq.n	80065da <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80065b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ba:	f043 0301 	orr.w	r3, r3, #1
 80065be:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80065c8:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065d8:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80065da:	6a3b      	ldr	r3, [r7, #32]
 80065dc:	0a5b      	lsrs	r3, r3, #9
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00e      	beq.n	8006604 <HAL_I2C_ER_IRQHandler+0x88>
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	0a1b      	lsrs	r3, r3, #8
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d008      	beq.n	8006604 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80065f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f4:	f043 0302 	orr.w	r3, r3, #2
 80065f8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006602:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006604:	6a3b      	ldr	r3, [r7, #32]
 8006606:	0a9b      	lsrs	r3, r3, #10
 8006608:	f003 0301 	and.w	r3, r3, #1
 800660c:	2b00      	cmp	r3, #0
 800660e:	d03f      	beq.n	8006690 <HAL_I2C_ER_IRQHandler+0x114>
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	0a1b      	lsrs	r3, r3, #8
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	2b00      	cmp	r3, #0
 800661a:	d039      	beq.n	8006690 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 800661c:	7efb      	ldrb	r3, [r7, #27]
 800661e:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006624:	b29b      	uxth	r3, r3
 8006626:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800662e:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006634:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006636:	7ebb      	ldrb	r3, [r7, #26]
 8006638:	2b20      	cmp	r3, #32
 800663a:	d112      	bne.n	8006662 <HAL_I2C_ER_IRQHandler+0xe6>
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10f      	bne.n	8006662 <HAL_I2C_ER_IRQHandler+0xe6>
 8006642:	7cfb      	ldrb	r3, [r7, #19]
 8006644:	2b21      	cmp	r3, #33	; 0x21
 8006646:	d008      	beq.n	800665a <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006648:	7cfb      	ldrb	r3, [r7, #19]
 800664a:	2b29      	cmp	r3, #41	; 0x29
 800664c:	d005      	beq.n	800665a <HAL_I2C_ER_IRQHandler+0xde>
 800664e:	7cfb      	ldrb	r3, [r7, #19]
 8006650:	2b28      	cmp	r3, #40	; 0x28
 8006652:	d106      	bne.n	8006662 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2b21      	cmp	r3, #33	; 0x21
 8006658:	d103      	bne.n	8006662 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f001 f838 	bl	80076d0 <I2C_Slave_AF>
 8006660:	e016      	b.n	8006690 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800666a:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666e:	f043 0304 	orr.w	r3, r3, #4
 8006672:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006674:	7efb      	ldrb	r3, [r7, #27]
 8006676:	2b10      	cmp	r3, #16
 8006678:	d002      	beq.n	8006680 <HAL_I2C_ER_IRQHandler+0x104>
 800667a:	7efb      	ldrb	r3, [r7, #27]
 800667c:	2b40      	cmp	r3, #64	; 0x40
 800667e:	d107      	bne.n	8006690 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800668e:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006690:	6a3b      	ldr	r3, [r7, #32]
 8006692:	0adb      	lsrs	r3, r3, #11
 8006694:	f003 0301 	and.w	r3, r3, #1
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00e      	beq.n	80066ba <HAL_I2C_ER_IRQHandler+0x13e>
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	0a1b      	lsrs	r3, r3, #8
 80066a0:	f003 0301 	and.w	r3, r3, #1
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d008      	beq.n	80066ba <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80066a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066aa:	f043 0308 	orr.w	r3, r3, #8
 80066ae:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80066b8:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d008      	beq.n	80066d2 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c6:	431a      	orrs	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f001 f86f 	bl	80077b0 <I2C_ITError>
  }
}
 80066d2:	bf00      	nop
 80066d4:	3728      	adds	r7, #40	; 0x28
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80066da:	b480      	push	{r7}
 80066dc:	b083      	sub	sp, #12
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80066e2:	bf00      	nop
 80066e4:	370c      	adds	r7, #12
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bc80      	pop	{r7}
 80066ea:	4770      	bx	lr

080066ec <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bc80      	pop	{r7}
 80066fc:	4770      	bx	lr

080066fe <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80066fe:	b480      	push	{r7}
 8006700:	b083      	sub	sp, #12
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
 8006706:	460b      	mov	r3, r1
 8006708:	70fb      	strb	r3, [r7, #3]
 800670a:	4613      	mov	r3, r2
 800670c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800670e:	bf00      	nop
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	bc80      	pop	{r7}
 8006716:	4770      	bx	lr

08006718 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	bc80      	pop	{r7}
 8006728:	4770      	bx	lr

0800672a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800672a:	b480      	push	{r7}
 800672c:	b083      	sub	sp, #12
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006732:	bf00      	nop
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	bc80      	pop	{r7}
 800673a:	4770      	bx	lr

0800673c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	bc80      	pop	{r7}
 800674c:	4770      	bx	lr

0800674e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b084      	sub	sp, #16
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800675c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006764:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006770:	2b00      	cmp	r3, #0
 8006772:	d150      	bne.n	8006816 <I2C_MasterTransmit_TXE+0xc8>
 8006774:	7bfb      	ldrb	r3, [r7, #15]
 8006776:	2b21      	cmp	r3, #33	; 0x21
 8006778:	d14d      	bne.n	8006816 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	2b08      	cmp	r3, #8
 800677e:	d01d      	beq.n	80067bc <I2C_MasterTransmit_TXE+0x6e>
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	2b20      	cmp	r3, #32
 8006784:	d01a      	beq.n	80067bc <I2C_MasterTransmit_TXE+0x6e>
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800678c:	d016      	beq.n	80067bc <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800679c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2211      	movs	r2, #17
 80067a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2220      	movs	r2, #32
 80067b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f7fb ffed 	bl	8002794 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80067ba:	e060      	b.n	800687e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	685a      	ldr	r2, [r3, #4]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80067ca:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067da:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2220      	movs	r2, #32
 80067e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	2b40      	cmp	r3, #64	; 0x40
 80067f4:	d107      	bne.n	8006806 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f7ff ff93 	bl	800672a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006804:	e03b      	b.n	800687e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f7fb ffc0 	bl	8002794 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006814:	e033      	b.n	800687e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006816:	7bfb      	ldrb	r3, [r7, #15]
 8006818:	2b21      	cmp	r3, #33	; 0x21
 800681a:	d005      	beq.n	8006828 <I2C_MasterTransmit_TXE+0xda>
 800681c:	7bbb      	ldrb	r3, [r7, #14]
 800681e:	2b40      	cmp	r3, #64	; 0x40
 8006820:	d12d      	bne.n	800687e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006822:	7bfb      	ldrb	r3, [r7, #15]
 8006824:	2b22      	cmp	r3, #34	; 0x22
 8006826:	d12a      	bne.n	800687e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800682c:	b29b      	uxth	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d108      	bne.n	8006844 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	685a      	ldr	r2, [r3, #4]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006840:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006842:	e01c      	b.n	800687e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800684a:	b2db      	uxtb	r3, r3
 800684c:	2b40      	cmp	r3, #64	; 0x40
 800684e:	d103      	bne.n	8006858 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 f88e 	bl	8006972 <I2C_MemoryTransmit_TXE_BTF>
}
 8006856:	e012      	b.n	800687e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685c:	781a      	ldrb	r2, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006868:	1c5a      	adds	r2, r3, #1
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006872:	b29b      	uxth	r3, r3
 8006874:	3b01      	subs	r3, #1
 8006876:	b29a      	uxth	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800687c:	e7ff      	b.n	800687e <I2C_MasterTransmit_TXE+0x130>
 800687e:	bf00      	nop
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b084      	sub	sp, #16
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006892:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b21      	cmp	r3, #33	; 0x21
 800689e:	d164      	bne.n	800696a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d012      	beq.n	80068d0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ae:	781a      	ldrb	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ba:	1c5a      	adds	r2, r3, #1
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	3b01      	subs	r3, #1
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80068ce:	e04c      	b.n	800696a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2b08      	cmp	r3, #8
 80068d4:	d01d      	beq.n	8006912 <I2C_MasterTransmit_BTF+0x8c>
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2b20      	cmp	r3, #32
 80068da:	d01a      	beq.n	8006912 <I2C_MasterTransmit_BTF+0x8c>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80068e2:	d016      	beq.n	8006912 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80068f2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2211      	movs	r2, #17
 80068f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2220      	movs	r2, #32
 8006906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7fb ff42 	bl	8002794 <HAL_I2C_MasterTxCpltCallback>
}
 8006910:	e02b      	b.n	800696a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	685a      	ldr	r2, [r3, #4]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006920:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006930:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2220      	movs	r2, #32
 800693c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b40      	cmp	r3, #64	; 0x40
 800694a:	d107      	bne.n	800695c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f7ff fee8 	bl	800672a <HAL_I2C_MemTxCpltCallback>
}
 800695a:	e006      	b.n	800696a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f7fb ff15 	bl	8002794 <HAL_I2C_MasterTxCpltCallback>
}
 800696a:	bf00      	nop
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b084      	sub	sp, #16
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006980:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006986:	2b00      	cmp	r3, #0
 8006988:	d11d      	bne.n	80069c6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800698e:	2b01      	cmp	r3, #1
 8006990:	d10b      	bne.n	80069aa <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006996:	b2da      	uxtb	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069a2:	1c9a      	adds	r2, r3, #2
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80069a8:	e073      	b.n	8006a92 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	121b      	asrs	r3, r3, #8
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069be:	1c5a      	adds	r2, r3, #1
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80069c4:	e065      	b.n	8006a92 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d10b      	bne.n	80069e6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069de:	1c5a      	adds	r2, r3, #1
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80069e4:	e055      	b.n	8006a92 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d151      	bne.n	8006a92 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80069ee:	7bfb      	ldrb	r3, [r7, #15]
 80069f0:	2b22      	cmp	r3, #34	; 0x22
 80069f2:	d10d      	bne.n	8006a10 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a02:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a08:	1c5a      	adds	r2, r3, #1
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006a0e:	e040      	b.n	8006a92 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d015      	beq.n	8006a46 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006a1a:	7bfb      	ldrb	r3, [r7, #15]
 8006a1c:	2b21      	cmp	r3, #33	; 0x21
 8006a1e:	d112      	bne.n	8006a46 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a24:	781a      	ldrb	r2, [r3, #0]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a30:	1c5a      	adds	r2, r3, #1
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006a44:	e025      	b.n	8006a92 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d120      	bne.n	8006a92 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006a50:	7bfb      	ldrb	r3, [r7, #15]
 8006a52:	2b21      	cmp	r3, #33	; 0x21
 8006a54:	d11d      	bne.n	8006a92 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a64:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a74:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2220      	movs	r2, #32
 8006a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f7ff fe4c 	bl	800672a <HAL_I2C_MemTxCpltCallback>
}
 8006a92:	bf00      	nop
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b084      	sub	sp, #16
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2b22      	cmp	r3, #34	; 0x22
 8006aac:	f040 80a2 	bne.w	8006bf4 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2b03      	cmp	r3, #3
 8006abc:	d921      	bls.n	8006b02 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	691a      	ldr	r2, [r3, #16]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac8:	b2d2      	uxtb	r2, r2
 8006aca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad0:	1c5a      	adds	r2, r3, #1
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	3b01      	subs	r3, #1
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	2b03      	cmp	r3, #3
 8006aec:	f040 8082 	bne.w	8006bf4 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685a      	ldr	r2, [r3, #4]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006afe:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8006b00:	e078      	b.n	8006bf4 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d074      	beq.n	8006bf4 <I2C_MasterReceive_RXNE+0x15a>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d002      	beq.n	8006b16 <I2C_MasterReceive_RXNE+0x7c>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d16e      	bne.n	8006bf4 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f001 f824 	bl	8007b64 <I2C_WaitOnSTOPRequestThroughIT>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d142      	bne.n	8006ba8 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b30:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b40:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	691a      	ldr	r2, [r3, #16]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4c:	b2d2      	uxtb	r2, r2
 8006b4e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b54:	1c5a      	adds	r2, r3, #1
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	3b01      	subs	r3, #1
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	2b40      	cmp	r3, #64	; 0x40
 8006b7a:	d10a      	bne.n	8006b92 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f7ff fdd6 	bl	800673c <HAL_I2C_MemRxCpltCallback>
}
 8006b90:	e030      	b.n	8006bf4 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2212      	movs	r2, #18
 8006b9e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f7fb fe07 	bl	80027b4 <HAL_I2C_MasterRxCpltCallback>
}
 8006ba6:	e025      	b.n	8006bf4 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	685a      	ldr	r2, [r3, #4]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006bb6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	691a      	ldr	r2, [r3, #16]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	b2d2      	uxtb	r2, r2
 8006bc4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bca:	1c5a      	adds	r2, r3, #1
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2220      	movs	r2, #32
 8006be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7fb fdf0 	bl	80027d4 <HAL_I2C_ErrorCallback>
}
 8006bf4:	bf00      	nop
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c08:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	2b04      	cmp	r3, #4
 8006c12:	d11b      	bne.n	8006c4c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	685a      	ldr	r2, [r3, #4]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c22:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	691a      	ldr	r2, [r3, #16]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2e:	b2d2      	uxtb	r2, r2
 8006c30:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c36:	1c5a      	adds	r2, r3, #1
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	3b01      	subs	r3, #1
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006c4a:	e0bd      	b.n	8006dc8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	2b03      	cmp	r3, #3
 8006c54:	d129      	bne.n	8006caa <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c64:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2b04      	cmp	r3, #4
 8006c6a:	d00a      	beq.n	8006c82 <I2C_MasterReceive_BTF+0x86>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d007      	beq.n	8006c82 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c80:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	691a      	ldr	r2, [r3, #16]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8c:	b2d2      	uxtb	r2, r2
 8006c8e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c94:	1c5a      	adds	r2, r3, #1
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006ca8:	e08e      	b.n	8006dc8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d176      	bne.n	8006da2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d002      	beq.n	8006cc0 <I2C_MasterReceive_BTF+0xc4>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2b10      	cmp	r3, #16
 8006cbe:	d108      	bne.n	8006cd2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cce:	601a      	str	r2, [r3, #0]
 8006cd0:	e019      	b.n	8006d06 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2b04      	cmp	r3, #4
 8006cd6:	d002      	beq.n	8006cde <I2C_MasterReceive_BTF+0xe2>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d108      	bne.n	8006cf0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	e00a      	b.n	8006d06 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2b10      	cmp	r3, #16
 8006cf4:	d007      	beq.n	8006d06 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d04:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	691a      	ldr	r2, [r3, #16]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d10:	b2d2      	uxtb	r2, r2
 8006d12:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d18:	1c5a      	adds	r2, r3, #1
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	3b01      	subs	r3, #1
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	691a      	ldr	r2, [r3, #16]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d36:	b2d2      	uxtb	r2, r2
 8006d38:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3e:	1c5a      	adds	r2, r3, #1
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	685a      	ldr	r2, [r3, #4]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006d60:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2220      	movs	r2, #32
 8006d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b40      	cmp	r3, #64	; 0x40
 8006d74:	d10a      	bne.n	8006d8c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f7ff fcd9 	bl	800673c <HAL_I2C_MemRxCpltCallback>
}
 8006d8a:	e01d      	b.n	8006dc8 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2212      	movs	r2, #18
 8006d98:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7fb fd0a 	bl	80027b4 <HAL_I2C_MasterRxCpltCallback>
}
 8006da0:	e012      	b.n	8006dc8 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	691a      	ldr	r2, [r3, #16]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dac:	b2d2      	uxtb	r2, r2
 8006dae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db4:	1c5a      	adds	r2, r3, #1
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006dc8:	bf00      	nop
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b40      	cmp	r3, #64	; 0x40
 8006de2:	d117      	bne.n	8006e14 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d109      	bne.n	8006e00 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	461a      	mov	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006dfc:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006dfe:	e067      	b.n	8006ed0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	f043 0301 	orr.w	r3, r3, #1
 8006e0a:	b2da      	uxtb	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	611a      	str	r2, [r3, #16]
}
 8006e12:	e05d      	b.n	8006ed0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e1c:	d133      	bne.n	8006e86 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b21      	cmp	r3, #33	; 0x21
 8006e28:	d109      	bne.n	8006e3e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	461a      	mov	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006e3a:	611a      	str	r2, [r3, #16]
 8006e3c:	e008      	b.n	8006e50 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	f043 0301 	orr.w	r3, r3, #1
 8006e48:	b2da      	uxtb	r2, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d004      	beq.n	8006e62 <I2C_Master_SB+0x92>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d108      	bne.n	8006e74 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d032      	beq.n	8006ed0 <I2C_Master_SB+0x100>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d02d      	beq.n	8006ed0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685a      	ldr	r2, [r3, #4]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e82:	605a      	str	r2, [r3, #4]
}
 8006e84:	e024      	b.n	8006ed0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10e      	bne.n	8006eac <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	11db      	asrs	r3, r3, #7
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	f003 0306 	and.w	r3, r3, #6
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	f063 030f 	orn	r3, r3, #15
 8006ea2:	b2da      	uxtb	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	611a      	str	r2, [r3, #16]
}
 8006eaa:	e011      	b.n	8006ed0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d10d      	bne.n	8006ed0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	11db      	asrs	r3, r3, #7
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	f003 0306 	and.w	r3, r3, #6
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	f063 030e 	orn	r3, r3, #14
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	611a      	str	r2, [r3, #16]
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bc80      	pop	{r7}
 8006ed8:	4770      	bx	lr

08006eda <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006eda:	b480      	push	{r7}
 8006edc:	b083      	sub	sp, #12
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ee6:	b2da      	uxtb	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d004      	beq.n	8006f00 <I2C_Master_ADD10+0x26>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d108      	bne.n	8006f12 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00c      	beq.n	8006f22 <I2C_Master_ADD10+0x48>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d007      	beq.n	8006f22 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	685a      	ldr	r2, [r3, #4]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f20:	605a      	str	r2, [r3, #4]
  }
}
 8006f22:	bf00      	nop
 8006f24:	370c      	adds	r7, #12
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bc80      	pop	{r7}
 8006f2a:	4770      	bx	lr

08006f2c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b091      	sub	sp, #68	; 0x44
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f42:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f48:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b22      	cmp	r3, #34	; 0x22
 8006f54:	f040 8174 	bne.w	8007240 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d10f      	bne.n	8006f80 <I2C_Master_ADDR+0x54>
 8006f60:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006f64:	2b40      	cmp	r3, #64	; 0x40
 8006f66:	d10b      	bne.n	8006f80 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f68:	2300      	movs	r3, #0
 8006f6a:	633b      	str	r3, [r7, #48]	; 0x30
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	695b      	ldr	r3, [r3, #20]
 8006f72:	633b      	str	r3, [r7, #48]	; 0x30
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	633b      	str	r3, [r7, #48]	; 0x30
 8006f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7e:	e16b      	b.n	8007258 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d11d      	bne.n	8006fc4 <I2C_Master_ADDR+0x98>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f90:	d118      	bne.n	8006fc4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f92:	2300      	movs	r3, #0
 8006f94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	695b      	ldr	r3, [r3, #20]
 8006f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fb6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fbc:	1c5a      	adds	r2, r3, #1
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	651a      	str	r2, [r3, #80]	; 0x50
 8006fc2:	e149      	b.n	8007258 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d113      	bne.n	8006ff6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fce:	2300      	movs	r3, #0
 8006fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	695b      	ldr	r3, [r3, #20]
 8006fd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ff2:	601a      	str	r2, [r3, #0]
 8006ff4:	e120      	b.n	8007238 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	f040 808a 	bne.w	8007116 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007004:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007008:	d137      	bne.n	800707a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007018:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007024:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007028:	d113      	bne.n	8007052 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007038:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800703a:	2300      	movs	r3, #0
 800703c:	627b      	str	r3, [r7, #36]	; 0x24
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	695b      	ldr	r3, [r3, #20]
 8007044:	627b      	str	r3, [r7, #36]	; 0x24
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	699b      	ldr	r3, [r3, #24]
 800704c:	627b      	str	r3, [r7, #36]	; 0x24
 800704e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007050:	e0f2      	b.n	8007238 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007052:	2300      	movs	r3, #0
 8007054:	623b      	str	r3, [r7, #32]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	695b      	ldr	r3, [r3, #20]
 800705c:	623b      	str	r3, [r7, #32]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	623b      	str	r3, [r7, #32]
 8007066:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007076:	601a      	str	r2, [r3, #0]
 8007078:	e0de      	b.n	8007238 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800707a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707c:	2b08      	cmp	r3, #8
 800707e:	d02e      	beq.n	80070de <I2C_Master_ADDR+0x1b2>
 8007080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007082:	2b20      	cmp	r3, #32
 8007084:	d02b      	beq.n	80070de <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007088:	2b12      	cmp	r3, #18
 800708a:	d102      	bne.n	8007092 <I2C_Master_ADDR+0x166>
 800708c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708e:	2b01      	cmp	r3, #1
 8007090:	d125      	bne.n	80070de <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007094:	2b04      	cmp	r3, #4
 8007096:	d00e      	beq.n	80070b6 <I2C_Master_ADDR+0x18a>
 8007098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709a:	2b02      	cmp	r3, #2
 800709c:	d00b      	beq.n	80070b6 <I2C_Master_ADDR+0x18a>
 800709e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a0:	2b10      	cmp	r3, #16
 80070a2:	d008      	beq.n	80070b6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070b2:	601a      	str	r2, [r3, #0]
 80070b4:	e007      	b.n	80070c6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80070c4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070c6:	2300      	movs	r3, #0
 80070c8:	61fb      	str	r3, [r7, #28]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	695b      	ldr	r3, [r3, #20]
 80070d0:	61fb      	str	r3, [r7, #28]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	61fb      	str	r3, [r7, #28]
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	e0ac      	b.n	8007238 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070ec:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070ee:	2300      	movs	r3, #0
 80070f0:	61bb      	str	r3, [r7, #24]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	695b      	ldr	r3, [r3, #20]
 80070f8:	61bb      	str	r3, [r7, #24]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	699b      	ldr	r3, [r3, #24]
 8007100:	61bb      	str	r3, [r7, #24]
 8007102:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007112:	601a      	str	r2, [r3, #0]
 8007114:	e090      	b.n	8007238 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800711a:	b29b      	uxth	r3, r3
 800711c:	2b02      	cmp	r3, #2
 800711e:	d158      	bne.n	80071d2 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007122:	2b04      	cmp	r3, #4
 8007124:	d021      	beq.n	800716a <I2C_Master_ADDR+0x23e>
 8007126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007128:	2b02      	cmp	r3, #2
 800712a:	d01e      	beq.n	800716a <I2C_Master_ADDR+0x23e>
 800712c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712e:	2b10      	cmp	r3, #16
 8007130:	d01b      	beq.n	800716a <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007140:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007142:	2300      	movs	r3, #0
 8007144:	617b      	str	r3, [r7, #20]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	695b      	ldr	r3, [r3, #20]
 800714c:	617b      	str	r3, [r7, #20]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	617b      	str	r3, [r7, #20]
 8007156:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	e012      	b.n	8007190 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007178:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800717a:	2300      	movs	r3, #0
 800717c:	613b      	str	r3, [r7, #16]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	613b      	str	r3, [r7, #16]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	699b      	ldr	r3, [r3, #24]
 800718c:	613b      	str	r3, [r7, #16]
 800718e:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800719a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800719e:	d14b      	bne.n	8007238 <I2C_Master_ADDR+0x30c>
 80071a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80071a6:	d00b      	beq.n	80071c0 <I2C_Master_ADDR+0x294>
 80071a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d008      	beq.n	80071c0 <I2C_Master_ADDR+0x294>
 80071ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b0:	2b08      	cmp	r3, #8
 80071b2:	d005      	beq.n	80071c0 <I2C_Master_ADDR+0x294>
 80071b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b6:	2b10      	cmp	r3, #16
 80071b8:	d002      	beq.n	80071c0 <I2C_Master_ADDR+0x294>
 80071ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071bc:	2b20      	cmp	r3, #32
 80071be:	d13b      	bne.n	8007238 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	685a      	ldr	r2, [r3, #4]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80071ce:	605a      	str	r2, [r3, #4]
 80071d0:	e032      	b.n	8007238 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071e0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071f0:	d117      	bne.n	8007222 <I2C_Master_ADDR+0x2f6>
 80071f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80071f8:	d00b      	beq.n	8007212 <I2C_Master_ADDR+0x2e6>
 80071fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d008      	beq.n	8007212 <I2C_Master_ADDR+0x2e6>
 8007200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007202:	2b08      	cmp	r3, #8
 8007204:	d005      	beq.n	8007212 <I2C_Master_ADDR+0x2e6>
 8007206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007208:	2b10      	cmp	r3, #16
 800720a:	d002      	beq.n	8007212 <I2C_Master_ADDR+0x2e6>
 800720c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720e:	2b20      	cmp	r3, #32
 8007210:	d107      	bne.n	8007222 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	685a      	ldr	r2, [r3, #4]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007220:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007222:	2300      	movs	r3, #0
 8007224:	60fb      	str	r3, [r7, #12]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	695b      	ldr	r3, [r3, #20]
 800722c:	60fb      	str	r3, [r7, #12]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	699b      	ldr	r3, [r3, #24]
 8007234:	60fb      	str	r3, [r7, #12]
 8007236:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800723e:	e00b      	b.n	8007258 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007240:	2300      	movs	r3, #0
 8007242:	60bb      	str	r3, [r7, #8]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	60bb      	str	r3, [r7, #8]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	60bb      	str	r3, [r7, #8]
 8007254:	68bb      	ldr	r3, [r7, #8]
}
 8007256:	e7ff      	b.n	8007258 <I2C_Master_ADDR+0x32c>
 8007258:	bf00      	nop
 800725a:	3744      	adds	r7, #68	; 0x44
 800725c:	46bd      	mov	sp, r7
 800725e:	bc80      	pop	{r7}
 8007260:	4770      	bx	lr

08007262 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b084      	sub	sp, #16
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007270:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007276:	b29b      	uxth	r3, r3
 8007278:	2b00      	cmp	r3, #0
 800727a:	d02b      	beq.n	80072d4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007280:	781a      	ldrb	r2, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728c:	1c5a      	adds	r2, r3, #1
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007296:	b29b      	uxth	r3, r3
 8007298:	3b01      	subs	r3, #1
 800729a:	b29a      	uxth	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d114      	bne.n	80072d4 <I2C_SlaveTransmit_TXE+0x72>
 80072aa:	7bfb      	ldrb	r3, [r7, #15]
 80072ac:	2b29      	cmp	r3, #41	; 0x29
 80072ae:	d111      	bne.n	80072d4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	685a      	ldr	r2, [r3, #4]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072be:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2221      	movs	r2, #33	; 0x21
 80072c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2228      	movs	r2, #40	; 0x28
 80072ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f7ff fa03 	bl	80066da <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80072d4:	bf00      	nop
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d011      	beq.n	8007312 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f2:	781a      	ldrb	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fe:	1c5a      	adds	r2, r3, #1
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007308:	b29b      	uxth	r3, r3
 800730a:	3b01      	subs	r3, #1
 800730c:	b29a      	uxth	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007312:	bf00      	nop
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	bc80      	pop	{r7}
 800731a:	4770      	bx	lr

0800731c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800732a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007330:	b29b      	uxth	r3, r3
 8007332:	2b00      	cmp	r3, #0
 8007334:	d02c      	beq.n	8007390 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	691a      	ldr	r2, [r3, #16]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007340:	b2d2      	uxtb	r2, r2
 8007342:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007348:	1c5a      	adds	r2, r3, #1
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007352:	b29b      	uxth	r3, r3
 8007354:	3b01      	subs	r3, #1
 8007356:	b29a      	uxth	r2, r3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007360:	b29b      	uxth	r3, r3
 8007362:	2b00      	cmp	r3, #0
 8007364:	d114      	bne.n	8007390 <I2C_SlaveReceive_RXNE+0x74>
 8007366:	7bfb      	ldrb	r3, [r7, #15]
 8007368:	2b2a      	cmp	r3, #42	; 0x2a
 800736a:	d111      	bne.n	8007390 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	685a      	ldr	r2, [r3, #4]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800737a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2222      	movs	r2, #34	; 0x22
 8007380:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2228      	movs	r2, #40	; 0x28
 8007386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7ff f9ae 	bl	80066ec <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007390:	bf00      	nop
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d012      	beq.n	80073d0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	691a      	ldr	r2, [r3, #16]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b4:	b2d2      	uxtb	r2, r2
 80073b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073bc:	1c5a      	adds	r2, r3, #1
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	3b01      	subs	r3, #1
 80073ca:	b29a      	uxth	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bc80      	pop	{r7}
 80073d8:	4770      	bx	lr

080073da <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b084      	sub	sp, #16
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
 80073e2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80073e4:	2300      	movs	r3, #0
 80073e6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80073f4:	2b28      	cmp	r3, #40	; 0x28
 80073f6:	d127      	bne.n	8007448 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	685a      	ldr	r2, [r3, #4]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007406:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	089b      	lsrs	r3, r3, #2
 800740c:	f003 0301 	and.w	r3, r3, #1
 8007410:	2b00      	cmp	r3, #0
 8007412:	d101      	bne.n	8007418 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007414:	2301      	movs	r3, #1
 8007416:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	09db      	lsrs	r3, r3, #7
 800741c:	f003 0301 	and.w	r3, r3, #1
 8007420:	2b00      	cmp	r3, #0
 8007422:	d103      	bne.n	800742c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	81bb      	strh	r3, [r7, #12]
 800742a:	e002      	b.n	8007432 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800743a:	89ba      	ldrh	r2, [r7, #12]
 800743c:	7bfb      	ldrb	r3, [r7, #15]
 800743e:	4619      	mov	r1, r3
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f7ff f95c 	bl	80066fe <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007446:	e00e      	b.n	8007466 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007448:	2300      	movs	r3, #0
 800744a:	60bb      	str	r3, [r7, #8]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	60bb      	str	r3, [r7, #8]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	60bb      	str	r3, [r7, #8]
 800745c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007466:	bf00      	nop
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
	...

08007470 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800747e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	685a      	ldr	r2, [r3, #4]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800748e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007490:	2300      	movs	r3, #0
 8007492:	60bb      	str	r3, [r7, #8]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	60bb      	str	r3, [r7, #8]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f042 0201 	orr.w	r2, r2, #1
 80074aa:	601a      	str	r2, [r3, #0]
 80074ac:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074bc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074cc:	d172      	bne.n	80075b4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80074ce:	7bfb      	ldrb	r3, [r7, #15]
 80074d0:	2b22      	cmp	r3, #34	; 0x22
 80074d2:	d002      	beq.n	80074da <I2C_Slave_STOPF+0x6a>
 80074d4:	7bfb      	ldrb	r3, [r7, #15]
 80074d6:	2b2a      	cmp	r3, #42	; 0x2a
 80074d8:	d135      	bne.n	8007546 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d005      	beq.n	80074fe <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f6:	f043 0204 	orr.w	r2, r3, #4
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800750c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007512:	4618      	mov	r0, r3
 8007514:	f7fe f91a 	bl	800574c <HAL_DMA_GetState>
 8007518:	4603      	mov	r3, r0
 800751a:	2b01      	cmp	r3, #1
 800751c:	d049      	beq.n	80075b2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007522:	4a69      	ldr	r2, [pc, #420]	; (80076c8 <I2C_Slave_STOPF+0x258>)
 8007524:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752a:	4618      	mov	r0, r3
 800752c:	f7fe f806 	bl	800553c <HAL_DMA_Abort_IT>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d03d      	beq.n	80075b2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007540:	4610      	mov	r0, r2
 8007542:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007544:	e035      	b.n	80075b2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	b29a      	uxth	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007558:	b29b      	uxth	r3, r3
 800755a:	2b00      	cmp	r3, #0
 800755c:	d005      	beq.n	800756a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007562:	f043 0204 	orr.w	r2, r3, #4
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	685a      	ldr	r2, [r3, #4]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007578:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800757e:	4618      	mov	r0, r3
 8007580:	f7fe f8e4 	bl	800574c <HAL_DMA_GetState>
 8007584:	4603      	mov	r3, r0
 8007586:	2b01      	cmp	r3, #1
 8007588:	d014      	beq.n	80075b4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800758e:	4a4e      	ldr	r2, [pc, #312]	; (80076c8 <I2C_Slave_STOPF+0x258>)
 8007590:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007596:	4618      	mov	r0, r3
 8007598:	f7fd ffd0 	bl	800553c <HAL_DMA_Abort_IT>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d008      	beq.n	80075b4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80075ac:	4610      	mov	r0, r2
 80075ae:	4798      	blx	r3
 80075b0:	e000      	b.n	80075b4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80075b2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d03e      	beq.n	800763c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	695b      	ldr	r3, [r3, #20]
 80075c4:	f003 0304 	and.w	r3, r3, #4
 80075c8:	2b04      	cmp	r3, #4
 80075ca:	d112      	bne.n	80075f2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	691a      	ldr	r2, [r3, #16]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d6:	b2d2      	uxtb	r2, r2
 80075d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075de:	1c5a      	adds	r2, r3, #1
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	3b01      	subs	r3, #1
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	695b      	ldr	r3, [r3, #20]
 80075f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075fc:	2b40      	cmp	r3, #64	; 0x40
 80075fe:	d112      	bne.n	8007626 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	691a      	ldr	r2, [r3, #16]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760a:	b2d2      	uxtb	r2, r2
 800760c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007612:	1c5a      	adds	r2, r3, #1
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800761c:	b29b      	uxth	r3, r3
 800761e:	3b01      	subs	r3, #1
 8007620:	b29a      	uxth	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800762a:	b29b      	uxth	r3, r3
 800762c:	2b00      	cmp	r3, #0
 800762e:	d005      	beq.n	800763c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007634:	f043 0204 	orr.w	r2, r3, #4
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007640:	2b00      	cmp	r3, #0
 8007642:	d003      	beq.n	800764c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f8b3 	bl	80077b0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800764a:	e039      	b.n	80076c0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800764c:	7bfb      	ldrb	r3, [r7, #15]
 800764e:	2b2a      	cmp	r3, #42	; 0x2a
 8007650:	d109      	bne.n	8007666 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2228      	movs	r2, #40	; 0x28
 800765c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f7ff f843 	bl	80066ec <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800766c:	b2db      	uxtb	r3, r3
 800766e:	2b28      	cmp	r3, #40	; 0x28
 8007670:	d111      	bne.n	8007696 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a15      	ldr	r2, [pc, #84]	; (80076cc <I2C_Slave_STOPF+0x25c>)
 8007676:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2220      	movs	r2, #32
 8007682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f7ff f842 	bl	8006718 <HAL_I2C_ListenCpltCallback>
}
 8007694:	e014      	b.n	80076c0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769a:	2b22      	cmp	r3, #34	; 0x22
 800769c:	d002      	beq.n	80076a4 <I2C_Slave_STOPF+0x234>
 800769e:	7bfb      	ldrb	r3, [r7, #15]
 80076a0:	2b22      	cmp	r3, #34	; 0x22
 80076a2:	d10d      	bne.n	80076c0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2220      	movs	r2, #32
 80076ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f7ff f816 	bl	80066ec <HAL_I2C_SlaveRxCpltCallback>
}
 80076c0:	bf00      	nop
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	08007a15 	.word	0x08007a15
 80076cc:	ffff0000 	.word	0xffff0000

080076d0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076de:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	2b08      	cmp	r3, #8
 80076ea:	d002      	beq.n	80076f2 <I2C_Slave_AF+0x22>
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	2b20      	cmp	r3, #32
 80076f0:	d129      	bne.n	8007746 <I2C_Slave_AF+0x76>
 80076f2:	7bfb      	ldrb	r3, [r7, #15]
 80076f4:	2b28      	cmp	r3, #40	; 0x28
 80076f6:	d126      	bne.n	8007746 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a2c      	ldr	r2, [pc, #176]	; (80077ac <I2C_Slave_AF+0xdc>)
 80076fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	685a      	ldr	r2, [r3, #4]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800770c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007716:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007726:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2220      	movs	r2, #32
 8007732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f7fe ffea 	bl	8006718 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007744:	e02e      	b.n	80077a4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007746:	7bfb      	ldrb	r3, [r7, #15]
 8007748:	2b21      	cmp	r3, #33	; 0x21
 800774a:	d126      	bne.n	800779a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	4a17      	ldr	r2, [pc, #92]	; (80077ac <I2C_Slave_AF+0xdc>)
 8007750:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2221      	movs	r2, #33	; 0x21
 8007756:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2220      	movs	r2, #32
 800775c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	685a      	ldr	r2, [r3, #4]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007776:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007780:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007790:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f7fe ffa1 	bl	80066da <HAL_I2C_SlaveTxCpltCallback>
}
 8007798:	e004      	b.n	80077a4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80077a2:	615a      	str	r2, [r3, #20]
}
 80077a4:	bf00      	nop
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	ffff0000 	.word	0xffff0000

080077b0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077be:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077c6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80077c8:	7bbb      	ldrb	r3, [r7, #14]
 80077ca:	2b10      	cmp	r3, #16
 80077cc:	d002      	beq.n	80077d4 <I2C_ITError+0x24>
 80077ce:	7bbb      	ldrb	r3, [r7, #14]
 80077d0:	2b40      	cmp	r3, #64	; 0x40
 80077d2:	d10a      	bne.n	80077ea <I2C_ITError+0x3a>
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
 80077d6:	2b22      	cmp	r3, #34	; 0x22
 80077d8:	d107      	bne.n	80077ea <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077e8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80077ea:	7bfb      	ldrb	r3, [r7, #15]
 80077ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80077f0:	2b28      	cmp	r3, #40	; 0x28
 80077f2:	d107      	bne.n	8007804 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2228      	movs	r2, #40	; 0x28
 80077fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007802:	e015      	b.n	8007830 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800780e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007812:	d00a      	beq.n	800782a <I2C_ITError+0x7a>
 8007814:	7bfb      	ldrb	r3, [r7, #15]
 8007816:	2b60      	cmp	r3, #96	; 0x60
 8007818:	d007      	beq.n	800782a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2220      	movs	r2, #32
 800781e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800783a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800783e:	d161      	bne.n	8007904 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	685a      	ldr	r2, [r3, #4]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800784e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007854:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007858:	2b01      	cmp	r3, #1
 800785a:	d020      	beq.n	800789e <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007860:	4a6a      	ldr	r2, [pc, #424]	; (8007a0c <I2C_ITError+0x25c>)
 8007862:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007868:	4618      	mov	r0, r3
 800786a:	f7fd fe67 	bl	800553c <HAL_DMA_Abort_IT>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	f000 8089 	beq.w	8007988 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f022 0201 	bic.w	r2, r2, #1
 8007884:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2220      	movs	r2, #32
 800788a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007898:	4610      	mov	r0, r2
 800789a:	4798      	blx	r3
 800789c:	e074      	b.n	8007988 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a2:	4a5a      	ldr	r2, [pc, #360]	; (8007a0c <I2C_ITError+0x25c>)
 80078a4:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fd fe46 	bl	800553c <HAL_DMA_Abort_IT>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d068      	beq.n	8007988 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	695b      	ldr	r3, [r3, #20]
 80078bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078c0:	2b40      	cmp	r3, #64	; 0x40
 80078c2:	d10b      	bne.n	80078dc <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	691a      	ldr	r2, [r3, #16]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ce:	b2d2      	uxtb	r2, r2
 80078d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d6:	1c5a      	adds	r2, r3, #1
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f022 0201 	bic.w	r2, r2, #1
 80078ea:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2220      	movs	r2, #32
 80078f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80078fe:	4610      	mov	r0, r2
 8007900:	4798      	blx	r3
 8007902:	e041      	b.n	8007988 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800790a:	b2db      	uxtb	r3, r3
 800790c:	2b60      	cmp	r3, #96	; 0x60
 800790e:	d125      	bne.n	800795c <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2220      	movs	r2, #32
 8007914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	695b      	ldr	r3, [r3, #20]
 8007924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007928:	2b40      	cmp	r3, #64	; 0x40
 800792a:	d10b      	bne.n	8007944 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	691a      	ldr	r2, [r3, #16]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007936:	b2d2      	uxtb	r2, r2
 8007938:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793e:	1c5a      	adds	r2, r3, #1
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f022 0201 	bic.w	r2, r2, #1
 8007952:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f7fa ff49 	bl	80027ec <HAL_I2C_AbortCpltCallback>
 800795a:	e015      	b.n	8007988 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	695b      	ldr	r3, [r3, #20]
 8007962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007966:	2b40      	cmp	r3, #64	; 0x40
 8007968:	d10b      	bne.n	8007982 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	691a      	ldr	r2, [r3, #16]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007974:	b2d2      	uxtb	r2, r2
 8007976:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797c:	1c5a      	adds	r2, r3, #1
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f7fa ff26 	bl	80027d4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798c:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	f003 0301 	and.w	r3, r3, #1
 8007994:	2b00      	cmp	r3, #0
 8007996:	d10e      	bne.n	80079b6 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d109      	bne.n	80079b6 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d104      	bne.n	80079b6 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d007      	beq.n	80079c6 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	685a      	ldr	r2, [r3, #4]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80079c4:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079cc:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d2:	f003 0304 	and.w	r3, r3, #4
 80079d6:	2b04      	cmp	r3, #4
 80079d8:	d113      	bne.n	8007a02 <I2C_ITError+0x252>
 80079da:	7bfb      	ldrb	r3, [r7, #15]
 80079dc:	2b28      	cmp	r3, #40	; 0x28
 80079de:	d110      	bne.n	8007a02 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a0b      	ldr	r2, [pc, #44]	; (8007a10 <I2C_ITError+0x260>)
 80079e4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2220      	movs	r2, #32
 80079f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f7fe fe8b 	bl	8006718 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007a02:	bf00      	nop
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	08007a15 	.word	0x08007a15
 8007a10:	ffff0000 	.word	0xffff0000

08007a14 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b086      	sub	sp, #24
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a24:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a2c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007a2e:	4b4b      	ldr	r3, [pc, #300]	; (8007b5c <I2C_DMAAbort+0x148>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	08db      	lsrs	r3, r3, #3
 8007a34:	4a4a      	ldr	r2, [pc, #296]	; (8007b60 <I2C_DMAAbort+0x14c>)
 8007a36:	fba2 2303 	umull	r2, r3, r2, r3
 8007a3a:	0a1a      	lsrs	r2, r3, #8
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	4413      	add	r3, r2
 8007a42:	00da      	lsls	r2, r3, #3
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d106      	bne.n	8007a5c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a52:	f043 0220 	orr.w	r2, r3, #32
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007a5a:	e00a      	b.n	8007a72 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a70:	d0ea      	beq.n	8007a48 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d003      	beq.n	8007a82 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a7e:	2200      	movs	r2, #0
 8007a80:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d003      	beq.n	8007a92 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8e:	2200      	movs	r2, #0
 8007a90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007aa0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d003      	beq.n	8007ab8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d003      	beq.n	8007ac8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f022 0201 	bic.w	r2, r2, #1
 8007ad6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	2b60      	cmp	r3, #96	; 0x60
 8007ae2:	d10e      	bne.n	8007b02 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	2220      	movs	r2, #32
 8007ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	2200      	movs	r2, #0
 8007af8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007afa:	6978      	ldr	r0, [r7, #20]
 8007afc:	f7fa fe76 	bl	80027ec <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007b00:	e027      	b.n	8007b52 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007b02:	7cfb      	ldrb	r3, [r7, #19]
 8007b04:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007b08:	2b28      	cmp	r3, #40	; 0x28
 8007b0a:	d117      	bne.n	8007b3c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f042 0201 	orr.w	r2, r2, #1
 8007b1a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b2a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	2228      	movs	r2, #40	; 0x28
 8007b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007b3a:	e007      	b.n	8007b4c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	2220      	movs	r2, #32
 8007b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007b4c:	6978      	ldr	r0, [r7, #20]
 8007b4e:	f7fa fe41 	bl	80027d4 <HAL_I2C_ErrorCallback>
}
 8007b52:	bf00      	nop
 8007b54:	3718      	adds	r7, #24
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	20000048 	.word	0x20000048
 8007b60:	14f8b589 	.word	0x14f8b589

08007b64 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007b70:	4b13      	ldr	r3, [pc, #76]	; (8007bc0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	08db      	lsrs	r3, r3, #3
 8007b76:	4a13      	ldr	r2, [pc, #76]	; (8007bc4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007b78:	fba2 2303 	umull	r2, r3, r2, r3
 8007b7c:	0a1a      	lsrs	r2, r3, #8
 8007b7e:	4613      	mov	r3, r2
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	4413      	add	r3, r2
 8007b84:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d107      	bne.n	8007ba2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b96:	f043 0220 	orr.w	r2, r3, #32
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e008      	b.n	8007bb4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bb0:	d0e9      	beq.n	8007b86 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3714      	adds	r7, #20
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bc80      	pop	{r7}
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	20000048 	.word	0x20000048
 8007bc4:	14f8b589 	.word	0x14f8b589

08007bc8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007bd8:	d103      	bne.n	8007be2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007be0:	e007      	b.n	8007bf2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007bea:	d102      	bne.n	8007bf2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2208      	movs	r2, #8
 8007bf0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007bf2:	bf00      	nop
 8007bf4:	370c      	adds	r7, #12
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bc80      	pop	{r7}
 8007bfa:	4770      	bx	lr

08007bfc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8007c00:	4b03      	ldr	r3, [pc, #12]	; (8007c10 <HAL_PWR_EnableBkUpAccess+0x14>)
 8007c02:	2201      	movs	r2, #1
 8007c04:	601a      	str	r2, [r3, #0]
}
 8007c06:	bf00      	nop
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bc80      	pop	{r7}
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	420e0020 	.word	0x420e0020

08007c14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b086      	sub	sp, #24
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d101      	bne.n	8007c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e304      	b.n	8008230 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 0301 	and.w	r3, r3, #1
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f000 8087 	beq.w	8007d42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007c34:	4b92      	ldr	r3, [pc, #584]	; (8007e80 <HAL_RCC_OscConfig+0x26c>)
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	f003 030c 	and.w	r3, r3, #12
 8007c3c:	2b04      	cmp	r3, #4
 8007c3e:	d00c      	beq.n	8007c5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007c40:	4b8f      	ldr	r3, [pc, #572]	; (8007e80 <HAL_RCC_OscConfig+0x26c>)
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	f003 030c 	and.w	r3, r3, #12
 8007c48:	2b08      	cmp	r3, #8
 8007c4a:	d112      	bne.n	8007c72 <HAL_RCC_OscConfig+0x5e>
 8007c4c:	4b8c      	ldr	r3, [pc, #560]	; (8007e80 <HAL_RCC_OscConfig+0x26c>)
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c58:	d10b      	bne.n	8007c72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c5a:	4b89      	ldr	r3, [pc, #548]	; (8007e80 <HAL_RCC_OscConfig+0x26c>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d06c      	beq.n	8007d40 <HAL_RCC_OscConfig+0x12c>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d168      	bne.n	8007d40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e2de      	b.n	8008230 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c7a:	d106      	bne.n	8007c8a <HAL_RCC_OscConfig+0x76>
 8007c7c:	4b80      	ldr	r3, [pc, #512]	; (8007e80 <HAL_RCC_OscConfig+0x26c>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a7f      	ldr	r2, [pc, #508]	; (8007e80 <HAL_RCC_OscConfig+0x26c>)
 8007c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c86:	6013      	str	r3, [r2, #0]
 8007c88:	e02e      	b.n	8007ce8 <HAL_RCC_OscConfig+0xd4>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10c      	bne.n	8007cac <HAL_RCC_OscConfig+0x98>
 8007c92:	4b7b      	ldr	r3, [pc, #492]	; (8007e80 <HAL_RCC_OscConfig+0x26c>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a7a      	ldr	r2, [pc, #488]	; (8007e80 <HAL_RCC_OscConfig+0x26c>)
 8007c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c9c:	6013      	str	r3, [r2, #0]
 8007c9e:	4b78      	ldr	r3, [pc, #480]	; (8007e80 <HAL_RCC_OscConfig+0x26c>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a77      	ldr	r2, [pc, #476]	; (8007e80 <HAL_RCC_OscConfig+0x26c>)
 8007ca4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ca8:	6013      	str	r3, [r2, #0]
 8007caa:	e01d      	b.n	8007ce8 <HAL_RCC_OscConfig+0xd4>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007cb4:	d10c      	bne.n	8007cd0 <HAL_RCC_OscConfig+0xbc>
 8007cb6:	4b72      	ldr	r3, [pc, #456]	; (8007e80 <HAL_RCC_OscConfig+0x26c>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a71      	ldr	r2, [pc, #452]	; (8007e80 <HAL_RCC_OscConfig+0x26c>)
 8007cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007cc0:	6013      	str	r3, [r2, #0]
 8007cc2:	4b6f      	ldr	r3, [pc, #444]	; (8007e80 <HAL_RCC_OscConfig+0x26c>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a6e      	ldr	r2, [pc, #440]	; (8007e80 <HAL_RCC_OscConfig+0x26c>)
 8007cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ccc:	6013      	str	r3, [r2, #0]
 8007cce:	e00b      	b.n	8007ce8 <HAL_RCC_OscConfig+0xd4>
 8007cd0:	4b6b      	ldr	r3, [pc, #428]	; (8007e80 <HAL_RCC_OscConfig+0x26c>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a6a      	ldr	r2, [pc, #424]	; (8007e80 <HAL_RCC_OscConfig+0x26c>)
 8007cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cda:	6013      	str	r3, [r2, #0]
 8007cdc:	4b68      	ldr	r3, [pc, #416]	; (8007e80 <HAL_RCC_OscConfig+0x26c>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a67      	ldr	r2, [pc, #412]	; (8007e80 <HAL_RCC_OscConfig+0x26c>)
 8007ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ce6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d013      	beq.n	8007d18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cf0:	f7fd fb08 	bl	8005304 <HAL_GetTick>
 8007cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cf6:	e008      	b.n	8007d0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007cf8:	f7fd fb04 	bl	8005304 <HAL_GetTick>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	2b64      	cmp	r3, #100	; 0x64
 8007d04:	d901      	bls.n	8007d0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007d06:	2303      	movs	r3, #3
 8007d08:	e292      	b.n	8008230 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d0a:	4b5d      	ldr	r3, [pc, #372]	; (8007e80 <HAL_RCC_OscConfig+0x26c>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d0f0      	beq.n	8007cf8 <HAL_RCC_OscConfig+0xe4>
 8007d16:	e014      	b.n	8007d42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d18:	f7fd faf4 	bl	8005304 <HAL_GetTick>
 8007d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d1e:	e008      	b.n	8007d32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d20:	f7fd faf0 	bl	8005304 <HAL_GetTick>
 8007d24:	4602      	mov	r2, r0
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	1ad3      	subs	r3, r2, r3
 8007d2a:	2b64      	cmp	r3, #100	; 0x64
 8007d2c:	d901      	bls.n	8007d32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	e27e      	b.n	8008230 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d32:	4b53      	ldr	r3, [pc, #332]	; (8007e80 <HAL_RCC_OscConfig+0x26c>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1f0      	bne.n	8007d20 <HAL_RCC_OscConfig+0x10c>
 8007d3e:	e000      	b.n	8007d42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f003 0302 	and.w	r3, r3, #2
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d063      	beq.n	8007e16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007d4e:	4b4c      	ldr	r3, [pc, #304]	; (8007e80 <HAL_RCC_OscConfig+0x26c>)
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	f003 030c 	and.w	r3, r3, #12
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00b      	beq.n	8007d72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007d5a:	4b49      	ldr	r3, [pc, #292]	; (8007e80 <HAL_RCC_OscConfig+0x26c>)
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	f003 030c 	and.w	r3, r3, #12
 8007d62:	2b08      	cmp	r3, #8
 8007d64:	d11c      	bne.n	8007da0 <HAL_RCC_OscConfig+0x18c>
 8007d66:	4b46      	ldr	r3, [pc, #280]	; (8007e80 <HAL_RCC_OscConfig+0x26c>)
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d116      	bne.n	8007da0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d72:	4b43      	ldr	r3, [pc, #268]	; (8007e80 <HAL_RCC_OscConfig+0x26c>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 0302 	and.w	r3, r3, #2
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d005      	beq.n	8007d8a <HAL_RCC_OscConfig+0x176>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	695b      	ldr	r3, [r3, #20]
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d001      	beq.n	8007d8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	e252      	b.n	8008230 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d8a:	4b3d      	ldr	r3, [pc, #244]	; (8007e80 <HAL_RCC_OscConfig+0x26c>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	699b      	ldr	r3, [r3, #24]
 8007d96:	00db      	lsls	r3, r3, #3
 8007d98:	4939      	ldr	r1, [pc, #228]	; (8007e80 <HAL_RCC_OscConfig+0x26c>)
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d9e:	e03a      	b.n	8007e16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	695b      	ldr	r3, [r3, #20]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d020      	beq.n	8007dea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007da8:	4b36      	ldr	r3, [pc, #216]	; (8007e84 <HAL_RCC_OscConfig+0x270>)
 8007daa:	2201      	movs	r2, #1
 8007dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dae:	f7fd faa9 	bl	8005304 <HAL_GetTick>
 8007db2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007db4:	e008      	b.n	8007dc8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007db6:	f7fd faa5 	bl	8005304 <HAL_GetTick>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d901      	bls.n	8007dc8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	e233      	b.n	8008230 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dc8:	4b2d      	ldr	r3, [pc, #180]	; (8007e80 <HAL_RCC_OscConfig+0x26c>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0302 	and.w	r3, r3, #2
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d0f0      	beq.n	8007db6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dd4:	4b2a      	ldr	r3, [pc, #168]	; (8007e80 <HAL_RCC_OscConfig+0x26c>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	699b      	ldr	r3, [r3, #24]
 8007de0:	00db      	lsls	r3, r3, #3
 8007de2:	4927      	ldr	r1, [pc, #156]	; (8007e80 <HAL_RCC_OscConfig+0x26c>)
 8007de4:	4313      	orrs	r3, r2
 8007de6:	600b      	str	r3, [r1, #0]
 8007de8:	e015      	b.n	8007e16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007dea:	4b26      	ldr	r3, [pc, #152]	; (8007e84 <HAL_RCC_OscConfig+0x270>)
 8007dec:	2200      	movs	r2, #0
 8007dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007df0:	f7fd fa88 	bl	8005304 <HAL_GetTick>
 8007df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007df6:	e008      	b.n	8007e0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007df8:	f7fd fa84 	bl	8005304 <HAL_GetTick>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d901      	bls.n	8007e0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007e06:	2303      	movs	r3, #3
 8007e08:	e212      	b.n	8008230 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e0a:	4b1d      	ldr	r3, [pc, #116]	; (8007e80 <HAL_RCC_OscConfig+0x26c>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 0302 	and.w	r3, r3, #2
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1f0      	bne.n	8007df8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 0308 	and.w	r3, r3, #8
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d03a      	beq.n	8007e98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	69db      	ldr	r3, [r3, #28]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d019      	beq.n	8007e5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e2a:	4b17      	ldr	r3, [pc, #92]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e30:	f7fd fa68 	bl	8005304 <HAL_GetTick>
 8007e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e36:	e008      	b.n	8007e4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e38:	f7fd fa64 	bl	8005304 <HAL_GetTick>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d901      	bls.n	8007e4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007e46:	2303      	movs	r3, #3
 8007e48:	e1f2      	b.n	8008230 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e4a:	4b0d      	ldr	r3, [pc, #52]	; (8007e80 <HAL_RCC_OscConfig+0x26c>)
 8007e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4e:	f003 0302 	and.w	r3, r3, #2
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d0f0      	beq.n	8007e38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007e56:	2001      	movs	r0, #1
 8007e58:	f000 fc22 	bl	80086a0 <RCC_Delay>
 8007e5c:	e01c      	b.n	8007e98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e5e:	4b0a      	ldr	r3, [pc, #40]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007e60:	2200      	movs	r2, #0
 8007e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e64:	f7fd fa4e 	bl	8005304 <HAL_GetTick>
 8007e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e6a:	e00f      	b.n	8007e8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e6c:	f7fd fa4a 	bl	8005304 <HAL_GetTick>
 8007e70:	4602      	mov	r2, r0
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	1ad3      	subs	r3, r2, r3
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	d908      	bls.n	8007e8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	e1d8      	b.n	8008230 <HAL_RCC_OscConfig+0x61c>
 8007e7e:	bf00      	nop
 8007e80:	40021000 	.word	0x40021000
 8007e84:	42420000 	.word	0x42420000
 8007e88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e8c:	4b9b      	ldr	r3, [pc, #620]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 8007e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e90:	f003 0302 	and.w	r3, r3, #2
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d1e9      	bne.n	8007e6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 0304 	and.w	r3, r3, #4
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f000 80a6 	beq.w	8007ff2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007eaa:	4b94      	ldr	r3, [pc, #592]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 8007eac:	69db      	ldr	r3, [r3, #28]
 8007eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d10d      	bne.n	8007ed2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007eb6:	4b91      	ldr	r3, [pc, #580]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 8007eb8:	69db      	ldr	r3, [r3, #28]
 8007eba:	4a90      	ldr	r2, [pc, #576]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 8007ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ec0:	61d3      	str	r3, [r2, #28]
 8007ec2:	4b8e      	ldr	r3, [pc, #568]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 8007ec4:	69db      	ldr	r3, [r3, #28]
 8007ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007eca:	60bb      	str	r3, [r7, #8]
 8007ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ed2:	4b8b      	ldr	r3, [pc, #556]	; (8008100 <HAL_RCC_OscConfig+0x4ec>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d118      	bne.n	8007f10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ede:	4b88      	ldr	r3, [pc, #544]	; (8008100 <HAL_RCC_OscConfig+0x4ec>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a87      	ldr	r2, [pc, #540]	; (8008100 <HAL_RCC_OscConfig+0x4ec>)
 8007ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007eea:	f7fd fa0b 	bl	8005304 <HAL_GetTick>
 8007eee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ef0:	e008      	b.n	8007f04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ef2:	f7fd fa07 	bl	8005304 <HAL_GetTick>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	1ad3      	subs	r3, r2, r3
 8007efc:	2b64      	cmp	r3, #100	; 0x64
 8007efe:	d901      	bls.n	8007f04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007f00:	2303      	movs	r3, #3
 8007f02:	e195      	b.n	8008230 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f04:	4b7e      	ldr	r3, [pc, #504]	; (8008100 <HAL_RCC_OscConfig+0x4ec>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d0f0      	beq.n	8007ef2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	691b      	ldr	r3, [r3, #16]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d106      	bne.n	8007f26 <HAL_RCC_OscConfig+0x312>
 8007f18:	4b78      	ldr	r3, [pc, #480]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 8007f1a:	6a1b      	ldr	r3, [r3, #32]
 8007f1c:	4a77      	ldr	r2, [pc, #476]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 8007f1e:	f043 0301 	orr.w	r3, r3, #1
 8007f22:	6213      	str	r3, [r2, #32]
 8007f24:	e02d      	b.n	8007f82 <HAL_RCC_OscConfig+0x36e>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d10c      	bne.n	8007f48 <HAL_RCC_OscConfig+0x334>
 8007f2e:	4b73      	ldr	r3, [pc, #460]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 8007f30:	6a1b      	ldr	r3, [r3, #32]
 8007f32:	4a72      	ldr	r2, [pc, #456]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 8007f34:	f023 0301 	bic.w	r3, r3, #1
 8007f38:	6213      	str	r3, [r2, #32]
 8007f3a:	4b70      	ldr	r3, [pc, #448]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 8007f3c:	6a1b      	ldr	r3, [r3, #32]
 8007f3e:	4a6f      	ldr	r2, [pc, #444]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 8007f40:	f023 0304 	bic.w	r3, r3, #4
 8007f44:	6213      	str	r3, [r2, #32]
 8007f46:	e01c      	b.n	8007f82 <HAL_RCC_OscConfig+0x36e>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	2b05      	cmp	r3, #5
 8007f4e:	d10c      	bne.n	8007f6a <HAL_RCC_OscConfig+0x356>
 8007f50:	4b6a      	ldr	r3, [pc, #424]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 8007f52:	6a1b      	ldr	r3, [r3, #32]
 8007f54:	4a69      	ldr	r2, [pc, #420]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 8007f56:	f043 0304 	orr.w	r3, r3, #4
 8007f5a:	6213      	str	r3, [r2, #32]
 8007f5c:	4b67      	ldr	r3, [pc, #412]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 8007f5e:	6a1b      	ldr	r3, [r3, #32]
 8007f60:	4a66      	ldr	r2, [pc, #408]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 8007f62:	f043 0301 	orr.w	r3, r3, #1
 8007f66:	6213      	str	r3, [r2, #32]
 8007f68:	e00b      	b.n	8007f82 <HAL_RCC_OscConfig+0x36e>
 8007f6a:	4b64      	ldr	r3, [pc, #400]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 8007f6c:	6a1b      	ldr	r3, [r3, #32]
 8007f6e:	4a63      	ldr	r2, [pc, #396]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 8007f70:	f023 0301 	bic.w	r3, r3, #1
 8007f74:	6213      	str	r3, [r2, #32]
 8007f76:	4b61      	ldr	r3, [pc, #388]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 8007f78:	6a1b      	ldr	r3, [r3, #32]
 8007f7a:	4a60      	ldr	r2, [pc, #384]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 8007f7c:	f023 0304 	bic.w	r3, r3, #4
 8007f80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d015      	beq.n	8007fb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f8a:	f7fd f9bb 	bl	8005304 <HAL_GetTick>
 8007f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f90:	e00a      	b.n	8007fa8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f92:	f7fd f9b7 	bl	8005304 <HAL_GetTick>
 8007f96:	4602      	mov	r2, r0
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	1ad3      	subs	r3, r2, r3
 8007f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d901      	bls.n	8007fa8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	e143      	b.n	8008230 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fa8:	4b54      	ldr	r3, [pc, #336]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 8007faa:	6a1b      	ldr	r3, [r3, #32]
 8007fac:	f003 0302 	and.w	r3, r3, #2
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d0ee      	beq.n	8007f92 <HAL_RCC_OscConfig+0x37e>
 8007fb4:	e014      	b.n	8007fe0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007fb6:	f7fd f9a5 	bl	8005304 <HAL_GetTick>
 8007fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fbc:	e00a      	b.n	8007fd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fbe:	f7fd f9a1 	bl	8005304 <HAL_GetTick>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	1ad3      	subs	r3, r2, r3
 8007fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d901      	bls.n	8007fd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	e12d      	b.n	8008230 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fd4:	4b49      	ldr	r3, [pc, #292]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 8007fd6:	6a1b      	ldr	r3, [r3, #32]
 8007fd8:	f003 0302 	and.w	r3, r3, #2
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d1ee      	bne.n	8007fbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007fe0:	7dfb      	ldrb	r3, [r7, #23]
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d105      	bne.n	8007ff2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fe6:	4b45      	ldr	r3, [pc, #276]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 8007fe8:	69db      	ldr	r3, [r3, #28]
 8007fea:	4a44      	ldr	r2, [pc, #272]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 8007fec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ff0:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	f000 808c 	beq.w	8008114 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8007ffc:	4b3f      	ldr	r3, [pc, #252]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008008:	d10e      	bne.n	8008028 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800800a:	4b3c      	ldr	r3, [pc, #240]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8008012:	2b08      	cmp	r3, #8
 8008014:	d108      	bne.n	8008028 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8008016:	4b39      	ldr	r3, [pc, #228]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 8008018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800801e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008022:	d101      	bne.n	8008028 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	e103      	b.n	8008230 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802c:	2b02      	cmp	r3, #2
 800802e:	d14e      	bne.n	80080ce <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8008030:	4b32      	ldr	r3, [pc, #200]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008038:	2b00      	cmp	r3, #0
 800803a:	d009      	beq.n	8008050 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 800803c:	4b2f      	ldr	r3, [pc, #188]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 800803e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008040:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8008048:	429a      	cmp	r2, r3
 800804a:	d001      	beq.n	8008050 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	e0ef      	b.n	8008230 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8008050:	4b2c      	ldr	r3, [pc, #176]	; (8008104 <HAL_RCC_OscConfig+0x4f0>)
 8008052:	2200      	movs	r2, #0
 8008054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008056:	f7fd f955 	bl	8005304 <HAL_GetTick>
 800805a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 800805c:	e008      	b.n	8008070 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800805e:	f7fd f951 	bl	8005304 <HAL_GetTick>
 8008062:	4602      	mov	r2, r0
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	1ad3      	subs	r3, r2, r3
 8008068:	2b64      	cmp	r3, #100	; 0x64
 800806a:	d901      	bls.n	8008070 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800806c:	2303      	movs	r3, #3
 800806e:	e0df      	b.n	8008230 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8008070:	4b22      	ldr	r3, [pc, #136]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1f0      	bne.n	800805e <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 800807c:	4b1f      	ldr	r3, [pc, #124]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 800807e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008088:	491c      	ldr	r1, [pc, #112]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 800808a:	4313      	orrs	r3, r2
 800808c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 800808e:	4b1b      	ldr	r3, [pc, #108]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 8008090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008092:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800809a:	4918      	ldr	r1, [pc, #96]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 800809c:	4313      	orrs	r3, r2
 800809e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80080a0:	4b18      	ldr	r3, [pc, #96]	; (8008104 <HAL_RCC_OscConfig+0x4f0>)
 80080a2:	2201      	movs	r2, #1
 80080a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080a6:	f7fd f92d 	bl	8005304 <HAL_GetTick>
 80080aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80080ac:	e008      	b.n	80080c0 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80080ae:	f7fd f929 	bl	8005304 <HAL_GetTick>
 80080b2:	4602      	mov	r2, r0
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	2b64      	cmp	r3, #100	; 0x64
 80080ba:	d901      	bls.n	80080c0 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80080bc:	2303      	movs	r3, #3
 80080be:	e0b7      	b.n	8008230 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80080c0:	4b0e      	ldr	r3, [pc, #56]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d0f0      	beq.n	80080ae <HAL_RCC_OscConfig+0x49a>
 80080cc:	e022      	b.n	8008114 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80080ce:	4b0b      	ldr	r3, [pc, #44]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 80080d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d2:	4a0a      	ldr	r2, [pc, #40]	; (80080fc <HAL_RCC_OscConfig+0x4e8>)
 80080d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80080da:	4b0a      	ldr	r3, [pc, #40]	; (8008104 <HAL_RCC_OscConfig+0x4f0>)
 80080dc:	2200      	movs	r2, #0
 80080de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080e0:	f7fd f910 	bl	8005304 <HAL_GetTick>
 80080e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80080e6:	e00f      	b.n	8008108 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80080e8:	f7fd f90c 	bl	8005304 <HAL_GetTick>
 80080ec:	4602      	mov	r2, r0
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	2b64      	cmp	r3, #100	; 0x64
 80080f4:	d908      	bls.n	8008108 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80080f6:	2303      	movs	r3, #3
 80080f8:	e09a      	b.n	8008230 <HAL_RCC_OscConfig+0x61c>
 80080fa:	bf00      	nop
 80080fc:	40021000 	.word	0x40021000
 8008100:	40007000 	.word	0x40007000
 8008104:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8008108:	4b4b      	ldr	r3, [pc, #300]	; (8008238 <HAL_RCC_OscConfig+0x624>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008110:	2b00      	cmp	r3, #0
 8008112:	d1e9      	bne.n	80080e8 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a1b      	ldr	r3, [r3, #32]
 8008118:	2b00      	cmp	r3, #0
 800811a:	f000 8088 	beq.w	800822e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800811e:	4b46      	ldr	r3, [pc, #280]	; (8008238 <HAL_RCC_OscConfig+0x624>)
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	f003 030c 	and.w	r3, r3, #12
 8008126:	2b08      	cmp	r3, #8
 8008128:	d068      	beq.n	80081fc <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6a1b      	ldr	r3, [r3, #32]
 800812e:	2b02      	cmp	r3, #2
 8008130:	d14d      	bne.n	80081ce <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008132:	4b42      	ldr	r3, [pc, #264]	; (800823c <HAL_RCC_OscConfig+0x628>)
 8008134:	2200      	movs	r2, #0
 8008136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008138:	f7fd f8e4 	bl	8005304 <HAL_GetTick>
 800813c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800813e:	e008      	b.n	8008152 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008140:	f7fd f8e0 	bl	8005304 <HAL_GetTick>
 8008144:	4602      	mov	r2, r0
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	2b02      	cmp	r3, #2
 800814c:	d901      	bls.n	8008152 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 800814e:	2303      	movs	r3, #3
 8008150:	e06e      	b.n	8008230 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008152:	4b39      	ldr	r3, [pc, #228]	; (8008238 <HAL_RCC_OscConfig+0x624>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800815a:	2b00      	cmp	r3, #0
 800815c:	d1f0      	bne.n	8008140 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008166:	d10f      	bne.n	8008188 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8008168:	4b33      	ldr	r3, [pc, #204]	; (8008238 <HAL_RCC_OscConfig+0x624>)
 800816a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	4931      	ldr	r1, [pc, #196]	; (8008238 <HAL_RCC_OscConfig+0x624>)
 8008172:	4313      	orrs	r3, r2
 8008174:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008176:	4b30      	ldr	r3, [pc, #192]	; (8008238 <HAL_RCC_OscConfig+0x624>)
 8008178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817a:	f023 020f 	bic.w	r2, r3, #15
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	492d      	ldr	r1, [pc, #180]	; (8008238 <HAL_RCC_OscConfig+0x624>)
 8008184:	4313      	orrs	r3, r2
 8008186:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008188:	4b2b      	ldr	r3, [pc, #172]	; (8008238 <HAL_RCC_OscConfig+0x624>)
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008198:	430b      	orrs	r3, r1
 800819a:	4927      	ldr	r1, [pc, #156]	; (8008238 <HAL_RCC_OscConfig+0x624>)
 800819c:	4313      	orrs	r3, r2
 800819e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80081a0:	4b26      	ldr	r3, [pc, #152]	; (800823c <HAL_RCC_OscConfig+0x628>)
 80081a2:	2201      	movs	r2, #1
 80081a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081a6:	f7fd f8ad 	bl	8005304 <HAL_GetTick>
 80081aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80081ac:	e008      	b.n	80081c0 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081ae:	f7fd f8a9 	bl	8005304 <HAL_GetTick>
 80081b2:	4602      	mov	r2, r0
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	1ad3      	subs	r3, r2, r3
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	d901      	bls.n	80081c0 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80081bc:	2303      	movs	r3, #3
 80081be:	e037      	b.n	8008230 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80081c0:	4b1d      	ldr	r3, [pc, #116]	; (8008238 <HAL_RCC_OscConfig+0x624>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d0f0      	beq.n	80081ae <HAL_RCC_OscConfig+0x59a>
 80081cc:	e02f      	b.n	800822e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081ce:	4b1b      	ldr	r3, [pc, #108]	; (800823c <HAL_RCC_OscConfig+0x628>)
 80081d0:	2200      	movs	r2, #0
 80081d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081d4:	f7fd f896 	bl	8005304 <HAL_GetTick>
 80081d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80081da:	e008      	b.n	80081ee <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081dc:	f7fd f892 	bl	8005304 <HAL_GetTick>
 80081e0:	4602      	mov	r2, r0
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	1ad3      	subs	r3, r2, r3
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d901      	bls.n	80081ee <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80081ea:	2303      	movs	r3, #3
 80081ec:	e020      	b.n	8008230 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80081ee:	4b12      	ldr	r3, [pc, #72]	; (8008238 <HAL_RCC_OscConfig+0x624>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d1f0      	bne.n	80081dc <HAL_RCC_OscConfig+0x5c8>
 80081fa:	e018      	b.n	800822e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a1b      	ldr	r3, [r3, #32]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d101      	bne.n	8008208 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	e013      	b.n	8008230 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008208:	4b0b      	ldr	r3, [pc, #44]	; (8008238 <HAL_RCC_OscConfig+0x624>)
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008218:	429a      	cmp	r2, r3
 800821a:	d106      	bne.n	800822a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008226:	429a      	cmp	r2, r3
 8008228:	d001      	beq.n	800822e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	e000      	b.n	8008230 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3718      	adds	r7, #24
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	40021000 	.word	0x40021000
 800823c:	42420060 	.word	0x42420060

08008240 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d101      	bne.n	8008254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	e0d0      	b.n	80083f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008254:	4b6a      	ldr	r3, [pc, #424]	; (8008400 <HAL_RCC_ClockConfig+0x1c0>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0307 	and.w	r3, r3, #7
 800825c:	683a      	ldr	r2, [r7, #0]
 800825e:	429a      	cmp	r2, r3
 8008260:	d910      	bls.n	8008284 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008262:	4b67      	ldr	r3, [pc, #412]	; (8008400 <HAL_RCC_ClockConfig+0x1c0>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f023 0207 	bic.w	r2, r3, #7
 800826a:	4965      	ldr	r1, [pc, #404]	; (8008400 <HAL_RCC_ClockConfig+0x1c0>)
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	4313      	orrs	r3, r2
 8008270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008272:	4b63      	ldr	r3, [pc, #396]	; (8008400 <HAL_RCC_ClockConfig+0x1c0>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f003 0307 	and.w	r3, r3, #7
 800827a:	683a      	ldr	r2, [r7, #0]
 800827c:	429a      	cmp	r2, r3
 800827e:	d001      	beq.n	8008284 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e0b8      	b.n	80083f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 0302 	and.w	r3, r3, #2
 800828c:	2b00      	cmp	r3, #0
 800828e:	d020      	beq.n	80082d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 0304 	and.w	r3, r3, #4
 8008298:	2b00      	cmp	r3, #0
 800829a:	d005      	beq.n	80082a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800829c:	4b59      	ldr	r3, [pc, #356]	; (8008404 <HAL_RCC_ClockConfig+0x1c4>)
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	4a58      	ldr	r2, [pc, #352]	; (8008404 <HAL_RCC_ClockConfig+0x1c4>)
 80082a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80082a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 0308 	and.w	r3, r3, #8
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d005      	beq.n	80082c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80082b4:	4b53      	ldr	r3, [pc, #332]	; (8008404 <HAL_RCC_ClockConfig+0x1c4>)
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	4a52      	ldr	r2, [pc, #328]	; (8008404 <HAL_RCC_ClockConfig+0x1c4>)
 80082ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80082be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082c0:	4b50      	ldr	r3, [pc, #320]	; (8008404 <HAL_RCC_ClockConfig+0x1c4>)
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	494d      	ldr	r1, [pc, #308]	; (8008404 <HAL_RCC_ClockConfig+0x1c4>)
 80082ce:	4313      	orrs	r3, r2
 80082d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f003 0301 	and.w	r3, r3, #1
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d040      	beq.n	8008360 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d107      	bne.n	80082f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082e6:	4b47      	ldr	r3, [pc, #284]	; (8008404 <HAL_RCC_ClockConfig+0x1c4>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d115      	bne.n	800831e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e07f      	b.n	80083f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	2b02      	cmp	r3, #2
 80082fc:	d107      	bne.n	800830e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082fe:	4b41      	ldr	r3, [pc, #260]	; (8008404 <HAL_RCC_ClockConfig+0x1c4>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008306:	2b00      	cmp	r3, #0
 8008308:	d109      	bne.n	800831e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	e073      	b.n	80083f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800830e:	4b3d      	ldr	r3, [pc, #244]	; (8008404 <HAL_RCC_ClockConfig+0x1c4>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 0302 	and.w	r3, r3, #2
 8008316:	2b00      	cmp	r3, #0
 8008318:	d101      	bne.n	800831e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e06b      	b.n	80083f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800831e:	4b39      	ldr	r3, [pc, #228]	; (8008404 <HAL_RCC_ClockConfig+0x1c4>)
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	f023 0203 	bic.w	r2, r3, #3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	4936      	ldr	r1, [pc, #216]	; (8008404 <HAL_RCC_ClockConfig+0x1c4>)
 800832c:	4313      	orrs	r3, r2
 800832e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008330:	f7fc ffe8 	bl	8005304 <HAL_GetTick>
 8008334:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008336:	e00a      	b.n	800834e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008338:	f7fc ffe4 	bl	8005304 <HAL_GetTick>
 800833c:	4602      	mov	r2, r0
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	1ad3      	subs	r3, r2, r3
 8008342:	f241 3288 	movw	r2, #5000	; 0x1388
 8008346:	4293      	cmp	r3, r2
 8008348:	d901      	bls.n	800834e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800834a:	2303      	movs	r3, #3
 800834c:	e053      	b.n	80083f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800834e:	4b2d      	ldr	r3, [pc, #180]	; (8008404 <HAL_RCC_ClockConfig+0x1c4>)
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	f003 020c 	and.w	r2, r3, #12
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	429a      	cmp	r2, r3
 800835e:	d1eb      	bne.n	8008338 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008360:	4b27      	ldr	r3, [pc, #156]	; (8008400 <HAL_RCC_ClockConfig+0x1c0>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 0307 	and.w	r3, r3, #7
 8008368:	683a      	ldr	r2, [r7, #0]
 800836a:	429a      	cmp	r2, r3
 800836c:	d210      	bcs.n	8008390 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800836e:	4b24      	ldr	r3, [pc, #144]	; (8008400 <HAL_RCC_ClockConfig+0x1c0>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f023 0207 	bic.w	r2, r3, #7
 8008376:	4922      	ldr	r1, [pc, #136]	; (8008400 <HAL_RCC_ClockConfig+0x1c0>)
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	4313      	orrs	r3, r2
 800837c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800837e:	4b20      	ldr	r3, [pc, #128]	; (8008400 <HAL_RCC_ClockConfig+0x1c0>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f003 0307 	and.w	r3, r3, #7
 8008386:	683a      	ldr	r2, [r7, #0]
 8008388:	429a      	cmp	r2, r3
 800838a:	d001      	beq.n	8008390 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	e032      	b.n	80083f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f003 0304 	and.w	r3, r3, #4
 8008398:	2b00      	cmp	r3, #0
 800839a:	d008      	beq.n	80083ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800839c:	4b19      	ldr	r3, [pc, #100]	; (8008404 <HAL_RCC_ClockConfig+0x1c4>)
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	4916      	ldr	r1, [pc, #88]	; (8008404 <HAL_RCC_ClockConfig+0x1c4>)
 80083aa:	4313      	orrs	r3, r2
 80083ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 0308 	and.w	r3, r3, #8
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d009      	beq.n	80083ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80083ba:	4b12      	ldr	r3, [pc, #72]	; (8008404 <HAL_RCC_ClockConfig+0x1c4>)
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	00db      	lsls	r3, r3, #3
 80083c8:	490e      	ldr	r1, [pc, #56]	; (8008404 <HAL_RCC_ClockConfig+0x1c4>)
 80083ca:	4313      	orrs	r3, r2
 80083cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80083ce:	f000 f821 	bl	8008414 <HAL_RCC_GetSysClockFreq>
 80083d2:	4602      	mov	r2, r0
 80083d4:	4b0b      	ldr	r3, [pc, #44]	; (8008404 <HAL_RCC_ClockConfig+0x1c4>)
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	091b      	lsrs	r3, r3, #4
 80083da:	f003 030f 	and.w	r3, r3, #15
 80083de:	490a      	ldr	r1, [pc, #40]	; (8008408 <HAL_RCC_ClockConfig+0x1c8>)
 80083e0:	5ccb      	ldrb	r3, [r1, r3]
 80083e2:	fa22 f303 	lsr.w	r3, r2, r3
 80083e6:	4a09      	ldr	r2, [pc, #36]	; (800840c <HAL_RCC_ClockConfig+0x1cc>)
 80083e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80083ea:	4b09      	ldr	r3, [pc, #36]	; (8008410 <HAL_RCC_ClockConfig+0x1d0>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7fc fe0a 	bl	8005008 <HAL_InitTick>

  return HAL_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	40022000 	.word	0x40022000
 8008404:	40021000 	.word	0x40021000
 8008408:	0800f558 	.word	0x0800f558
 800840c:	20000048 	.word	0x20000048
 8008410:	2000004c 	.word	0x2000004c

08008414 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008418:	b091      	sub	sp, #68	; 0x44
 800841a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 800841c:	4b6a      	ldr	r3, [pc, #424]	; (80085c8 <HAL_RCC_GetSysClockFreq+0x1b4>)
 800841e:	f107 0414 	add.w	r4, r7, #20
 8008422:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008424:	c407      	stmia	r4!, {r0, r1, r2}
 8008426:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8008428:	4b68      	ldr	r3, [pc, #416]	; (80085cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800842a:	1d3c      	adds	r4, r7, #4
 800842c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800842e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008432:	2300      	movs	r3, #0
 8008434:	637b      	str	r3, [r7, #52]	; 0x34
 8008436:	2300      	movs	r3, #0
 8008438:	633b      	str	r3, [r7, #48]	; 0x30
 800843a:	2300      	movs	r3, #0
 800843c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800843e:	2300      	movs	r3, #0
 8008440:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8008442:	2300      	movs	r3, #0
 8008444:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8008446:	2300      	movs	r3, #0
 8008448:	62bb      	str	r3, [r7, #40]	; 0x28
 800844a:	2300      	movs	r3, #0
 800844c:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800844e:	4b60      	ldr	r3, [pc, #384]	; (80085d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008456:	f003 030c 	and.w	r3, r3, #12
 800845a:	2b04      	cmp	r3, #4
 800845c:	d002      	beq.n	8008464 <HAL_RCC_GetSysClockFreq+0x50>
 800845e:	2b08      	cmp	r3, #8
 8008460:	d003      	beq.n	800846a <HAL_RCC_GetSysClockFreq+0x56>
 8008462:	e0a8      	b.n	80085b6 <HAL_RCC_GetSysClockFreq+0x1a2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008464:	4b5b      	ldr	r3, [pc, #364]	; (80085d4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8008466:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008468:	e0a8      	b.n	80085bc <HAL_RCC_GetSysClockFreq+0x1a8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800846a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800846c:	0c9b      	lsrs	r3, r3, #18
 800846e:	f003 030f 	and.w	r3, r3, #15
 8008472:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008476:	4413      	add	r3, r2
 8008478:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800847c:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800847e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008484:	2b00      	cmp	r3, #0
 8008486:	f000 808e 	beq.w	80085a6 <HAL_RCC_GetSysClockFreq+0x192>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800848a:	4b51      	ldr	r3, [pc, #324]	; (80085d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800848c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800848e:	f003 030f 	and.w	r3, r3, #15
 8008492:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008496:	4413      	add	r3, r2
 8008498:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800849c:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800849e:	4b4c      	ldr	r3, [pc, #304]	; (80085d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80084a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d06b      	beq.n	8008582 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80084aa:	4b49      	ldr	r3, [pc, #292]	; (80085d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80084ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ae:	091b      	lsrs	r3, r3, #4
 80084b0:	f003 030f 	and.w	r3, r3, #15
 80084b4:	3301      	adds	r3, #1
 80084b6:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80084b8:	4b45      	ldr	r3, [pc, #276]	; (80085d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80084ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084bc:	0a1b      	lsrs	r3, r3, #8
 80084be:	f003 030f 	and.w	r3, r3, #15
 80084c2:	3302      	adds	r3, #2
 80084c4:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80084c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c8:	4618      	mov	r0, r3
 80084ca:	f04f 0100 	mov.w	r1, #0
 80084ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d0:	461a      	mov	r2, r3
 80084d2:	f04f 0300 	mov.w	r3, #0
 80084d6:	fb02 f501 	mul.w	r5, r2, r1
 80084da:	fb00 f403 	mul.w	r4, r0, r3
 80084de:	192e      	adds	r6, r5, r4
 80084e0:	fba0 4502 	umull	r4, r5, r0, r2
 80084e4:	1973      	adds	r3, r6, r5
 80084e6:	461d      	mov	r5, r3
 80084e8:	4620      	mov	r0, r4
 80084ea:	4629      	mov	r1, r5
 80084ec:	f04f 0200 	mov.w	r2, #0
 80084f0:	f04f 0300 	mov.w	r3, #0
 80084f4:	014b      	lsls	r3, r1, #5
 80084f6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80084fa:	0142      	lsls	r2, r0, #5
 80084fc:	4610      	mov	r0, r2
 80084fe:	4619      	mov	r1, r3
 8008500:	1b00      	subs	r0, r0, r4
 8008502:	eb61 0105 	sbc.w	r1, r1, r5
 8008506:	f04f 0200 	mov.w	r2, #0
 800850a:	f04f 0300 	mov.w	r3, #0
 800850e:	018b      	lsls	r3, r1, #6
 8008510:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008514:	0182      	lsls	r2, r0, #6
 8008516:	1a12      	subs	r2, r2, r0
 8008518:	eb63 0301 	sbc.w	r3, r3, r1
 800851c:	f04f 0000 	mov.w	r0, #0
 8008520:	f04f 0100 	mov.w	r1, #0
 8008524:	00d9      	lsls	r1, r3, #3
 8008526:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800852a:	00d0      	lsls	r0, r2, #3
 800852c:	4602      	mov	r2, r0
 800852e:	460b      	mov	r3, r1
 8008530:	1912      	adds	r2, r2, r4
 8008532:	eb45 0303 	adc.w	r3, r5, r3
 8008536:	f04f 0000 	mov.w	r0, #0
 800853a:	f04f 0100 	mov.w	r1, #0
 800853e:	0259      	lsls	r1, r3, #9
 8008540:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008544:	0250      	lsls	r0, r2, #9
 8008546:	4602      	mov	r2, r0
 8008548:	460b      	mov	r3, r1
 800854a:	4690      	mov	r8, r2
 800854c:	4699      	mov	r9, r3
 800854e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008550:	4618      	mov	r0, r3
 8008552:	f04f 0100 	mov.w	r1, #0
 8008556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008558:	461a      	mov	r2, r3
 800855a:	f04f 0300 	mov.w	r3, #0
 800855e:	fb02 f501 	mul.w	r5, r2, r1
 8008562:	fb00 f403 	mul.w	r4, r0, r3
 8008566:	442c      	add	r4, r5
 8008568:	fba0 2302 	umull	r2, r3, r0, r2
 800856c:	18e1      	adds	r1, r4, r3
 800856e:	460b      	mov	r3, r1
 8008570:	4640      	mov	r0, r8
 8008572:	4649      	mov	r1, r9
 8008574:	f7f8 fe32 	bl	80011dc <__aeabi_uldivmod>
 8008578:	4602      	mov	r2, r0
 800857a:	460b      	mov	r3, r1
 800857c:	4613      	mov	r3, r2
 800857e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008580:	e007      	b.n	8008592 <HAL_RCC_GetSysClockFreq+0x17e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8008582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008584:	4a13      	ldr	r2, [pc, #76]	; (80085d4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8008586:	fb02 f203 	mul.w	r2, r2, r3
 800858a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008590:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8008592:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008596:	461a      	mov	r2, r3
 8008598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859a:	4293      	cmp	r3, r2
 800859c:	d108      	bne.n	80085b0 <HAL_RCC_GetSysClockFreq+0x19c>
        {
          pllclk = pllclk / 2;
 800859e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085a0:	085b      	lsrs	r3, r3, #1
 80085a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085a4:	e004      	b.n	80085b0 <HAL_RCC_GetSysClockFreq+0x19c>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80085a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a8:	4a0b      	ldr	r2, [pc, #44]	; (80085d8 <HAL_RCC_GetSysClockFreq+0x1c4>)
 80085aa:	fb02 f303 	mul.w	r3, r2, r3
 80085ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 80085b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80085b4:	e002      	b.n	80085bc <HAL_RCC_GetSysClockFreq+0x1a8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80085b6:	4b07      	ldr	r3, [pc, #28]	; (80085d4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80085b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80085ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80085bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3744      	adds	r7, #68	; 0x44
 80085c2:	46bd      	mov	sp, r7
 80085c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085c8:	0800f3f8 	.word	0x0800f3f8
 80085cc:	0800f408 	.word	0x0800f408
 80085d0:	40021000 	.word	0x40021000
 80085d4:	007a1200 	.word	0x007a1200
 80085d8:	003d0900 	.word	0x003d0900

080085dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80085dc:	b480      	push	{r7}
 80085de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80085e0:	4b02      	ldr	r3, [pc, #8]	; (80085ec <HAL_RCC_GetHCLKFreq+0x10>)
 80085e2:	681b      	ldr	r3, [r3, #0]
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bc80      	pop	{r7}
 80085ea:	4770      	bx	lr
 80085ec:	20000048 	.word	0x20000048

080085f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80085f4:	f7ff fff2 	bl	80085dc <HAL_RCC_GetHCLKFreq>
 80085f8:	4602      	mov	r2, r0
 80085fa:	4b05      	ldr	r3, [pc, #20]	; (8008610 <HAL_RCC_GetPCLK1Freq+0x20>)
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	0a1b      	lsrs	r3, r3, #8
 8008600:	f003 0307 	and.w	r3, r3, #7
 8008604:	4903      	ldr	r1, [pc, #12]	; (8008614 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008606:	5ccb      	ldrb	r3, [r1, r3]
 8008608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800860c:	4618      	mov	r0, r3
 800860e:	bd80      	pop	{r7, pc}
 8008610:	40021000 	.word	0x40021000
 8008614:	0800f568 	.word	0x0800f568

08008618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800861c:	f7ff ffde 	bl	80085dc <HAL_RCC_GetHCLKFreq>
 8008620:	4602      	mov	r2, r0
 8008622:	4b05      	ldr	r3, [pc, #20]	; (8008638 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	0adb      	lsrs	r3, r3, #11
 8008628:	f003 0307 	and.w	r3, r3, #7
 800862c:	4903      	ldr	r1, [pc, #12]	; (800863c <HAL_RCC_GetPCLK2Freq+0x24>)
 800862e:	5ccb      	ldrb	r3, [r1, r3]
 8008630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008634:	4618      	mov	r0, r3
 8008636:	bd80      	pop	{r7, pc}
 8008638:	40021000 	.word	0x40021000
 800863c:	0800f568 	.word	0x0800f568

08008640 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	220f      	movs	r2, #15
 800864e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008650:	4b11      	ldr	r3, [pc, #68]	; (8008698 <HAL_RCC_GetClockConfig+0x58>)
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	f003 0203 	and.w	r2, r3, #3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800865c:	4b0e      	ldr	r3, [pc, #56]	; (8008698 <HAL_RCC_GetClockConfig+0x58>)
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008668:	4b0b      	ldr	r3, [pc, #44]	; (8008698 <HAL_RCC_GetClockConfig+0x58>)
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008674:	4b08      	ldr	r3, [pc, #32]	; (8008698 <HAL_RCC_GetClockConfig+0x58>)
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	08db      	lsrs	r3, r3, #3
 800867a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008682:	4b06      	ldr	r3, [pc, #24]	; (800869c <HAL_RCC_GetClockConfig+0x5c>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f003 0207 	and.w	r2, r3, #7
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800868e:	bf00      	nop
 8008690:	370c      	adds	r7, #12
 8008692:	46bd      	mov	sp, r7
 8008694:	bc80      	pop	{r7}
 8008696:	4770      	bx	lr
 8008698:	40021000 	.word	0x40021000
 800869c:	40022000 	.word	0x40022000

080086a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b085      	sub	sp, #20
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80086a8:	4b0a      	ldr	r3, [pc, #40]	; (80086d4 <RCC_Delay+0x34>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a0a      	ldr	r2, [pc, #40]	; (80086d8 <RCC_Delay+0x38>)
 80086ae:	fba2 2303 	umull	r2, r3, r2, r3
 80086b2:	0a5b      	lsrs	r3, r3, #9
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	fb02 f303 	mul.w	r3, r2, r3
 80086ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80086bc:	bf00      	nop
  }
  while (Delay --);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	1e5a      	subs	r2, r3, #1
 80086c2:	60fa      	str	r2, [r7, #12]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d1f9      	bne.n	80086bc <RCC_Delay+0x1c>
}
 80086c8:	bf00      	nop
 80086ca:	bf00      	nop
 80086cc:	3714      	adds	r7, #20
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bc80      	pop	{r7}
 80086d2:	4770      	bx	lr
 80086d4:	20000048 	.word	0x20000048
 80086d8:	10624dd3 	.word	0x10624dd3

080086dc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b088      	sub	sp, #32
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80086e4:	2300      	movs	r3, #0
 80086e6:	617b      	str	r3, [r7, #20]
 80086e8:	2300      	movs	r3, #0
 80086ea:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 80086ec:	2300      	movs	r3, #0
 80086ee:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 0301 	and.w	r3, r3, #1
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d07d      	beq.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 80086fc:	2300      	movs	r3, #0
 80086fe:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008700:	4b8b      	ldr	r3, [pc, #556]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008702:	69db      	ldr	r3, [r3, #28]
 8008704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008708:	2b00      	cmp	r3, #0
 800870a:	d10d      	bne.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800870c:	4b88      	ldr	r3, [pc, #544]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800870e:	69db      	ldr	r3, [r3, #28]
 8008710:	4a87      	ldr	r2, [pc, #540]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008716:	61d3      	str	r3, [r2, #28]
 8008718:	4b85      	ldr	r3, [pc, #532]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800871a:	69db      	ldr	r3, [r3, #28]
 800871c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008720:	60fb      	str	r3, [r7, #12]
 8008722:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008724:	2301      	movs	r3, #1
 8008726:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008728:	4b82      	ldr	r3, [pc, #520]	; (8008934 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008730:	2b00      	cmp	r3, #0
 8008732:	d118      	bne.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008734:	4b7f      	ldr	r3, [pc, #508]	; (8008934 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a7e      	ldr	r2, [pc, #504]	; (8008934 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800873a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800873e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008740:	f7fc fde0 	bl	8005304 <HAL_GetTick>
 8008744:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008746:	e008      	b.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008748:	f7fc fddc 	bl	8005304 <HAL_GetTick>
 800874c:	4602      	mov	r2, r0
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	1ad3      	subs	r3, r2, r3
 8008752:	2b64      	cmp	r3, #100	; 0x64
 8008754:	d901      	bls.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8008756:	2303      	movs	r3, #3
 8008758:	e0e5      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800875a:	4b76      	ldr	r3, [pc, #472]	; (8008934 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008762:	2b00      	cmp	r3, #0
 8008764:	d0f0      	beq.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008766:	4b72      	ldr	r3, [pc, #456]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008768:	6a1b      	ldr	r3, [r3, #32]
 800876a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800876e:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d02e      	beq.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800877e:	693a      	ldr	r2, [r7, #16]
 8008780:	429a      	cmp	r2, r3
 8008782:	d027      	beq.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008784:	4b6a      	ldr	r3, [pc, #424]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008786:	6a1b      	ldr	r3, [r3, #32]
 8008788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800878c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800878e:	4b6a      	ldr	r3, [pc, #424]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8008790:	2201      	movs	r2, #1
 8008792:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008794:	4b68      	ldr	r3, [pc, #416]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8008796:	2200      	movs	r2, #0
 8008798:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800879a:	4a65      	ldr	r2, [pc, #404]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	f003 0301 	and.w	r3, r3, #1
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d014      	beq.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087aa:	f7fc fdab 	bl	8005304 <HAL_GetTick>
 80087ae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087b0:	e00a      	b.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087b2:	f7fc fda7 	bl	8005304 <HAL_GetTick>
 80087b6:	4602      	mov	r2, r0
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	1ad3      	subs	r3, r2, r3
 80087bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d901      	bls.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e0ae      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087c8:	4b59      	ldr	r3, [pc, #356]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80087ca:	6a1b      	ldr	r3, [r3, #32]
 80087cc:	f003 0302 	and.w	r3, r3, #2
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d0ee      	beq.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80087d4:	4b56      	ldr	r3, [pc, #344]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80087d6:	6a1b      	ldr	r3, [r3, #32]
 80087d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	4953      	ldr	r1, [pc, #332]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80087e2:	4313      	orrs	r3, r2
 80087e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80087e6:	7efb      	ldrb	r3, [r7, #27]
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d105      	bne.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087ec:	4b50      	ldr	r3, [pc, #320]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80087ee:	69db      	ldr	r3, [r3, #28]
 80087f0:	4a4f      	ldr	r2, [pc, #316]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80087f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f003 0302 	and.w	r3, r3, #2
 8008800:	2b00      	cmp	r3, #0
 8008802:	d008      	beq.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008804:	4b4a      	ldr	r3, [pc, #296]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	4947      	ldr	r1, [pc, #284]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008812:	4313      	orrs	r3, r2
 8008814:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f003 0304 	and.w	r3, r3, #4
 800881e:	2b00      	cmp	r3, #0
 8008820:	d008      	beq.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8008822:	4b43      	ldr	r3, [pc, #268]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008826:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	4940      	ldr	r1, [pc, #256]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008830:	4313      	orrs	r3, r2
 8008832:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f003 0308 	and.w	r3, r3, #8
 800883c:	2b00      	cmp	r3, #0
 800883e:	d008      	beq.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8008840:	4b3b      	ldr	r3, [pc, #236]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008844:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	4938      	ldr	r1, [pc, #224]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800884e:	4313      	orrs	r3, r2
 8008850:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8008852:	4b37      	ldr	r3, [pc, #220]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800885a:	2b00      	cmp	r3, #0
 800885c:	d105      	bne.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x18e>
 800885e:	4b34      	ldr	r3, [pc, #208]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008862:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008866:	2b00      	cmp	r3, #0
 8008868:	d001      	beq.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 800886a:	2301      	movs	r3, #1
 800886c:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	2b01      	cmp	r3, #1
 8008872:	d148      	bne.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8008874:	4b2e      	ldr	r3, [pc, #184]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800887c:	2b00      	cmp	r3, #0
 800887e:	d138      	bne.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8008880:	4b2b      	ldr	r3, [pc, #172]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008888:	2b00      	cmp	r3, #0
 800888a:	d009      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 800888c:	4b28      	ldr	r3, [pc, #160]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800888e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008890:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8008898:	429a      	cmp	r2, r3
 800889a:	d001      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	e042      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 80088a0:	4b23      	ldr	r3, [pc, #140]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80088a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	699b      	ldr	r3, [r3, #24]
 80088ac:	4920      	ldr	r1, [pc, #128]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80088ae:	4313      	orrs	r3, r2
 80088b0:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 80088b2:	4b1f      	ldr	r3, [pc, #124]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80088b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b6:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	695b      	ldr	r3, [r3, #20]
 80088be:	491c      	ldr	r1, [pc, #112]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80088c0:	4313      	orrs	r3, r2
 80088c2:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 80088c4:	4b1d      	ldr	r3, [pc, #116]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80088c6:	2201      	movs	r2, #1
 80088c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088ca:	f7fc fd1b 	bl	8005304 <HAL_GetTick>
 80088ce:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80088d0:	e008      	b.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80088d2:	f7fc fd17 	bl	8005304 <HAL_GetTick>
 80088d6:	4602      	mov	r2, r0
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	2b64      	cmp	r3, #100	; 0x64
 80088de:	d901      	bls.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 80088e0:	2303      	movs	r3, #3
 80088e2:	e020      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80088e4:	4b12      	ldr	r3, [pc, #72]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d0f0      	beq.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80088f0:	e009      	b.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 80088f2:	4b0f      	ldr	r3, [pc, #60]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80088f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f6:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	695b      	ldr	r3, [r3, #20]
 80088fe:	429a      	cmp	r2, r3
 8008900:	d001      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	e00f      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 0310 	and.w	r3, r3, #16
 800890e:	2b00      	cmp	r3, #0
 8008910:	d008      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008912:	4b07      	ldr	r3, [pc, #28]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	69db      	ldr	r3, [r3, #28]
 800891e:	4904      	ldr	r1, [pc, #16]	; (8008930 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008920:	4313      	orrs	r3, r2
 8008922:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3720      	adds	r7, #32
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	40021000 	.word	0x40021000
 8008934:	40007000 	.word	0x40007000
 8008938:	42420440 	.word	0x42420440
 800893c:	42420070 	.word	0x42420070

08008940 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008940:	b590      	push	{r4, r7, lr}
 8008942:	b093      	sub	sp, #76	; 0x4c
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8008948:	4ba9      	ldr	r3, [pc, #676]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800894a:	f107 0418 	add.w	r4, r7, #24
 800894e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008950:	c407      	stmia	r4!, {r0, r1, r2}
 8008952:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8008954:	4ba7      	ldr	r3, [pc, #668]	; (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008956:	f107 0408 	add.w	r4, r7, #8
 800895a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800895c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8008960:	2300      	movs	r3, #0
 8008962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008964:	2300      	movs	r3, #0
 8008966:	647b      	str	r3, [r7, #68]	; 0x44
 8008968:	2300      	movs	r3, #0
 800896a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
 800896c:	2300      	movs	r3, #0
 800896e:	637b      	str	r3, [r7, #52]	; 0x34
 8008970:	2300      	movs	r3, #0
 8008972:	633b      	str	r3, [r7, #48]	; 0x30
 8008974:	2300      	movs	r3, #0
 8008976:	62fb      	str	r3, [r7, #44]	; 0x2c
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[2] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8008978:	2300      	movs	r3, #0
 800897a:	62bb      	str	r3, [r7, #40]	; 0x28
 800897c:	2300      	movs	r3, #0
 800897e:	643b      	str	r3, [r7, #64]	; 0x40
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	3b01      	subs	r3, #1
 8008984:	2b0f      	cmp	r3, #15
 8008986:	f200 8124 	bhi.w	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 800898a:	a201      	add	r2, pc, #4	; (adr r2, 8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 800898c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008990:	08008b51 	.word	0x08008b51
 8008994:	08008bb7 	.word	0x08008bb7
 8008998:	08008bd3 	.word	0x08008bd3
 800899c:	08008aaf 	.word	0x08008aaf
 80089a0:	08008bd3 	.word	0x08008bd3
 80089a4:	08008bd3 	.word	0x08008bd3
 80089a8:	08008bd3 	.word	0x08008bd3
 80089ac:	08008b01 	.word	0x08008b01
 80089b0:	08008bd3 	.word	0x08008bd3
 80089b4:	08008bd3 	.word	0x08008bd3
 80089b8:	08008bd3 	.word	0x08008bd3
 80089bc:	08008bd3 	.word	0x08008bd3
 80089c0:	08008bd3 	.word	0x08008bd3
 80089c4:	08008bd3 	.word	0x08008bd3
 80089c8:	08008bd3 	.word	0x08008bd3
 80089cc:	080089d1 	.word	0x080089d1
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80089d0:	4b89      	ldr	r3, [pc, #548]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80089d6:	4b88      	ldr	r3, [pc, #544]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089de:	2b00      	cmp	r3, #0
 80089e0:	f000 80f9 	beq.w	8008bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80089e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e6:	0c9b      	lsrs	r3, r3, #18
 80089e8:	f003 030f 	and.w	r3, r3, #15
 80089ec:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80089f0:	4413      	add	r3, r2
 80089f2:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80089f6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80089f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d03e      	beq.n	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8008a02:	4b7d      	ldr	r3, [pc, #500]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a06:	f003 030f 	and.w	r3, r3, #15
 8008a0a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008a0e:	4413      	add	r3, r2
 8008a10:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8008a14:	63fb      	str	r3, [r7, #60]	; 0x3c
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8008a16:	4b78      	ldr	r3, [pc, #480]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d01c      	beq.n	8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8008a22:	4b75      	ldr	r3, [pc, #468]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a26:	091b      	lsrs	r3, r3, #4
 8008a28:	f003 030f 	and.w	r3, r3, #15
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8008a30:	4b71      	ldr	r3, [pc, #452]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a34:	0a1b      	lsrs	r3, r3, #8
 8008a36:	f003 030f 	and.w	r3, r3, #15
 8008a3a:	3302      	adds	r3, #2
 8008a3c:	637b      	str	r3, [r7, #52]	; 0x34
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 8008a3e:	4a6f      	ldr	r2, [pc, #444]	; (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a48:	fb02 f203 	mul.w	r2, r2, r3
 8008a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a54:	fb02 f303 	mul.w	r3, r2, r3
 8008a58:	647b      	str	r3, [r7, #68]	; 0x44
 8008a5a:	e007      	b.n	8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8008a5c:	4a67      	ldr	r2, [pc, #412]	; (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a60:	fbb2 f2f3 	udiv	r2, r2, r3
 8008a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a66:	fb02 f303 	mul.w	r3, r2, r3
 8008a6a:	647b      	str	r3, [r7, #68]	; 0x44
          }

          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8008a6c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008a70:	461a      	mov	r2, r3
 8008a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d108      	bne.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
          {
            pllclk = pllclk / 2;
 8008a78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a7a:	085b      	lsrs	r3, r3, #1
 8008a7c:	647b      	str	r3, [r7, #68]	; 0x44
 8008a7e:	e004      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a82:	4a5f      	ldr	r2, [pc, #380]	; (8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008a84:	fb02 f303 	mul.w	r3, r2, r3
 8008a88:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 8008a8a:	4b5b      	ldr	r3, [pc, #364]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a96:	d102      	bne.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        {
          /* Prescaler of 2 selected for USB */
          frequency = pllclk;
 8008a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a9a:	643b      	str	r3, [r7, #64]	; 0x40
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8008a9c:	e09b      	b.n	8008bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          frequency = (2 * pllclk) / 3;
 8008a9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008aa0:	005b      	lsls	r3, r3, #1
 8008aa2:	4a58      	ldr	r2, [pc, #352]	; (8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8008aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8008aa8:	085b      	lsrs	r3, r3, #1
 8008aaa:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8008aac:	e093      	b.n	8008bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 8008aae:	4b52      	ldr	r3, [pc, #328]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d103      	bne.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        /* SYSCLK used as source clock for I2S2 */
        frequency = HAL_RCC_GetSysClockFreq();
 8008aba:	f7ff fcab 	bl	8008414 <HAL_RCC_GetSysClockFreq>
 8008abe:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8008ac0:	e08b      	b.n	8008bda <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8008ac2:	4b4d      	ldr	r3, [pc, #308]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f000 8085 	beq.w	8008bda <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8008ad0:	4b49      	ldr	r3, [pc, #292]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad4:	091b      	lsrs	r3, r3, #4
 8008ad6:	f003 030f 	and.w	r3, r3, #15
 8008ada:	3301      	adds	r3, #1
 8008adc:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8008ade:	4b46      	ldr	r3, [pc, #280]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae2:	0b1b      	lsrs	r3, r3, #12
 8008ae4:	f003 030f 	and.w	r3, r3, #15
 8008ae8:	3302      	adds	r3, #2
 8008aea:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8008aec:	4a43      	ldr	r2, [pc, #268]	; (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008af4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008af6:	fb02 f303 	mul.w	r3, r2, r3
 8008afa:	005b      	lsls	r3, r3, #1
 8008afc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8008afe:	e06c      	b.n	8008bda <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 8008b00:	4b3d      	ldr	r3, [pc, #244]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d103      	bne.n	8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
      {
        /* SYSCLK used as source clock for I2S3 */
        frequency = HAL_RCC_GetSysClockFreq();
 8008b0c:	f7ff fc82 	bl	8008414 <HAL_RCC_GetSysClockFreq>
 8008b10:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8008b12:	e064      	b.n	8008bde <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8008b14:	4b38      	ldr	r3, [pc, #224]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d05e      	beq.n	8008bde <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8008b20:	4b35      	ldr	r3, [pc, #212]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b24:	091b      	lsrs	r3, r3, #4
 8008b26:	f003 030f 	and.w	r3, r3, #15
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8008b2e:	4b32      	ldr	r3, [pc, #200]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b32:	0b1b      	lsrs	r3, r3, #12
 8008b34:	f003 030f 	and.w	r3, r3, #15
 8008b38:	3302      	adds	r3, #2
 8008b3a:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8008b3c:	4a2f      	ldr	r2, [pc, #188]	; (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b46:	fb02 f303 	mul.w	r3, r2, r3
 8008b4a:	005b      	lsls	r3, r3, #1
 8008b4c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8008b4e:	e046      	b.n	8008bde <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8008b50:	4b29      	ldr	r3, [pc, #164]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008b52:	6a1b      	ldr	r3, [r3, #32]
 8008b54:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8008b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b60:	d108      	bne.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 8008b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b64:	f003 0302 	and.w	r3, r3, #2
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d003      	beq.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
      {
        frequency = LSE_VALUE;
 8008b6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b70:	643b      	str	r3, [r7, #64]	; 0x40
 8008b72:	e01f      	b.n	8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b7e:	d109      	bne.n	8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8008b80:	4b1d      	ldr	r3, [pc, #116]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b84:	f003 0302 	and.w	r3, r3, #2
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d003      	beq.n	8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
      {
        frequency = LSI_VALUE;
 8008b8c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8008b90:	643b      	str	r3, [r7, #64]	; 0x40
 8008b92:	e00f      	b.n	8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8008b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b9e:	d120      	bne.n	8008be2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 8008ba0:	4b15      	ldr	r3, [pc, #84]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d01a      	beq.n	8008be2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
      {
        frequency = HSE_VALUE / 128U;
 8008bac:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008bb0:	643b      	str	r3, [r7, #64]	; 0x40
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8008bb2:	e016      	b.n	8008be2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 8008bb4:	e015      	b.n	8008be2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8008bb6:	f7ff fd2f 	bl	8008618 <HAL_RCC_GetPCLK2Freq>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	4b0e      	ldr	r3, [pc, #56]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	0b9b      	lsrs	r3, r3, #14
 8008bc2:	f003 0303 	and.w	r3, r3, #3
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	005b      	lsls	r3, r3, #1
 8008bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bce:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8008bd0:	e008      	b.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
    }
    default:
    {
      break;
 8008bd2:	bf00      	nop
 8008bd4:	e006      	b.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8008bd6:	bf00      	nop
 8008bd8:	e004      	b.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8008bda:	bf00      	nop
 8008bdc:	e002      	b.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8008bde:	bf00      	nop
 8008be0:	e000      	b.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8008be2:	bf00      	nop
    }
  }
  return (frequency);
 8008be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	374c      	adds	r7, #76	; 0x4c
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd90      	pop	{r4, r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	0800f418 	.word	0x0800f418
 8008bf4:	0800f428 	.word	0x0800f428
 8008bf8:	40021000 	.word	0x40021000
 8008bfc:	007a1200 	.word	0x007a1200
 8008c00:	003d0900 	.word	0x003d0900
 8008c04:	aaaaaaab 	.word	0xaaaaaaab

08008c08 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8008c10:	2300      	movs	r3, #0
 8008c12:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d101      	bne.n	8008c1e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e084      	b.n	8008d28 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	7c5b      	ldrb	r3, [r3, #17]
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d105      	bne.n	8008c34 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f7fc f97a 	bl	8004f28 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2202      	movs	r2, #2
 8008c38:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 faa0 	bl	8009180 <HAL_RTC_WaitForSynchro>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d004      	beq.n	8008c50 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2204      	movs	r2, #4
 8008c4a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e06b      	b.n	8008d28 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 fb59 	bl	8009308 <RTC_EnterInitMode>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d004      	beq.n	8008c66 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2204      	movs	r2, #4
 8008c60:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e060      	b.n	8008d28 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	685a      	ldr	r2, [r3, #4]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f022 0207 	bic.w	r2, r2, #7
 8008c74:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d005      	beq.n	8008c8a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8008c7e:	4b2c      	ldr	r3, [pc, #176]	; (8008d30 <HAL_RTC_Init+0x128>)
 8008c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c82:	4a2b      	ldr	r2, [pc, #172]	; (8008d30 <HAL_RTC_Init+0x128>)
 8008c84:	f023 0301 	bic.w	r3, r3, #1
 8008c88:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8008c8a:	4b29      	ldr	r3, [pc, #164]	; (8008d30 <HAL_RTC_Init+0x128>)
 8008c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	689b      	ldr	r3, [r3, #8]
 8008c96:	4926      	ldr	r1, [pc, #152]	; (8008d30 <HAL_RTC_Init+0x128>)
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ca4:	d003      	beq.n	8008cae <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	60fb      	str	r3, [r7, #12]
 8008cac:	e00e      	b.n	8008ccc <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8008cae:	2001      	movs	r0, #1
 8008cb0:	f7ff fe46 	bl	8008940 <HAL_RCCEx_GetPeriphCLKFreq>
 8008cb4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d104      	bne.n	8008cc6 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2204      	movs	r2, #4
 8008cc0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e030      	b.n	8008d28 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	3b01      	subs	r3, #1
 8008cca:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	f023 010f 	bic.w	r1, r3, #15
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	0c1a      	lsrs	r2, r3, #16
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	430a      	orrs	r2, r1
 8008ce0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	0c1b      	lsrs	r3, r3, #16
 8008cea:	041b      	lsls	r3, r3, #16
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	b291      	uxth	r1, r2
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	6812      	ldr	r2, [r2, #0]
 8008cf4:	430b      	orrs	r3, r1
 8008cf6:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 fb2d 	bl	8009358 <RTC_ExitInitMode>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d004      	beq.n	8008d0e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2204      	movs	r2, #4
 8008d08:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e00c      	b.n	8008d28 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2201      	movs	r2, #1
 8008d24:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8008d26:	2300      	movs	r3, #0
  }
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	40006c00 	.word	0x40006c00

08008d34 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008d34:	b590      	push	{r4, r7, lr}
 8008d36:	b087      	sub	sp, #28
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8008d40:	2300      	movs	r3, #0
 8008d42:	617b      	str	r3, [r7, #20]
 8008d44:	2300      	movs	r3, #0
 8008d46:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d002      	beq.n	8008d54 <HAL_RTC_SetTime+0x20>
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d101      	bne.n	8008d58 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8008d54:	2301      	movs	r3, #1
 8008d56:	e080      	b.n	8008e5a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	7c1b      	ldrb	r3, [r3, #16]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d101      	bne.n	8008d64 <HAL_RTC_SetTime+0x30>
 8008d60:	2302      	movs	r3, #2
 8008d62:	e07a      	b.n	8008e5a <HAL_RTC_SetTime+0x126>
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2201      	movs	r2, #1
 8008d68:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2202      	movs	r2, #2
 8008d6e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d113      	bne.n	8008d9e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008d80:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	785b      	ldrb	r3, [r3, #1]
 8008d88:	4619      	mov	r1, r3
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	011b      	lsls	r3, r3, #4
 8008d8e:	1a5b      	subs	r3, r3, r1
 8008d90:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8008d92:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8008d94:	68ba      	ldr	r2, [r7, #8]
 8008d96:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8008d98:	4413      	add	r3, r2
 8008d9a:	617b      	str	r3, [r7, #20]
 8008d9c:	e01e      	b.n	8008ddc <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	4618      	mov	r0, r3
 8008da4:	f000 fb1d 	bl	80093e2 <RTC_Bcd2ToByte>
 8008da8:	4603      	mov	r3, r0
 8008daa:	461a      	mov	r2, r3
 8008dac:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008db0:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	785b      	ldrb	r3, [r3, #1]
 8008db8:	4618      	mov	r0, r3
 8008dba:	f000 fb12 	bl	80093e2 <RTC_Bcd2ToByte>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	011b      	lsls	r3, r3, #4
 8008dc6:	1a9b      	subs	r3, r3, r2
 8008dc8:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8008dca:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	789b      	ldrb	r3, [r3, #2]
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f000 fb06 	bl	80093e2 <RTC_Bcd2ToByte>
 8008dd6:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8008dd8:	4423      	add	r3, r4
 8008dda:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8008ddc:	6979      	ldr	r1, [r7, #20]
 8008dde:	68f8      	ldr	r0, [r7, #12]
 8008de0:	f000 fa2b 	bl	800923a <RTC_WriteTimeCounter>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d007      	beq.n	8008dfa <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2204      	movs	r2, #4
 8008dee:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2200      	movs	r2, #0
 8008df4:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	e02f      	b.n	8008e5a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	685a      	ldr	r2, [r3, #4]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f022 0205 	bic.w	r2, r2, #5
 8008e08:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	f000 fa3c 	bl	8009288 <RTC_ReadAlarmCounter>
 8008e10:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e18:	d018      	beq.n	8008e4c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8008e1a:	693a      	ldr	r2, [r7, #16]
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d214      	bcs.n	8008e4c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8008e28:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008e2c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8008e2e:	6939      	ldr	r1, [r7, #16]
 8008e30:	68f8      	ldr	r0, [r7, #12]
 8008e32:	f000 fa42 	bl	80092ba <RTC_WriteAlarmCounter>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d007      	beq.n	8008e4c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2204      	movs	r2, #4
 8008e40:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2200      	movs	r2, #0
 8008e46:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e006      	b.n	8008e5a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2200      	movs	r2, #0
 8008e56:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8008e58:	2300      	movs	r3, #0
  }
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	371c      	adds	r7, #28
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd90      	pop	{r4, r7, pc}
	...

08008e64 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b088      	sub	sp, #32
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8008e70:	2300      	movs	r3, #0
 8008e72:	61bb      	str	r3, [r7, #24]
 8008e74:	2300      	movs	r3, #0
 8008e76:	61fb      	str	r3, [r7, #28]
 8008e78:	2300      	movs	r3, #0
 8008e7a:	617b      	str	r3, [r7, #20]
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d002      	beq.n	8008e8c <HAL_RTC_GetTime+0x28>
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d101      	bne.n	8008e90 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e0b5      	b.n	8008ffc <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	f003 0304 	and.w	r3, r3, #4
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d001      	beq.n	8008ea2 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e0ac      	b.n	8008ffc <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8008ea2:	68f8      	ldr	r0, [r7, #12]
 8008ea4:	f000 f999 	bl	80091da <RTC_ReadTimeCounter>
 8008ea8:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	4a55      	ldr	r2, [pc, #340]	; (8009004 <HAL_RTC_GetTime+0x1a0>)
 8008eae:	fba2 2303 	umull	r2, r3, r2, r3
 8008eb2:	0adb      	lsrs	r3, r3, #11
 8008eb4:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8008eb6:	69ba      	ldr	r2, [r7, #24]
 8008eb8:	4b52      	ldr	r3, [pc, #328]	; (8009004 <HAL_RTC_GetTime+0x1a0>)
 8008eba:	fba3 1302 	umull	r1, r3, r3, r2
 8008ebe:	0adb      	lsrs	r3, r3, #11
 8008ec0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8008ec4:	fb01 f303 	mul.w	r3, r1, r3
 8008ec8:	1ad3      	subs	r3, r2, r3
 8008eca:	4a4f      	ldr	r2, [pc, #316]	; (8009008 <HAL_RTC_GetTime+0x1a4>)
 8008ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8008ed0:	095b      	lsrs	r3, r3, #5
 8008ed2:	b2da      	uxtb	r2, r3
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	4a4a      	ldr	r2, [pc, #296]	; (8009004 <HAL_RTC_GetTime+0x1a0>)
 8008edc:	fba2 1203 	umull	r1, r2, r2, r3
 8008ee0:	0ad2      	lsrs	r2, r2, #11
 8008ee2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8008ee6:	fb01 f202 	mul.w	r2, r1, r2
 8008eea:	1a9a      	subs	r2, r3, r2
 8008eec:	4b46      	ldr	r3, [pc, #280]	; (8009008 <HAL_RTC_GetTime+0x1a4>)
 8008eee:	fba3 1302 	umull	r1, r3, r3, r2
 8008ef2:	0959      	lsrs	r1, r3, #5
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	011b      	lsls	r3, r3, #4
 8008ef8:	1a5b      	subs	r3, r3, r1
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	1ad1      	subs	r1, r2, r3
 8008efe:	b2ca      	uxtb	r2, r1
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	2b17      	cmp	r3, #23
 8008f08:	d955      	bls.n	8008fb6 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	4a3f      	ldr	r2, [pc, #252]	; (800900c <HAL_RTC_GetTime+0x1a8>)
 8008f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f12:	091b      	lsrs	r3, r3, #4
 8008f14:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8008f16:	6939      	ldr	r1, [r7, #16]
 8008f18:	4b3c      	ldr	r3, [pc, #240]	; (800900c <HAL_RTC_GetTime+0x1a8>)
 8008f1a:	fba3 2301 	umull	r2, r3, r3, r1
 8008f1e:	091a      	lsrs	r2, r3, #4
 8008f20:	4613      	mov	r3, r2
 8008f22:	005b      	lsls	r3, r3, #1
 8008f24:	4413      	add	r3, r2
 8008f26:	00db      	lsls	r3, r3, #3
 8008f28:	1aca      	subs	r2, r1, r3
 8008f2a:	b2d2      	uxtb	r2, r2
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8008f30:	68f8      	ldr	r0, [r7, #12]
 8008f32:	f000 f9a9 	bl	8009288 <RTC_ReadAlarmCounter>
 8008f36:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8008f38:	69fb      	ldr	r3, [r7, #28]
 8008f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f3e:	d008      	beq.n	8008f52 <HAL_RTC_GetTime+0xee>
 8008f40:	69fa      	ldr	r2, [r7, #28]
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d904      	bls.n	8008f52 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8008f48:	69fa      	ldr	r2, [r7, #28]
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	1ad3      	subs	r3, r2, r3
 8008f4e:	61fb      	str	r3, [r7, #28]
 8008f50:	e002      	b.n	8008f58 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8008f52:	f04f 33ff 	mov.w	r3, #4294967295
 8008f56:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	4a2d      	ldr	r2, [pc, #180]	; (8009010 <HAL_RTC_GetTime+0x1ac>)
 8008f5c:	fb02 f303 	mul.w	r3, r2, r3
 8008f60:	69ba      	ldr	r2, [r7, #24]
 8008f62:	1ad3      	subs	r3, r2, r3
 8008f64:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8008f66:	69b9      	ldr	r1, [r7, #24]
 8008f68:	68f8      	ldr	r0, [r7, #12]
 8008f6a:	f000 f966 	bl	800923a <RTC_WriteTimeCounter>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d001      	beq.n	8008f78 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	e041      	b.n	8008ffc <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f7e:	d00c      	beq.n	8008f9a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8008f80:	69fa      	ldr	r2, [r7, #28]
 8008f82:	69bb      	ldr	r3, [r7, #24]
 8008f84:	4413      	add	r3, r2
 8008f86:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8008f88:	69f9      	ldr	r1, [r7, #28]
 8008f8a:	68f8      	ldr	r0, [r7, #12]
 8008f8c:	f000 f995 	bl	80092ba <RTC_WriteAlarmCounter>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00a      	beq.n	8008fac <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	e030      	b.n	8008ffc <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8008f9a:	69f9      	ldr	r1, [r7, #28]
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f000 f98c 	bl	80092ba <RTC_WriteAlarmCounter>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d001      	beq.n	8008fac <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	e027      	b.n	8008ffc <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8008fac:	6979      	ldr	r1, [r7, #20]
 8008fae:	68f8      	ldr	r0, [r7, #12]
 8008fb0:	f000 fa34 	bl	800941c <RTC_DateUpdate>
 8008fb4:	e003      	b.n	8008fbe <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	b2da      	uxtb	r2, r3
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d01a      	beq.n	8008ffa <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f000 f9ed 	bl	80093a8 <RTC_ByteToBcd2>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	785b      	ldrb	r3, [r3, #1]
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f000 f9e4 	bl	80093a8 <RTC_ByteToBcd2>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	789b      	ldrb	r3, [r3, #2]
 8008fec:	4618      	mov	r0, r3
 8008fee:	f000 f9db 	bl	80093a8 <RTC_ByteToBcd2>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008ffa:	2300      	movs	r3, #0
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3720      	adds	r7, #32
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	91a2b3c5 	.word	0x91a2b3c5
 8009008:	88888889 	.word	0x88888889
 800900c:	aaaaaaab 	.word	0xaaaaaaab
 8009010:	00015180 	.word	0x00015180

08009014 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b088      	sub	sp, #32
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8009020:	2300      	movs	r3, #0
 8009022:	61fb      	str	r3, [r7, #28]
 8009024:	2300      	movs	r3, #0
 8009026:	61bb      	str	r3, [r7, #24]
 8009028:	2300      	movs	r3, #0
 800902a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d002      	beq.n	8009038 <HAL_RTC_SetDate+0x24>
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d101      	bne.n	800903c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8009038:	2301      	movs	r3, #1
 800903a:	e097      	b.n	800916c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	7c1b      	ldrb	r3, [r3, #16]
 8009040:	2b01      	cmp	r3, #1
 8009042:	d101      	bne.n	8009048 <HAL_RTC_SetDate+0x34>
 8009044:	2302      	movs	r3, #2
 8009046:	e091      	b.n	800916c <HAL_RTC_SetDate+0x158>
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2201      	movs	r2, #1
 800904c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2202      	movs	r2, #2
 8009052:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d10c      	bne.n	8009074 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	78da      	ldrb	r2, [r3, #3]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	785a      	ldrb	r2, [r3, #1]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	789a      	ldrb	r2, [r3, #2]
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	739a      	strb	r2, [r3, #14]
 8009072:	e01a      	b.n	80090aa <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	78db      	ldrb	r3, [r3, #3]
 8009078:	4618      	mov	r0, r3
 800907a:	f000 f9b2 	bl	80093e2 <RTC_Bcd2ToByte>
 800907e:	4603      	mov	r3, r0
 8009080:	461a      	mov	r2, r3
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	785b      	ldrb	r3, [r3, #1]
 800908a:	4618      	mov	r0, r3
 800908c:	f000 f9a9 	bl	80093e2 <RTC_Bcd2ToByte>
 8009090:	4603      	mov	r3, r0
 8009092:	461a      	mov	r2, r3
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	789b      	ldrb	r3, [r3, #2]
 800909c:	4618      	mov	r0, r3
 800909e:	f000 f9a0 	bl	80093e2 <RTC_Bcd2ToByte>
 80090a2:	4603      	mov	r3, r0
 80090a4:	461a      	mov	r2, r3
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	7bdb      	ldrb	r3, [r3, #15]
 80090ae:	4618      	mov	r0, r3
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	7b59      	ldrb	r1, [r3, #13]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	7b9b      	ldrb	r3, [r3, #14]
 80090b8:	461a      	mov	r2, r3
 80090ba:	f000 fa8b 	bl	80095d4 <RTC_WeekDayNum>
 80090be:	4603      	mov	r3, r0
 80090c0:	461a      	mov	r2, r3
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	7b1a      	ldrb	r2, [r3, #12]
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	f000 f883 	bl	80091da <RTC_ReadTimeCounter>
 80090d4:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	4a26      	ldr	r2, [pc, #152]	; (8009174 <HAL_RTC_SetDate+0x160>)
 80090da:	fba2 2303 	umull	r2, r3, r2, r3
 80090de:	0adb      	lsrs	r3, r3, #11
 80090e0:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	2b18      	cmp	r3, #24
 80090e6:	d93a      	bls.n	800915e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	4a23      	ldr	r2, [pc, #140]	; (8009178 <HAL_RTC_SetDate+0x164>)
 80090ec:	fba2 2303 	umull	r2, r3, r2, r3
 80090f0:	091b      	lsrs	r3, r3, #4
 80090f2:	4a22      	ldr	r2, [pc, #136]	; (800917c <HAL_RTC_SetDate+0x168>)
 80090f4:	fb02 f303 	mul.w	r3, r2, r3
 80090f8:	69fa      	ldr	r2, [r7, #28]
 80090fa:	1ad3      	subs	r3, r2, r3
 80090fc:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80090fe:	69f9      	ldr	r1, [r7, #28]
 8009100:	68f8      	ldr	r0, [r7, #12]
 8009102:	f000 f89a 	bl	800923a <RTC_WriteTimeCounter>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d007      	beq.n	800911c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2204      	movs	r2, #4
 8009110:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2200      	movs	r2, #0
 8009116:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8009118:	2301      	movs	r3, #1
 800911a:	e027      	b.n	800916c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	f000 f8b3 	bl	8009288 <RTC_ReadAlarmCounter>
 8009122:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8009124:	69bb      	ldr	r3, [r7, #24]
 8009126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800912a:	d018      	beq.n	800915e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 800912c:	69ba      	ldr	r2, [r7, #24]
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	429a      	cmp	r2, r3
 8009132:	d214      	bcs.n	800915e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8009134:	69bb      	ldr	r3, [r7, #24]
 8009136:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800913a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800913e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8009140:	69b9      	ldr	r1, [r7, #24]
 8009142:	68f8      	ldr	r0, [r7, #12]
 8009144:	f000 f8b9 	bl	80092ba <RTC_WriteAlarmCounter>
 8009148:	4603      	mov	r3, r0
 800914a:	2b00      	cmp	r3, #0
 800914c:	d007      	beq.n	800915e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2204      	movs	r2, #4
 8009152:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2200      	movs	r2, #0
 8009158:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	e006      	b.n	800916c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2201      	movs	r2, #1
 8009162:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2200      	movs	r2, #0
 8009168:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3720      	adds	r7, #32
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}
 8009174:	91a2b3c5 	.word	0x91a2b3c5
 8009178:	aaaaaaab 	.word	0xaaaaaaab
 800917c:	00015180 	.word	0x00015180

08009180 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009188:	2300      	movs	r3, #0
 800918a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d101      	bne.n	8009196 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	e01d      	b.n	80091d2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	685a      	ldr	r2, [r3, #4]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f022 0208 	bic.w	r2, r2, #8
 80091a4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80091a6:	f7fc f8ad 	bl	8005304 <HAL_GetTick>
 80091aa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80091ac:	e009      	b.n	80091c2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80091ae:	f7fc f8a9 	bl	8005304 <HAL_GetTick>
 80091b2:	4602      	mov	r2, r0
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091bc:	d901      	bls.n	80091c2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80091be:	2303      	movs	r3, #3
 80091c0:	e007      	b.n	80091d2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	f003 0308 	and.w	r3, r3, #8
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d0ee      	beq.n	80091ae <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80091da:	b480      	push	{r7}
 80091dc:	b087      	sub	sp, #28
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80091e2:	2300      	movs	r3, #0
 80091e4:	827b      	strh	r3, [r7, #18]
 80091e6:	2300      	movs	r3, #0
 80091e8:	823b      	strh	r3, [r7, #16]
 80091ea:	2300      	movs	r3, #0
 80091ec:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80091ee:	2300      	movs	r3, #0
 80091f0:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	699b      	ldr	r3, [r3, #24]
 80091f8:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	69db      	ldr	r3, [r3, #28]
 8009200:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	699b      	ldr	r3, [r3, #24]
 8009208:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800920a:	8a7a      	ldrh	r2, [r7, #18]
 800920c:	8a3b      	ldrh	r3, [r7, #16]
 800920e:	429a      	cmp	r2, r3
 8009210:	d008      	beq.n	8009224 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8009212:	8a3b      	ldrh	r3, [r7, #16]
 8009214:	041a      	lsls	r2, r3, #16
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	69db      	ldr	r3, [r3, #28]
 800921c:	b29b      	uxth	r3, r3
 800921e:	4313      	orrs	r3, r2
 8009220:	617b      	str	r3, [r7, #20]
 8009222:	e004      	b.n	800922e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8009224:	8a7b      	ldrh	r3, [r7, #18]
 8009226:	041a      	lsls	r2, r3, #16
 8009228:	89fb      	ldrh	r3, [r7, #14]
 800922a:	4313      	orrs	r3, r2
 800922c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800922e:	697b      	ldr	r3, [r7, #20]
}
 8009230:	4618      	mov	r0, r3
 8009232:	371c      	adds	r7, #28
 8009234:	46bd      	mov	sp, r7
 8009236:	bc80      	pop	{r7}
 8009238:	4770      	bx	lr

0800923a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800923a:	b580      	push	{r7, lr}
 800923c:	b084      	sub	sp, #16
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
 8009242:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009244:	2300      	movs	r3, #0
 8009246:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 f85d 	bl	8009308 <RTC_EnterInitMode>
 800924e:	4603      	mov	r3, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d002      	beq.n	800925a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8009254:	2301      	movs	r3, #1
 8009256:	73fb      	strb	r3, [r7, #15]
 8009258:	e011      	b.n	800927e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	683a      	ldr	r2, [r7, #0]
 8009260:	0c12      	lsrs	r2, r2, #16
 8009262:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	683a      	ldr	r2, [r7, #0]
 800926a:	b292      	uxth	r2, r2
 800926c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 f872 	bl	8009358 <RTC_ExitInitMode>
 8009274:	4603      	mov	r3, r0
 8009276:	2b00      	cmp	r3, #0
 8009278:	d001      	beq.n	800927e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800927e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009280:	4618      	mov	r0, r3
 8009282:	3710      	adds	r7, #16
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8009288:	b480      	push	{r7}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8009290:	2300      	movs	r3, #0
 8009292:	81fb      	strh	r3, [r7, #14]
 8009294:	2300      	movs	r3, #0
 8009296:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	6a1b      	ldr	r3, [r3, #32]
 800929e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a6:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80092a8:	89fb      	ldrh	r3, [r7, #14]
 80092aa:	041a      	lsls	r2, r3, #16
 80092ac:	89bb      	ldrh	r3, [r7, #12]
 80092ae:	4313      	orrs	r3, r2
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3714      	adds	r7, #20
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bc80      	pop	{r7}
 80092b8:	4770      	bx	lr

080092ba <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b084      	sub	sp, #16
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
 80092c2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092c4:	2300      	movs	r3, #0
 80092c6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 f81d 	bl	8009308 <RTC_EnterInitMode>
 80092ce:	4603      	mov	r3, r0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d002      	beq.n	80092da <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80092d4:	2301      	movs	r3, #1
 80092d6:	73fb      	strb	r3, [r7, #15]
 80092d8:	e011      	b.n	80092fe <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	683a      	ldr	r2, [r7, #0]
 80092e0:	0c12      	lsrs	r2, r2, #16
 80092e2:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	683a      	ldr	r2, [r7, #0]
 80092ea:	b292      	uxth	r2, r2
 80092ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 f832 	bl	8009358 <RTC_ExitInitMode>
 80092f4:	4603      	mov	r3, r0
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d001      	beq.n	80092fe <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80092fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009300:	4618      	mov	r0, r3
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009310:	2300      	movs	r3, #0
 8009312:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8009314:	f7fb fff6 	bl	8005304 <HAL_GetTick>
 8009318:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800931a:	e009      	b.n	8009330 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800931c:	f7fb fff2 	bl	8005304 <HAL_GetTick>
 8009320:	4602      	mov	r2, r0
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	1ad3      	subs	r3, r2, r3
 8009326:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800932a:	d901      	bls.n	8009330 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800932c:	2303      	movs	r3, #3
 800932e:	e00f      	b.n	8009350 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	f003 0320 	and.w	r3, r3, #32
 800933a:	2b00      	cmp	r3, #0
 800933c:	d0ee      	beq.n	800931c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	685a      	ldr	r2, [r3, #4]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f042 0210 	orr.w	r2, r2, #16
 800934c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800934e:	2300      	movs	r3, #0
}
 8009350:	4618      	mov	r0, r3
 8009352:	3710      	adds	r7, #16
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009360:	2300      	movs	r3, #0
 8009362:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	685a      	ldr	r2, [r3, #4]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f022 0210 	bic.w	r2, r2, #16
 8009372:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8009374:	f7fb ffc6 	bl	8005304 <HAL_GetTick>
 8009378:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800937a:	e009      	b.n	8009390 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800937c:	f7fb ffc2 	bl	8005304 <HAL_GetTick>
 8009380:	4602      	mov	r2, r0
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800938a:	d901      	bls.n	8009390 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800938c:	2303      	movs	r3, #3
 800938e:	e007      	b.n	80093a0 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	f003 0320 	and.w	r3, r3, #32
 800939a:	2b00      	cmp	r3, #0
 800939c:	d0ee      	beq.n	800937c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800939e:	2300      	movs	r3, #0
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3710      	adds	r7, #16
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b085      	sub	sp, #20
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	4603      	mov	r3, r0
 80093b0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80093b2:	2300      	movs	r3, #0
 80093b4:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80093b6:	e005      	b.n	80093c4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	3301      	adds	r3, #1
 80093bc:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80093be:	79fb      	ldrb	r3, [r7, #7]
 80093c0:	3b0a      	subs	r3, #10
 80093c2:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80093c4:	79fb      	ldrb	r3, [r7, #7]
 80093c6:	2b09      	cmp	r3, #9
 80093c8:	d8f6      	bhi.n	80093b8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	011b      	lsls	r3, r3, #4
 80093d0:	b2da      	uxtb	r2, r3
 80093d2:	79fb      	ldrb	r3, [r7, #7]
 80093d4:	4313      	orrs	r3, r2
 80093d6:	b2db      	uxtb	r3, r3
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3714      	adds	r7, #20
 80093dc:	46bd      	mov	sp, r7
 80093de:	bc80      	pop	{r7}
 80093e0:	4770      	bx	lr

080093e2 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80093e2:	b480      	push	{r7}
 80093e4:	b085      	sub	sp, #20
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	4603      	mov	r3, r0
 80093ea:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80093ec:	2300      	movs	r3, #0
 80093ee:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80093f0:	79fb      	ldrb	r3, [r7, #7]
 80093f2:	091b      	lsrs	r3, r3, #4
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	461a      	mov	r2, r3
 80093f8:	4613      	mov	r3, r2
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	4413      	add	r3, r2
 80093fe:	005b      	lsls	r3, r3, #1
 8009400:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8009402:	79fb      	ldrb	r3, [r7, #7]
 8009404:	f003 030f 	and.w	r3, r3, #15
 8009408:	b2da      	uxtb	r2, r3
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	b2db      	uxtb	r3, r3
 800940e:	4413      	add	r3, r2
 8009410:	b2db      	uxtb	r3, r3
}
 8009412:	4618      	mov	r0, r3
 8009414:	3714      	adds	r7, #20
 8009416:	46bd      	mov	sp, r7
 8009418:	bc80      	pop	{r7}
 800941a:	4770      	bx	lr

0800941c <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b086      	sub	sp, #24
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8009426:	2300      	movs	r3, #0
 8009428:	617b      	str	r3, [r7, #20]
 800942a:	2300      	movs	r3, #0
 800942c:	613b      	str	r3, [r7, #16]
 800942e:	2300      	movs	r3, #0
 8009430:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8009432:	2300      	movs	r3, #0
 8009434:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	7bdb      	ldrb	r3, [r3, #15]
 800943a:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	7b5b      	ldrb	r3, [r3, #13]
 8009440:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	7b9b      	ldrb	r3, [r3, #14]
 8009446:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8009448:	2300      	movs	r3, #0
 800944a:	60bb      	str	r3, [r7, #8]
 800944c:	e06f      	b.n	800952e <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	2b01      	cmp	r3, #1
 8009452:	d011      	beq.n	8009478 <RTC_DateUpdate+0x5c>
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	2b03      	cmp	r3, #3
 8009458:	d00e      	beq.n	8009478 <RTC_DateUpdate+0x5c>
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	2b05      	cmp	r3, #5
 800945e:	d00b      	beq.n	8009478 <RTC_DateUpdate+0x5c>
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	2b07      	cmp	r3, #7
 8009464:	d008      	beq.n	8009478 <RTC_DateUpdate+0x5c>
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	2b08      	cmp	r3, #8
 800946a:	d005      	beq.n	8009478 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	2b0a      	cmp	r3, #10
 8009470:	d002      	beq.n	8009478 <RTC_DateUpdate+0x5c>
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	2b0c      	cmp	r3, #12
 8009476:	d117      	bne.n	80094a8 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2b1e      	cmp	r3, #30
 800947c:	d803      	bhi.n	8009486 <RTC_DateUpdate+0x6a>
      {
        day++;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	3301      	adds	r3, #1
 8009482:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8009484:	e050      	b.n	8009528 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	2b0c      	cmp	r3, #12
 800948a:	d005      	beq.n	8009498 <RTC_DateUpdate+0x7c>
        {
          month++;
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	3301      	adds	r3, #1
 8009490:	613b      	str	r3, [r7, #16]
          day = 1U;
 8009492:	2301      	movs	r3, #1
 8009494:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8009496:	e047      	b.n	8009528 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8009498:	2301      	movs	r3, #1
 800949a:	613b      	str	r3, [r7, #16]
          day = 1U;
 800949c:	2301      	movs	r3, #1
 800949e:	60fb      	str	r3, [r7, #12]
          year++;
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	3301      	adds	r3, #1
 80094a4:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80094a6:	e03f      	b.n	8009528 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	2b04      	cmp	r3, #4
 80094ac:	d008      	beq.n	80094c0 <RTC_DateUpdate+0xa4>
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	2b06      	cmp	r3, #6
 80094b2:	d005      	beq.n	80094c0 <RTC_DateUpdate+0xa4>
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	2b09      	cmp	r3, #9
 80094b8:	d002      	beq.n	80094c0 <RTC_DateUpdate+0xa4>
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	2b0b      	cmp	r3, #11
 80094be:	d10c      	bne.n	80094da <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2b1d      	cmp	r3, #29
 80094c4:	d803      	bhi.n	80094ce <RTC_DateUpdate+0xb2>
      {
        day++;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	3301      	adds	r3, #1
 80094ca:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80094cc:	e02c      	b.n	8009528 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	3301      	adds	r3, #1
 80094d2:	613b      	str	r3, [r7, #16]
        day = 1U;
 80094d4:	2301      	movs	r3, #1
 80094d6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80094d8:	e026      	b.n	8009528 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	2b02      	cmp	r3, #2
 80094de:	d123      	bne.n	8009528 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2b1b      	cmp	r3, #27
 80094e4:	d803      	bhi.n	80094ee <RTC_DateUpdate+0xd2>
      {
        day++;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	3301      	adds	r3, #1
 80094ea:	60fb      	str	r3, [r7, #12]
 80094ec:	e01c      	b.n	8009528 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2b1c      	cmp	r3, #28
 80094f2:	d111      	bne.n	8009518 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	4618      	mov	r0, r3
 80094fa:	f000 f839 	bl	8009570 <RTC_IsLeapYear>
 80094fe:	4603      	mov	r3, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d003      	beq.n	800950c <RTC_DateUpdate+0xf0>
        {
          day++;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	3301      	adds	r3, #1
 8009508:	60fb      	str	r3, [r7, #12]
 800950a:	e00d      	b.n	8009528 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	3301      	adds	r3, #1
 8009510:	613b      	str	r3, [r7, #16]
          day = 1U;
 8009512:	2301      	movs	r3, #1
 8009514:	60fb      	str	r3, [r7, #12]
 8009516:	e007      	b.n	8009528 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2b1d      	cmp	r3, #29
 800951c:	d104      	bne.n	8009528 <RTC_DateUpdate+0x10c>
      {
        month++;
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	3301      	adds	r3, #1
 8009522:	613b      	str	r3, [r7, #16]
        day = 1U;
 8009524:	2301      	movs	r3, #1
 8009526:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	3301      	adds	r3, #1
 800952c:	60bb      	str	r3, [r7, #8]
 800952e:	68ba      	ldr	r2, [r7, #8]
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	429a      	cmp	r2, r3
 8009534:	d38b      	bcc.n	800944e <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	b2da      	uxtb	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	b2da      	uxtb	r2, r3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	b2da      	uxtb	r2, r3
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	b2db      	uxtb	r3, r3
 8009552:	68fa      	ldr	r2, [r7, #12]
 8009554:	b2d2      	uxtb	r2, r2
 8009556:	4619      	mov	r1, r3
 8009558:	6978      	ldr	r0, [r7, #20]
 800955a:	f000 f83b 	bl	80095d4 <RTC_WeekDayNum>
 800955e:	4603      	mov	r3, r0
 8009560:	461a      	mov	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	731a      	strb	r2, [r3, #12]
}
 8009566:	bf00      	nop
 8009568:	3718      	adds	r7, #24
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
	...

08009570 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
 8009576:	4603      	mov	r3, r0
 8009578:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800957a:	88fb      	ldrh	r3, [r7, #6]
 800957c:	f003 0303 	and.w	r3, r3, #3
 8009580:	b29b      	uxth	r3, r3
 8009582:	2b00      	cmp	r3, #0
 8009584:	d001      	beq.n	800958a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8009586:	2300      	movs	r3, #0
 8009588:	e01d      	b.n	80095c6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800958a:	88fb      	ldrh	r3, [r7, #6]
 800958c:	4a10      	ldr	r2, [pc, #64]	; (80095d0 <RTC_IsLeapYear+0x60>)
 800958e:	fba2 1203 	umull	r1, r2, r2, r3
 8009592:	0952      	lsrs	r2, r2, #5
 8009594:	2164      	movs	r1, #100	; 0x64
 8009596:	fb01 f202 	mul.w	r2, r1, r2
 800959a:	1a9b      	subs	r3, r3, r2
 800959c:	b29b      	uxth	r3, r3
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d001      	beq.n	80095a6 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80095a2:	2301      	movs	r3, #1
 80095a4:	e00f      	b.n	80095c6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80095a6:	88fb      	ldrh	r3, [r7, #6]
 80095a8:	4a09      	ldr	r2, [pc, #36]	; (80095d0 <RTC_IsLeapYear+0x60>)
 80095aa:	fba2 1203 	umull	r1, r2, r2, r3
 80095ae:	09d2      	lsrs	r2, r2, #7
 80095b0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80095b4:	fb01 f202 	mul.w	r2, r1, r2
 80095b8:	1a9b      	subs	r3, r3, r2
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d101      	bne.n	80095c4 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80095c0:	2301      	movs	r3, #1
 80095c2:	e000      	b.n	80095c6 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80095c4:	2300      	movs	r3, #0
  }
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bc80      	pop	{r7}
 80095ce:	4770      	bx	lr
 80095d0:	51eb851f 	.word	0x51eb851f

080095d4 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	460b      	mov	r3, r1
 80095de:	70fb      	strb	r3, [r7, #3]
 80095e0:	4613      	mov	r3, r2
 80095e2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80095e4:	2300      	movs	r3, #0
 80095e6:	60bb      	str	r3, [r7, #8]
 80095e8:	2300      	movs	r3, #0
 80095ea:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80095f2:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80095f4:	78fb      	ldrb	r3, [r7, #3]
 80095f6:	2b02      	cmp	r3, #2
 80095f8:	d82d      	bhi.n	8009656 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80095fa:	78fa      	ldrb	r2, [r7, #3]
 80095fc:	4613      	mov	r3, r2
 80095fe:	005b      	lsls	r3, r3, #1
 8009600:	4413      	add	r3, r2
 8009602:	00db      	lsls	r3, r3, #3
 8009604:	1a9b      	subs	r3, r3, r2
 8009606:	4a2c      	ldr	r2, [pc, #176]	; (80096b8 <RTC_WeekDayNum+0xe4>)
 8009608:	fba2 2303 	umull	r2, r3, r2, r3
 800960c:	085a      	lsrs	r2, r3, #1
 800960e:	78bb      	ldrb	r3, [r7, #2]
 8009610:	441a      	add	r2, r3
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	441a      	add	r2, r3
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	3b01      	subs	r3, #1
 800961a:	089b      	lsrs	r3, r3, #2
 800961c:	441a      	add	r2, r3
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	3b01      	subs	r3, #1
 8009622:	4926      	ldr	r1, [pc, #152]	; (80096bc <RTC_WeekDayNum+0xe8>)
 8009624:	fba1 1303 	umull	r1, r3, r1, r3
 8009628:	095b      	lsrs	r3, r3, #5
 800962a:	1ad2      	subs	r2, r2, r3
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	3b01      	subs	r3, #1
 8009630:	4922      	ldr	r1, [pc, #136]	; (80096bc <RTC_WeekDayNum+0xe8>)
 8009632:	fba1 1303 	umull	r1, r3, r1, r3
 8009636:	09db      	lsrs	r3, r3, #7
 8009638:	4413      	add	r3, r2
 800963a:	1d1a      	adds	r2, r3, #4
 800963c:	4b20      	ldr	r3, [pc, #128]	; (80096c0 <RTC_WeekDayNum+0xec>)
 800963e:	fba3 1302 	umull	r1, r3, r3, r2
 8009642:	1ad1      	subs	r1, r2, r3
 8009644:	0849      	lsrs	r1, r1, #1
 8009646:	440b      	add	r3, r1
 8009648:	0899      	lsrs	r1, r3, #2
 800964a:	460b      	mov	r3, r1
 800964c:	00db      	lsls	r3, r3, #3
 800964e:	1a5b      	subs	r3, r3, r1
 8009650:	1ad3      	subs	r3, r2, r3
 8009652:	60fb      	str	r3, [r7, #12]
 8009654:	e029      	b.n	80096aa <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8009656:	78fa      	ldrb	r2, [r7, #3]
 8009658:	4613      	mov	r3, r2
 800965a:	005b      	lsls	r3, r3, #1
 800965c:	4413      	add	r3, r2
 800965e:	00db      	lsls	r3, r3, #3
 8009660:	1a9b      	subs	r3, r3, r2
 8009662:	4a15      	ldr	r2, [pc, #84]	; (80096b8 <RTC_WeekDayNum+0xe4>)
 8009664:	fba2 2303 	umull	r2, r3, r2, r3
 8009668:	085a      	lsrs	r2, r3, #1
 800966a:	78bb      	ldrb	r3, [r7, #2]
 800966c:	441a      	add	r2, r3
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	441a      	add	r2, r3
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	089b      	lsrs	r3, r3, #2
 8009676:	441a      	add	r2, r3
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	4910      	ldr	r1, [pc, #64]	; (80096bc <RTC_WeekDayNum+0xe8>)
 800967c:	fba1 1303 	umull	r1, r3, r1, r3
 8009680:	095b      	lsrs	r3, r3, #5
 8009682:	1ad2      	subs	r2, r2, r3
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	490d      	ldr	r1, [pc, #52]	; (80096bc <RTC_WeekDayNum+0xe8>)
 8009688:	fba1 1303 	umull	r1, r3, r1, r3
 800968c:	09db      	lsrs	r3, r3, #7
 800968e:	4413      	add	r3, r2
 8009690:	1c9a      	adds	r2, r3, #2
 8009692:	4b0b      	ldr	r3, [pc, #44]	; (80096c0 <RTC_WeekDayNum+0xec>)
 8009694:	fba3 1302 	umull	r1, r3, r3, r2
 8009698:	1ad1      	subs	r1, r2, r3
 800969a:	0849      	lsrs	r1, r1, #1
 800969c:	440b      	add	r3, r1
 800969e:	0899      	lsrs	r1, r3, #2
 80096a0:	460b      	mov	r3, r1
 80096a2:	00db      	lsls	r3, r3, #3
 80096a4:	1a5b      	subs	r3, r3, r1
 80096a6:	1ad3      	subs	r3, r2, r3
 80096a8:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	b2db      	uxtb	r3, r3
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3714      	adds	r7, #20
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bc80      	pop	{r7}
 80096b6:	4770      	bx	lr
 80096b8:	38e38e39 	.word	0x38e38e39
 80096bc:	51eb851f 	.word	0x51eb851f
 80096c0:	24924925 	.word	0x24924925

080096c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d101      	bne.n	80096d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	e041      	b.n	800975a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d106      	bne.n	80096f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 f839 	bl	8009762 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2202      	movs	r2, #2
 80096f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	3304      	adds	r3, #4
 8009700:	4619      	mov	r1, r3
 8009702:	4610      	mov	r0, r2
 8009704:	f000 f9bc 	bl	8009a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2201      	movs	r2, #1
 800970c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2201      	movs	r2, #1
 8009734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3708      	adds	r7, #8
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009762:	b480      	push	{r7}
 8009764:	b083      	sub	sp, #12
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800976a:	bf00      	nop
 800976c:	370c      	adds	r7, #12
 800976e:	46bd      	mov	sp, r7
 8009770:	bc80      	pop	{r7}
 8009772:	4770      	bx	lr

08009774 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009774:	b480      	push	{r7}
 8009776:	b085      	sub	sp, #20
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009782:	b2db      	uxtb	r3, r3
 8009784:	2b01      	cmp	r3, #1
 8009786:	d001      	beq.n	800978c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	e03f      	b.n	800980c <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2202      	movs	r2, #2
 8009790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	68da      	ldr	r2, [r3, #12]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f042 0201 	orr.w	r2, r2, #1
 80097a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a1b      	ldr	r2, [pc, #108]	; (8009818 <HAL_TIM_Base_Start_IT+0xa4>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d013      	beq.n	80097d6 <HAL_TIM_Base_Start_IT+0x62>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097b6:	d00e      	beq.n	80097d6 <HAL_TIM_Base_Start_IT+0x62>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a17      	ldr	r2, [pc, #92]	; (800981c <HAL_TIM_Base_Start_IT+0xa8>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d009      	beq.n	80097d6 <HAL_TIM_Base_Start_IT+0x62>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a16      	ldr	r2, [pc, #88]	; (8009820 <HAL_TIM_Base_Start_IT+0xac>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d004      	beq.n	80097d6 <HAL_TIM_Base_Start_IT+0x62>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a14      	ldr	r2, [pc, #80]	; (8009824 <HAL_TIM_Base_Start_IT+0xb0>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d111      	bne.n	80097fa <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	f003 0307 	and.w	r3, r3, #7
 80097e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2b06      	cmp	r3, #6
 80097e6:	d010      	beq.n	800980a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f042 0201 	orr.w	r2, r2, #1
 80097f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097f8:	e007      	b.n	800980a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	681a      	ldr	r2, [r3, #0]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f042 0201 	orr.w	r2, r2, #1
 8009808:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800980a:	2300      	movs	r3, #0
}
 800980c:	4618      	mov	r0, r3
 800980e:	3714      	adds	r7, #20
 8009810:	46bd      	mov	sp, r7
 8009812:	bc80      	pop	{r7}
 8009814:	4770      	bx	lr
 8009816:	bf00      	nop
 8009818:	40012c00 	.word	0x40012c00
 800981c:	40000400 	.word	0x40000400
 8009820:	40000800 	.word	0x40000800
 8009824:	40000c00 	.word	0x40000c00

08009828 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	691b      	ldr	r3, [r3, #16]
 8009836:	f003 0302 	and.w	r3, r3, #2
 800983a:	2b02      	cmp	r3, #2
 800983c:	d122      	bne.n	8009884 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	f003 0302 	and.w	r3, r3, #2
 8009848:	2b02      	cmp	r3, #2
 800984a:	d11b      	bne.n	8009884 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f06f 0202 	mvn.w	r2, #2
 8009854:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2201      	movs	r2, #1
 800985a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	699b      	ldr	r3, [r3, #24]
 8009862:	f003 0303 	and.w	r3, r3, #3
 8009866:	2b00      	cmp	r3, #0
 8009868:	d003      	beq.n	8009872 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 f8ed 	bl	8009a4a <HAL_TIM_IC_CaptureCallback>
 8009870:	e005      	b.n	800987e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 f8e0 	bl	8009a38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 f8ef 	bl	8009a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	691b      	ldr	r3, [r3, #16]
 800988a:	f003 0304 	and.w	r3, r3, #4
 800988e:	2b04      	cmp	r3, #4
 8009890:	d122      	bne.n	80098d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	f003 0304 	and.w	r3, r3, #4
 800989c:	2b04      	cmp	r3, #4
 800989e:	d11b      	bne.n	80098d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f06f 0204 	mvn.w	r2, #4
 80098a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2202      	movs	r2, #2
 80098ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	699b      	ldr	r3, [r3, #24]
 80098b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d003      	beq.n	80098c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 f8c3 	bl	8009a4a <HAL_TIM_IC_CaptureCallback>
 80098c4:	e005      	b.n	80098d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 f8b6 	bl	8009a38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 f8c5 	bl	8009a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2200      	movs	r2, #0
 80098d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	691b      	ldr	r3, [r3, #16]
 80098de:	f003 0308 	and.w	r3, r3, #8
 80098e2:	2b08      	cmp	r3, #8
 80098e4:	d122      	bne.n	800992c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	68db      	ldr	r3, [r3, #12]
 80098ec:	f003 0308 	and.w	r3, r3, #8
 80098f0:	2b08      	cmp	r3, #8
 80098f2:	d11b      	bne.n	800992c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f06f 0208 	mvn.w	r2, #8
 80098fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2204      	movs	r2, #4
 8009902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	69db      	ldr	r3, [r3, #28]
 800990a:	f003 0303 	and.w	r3, r3, #3
 800990e:	2b00      	cmp	r3, #0
 8009910:	d003      	beq.n	800991a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 f899 	bl	8009a4a <HAL_TIM_IC_CaptureCallback>
 8009918:	e005      	b.n	8009926 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 f88c 	bl	8009a38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 f89b 	bl	8009a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2200      	movs	r2, #0
 800992a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	691b      	ldr	r3, [r3, #16]
 8009932:	f003 0310 	and.w	r3, r3, #16
 8009936:	2b10      	cmp	r3, #16
 8009938:	d122      	bne.n	8009980 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	68db      	ldr	r3, [r3, #12]
 8009940:	f003 0310 	and.w	r3, r3, #16
 8009944:	2b10      	cmp	r3, #16
 8009946:	d11b      	bne.n	8009980 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f06f 0210 	mvn.w	r2, #16
 8009950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2208      	movs	r2, #8
 8009956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	69db      	ldr	r3, [r3, #28]
 800995e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009962:	2b00      	cmp	r3, #0
 8009964:	d003      	beq.n	800996e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 f86f 	bl	8009a4a <HAL_TIM_IC_CaptureCallback>
 800996c:	e005      	b.n	800997a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 f862 	bl	8009a38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 f871 	bl	8009a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	691b      	ldr	r3, [r3, #16]
 8009986:	f003 0301 	and.w	r3, r3, #1
 800998a:	2b01      	cmp	r3, #1
 800998c:	d10e      	bne.n	80099ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	f003 0301 	and.w	r3, r3, #1
 8009998:	2b01      	cmp	r3, #1
 800999a:	d107      	bne.n	80099ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f06f 0201 	mvn.w	r2, #1
 80099a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f7fb f894 	bl	8004ad4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	691b      	ldr	r3, [r3, #16]
 80099b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099b6:	2b80      	cmp	r3, #128	; 0x80
 80099b8:	d10e      	bne.n	80099d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099c4:	2b80      	cmp	r3, #128	; 0x80
 80099c6:	d107      	bne.n	80099d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80099d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 f8c9 	bl	8009b6a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099e2:	2b40      	cmp	r3, #64	; 0x40
 80099e4:	d10e      	bne.n	8009a04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099f0:	2b40      	cmp	r3, #64	; 0x40
 80099f2:	d107      	bne.n	8009a04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80099fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 f835 	bl	8009a6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	691b      	ldr	r3, [r3, #16]
 8009a0a:	f003 0320 	and.w	r3, r3, #32
 8009a0e:	2b20      	cmp	r3, #32
 8009a10:	d10e      	bne.n	8009a30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	f003 0320 	and.w	r3, r3, #32
 8009a1c:	2b20      	cmp	r3, #32
 8009a1e:	d107      	bne.n	8009a30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f06f 0220 	mvn.w	r2, #32
 8009a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f000 f894 	bl	8009b58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a30:	bf00      	nop
 8009a32:	3708      	adds	r7, #8
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a40:	bf00      	nop
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bc80      	pop	{r7}
 8009a48:	4770      	bx	lr

08009a4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009a4a:	b480      	push	{r7}
 8009a4c:	b083      	sub	sp, #12
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009a52:	bf00      	nop
 8009a54:	370c      	adds	r7, #12
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bc80      	pop	{r7}
 8009a5a:	4770      	bx	lr

08009a5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009a64:	bf00      	nop
 8009a66:	370c      	adds	r7, #12
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bc80      	pop	{r7}
 8009a6c:	4770      	bx	lr

08009a6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009a6e:	b480      	push	{r7}
 8009a70:	b083      	sub	sp, #12
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009a76:	bf00      	nop
 8009a78:	370c      	adds	r7, #12
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bc80      	pop	{r7}
 8009a7e:	4770      	bx	lr

08009a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b085      	sub	sp, #20
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	4a2d      	ldr	r2, [pc, #180]	; (8009b48 <TIM_Base_SetConfig+0xc8>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d00f      	beq.n	8009ab8 <TIM_Base_SetConfig+0x38>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a9e:	d00b      	beq.n	8009ab8 <TIM_Base_SetConfig+0x38>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	4a2a      	ldr	r2, [pc, #168]	; (8009b4c <TIM_Base_SetConfig+0xcc>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d007      	beq.n	8009ab8 <TIM_Base_SetConfig+0x38>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	4a29      	ldr	r2, [pc, #164]	; (8009b50 <TIM_Base_SetConfig+0xd0>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d003      	beq.n	8009ab8 <TIM_Base_SetConfig+0x38>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	4a28      	ldr	r2, [pc, #160]	; (8009b54 <TIM_Base_SetConfig+0xd4>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d108      	bne.n	8009aca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009abe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	68fa      	ldr	r2, [r7, #12]
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	4a1e      	ldr	r2, [pc, #120]	; (8009b48 <TIM_Base_SetConfig+0xc8>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d00f      	beq.n	8009af2 <TIM_Base_SetConfig+0x72>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ad8:	d00b      	beq.n	8009af2 <TIM_Base_SetConfig+0x72>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4a1b      	ldr	r2, [pc, #108]	; (8009b4c <TIM_Base_SetConfig+0xcc>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d007      	beq.n	8009af2 <TIM_Base_SetConfig+0x72>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4a1a      	ldr	r2, [pc, #104]	; (8009b50 <TIM_Base_SetConfig+0xd0>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d003      	beq.n	8009af2 <TIM_Base_SetConfig+0x72>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4a19      	ldr	r2, [pc, #100]	; (8009b54 <TIM_Base_SetConfig+0xd4>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d108      	bne.n	8009b04 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009af8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	68fa      	ldr	r2, [r7, #12]
 8009b00:	4313      	orrs	r3, r2
 8009b02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	695b      	ldr	r3, [r3, #20]
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	68fa      	ldr	r2, [r7, #12]
 8009b16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	689a      	ldr	r2, [r3, #8]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	4a07      	ldr	r2, [pc, #28]	; (8009b48 <TIM_Base_SetConfig+0xc8>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d103      	bne.n	8009b38 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	691a      	ldr	r2, [r3, #16]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	615a      	str	r2, [r3, #20]
}
 8009b3e:	bf00      	nop
 8009b40:	3714      	adds	r7, #20
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bc80      	pop	{r7}
 8009b46:	4770      	bx	lr
 8009b48:	40012c00 	.word	0x40012c00
 8009b4c:	40000400 	.word	0x40000400
 8009b50:	40000800 	.word	0x40000800
 8009b54:	40000c00 	.word	0x40000c00

08009b58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b60:	bf00      	nop
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bc80      	pop	{r7}
 8009b68:	4770      	bx	lr

08009b6a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b6a:	b480      	push	{r7}
 8009b6c:	b083      	sub	sp, #12
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b72:	bf00      	nop
 8009b74:	370c      	adds	r7, #12
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bc80      	pop	{r7}
 8009b7a:	4770      	bx	lr

08009b7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d101      	bne.n	8009b8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	e03f      	b.n	8009c0e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d106      	bne.n	8009ba8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f7fb f9e4 	bl	8004f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2224      	movs	r2, #36	; 0x24
 8009bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	68da      	ldr	r2, [r3, #12]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009bbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 f905 	bl	8009dd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	691a      	ldr	r2, [r3, #16]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009bd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	695a      	ldr	r2, [r3, #20]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009be4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	68da      	ldr	r2, [r3, #12]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009bf4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2220      	movs	r2, #32
 8009c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2220      	movs	r2, #32
 8009c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009c0c:	2300      	movs	r3, #0
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3708      	adds	r7, #8
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}

08009c16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c16:	b580      	push	{r7, lr}
 8009c18:	b08a      	sub	sp, #40	; 0x28
 8009c1a:	af02      	add	r7, sp, #8
 8009c1c:	60f8      	str	r0, [r7, #12]
 8009c1e:	60b9      	str	r1, [r7, #8]
 8009c20:	603b      	str	r3, [r7, #0]
 8009c22:	4613      	mov	r3, r2
 8009c24:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009c26:	2300      	movs	r3, #0
 8009c28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	2b20      	cmp	r3, #32
 8009c34:	d17c      	bne.n	8009d30 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d002      	beq.n	8009c42 <HAL_UART_Transmit+0x2c>
 8009c3c:	88fb      	ldrh	r3, [r7, #6]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d101      	bne.n	8009c46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009c42:	2301      	movs	r3, #1
 8009c44:	e075      	b.n	8009d32 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d101      	bne.n	8009c54 <HAL_UART_Transmit+0x3e>
 8009c50:	2302      	movs	r3, #2
 8009c52:	e06e      	b.n	8009d32 <HAL_UART_Transmit+0x11c>
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2201      	movs	r2, #1
 8009c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2221      	movs	r2, #33	; 0x21
 8009c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c6a:	f7fb fb4b 	bl	8005304 <HAL_GetTick>
 8009c6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	88fa      	ldrh	r2, [r7, #6]
 8009c74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	88fa      	ldrh	r2, [r7, #6]
 8009c7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	689b      	ldr	r3, [r3, #8]
 8009c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c84:	d108      	bne.n	8009c98 <HAL_UART_Transmit+0x82>
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	691b      	ldr	r3, [r3, #16]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d104      	bne.n	8009c98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	61bb      	str	r3, [r7, #24]
 8009c96:	e003      	b.n	8009ca0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009ca8:	e02a      	b.n	8009d00 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	9300      	str	r3, [sp, #0]
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	2180      	movs	r1, #128	; 0x80
 8009cb4:	68f8      	ldr	r0, [r7, #12]
 8009cb6:	f000 f840 	bl	8009d3a <UART_WaitOnFlagUntilTimeout>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d001      	beq.n	8009cc4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009cc0:	2303      	movs	r3, #3
 8009cc2:	e036      	b.n	8009d32 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009cc4:	69fb      	ldr	r3, [r7, #28]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d10b      	bne.n	8009ce2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009cca:	69bb      	ldr	r3, [r7, #24]
 8009ccc:	881b      	ldrh	r3, [r3, #0]
 8009cce:	461a      	mov	r2, r3
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009cd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009cda:	69bb      	ldr	r3, [r7, #24]
 8009cdc:	3302      	adds	r3, #2
 8009cde:	61bb      	str	r3, [r7, #24]
 8009ce0:	e007      	b.n	8009cf2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009ce2:	69fb      	ldr	r3, [r7, #28]
 8009ce4:	781a      	ldrb	r2, [r3, #0]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	3301      	adds	r3, #1
 8009cf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	3b01      	subs	r3, #1
 8009cfa:	b29a      	uxth	r2, r3
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d1cf      	bne.n	8009caa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	9300      	str	r3, [sp, #0]
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	2200      	movs	r2, #0
 8009d12:	2140      	movs	r1, #64	; 0x40
 8009d14:	68f8      	ldr	r0, [r7, #12]
 8009d16:	f000 f810 	bl	8009d3a <UART_WaitOnFlagUntilTimeout>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d001      	beq.n	8009d24 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009d20:	2303      	movs	r3, #3
 8009d22:	e006      	b.n	8009d32 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2220      	movs	r2, #32
 8009d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	e000      	b.n	8009d32 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009d30:	2302      	movs	r3, #2
  }
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3720      	adds	r7, #32
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b084      	sub	sp, #16
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	60f8      	str	r0, [r7, #12]
 8009d42:	60b9      	str	r1, [r7, #8]
 8009d44:	603b      	str	r3, [r7, #0]
 8009d46:	4613      	mov	r3, r2
 8009d48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d4a:	e02c      	b.n	8009da6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d4c:	69bb      	ldr	r3, [r7, #24]
 8009d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d52:	d028      	beq.n	8009da6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009d54:	69bb      	ldr	r3, [r7, #24]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d007      	beq.n	8009d6a <UART_WaitOnFlagUntilTimeout+0x30>
 8009d5a:	f7fb fad3 	bl	8005304 <HAL_GetTick>
 8009d5e:	4602      	mov	r2, r0
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	1ad3      	subs	r3, r2, r3
 8009d64:	69ba      	ldr	r2, [r7, #24]
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d21d      	bcs.n	8009da6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	68da      	ldr	r2, [r3, #12]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009d78:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	695a      	ldr	r2, [r3, #20]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f022 0201 	bic.w	r2, r2, #1
 8009d88:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2220      	movs	r2, #32
 8009d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2220      	movs	r2, #32
 8009d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009da2:	2303      	movs	r3, #3
 8009da4:	e00f      	b.n	8009dc6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	4013      	ands	r3, r2
 8009db0:	68ba      	ldr	r2, [r7, #8]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	bf0c      	ite	eq
 8009db6:	2301      	moveq	r3, #1
 8009db8:	2300      	movne	r3, #0
 8009dba:	b2db      	uxtb	r3, r3
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	79fb      	ldrb	r3, [r7, #7]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d0c3      	beq.n	8009d4c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009dc4:	2300      	movs	r3, #0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
	...

08009dd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	691b      	ldr	r3, [r3, #16]
 8009dde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	68da      	ldr	r2, [r3, #12]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	430a      	orrs	r2, r1
 8009dec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	689a      	ldr	r2, [r3, #8]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	691b      	ldr	r3, [r3, #16]
 8009df6:	431a      	orrs	r2, r3
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	695b      	ldr	r3, [r3, #20]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009e0a:	f023 030c 	bic.w	r3, r3, #12
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	6812      	ldr	r2, [r2, #0]
 8009e12:	68b9      	ldr	r1, [r7, #8]
 8009e14:	430b      	orrs	r3, r1
 8009e16:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	695b      	ldr	r3, [r3, #20]
 8009e1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	699a      	ldr	r2, [r3, #24]
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	430a      	orrs	r2, r1
 8009e2c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4a2c      	ldr	r2, [pc, #176]	; (8009ee4 <UART_SetConfig+0x114>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d103      	bne.n	8009e40 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009e38:	f7fe fbee 	bl	8008618 <HAL_RCC_GetPCLK2Freq>
 8009e3c:	60f8      	str	r0, [r7, #12]
 8009e3e:	e002      	b.n	8009e46 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009e40:	f7fe fbd6 	bl	80085f0 <HAL_RCC_GetPCLK1Freq>
 8009e44:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009e46:	68fa      	ldr	r2, [r7, #12]
 8009e48:	4613      	mov	r3, r2
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	4413      	add	r3, r2
 8009e4e:	009a      	lsls	r2, r3, #2
 8009e50:	441a      	add	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	009b      	lsls	r3, r3, #2
 8009e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e5c:	4a22      	ldr	r2, [pc, #136]	; (8009ee8 <UART_SetConfig+0x118>)
 8009e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8009e62:	095b      	lsrs	r3, r3, #5
 8009e64:	0119      	lsls	r1, r3, #4
 8009e66:	68fa      	ldr	r2, [r7, #12]
 8009e68:	4613      	mov	r3, r2
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	4413      	add	r3, r2
 8009e6e:	009a      	lsls	r2, r3, #2
 8009e70:	441a      	add	r2, r3
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	fbb2 f2f3 	udiv	r2, r2, r3
 8009e7c:	4b1a      	ldr	r3, [pc, #104]	; (8009ee8 <UART_SetConfig+0x118>)
 8009e7e:	fba3 0302 	umull	r0, r3, r3, r2
 8009e82:	095b      	lsrs	r3, r3, #5
 8009e84:	2064      	movs	r0, #100	; 0x64
 8009e86:	fb00 f303 	mul.w	r3, r0, r3
 8009e8a:	1ad3      	subs	r3, r2, r3
 8009e8c:	011b      	lsls	r3, r3, #4
 8009e8e:	3332      	adds	r3, #50	; 0x32
 8009e90:	4a15      	ldr	r2, [pc, #84]	; (8009ee8 <UART_SetConfig+0x118>)
 8009e92:	fba2 2303 	umull	r2, r3, r2, r3
 8009e96:	095b      	lsrs	r3, r3, #5
 8009e98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e9c:	4419      	add	r1, r3
 8009e9e:	68fa      	ldr	r2, [r7, #12]
 8009ea0:	4613      	mov	r3, r2
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	4413      	add	r3, r2
 8009ea6:	009a      	lsls	r2, r3, #2
 8009ea8:	441a      	add	r2, r3
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8009eb4:	4b0c      	ldr	r3, [pc, #48]	; (8009ee8 <UART_SetConfig+0x118>)
 8009eb6:	fba3 0302 	umull	r0, r3, r3, r2
 8009eba:	095b      	lsrs	r3, r3, #5
 8009ebc:	2064      	movs	r0, #100	; 0x64
 8009ebe:	fb00 f303 	mul.w	r3, r0, r3
 8009ec2:	1ad3      	subs	r3, r2, r3
 8009ec4:	011b      	lsls	r3, r3, #4
 8009ec6:	3332      	adds	r3, #50	; 0x32
 8009ec8:	4a07      	ldr	r2, [pc, #28]	; (8009ee8 <UART_SetConfig+0x118>)
 8009eca:	fba2 2303 	umull	r2, r3, r2, r3
 8009ece:	095b      	lsrs	r3, r3, #5
 8009ed0:	f003 020f 	and.w	r2, r3, #15
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	440a      	add	r2, r1
 8009eda:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009edc:	bf00      	nop
 8009ede:	3710      	adds	r7, #16
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	40013800 	.word	0x40013800
 8009ee8:	51eb851f 	.word	0x51eb851f

08009eec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b085      	sub	sp, #20
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009efa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009efe:	2b84      	cmp	r3, #132	; 0x84
 8009f00:	d005      	beq.n	8009f0e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009f02:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	4413      	add	r3, r2
 8009f0a:	3303      	adds	r3, #3
 8009f0c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3714      	adds	r7, #20
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bc80      	pop	{r7}
 8009f18:	4770      	bx	lr

08009f1a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009f1a:	b480      	push	{r7}
 8009f1c:	b083      	sub	sp, #12
 8009f1e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f20:	f3ef 8305 	mrs	r3, IPSR
 8009f24:	607b      	str	r3, [r7, #4]
  return(result);
 8009f26:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	bf14      	ite	ne
 8009f2c:	2301      	movne	r3, #1
 8009f2e:	2300      	moveq	r3, #0
 8009f30:	b2db      	uxtb	r3, r3
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	370c      	adds	r7, #12
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bc80      	pop	{r7}
 8009f3a:	4770      	bx	lr

08009f3c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009f40:	f001 fb6a 	bl	800b618 <vTaskStartScheduler>
  
  return osOK;
 8009f44:	2300      	movs	r3, #0
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	bd80      	pop	{r7, pc}

08009f4a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8009f4a:	b580      	push	{r7, lr}
 8009f4c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8009f4e:	f7ff ffe4 	bl	8009f1a <inHandlerMode>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d003      	beq.n	8009f60 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8009f58:	f001 fc7c 	bl	800b854 <xTaskGetTickCountFromISR>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	e002      	b.n	8009f66 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8009f60:	f001 fc6a 	bl	800b838 <xTaskGetTickCount>
 8009f64:	4603      	mov	r3, r0
  }
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009f6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f6c:	b089      	sub	sp, #36	; 0x24
 8009f6e:	af04      	add	r7, sp, #16
 8009f70:	6078      	str	r0, [r7, #4]
 8009f72:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	695b      	ldr	r3, [r3, #20]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d020      	beq.n	8009fbe <osThreadCreate+0x54>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	699b      	ldr	r3, [r3, #24]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d01c      	beq.n	8009fbe <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	685c      	ldr	r4, [r3, #4]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681d      	ldr	r5, [r3, #0]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	691e      	ldr	r6, [r3, #16]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7ff ffa8 	bl	8009eec <makeFreeRtosPriority>
 8009f9c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	695b      	ldr	r3, [r3, #20]
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009fa6:	9202      	str	r2, [sp, #8]
 8009fa8:	9301      	str	r3, [sp, #4]
 8009faa:	9100      	str	r1, [sp, #0]
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	4632      	mov	r2, r6
 8009fb0:	4629      	mov	r1, r5
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	f001 f96a 	bl	800b28c <xTaskCreateStatic>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	60fb      	str	r3, [r7, #12]
 8009fbc:	e01c      	b.n	8009ff8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	685c      	ldr	r4, [r3, #4]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009fca:	b29e      	uxth	r6, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f7ff ff8a 	bl	8009eec <makeFreeRtosPriority>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	f107 030c 	add.w	r3, r7, #12
 8009fde:	9301      	str	r3, [sp, #4]
 8009fe0:	9200      	str	r2, [sp, #0]
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	4632      	mov	r2, r6
 8009fe6:	4629      	mov	r1, r5
 8009fe8:	4620      	mov	r0, r4
 8009fea:	f001 f9ab 	bl	800b344 <xTaskCreate>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d001      	beq.n	8009ff8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	e000      	b.n	8009ffa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3714      	adds	r7, #20
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a002 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a002:	b580      	push	{r7, lr}
 800a004:	b084      	sub	sp, #16
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d001      	beq.n	800a018 <osDelay+0x16>
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	e000      	b.n	800a01a <osDelay+0x18>
 800a018:	2301      	movs	r3, #1
 800a01a:	4618      	mov	r0, r3
 800a01c:	f001 fac8 	bl	800b5b0 <vTaskDelay>
  
  return osOK;
 800a020:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a022:	4618      	mov	r0, r3
 800a024:	3710      	adds	r7, #16
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
	...

0800a02c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b086      	sub	sp, #24
 800a030:	af02      	add	r7, sp, #8
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	460b      	mov	r3, r1
 800a036:	607a      	str	r2, [r7, #4]
 800a038:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d013      	beq.n	800a06a <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800a042:	7afb      	ldrb	r3, [r7, #11]
 800a044:	2b01      	cmp	r3, #1
 800a046:	d101      	bne.n	800a04c <osTimerCreate+0x20>
 800a048:	2101      	movs	r1, #1
 800a04a:	e000      	b.n	800a04e <osTimerCreate+0x22>
 800a04c:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800a052:	68fa      	ldr	r2, [r7, #12]
 800a054:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800a056:	9201      	str	r2, [sp, #4]
 800a058:	9300      	str	r3, [sp, #0]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	460a      	mov	r2, r1
 800a05e:	2101      	movs	r1, #1
 800a060:	480b      	ldr	r0, [pc, #44]	; (800a090 <osTimerCreate+0x64>)
 800a062:	f002 f9de 	bl	800c422 <xTimerCreateStatic>
 800a066:	4603      	mov	r3, r0
 800a068:	e00e      	b.n	800a088 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800a06a:	7afb      	ldrb	r3, [r7, #11]
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d101      	bne.n	800a074 <osTimerCreate+0x48>
 800a070:	2201      	movs	r2, #1
 800a072:	e000      	b.n	800a076 <osTimerCreate+0x4a>
 800a074:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800a07a:	9300      	str	r3, [sp, #0]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2101      	movs	r1, #1
 800a080:	4803      	ldr	r0, [pc, #12]	; (800a090 <osTimerCreate+0x64>)
 800a082:	f002 f9ad 	bl	800c3e0 <xTimerCreate>
 800a086:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3710      	adds	r7, #16
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	0800f438 	.word	0x0800f438

0800a094 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b086      	sub	sp, #24
 800a098:	af02      	add	r7, sp, #8
 800a09a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a09c:	2300      	movs	r3, #0
 800a09e:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 800a0a4:	f7ff ff39 	bl	8009f1a <inHandlerMode>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d019      	beq.n	800a0e2 <osTimerStop+0x4e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 800a0ae:	f107 0308 	add.w	r3, r7, #8
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	9200      	str	r2, [sp, #0]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	2108      	movs	r1, #8
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f002 fa20 	bl	800c500 <xTimerGenericCommand>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d001      	beq.n	800a0ca <osTimerStop+0x36>
      return osErrorOS;
 800a0c6:	23ff      	movs	r3, #255	; 0xff
 800a0c8:	e019      	b.n	800a0fe <osTimerStop+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d015      	beq.n	800a0fc <osTimerStop+0x68>
 800a0d0:	4b0d      	ldr	r3, [pc, #52]	; (800a108 <osTimerStop+0x74>)
 800a0d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0d6:	601a      	str	r2, [r3, #0]
 800a0d8:	f3bf 8f4f 	dsb	sy
 800a0dc:	f3bf 8f6f 	isb	sy
 800a0e0:	e00c      	b.n	800a0fc <osTimerStop+0x68>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	9300      	str	r3, [sp, #0]
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	2103      	movs	r1, #3
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f002 fa07 	bl	800c500 <xTimerGenericCommand>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d001      	beq.n	800a0fc <osTimerStop+0x68>
      result = osErrorOS;
 800a0f8:	23ff      	movs	r3, #255	; 0xff
 800a0fa:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3710      	adds	r7, #16
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
 800a106:	bf00      	nop
 800a108:	e000ed04 	.word	0xe000ed04

0800a10c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b086      	sub	sp, #24
 800a110:	af02      	add	r7, sp, #8
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d00f      	beq.n	800a13e <osSemaphoreCreate+0x32>
    if (count == 1) {
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	2b01      	cmp	r3, #1
 800a122:	d10a      	bne.n	800a13a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	2203      	movs	r2, #3
 800a12a:	9200      	str	r2, [sp, #0]
 800a12c:	2200      	movs	r2, #0
 800a12e:	2100      	movs	r1, #0
 800a130:	2001      	movs	r0, #1
 800a132:	f000 f9c3 	bl	800a4bc <xQueueGenericCreateStatic>
 800a136:	4603      	mov	r3, r0
 800a138:	e016      	b.n	800a168 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800a13a:	2300      	movs	r3, #0
 800a13c:	e014      	b.n	800a168 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	2b01      	cmp	r3, #1
 800a142:	d110      	bne.n	800a166 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800a144:	2203      	movs	r2, #3
 800a146:	2100      	movs	r1, #0
 800a148:	2001      	movs	r0, #1
 800a14a:	f000 fa2e 	bl	800a5aa <xQueueGenericCreate>
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d005      	beq.n	800a162 <osSemaphoreCreate+0x56>
 800a156:	2300      	movs	r3, #0
 800a158:	2200      	movs	r2, #0
 800a15a:	2100      	movs	r1, #0
 800a15c:	68f8      	ldr	r0, [r7, #12]
 800a15e:	f000 fa81 	bl	800a664 <xQueueGenericSend>
      return sema;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	e000      	b.n	800a168 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800a166:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3710      	adds	r7, #16
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a17a:	2300      	movs	r3, #0
 800a17c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d101      	bne.n	800a188 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800a184:	2380      	movs	r3, #128	; 0x80
 800a186:	e03a      	b.n	800a1fe <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800a188:	2300      	movs	r3, #0
 800a18a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a192:	d103      	bne.n	800a19c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800a194:	f04f 33ff 	mov.w	r3, #4294967295
 800a198:	60fb      	str	r3, [r7, #12]
 800a19a:	e009      	b.n	800a1b0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d006      	beq.n	800a1b0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d101      	bne.n	800a1b0 <osSemaphoreWait+0x40>
      ticks = 1;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a1b0:	f7ff feb3 	bl	8009f1a <inHandlerMode>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d017      	beq.n	800a1ea <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a1ba:	f107 0308 	add.w	r3, r7, #8
 800a1be:	461a      	mov	r2, r3
 800a1c0:	2100      	movs	r1, #0
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 fe5e 	bl	800ae84 <xQueueReceiveFromISR>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d001      	beq.n	800a1d2 <osSemaphoreWait+0x62>
      return osErrorOS;
 800a1ce:	23ff      	movs	r3, #255	; 0xff
 800a1d0:	e015      	b.n	800a1fe <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d011      	beq.n	800a1fc <osSemaphoreWait+0x8c>
 800a1d8:	4b0b      	ldr	r3, [pc, #44]	; (800a208 <osSemaphoreWait+0x98>)
 800a1da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1de:	601a      	str	r2, [r3, #0]
 800a1e0:	f3bf 8f4f 	dsb	sy
 800a1e4:	f3bf 8f6f 	isb	sy
 800a1e8:	e008      	b.n	800a1fc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800a1ea:	68f9      	ldr	r1, [r7, #12]
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 fd3d 	bl	800ac6c <xQueueSemaphoreTake>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d001      	beq.n	800a1fc <osSemaphoreWait+0x8c>
    return osErrorOS;
 800a1f8:	23ff      	movs	r3, #255	; 0xff
 800a1fa:	e000      	b.n	800a1fe <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3710      	adds	r7, #16
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	e000ed04 	.word	0xe000ed04

0800a20c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b084      	sub	sp, #16
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a214:	2300      	movs	r3, #0
 800a216:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a218:	2300      	movs	r3, #0
 800a21a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800a21c:	f7ff fe7d 	bl	8009f1a <inHandlerMode>
 800a220:	4603      	mov	r3, r0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d016      	beq.n	800a254 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a226:	f107 0308 	add.w	r3, r7, #8
 800a22a:	4619      	mov	r1, r3
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 fbaf 	bl	800a990 <xQueueGiveFromISR>
 800a232:	4603      	mov	r3, r0
 800a234:	2b01      	cmp	r3, #1
 800a236:	d001      	beq.n	800a23c <osSemaphoreRelease+0x30>
      return osErrorOS;
 800a238:	23ff      	movs	r3, #255	; 0xff
 800a23a:	e017      	b.n	800a26c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d013      	beq.n	800a26a <osSemaphoreRelease+0x5e>
 800a242:	4b0c      	ldr	r3, [pc, #48]	; (800a274 <osSemaphoreRelease+0x68>)
 800a244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a248:	601a      	str	r2, [r3, #0]
 800a24a:	f3bf 8f4f 	dsb	sy
 800a24e:	f3bf 8f6f 	isb	sy
 800a252:	e00a      	b.n	800a26a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800a254:	2300      	movs	r3, #0
 800a256:	2200      	movs	r2, #0
 800a258:	2100      	movs	r1, #0
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 fa02 	bl	800a664 <xQueueGenericSend>
 800a260:	4603      	mov	r3, r0
 800a262:	2b01      	cmp	r3, #1
 800a264:	d001      	beq.n	800a26a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800a266:	23ff      	movs	r3, #255	; 0xff
 800a268:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800a26a:	68fb      	ldr	r3, [r7, #12]
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3710      	adds	r7, #16
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}
 800a274:	e000ed04 	.word	0xe000ed04

0800a278 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 800a278:	b480      	push	{r7}
 800a27a:	b083      	sub	sp, #12
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
  return osOK;
#else
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
 800a282:	2381      	movs	r3, #129	; 0x81
#endif
}
 800a284:	4618      	mov	r0, r3
 800a286:	370c      	adds	r7, #12
 800a288:	46bd      	mov	sp, r7
 800a28a:	bc80      	pop	{r7}
 800a28c:	4770      	bx	lr

0800a28e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a28e:	b480      	push	{r7}
 800a290:	b083      	sub	sp, #12
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f103 0208 	add.w	r2, r3, #8
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a2a6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f103 0208 	add.w	r2, r3, #8
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f103 0208 	add.w	r2, r3, #8
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a2c2:	bf00      	nop
 800a2c4:	370c      	adds	r7, #12
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bc80      	pop	{r7}
 800a2ca:	4770      	bx	lr

0800a2cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a2da:	bf00      	nop
 800a2dc:	370c      	adds	r7, #12
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bc80      	pop	{r7}
 800a2e2:	4770      	bx	lr

0800a2e4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b085      	sub	sp, #20
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	68fa      	ldr	r2, [r7, #12]
 800a2f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	689a      	ldr	r2, [r3, #8]
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	689b      	ldr	r3, [r3, #8]
 800a306:	683a      	ldr	r2, [r7, #0]
 800a308:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	683a      	ldr	r2, [r7, #0]
 800a30e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	687a      	ldr	r2, [r7, #4]
 800a314:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	1c5a      	adds	r2, r3, #1
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	601a      	str	r2, [r3, #0]
}
 800a320:	bf00      	nop
 800a322:	3714      	adds	r7, #20
 800a324:	46bd      	mov	sp, r7
 800a326:	bc80      	pop	{r7}
 800a328:	4770      	bx	lr

0800a32a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a32a:	b480      	push	{r7}
 800a32c:	b085      	sub	sp, #20
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
 800a332:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a340:	d103      	bne.n	800a34a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	691b      	ldr	r3, [r3, #16]
 800a346:	60fb      	str	r3, [r7, #12]
 800a348:	e00c      	b.n	800a364 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	3308      	adds	r3, #8
 800a34e:	60fb      	str	r3, [r7, #12]
 800a350:	e002      	b.n	800a358 <vListInsert+0x2e>
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	60fb      	str	r3, [r7, #12]
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	68ba      	ldr	r2, [r7, #8]
 800a360:	429a      	cmp	r2, r3
 800a362:	d2f6      	bcs.n	800a352 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	685a      	ldr	r2, [r3, #4]
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	683a      	ldr	r2, [r7, #0]
 800a372:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	68fa      	ldr	r2, [r7, #12]
 800a378:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	683a      	ldr	r2, [r7, #0]
 800a37e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	1c5a      	adds	r2, r3, #1
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	601a      	str	r2, [r3, #0]
}
 800a390:	bf00      	nop
 800a392:	3714      	adds	r7, #20
 800a394:	46bd      	mov	sp, r7
 800a396:	bc80      	pop	{r7}
 800a398:	4770      	bx	lr

0800a39a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a39a:	b480      	push	{r7}
 800a39c:	b085      	sub	sp, #20
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	691b      	ldr	r3, [r3, #16]
 800a3a6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	6892      	ldr	r2, [r2, #8]
 800a3b0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	6852      	ldr	r2, [r2, #4]
 800a3ba:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d103      	bne.n	800a3ce <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	689a      	ldr	r2, [r3, #8]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	1e5a      	subs	r2, r3, #1
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3714      	adds	r7, #20
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bc80      	pop	{r7}
 800a3ea:	4770      	bx	lr

0800a3ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d10a      	bne.n	800a416 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a404:	f383 8811 	msr	BASEPRI, r3
 800a408:	f3bf 8f6f 	isb	sy
 800a40c:	f3bf 8f4f 	dsb	sy
 800a410:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a412:	bf00      	nop
 800a414:	e7fe      	b.n	800a414 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a416:	f002 fc11 	bl	800cc3c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681a      	ldr	r2, [r3, #0]
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a422:	68f9      	ldr	r1, [r7, #12]
 800a424:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a426:	fb01 f303 	mul.w	r3, r1, r3
 800a42a:	441a      	add	r2, r3
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2200      	movs	r2, #0
 800a434:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681a      	ldr	r2, [r3, #0]
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a446:	3b01      	subs	r3, #1
 800a448:	68f9      	ldr	r1, [r7, #12]
 800a44a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a44c:	fb01 f303 	mul.w	r3, r1, r3
 800a450:	441a      	add	r2, r3
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	22ff      	movs	r2, #255	; 0xff
 800a45a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	22ff      	movs	r2, #255	; 0xff
 800a462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d114      	bne.n	800a496 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	691b      	ldr	r3, [r3, #16]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d01a      	beq.n	800a4aa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	3310      	adds	r3, #16
 800a478:	4618      	mov	r0, r3
 800a47a:	f001 fb65 	bl	800bb48 <xTaskRemoveFromEventList>
 800a47e:	4603      	mov	r3, r0
 800a480:	2b00      	cmp	r3, #0
 800a482:	d012      	beq.n	800a4aa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a484:	4b0c      	ldr	r3, [pc, #48]	; (800a4b8 <xQueueGenericReset+0xcc>)
 800a486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a48a:	601a      	str	r2, [r3, #0]
 800a48c:	f3bf 8f4f 	dsb	sy
 800a490:	f3bf 8f6f 	isb	sy
 800a494:	e009      	b.n	800a4aa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	3310      	adds	r3, #16
 800a49a:	4618      	mov	r0, r3
 800a49c:	f7ff fef7 	bl	800a28e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	3324      	adds	r3, #36	; 0x24
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7ff fef2 	bl	800a28e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a4aa:	f002 fbf7 	bl	800cc9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a4ae:	2301      	movs	r3, #1
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3710      	adds	r7, #16
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}
 800a4b8:	e000ed04 	.word	0xe000ed04

0800a4bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b08e      	sub	sp, #56	; 0x38
 800a4c0:	af02      	add	r7, sp, #8
 800a4c2:	60f8      	str	r0, [r7, #12]
 800a4c4:	60b9      	str	r1, [r7, #8]
 800a4c6:	607a      	str	r2, [r7, #4]
 800a4c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d10a      	bne.n	800a4e6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d4:	f383 8811 	msr	BASEPRI, r3
 800a4d8:	f3bf 8f6f 	isb	sy
 800a4dc:	f3bf 8f4f 	dsb	sy
 800a4e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a4e2:	bf00      	nop
 800a4e4:	e7fe      	b.n	800a4e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d10a      	bne.n	800a502 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f0:	f383 8811 	msr	BASEPRI, r3
 800a4f4:	f3bf 8f6f 	isb	sy
 800a4f8:	f3bf 8f4f 	dsb	sy
 800a4fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a4fe:	bf00      	nop
 800a500:	e7fe      	b.n	800a500 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d002      	beq.n	800a50e <xQueueGenericCreateStatic+0x52>
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d001      	beq.n	800a512 <xQueueGenericCreateStatic+0x56>
 800a50e:	2301      	movs	r3, #1
 800a510:	e000      	b.n	800a514 <xQueueGenericCreateStatic+0x58>
 800a512:	2300      	movs	r3, #0
 800a514:	2b00      	cmp	r3, #0
 800a516:	d10a      	bne.n	800a52e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a51c:	f383 8811 	msr	BASEPRI, r3
 800a520:	f3bf 8f6f 	isb	sy
 800a524:	f3bf 8f4f 	dsb	sy
 800a528:	623b      	str	r3, [r7, #32]
}
 800a52a:	bf00      	nop
 800a52c:	e7fe      	b.n	800a52c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d102      	bne.n	800a53a <xQueueGenericCreateStatic+0x7e>
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d101      	bne.n	800a53e <xQueueGenericCreateStatic+0x82>
 800a53a:	2301      	movs	r3, #1
 800a53c:	e000      	b.n	800a540 <xQueueGenericCreateStatic+0x84>
 800a53e:	2300      	movs	r3, #0
 800a540:	2b00      	cmp	r3, #0
 800a542:	d10a      	bne.n	800a55a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a548:	f383 8811 	msr	BASEPRI, r3
 800a54c:	f3bf 8f6f 	isb	sy
 800a550:	f3bf 8f4f 	dsb	sy
 800a554:	61fb      	str	r3, [r7, #28]
}
 800a556:	bf00      	nop
 800a558:	e7fe      	b.n	800a558 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a55a:	2348      	movs	r3, #72	; 0x48
 800a55c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	2b48      	cmp	r3, #72	; 0x48
 800a562:	d00a      	beq.n	800a57a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a568:	f383 8811 	msr	BASEPRI, r3
 800a56c:	f3bf 8f6f 	isb	sy
 800a570:	f3bf 8f4f 	dsb	sy
 800a574:	61bb      	str	r3, [r7, #24]
}
 800a576:	bf00      	nop
 800a578:	e7fe      	b.n	800a578 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a580:	2b00      	cmp	r3, #0
 800a582:	d00d      	beq.n	800a5a0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a586:	2201      	movs	r2, #1
 800a588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a58c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a592:	9300      	str	r3, [sp, #0]
 800a594:	4613      	mov	r3, r2
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	68b9      	ldr	r1, [r7, #8]
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	f000 f843 	bl	800a626 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3730      	adds	r7, #48	; 0x30
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}

0800a5aa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b08a      	sub	sp, #40	; 0x28
 800a5ae:	af02      	add	r7, sp, #8
 800a5b0:	60f8      	str	r0, [r7, #12]
 800a5b2:	60b9      	str	r1, [r7, #8]
 800a5b4:	4613      	mov	r3, r2
 800a5b6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d10a      	bne.n	800a5d4 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c2:	f383 8811 	msr	BASEPRI, r3
 800a5c6:	f3bf 8f6f 	isb	sy
 800a5ca:	f3bf 8f4f 	dsb	sy
 800a5ce:	613b      	str	r3, [r7, #16]
}
 800a5d0:	bf00      	nop
 800a5d2:	e7fe      	b.n	800a5d2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d102      	bne.n	800a5e0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	61fb      	str	r3, [r7, #28]
 800a5de:	e004      	b.n	800a5ea <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	68ba      	ldr	r2, [r7, #8]
 800a5e4:	fb02 f303 	mul.w	r3, r2, r3
 800a5e8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	3348      	adds	r3, #72	; 0x48
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f002 fc24 	bl	800ce3c <pvPortMalloc>
 800a5f4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a5f6:	69bb      	ldr	r3, [r7, #24]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d00f      	beq.n	800a61c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	3348      	adds	r3, #72	; 0x48
 800a600:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a602:	69bb      	ldr	r3, [r7, #24]
 800a604:	2200      	movs	r2, #0
 800a606:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a60a:	79fa      	ldrb	r2, [r7, #7]
 800a60c:	69bb      	ldr	r3, [r7, #24]
 800a60e:	9300      	str	r3, [sp, #0]
 800a610:	4613      	mov	r3, r2
 800a612:	697a      	ldr	r2, [r7, #20]
 800a614:	68b9      	ldr	r1, [r7, #8]
 800a616:	68f8      	ldr	r0, [r7, #12]
 800a618:	f000 f805 	bl	800a626 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a61c:	69bb      	ldr	r3, [r7, #24]
	}
 800a61e:	4618      	mov	r0, r3
 800a620:	3720      	adds	r7, #32
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}

0800a626 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a626:	b580      	push	{r7, lr}
 800a628:	b084      	sub	sp, #16
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	60f8      	str	r0, [r7, #12]
 800a62e:	60b9      	str	r1, [r7, #8]
 800a630:	607a      	str	r2, [r7, #4]
 800a632:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d103      	bne.n	800a642 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	69ba      	ldr	r2, [r7, #24]
 800a63e:	601a      	str	r2, [r3, #0]
 800a640:	e002      	b.n	800a648 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	687a      	ldr	r2, [r7, #4]
 800a646:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a648:	69bb      	ldr	r3, [r7, #24]
 800a64a:	68fa      	ldr	r2, [r7, #12]
 800a64c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a64e:	69bb      	ldr	r3, [r7, #24]
 800a650:	68ba      	ldr	r2, [r7, #8]
 800a652:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a654:	2101      	movs	r1, #1
 800a656:	69b8      	ldr	r0, [r7, #24]
 800a658:	f7ff fec8 	bl	800a3ec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a65c:	bf00      	nop
 800a65e:	3710      	adds	r7, #16
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b08e      	sub	sp, #56	; 0x38
 800a668:	af00      	add	r7, sp, #0
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	60b9      	str	r1, [r7, #8]
 800a66e:	607a      	str	r2, [r7, #4]
 800a670:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a672:	2300      	movs	r3, #0
 800a674:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d10a      	bne.n	800a696 <xQueueGenericSend+0x32>
	__asm volatile
 800a680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a684:	f383 8811 	msr	BASEPRI, r3
 800a688:	f3bf 8f6f 	isb	sy
 800a68c:	f3bf 8f4f 	dsb	sy
 800a690:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a692:	bf00      	nop
 800a694:	e7fe      	b.n	800a694 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d103      	bne.n	800a6a4 <xQueueGenericSend+0x40>
 800a69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d101      	bne.n	800a6a8 <xQueueGenericSend+0x44>
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	e000      	b.n	800a6aa <xQueueGenericSend+0x46>
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d10a      	bne.n	800a6c4 <xQueueGenericSend+0x60>
	__asm volatile
 800a6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b2:	f383 8811 	msr	BASEPRI, r3
 800a6b6:	f3bf 8f6f 	isb	sy
 800a6ba:	f3bf 8f4f 	dsb	sy
 800a6be:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a6c0:	bf00      	nop
 800a6c2:	e7fe      	b.n	800a6c2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	2b02      	cmp	r3, #2
 800a6c8:	d103      	bne.n	800a6d2 <xQueueGenericSend+0x6e>
 800a6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6ce:	2b01      	cmp	r3, #1
 800a6d0:	d101      	bne.n	800a6d6 <xQueueGenericSend+0x72>
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	e000      	b.n	800a6d8 <xQueueGenericSend+0x74>
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d10a      	bne.n	800a6f2 <xQueueGenericSend+0x8e>
	__asm volatile
 800a6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e0:	f383 8811 	msr	BASEPRI, r3
 800a6e4:	f3bf 8f6f 	isb	sy
 800a6e8:	f3bf 8f4f 	dsb	sy
 800a6ec:	623b      	str	r3, [r7, #32]
}
 800a6ee:	bf00      	nop
 800a6f0:	e7fe      	b.n	800a6f0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a6f2:	f001 fbe9 	bl	800bec8 <xTaskGetSchedulerState>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d102      	bne.n	800a702 <xQueueGenericSend+0x9e>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d101      	bne.n	800a706 <xQueueGenericSend+0xa2>
 800a702:	2301      	movs	r3, #1
 800a704:	e000      	b.n	800a708 <xQueueGenericSend+0xa4>
 800a706:	2300      	movs	r3, #0
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d10a      	bne.n	800a722 <xQueueGenericSend+0xbe>
	__asm volatile
 800a70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a710:	f383 8811 	msr	BASEPRI, r3
 800a714:	f3bf 8f6f 	isb	sy
 800a718:	f3bf 8f4f 	dsb	sy
 800a71c:	61fb      	str	r3, [r7, #28]
}
 800a71e:	bf00      	nop
 800a720:	e7fe      	b.n	800a720 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a722:	f002 fa8b 	bl	800cc3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a728:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a72c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a72e:	429a      	cmp	r2, r3
 800a730:	d302      	bcc.n	800a738 <xQueueGenericSend+0xd4>
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	2b02      	cmp	r3, #2
 800a736:	d129      	bne.n	800a78c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a738:	683a      	ldr	r2, [r7, #0]
 800a73a:	68b9      	ldr	r1, [r7, #8]
 800a73c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a73e:	f000 fc38 	bl	800afb2 <prvCopyDataToQueue>
 800a742:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d010      	beq.n	800a76e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a74e:	3324      	adds	r3, #36	; 0x24
 800a750:	4618      	mov	r0, r3
 800a752:	f001 f9f9 	bl	800bb48 <xTaskRemoveFromEventList>
 800a756:	4603      	mov	r3, r0
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d013      	beq.n	800a784 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a75c:	4b3f      	ldr	r3, [pc, #252]	; (800a85c <xQueueGenericSend+0x1f8>)
 800a75e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a762:	601a      	str	r2, [r3, #0]
 800a764:	f3bf 8f4f 	dsb	sy
 800a768:	f3bf 8f6f 	isb	sy
 800a76c:	e00a      	b.n	800a784 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a770:	2b00      	cmp	r3, #0
 800a772:	d007      	beq.n	800a784 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a774:	4b39      	ldr	r3, [pc, #228]	; (800a85c <xQueueGenericSend+0x1f8>)
 800a776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a77a:	601a      	str	r2, [r3, #0]
 800a77c:	f3bf 8f4f 	dsb	sy
 800a780:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a784:	f002 fa8a 	bl	800cc9c <vPortExitCritical>
				return pdPASS;
 800a788:	2301      	movs	r3, #1
 800a78a:	e063      	b.n	800a854 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d103      	bne.n	800a79a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a792:	f002 fa83 	bl	800cc9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a796:	2300      	movs	r3, #0
 800a798:	e05c      	b.n	800a854 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a79a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d106      	bne.n	800a7ae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a7a0:	f107 0314 	add.w	r3, r7, #20
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f001 fa31 	bl	800bc0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a7ae:	f002 fa75 	bl	800cc9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a7b2:	f000 ff97 	bl	800b6e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a7b6:	f002 fa41 	bl	800cc3c <vPortEnterCritical>
 800a7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a7c0:	b25b      	sxtb	r3, r3
 800a7c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7c6:	d103      	bne.n	800a7d0 <xQueueGenericSend+0x16c>
 800a7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7d6:	b25b      	sxtb	r3, r3
 800a7d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7dc:	d103      	bne.n	800a7e6 <xQueueGenericSend+0x182>
 800a7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7e6:	f002 fa59 	bl	800cc9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a7ea:	1d3a      	adds	r2, r7, #4
 800a7ec:	f107 0314 	add.w	r3, r7, #20
 800a7f0:	4611      	mov	r1, r2
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f001 fa20 	bl	800bc38 <xTaskCheckForTimeOut>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d124      	bne.n	800a848 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a7fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a800:	f000 fccf 	bl	800b1a2 <prvIsQueueFull>
 800a804:	4603      	mov	r3, r0
 800a806:	2b00      	cmp	r3, #0
 800a808:	d018      	beq.n	800a83c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a80c:	3310      	adds	r3, #16
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	4611      	mov	r1, r2
 800a812:	4618      	mov	r0, r3
 800a814:	f001 f948 	bl	800baa8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a818:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a81a:	f000 fc5a 	bl	800b0d2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a81e:	f000 ff6f 	bl	800b700 <xTaskResumeAll>
 800a822:	4603      	mov	r3, r0
 800a824:	2b00      	cmp	r3, #0
 800a826:	f47f af7c 	bne.w	800a722 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a82a:	4b0c      	ldr	r3, [pc, #48]	; (800a85c <xQueueGenericSend+0x1f8>)
 800a82c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a830:	601a      	str	r2, [r3, #0]
 800a832:	f3bf 8f4f 	dsb	sy
 800a836:	f3bf 8f6f 	isb	sy
 800a83a:	e772      	b.n	800a722 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a83c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a83e:	f000 fc48 	bl	800b0d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a842:	f000 ff5d 	bl	800b700 <xTaskResumeAll>
 800a846:	e76c      	b.n	800a722 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a848:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a84a:	f000 fc42 	bl	800b0d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a84e:	f000 ff57 	bl	800b700 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a852:	2300      	movs	r3, #0
		}
	}
}
 800a854:	4618      	mov	r0, r3
 800a856:	3738      	adds	r7, #56	; 0x38
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}
 800a85c:	e000ed04 	.word	0xe000ed04

0800a860 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b08e      	sub	sp, #56	; 0x38
 800a864:	af00      	add	r7, sp, #0
 800a866:	60f8      	str	r0, [r7, #12]
 800a868:	60b9      	str	r1, [r7, #8]
 800a86a:	607a      	str	r2, [r7, #4]
 800a86c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a874:	2b00      	cmp	r3, #0
 800a876:	d10a      	bne.n	800a88e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a87c:	f383 8811 	msr	BASEPRI, r3
 800a880:	f3bf 8f6f 	isb	sy
 800a884:	f3bf 8f4f 	dsb	sy
 800a888:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a88a:	bf00      	nop
 800a88c:	e7fe      	b.n	800a88c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d103      	bne.n	800a89c <xQueueGenericSendFromISR+0x3c>
 800a894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d101      	bne.n	800a8a0 <xQueueGenericSendFromISR+0x40>
 800a89c:	2301      	movs	r3, #1
 800a89e:	e000      	b.n	800a8a2 <xQueueGenericSendFromISR+0x42>
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d10a      	bne.n	800a8bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8aa:	f383 8811 	msr	BASEPRI, r3
 800a8ae:	f3bf 8f6f 	isb	sy
 800a8b2:	f3bf 8f4f 	dsb	sy
 800a8b6:	623b      	str	r3, [r7, #32]
}
 800a8b8:	bf00      	nop
 800a8ba:	e7fe      	b.n	800a8ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	2b02      	cmp	r3, #2
 800a8c0:	d103      	bne.n	800a8ca <xQueueGenericSendFromISR+0x6a>
 800a8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d101      	bne.n	800a8ce <xQueueGenericSendFromISR+0x6e>
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e000      	b.n	800a8d0 <xQueueGenericSendFromISR+0x70>
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d10a      	bne.n	800a8ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d8:	f383 8811 	msr	BASEPRI, r3
 800a8dc:	f3bf 8f6f 	isb	sy
 800a8e0:	f3bf 8f4f 	dsb	sy
 800a8e4:	61fb      	str	r3, [r7, #28]
}
 800a8e6:	bf00      	nop
 800a8e8:	e7fe      	b.n	800a8e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a8ea:	f002 fa69 	bl	800cdc0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a8ee:	f3ef 8211 	mrs	r2, BASEPRI
 800a8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f6:	f383 8811 	msr	BASEPRI, r3
 800a8fa:	f3bf 8f6f 	isb	sy
 800a8fe:	f3bf 8f4f 	dsb	sy
 800a902:	61ba      	str	r2, [r7, #24]
 800a904:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a906:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a908:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a912:	429a      	cmp	r2, r3
 800a914:	d302      	bcc.n	800a91c <xQueueGenericSendFromISR+0xbc>
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	2b02      	cmp	r3, #2
 800a91a:	d12c      	bne.n	800a976 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a926:	683a      	ldr	r2, [r7, #0]
 800a928:	68b9      	ldr	r1, [r7, #8]
 800a92a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a92c:	f000 fb41 	bl	800afb2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a930:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a934:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a938:	d112      	bne.n	800a960 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d016      	beq.n	800a970 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a944:	3324      	adds	r3, #36	; 0x24
 800a946:	4618      	mov	r0, r3
 800a948:	f001 f8fe 	bl	800bb48 <xTaskRemoveFromEventList>
 800a94c:	4603      	mov	r3, r0
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d00e      	beq.n	800a970 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d00b      	beq.n	800a970 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2201      	movs	r2, #1
 800a95c:	601a      	str	r2, [r3, #0]
 800a95e:	e007      	b.n	800a970 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a960:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a964:	3301      	adds	r3, #1
 800a966:	b2db      	uxtb	r3, r3
 800a968:	b25a      	sxtb	r2, r3
 800a96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a970:	2301      	movs	r3, #1
 800a972:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a974:	e001      	b.n	800a97a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a976:	2300      	movs	r3, #0
 800a978:	637b      	str	r3, [r7, #52]	; 0x34
 800a97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a97c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a984:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3738      	adds	r7, #56	; 0x38
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b08e      	sub	sp, #56	; 0x38
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d10a      	bne.n	800a9ba <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a8:	f383 8811 	msr	BASEPRI, r3
 800a9ac:	f3bf 8f6f 	isb	sy
 800a9b0:	f3bf 8f4f 	dsb	sy
 800a9b4:	623b      	str	r3, [r7, #32]
}
 800a9b6:	bf00      	nop
 800a9b8:	e7fe      	b.n	800a9b8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d00a      	beq.n	800a9d8 <xQueueGiveFromISR+0x48>
	__asm volatile
 800a9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c6:	f383 8811 	msr	BASEPRI, r3
 800a9ca:	f3bf 8f6f 	isb	sy
 800a9ce:	f3bf 8f4f 	dsb	sy
 800a9d2:	61fb      	str	r3, [r7, #28]
}
 800a9d4:	bf00      	nop
 800a9d6:	e7fe      	b.n	800a9d6 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800a9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d103      	bne.n	800a9e8 <xQueueGiveFromISR+0x58>
 800a9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d101      	bne.n	800a9ec <xQueueGiveFromISR+0x5c>
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	e000      	b.n	800a9ee <xQueueGiveFromISR+0x5e>
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d10a      	bne.n	800aa08 <xQueueGiveFromISR+0x78>
	__asm volatile
 800a9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f6:	f383 8811 	msr	BASEPRI, r3
 800a9fa:	f3bf 8f6f 	isb	sy
 800a9fe:	f3bf 8f4f 	dsb	sy
 800aa02:	61bb      	str	r3, [r7, #24]
}
 800aa04:	bf00      	nop
 800aa06:	e7fe      	b.n	800aa06 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa08:	f002 f9da 	bl	800cdc0 <vPortValidateInterruptPriority>
	__asm volatile
 800aa0c:	f3ef 8211 	mrs	r2, BASEPRI
 800aa10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa14:	f383 8811 	msr	BASEPRI, r3
 800aa18:	f3bf 8f6f 	isb	sy
 800aa1c:	f3bf 8f4f 	dsb	sy
 800aa20:	617a      	str	r2, [r7, #20]
 800aa22:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800aa24:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa26:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa2c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800aa2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d22b      	bcs.n	800aa90 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aa38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aa42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa44:	1c5a      	adds	r2, r3, #1
 800aa46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa48:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aa4a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aa4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa52:	d112      	bne.n	800aa7a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d016      	beq.n	800aa8a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5e:	3324      	adds	r3, #36	; 0x24
 800aa60:	4618      	mov	r0, r3
 800aa62:	f001 f871 	bl	800bb48 <xTaskRemoveFromEventList>
 800aa66:	4603      	mov	r3, r0
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d00e      	beq.n	800aa8a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d00b      	beq.n	800aa8a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	2201      	movs	r2, #1
 800aa76:	601a      	str	r2, [r3, #0]
 800aa78:	e007      	b.n	800aa8a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aa7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa7e:	3301      	adds	r3, #1
 800aa80:	b2db      	uxtb	r3, r3
 800aa82:	b25a      	sxtb	r2, r3
 800aa84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	637b      	str	r3, [r7, #52]	; 0x34
 800aa8e:	e001      	b.n	800aa94 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aa90:	2300      	movs	r3, #0
 800aa92:	637b      	str	r3, [r7, #52]	; 0x34
 800aa94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa96:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f383 8811 	msr	BASEPRI, r3
}
 800aa9e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aaa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3738      	adds	r7, #56	; 0x38
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
	...

0800aaac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b08c      	sub	sp, #48	; 0x30
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	60b9      	str	r1, [r7, #8]
 800aab6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aab8:	2300      	movs	r3, #0
 800aaba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d10a      	bne.n	800aadc <xQueueReceive+0x30>
	__asm volatile
 800aac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaca:	f383 8811 	msr	BASEPRI, r3
 800aace:	f3bf 8f6f 	isb	sy
 800aad2:	f3bf 8f4f 	dsb	sy
 800aad6:	623b      	str	r3, [r7, #32]
}
 800aad8:	bf00      	nop
 800aada:	e7fe      	b.n	800aada <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d103      	bne.n	800aaea <xQueueReceive+0x3e>
 800aae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d101      	bne.n	800aaee <xQueueReceive+0x42>
 800aaea:	2301      	movs	r3, #1
 800aaec:	e000      	b.n	800aaf0 <xQueueReceive+0x44>
 800aaee:	2300      	movs	r3, #0
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d10a      	bne.n	800ab0a <xQueueReceive+0x5e>
	__asm volatile
 800aaf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf8:	f383 8811 	msr	BASEPRI, r3
 800aafc:	f3bf 8f6f 	isb	sy
 800ab00:	f3bf 8f4f 	dsb	sy
 800ab04:	61fb      	str	r3, [r7, #28]
}
 800ab06:	bf00      	nop
 800ab08:	e7fe      	b.n	800ab08 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab0a:	f001 f9dd 	bl	800bec8 <xTaskGetSchedulerState>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d102      	bne.n	800ab1a <xQueueReceive+0x6e>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d101      	bne.n	800ab1e <xQueueReceive+0x72>
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	e000      	b.n	800ab20 <xQueueReceive+0x74>
 800ab1e:	2300      	movs	r3, #0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d10a      	bne.n	800ab3a <xQueueReceive+0x8e>
	__asm volatile
 800ab24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab28:	f383 8811 	msr	BASEPRI, r3
 800ab2c:	f3bf 8f6f 	isb	sy
 800ab30:	f3bf 8f4f 	dsb	sy
 800ab34:	61bb      	str	r3, [r7, #24]
}
 800ab36:	bf00      	nop
 800ab38:	e7fe      	b.n	800ab38 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab3a:	f002 f87f 	bl	800cc3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab42:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d01f      	beq.n	800ab8a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab4a:	68b9      	ldr	r1, [r7, #8]
 800ab4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab4e:	f000 fa9a 	bl	800b086 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab54:	1e5a      	subs	r2, r3, #1
 800ab56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab58:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5c:	691b      	ldr	r3, [r3, #16]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d00f      	beq.n	800ab82 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab64:	3310      	adds	r3, #16
 800ab66:	4618      	mov	r0, r3
 800ab68:	f000 ffee 	bl	800bb48 <xTaskRemoveFromEventList>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d007      	beq.n	800ab82 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ab72:	4b3d      	ldr	r3, [pc, #244]	; (800ac68 <xQueueReceive+0x1bc>)
 800ab74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab78:	601a      	str	r2, [r3, #0]
 800ab7a:	f3bf 8f4f 	dsb	sy
 800ab7e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab82:	f002 f88b 	bl	800cc9c <vPortExitCritical>
				return pdPASS;
 800ab86:	2301      	movs	r3, #1
 800ab88:	e069      	b.n	800ac5e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d103      	bne.n	800ab98 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab90:	f002 f884 	bl	800cc9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ab94:	2300      	movs	r3, #0
 800ab96:	e062      	b.n	800ac5e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d106      	bne.n	800abac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab9e:	f107 0310 	add.w	r3, r7, #16
 800aba2:	4618      	mov	r0, r3
 800aba4:	f001 f832 	bl	800bc0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aba8:	2301      	movs	r3, #1
 800abaa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800abac:	f002 f876 	bl	800cc9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800abb0:	f000 fd98 	bl	800b6e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800abb4:	f002 f842 	bl	800cc3c <vPortEnterCritical>
 800abb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abbe:	b25b      	sxtb	r3, r3
 800abc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abc4:	d103      	bne.n	800abce <xQueueReceive+0x122>
 800abc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc8:	2200      	movs	r2, #0
 800abca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abd4:	b25b      	sxtb	r3, r3
 800abd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abda:	d103      	bne.n	800abe4 <xQueueReceive+0x138>
 800abdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abde:	2200      	movs	r2, #0
 800abe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abe4:	f002 f85a 	bl	800cc9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800abe8:	1d3a      	adds	r2, r7, #4
 800abea:	f107 0310 	add.w	r3, r7, #16
 800abee:	4611      	mov	r1, r2
 800abf0:	4618      	mov	r0, r3
 800abf2:	f001 f821 	bl	800bc38 <xTaskCheckForTimeOut>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d123      	bne.n	800ac44 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abfe:	f000 faba 	bl	800b176 <prvIsQueueEmpty>
 800ac02:	4603      	mov	r3, r0
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d017      	beq.n	800ac38 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ac08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac0a:	3324      	adds	r3, #36	; 0x24
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	4611      	mov	r1, r2
 800ac10:	4618      	mov	r0, r3
 800ac12:	f000 ff49 	bl	800baa8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ac16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac18:	f000 fa5b 	bl	800b0d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ac1c:	f000 fd70 	bl	800b700 <xTaskResumeAll>
 800ac20:	4603      	mov	r3, r0
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d189      	bne.n	800ab3a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ac26:	4b10      	ldr	r3, [pc, #64]	; (800ac68 <xQueueReceive+0x1bc>)
 800ac28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac2c:	601a      	str	r2, [r3, #0]
 800ac2e:	f3bf 8f4f 	dsb	sy
 800ac32:	f3bf 8f6f 	isb	sy
 800ac36:	e780      	b.n	800ab3a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ac38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac3a:	f000 fa4a 	bl	800b0d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac3e:	f000 fd5f 	bl	800b700 <xTaskResumeAll>
 800ac42:	e77a      	b.n	800ab3a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ac44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac46:	f000 fa44 	bl	800b0d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac4a:	f000 fd59 	bl	800b700 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac50:	f000 fa91 	bl	800b176 <prvIsQueueEmpty>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	f43f af6f 	beq.w	800ab3a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ac5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3730      	adds	r7, #48	; 0x30
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	bf00      	nop
 800ac68:	e000ed04 	.word	0xe000ed04

0800ac6c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b08e      	sub	sp, #56	; 0x38
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac76:	2300      	movs	r3, #0
 800ac78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d10a      	bne.n	800ac9e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ac88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac8c:	f383 8811 	msr	BASEPRI, r3
 800ac90:	f3bf 8f6f 	isb	sy
 800ac94:	f3bf 8f4f 	dsb	sy
 800ac98:	623b      	str	r3, [r7, #32]
}
 800ac9a:	bf00      	nop
 800ac9c:	e7fe      	b.n	800ac9c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ac9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d00a      	beq.n	800acbc <xQueueSemaphoreTake+0x50>
	__asm volatile
 800aca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acaa:	f383 8811 	msr	BASEPRI, r3
 800acae:	f3bf 8f6f 	isb	sy
 800acb2:	f3bf 8f4f 	dsb	sy
 800acb6:	61fb      	str	r3, [r7, #28]
}
 800acb8:	bf00      	nop
 800acba:	e7fe      	b.n	800acba <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800acbc:	f001 f904 	bl	800bec8 <xTaskGetSchedulerState>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d102      	bne.n	800accc <xQueueSemaphoreTake+0x60>
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d101      	bne.n	800acd0 <xQueueSemaphoreTake+0x64>
 800accc:	2301      	movs	r3, #1
 800acce:	e000      	b.n	800acd2 <xQueueSemaphoreTake+0x66>
 800acd0:	2300      	movs	r3, #0
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d10a      	bne.n	800acec <xQueueSemaphoreTake+0x80>
	__asm volatile
 800acd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acda:	f383 8811 	msr	BASEPRI, r3
 800acde:	f3bf 8f6f 	isb	sy
 800ace2:	f3bf 8f4f 	dsb	sy
 800ace6:	61bb      	str	r3, [r7, #24]
}
 800ace8:	bf00      	nop
 800acea:	e7fe      	b.n	800acea <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800acec:	f001 ffa6 	bl	800cc3c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800acf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acf4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800acf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d024      	beq.n	800ad46 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800acfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acfe:	1e5a      	subs	r2, r3, #1
 800ad00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad02:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d104      	bne.n	800ad16 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800ad0c:	f001 faa6 	bl	800c25c <pvTaskIncrementMutexHeldCount>
 800ad10:	4602      	mov	r2, r0
 800ad12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad14:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad18:	691b      	ldr	r3, [r3, #16]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d00f      	beq.n	800ad3e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad20:	3310      	adds	r3, #16
 800ad22:	4618      	mov	r0, r3
 800ad24:	f000 ff10 	bl	800bb48 <xTaskRemoveFromEventList>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d007      	beq.n	800ad3e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ad2e:	4b54      	ldr	r3, [pc, #336]	; (800ae80 <xQueueSemaphoreTake+0x214>)
 800ad30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad34:	601a      	str	r2, [r3, #0]
 800ad36:	f3bf 8f4f 	dsb	sy
 800ad3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ad3e:	f001 ffad 	bl	800cc9c <vPortExitCritical>
				return pdPASS;
 800ad42:	2301      	movs	r3, #1
 800ad44:	e097      	b.n	800ae76 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d111      	bne.n	800ad70 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ad4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d00a      	beq.n	800ad68 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ad52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad56:	f383 8811 	msr	BASEPRI, r3
 800ad5a:	f3bf 8f6f 	isb	sy
 800ad5e:	f3bf 8f4f 	dsb	sy
 800ad62:	617b      	str	r3, [r7, #20]
}
 800ad64:	bf00      	nop
 800ad66:	e7fe      	b.n	800ad66 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ad68:	f001 ff98 	bl	800cc9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	e082      	b.n	800ae76 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d106      	bne.n	800ad84 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad76:	f107 030c 	add.w	r3, r7, #12
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f000 ff46 	bl	800bc0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad80:	2301      	movs	r3, #1
 800ad82:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad84:	f001 ff8a 	bl	800cc9c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad88:	f000 fcac 	bl	800b6e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad8c:	f001 ff56 	bl	800cc3c <vPortEnterCritical>
 800ad90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad96:	b25b      	sxtb	r3, r3
 800ad98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad9c:	d103      	bne.n	800ada6 <xQueueSemaphoreTake+0x13a>
 800ad9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada0:	2200      	movs	r2, #0
 800ada2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ada6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800adac:	b25b      	sxtb	r3, r3
 800adae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adb2:	d103      	bne.n	800adbc <xQueueSemaphoreTake+0x150>
 800adb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb6:	2200      	movs	r2, #0
 800adb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800adbc:	f001 ff6e 	bl	800cc9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800adc0:	463a      	mov	r2, r7
 800adc2:	f107 030c 	add.w	r3, r7, #12
 800adc6:	4611      	mov	r1, r2
 800adc8:	4618      	mov	r0, r3
 800adca:	f000 ff35 	bl	800bc38 <xTaskCheckForTimeOut>
 800adce:	4603      	mov	r3, r0
 800add0:	2b00      	cmp	r3, #0
 800add2:	d132      	bne.n	800ae3a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800add4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800add6:	f000 f9ce 	bl	800b176 <prvIsQueueEmpty>
 800adda:	4603      	mov	r3, r0
 800addc:	2b00      	cmp	r3, #0
 800adde:	d026      	beq.n	800ae2e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ade0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d109      	bne.n	800adfc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ade8:	f001 ff28 	bl	800cc3c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800adec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	4618      	mov	r0, r3
 800adf2:	f001 f887 	bl	800bf04 <xTaskPriorityInherit>
 800adf6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800adf8:	f001 ff50 	bl	800cc9c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800adfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adfe:	3324      	adds	r3, #36	; 0x24
 800ae00:	683a      	ldr	r2, [r7, #0]
 800ae02:	4611      	mov	r1, r2
 800ae04:	4618      	mov	r0, r3
 800ae06:	f000 fe4f 	bl	800baa8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ae0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae0c:	f000 f961 	bl	800b0d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ae10:	f000 fc76 	bl	800b700 <xTaskResumeAll>
 800ae14:	4603      	mov	r3, r0
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	f47f af68 	bne.w	800acec <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ae1c:	4b18      	ldr	r3, [pc, #96]	; (800ae80 <xQueueSemaphoreTake+0x214>)
 800ae1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae22:	601a      	str	r2, [r3, #0]
 800ae24:	f3bf 8f4f 	dsb	sy
 800ae28:	f3bf 8f6f 	isb	sy
 800ae2c:	e75e      	b.n	800acec <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ae2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae30:	f000 f94f 	bl	800b0d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae34:	f000 fc64 	bl	800b700 <xTaskResumeAll>
 800ae38:	e758      	b.n	800acec <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ae3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae3c:	f000 f949 	bl	800b0d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae40:	f000 fc5e 	bl	800b700 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae46:	f000 f996 	bl	800b176 <prvIsQueueEmpty>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	f43f af4d 	beq.w	800acec <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ae52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d00d      	beq.n	800ae74 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ae58:	f001 fef0 	bl	800cc3c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ae5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae5e:	f000 f891 	bl	800af84 <prvGetDisinheritPriorityAfterTimeout>
 800ae62:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800ae64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f001 f956 	bl	800c11c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ae70:	f001 ff14 	bl	800cc9c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3738      	adds	r7, #56	; 0x38
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	bf00      	nop
 800ae80:	e000ed04 	.word	0xe000ed04

0800ae84 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b08e      	sub	sp, #56	; 0x38
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	60b9      	str	r1, [r7, #8]
 800ae8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ae94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d10a      	bne.n	800aeb0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ae9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9e:	f383 8811 	msr	BASEPRI, r3
 800aea2:	f3bf 8f6f 	isb	sy
 800aea6:	f3bf 8f4f 	dsb	sy
 800aeaa:	623b      	str	r3, [r7, #32]
}
 800aeac:	bf00      	nop
 800aeae:	e7fe      	b.n	800aeae <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d103      	bne.n	800aebe <xQueueReceiveFromISR+0x3a>
 800aeb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d101      	bne.n	800aec2 <xQueueReceiveFromISR+0x3e>
 800aebe:	2301      	movs	r3, #1
 800aec0:	e000      	b.n	800aec4 <xQueueReceiveFromISR+0x40>
 800aec2:	2300      	movs	r3, #0
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d10a      	bne.n	800aede <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800aec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aecc:	f383 8811 	msr	BASEPRI, r3
 800aed0:	f3bf 8f6f 	isb	sy
 800aed4:	f3bf 8f4f 	dsb	sy
 800aed8:	61fb      	str	r3, [r7, #28]
}
 800aeda:	bf00      	nop
 800aedc:	e7fe      	b.n	800aedc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aede:	f001 ff6f 	bl	800cdc0 <vPortValidateInterruptPriority>
	__asm volatile
 800aee2:	f3ef 8211 	mrs	r2, BASEPRI
 800aee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeea:	f383 8811 	msr	BASEPRI, r3
 800aeee:	f3bf 8f6f 	isb	sy
 800aef2:	f3bf 8f4f 	dsb	sy
 800aef6:	61ba      	str	r2, [r7, #24]
 800aef8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800aefa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aefc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aefe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af02:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af06:	2b00      	cmp	r3, #0
 800af08:	d02f      	beq.n	800af6a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800af0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800af14:	68b9      	ldr	r1, [r7, #8]
 800af16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af18:	f000 f8b5 	bl	800b086 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800af1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af1e:	1e5a      	subs	r2, r3, #1
 800af20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af22:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800af24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800af28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af2c:	d112      	bne.n	800af54 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af30:	691b      	ldr	r3, [r3, #16]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d016      	beq.n	800af64 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af38:	3310      	adds	r3, #16
 800af3a:	4618      	mov	r0, r3
 800af3c:	f000 fe04 	bl	800bb48 <xTaskRemoveFromEventList>
 800af40:	4603      	mov	r3, r0
 800af42:	2b00      	cmp	r3, #0
 800af44:	d00e      	beq.n	800af64 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d00b      	beq.n	800af64 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2201      	movs	r2, #1
 800af50:	601a      	str	r2, [r3, #0]
 800af52:	e007      	b.n	800af64 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800af54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af58:	3301      	adds	r3, #1
 800af5a:	b2db      	uxtb	r3, r3
 800af5c:	b25a      	sxtb	r2, r3
 800af5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800af64:	2301      	movs	r3, #1
 800af66:	637b      	str	r3, [r7, #52]	; 0x34
 800af68:	e001      	b.n	800af6e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800af6a:	2300      	movs	r3, #0
 800af6c:	637b      	str	r3, [r7, #52]	; 0x34
 800af6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af70:	613b      	str	r3, [r7, #16]
	__asm volatile
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	f383 8811 	msr	BASEPRI, r3
}
 800af78:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3738      	adds	r7, #56	; 0x38
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800af84:	b480      	push	{r7}
 800af86:	b085      	sub	sp, #20
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af90:	2b00      	cmp	r3, #0
 800af92:	d006      	beq.n	800afa2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f1c3 0307 	rsb	r3, r3, #7
 800af9e:	60fb      	str	r3, [r7, #12]
 800afa0:	e001      	b.n	800afa6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800afa2:	2300      	movs	r3, #0
 800afa4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800afa6:	68fb      	ldr	r3, [r7, #12]
	}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3714      	adds	r7, #20
 800afac:	46bd      	mov	sp, r7
 800afae:	bc80      	pop	{r7}
 800afb0:	4770      	bx	lr

0800afb2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b086      	sub	sp, #24
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	60f8      	str	r0, [r7, #12]
 800afba:	60b9      	str	r1, [r7, #8]
 800afbc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800afbe:	2300      	movs	r3, #0
 800afc0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afc6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d10d      	bne.n	800afec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d14d      	bne.n	800b074 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	685b      	ldr	r3, [r3, #4]
 800afdc:	4618      	mov	r0, r3
 800afde:	f001 f817 	bl	800c010 <xTaskPriorityDisinherit>
 800afe2:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2200      	movs	r2, #0
 800afe8:	605a      	str	r2, [r3, #4]
 800afea:	e043      	b.n	800b074 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d119      	bne.n	800b026 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	6898      	ldr	r0, [r3, #8]
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800affa:	461a      	mov	r2, r3
 800affc:	68b9      	ldr	r1, [r7, #8]
 800affe:	f002 f91f 	bl	800d240 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	689a      	ldr	r2, [r3, #8]
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b00a:	441a      	add	r2, r3
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	689a      	ldr	r2, [r3, #8]
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	429a      	cmp	r2, r3
 800b01a:	d32b      	bcc.n	800b074 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681a      	ldr	r2, [r3, #0]
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	609a      	str	r2, [r3, #8]
 800b024:	e026      	b.n	800b074 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	68d8      	ldr	r0, [r3, #12]
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b02e:	461a      	mov	r2, r3
 800b030:	68b9      	ldr	r1, [r7, #8]
 800b032:	f002 f905 	bl	800d240 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	68da      	ldr	r2, [r3, #12]
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b03e:	425b      	negs	r3, r3
 800b040:	441a      	add	r2, r3
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	68da      	ldr	r2, [r3, #12]
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d207      	bcs.n	800b062 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	685a      	ldr	r2, [r3, #4]
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b05a:	425b      	negs	r3, r3
 800b05c:	441a      	add	r2, r3
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2b02      	cmp	r3, #2
 800b066:	d105      	bne.n	800b074 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d002      	beq.n	800b074 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	3b01      	subs	r3, #1
 800b072:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	1c5a      	adds	r2, r3, #1
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b07c:	697b      	ldr	r3, [r7, #20]
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3718      	adds	r7, #24
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}

0800b086 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b086:	b580      	push	{r7, lr}
 800b088:	b082      	sub	sp, #8
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	6078      	str	r0, [r7, #4]
 800b08e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b094:	2b00      	cmp	r3, #0
 800b096:	d018      	beq.n	800b0ca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	68da      	ldr	r2, [r3, #12]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0a0:	441a      	add	r2, r3
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	68da      	ldr	r2, [r3, #12]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	d303      	bcc.n	800b0ba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	68d9      	ldr	r1, [r3, #12]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	6838      	ldr	r0, [r7, #0]
 800b0c6:	f002 f8bb 	bl	800d240 <memcpy>
	}
}
 800b0ca:	bf00      	nop
 800b0cc:	3708      	adds	r7, #8
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b0d2:	b580      	push	{r7, lr}
 800b0d4:	b084      	sub	sp, #16
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b0da:	f001 fdaf 	bl	800cc3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0e4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b0e6:	e011      	b.n	800b10c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d012      	beq.n	800b116 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	3324      	adds	r3, #36	; 0x24
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f000 fd27 	bl	800bb48 <xTaskRemoveFromEventList>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d001      	beq.n	800b104 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b100:	f000 fdfc 	bl	800bcfc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b104:	7bfb      	ldrb	r3, [r7, #15]
 800b106:	3b01      	subs	r3, #1
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b10c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b110:	2b00      	cmp	r3, #0
 800b112:	dce9      	bgt.n	800b0e8 <prvUnlockQueue+0x16>
 800b114:	e000      	b.n	800b118 <prvUnlockQueue+0x46>
					break;
 800b116:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	22ff      	movs	r2, #255	; 0xff
 800b11c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b120:	f001 fdbc 	bl	800cc9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b124:	f001 fd8a 	bl	800cc3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b12e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b130:	e011      	b.n	800b156 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	691b      	ldr	r3, [r3, #16]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d012      	beq.n	800b160 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	3310      	adds	r3, #16
 800b13e:	4618      	mov	r0, r3
 800b140:	f000 fd02 	bl	800bb48 <xTaskRemoveFromEventList>
 800b144:	4603      	mov	r3, r0
 800b146:	2b00      	cmp	r3, #0
 800b148:	d001      	beq.n	800b14e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b14a:	f000 fdd7 	bl	800bcfc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b14e:	7bbb      	ldrb	r3, [r7, #14]
 800b150:	3b01      	subs	r3, #1
 800b152:	b2db      	uxtb	r3, r3
 800b154:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b156:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	dce9      	bgt.n	800b132 <prvUnlockQueue+0x60>
 800b15e:	e000      	b.n	800b162 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b160:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	22ff      	movs	r2, #255	; 0xff
 800b166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b16a:	f001 fd97 	bl	800cc9c <vPortExitCritical>
}
 800b16e:	bf00      	nop
 800b170:	3710      	adds	r7, #16
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}

0800b176 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b176:	b580      	push	{r7, lr}
 800b178:	b084      	sub	sp, #16
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b17e:	f001 fd5d 	bl	800cc3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b186:	2b00      	cmp	r3, #0
 800b188:	d102      	bne.n	800b190 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b18a:	2301      	movs	r3, #1
 800b18c:	60fb      	str	r3, [r7, #12]
 800b18e:	e001      	b.n	800b194 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b190:	2300      	movs	r3, #0
 800b192:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b194:	f001 fd82 	bl	800cc9c <vPortExitCritical>

	return xReturn;
 800b198:	68fb      	ldr	r3, [r7, #12]
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3710      	adds	r7, #16
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}

0800b1a2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b1a2:	b580      	push	{r7, lr}
 800b1a4:	b084      	sub	sp, #16
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1aa:	f001 fd47 	bl	800cc3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d102      	bne.n	800b1c0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	60fb      	str	r3, [r7, #12]
 800b1be:	e001      	b.n	800b1c4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b1c4:	f001 fd6a 	bl	800cc9c <vPortExitCritical>

	return xReturn;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3710      	adds	r7, #16
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
	...

0800b1d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b085      	sub	sp, #20
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b1de:	2300      	movs	r3, #0
 800b1e0:	60fb      	str	r3, [r7, #12]
 800b1e2:	e014      	b.n	800b20e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b1e4:	4a0e      	ldr	r2, [pc, #56]	; (800b220 <vQueueAddToRegistry+0x4c>)
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d10b      	bne.n	800b208 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b1f0:	490b      	ldr	r1, [pc, #44]	; (800b220 <vQueueAddToRegistry+0x4c>)
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	683a      	ldr	r2, [r7, #0]
 800b1f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b1fa:	4a09      	ldr	r2, [pc, #36]	; (800b220 <vQueueAddToRegistry+0x4c>)
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	00db      	lsls	r3, r3, #3
 800b200:	4413      	add	r3, r2
 800b202:	687a      	ldr	r2, [r7, #4]
 800b204:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b206:	e006      	b.n	800b216 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	3301      	adds	r3, #1
 800b20c:	60fb      	str	r3, [r7, #12]
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2b07      	cmp	r3, #7
 800b212:	d9e7      	bls.n	800b1e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b214:	bf00      	nop
 800b216:	bf00      	nop
 800b218:	3714      	adds	r7, #20
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bc80      	pop	{r7}
 800b21e:	4770      	bx	lr
 800b220:	20003044 	.word	0x20003044

0800b224 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b224:	b580      	push	{r7, lr}
 800b226:	b086      	sub	sp, #24
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	60b9      	str	r1, [r7, #8]
 800b22e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b234:	f001 fd02 	bl	800cc3c <vPortEnterCritical>
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b23e:	b25b      	sxtb	r3, r3
 800b240:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b244:	d103      	bne.n	800b24e <vQueueWaitForMessageRestricted+0x2a>
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	2200      	movs	r2, #0
 800b24a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b254:	b25b      	sxtb	r3, r3
 800b256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b25a:	d103      	bne.n	800b264 <vQueueWaitForMessageRestricted+0x40>
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	2200      	movs	r2, #0
 800b260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b264:	f001 fd1a 	bl	800cc9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d106      	bne.n	800b27e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	3324      	adds	r3, #36	; 0x24
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	68b9      	ldr	r1, [r7, #8]
 800b278:	4618      	mov	r0, r3
 800b27a:	f000 fc39 	bl	800baf0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b27e:	6978      	ldr	r0, [r7, #20]
 800b280:	f7ff ff27 	bl	800b0d2 <prvUnlockQueue>
	}
 800b284:	bf00      	nop
 800b286:	3718      	adds	r7, #24
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}

0800b28c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b08e      	sub	sp, #56	; 0x38
 800b290:	af04      	add	r7, sp, #16
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	60b9      	str	r1, [r7, #8]
 800b296:	607a      	str	r2, [r7, #4]
 800b298:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b29a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d10a      	bne.n	800b2b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a4:	f383 8811 	msr	BASEPRI, r3
 800b2a8:	f3bf 8f6f 	isb	sy
 800b2ac:	f3bf 8f4f 	dsb	sy
 800b2b0:	623b      	str	r3, [r7, #32]
}
 800b2b2:	bf00      	nop
 800b2b4:	e7fe      	b.n	800b2b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d10a      	bne.n	800b2d2 <xTaskCreateStatic+0x46>
	__asm volatile
 800b2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c0:	f383 8811 	msr	BASEPRI, r3
 800b2c4:	f3bf 8f6f 	isb	sy
 800b2c8:	f3bf 8f4f 	dsb	sy
 800b2cc:	61fb      	str	r3, [r7, #28]
}
 800b2ce:	bf00      	nop
 800b2d0:	e7fe      	b.n	800b2d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b2d2:	2354      	movs	r3, #84	; 0x54
 800b2d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	2b54      	cmp	r3, #84	; 0x54
 800b2da:	d00a      	beq.n	800b2f2 <xTaskCreateStatic+0x66>
	__asm volatile
 800b2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e0:	f383 8811 	msr	BASEPRI, r3
 800b2e4:	f3bf 8f6f 	isb	sy
 800b2e8:	f3bf 8f4f 	dsb	sy
 800b2ec:	61bb      	str	r3, [r7, #24]
}
 800b2ee:	bf00      	nop
 800b2f0:	e7fe      	b.n	800b2f0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d01e      	beq.n	800b336 <xTaskCreateStatic+0xaa>
 800b2f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d01b      	beq.n	800b336 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b300:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b304:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b306:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30a:	2202      	movs	r2, #2
 800b30c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b310:	2300      	movs	r3, #0
 800b312:	9303      	str	r3, [sp, #12]
 800b314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b316:	9302      	str	r3, [sp, #8]
 800b318:	f107 0314 	add.w	r3, r7, #20
 800b31c:	9301      	str	r3, [sp, #4]
 800b31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b320:	9300      	str	r3, [sp, #0]
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	687a      	ldr	r2, [r7, #4]
 800b326:	68b9      	ldr	r1, [r7, #8]
 800b328:	68f8      	ldr	r0, [r7, #12]
 800b32a:	f000 f850 	bl	800b3ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b32e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b330:	f000 f8d4 	bl	800b4dc <prvAddNewTaskToReadyList>
 800b334:	e001      	b.n	800b33a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800b336:	2300      	movs	r3, #0
 800b338:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b33a:	697b      	ldr	r3, [r7, #20]
	}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3728      	adds	r7, #40	; 0x28
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}

0800b344 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b344:	b580      	push	{r7, lr}
 800b346:	b08c      	sub	sp, #48	; 0x30
 800b348:	af04      	add	r7, sp, #16
 800b34a:	60f8      	str	r0, [r7, #12]
 800b34c:	60b9      	str	r1, [r7, #8]
 800b34e:	603b      	str	r3, [r7, #0]
 800b350:	4613      	mov	r3, r2
 800b352:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b354:	88fb      	ldrh	r3, [r7, #6]
 800b356:	009b      	lsls	r3, r3, #2
 800b358:	4618      	mov	r0, r3
 800b35a:	f001 fd6f 	bl	800ce3c <pvPortMalloc>
 800b35e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d00e      	beq.n	800b384 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b366:	2054      	movs	r0, #84	; 0x54
 800b368:	f001 fd68 	bl	800ce3c <pvPortMalloc>
 800b36c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b36e:	69fb      	ldr	r3, [r7, #28]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d003      	beq.n	800b37c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b374:	69fb      	ldr	r3, [r7, #28]
 800b376:	697a      	ldr	r2, [r7, #20]
 800b378:	631a      	str	r2, [r3, #48]	; 0x30
 800b37a:	e005      	b.n	800b388 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b37c:	6978      	ldr	r0, [r7, #20]
 800b37e:	f001 fe21 	bl	800cfc4 <vPortFree>
 800b382:	e001      	b.n	800b388 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b384:	2300      	movs	r3, #0
 800b386:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b388:	69fb      	ldr	r3, [r7, #28]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d017      	beq.n	800b3be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b38e:	69fb      	ldr	r3, [r7, #28]
 800b390:	2200      	movs	r2, #0
 800b392:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b396:	88fa      	ldrh	r2, [r7, #6]
 800b398:	2300      	movs	r3, #0
 800b39a:	9303      	str	r3, [sp, #12]
 800b39c:	69fb      	ldr	r3, [r7, #28]
 800b39e:	9302      	str	r3, [sp, #8]
 800b3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a2:	9301      	str	r3, [sp, #4]
 800b3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a6:	9300      	str	r3, [sp, #0]
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	68b9      	ldr	r1, [r7, #8]
 800b3ac:	68f8      	ldr	r0, [r7, #12]
 800b3ae:	f000 f80e 	bl	800b3ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b3b2:	69f8      	ldr	r0, [r7, #28]
 800b3b4:	f000 f892 	bl	800b4dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	61bb      	str	r3, [r7, #24]
 800b3bc:	e002      	b.n	800b3c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b3be:	f04f 33ff 	mov.w	r3, #4294967295
 800b3c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b3c4:	69bb      	ldr	r3, [r7, #24]
	}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3720      	adds	r7, #32
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}

0800b3ce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b3ce:	b580      	push	{r7, lr}
 800b3d0:	b088      	sub	sp, #32
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	60f8      	str	r0, [r7, #12]
 800b3d6:	60b9      	str	r1, [r7, #8]
 800b3d8:	607a      	str	r2, [r7, #4]
 800b3da:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3de:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	21a5      	movs	r1, #165	; 0xa5
 800b3e8:	f001 ff38 	bl	800d25c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b3f6:	3b01      	subs	r3, #1
 800b3f8:	009b      	lsls	r3, r3, #2
 800b3fa:	4413      	add	r3, r2
 800b3fc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b3fe:	69bb      	ldr	r3, [r7, #24]
 800b400:	f023 0307 	bic.w	r3, r3, #7
 800b404:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b406:	69bb      	ldr	r3, [r7, #24]
 800b408:	f003 0307 	and.w	r3, r3, #7
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d00a      	beq.n	800b426 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b414:	f383 8811 	msr	BASEPRI, r3
 800b418:	f3bf 8f6f 	isb	sy
 800b41c:	f3bf 8f4f 	dsb	sy
 800b420:	617b      	str	r3, [r7, #20]
}
 800b422:	bf00      	nop
 800b424:	e7fe      	b.n	800b424 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b426:	2300      	movs	r3, #0
 800b428:	61fb      	str	r3, [r7, #28]
 800b42a:	e012      	b.n	800b452 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b42c:	68ba      	ldr	r2, [r7, #8]
 800b42e:	69fb      	ldr	r3, [r7, #28]
 800b430:	4413      	add	r3, r2
 800b432:	7819      	ldrb	r1, [r3, #0]
 800b434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b436:	69fb      	ldr	r3, [r7, #28]
 800b438:	4413      	add	r3, r2
 800b43a:	3334      	adds	r3, #52	; 0x34
 800b43c:	460a      	mov	r2, r1
 800b43e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b440:	68ba      	ldr	r2, [r7, #8]
 800b442:	69fb      	ldr	r3, [r7, #28]
 800b444:	4413      	add	r3, r2
 800b446:	781b      	ldrb	r3, [r3, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d006      	beq.n	800b45a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b44c:	69fb      	ldr	r3, [r7, #28]
 800b44e:	3301      	adds	r3, #1
 800b450:	61fb      	str	r3, [r7, #28]
 800b452:	69fb      	ldr	r3, [r7, #28]
 800b454:	2b0f      	cmp	r3, #15
 800b456:	d9e9      	bls.n	800b42c <prvInitialiseNewTask+0x5e>
 800b458:	e000      	b.n	800b45c <prvInitialiseNewTask+0x8e>
		{
			break;
 800b45a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b45e:	2200      	movs	r2, #0
 800b460:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b466:	2b06      	cmp	r3, #6
 800b468:	d901      	bls.n	800b46e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b46a:	2306      	movs	r3, #6
 800b46c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b472:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b478:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b47c:	2200      	movs	r2, #0
 800b47e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b482:	3304      	adds	r3, #4
 800b484:	4618      	mov	r0, r3
 800b486:	f7fe ff21 	bl	800a2cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48c:	3318      	adds	r3, #24
 800b48e:	4618      	mov	r0, r3
 800b490:	f7fe ff1c 	bl	800a2cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b498:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b49c:	f1c3 0207 	rsb	r2, r3, #7
 800b4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4a8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b4b8:	683a      	ldr	r2, [r7, #0]
 800b4ba:	68f9      	ldr	r1, [r7, #12]
 800b4bc:	69b8      	ldr	r0, [r7, #24]
 800b4be:	f001 facf 	bl	800ca60 <pxPortInitialiseStack>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d002      	beq.n	800b4d4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4d4:	bf00      	nop
 800b4d6:	3720      	adds	r7, #32
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b4e4:	f001 fbaa 	bl	800cc3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b4e8:	4b2a      	ldr	r3, [pc, #168]	; (800b594 <prvAddNewTaskToReadyList+0xb8>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	4a29      	ldr	r2, [pc, #164]	; (800b594 <prvAddNewTaskToReadyList+0xb8>)
 800b4f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b4f2:	4b29      	ldr	r3, [pc, #164]	; (800b598 <prvAddNewTaskToReadyList+0xbc>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d109      	bne.n	800b50e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b4fa:	4a27      	ldr	r2, [pc, #156]	; (800b598 <prvAddNewTaskToReadyList+0xbc>)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b500:	4b24      	ldr	r3, [pc, #144]	; (800b594 <prvAddNewTaskToReadyList+0xb8>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	2b01      	cmp	r3, #1
 800b506:	d110      	bne.n	800b52a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b508:	f000 fc1c 	bl	800bd44 <prvInitialiseTaskLists>
 800b50c:	e00d      	b.n	800b52a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b50e:	4b23      	ldr	r3, [pc, #140]	; (800b59c <prvAddNewTaskToReadyList+0xc0>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d109      	bne.n	800b52a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b516:	4b20      	ldr	r3, [pc, #128]	; (800b598 <prvAddNewTaskToReadyList+0xbc>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b520:	429a      	cmp	r2, r3
 800b522:	d802      	bhi.n	800b52a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b524:	4a1c      	ldr	r2, [pc, #112]	; (800b598 <prvAddNewTaskToReadyList+0xbc>)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b52a:	4b1d      	ldr	r3, [pc, #116]	; (800b5a0 <prvAddNewTaskToReadyList+0xc4>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	3301      	adds	r3, #1
 800b530:	4a1b      	ldr	r2, [pc, #108]	; (800b5a0 <prvAddNewTaskToReadyList+0xc4>)
 800b532:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b538:	2201      	movs	r2, #1
 800b53a:	409a      	lsls	r2, r3
 800b53c:	4b19      	ldr	r3, [pc, #100]	; (800b5a4 <prvAddNewTaskToReadyList+0xc8>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4313      	orrs	r3, r2
 800b542:	4a18      	ldr	r2, [pc, #96]	; (800b5a4 <prvAddNewTaskToReadyList+0xc8>)
 800b544:	6013      	str	r3, [r2, #0]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b54a:	4613      	mov	r3, r2
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	4413      	add	r3, r2
 800b550:	009b      	lsls	r3, r3, #2
 800b552:	4a15      	ldr	r2, [pc, #84]	; (800b5a8 <prvAddNewTaskToReadyList+0xcc>)
 800b554:	441a      	add	r2, r3
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	3304      	adds	r3, #4
 800b55a:	4619      	mov	r1, r3
 800b55c:	4610      	mov	r0, r2
 800b55e:	f7fe fec1 	bl	800a2e4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b562:	f001 fb9b 	bl	800cc9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b566:	4b0d      	ldr	r3, [pc, #52]	; (800b59c <prvAddNewTaskToReadyList+0xc0>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d00e      	beq.n	800b58c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b56e:	4b0a      	ldr	r3, [pc, #40]	; (800b598 <prvAddNewTaskToReadyList+0xbc>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b578:	429a      	cmp	r2, r3
 800b57a:	d207      	bcs.n	800b58c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b57c:	4b0b      	ldr	r3, [pc, #44]	; (800b5ac <prvAddNewTaskToReadyList+0xd0>)
 800b57e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b582:	601a      	str	r2, [r3, #0]
 800b584:	f3bf 8f4f 	dsb	sy
 800b588:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b58c:	bf00      	nop
 800b58e:	3708      	adds	r7, #8
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}
 800b594:	20000dd0 	.word	0x20000dd0
 800b598:	20000cd0 	.word	0x20000cd0
 800b59c:	20000ddc 	.word	0x20000ddc
 800b5a0:	20000dec 	.word	0x20000dec
 800b5a4:	20000dd8 	.word	0x20000dd8
 800b5a8:	20000cd4 	.word	0x20000cd4
 800b5ac:	e000ed04 	.word	0xe000ed04

0800b5b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b084      	sub	sp, #16
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d017      	beq.n	800b5f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b5c2:	4b13      	ldr	r3, [pc, #76]	; (800b610 <vTaskDelay+0x60>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d00a      	beq.n	800b5e0 <vTaskDelay+0x30>
	__asm volatile
 800b5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ce:	f383 8811 	msr	BASEPRI, r3
 800b5d2:	f3bf 8f6f 	isb	sy
 800b5d6:	f3bf 8f4f 	dsb	sy
 800b5da:	60bb      	str	r3, [r7, #8]
}
 800b5dc:	bf00      	nop
 800b5de:	e7fe      	b.n	800b5de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b5e0:	f000 f880 	bl	800b6e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b5e4:	2100      	movs	r1, #0
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 fe4c 	bl	800c284 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b5ec:	f000 f888 	bl	800b700 <xTaskResumeAll>
 800b5f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d107      	bne.n	800b608 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b5f8:	4b06      	ldr	r3, [pc, #24]	; (800b614 <vTaskDelay+0x64>)
 800b5fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5fe:	601a      	str	r2, [r3, #0]
 800b600:	f3bf 8f4f 	dsb	sy
 800b604:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b608:	bf00      	nop
 800b60a:	3710      	adds	r7, #16
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}
 800b610:	20000df8 	.word	0x20000df8
 800b614:	e000ed04 	.word	0xe000ed04

0800b618 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b08a      	sub	sp, #40	; 0x28
 800b61c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b61e:	2300      	movs	r3, #0
 800b620:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b622:	2300      	movs	r3, #0
 800b624:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b626:	463a      	mov	r2, r7
 800b628:	1d39      	adds	r1, r7, #4
 800b62a:	f107 0308 	add.w	r3, r7, #8
 800b62e:	4618      	mov	r0, r3
 800b630:	f7f8 fe8c 	bl	800434c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b634:	6839      	ldr	r1, [r7, #0]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	68ba      	ldr	r2, [r7, #8]
 800b63a:	9202      	str	r2, [sp, #8]
 800b63c:	9301      	str	r3, [sp, #4]
 800b63e:	2300      	movs	r3, #0
 800b640:	9300      	str	r3, [sp, #0]
 800b642:	2300      	movs	r3, #0
 800b644:	460a      	mov	r2, r1
 800b646:	4921      	ldr	r1, [pc, #132]	; (800b6cc <vTaskStartScheduler+0xb4>)
 800b648:	4821      	ldr	r0, [pc, #132]	; (800b6d0 <vTaskStartScheduler+0xb8>)
 800b64a:	f7ff fe1f 	bl	800b28c <xTaskCreateStatic>
 800b64e:	4603      	mov	r3, r0
 800b650:	4a20      	ldr	r2, [pc, #128]	; (800b6d4 <vTaskStartScheduler+0xbc>)
 800b652:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b654:	4b1f      	ldr	r3, [pc, #124]	; (800b6d4 <vTaskStartScheduler+0xbc>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d002      	beq.n	800b662 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b65c:	2301      	movs	r3, #1
 800b65e:	617b      	str	r3, [r7, #20]
 800b660:	e001      	b.n	800b666 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b662:	2300      	movs	r3, #0
 800b664:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d102      	bne.n	800b672 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b66c:	f000 fe70 	bl	800c350 <xTimerCreateTimerTask>
 800b670:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	2b01      	cmp	r3, #1
 800b676:	d116      	bne.n	800b6a6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b67c:	f383 8811 	msr	BASEPRI, r3
 800b680:	f3bf 8f6f 	isb	sy
 800b684:	f3bf 8f4f 	dsb	sy
 800b688:	613b      	str	r3, [r7, #16]
}
 800b68a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b68c:	4b12      	ldr	r3, [pc, #72]	; (800b6d8 <vTaskStartScheduler+0xc0>)
 800b68e:	f04f 32ff 	mov.w	r2, #4294967295
 800b692:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b694:	4b11      	ldr	r3, [pc, #68]	; (800b6dc <vTaskStartScheduler+0xc4>)
 800b696:	2201      	movs	r2, #1
 800b698:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b69a:	4b11      	ldr	r3, [pc, #68]	; (800b6e0 <vTaskStartScheduler+0xc8>)
 800b69c:	2200      	movs	r2, #0
 800b69e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b6a0:	f001 fa5a 	bl	800cb58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b6a4:	e00e      	b.n	800b6c4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ac:	d10a      	bne.n	800b6c4 <vTaskStartScheduler+0xac>
	__asm volatile
 800b6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b2:	f383 8811 	msr	BASEPRI, r3
 800b6b6:	f3bf 8f6f 	isb	sy
 800b6ba:	f3bf 8f4f 	dsb	sy
 800b6be:	60fb      	str	r3, [r7, #12]
}
 800b6c0:	bf00      	nop
 800b6c2:	e7fe      	b.n	800b6c2 <vTaskStartScheduler+0xaa>
}
 800b6c4:	bf00      	nop
 800b6c6:	3718      	adds	r7, #24
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}
 800b6cc:	0800f43c 	.word	0x0800f43c
 800b6d0:	0800bd15 	.word	0x0800bd15
 800b6d4:	20000df4 	.word	0x20000df4
 800b6d8:	20000df0 	.word	0x20000df0
 800b6dc:	20000ddc 	.word	0x20000ddc
 800b6e0:	20000dd4 	.word	0x20000dd4

0800b6e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b6e8:	4b04      	ldr	r3, [pc, #16]	; (800b6fc <vTaskSuspendAll+0x18>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	4a03      	ldr	r2, [pc, #12]	; (800b6fc <vTaskSuspendAll+0x18>)
 800b6f0:	6013      	str	r3, [r2, #0]
}
 800b6f2:	bf00      	nop
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bc80      	pop	{r7}
 800b6f8:	4770      	bx	lr
 800b6fa:	bf00      	nop
 800b6fc:	20000df8 	.word	0x20000df8

0800b700 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b706:	2300      	movs	r3, #0
 800b708:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b70a:	2300      	movs	r3, #0
 800b70c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b70e:	4b41      	ldr	r3, [pc, #260]	; (800b814 <xTaskResumeAll+0x114>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d10a      	bne.n	800b72c <xTaskResumeAll+0x2c>
	__asm volatile
 800b716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71a:	f383 8811 	msr	BASEPRI, r3
 800b71e:	f3bf 8f6f 	isb	sy
 800b722:	f3bf 8f4f 	dsb	sy
 800b726:	603b      	str	r3, [r7, #0]
}
 800b728:	bf00      	nop
 800b72a:	e7fe      	b.n	800b72a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b72c:	f001 fa86 	bl	800cc3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b730:	4b38      	ldr	r3, [pc, #224]	; (800b814 <xTaskResumeAll+0x114>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	3b01      	subs	r3, #1
 800b736:	4a37      	ldr	r2, [pc, #220]	; (800b814 <xTaskResumeAll+0x114>)
 800b738:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b73a:	4b36      	ldr	r3, [pc, #216]	; (800b814 <xTaskResumeAll+0x114>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d161      	bne.n	800b806 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b742:	4b35      	ldr	r3, [pc, #212]	; (800b818 <xTaskResumeAll+0x118>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d05d      	beq.n	800b806 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b74a:	e02e      	b.n	800b7aa <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b74c:	4b33      	ldr	r3, [pc, #204]	; (800b81c <xTaskResumeAll+0x11c>)
 800b74e:	68db      	ldr	r3, [r3, #12]
 800b750:	68db      	ldr	r3, [r3, #12]
 800b752:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	3318      	adds	r3, #24
 800b758:	4618      	mov	r0, r3
 800b75a:	f7fe fe1e 	bl	800a39a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	3304      	adds	r3, #4
 800b762:	4618      	mov	r0, r3
 800b764:	f7fe fe19 	bl	800a39a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b76c:	2201      	movs	r2, #1
 800b76e:	409a      	lsls	r2, r3
 800b770:	4b2b      	ldr	r3, [pc, #172]	; (800b820 <xTaskResumeAll+0x120>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	4313      	orrs	r3, r2
 800b776:	4a2a      	ldr	r2, [pc, #168]	; (800b820 <xTaskResumeAll+0x120>)
 800b778:	6013      	str	r3, [r2, #0]
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b77e:	4613      	mov	r3, r2
 800b780:	009b      	lsls	r3, r3, #2
 800b782:	4413      	add	r3, r2
 800b784:	009b      	lsls	r3, r3, #2
 800b786:	4a27      	ldr	r2, [pc, #156]	; (800b824 <xTaskResumeAll+0x124>)
 800b788:	441a      	add	r2, r3
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	3304      	adds	r3, #4
 800b78e:	4619      	mov	r1, r3
 800b790:	4610      	mov	r0, r2
 800b792:	f7fe fda7 	bl	800a2e4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b79a:	4b23      	ldr	r3, [pc, #140]	; (800b828 <xTaskResumeAll+0x128>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d302      	bcc.n	800b7aa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b7a4:	4b21      	ldr	r3, [pc, #132]	; (800b82c <xTaskResumeAll+0x12c>)
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b7aa:	4b1c      	ldr	r3, [pc, #112]	; (800b81c <xTaskResumeAll+0x11c>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d1cc      	bne.n	800b74c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d001      	beq.n	800b7bc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b7b8:	f000 fb62 	bl	800be80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b7bc:	4b1c      	ldr	r3, [pc, #112]	; (800b830 <xTaskResumeAll+0x130>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d010      	beq.n	800b7ea <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b7c8:	f000 f856 	bl	800b878 <xTaskIncrementTick>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d002      	beq.n	800b7d8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b7d2:	4b16      	ldr	r3, [pc, #88]	; (800b82c <xTaskResumeAll+0x12c>)
 800b7d4:	2201      	movs	r2, #1
 800b7d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	3b01      	subs	r3, #1
 800b7dc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d1f1      	bne.n	800b7c8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800b7e4:	4b12      	ldr	r3, [pc, #72]	; (800b830 <xTaskResumeAll+0x130>)
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b7ea:	4b10      	ldr	r3, [pc, #64]	; (800b82c <xTaskResumeAll+0x12c>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d009      	beq.n	800b806 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b7f6:	4b0f      	ldr	r3, [pc, #60]	; (800b834 <xTaskResumeAll+0x134>)
 800b7f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7fc:	601a      	str	r2, [r3, #0]
 800b7fe:	f3bf 8f4f 	dsb	sy
 800b802:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b806:	f001 fa49 	bl	800cc9c <vPortExitCritical>

	return xAlreadyYielded;
 800b80a:	68bb      	ldr	r3, [r7, #8]
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3710      	adds	r7, #16
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}
 800b814:	20000df8 	.word	0x20000df8
 800b818:	20000dd0 	.word	0x20000dd0
 800b81c:	20000d90 	.word	0x20000d90
 800b820:	20000dd8 	.word	0x20000dd8
 800b824:	20000cd4 	.word	0x20000cd4
 800b828:	20000cd0 	.word	0x20000cd0
 800b82c:	20000de4 	.word	0x20000de4
 800b830:	20000de0 	.word	0x20000de0
 800b834:	e000ed04 	.word	0xe000ed04

0800b838 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b838:	b480      	push	{r7}
 800b83a:	b083      	sub	sp, #12
 800b83c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b83e:	4b04      	ldr	r3, [pc, #16]	; (800b850 <xTaskGetTickCount+0x18>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b844:	687b      	ldr	r3, [r7, #4]
}
 800b846:	4618      	mov	r0, r3
 800b848:	370c      	adds	r7, #12
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bc80      	pop	{r7}
 800b84e:	4770      	bx	lr
 800b850:	20000dd4 	.word	0x20000dd4

0800b854 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b082      	sub	sp, #8
 800b858:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b85a:	f001 fab1 	bl	800cdc0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b85e:	2300      	movs	r3, #0
 800b860:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b862:	4b04      	ldr	r3, [pc, #16]	; (800b874 <xTaskGetTickCountFromISR+0x20>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b868:	683b      	ldr	r3, [r7, #0]
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3708      	adds	r7, #8
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	20000dd4 	.word	0x20000dd4

0800b878 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b086      	sub	sp, #24
 800b87c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b87e:	2300      	movs	r3, #0
 800b880:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b882:	4b51      	ldr	r3, [pc, #324]	; (800b9c8 <xTaskIncrementTick+0x150>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	2b00      	cmp	r3, #0
 800b888:	f040 808d 	bne.w	800b9a6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b88c:	4b4f      	ldr	r3, [pc, #316]	; (800b9cc <xTaskIncrementTick+0x154>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	3301      	adds	r3, #1
 800b892:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b894:	4a4d      	ldr	r2, [pc, #308]	; (800b9cc <xTaskIncrementTick+0x154>)
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d120      	bne.n	800b8e2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b8a0:	4b4b      	ldr	r3, [pc, #300]	; (800b9d0 <xTaskIncrementTick+0x158>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d00a      	beq.n	800b8c0 <xTaskIncrementTick+0x48>
	__asm volatile
 800b8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ae:	f383 8811 	msr	BASEPRI, r3
 800b8b2:	f3bf 8f6f 	isb	sy
 800b8b6:	f3bf 8f4f 	dsb	sy
 800b8ba:	603b      	str	r3, [r7, #0]
}
 800b8bc:	bf00      	nop
 800b8be:	e7fe      	b.n	800b8be <xTaskIncrementTick+0x46>
 800b8c0:	4b43      	ldr	r3, [pc, #268]	; (800b9d0 <xTaskIncrementTick+0x158>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	60fb      	str	r3, [r7, #12]
 800b8c6:	4b43      	ldr	r3, [pc, #268]	; (800b9d4 <xTaskIncrementTick+0x15c>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4a41      	ldr	r2, [pc, #260]	; (800b9d0 <xTaskIncrementTick+0x158>)
 800b8cc:	6013      	str	r3, [r2, #0]
 800b8ce:	4a41      	ldr	r2, [pc, #260]	; (800b9d4 <xTaskIncrementTick+0x15c>)
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	6013      	str	r3, [r2, #0]
 800b8d4:	4b40      	ldr	r3, [pc, #256]	; (800b9d8 <xTaskIncrementTick+0x160>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	3301      	adds	r3, #1
 800b8da:	4a3f      	ldr	r2, [pc, #252]	; (800b9d8 <xTaskIncrementTick+0x160>)
 800b8dc:	6013      	str	r3, [r2, #0]
 800b8de:	f000 facf 	bl	800be80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b8e2:	4b3e      	ldr	r3, [pc, #248]	; (800b9dc <xTaskIncrementTick+0x164>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	693a      	ldr	r2, [r7, #16]
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d34d      	bcc.n	800b988 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8ec:	4b38      	ldr	r3, [pc, #224]	; (800b9d0 <xTaskIncrementTick+0x158>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d101      	bne.n	800b8fa <xTaskIncrementTick+0x82>
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	e000      	b.n	800b8fc <xTaskIncrementTick+0x84>
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d004      	beq.n	800b90a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b900:	4b36      	ldr	r3, [pc, #216]	; (800b9dc <xTaskIncrementTick+0x164>)
 800b902:	f04f 32ff 	mov.w	r2, #4294967295
 800b906:	601a      	str	r2, [r3, #0]
					break;
 800b908:	e03e      	b.n	800b988 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b90a:	4b31      	ldr	r3, [pc, #196]	; (800b9d0 <xTaskIncrementTick+0x158>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	68db      	ldr	r3, [r3, #12]
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b91a:	693a      	ldr	r2, [r7, #16]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	429a      	cmp	r2, r3
 800b920:	d203      	bcs.n	800b92a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b922:	4a2e      	ldr	r2, [pc, #184]	; (800b9dc <xTaskIncrementTick+0x164>)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6013      	str	r3, [r2, #0]
						break;
 800b928:	e02e      	b.n	800b988 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	3304      	adds	r3, #4
 800b92e:	4618      	mov	r0, r3
 800b930:	f7fe fd33 	bl	800a39a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d004      	beq.n	800b946 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	3318      	adds	r3, #24
 800b940:	4618      	mov	r0, r3
 800b942:	f7fe fd2a 	bl	800a39a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b94a:	2201      	movs	r2, #1
 800b94c:	409a      	lsls	r2, r3
 800b94e:	4b24      	ldr	r3, [pc, #144]	; (800b9e0 <xTaskIncrementTick+0x168>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	4313      	orrs	r3, r2
 800b954:	4a22      	ldr	r2, [pc, #136]	; (800b9e0 <xTaskIncrementTick+0x168>)
 800b956:	6013      	str	r3, [r2, #0]
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b95c:	4613      	mov	r3, r2
 800b95e:	009b      	lsls	r3, r3, #2
 800b960:	4413      	add	r3, r2
 800b962:	009b      	lsls	r3, r3, #2
 800b964:	4a1f      	ldr	r2, [pc, #124]	; (800b9e4 <xTaskIncrementTick+0x16c>)
 800b966:	441a      	add	r2, r3
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	3304      	adds	r3, #4
 800b96c:	4619      	mov	r1, r3
 800b96e:	4610      	mov	r0, r2
 800b970:	f7fe fcb8 	bl	800a2e4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b978:	4b1b      	ldr	r3, [pc, #108]	; (800b9e8 <xTaskIncrementTick+0x170>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b97e:	429a      	cmp	r2, r3
 800b980:	d3b4      	bcc.n	800b8ec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b982:	2301      	movs	r3, #1
 800b984:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b986:	e7b1      	b.n	800b8ec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b988:	4b17      	ldr	r3, [pc, #92]	; (800b9e8 <xTaskIncrementTick+0x170>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b98e:	4915      	ldr	r1, [pc, #84]	; (800b9e4 <xTaskIncrementTick+0x16c>)
 800b990:	4613      	mov	r3, r2
 800b992:	009b      	lsls	r3, r3, #2
 800b994:	4413      	add	r3, r2
 800b996:	009b      	lsls	r3, r3, #2
 800b998:	440b      	add	r3, r1
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d907      	bls.n	800b9b0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	617b      	str	r3, [r7, #20]
 800b9a4:	e004      	b.n	800b9b0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b9a6:	4b11      	ldr	r3, [pc, #68]	; (800b9ec <xTaskIncrementTick+0x174>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	4a0f      	ldr	r2, [pc, #60]	; (800b9ec <xTaskIncrementTick+0x174>)
 800b9ae:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b9b0:	4b0f      	ldr	r3, [pc, #60]	; (800b9f0 <xTaskIncrementTick+0x178>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d001      	beq.n	800b9bc <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b9bc:	697b      	ldr	r3, [r7, #20]
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3718      	adds	r7, #24
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}
 800b9c6:	bf00      	nop
 800b9c8:	20000df8 	.word	0x20000df8
 800b9cc:	20000dd4 	.word	0x20000dd4
 800b9d0:	20000d88 	.word	0x20000d88
 800b9d4:	20000d8c 	.word	0x20000d8c
 800b9d8:	20000de8 	.word	0x20000de8
 800b9dc:	20000df0 	.word	0x20000df0
 800b9e0:	20000dd8 	.word	0x20000dd8
 800b9e4:	20000cd4 	.word	0x20000cd4
 800b9e8:	20000cd0 	.word	0x20000cd0
 800b9ec:	20000de0 	.word	0x20000de0
 800b9f0:	20000de4 	.word	0x20000de4

0800b9f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b087      	sub	sp, #28
 800b9f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b9fa:	4b26      	ldr	r3, [pc, #152]	; (800ba94 <vTaskSwitchContext+0xa0>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d003      	beq.n	800ba0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ba02:	4b25      	ldr	r3, [pc, #148]	; (800ba98 <vTaskSwitchContext+0xa4>)
 800ba04:	2201      	movs	r2, #1
 800ba06:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ba08:	e03f      	b.n	800ba8a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800ba0a:	4b23      	ldr	r3, [pc, #140]	; (800ba98 <vTaskSwitchContext+0xa4>)
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ba10:	4b22      	ldr	r3, [pc, #136]	; (800ba9c <vTaskSwitchContext+0xa8>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	fab3 f383 	clz	r3, r3
 800ba1c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ba1e:	7afb      	ldrb	r3, [r7, #11]
 800ba20:	f1c3 031f 	rsb	r3, r3, #31
 800ba24:	617b      	str	r3, [r7, #20]
 800ba26:	491e      	ldr	r1, [pc, #120]	; (800baa0 <vTaskSwitchContext+0xac>)
 800ba28:	697a      	ldr	r2, [r7, #20]
 800ba2a:	4613      	mov	r3, r2
 800ba2c:	009b      	lsls	r3, r3, #2
 800ba2e:	4413      	add	r3, r2
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	440b      	add	r3, r1
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d10a      	bne.n	800ba50 <vTaskSwitchContext+0x5c>
	__asm volatile
 800ba3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba3e:	f383 8811 	msr	BASEPRI, r3
 800ba42:	f3bf 8f6f 	isb	sy
 800ba46:	f3bf 8f4f 	dsb	sy
 800ba4a:	607b      	str	r3, [r7, #4]
}
 800ba4c:	bf00      	nop
 800ba4e:	e7fe      	b.n	800ba4e <vTaskSwitchContext+0x5a>
 800ba50:	697a      	ldr	r2, [r7, #20]
 800ba52:	4613      	mov	r3, r2
 800ba54:	009b      	lsls	r3, r3, #2
 800ba56:	4413      	add	r3, r2
 800ba58:	009b      	lsls	r3, r3, #2
 800ba5a:	4a11      	ldr	r2, [pc, #68]	; (800baa0 <vTaskSwitchContext+0xac>)
 800ba5c:	4413      	add	r3, r2
 800ba5e:	613b      	str	r3, [r7, #16]
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	685b      	ldr	r3, [r3, #4]
 800ba64:	685a      	ldr	r2, [r3, #4]
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	605a      	str	r2, [r3, #4]
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	685a      	ldr	r2, [r3, #4]
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	3308      	adds	r3, #8
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d104      	bne.n	800ba80 <vTaskSwitchContext+0x8c>
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	685b      	ldr	r3, [r3, #4]
 800ba7a:	685a      	ldr	r2, [r3, #4]
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	605a      	str	r2, [r3, #4]
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	68db      	ldr	r3, [r3, #12]
 800ba86:	4a07      	ldr	r2, [pc, #28]	; (800baa4 <vTaskSwitchContext+0xb0>)
 800ba88:	6013      	str	r3, [r2, #0]
}
 800ba8a:	bf00      	nop
 800ba8c:	371c      	adds	r7, #28
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bc80      	pop	{r7}
 800ba92:	4770      	bx	lr
 800ba94:	20000df8 	.word	0x20000df8
 800ba98:	20000de4 	.word	0x20000de4
 800ba9c:	20000dd8 	.word	0x20000dd8
 800baa0:	20000cd4 	.word	0x20000cd4
 800baa4:	20000cd0 	.word	0x20000cd0

0800baa8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d10a      	bne.n	800bace <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800babc:	f383 8811 	msr	BASEPRI, r3
 800bac0:	f3bf 8f6f 	isb	sy
 800bac4:	f3bf 8f4f 	dsb	sy
 800bac8:	60fb      	str	r3, [r7, #12]
}
 800baca:	bf00      	nop
 800bacc:	e7fe      	b.n	800bacc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bace:	4b07      	ldr	r3, [pc, #28]	; (800baec <vTaskPlaceOnEventList+0x44>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	3318      	adds	r3, #24
 800bad4:	4619      	mov	r1, r3
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f7fe fc27 	bl	800a32a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800badc:	2101      	movs	r1, #1
 800bade:	6838      	ldr	r0, [r7, #0]
 800bae0:	f000 fbd0 	bl	800c284 <prvAddCurrentTaskToDelayedList>
}
 800bae4:	bf00      	nop
 800bae6:	3710      	adds	r7, #16
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}
 800baec:	20000cd0 	.word	0x20000cd0

0800baf0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b086      	sub	sp, #24
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	60f8      	str	r0, [r7, #12]
 800baf8:	60b9      	str	r1, [r7, #8]
 800bafa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d10a      	bne.n	800bb18 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bb02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb06:	f383 8811 	msr	BASEPRI, r3
 800bb0a:	f3bf 8f6f 	isb	sy
 800bb0e:	f3bf 8f4f 	dsb	sy
 800bb12:	617b      	str	r3, [r7, #20]
}
 800bb14:	bf00      	nop
 800bb16:	e7fe      	b.n	800bb16 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb18:	4b0a      	ldr	r3, [pc, #40]	; (800bb44 <vTaskPlaceOnEventListRestricted+0x54>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	3318      	adds	r3, #24
 800bb1e:	4619      	mov	r1, r3
 800bb20:	68f8      	ldr	r0, [r7, #12]
 800bb22:	f7fe fbdf 	bl	800a2e4 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d002      	beq.n	800bb32 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bb2c:	f04f 33ff 	mov.w	r3, #4294967295
 800bb30:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bb32:	6879      	ldr	r1, [r7, #4]
 800bb34:	68b8      	ldr	r0, [r7, #8]
 800bb36:	f000 fba5 	bl	800c284 <prvAddCurrentTaskToDelayedList>
	}
 800bb3a:	bf00      	nop
 800bb3c:	3718      	adds	r7, #24
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}
 800bb42:	bf00      	nop
 800bb44:	20000cd0 	.word	0x20000cd0

0800bb48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b086      	sub	sp, #24
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	68db      	ldr	r3, [r3, #12]
 800bb54:	68db      	ldr	r3, [r3, #12]
 800bb56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bb58:	693b      	ldr	r3, [r7, #16]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d10a      	bne.n	800bb74 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb62:	f383 8811 	msr	BASEPRI, r3
 800bb66:	f3bf 8f6f 	isb	sy
 800bb6a:	f3bf 8f4f 	dsb	sy
 800bb6e:	60fb      	str	r3, [r7, #12]
}
 800bb70:	bf00      	nop
 800bb72:	e7fe      	b.n	800bb72 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	3318      	adds	r3, #24
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f7fe fc0e 	bl	800a39a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb7e:	4b1d      	ldr	r3, [pc, #116]	; (800bbf4 <xTaskRemoveFromEventList+0xac>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d11c      	bne.n	800bbc0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	3304      	adds	r3, #4
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f7fe fc05 	bl	800a39a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb94:	2201      	movs	r2, #1
 800bb96:	409a      	lsls	r2, r3
 800bb98:	4b17      	ldr	r3, [pc, #92]	; (800bbf8 <xTaskRemoveFromEventList+0xb0>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	4313      	orrs	r3, r2
 800bb9e:	4a16      	ldr	r2, [pc, #88]	; (800bbf8 <xTaskRemoveFromEventList+0xb0>)
 800bba0:	6013      	str	r3, [r2, #0]
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bba6:	4613      	mov	r3, r2
 800bba8:	009b      	lsls	r3, r3, #2
 800bbaa:	4413      	add	r3, r2
 800bbac:	009b      	lsls	r3, r3, #2
 800bbae:	4a13      	ldr	r2, [pc, #76]	; (800bbfc <xTaskRemoveFromEventList+0xb4>)
 800bbb0:	441a      	add	r2, r3
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	3304      	adds	r3, #4
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	4610      	mov	r0, r2
 800bbba:	f7fe fb93 	bl	800a2e4 <vListInsertEnd>
 800bbbe:	e005      	b.n	800bbcc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	3318      	adds	r3, #24
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	480e      	ldr	r0, [pc, #56]	; (800bc00 <xTaskRemoveFromEventList+0xb8>)
 800bbc8:	f7fe fb8c 	bl	800a2e4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbd0:	4b0c      	ldr	r3, [pc, #48]	; (800bc04 <xTaskRemoveFromEventList+0xbc>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d905      	bls.n	800bbe6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bbde:	4b0a      	ldr	r3, [pc, #40]	; (800bc08 <xTaskRemoveFromEventList+0xc0>)
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	601a      	str	r2, [r3, #0]
 800bbe4:	e001      	b.n	800bbea <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800bbea:	697b      	ldr	r3, [r7, #20]
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3718      	adds	r7, #24
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}
 800bbf4:	20000df8 	.word	0x20000df8
 800bbf8:	20000dd8 	.word	0x20000dd8
 800bbfc:	20000cd4 	.word	0x20000cd4
 800bc00:	20000d90 	.word	0x20000d90
 800bc04:	20000cd0 	.word	0x20000cd0
 800bc08:	20000de4 	.word	0x20000de4

0800bc0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b083      	sub	sp, #12
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bc14:	4b06      	ldr	r3, [pc, #24]	; (800bc30 <vTaskInternalSetTimeOutState+0x24>)
 800bc16:	681a      	ldr	r2, [r3, #0]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bc1c:	4b05      	ldr	r3, [pc, #20]	; (800bc34 <vTaskInternalSetTimeOutState+0x28>)
 800bc1e:	681a      	ldr	r2, [r3, #0]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	605a      	str	r2, [r3, #4]
}
 800bc24:	bf00      	nop
 800bc26:	370c      	adds	r7, #12
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bc80      	pop	{r7}
 800bc2c:	4770      	bx	lr
 800bc2e:	bf00      	nop
 800bc30:	20000de8 	.word	0x20000de8
 800bc34:	20000dd4 	.word	0x20000dd4

0800bc38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b088      	sub	sp, #32
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
 800bc40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d10a      	bne.n	800bc5e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bc48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4c:	f383 8811 	msr	BASEPRI, r3
 800bc50:	f3bf 8f6f 	isb	sy
 800bc54:	f3bf 8f4f 	dsb	sy
 800bc58:	613b      	str	r3, [r7, #16]
}
 800bc5a:	bf00      	nop
 800bc5c:	e7fe      	b.n	800bc5c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d10a      	bne.n	800bc7a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc68:	f383 8811 	msr	BASEPRI, r3
 800bc6c:	f3bf 8f6f 	isb	sy
 800bc70:	f3bf 8f4f 	dsb	sy
 800bc74:	60fb      	str	r3, [r7, #12]
}
 800bc76:	bf00      	nop
 800bc78:	e7fe      	b.n	800bc78 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bc7a:	f000 ffdf 	bl	800cc3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bc7e:	4b1d      	ldr	r3, [pc, #116]	; (800bcf4 <xTaskCheckForTimeOut+0xbc>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	69ba      	ldr	r2, [r7, #24]
 800bc8a:	1ad3      	subs	r3, r2, r3
 800bc8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc96:	d102      	bne.n	800bc9e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	61fb      	str	r3, [r7, #28]
 800bc9c:	e023      	b.n	800bce6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681a      	ldr	r2, [r3, #0]
 800bca2:	4b15      	ldr	r3, [pc, #84]	; (800bcf8 <xTaskCheckForTimeOut+0xc0>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d007      	beq.n	800bcba <xTaskCheckForTimeOut+0x82>
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	69ba      	ldr	r2, [r7, #24]
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d302      	bcc.n	800bcba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	61fb      	str	r3, [r7, #28]
 800bcb8:	e015      	b.n	800bce6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	697a      	ldr	r2, [r7, #20]
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d20b      	bcs.n	800bcdc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	681a      	ldr	r2, [r3, #0]
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	1ad2      	subs	r2, r2, r3
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f7ff ff9b 	bl	800bc0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	61fb      	str	r3, [r7, #28]
 800bcda:	e004      	b.n	800bce6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	2200      	movs	r2, #0
 800bce0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bce2:	2301      	movs	r3, #1
 800bce4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bce6:	f000 ffd9 	bl	800cc9c <vPortExitCritical>

	return xReturn;
 800bcea:	69fb      	ldr	r3, [r7, #28]
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3720      	adds	r7, #32
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}
 800bcf4:	20000dd4 	.word	0x20000dd4
 800bcf8:	20000de8 	.word	0x20000de8

0800bcfc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bd00:	4b03      	ldr	r3, [pc, #12]	; (800bd10 <vTaskMissedYield+0x14>)
 800bd02:	2201      	movs	r2, #1
 800bd04:	601a      	str	r2, [r3, #0]
}
 800bd06:	bf00      	nop
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bc80      	pop	{r7}
 800bd0c:	4770      	bx	lr
 800bd0e:	bf00      	nop
 800bd10:	20000de4 	.word	0x20000de4

0800bd14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b082      	sub	sp, #8
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bd1c:	f000 f852 	bl	800bdc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bd20:	4b06      	ldr	r3, [pc, #24]	; (800bd3c <prvIdleTask+0x28>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	2b01      	cmp	r3, #1
 800bd26:	d9f9      	bls.n	800bd1c <prvIdleTask+0x8>
			{
				taskYIELD();
 800bd28:	4b05      	ldr	r3, [pc, #20]	; (800bd40 <prvIdleTask+0x2c>)
 800bd2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd2e:	601a      	str	r2, [r3, #0]
 800bd30:	f3bf 8f4f 	dsb	sy
 800bd34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bd38:	e7f0      	b.n	800bd1c <prvIdleTask+0x8>
 800bd3a:	bf00      	nop
 800bd3c:	20000cd4 	.word	0x20000cd4
 800bd40:	e000ed04 	.word	0xe000ed04

0800bd44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b082      	sub	sp, #8
 800bd48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	607b      	str	r3, [r7, #4]
 800bd4e:	e00c      	b.n	800bd6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bd50:	687a      	ldr	r2, [r7, #4]
 800bd52:	4613      	mov	r3, r2
 800bd54:	009b      	lsls	r3, r3, #2
 800bd56:	4413      	add	r3, r2
 800bd58:	009b      	lsls	r3, r3, #2
 800bd5a:	4a12      	ldr	r2, [pc, #72]	; (800bda4 <prvInitialiseTaskLists+0x60>)
 800bd5c:	4413      	add	r3, r2
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f7fe fa95 	bl	800a28e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	3301      	adds	r3, #1
 800bd68:	607b      	str	r3, [r7, #4]
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2b06      	cmp	r3, #6
 800bd6e:	d9ef      	bls.n	800bd50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bd70:	480d      	ldr	r0, [pc, #52]	; (800bda8 <prvInitialiseTaskLists+0x64>)
 800bd72:	f7fe fa8c 	bl	800a28e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bd76:	480d      	ldr	r0, [pc, #52]	; (800bdac <prvInitialiseTaskLists+0x68>)
 800bd78:	f7fe fa89 	bl	800a28e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bd7c:	480c      	ldr	r0, [pc, #48]	; (800bdb0 <prvInitialiseTaskLists+0x6c>)
 800bd7e:	f7fe fa86 	bl	800a28e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bd82:	480c      	ldr	r0, [pc, #48]	; (800bdb4 <prvInitialiseTaskLists+0x70>)
 800bd84:	f7fe fa83 	bl	800a28e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bd88:	480b      	ldr	r0, [pc, #44]	; (800bdb8 <prvInitialiseTaskLists+0x74>)
 800bd8a:	f7fe fa80 	bl	800a28e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bd8e:	4b0b      	ldr	r3, [pc, #44]	; (800bdbc <prvInitialiseTaskLists+0x78>)
 800bd90:	4a05      	ldr	r2, [pc, #20]	; (800bda8 <prvInitialiseTaskLists+0x64>)
 800bd92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bd94:	4b0a      	ldr	r3, [pc, #40]	; (800bdc0 <prvInitialiseTaskLists+0x7c>)
 800bd96:	4a05      	ldr	r2, [pc, #20]	; (800bdac <prvInitialiseTaskLists+0x68>)
 800bd98:	601a      	str	r2, [r3, #0]
}
 800bd9a:	bf00      	nop
 800bd9c:	3708      	adds	r7, #8
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
 800bda2:	bf00      	nop
 800bda4:	20000cd4 	.word	0x20000cd4
 800bda8:	20000d60 	.word	0x20000d60
 800bdac:	20000d74 	.word	0x20000d74
 800bdb0:	20000d90 	.word	0x20000d90
 800bdb4:	20000da4 	.word	0x20000da4
 800bdb8:	20000dbc 	.word	0x20000dbc
 800bdbc:	20000d88 	.word	0x20000d88
 800bdc0:	20000d8c 	.word	0x20000d8c

0800bdc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b082      	sub	sp, #8
 800bdc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bdca:	e019      	b.n	800be00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bdcc:	f000 ff36 	bl	800cc3c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800bdd0:	4b10      	ldr	r3, [pc, #64]	; (800be14 <prvCheckTasksWaitingTermination+0x50>)
 800bdd2:	68db      	ldr	r3, [r3, #12]
 800bdd4:	68db      	ldr	r3, [r3, #12]
 800bdd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	3304      	adds	r3, #4
 800bddc:	4618      	mov	r0, r3
 800bdde:	f7fe fadc 	bl	800a39a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bde2:	4b0d      	ldr	r3, [pc, #52]	; (800be18 <prvCheckTasksWaitingTermination+0x54>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	3b01      	subs	r3, #1
 800bde8:	4a0b      	ldr	r2, [pc, #44]	; (800be18 <prvCheckTasksWaitingTermination+0x54>)
 800bdea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bdec:	4b0b      	ldr	r3, [pc, #44]	; (800be1c <prvCheckTasksWaitingTermination+0x58>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	3b01      	subs	r3, #1
 800bdf2:	4a0a      	ldr	r2, [pc, #40]	; (800be1c <prvCheckTasksWaitingTermination+0x58>)
 800bdf4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bdf6:	f000 ff51 	bl	800cc9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f000 f810 	bl	800be20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be00:	4b06      	ldr	r3, [pc, #24]	; (800be1c <prvCheckTasksWaitingTermination+0x58>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d1e1      	bne.n	800bdcc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800be08:	bf00      	nop
 800be0a:	bf00      	nop
 800be0c:	3708      	adds	r7, #8
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}
 800be12:	bf00      	nop
 800be14:	20000da4 	.word	0x20000da4
 800be18:	20000dd0 	.word	0x20000dd0
 800be1c:	20000db8 	.word	0x20000db8

0800be20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800be20:	b580      	push	{r7, lr}
 800be22:	b084      	sub	sp, #16
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d108      	bne.n	800be44 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be36:	4618      	mov	r0, r3
 800be38:	f001 f8c4 	bl	800cfc4 <vPortFree>
				vPortFree( pxTCB );
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f001 f8c1 	bl	800cfc4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800be42:	e018      	b.n	800be76 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be4a:	2b01      	cmp	r3, #1
 800be4c:	d103      	bne.n	800be56 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f001 f8b8 	bl	800cfc4 <vPortFree>
	}
 800be54:	e00f      	b.n	800be76 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be5c:	2b02      	cmp	r3, #2
 800be5e:	d00a      	beq.n	800be76 <prvDeleteTCB+0x56>
	__asm volatile
 800be60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be64:	f383 8811 	msr	BASEPRI, r3
 800be68:	f3bf 8f6f 	isb	sy
 800be6c:	f3bf 8f4f 	dsb	sy
 800be70:	60fb      	str	r3, [r7, #12]
}
 800be72:	bf00      	nop
 800be74:	e7fe      	b.n	800be74 <prvDeleteTCB+0x54>
	}
 800be76:	bf00      	nop
 800be78:	3710      	adds	r7, #16
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}
	...

0800be80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800be80:	b480      	push	{r7}
 800be82:	b083      	sub	sp, #12
 800be84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be86:	4b0e      	ldr	r3, [pc, #56]	; (800bec0 <prvResetNextTaskUnblockTime+0x40>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d101      	bne.n	800be94 <prvResetNextTaskUnblockTime+0x14>
 800be90:	2301      	movs	r3, #1
 800be92:	e000      	b.n	800be96 <prvResetNextTaskUnblockTime+0x16>
 800be94:	2300      	movs	r3, #0
 800be96:	2b00      	cmp	r3, #0
 800be98:	d004      	beq.n	800bea4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800be9a:	4b0a      	ldr	r3, [pc, #40]	; (800bec4 <prvResetNextTaskUnblockTime+0x44>)
 800be9c:	f04f 32ff 	mov.w	r2, #4294967295
 800bea0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bea2:	e008      	b.n	800beb6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bea4:	4b06      	ldr	r3, [pc, #24]	; (800bec0 <prvResetNextTaskUnblockTime+0x40>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	68db      	ldr	r3, [r3, #12]
 800beaa:	68db      	ldr	r3, [r3, #12]
 800beac:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	685b      	ldr	r3, [r3, #4]
 800beb2:	4a04      	ldr	r2, [pc, #16]	; (800bec4 <prvResetNextTaskUnblockTime+0x44>)
 800beb4:	6013      	str	r3, [r2, #0]
}
 800beb6:	bf00      	nop
 800beb8:	370c      	adds	r7, #12
 800beba:	46bd      	mov	sp, r7
 800bebc:	bc80      	pop	{r7}
 800bebe:	4770      	bx	lr
 800bec0:	20000d88 	.word	0x20000d88
 800bec4:	20000df0 	.word	0x20000df0

0800bec8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bec8:	b480      	push	{r7}
 800beca:	b083      	sub	sp, #12
 800becc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bece:	4b0b      	ldr	r3, [pc, #44]	; (800befc <xTaskGetSchedulerState+0x34>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d102      	bne.n	800bedc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bed6:	2301      	movs	r3, #1
 800bed8:	607b      	str	r3, [r7, #4]
 800beda:	e008      	b.n	800beee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bedc:	4b08      	ldr	r3, [pc, #32]	; (800bf00 <xTaskGetSchedulerState+0x38>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d102      	bne.n	800beea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bee4:	2302      	movs	r3, #2
 800bee6:	607b      	str	r3, [r7, #4]
 800bee8:	e001      	b.n	800beee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800beea:	2300      	movs	r3, #0
 800beec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800beee:	687b      	ldr	r3, [r7, #4]
	}
 800bef0:	4618      	mov	r0, r3
 800bef2:	370c      	adds	r7, #12
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bc80      	pop	{r7}
 800bef8:	4770      	bx	lr
 800befa:	bf00      	nop
 800befc:	20000ddc 	.word	0x20000ddc
 800bf00:	20000df8 	.word	0x20000df8

0800bf04 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b084      	sub	sp, #16
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bf10:	2300      	movs	r3, #0
 800bf12:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d06e      	beq.n	800bff8 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf1e:	4b39      	ldr	r3, [pc, #228]	; (800c004 <xTaskPriorityInherit+0x100>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d25e      	bcs.n	800bfe6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	699b      	ldr	r3, [r3, #24]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	db06      	blt.n	800bf3e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf30:	4b34      	ldr	r3, [pc, #208]	; (800c004 <xTaskPriorityInherit+0x100>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf36:	f1c3 0207 	rsb	r2, r3, #7
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	6959      	ldr	r1, [r3, #20]
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf46:	4613      	mov	r3, r2
 800bf48:	009b      	lsls	r3, r3, #2
 800bf4a:	4413      	add	r3, r2
 800bf4c:	009b      	lsls	r3, r3, #2
 800bf4e:	4a2e      	ldr	r2, [pc, #184]	; (800c008 <xTaskPriorityInherit+0x104>)
 800bf50:	4413      	add	r3, r2
 800bf52:	4299      	cmp	r1, r3
 800bf54:	d101      	bne.n	800bf5a <xTaskPriorityInherit+0x56>
 800bf56:	2301      	movs	r3, #1
 800bf58:	e000      	b.n	800bf5c <xTaskPriorityInherit+0x58>
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d03a      	beq.n	800bfd6 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	3304      	adds	r3, #4
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7fe fa18 	bl	800a39a <uxListRemove>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d115      	bne.n	800bf9c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf74:	4924      	ldr	r1, [pc, #144]	; (800c008 <xTaskPriorityInherit+0x104>)
 800bf76:	4613      	mov	r3, r2
 800bf78:	009b      	lsls	r3, r3, #2
 800bf7a:	4413      	add	r3, r2
 800bf7c:	009b      	lsls	r3, r3, #2
 800bf7e:	440b      	add	r3, r1
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d10a      	bne.n	800bf9c <xTaskPriorityInherit+0x98>
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	fa02 f303 	lsl.w	r3, r2, r3
 800bf90:	43da      	mvns	r2, r3
 800bf92:	4b1e      	ldr	r3, [pc, #120]	; (800c00c <xTaskPriorityInherit+0x108>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	4013      	ands	r3, r2
 800bf98:	4a1c      	ldr	r2, [pc, #112]	; (800c00c <xTaskPriorityInherit+0x108>)
 800bf9a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bf9c:	4b19      	ldr	r3, [pc, #100]	; (800c004 <xTaskPriorityInherit+0x100>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfaa:	2201      	movs	r2, #1
 800bfac:	409a      	lsls	r2, r3
 800bfae:	4b17      	ldr	r3, [pc, #92]	; (800c00c <xTaskPriorityInherit+0x108>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	4a15      	ldr	r2, [pc, #84]	; (800c00c <xTaskPriorityInherit+0x108>)
 800bfb6:	6013      	str	r3, [r2, #0]
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfbc:	4613      	mov	r3, r2
 800bfbe:	009b      	lsls	r3, r3, #2
 800bfc0:	4413      	add	r3, r2
 800bfc2:	009b      	lsls	r3, r3, #2
 800bfc4:	4a10      	ldr	r2, [pc, #64]	; (800c008 <xTaskPriorityInherit+0x104>)
 800bfc6:	441a      	add	r2, r3
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	3304      	adds	r3, #4
 800bfcc:	4619      	mov	r1, r3
 800bfce:	4610      	mov	r0, r2
 800bfd0:	f7fe f988 	bl	800a2e4 <vListInsertEnd>
 800bfd4:	e004      	b.n	800bfe0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bfd6:	4b0b      	ldr	r3, [pc, #44]	; (800c004 <xTaskPriorityInherit+0x100>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	60fb      	str	r3, [r7, #12]
 800bfe4:	e008      	b.n	800bff8 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bfea:	4b06      	ldr	r3, [pc, #24]	; (800c004 <xTaskPriorityInherit+0x100>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d201      	bcs.n	800bff8 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bff4:	2301      	movs	r3, #1
 800bff6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bff8:	68fb      	ldr	r3, [r7, #12]
	}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
 800c002:	bf00      	nop
 800c004:	20000cd0 	.word	0x20000cd0
 800c008:	20000cd4 	.word	0x20000cd4
 800c00c:	20000dd8 	.word	0x20000dd8

0800c010 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c010:	b580      	push	{r7, lr}
 800c012:	b086      	sub	sp, #24
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c01c:	2300      	movs	r3, #0
 800c01e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d06e      	beq.n	800c104 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c026:	4b3a      	ldr	r3, [pc, #232]	; (800c110 <xTaskPriorityDisinherit+0x100>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	693a      	ldr	r2, [r7, #16]
 800c02c:	429a      	cmp	r2, r3
 800c02e:	d00a      	beq.n	800c046 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c034:	f383 8811 	msr	BASEPRI, r3
 800c038:	f3bf 8f6f 	isb	sy
 800c03c:	f3bf 8f4f 	dsb	sy
 800c040:	60fb      	str	r3, [r7, #12]
}
 800c042:	bf00      	nop
 800c044:	e7fe      	b.n	800c044 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d10a      	bne.n	800c064 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c052:	f383 8811 	msr	BASEPRI, r3
 800c056:	f3bf 8f6f 	isb	sy
 800c05a:	f3bf 8f4f 	dsb	sy
 800c05e:	60bb      	str	r3, [r7, #8]
}
 800c060:	bf00      	nop
 800c062:	e7fe      	b.n	800c062 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c068:	1e5a      	subs	r2, r3, #1
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c076:	429a      	cmp	r2, r3
 800c078:	d044      	beq.n	800c104 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d140      	bne.n	800c104 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	3304      	adds	r3, #4
 800c086:	4618      	mov	r0, r3
 800c088:	f7fe f987 	bl	800a39a <uxListRemove>
 800c08c:	4603      	mov	r3, r0
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d115      	bne.n	800c0be <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c096:	491f      	ldr	r1, [pc, #124]	; (800c114 <xTaskPriorityDisinherit+0x104>)
 800c098:	4613      	mov	r3, r2
 800c09a:	009b      	lsls	r3, r3, #2
 800c09c:	4413      	add	r3, r2
 800c09e:	009b      	lsls	r3, r3, #2
 800c0a0:	440b      	add	r3, r1
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d10a      	bne.n	800c0be <xTaskPriorityDisinherit+0xae>
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	fa02 f303 	lsl.w	r3, r2, r3
 800c0b2:	43da      	mvns	r2, r3
 800c0b4:	4b18      	ldr	r3, [pc, #96]	; (800c118 <xTaskPriorityDisinherit+0x108>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	4013      	ands	r3, r2
 800c0ba:	4a17      	ldr	r2, [pc, #92]	; (800c118 <xTaskPriorityDisinherit+0x108>)
 800c0bc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ca:	f1c3 0207 	rsb	r2, r3, #7
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	409a      	lsls	r2, r3
 800c0da:	4b0f      	ldr	r3, [pc, #60]	; (800c118 <xTaskPriorityDisinherit+0x108>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	4313      	orrs	r3, r2
 800c0e0:	4a0d      	ldr	r2, [pc, #52]	; (800c118 <xTaskPriorityDisinherit+0x108>)
 800c0e2:	6013      	str	r3, [r2, #0]
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0e8:	4613      	mov	r3, r2
 800c0ea:	009b      	lsls	r3, r3, #2
 800c0ec:	4413      	add	r3, r2
 800c0ee:	009b      	lsls	r3, r3, #2
 800c0f0:	4a08      	ldr	r2, [pc, #32]	; (800c114 <xTaskPriorityDisinherit+0x104>)
 800c0f2:	441a      	add	r2, r3
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	3304      	adds	r3, #4
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	4610      	mov	r0, r2
 800c0fc:	f7fe f8f2 	bl	800a2e4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c100:	2301      	movs	r3, #1
 800c102:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c104:	697b      	ldr	r3, [r7, #20]
	}
 800c106:	4618      	mov	r0, r3
 800c108:	3718      	adds	r7, #24
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	20000cd0 	.word	0x20000cd0
 800c114:	20000cd4 	.word	0x20000cd4
 800c118:	20000dd8 	.word	0x20000dd8

0800c11c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b088      	sub	sp, #32
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c12a:	2301      	movs	r3, #1
 800c12c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2b00      	cmp	r3, #0
 800c132:	f000 8088 	beq.w	800c246 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c136:	69bb      	ldr	r3, [r7, #24]
 800c138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d10a      	bne.n	800c154 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800c13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c142:	f383 8811 	msr	BASEPRI, r3
 800c146:	f3bf 8f6f 	isb	sy
 800c14a:	f3bf 8f4f 	dsb	sy
 800c14e:	60fb      	str	r3, [r7, #12]
}
 800c150:	bf00      	nop
 800c152:	e7fe      	b.n	800c152 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c154:	69bb      	ldr	r3, [r7, #24]
 800c156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c158:	683a      	ldr	r2, [r7, #0]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d902      	bls.n	800c164 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	61fb      	str	r3, [r7, #28]
 800c162:	e002      	b.n	800c16a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c164:	69bb      	ldr	r3, [r7, #24]
 800c166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c168:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c16a:	69bb      	ldr	r3, [r7, #24]
 800c16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c16e:	69fa      	ldr	r2, [r7, #28]
 800c170:	429a      	cmp	r2, r3
 800c172:	d068      	beq.n	800c246 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c174:	69bb      	ldr	r3, [r7, #24]
 800c176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c178:	697a      	ldr	r2, [r7, #20]
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d163      	bne.n	800c246 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c17e:	4b34      	ldr	r3, [pc, #208]	; (800c250 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	69ba      	ldr	r2, [r7, #24]
 800c184:	429a      	cmp	r2, r3
 800c186:	d10a      	bne.n	800c19e <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800c188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18c:	f383 8811 	msr	BASEPRI, r3
 800c190:	f3bf 8f6f 	isb	sy
 800c194:	f3bf 8f4f 	dsb	sy
 800c198:	60bb      	str	r3, [r7, #8]
}
 800c19a:	bf00      	nop
 800c19c:	e7fe      	b.n	800c19c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c19e:	69bb      	ldr	r3, [r7, #24]
 800c1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1a2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c1a4:	69bb      	ldr	r3, [r7, #24]
 800c1a6:	69fa      	ldr	r2, [r7, #28]
 800c1a8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c1aa:	69bb      	ldr	r3, [r7, #24]
 800c1ac:	699b      	ldr	r3, [r3, #24]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	db04      	blt.n	800c1bc <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1b2:	69fb      	ldr	r3, [r7, #28]
 800c1b4:	f1c3 0207 	rsb	r2, r3, #7
 800c1b8:	69bb      	ldr	r3, [r7, #24]
 800c1ba:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c1bc:	69bb      	ldr	r3, [r7, #24]
 800c1be:	6959      	ldr	r1, [r3, #20]
 800c1c0:	693a      	ldr	r2, [r7, #16]
 800c1c2:	4613      	mov	r3, r2
 800c1c4:	009b      	lsls	r3, r3, #2
 800c1c6:	4413      	add	r3, r2
 800c1c8:	009b      	lsls	r3, r3, #2
 800c1ca:	4a22      	ldr	r2, [pc, #136]	; (800c254 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c1cc:	4413      	add	r3, r2
 800c1ce:	4299      	cmp	r1, r3
 800c1d0:	d101      	bne.n	800c1d6 <vTaskPriorityDisinheritAfterTimeout+0xba>
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	e000      	b.n	800c1d8 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d034      	beq.n	800c246 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1dc:	69bb      	ldr	r3, [r7, #24]
 800c1de:	3304      	adds	r3, #4
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f7fe f8da 	bl	800a39a <uxListRemove>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d115      	bne.n	800c218 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c1ec:	69bb      	ldr	r3, [r7, #24]
 800c1ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1f0:	4918      	ldr	r1, [pc, #96]	; (800c254 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c1f2:	4613      	mov	r3, r2
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	4413      	add	r3, r2
 800c1f8:	009b      	lsls	r3, r3, #2
 800c1fa:	440b      	add	r3, r1
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d10a      	bne.n	800c218 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800c202:	69bb      	ldr	r3, [r7, #24]
 800c204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c206:	2201      	movs	r2, #1
 800c208:	fa02 f303 	lsl.w	r3, r2, r3
 800c20c:	43da      	mvns	r2, r3
 800c20e:	4b12      	ldr	r3, [pc, #72]	; (800c258 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	4013      	ands	r3, r2
 800c214:	4a10      	ldr	r2, [pc, #64]	; (800c258 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800c216:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c218:	69bb      	ldr	r3, [r7, #24]
 800c21a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c21c:	2201      	movs	r2, #1
 800c21e:	409a      	lsls	r2, r3
 800c220:	4b0d      	ldr	r3, [pc, #52]	; (800c258 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	4313      	orrs	r3, r2
 800c226:	4a0c      	ldr	r2, [pc, #48]	; (800c258 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800c228:	6013      	str	r3, [r2, #0]
 800c22a:	69bb      	ldr	r3, [r7, #24]
 800c22c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c22e:	4613      	mov	r3, r2
 800c230:	009b      	lsls	r3, r3, #2
 800c232:	4413      	add	r3, r2
 800c234:	009b      	lsls	r3, r3, #2
 800c236:	4a07      	ldr	r2, [pc, #28]	; (800c254 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c238:	441a      	add	r2, r3
 800c23a:	69bb      	ldr	r3, [r7, #24]
 800c23c:	3304      	adds	r3, #4
 800c23e:	4619      	mov	r1, r3
 800c240:	4610      	mov	r0, r2
 800c242:	f7fe f84f 	bl	800a2e4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c246:	bf00      	nop
 800c248:	3720      	adds	r7, #32
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	20000cd0 	.word	0x20000cd0
 800c254:	20000cd4 	.word	0x20000cd4
 800c258:	20000dd8 	.word	0x20000dd8

0800c25c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800c25c:	b480      	push	{r7}
 800c25e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c260:	4b07      	ldr	r3, [pc, #28]	; (800c280 <pvTaskIncrementMutexHeldCount+0x24>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d004      	beq.n	800c272 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c268:	4b05      	ldr	r3, [pc, #20]	; (800c280 <pvTaskIncrementMutexHeldCount+0x24>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c26e:	3201      	adds	r2, #1
 800c270:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c272:	4b03      	ldr	r3, [pc, #12]	; (800c280 <pvTaskIncrementMutexHeldCount+0x24>)
 800c274:	681b      	ldr	r3, [r3, #0]
	}
 800c276:	4618      	mov	r0, r3
 800c278:	46bd      	mov	sp, r7
 800c27a:	bc80      	pop	{r7}
 800c27c:	4770      	bx	lr
 800c27e:	bf00      	nop
 800c280:	20000cd0 	.word	0x20000cd0

0800c284 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b084      	sub	sp, #16
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c28e:	4b29      	ldr	r3, [pc, #164]	; (800c334 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c294:	4b28      	ldr	r3, [pc, #160]	; (800c338 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	3304      	adds	r3, #4
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7fe f87d 	bl	800a39a <uxListRemove>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d10b      	bne.n	800c2be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800c2a6:	4b24      	ldr	r3, [pc, #144]	; (800c338 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ac:	2201      	movs	r2, #1
 800c2ae:	fa02 f303 	lsl.w	r3, r2, r3
 800c2b2:	43da      	mvns	r2, r3
 800c2b4:	4b21      	ldr	r3, [pc, #132]	; (800c33c <prvAddCurrentTaskToDelayedList+0xb8>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	4013      	ands	r3, r2
 800c2ba:	4a20      	ldr	r2, [pc, #128]	; (800c33c <prvAddCurrentTaskToDelayedList+0xb8>)
 800c2bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2c4:	d10a      	bne.n	800c2dc <prvAddCurrentTaskToDelayedList+0x58>
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d007      	beq.n	800c2dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2cc:	4b1a      	ldr	r3, [pc, #104]	; (800c338 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	3304      	adds	r3, #4
 800c2d2:	4619      	mov	r1, r3
 800c2d4:	481a      	ldr	r0, [pc, #104]	; (800c340 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c2d6:	f7fe f805 	bl	800a2e4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c2da:	e026      	b.n	800c32a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c2dc:	68fa      	ldr	r2, [r7, #12]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	4413      	add	r3, r2
 800c2e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c2e4:	4b14      	ldr	r3, [pc, #80]	; (800c338 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	68ba      	ldr	r2, [r7, #8]
 800c2ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c2ec:	68ba      	ldr	r2, [r7, #8]
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d209      	bcs.n	800c308 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2f4:	4b13      	ldr	r3, [pc, #76]	; (800c344 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c2f6:	681a      	ldr	r2, [r3, #0]
 800c2f8:	4b0f      	ldr	r3, [pc, #60]	; (800c338 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	3304      	adds	r3, #4
 800c2fe:	4619      	mov	r1, r3
 800c300:	4610      	mov	r0, r2
 800c302:	f7fe f812 	bl	800a32a <vListInsert>
}
 800c306:	e010      	b.n	800c32a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c308:	4b0f      	ldr	r3, [pc, #60]	; (800c348 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c30a:	681a      	ldr	r2, [r3, #0]
 800c30c:	4b0a      	ldr	r3, [pc, #40]	; (800c338 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	3304      	adds	r3, #4
 800c312:	4619      	mov	r1, r3
 800c314:	4610      	mov	r0, r2
 800c316:	f7fe f808 	bl	800a32a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c31a:	4b0c      	ldr	r3, [pc, #48]	; (800c34c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	68ba      	ldr	r2, [r7, #8]
 800c320:	429a      	cmp	r2, r3
 800c322:	d202      	bcs.n	800c32a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c324:	4a09      	ldr	r2, [pc, #36]	; (800c34c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	6013      	str	r3, [r2, #0]
}
 800c32a:	bf00      	nop
 800c32c:	3710      	adds	r7, #16
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
 800c332:	bf00      	nop
 800c334:	20000dd4 	.word	0x20000dd4
 800c338:	20000cd0 	.word	0x20000cd0
 800c33c:	20000dd8 	.word	0x20000dd8
 800c340:	20000dbc 	.word	0x20000dbc
 800c344:	20000d8c 	.word	0x20000d8c
 800c348:	20000d88 	.word	0x20000d88
 800c34c:	20000df0 	.word	0x20000df0

0800c350 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b08a      	sub	sp, #40	; 0x28
 800c354:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c356:	2300      	movs	r3, #0
 800c358:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c35a:	f000 fb41 	bl	800c9e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c35e:	4b1c      	ldr	r3, [pc, #112]	; (800c3d0 <xTimerCreateTimerTask+0x80>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d021      	beq.n	800c3aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c366:	2300      	movs	r3, #0
 800c368:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c36a:	2300      	movs	r3, #0
 800c36c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c36e:	1d3a      	adds	r2, r7, #4
 800c370:	f107 0108 	add.w	r1, r7, #8
 800c374:	f107 030c 	add.w	r3, r7, #12
 800c378:	4618      	mov	r0, r3
 800c37a:	f7f7 ffff 	bl	800437c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c37e:	6879      	ldr	r1, [r7, #4]
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	68fa      	ldr	r2, [r7, #12]
 800c384:	9202      	str	r2, [sp, #8]
 800c386:	9301      	str	r3, [sp, #4]
 800c388:	2302      	movs	r3, #2
 800c38a:	9300      	str	r3, [sp, #0]
 800c38c:	2300      	movs	r3, #0
 800c38e:	460a      	mov	r2, r1
 800c390:	4910      	ldr	r1, [pc, #64]	; (800c3d4 <xTimerCreateTimerTask+0x84>)
 800c392:	4811      	ldr	r0, [pc, #68]	; (800c3d8 <xTimerCreateTimerTask+0x88>)
 800c394:	f7fe ff7a 	bl	800b28c <xTaskCreateStatic>
 800c398:	4603      	mov	r3, r0
 800c39a:	4a10      	ldr	r2, [pc, #64]	; (800c3dc <xTimerCreateTimerTask+0x8c>)
 800c39c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c39e:	4b0f      	ldr	r3, [pc, #60]	; (800c3dc <xTimerCreateTimerTask+0x8c>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d001      	beq.n	800c3aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d10a      	bne.n	800c3c6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b4:	f383 8811 	msr	BASEPRI, r3
 800c3b8:	f3bf 8f6f 	isb	sy
 800c3bc:	f3bf 8f4f 	dsb	sy
 800c3c0:	613b      	str	r3, [r7, #16]
}
 800c3c2:	bf00      	nop
 800c3c4:	e7fe      	b.n	800c3c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c3c6:	697b      	ldr	r3, [r7, #20]
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3718      	adds	r7, #24
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}
 800c3d0:	20000e2c 	.word	0x20000e2c
 800c3d4:	0800f444 	.word	0x0800f444
 800c3d8:	0800c61d 	.word	0x0800c61d
 800c3dc:	20000e30 	.word	0x20000e30

0800c3e0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b088      	sub	sp, #32
 800c3e4:	af02      	add	r7, sp, #8
 800c3e6:	60f8      	str	r0, [r7, #12]
 800c3e8:	60b9      	str	r1, [r7, #8]
 800c3ea:	607a      	str	r2, [r7, #4]
 800c3ec:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800c3ee:	202c      	movs	r0, #44	; 0x2c
 800c3f0:	f000 fd24 	bl	800ce3c <pvPortMalloc>
 800c3f4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d00d      	beq.n	800c418 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	9301      	str	r3, [sp, #4]
 800c400:	6a3b      	ldr	r3, [r7, #32]
 800c402:	9300      	str	r3, [sp, #0]
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	687a      	ldr	r2, [r7, #4]
 800c408:	68b9      	ldr	r1, [r7, #8]
 800c40a:	68f8      	ldr	r0, [r7, #12]
 800c40c:	f000 f846 	bl	800c49c <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800c410:	697b      	ldr	r3, [r7, #20]
 800c412:	2200      	movs	r2, #0
 800c414:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800c418:	697b      	ldr	r3, [r7, #20]
	}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3718      	adds	r7, #24
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}

0800c422 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800c422:	b580      	push	{r7, lr}
 800c424:	b08a      	sub	sp, #40	; 0x28
 800c426:	af02      	add	r7, sp, #8
 800c428:	60f8      	str	r0, [r7, #12]
 800c42a:	60b9      	str	r1, [r7, #8]
 800c42c:	607a      	str	r2, [r7, #4]
 800c42e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800c430:	232c      	movs	r3, #44	; 0x2c
 800c432:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	2b2c      	cmp	r3, #44	; 0x2c
 800c438:	d00a      	beq.n	800c450 <xTimerCreateStatic+0x2e>
	__asm volatile
 800c43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43e:	f383 8811 	msr	BASEPRI, r3
 800c442:	f3bf 8f6f 	isb	sy
 800c446:	f3bf 8f4f 	dsb	sy
 800c44a:	61bb      	str	r3, [r7, #24]
}
 800c44c:	bf00      	nop
 800c44e:	e7fe      	b.n	800c44e <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800c450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c452:	2b00      	cmp	r3, #0
 800c454:	d10a      	bne.n	800c46c <xTimerCreateStatic+0x4a>
	__asm volatile
 800c456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c45a:	f383 8811 	msr	BASEPRI, r3
 800c45e:	f3bf 8f6f 	isb	sy
 800c462:	f3bf 8f4f 	dsb	sy
 800c466:	617b      	str	r3, [r7, #20]
}
 800c468:	bf00      	nop
 800c46a:	e7fe      	b.n	800c46a <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c46e:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800c470:	69fb      	ldr	r3, [r7, #28]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d00d      	beq.n	800c492 <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c476:	69fb      	ldr	r3, [r7, #28]
 800c478:	9301      	str	r3, [sp, #4]
 800c47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c47c:	9300      	str	r3, [sp, #0]
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	687a      	ldr	r2, [r7, #4]
 800c482:	68b9      	ldr	r1, [r7, #8]
 800c484:	68f8      	ldr	r0, [r7, #12]
 800c486:	f000 f809 	bl	800c49c <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800c48a:	69fb      	ldr	r3, [r7, #28]
 800c48c:	2201      	movs	r2, #1
 800c48e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800c492:	69fb      	ldr	r3, [r7, #28]
	}
 800c494:	4618      	mov	r0, r3
 800c496:	3720      	adds	r7, #32
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b086      	sub	sp, #24
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	60f8      	str	r0, [r7, #12]
 800c4a4:	60b9      	str	r1, [r7, #8]
 800c4a6:	607a      	str	r2, [r7, #4]
 800c4a8:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d10a      	bne.n	800c4c6 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800c4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b4:	f383 8811 	msr	BASEPRI, r3
 800c4b8:	f3bf 8f6f 	isb	sy
 800c4bc:	f3bf 8f4f 	dsb	sy
 800c4c0:	617b      	str	r3, [r7, #20]
}
 800c4c2:	bf00      	nop
 800c4c4:	e7fe      	b.n	800c4c4 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800c4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d015      	beq.n	800c4f8 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c4cc:	f000 fa88 	bl	800c9e0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d2:	68fa      	ldr	r2, [r7, #12]
 800c4d4:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d8:	68ba      	ldr	r2, [r7, #8]
 800c4da:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800c4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4de:	687a      	ldr	r2, [r7, #4]
 800c4e0:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800c4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e4:	683a      	ldr	r2, [r7, #0]
 800c4e6:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ea:	6a3a      	ldr	r2, [r7, #32]
 800c4ec:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f0:	3304      	adds	r3, #4
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f7fd feea 	bl	800a2cc <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c4f8:	bf00      	nop
 800c4fa:	3718      	adds	r7, #24
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}

0800c500 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b08a      	sub	sp, #40	; 0x28
 800c504:	af00      	add	r7, sp, #0
 800c506:	60f8      	str	r0, [r7, #12]
 800c508:	60b9      	str	r1, [r7, #8]
 800c50a:	607a      	str	r2, [r7, #4]
 800c50c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c50e:	2300      	movs	r3, #0
 800c510:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d10a      	bne.n	800c52e <xTimerGenericCommand+0x2e>
	__asm volatile
 800c518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c51c:	f383 8811 	msr	BASEPRI, r3
 800c520:	f3bf 8f6f 	isb	sy
 800c524:	f3bf 8f4f 	dsb	sy
 800c528:	623b      	str	r3, [r7, #32]
}
 800c52a:	bf00      	nop
 800c52c:	e7fe      	b.n	800c52c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c52e:	4b1a      	ldr	r3, [pc, #104]	; (800c598 <xTimerGenericCommand+0x98>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d02a      	beq.n	800c58c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	2b05      	cmp	r3, #5
 800c546:	dc18      	bgt.n	800c57a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c548:	f7ff fcbe 	bl	800bec8 <xTaskGetSchedulerState>
 800c54c:	4603      	mov	r3, r0
 800c54e:	2b02      	cmp	r3, #2
 800c550:	d109      	bne.n	800c566 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c552:	4b11      	ldr	r3, [pc, #68]	; (800c598 <xTimerGenericCommand+0x98>)
 800c554:	6818      	ldr	r0, [r3, #0]
 800c556:	f107 0114 	add.w	r1, r7, #20
 800c55a:	2300      	movs	r3, #0
 800c55c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c55e:	f7fe f881 	bl	800a664 <xQueueGenericSend>
 800c562:	6278      	str	r0, [r7, #36]	; 0x24
 800c564:	e012      	b.n	800c58c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c566:	4b0c      	ldr	r3, [pc, #48]	; (800c598 <xTimerGenericCommand+0x98>)
 800c568:	6818      	ldr	r0, [r3, #0]
 800c56a:	f107 0114 	add.w	r1, r7, #20
 800c56e:	2300      	movs	r3, #0
 800c570:	2200      	movs	r2, #0
 800c572:	f7fe f877 	bl	800a664 <xQueueGenericSend>
 800c576:	6278      	str	r0, [r7, #36]	; 0x24
 800c578:	e008      	b.n	800c58c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c57a:	4b07      	ldr	r3, [pc, #28]	; (800c598 <xTimerGenericCommand+0x98>)
 800c57c:	6818      	ldr	r0, [r3, #0]
 800c57e:	f107 0114 	add.w	r1, r7, #20
 800c582:	2300      	movs	r3, #0
 800c584:	683a      	ldr	r2, [r7, #0]
 800c586:	f7fe f96b 	bl	800a860 <xQueueGenericSendFromISR>
 800c58a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3728      	adds	r7, #40	; 0x28
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
 800c596:	bf00      	nop
 800c598:	20000e2c 	.word	0x20000e2c

0800c59c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b088      	sub	sp, #32
 800c5a0:	af02      	add	r7, sp, #8
 800c5a2:	6078      	str	r0, [r7, #4]
 800c5a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c5a6:	4b1c      	ldr	r3, [pc, #112]	; (800c618 <prvProcessExpiredTimer+0x7c>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	68db      	ldr	r3, [r3, #12]
 800c5ac:	68db      	ldr	r3, [r3, #12]
 800c5ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	3304      	adds	r3, #4
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f7fd fef0 	bl	800a39a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c5ba:	697b      	ldr	r3, [r7, #20]
 800c5bc:	69db      	ldr	r3, [r3, #28]
 800c5be:	2b01      	cmp	r3, #1
 800c5c0:	d122      	bne.n	800c608 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	699a      	ldr	r2, [r3, #24]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	18d1      	adds	r1, r2, r3
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	683a      	ldr	r2, [r7, #0]
 800c5ce:	6978      	ldr	r0, [r7, #20]
 800c5d0:	f000 f8c8 	bl	800c764 <prvInsertTimerInActiveList>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d016      	beq.n	800c608 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c5da:	2300      	movs	r3, #0
 800c5dc:	9300      	str	r3, [sp, #0]
 800c5de:	2300      	movs	r3, #0
 800c5e0:	687a      	ldr	r2, [r7, #4]
 800c5e2:	2100      	movs	r1, #0
 800c5e4:	6978      	ldr	r0, [r7, #20]
 800c5e6:	f7ff ff8b 	bl	800c500 <xTimerGenericCommand>
 800c5ea:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c5ec:	693b      	ldr	r3, [r7, #16]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d10a      	bne.n	800c608 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800c5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f6:	f383 8811 	msr	BASEPRI, r3
 800c5fa:	f3bf 8f6f 	isb	sy
 800c5fe:	f3bf 8f4f 	dsb	sy
 800c602:	60fb      	str	r3, [r7, #12]
}
 800c604:	bf00      	nop
 800c606:	e7fe      	b.n	800c606 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c60c:	6978      	ldr	r0, [r7, #20]
 800c60e:	4798      	blx	r3
}
 800c610:	bf00      	nop
 800c612:	3718      	adds	r7, #24
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}
 800c618:	20000e24 	.word	0x20000e24

0800c61c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b084      	sub	sp, #16
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c624:	f107 0308 	add.w	r3, r7, #8
 800c628:	4618      	mov	r0, r3
 800c62a:	f000 f857 	bl	800c6dc <prvGetNextExpireTime>
 800c62e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	4619      	mov	r1, r3
 800c634:	68f8      	ldr	r0, [r7, #12]
 800c636:	f000 f803 	bl	800c640 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c63a:	f000 f8d5 	bl	800c7e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c63e:	e7f1      	b.n	800c624 <prvTimerTask+0x8>

0800c640 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b084      	sub	sp, #16
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c64a:	f7ff f84b 	bl	800b6e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c64e:	f107 0308 	add.w	r3, r7, #8
 800c652:	4618      	mov	r0, r3
 800c654:	f000 f866 	bl	800c724 <prvSampleTimeNow>
 800c658:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d130      	bne.n	800c6c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d10a      	bne.n	800c67c <prvProcessTimerOrBlockTask+0x3c>
 800c666:	687a      	ldr	r2, [r7, #4]
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	429a      	cmp	r2, r3
 800c66c:	d806      	bhi.n	800c67c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c66e:	f7ff f847 	bl	800b700 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c672:	68f9      	ldr	r1, [r7, #12]
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f7ff ff91 	bl	800c59c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c67a:	e024      	b.n	800c6c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d008      	beq.n	800c694 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c682:	4b13      	ldr	r3, [pc, #76]	; (800c6d0 <prvProcessTimerOrBlockTask+0x90>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	bf0c      	ite	eq
 800c68c:	2301      	moveq	r3, #1
 800c68e:	2300      	movne	r3, #0
 800c690:	b2db      	uxtb	r3, r3
 800c692:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c694:	4b0f      	ldr	r3, [pc, #60]	; (800c6d4 <prvProcessTimerOrBlockTask+0x94>)
 800c696:	6818      	ldr	r0, [r3, #0]
 800c698:	687a      	ldr	r2, [r7, #4]
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	1ad3      	subs	r3, r2, r3
 800c69e:	683a      	ldr	r2, [r7, #0]
 800c6a0:	4619      	mov	r1, r3
 800c6a2:	f7fe fdbf 	bl	800b224 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c6a6:	f7ff f82b 	bl	800b700 <xTaskResumeAll>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d10a      	bne.n	800c6c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c6b0:	4b09      	ldr	r3, [pc, #36]	; (800c6d8 <prvProcessTimerOrBlockTask+0x98>)
 800c6b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6b6:	601a      	str	r2, [r3, #0]
 800c6b8:	f3bf 8f4f 	dsb	sy
 800c6bc:	f3bf 8f6f 	isb	sy
}
 800c6c0:	e001      	b.n	800c6c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c6c2:	f7ff f81d 	bl	800b700 <xTaskResumeAll>
}
 800c6c6:	bf00      	nop
 800c6c8:	3710      	adds	r7, #16
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
 800c6ce:	bf00      	nop
 800c6d0:	20000e28 	.word	0x20000e28
 800c6d4:	20000e2c 	.word	0x20000e2c
 800c6d8:	e000ed04 	.word	0xe000ed04

0800c6dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b085      	sub	sp, #20
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c6e4:	4b0e      	ldr	r3, [pc, #56]	; (800c720 <prvGetNextExpireTime+0x44>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	bf0c      	ite	eq
 800c6ee:	2301      	moveq	r3, #1
 800c6f0:	2300      	movne	r3, #0
 800c6f2:	b2db      	uxtb	r3, r3
 800c6f4:	461a      	mov	r2, r3
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d105      	bne.n	800c70e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c702:	4b07      	ldr	r3, [pc, #28]	; (800c720 <prvGetNextExpireTime+0x44>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	68db      	ldr	r3, [r3, #12]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	60fb      	str	r3, [r7, #12]
 800c70c:	e001      	b.n	800c712 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c70e:	2300      	movs	r3, #0
 800c710:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c712:	68fb      	ldr	r3, [r7, #12]
}
 800c714:	4618      	mov	r0, r3
 800c716:	3714      	adds	r7, #20
 800c718:	46bd      	mov	sp, r7
 800c71a:	bc80      	pop	{r7}
 800c71c:	4770      	bx	lr
 800c71e:	bf00      	nop
 800c720:	20000e24 	.word	0x20000e24

0800c724 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b084      	sub	sp, #16
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c72c:	f7ff f884 	bl	800b838 <xTaskGetTickCount>
 800c730:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c732:	4b0b      	ldr	r3, [pc, #44]	; (800c760 <prvSampleTimeNow+0x3c>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	68fa      	ldr	r2, [r7, #12]
 800c738:	429a      	cmp	r2, r3
 800c73a:	d205      	bcs.n	800c748 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c73c:	f000 f8ee 	bl	800c91c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2201      	movs	r2, #1
 800c744:	601a      	str	r2, [r3, #0]
 800c746:	e002      	b.n	800c74e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2200      	movs	r2, #0
 800c74c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c74e:	4a04      	ldr	r2, [pc, #16]	; (800c760 <prvSampleTimeNow+0x3c>)
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c754:	68fb      	ldr	r3, [r7, #12]
}
 800c756:	4618      	mov	r0, r3
 800c758:	3710      	adds	r7, #16
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	bf00      	nop
 800c760:	20000e34 	.word	0x20000e34

0800c764 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b086      	sub	sp, #24
 800c768:	af00      	add	r7, sp, #0
 800c76a:	60f8      	str	r0, [r7, #12]
 800c76c:	60b9      	str	r1, [r7, #8]
 800c76e:	607a      	str	r2, [r7, #4]
 800c770:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c772:	2300      	movs	r3, #0
 800c774:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	68ba      	ldr	r2, [r7, #8]
 800c77a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	68fa      	ldr	r2, [r7, #12]
 800c780:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c782:	68ba      	ldr	r2, [r7, #8]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	429a      	cmp	r2, r3
 800c788:	d812      	bhi.n	800c7b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c78a:	687a      	ldr	r2, [r7, #4]
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	1ad2      	subs	r2, r2, r3
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	699b      	ldr	r3, [r3, #24]
 800c794:	429a      	cmp	r2, r3
 800c796:	d302      	bcc.n	800c79e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c798:	2301      	movs	r3, #1
 800c79a:	617b      	str	r3, [r7, #20]
 800c79c:	e01b      	b.n	800c7d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c79e:	4b10      	ldr	r3, [pc, #64]	; (800c7e0 <prvInsertTimerInActiveList+0x7c>)
 800c7a0:	681a      	ldr	r2, [r3, #0]
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	3304      	adds	r3, #4
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	4610      	mov	r0, r2
 800c7aa:	f7fd fdbe 	bl	800a32a <vListInsert>
 800c7ae:	e012      	b.n	800c7d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c7b0:	687a      	ldr	r2, [r7, #4]
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d206      	bcs.n	800c7c6 <prvInsertTimerInActiveList+0x62>
 800c7b8:	68ba      	ldr	r2, [r7, #8]
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	429a      	cmp	r2, r3
 800c7be:	d302      	bcc.n	800c7c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	617b      	str	r3, [r7, #20]
 800c7c4:	e007      	b.n	800c7d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c7c6:	4b07      	ldr	r3, [pc, #28]	; (800c7e4 <prvInsertTimerInActiveList+0x80>)
 800c7c8:	681a      	ldr	r2, [r3, #0]
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	3304      	adds	r3, #4
 800c7ce:	4619      	mov	r1, r3
 800c7d0:	4610      	mov	r0, r2
 800c7d2:	f7fd fdaa 	bl	800a32a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c7d6:	697b      	ldr	r3, [r7, #20]
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3718      	adds	r7, #24
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}
 800c7e0:	20000e28 	.word	0x20000e28
 800c7e4:	20000e24 	.word	0x20000e24

0800c7e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b08c      	sub	sp, #48	; 0x30
 800c7ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c7ee:	e081      	b.n	800c8f4 <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	db7d      	blt.n	800c8f2 <prvProcessReceivedCommands+0x10a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7fc:	695b      	ldr	r3, [r3, #20]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d004      	beq.n	800c80c <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c804:	3304      	adds	r3, #4
 800c806:	4618      	mov	r0, r3
 800c808:	f7fd fdc7 	bl	800a39a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c80c:	1d3b      	adds	r3, r7, #4
 800c80e:	4618      	mov	r0, r3
 800c810:	f7ff ff88 	bl	800c724 <prvSampleTimeNow>
 800c814:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	2b09      	cmp	r3, #9
 800c81a:	d86b      	bhi.n	800c8f4 <prvProcessReceivedCommands+0x10c>
 800c81c:	a201      	add	r2, pc, #4	; (adr r2, 800c824 <prvProcessReceivedCommands+0x3c>)
 800c81e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c822:	bf00      	nop
 800c824:	0800c84d 	.word	0x0800c84d
 800c828:	0800c84d 	.word	0x0800c84d
 800c82c:	0800c84d 	.word	0x0800c84d
 800c830:	0800c8f5 	.word	0x0800c8f5
 800c834:	0800c8a9 	.word	0x0800c8a9
 800c838:	0800c8e1 	.word	0x0800c8e1
 800c83c:	0800c84d 	.word	0x0800c84d
 800c840:	0800c84d 	.word	0x0800c84d
 800c844:	0800c8f5 	.word	0x0800c8f5
 800c848:	0800c8a9 	.word	0x0800c8a9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c84c:	68fa      	ldr	r2, [r7, #12]
 800c84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c850:	699b      	ldr	r3, [r3, #24]
 800c852:	18d1      	adds	r1, r2, r3
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	6a3a      	ldr	r2, [r7, #32]
 800c858:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c85a:	f7ff ff83 	bl	800c764 <prvInsertTimerInActiveList>
 800c85e:	4603      	mov	r3, r0
 800c860:	2b00      	cmp	r3, #0
 800c862:	d047      	beq.n	800c8f4 <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c868:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c86a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c86e:	69db      	ldr	r3, [r3, #28]
 800c870:	2b01      	cmp	r3, #1
 800c872:	d13f      	bne.n	800c8f4 <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c874:	68fa      	ldr	r2, [r7, #12]
 800c876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c878:	699b      	ldr	r3, [r3, #24]
 800c87a:	441a      	add	r2, r3
 800c87c:	2300      	movs	r3, #0
 800c87e:	9300      	str	r3, [sp, #0]
 800c880:	2300      	movs	r3, #0
 800c882:	2100      	movs	r1, #0
 800c884:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c886:	f7ff fe3b 	bl	800c500 <xTimerGenericCommand>
 800c88a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800c88c:	69fb      	ldr	r3, [r7, #28]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d130      	bne.n	800c8f4 <prvProcessReceivedCommands+0x10c>
	__asm volatile
 800c892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c896:	f383 8811 	msr	BASEPRI, r3
 800c89a:	f3bf 8f6f 	isb	sy
 800c89e:	f3bf 8f4f 	dsb	sy
 800c8a2:	61bb      	str	r3, [r7, #24]
}
 800c8a4:	bf00      	nop
 800c8a6:	e7fe      	b.n	800c8a6 <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c8a8:	68fa      	ldr	r2, [r7, #12]
 800c8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b0:	699b      	ldr	r3, [r3, #24]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d10a      	bne.n	800c8cc <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800c8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ba:	f383 8811 	msr	BASEPRI, r3
 800c8be:	f3bf 8f6f 	isb	sy
 800c8c2:	f3bf 8f4f 	dsb	sy
 800c8c6:	617b      	str	r3, [r7, #20]
}
 800c8c8:	bf00      	nop
 800c8ca:	e7fe      	b.n	800c8ca <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ce:	699a      	ldr	r2, [r3, #24]
 800c8d0:	6a3b      	ldr	r3, [r7, #32]
 800c8d2:	18d1      	adds	r1, r2, r3
 800c8d4:	6a3b      	ldr	r3, [r7, #32]
 800c8d6:	6a3a      	ldr	r2, [r7, #32]
 800c8d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c8da:	f7ff ff43 	bl	800c764 <prvInsertTimerInActiveList>
					break;
 800c8de:	e009      	b.n	800c8f4 <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d104      	bne.n	800c8f4 <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 800c8ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c8ec:	f000 fb6a 	bl	800cfc4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c8f0:	e000      	b.n	800c8f4 <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c8f2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c8f4:	4b08      	ldr	r3, [pc, #32]	; (800c918 <prvProcessReceivedCommands+0x130>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f107 0108 	add.w	r1, r7, #8
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	4618      	mov	r0, r3
 800c900:	f7fe f8d4 	bl	800aaac <xQueueReceive>
 800c904:	4603      	mov	r3, r0
 800c906:	2b00      	cmp	r3, #0
 800c908:	f47f af72 	bne.w	800c7f0 <prvProcessReceivedCommands+0x8>
	}
}
 800c90c:	bf00      	nop
 800c90e:	bf00      	nop
 800c910:	3728      	adds	r7, #40	; 0x28
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}
 800c916:	bf00      	nop
 800c918:	20000e2c 	.word	0x20000e2c

0800c91c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b088      	sub	sp, #32
 800c920:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c922:	e045      	b.n	800c9b0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c924:	4b2c      	ldr	r3, [pc, #176]	; (800c9d8 <prvSwitchTimerLists+0xbc>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	68db      	ldr	r3, [r3, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c92e:	4b2a      	ldr	r3, [pc, #168]	; (800c9d8 <prvSwitchTimerLists+0xbc>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	68db      	ldr	r3, [r3, #12]
 800c934:	68db      	ldr	r3, [r3, #12]
 800c936:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	3304      	adds	r3, #4
 800c93c:	4618      	mov	r0, r3
 800c93e:	f7fd fd2c 	bl	800a39a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c946:	68f8      	ldr	r0, [r7, #12]
 800c948:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	69db      	ldr	r3, [r3, #28]
 800c94e:	2b01      	cmp	r3, #1
 800c950:	d12e      	bne.n	800c9b0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	699b      	ldr	r3, [r3, #24]
 800c956:	693a      	ldr	r2, [r7, #16]
 800c958:	4413      	add	r3, r2
 800c95a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c95c:	68ba      	ldr	r2, [r7, #8]
 800c95e:	693b      	ldr	r3, [r7, #16]
 800c960:	429a      	cmp	r2, r3
 800c962:	d90e      	bls.n	800c982 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	68ba      	ldr	r2, [r7, #8]
 800c968:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	68fa      	ldr	r2, [r7, #12]
 800c96e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c970:	4b19      	ldr	r3, [pc, #100]	; (800c9d8 <prvSwitchTimerLists+0xbc>)
 800c972:	681a      	ldr	r2, [r3, #0]
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	3304      	adds	r3, #4
 800c978:	4619      	mov	r1, r3
 800c97a:	4610      	mov	r0, r2
 800c97c:	f7fd fcd5 	bl	800a32a <vListInsert>
 800c980:	e016      	b.n	800c9b0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c982:	2300      	movs	r3, #0
 800c984:	9300      	str	r3, [sp, #0]
 800c986:	2300      	movs	r3, #0
 800c988:	693a      	ldr	r2, [r7, #16]
 800c98a:	2100      	movs	r1, #0
 800c98c:	68f8      	ldr	r0, [r7, #12]
 800c98e:	f7ff fdb7 	bl	800c500 <xTimerGenericCommand>
 800c992:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d10a      	bne.n	800c9b0 <prvSwitchTimerLists+0x94>
	__asm volatile
 800c99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c99e:	f383 8811 	msr	BASEPRI, r3
 800c9a2:	f3bf 8f6f 	isb	sy
 800c9a6:	f3bf 8f4f 	dsb	sy
 800c9aa:	603b      	str	r3, [r7, #0]
}
 800c9ac:	bf00      	nop
 800c9ae:	e7fe      	b.n	800c9ae <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c9b0:	4b09      	ldr	r3, [pc, #36]	; (800c9d8 <prvSwitchTimerLists+0xbc>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d1b4      	bne.n	800c924 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c9ba:	4b07      	ldr	r3, [pc, #28]	; (800c9d8 <prvSwitchTimerLists+0xbc>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c9c0:	4b06      	ldr	r3, [pc, #24]	; (800c9dc <prvSwitchTimerLists+0xc0>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	4a04      	ldr	r2, [pc, #16]	; (800c9d8 <prvSwitchTimerLists+0xbc>)
 800c9c6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c9c8:	4a04      	ldr	r2, [pc, #16]	; (800c9dc <prvSwitchTimerLists+0xc0>)
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	6013      	str	r3, [r2, #0]
}
 800c9ce:	bf00      	nop
 800c9d0:	3718      	adds	r7, #24
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}
 800c9d6:	bf00      	nop
 800c9d8:	20000e24 	.word	0x20000e24
 800c9dc:	20000e28 	.word	0x20000e28

0800c9e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b082      	sub	sp, #8
 800c9e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c9e6:	f000 f929 	bl	800cc3c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c9ea:	4b15      	ldr	r3, [pc, #84]	; (800ca40 <prvCheckForValidListAndQueue+0x60>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d120      	bne.n	800ca34 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c9f2:	4814      	ldr	r0, [pc, #80]	; (800ca44 <prvCheckForValidListAndQueue+0x64>)
 800c9f4:	f7fd fc4b 	bl	800a28e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c9f8:	4813      	ldr	r0, [pc, #76]	; (800ca48 <prvCheckForValidListAndQueue+0x68>)
 800c9fa:	f7fd fc48 	bl	800a28e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c9fe:	4b13      	ldr	r3, [pc, #76]	; (800ca4c <prvCheckForValidListAndQueue+0x6c>)
 800ca00:	4a10      	ldr	r2, [pc, #64]	; (800ca44 <prvCheckForValidListAndQueue+0x64>)
 800ca02:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ca04:	4b12      	ldr	r3, [pc, #72]	; (800ca50 <prvCheckForValidListAndQueue+0x70>)
 800ca06:	4a10      	ldr	r2, [pc, #64]	; (800ca48 <prvCheckForValidListAndQueue+0x68>)
 800ca08:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	9300      	str	r3, [sp, #0]
 800ca0e:	4b11      	ldr	r3, [pc, #68]	; (800ca54 <prvCheckForValidListAndQueue+0x74>)
 800ca10:	4a11      	ldr	r2, [pc, #68]	; (800ca58 <prvCheckForValidListAndQueue+0x78>)
 800ca12:	210c      	movs	r1, #12
 800ca14:	200a      	movs	r0, #10
 800ca16:	f7fd fd51 	bl	800a4bc <xQueueGenericCreateStatic>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	4a08      	ldr	r2, [pc, #32]	; (800ca40 <prvCheckForValidListAndQueue+0x60>)
 800ca1e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ca20:	4b07      	ldr	r3, [pc, #28]	; (800ca40 <prvCheckForValidListAndQueue+0x60>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d005      	beq.n	800ca34 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ca28:	4b05      	ldr	r3, [pc, #20]	; (800ca40 <prvCheckForValidListAndQueue+0x60>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	490b      	ldr	r1, [pc, #44]	; (800ca5c <prvCheckForValidListAndQueue+0x7c>)
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f7fe fbd0 	bl	800b1d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ca34:	f000 f932 	bl	800cc9c <vPortExitCritical>
}
 800ca38:	bf00      	nop
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}
 800ca3e:	bf00      	nop
 800ca40:	20000e2c 	.word	0x20000e2c
 800ca44:	20000dfc 	.word	0x20000dfc
 800ca48:	20000e10 	.word	0x20000e10
 800ca4c:	20000e24 	.word	0x20000e24
 800ca50:	20000e28 	.word	0x20000e28
 800ca54:	20000eb0 	.word	0x20000eb0
 800ca58:	20000e38 	.word	0x20000e38
 800ca5c:	0800f44c 	.word	0x0800f44c

0800ca60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ca60:	b480      	push	{r7}
 800ca62:	b085      	sub	sp, #20
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	60f8      	str	r0, [r7, #12]
 800ca68:	60b9      	str	r1, [r7, #8]
 800ca6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	3b04      	subs	r3, #4
 800ca70:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ca78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	3b04      	subs	r3, #4
 800ca7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	f023 0201 	bic.w	r2, r3, #1
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	3b04      	subs	r3, #4
 800ca8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ca90:	4a08      	ldr	r2, [pc, #32]	; (800cab4 <pxPortInitialiseStack+0x54>)
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	3b14      	subs	r3, #20
 800ca9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ca9c:	687a      	ldr	r2, [r7, #4]
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	3b20      	subs	r3, #32
 800caa6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800caa8:	68fb      	ldr	r3, [r7, #12]
}
 800caaa:	4618      	mov	r0, r3
 800caac:	3714      	adds	r7, #20
 800caae:	46bd      	mov	sp, r7
 800cab0:	bc80      	pop	{r7}
 800cab2:	4770      	bx	lr
 800cab4:	0800cab9 	.word	0x0800cab9

0800cab8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cab8:	b480      	push	{r7}
 800caba:	b085      	sub	sp, #20
 800cabc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800cabe:	2300      	movs	r3, #0
 800cac0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cac2:	4b12      	ldr	r3, [pc, #72]	; (800cb0c <prvTaskExitError+0x54>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caca:	d00a      	beq.n	800cae2 <prvTaskExitError+0x2a>
	__asm volatile
 800cacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad0:	f383 8811 	msr	BASEPRI, r3
 800cad4:	f3bf 8f6f 	isb	sy
 800cad8:	f3bf 8f4f 	dsb	sy
 800cadc:	60fb      	str	r3, [r7, #12]
}
 800cade:	bf00      	nop
 800cae0:	e7fe      	b.n	800cae0 <prvTaskExitError+0x28>
	__asm volatile
 800cae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae6:	f383 8811 	msr	BASEPRI, r3
 800caea:	f3bf 8f6f 	isb	sy
 800caee:	f3bf 8f4f 	dsb	sy
 800caf2:	60bb      	str	r3, [r7, #8]
}
 800caf4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800caf6:	bf00      	nop
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d0fc      	beq.n	800caf8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cafe:	bf00      	nop
 800cb00:	bf00      	nop
 800cb02:	3714      	adds	r7, #20
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bc80      	pop	{r7}
 800cb08:	4770      	bx	lr
 800cb0a:	bf00      	nop
 800cb0c:	20000054 	.word	0x20000054

0800cb10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cb10:	4b07      	ldr	r3, [pc, #28]	; (800cb30 <pxCurrentTCBConst2>)
 800cb12:	6819      	ldr	r1, [r3, #0]
 800cb14:	6808      	ldr	r0, [r1, #0]
 800cb16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cb1a:	f380 8809 	msr	PSP, r0
 800cb1e:	f3bf 8f6f 	isb	sy
 800cb22:	f04f 0000 	mov.w	r0, #0
 800cb26:	f380 8811 	msr	BASEPRI, r0
 800cb2a:	f04e 0e0d 	orr.w	lr, lr, #13
 800cb2e:	4770      	bx	lr

0800cb30 <pxCurrentTCBConst2>:
 800cb30:	20000cd0 	.word	0x20000cd0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cb34:	bf00      	nop
 800cb36:	bf00      	nop

0800cb38 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800cb38:	4806      	ldr	r0, [pc, #24]	; (800cb54 <prvPortStartFirstTask+0x1c>)
 800cb3a:	6800      	ldr	r0, [r0, #0]
 800cb3c:	6800      	ldr	r0, [r0, #0]
 800cb3e:	f380 8808 	msr	MSP, r0
 800cb42:	b662      	cpsie	i
 800cb44:	b661      	cpsie	f
 800cb46:	f3bf 8f4f 	dsb	sy
 800cb4a:	f3bf 8f6f 	isb	sy
 800cb4e:	df00      	svc	0
 800cb50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cb52:	bf00      	nop
 800cb54:	e000ed08 	.word	0xe000ed08

0800cb58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b084      	sub	sp, #16
 800cb5c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cb5e:	4b32      	ldr	r3, [pc, #200]	; (800cc28 <xPortStartScheduler+0xd0>)
 800cb60:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	781b      	ldrb	r3, [r3, #0]
 800cb66:	b2db      	uxtb	r3, r3
 800cb68:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	22ff      	movs	r2, #255	; 0xff
 800cb6e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	781b      	ldrb	r3, [r3, #0]
 800cb74:	b2db      	uxtb	r3, r3
 800cb76:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cb78:	78fb      	ldrb	r3, [r7, #3]
 800cb7a:	b2db      	uxtb	r3, r3
 800cb7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cb80:	b2da      	uxtb	r2, r3
 800cb82:	4b2a      	ldr	r3, [pc, #168]	; (800cc2c <xPortStartScheduler+0xd4>)
 800cb84:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cb86:	4b2a      	ldr	r3, [pc, #168]	; (800cc30 <xPortStartScheduler+0xd8>)
 800cb88:	2207      	movs	r2, #7
 800cb8a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb8c:	e009      	b.n	800cba2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800cb8e:	4b28      	ldr	r3, [pc, #160]	; (800cc30 <xPortStartScheduler+0xd8>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	3b01      	subs	r3, #1
 800cb94:	4a26      	ldr	r2, [pc, #152]	; (800cc30 <xPortStartScheduler+0xd8>)
 800cb96:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cb98:	78fb      	ldrb	r3, [r7, #3]
 800cb9a:	b2db      	uxtb	r3, r3
 800cb9c:	005b      	lsls	r3, r3, #1
 800cb9e:	b2db      	uxtb	r3, r3
 800cba0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cba2:	78fb      	ldrb	r3, [r7, #3]
 800cba4:	b2db      	uxtb	r3, r3
 800cba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbaa:	2b80      	cmp	r3, #128	; 0x80
 800cbac:	d0ef      	beq.n	800cb8e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cbae:	4b20      	ldr	r3, [pc, #128]	; (800cc30 <xPortStartScheduler+0xd8>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f1c3 0307 	rsb	r3, r3, #7
 800cbb6:	2b04      	cmp	r3, #4
 800cbb8:	d00a      	beq.n	800cbd0 <xPortStartScheduler+0x78>
	__asm volatile
 800cbba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbbe:	f383 8811 	msr	BASEPRI, r3
 800cbc2:	f3bf 8f6f 	isb	sy
 800cbc6:	f3bf 8f4f 	dsb	sy
 800cbca:	60bb      	str	r3, [r7, #8]
}
 800cbcc:	bf00      	nop
 800cbce:	e7fe      	b.n	800cbce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cbd0:	4b17      	ldr	r3, [pc, #92]	; (800cc30 <xPortStartScheduler+0xd8>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	021b      	lsls	r3, r3, #8
 800cbd6:	4a16      	ldr	r2, [pc, #88]	; (800cc30 <xPortStartScheduler+0xd8>)
 800cbd8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cbda:	4b15      	ldr	r3, [pc, #84]	; (800cc30 <xPortStartScheduler+0xd8>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cbe2:	4a13      	ldr	r2, [pc, #76]	; (800cc30 <xPortStartScheduler+0xd8>)
 800cbe4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	b2da      	uxtb	r2, r3
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cbee:	4b11      	ldr	r3, [pc, #68]	; (800cc34 <xPortStartScheduler+0xdc>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	4a10      	ldr	r2, [pc, #64]	; (800cc34 <xPortStartScheduler+0xdc>)
 800cbf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cbf8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cbfa:	4b0e      	ldr	r3, [pc, #56]	; (800cc34 <xPortStartScheduler+0xdc>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	4a0d      	ldr	r2, [pc, #52]	; (800cc34 <xPortStartScheduler+0xdc>)
 800cc00:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cc04:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cc06:	f000 f8b9 	bl	800cd7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cc0a:	4b0b      	ldr	r3, [pc, #44]	; (800cc38 <xPortStartScheduler+0xe0>)
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cc10:	f7ff ff92 	bl	800cb38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cc14:	f7fe feee 	bl	800b9f4 <vTaskSwitchContext>
	prvTaskExitError();
 800cc18:	f7ff ff4e 	bl	800cab8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cc1c:	2300      	movs	r3, #0
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3710      	adds	r7, #16
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
 800cc26:	bf00      	nop
 800cc28:	e000e400 	.word	0xe000e400
 800cc2c:	20000ef8 	.word	0x20000ef8
 800cc30:	20000efc 	.word	0x20000efc
 800cc34:	e000ed20 	.word	0xe000ed20
 800cc38:	20000054 	.word	0x20000054

0800cc3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b083      	sub	sp, #12
 800cc40:	af00      	add	r7, sp, #0
	__asm volatile
 800cc42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc46:	f383 8811 	msr	BASEPRI, r3
 800cc4a:	f3bf 8f6f 	isb	sy
 800cc4e:	f3bf 8f4f 	dsb	sy
 800cc52:	607b      	str	r3, [r7, #4]
}
 800cc54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cc56:	4b0f      	ldr	r3, [pc, #60]	; (800cc94 <vPortEnterCritical+0x58>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	3301      	adds	r3, #1
 800cc5c:	4a0d      	ldr	r2, [pc, #52]	; (800cc94 <vPortEnterCritical+0x58>)
 800cc5e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cc60:	4b0c      	ldr	r3, [pc, #48]	; (800cc94 <vPortEnterCritical+0x58>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	2b01      	cmp	r3, #1
 800cc66:	d10f      	bne.n	800cc88 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cc68:	4b0b      	ldr	r3, [pc, #44]	; (800cc98 <vPortEnterCritical+0x5c>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	b2db      	uxtb	r3, r3
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d00a      	beq.n	800cc88 <vPortEnterCritical+0x4c>
	__asm volatile
 800cc72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc76:	f383 8811 	msr	BASEPRI, r3
 800cc7a:	f3bf 8f6f 	isb	sy
 800cc7e:	f3bf 8f4f 	dsb	sy
 800cc82:	603b      	str	r3, [r7, #0]
}
 800cc84:	bf00      	nop
 800cc86:	e7fe      	b.n	800cc86 <vPortEnterCritical+0x4a>
	}
}
 800cc88:	bf00      	nop
 800cc8a:	370c      	adds	r7, #12
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bc80      	pop	{r7}
 800cc90:	4770      	bx	lr
 800cc92:	bf00      	nop
 800cc94:	20000054 	.word	0x20000054
 800cc98:	e000ed04 	.word	0xe000ed04

0800cc9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b083      	sub	sp, #12
 800cca0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cca2:	4b11      	ldr	r3, [pc, #68]	; (800cce8 <vPortExitCritical+0x4c>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d10a      	bne.n	800ccc0 <vPortExitCritical+0x24>
	__asm volatile
 800ccaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccae:	f383 8811 	msr	BASEPRI, r3
 800ccb2:	f3bf 8f6f 	isb	sy
 800ccb6:	f3bf 8f4f 	dsb	sy
 800ccba:	607b      	str	r3, [r7, #4]
}
 800ccbc:	bf00      	nop
 800ccbe:	e7fe      	b.n	800ccbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ccc0:	4b09      	ldr	r3, [pc, #36]	; (800cce8 <vPortExitCritical+0x4c>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	3b01      	subs	r3, #1
 800ccc6:	4a08      	ldr	r2, [pc, #32]	; (800cce8 <vPortExitCritical+0x4c>)
 800ccc8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ccca:	4b07      	ldr	r3, [pc, #28]	; (800cce8 <vPortExitCritical+0x4c>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d105      	bne.n	800ccde <vPortExitCritical+0x42>
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	f383 8811 	msr	BASEPRI, r3
}
 800ccdc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ccde:	bf00      	nop
 800cce0:	370c      	adds	r7, #12
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bc80      	pop	{r7}
 800cce6:	4770      	bx	lr
 800cce8:	20000054 	.word	0x20000054
 800ccec:	00000000 	.word	0x00000000

0800ccf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ccf0:	f3ef 8009 	mrs	r0, PSP
 800ccf4:	f3bf 8f6f 	isb	sy
 800ccf8:	4b0d      	ldr	r3, [pc, #52]	; (800cd30 <pxCurrentTCBConst>)
 800ccfa:	681a      	ldr	r2, [r3, #0]
 800ccfc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cd00:	6010      	str	r0, [r2, #0]
 800cd02:	e92d 4008 	stmdb	sp!, {r3, lr}
 800cd06:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cd0a:	f380 8811 	msr	BASEPRI, r0
 800cd0e:	f7fe fe71 	bl	800b9f4 <vTaskSwitchContext>
 800cd12:	f04f 0000 	mov.w	r0, #0
 800cd16:	f380 8811 	msr	BASEPRI, r0
 800cd1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cd1e:	6819      	ldr	r1, [r3, #0]
 800cd20:	6808      	ldr	r0, [r1, #0]
 800cd22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cd26:	f380 8809 	msr	PSP, r0
 800cd2a:	f3bf 8f6f 	isb	sy
 800cd2e:	4770      	bx	lr

0800cd30 <pxCurrentTCBConst>:
 800cd30:	20000cd0 	.word	0x20000cd0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cd34:	bf00      	nop
 800cd36:	bf00      	nop

0800cd38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b082      	sub	sp, #8
 800cd3c:	af00      	add	r7, sp, #0
	__asm volatile
 800cd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd42:	f383 8811 	msr	BASEPRI, r3
 800cd46:	f3bf 8f6f 	isb	sy
 800cd4a:	f3bf 8f4f 	dsb	sy
 800cd4e:	607b      	str	r3, [r7, #4]
}
 800cd50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cd52:	f7fe fd91 	bl	800b878 <xTaskIncrementTick>
 800cd56:	4603      	mov	r3, r0
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d003      	beq.n	800cd64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cd5c:	4b06      	ldr	r3, [pc, #24]	; (800cd78 <SysTick_Handler+0x40>)
 800cd5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd62:	601a      	str	r2, [r3, #0]
 800cd64:	2300      	movs	r3, #0
 800cd66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	f383 8811 	msr	BASEPRI, r3
}
 800cd6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cd70:	bf00      	nop
 800cd72:	3708      	adds	r7, #8
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}
 800cd78:	e000ed04 	.word	0xe000ed04

0800cd7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cd80:	4b0a      	ldr	r3, [pc, #40]	; (800cdac <vPortSetupTimerInterrupt+0x30>)
 800cd82:	2200      	movs	r2, #0
 800cd84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cd86:	4b0a      	ldr	r3, [pc, #40]	; (800cdb0 <vPortSetupTimerInterrupt+0x34>)
 800cd88:	2200      	movs	r2, #0
 800cd8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cd8c:	4b09      	ldr	r3, [pc, #36]	; (800cdb4 <vPortSetupTimerInterrupt+0x38>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	4a09      	ldr	r2, [pc, #36]	; (800cdb8 <vPortSetupTimerInterrupt+0x3c>)
 800cd92:	fba2 2303 	umull	r2, r3, r2, r3
 800cd96:	099b      	lsrs	r3, r3, #6
 800cd98:	4a08      	ldr	r2, [pc, #32]	; (800cdbc <vPortSetupTimerInterrupt+0x40>)
 800cd9a:	3b01      	subs	r3, #1
 800cd9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cd9e:	4b03      	ldr	r3, [pc, #12]	; (800cdac <vPortSetupTimerInterrupt+0x30>)
 800cda0:	2207      	movs	r2, #7
 800cda2:	601a      	str	r2, [r3, #0]
}
 800cda4:	bf00      	nop
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bc80      	pop	{r7}
 800cdaa:	4770      	bx	lr
 800cdac:	e000e010 	.word	0xe000e010
 800cdb0:	e000e018 	.word	0xe000e018
 800cdb4:	20000048 	.word	0x20000048
 800cdb8:	10624dd3 	.word	0x10624dd3
 800cdbc:	e000e014 	.word	0xe000e014

0800cdc0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b085      	sub	sp, #20
 800cdc4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cdc6:	f3ef 8305 	mrs	r3, IPSR
 800cdca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	2b0f      	cmp	r3, #15
 800cdd0:	d914      	bls.n	800cdfc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cdd2:	4a16      	ldr	r2, [pc, #88]	; (800ce2c <vPortValidateInterruptPriority+0x6c>)
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	4413      	add	r3, r2
 800cdd8:	781b      	ldrb	r3, [r3, #0]
 800cdda:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cddc:	4b14      	ldr	r3, [pc, #80]	; (800ce30 <vPortValidateInterruptPriority+0x70>)
 800cdde:	781b      	ldrb	r3, [r3, #0]
 800cde0:	7afa      	ldrb	r2, [r7, #11]
 800cde2:	429a      	cmp	r2, r3
 800cde4:	d20a      	bcs.n	800cdfc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cde6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdea:	f383 8811 	msr	BASEPRI, r3
 800cdee:	f3bf 8f6f 	isb	sy
 800cdf2:	f3bf 8f4f 	dsb	sy
 800cdf6:	607b      	str	r3, [r7, #4]
}
 800cdf8:	bf00      	nop
 800cdfa:	e7fe      	b.n	800cdfa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cdfc:	4b0d      	ldr	r3, [pc, #52]	; (800ce34 <vPortValidateInterruptPriority+0x74>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ce04:	4b0c      	ldr	r3, [pc, #48]	; (800ce38 <vPortValidateInterruptPriority+0x78>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d90a      	bls.n	800ce22 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ce0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce10:	f383 8811 	msr	BASEPRI, r3
 800ce14:	f3bf 8f6f 	isb	sy
 800ce18:	f3bf 8f4f 	dsb	sy
 800ce1c:	603b      	str	r3, [r7, #0]
}
 800ce1e:	bf00      	nop
 800ce20:	e7fe      	b.n	800ce20 <vPortValidateInterruptPriority+0x60>
	}
 800ce22:	bf00      	nop
 800ce24:	3714      	adds	r7, #20
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bc80      	pop	{r7}
 800ce2a:	4770      	bx	lr
 800ce2c:	e000e3f0 	.word	0xe000e3f0
 800ce30:	20000ef8 	.word	0x20000ef8
 800ce34:	e000ed0c 	.word	0xe000ed0c
 800ce38:	20000efc 	.word	0x20000efc

0800ce3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b08a      	sub	sp, #40	; 0x28
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ce44:	2300      	movs	r3, #0
 800ce46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ce48:	f7fe fc4c 	bl	800b6e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ce4c:	4b58      	ldr	r3, [pc, #352]	; (800cfb0 <pvPortMalloc+0x174>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d101      	bne.n	800ce58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ce54:	f000 f910 	bl	800d078 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ce58:	4b56      	ldr	r3, [pc, #344]	; (800cfb4 <pvPortMalloc+0x178>)
 800ce5a:	681a      	ldr	r2, [r3, #0]
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	4013      	ands	r3, r2
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	f040 808e 	bne.w	800cf82 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d01d      	beq.n	800cea8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ce6c:	2208      	movs	r2, #8
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	4413      	add	r3, r2
 800ce72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f003 0307 	and.w	r3, r3, #7
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d014      	beq.n	800cea8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f023 0307 	bic.w	r3, r3, #7
 800ce84:	3308      	adds	r3, #8
 800ce86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f003 0307 	and.w	r3, r3, #7
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d00a      	beq.n	800cea8 <pvPortMalloc+0x6c>
	__asm volatile
 800ce92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce96:	f383 8811 	msr	BASEPRI, r3
 800ce9a:	f3bf 8f6f 	isb	sy
 800ce9e:	f3bf 8f4f 	dsb	sy
 800cea2:	617b      	str	r3, [r7, #20]
}
 800cea4:	bf00      	nop
 800cea6:	e7fe      	b.n	800cea6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d069      	beq.n	800cf82 <pvPortMalloc+0x146>
 800ceae:	4b42      	ldr	r3, [pc, #264]	; (800cfb8 <pvPortMalloc+0x17c>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	687a      	ldr	r2, [r7, #4]
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d864      	bhi.n	800cf82 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ceb8:	4b40      	ldr	r3, [pc, #256]	; (800cfbc <pvPortMalloc+0x180>)
 800ceba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cebc:	4b3f      	ldr	r3, [pc, #252]	; (800cfbc <pvPortMalloc+0x180>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cec2:	e004      	b.n	800cece <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced0:	685b      	ldr	r3, [r3, #4]
 800ced2:	687a      	ldr	r2, [r7, #4]
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d903      	bls.n	800cee0 <pvPortMalloc+0xa4>
 800ced8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d1f1      	bne.n	800cec4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cee0:	4b33      	ldr	r3, [pc, #204]	; (800cfb0 <pvPortMalloc+0x174>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cee6:	429a      	cmp	r2, r3
 800cee8:	d04b      	beq.n	800cf82 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ceea:	6a3b      	ldr	r3, [r7, #32]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	2208      	movs	r2, #8
 800cef0:	4413      	add	r3, r2
 800cef2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef6:	681a      	ldr	r2, [r3, #0]
 800cef8:	6a3b      	ldr	r3, [r7, #32]
 800cefa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cefe:	685a      	ldr	r2, [r3, #4]
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	1ad2      	subs	r2, r2, r3
 800cf04:	2308      	movs	r3, #8
 800cf06:	005b      	lsls	r3, r3, #1
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	d91f      	bls.n	800cf4c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cf0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	4413      	add	r3, r2
 800cf12:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf14:	69bb      	ldr	r3, [r7, #24]
 800cf16:	f003 0307 	and.w	r3, r3, #7
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d00a      	beq.n	800cf34 <pvPortMalloc+0xf8>
	__asm volatile
 800cf1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf22:	f383 8811 	msr	BASEPRI, r3
 800cf26:	f3bf 8f6f 	isb	sy
 800cf2a:	f3bf 8f4f 	dsb	sy
 800cf2e:	613b      	str	r3, [r7, #16]
}
 800cf30:	bf00      	nop
 800cf32:	e7fe      	b.n	800cf32 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cf34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf36:	685a      	ldr	r2, [r3, #4]
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	1ad2      	subs	r2, r2, r3
 800cf3c:	69bb      	ldr	r3, [r7, #24]
 800cf3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cf40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf42:	687a      	ldr	r2, [r7, #4]
 800cf44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cf46:	69b8      	ldr	r0, [r7, #24]
 800cf48:	f000 f8f8 	bl	800d13c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cf4c:	4b1a      	ldr	r3, [pc, #104]	; (800cfb8 <pvPortMalloc+0x17c>)
 800cf4e:	681a      	ldr	r2, [r3, #0]
 800cf50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf52:	685b      	ldr	r3, [r3, #4]
 800cf54:	1ad3      	subs	r3, r2, r3
 800cf56:	4a18      	ldr	r2, [pc, #96]	; (800cfb8 <pvPortMalloc+0x17c>)
 800cf58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cf5a:	4b17      	ldr	r3, [pc, #92]	; (800cfb8 <pvPortMalloc+0x17c>)
 800cf5c:	681a      	ldr	r2, [r3, #0]
 800cf5e:	4b18      	ldr	r3, [pc, #96]	; (800cfc0 <pvPortMalloc+0x184>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d203      	bcs.n	800cf6e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cf66:	4b14      	ldr	r3, [pc, #80]	; (800cfb8 <pvPortMalloc+0x17c>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	4a15      	ldr	r2, [pc, #84]	; (800cfc0 <pvPortMalloc+0x184>)
 800cf6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cf6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf70:	685a      	ldr	r2, [r3, #4]
 800cf72:	4b10      	ldr	r3, [pc, #64]	; (800cfb4 <pvPortMalloc+0x178>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	431a      	orrs	r2, r3
 800cf78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cf7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf7e:	2200      	movs	r2, #0
 800cf80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cf82:	f7fe fbbd 	bl	800b700 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf86:	69fb      	ldr	r3, [r7, #28]
 800cf88:	f003 0307 	and.w	r3, r3, #7
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d00a      	beq.n	800cfa6 <pvPortMalloc+0x16a>
	__asm volatile
 800cf90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf94:	f383 8811 	msr	BASEPRI, r3
 800cf98:	f3bf 8f6f 	isb	sy
 800cf9c:	f3bf 8f4f 	dsb	sy
 800cfa0:	60fb      	str	r3, [r7, #12]
}
 800cfa2:	bf00      	nop
 800cfa4:	e7fe      	b.n	800cfa4 <pvPortMalloc+0x168>
	return pvReturn;
 800cfa6:	69fb      	ldr	r3, [r7, #28]
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3728      	adds	r7, #40	; 0x28
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}
 800cfb0:	20002f08 	.word	0x20002f08
 800cfb4:	20002f14 	.word	0x20002f14
 800cfb8:	20002f0c 	.word	0x20002f0c
 800cfbc:	20002f00 	.word	0x20002f00
 800cfc0:	20002f10 	.word	0x20002f10

0800cfc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b086      	sub	sp, #24
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d048      	beq.n	800d068 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cfd6:	2308      	movs	r3, #8
 800cfd8:	425b      	negs	r3, r3
 800cfda:	697a      	ldr	r2, [r7, #20]
 800cfdc:	4413      	add	r3, r2
 800cfde:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cfe4:	693b      	ldr	r3, [r7, #16]
 800cfe6:	685a      	ldr	r2, [r3, #4]
 800cfe8:	4b21      	ldr	r3, [pc, #132]	; (800d070 <vPortFree+0xac>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	4013      	ands	r3, r2
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d10a      	bne.n	800d008 <vPortFree+0x44>
	__asm volatile
 800cff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff6:	f383 8811 	msr	BASEPRI, r3
 800cffa:	f3bf 8f6f 	isb	sy
 800cffe:	f3bf 8f4f 	dsb	sy
 800d002:	60fb      	str	r3, [r7, #12]
}
 800d004:	bf00      	nop
 800d006:	e7fe      	b.n	800d006 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d00a      	beq.n	800d026 <vPortFree+0x62>
	__asm volatile
 800d010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d014:	f383 8811 	msr	BASEPRI, r3
 800d018:	f3bf 8f6f 	isb	sy
 800d01c:	f3bf 8f4f 	dsb	sy
 800d020:	60bb      	str	r3, [r7, #8]
}
 800d022:	bf00      	nop
 800d024:	e7fe      	b.n	800d024 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d026:	693b      	ldr	r3, [r7, #16]
 800d028:	685a      	ldr	r2, [r3, #4]
 800d02a:	4b11      	ldr	r3, [pc, #68]	; (800d070 <vPortFree+0xac>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	4013      	ands	r3, r2
 800d030:	2b00      	cmp	r3, #0
 800d032:	d019      	beq.n	800d068 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d115      	bne.n	800d068 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	685a      	ldr	r2, [r3, #4]
 800d040:	4b0b      	ldr	r3, [pc, #44]	; (800d070 <vPortFree+0xac>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	43db      	mvns	r3, r3
 800d046:	401a      	ands	r2, r3
 800d048:	693b      	ldr	r3, [r7, #16]
 800d04a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d04c:	f7fe fb4a 	bl	800b6e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	685a      	ldr	r2, [r3, #4]
 800d054:	4b07      	ldr	r3, [pc, #28]	; (800d074 <vPortFree+0xb0>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	4413      	add	r3, r2
 800d05a:	4a06      	ldr	r2, [pc, #24]	; (800d074 <vPortFree+0xb0>)
 800d05c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d05e:	6938      	ldr	r0, [r7, #16]
 800d060:	f000 f86c 	bl	800d13c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d064:	f7fe fb4c 	bl	800b700 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d068:	bf00      	nop
 800d06a:	3718      	adds	r7, #24
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}
 800d070:	20002f14 	.word	0x20002f14
 800d074:	20002f0c 	.word	0x20002f0c

0800d078 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d078:	b480      	push	{r7}
 800d07a:	b085      	sub	sp, #20
 800d07c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d07e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d082:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d084:	4b27      	ldr	r3, [pc, #156]	; (800d124 <prvHeapInit+0xac>)
 800d086:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	f003 0307 	and.w	r3, r3, #7
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d00c      	beq.n	800d0ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	3307      	adds	r3, #7
 800d096:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	f023 0307 	bic.w	r3, r3, #7
 800d09e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d0a0:	68ba      	ldr	r2, [r7, #8]
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	1ad3      	subs	r3, r2, r3
 800d0a6:	4a1f      	ldr	r2, [pc, #124]	; (800d124 <prvHeapInit+0xac>)
 800d0a8:	4413      	add	r3, r2
 800d0aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d0b0:	4a1d      	ldr	r2, [pc, #116]	; (800d128 <prvHeapInit+0xb0>)
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d0b6:	4b1c      	ldr	r3, [pc, #112]	; (800d128 <prvHeapInit+0xb0>)
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	68ba      	ldr	r2, [r7, #8]
 800d0c0:	4413      	add	r3, r2
 800d0c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d0c4:	2208      	movs	r2, #8
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	1a9b      	subs	r3, r3, r2
 800d0ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	f023 0307 	bic.w	r3, r3, #7
 800d0d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	4a15      	ldr	r2, [pc, #84]	; (800d12c <prvHeapInit+0xb4>)
 800d0d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d0da:	4b14      	ldr	r3, [pc, #80]	; (800d12c <prvHeapInit+0xb4>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d0e2:	4b12      	ldr	r3, [pc, #72]	; (800d12c <prvHeapInit+0xb4>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	68fa      	ldr	r2, [r7, #12]
 800d0f2:	1ad2      	subs	r2, r2, r3
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d0f8:	4b0c      	ldr	r3, [pc, #48]	; (800d12c <prvHeapInit+0xb4>)
 800d0fa:	681a      	ldr	r2, [r3, #0]
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	685b      	ldr	r3, [r3, #4]
 800d104:	4a0a      	ldr	r2, [pc, #40]	; (800d130 <prvHeapInit+0xb8>)
 800d106:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	685b      	ldr	r3, [r3, #4]
 800d10c:	4a09      	ldr	r2, [pc, #36]	; (800d134 <prvHeapInit+0xbc>)
 800d10e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d110:	4b09      	ldr	r3, [pc, #36]	; (800d138 <prvHeapInit+0xc0>)
 800d112:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d116:	601a      	str	r2, [r3, #0]
}
 800d118:	bf00      	nop
 800d11a:	3714      	adds	r7, #20
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bc80      	pop	{r7}
 800d120:	4770      	bx	lr
 800d122:	bf00      	nop
 800d124:	20000f00 	.word	0x20000f00
 800d128:	20002f00 	.word	0x20002f00
 800d12c:	20002f08 	.word	0x20002f08
 800d130:	20002f10 	.word	0x20002f10
 800d134:	20002f0c 	.word	0x20002f0c
 800d138:	20002f14 	.word	0x20002f14

0800d13c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d13c:	b480      	push	{r7}
 800d13e:	b085      	sub	sp, #20
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d144:	4b27      	ldr	r3, [pc, #156]	; (800d1e4 <prvInsertBlockIntoFreeList+0xa8>)
 800d146:	60fb      	str	r3, [r7, #12]
 800d148:	e002      	b.n	800d150 <prvInsertBlockIntoFreeList+0x14>
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	60fb      	str	r3, [r7, #12]
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	687a      	ldr	r2, [r7, #4]
 800d156:	429a      	cmp	r2, r3
 800d158:	d8f7      	bhi.n	800d14a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	685b      	ldr	r3, [r3, #4]
 800d162:	68ba      	ldr	r2, [r7, #8]
 800d164:	4413      	add	r3, r2
 800d166:	687a      	ldr	r2, [r7, #4]
 800d168:	429a      	cmp	r2, r3
 800d16a:	d108      	bne.n	800d17e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	685a      	ldr	r2, [r3, #4]
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	685b      	ldr	r3, [r3, #4]
 800d174:	441a      	add	r2, r3
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	685b      	ldr	r3, [r3, #4]
 800d186:	68ba      	ldr	r2, [r7, #8]
 800d188:	441a      	add	r2, r3
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	429a      	cmp	r2, r3
 800d190:	d118      	bne.n	800d1c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	681a      	ldr	r2, [r3, #0]
 800d196:	4b14      	ldr	r3, [pc, #80]	; (800d1e8 <prvInsertBlockIntoFreeList+0xac>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d00d      	beq.n	800d1ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	685a      	ldr	r2, [r3, #4]
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	685b      	ldr	r3, [r3, #4]
 800d1a8:	441a      	add	r2, r3
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	681a      	ldr	r2, [r3, #0]
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	601a      	str	r2, [r3, #0]
 800d1b8:	e008      	b.n	800d1cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d1ba:	4b0b      	ldr	r3, [pc, #44]	; (800d1e8 <prvInsertBlockIntoFreeList+0xac>)
 800d1bc:	681a      	ldr	r2, [r3, #0]
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	601a      	str	r2, [r3, #0]
 800d1c2:	e003      	b.n	800d1cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	681a      	ldr	r2, [r3, #0]
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d1cc:	68fa      	ldr	r2, [r7, #12]
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d002      	beq.n	800d1da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	687a      	ldr	r2, [r7, #4]
 800d1d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d1da:	bf00      	nop
 800d1dc:	3714      	adds	r7, #20
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bc80      	pop	{r7}
 800d1e2:	4770      	bx	lr
 800d1e4:	20002f00 	.word	0x20002f00
 800d1e8:	20002f08 	.word	0x20002f08

0800d1ec <__errno>:
 800d1ec:	4b01      	ldr	r3, [pc, #4]	; (800d1f4 <__errno+0x8>)
 800d1ee:	6818      	ldr	r0, [r3, #0]
 800d1f0:	4770      	bx	lr
 800d1f2:	bf00      	nop
 800d1f4:	20000058 	.word	0x20000058

0800d1f8 <__libc_init_array>:
 800d1f8:	b570      	push	{r4, r5, r6, lr}
 800d1fa:	2600      	movs	r6, #0
 800d1fc:	4d0c      	ldr	r5, [pc, #48]	; (800d230 <__libc_init_array+0x38>)
 800d1fe:	4c0d      	ldr	r4, [pc, #52]	; (800d234 <__libc_init_array+0x3c>)
 800d200:	1b64      	subs	r4, r4, r5
 800d202:	10a4      	asrs	r4, r4, #2
 800d204:	42a6      	cmp	r6, r4
 800d206:	d109      	bne.n	800d21c <__libc_init_array+0x24>
 800d208:	f001 ff7c 	bl	800f104 <_init>
 800d20c:	2600      	movs	r6, #0
 800d20e:	4d0a      	ldr	r5, [pc, #40]	; (800d238 <__libc_init_array+0x40>)
 800d210:	4c0a      	ldr	r4, [pc, #40]	; (800d23c <__libc_init_array+0x44>)
 800d212:	1b64      	subs	r4, r4, r5
 800d214:	10a4      	asrs	r4, r4, #2
 800d216:	42a6      	cmp	r6, r4
 800d218:	d105      	bne.n	800d226 <__libc_init_array+0x2e>
 800d21a:	bd70      	pop	{r4, r5, r6, pc}
 800d21c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d220:	4798      	blx	r3
 800d222:	3601      	adds	r6, #1
 800d224:	e7ee      	b.n	800d204 <__libc_init_array+0xc>
 800d226:	f855 3b04 	ldr.w	r3, [r5], #4
 800d22a:	4798      	blx	r3
 800d22c:	3601      	adds	r6, #1
 800d22e:	e7f2      	b.n	800d216 <__libc_init_array+0x1e>
 800d230:	0800f650 	.word	0x0800f650
 800d234:	0800f650 	.word	0x0800f650
 800d238:	0800f650 	.word	0x0800f650
 800d23c:	0800f654 	.word	0x0800f654

0800d240 <memcpy>:
 800d240:	440a      	add	r2, r1
 800d242:	4291      	cmp	r1, r2
 800d244:	f100 33ff 	add.w	r3, r0, #4294967295
 800d248:	d100      	bne.n	800d24c <memcpy+0xc>
 800d24a:	4770      	bx	lr
 800d24c:	b510      	push	{r4, lr}
 800d24e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d252:	4291      	cmp	r1, r2
 800d254:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d258:	d1f9      	bne.n	800d24e <memcpy+0xe>
 800d25a:	bd10      	pop	{r4, pc}

0800d25c <memset>:
 800d25c:	4603      	mov	r3, r0
 800d25e:	4402      	add	r2, r0
 800d260:	4293      	cmp	r3, r2
 800d262:	d100      	bne.n	800d266 <memset+0xa>
 800d264:	4770      	bx	lr
 800d266:	f803 1b01 	strb.w	r1, [r3], #1
 800d26a:	e7f9      	b.n	800d260 <memset+0x4>

0800d26c <iprintf>:
 800d26c:	b40f      	push	{r0, r1, r2, r3}
 800d26e:	4b0a      	ldr	r3, [pc, #40]	; (800d298 <iprintf+0x2c>)
 800d270:	b513      	push	{r0, r1, r4, lr}
 800d272:	681c      	ldr	r4, [r3, #0]
 800d274:	b124      	cbz	r4, 800d280 <iprintf+0x14>
 800d276:	69a3      	ldr	r3, [r4, #24]
 800d278:	b913      	cbnz	r3, 800d280 <iprintf+0x14>
 800d27a:	4620      	mov	r0, r4
 800d27c:	f000 f87a 	bl	800d374 <__sinit>
 800d280:	ab05      	add	r3, sp, #20
 800d282:	4620      	mov	r0, r4
 800d284:	9a04      	ldr	r2, [sp, #16]
 800d286:	68a1      	ldr	r1, [r4, #8]
 800d288:	9301      	str	r3, [sp, #4]
 800d28a:	f000 f995 	bl	800d5b8 <_vfiprintf_r>
 800d28e:	b002      	add	sp, #8
 800d290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d294:	b004      	add	sp, #16
 800d296:	4770      	bx	lr
 800d298:	20000058 	.word	0x20000058

0800d29c <putchar>:
 800d29c:	b538      	push	{r3, r4, r5, lr}
 800d29e:	4b08      	ldr	r3, [pc, #32]	; (800d2c0 <putchar+0x24>)
 800d2a0:	4605      	mov	r5, r0
 800d2a2:	681c      	ldr	r4, [r3, #0]
 800d2a4:	b124      	cbz	r4, 800d2b0 <putchar+0x14>
 800d2a6:	69a3      	ldr	r3, [r4, #24]
 800d2a8:	b913      	cbnz	r3, 800d2b0 <putchar+0x14>
 800d2aa:	4620      	mov	r0, r4
 800d2ac:	f000 f862 	bl	800d374 <__sinit>
 800d2b0:	4629      	mov	r1, r5
 800d2b2:	4620      	mov	r0, r4
 800d2b4:	68a2      	ldr	r2, [r4, #8]
 800d2b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2ba:	f000 bc43 	b.w	800db44 <_putc_r>
 800d2be:	bf00      	nop
 800d2c0:	20000058 	.word	0x20000058

0800d2c4 <std>:
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	b510      	push	{r4, lr}
 800d2c8:	4604      	mov	r4, r0
 800d2ca:	e9c0 3300 	strd	r3, r3, [r0]
 800d2ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d2d2:	6083      	str	r3, [r0, #8]
 800d2d4:	8181      	strh	r1, [r0, #12]
 800d2d6:	6643      	str	r3, [r0, #100]	; 0x64
 800d2d8:	81c2      	strh	r2, [r0, #14]
 800d2da:	6183      	str	r3, [r0, #24]
 800d2dc:	4619      	mov	r1, r3
 800d2de:	2208      	movs	r2, #8
 800d2e0:	305c      	adds	r0, #92	; 0x5c
 800d2e2:	f7ff ffbb 	bl	800d25c <memset>
 800d2e6:	4b05      	ldr	r3, [pc, #20]	; (800d2fc <std+0x38>)
 800d2e8:	6224      	str	r4, [r4, #32]
 800d2ea:	6263      	str	r3, [r4, #36]	; 0x24
 800d2ec:	4b04      	ldr	r3, [pc, #16]	; (800d300 <std+0x3c>)
 800d2ee:	62a3      	str	r3, [r4, #40]	; 0x28
 800d2f0:	4b04      	ldr	r3, [pc, #16]	; (800d304 <std+0x40>)
 800d2f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d2f4:	4b04      	ldr	r3, [pc, #16]	; (800d308 <std+0x44>)
 800d2f6:	6323      	str	r3, [r4, #48]	; 0x30
 800d2f8:	bd10      	pop	{r4, pc}
 800d2fa:	bf00      	nop
 800d2fc:	0800dbf5 	.word	0x0800dbf5
 800d300:	0800dc17 	.word	0x0800dc17
 800d304:	0800dc4f 	.word	0x0800dc4f
 800d308:	0800dc73 	.word	0x0800dc73

0800d30c <_cleanup_r>:
 800d30c:	4901      	ldr	r1, [pc, #4]	; (800d314 <_cleanup_r+0x8>)
 800d30e:	f000 b8af 	b.w	800d470 <_fwalk_reent>
 800d312:	bf00      	nop
 800d314:	0800df4d 	.word	0x0800df4d

0800d318 <__sfmoreglue>:
 800d318:	b570      	push	{r4, r5, r6, lr}
 800d31a:	2568      	movs	r5, #104	; 0x68
 800d31c:	1e4a      	subs	r2, r1, #1
 800d31e:	4355      	muls	r5, r2
 800d320:	460e      	mov	r6, r1
 800d322:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d326:	f000 f8c5 	bl	800d4b4 <_malloc_r>
 800d32a:	4604      	mov	r4, r0
 800d32c:	b140      	cbz	r0, 800d340 <__sfmoreglue+0x28>
 800d32e:	2100      	movs	r1, #0
 800d330:	e9c0 1600 	strd	r1, r6, [r0]
 800d334:	300c      	adds	r0, #12
 800d336:	60a0      	str	r0, [r4, #8]
 800d338:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d33c:	f7ff ff8e 	bl	800d25c <memset>
 800d340:	4620      	mov	r0, r4
 800d342:	bd70      	pop	{r4, r5, r6, pc}

0800d344 <__sfp_lock_acquire>:
 800d344:	4801      	ldr	r0, [pc, #4]	; (800d34c <__sfp_lock_acquire+0x8>)
 800d346:	f000 b8b3 	b.w	800d4b0 <__retarget_lock_acquire_recursive>
 800d34a:	bf00      	nop
 800d34c:	2000308c 	.word	0x2000308c

0800d350 <__sfp_lock_release>:
 800d350:	4801      	ldr	r0, [pc, #4]	; (800d358 <__sfp_lock_release+0x8>)
 800d352:	f000 b8ae 	b.w	800d4b2 <__retarget_lock_release_recursive>
 800d356:	bf00      	nop
 800d358:	2000308c 	.word	0x2000308c

0800d35c <__sinit_lock_acquire>:
 800d35c:	4801      	ldr	r0, [pc, #4]	; (800d364 <__sinit_lock_acquire+0x8>)
 800d35e:	f000 b8a7 	b.w	800d4b0 <__retarget_lock_acquire_recursive>
 800d362:	bf00      	nop
 800d364:	20003087 	.word	0x20003087

0800d368 <__sinit_lock_release>:
 800d368:	4801      	ldr	r0, [pc, #4]	; (800d370 <__sinit_lock_release+0x8>)
 800d36a:	f000 b8a2 	b.w	800d4b2 <__retarget_lock_release_recursive>
 800d36e:	bf00      	nop
 800d370:	20003087 	.word	0x20003087

0800d374 <__sinit>:
 800d374:	b510      	push	{r4, lr}
 800d376:	4604      	mov	r4, r0
 800d378:	f7ff fff0 	bl	800d35c <__sinit_lock_acquire>
 800d37c:	69a3      	ldr	r3, [r4, #24]
 800d37e:	b11b      	cbz	r3, 800d388 <__sinit+0x14>
 800d380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d384:	f7ff bff0 	b.w	800d368 <__sinit_lock_release>
 800d388:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d38c:	6523      	str	r3, [r4, #80]	; 0x50
 800d38e:	4b13      	ldr	r3, [pc, #76]	; (800d3dc <__sinit+0x68>)
 800d390:	4a13      	ldr	r2, [pc, #76]	; (800d3e0 <__sinit+0x6c>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	62a2      	str	r2, [r4, #40]	; 0x28
 800d396:	42a3      	cmp	r3, r4
 800d398:	bf08      	it	eq
 800d39a:	2301      	moveq	r3, #1
 800d39c:	4620      	mov	r0, r4
 800d39e:	bf08      	it	eq
 800d3a0:	61a3      	streq	r3, [r4, #24]
 800d3a2:	f000 f81f 	bl	800d3e4 <__sfp>
 800d3a6:	6060      	str	r0, [r4, #4]
 800d3a8:	4620      	mov	r0, r4
 800d3aa:	f000 f81b 	bl	800d3e4 <__sfp>
 800d3ae:	60a0      	str	r0, [r4, #8]
 800d3b0:	4620      	mov	r0, r4
 800d3b2:	f000 f817 	bl	800d3e4 <__sfp>
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	2104      	movs	r1, #4
 800d3ba:	60e0      	str	r0, [r4, #12]
 800d3bc:	6860      	ldr	r0, [r4, #4]
 800d3be:	f7ff ff81 	bl	800d2c4 <std>
 800d3c2:	2201      	movs	r2, #1
 800d3c4:	2109      	movs	r1, #9
 800d3c6:	68a0      	ldr	r0, [r4, #8]
 800d3c8:	f7ff ff7c 	bl	800d2c4 <std>
 800d3cc:	2202      	movs	r2, #2
 800d3ce:	2112      	movs	r1, #18
 800d3d0:	68e0      	ldr	r0, [r4, #12]
 800d3d2:	f7ff ff77 	bl	800d2c4 <std>
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	61a3      	str	r3, [r4, #24]
 800d3da:	e7d1      	b.n	800d380 <__sinit+0xc>
 800d3dc:	0800f570 	.word	0x0800f570
 800d3e0:	0800d30d 	.word	0x0800d30d

0800d3e4 <__sfp>:
 800d3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3e6:	4607      	mov	r7, r0
 800d3e8:	f7ff ffac 	bl	800d344 <__sfp_lock_acquire>
 800d3ec:	4b1e      	ldr	r3, [pc, #120]	; (800d468 <__sfp+0x84>)
 800d3ee:	681e      	ldr	r6, [r3, #0]
 800d3f0:	69b3      	ldr	r3, [r6, #24]
 800d3f2:	b913      	cbnz	r3, 800d3fa <__sfp+0x16>
 800d3f4:	4630      	mov	r0, r6
 800d3f6:	f7ff ffbd 	bl	800d374 <__sinit>
 800d3fa:	3648      	adds	r6, #72	; 0x48
 800d3fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d400:	3b01      	subs	r3, #1
 800d402:	d503      	bpl.n	800d40c <__sfp+0x28>
 800d404:	6833      	ldr	r3, [r6, #0]
 800d406:	b30b      	cbz	r3, 800d44c <__sfp+0x68>
 800d408:	6836      	ldr	r6, [r6, #0]
 800d40a:	e7f7      	b.n	800d3fc <__sfp+0x18>
 800d40c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d410:	b9d5      	cbnz	r5, 800d448 <__sfp+0x64>
 800d412:	4b16      	ldr	r3, [pc, #88]	; (800d46c <__sfp+0x88>)
 800d414:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d418:	60e3      	str	r3, [r4, #12]
 800d41a:	6665      	str	r5, [r4, #100]	; 0x64
 800d41c:	f000 f847 	bl	800d4ae <__retarget_lock_init_recursive>
 800d420:	f7ff ff96 	bl	800d350 <__sfp_lock_release>
 800d424:	2208      	movs	r2, #8
 800d426:	4629      	mov	r1, r5
 800d428:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d42c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d430:	6025      	str	r5, [r4, #0]
 800d432:	61a5      	str	r5, [r4, #24]
 800d434:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d438:	f7ff ff10 	bl	800d25c <memset>
 800d43c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d440:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d444:	4620      	mov	r0, r4
 800d446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d448:	3468      	adds	r4, #104	; 0x68
 800d44a:	e7d9      	b.n	800d400 <__sfp+0x1c>
 800d44c:	2104      	movs	r1, #4
 800d44e:	4638      	mov	r0, r7
 800d450:	f7ff ff62 	bl	800d318 <__sfmoreglue>
 800d454:	4604      	mov	r4, r0
 800d456:	6030      	str	r0, [r6, #0]
 800d458:	2800      	cmp	r0, #0
 800d45a:	d1d5      	bne.n	800d408 <__sfp+0x24>
 800d45c:	f7ff ff78 	bl	800d350 <__sfp_lock_release>
 800d460:	230c      	movs	r3, #12
 800d462:	603b      	str	r3, [r7, #0]
 800d464:	e7ee      	b.n	800d444 <__sfp+0x60>
 800d466:	bf00      	nop
 800d468:	0800f570 	.word	0x0800f570
 800d46c:	ffff0001 	.word	0xffff0001

0800d470 <_fwalk_reent>:
 800d470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d474:	4606      	mov	r6, r0
 800d476:	4688      	mov	r8, r1
 800d478:	2700      	movs	r7, #0
 800d47a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d47e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d482:	f1b9 0901 	subs.w	r9, r9, #1
 800d486:	d505      	bpl.n	800d494 <_fwalk_reent+0x24>
 800d488:	6824      	ldr	r4, [r4, #0]
 800d48a:	2c00      	cmp	r4, #0
 800d48c:	d1f7      	bne.n	800d47e <_fwalk_reent+0xe>
 800d48e:	4638      	mov	r0, r7
 800d490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d494:	89ab      	ldrh	r3, [r5, #12]
 800d496:	2b01      	cmp	r3, #1
 800d498:	d907      	bls.n	800d4aa <_fwalk_reent+0x3a>
 800d49a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d49e:	3301      	adds	r3, #1
 800d4a0:	d003      	beq.n	800d4aa <_fwalk_reent+0x3a>
 800d4a2:	4629      	mov	r1, r5
 800d4a4:	4630      	mov	r0, r6
 800d4a6:	47c0      	blx	r8
 800d4a8:	4307      	orrs	r7, r0
 800d4aa:	3568      	adds	r5, #104	; 0x68
 800d4ac:	e7e9      	b.n	800d482 <_fwalk_reent+0x12>

0800d4ae <__retarget_lock_init_recursive>:
 800d4ae:	4770      	bx	lr

0800d4b0 <__retarget_lock_acquire_recursive>:
 800d4b0:	4770      	bx	lr

0800d4b2 <__retarget_lock_release_recursive>:
 800d4b2:	4770      	bx	lr

0800d4b4 <_malloc_r>:
 800d4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4b6:	1ccd      	adds	r5, r1, #3
 800d4b8:	f025 0503 	bic.w	r5, r5, #3
 800d4bc:	3508      	adds	r5, #8
 800d4be:	2d0c      	cmp	r5, #12
 800d4c0:	bf38      	it	cc
 800d4c2:	250c      	movcc	r5, #12
 800d4c4:	2d00      	cmp	r5, #0
 800d4c6:	4606      	mov	r6, r0
 800d4c8:	db01      	blt.n	800d4ce <_malloc_r+0x1a>
 800d4ca:	42a9      	cmp	r1, r5
 800d4cc:	d903      	bls.n	800d4d6 <_malloc_r+0x22>
 800d4ce:	230c      	movs	r3, #12
 800d4d0:	6033      	str	r3, [r6, #0]
 800d4d2:	2000      	movs	r0, #0
 800d4d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4d6:	f000 fdf9 	bl	800e0cc <__malloc_lock>
 800d4da:	4921      	ldr	r1, [pc, #132]	; (800d560 <_malloc_r+0xac>)
 800d4dc:	680a      	ldr	r2, [r1, #0]
 800d4de:	4614      	mov	r4, r2
 800d4e0:	b99c      	cbnz	r4, 800d50a <_malloc_r+0x56>
 800d4e2:	4f20      	ldr	r7, [pc, #128]	; (800d564 <_malloc_r+0xb0>)
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	b923      	cbnz	r3, 800d4f2 <_malloc_r+0x3e>
 800d4e8:	4621      	mov	r1, r4
 800d4ea:	4630      	mov	r0, r6
 800d4ec:	f000 fb72 	bl	800dbd4 <_sbrk_r>
 800d4f0:	6038      	str	r0, [r7, #0]
 800d4f2:	4629      	mov	r1, r5
 800d4f4:	4630      	mov	r0, r6
 800d4f6:	f000 fb6d 	bl	800dbd4 <_sbrk_r>
 800d4fa:	1c43      	adds	r3, r0, #1
 800d4fc:	d123      	bne.n	800d546 <_malloc_r+0x92>
 800d4fe:	230c      	movs	r3, #12
 800d500:	4630      	mov	r0, r6
 800d502:	6033      	str	r3, [r6, #0]
 800d504:	f000 fde8 	bl	800e0d8 <__malloc_unlock>
 800d508:	e7e3      	b.n	800d4d2 <_malloc_r+0x1e>
 800d50a:	6823      	ldr	r3, [r4, #0]
 800d50c:	1b5b      	subs	r3, r3, r5
 800d50e:	d417      	bmi.n	800d540 <_malloc_r+0x8c>
 800d510:	2b0b      	cmp	r3, #11
 800d512:	d903      	bls.n	800d51c <_malloc_r+0x68>
 800d514:	6023      	str	r3, [r4, #0]
 800d516:	441c      	add	r4, r3
 800d518:	6025      	str	r5, [r4, #0]
 800d51a:	e004      	b.n	800d526 <_malloc_r+0x72>
 800d51c:	6863      	ldr	r3, [r4, #4]
 800d51e:	42a2      	cmp	r2, r4
 800d520:	bf0c      	ite	eq
 800d522:	600b      	streq	r3, [r1, #0]
 800d524:	6053      	strne	r3, [r2, #4]
 800d526:	4630      	mov	r0, r6
 800d528:	f000 fdd6 	bl	800e0d8 <__malloc_unlock>
 800d52c:	f104 000b 	add.w	r0, r4, #11
 800d530:	1d23      	adds	r3, r4, #4
 800d532:	f020 0007 	bic.w	r0, r0, #7
 800d536:	1ac2      	subs	r2, r0, r3
 800d538:	d0cc      	beq.n	800d4d4 <_malloc_r+0x20>
 800d53a:	1a1b      	subs	r3, r3, r0
 800d53c:	50a3      	str	r3, [r4, r2]
 800d53e:	e7c9      	b.n	800d4d4 <_malloc_r+0x20>
 800d540:	4622      	mov	r2, r4
 800d542:	6864      	ldr	r4, [r4, #4]
 800d544:	e7cc      	b.n	800d4e0 <_malloc_r+0x2c>
 800d546:	1cc4      	adds	r4, r0, #3
 800d548:	f024 0403 	bic.w	r4, r4, #3
 800d54c:	42a0      	cmp	r0, r4
 800d54e:	d0e3      	beq.n	800d518 <_malloc_r+0x64>
 800d550:	1a21      	subs	r1, r4, r0
 800d552:	4630      	mov	r0, r6
 800d554:	f000 fb3e 	bl	800dbd4 <_sbrk_r>
 800d558:	3001      	adds	r0, #1
 800d55a:	d1dd      	bne.n	800d518 <_malloc_r+0x64>
 800d55c:	e7cf      	b.n	800d4fe <_malloc_r+0x4a>
 800d55e:	bf00      	nop
 800d560:	20002f18 	.word	0x20002f18
 800d564:	20002f1c 	.word	0x20002f1c

0800d568 <__sfputc_r>:
 800d568:	6893      	ldr	r3, [r2, #8]
 800d56a:	b410      	push	{r4}
 800d56c:	3b01      	subs	r3, #1
 800d56e:	2b00      	cmp	r3, #0
 800d570:	6093      	str	r3, [r2, #8]
 800d572:	da07      	bge.n	800d584 <__sfputc_r+0x1c>
 800d574:	6994      	ldr	r4, [r2, #24]
 800d576:	42a3      	cmp	r3, r4
 800d578:	db01      	blt.n	800d57e <__sfputc_r+0x16>
 800d57a:	290a      	cmp	r1, #10
 800d57c:	d102      	bne.n	800d584 <__sfputc_r+0x1c>
 800d57e:	bc10      	pop	{r4}
 800d580:	f000 bb7c 	b.w	800dc7c <__swbuf_r>
 800d584:	6813      	ldr	r3, [r2, #0]
 800d586:	1c58      	adds	r0, r3, #1
 800d588:	6010      	str	r0, [r2, #0]
 800d58a:	7019      	strb	r1, [r3, #0]
 800d58c:	4608      	mov	r0, r1
 800d58e:	bc10      	pop	{r4}
 800d590:	4770      	bx	lr

0800d592 <__sfputs_r>:
 800d592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d594:	4606      	mov	r6, r0
 800d596:	460f      	mov	r7, r1
 800d598:	4614      	mov	r4, r2
 800d59a:	18d5      	adds	r5, r2, r3
 800d59c:	42ac      	cmp	r4, r5
 800d59e:	d101      	bne.n	800d5a4 <__sfputs_r+0x12>
 800d5a0:	2000      	movs	r0, #0
 800d5a2:	e007      	b.n	800d5b4 <__sfputs_r+0x22>
 800d5a4:	463a      	mov	r2, r7
 800d5a6:	4630      	mov	r0, r6
 800d5a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5ac:	f7ff ffdc 	bl	800d568 <__sfputc_r>
 800d5b0:	1c43      	adds	r3, r0, #1
 800d5b2:	d1f3      	bne.n	800d59c <__sfputs_r+0xa>
 800d5b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d5b8 <_vfiprintf_r>:
 800d5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5bc:	460d      	mov	r5, r1
 800d5be:	4614      	mov	r4, r2
 800d5c0:	4698      	mov	r8, r3
 800d5c2:	4606      	mov	r6, r0
 800d5c4:	b09d      	sub	sp, #116	; 0x74
 800d5c6:	b118      	cbz	r0, 800d5d0 <_vfiprintf_r+0x18>
 800d5c8:	6983      	ldr	r3, [r0, #24]
 800d5ca:	b90b      	cbnz	r3, 800d5d0 <_vfiprintf_r+0x18>
 800d5cc:	f7ff fed2 	bl	800d374 <__sinit>
 800d5d0:	4b89      	ldr	r3, [pc, #548]	; (800d7f8 <_vfiprintf_r+0x240>)
 800d5d2:	429d      	cmp	r5, r3
 800d5d4:	d11b      	bne.n	800d60e <_vfiprintf_r+0x56>
 800d5d6:	6875      	ldr	r5, [r6, #4]
 800d5d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5da:	07d9      	lsls	r1, r3, #31
 800d5dc:	d405      	bmi.n	800d5ea <_vfiprintf_r+0x32>
 800d5de:	89ab      	ldrh	r3, [r5, #12]
 800d5e0:	059a      	lsls	r2, r3, #22
 800d5e2:	d402      	bmi.n	800d5ea <_vfiprintf_r+0x32>
 800d5e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d5e6:	f7ff ff63 	bl	800d4b0 <__retarget_lock_acquire_recursive>
 800d5ea:	89ab      	ldrh	r3, [r5, #12]
 800d5ec:	071b      	lsls	r3, r3, #28
 800d5ee:	d501      	bpl.n	800d5f4 <_vfiprintf_r+0x3c>
 800d5f0:	692b      	ldr	r3, [r5, #16]
 800d5f2:	b9eb      	cbnz	r3, 800d630 <_vfiprintf_r+0x78>
 800d5f4:	4629      	mov	r1, r5
 800d5f6:	4630      	mov	r0, r6
 800d5f8:	f000 fba4 	bl	800dd44 <__swsetup_r>
 800d5fc:	b1c0      	cbz	r0, 800d630 <_vfiprintf_r+0x78>
 800d5fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d600:	07dc      	lsls	r4, r3, #31
 800d602:	d50e      	bpl.n	800d622 <_vfiprintf_r+0x6a>
 800d604:	f04f 30ff 	mov.w	r0, #4294967295
 800d608:	b01d      	add	sp, #116	; 0x74
 800d60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d60e:	4b7b      	ldr	r3, [pc, #492]	; (800d7fc <_vfiprintf_r+0x244>)
 800d610:	429d      	cmp	r5, r3
 800d612:	d101      	bne.n	800d618 <_vfiprintf_r+0x60>
 800d614:	68b5      	ldr	r5, [r6, #8]
 800d616:	e7df      	b.n	800d5d8 <_vfiprintf_r+0x20>
 800d618:	4b79      	ldr	r3, [pc, #484]	; (800d800 <_vfiprintf_r+0x248>)
 800d61a:	429d      	cmp	r5, r3
 800d61c:	bf08      	it	eq
 800d61e:	68f5      	ldreq	r5, [r6, #12]
 800d620:	e7da      	b.n	800d5d8 <_vfiprintf_r+0x20>
 800d622:	89ab      	ldrh	r3, [r5, #12]
 800d624:	0598      	lsls	r0, r3, #22
 800d626:	d4ed      	bmi.n	800d604 <_vfiprintf_r+0x4c>
 800d628:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d62a:	f7ff ff42 	bl	800d4b2 <__retarget_lock_release_recursive>
 800d62e:	e7e9      	b.n	800d604 <_vfiprintf_r+0x4c>
 800d630:	2300      	movs	r3, #0
 800d632:	9309      	str	r3, [sp, #36]	; 0x24
 800d634:	2320      	movs	r3, #32
 800d636:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d63a:	2330      	movs	r3, #48	; 0x30
 800d63c:	f04f 0901 	mov.w	r9, #1
 800d640:	f8cd 800c 	str.w	r8, [sp, #12]
 800d644:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800d804 <_vfiprintf_r+0x24c>
 800d648:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d64c:	4623      	mov	r3, r4
 800d64e:	469a      	mov	sl, r3
 800d650:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d654:	b10a      	cbz	r2, 800d65a <_vfiprintf_r+0xa2>
 800d656:	2a25      	cmp	r2, #37	; 0x25
 800d658:	d1f9      	bne.n	800d64e <_vfiprintf_r+0x96>
 800d65a:	ebba 0b04 	subs.w	fp, sl, r4
 800d65e:	d00b      	beq.n	800d678 <_vfiprintf_r+0xc0>
 800d660:	465b      	mov	r3, fp
 800d662:	4622      	mov	r2, r4
 800d664:	4629      	mov	r1, r5
 800d666:	4630      	mov	r0, r6
 800d668:	f7ff ff93 	bl	800d592 <__sfputs_r>
 800d66c:	3001      	adds	r0, #1
 800d66e:	f000 80aa 	beq.w	800d7c6 <_vfiprintf_r+0x20e>
 800d672:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d674:	445a      	add	r2, fp
 800d676:	9209      	str	r2, [sp, #36]	; 0x24
 800d678:	f89a 3000 	ldrb.w	r3, [sl]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	f000 80a2 	beq.w	800d7c6 <_vfiprintf_r+0x20e>
 800d682:	2300      	movs	r3, #0
 800d684:	f04f 32ff 	mov.w	r2, #4294967295
 800d688:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d68c:	f10a 0a01 	add.w	sl, sl, #1
 800d690:	9304      	str	r3, [sp, #16]
 800d692:	9307      	str	r3, [sp, #28]
 800d694:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d698:	931a      	str	r3, [sp, #104]	; 0x68
 800d69a:	4654      	mov	r4, sl
 800d69c:	2205      	movs	r2, #5
 800d69e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6a2:	4858      	ldr	r0, [pc, #352]	; (800d804 <_vfiprintf_r+0x24c>)
 800d6a4:	f000 fd04 	bl	800e0b0 <memchr>
 800d6a8:	9a04      	ldr	r2, [sp, #16]
 800d6aa:	b9d8      	cbnz	r0, 800d6e4 <_vfiprintf_r+0x12c>
 800d6ac:	06d1      	lsls	r1, r2, #27
 800d6ae:	bf44      	itt	mi
 800d6b0:	2320      	movmi	r3, #32
 800d6b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6b6:	0713      	lsls	r3, r2, #28
 800d6b8:	bf44      	itt	mi
 800d6ba:	232b      	movmi	r3, #43	; 0x2b
 800d6bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6c0:	f89a 3000 	ldrb.w	r3, [sl]
 800d6c4:	2b2a      	cmp	r3, #42	; 0x2a
 800d6c6:	d015      	beq.n	800d6f4 <_vfiprintf_r+0x13c>
 800d6c8:	4654      	mov	r4, sl
 800d6ca:	2000      	movs	r0, #0
 800d6cc:	f04f 0c0a 	mov.w	ip, #10
 800d6d0:	9a07      	ldr	r2, [sp, #28]
 800d6d2:	4621      	mov	r1, r4
 800d6d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6d8:	3b30      	subs	r3, #48	; 0x30
 800d6da:	2b09      	cmp	r3, #9
 800d6dc:	d94e      	bls.n	800d77c <_vfiprintf_r+0x1c4>
 800d6de:	b1b0      	cbz	r0, 800d70e <_vfiprintf_r+0x156>
 800d6e0:	9207      	str	r2, [sp, #28]
 800d6e2:	e014      	b.n	800d70e <_vfiprintf_r+0x156>
 800d6e4:	eba0 0308 	sub.w	r3, r0, r8
 800d6e8:	fa09 f303 	lsl.w	r3, r9, r3
 800d6ec:	4313      	orrs	r3, r2
 800d6ee:	46a2      	mov	sl, r4
 800d6f0:	9304      	str	r3, [sp, #16]
 800d6f2:	e7d2      	b.n	800d69a <_vfiprintf_r+0xe2>
 800d6f4:	9b03      	ldr	r3, [sp, #12]
 800d6f6:	1d19      	adds	r1, r3, #4
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	9103      	str	r1, [sp, #12]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	bfbb      	ittet	lt
 800d700:	425b      	neglt	r3, r3
 800d702:	f042 0202 	orrlt.w	r2, r2, #2
 800d706:	9307      	strge	r3, [sp, #28]
 800d708:	9307      	strlt	r3, [sp, #28]
 800d70a:	bfb8      	it	lt
 800d70c:	9204      	strlt	r2, [sp, #16]
 800d70e:	7823      	ldrb	r3, [r4, #0]
 800d710:	2b2e      	cmp	r3, #46	; 0x2e
 800d712:	d10c      	bne.n	800d72e <_vfiprintf_r+0x176>
 800d714:	7863      	ldrb	r3, [r4, #1]
 800d716:	2b2a      	cmp	r3, #42	; 0x2a
 800d718:	d135      	bne.n	800d786 <_vfiprintf_r+0x1ce>
 800d71a:	9b03      	ldr	r3, [sp, #12]
 800d71c:	3402      	adds	r4, #2
 800d71e:	1d1a      	adds	r2, r3, #4
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	9203      	str	r2, [sp, #12]
 800d724:	2b00      	cmp	r3, #0
 800d726:	bfb8      	it	lt
 800d728:	f04f 33ff 	movlt.w	r3, #4294967295
 800d72c:	9305      	str	r3, [sp, #20]
 800d72e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d814 <_vfiprintf_r+0x25c>
 800d732:	2203      	movs	r2, #3
 800d734:	4650      	mov	r0, sl
 800d736:	7821      	ldrb	r1, [r4, #0]
 800d738:	f000 fcba 	bl	800e0b0 <memchr>
 800d73c:	b140      	cbz	r0, 800d750 <_vfiprintf_r+0x198>
 800d73e:	2340      	movs	r3, #64	; 0x40
 800d740:	eba0 000a 	sub.w	r0, r0, sl
 800d744:	fa03 f000 	lsl.w	r0, r3, r0
 800d748:	9b04      	ldr	r3, [sp, #16]
 800d74a:	3401      	adds	r4, #1
 800d74c:	4303      	orrs	r3, r0
 800d74e:	9304      	str	r3, [sp, #16]
 800d750:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d754:	2206      	movs	r2, #6
 800d756:	482c      	ldr	r0, [pc, #176]	; (800d808 <_vfiprintf_r+0x250>)
 800d758:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d75c:	f000 fca8 	bl	800e0b0 <memchr>
 800d760:	2800      	cmp	r0, #0
 800d762:	d03f      	beq.n	800d7e4 <_vfiprintf_r+0x22c>
 800d764:	4b29      	ldr	r3, [pc, #164]	; (800d80c <_vfiprintf_r+0x254>)
 800d766:	bb1b      	cbnz	r3, 800d7b0 <_vfiprintf_r+0x1f8>
 800d768:	9b03      	ldr	r3, [sp, #12]
 800d76a:	3307      	adds	r3, #7
 800d76c:	f023 0307 	bic.w	r3, r3, #7
 800d770:	3308      	adds	r3, #8
 800d772:	9303      	str	r3, [sp, #12]
 800d774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d776:	443b      	add	r3, r7
 800d778:	9309      	str	r3, [sp, #36]	; 0x24
 800d77a:	e767      	b.n	800d64c <_vfiprintf_r+0x94>
 800d77c:	460c      	mov	r4, r1
 800d77e:	2001      	movs	r0, #1
 800d780:	fb0c 3202 	mla	r2, ip, r2, r3
 800d784:	e7a5      	b.n	800d6d2 <_vfiprintf_r+0x11a>
 800d786:	2300      	movs	r3, #0
 800d788:	f04f 0c0a 	mov.w	ip, #10
 800d78c:	4619      	mov	r1, r3
 800d78e:	3401      	adds	r4, #1
 800d790:	9305      	str	r3, [sp, #20]
 800d792:	4620      	mov	r0, r4
 800d794:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d798:	3a30      	subs	r2, #48	; 0x30
 800d79a:	2a09      	cmp	r2, #9
 800d79c:	d903      	bls.n	800d7a6 <_vfiprintf_r+0x1ee>
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d0c5      	beq.n	800d72e <_vfiprintf_r+0x176>
 800d7a2:	9105      	str	r1, [sp, #20]
 800d7a4:	e7c3      	b.n	800d72e <_vfiprintf_r+0x176>
 800d7a6:	4604      	mov	r4, r0
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800d7ae:	e7f0      	b.n	800d792 <_vfiprintf_r+0x1da>
 800d7b0:	ab03      	add	r3, sp, #12
 800d7b2:	9300      	str	r3, [sp, #0]
 800d7b4:	462a      	mov	r2, r5
 800d7b6:	4630      	mov	r0, r6
 800d7b8:	4b15      	ldr	r3, [pc, #84]	; (800d810 <_vfiprintf_r+0x258>)
 800d7ba:	a904      	add	r1, sp, #16
 800d7bc:	f3af 8000 	nop.w
 800d7c0:	4607      	mov	r7, r0
 800d7c2:	1c78      	adds	r0, r7, #1
 800d7c4:	d1d6      	bne.n	800d774 <_vfiprintf_r+0x1bc>
 800d7c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7c8:	07d9      	lsls	r1, r3, #31
 800d7ca:	d405      	bmi.n	800d7d8 <_vfiprintf_r+0x220>
 800d7cc:	89ab      	ldrh	r3, [r5, #12]
 800d7ce:	059a      	lsls	r2, r3, #22
 800d7d0:	d402      	bmi.n	800d7d8 <_vfiprintf_r+0x220>
 800d7d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d7d4:	f7ff fe6d 	bl	800d4b2 <__retarget_lock_release_recursive>
 800d7d8:	89ab      	ldrh	r3, [r5, #12]
 800d7da:	065b      	lsls	r3, r3, #25
 800d7dc:	f53f af12 	bmi.w	800d604 <_vfiprintf_r+0x4c>
 800d7e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d7e2:	e711      	b.n	800d608 <_vfiprintf_r+0x50>
 800d7e4:	ab03      	add	r3, sp, #12
 800d7e6:	9300      	str	r3, [sp, #0]
 800d7e8:	462a      	mov	r2, r5
 800d7ea:	4630      	mov	r0, r6
 800d7ec:	4b08      	ldr	r3, [pc, #32]	; (800d810 <_vfiprintf_r+0x258>)
 800d7ee:	a904      	add	r1, sp, #16
 800d7f0:	f000 f882 	bl	800d8f8 <_printf_i>
 800d7f4:	e7e4      	b.n	800d7c0 <_vfiprintf_r+0x208>
 800d7f6:	bf00      	nop
 800d7f8:	0800f594 	.word	0x0800f594
 800d7fc:	0800f5b4 	.word	0x0800f5b4
 800d800:	0800f574 	.word	0x0800f574
 800d804:	0800f5d4 	.word	0x0800f5d4
 800d808:	0800f5de 	.word	0x0800f5de
 800d80c:	00000000 	.word	0x00000000
 800d810:	0800d593 	.word	0x0800d593
 800d814:	0800f5da 	.word	0x0800f5da

0800d818 <_printf_common>:
 800d818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d81c:	4616      	mov	r6, r2
 800d81e:	4699      	mov	r9, r3
 800d820:	688a      	ldr	r2, [r1, #8]
 800d822:	690b      	ldr	r3, [r1, #16]
 800d824:	4607      	mov	r7, r0
 800d826:	4293      	cmp	r3, r2
 800d828:	bfb8      	it	lt
 800d82a:	4613      	movlt	r3, r2
 800d82c:	6033      	str	r3, [r6, #0]
 800d82e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d832:	460c      	mov	r4, r1
 800d834:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d838:	b10a      	cbz	r2, 800d83e <_printf_common+0x26>
 800d83a:	3301      	adds	r3, #1
 800d83c:	6033      	str	r3, [r6, #0]
 800d83e:	6823      	ldr	r3, [r4, #0]
 800d840:	0699      	lsls	r1, r3, #26
 800d842:	bf42      	ittt	mi
 800d844:	6833      	ldrmi	r3, [r6, #0]
 800d846:	3302      	addmi	r3, #2
 800d848:	6033      	strmi	r3, [r6, #0]
 800d84a:	6825      	ldr	r5, [r4, #0]
 800d84c:	f015 0506 	ands.w	r5, r5, #6
 800d850:	d106      	bne.n	800d860 <_printf_common+0x48>
 800d852:	f104 0a19 	add.w	sl, r4, #25
 800d856:	68e3      	ldr	r3, [r4, #12]
 800d858:	6832      	ldr	r2, [r6, #0]
 800d85a:	1a9b      	subs	r3, r3, r2
 800d85c:	42ab      	cmp	r3, r5
 800d85e:	dc28      	bgt.n	800d8b2 <_printf_common+0x9a>
 800d860:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d864:	1e13      	subs	r3, r2, #0
 800d866:	6822      	ldr	r2, [r4, #0]
 800d868:	bf18      	it	ne
 800d86a:	2301      	movne	r3, #1
 800d86c:	0692      	lsls	r2, r2, #26
 800d86e:	d42d      	bmi.n	800d8cc <_printf_common+0xb4>
 800d870:	4649      	mov	r1, r9
 800d872:	4638      	mov	r0, r7
 800d874:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d878:	47c0      	blx	r8
 800d87a:	3001      	adds	r0, #1
 800d87c:	d020      	beq.n	800d8c0 <_printf_common+0xa8>
 800d87e:	6823      	ldr	r3, [r4, #0]
 800d880:	68e5      	ldr	r5, [r4, #12]
 800d882:	f003 0306 	and.w	r3, r3, #6
 800d886:	2b04      	cmp	r3, #4
 800d888:	bf18      	it	ne
 800d88a:	2500      	movne	r5, #0
 800d88c:	6832      	ldr	r2, [r6, #0]
 800d88e:	f04f 0600 	mov.w	r6, #0
 800d892:	68a3      	ldr	r3, [r4, #8]
 800d894:	bf08      	it	eq
 800d896:	1aad      	subeq	r5, r5, r2
 800d898:	6922      	ldr	r2, [r4, #16]
 800d89a:	bf08      	it	eq
 800d89c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d8a0:	4293      	cmp	r3, r2
 800d8a2:	bfc4      	itt	gt
 800d8a4:	1a9b      	subgt	r3, r3, r2
 800d8a6:	18ed      	addgt	r5, r5, r3
 800d8a8:	341a      	adds	r4, #26
 800d8aa:	42b5      	cmp	r5, r6
 800d8ac:	d11a      	bne.n	800d8e4 <_printf_common+0xcc>
 800d8ae:	2000      	movs	r0, #0
 800d8b0:	e008      	b.n	800d8c4 <_printf_common+0xac>
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	4652      	mov	r2, sl
 800d8b6:	4649      	mov	r1, r9
 800d8b8:	4638      	mov	r0, r7
 800d8ba:	47c0      	blx	r8
 800d8bc:	3001      	adds	r0, #1
 800d8be:	d103      	bne.n	800d8c8 <_printf_common+0xb0>
 800d8c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d8c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8c8:	3501      	adds	r5, #1
 800d8ca:	e7c4      	b.n	800d856 <_printf_common+0x3e>
 800d8cc:	2030      	movs	r0, #48	; 0x30
 800d8ce:	18e1      	adds	r1, r4, r3
 800d8d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d8d4:	1c5a      	adds	r2, r3, #1
 800d8d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d8da:	4422      	add	r2, r4
 800d8dc:	3302      	adds	r3, #2
 800d8de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d8e2:	e7c5      	b.n	800d870 <_printf_common+0x58>
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	4622      	mov	r2, r4
 800d8e8:	4649      	mov	r1, r9
 800d8ea:	4638      	mov	r0, r7
 800d8ec:	47c0      	blx	r8
 800d8ee:	3001      	adds	r0, #1
 800d8f0:	d0e6      	beq.n	800d8c0 <_printf_common+0xa8>
 800d8f2:	3601      	adds	r6, #1
 800d8f4:	e7d9      	b.n	800d8aa <_printf_common+0x92>
	...

0800d8f8 <_printf_i>:
 800d8f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d8fc:	460c      	mov	r4, r1
 800d8fe:	7e27      	ldrb	r7, [r4, #24]
 800d900:	4691      	mov	r9, r2
 800d902:	2f78      	cmp	r7, #120	; 0x78
 800d904:	4680      	mov	r8, r0
 800d906:	469a      	mov	sl, r3
 800d908:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d90a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d90e:	d807      	bhi.n	800d920 <_printf_i+0x28>
 800d910:	2f62      	cmp	r7, #98	; 0x62
 800d912:	d80a      	bhi.n	800d92a <_printf_i+0x32>
 800d914:	2f00      	cmp	r7, #0
 800d916:	f000 80d9 	beq.w	800dacc <_printf_i+0x1d4>
 800d91a:	2f58      	cmp	r7, #88	; 0x58
 800d91c:	f000 80a4 	beq.w	800da68 <_printf_i+0x170>
 800d920:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d924:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d928:	e03a      	b.n	800d9a0 <_printf_i+0xa8>
 800d92a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d92e:	2b15      	cmp	r3, #21
 800d930:	d8f6      	bhi.n	800d920 <_printf_i+0x28>
 800d932:	a001      	add	r0, pc, #4	; (adr r0, 800d938 <_printf_i+0x40>)
 800d934:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d938:	0800d991 	.word	0x0800d991
 800d93c:	0800d9a5 	.word	0x0800d9a5
 800d940:	0800d921 	.word	0x0800d921
 800d944:	0800d921 	.word	0x0800d921
 800d948:	0800d921 	.word	0x0800d921
 800d94c:	0800d921 	.word	0x0800d921
 800d950:	0800d9a5 	.word	0x0800d9a5
 800d954:	0800d921 	.word	0x0800d921
 800d958:	0800d921 	.word	0x0800d921
 800d95c:	0800d921 	.word	0x0800d921
 800d960:	0800d921 	.word	0x0800d921
 800d964:	0800dab3 	.word	0x0800dab3
 800d968:	0800d9d5 	.word	0x0800d9d5
 800d96c:	0800da95 	.word	0x0800da95
 800d970:	0800d921 	.word	0x0800d921
 800d974:	0800d921 	.word	0x0800d921
 800d978:	0800dad5 	.word	0x0800dad5
 800d97c:	0800d921 	.word	0x0800d921
 800d980:	0800d9d5 	.word	0x0800d9d5
 800d984:	0800d921 	.word	0x0800d921
 800d988:	0800d921 	.word	0x0800d921
 800d98c:	0800da9d 	.word	0x0800da9d
 800d990:	680b      	ldr	r3, [r1, #0]
 800d992:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d996:	1d1a      	adds	r2, r3, #4
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	600a      	str	r2, [r1, #0]
 800d99c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	e0a4      	b.n	800daee <_printf_i+0x1f6>
 800d9a4:	6825      	ldr	r5, [r4, #0]
 800d9a6:	6808      	ldr	r0, [r1, #0]
 800d9a8:	062e      	lsls	r6, r5, #24
 800d9aa:	f100 0304 	add.w	r3, r0, #4
 800d9ae:	d50a      	bpl.n	800d9c6 <_printf_i+0xce>
 800d9b0:	6805      	ldr	r5, [r0, #0]
 800d9b2:	600b      	str	r3, [r1, #0]
 800d9b4:	2d00      	cmp	r5, #0
 800d9b6:	da03      	bge.n	800d9c0 <_printf_i+0xc8>
 800d9b8:	232d      	movs	r3, #45	; 0x2d
 800d9ba:	426d      	negs	r5, r5
 800d9bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9c0:	230a      	movs	r3, #10
 800d9c2:	485e      	ldr	r0, [pc, #376]	; (800db3c <_printf_i+0x244>)
 800d9c4:	e019      	b.n	800d9fa <_printf_i+0x102>
 800d9c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d9ca:	6805      	ldr	r5, [r0, #0]
 800d9cc:	600b      	str	r3, [r1, #0]
 800d9ce:	bf18      	it	ne
 800d9d0:	b22d      	sxthne	r5, r5
 800d9d2:	e7ef      	b.n	800d9b4 <_printf_i+0xbc>
 800d9d4:	680b      	ldr	r3, [r1, #0]
 800d9d6:	6825      	ldr	r5, [r4, #0]
 800d9d8:	1d18      	adds	r0, r3, #4
 800d9da:	6008      	str	r0, [r1, #0]
 800d9dc:	0628      	lsls	r0, r5, #24
 800d9de:	d501      	bpl.n	800d9e4 <_printf_i+0xec>
 800d9e0:	681d      	ldr	r5, [r3, #0]
 800d9e2:	e002      	b.n	800d9ea <_printf_i+0xf2>
 800d9e4:	0669      	lsls	r1, r5, #25
 800d9e6:	d5fb      	bpl.n	800d9e0 <_printf_i+0xe8>
 800d9e8:	881d      	ldrh	r5, [r3, #0]
 800d9ea:	2f6f      	cmp	r7, #111	; 0x6f
 800d9ec:	bf0c      	ite	eq
 800d9ee:	2308      	moveq	r3, #8
 800d9f0:	230a      	movne	r3, #10
 800d9f2:	4852      	ldr	r0, [pc, #328]	; (800db3c <_printf_i+0x244>)
 800d9f4:	2100      	movs	r1, #0
 800d9f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d9fa:	6866      	ldr	r6, [r4, #4]
 800d9fc:	2e00      	cmp	r6, #0
 800d9fe:	bfa8      	it	ge
 800da00:	6821      	ldrge	r1, [r4, #0]
 800da02:	60a6      	str	r6, [r4, #8]
 800da04:	bfa4      	itt	ge
 800da06:	f021 0104 	bicge.w	r1, r1, #4
 800da0a:	6021      	strge	r1, [r4, #0]
 800da0c:	b90d      	cbnz	r5, 800da12 <_printf_i+0x11a>
 800da0e:	2e00      	cmp	r6, #0
 800da10:	d04d      	beq.n	800daae <_printf_i+0x1b6>
 800da12:	4616      	mov	r6, r2
 800da14:	fbb5 f1f3 	udiv	r1, r5, r3
 800da18:	fb03 5711 	mls	r7, r3, r1, r5
 800da1c:	5dc7      	ldrb	r7, [r0, r7]
 800da1e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800da22:	462f      	mov	r7, r5
 800da24:	42bb      	cmp	r3, r7
 800da26:	460d      	mov	r5, r1
 800da28:	d9f4      	bls.n	800da14 <_printf_i+0x11c>
 800da2a:	2b08      	cmp	r3, #8
 800da2c:	d10b      	bne.n	800da46 <_printf_i+0x14e>
 800da2e:	6823      	ldr	r3, [r4, #0]
 800da30:	07df      	lsls	r7, r3, #31
 800da32:	d508      	bpl.n	800da46 <_printf_i+0x14e>
 800da34:	6923      	ldr	r3, [r4, #16]
 800da36:	6861      	ldr	r1, [r4, #4]
 800da38:	4299      	cmp	r1, r3
 800da3a:	bfde      	ittt	le
 800da3c:	2330      	movle	r3, #48	; 0x30
 800da3e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800da42:	f106 36ff 	addle.w	r6, r6, #4294967295
 800da46:	1b92      	subs	r2, r2, r6
 800da48:	6122      	str	r2, [r4, #16]
 800da4a:	464b      	mov	r3, r9
 800da4c:	4621      	mov	r1, r4
 800da4e:	4640      	mov	r0, r8
 800da50:	f8cd a000 	str.w	sl, [sp]
 800da54:	aa03      	add	r2, sp, #12
 800da56:	f7ff fedf 	bl	800d818 <_printf_common>
 800da5a:	3001      	adds	r0, #1
 800da5c:	d14c      	bne.n	800daf8 <_printf_i+0x200>
 800da5e:	f04f 30ff 	mov.w	r0, #4294967295
 800da62:	b004      	add	sp, #16
 800da64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da68:	4834      	ldr	r0, [pc, #208]	; (800db3c <_printf_i+0x244>)
 800da6a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800da6e:	680e      	ldr	r6, [r1, #0]
 800da70:	6823      	ldr	r3, [r4, #0]
 800da72:	f856 5b04 	ldr.w	r5, [r6], #4
 800da76:	061f      	lsls	r7, r3, #24
 800da78:	600e      	str	r6, [r1, #0]
 800da7a:	d514      	bpl.n	800daa6 <_printf_i+0x1ae>
 800da7c:	07d9      	lsls	r1, r3, #31
 800da7e:	bf44      	itt	mi
 800da80:	f043 0320 	orrmi.w	r3, r3, #32
 800da84:	6023      	strmi	r3, [r4, #0]
 800da86:	b91d      	cbnz	r5, 800da90 <_printf_i+0x198>
 800da88:	6823      	ldr	r3, [r4, #0]
 800da8a:	f023 0320 	bic.w	r3, r3, #32
 800da8e:	6023      	str	r3, [r4, #0]
 800da90:	2310      	movs	r3, #16
 800da92:	e7af      	b.n	800d9f4 <_printf_i+0xfc>
 800da94:	6823      	ldr	r3, [r4, #0]
 800da96:	f043 0320 	orr.w	r3, r3, #32
 800da9a:	6023      	str	r3, [r4, #0]
 800da9c:	2378      	movs	r3, #120	; 0x78
 800da9e:	4828      	ldr	r0, [pc, #160]	; (800db40 <_printf_i+0x248>)
 800daa0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800daa4:	e7e3      	b.n	800da6e <_printf_i+0x176>
 800daa6:	065e      	lsls	r6, r3, #25
 800daa8:	bf48      	it	mi
 800daaa:	b2ad      	uxthmi	r5, r5
 800daac:	e7e6      	b.n	800da7c <_printf_i+0x184>
 800daae:	4616      	mov	r6, r2
 800dab0:	e7bb      	b.n	800da2a <_printf_i+0x132>
 800dab2:	680b      	ldr	r3, [r1, #0]
 800dab4:	6826      	ldr	r6, [r4, #0]
 800dab6:	1d1d      	adds	r5, r3, #4
 800dab8:	6960      	ldr	r0, [r4, #20]
 800daba:	600d      	str	r5, [r1, #0]
 800dabc:	0635      	lsls	r5, r6, #24
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	d501      	bpl.n	800dac6 <_printf_i+0x1ce>
 800dac2:	6018      	str	r0, [r3, #0]
 800dac4:	e002      	b.n	800dacc <_printf_i+0x1d4>
 800dac6:	0671      	lsls	r1, r6, #25
 800dac8:	d5fb      	bpl.n	800dac2 <_printf_i+0x1ca>
 800daca:	8018      	strh	r0, [r3, #0]
 800dacc:	2300      	movs	r3, #0
 800dace:	4616      	mov	r6, r2
 800dad0:	6123      	str	r3, [r4, #16]
 800dad2:	e7ba      	b.n	800da4a <_printf_i+0x152>
 800dad4:	680b      	ldr	r3, [r1, #0]
 800dad6:	1d1a      	adds	r2, r3, #4
 800dad8:	600a      	str	r2, [r1, #0]
 800dada:	681e      	ldr	r6, [r3, #0]
 800dadc:	2100      	movs	r1, #0
 800dade:	4630      	mov	r0, r6
 800dae0:	6862      	ldr	r2, [r4, #4]
 800dae2:	f000 fae5 	bl	800e0b0 <memchr>
 800dae6:	b108      	cbz	r0, 800daec <_printf_i+0x1f4>
 800dae8:	1b80      	subs	r0, r0, r6
 800daea:	6060      	str	r0, [r4, #4]
 800daec:	6863      	ldr	r3, [r4, #4]
 800daee:	6123      	str	r3, [r4, #16]
 800daf0:	2300      	movs	r3, #0
 800daf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800daf6:	e7a8      	b.n	800da4a <_printf_i+0x152>
 800daf8:	4632      	mov	r2, r6
 800dafa:	4649      	mov	r1, r9
 800dafc:	4640      	mov	r0, r8
 800dafe:	6923      	ldr	r3, [r4, #16]
 800db00:	47d0      	blx	sl
 800db02:	3001      	adds	r0, #1
 800db04:	d0ab      	beq.n	800da5e <_printf_i+0x166>
 800db06:	6823      	ldr	r3, [r4, #0]
 800db08:	079b      	lsls	r3, r3, #30
 800db0a:	d413      	bmi.n	800db34 <_printf_i+0x23c>
 800db0c:	68e0      	ldr	r0, [r4, #12]
 800db0e:	9b03      	ldr	r3, [sp, #12]
 800db10:	4298      	cmp	r0, r3
 800db12:	bfb8      	it	lt
 800db14:	4618      	movlt	r0, r3
 800db16:	e7a4      	b.n	800da62 <_printf_i+0x16a>
 800db18:	2301      	movs	r3, #1
 800db1a:	4632      	mov	r2, r6
 800db1c:	4649      	mov	r1, r9
 800db1e:	4640      	mov	r0, r8
 800db20:	47d0      	blx	sl
 800db22:	3001      	adds	r0, #1
 800db24:	d09b      	beq.n	800da5e <_printf_i+0x166>
 800db26:	3501      	adds	r5, #1
 800db28:	68e3      	ldr	r3, [r4, #12]
 800db2a:	9903      	ldr	r1, [sp, #12]
 800db2c:	1a5b      	subs	r3, r3, r1
 800db2e:	42ab      	cmp	r3, r5
 800db30:	dcf2      	bgt.n	800db18 <_printf_i+0x220>
 800db32:	e7eb      	b.n	800db0c <_printf_i+0x214>
 800db34:	2500      	movs	r5, #0
 800db36:	f104 0619 	add.w	r6, r4, #25
 800db3a:	e7f5      	b.n	800db28 <_printf_i+0x230>
 800db3c:	0800f5e5 	.word	0x0800f5e5
 800db40:	0800f5f6 	.word	0x0800f5f6

0800db44 <_putc_r>:
 800db44:	b570      	push	{r4, r5, r6, lr}
 800db46:	460d      	mov	r5, r1
 800db48:	4614      	mov	r4, r2
 800db4a:	4606      	mov	r6, r0
 800db4c:	b118      	cbz	r0, 800db56 <_putc_r+0x12>
 800db4e:	6983      	ldr	r3, [r0, #24]
 800db50:	b90b      	cbnz	r3, 800db56 <_putc_r+0x12>
 800db52:	f7ff fc0f 	bl	800d374 <__sinit>
 800db56:	4b1c      	ldr	r3, [pc, #112]	; (800dbc8 <_putc_r+0x84>)
 800db58:	429c      	cmp	r4, r3
 800db5a:	d124      	bne.n	800dba6 <_putc_r+0x62>
 800db5c:	6874      	ldr	r4, [r6, #4]
 800db5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db60:	07d8      	lsls	r0, r3, #31
 800db62:	d405      	bmi.n	800db70 <_putc_r+0x2c>
 800db64:	89a3      	ldrh	r3, [r4, #12]
 800db66:	0599      	lsls	r1, r3, #22
 800db68:	d402      	bmi.n	800db70 <_putc_r+0x2c>
 800db6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db6c:	f7ff fca0 	bl	800d4b0 <__retarget_lock_acquire_recursive>
 800db70:	68a3      	ldr	r3, [r4, #8]
 800db72:	3b01      	subs	r3, #1
 800db74:	2b00      	cmp	r3, #0
 800db76:	60a3      	str	r3, [r4, #8]
 800db78:	da05      	bge.n	800db86 <_putc_r+0x42>
 800db7a:	69a2      	ldr	r2, [r4, #24]
 800db7c:	4293      	cmp	r3, r2
 800db7e:	db1c      	blt.n	800dbba <_putc_r+0x76>
 800db80:	b2eb      	uxtb	r3, r5
 800db82:	2b0a      	cmp	r3, #10
 800db84:	d019      	beq.n	800dbba <_putc_r+0x76>
 800db86:	6823      	ldr	r3, [r4, #0]
 800db88:	1c5a      	adds	r2, r3, #1
 800db8a:	6022      	str	r2, [r4, #0]
 800db8c:	701d      	strb	r5, [r3, #0]
 800db8e:	b2ed      	uxtb	r5, r5
 800db90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db92:	07da      	lsls	r2, r3, #31
 800db94:	d405      	bmi.n	800dba2 <_putc_r+0x5e>
 800db96:	89a3      	ldrh	r3, [r4, #12]
 800db98:	059b      	lsls	r3, r3, #22
 800db9a:	d402      	bmi.n	800dba2 <_putc_r+0x5e>
 800db9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db9e:	f7ff fc88 	bl	800d4b2 <__retarget_lock_release_recursive>
 800dba2:	4628      	mov	r0, r5
 800dba4:	bd70      	pop	{r4, r5, r6, pc}
 800dba6:	4b09      	ldr	r3, [pc, #36]	; (800dbcc <_putc_r+0x88>)
 800dba8:	429c      	cmp	r4, r3
 800dbaa:	d101      	bne.n	800dbb0 <_putc_r+0x6c>
 800dbac:	68b4      	ldr	r4, [r6, #8]
 800dbae:	e7d6      	b.n	800db5e <_putc_r+0x1a>
 800dbb0:	4b07      	ldr	r3, [pc, #28]	; (800dbd0 <_putc_r+0x8c>)
 800dbb2:	429c      	cmp	r4, r3
 800dbb4:	bf08      	it	eq
 800dbb6:	68f4      	ldreq	r4, [r6, #12]
 800dbb8:	e7d1      	b.n	800db5e <_putc_r+0x1a>
 800dbba:	4629      	mov	r1, r5
 800dbbc:	4622      	mov	r2, r4
 800dbbe:	4630      	mov	r0, r6
 800dbc0:	f000 f85c 	bl	800dc7c <__swbuf_r>
 800dbc4:	4605      	mov	r5, r0
 800dbc6:	e7e3      	b.n	800db90 <_putc_r+0x4c>
 800dbc8:	0800f594 	.word	0x0800f594
 800dbcc:	0800f5b4 	.word	0x0800f5b4
 800dbd0:	0800f574 	.word	0x0800f574

0800dbd4 <_sbrk_r>:
 800dbd4:	b538      	push	{r3, r4, r5, lr}
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	4d05      	ldr	r5, [pc, #20]	; (800dbf0 <_sbrk_r+0x1c>)
 800dbda:	4604      	mov	r4, r0
 800dbdc:	4608      	mov	r0, r1
 800dbde:	602b      	str	r3, [r5, #0]
 800dbe0:	f7f7 fb06 	bl	80051f0 <_sbrk>
 800dbe4:	1c43      	adds	r3, r0, #1
 800dbe6:	d102      	bne.n	800dbee <_sbrk_r+0x1a>
 800dbe8:	682b      	ldr	r3, [r5, #0]
 800dbea:	b103      	cbz	r3, 800dbee <_sbrk_r+0x1a>
 800dbec:	6023      	str	r3, [r4, #0]
 800dbee:	bd38      	pop	{r3, r4, r5, pc}
 800dbf0:	20003090 	.word	0x20003090

0800dbf4 <__sread>:
 800dbf4:	b510      	push	{r4, lr}
 800dbf6:	460c      	mov	r4, r1
 800dbf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbfc:	f000 fabe 	bl	800e17c <_read_r>
 800dc00:	2800      	cmp	r0, #0
 800dc02:	bfab      	itete	ge
 800dc04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dc06:	89a3      	ldrhlt	r3, [r4, #12]
 800dc08:	181b      	addge	r3, r3, r0
 800dc0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dc0e:	bfac      	ite	ge
 800dc10:	6563      	strge	r3, [r4, #84]	; 0x54
 800dc12:	81a3      	strhlt	r3, [r4, #12]
 800dc14:	bd10      	pop	{r4, pc}

0800dc16 <__swrite>:
 800dc16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc1a:	461f      	mov	r7, r3
 800dc1c:	898b      	ldrh	r3, [r1, #12]
 800dc1e:	4605      	mov	r5, r0
 800dc20:	05db      	lsls	r3, r3, #23
 800dc22:	460c      	mov	r4, r1
 800dc24:	4616      	mov	r6, r2
 800dc26:	d505      	bpl.n	800dc34 <__swrite+0x1e>
 800dc28:	2302      	movs	r3, #2
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc30:	f000 f9c8 	bl	800dfc4 <_lseek_r>
 800dc34:	89a3      	ldrh	r3, [r4, #12]
 800dc36:	4632      	mov	r2, r6
 800dc38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dc3c:	81a3      	strh	r3, [r4, #12]
 800dc3e:	4628      	mov	r0, r5
 800dc40:	463b      	mov	r3, r7
 800dc42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc4a:	f000 b869 	b.w	800dd20 <_write_r>

0800dc4e <__sseek>:
 800dc4e:	b510      	push	{r4, lr}
 800dc50:	460c      	mov	r4, r1
 800dc52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc56:	f000 f9b5 	bl	800dfc4 <_lseek_r>
 800dc5a:	1c43      	adds	r3, r0, #1
 800dc5c:	89a3      	ldrh	r3, [r4, #12]
 800dc5e:	bf15      	itete	ne
 800dc60:	6560      	strne	r0, [r4, #84]	; 0x54
 800dc62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dc66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dc6a:	81a3      	strheq	r3, [r4, #12]
 800dc6c:	bf18      	it	ne
 800dc6e:	81a3      	strhne	r3, [r4, #12]
 800dc70:	bd10      	pop	{r4, pc}

0800dc72 <__sclose>:
 800dc72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc76:	f000 b8d3 	b.w	800de20 <_close_r>
	...

0800dc7c <__swbuf_r>:
 800dc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc7e:	460e      	mov	r6, r1
 800dc80:	4614      	mov	r4, r2
 800dc82:	4605      	mov	r5, r0
 800dc84:	b118      	cbz	r0, 800dc8e <__swbuf_r+0x12>
 800dc86:	6983      	ldr	r3, [r0, #24]
 800dc88:	b90b      	cbnz	r3, 800dc8e <__swbuf_r+0x12>
 800dc8a:	f7ff fb73 	bl	800d374 <__sinit>
 800dc8e:	4b21      	ldr	r3, [pc, #132]	; (800dd14 <__swbuf_r+0x98>)
 800dc90:	429c      	cmp	r4, r3
 800dc92:	d12b      	bne.n	800dcec <__swbuf_r+0x70>
 800dc94:	686c      	ldr	r4, [r5, #4]
 800dc96:	69a3      	ldr	r3, [r4, #24]
 800dc98:	60a3      	str	r3, [r4, #8]
 800dc9a:	89a3      	ldrh	r3, [r4, #12]
 800dc9c:	071a      	lsls	r2, r3, #28
 800dc9e:	d52f      	bpl.n	800dd00 <__swbuf_r+0x84>
 800dca0:	6923      	ldr	r3, [r4, #16]
 800dca2:	b36b      	cbz	r3, 800dd00 <__swbuf_r+0x84>
 800dca4:	6923      	ldr	r3, [r4, #16]
 800dca6:	6820      	ldr	r0, [r4, #0]
 800dca8:	b2f6      	uxtb	r6, r6
 800dcaa:	1ac0      	subs	r0, r0, r3
 800dcac:	6963      	ldr	r3, [r4, #20]
 800dcae:	4637      	mov	r7, r6
 800dcb0:	4283      	cmp	r3, r0
 800dcb2:	dc04      	bgt.n	800dcbe <__swbuf_r+0x42>
 800dcb4:	4621      	mov	r1, r4
 800dcb6:	4628      	mov	r0, r5
 800dcb8:	f000 f948 	bl	800df4c <_fflush_r>
 800dcbc:	bb30      	cbnz	r0, 800dd0c <__swbuf_r+0x90>
 800dcbe:	68a3      	ldr	r3, [r4, #8]
 800dcc0:	3001      	adds	r0, #1
 800dcc2:	3b01      	subs	r3, #1
 800dcc4:	60a3      	str	r3, [r4, #8]
 800dcc6:	6823      	ldr	r3, [r4, #0]
 800dcc8:	1c5a      	adds	r2, r3, #1
 800dcca:	6022      	str	r2, [r4, #0]
 800dccc:	701e      	strb	r6, [r3, #0]
 800dcce:	6963      	ldr	r3, [r4, #20]
 800dcd0:	4283      	cmp	r3, r0
 800dcd2:	d004      	beq.n	800dcde <__swbuf_r+0x62>
 800dcd4:	89a3      	ldrh	r3, [r4, #12]
 800dcd6:	07db      	lsls	r3, r3, #31
 800dcd8:	d506      	bpl.n	800dce8 <__swbuf_r+0x6c>
 800dcda:	2e0a      	cmp	r6, #10
 800dcdc:	d104      	bne.n	800dce8 <__swbuf_r+0x6c>
 800dcde:	4621      	mov	r1, r4
 800dce0:	4628      	mov	r0, r5
 800dce2:	f000 f933 	bl	800df4c <_fflush_r>
 800dce6:	b988      	cbnz	r0, 800dd0c <__swbuf_r+0x90>
 800dce8:	4638      	mov	r0, r7
 800dcea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcec:	4b0a      	ldr	r3, [pc, #40]	; (800dd18 <__swbuf_r+0x9c>)
 800dcee:	429c      	cmp	r4, r3
 800dcf0:	d101      	bne.n	800dcf6 <__swbuf_r+0x7a>
 800dcf2:	68ac      	ldr	r4, [r5, #8]
 800dcf4:	e7cf      	b.n	800dc96 <__swbuf_r+0x1a>
 800dcf6:	4b09      	ldr	r3, [pc, #36]	; (800dd1c <__swbuf_r+0xa0>)
 800dcf8:	429c      	cmp	r4, r3
 800dcfa:	bf08      	it	eq
 800dcfc:	68ec      	ldreq	r4, [r5, #12]
 800dcfe:	e7ca      	b.n	800dc96 <__swbuf_r+0x1a>
 800dd00:	4621      	mov	r1, r4
 800dd02:	4628      	mov	r0, r5
 800dd04:	f000 f81e 	bl	800dd44 <__swsetup_r>
 800dd08:	2800      	cmp	r0, #0
 800dd0a:	d0cb      	beq.n	800dca4 <__swbuf_r+0x28>
 800dd0c:	f04f 37ff 	mov.w	r7, #4294967295
 800dd10:	e7ea      	b.n	800dce8 <__swbuf_r+0x6c>
 800dd12:	bf00      	nop
 800dd14:	0800f594 	.word	0x0800f594
 800dd18:	0800f5b4 	.word	0x0800f5b4
 800dd1c:	0800f574 	.word	0x0800f574

0800dd20 <_write_r>:
 800dd20:	b538      	push	{r3, r4, r5, lr}
 800dd22:	4604      	mov	r4, r0
 800dd24:	4608      	mov	r0, r1
 800dd26:	4611      	mov	r1, r2
 800dd28:	2200      	movs	r2, #0
 800dd2a:	4d05      	ldr	r5, [pc, #20]	; (800dd40 <_write_r+0x20>)
 800dd2c:	602a      	str	r2, [r5, #0]
 800dd2e:	461a      	mov	r2, r3
 800dd30:	f7f7 fa11 	bl	8005156 <_write>
 800dd34:	1c43      	adds	r3, r0, #1
 800dd36:	d102      	bne.n	800dd3e <_write_r+0x1e>
 800dd38:	682b      	ldr	r3, [r5, #0]
 800dd3a:	b103      	cbz	r3, 800dd3e <_write_r+0x1e>
 800dd3c:	6023      	str	r3, [r4, #0]
 800dd3e:	bd38      	pop	{r3, r4, r5, pc}
 800dd40:	20003090 	.word	0x20003090

0800dd44 <__swsetup_r>:
 800dd44:	4b32      	ldr	r3, [pc, #200]	; (800de10 <__swsetup_r+0xcc>)
 800dd46:	b570      	push	{r4, r5, r6, lr}
 800dd48:	681d      	ldr	r5, [r3, #0]
 800dd4a:	4606      	mov	r6, r0
 800dd4c:	460c      	mov	r4, r1
 800dd4e:	b125      	cbz	r5, 800dd5a <__swsetup_r+0x16>
 800dd50:	69ab      	ldr	r3, [r5, #24]
 800dd52:	b913      	cbnz	r3, 800dd5a <__swsetup_r+0x16>
 800dd54:	4628      	mov	r0, r5
 800dd56:	f7ff fb0d 	bl	800d374 <__sinit>
 800dd5a:	4b2e      	ldr	r3, [pc, #184]	; (800de14 <__swsetup_r+0xd0>)
 800dd5c:	429c      	cmp	r4, r3
 800dd5e:	d10f      	bne.n	800dd80 <__swsetup_r+0x3c>
 800dd60:	686c      	ldr	r4, [r5, #4]
 800dd62:	89a3      	ldrh	r3, [r4, #12]
 800dd64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd68:	0719      	lsls	r1, r3, #28
 800dd6a:	d42c      	bmi.n	800ddc6 <__swsetup_r+0x82>
 800dd6c:	06dd      	lsls	r5, r3, #27
 800dd6e:	d411      	bmi.n	800dd94 <__swsetup_r+0x50>
 800dd70:	2309      	movs	r3, #9
 800dd72:	6033      	str	r3, [r6, #0]
 800dd74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dd78:	f04f 30ff 	mov.w	r0, #4294967295
 800dd7c:	81a3      	strh	r3, [r4, #12]
 800dd7e:	e03e      	b.n	800ddfe <__swsetup_r+0xba>
 800dd80:	4b25      	ldr	r3, [pc, #148]	; (800de18 <__swsetup_r+0xd4>)
 800dd82:	429c      	cmp	r4, r3
 800dd84:	d101      	bne.n	800dd8a <__swsetup_r+0x46>
 800dd86:	68ac      	ldr	r4, [r5, #8]
 800dd88:	e7eb      	b.n	800dd62 <__swsetup_r+0x1e>
 800dd8a:	4b24      	ldr	r3, [pc, #144]	; (800de1c <__swsetup_r+0xd8>)
 800dd8c:	429c      	cmp	r4, r3
 800dd8e:	bf08      	it	eq
 800dd90:	68ec      	ldreq	r4, [r5, #12]
 800dd92:	e7e6      	b.n	800dd62 <__swsetup_r+0x1e>
 800dd94:	0758      	lsls	r0, r3, #29
 800dd96:	d512      	bpl.n	800ddbe <__swsetup_r+0x7a>
 800dd98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd9a:	b141      	cbz	r1, 800ddae <__swsetup_r+0x6a>
 800dd9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dda0:	4299      	cmp	r1, r3
 800dda2:	d002      	beq.n	800ddaa <__swsetup_r+0x66>
 800dda4:	4630      	mov	r0, r6
 800dda6:	f000 f99d 	bl	800e0e4 <_free_r>
 800ddaa:	2300      	movs	r3, #0
 800ddac:	6363      	str	r3, [r4, #52]	; 0x34
 800ddae:	89a3      	ldrh	r3, [r4, #12]
 800ddb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ddb4:	81a3      	strh	r3, [r4, #12]
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	6063      	str	r3, [r4, #4]
 800ddba:	6923      	ldr	r3, [r4, #16]
 800ddbc:	6023      	str	r3, [r4, #0]
 800ddbe:	89a3      	ldrh	r3, [r4, #12]
 800ddc0:	f043 0308 	orr.w	r3, r3, #8
 800ddc4:	81a3      	strh	r3, [r4, #12]
 800ddc6:	6923      	ldr	r3, [r4, #16]
 800ddc8:	b94b      	cbnz	r3, 800ddde <__swsetup_r+0x9a>
 800ddca:	89a3      	ldrh	r3, [r4, #12]
 800ddcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ddd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ddd4:	d003      	beq.n	800ddde <__swsetup_r+0x9a>
 800ddd6:	4621      	mov	r1, r4
 800ddd8:	4630      	mov	r0, r6
 800ddda:	f000 f929 	bl	800e030 <__smakebuf_r>
 800ddde:	89a0      	ldrh	r0, [r4, #12]
 800dde0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dde4:	f010 0301 	ands.w	r3, r0, #1
 800dde8:	d00a      	beq.n	800de00 <__swsetup_r+0xbc>
 800ddea:	2300      	movs	r3, #0
 800ddec:	60a3      	str	r3, [r4, #8]
 800ddee:	6963      	ldr	r3, [r4, #20]
 800ddf0:	425b      	negs	r3, r3
 800ddf2:	61a3      	str	r3, [r4, #24]
 800ddf4:	6923      	ldr	r3, [r4, #16]
 800ddf6:	b943      	cbnz	r3, 800de0a <__swsetup_r+0xc6>
 800ddf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ddfc:	d1ba      	bne.n	800dd74 <__swsetup_r+0x30>
 800ddfe:	bd70      	pop	{r4, r5, r6, pc}
 800de00:	0781      	lsls	r1, r0, #30
 800de02:	bf58      	it	pl
 800de04:	6963      	ldrpl	r3, [r4, #20]
 800de06:	60a3      	str	r3, [r4, #8]
 800de08:	e7f4      	b.n	800ddf4 <__swsetup_r+0xb0>
 800de0a:	2000      	movs	r0, #0
 800de0c:	e7f7      	b.n	800ddfe <__swsetup_r+0xba>
 800de0e:	bf00      	nop
 800de10:	20000058 	.word	0x20000058
 800de14:	0800f594 	.word	0x0800f594
 800de18:	0800f5b4 	.word	0x0800f5b4
 800de1c:	0800f574 	.word	0x0800f574

0800de20 <_close_r>:
 800de20:	b538      	push	{r3, r4, r5, lr}
 800de22:	2300      	movs	r3, #0
 800de24:	4d05      	ldr	r5, [pc, #20]	; (800de3c <_close_r+0x1c>)
 800de26:	4604      	mov	r4, r0
 800de28:	4608      	mov	r0, r1
 800de2a:	602b      	str	r3, [r5, #0]
 800de2c:	f7f7 f9af 	bl	800518e <_close>
 800de30:	1c43      	adds	r3, r0, #1
 800de32:	d102      	bne.n	800de3a <_close_r+0x1a>
 800de34:	682b      	ldr	r3, [r5, #0]
 800de36:	b103      	cbz	r3, 800de3a <_close_r+0x1a>
 800de38:	6023      	str	r3, [r4, #0]
 800de3a:	bd38      	pop	{r3, r4, r5, pc}
 800de3c:	20003090 	.word	0x20003090

0800de40 <__sflush_r>:
 800de40:	898a      	ldrh	r2, [r1, #12]
 800de42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de46:	4605      	mov	r5, r0
 800de48:	0710      	lsls	r0, r2, #28
 800de4a:	460c      	mov	r4, r1
 800de4c:	d458      	bmi.n	800df00 <__sflush_r+0xc0>
 800de4e:	684b      	ldr	r3, [r1, #4]
 800de50:	2b00      	cmp	r3, #0
 800de52:	dc05      	bgt.n	800de60 <__sflush_r+0x20>
 800de54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800de56:	2b00      	cmp	r3, #0
 800de58:	dc02      	bgt.n	800de60 <__sflush_r+0x20>
 800de5a:	2000      	movs	r0, #0
 800de5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de62:	2e00      	cmp	r6, #0
 800de64:	d0f9      	beq.n	800de5a <__sflush_r+0x1a>
 800de66:	2300      	movs	r3, #0
 800de68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800de6c:	682f      	ldr	r7, [r5, #0]
 800de6e:	602b      	str	r3, [r5, #0]
 800de70:	d032      	beq.n	800ded8 <__sflush_r+0x98>
 800de72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800de74:	89a3      	ldrh	r3, [r4, #12]
 800de76:	075a      	lsls	r2, r3, #29
 800de78:	d505      	bpl.n	800de86 <__sflush_r+0x46>
 800de7a:	6863      	ldr	r3, [r4, #4]
 800de7c:	1ac0      	subs	r0, r0, r3
 800de7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de80:	b10b      	cbz	r3, 800de86 <__sflush_r+0x46>
 800de82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800de84:	1ac0      	subs	r0, r0, r3
 800de86:	2300      	movs	r3, #0
 800de88:	4602      	mov	r2, r0
 800de8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de8c:	4628      	mov	r0, r5
 800de8e:	6a21      	ldr	r1, [r4, #32]
 800de90:	47b0      	blx	r6
 800de92:	1c43      	adds	r3, r0, #1
 800de94:	89a3      	ldrh	r3, [r4, #12]
 800de96:	d106      	bne.n	800dea6 <__sflush_r+0x66>
 800de98:	6829      	ldr	r1, [r5, #0]
 800de9a:	291d      	cmp	r1, #29
 800de9c:	d82c      	bhi.n	800def8 <__sflush_r+0xb8>
 800de9e:	4a2a      	ldr	r2, [pc, #168]	; (800df48 <__sflush_r+0x108>)
 800dea0:	40ca      	lsrs	r2, r1
 800dea2:	07d6      	lsls	r6, r2, #31
 800dea4:	d528      	bpl.n	800def8 <__sflush_r+0xb8>
 800dea6:	2200      	movs	r2, #0
 800dea8:	6062      	str	r2, [r4, #4]
 800deaa:	6922      	ldr	r2, [r4, #16]
 800deac:	04d9      	lsls	r1, r3, #19
 800deae:	6022      	str	r2, [r4, #0]
 800deb0:	d504      	bpl.n	800debc <__sflush_r+0x7c>
 800deb2:	1c42      	adds	r2, r0, #1
 800deb4:	d101      	bne.n	800deba <__sflush_r+0x7a>
 800deb6:	682b      	ldr	r3, [r5, #0]
 800deb8:	b903      	cbnz	r3, 800debc <__sflush_r+0x7c>
 800deba:	6560      	str	r0, [r4, #84]	; 0x54
 800debc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800debe:	602f      	str	r7, [r5, #0]
 800dec0:	2900      	cmp	r1, #0
 800dec2:	d0ca      	beq.n	800de5a <__sflush_r+0x1a>
 800dec4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dec8:	4299      	cmp	r1, r3
 800deca:	d002      	beq.n	800ded2 <__sflush_r+0x92>
 800decc:	4628      	mov	r0, r5
 800dece:	f000 f909 	bl	800e0e4 <_free_r>
 800ded2:	2000      	movs	r0, #0
 800ded4:	6360      	str	r0, [r4, #52]	; 0x34
 800ded6:	e7c1      	b.n	800de5c <__sflush_r+0x1c>
 800ded8:	6a21      	ldr	r1, [r4, #32]
 800deda:	2301      	movs	r3, #1
 800dedc:	4628      	mov	r0, r5
 800dede:	47b0      	blx	r6
 800dee0:	1c41      	adds	r1, r0, #1
 800dee2:	d1c7      	bne.n	800de74 <__sflush_r+0x34>
 800dee4:	682b      	ldr	r3, [r5, #0]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d0c4      	beq.n	800de74 <__sflush_r+0x34>
 800deea:	2b1d      	cmp	r3, #29
 800deec:	d001      	beq.n	800def2 <__sflush_r+0xb2>
 800deee:	2b16      	cmp	r3, #22
 800def0:	d101      	bne.n	800def6 <__sflush_r+0xb6>
 800def2:	602f      	str	r7, [r5, #0]
 800def4:	e7b1      	b.n	800de5a <__sflush_r+0x1a>
 800def6:	89a3      	ldrh	r3, [r4, #12]
 800def8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800defc:	81a3      	strh	r3, [r4, #12]
 800defe:	e7ad      	b.n	800de5c <__sflush_r+0x1c>
 800df00:	690f      	ldr	r7, [r1, #16]
 800df02:	2f00      	cmp	r7, #0
 800df04:	d0a9      	beq.n	800de5a <__sflush_r+0x1a>
 800df06:	0793      	lsls	r3, r2, #30
 800df08:	bf18      	it	ne
 800df0a:	2300      	movne	r3, #0
 800df0c:	680e      	ldr	r6, [r1, #0]
 800df0e:	bf08      	it	eq
 800df10:	694b      	ldreq	r3, [r1, #20]
 800df12:	eba6 0807 	sub.w	r8, r6, r7
 800df16:	600f      	str	r7, [r1, #0]
 800df18:	608b      	str	r3, [r1, #8]
 800df1a:	f1b8 0f00 	cmp.w	r8, #0
 800df1e:	dd9c      	ble.n	800de5a <__sflush_r+0x1a>
 800df20:	4643      	mov	r3, r8
 800df22:	463a      	mov	r2, r7
 800df24:	4628      	mov	r0, r5
 800df26:	6a21      	ldr	r1, [r4, #32]
 800df28:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800df2a:	47b0      	blx	r6
 800df2c:	2800      	cmp	r0, #0
 800df2e:	dc06      	bgt.n	800df3e <__sflush_r+0xfe>
 800df30:	89a3      	ldrh	r3, [r4, #12]
 800df32:	f04f 30ff 	mov.w	r0, #4294967295
 800df36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df3a:	81a3      	strh	r3, [r4, #12]
 800df3c:	e78e      	b.n	800de5c <__sflush_r+0x1c>
 800df3e:	4407      	add	r7, r0
 800df40:	eba8 0800 	sub.w	r8, r8, r0
 800df44:	e7e9      	b.n	800df1a <__sflush_r+0xda>
 800df46:	bf00      	nop
 800df48:	20400001 	.word	0x20400001

0800df4c <_fflush_r>:
 800df4c:	b538      	push	{r3, r4, r5, lr}
 800df4e:	690b      	ldr	r3, [r1, #16]
 800df50:	4605      	mov	r5, r0
 800df52:	460c      	mov	r4, r1
 800df54:	b913      	cbnz	r3, 800df5c <_fflush_r+0x10>
 800df56:	2500      	movs	r5, #0
 800df58:	4628      	mov	r0, r5
 800df5a:	bd38      	pop	{r3, r4, r5, pc}
 800df5c:	b118      	cbz	r0, 800df66 <_fflush_r+0x1a>
 800df5e:	6983      	ldr	r3, [r0, #24]
 800df60:	b90b      	cbnz	r3, 800df66 <_fflush_r+0x1a>
 800df62:	f7ff fa07 	bl	800d374 <__sinit>
 800df66:	4b14      	ldr	r3, [pc, #80]	; (800dfb8 <_fflush_r+0x6c>)
 800df68:	429c      	cmp	r4, r3
 800df6a:	d11b      	bne.n	800dfa4 <_fflush_r+0x58>
 800df6c:	686c      	ldr	r4, [r5, #4]
 800df6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d0ef      	beq.n	800df56 <_fflush_r+0xa>
 800df76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800df78:	07d0      	lsls	r0, r2, #31
 800df7a:	d404      	bmi.n	800df86 <_fflush_r+0x3a>
 800df7c:	0599      	lsls	r1, r3, #22
 800df7e:	d402      	bmi.n	800df86 <_fflush_r+0x3a>
 800df80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df82:	f7ff fa95 	bl	800d4b0 <__retarget_lock_acquire_recursive>
 800df86:	4628      	mov	r0, r5
 800df88:	4621      	mov	r1, r4
 800df8a:	f7ff ff59 	bl	800de40 <__sflush_r>
 800df8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800df90:	4605      	mov	r5, r0
 800df92:	07da      	lsls	r2, r3, #31
 800df94:	d4e0      	bmi.n	800df58 <_fflush_r+0xc>
 800df96:	89a3      	ldrh	r3, [r4, #12]
 800df98:	059b      	lsls	r3, r3, #22
 800df9a:	d4dd      	bmi.n	800df58 <_fflush_r+0xc>
 800df9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df9e:	f7ff fa88 	bl	800d4b2 <__retarget_lock_release_recursive>
 800dfa2:	e7d9      	b.n	800df58 <_fflush_r+0xc>
 800dfa4:	4b05      	ldr	r3, [pc, #20]	; (800dfbc <_fflush_r+0x70>)
 800dfa6:	429c      	cmp	r4, r3
 800dfa8:	d101      	bne.n	800dfae <_fflush_r+0x62>
 800dfaa:	68ac      	ldr	r4, [r5, #8]
 800dfac:	e7df      	b.n	800df6e <_fflush_r+0x22>
 800dfae:	4b04      	ldr	r3, [pc, #16]	; (800dfc0 <_fflush_r+0x74>)
 800dfb0:	429c      	cmp	r4, r3
 800dfb2:	bf08      	it	eq
 800dfb4:	68ec      	ldreq	r4, [r5, #12]
 800dfb6:	e7da      	b.n	800df6e <_fflush_r+0x22>
 800dfb8:	0800f594 	.word	0x0800f594
 800dfbc:	0800f5b4 	.word	0x0800f5b4
 800dfc0:	0800f574 	.word	0x0800f574

0800dfc4 <_lseek_r>:
 800dfc4:	b538      	push	{r3, r4, r5, lr}
 800dfc6:	4604      	mov	r4, r0
 800dfc8:	4608      	mov	r0, r1
 800dfca:	4611      	mov	r1, r2
 800dfcc:	2200      	movs	r2, #0
 800dfce:	4d05      	ldr	r5, [pc, #20]	; (800dfe4 <_lseek_r+0x20>)
 800dfd0:	602a      	str	r2, [r5, #0]
 800dfd2:	461a      	mov	r2, r3
 800dfd4:	f7f7 f8ff 	bl	80051d6 <_lseek>
 800dfd8:	1c43      	adds	r3, r0, #1
 800dfda:	d102      	bne.n	800dfe2 <_lseek_r+0x1e>
 800dfdc:	682b      	ldr	r3, [r5, #0]
 800dfde:	b103      	cbz	r3, 800dfe2 <_lseek_r+0x1e>
 800dfe0:	6023      	str	r3, [r4, #0]
 800dfe2:	bd38      	pop	{r3, r4, r5, pc}
 800dfe4:	20003090 	.word	0x20003090

0800dfe8 <__swhatbuf_r>:
 800dfe8:	b570      	push	{r4, r5, r6, lr}
 800dfea:	460e      	mov	r6, r1
 800dfec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dff0:	4614      	mov	r4, r2
 800dff2:	2900      	cmp	r1, #0
 800dff4:	461d      	mov	r5, r3
 800dff6:	b096      	sub	sp, #88	; 0x58
 800dff8:	da07      	bge.n	800e00a <__swhatbuf_r+0x22>
 800dffa:	2300      	movs	r3, #0
 800dffc:	602b      	str	r3, [r5, #0]
 800dffe:	89b3      	ldrh	r3, [r6, #12]
 800e000:	061a      	lsls	r2, r3, #24
 800e002:	d410      	bmi.n	800e026 <__swhatbuf_r+0x3e>
 800e004:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e008:	e00e      	b.n	800e028 <__swhatbuf_r+0x40>
 800e00a:	466a      	mov	r2, sp
 800e00c:	f000 f8c8 	bl	800e1a0 <_fstat_r>
 800e010:	2800      	cmp	r0, #0
 800e012:	dbf2      	blt.n	800dffa <__swhatbuf_r+0x12>
 800e014:	9a01      	ldr	r2, [sp, #4]
 800e016:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e01a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e01e:	425a      	negs	r2, r3
 800e020:	415a      	adcs	r2, r3
 800e022:	602a      	str	r2, [r5, #0]
 800e024:	e7ee      	b.n	800e004 <__swhatbuf_r+0x1c>
 800e026:	2340      	movs	r3, #64	; 0x40
 800e028:	2000      	movs	r0, #0
 800e02a:	6023      	str	r3, [r4, #0]
 800e02c:	b016      	add	sp, #88	; 0x58
 800e02e:	bd70      	pop	{r4, r5, r6, pc}

0800e030 <__smakebuf_r>:
 800e030:	898b      	ldrh	r3, [r1, #12]
 800e032:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e034:	079d      	lsls	r5, r3, #30
 800e036:	4606      	mov	r6, r0
 800e038:	460c      	mov	r4, r1
 800e03a:	d507      	bpl.n	800e04c <__smakebuf_r+0x1c>
 800e03c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e040:	6023      	str	r3, [r4, #0]
 800e042:	6123      	str	r3, [r4, #16]
 800e044:	2301      	movs	r3, #1
 800e046:	6163      	str	r3, [r4, #20]
 800e048:	b002      	add	sp, #8
 800e04a:	bd70      	pop	{r4, r5, r6, pc}
 800e04c:	466a      	mov	r2, sp
 800e04e:	ab01      	add	r3, sp, #4
 800e050:	f7ff ffca 	bl	800dfe8 <__swhatbuf_r>
 800e054:	9900      	ldr	r1, [sp, #0]
 800e056:	4605      	mov	r5, r0
 800e058:	4630      	mov	r0, r6
 800e05a:	f7ff fa2b 	bl	800d4b4 <_malloc_r>
 800e05e:	b948      	cbnz	r0, 800e074 <__smakebuf_r+0x44>
 800e060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e064:	059a      	lsls	r2, r3, #22
 800e066:	d4ef      	bmi.n	800e048 <__smakebuf_r+0x18>
 800e068:	f023 0303 	bic.w	r3, r3, #3
 800e06c:	f043 0302 	orr.w	r3, r3, #2
 800e070:	81a3      	strh	r3, [r4, #12]
 800e072:	e7e3      	b.n	800e03c <__smakebuf_r+0xc>
 800e074:	4b0d      	ldr	r3, [pc, #52]	; (800e0ac <__smakebuf_r+0x7c>)
 800e076:	62b3      	str	r3, [r6, #40]	; 0x28
 800e078:	89a3      	ldrh	r3, [r4, #12]
 800e07a:	6020      	str	r0, [r4, #0]
 800e07c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e080:	81a3      	strh	r3, [r4, #12]
 800e082:	9b00      	ldr	r3, [sp, #0]
 800e084:	6120      	str	r0, [r4, #16]
 800e086:	6163      	str	r3, [r4, #20]
 800e088:	9b01      	ldr	r3, [sp, #4]
 800e08a:	b15b      	cbz	r3, 800e0a4 <__smakebuf_r+0x74>
 800e08c:	4630      	mov	r0, r6
 800e08e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e092:	f000 f897 	bl	800e1c4 <_isatty_r>
 800e096:	b128      	cbz	r0, 800e0a4 <__smakebuf_r+0x74>
 800e098:	89a3      	ldrh	r3, [r4, #12]
 800e09a:	f023 0303 	bic.w	r3, r3, #3
 800e09e:	f043 0301 	orr.w	r3, r3, #1
 800e0a2:	81a3      	strh	r3, [r4, #12]
 800e0a4:	89a0      	ldrh	r0, [r4, #12]
 800e0a6:	4305      	orrs	r5, r0
 800e0a8:	81a5      	strh	r5, [r4, #12]
 800e0aa:	e7cd      	b.n	800e048 <__smakebuf_r+0x18>
 800e0ac:	0800d30d 	.word	0x0800d30d

0800e0b0 <memchr>:
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	b510      	push	{r4, lr}
 800e0b4:	b2c9      	uxtb	r1, r1
 800e0b6:	4402      	add	r2, r0
 800e0b8:	4293      	cmp	r3, r2
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	d101      	bne.n	800e0c2 <memchr+0x12>
 800e0be:	2000      	movs	r0, #0
 800e0c0:	e003      	b.n	800e0ca <memchr+0x1a>
 800e0c2:	7804      	ldrb	r4, [r0, #0]
 800e0c4:	3301      	adds	r3, #1
 800e0c6:	428c      	cmp	r4, r1
 800e0c8:	d1f6      	bne.n	800e0b8 <memchr+0x8>
 800e0ca:	bd10      	pop	{r4, pc}

0800e0cc <__malloc_lock>:
 800e0cc:	4801      	ldr	r0, [pc, #4]	; (800e0d4 <__malloc_lock+0x8>)
 800e0ce:	f7ff b9ef 	b.w	800d4b0 <__retarget_lock_acquire_recursive>
 800e0d2:	bf00      	nop
 800e0d4:	20003088 	.word	0x20003088

0800e0d8 <__malloc_unlock>:
 800e0d8:	4801      	ldr	r0, [pc, #4]	; (800e0e0 <__malloc_unlock+0x8>)
 800e0da:	f7ff b9ea 	b.w	800d4b2 <__retarget_lock_release_recursive>
 800e0de:	bf00      	nop
 800e0e0:	20003088 	.word	0x20003088

0800e0e4 <_free_r>:
 800e0e4:	b538      	push	{r3, r4, r5, lr}
 800e0e6:	4605      	mov	r5, r0
 800e0e8:	2900      	cmp	r1, #0
 800e0ea:	d043      	beq.n	800e174 <_free_r+0x90>
 800e0ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0f0:	1f0c      	subs	r4, r1, #4
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	bfb8      	it	lt
 800e0f6:	18e4      	addlt	r4, r4, r3
 800e0f8:	f7ff ffe8 	bl	800e0cc <__malloc_lock>
 800e0fc:	4a1e      	ldr	r2, [pc, #120]	; (800e178 <_free_r+0x94>)
 800e0fe:	6813      	ldr	r3, [r2, #0]
 800e100:	4610      	mov	r0, r2
 800e102:	b933      	cbnz	r3, 800e112 <_free_r+0x2e>
 800e104:	6063      	str	r3, [r4, #4]
 800e106:	6014      	str	r4, [r2, #0]
 800e108:	4628      	mov	r0, r5
 800e10a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e10e:	f7ff bfe3 	b.w	800e0d8 <__malloc_unlock>
 800e112:	42a3      	cmp	r3, r4
 800e114:	d90a      	bls.n	800e12c <_free_r+0x48>
 800e116:	6821      	ldr	r1, [r4, #0]
 800e118:	1862      	adds	r2, r4, r1
 800e11a:	4293      	cmp	r3, r2
 800e11c:	bf01      	itttt	eq
 800e11e:	681a      	ldreq	r2, [r3, #0]
 800e120:	685b      	ldreq	r3, [r3, #4]
 800e122:	1852      	addeq	r2, r2, r1
 800e124:	6022      	streq	r2, [r4, #0]
 800e126:	6063      	str	r3, [r4, #4]
 800e128:	6004      	str	r4, [r0, #0]
 800e12a:	e7ed      	b.n	800e108 <_free_r+0x24>
 800e12c:	461a      	mov	r2, r3
 800e12e:	685b      	ldr	r3, [r3, #4]
 800e130:	b10b      	cbz	r3, 800e136 <_free_r+0x52>
 800e132:	42a3      	cmp	r3, r4
 800e134:	d9fa      	bls.n	800e12c <_free_r+0x48>
 800e136:	6811      	ldr	r1, [r2, #0]
 800e138:	1850      	adds	r0, r2, r1
 800e13a:	42a0      	cmp	r0, r4
 800e13c:	d10b      	bne.n	800e156 <_free_r+0x72>
 800e13e:	6820      	ldr	r0, [r4, #0]
 800e140:	4401      	add	r1, r0
 800e142:	1850      	adds	r0, r2, r1
 800e144:	4283      	cmp	r3, r0
 800e146:	6011      	str	r1, [r2, #0]
 800e148:	d1de      	bne.n	800e108 <_free_r+0x24>
 800e14a:	6818      	ldr	r0, [r3, #0]
 800e14c:	685b      	ldr	r3, [r3, #4]
 800e14e:	4401      	add	r1, r0
 800e150:	6011      	str	r1, [r2, #0]
 800e152:	6053      	str	r3, [r2, #4]
 800e154:	e7d8      	b.n	800e108 <_free_r+0x24>
 800e156:	d902      	bls.n	800e15e <_free_r+0x7a>
 800e158:	230c      	movs	r3, #12
 800e15a:	602b      	str	r3, [r5, #0]
 800e15c:	e7d4      	b.n	800e108 <_free_r+0x24>
 800e15e:	6820      	ldr	r0, [r4, #0]
 800e160:	1821      	adds	r1, r4, r0
 800e162:	428b      	cmp	r3, r1
 800e164:	bf01      	itttt	eq
 800e166:	6819      	ldreq	r1, [r3, #0]
 800e168:	685b      	ldreq	r3, [r3, #4]
 800e16a:	1809      	addeq	r1, r1, r0
 800e16c:	6021      	streq	r1, [r4, #0]
 800e16e:	6063      	str	r3, [r4, #4]
 800e170:	6054      	str	r4, [r2, #4]
 800e172:	e7c9      	b.n	800e108 <_free_r+0x24>
 800e174:	bd38      	pop	{r3, r4, r5, pc}
 800e176:	bf00      	nop
 800e178:	20002f18 	.word	0x20002f18

0800e17c <_read_r>:
 800e17c:	b538      	push	{r3, r4, r5, lr}
 800e17e:	4604      	mov	r4, r0
 800e180:	4608      	mov	r0, r1
 800e182:	4611      	mov	r1, r2
 800e184:	2200      	movs	r2, #0
 800e186:	4d05      	ldr	r5, [pc, #20]	; (800e19c <_read_r+0x20>)
 800e188:	602a      	str	r2, [r5, #0]
 800e18a:	461a      	mov	r2, r3
 800e18c:	f7f6 ffc6 	bl	800511c <_read>
 800e190:	1c43      	adds	r3, r0, #1
 800e192:	d102      	bne.n	800e19a <_read_r+0x1e>
 800e194:	682b      	ldr	r3, [r5, #0]
 800e196:	b103      	cbz	r3, 800e19a <_read_r+0x1e>
 800e198:	6023      	str	r3, [r4, #0]
 800e19a:	bd38      	pop	{r3, r4, r5, pc}
 800e19c:	20003090 	.word	0x20003090

0800e1a0 <_fstat_r>:
 800e1a0:	b538      	push	{r3, r4, r5, lr}
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	4d06      	ldr	r5, [pc, #24]	; (800e1c0 <_fstat_r+0x20>)
 800e1a6:	4604      	mov	r4, r0
 800e1a8:	4608      	mov	r0, r1
 800e1aa:	4611      	mov	r1, r2
 800e1ac:	602b      	str	r3, [r5, #0]
 800e1ae:	f7f6 fff9 	bl	80051a4 <_fstat>
 800e1b2:	1c43      	adds	r3, r0, #1
 800e1b4:	d102      	bne.n	800e1bc <_fstat_r+0x1c>
 800e1b6:	682b      	ldr	r3, [r5, #0]
 800e1b8:	b103      	cbz	r3, 800e1bc <_fstat_r+0x1c>
 800e1ba:	6023      	str	r3, [r4, #0]
 800e1bc:	bd38      	pop	{r3, r4, r5, pc}
 800e1be:	bf00      	nop
 800e1c0:	20003090 	.word	0x20003090

0800e1c4 <_isatty_r>:
 800e1c4:	b538      	push	{r3, r4, r5, lr}
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	4d05      	ldr	r5, [pc, #20]	; (800e1e0 <_isatty_r+0x1c>)
 800e1ca:	4604      	mov	r4, r0
 800e1cc:	4608      	mov	r0, r1
 800e1ce:	602b      	str	r3, [r5, #0]
 800e1d0:	f7f6 fff7 	bl	80051c2 <_isatty>
 800e1d4:	1c43      	adds	r3, r0, #1
 800e1d6:	d102      	bne.n	800e1de <_isatty_r+0x1a>
 800e1d8:	682b      	ldr	r3, [r5, #0]
 800e1da:	b103      	cbz	r3, 800e1de <_isatty_r+0x1a>
 800e1dc:	6023      	str	r3, [r4, #0]
 800e1de:	bd38      	pop	{r3, r4, r5, pc}
 800e1e0:	20003090 	.word	0x20003090

0800e1e4 <pow>:
 800e1e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1e8:	461f      	mov	r7, r3
 800e1ea:	4680      	mov	r8, r0
 800e1ec:	4689      	mov	r9, r1
 800e1ee:	4616      	mov	r6, r2
 800e1f0:	f000 f8a6 	bl	800e340 <__ieee754_pow>
 800e1f4:	4b4d      	ldr	r3, [pc, #308]	; (800e32c <pow+0x148>)
 800e1f6:	4604      	mov	r4, r0
 800e1f8:	f993 3000 	ldrsb.w	r3, [r3]
 800e1fc:	460d      	mov	r5, r1
 800e1fe:	3301      	adds	r3, #1
 800e200:	d015      	beq.n	800e22e <pow+0x4a>
 800e202:	4632      	mov	r2, r6
 800e204:	463b      	mov	r3, r7
 800e206:	4630      	mov	r0, r6
 800e208:	4639      	mov	r1, r7
 800e20a:	f7f2 fc67 	bl	8000adc <__aeabi_dcmpun>
 800e20e:	b970      	cbnz	r0, 800e22e <pow+0x4a>
 800e210:	4642      	mov	r2, r8
 800e212:	464b      	mov	r3, r9
 800e214:	4640      	mov	r0, r8
 800e216:	4649      	mov	r1, r9
 800e218:	f7f2 fc60 	bl	8000adc <__aeabi_dcmpun>
 800e21c:	2200      	movs	r2, #0
 800e21e:	2300      	movs	r3, #0
 800e220:	b148      	cbz	r0, 800e236 <pow+0x52>
 800e222:	4630      	mov	r0, r6
 800e224:	4639      	mov	r1, r7
 800e226:	f7f2 fc27 	bl	8000a78 <__aeabi_dcmpeq>
 800e22a:	2800      	cmp	r0, #0
 800e22c:	d17b      	bne.n	800e326 <pow+0x142>
 800e22e:	4620      	mov	r0, r4
 800e230:	4629      	mov	r1, r5
 800e232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e236:	4640      	mov	r0, r8
 800e238:	4649      	mov	r1, r9
 800e23a:	f7f2 fc1d 	bl	8000a78 <__aeabi_dcmpeq>
 800e23e:	b1e0      	cbz	r0, 800e27a <pow+0x96>
 800e240:	2200      	movs	r2, #0
 800e242:	2300      	movs	r3, #0
 800e244:	4630      	mov	r0, r6
 800e246:	4639      	mov	r1, r7
 800e248:	f7f2 fc16 	bl	8000a78 <__aeabi_dcmpeq>
 800e24c:	2800      	cmp	r0, #0
 800e24e:	d16a      	bne.n	800e326 <pow+0x142>
 800e250:	4630      	mov	r0, r6
 800e252:	4639      	mov	r1, r7
 800e254:	f000 fe39 	bl	800eeca <finite>
 800e258:	2800      	cmp	r0, #0
 800e25a:	d0e8      	beq.n	800e22e <pow+0x4a>
 800e25c:	2200      	movs	r2, #0
 800e25e:	2300      	movs	r3, #0
 800e260:	4630      	mov	r0, r6
 800e262:	4639      	mov	r1, r7
 800e264:	f7f2 fc12 	bl	8000a8c <__aeabi_dcmplt>
 800e268:	2800      	cmp	r0, #0
 800e26a:	d0e0      	beq.n	800e22e <pow+0x4a>
 800e26c:	f7fe ffbe 	bl	800d1ec <__errno>
 800e270:	2321      	movs	r3, #33	; 0x21
 800e272:	2400      	movs	r4, #0
 800e274:	6003      	str	r3, [r0, #0]
 800e276:	4d2e      	ldr	r5, [pc, #184]	; (800e330 <pow+0x14c>)
 800e278:	e7d9      	b.n	800e22e <pow+0x4a>
 800e27a:	4620      	mov	r0, r4
 800e27c:	4629      	mov	r1, r5
 800e27e:	f000 fe24 	bl	800eeca <finite>
 800e282:	bba8      	cbnz	r0, 800e2f0 <pow+0x10c>
 800e284:	4640      	mov	r0, r8
 800e286:	4649      	mov	r1, r9
 800e288:	f000 fe1f 	bl	800eeca <finite>
 800e28c:	b380      	cbz	r0, 800e2f0 <pow+0x10c>
 800e28e:	4630      	mov	r0, r6
 800e290:	4639      	mov	r1, r7
 800e292:	f000 fe1a 	bl	800eeca <finite>
 800e296:	b358      	cbz	r0, 800e2f0 <pow+0x10c>
 800e298:	4622      	mov	r2, r4
 800e29a:	462b      	mov	r3, r5
 800e29c:	4620      	mov	r0, r4
 800e29e:	4629      	mov	r1, r5
 800e2a0:	f7f2 fc1c 	bl	8000adc <__aeabi_dcmpun>
 800e2a4:	b160      	cbz	r0, 800e2c0 <pow+0xdc>
 800e2a6:	f7fe ffa1 	bl	800d1ec <__errno>
 800e2aa:	2321      	movs	r3, #33	; 0x21
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	6003      	str	r3, [r0, #0]
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	4610      	mov	r0, r2
 800e2b4:	4619      	mov	r1, r3
 800e2b6:	f7f2 faa1 	bl	80007fc <__aeabi_ddiv>
 800e2ba:	4604      	mov	r4, r0
 800e2bc:	460d      	mov	r5, r1
 800e2be:	e7b6      	b.n	800e22e <pow+0x4a>
 800e2c0:	f7fe ff94 	bl	800d1ec <__errno>
 800e2c4:	2322      	movs	r3, #34	; 0x22
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	6003      	str	r3, [r0, #0]
 800e2ca:	4649      	mov	r1, r9
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	4640      	mov	r0, r8
 800e2d0:	f7f2 fbdc 	bl	8000a8c <__aeabi_dcmplt>
 800e2d4:	2400      	movs	r4, #0
 800e2d6:	b148      	cbz	r0, 800e2ec <pow+0x108>
 800e2d8:	4630      	mov	r0, r6
 800e2da:	4639      	mov	r1, r7
 800e2dc:	f000 fe02 	bl	800eee4 <rint>
 800e2e0:	4632      	mov	r2, r6
 800e2e2:	463b      	mov	r3, r7
 800e2e4:	f7f2 fbc8 	bl	8000a78 <__aeabi_dcmpeq>
 800e2e8:	2800      	cmp	r0, #0
 800e2ea:	d0c4      	beq.n	800e276 <pow+0x92>
 800e2ec:	4d11      	ldr	r5, [pc, #68]	; (800e334 <pow+0x150>)
 800e2ee:	e79e      	b.n	800e22e <pow+0x4a>
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	4620      	mov	r0, r4
 800e2f6:	4629      	mov	r1, r5
 800e2f8:	f7f2 fbbe 	bl	8000a78 <__aeabi_dcmpeq>
 800e2fc:	2800      	cmp	r0, #0
 800e2fe:	d096      	beq.n	800e22e <pow+0x4a>
 800e300:	4640      	mov	r0, r8
 800e302:	4649      	mov	r1, r9
 800e304:	f000 fde1 	bl	800eeca <finite>
 800e308:	2800      	cmp	r0, #0
 800e30a:	d090      	beq.n	800e22e <pow+0x4a>
 800e30c:	4630      	mov	r0, r6
 800e30e:	4639      	mov	r1, r7
 800e310:	f000 fddb 	bl	800eeca <finite>
 800e314:	2800      	cmp	r0, #0
 800e316:	d08a      	beq.n	800e22e <pow+0x4a>
 800e318:	f7fe ff68 	bl	800d1ec <__errno>
 800e31c:	2322      	movs	r3, #34	; 0x22
 800e31e:	2400      	movs	r4, #0
 800e320:	2500      	movs	r5, #0
 800e322:	6003      	str	r3, [r0, #0]
 800e324:	e783      	b.n	800e22e <pow+0x4a>
 800e326:	2400      	movs	r4, #0
 800e328:	4d03      	ldr	r5, [pc, #12]	; (800e338 <pow+0x154>)
 800e32a:	e780      	b.n	800e22e <pow+0x4a>
 800e32c:	200000bc 	.word	0x200000bc
 800e330:	fff00000 	.word	0xfff00000
 800e334:	7ff00000 	.word	0x7ff00000
 800e338:	3ff00000 	.word	0x3ff00000
 800e33c:	00000000 	.word	0x00000000

0800e340 <__ieee754_pow>:
 800e340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e344:	b093      	sub	sp, #76	; 0x4c
 800e346:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e34a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800e34e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800e352:	ea55 0302 	orrs.w	r3, r5, r2
 800e356:	4607      	mov	r7, r0
 800e358:	4688      	mov	r8, r1
 800e35a:	f000 84bf 	beq.w	800ecdc <__ieee754_pow+0x99c>
 800e35e:	4b7e      	ldr	r3, [pc, #504]	; (800e558 <__ieee754_pow+0x218>)
 800e360:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800e364:	429c      	cmp	r4, r3
 800e366:	4689      	mov	r9, r1
 800e368:	4682      	mov	sl, r0
 800e36a:	dc09      	bgt.n	800e380 <__ieee754_pow+0x40>
 800e36c:	d103      	bne.n	800e376 <__ieee754_pow+0x36>
 800e36e:	b978      	cbnz	r0, 800e390 <__ieee754_pow+0x50>
 800e370:	42a5      	cmp	r5, r4
 800e372:	dd02      	ble.n	800e37a <__ieee754_pow+0x3a>
 800e374:	e00c      	b.n	800e390 <__ieee754_pow+0x50>
 800e376:	429d      	cmp	r5, r3
 800e378:	dc02      	bgt.n	800e380 <__ieee754_pow+0x40>
 800e37a:	429d      	cmp	r5, r3
 800e37c:	d10e      	bne.n	800e39c <__ieee754_pow+0x5c>
 800e37e:	b16a      	cbz	r2, 800e39c <__ieee754_pow+0x5c>
 800e380:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e384:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e388:	ea54 030a 	orrs.w	r3, r4, sl
 800e38c:	f000 84a6 	beq.w	800ecdc <__ieee754_pow+0x99c>
 800e390:	4872      	ldr	r0, [pc, #456]	; (800e55c <__ieee754_pow+0x21c>)
 800e392:	b013      	add	sp, #76	; 0x4c
 800e394:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e398:	f000 bd9e 	b.w	800eed8 <nan>
 800e39c:	f1b9 0f00 	cmp.w	r9, #0
 800e3a0:	da39      	bge.n	800e416 <__ieee754_pow+0xd6>
 800e3a2:	4b6f      	ldr	r3, [pc, #444]	; (800e560 <__ieee754_pow+0x220>)
 800e3a4:	429d      	cmp	r5, r3
 800e3a6:	dc54      	bgt.n	800e452 <__ieee754_pow+0x112>
 800e3a8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e3ac:	429d      	cmp	r5, r3
 800e3ae:	f340 84a6 	ble.w	800ecfe <__ieee754_pow+0x9be>
 800e3b2:	152b      	asrs	r3, r5, #20
 800e3b4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e3b8:	2b14      	cmp	r3, #20
 800e3ba:	dd0f      	ble.n	800e3dc <__ieee754_pow+0x9c>
 800e3bc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e3c0:	fa22 f103 	lsr.w	r1, r2, r3
 800e3c4:	fa01 f303 	lsl.w	r3, r1, r3
 800e3c8:	4293      	cmp	r3, r2
 800e3ca:	f040 8498 	bne.w	800ecfe <__ieee754_pow+0x9be>
 800e3ce:	f001 0101 	and.w	r1, r1, #1
 800e3d2:	f1c1 0302 	rsb	r3, r1, #2
 800e3d6:	9300      	str	r3, [sp, #0]
 800e3d8:	b182      	cbz	r2, 800e3fc <__ieee754_pow+0xbc>
 800e3da:	e05e      	b.n	800e49a <__ieee754_pow+0x15a>
 800e3dc:	2a00      	cmp	r2, #0
 800e3de:	d15a      	bne.n	800e496 <__ieee754_pow+0x156>
 800e3e0:	f1c3 0314 	rsb	r3, r3, #20
 800e3e4:	fa45 f103 	asr.w	r1, r5, r3
 800e3e8:	fa01 f303 	lsl.w	r3, r1, r3
 800e3ec:	42ab      	cmp	r3, r5
 800e3ee:	f040 8483 	bne.w	800ecf8 <__ieee754_pow+0x9b8>
 800e3f2:	f001 0101 	and.w	r1, r1, #1
 800e3f6:	f1c1 0302 	rsb	r3, r1, #2
 800e3fa:	9300      	str	r3, [sp, #0]
 800e3fc:	4b59      	ldr	r3, [pc, #356]	; (800e564 <__ieee754_pow+0x224>)
 800e3fe:	429d      	cmp	r5, r3
 800e400:	d130      	bne.n	800e464 <__ieee754_pow+0x124>
 800e402:	2e00      	cmp	r6, #0
 800e404:	f280 8474 	bge.w	800ecf0 <__ieee754_pow+0x9b0>
 800e408:	463a      	mov	r2, r7
 800e40a:	4643      	mov	r3, r8
 800e40c:	2000      	movs	r0, #0
 800e40e:	4955      	ldr	r1, [pc, #340]	; (800e564 <__ieee754_pow+0x224>)
 800e410:	f7f2 f9f4 	bl	80007fc <__aeabi_ddiv>
 800e414:	e02f      	b.n	800e476 <__ieee754_pow+0x136>
 800e416:	2300      	movs	r3, #0
 800e418:	9300      	str	r3, [sp, #0]
 800e41a:	2a00      	cmp	r2, #0
 800e41c:	d13d      	bne.n	800e49a <__ieee754_pow+0x15a>
 800e41e:	4b4e      	ldr	r3, [pc, #312]	; (800e558 <__ieee754_pow+0x218>)
 800e420:	429d      	cmp	r5, r3
 800e422:	d1eb      	bne.n	800e3fc <__ieee754_pow+0xbc>
 800e424:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e428:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e42c:	ea53 030a 	orrs.w	r3, r3, sl
 800e430:	f000 8454 	beq.w	800ecdc <__ieee754_pow+0x99c>
 800e434:	4b4c      	ldr	r3, [pc, #304]	; (800e568 <__ieee754_pow+0x228>)
 800e436:	429c      	cmp	r4, r3
 800e438:	dd0d      	ble.n	800e456 <__ieee754_pow+0x116>
 800e43a:	2e00      	cmp	r6, #0
 800e43c:	f280 8454 	bge.w	800ece8 <__ieee754_pow+0x9a8>
 800e440:	f04f 0b00 	mov.w	fp, #0
 800e444:	f04f 0c00 	mov.w	ip, #0
 800e448:	4658      	mov	r0, fp
 800e44a:	4661      	mov	r1, ip
 800e44c:	b013      	add	sp, #76	; 0x4c
 800e44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e452:	2302      	movs	r3, #2
 800e454:	e7e0      	b.n	800e418 <__ieee754_pow+0xd8>
 800e456:	2e00      	cmp	r6, #0
 800e458:	daf2      	bge.n	800e440 <__ieee754_pow+0x100>
 800e45a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800e45e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800e462:	e7f1      	b.n	800e448 <__ieee754_pow+0x108>
 800e464:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800e468:	d108      	bne.n	800e47c <__ieee754_pow+0x13c>
 800e46a:	463a      	mov	r2, r7
 800e46c:	4643      	mov	r3, r8
 800e46e:	4638      	mov	r0, r7
 800e470:	4641      	mov	r1, r8
 800e472:	f7f2 f899 	bl	80005a8 <__aeabi_dmul>
 800e476:	4683      	mov	fp, r0
 800e478:	468c      	mov	ip, r1
 800e47a:	e7e5      	b.n	800e448 <__ieee754_pow+0x108>
 800e47c:	4b3b      	ldr	r3, [pc, #236]	; (800e56c <__ieee754_pow+0x22c>)
 800e47e:	429e      	cmp	r6, r3
 800e480:	d10b      	bne.n	800e49a <__ieee754_pow+0x15a>
 800e482:	f1b9 0f00 	cmp.w	r9, #0
 800e486:	db08      	blt.n	800e49a <__ieee754_pow+0x15a>
 800e488:	4638      	mov	r0, r7
 800e48a:	4641      	mov	r1, r8
 800e48c:	b013      	add	sp, #76	; 0x4c
 800e48e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e492:	f000 bc6b 	b.w	800ed6c <__ieee754_sqrt>
 800e496:	2300      	movs	r3, #0
 800e498:	9300      	str	r3, [sp, #0]
 800e49a:	4638      	mov	r0, r7
 800e49c:	4641      	mov	r1, r8
 800e49e:	f000 fd11 	bl	800eec4 <fabs>
 800e4a2:	4683      	mov	fp, r0
 800e4a4:	468c      	mov	ip, r1
 800e4a6:	f1ba 0f00 	cmp.w	sl, #0
 800e4aa:	d129      	bne.n	800e500 <__ieee754_pow+0x1c0>
 800e4ac:	b124      	cbz	r4, 800e4b8 <__ieee754_pow+0x178>
 800e4ae:	4b2d      	ldr	r3, [pc, #180]	; (800e564 <__ieee754_pow+0x224>)
 800e4b0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	d123      	bne.n	800e500 <__ieee754_pow+0x1c0>
 800e4b8:	2e00      	cmp	r6, #0
 800e4ba:	da07      	bge.n	800e4cc <__ieee754_pow+0x18c>
 800e4bc:	465a      	mov	r2, fp
 800e4be:	4663      	mov	r3, ip
 800e4c0:	2000      	movs	r0, #0
 800e4c2:	4928      	ldr	r1, [pc, #160]	; (800e564 <__ieee754_pow+0x224>)
 800e4c4:	f7f2 f99a 	bl	80007fc <__aeabi_ddiv>
 800e4c8:	4683      	mov	fp, r0
 800e4ca:	468c      	mov	ip, r1
 800e4cc:	f1b9 0f00 	cmp.w	r9, #0
 800e4d0:	daba      	bge.n	800e448 <__ieee754_pow+0x108>
 800e4d2:	9b00      	ldr	r3, [sp, #0]
 800e4d4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e4d8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e4dc:	4323      	orrs	r3, r4
 800e4de:	d108      	bne.n	800e4f2 <__ieee754_pow+0x1b2>
 800e4e0:	465a      	mov	r2, fp
 800e4e2:	4663      	mov	r3, ip
 800e4e4:	4658      	mov	r0, fp
 800e4e6:	4661      	mov	r1, ip
 800e4e8:	f7f1 fea6 	bl	8000238 <__aeabi_dsub>
 800e4ec:	4602      	mov	r2, r0
 800e4ee:	460b      	mov	r3, r1
 800e4f0:	e78e      	b.n	800e410 <__ieee754_pow+0xd0>
 800e4f2:	9b00      	ldr	r3, [sp, #0]
 800e4f4:	2b01      	cmp	r3, #1
 800e4f6:	d1a7      	bne.n	800e448 <__ieee754_pow+0x108>
 800e4f8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800e4fc:	469c      	mov	ip, r3
 800e4fe:	e7a3      	b.n	800e448 <__ieee754_pow+0x108>
 800e500:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800e504:	3b01      	subs	r3, #1
 800e506:	930c      	str	r3, [sp, #48]	; 0x30
 800e508:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e50a:	9b00      	ldr	r3, [sp, #0]
 800e50c:	4313      	orrs	r3, r2
 800e50e:	d104      	bne.n	800e51a <__ieee754_pow+0x1da>
 800e510:	463a      	mov	r2, r7
 800e512:	4643      	mov	r3, r8
 800e514:	4638      	mov	r0, r7
 800e516:	4641      	mov	r1, r8
 800e518:	e7e6      	b.n	800e4e8 <__ieee754_pow+0x1a8>
 800e51a:	4b15      	ldr	r3, [pc, #84]	; (800e570 <__ieee754_pow+0x230>)
 800e51c:	429d      	cmp	r5, r3
 800e51e:	f340 80f9 	ble.w	800e714 <__ieee754_pow+0x3d4>
 800e522:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e526:	429d      	cmp	r5, r3
 800e528:	4b0f      	ldr	r3, [pc, #60]	; (800e568 <__ieee754_pow+0x228>)
 800e52a:	dd09      	ble.n	800e540 <__ieee754_pow+0x200>
 800e52c:	429c      	cmp	r4, r3
 800e52e:	dc0c      	bgt.n	800e54a <__ieee754_pow+0x20a>
 800e530:	2e00      	cmp	r6, #0
 800e532:	da85      	bge.n	800e440 <__ieee754_pow+0x100>
 800e534:	a306      	add	r3, pc, #24	; (adr r3, 800e550 <__ieee754_pow+0x210>)
 800e536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e53a:	4610      	mov	r0, r2
 800e53c:	4619      	mov	r1, r3
 800e53e:	e798      	b.n	800e472 <__ieee754_pow+0x132>
 800e540:	429c      	cmp	r4, r3
 800e542:	dbf5      	blt.n	800e530 <__ieee754_pow+0x1f0>
 800e544:	4b07      	ldr	r3, [pc, #28]	; (800e564 <__ieee754_pow+0x224>)
 800e546:	429c      	cmp	r4, r3
 800e548:	dd14      	ble.n	800e574 <__ieee754_pow+0x234>
 800e54a:	2e00      	cmp	r6, #0
 800e54c:	dcf2      	bgt.n	800e534 <__ieee754_pow+0x1f4>
 800e54e:	e777      	b.n	800e440 <__ieee754_pow+0x100>
 800e550:	8800759c 	.word	0x8800759c
 800e554:	7e37e43c 	.word	0x7e37e43c
 800e558:	7ff00000 	.word	0x7ff00000
 800e55c:	0800f5d9 	.word	0x0800f5d9
 800e560:	433fffff 	.word	0x433fffff
 800e564:	3ff00000 	.word	0x3ff00000
 800e568:	3fefffff 	.word	0x3fefffff
 800e56c:	3fe00000 	.word	0x3fe00000
 800e570:	41e00000 	.word	0x41e00000
 800e574:	4661      	mov	r1, ip
 800e576:	2200      	movs	r2, #0
 800e578:	4658      	mov	r0, fp
 800e57a:	4b61      	ldr	r3, [pc, #388]	; (800e700 <__ieee754_pow+0x3c0>)
 800e57c:	f7f1 fe5c 	bl	8000238 <__aeabi_dsub>
 800e580:	a355      	add	r3, pc, #340	; (adr r3, 800e6d8 <__ieee754_pow+0x398>)
 800e582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e586:	4604      	mov	r4, r0
 800e588:	460d      	mov	r5, r1
 800e58a:	f7f2 f80d 	bl	80005a8 <__aeabi_dmul>
 800e58e:	a354      	add	r3, pc, #336	; (adr r3, 800e6e0 <__ieee754_pow+0x3a0>)
 800e590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e594:	4606      	mov	r6, r0
 800e596:	460f      	mov	r7, r1
 800e598:	4620      	mov	r0, r4
 800e59a:	4629      	mov	r1, r5
 800e59c:	f7f2 f804 	bl	80005a8 <__aeabi_dmul>
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	4682      	mov	sl, r0
 800e5a4:	468b      	mov	fp, r1
 800e5a6:	4620      	mov	r0, r4
 800e5a8:	4629      	mov	r1, r5
 800e5aa:	4b56      	ldr	r3, [pc, #344]	; (800e704 <__ieee754_pow+0x3c4>)
 800e5ac:	f7f1 fffc 	bl	80005a8 <__aeabi_dmul>
 800e5b0:	4602      	mov	r2, r0
 800e5b2:	460b      	mov	r3, r1
 800e5b4:	a14c      	add	r1, pc, #304	; (adr r1, 800e6e8 <__ieee754_pow+0x3a8>)
 800e5b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5ba:	f7f1 fe3d 	bl	8000238 <__aeabi_dsub>
 800e5be:	4622      	mov	r2, r4
 800e5c0:	462b      	mov	r3, r5
 800e5c2:	f7f1 fff1 	bl	80005a8 <__aeabi_dmul>
 800e5c6:	4602      	mov	r2, r0
 800e5c8:	460b      	mov	r3, r1
 800e5ca:	2000      	movs	r0, #0
 800e5cc:	494e      	ldr	r1, [pc, #312]	; (800e708 <__ieee754_pow+0x3c8>)
 800e5ce:	f7f1 fe33 	bl	8000238 <__aeabi_dsub>
 800e5d2:	4622      	mov	r2, r4
 800e5d4:	462b      	mov	r3, r5
 800e5d6:	4680      	mov	r8, r0
 800e5d8:	4689      	mov	r9, r1
 800e5da:	4620      	mov	r0, r4
 800e5dc:	4629      	mov	r1, r5
 800e5de:	f7f1 ffe3 	bl	80005a8 <__aeabi_dmul>
 800e5e2:	4602      	mov	r2, r0
 800e5e4:	460b      	mov	r3, r1
 800e5e6:	4640      	mov	r0, r8
 800e5e8:	4649      	mov	r1, r9
 800e5ea:	f7f1 ffdd 	bl	80005a8 <__aeabi_dmul>
 800e5ee:	a340      	add	r3, pc, #256	; (adr r3, 800e6f0 <__ieee754_pow+0x3b0>)
 800e5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f4:	f7f1 ffd8 	bl	80005a8 <__aeabi_dmul>
 800e5f8:	4602      	mov	r2, r0
 800e5fa:	460b      	mov	r3, r1
 800e5fc:	4650      	mov	r0, sl
 800e5fe:	4659      	mov	r1, fp
 800e600:	f7f1 fe1a 	bl	8000238 <__aeabi_dsub>
 800e604:	f04f 0a00 	mov.w	sl, #0
 800e608:	4602      	mov	r2, r0
 800e60a:	460b      	mov	r3, r1
 800e60c:	4604      	mov	r4, r0
 800e60e:	460d      	mov	r5, r1
 800e610:	4630      	mov	r0, r6
 800e612:	4639      	mov	r1, r7
 800e614:	f7f1 fe12 	bl	800023c <__adddf3>
 800e618:	4632      	mov	r2, r6
 800e61a:	463b      	mov	r3, r7
 800e61c:	4650      	mov	r0, sl
 800e61e:	468b      	mov	fp, r1
 800e620:	f7f1 fe0a 	bl	8000238 <__aeabi_dsub>
 800e624:	4602      	mov	r2, r0
 800e626:	460b      	mov	r3, r1
 800e628:	4620      	mov	r0, r4
 800e62a:	4629      	mov	r1, r5
 800e62c:	f7f1 fe04 	bl	8000238 <__aeabi_dsub>
 800e630:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e634:	9b00      	ldr	r3, [sp, #0]
 800e636:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e638:	3b01      	subs	r3, #1
 800e63a:	4313      	orrs	r3, r2
 800e63c:	f04f 0600 	mov.w	r6, #0
 800e640:	f04f 0200 	mov.w	r2, #0
 800e644:	bf0c      	ite	eq
 800e646:	4b31      	ldreq	r3, [pc, #196]	; (800e70c <__ieee754_pow+0x3cc>)
 800e648:	4b2d      	ldrne	r3, [pc, #180]	; (800e700 <__ieee754_pow+0x3c0>)
 800e64a:	4604      	mov	r4, r0
 800e64c:	460d      	mov	r5, r1
 800e64e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e652:	e9cd 2300 	strd	r2, r3, [sp]
 800e656:	4632      	mov	r2, r6
 800e658:	463b      	mov	r3, r7
 800e65a:	f7f1 fded 	bl	8000238 <__aeabi_dsub>
 800e65e:	4652      	mov	r2, sl
 800e660:	465b      	mov	r3, fp
 800e662:	f7f1 ffa1 	bl	80005a8 <__aeabi_dmul>
 800e666:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e66a:	4680      	mov	r8, r0
 800e66c:	4689      	mov	r9, r1
 800e66e:	4620      	mov	r0, r4
 800e670:	4629      	mov	r1, r5
 800e672:	f7f1 ff99 	bl	80005a8 <__aeabi_dmul>
 800e676:	4602      	mov	r2, r0
 800e678:	460b      	mov	r3, r1
 800e67a:	4640      	mov	r0, r8
 800e67c:	4649      	mov	r1, r9
 800e67e:	f7f1 fddd 	bl	800023c <__adddf3>
 800e682:	4632      	mov	r2, r6
 800e684:	463b      	mov	r3, r7
 800e686:	4680      	mov	r8, r0
 800e688:	4689      	mov	r9, r1
 800e68a:	4650      	mov	r0, sl
 800e68c:	4659      	mov	r1, fp
 800e68e:	f7f1 ff8b 	bl	80005a8 <__aeabi_dmul>
 800e692:	4604      	mov	r4, r0
 800e694:	460d      	mov	r5, r1
 800e696:	460b      	mov	r3, r1
 800e698:	4602      	mov	r2, r0
 800e69a:	4649      	mov	r1, r9
 800e69c:	4640      	mov	r0, r8
 800e69e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800e6a2:	f7f1 fdcb 	bl	800023c <__adddf3>
 800e6a6:	4b1a      	ldr	r3, [pc, #104]	; (800e710 <__ieee754_pow+0x3d0>)
 800e6a8:	4682      	mov	sl, r0
 800e6aa:	4299      	cmp	r1, r3
 800e6ac:	460f      	mov	r7, r1
 800e6ae:	460e      	mov	r6, r1
 800e6b0:	f340 82ed 	ble.w	800ec8e <__ieee754_pow+0x94e>
 800e6b4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e6b8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e6bc:	4303      	orrs	r3, r0
 800e6be:	f000 81e7 	beq.w	800ea90 <__ieee754_pow+0x750>
 800e6c2:	a30d      	add	r3, pc, #52	; (adr r3, 800e6f8 <__ieee754_pow+0x3b8>)
 800e6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e6cc:	f7f1 ff6c 	bl	80005a8 <__aeabi_dmul>
 800e6d0:	a309      	add	r3, pc, #36	; (adr r3, 800e6f8 <__ieee754_pow+0x3b8>)
 800e6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d6:	e6cc      	b.n	800e472 <__ieee754_pow+0x132>
 800e6d8:	60000000 	.word	0x60000000
 800e6dc:	3ff71547 	.word	0x3ff71547
 800e6e0:	f85ddf44 	.word	0xf85ddf44
 800e6e4:	3e54ae0b 	.word	0x3e54ae0b
 800e6e8:	55555555 	.word	0x55555555
 800e6ec:	3fd55555 	.word	0x3fd55555
 800e6f0:	652b82fe 	.word	0x652b82fe
 800e6f4:	3ff71547 	.word	0x3ff71547
 800e6f8:	8800759c 	.word	0x8800759c
 800e6fc:	7e37e43c 	.word	0x7e37e43c
 800e700:	3ff00000 	.word	0x3ff00000
 800e704:	3fd00000 	.word	0x3fd00000
 800e708:	3fe00000 	.word	0x3fe00000
 800e70c:	bff00000 	.word	0xbff00000
 800e710:	408fffff 	.word	0x408fffff
 800e714:	4bd4      	ldr	r3, [pc, #848]	; (800ea68 <__ieee754_pow+0x728>)
 800e716:	2200      	movs	r2, #0
 800e718:	ea09 0303 	and.w	r3, r9, r3
 800e71c:	b943      	cbnz	r3, 800e730 <__ieee754_pow+0x3f0>
 800e71e:	4658      	mov	r0, fp
 800e720:	4661      	mov	r1, ip
 800e722:	4bd2      	ldr	r3, [pc, #840]	; (800ea6c <__ieee754_pow+0x72c>)
 800e724:	f7f1 ff40 	bl	80005a8 <__aeabi_dmul>
 800e728:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e72c:	4683      	mov	fp, r0
 800e72e:	460c      	mov	r4, r1
 800e730:	1523      	asrs	r3, r4, #20
 800e732:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e736:	4413      	add	r3, r2
 800e738:	930b      	str	r3, [sp, #44]	; 0x2c
 800e73a:	4bcd      	ldr	r3, [pc, #820]	; (800ea70 <__ieee754_pow+0x730>)
 800e73c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e740:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e744:	429c      	cmp	r4, r3
 800e746:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e74a:	dd08      	ble.n	800e75e <__ieee754_pow+0x41e>
 800e74c:	4bc9      	ldr	r3, [pc, #804]	; (800ea74 <__ieee754_pow+0x734>)
 800e74e:	429c      	cmp	r4, r3
 800e750:	f340 819c 	ble.w	800ea8c <__ieee754_pow+0x74c>
 800e754:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e756:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e75a:	3301      	adds	r3, #1
 800e75c:	930b      	str	r3, [sp, #44]	; 0x2c
 800e75e:	2600      	movs	r6, #0
 800e760:	00f3      	lsls	r3, r6, #3
 800e762:	930d      	str	r3, [sp, #52]	; 0x34
 800e764:	4bc4      	ldr	r3, [pc, #784]	; (800ea78 <__ieee754_pow+0x738>)
 800e766:	4658      	mov	r0, fp
 800e768:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e76c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e770:	4629      	mov	r1, r5
 800e772:	461a      	mov	r2, r3
 800e774:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800e778:	4623      	mov	r3, r4
 800e77a:	f7f1 fd5d 	bl	8000238 <__aeabi_dsub>
 800e77e:	46da      	mov	sl, fp
 800e780:	462b      	mov	r3, r5
 800e782:	4652      	mov	r2, sl
 800e784:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800e788:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e78c:	f7f1 fd56 	bl	800023c <__adddf3>
 800e790:	4602      	mov	r2, r0
 800e792:	460b      	mov	r3, r1
 800e794:	2000      	movs	r0, #0
 800e796:	49b9      	ldr	r1, [pc, #740]	; (800ea7c <__ieee754_pow+0x73c>)
 800e798:	f7f2 f830 	bl	80007fc <__aeabi_ddiv>
 800e79c:	4602      	mov	r2, r0
 800e79e:	460b      	mov	r3, r1
 800e7a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e7a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e7a8:	f7f1 fefe 	bl	80005a8 <__aeabi_dmul>
 800e7ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e7b0:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800e7b4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	46ab      	mov	fp, r5
 800e7be:	106d      	asrs	r5, r5, #1
 800e7c0:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e7c4:	9304      	str	r3, [sp, #16]
 800e7c6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e7ca:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e7ce:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800e7d2:	4640      	mov	r0, r8
 800e7d4:	4649      	mov	r1, r9
 800e7d6:	4614      	mov	r4, r2
 800e7d8:	461d      	mov	r5, r3
 800e7da:	f7f1 fee5 	bl	80005a8 <__aeabi_dmul>
 800e7de:	4602      	mov	r2, r0
 800e7e0:	460b      	mov	r3, r1
 800e7e2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e7e6:	f7f1 fd27 	bl	8000238 <__aeabi_dsub>
 800e7ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e7ee:	4606      	mov	r6, r0
 800e7f0:	460f      	mov	r7, r1
 800e7f2:	4620      	mov	r0, r4
 800e7f4:	4629      	mov	r1, r5
 800e7f6:	f7f1 fd1f 	bl	8000238 <__aeabi_dsub>
 800e7fa:	4602      	mov	r2, r0
 800e7fc:	460b      	mov	r3, r1
 800e7fe:	4650      	mov	r0, sl
 800e800:	4659      	mov	r1, fp
 800e802:	f7f1 fd19 	bl	8000238 <__aeabi_dsub>
 800e806:	4642      	mov	r2, r8
 800e808:	464b      	mov	r3, r9
 800e80a:	f7f1 fecd 	bl	80005a8 <__aeabi_dmul>
 800e80e:	4602      	mov	r2, r0
 800e810:	460b      	mov	r3, r1
 800e812:	4630      	mov	r0, r6
 800e814:	4639      	mov	r1, r7
 800e816:	f7f1 fd0f 	bl	8000238 <__aeabi_dsub>
 800e81a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e81e:	f7f1 fec3 	bl	80005a8 <__aeabi_dmul>
 800e822:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e826:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e82a:	4610      	mov	r0, r2
 800e82c:	4619      	mov	r1, r3
 800e82e:	f7f1 febb 	bl	80005a8 <__aeabi_dmul>
 800e832:	a37b      	add	r3, pc, #492	; (adr r3, 800ea20 <__ieee754_pow+0x6e0>)
 800e834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e838:	4604      	mov	r4, r0
 800e83a:	460d      	mov	r5, r1
 800e83c:	f7f1 feb4 	bl	80005a8 <__aeabi_dmul>
 800e840:	a379      	add	r3, pc, #484	; (adr r3, 800ea28 <__ieee754_pow+0x6e8>)
 800e842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e846:	f7f1 fcf9 	bl	800023c <__adddf3>
 800e84a:	4622      	mov	r2, r4
 800e84c:	462b      	mov	r3, r5
 800e84e:	f7f1 feab 	bl	80005a8 <__aeabi_dmul>
 800e852:	a377      	add	r3, pc, #476	; (adr r3, 800ea30 <__ieee754_pow+0x6f0>)
 800e854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e858:	f7f1 fcf0 	bl	800023c <__adddf3>
 800e85c:	4622      	mov	r2, r4
 800e85e:	462b      	mov	r3, r5
 800e860:	f7f1 fea2 	bl	80005a8 <__aeabi_dmul>
 800e864:	a374      	add	r3, pc, #464	; (adr r3, 800ea38 <__ieee754_pow+0x6f8>)
 800e866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e86a:	f7f1 fce7 	bl	800023c <__adddf3>
 800e86e:	4622      	mov	r2, r4
 800e870:	462b      	mov	r3, r5
 800e872:	f7f1 fe99 	bl	80005a8 <__aeabi_dmul>
 800e876:	a372      	add	r3, pc, #456	; (adr r3, 800ea40 <__ieee754_pow+0x700>)
 800e878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e87c:	f7f1 fcde 	bl	800023c <__adddf3>
 800e880:	4622      	mov	r2, r4
 800e882:	462b      	mov	r3, r5
 800e884:	f7f1 fe90 	bl	80005a8 <__aeabi_dmul>
 800e888:	a36f      	add	r3, pc, #444	; (adr r3, 800ea48 <__ieee754_pow+0x708>)
 800e88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e88e:	f7f1 fcd5 	bl	800023c <__adddf3>
 800e892:	4622      	mov	r2, r4
 800e894:	4606      	mov	r6, r0
 800e896:	460f      	mov	r7, r1
 800e898:	462b      	mov	r3, r5
 800e89a:	4620      	mov	r0, r4
 800e89c:	4629      	mov	r1, r5
 800e89e:	f7f1 fe83 	bl	80005a8 <__aeabi_dmul>
 800e8a2:	4602      	mov	r2, r0
 800e8a4:	460b      	mov	r3, r1
 800e8a6:	4630      	mov	r0, r6
 800e8a8:	4639      	mov	r1, r7
 800e8aa:	f7f1 fe7d 	bl	80005a8 <__aeabi_dmul>
 800e8ae:	4604      	mov	r4, r0
 800e8b0:	460d      	mov	r5, r1
 800e8b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e8b6:	4642      	mov	r2, r8
 800e8b8:	464b      	mov	r3, r9
 800e8ba:	f7f1 fcbf 	bl	800023c <__adddf3>
 800e8be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e8c2:	f7f1 fe71 	bl	80005a8 <__aeabi_dmul>
 800e8c6:	4622      	mov	r2, r4
 800e8c8:	462b      	mov	r3, r5
 800e8ca:	f7f1 fcb7 	bl	800023c <__adddf3>
 800e8ce:	4642      	mov	r2, r8
 800e8d0:	4606      	mov	r6, r0
 800e8d2:	460f      	mov	r7, r1
 800e8d4:	464b      	mov	r3, r9
 800e8d6:	4640      	mov	r0, r8
 800e8d8:	4649      	mov	r1, r9
 800e8da:	f7f1 fe65 	bl	80005a8 <__aeabi_dmul>
 800e8de:	2200      	movs	r2, #0
 800e8e0:	4b67      	ldr	r3, [pc, #412]	; (800ea80 <__ieee754_pow+0x740>)
 800e8e2:	4682      	mov	sl, r0
 800e8e4:	468b      	mov	fp, r1
 800e8e6:	f7f1 fca9 	bl	800023c <__adddf3>
 800e8ea:	4632      	mov	r2, r6
 800e8ec:	463b      	mov	r3, r7
 800e8ee:	f7f1 fca5 	bl	800023c <__adddf3>
 800e8f2:	9c04      	ldr	r4, [sp, #16]
 800e8f4:	460d      	mov	r5, r1
 800e8f6:	4622      	mov	r2, r4
 800e8f8:	460b      	mov	r3, r1
 800e8fa:	4640      	mov	r0, r8
 800e8fc:	4649      	mov	r1, r9
 800e8fe:	f7f1 fe53 	bl	80005a8 <__aeabi_dmul>
 800e902:	2200      	movs	r2, #0
 800e904:	4680      	mov	r8, r0
 800e906:	4689      	mov	r9, r1
 800e908:	4620      	mov	r0, r4
 800e90a:	4629      	mov	r1, r5
 800e90c:	4b5c      	ldr	r3, [pc, #368]	; (800ea80 <__ieee754_pow+0x740>)
 800e90e:	f7f1 fc93 	bl	8000238 <__aeabi_dsub>
 800e912:	4652      	mov	r2, sl
 800e914:	465b      	mov	r3, fp
 800e916:	f7f1 fc8f 	bl	8000238 <__aeabi_dsub>
 800e91a:	4602      	mov	r2, r0
 800e91c:	460b      	mov	r3, r1
 800e91e:	4630      	mov	r0, r6
 800e920:	4639      	mov	r1, r7
 800e922:	f7f1 fc89 	bl	8000238 <__aeabi_dsub>
 800e926:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e92a:	f7f1 fe3d 	bl	80005a8 <__aeabi_dmul>
 800e92e:	4622      	mov	r2, r4
 800e930:	4606      	mov	r6, r0
 800e932:	460f      	mov	r7, r1
 800e934:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e938:	462b      	mov	r3, r5
 800e93a:	f7f1 fe35 	bl	80005a8 <__aeabi_dmul>
 800e93e:	4602      	mov	r2, r0
 800e940:	460b      	mov	r3, r1
 800e942:	4630      	mov	r0, r6
 800e944:	4639      	mov	r1, r7
 800e946:	f7f1 fc79 	bl	800023c <__adddf3>
 800e94a:	4606      	mov	r6, r0
 800e94c:	460f      	mov	r7, r1
 800e94e:	4602      	mov	r2, r0
 800e950:	460b      	mov	r3, r1
 800e952:	4640      	mov	r0, r8
 800e954:	4649      	mov	r1, r9
 800e956:	f7f1 fc71 	bl	800023c <__adddf3>
 800e95a:	a33d      	add	r3, pc, #244	; (adr r3, 800ea50 <__ieee754_pow+0x710>)
 800e95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e960:	9c04      	ldr	r4, [sp, #16]
 800e962:	460d      	mov	r5, r1
 800e964:	4620      	mov	r0, r4
 800e966:	f7f1 fe1f 	bl	80005a8 <__aeabi_dmul>
 800e96a:	4642      	mov	r2, r8
 800e96c:	464b      	mov	r3, r9
 800e96e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e972:	4620      	mov	r0, r4
 800e974:	4629      	mov	r1, r5
 800e976:	f7f1 fc5f 	bl	8000238 <__aeabi_dsub>
 800e97a:	4602      	mov	r2, r0
 800e97c:	460b      	mov	r3, r1
 800e97e:	4630      	mov	r0, r6
 800e980:	4639      	mov	r1, r7
 800e982:	f7f1 fc59 	bl	8000238 <__aeabi_dsub>
 800e986:	a334      	add	r3, pc, #208	; (adr r3, 800ea58 <__ieee754_pow+0x718>)
 800e988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e98c:	f7f1 fe0c 	bl	80005a8 <__aeabi_dmul>
 800e990:	a333      	add	r3, pc, #204	; (adr r3, 800ea60 <__ieee754_pow+0x720>)
 800e992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e996:	4606      	mov	r6, r0
 800e998:	460f      	mov	r7, r1
 800e99a:	4620      	mov	r0, r4
 800e99c:	4629      	mov	r1, r5
 800e99e:	f7f1 fe03 	bl	80005a8 <__aeabi_dmul>
 800e9a2:	4602      	mov	r2, r0
 800e9a4:	460b      	mov	r3, r1
 800e9a6:	4630      	mov	r0, r6
 800e9a8:	4639      	mov	r1, r7
 800e9aa:	f7f1 fc47 	bl	800023c <__adddf3>
 800e9ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e9b0:	4b34      	ldr	r3, [pc, #208]	; (800ea84 <__ieee754_pow+0x744>)
 800e9b2:	4413      	add	r3, r2
 800e9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b8:	f7f1 fc40 	bl	800023c <__adddf3>
 800e9bc:	4680      	mov	r8, r0
 800e9be:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e9c0:	4689      	mov	r9, r1
 800e9c2:	f7f1 fd87 	bl	80004d4 <__aeabi_i2d>
 800e9c6:	4604      	mov	r4, r0
 800e9c8:	460d      	mov	r5, r1
 800e9ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e9cc:	4b2e      	ldr	r3, [pc, #184]	; (800ea88 <__ieee754_pow+0x748>)
 800e9ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e9d2:	4413      	add	r3, r2
 800e9d4:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e9d8:	4642      	mov	r2, r8
 800e9da:	464b      	mov	r3, r9
 800e9dc:	f7f1 fc2e 	bl	800023c <__adddf3>
 800e9e0:	4632      	mov	r2, r6
 800e9e2:	463b      	mov	r3, r7
 800e9e4:	f7f1 fc2a 	bl	800023c <__adddf3>
 800e9e8:	4622      	mov	r2, r4
 800e9ea:	462b      	mov	r3, r5
 800e9ec:	f7f1 fc26 	bl	800023c <__adddf3>
 800e9f0:	f8dd a010 	ldr.w	sl, [sp, #16]
 800e9f4:	4622      	mov	r2, r4
 800e9f6:	462b      	mov	r3, r5
 800e9f8:	4650      	mov	r0, sl
 800e9fa:	468b      	mov	fp, r1
 800e9fc:	f7f1 fc1c 	bl	8000238 <__aeabi_dsub>
 800ea00:	4632      	mov	r2, r6
 800ea02:	463b      	mov	r3, r7
 800ea04:	f7f1 fc18 	bl	8000238 <__aeabi_dsub>
 800ea08:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ea0c:	f7f1 fc14 	bl	8000238 <__aeabi_dsub>
 800ea10:	4602      	mov	r2, r0
 800ea12:	460b      	mov	r3, r1
 800ea14:	4640      	mov	r0, r8
 800ea16:	4649      	mov	r1, r9
 800ea18:	e608      	b.n	800e62c <__ieee754_pow+0x2ec>
 800ea1a:	bf00      	nop
 800ea1c:	f3af 8000 	nop.w
 800ea20:	4a454eef 	.word	0x4a454eef
 800ea24:	3fca7e28 	.word	0x3fca7e28
 800ea28:	93c9db65 	.word	0x93c9db65
 800ea2c:	3fcd864a 	.word	0x3fcd864a
 800ea30:	a91d4101 	.word	0xa91d4101
 800ea34:	3fd17460 	.word	0x3fd17460
 800ea38:	518f264d 	.word	0x518f264d
 800ea3c:	3fd55555 	.word	0x3fd55555
 800ea40:	db6fabff 	.word	0xdb6fabff
 800ea44:	3fdb6db6 	.word	0x3fdb6db6
 800ea48:	33333303 	.word	0x33333303
 800ea4c:	3fe33333 	.word	0x3fe33333
 800ea50:	e0000000 	.word	0xe0000000
 800ea54:	3feec709 	.word	0x3feec709
 800ea58:	dc3a03fd 	.word	0xdc3a03fd
 800ea5c:	3feec709 	.word	0x3feec709
 800ea60:	145b01f5 	.word	0x145b01f5
 800ea64:	be3e2fe0 	.word	0xbe3e2fe0
 800ea68:	7ff00000 	.word	0x7ff00000
 800ea6c:	43400000 	.word	0x43400000
 800ea70:	0003988e 	.word	0x0003988e
 800ea74:	000bb679 	.word	0x000bb679
 800ea78:	0800f608 	.word	0x0800f608
 800ea7c:	3ff00000 	.word	0x3ff00000
 800ea80:	40080000 	.word	0x40080000
 800ea84:	0800f628 	.word	0x0800f628
 800ea88:	0800f618 	.word	0x0800f618
 800ea8c:	2601      	movs	r6, #1
 800ea8e:	e667      	b.n	800e760 <__ieee754_pow+0x420>
 800ea90:	a39d      	add	r3, pc, #628	; (adr r3, 800ed08 <__ieee754_pow+0x9c8>)
 800ea92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea96:	4640      	mov	r0, r8
 800ea98:	4649      	mov	r1, r9
 800ea9a:	f7f1 fbcf 	bl	800023c <__adddf3>
 800ea9e:	4622      	mov	r2, r4
 800eaa0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eaa4:	462b      	mov	r3, r5
 800eaa6:	4650      	mov	r0, sl
 800eaa8:	4639      	mov	r1, r7
 800eaaa:	f7f1 fbc5 	bl	8000238 <__aeabi_dsub>
 800eaae:	4602      	mov	r2, r0
 800eab0:	460b      	mov	r3, r1
 800eab2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eab6:	f7f2 f807 	bl	8000ac8 <__aeabi_dcmpgt>
 800eaba:	2800      	cmp	r0, #0
 800eabc:	f47f ae01 	bne.w	800e6c2 <__ieee754_pow+0x382>
 800eac0:	4aa5      	ldr	r2, [pc, #660]	; (800ed58 <__ieee754_pow+0xa18>)
 800eac2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800eac6:	4293      	cmp	r3, r2
 800eac8:	f340 8103 	ble.w	800ecd2 <__ieee754_pow+0x992>
 800eacc:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ead0:	2000      	movs	r0, #0
 800ead2:	151b      	asrs	r3, r3, #20
 800ead4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ead8:	fa4a f303 	asr.w	r3, sl, r3
 800eadc:	4433      	add	r3, r6
 800eade:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800eae2:	4f9e      	ldr	r7, [pc, #632]	; (800ed5c <__ieee754_pow+0xa1c>)
 800eae4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800eae8:	4117      	asrs	r7, r2
 800eaea:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800eaee:	ea23 0107 	bic.w	r1, r3, r7
 800eaf2:	f1c2 0214 	rsb	r2, r2, #20
 800eaf6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800eafa:	460b      	mov	r3, r1
 800eafc:	fa4a fa02 	asr.w	sl, sl, r2
 800eb00:	2e00      	cmp	r6, #0
 800eb02:	4602      	mov	r2, r0
 800eb04:	4629      	mov	r1, r5
 800eb06:	4620      	mov	r0, r4
 800eb08:	bfb8      	it	lt
 800eb0a:	f1ca 0a00 	rsblt	sl, sl, #0
 800eb0e:	f7f1 fb93 	bl	8000238 <__aeabi_dsub>
 800eb12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb1a:	2400      	movs	r4, #0
 800eb1c:	4642      	mov	r2, r8
 800eb1e:	464b      	mov	r3, r9
 800eb20:	f7f1 fb8c 	bl	800023c <__adddf3>
 800eb24:	a37a      	add	r3, pc, #488	; (adr r3, 800ed10 <__ieee754_pow+0x9d0>)
 800eb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb2a:	4620      	mov	r0, r4
 800eb2c:	460d      	mov	r5, r1
 800eb2e:	f7f1 fd3b 	bl	80005a8 <__aeabi_dmul>
 800eb32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eb36:	4606      	mov	r6, r0
 800eb38:	460f      	mov	r7, r1
 800eb3a:	4620      	mov	r0, r4
 800eb3c:	4629      	mov	r1, r5
 800eb3e:	f7f1 fb7b 	bl	8000238 <__aeabi_dsub>
 800eb42:	4602      	mov	r2, r0
 800eb44:	460b      	mov	r3, r1
 800eb46:	4640      	mov	r0, r8
 800eb48:	4649      	mov	r1, r9
 800eb4a:	f7f1 fb75 	bl	8000238 <__aeabi_dsub>
 800eb4e:	a372      	add	r3, pc, #456	; (adr r3, 800ed18 <__ieee754_pow+0x9d8>)
 800eb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb54:	f7f1 fd28 	bl	80005a8 <__aeabi_dmul>
 800eb58:	a371      	add	r3, pc, #452	; (adr r3, 800ed20 <__ieee754_pow+0x9e0>)
 800eb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb5e:	4680      	mov	r8, r0
 800eb60:	4689      	mov	r9, r1
 800eb62:	4620      	mov	r0, r4
 800eb64:	4629      	mov	r1, r5
 800eb66:	f7f1 fd1f 	bl	80005a8 <__aeabi_dmul>
 800eb6a:	4602      	mov	r2, r0
 800eb6c:	460b      	mov	r3, r1
 800eb6e:	4640      	mov	r0, r8
 800eb70:	4649      	mov	r1, r9
 800eb72:	f7f1 fb63 	bl	800023c <__adddf3>
 800eb76:	4604      	mov	r4, r0
 800eb78:	460d      	mov	r5, r1
 800eb7a:	4602      	mov	r2, r0
 800eb7c:	460b      	mov	r3, r1
 800eb7e:	4630      	mov	r0, r6
 800eb80:	4639      	mov	r1, r7
 800eb82:	f7f1 fb5b 	bl	800023c <__adddf3>
 800eb86:	4632      	mov	r2, r6
 800eb88:	463b      	mov	r3, r7
 800eb8a:	4680      	mov	r8, r0
 800eb8c:	4689      	mov	r9, r1
 800eb8e:	f7f1 fb53 	bl	8000238 <__aeabi_dsub>
 800eb92:	4602      	mov	r2, r0
 800eb94:	460b      	mov	r3, r1
 800eb96:	4620      	mov	r0, r4
 800eb98:	4629      	mov	r1, r5
 800eb9a:	f7f1 fb4d 	bl	8000238 <__aeabi_dsub>
 800eb9e:	4642      	mov	r2, r8
 800eba0:	4606      	mov	r6, r0
 800eba2:	460f      	mov	r7, r1
 800eba4:	464b      	mov	r3, r9
 800eba6:	4640      	mov	r0, r8
 800eba8:	4649      	mov	r1, r9
 800ebaa:	f7f1 fcfd 	bl	80005a8 <__aeabi_dmul>
 800ebae:	a35e      	add	r3, pc, #376	; (adr r3, 800ed28 <__ieee754_pow+0x9e8>)
 800ebb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebb4:	4604      	mov	r4, r0
 800ebb6:	460d      	mov	r5, r1
 800ebb8:	f7f1 fcf6 	bl	80005a8 <__aeabi_dmul>
 800ebbc:	a35c      	add	r3, pc, #368	; (adr r3, 800ed30 <__ieee754_pow+0x9f0>)
 800ebbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc2:	f7f1 fb39 	bl	8000238 <__aeabi_dsub>
 800ebc6:	4622      	mov	r2, r4
 800ebc8:	462b      	mov	r3, r5
 800ebca:	f7f1 fced 	bl	80005a8 <__aeabi_dmul>
 800ebce:	a35a      	add	r3, pc, #360	; (adr r3, 800ed38 <__ieee754_pow+0x9f8>)
 800ebd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebd4:	f7f1 fb32 	bl	800023c <__adddf3>
 800ebd8:	4622      	mov	r2, r4
 800ebda:	462b      	mov	r3, r5
 800ebdc:	f7f1 fce4 	bl	80005a8 <__aeabi_dmul>
 800ebe0:	a357      	add	r3, pc, #348	; (adr r3, 800ed40 <__ieee754_pow+0xa00>)
 800ebe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebe6:	f7f1 fb27 	bl	8000238 <__aeabi_dsub>
 800ebea:	4622      	mov	r2, r4
 800ebec:	462b      	mov	r3, r5
 800ebee:	f7f1 fcdb 	bl	80005a8 <__aeabi_dmul>
 800ebf2:	a355      	add	r3, pc, #340	; (adr r3, 800ed48 <__ieee754_pow+0xa08>)
 800ebf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebf8:	f7f1 fb20 	bl	800023c <__adddf3>
 800ebfc:	4622      	mov	r2, r4
 800ebfe:	462b      	mov	r3, r5
 800ec00:	f7f1 fcd2 	bl	80005a8 <__aeabi_dmul>
 800ec04:	4602      	mov	r2, r0
 800ec06:	460b      	mov	r3, r1
 800ec08:	4640      	mov	r0, r8
 800ec0a:	4649      	mov	r1, r9
 800ec0c:	f7f1 fb14 	bl	8000238 <__aeabi_dsub>
 800ec10:	4604      	mov	r4, r0
 800ec12:	460d      	mov	r5, r1
 800ec14:	4602      	mov	r2, r0
 800ec16:	460b      	mov	r3, r1
 800ec18:	4640      	mov	r0, r8
 800ec1a:	4649      	mov	r1, r9
 800ec1c:	f7f1 fcc4 	bl	80005a8 <__aeabi_dmul>
 800ec20:	2200      	movs	r2, #0
 800ec22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ec2a:	4620      	mov	r0, r4
 800ec2c:	4629      	mov	r1, r5
 800ec2e:	f7f1 fb03 	bl	8000238 <__aeabi_dsub>
 800ec32:	4602      	mov	r2, r0
 800ec34:	460b      	mov	r3, r1
 800ec36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec3a:	f7f1 fddf 	bl	80007fc <__aeabi_ddiv>
 800ec3e:	4632      	mov	r2, r6
 800ec40:	4604      	mov	r4, r0
 800ec42:	460d      	mov	r5, r1
 800ec44:	463b      	mov	r3, r7
 800ec46:	4640      	mov	r0, r8
 800ec48:	4649      	mov	r1, r9
 800ec4a:	f7f1 fcad 	bl	80005a8 <__aeabi_dmul>
 800ec4e:	4632      	mov	r2, r6
 800ec50:	463b      	mov	r3, r7
 800ec52:	f7f1 faf3 	bl	800023c <__adddf3>
 800ec56:	4602      	mov	r2, r0
 800ec58:	460b      	mov	r3, r1
 800ec5a:	4620      	mov	r0, r4
 800ec5c:	4629      	mov	r1, r5
 800ec5e:	f7f1 faeb 	bl	8000238 <__aeabi_dsub>
 800ec62:	4642      	mov	r2, r8
 800ec64:	464b      	mov	r3, r9
 800ec66:	f7f1 fae7 	bl	8000238 <__aeabi_dsub>
 800ec6a:	4602      	mov	r2, r0
 800ec6c:	460b      	mov	r3, r1
 800ec6e:	2000      	movs	r0, #0
 800ec70:	493b      	ldr	r1, [pc, #236]	; (800ed60 <__ieee754_pow+0xa20>)
 800ec72:	f7f1 fae1 	bl	8000238 <__aeabi_dsub>
 800ec76:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800ec7a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800ec7e:	da2b      	bge.n	800ecd8 <__ieee754_pow+0x998>
 800ec80:	4652      	mov	r2, sl
 800ec82:	f000 f9b9 	bl	800eff8 <scalbn>
 800ec86:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ec8a:	f7ff bbf2 	b.w	800e472 <__ieee754_pow+0x132>
 800ec8e:	4b35      	ldr	r3, [pc, #212]	; (800ed64 <__ieee754_pow+0xa24>)
 800ec90:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800ec94:	429f      	cmp	r7, r3
 800ec96:	f77f af13 	ble.w	800eac0 <__ieee754_pow+0x780>
 800ec9a:	4b33      	ldr	r3, [pc, #204]	; (800ed68 <__ieee754_pow+0xa28>)
 800ec9c:	440b      	add	r3, r1
 800ec9e:	4303      	orrs	r3, r0
 800eca0:	d00b      	beq.n	800ecba <__ieee754_pow+0x97a>
 800eca2:	a32b      	add	r3, pc, #172	; (adr r3, 800ed50 <__ieee754_pow+0xa10>)
 800eca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ecac:	f7f1 fc7c 	bl	80005a8 <__aeabi_dmul>
 800ecb0:	a327      	add	r3, pc, #156	; (adr r3, 800ed50 <__ieee754_pow+0xa10>)
 800ecb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb6:	f7ff bbdc 	b.w	800e472 <__ieee754_pow+0x132>
 800ecba:	4622      	mov	r2, r4
 800ecbc:	462b      	mov	r3, r5
 800ecbe:	f7f1 fabb 	bl	8000238 <__aeabi_dsub>
 800ecc2:	4642      	mov	r2, r8
 800ecc4:	464b      	mov	r3, r9
 800ecc6:	f7f1 fef5 	bl	8000ab4 <__aeabi_dcmpge>
 800ecca:	2800      	cmp	r0, #0
 800eccc:	f43f aef8 	beq.w	800eac0 <__ieee754_pow+0x780>
 800ecd0:	e7e7      	b.n	800eca2 <__ieee754_pow+0x962>
 800ecd2:	f04f 0a00 	mov.w	sl, #0
 800ecd6:	e71e      	b.n	800eb16 <__ieee754_pow+0x7d6>
 800ecd8:	4621      	mov	r1, r4
 800ecda:	e7d4      	b.n	800ec86 <__ieee754_pow+0x946>
 800ecdc:	f04f 0b00 	mov.w	fp, #0
 800ece0:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ed60 <__ieee754_pow+0xa20>
 800ece4:	f7ff bbb0 	b.w	800e448 <__ieee754_pow+0x108>
 800ece8:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800ecec:	f7ff bbac 	b.w	800e448 <__ieee754_pow+0x108>
 800ecf0:	4638      	mov	r0, r7
 800ecf2:	4641      	mov	r1, r8
 800ecf4:	f7ff bbbf 	b.w	800e476 <__ieee754_pow+0x136>
 800ecf8:	9200      	str	r2, [sp, #0]
 800ecfa:	f7ff bb7f 	b.w	800e3fc <__ieee754_pow+0xbc>
 800ecfe:	2300      	movs	r3, #0
 800ed00:	f7ff bb69 	b.w	800e3d6 <__ieee754_pow+0x96>
 800ed04:	f3af 8000 	nop.w
 800ed08:	652b82fe 	.word	0x652b82fe
 800ed0c:	3c971547 	.word	0x3c971547
 800ed10:	00000000 	.word	0x00000000
 800ed14:	3fe62e43 	.word	0x3fe62e43
 800ed18:	fefa39ef 	.word	0xfefa39ef
 800ed1c:	3fe62e42 	.word	0x3fe62e42
 800ed20:	0ca86c39 	.word	0x0ca86c39
 800ed24:	be205c61 	.word	0xbe205c61
 800ed28:	72bea4d0 	.word	0x72bea4d0
 800ed2c:	3e663769 	.word	0x3e663769
 800ed30:	c5d26bf1 	.word	0xc5d26bf1
 800ed34:	3ebbbd41 	.word	0x3ebbbd41
 800ed38:	af25de2c 	.word	0xaf25de2c
 800ed3c:	3f11566a 	.word	0x3f11566a
 800ed40:	16bebd93 	.word	0x16bebd93
 800ed44:	3f66c16c 	.word	0x3f66c16c
 800ed48:	5555553e 	.word	0x5555553e
 800ed4c:	3fc55555 	.word	0x3fc55555
 800ed50:	c2f8f359 	.word	0xc2f8f359
 800ed54:	01a56e1f 	.word	0x01a56e1f
 800ed58:	3fe00000 	.word	0x3fe00000
 800ed5c:	000fffff 	.word	0x000fffff
 800ed60:	3ff00000 	.word	0x3ff00000
 800ed64:	4090cbff 	.word	0x4090cbff
 800ed68:	3f6f3400 	.word	0x3f6f3400

0800ed6c <__ieee754_sqrt>:
 800ed6c:	f8df c150 	ldr.w	ip, [pc, #336]	; 800eec0 <__ieee754_sqrt+0x154>
 800ed70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed74:	ea3c 0c01 	bics.w	ip, ip, r1
 800ed78:	460b      	mov	r3, r1
 800ed7a:	4606      	mov	r6, r0
 800ed7c:	460d      	mov	r5, r1
 800ed7e:	460a      	mov	r2, r1
 800ed80:	4607      	mov	r7, r0
 800ed82:	4604      	mov	r4, r0
 800ed84:	d10e      	bne.n	800eda4 <__ieee754_sqrt+0x38>
 800ed86:	4602      	mov	r2, r0
 800ed88:	f7f1 fc0e 	bl	80005a8 <__aeabi_dmul>
 800ed8c:	4602      	mov	r2, r0
 800ed8e:	460b      	mov	r3, r1
 800ed90:	4630      	mov	r0, r6
 800ed92:	4629      	mov	r1, r5
 800ed94:	f7f1 fa52 	bl	800023c <__adddf3>
 800ed98:	4606      	mov	r6, r0
 800ed9a:	460d      	mov	r5, r1
 800ed9c:	4630      	mov	r0, r6
 800ed9e:	4629      	mov	r1, r5
 800eda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eda4:	2900      	cmp	r1, #0
 800eda6:	dc0d      	bgt.n	800edc4 <__ieee754_sqrt+0x58>
 800eda8:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800edac:	ea5c 0707 	orrs.w	r7, ip, r7
 800edb0:	d0f4      	beq.n	800ed9c <__ieee754_sqrt+0x30>
 800edb2:	b139      	cbz	r1, 800edc4 <__ieee754_sqrt+0x58>
 800edb4:	4602      	mov	r2, r0
 800edb6:	f7f1 fa3f 	bl	8000238 <__aeabi_dsub>
 800edba:	4602      	mov	r2, r0
 800edbc:	460b      	mov	r3, r1
 800edbe:	f7f1 fd1d 	bl	80007fc <__aeabi_ddiv>
 800edc2:	e7e9      	b.n	800ed98 <__ieee754_sqrt+0x2c>
 800edc4:	1512      	asrs	r2, r2, #20
 800edc6:	d074      	beq.n	800eeb2 <__ieee754_sqrt+0x146>
 800edc8:	2000      	movs	r0, #0
 800edca:	07d5      	lsls	r5, r2, #31
 800edcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800edd0:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800edd4:	bf5e      	ittt	pl
 800edd6:	0fe3      	lsrpl	r3, r4, #31
 800edd8:	0064      	lslpl	r4, r4, #1
 800edda:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800edde:	0fe3      	lsrs	r3, r4, #31
 800ede0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800ede4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800ede8:	2516      	movs	r5, #22
 800edea:	4601      	mov	r1, r0
 800edec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800edf0:	1076      	asrs	r6, r6, #1
 800edf2:	0064      	lsls	r4, r4, #1
 800edf4:	188f      	adds	r7, r1, r2
 800edf6:	429f      	cmp	r7, r3
 800edf8:	bfde      	ittt	le
 800edfa:	1bdb      	suble	r3, r3, r7
 800edfc:	18b9      	addle	r1, r7, r2
 800edfe:	1880      	addle	r0, r0, r2
 800ee00:	005b      	lsls	r3, r3, #1
 800ee02:	3d01      	subs	r5, #1
 800ee04:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800ee08:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ee0c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800ee10:	d1f0      	bne.n	800edf4 <__ieee754_sqrt+0x88>
 800ee12:	462a      	mov	r2, r5
 800ee14:	f04f 0e20 	mov.w	lr, #32
 800ee18:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800ee1c:	428b      	cmp	r3, r1
 800ee1e:	eb07 0c05 	add.w	ip, r7, r5
 800ee22:	dc02      	bgt.n	800ee2a <__ieee754_sqrt+0xbe>
 800ee24:	d113      	bne.n	800ee4e <__ieee754_sqrt+0xe2>
 800ee26:	45a4      	cmp	ip, r4
 800ee28:	d811      	bhi.n	800ee4e <__ieee754_sqrt+0xe2>
 800ee2a:	f1bc 0f00 	cmp.w	ip, #0
 800ee2e:	eb0c 0507 	add.w	r5, ip, r7
 800ee32:	da43      	bge.n	800eebc <__ieee754_sqrt+0x150>
 800ee34:	2d00      	cmp	r5, #0
 800ee36:	db41      	blt.n	800eebc <__ieee754_sqrt+0x150>
 800ee38:	f101 0801 	add.w	r8, r1, #1
 800ee3c:	1a5b      	subs	r3, r3, r1
 800ee3e:	4641      	mov	r1, r8
 800ee40:	45a4      	cmp	ip, r4
 800ee42:	bf88      	it	hi
 800ee44:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ee48:	eba4 040c 	sub.w	r4, r4, ip
 800ee4c:	443a      	add	r2, r7
 800ee4e:	005b      	lsls	r3, r3, #1
 800ee50:	f1be 0e01 	subs.w	lr, lr, #1
 800ee54:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800ee58:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800ee5c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800ee60:	d1dc      	bne.n	800ee1c <__ieee754_sqrt+0xb0>
 800ee62:	4323      	orrs	r3, r4
 800ee64:	d006      	beq.n	800ee74 <__ieee754_sqrt+0x108>
 800ee66:	1c54      	adds	r4, r2, #1
 800ee68:	bf0b      	itete	eq
 800ee6a:	4672      	moveq	r2, lr
 800ee6c:	3201      	addne	r2, #1
 800ee6e:	3001      	addeq	r0, #1
 800ee70:	f022 0201 	bicne.w	r2, r2, #1
 800ee74:	1043      	asrs	r3, r0, #1
 800ee76:	07c1      	lsls	r1, r0, #31
 800ee78:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ee7c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ee80:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ee84:	bf48      	it	mi
 800ee86:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ee8a:	4610      	mov	r0, r2
 800ee8c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800ee90:	e782      	b.n	800ed98 <__ieee754_sqrt+0x2c>
 800ee92:	0ae3      	lsrs	r3, r4, #11
 800ee94:	3915      	subs	r1, #21
 800ee96:	0564      	lsls	r4, r4, #21
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d0fa      	beq.n	800ee92 <__ieee754_sqrt+0x126>
 800ee9c:	02de      	lsls	r6, r3, #11
 800ee9e:	d50a      	bpl.n	800eeb6 <__ieee754_sqrt+0x14a>
 800eea0:	f1c2 0020 	rsb	r0, r2, #32
 800eea4:	fa24 f000 	lsr.w	r0, r4, r0
 800eea8:	1e55      	subs	r5, r2, #1
 800eeaa:	4094      	lsls	r4, r2
 800eeac:	4303      	orrs	r3, r0
 800eeae:	1b4a      	subs	r2, r1, r5
 800eeb0:	e78a      	b.n	800edc8 <__ieee754_sqrt+0x5c>
 800eeb2:	4611      	mov	r1, r2
 800eeb4:	e7f0      	b.n	800ee98 <__ieee754_sqrt+0x12c>
 800eeb6:	005b      	lsls	r3, r3, #1
 800eeb8:	3201      	adds	r2, #1
 800eeba:	e7ef      	b.n	800ee9c <__ieee754_sqrt+0x130>
 800eebc:	4688      	mov	r8, r1
 800eebe:	e7bd      	b.n	800ee3c <__ieee754_sqrt+0xd0>
 800eec0:	7ff00000 	.word	0x7ff00000

0800eec4 <fabs>:
 800eec4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800eec8:	4770      	bx	lr

0800eeca <finite>:
 800eeca:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800eece:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800eed2:	0fc0      	lsrs	r0, r0, #31
 800eed4:	4770      	bx	lr
	...

0800eed8 <nan>:
 800eed8:	2000      	movs	r0, #0
 800eeda:	4901      	ldr	r1, [pc, #4]	; (800eee0 <nan+0x8>)
 800eedc:	4770      	bx	lr
 800eede:	bf00      	nop
 800eee0:	7ff80000 	.word	0x7ff80000

0800eee4 <rint>:
 800eee4:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800eee8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eeea:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800eeee:	2f13      	cmp	r7, #19
 800eef0:	4602      	mov	r2, r0
 800eef2:	460b      	mov	r3, r1
 800eef4:	460c      	mov	r4, r1
 800eef6:	4605      	mov	r5, r0
 800eef8:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800eefc:	dc59      	bgt.n	800efb2 <rint+0xce>
 800eefe:	2f00      	cmp	r7, #0
 800ef00:	da2a      	bge.n	800ef58 <rint+0x74>
 800ef02:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ef06:	4301      	orrs	r1, r0
 800ef08:	d022      	beq.n	800ef50 <rint+0x6c>
 800ef0a:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800ef0e:	4301      	orrs	r1, r0
 800ef10:	424d      	negs	r5, r1
 800ef12:	430d      	orrs	r5, r1
 800ef14:	4936      	ldr	r1, [pc, #216]	; (800eff0 <rint+0x10c>)
 800ef16:	0c5c      	lsrs	r4, r3, #17
 800ef18:	0b2d      	lsrs	r5, r5, #12
 800ef1a:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800ef1e:	0464      	lsls	r4, r4, #17
 800ef20:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ef24:	ea45 0304 	orr.w	r3, r5, r4
 800ef28:	e9d1 4500 	ldrd	r4, r5, [r1]
 800ef2c:	4620      	mov	r0, r4
 800ef2e:	4629      	mov	r1, r5
 800ef30:	f7f1 f984 	bl	800023c <__adddf3>
 800ef34:	e9cd 0100 	strd	r0, r1, [sp]
 800ef38:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ef3c:	462b      	mov	r3, r5
 800ef3e:	4622      	mov	r2, r4
 800ef40:	f7f1 f97a 	bl	8000238 <__aeabi_dsub>
 800ef44:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ef48:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800ef4c:	4602      	mov	r2, r0
 800ef4e:	460b      	mov	r3, r1
 800ef50:	4610      	mov	r0, r2
 800ef52:	4619      	mov	r1, r3
 800ef54:	b003      	add	sp, #12
 800ef56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef58:	4926      	ldr	r1, [pc, #152]	; (800eff4 <rint+0x110>)
 800ef5a:	4139      	asrs	r1, r7
 800ef5c:	ea03 0001 	and.w	r0, r3, r1
 800ef60:	4310      	orrs	r0, r2
 800ef62:	d0f5      	beq.n	800ef50 <rint+0x6c>
 800ef64:	084b      	lsrs	r3, r1, #1
 800ef66:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800ef6a:	ea52 0501 	orrs.w	r5, r2, r1
 800ef6e:	d00c      	beq.n	800ef8a <rint+0xa6>
 800ef70:	ea24 0303 	bic.w	r3, r4, r3
 800ef74:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800ef78:	2f13      	cmp	r7, #19
 800ef7a:	bf0c      	ite	eq
 800ef7c:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800ef80:	2500      	movne	r5, #0
 800ef82:	fa44 f707 	asr.w	r7, r4, r7
 800ef86:	ea43 0407 	orr.w	r4, r3, r7
 800ef8a:	4919      	ldr	r1, [pc, #100]	; (800eff0 <rint+0x10c>)
 800ef8c:	4623      	mov	r3, r4
 800ef8e:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800ef92:	462a      	mov	r2, r5
 800ef94:	e9d6 4500 	ldrd	r4, r5, [r6]
 800ef98:	4620      	mov	r0, r4
 800ef9a:	4629      	mov	r1, r5
 800ef9c:	f7f1 f94e 	bl	800023c <__adddf3>
 800efa0:	e9cd 0100 	strd	r0, r1, [sp]
 800efa4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800efa8:	4622      	mov	r2, r4
 800efaa:	462b      	mov	r3, r5
 800efac:	f7f1 f944 	bl	8000238 <__aeabi_dsub>
 800efb0:	e7cc      	b.n	800ef4c <rint+0x68>
 800efb2:	2f33      	cmp	r7, #51	; 0x33
 800efb4:	dd05      	ble.n	800efc2 <rint+0xde>
 800efb6:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800efba:	d1c9      	bne.n	800ef50 <rint+0x6c>
 800efbc:	f7f1 f93e 	bl	800023c <__adddf3>
 800efc0:	e7c4      	b.n	800ef4c <rint+0x68>
 800efc2:	f04f 31ff 	mov.w	r1, #4294967295
 800efc6:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800efca:	fa21 f10c 	lsr.w	r1, r1, ip
 800efce:	4208      	tst	r0, r1
 800efd0:	d0be      	beq.n	800ef50 <rint+0x6c>
 800efd2:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800efd6:	bf18      	it	ne
 800efd8:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800efdc:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800efe0:	bf1e      	ittt	ne
 800efe2:	ea20 0303 	bicne.w	r3, r0, r3
 800efe6:	fa45 fc0c 	asrne.w	ip, r5, ip
 800efea:	ea43 050c 	orrne.w	r5, r3, ip
 800efee:	e7cc      	b.n	800ef8a <rint+0xa6>
 800eff0:	0800f638 	.word	0x0800f638
 800eff4:	000fffff 	.word	0x000fffff

0800eff8 <scalbn>:
 800eff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800effa:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800effe:	4604      	mov	r4, r0
 800f000:	460d      	mov	r5, r1
 800f002:	4617      	mov	r7, r2
 800f004:	460b      	mov	r3, r1
 800f006:	b996      	cbnz	r6, 800f02e <scalbn+0x36>
 800f008:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f00c:	4303      	orrs	r3, r0
 800f00e:	d039      	beq.n	800f084 <scalbn+0x8c>
 800f010:	4b35      	ldr	r3, [pc, #212]	; (800f0e8 <scalbn+0xf0>)
 800f012:	2200      	movs	r2, #0
 800f014:	f7f1 fac8 	bl	80005a8 <__aeabi_dmul>
 800f018:	4b34      	ldr	r3, [pc, #208]	; (800f0ec <scalbn+0xf4>)
 800f01a:	4604      	mov	r4, r0
 800f01c:	429f      	cmp	r7, r3
 800f01e:	460d      	mov	r5, r1
 800f020:	da0f      	bge.n	800f042 <scalbn+0x4a>
 800f022:	a32d      	add	r3, pc, #180	; (adr r3, 800f0d8 <scalbn+0xe0>)
 800f024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f028:	f7f1 fabe 	bl	80005a8 <__aeabi_dmul>
 800f02c:	e006      	b.n	800f03c <scalbn+0x44>
 800f02e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f032:	4296      	cmp	r6, r2
 800f034:	d10a      	bne.n	800f04c <scalbn+0x54>
 800f036:	4602      	mov	r2, r0
 800f038:	f7f1 f900 	bl	800023c <__adddf3>
 800f03c:	4604      	mov	r4, r0
 800f03e:	460d      	mov	r5, r1
 800f040:	e020      	b.n	800f084 <scalbn+0x8c>
 800f042:	460b      	mov	r3, r1
 800f044:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f048:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800f04c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800f050:	19b9      	adds	r1, r7, r6
 800f052:	4291      	cmp	r1, r2
 800f054:	dd0e      	ble.n	800f074 <scalbn+0x7c>
 800f056:	a322      	add	r3, pc, #136	; (adr r3, 800f0e0 <scalbn+0xe8>)
 800f058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f05c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800f060:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800f064:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800f068:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800f06c:	4820      	ldr	r0, [pc, #128]	; (800f0f0 <scalbn+0xf8>)
 800f06e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800f072:	e7d9      	b.n	800f028 <scalbn+0x30>
 800f074:	2900      	cmp	r1, #0
 800f076:	dd08      	ble.n	800f08a <scalbn+0x92>
 800f078:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f07c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f080:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800f084:	4620      	mov	r0, r4
 800f086:	4629      	mov	r1, r5
 800f088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f08a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800f08e:	da16      	bge.n	800f0be <scalbn+0xc6>
 800f090:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f094:	429f      	cmp	r7, r3
 800f096:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800f09a:	dd08      	ble.n	800f0ae <scalbn+0xb6>
 800f09c:	4c15      	ldr	r4, [pc, #84]	; (800f0f4 <scalbn+0xfc>)
 800f09e:	4814      	ldr	r0, [pc, #80]	; (800f0f0 <scalbn+0xf8>)
 800f0a0:	f363 74df 	bfi	r4, r3, #31, #1
 800f0a4:	a30e      	add	r3, pc, #56	; (adr r3, 800f0e0 <scalbn+0xe8>)
 800f0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0aa:	4621      	mov	r1, r4
 800f0ac:	e7bc      	b.n	800f028 <scalbn+0x30>
 800f0ae:	4c12      	ldr	r4, [pc, #72]	; (800f0f8 <scalbn+0x100>)
 800f0b0:	4812      	ldr	r0, [pc, #72]	; (800f0fc <scalbn+0x104>)
 800f0b2:	f363 74df 	bfi	r4, r3, #31, #1
 800f0b6:	a308      	add	r3, pc, #32	; (adr r3, 800f0d8 <scalbn+0xe0>)
 800f0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0bc:	e7f5      	b.n	800f0aa <scalbn+0xb2>
 800f0be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f0c2:	3136      	adds	r1, #54	; 0x36
 800f0c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f0c8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800f0cc:	4620      	mov	r0, r4
 800f0ce:	4629      	mov	r1, r5
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	4b0b      	ldr	r3, [pc, #44]	; (800f100 <scalbn+0x108>)
 800f0d4:	e7a8      	b.n	800f028 <scalbn+0x30>
 800f0d6:	bf00      	nop
 800f0d8:	c2f8f359 	.word	0xc2f8f359
 800f0dc:	01a56e1f 	.word	0x01a56e1f
 800f0e0:	8800759c 	.word	0x8800759c
 800f0e4:	7e37e43c 	.word	0x7e37e43c
 800f0e8:	43500000 	.word	0x43500000
 800f0ec:	ffff3cb0 	.word	0xffff3cb0
 800f0f0:	8800759c 	.word	0x8800759c
 800f0f4:	7e37e43c 	.word	0x7e37e43c
 800f0f8:	01a56e1f 	.word	0x01a56e1f
 800f0fc:	c2f8f359 	.word	0xc2f8f359
 800f100:	3c900000 	.word	0x3c900000

0800f104 <_init>:
 800f104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f106:	bf00      	nop
 800f108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f10a:	bc08      	pop	{r3}
 800f10c:	469e      	mov	lr, r3
 800f10e:	4770      	bx	lr

0800f110 <_fini>:
 800f110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f112:	bf00      	nop
 800f114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f116:	bc08      	pop	{r3}
 800f118:	469e      	mov	lr, r3
 800f11a:	4770      	bx	lr
