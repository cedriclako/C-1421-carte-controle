
HELLO_WORLD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed0c  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  0800ef00  0800ef00  0001ef00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f3e8  0800f3e8  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f3e8  0800f3e8  0001f3e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f3f0  0800f3f0  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f3f0  0800f3f0  0001f3f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f3f4  0800f3f4  0001f3f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800f3f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002fd0  200000a8  0800f4a0  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003078  0800f4a0  00023078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026d0a  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052a1  00000000  00000000  00046ddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b38  00000000  00000000  0004c080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001938  00000000  00000000  0004dbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024d46  00000000  00000000  0004f4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020e1b  00000000  00000000  00074236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7562  00000000  00000000  00095051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015c5b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d7c  00000000  00000000  0015c608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200000a8 	.word	0x200000a8
 800020c:	00000000 	.word	0x00000000
 8000210:	0800eee4 	.word	0x0800eee4

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200000ac 	.word	0x200000ac
 800022c:	0800eee4 	.word	0x0800eee4

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2f>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b10:	bf24      	itt	cs
 8000b12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1a:	d90d      	bls.n	8000b38 <__aeabi_d2f+0x30>
 8000b1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b3c:	d121      	bne.n	8000b82 <__aeabi_d2f+0x7a>
 8000b3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b42:	bfbc      	itt	lt
 8000b44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	4770      	bxlt	lr
 8000b4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b52:	f1c2 0218 	rsb	r2, r2, #24
 8000b56:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b62:	bf18      	it	ne
 8000b64:	f040 0001 	orrne.w	r0, r0, #1
 8000b68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b74:	ea40 000c 	orr.w	r0, r0, ip
 8000b78:	fa23 f302 	lsr.w	r3, r3, r2
 8000b7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b80:	e7cc      	b.n	8000b1c <__aeabi_d2f+0x14>
 8000b82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b86:	d107      	bne.n	8000b98 <__aeabi_d2f+0x90>
 8000b88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b8c:	bf1e      	ittt	ne
 8000b8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b96:	4770      	bxne	lr
 8000b98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_frsub>:
 8000ba8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bac:	e002      	b.n	8000bb4 <__addsf3>
 8000bae:	bf00      	nop

08000bb0 <__aeabi_fsub>:
 8000bb0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bb4 <__addsf3>:
 8000bb4:	0042      	lsls	r2, r0, #1
 8000bb6:	bf1f      	itttt	ne
 8000bb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bbc:	ea92 0f03 	teqne	r2, r3
 8000bc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc8:	d06a      	beq.n	8000ca0 <__addsf3+0xec>
 8000bca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bd2:	bfc1      	itttt	gt
 8000bd4:	18d2      	addgt	r2, r2, r3
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	4048      	eorgt	r0, r1
 8000bda:	4041      	eorgt	r1, r0
 8000bdc:	bfb8      	it	lt
 8000bde:	425b      	neglt	r3, r3
 8000be0:	2b19      	cmp	r3, #25
 8000be2:	bf88      	it	hi
 8000be4:	4770      	bxhi	lr
 8000be6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bfa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bfe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c02:	bf18      	it	ne
 8000c04:	4249      	negne	r1, r1
 8000c06:	ea92 0f03 	teq	r2, r3
 8000c0a:	d03f      	beq.n	8000c8c <__addsf3+0xd8>
 8000c0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c10:	fa41 fc03 	asr.w	ip, r1, r3
 8000c14:	eb10 000c 	adds.w	r0, r0, ip
 8000c18:	f1c3 0320 	rsb	r3, r3, #32
 8000c1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c24:	d502      	bpl.n	8000c2c <__addsf3+0x78>
 8000c26:	4249      	negs	r1, r1
 8000c28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c30:	d313      	bcc.n	8000c5a <__addsf3+0xa6>
 8000c32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c36:	d306      	bcc.n	8000c46 <__addsf3+0x92>
 8000c38:	0840      	lsrs	r0, r0, #1
 8000c3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3e:	f102 0201 	add.w	r2, r2, #1
 8000c42:	2afe      	cmp	r2, #254	; 0xfe
 8000c44:	d251      	bcs.n	8000cea <__addsf3+0x136>
 8000c46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4e:	bf08      	it	eq
 8000c50:	f020 0001 	biceq.w	r0, r0, #1
 8000c54:	ea40 0003 	orr.w	r0, r0, r3
 8000c58:	4770      	bx	lr
 8000c5a:	0049      	lsls	r1, r1, #1
 8000c5c:	eb40 0000 	adc.w	r0, r0, r0
 8000c60:	3a01      	subs	r2, #1
 8000c62:	bf28      	it	cs
 8000c64:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c68:	d2ed      	bcs.n	8000c46 <__addsf3+0x92>
 8000c6a:	fab0 fc80 	clz	ip, r0
 8000c6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c72:	ebb2 020c 	subs.w	r2, r2, ip
 8000c76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c7a:	bfaa      	itet	ge
 8000c7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c80:	4252      	neglt	r2, r2
 8000c82:	4318      	orrge	r0, r3
 8000c84:	bfbc      	itt	lt
 8000c86:	40d0      	lsrlt	r0, r2
 8000c88:	4318      	orrlt	r0, r3
 8000c8a:	4770      	bx	lr
 8000c8c:	f092 0f00 	teq	r2, #0
 8000c90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c94:	bf06      	itte	eq
 8000c96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c9a:	3201      	addeq	r2, #1
 8000c9c:	3b01      	subne	r3, #1
 8000c9e:	e7b5      	b.n	8000c0c <__addsf3+0x58>
 8000ca0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca8:	bf18      	it	ne
 8000caa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cae:	d021      	beq.n	8000cf4 <__addsf3+0x140>
 8000cb0:	ea92 0f03 	teq	r2, r3
 8000cb4:	d004      	beq.n	8000cc0 <__addsf3+0x10c>
 8000cb6:	f092 0f00 	teq	r2, #0
 8000cba:	bf08      	it	eq
 8000cbc:	4608      	moveq	r0, r1
 8000cbe:	4770      	bx	lr
 8000cc0:	ea90 0f01 	teq	r0, r1
 8000cc4:	bf1c      	itt	ne
 8000cc6:	2000      	movne	r0, #0
 8000cc8:	4770      	bxne	lr
 8000cca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cce:	d104      	bne.n	8000cda <__addsf3+0x126>
 8000cd0:	0040      	lsls	r0, r0, #1
 8000cd2:	bf28      	it	cs
 8000cd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd8:	4770      	bx	lr
 8000cda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cde:	bf3c      	itt	cc
 8000ce0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bxcc	lr
 8000ce6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf2:	4770      	bx	lr
 8000cf4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf8:	bf16      	itet	ne
 8000cfa:	4608      	movne	r0, r1
 8000cfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d00:	4601      	movne	r1, r0
 8000d02:	0242      	lsls	r2, r0, #9
 8000d04:	bf06      	itte	eq
 8000d06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d0a:	ea90 0f01 	teqeq	r0, r1
 8000d0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d12:	4770      	bx	lr

08000d14 <__aeabi_ui2f>:
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e004      	b.n	8000d24 <__aeabi_i2f+0x8>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_i2f>:
 8000d1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d20:	bf48      	it	mi
 8000d22:	4240      	negmi	r0, r0
 8000d24:	ea5f 0c00 	movs.w	ip, r0
 8000d28:	bf08      	it	eq
 8000d2a:	4770      	bxeq	lr
 8000d2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d30:	4601      	mov	r1, r0
 8000d32:	f04f 0000 	mov.w	r0, #0
 8000d36:	e01c      	b.n	8000d72 <__aeabi_l2f+0x2a>

08000d38 <__aeabi_ul2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e00a      	b.n	8000d5c <__aeabi_l2f+0x14>
 8000d46:	bf00      	nop

08000d48 <__aeabi_l2f>:
 8000d48:	ea50 0201 	orrs.w	r2, r0, r1
 8000d4c:	bf08      	it	eq
 8000d4e:	4770      	bxeq	lr
 8000d50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d54:	d502      	bpl.n	8000d5c <__aeabi_l2f+0x14>
 8000d56:	4240      	negs	r0, r0
 8000d58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5c:	ea5f 0c01 	movs.w	ip, r1
 8000d60:	bf02      	ittt	eq
 8000d62:	4684      	moveq	ip, r0
 8000d64:	4601      	moveq	r1, r0
 8000d66:	2000      	moveq	r0, #0
 8000d68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d6c:	bf08      	it	eq
 8000d6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d76:	fabc f28c 	clz	r2, ip
 8000d7a:	3a08      	subs	r2, #8
 8000d7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d80:	db10      	blt.n	8000da4 <__aeabi_l2f+0x5c>
 8000d82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d86:	4463      	add	r3, ip
 8000d88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d94:	fa20 f202 	lsr.w	r2, r0, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f102 0220 	add.w	r2, r2, #32
 8000da8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dac:	f1c2 0220 	rsb	r2, r2, #32
 8000db0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db4:	fa21 f202 	lsr.w	r2, r1, r2
 8000db8:	eb43 0002 	adc.w	r0, r3, r2
 8000dbc:	bf08      	it	eq
 8000dbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc2:	4770      	bx	lr

08000dc4 <__aeabi_fmul>:
 8000dc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dcc:	bf1e      	ittt	ne
 8000dce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dd2:	ea92 0f0c 	teqne	r2, ip
 8000dd6:	ea93 0f0c 	teqne	r3, ip
 8000dda:	d06f      	beq.n	8000ebc <__aeabi_fmul+0xf8>
 8000ddc:	441a      	add	r2, r3
 8000dde:	ea80 0c01 	eor.w	ip, r0, r1
 8000de2:	0240      	lsls	r0, r0, #9
 8000de4:	bf18      	it	ne
 8000de6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dea:	d01e      	beq.n	8000e2a <__aeabi_fmul+0x66>
 8000dec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000df0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000df4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dfc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e00:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e04:	bf3e      	ittt	cc
 8000e06:	0049      	lslcc	r1, r1, #1
 8000e08:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e0c:	005b      	lslcc	r3, r3, #1
 8000e0e:	ea40 0001 	orr.w	r0, r0, r1
 8000e12:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e16:	2afd      	cmp	r2, #253	; 0xfd
 8000e18:	d81d      	bhi.n	8000e56 <__aeabi_fmul+0x92>
 8000e1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e22:	bf08      	it	eq
 8000e24:	f020 0001 	biceq.w	r0, r0, #1
 8000e28:	4770      	bx	lr
 8000e2a:	f090 0f00 	teq	r0, #0
 8000e2e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e32:	bf08      	it	eq
 8000e34:	0249      	lsleq	r1, r1, #9
 8000e36:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e3a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e3e:	3a7f      	subs	r2, #127	; 0x7f
 8000e40:	bfc2      	ittt	gt
 8000e42:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e46:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e4a:	4770      	bxgt	lr
 8000e4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	3a01      	subs	r2, #1
 8000e56:	dc5d      	bgt.n	8000f14 <__aeabi_fmul+0x150>
 8000e58:	f112 0f19 	cmn.w	r2, #25
 8000e5c:	bfdc      	itt	le
 8000e5e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e62:	4770      	bxle	lr
 8000e64:	f1c2 0200 	rsb	r2, r2, #0
 8000e68:	0041      	lsls	r1, r0, #1
 8000e6a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e6e:	f1c2 0220 	rsb	r2, r2, #32
 8000e72:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e76:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e7a:	f140 0000 	adc.w	r0, r0, #0
 8000e7e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e82:	bf08      	it	eq
 8000e84:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e88:	4770      	bx	lr
 8000e8a:	f092 0f00 	teq	r2, #0
 8000e8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e92:	bf02      	ittt	eq
 8000e94:	0040      	lsleq	r0, r0, #1
 8000e96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e9a:	3a01      	subeq	r2, #1
 8000e9c:	d0f9      	beq.n	8000e92 <__aeabi_fmul+0xce>
 8000e9e:	ea40 000c 	orr.w	r0, r0, ip
 8000ea2:	f093 0f00 	teq	r3, #0
 8000ea6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	bf02      	ittt	eq
 8000eac:	0049      	lsleq	r1, r1, #1
 8000eae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eb2:	3b01      	subeq	r3, #1
 8000eb4:	d0f9      	beq.n	8000eaa <__aeabi_fmul+0xe6>
 8000eb6:	ea41 010c 	orr.w	r1, r1, ip
 8000eba:	e78f      	b.n	8000ddc <__aeabi_fmul+0x18>
 8000ebc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ec0:	ea92 0f0c 	teq	r2, ip
 8000ec4:	bf18      	it	ne
 8000ec6:	ea93 0f0c 	teqne	r3, ip
 8000eca:	d00a      	beq.n	8000ee2 <__aeabi_fmul+0x11e>
 8000ecc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ed0:	bf18      	it	ne
 8000ed2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ed6:	d1d8      	bne.n	8000e8a <__aeabi_fmul+0xc6>
 8000ed8:	ea80 0001 	eor.w	r0, r0, r1
 8000edc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ee0:	4770      	bx	lr
 8000ee2:	f090 0f00 	teq	r0, #0
 8000ee6:	bf17      	itett	ne
 8000ee8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eec:	4608      	moveq	r0, r1
 8000eee:	f091 0f00 	teqne	r1, #0
 8000ef2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ef6:	d014      	beq.n	8000f22 <__aeabi_fmul+0x15e>
 8000ef8:	ea92 0f0c 	teq	r2, ip
 8000efc:	d101      	bne.n	8000f02 <__aeabi_fmul+0x13e>
 8000efe:	0242      	lsls	r2, r0, #9
 8000f00:	d10f      	bne.n	8000f22 <__aeabi_fmul+0x15e>
 8000f02:	ea93 0f0c 	teq	r3, ip
 8000f06:	d103      	bne.n	8000f10 <__aeabi_fmul+0x14c>
 8000f08:	024b      	lsls	r3, r1, #9
 8000f0a:	bf18      	it	ne
 8000f0c:	4608      	movne	r0, r1
 8000f0e:	d108      	bne.n	8000f22 <__aeabi_fmul+0x15e>
 8000f10:	ea80 0001 	eor.w	r0, r0, r1
 8000f14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f20:	4770      	bx	lr
 8000f22:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f26:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f2a:	4770      	bx	lr

08000f2c <__aeabi_fdiv>:
 8000f2c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f30:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f34:	bf1e      	ittt	ne
 8000f36:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f3a:	ea92 0f0c 	teqne	r2, ip
 8000f3e:	ea93 0f0c 	teqne	r3, ip
 8000f42:	d069      	beq.n	8001018 <__aeabi_fdiv+0xec>
 8000f44:	eba2 0203 	sub.w	r2, r2, r3
 8000f48:	ea80 0c01 	eor.w	ip, r0, r1
 8000f4c:	0249      	lsls	r1, r1, #9
 8000f4e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f52:	d037      	beq.n	8000fc4 <__aeabi_fdiv+0x98>
 8000f54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f58:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f5c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f60:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f64:	428b      	cmp	r3, r1
 8000f66:	bf38      	it	cc
 8000f68:	005b      	lslcc	r3, r3, #1
 8000f6a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f6e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f72:	428b      	cmp	r3, r1
 8000f74:	bf24      	itt	cs
 8000f76:	1a5b      	subcs	r3, r3, r1
 8000f78:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f7c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f80:	bf24      	itt	cs
 8000f82:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f86:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f8a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f8e:	bf24      	itt	cs
 8000f90:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f94:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f98:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f9c:	bf24      	itt	cs
 8000f9e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fa2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fa6:	011b      	lsls	r3, r3, #4
 8000fa8:	bf18      	it	ne
 8000faa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fae:	d1e0      	bne.n	8000f72 <__aeabi_fdiv+0x46>
 8000fb0:	2afd      	cmp	r2, #253	; 0xfd
 8000fb2:	f63f af50 	bhi.w	8000e56 <__aeabi_fmul+0x92>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fbc:	bf08      	it	eq
 8000fbe:	f020 0001 	biceq.w	r0, r0, #1
 8000fc2:	4770      	bx	lr
 8000fc4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fc8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fcc:	327f      	adds	r2, #127	; 0x7f
 8000fce:	bfc2      	ittt	gt
 8000fd0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fd4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd8:	4770      	bxgt	lr
 8000fda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fde:	f04f 0300 	mov.w	r3, #0
 8000fe2:	3a01      	subs	r2, #1
 8000fe4:	e737      	b.n	8000e56 <__aeabi_fmul+0x92>
 8000fe6:	f092 0f00 	teq	r2, #0
 8000fea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fee:	bf02      	ittt	eq
 8000ff0:	0040      	lsleq	r0, r0, #1
 8000ff2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ff6:	3a01      	subeq	r2, #1
 8000ff8:	d0f9      	beq.n	8000fee <__aeabi_fdiv+0xc2>
 8000ffa:	ea40 000c 	orr.w	r0, r0, ip
 8000ffe:	f093 0f00 	teq	r3, #0
 8001002:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001006:	bf02      	ittt	eq
 8001008:	0049      	lsleq	r1, r1, #1
 800100a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800100e:	3b01      	subeq	r3, #1
 8001010:	d0f9      	beq.n	8001006 <__aeabi_fdiv+0xda>
 8001012:	ea41 010c 	orr.w	r1, r1, ip
 8001016:	e795      	b.n	8000f44 <__aeabi_fdiv+0x18>
 8001018:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800101c:	ea92 0f0c 	teq	r2, ip
 8001020:	d108      	bne.n	8001034 <__aeabi_fdiv+0x108>
 8001022:	0242      	lsls	r2, r0, #9
 8001024:	f47f af7d 	bne.w	8000f22 <__aeabi_fmul+0x15e>
 8001028:	ea93 0f0c 	teq	r3, ip
 800102c:	f47f af70 	bne.w	8000f10 <__aeabi_fmul+0x14c>
 8001030:	4608      	mov	r0, r1
 8001032:	e776      	b.n	8000f22 <__aeabi_fmul+0x15e>
 8001034:	ea93 0f0c 	teq	r3, ip
 8001038:	d104      	bne.n	8001044 <__aeabi_fdiv+0x118>
 800103a:	024b      	lsls	r3, r1, #9
 800103c:	f43f af4c 	beq.w	8000ed8 <__aeabi_fmul+0x114>
 8001040:	4608      	mov	r0, r1
 8001042:	e76e      	b.n	8000f22 <__aeabi_fmul+0x15e>
 8001044:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001048:	bf18      	it	ne
 800104a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800104e:	d1ca      	bne.n	8000fe6 <__aeabi_fdiv+0xba>
 8001050:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001054:	f47f af5c 	bne.w	8000f10 <__aeabi_fmul+0x14c>
 8001058:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800105c:	f47f af3c 	bne.w	8000ed8 <__aeabi_fmul+0x114>
 8001060:	e75f      	b.n	8000f22 <__aeabi_fmul+0x15e>
 8001062:	bf00      	nop

08001064 <__gesf2>:
 8001064:	f04f 3cff 	mov.w	ip, #4294967295
 8001068:	e006      	b.n	8001078 <__cmpsf2+0x4>
 800106a:	bf00      	nop

0800106c <__lesf2>:
 800106c:	f04f 0c01 	mov.w	ip, #1
 8001070:	e002      	b.n	8001078 <__cmpsf2+0x4>
 8001072:	bf00      	nop

08001074 <__cmpsf2>:
 8001074:	f04f 0c01 	mov.w	ip, #1
 8001078:	f84d cd04 	str.w	ip, [sp, #-4]!
 800107c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001080:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001084:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001088:	bf18      	it	ne
 800108a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800108e:	d011      	beq.n	80010b4 <__cmpsf2+0x40>
 8001090:	b001      	add	sp, #4
 8001092:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001096:	bf18      	it	ne
 8001098:	ea90 0f01 	teqne	r0, r1
 800109c:	bf58      	it	pl
 800109e:	ebb2 0003 	subspl.w	r0, r2, r3
 80010a2:	bf88      	it	hi
 80010a4:	17c8      	asrhi	r0, r1, #31
 80010a6:	bf38      	it	cc
 80010a8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010ac:	bf18      	it	ne
 80010ae:	f040 0001 	orrne.w	r0, r0, #1
 80010b2:	4770      	bx	lr
 80010b4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010b8:	d102      	bne.n	80010c0 <__cmpsf2+0x4c>
 80010ba:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010be:	d105      	bne.n	80010cc <__cmpsf2+0x58>
 80010c0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010c4:	d1e4      	bne.n	8001090 <__cmpsf2+0x1c>
 80010c6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ca:	d0e1      	beq.n	8001090 <__cmpsf2+0x1c>
 80010cc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop

080010d4 <__aeabi_cfrcmple>:
 80010d4:	4684      	mov	ip, r0
 80010d6:	4608      	mov	r0, r1
 80010d8:	4661      	mov	r1, ip
 80010da:	e7ff      	b.n	80010dc <__aeabi_cfcmpeq>

080010dc <__aeabi_cfcmpeq>:
 80010dc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010de:	f7ff ffc9 	bl	8001074 <__cmpsf2>
 80010e2:	2800      	cmp	r0, #0
 80010e4:	bf48      	it	mi
 80010e6:	f110 0f00 	cmnmi.w	r0, #0
 80010ea:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ec <__aeabi_fcmpeq>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff fff4 	bl	80010dc <__aeabi_cfcmpeq>
 80010f4:	bf0c      	ite	eq
 80010f6:	2001      	moveq	r0, #1
 80010f8:	2000      	movne	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_fcmplt>:
 8001100:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001104:	f7ff ffea 	bl	80010dc <__aeabi_cfcmpeq>
 8001108:	bf34      	ite	cc
 800110a:	2001      	movcc	r0, #1
 800110c:	2000      	movcs	r0, #0
 800110e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001112:	bf00      	nop

08001114 <__aeabi_fcmple>:
 8001114:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001118:	f7ff ffe0 	bl	80010dc <__aeabi_cfcmpeq>
 800111c:	bf94      	ite	ls
 800111e:	2001      	movls	r0, #1
 8001120:	2000      	movhi	r0, #0
 8001122:	f85d fb08 	ldr.w	pc, [sp], #8
 8001126:	bf00      	nop

08001128 <__aeabi_fcmpge>:
 8001128:	f84d ed08 	str.w	lr, [sp, #-8]!
 800112c:	f7ff ffd2 	bl	80010d4 <__aeabi_cfrcmple>
 8001130:	bf94      	ite	ls
 8001132:	2001      	movls	r0, #1
 8001134:	2000      	movhi	r0, #0
 8001136:	f85d fb08 	ldr.w	pc, [sp], #8
 800113a:	bf00      	nop

0800113c <__aeabi_fcmpgt>:
 800113c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001140:	f7ff ffc8 	bl	80010d4 <__aeabi_cfrcmple>
 8001144:	bf34      	ite	cc
 8001146:	2001      	movcc	r0, #1
 8001148:	2000      	movcs	r0, #0
 800114a:	f85d fb08 	ldr.w	pc, [sp], #8
 800114e:	bf00      	nop

08001150 <__aeabi_f2iz>:
 8001150:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001154:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001158:	d30f      	bcc.n	800117a <__aeabi_f2iz+0x2a>
 800115a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800115e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001162:	d90d      	bls.n	8001180 <__aeabi_f2iz+0x30>
 8001164:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001168:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800116c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001170:	fa23 f002 	lsr.w	r0, r3, r2
 8001174:	bf18      	it	ne
 8001176:	4240      	negne	r0, r0
 8001178:	4770      	bx	lr
 800117a:	f04f 0000 	mov.w	r0, #0
 800117e:	4770      	bx	lr
 8001180:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001184:	d101      	bne.n	800118a <__aeabi_f2iz+0x3a>
 8001186:	0242      	lsls	r2, r0, #9
 8001188:	d105      	bne.n	8001196 <__aeabi_f2iz+0x46>
 800118a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800118e:	bf08      	it	eq
 8001190:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001194:	4770      	bx	lr
 8001196:	f04f 0000 	mov.w	r0, #0
 800119a:	4770      	bx	lr

0800119c <__aeabi_f2uiz>:
 800119c:	0042      	lsls	r2, r0, #1
 800119e:	d20e      	bcs.n	80011be <__aeabi_f2uiz+0x22>
 80011a0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011a4:	d30b      	bcc.n	80011be <__aeabi_f2uiz+0x22>
 80011a6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011aa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011ae:	d409      	bmi.n	80011c4 <__aeabi_f2uiz+0x28>
 80011b0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011b8:	fa23 f002 	lsr.w	r0, r3, r2
 80011bc:	4770      	bx	lr
 80011be:	f04f 0000 	mov.w	r0, #0
 80011c2:	4770      	bx	lr
 80011c4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011c8:	d101      	bne.n	80011ce <__aeabi_f2uiz+0x32>
 80011ca:	0242      	lsls	r2, r0, #9
 80011cc:	d102      	bne.n	80011d4 <__aeabi_f2uiz+0x38>
 80011ce:	f04f 30ff 	mov.w	r0, #4294967295
 80011d2:	4770      	bx	lr
 80011d4:	f04f 0000 	mov.w	r0, #0
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop

080011dc <__aeabi_uldivmod>:
 80011dc:	b953      	cbnz	r3, 80011f4 <__aeabi_uldivmod+0x18>
 80011de:	b94a      	cbnz	r2, 80011f4 <__aeabi_uldivmod+0x18>
 80011e0:	2900      	cmp	r1, #0
 80011e2:	bf08      	it	eq
 80011e4:	2800      	cmpeq	r0, #0
 80011e6:	bf1c      	itt	ne
 80011e8:	f04f 31ff 	movne.w	r1, #4294967295
 80011ec:	f04f 30ff 	movne.w	r0, #4294967295
 80011f0:	f000 b96e 	b.w	80014d0 <__aeabi_idiv0>
 80011f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80011f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011fc:	f000 f806 	bl	800120c <__udivmoddi4>
 8001200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001208:	b004      	add	sp, #16
 800120a:	4770      	bx	lr

0800120c <__udivmoddi4>:
 800120c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001210:	9e08      	ldr	r6, [sp, #32]
 8001212:	460d      	mov	r5, r1
 8001214:	4604      	mov	r4, r0
 8001216:	468e      	mov	lr, r1
 8001218:	2b00      	cmp	r3, #0
 800121a:	f040 8083 	bne.w	8001324 <__udivmoddi4+0x118>
 800121e:	428a      	cmp	r2, r1
 8001220:	4617      	mov	r7, r2
 8001222:	d947      	bls.n	80012b4 <__udivmoddi4+0xa8>
 8001224:	fab2 f382 	clz	r3, r2
 8001228:	b14b      	cbz	r3, 800123e <__udivmoddi4+0x32>
 800122a:	f1c3 0120 	rsb	r1, r3, #32
 800122e:	fa05 fe03 	lsl.w	lr, r5, r3
 8001232:	fa20 f101 	lsr.w	r1, r0, r1
 8001236:	409f      	lsls	r7, r3
 8001238:	ea41 0e0e 	orr.w	lr, r1, lr
 800123c:	409c      	lsls	r4, r3
 800123e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001242:	fbbe fcf8 	udiv	ip, lr, r8
 8001246:	fa1f f987 	uxth.w	r9, r7
 800124a:	fb08 e21c 	mls	r2, r8, ip, lr
 800124e:	fb0c f009 	mul.w	r0, ip, r9
 8001252:	0c21      	lsrs	r1, r4, #16
 8001254:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001258:	4290      	cmp	r0, r2
 800125a:	d90a      	bls.n	8001272 <__udivmoddi4+0x66>
 800125c:	18ba      	adds	r2, r7, r2
 800125e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8001262:	f080 8118 	bcs.w	8001496 <__udivmoddi4+0x28a>
 8001266:	4290      	cmp	r0, r2
 8001268:	f240 8115 	bls.w	8001496 <__udivmoddi4+0x28a>
 800126c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001270:	443a      	add	r2, r7
 8001272:	1a12      	subs	r2, r2, r0
 8001274:	fbb2 f0f8 	udiv	r0, r2, r8
 8001278:	fb08 2210 	mls	r2, r8, r0, r2
 800127c:	fb00 f109 	mul.w	r1, r0, r9
 8001280:	b2a4      	uxth	r4, r4
 8001282:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001286:	42a1      	cmp	r1, r4
 8001288:	d909      	bls.n	800129e <__udivmoddi4+0x92>
 800128a:	193c      	adds	r4, r7, r4
 800128c:	f100 32ff 	add.w	r2, r0, #4294967295
 8001290:	f080 8103 	bcs.w	800149a <__udivmoddi4+0x28e>
 8001294:	42a1      	cmp	r1, r4
 8001296:	f240 8100 	bls.w	800149a <__udivmoddi4+0x28e>
 800129a:	3802      	subs	r0, #2
 800129c:	443c      	add	r4, r7
 800129e:	1a64      	subs	r4, r4, r1
 80012a0:	2100      	movs	r1, #0
 80012a2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80012a6:	b11e      	cbz	r6, 80012b0 <__udivmoddi4+0xa4>
 80012a8:	2200      	movs	r2, #0
 80012aa:	40dc      	lsrs	r4, r3
 80012ac:	e9c6 4200 	strd	r4, r2, [r6]
 80012b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012b4:	b902      	cbnz	r2, 80012b8 <__udivmoddi4+0xac>
 80012b6:	deff      	udf	#255	; 0xff
 80012b8:	fab2 f382 	clz	r3, r2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d14f      	bne.n	8001360 <__udivmoddi4+0x154>
 80012c0:	1a8d      	subs	r5, r1, r2
 80012c2:	2101      	movs	r1, #1
 80012c4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80012c8:	fa1f f882 	uxth.w	r8, r2
 80012cc:	fbb5 fcfe 	udiv	ip, r5, lr
 80012d0:	fb0e 551c 	mls	r5, lr, ip, r5
 80012d4:	fb08 f00c 	mul.w	r0, r8, ip
 80012d8:	0c22      	lsrs	r2, r4, #16
 80012da:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80012de:	42a8      	cmp	r0, r5
 80012e0:	d907      	bls.n	80012f2 <__udivmoddi4+0xe6>
 80012e2:	197d      	adds	r5, r7, r5
 80012e4:	f10c 32ff 	add.w	r2, ip, #4294967295
 80012e8:	d202      	bcs.n	80012f0 <__udivmoddi4+0xe4>
 80012ea:	42a8      	cmp	r0, r5
 80012ec:	f200 80e9 	bhi.w	80014c2 <__udivmoddi4+0x2b6>
 80012f0:	4694      	mov	ip, r2
 80012f2:	1a2d      	subs	r5, r5, r0
 80012f4:	fbb5 f0fe 	udiv	r0, r5, lr
 80012f8:	fb0e 5510 	mls	r5, lr, r0, r5
 80012fc:	fb08 f800 	mul.w	r8, r8, r0
 8001300:	b2a4      	uxth	r4, r4
 8001302:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001306:	45a0      	cmp	r8, r4
 8001308:	d907      	bls.n	800131a <__udivmoddi4+0x10e>
 800130a:	193c      	adds	r4, r7, r4
 800130c:	f100 32ff 	add.w	r2, r0, #4294967295
 8001310:	d202      	bcs.n	8001318 <__udivmoddi4+0x10c>
 8001312:	45a0      	cmp	r8, r4
 8001314:	f200 80d9 	bhi.w	80014ca <__udivmoddi4+0x2be>
 8001318:	4610      	mov	r0, r2
 800131a:	eba4 0408 	sub.w	r4, r4, r8
 800131e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001322:	e7c0      	b.n	80012a6 <__udivmoddi4+0x9a>
 8001324:	428b      	cmp	r3, r1
 8001326:	d908      	bls.n	800133a <__udivmoddi4+0x12e>
 8001328:	2e00      	cmp	r6, #0
 800132a:	f000 80b1 	beq.w	8001490 <__udivmoddi4+0x284>
 800132e:	2100      	movs	r1, #0
 8001330:	e9c6 0500 	strd	r0, r5, [r6]
 8001334:	4608      	mov	r0, r1
 8001336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800133a:	fab3 f183 	clz	r1, r3
 800133e:	2900      	cmp	r1, #0
 8001340:	d14b      	bne.n	80013da <__udivmoddi4+0x1ce>
 8001342:	42ab      	cmp	r3, r5
 8001344:	d302      	bcc.n	800134c <__udivmoddi4+0x140>
 8001346:	4282      	cmp	r2, r0
 8001348:	f200 80b9 	bhi.w	80014be <__udivmoddi4+0x2b2>
 800134c:	1a84      	subs	r4, r0, r2
 800134e:	eb65 0303 	sbc.w	r3, r5, r3
 8001352:	2001      	movs	r0, #1
 8001354:	469e      	mov	lr, r3
 8001356:	2e00      	cmp	r6, #0
 8001358:	d0aa      	beq.n	80012b0 <__udivmoddi4+0xa4>
 800135a:	e9c6 4e00 	strd	r4, lr, [r6]
 800135e:	e7a7      	b.n	80012b0 <__udivmoddi4+0xa4>
 8001360:	409f      	lsls	r7, r3
 8001362:	f1c3 0220 	rsb	r2, r3, #32
 8001366:	40d1      	lsrs	r1, r2
 8001368:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800136c:	fbb1 f0fe 	udiv	r0, r1, lr
 8001370:	fa1f f887 	uxth.w	r8, r7
 8001374:	fb0e 1110 	mls	r1, lr, r0, r1
 8001378:	fa24 f202 	lsr.w	r2, r4, r2
 800137c:	409d      	lsls	r5, r3
 800137e:	fb00 fc08 	mul.w	ip, r0, r8
 8001382:	432a      	orrs	r2, r5
 8001384:	0c15      	lsrs	r5, r2, #16
 8001386:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800138a:	45ac      	cmp	ip, r5
 800138c:	fa04 f403 	lsl.w	r4, r4, r3
 8001390:	d909      	bls.n	80013a6 <__udivmoddi4+0x19a>
 8001392:	197d      	adds	r5, r7, r5
 8001394:	f100 31ff 	add.w	r1, r0, #4294967295
 8001398:	f080 808f 	bcs.w	80014ba <__udivmoddi4+0x2ae>
 800139c:	45ac      	cmp	ip, r5
 800139e:	f240 808c 	bls.w	80014ba <__udivmoddi4+0x2ae>
 80013a2:	3802      	subs	r0, #2
 80013a4:	443d      	add	r5, r7
 80013a6:	eba5 050c 	sub.w	r5, r5, ip
 80013aa:	fbb5 f1fe 	udiv	r1, r5, lr
 80013ae:	fb0e 5c11 	mls	ip, lr, r1, r5
 80013b2:	fb01 f908 	mul.w	r9, r1, r8
 80013b6:	b295      	uxth	r5, r2
 80013b8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80013bc:	45a9      	cmp	r9, r5
 80013be:	d907      	bls.n	80013d0 <__udivmoddi4+0x1c4>
 80013c0:	197d      	adds	r5, r7, r5
 80013c2:	f101 32ff 	add.w	r2, r1, #4294967295
 80013c6:	d274      	bcs.n	80014b2 <__udivmoddi4+0x2a6>
 80013c8:	45a9      	cmp	r9, r5
 80013ca:	d972      	bls.n	80014b2 <__udivmoddi4+0x2a6>
 80013cc:	3902      	subs	r1, #2
 80013ce:	443d      	add	r5, r7
 80013d0:	eba5 0509 	sub.w	r5, r5, r9
 80013d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013d8:	e778      	b.n	80012cc <__udivmoddi4+0xc0>
 80013da:	f1c1 0720 	rsb	r7, r1, #32
 80013de:	408b      	lsls	r3, r1
 80013e0:	fa22 fc07 	lsr.w	ip, r2, r7
 80013e4:	ea4c 0c03 	orr.w	ip, ip, r3
 80013e8:	fa25 f407 	lsr.w	r4, r5, r7
 80013ec:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80013f0:	fbb4 f9fe 	udiv	r9, r4, lr
 80013f4:	fa1f f88c 	uxth.w	r8, ip
 80013f8:	fb0e 4419 	mls	r4, lr, r9, r4
 80013fc:	fa20 f307 	lsr.w	r3, r0, r7
 8001400:	fb09 fa08 	mul.w	sl, r9, r8
 8001404:	408d      	lsls	r5, r1
 8001406:	431d      	orrs	r5, r3
 8001408:	0c2b      	lsrs	r3, r5, #16
 800140a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800140e:	45a2      	cmp	sl, r4
 8001410:	fa02 f201 	lsl.w	r2, r2, r1
 8001414:	fa00 f301 	lsl.w	r3, r0, r1
 8001418:	d909      	bls.n	800142e <__udivmoddi4+0x222>
 800141a:	eb1c 0404 	adds.w	r4, ip, r4
 800141e:	f109 30ff 	add.w	r0, r9, #4294967295
 8001422:	d248      	bcs.n	80014b6 <__udivmoddi4+0x2aa>
 8001424:	45a2      	cmp	sl, r4
 8001426:	d946      	bls.n	80014b6 <__udivmoddi4+0x2aa>
 8001428:	f1a9 0902 	sub.w	r9, r9, #2
 800142c:	4464      	add	r4, ip
 800142e:	eba4 040a 	sub.w	r4, r4, sl
 8001432:	fbb4 f0fe 	udiv	r0, r4, lr
 8001436:	fb0e 4410 	mls	r4, lr, r0, r4
 800143a:	fb00 fa08 	mul.w	sl, r0, r8
 800143e:	b2ad      	uxth	r5, r5
 8001440:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001444:	45a2      	cmp	sl, r4
 8001446:	d908      	bls.n	800145a <__udivmoddi4+0x24e>
 8001448:	eb1c 0404 	adds.w	r4, ip, r4
 800144c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001450:	d22d      	bcs.n	80014ae <__udivmoddi4+0x2a2>
 8001452:	45a2      	cmp	sl, r4
 8001454:	d92b      	bls.n	80014ae <__udivmoddi4+0x2a2>
 8001456:	3802      	subs	r0, #2
 8001458:	4464      	add	r4, ip
 800145a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800145e:	fba0 8902 	umull	r8, r9, r0, r2
 8001462:	eba4 040a 	sub.w	r4, r4, sl
 8001466:	454c      	cmp	r4, r9
 8001468:	46c6      	mov	lr, r8
 800146a:	464d      	mov	r5, r9
 800146c:	d319      	bcc.n	80014a2 <__udivmoddi4+0x296>
 800146e:	d016      	beq.n	800149e <__udivmoddi4+0x292>
 8001470:	b15e      	cbz	r6, 800148a <__udivmoddi4+0x27e>
 8001472:	ebb3 020e 	subs.w	r2, r3, lr
 8001476:	eb64 0405 	sbc.w	r4, r4, r5
 800147a:	fa04 f707 	lsl.w	r7, r4, r7
 800147e:	fa22 f301 	lsr.w	r3, r2, r1
 8001482:	431f      	orrs	r7, r3
 8001484:	40cc      	lsrs	r4, r1
 8001486:	e9c6 7400 	strd	r7, r4, [r6]
 800148a:	2100      	movs	r1, #0
 800148c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001490:	4631      	mov	r1, r6
 8001492:	4630      	mov	r0, r6
 8001494:	e70c      	b.n	80012b0 <__udivmoddi4+0xa4>
 8001496:	468c      	mov	ip, r1
 8001498:	e6eb      	b.n	8001272 <__udivmoddi4+0x66>
 800149a:	4610      	mov	r0, r2
 800149c:	e6ff      	b.n	800129e <__udivmoddi4+0x92>
 800149e:	4543      	cmp	r3, r8
 80014a0:	d2e6      	bcs.n	8001470 <__udivmoddi4+0x264>
 80014a2:	ebb8 0e02 	subs.w	lr, r8, r2
 80014a6:	eb69 050c 	sbc.w	r5, r9, ip
 80014aa:	3801      	subs	r0, #1
 80014ac:	e7e0      	b.n	8001470 <__udivmoddi4+0x264>
 80014ae:	4628      	mov	r0, r5
 80014b0:	e7d3      	b.n	800145a <__udivmoddi4+0x24e>
 80014b2:	4611      	mov	r1, r2
 80014b4:	e78c      	b.n	80013d0 <__udivmoddi4+0x1c4>
 80014b6:	4681      	mov	r9, r0
 80014b8:	e7b9      	b.n	800142e <__udivmoddi4+0x222>
 80014ba:	4608      	mov	r0, r1
 80014bc:	e773      	b.n	80013a6 <__udivmoddi4+0x19a>
 80014be:	4608      	mov	r0, r1
 80014c0:	e749      	b.n	8001356 <__udivmoddi4+0x14a>
 80014c2:	f1ac 0c02 	sub.w	ip, ip, #2
 80014c6:	443d      	add	r5, r7
 80014c8:	e713      	b.n	80012f2 <__udivmoddi4+0xe6>
 80014ca:	3802      	subs	r0, #2
 80014cc:	443c      	add	r4, r7
 80014ce:	e724      	b.n	800131a <__udivmoddi4+0x10e>

080014d0 <__aeabi_idiv0>:
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop

080014d4 <DebugManager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Steppermanager */
void DebugManager(void const * argument)
{
 80014d4:	b5b0      	push	{r4, r5, r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

	State TempAlgoState;

	for(;;)
	{
		osDelay(5000);
 80014dc:	f241 3088 	movw	r0, #5000	; 0x1388
 80014e0:	f008 fc7b 	bl	8009dda <osDelay>
		HAL_RTC_GetTime(&hrtc,&sTime,0);
 80014e4:	2200      	movs	r2, #0
 80014e6:	4973      	ldr	r1, [pc, #460]	; (80016b4 <DebugManager+0x1e0>)
 80014e8:	4873      	ldr	r0, [pc, #460]	; (80016b8 <DebugManager+0x1e4>)
 80014ea:	f007 fba7 	bl	8008c3c <HAL_RTC_GetTime>
		printf("#");
 80014ee:	2023      	movs	r0, #35	; 0x23
 80014f0:	f00b fdc4 	bl	800d07c <putchar>
		printf("%02i:%02i:%02i ",sTime.Hours,sTime.Minutes,sTime.Seconds);
 80014f4:	4b6f      	ldr	r3, [pc, #444]	; (80016b4 <DebugManager+0x1e0>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4619      	mov	r1, r3
 80014fa:	4b6e      	ldr	r3, [pc, #440]	; (80016b4 <DebugManager+0x1e0>)
 80014fc:	785b      	ldrb	r3, [r3, #1]
 80014fe:	461a      	mov	r2, r3
 8001500:	4b6c      	ldr	r3, [pc, #432]	; (80016b4 <DebugManager+0x1e0>)
 8001502:	789b      	ldrb	r3, [r3, #2]
 8001504:	486d      	ldr	r0, [pc, #436]	; (80016bc <DebugManager+0x1e8>)
 8001506:	f00b fda1 	bl	800d04c <iprintf>
		printf("Tavant:%iF TArriere:%iF Plenum:%iF ",Algo_getBaffleTemp()/10,Algo_getRearTemp()/10,Algo_getPlenumTemp()/10);
 800150a:	f002 fc75 	bl	8003df8 <Algo_getBaffleTemp>
 800150e:	4603      	mov	r3, r0
 8001510:	4a6b      	ldr	r2, [pc, #428]	; (80016c0 <DebugManager+0x1ec>)
 8001512:	fb82 1203 	smull	r1, r2, r2, r3
 8001516:	1092      	asrs	r2, r2, #2
 8001518:	17db      	asrs	r3, r3, #31
 800151a:	1ad4      	subs	r4, r2, r3
 800151c:	f002 fc62 	bl	8003de4 <Algo_getRearTemp>
 8001520:	4603      	mov	r3, r0
 8001522:	4a67      	ldr	r2, [pc, #412]	; (80016c0 <DebugManager+0x1ec>)
 8001524:	fb82 1203 	smull	r1, r2, r2, r3
 8001528:	1092      	asrs	r2, r2, #2
 800152a:	17db      	asrs	r3, r3, #31
 800152c:	1ad5      	subs	r5, r2, r3
 800152e:	f002 fc7b 	bl	8003e28 <Algo_getPlenumTemp>
 8001532:	4603      	mov	r3, r0
 8001534:	4a62      	ldr	r2, [pc, #392]	; (80016c0 <DebugManager+0x1ec>)
 8001536:	fb82 1203 	smull	r1, r2, r2, r3
 800153a:	1092      	asrs	r2, r2, #2
 800153c:	17db      	asrs	r3, r3, #31
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	462a      	mov	r2, r5
 8001542:	4621      	mov	r1, r4
 8001544:	485f      	ldr	r0, [pc, #380]	; (80016c4 <DebugManager+0x1f0>)
 8001546:	f00b fd81 	bl	800d04c <iprintf>
		printf("State:");
 800154a:	485f      	ldr	r0, [pc, #380]	; (80016c8 <DebugManager+0x1f4>)
 800154c:	f00b fd7e 	bl	800d04c <iprintf>

		TempAlgoState = Algo_getState();
 8001550:	f002 fc1c 	bl	8003d8c <Algo_getState>
 8001554:	4603      	mov	r3, r0
 8001556:	73fb      	strb	r3, [r7, #15]
		switch (TempAlgoState) {
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	2b0c      	cmp	r3, #12
 800155c:	d850      	bhi.n	8001600 <DebugManager+0x12c>
 800155e:	a201      	add	r2, pc, #4	; (adr r2, 8001564 <DebugManager+0x90>)
 8001560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001564:	08001599 	.word	0x08001599
 8001568:	080015a1 	.word	0x080015a1
 800156c:	080015c9 	.word	0x080015c9
 8001570:	080015a9 	.word	0x080015a9
 8001574:	080015b1 	.word	0x080015b1
 8001578:	080015b9 	.word	0x080015b9
 800157c:	080015c1 	.word	0x080015c1
 8001580:	080015e1 	.word	0x080015e1
 8001584:	080015d1 	.word	0x080015d1
 8001588:	080015d9 	.word	0x080015d9
 800158c:	080015e9 	.word	0x080015e9
 8001590:	080015f1 	.word	0x080015f1
 8001594:	080015f9 	.word	0x080015f9
			case ZEROING_STEPPER:
				printf("ZEROING_STEP");
 8001598:	484c      	ldr	r0, [pc, #304]	; (80016cc <DebugManager+0x1f8>)
 800159a:	f00b fd57 	bl	800d04c <iprintf>
				break;
 800159e:	e033      	b.n	8001608 <DebugManager+0x134>
			case WAITING:
				printf("WAITING");
 80015a0:	484b      	ldr	r0, [pc, #300]	; (80016d0 <DebugManager+0x1fc>)
 80015a2:	f00b fd53 	bl	800d04c <iprintf>
				break;
 80015a6:	e02f      	b.n	8001608 <DebugManager+0x134>
			case TEMPERATURE_RISE:
				printf("TEMP_RISE");
 80015a8:	484a      	ldr	r0, [pc, #296]	; (80016d4 <DebugManager+0x200>)
 80015aa:	f00b fd4f 	bl	800d04c <iprintf>
				break;
 80015ae:	e02b      	b.n	8001608 <DebugManager+0x134>
			case COMBUSTION_LOW:
				printf("COMB_LOW");
 80015b0:	4849      	ldr	r0, [pc, #292]	; (80016d8 <DebugManager+0x204>)
 80015b2:	f00b fd4b 	bl	800d04c <iprintf>
				break;
 80015b6:	e027      	b.n	8001608 <DebugManager+0x134>
			case COMBUSTION_LOW2:
				printf("COMB_LOW2");
 80015b8:	4848      	ldr	r0, [pc, #288]	; (80016dc <DebugManager+0x208>)
 80015ba:	f00b fd47 	bl	800d04c <iprintf>
				break;
 80015be:	e023      	b.n	8001608 <DebugManager+0x134>
			case COMBUSTION_HIGH:
				printf("COMB_HIGH");
 80015c0:	4847      	ldr	r0, [pc, #284]	; (80016e0 <DebugManager+0x20c>)
 80015c2:	f00b fd43 	bl	800d04c <iprintf>
				break;
 80015c6:	e01f      	b.n	8001608 <DebugManager+0x134>
			case RELOAD_IGNITION:
				printf("RELOAD_IGNI");
 80015c8:	4846      	ldr	r0, [pc, #280]	; (80016e4 <DebugManager+0x210>)
 80015ca:	f00b fd3f 	bl	800d04c <iprintf>
				break;
 80015ce:	e01b      	b.n	8001608 <DebugManager+0x134>
			case FLAME_LOSS:
				printf("FLAME_LOSS");
 80015d0:	4845      	ldr	r0, [pc, #276]	; (80016e8 <DebugManager+0x214>)
 80015d2:	f00b fd3b 	bl	800d04c <iprintf>
				break;
 80015d6:	e017      	b.n	8001608 <DebugManager+0x134>
			case COAL_HIGH:
				printf("COAL_HIGH");
 80015d8:	4844      	ldr	r0, [pc, #272]	; (80016ec <DebugManager+0x218>)
 80015da:	f00b fd37 	bl	800d04c <iprintf>
				break;
 80015de:	e013      	b.n	8001608 <DebugManager+0x134>
			case COAL_LOW:
				printf("COAL_LOW");
 80015e0:	4843      	ldr	r0, [pc, #268]	; (80016f0 <DebugManager+0x21c>)
 80015e2:	f00b fd33 	bl	800d04c <iprintf>
				break;
 80015e6:	e00f      	b.n	8001608 <DebugManager+0x134>
			case OVERTEMP:
				printf("OVERTEMP");
 80015e8:	4842      	ldr	r0, [pc, #264]	; (80016f4 <DebugManager+0x220>)
 80015ea:	f00b fd2f 	bl	800d04c <iprintf>
				break;
 80015ee:	e00b      	b.n	8001608 <DebugManager+0x134>
			case SAFETY:
				printf("SAFETY");
 80015f0:	4841      	ldr	r0, [pc, #260]	; (80016f8 <DebugManager+0x224>)
 80015f2:	f00b fd2b 	bl	800d04c <iprintf>
				break;
 80015f6:	e007      	b.n	8001608 <DebugManager+0x134>
			case PRODUCTION_TEST:
				printf("PRODTEST");
 80015f8:	4840      	ldr	r0, [pc, #256]	; (80016fc <DebugManager+0x228>)
 80015fa:	f00b fd27 	bl	800d04c <iprintf>
				break;
 80015fe:	e003      	b.n	8001608 <DebugManager+0x134>
			default:
				printf("UNKNOWN");
 8001600:	483f      	ldr	r0, [pc, #252]	; (8001700 <DebugManager+0x22c>)
 8001602:	f00b fd23 	bl	800d04c <iprintf>
				break;
 8001606:	bf00      	nop
		}
		printf(" tStat:");
 8001608:	483e      	ldr	r0, [pc, #248]	; (8001704 <DebugManager+0x230>)
 800160a:	f00b fd1f 	bl	800d04c <iprintf>
		if (Algo_getThermostatRequest())
 800160e:	f002 fc39 	bl	8003e84 <Algo_getThermostatRequest>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <DebugManager+0x14c>
		{
			printf("ON ");
 8001618:	483b      	ldr	r0, [pc, #236]	; (8001708 <DebugManager+0x234>)
 800161a:	f00b fd17 	bl	800d04c <iprintf>
 800161e:	e002      	b.n	8001626 <DebugManager+0x152>
		}
		else
		{
			printf("OFF ");
 8001620:	483a      	ldr	r0, [pc, #232]	; (800170c <DebugManager+0x238>)
 8001622:	f00b fd13 	bl	800d04c <iprintf>
		}
		printf("dTav:%i",(int)Algo_getBaffleTempSlope());
 8001626:	f002 fb6f 	bl	8003d08 <Algo_getBaffleTempSlope>
 800162a:	4603      	mov	r3, r0
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff fd8f 	bl	8001150 <__aeabi_f2iz>
 8001632:	4603      	mov	r3, r0
 8001634:	4619      	mov	r1, r3
 8001636:	4836      	ldr	r0, [pc, #216]	; (8001710 <DebugManager+0x23c>)
 8001638:	f00b fd08 	bl	800d04c <iprintf>
		printf(" FanSpeed:%i ",Mot_getFanSpeed());
 800163c:	f000 fc8a 	bl	8001f54 <Mot_getFanSpeed>
 8001640:	4603      	mov	r3, r0
 8001642:	4619      	mov	r1, r3
 8001644:	4833      	ldr	r0, [pc, #204]	; (8001714 <DebugManager+0x240>)
 8001646:	f00b fd01 	bl	800d04c <iprintf>
		printf("Grille:%i ",	Algo_getGrill()*9/10);
 800164a:	f002 fc01 	bl	8003e50 <Algo_getGrill>
 800164e:	4602      	mov	r2, r0
 8001650:	4613      	mov	r3, r2
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	4413      	add	r3, r2
 8001656:	4a1a      	ldr	r2, [pc, #104]	; (80016c0 <DebugManager+0x1ec>)
 8001658:	fb82 1203 	smull	r1, r2, r2, r3
 800165c:	1092      	asrs	r2, r2, #2
 800165e:	17db      	asrs	r3, r3, #31
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	4619      	mov	r1, r3
 8001664:	482c      	ldr	r0, [pc, #176]	; (8001718 <DebugManager+0x244>)
 8001666:	f00b fcf1 	bl	800d04c <iprintf>
		printf("PIDPos:%i ",PIDTrapPosition*9/10);
 800166a:	4b2c      	ldr	r3, [pc, #176]	; (800171c <DebugManager+0x248>)
 800166c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001670:	461a      	mov	r2, r3
 8001672:	4613      	mov	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	4413      	add	r3, r2
 8001678:	4a11      	ldr	r2, [pc, #68]	; (80016c0 <DebugManager+0x1ec>)
 800167a:	fb82 1203 	smull	r1, r2, r2, r3
 800167e:	1092      	asrs	r2, r2, #2
 8001680:	17db      	asrs	r3, r3, #31
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	4619      	mov	r1, r3
 8001686:	4826      	ldr	r0, [pc, #152]	; (8001720 <DebugManager+0x24c>)
 8001688:	f00b fce0 	bl	800d04c <iprintf>
		printf("PrimSec:%i",Algo_getPrimary()*9/10);
 800168c:	f002 fbd6 	bl	8003e3c <Algo_getPrimary>
 8001690:	4602      	mov	r2, r0
 8001692:	4613      	mov	r3, r2
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	4413      	add	r3, r2
 8001698:	4a09      	ldr	r2, [pc, #36]	; (80016c0 <DebugManager+0x1ec>)
 800169a:	fb82 1203 	smull	r1, r2, r2, r3
 800169e:	1092      	asrs	r2, r2, #2
 80016a0:	17db      	asrs	r3, r3, #31
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	4619      	mov	r1, r3
 80016a6:	481f      	ldr	r0, [pc, #124]	; (8001724 <DebugManager+0x250>)
 80016a8:	f00b fcd0 	bl	800d04c <iprintf>
		printf("*\n\r");
 80016ac:	481e      	ldr	r0, [pc, #120]	; (8001728 <DebugManager+0x254>)
 80016ae:	f00b fccd 	bl	800d04c <iprintf>
		osDelay(5000);
 80016b2:	e713      	b.n	80014dc <DebugManager+0x8>
 80016b4:	20002f6c 	.word	0x20002f6c
 80016b8:	20002fc4 	.word	0x20002fc4
 80016bc:	0800ef00 	.word	0x0800ef00
 80016c0:	66666667 	.word	0x66666667
 80016c4:	0800ef10 	.word	0x0800ef10
 80016c8:	0800ef34 	.word	0x0800ef34
 80016cc:	0800ef3c 	.word	0x0800ef3c
 80016d0:	0800ef4c 	.word	0x0800ef4c
 80016d4:	0800ef54 	.word	0x0800ef54
 80016d8:	0800ef60 	.word	0x0800ef60
 80016dc:	0800ef6c 	.word	0x0800ef6c
 80016e0:	0800ef78 	.word	0x0800ef78
 80016e4:	0800ef84 	.word	0x0800ef84
 80016e8:	0800ef90 	.word	0x0800ef90
 80016ec:	0800ef9c 	.word	0x0800ef9c
 80016f0:	0800efa8 	.word	0x0800efa8
 80016f4:	0800efb4 	.word	0x0800efb4
 80016f8:	0800efc0 	.word	0x0800efc0
 80016fc:	0800efc8 	.word	0x0800efc8
 8001700:	0800efd4 	.word	0x0800efd4
 8001704:	0800efdc 	.word	0x0800efdc
 8001708:	0800efe4 	.word	0x0800efe4
 800170c:	0800efe8 	.word	0x0800efe8
 8001710:	0800eff0 	.word	0x0800eff0
 8001714:	0800eff8 	.word	0x0800eff8
 8001718:	0800f008 	.word	0x0800f008
 800171c:	200005f4 	.word	0x200005f4
 8001720:	0800f014 	.word	0x0800f014
 8001724:	0800f020 	.word	0x0800f020
 8001728:	0800f02c 	.word	0x0800f02c

0800172c <__io_putchar>:

//UART_HandleTypeDef huart3;
//UART_HandleTypeDef huart2;
//UART_HandleTypeDef huart1;

int __io_putchar(int ch) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001734:	1d39      	adds	r1, r7, #4
 8001736:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800173a:	2201      	movs	r2, #1
 800173c:	4803      	ldr	r0, [pc, #12]	; (800174c <__io_putchar+0x20>)
 800173e:	f008 f956 	bl	80099ee <HAL_UART_Transmit>
  return ch;
 8001742:	687b      	ldr	r3, [r7, #4]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20002f78 	.word	0x20002f78

08001750 <readModel>:

}
*/

FurnaceModel readModel()
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
	FurnaceModel model = 0;  //default to Heatmax
 8001756:	2300      	movs	r3, #0
 8001758:	71fb      	strb	r3, [r7, #7]
	if(GPIO_PIN_SET == HAL_GPIO_ReadPin(Model_bit0_GPIO_Port,Model_bit0_Pin))
	{
		model +=4;
	}
*/
	return model;
 800175a:	79fb      	ldrb	r3, [r7, #7]
}
 800175c:	4618      	mov	r0, r3
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr
	...

08001768 <HmiManager>:

void HmiManager()
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
	static uint32_t LastButtonPressedTime_ms = 0;
	static uint32_t LastButttonToggle_ms =0;
	uint32_t LastButttonToggleTemp_ms =0;
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
    bool interlockActive;

	for(;;)
	{

		osDelay(50);
 8001772:	2032      	movs	r0, #50	; 0x32
 8001774:	f008 fb31 	bl	8009dda <osDelay>
		State algostate = Algo_getState();
 8001778:	f002 fb08 	bl	8003d8c <Algo_getState>
 800177c:	4603      	mov	r3, r0
 800177e:	72fb      	strb	r3, [r7, #11]
		uint32_t kerneltime = osKernelSysTick();
 8001780:	f008 facf 	bl	8009d22 <osKernelSysTick>
 8001784:	6078      	str	r0, [r7, #4]

		tStatDemand = (HAL_GPIO_ReadPin(Thermostat_Input_GPIO_Port,Thermostat_Input_Pin) == GPIO_PIN_RESET);
 8001786:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800178a:	48a6      	ldr	r0, [pc, #664]	; (8001a24 <HmiManager+0x2bc>)
 800178c:	f004 f916 	bl	80059bc <HAL_GPIO_ReadPin>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	bf0c      	ite	eq
 8001796:	2301      	moveq	r3, #1
 8001798:	2300      	movne	r3, #0
 800179a:	70fb      	strb	r3, [r7, #3]
		interlockActive = (HAL_GPIO_ReadPin(Interlock_Input_GPIO_Port,Interlock_Input_Pin) == GPIO_PIN_RESET);
 800179c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017a0:	48a0      	ldr	r0, [pc, #640]	; (8001a24 <HmiManager+0x2bc>)
 80017a2:	f004 f90b 	bl	80059bc <HAL_GPIO_ReadPin>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	bf0c      	ite	eq
 80017ac:	2301      	moveq	r3, #1
 80017ae:	2300      	movne	r3, #0
 80017b0:	70bb      	strb	r3, [r7, #2]

		Algo_setThermostatRequest(tStatDemand);
 80017b2:	78fb      	ldrb	r3, [r7, #3]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f002 fb55 	bl	8003e64 <Algo_setThermostatRequest>
		Algo_setInterlockRequest(interlockActive);
 80017ba:	78bb      	ldrb	r3, [r7, #2]
 80017bc:	4618      	mov	r0, r3
 80017be:	f002 fb6b 	bl	8003e98 <Algo_setInterlockRequest>

		if(algostate !=PRODUCTION_TEST)
 80017c2:	7afb      	ldrb	r3, [r7, #11]
 80017c4:	2b0c      	cmp	r3, #12
 80017c6:	f000 8089 	beq.w	80018dc <HmiManager+0x174>
			//{
			//	HAL_GPIO_TogglePin(Button_LED_GPIO_Port, Button_LED_Pin);
			//}
			//else
			//{
				if( (tStatDemand || Algo_getInterlockRequest()) && (Algo_getState() !=SAFETY && Algo_getState() != OVERTEMP && !ButtonBlinkingrequired) )
 80017ca:	78fb      	ldrb	r3, [r7, #3]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d104      	bne.n	80017da <HmiManager+0x72>
 80017d0:	f002 fb72 	bl	8003eb8 <Algo_getInterlockRequest>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d029      	beq.n	800182e <HmiManager+0xc6>
 80017da:	f002 fad7 	bl	8003d8c <Algo_getState>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b0b      	cmp	r3, #11
 80017e2:	d024      	beq.n	800182e <HmiManager+0xc6>
 80017e4:	f002 fad2 	bl	8003d8c <Algo_getState>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b0a      	cmp	r3, #10
 80017ec:	d01f      	beq.n	800182e <HmiManager+0xc6>
 80017ee:	4b8e      	ldr	r3, [pc, #568]	; (8001a28 <HmiManager+0x2c0>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	f083 0301 	eor.w	r3, r3, #1
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d018      	beq.n	800182e <HmiManager+0xc6>
				{
					if(Algo_getInterlockRequest() || Algo_getRearTemp() < 4000) //if rear temp below 400F, furnace is too cold and reignition is needded
 80017fc:	f002 fb5c 	bl	8003eb8 <Algo_getInterlockRequest>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d105      	bne.n	8001812 <HmiManager+0xaa>
 8001806:	f002 faed 	bl	8003de4 <Algo_getRearTemp>
 800180a:	4603      	mov	r3, r0
 800180c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001810:	da06      	bge.n	8001820 <HmiManager+0xb8>
					{
						SetButtonLed_OFF();
 8001812:	2200      	movs	r2, #0
 8001814:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001818:	4884      	ldr	r0, [pc, #528]	; (8001a2c <HmiManager+0x2c4>)
 800181a:	f004 f8e6 	bl	80059ea <HAL_GPIO_WritePin>
					if(Algo_getInterlockRequest() || Algo_getRearTemp() < 4000) //if rear temp below 400F, furnace is too cold and reignition is needded
 800181e:	e119      	b.n	8001a54 <HmiManager+0x2ec>
					}
					else
					{
						SetButtonLed_ON();
 8001820:	2201      	movs	r2, #1
 8001822:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001826:	4881      	ldr	r0, [pc, #516]	; (8001a2c <HmiManager+0x2c4>)
 8001828:	f004 f8df 	bl	80059ea <HAL_GPIO_WritePin>
					if(Algo_getInterlockRequest() || Algo_getRearTemp() < 4000) //if rear temp below 400F, furnace is too cold and reignition is needded
 800182c:	e112      	b.n	8001a54 <HmiManager+0x2ec>
					}
				}
				else if(Algo_getBaffleTemp()>4000 || Algo_getState() ==SAFETY || Algo_getState() ==OVERTEMP || ButtonBlinkingrequired)
 800182e:	f002 fae3 	bl	8003df8 <Algo_getBaffleTemp>
 8001832:	4603      	mov	r3, r0
 8001834:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001838:	dc0d      	bgt.n	8001856 <HmiManager+0xee>
 800183a:	f002 faa7 	bl	8003d8c <Algo_getState>
 800183e:	4603      	mov	r3, r0
 8001840:	2b0b      	cmp	r3, #11
 8001842:	d008      	beq.n	8001856 <HmiManager+0xee>
 8001844:	f002 faa2 	bl	8003d8c <Algo_getState>
 8001848:	4603      	mov	r3, r0
 800184a:	2b0a      	cmp	r3, #10
 800184c:	d003      	beq.n	8001856 <HmiManager+0xee>
 800184e:	4b76      	ldr	r3, [pc, #472]	; (8001a28 <HmiManager+0x2c0>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d03b      	beq.n	80018ce <HmiManager+0x166>
				{
					if(Algo_getState() ==SAFETY || Algo_getState() ==OVERTEMP)
 8001856:	f002 fa99 	bl	8003d8c <Algo_getState>
 800185a:	4603      	mov	r3, r0
 800185c:	2b0b      	cmp	r3, #11
 800185e:	d004      	beq.n	800186a <HmiManager+0x102>
 8001860:	f002 fa94 	bl	8003d8c <Algo_getState>
 8001864:	4603      	mov	r3, r0
 8001866:	2b0a      	cmp	r3, #10
 8001868:	d104      	bne.n	8001874 <HmiManager+0x10c>
					{
						LastButttonToggleTemp_ms = LastButttonToggle_ms+100;
 800186a:	4b71      	ldr	r3, [pc, #452]	; (8001a30 <HmiManager+0x2c8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	3364      	adds	r3, #100	; 0x64
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	e00d      	b.n	8001890 <HmiManager+0x128>
					}
					else if (ButtonBlinkingrequired)
 8001874:	4b6c      	ldr	r3, [pc, #432]	; (8001a28 <HmiManager+0x2c0>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d004      	beq.n	8001886 <HmiManager+0x11e>
					{
						LastButttonToggleTemp_ms = LastButttonToggle_ms+50;
 800187c:	4b6c      	ldr	r3, [pc, #432]	; (8001a30 <HmiManager+0x2c8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	3332      	adds	r3, #50	; 0x32
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	e004      	b.n	8001890 <HmiManager+0x128>
					}
					else
					{
						LastButttonToggleTemp_ms = LastButttonToggle_ms+1500;
 8001886:	4b6a      	ldr	r3, [pc, #424]	; (8001a30 <HmiManager+0x2c8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 800188e:	60fb      	str	r3, [r7, #12]
					}
					if((LastButttonToggleTemp_ms) < kerneltime) //1Hz
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	429a      	cmp	r2, r3
 8001896:	f080 80dd 	bcs.w	8001a54 <HmiManager+0x2ec>
					{
						if(ButtonBlinkingrequired && (buttonblinkrequirecount >=0))
 800189a:	4b63      	ldr	r3, [pc, #396]	; (8001a28 <HmiManager+0x2c0>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00c      	beq.n	80018bc <HmiManager+0x154>
						{
							buttonblinkrequirecount--;
 80018a2:	4b64      	ldr	r3, [pc, #400]	; (8001a34 <HmiManager+0x2cc>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4b62      	ldr	r3, [pc, #392]	; (8001a34 <HmiManager+0x2cc>)
 80018ac:	701a      	strb	r2, [r3, #0]
							if(buttonblinkrequirecount ==0)
 80018ae:	4b61      	ldr	r3, [pc, #388]	; (8001a34 <HmiManager+0x2cc>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d102      	bne.n	80018bc <HmiManager+0x154>
							{
								ButtonBlinkingrequired = false;
 80018b6:	4b5c      	ldr	r3, [pc, #368]	; (8001a28 <HmiManager+0x2c0>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	701a      	strb	r2, [r3, #0]
							}
						}
						LastButttonToggle_ms = kerneltime;
 80018bc:	4a5c      	ldr	r2, [pc, #368]	; (8001a30 <HmiManager+0x2c8>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6013      	str	r3, [r2, #0]
						HAL_GPIO_TogglePin(Button_LED_GPIO_Port, Button_LED_Pin);
 80018c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018c6:	4859      	ldr	r0, [pc, #356]	; (8001a2c <HmiManager+0x2c4>)
 80018c8:	f004 f8a7 	bl	8005a1a <HAL_GPIO_TogglePin>
					if((LastButttonToggleTemp_ms) < kerneltime) //1Hz
 80018cc:	e0c2      	b.n	8001a54 <HmiManager+0x2ec>
					}
				}
				else
				{
					SetButtonLed_OFF();
 80018ce:	2200      	movs	r2, #0
 80018d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018d4:	4855      	ldr	r0, [pc, #340]	; (8001a2c <HmiManager+0x2c4>)
 80018d6:	f004 f888 	bl	80059ea <HAL_GPIO_WritePin>
 80018da:	e0bb      	b.n	8001a54 <HmiManager+0x2ec>
				}
			//}
		}
		else
		{
			currentState = getTestState();
 80018dc:	f000 fd06 	bl	80022ec <getTestState>
 80018e0:	4603      	mov	r3, r0
 80018e2:	461a      	mov	r2, r3
 80018e4:	4b54      	ldr	r3, [pc, #336]	; (8001a38 <HmiManager+0x2d0>)
 80018e6:	701a      	strb	r2, [r3, #0]
			void Algo_clearReloadRequest(); // in case we generate an event on function entry
			if(currentState == THERMO_REAR_TEST)
 80018e8:	4b53      	ldr	r3, [pc, #332]	; (8001a38 <HmiManager+0x2d0>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d117      	bne.n	8001920 <HmiManager+0x1b8>
				thermocoupleTestPeriod = (float)1000/Algo_getRearTemp()*800;
 80018f0:	f002 fa78 	bl	8003de4 <Algo_getRearTemp>
 80018f4:	4603      	mov	r3, r0
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fa10 	bl	8000d1c <__aeabi_i2f>
 80018fc:	4603      	mov	r3, r0
 80018fe:	4619      	mov	r1, r3
 8001900:	484e      	ldr	r0, [pc, #312]	; (8001a3c <HmiManager+0x2d4>)
 8001902:	f7ff fb13 	bl	8000f2c <__aeabi_fdiv>
 8001906:	4603      	mov	r3, r0
 8001908:	494d      	ldr	r1, [pc, #308]	; (8001a40 <HmiManager+0x2d8>)
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fa5a 	bl	8000dc4 <__aeabi_fmul>
 8001910:	4603      	mov	r3, r0
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fc42 	bl	800119c <__aeabi_f2uiz>
 8001918:	4603      	mov	r3, r0
 800191a:	4a4a      	ldr	r2, [pc, #296]	; (8001a44 <HmiManager+0x2dc>)
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	e036      	b.n	800198e <HmiManager+0x226>
			else if (currentState== THERMO_BAFFLE_TEST)
 8001920:	4b45      	ldr	r3, [pc, #276]	; (8001a38 <HmiManager+0x2d0>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b03      	cmp	r3, #3
 8001926:	d117      	bne.n	8001958 <HmiManager+0x1f0>
				thermocoupleTestPeriod = (float)1000/Algo_getBaffleTemp()*800;
 8001928:	f002 fa66 	bl	8003df8 <Algo_getBaffleTemp>
 800192c:	4603      	mov	r3, r0
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff f9f4 	bl	8000d1c <__aeabi_i2f>
 8001934:	4603      	mov	r3, r0
 8001936:	4619      	mov	r1, r3
 8001938:	4840      	ldr	r0, [pc, #256]	; (8001a3c <HmiManager+0x2d4>)
 800193a:	f7ff faf7 	bl	8000f2c <__aeabi_fdiv>
 800193e:	4603      	mov	r3, r0
 8001940:	493f      	ldr	r1, [pc, #252]	; (8001a40 <HmiManager+0x2d8>)
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fa3e 	bl	8000dc4 <__aeabi_fmul>
 8001948:	4603      	mov	r3, r0
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fc26 	bl	800119c <__aeabi_f2uiz>
 8001950:	4603      	mov	r3, r0
 8001952:	4a3c      	ldr	r2, [pc, #240]	; (8001a44 <HmiManager+0x2dc>)
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	e01a      	b.n	800198e <HmiManager+0x226>
			else if (currentState== PLENUM_RTD_TEST)
 8001958:	4b37      	ldr	r3, [pc, #220]	; (8001a38 <HmiManager+0x2d0>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b04      	cmp	r3, #4
 800195e:	d116      	bne.n	800198e <HmiManager+0x226>
				thermocoupleTestPeriod = (float)1000/Algo_getPlenumTemp()*1000;
 8001960:	f002 fa62 	bl	8003e28 <Algo_getPlenumTemp>
 8001964:	4603      	mov	r3, r0
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff f9d8 	bl	8000d1c <__aeabi_i2f>
 800196c:	4603      	mov	r3, r0
 800196e:	4619      	mov	r1, r3
 8001970:	4832      	ldr	r0, [pc, #200]	; (8001a3c <HmiManager+0x2d4>)
 8001972:	f7ff fadb 	bl	8000f2c <__aeabi_fdiv>
 8001976:	4603      	mov	r3, r0
 8001978:	4930      	ldr	r1, [pc, #192]	; (8001a3c <HmiManager+0x2d4>)
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff fa22 	bl	8000dc4 <__aeabi_fmul>
 8001980:	4603      	mov	r3, r0
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fc0a 	bl	800119c <__aeabi_f2uiz>
 8001988:	4603      	mov	r3, r0
 800198a:	4a2e      	ldr	r2, [pc, #184]	; (8001a44 <HmiManager+0x2dc>)
 800198c:	6013      	str	r3, [r2, #0]

			if (currentState == THERMO_REAR_TEST
 800198e:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <HmiManager+0x2d0>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b02      	cmp	r3, #2
 8001994:	d007      	beq.n	80019a6 <HmiManager+0x23e>
					|| currentState == THERMO_BAFFLE_TEST
 8001996:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <HmiManager+0x2d0>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b03      	cmp	r3, #3
 800199c:	d003      	beq.n	80019a6 <HmiManager+0x23e>
					|| currentState == PLENUM_RTD_TEST)
 800199e:	4b26      	ldr	r3, [pc, #152]	; (8001a38 <HmiManager+0x2d0>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d110      	bne.n	80019c8 <HmiManager+0x260>
			{
				if((LastButttonToggle_ms+thermocoupleTestPeriod) < kerneltime)
 80019a6:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <HmiManager+0x2c8>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	4b26      	ldr	r3, [pc, #152]	; (8001a44 <HmiManager+0x2dc>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4413      	add	r3, r2
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d94e      	bls.n	8001a54 <HmiManager+0x2ec>
				{
					LastButttonToggle_ms = kerneltime;
 80019b6:	4a1e      	ldr	r2, [pc, #120]	; (8001a30 <HmiManager+0x2c8>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6013      	str	r3, [r2, #0]
					ToggleButtonLed();
 80019bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019c0:	481a      	ldr	r0, [pc, #104]	; (8001a2c <HmiManager+0x2c4>)
 80019c2:	f004 f82a 	bl	8005a1a <HAL_GPIO_TogglePin>
				if((LastButttonToggle_ms+thermocoupleTestPeriod) < kerneltime)
 80019c6:	e045      	b.n	8001a54 <HmiManager+0x2ec>
				}
			}
			else if (currentState == THERMOSTAT_TEST)
 80019c8:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <HmiManager+0x2d0>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b07      	cmp	r3, #7
 80019ce:	d112      	bne.n	80019f6 <HmiManager+0x28e>
			{
				Algo_getThermostatRequest()?SetButtonLed_ON():SetButtonLed_OFF();
 80019d0:	f002 fa58 	bl	8003e84 <Algo_getThermostatRequest>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d006      	beq.n	80019e8 <HmiManager+0x280>
 80019da:	2201      	movs	r2, #1
 80019dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019e0:	4812      	ldr	r0, [pc, #72]	; (8001a2c <HmiManager+0x2c4>)
 80019e2:	f004 f802 	bl	80059ea <HAL_GPIO_WritePin>
 80019e6:	e035      	b.n	8001a54 <HmiManager+0x2ec>
 80019e8:	2200      	movs	r2, #0
 80019ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019ee:	480f      	ldr	r0, [pc, #60]	; (8001a2c <HmiManager+0x2c4>)
 80019f0:	f003 fffb 	bl	80059ea <HAL_GPIO_WritePin>
 80019f4:	e02e      	b.n	8001a54 <HmiManager+0x2ec>
			}
			else if(currentState == INTERLOCK_TEST)
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <HmiManager+0x2d0>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b08      	cmp	r3, #8
 80019fc:	d124      	bne.n	8001a48 <HmiManager+0x2e0>
			{
				Algo_getInterlockRequest()?SetButtonLed_ON():SetButtonLed_OFF();
 80019fe:	f002 fa5b 	bl	8003eb8 <Algo_getInterlockRequest>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d006      	beq.n	8001a16 <HmiManager+0x2ae>
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a0e:	4807      	ldr	r0, [pc, #28]	; (8001a2c <HmiManager+0x2c4>)
 8001a10:	f003 ffeb 	bl	80059ea <HAL_GPIO_WritePin>
 8001a14:	e01e      	b.n	8001a54 <HmiManager+0x2ec>
 8001a16:	2200      	movs	r2, #0
 8001a18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a1c:	4803      	ldr	r0, [pc, #12]	; (8001a2c <HmiManager+0x2c4>)
 8001a1e:	f003 ffe4 	bl	80059ea <HAL_GPIO_WritePin>
 8001a22:	e017      	b.n	8001a54 <HmiManager+0x2ec>
 8001a24:	40010c00 	.word	0x40010c00
 8001a28:	200000c4 	.word	0x200000c4
 8001a2c:	40010800 	.word	0x40010800
 8001a30:	200000c8 	.word	0x200000c8
 8001a34:	200000cc 	.word	0x200000cc
 8001a38:	200000cd 	.word	0x200000cd
 8001a3c:	447a0000 	.word	0x447a0000
 8001a40:	44480000 	.word	0x44480000
 8001a44:	200000d0 	.word	0x200000d0
			}
			else
			{
				SetButtonLed_OFF();
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a4e:	4821      	ldr	r0, [pc, #132]	; (8001ad4 <HmiManager+0x36c>)
 8001a50:	f003 ffcb 	bl	80059ea <HAL_GPIO_WritePin>
			}
		}
		if(algostate !=PRODUCTION_TEST)
 8001a54:	7afb      	ldrb	r3, [r7, #11]
 8001a56:	2b0c      	cmp	r3, #12
 8001a58:	d01c      	beq.n	8001a94 <HmiManager+0x32c>
		{
			if(GPIO_PIN_SET==HAL_GPIO_ReadPin(Button_Input_GPIO_Port,Button_Input_Pin))
 8001a5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a5e:	481e      	ldr	r0, [pc, #120]	; (8001ad8 <HmiManager+0x370>)
 8001a60:	f003 ffac 	bl	80059bc <HAL_GPIO_ReadPin>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d10f      	bne.n	8001a8a <HmiManager+0x322>
			{
				if ((LastButtonPressedTime_ms+100) < kerneltime)
 8001a6a:	4b1c      	ldr	r3, [pc, #112]	; (8001adc <HmiManager+0x374>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	3364      	adds	r3, #100	; 0x64
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d90e      	bls.n	8001a94 <HmiManager+0x32c>
				{
					Algo_startChargement(kerneltime);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f002 fa28 	bl	8003ecc <Algo_startChargement>
					ButtonBlinkingrequired = true;
 8001a7c:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <HmiManager+0x378>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	701a      	strb	r2, [r3, #0]
					buttonblinkrequirecount = 6;
 8001a82:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <HmiManager+0x37c>)
 8001a84:	2206      	movs	r2, #6
 8001a86:	701a      	strb	r2, [r3, #0]
 8001a88:	e004      	b.n	8001a94 <HmiManager+0x32c>
				}
			}
			else
			{
				LastButtonPressedTime_ms = osKernelSysTick();
 8001a8a:	f008 f94a 	bl	8009d22 <osKernelSysTick>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	4a12      	ldr	r2, [pc, #72]	; (8001adc <HmiManager+0x374>)
 8001a92:	6013      	str	r3, [r2, #0]
			}
		}

//Status bit Handling
		switch(algostate)
 8001a94:	7afb      	ldrb	r3, [r7, #11]
 8001a96:	3b0a      	subs	r3, #10
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d805      	bhi.n	8001aa8 <HmiManager+0x340>
		{
			case SAFETY:
			case OVERTEMP:
				Set_STATUS_BIT2_ON();
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2110      	movs	r1, #16
 8001aa0:	480c      	ldr	r0, [pc, #48]	; (8001ad4 <HmiManager+0x36c>)
 8001aa2:	f003 ffa2 	bl	80059ea <HAL_GPIO_WritePin>
				break;
 8001aa6:	e005      	b.n	8001ab4 <HmiManager+0x34c>
			default:
				Set_STATUS_BIT2_OFF();
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	2110      	movs	r1, #16
 8001aac:	4809      	ldr	r0, [pc, #36]	; (8001ad4 <HmiManager+0x36c>)
 8001aae:	f003 ff9c 	bl	80059ea <HAL_GPIO_WritePin>
				break;
 8001ab2:	bf00      	nop
		}
		//tStatDemand?Set_STATUS_BIT0_ON():Set_STATUS_BIT0_OFF();
		interlockActive?Set_STATUS_BIT1_ON():Set_STATUS_BIT1_OFF();
 8001ab4:	78bb      	ldrb	r3, [r7, #2]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d005      	beq.n	8001ac6 <HmiManager+0x35e>
 8001aba:	2200      	movs	r2, #0
 8001abc:	2108      	movs	r1, #8
 8001abe:	480a      	ldr	r0, [pc, #40]	; (8001ae8 <HmiManager+0x380>)
 8001ac0:	f003 ff93 	bl	80059ea <HAL_GPIO_WritePin>
 8001ac4:	e655      	b.n	8001772 <HmiManager+0xa>
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	2108      	movs	r1, #8
 8001aca:	4807      	ldr	r0, [pc, #28]	; (8001ae8 <HmiManager+0x380>)
 8001acc:	f003 ff8d 	bl	80059ea <HAL_GPIO_WritePin>
	{
 8001ad0:	e64f      	b.n	8001772 <HmiManager+0xa>
 8001ad2:	bf00      	nop
 8001ad4:	40010800 	.word	0x40010800
 8001ad8:	40010c00 	.word	0x40010c00
 8001adc:	200000d4 	.word	0x200000d4
 8001ae0:	200000c4 	.word	0x200000c4
 8001ae4:	200000cc 	.word	0x200000cc
 8001ae8:	40011000 	.word	0x40011000

08001aec <Steppermanager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Steppermanager */
void Steppermanager(void const * argument)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
	//sleep is active low but we inverse the logic with transistor
	//static int BoostPosition = 0;
	//static int PrimarySecondaryPosition = 0;
	//printf("\n Stepper manager running");

	HAL_GPIO_WritePin(uc_Stepper_Sleep_GPIO_Port,uc_Stepper_Sleep_Pin,RESET);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2110      	movs	r1, #16
 8001af8:	4811      	ldr	r0, [pc, #68]	; (8001b40 <Steppermanager+0x54>)
 8001afa:	f003 ff76 	bl	80059ea <HAL_GPIO_WritePin>
	Algo_init();
 8001afe:	f001 f9c5 	bl	8002e8c <Algo_init>
  {
//#ifdef TEST_MOTEUR
//	vStepperPositioning(tman_getMoteur1Req(),&BoostPosition,BoostStepper);
//	vStepperPositioning(tman_getMoteur2Req(),&PrimarySecondaryPosition,PrimaryStepper);
//#else
	osDelay(50);
 8001b02:	2032      	movs	r0, #50	; 0x32
 8001b04:	f008 f969 	bl	8009dda <osDelay>

	Algo_task(osKernelSysTick());
 8001b08:	f008 f90b 	bl	8009d22 <osKernelSysTick>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f002 f8de 	bl	8003cd0 <Algo_task>
	if(Algo_getState() != PRODUCTION_TEST)
 8001b14:	f002 f93a 	bl	8003d8c <Algo_getState>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b0c      	cmp	r3, #12
 8001b1c:	d0f1      	beq.n	8001b02 <Steppermanager+0x16>
	{
		vStepperPositioning(Algo_getGrill(),&stepperPosition[BoostStepper],BoostStepper);
 8001b1e:	f002 f997 	bl	8003e50 <Algo_getGrill>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2201      	movs	r2, #1
 8001b26:	4907      	ldr	r1, [pc, #28]	; (8001b44 <Steppermanager+0x58>)
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f000 f80f 	bl	8001b4c <vStepperPositioning>
		vStepperPositioning(Algo_getPrimary(),&stepperPosition[PrimaryStepper],PrimaryStepper);
 8001b2e:	f002 f985 	bl	8003e3c <Algo_getPrimary>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2200      	movs	r2, #0
 8001b36:	4904      	ldr	r1, [pc, #16]	; (8001b48 <Steppermanager+0x5c>)
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f000 f807 	bl	8001b4c <vStepperPositioning>
	osDelay(50);
 8001b3e:	e7e0      	b.n	8001b02 <Steppermanager+0x16>
 8001b40:	40011000 	.word	0x40011000
 8001b44:	20002f0c 	.word	0x20002f0c
 8001b48:	20002f08 	.word	0x20002f08

08001b4c <vStepperPositioning>:
#else
#define primaryStepperMin 13
#endif

void vStepperPositioning(int RequestedPosition,int *CurrentPosition, motor_t MotorId)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	4613      	mov	r3, r2
 8001b58:	71fb      	strb	r3, [r7, #7]
    //MotorControl_t* pstMotorControl;
    //pstMotorControl = &stMotor[MotorId];
    int StepToPerform = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]

    bool StepperToZero = false;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	74fb      	strb	r3, [r7, #19]

    StepperToZero = vLimitSwitchActive(MotorId);
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f000 f8c5 	bl	8001cf4 <vLimitSwitchActive>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	74fb      	strb	r3, [r7, #19]

    if(StepperToZero)
 8001b6e:	7cfb      	ldrb	r3, [r7, #19]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d009      	beq.n	8001b88 <vStepperPositioning+0x3c>
    {
    	if(MotorId == PrimaryStepper)
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d103      	bne.n	8001b82 <vStepperPositioning+0x36>
    	{
    		*CurrentPosition = primaryStepperMin;
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	220d      	movs	r2, #13
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	e002      	b.n	8001b88 <vStepperPositioning+0x3c>
    	}
    	else
    	{
    		*CurrentPosition = 0;
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
    	}

    }
    StepToPerform = *CurrentPosition - RequestedPosition;
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	617b      	str	r3, [r7, #20]
    if(MotorId == BoostStepper)
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d10c      	bne.n	8001bb2 <vStepperPositioning+0x66>
    {
		if (*CurrentPosition == 0 && !StepperToZero)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d169      	bne.n	8001c74 <vStepperPositioning+0x128>
 8001ba0:	7cfb      	ldrb	r3, [r7, #19]
 8001ba2:	f083 0301 	eor.w	r3, r3, #1
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d063      	beq.n	8001c74 <vStepperPositioning+0x128>
		{
			StepToPerform = 1;
 8001bac:	2301      	movs	r3, #1
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	e060      	b.n	8001c74 <vStepperPositioning+0x128>
		}
    }
    else
    {
		if (*CurrentPosition == primaryStepperMin && !StepperToZero)
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b0d      	cmp	r3, #13
 8001bb8:	d15c      	bne.n	8001c74 <vStepperPositioning+0x128>
 8001bba:	7cfb      	ldrb	r3, [r7, #19]
 8001bbc:	f083 0301 	eor.w	r3, r3, #1
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d056      	beq.n	8001c74 <vStepperPositioning+0x128>
		{
			StepToPerform = 1;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	617b      	str	r3, [r7, #20]
		}
    }

    while (StepToPerform != 0)
 8001bca:	e053      	b.n	8001c74 <vStepperPositioning+0x128>
    {
    	vEnableStepper(MotorId);
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 f8ba 	bl	8001d48 <vEnableStepper>
    	vStepperMaxTorque(MotorId,true);
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 f8e5 	bl	8001da8 <vStepperMaxTorque>
    	//osDelay(20);
    	if(StepToPerform > 0)
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	dd2c      	ble.n	8001c3e <vStepperPositioning+0xf2>
		{
			vSetStepperMotorDirection(MotorId, Closing);
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	2100      	movs	r1, #0
 8001be8:	4618      	mov	r0, r3
 8001bea:	f000 f933 	bl	8001e54 <vSetStepperMotorDirection>
			*CurrentPosition = *CurrentPosition -1;
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	1e5a      	subs	r2, r3, #1
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	601a      	str	r2, [r3, #0]
			if((*CurrentPosition < 0) && (MotorId == BoostStepper))
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	da09      	bge.n	8001c14 <vStepperPositioning+0xc8>
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d106      	bne.n	8001c14 <vStepperPositioning+0xc8>
			{
				*CurrentPosition = 0;
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
				vDisableStepper(BoostStepper);
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	f000 f901 	bl	8001e14 <vDisableStepper>
 8001c12:	e00c      	b.n	8001c2e <vStepperPositioning+0xe2>
			}
			else if ((*CurrentPosition < primaryStepperMin) && (MotorId == PrimaryStepper))
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b0c      	cmp	r3, #12
 8001c1a:	dc08      	bgt.n	8001c2e <vStepperPositioning+0xe2>
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d105      	bne.n	8001c2e <vStepperPositioning+0xe2>
			{
				*CurrentPosition = primaryStepperMin;
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	220d      	movs	r2, #13
 8001c26:	601a      	str	r2, [r3, #0]
				vDisableStepper(PrimaryStepper);
 8001c28:	2000      	movs	r0, #0
 8001c2a:	f000 f8f3 	bl	8001e14 <vDisableStepper>
			}
 			vToggleOneStep(MotorId);
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f000 f827 	bl	8001c84 <vToggleOneStep>
			StepToPerform--;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	e01a      	b.n	8001c74 <vStepperPositioning+0x128>
		}
		else if(StepToPerform < 0)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	da17      	bge.n	8001c74 <vStepperPositioning+0x128>
		{
			vEnableStepper(MotorId);
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 f87e 	bl	8001d48 <vEnableStepper>
			osDelay(50);
 8001c4c:	2032      	movs	r0, #50	; 0x32
 8001c4e:	f008 f8c4 	bl	8009dda <osDelay>
			vSetStepperMotorDirection(MotorId, Opening);
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	2101      	movs	r1, #1
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 f8fc 	bl	8001e54 <vSetStepperMotorDirection>
			*CurrentPosition = *CurrentPosition + 1;
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	601a      	str	r2, [r3, #0]
			vToggleOneStep(MotorId);
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f000 f80b 	bl	8001c84 <vToggleOneStep>
			StepToPerform++;
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	3301      	adds	r3, #1
 8001c72:	617b      	str	r3, [r7, #20]
    while (StepToPerform != 0)
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1a8      	bne.n	8001bcc <vStepperPositioning+0x80>
	}
    //vStepperMaxTorque(MotorId,true); TODO : re-enable max torque
    //osDelay(100);
	//vDisableStepper(MotorId);

}
 8001c7a:	bf00      	nop
 8001c7c:	bf00      	nop
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <vToggleOneStep>:

void vToggleOneStep(motor_t Motor)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
    switch(Motor)
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d002      	beq.n	8001c9a <vToggleOneStep+0x16>
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d011      	beq.n	8001cbc <vToggleOneStep+0x38>
            osDelay(10);
            Boost_Step_SetHigh();
            osDelay(10);
            break;
        default:
            break;
 8001c98:	e023      	b.n	8001ce2 <vToggleOneStep+0x5e>
            Primary_Step_SetLow();
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2108      	movs	r1, #8
 8001c9e:	4813      	ldr	r0, [pc, #76]	; (8001cec <vToggleOneStep+0x68>)
 8001ca0:	f003 fea3 	bl	80059ea <HAL_GPIO_WritePin>
            osDelay(10);
 8001ca4:	200a      	movs	r0, #10
 8001ca6:	f008 f898 	bl	8009dda <osDelay>
            Primary_Step_SetHigh();
 8001caa:	2201      	movs	r2, #1
 8001cac:	2108      	movs	r1, #8
 8001cae:	480f      	ldr	r0, [pc, #60]	; (8001cec <vToggleOneStep+0x68>)
 8001cb0:	f003 fe9b 	bl	80059ea <HAL_GPIO_WritePin>
            osDelay(10);
 8001cb4:	200a      	movs	r0, #10
 8001cb6:	f008 f890 	bl	8009dda <osDelay>
            break;
 8001cba:	e012      	b.n	8001ce2 <vToggleOneStep+0x5e>
            Boost_Step_SetLow();
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cc2:	480b      	ldr	r0, [pc, #44]	; (8001cf0 <vToggleOneStep+0x6c>)
 8001cc4:	f003 fe91 	bl	80059ea <HAL_GPIO_WritePin>
            osDelay(10);
 8001cc8:	200a      	movs	r0, #10
 8001cca:	f008 f886 	bl	8009dda <osDelay>
            Boost_Step_SetHigh();
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cd4:	4806      	ldr	r0, [pc, #24]	; (8001cf0 <vToggleOneStep+0x6c>)
 8001cd6:	f003 fe88 	bl	80059ea <HAL_GPIO_WritePin>
            osDelay(10);
 8001cda:	200a      	movs	r0, #10
 8001cdc:	f008 f87d 	bl	8009dda <osDelay>
            break;
 8001ce0:	bf00      	nop
    }
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40010c00 	.word	0x40010c00
 8001cf0:	40011000 	.word	0x40011000

08001cf4 <vLimitSwitchActive>:
bool vLimitSwitchActive(motor_t MotorId)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	71fb      	strb	r3, [r7, #7]
	bool active=false;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	73fb      	strb	r3, [r7, #15]
    switch(MotorId)
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00c      	beq.n	8001d22 <vLimitSwitchActive+0x2e>
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d114      	bne.n	8001d36 <vLimitSwitchActive+0x42>
#if defined REVC
    	case PrimaryStepper:
#else
        case BoostStepper:
#endif
        	active = (GPIO_PIN_RESET == HAL_GPIO_ReadPin(Limit_switch1_GPIO_Port,Limit_switch1_Pin));
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	480d      	ldr	r0, [pc, #52]	; (8001d44 <vLimitSwitchActive+0x50>)
 8001d10:	f003 fe54 	bl	80059bc <HAL_GPIO_ReadPin>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	bf0c      	ite	eq
 8001d1a:	2301      	moveq	r3, #1
 8001d1c:	2300      	movne	r3, #0
 8001d1e:	73fb      	strb	r3, [r7, #15]
            break;
 8001d20:	e00a      	b.n	8001d38 <vLimitSwitchActive+0x44>
#if defined REVC
        case BoostStepper:
#else
        case PrimaryStepper:
#endif
        	active = (GPIO_PIN_RESET == HAL_GPIO_ReadPin(Limit_switch2_GPIO_Port,Limit_switch2_Pin));
 8001d22:	2102      	movs	r1, #2
 8001d24:	4807      	ldr	r0, [pc, #28]	; (8001d44 <vLimitSwitchActive+0x50>)
 8001d26:	f003 fe49 	bl	80059bc <HAL_GPIO_ReadPin>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	bf0c      	ite	eq
 8001d30:	2301      	moveq	r3, #1
 8001d32:	2300      	movne	r3, #0
 8001d34:	73fb      	strb	r3, [r7, #15]
        default:
            break;
 8001d36:	bf00      	nop
    }
    return active;
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40011000 	.word	0x40011000

08001d48 <vEnableStepper>:

void vEnableStepper(motor_t Motor)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	71fb      	strb	r3, [r7, #7]
    Step1_2_3_WAKE();
 8001d52:	2200      	movs	r2, #0
 8001d54:	2110      	movs	r1, #16
 8001d56:	4812      	ldr	r0, [pc, #72]	; (8001da0 <vEnableStepper+0x58>)
 8001d58:	f003 fe47 	bl	80059ea <HAL_GPIO_WritePin>
	switch(Motor)
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d002      	beq.n	8001d68 <vEnableStepper+0x20>
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d00b      	beq.n	8001d7e <vEnableStepper+0x36>
            Boost_ENABLE();
            Boost_nRESET();

            break;
        default:
            break;
 8001d66:	e017      	b.n	8001d98 <vEnableStepper+0x50>
            Primary_ENABLE();
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2120      	movs	r1, #32
 8001d6c:	480d      	ldr	r0, [pc, #52]	; (8001da4 <vEnableStepper+0x5c>)
 8001d6e:	f003 fe3c 	bl	80059ea <HAL_GPIO_WritePin>
            Primary_nRESET();
 8001d72:	2201      	movs	r2, #1
 8001d74:	2110      	movs	r1, #16
 8001d76:	480b      	ldr	r0, [pc, #44]	; (8001da4 <vEnableStepper+0x5c>)
 8001d78:	f003 fe37 	bl	80059ea <HAL_GPIO_WritePin>
            break;
 8001d7c:	e00c      	b.n	8001d98 <vEnableStepper+0x50>
            Boost_ENABLE();
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d84:	4806      	ldr	r0, [pc, #24]	; (8001da0 <vEnableStepper+0x58>)
 8001d86:	f003 fe30 	bl	80059ea <HAL_GPIO_WritePin>
            Boost_nRESET();
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d90:	4803      	ldr	r0, [pc, #12]	; (8001da0 <vEnableStepper+0x58>)
 8001d92:	f003 fe2a 	bl	80059ea <HAL_GPIO_WritePin>
            break;
 8001d96:	bf00      	nop
    }
}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40011000 	.word	0x40011000
 8001da4:	40010c00 	.word	0x40010c00

08001da8 <vStepperMaxTorque>:
void vStepperMaxTorque(motor_t Motor,bool bApplyMaxTorque)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	460a      	mov	r2, r1
 8001db2:	71fb      	strb	r3, [r7, #7]
 8001db4:	4613      	mov	r3, r2
 8001db6:	71bb      	strb	r3, [r7, #6]
	switch(Motor)
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d002      	beq.n	8001dc4 <vStepperMaxTorque+0x1c>
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d011      	beq.n	8001de6 <vStepperMaxTorque+0x3e>
			{
        		Boost_TorqueMin();
        	}
            break;
        default:
            break;
 8001dc2:	e021      	b.n	8001e08 <vStepperMaxTorque+0x60>
        	if(bApplyMaxTorque)
 8001dc4:	79bb      	ldrb	r3, [r7, #6]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d006      	beq.n	8001dd8 <vStepperMaxTorque+0x30>
        		Primary_TorqueMax();
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dd0:	480f      	ldr	r0, [pc, #60]	; (8001e10 <vStepperMaxTorque+0x68>)
 8001dd2:	f003 fe0a 	bl	80059ea <HAL_GPIO_WritePin>
            break;
 8001dd6:	e017      	b.n	8001e08 <vStepperMaxTorque+0x60>
        		Primary_TorqueMin();
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dde:	480c      	ldr	r0, [pc, #48]	; (8001e10 <vStepperMaxTorque+0x68>)
 8001de0:	f003 fe03 	bl	80059ea <HAL_GPIO_WritePin>
            break;
 8001de4:	e010      	b.n	8001e08 <vStepperMaxTorque+0x60>
        	if(bApplyMaxTorque)
 8001de6:	79bb      	ldrb	r3, [r7, #6]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d006      	beq.n	8001dfa <vStepperMaxTorque+0x52>
        		Boost_TorqueMax();
 8001dec:	2200      	movs	r2, #0
 8001dee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001df2:	4807      	ldr	r0, [pc, #28]	; (8001e10 <vStepperMaxTorque+0x68>)
 8001df4:	f003 fdf9 	bl	80059ea <HAL_GPIO_WritePin>
            break;
 8001df8:	e005      	b.n	8001e06 <vStepperMaxTorque+0x5e>
        		Boost_TorqueMin();
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e00:	4803      	ldr	r0, [pc, #12]	; (8001e10 <vStepperMaxTorque+0x68>)
 8001e02:	f003 fdf2 	bl	80059ea <HAL_GPIO_WritePin>
            break;
 8001e06:	bf00      	nop
    }
}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40011000 	.word	0x40011000

08001e14 <vDisableStepper>:

void vDisableStepper(motor_t Motor)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71fb      	strb	r3, [r7, #7]
	//Step1_2_3_SLEEP();
    switch(Motor)
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d002      	beq.n	8001e2a <vDisableStepper+0x16>
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d006      	beq.n	8001e36 <vDisableStepper+0x22>
            break;
        case BoostStepper:
            Boost_DISABLE();
            break;
        default:
            break;
 8001e28:	e00c      	b.n	8001e44 <vDisableStepper+0x30>
            Primary_DISABLE();
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	2120      	movs	r1, #32
 8001e2e:	4807      	ldr	r0, [pc, #28]	; (8001e4c <vDisableStepper+0x38>)
 8001e30:	f003 fddb 	bl	80059ea <HAL_GPIO_WritePin>
            break;
 8001e34:	e006      	b.n	8001e44 <vDisableStepper+0x30>
            Boost_DISABLE();
 8001e36:	2201      	movs	r2, #1
 8001e38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e3c:	4804      	ldr	r0, [pc, #16]	; (8001e50 <vDisableStepper+0x3c>)
 8001e3e:	f003 fdd4 	bl	80059ea <HAL_GPIO_WritePin>
            break;
 8001e42:	bf00      	nop
    }
}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40010c00 	.word	0x40010c00
 8001e50:	40011000 	.word	0x40011000

08001e54 <vSetStepperMotorDirection>:

void vSetStepperMotorDirection(motor_t Motor, motor_direction_t Direction)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	460a      	mov	r2, r1
 8001e5e:	71fb      	strb	r3, [r7, #7]
 8001e60:	4613      	mov	r3, r2
 8001e62:	71bb      	strb	r3, [r7, #6]
    if(Motor == BoostStepper)
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d110      	bne.n	8001e8c <vSetStepperMotorDirection+0x38>
    {
        if(Direction == Opening)
 8001e6a:	79bb      	ldrb	r3, [r7, #6]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d106      	bne.n	8001e7e <vSetStepperMotorDirection+0x2a>
        {
        	Boost_DIR_SetHigh();
 8001e70:	2201      	movs	r2, #1
 8001e72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e76:	4810      	ldr	r0, [pc, #64]	; (8001eb8 <vSetStepperMotorDirection+0x64>)
 8001e78:	f003 fdb7 	bl	80059ea <HAL_GPIO_WritePin>
    else
    {
        while(1);
        //wrong motor argument
    }
}
 8001e7c:	e019      	b.n	8001eb2 <vSetStepperMotorDirection+0x5e>
        	Boost_DIR_SetLow();
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e84:	480c      	ldr	r0, [pc, #48]	; (8001eb8 <vSetStepperMotorDirection+0x64>)
 8001e86:	f003 fdb0 	bl	80059ea <HAL_GPIO_WritePin>
}
 8001e8a:	e012      	b.n	8001eb2 <vSetStepperMotorDirection+0x5e>
    else if(Motor == PrimaryStepper)
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10e      	bne.n	8001eb0 <vSetStepperMotorDirection+0x5c>
        if(Direction == Opening)
 8001e92:	79bb      	ldrb	r3, [r7, #6]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d105      	bne.n	8001ea4 <vSetStepperMotorDirection+0x50>
        	Primary_DIR_SetHigh();
 8001e98:	2201      	movs	r2, #1
 8001e9a:	2104      	movs	r1, #4
 8001e9c:	4807      	ldr	r0, [pc, #28]	; (8001ebc <vSetStepperMotorDirection+0x68>)
 8001e9e:	f003 fda4 	bl	80059ea <HAL_GPIO_WritePin>
}
 8001ea2:	e006      	b.n	8001eb2 <vSetStepperMotorDirection+0x5e>
        	Primary_DIR_SetLow();
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2104      	movs	r1, #4
 8001ea8:	4804      	ldr	r0, [pc, #16]	; (8001ebc <vSetStepperMotorDirection+0x68>)
 8001eaa:	f003 fd9e 	bl	80059ea <HAL_GPIO_WritePin>
}
 8001eae:	e000      	b.n	8001eb2 <vSetStepperMotorDirection+0x5e>
        while(1);
 8001eb0:	e7fe      	b.n	8001eb0 <vSetStepperMotorDirection+0x5c>
}
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40011000 	.word	0x40011000
 8001ebc:	40011400 	.word	0x40011400

08001ec0 <vSetSpeed>:
{
    return &stMotor[Index];
}

void vSetSpeed(Mot_FanSpeed RequestedSpeed)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	71fb      	strb	r3, [r7, #7]
	  switch (RequestedSpeed)
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	2b03      	cmp	r3, #3
 8001ece:	d022      	beq.n	8001f16 <vSetSpeed+0x56>
 8001ed0:	2b03      	cmp	r3, #3
 8001ed2:	dc2e      	bgt.n	8001f32 <vSetSpeed+0x72>
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d002      	beq.n	8001ede <vSetSpeed+0x1e>
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d00e      	beq.n	8001efa <vSetSpeed+0x3a>
 8001edc:	e029      	b.n	8001f32 <vSetSpeed+0x72>
	  {
		  case 1://speed1
			  HAL_GPIO_WritePin(SPEED2_COIL_GPIO_Port,SPEED2_COIL_Pin,RESET);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2140      	movs	r1, #64	; 0x40
 8001ee2:	481b      	ldr	r0, [pc, #108]	; (8001f50 <vSetSpeed+0x90>)
 8001ee4:	f003 fd81 	bl	80059ea <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SPEED3_COIL_GPIO_Port,SPEED3_COIL_Pin,RESET);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2180      	movs	r1, #128	; 0x80
 8001eec:	4818      	ldr	r0, [pc, #96]	; (8001f50 <vSetSpeed+0x90>)
 8001eee:	f003 fd7c 	bl	80059ea <HAL_GPIO_WritePin>
			  osDelay(200);//break before make
 8001ef2:	20c8      	movs	r0, #200	; 0xc8
 8001ef4:	f007 ff71 	bl	8009dda <osDelay>
			  //HAL_GPIO_WritePin(SPEED1_COIL_GPIO_Port,SPEED1_COIL_Pin,SET);
			  break;
 8001ef8:	e026      	b.n	8001f48 <vSetSpeed+0x88>
		  case 2://speed2
			  HAL_GPIO_WritePin(SPEED3_COIL_GPIO_Port,SPEED3_COIL_Pin,RESET);
 8001efa:	2200      	movs	r2, #0
 8001efc:	2180      	movs	r1, #128	; 0x80
 8001efe:	4814      	ldr	r0, [pc, #80]	; (8001f50 <vSetSpeed+0x90>)
 8001f00:	f003 fd73 	bl	80059ea <HAL_GPIO_WritePin>
			  //HAL_GPIO_WritePin(SPEED1_COIL_GPIO_Port,SPEED1_COIL_Pin,RESET);
			  osDelay(200);//break before make
 8001f04:	20c8      	movs	r0, #200	; 0xc8
 8001f06:	f007 ff68 	bl	8009dda <osDelay>
			  HAL_GPIO_WritePin(SPEED2_COIL_GPIO_Port,SPEED2_COIL_Pin,SET);
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	2140      	movs	r1, #64	; 0x40
 8001f0e:	4810      	ldr	r0, [pc, #64]	; (8001f50 <vSetSpeed+0x90>)
 8001f10:	f003 fd6b 	bl	80059ea <HAL_GPIO_WritePin>
			  break;
 8001f14:	e018      	b.n	8001f48 <vSetSpeed+0x88>
		  case 3://speed3
			  //HAL_GPIO_WritePin(SPEED1_COIL_GPIO_Port,SPEED1_COIL_Pin,RESET);
			  HAL_GPIO_WritePin(SPEED2_COIL_GPIO_Port,SPEED2_COIL_Pin,RESET);
 8001f16:	2200      	movs	r2, #0
 8001f18:	2140      	movs	r1, #64	; 0x40
 8001f1a:	480d      	ldr	r0, [pc, #52]	; (8001f50 <vSetSpeed+0x90>)
 8001f1c:	f003 fd65 	bl	80059ea <HAL_GPIO_WritePin>
			  osDelay(200);//break before make
 8001f20:	20c8      	movs	r0, #200	; 0xc8
 8001f22:	f007 ff5a 	bl	8009dda <osDelay>
			  HAL_GPIO_WritePin(SPEED3_COIL_GPIO_Port,SPEED3_COIL_Pin,SET);
 8001f26:	2201      	movs	r2, #1
 8001f28:	2180      	movs	r1, #128	; 0x80
 8001f2a:	4809      	ldr	r0, [pc, #36]	; (8001f50 <vSetSpeed+0x90>)
 8001f2c:	f003 fd5d 	bl	80059ea <HAL_GPIO_WritePin>
			  break;
 8001f30:	e00a      	b.n	8001f48 <vSetSpeed+0x88>
		  case 4: //speed4 controlled by hardware
		  default: //stop
			  //HAL_GPIO_WritePin(SPEED1_COIL_GPIO_Port,SPEED1_COIL_Pin,RESET);
			  HAL_GPIO_WritePin(SPEED2_COIL_GPIO_Port,SPEED2_COIL_Pin,RESET);
 8001f32:	2200      	movs	r2, #0
 8001f34:	2140      	movs	r1, #64	; 0x40
 8001f36:	4806      	ldr	r0, [pc, #24]	; (8001f50 <vSetSpeed+0x90>)
 8001f38:	f003 fd57 	bl	80059ea <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SPEED3_COIL_GPIO_Port,SPEED3_COIL_Pin,RESET);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2180      	movs	r1, #128	; 0x80
 8001f40:	4803      	ldr	r0, [pc, #12]	; (8001f50 <vSetSpeed+0x90>)
 8001f42:	f003 fd52 	bl	80059ea <HAL_GPIO_WritePin>
			  break;
 8001f46:	bf00      	nop
	  }
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40011000 	.word	0x40011000

08001f54 <Mot_getFanSpeed>:

Mot_FanSpeed Mot_getFanSpeed() {
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return plenumSpeed;
 8001f58:	4b02      	ldr	r3, [pc, #8]	; (8001f64 <Mot_getFanSpeed+0x10>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr
 8001f64:	200000d8 	.word	0x200000d8

08001f68 <StepperMotorProdTest>:
	  }
  plenumPreviousSpeed = plenumSpeed;
}

void StepperMotorProdTest(motor_t MotorId)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	71fb      	strb	r3, [r7, #7]
	// on ouvre jusqu'à ce que la limite switch soit inactive,
	// on ferme jusqu'à ce qu'elle soit active
	//on va au max et on ferme sur la switch
	//on ouvre à 25% et on désactive les moteurs.

	vSetStepperMotorDirection(MotorId, Opening);
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	2101      	movs	r1, #1
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff ff6c 	bl	8001e54 <vSetStepperMotorDirection>
	vEnableStepper(MotorId);
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff fee2 	bl	8001d48 <vEnableStepper>
	while(vLimitSwitchActive(MotorId))
 8001f84:	e006      	b.n	8001f94 <StepperMotorProdTest+0x2c>
	{
		vToggleOneStep(MotorId);
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fe7b 	bl	8001c84 <vToggleOneStep>
		osDelay(5);
 8001f8e:	2005      	movs	r0, #5
 8001f90:	f007 ff23 	bl	8009dda <osDelay>
	while(vLimitSwitchActive(MotorId))
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff feac 	bl	8001cf4 <vLimitSwitchActive>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f1      	bne.n	8001f86 <StepperMotorProdTest+0x1e>
	}
	vSetStepperMotorDirection(MotorId, Closing);
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff ff54 	bl	8001e54 <vSetStepperMotorDirection>
	while(!vLimitSwitchActive(MotorId))
 8001fac:	e006      	b.n	8001fbc <StepperMotorProdTest+0x54>
	{
		vToggleOneStep(MotorId);
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff fe67 	bl	8001c84 <vToggleOneStep>
		osDelay(5);
 8001fb6:	2005      	movs	r0, #5
 8001fb8:	f007 ff0f 	bl	8009dda <osDelay>
	while(!vLimitSwitchActive(MotorId))
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fe98 	bl	8001cf4 <vLimitSwitchActive>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f083 0301 	eor.w	r3, r3, #1
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1ee      	bne.n	8001fae <StepperMotorProdTest+0x46>
	}
	vSetStepperMotorDirection(MotorId, Opening);
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ff3d 	bl	8001e54 <vSetStepperMotorDirection>
	int stepToFull;
	stepToFull = (MotorId == PrimaryStepper)?STEP_RANGE_PRIMARY:STEP_RANGE_GRILL;
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <StepperMotorProdTest+0x7c>
 8001fe0:	23bb      	movs	r3, #187	; 0xbb
 8001fe2:	e000      	b.n	8001fe6 <StepperMotorProdTest+0x7e>
 8001fe4:	2364      	movs	r3, #100	; 0x64
 8001fe6:	60bb      	str	r3, [r7, #8]
	int i;
	for (i=0;i<=stepToFull;i++)
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	e009      	b.n	8002002 <StepperMotorProdTest+0x9a>
	{
		vToggleOneStep(MotorId);
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff fe47 	bl	8001c84 <vToggleOneStep>
		osDelay(5);
 8001ff6:	2005      	movs	r0, #5
 8001ff8:	f007 feef 	bl	8009dda <osDelay>
	for (i=0;i<=stepToFull;i++)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	3301      	adds	r3, #1
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	429a      	cmp	r2, r3
 8002008:	ddf1      	ble.n	8001fee <StepperMotorProdTest+0x86>
	}
	vSetStepperMotorDirection(MotorId, Closing);
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	2100      	movs	r1, #0
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff ff20 	bl	8001e54 <vSetStepperMotorDirection>
	for (i=0;i<=stepToFull;i++)
 8002014:	2300      	movs	r3, #0
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	e009      	b.n	800202e <StepperMotorProdTest+0xc6>
	{
		vToggleOneStep(MotorId);
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff fe31 	bl	8001c84 <vToggleOneStep>
		osDelay(5);
 8002022:	2005      	movs	r0, #5
 8002024:	f007 fed9 	bl	8009dda <osDelay>
	for (i=0;i<=stepToFull;i++)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	3301      	adds	r3, #1
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	429a      	cmp	r2, r3
 8002034:	ddf1      	ble.n	800201a <StepperMotorProdTest+0xb2>
	}
	//repeat for proper 0
	vSetStepperMotorDirection(MotorId, Opening);
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	2101      	movs	r1, #1
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ff0a 	bl	8001e54 <vSetStepperMotorDirection>
	while(vLimitSwitchActive(MotorId))
 8002040:	e006      	b.n	8002050 <StepperMotorProdTest+0xe8>
	{
		vToggleOneStep(MotorId);
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff fe1d 	bl	8001c84 <vToggleOneStep>
		osDelay(5);
 800204a:	2005      	movs	r0, #5
 800204c:	f007 fec5 	bl	8009dda <osDelay>
	while(vLimitSwitchActive(MotorId))
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff fe4e 	bl	8001cf4 <vLimitSwitchActive>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f1      	bne.n	8002042 <StepperMotorProdTest+0xda>
	}
	vSetStepperMotorDirection(MotorId, Closing);
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	2100      	movs	r1, #0
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff fef6 	bl	8001e54 <vSetStepperMotorDirection>
	while(!vLimitSwitchActive(MotorId))
 8002068:	e006      	b.n	8002078 <StepperMotorProdTest+0x110>
	{
		vToggleOneStep(MotorId);
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff fe09 	bl	8001c84 <vToggleOneStep>
		osDelay(5);
 8002072:	2005      	movs	r0, #5
 8002074:	f007 feb1 	bl	8009dda <osDelay>
	while(!vLimitSwitchActive(MotorId))
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fe3a 	bl	8001cf4 <vLimitSwitchActive>
 8002080:	4603      	mov	r3, r0
 8002082:	f083 0301 	eor.w	r3, r3, #1
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1ee      	bne.n	800206a <StepperMotorProdTest+0x102>
	}
	vSetStepperMotorDirection(MotorId, Opening);
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	2101      	movs	r1, #1
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff fedf 	bl	8001e54 <vSetStepperMotorDirection>
	for (i=0;i<=stepToFull/3;i++)
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	e009      	b.n	80020b0 <StepperMotorProdTest+0x148>
	{
		vToggleOneStep(MotorId);
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff fdf0 	bl	8001c84 <vToggleOneStep>
		osDelay(5);
 80020a4:	2005      	movs	r0, #5
 80020a6:	f007 fe98 	bl	8009dda <osDelay>
	for (i=0;i<=stepToFull/3;i++)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	3301      	adds	r3, #1
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	4a08      	ldr	r2, [pc, #32]	; (80020d4 <StepperMotorProdTest+0x16c>)
 80020b4:	fb82 1203 	smull	r1, r2, r2, r3
 80020b8:	17db      	asrs	r3, r3, #31
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	429a      	cmp	r2, r3
 80020c0:	ddec      	ble.n	800209c <StepperMotorProdTest+0x134>
	}
	vDisableStepper(MotorId);
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fea5 	bl	8001e14 <vDisableStepper>
}
 80020ca:	bf00      	nop
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	55555556 	.word	0x55555556

080020d8 <AllMotorToZero>:
void AllMotorToZero()
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
	int i=0;
 80020de:	2300      	movs	r3, #0
 80020e0:	607b      	str	r3, [r7, #4]

	for(i=0;i<NumberOfMotors;i++)
 80020e2:	2300      	movs	r3, #0
 80020e4:	607b      	str	r3, [r7, #4]
 80020e6:	e038      	b.n	800215a <AllMotorToZero+0x82>
	{
		vEnableStepper(i);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff fe2b 	bl	8001d48 <vEnableStepper>
		vSetStepperMotorDirection(i, Opening);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2101      	movs	r1, #1
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff feab 	bl	8001e54 <vSetStepperMotorDirection>
		while(vLimitSwitchActive(i))
 80020fe:	e007      	b.n	8002110 <AllMotorToZero+0x38>
		{
			vToggleOneStep(i);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	b2db      	uxtb	r3, r3
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fdbd 	bl	8001c84 <vToggleOneStep>
			osDelay(5);
 800210a:	2005      	movs	r0, #5
 800210c:	f007 fe65 	bl	8009dda <osDelay>
		while(vLimitSwitchActive(i))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	b2db      	uxtb	r3, r3
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff fded 	bl	8001cf4 <vLimitSwitchActive>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1ef      	bne.n	8002100 <AllMotorToZero+0x28>
		}
		vSetStepperMotorDirection(i, Closing);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2100      	movs	r1, #0
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff fe94 	bl	8001e54 <vSetStepperMotorDirection>
		while(!vLimitSwitchActive(i))
 800212c:	e007      	b.n	800213e <AllMotorToZero+0x66>
		{
			vToggleOneStep(i);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	b2db      	uxtb	r3, r3
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff fda6 	bl	8001c84 <vToggleOneStep>
			osDelay(5);
 8002138:	2005      	movs	r0, #5
 800213a:	f007 fe4e 	bl	8009dda <osDelay>
		while(!vLimitSwitchActive(i))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	b2db      	uxtb	r3, r3
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff fdd6 	bl	8001cf4 <vLimitSwitchActive>
 8002148:	4603      	mov	r3, r0
 800214a:	f083 0301 	eor.w	r3, r3, #1
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1ec      	bne.n	800212e <AllMotorToZero+0x56>
	for(i=0;i<NumberOfMotors;i++)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3301      	adds	r3, #1
 8002158:	607b      	str	r3, [r7, #4]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b01      	cmp	r3, #1
 800215e:	ddc3      	ble.n	80020e8 <AllMotorToZero+0x10>
		}
	}
}
 8002160:	bf00      	nop
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <initPID>:
    return (pTerm + dTerm + iTerm); //iTerm +

}

void initPID(PIDtype* pid, float ki, float kd, float kp,int iErrorMax, int iErrorMin)
{
 800216a:	b480      	push	{r7}
 800216c:	b085      	sub	sp, #20
 800216e:	af00      	add	r7, sp, #0
 8002170:	60f8      	str	r0, [r7, #12]
 8002172:	60b9      	str	r1, [r7, #8]
 8002174:	607a      	str	r2, [r7, #4]
 8002176:	603b      	str	r3, [r7, #0]
	pid->dLastValue = 0;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
	pid->iErrorMax = iErrorMax;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	609a      	str	r2, [r3, #8]
	pid->iErrorMin = iErrorMin;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	69fa      	ldr	r2, [r7, #28]
 8002188:	60da      	str	r2, [r3, #12]
	pid->previousError = 0;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	611a      	str	r2, [r3, #16]
	pid->kd = kd;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	61da      	str	r2, [r3, #28]
	pid->ki = ki;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	619a      	str	r2, [r3, #24]
	pid->kp = kp;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	615a      	str	r2, [r3, #20]
	pid->PIDPosition = 0;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	621a      	str	r2, [r3, #32]
}
 80021a8:	bf00      	nop
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr
	...

080021b4 <TestButtonWalkthrough>:
//static Test* pTestState = &TestList[MOTOR_SPEED1_TEST];
static Test TestState = COMPLETED;
Test getTestState();

void TestButtonWalkthrough(Test* pteststate)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
	static int debounceCounter=0;

	//function used to "harshly" debounce with timer and stuff for production testing
	if(GPIO_PIN_SET==HAL_GPIO_ReadPin(Button_Input_GPIO_Port,Button_Input_Pin))
 80021bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021c0:	4819      	ldr	r0, [pc, #100]	; (8002228 <TestButtonWalkthrough+0x74>)
 80021c2:	f003 fbfb 	bl	80059bc <HAL_GPIO_ReadPin>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d125      	bne.n	8002218 <TestButtonWalkthrough+0x64>
	{
		debounceCounter++;
 80021cc:	4b17      	ldr	r3, [pc, #92]	; (800222c <TestButtonWalkthrough+0x78>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	3301      	adds	r3, #1
 80021d2:	4a16      	ldr	r2, [pc, #88]	; (800222c <TestButtonWalkthrough+0x78>)
 80021d4:	6013      	str	r3, [r2, #0]
		if(debounceCounter > 1)
 80021d6:	4b15      	ldr	r3, [pc, #84]	; (800222c <TestButtonWalkthrough+0x78>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	dd1f      	ble.n	800221e <TestButtonWalkthrough+0x6a>
		{
			(*pteststate)++; //increment the test sequence.
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	3301      	adds	r3, #1
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	701a      	strb	r2, [r3, #0]
			if(*pteststate >=NB_OF_TEST)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d905      	bls.n	80021fe <TestButtonWalkthrough+0x4a>
			{
				*pteststate = 0;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]
				Algo_setState(ZEROING_STEPPER);
 80021f8:	2000      	movs	r0, #0
 80021fa:	f001 fdb7 	bl	8003d6c <Algo_setState>
			}
			debounceCounter = 0 ;
 80021fe:	4b0b      	ldr	r3, [pc, #44]	; (800222c <TestButtonWalkthrough+0x78>)
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
			while(GPIO_PIN_SET==HAL_GPIO_ReadPin(Button_Input_GPIO_Port,Button_Input_Pin)){}; // stay here if button is maintained
 8002204:	bf00      	nop
 8002206:	f44f 7180 	mov.w	r1, #256	; 0x100
 800220a:	4807      	ldr	r0, [pc, #28]	; (8002228 <TestButtonWalkthrough+0x74>)
 800220c:	f003 fbd6 	bl	80059bc <HAL_GPIO_ReadPin>
 8002210:	4603      	mov	r3, r0
 8002212:	2b01      	cmp	r3, #1
 8002214:	d0f7      	beq.n	8002206 <TestButtonWalkthrough+0x52>
	}
	else
	{
		debounceCounter =0;
	}
}
 8002216:	e002      	b.n	800221e <TestButtonWalkthrough+0x6a>
		debounceCounter =0;
 8002218:	4b04      	ldr	r3, [pc, #16]	; (800222c <TestButtonWalkthrough+0x78>)
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40010c00 	.word	0x40010c00
 800222c:	200000dc 	.word	0x200000dc

08002230 <TestRunner>:

void TestRunner()
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
	//pTestState = &TestList[MOTOR_SPEED1_TEST];
	// we are going to use the status led to encode the test step

	switch (TestState) {
 8002234:	4b2c      	ldr	r3, [pc, #176]	; (80022e8 <TestRunner+0xb8>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b08      	cmp	r3, #8
 800223a:	d851      	bhi.n	80022e0 <TestRunner+0xb0>
 800223c:	a201      	add	r2, pc, #4	; (adr r2, 8002244 <TestRunner+0x14>)
 800223e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002242:	bf00      	nop
 8002244:	08002269 	.word	0x08002269
 8002248:	08002271 	.word	0x08002271
 800224c:	0800227f 	.word	0x0800227f
 8002250:	0800228d 	.word	0x0800228d
 8002254:	08002295 	.word	0x08002295
 8002258:	0800229d 	.word	0x0800229d
 800225c:	080022b7 	.word	0x080022b7
 8002260:	080022d1 	.word	0x080022d1
 8002264:	080022d9 	.word	0x080022d9
		case COMPLETED:
			//setStatusBit(TestState);
			TestButtonWalkthrough(&TestState);
 8002268:	481f      	ldr	r0, [pc, #124]	; (80022e8 <TestRunner+0xb8>)
 800226a:	f7ff ffa3 	bl	80021b4 <TestButtonWalkthrough>
			break;
 800226e:	e038      	b.n	80022e2 <TestRunner+0xb2>
		case MOTOR_SPEED1_TEST:
			vSetSpeed(1);
 8002270:	2001      	movs	r0, #1
 8002272:	f7ff fe25 	bl	8001ec0 <vSetSpeed>
			//setStatusBit(TestState);
			TestButtonWalkthrough(&TestState);
 8002276:	481c      	ldr	r0, [pc, #112]	; (80022e8 <TestRunner+0xb8>)
 8002278:	f7ff ff9c 	bl	80021b4 <TestButtonWalkthrough>
			break;
 800227c:	e031      	b.n	80022e2 <TestRunner+0xb2>
		case THERMO_REAR_TEST:
			vSetSpeed(0);
 800227e:	2000      	movs	r0, #0
 8002280:	f7ff fe1e 	bl	8001ec0 <vSetSpeed>
			//setStatusBit(1);
			TestButtonWalkthrough(&TestState);
 8002284:	4818      	ldr	r0, [pc, #96]	; (80022e8 <TestRunner+0xb8>)
 8002286:	f7ff ff95 	bl	80021b4 <TestButtonWalkthrough>
			break;
 800228a:	e02a      	b.n	80022e2 <TestRunner+0xb2>
		case THERMO_BAFFLE_TEST:
			//setStatusBit(2);
			TestButtonWalkthrough(&TestState);
 800228c:	4816      	ldr	r0, [pc, #88]	; (80022e8 <TestRunner+0xb8>)
 800228e:	f7ff ff91 	bl	80021b4 <TestButtonWalkthrough>
			break;
 8002292:	e026      	b.n	80022e2 <TestRunner+0xb2>
		case PLENUM_RTD_TEST:
			//setStatusBit(3);
			TestButtonWalkthrough(&TestState);
 8002294:	4814      	ldr	r0, [pc, #80]	; (80022e8 <TestRunner+0xb8>)
 8002296:	f7ff ff8d 	bl	80021b4 <TestButtonWalkthrough>
			break;
 800229a:	e022      	b.n	80022e2 <TestRunner+0xb2>
		case STEPPER_MOTOR1_TEST:
			//setStatusBit(4);
			StepperMotorProdTest(PrimaryStepper);
 800229c:	2000      	movs	r0, #0
 800229e:	f7ff fe63 	bl	8001f68 <StepperMotorProdTest>
			TestButtonWalkthrough(&TestState);
 80022a2:	4811      	ldr	r0, [pc, #68]	; (80022e8 <TestRunner+0xb8>)
 80022a4:	f7ff ff86 	bl	80021b4 <TestButtonWalkthrough>
			TestState++;
 80022a8:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <TestRunner+0xb8>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	3301      	adds	r3, #1
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <TestRunner+0xb8>)
 80022b2:	701a      	strb	r2, [r3, #0]
			break;
 80022b4:	e015      	b.n	80022e2 <TestRunner+0xb2>
		case STEPPER_MOTOR2_TEST:
			//setStatusBit(5);
			StepperMotorProdTest(BoostStepper);
 80022b6:	2001      	movs	r0, #1
 80022b8:	f7ff fe56 	bl	8001f68 <StepperMotorProdTest>
			TestButtonWalkthrough(&TestState);
 80022bc:	480a      	ldr	r0, [pc, #40]	; (80022e8 <TestRunner+0xb8>)
 80022be:	f7ff ff79 	bl	80021b4 <TestButtonWalkthrough>
			TestState++;
 80022c2:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <TestRunner+0xb8>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	3301      	adds	r3, #1
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <TestRunner+0xb8>)
 80022cc:	701a      	strb	r2, [r3, #0]
			break;
 80022ce:	e008      	b.n	80022e2 <TestRunner+0xb2>
		case THERMOSTAT_TEST:
			//setStatusBit(6);
			TestButtonWalkthrough(&TestState);
 80022d0:	4805      	ldr	r0, [pc, #20]	; (80022e8 <TestRunner+0xb8>)
 80022d2:	f7ff ff6f 	bl	80021b4 <TestButtonWalkthrough>
			break;
 80022d6:	e004      	b.n	80022e2 <TestRunner+0xb2>
		case INTERLOCK_TEST:
			//setStatusBit(7);
			TestButtonWalkthrough(&TestState);
 80022d8:	4803      	ldr	r0, [pc, #12]	; (80022e8 <TestRunner+0xb8>)
 80022da:	f7ff ff6b 	bl	80021b4 <TestButtonWalkthrough>
			break;
 80022de:	e000      	b.n	80022e2 <TestRunner+0xb2>
		default:
			break;
 80022e0:	bf00      	nop
	}
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	200000d9 	.word	0x200000d9

080022ec <getTestState>:
Test getTestState()
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
	return TestState;
 80022f0:	4b02      	ldr	r3, [pc, #8]	; (80022fc <getTestState+0x10>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr
 80022fc:	200000d9 	.word	0x200000d9

08002300 <TemperatureManager>:
/* USER CODE END Header_TemperatureManager */
uint8_t dummy =0;


void TemperatureManager(void const * argument)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b096      	sub	sp, #88	; 0x58
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TemperatureManager */
	osSemaphoreDef(I2CSemaphoreHandle);
 8002308:	2300      	movs	r3, #0
 800230a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800230c:	2300      	movs	r3, #0
 800230e:	643b      	str	r3, [r7, #64]	; 0x40
    I2CSemaphoreHandle = osSemaphoreCreate(osSemaphore(I2CSemaphoreHandle), 1);
 8002310:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002314:	2101      	movs	r1, #1
 8002316:	4618      	mov	r0, r3
 8002318:	f007 fde4 	bl	8009ee4 <osSemaphoreCreate>
 800231c:	4603      	mov	r3, r0
 800231e:	4ab6      	ldr	r2, [pc, #728]	; (80025f8 <TemperatureManager+0x2f8>)
 8002320:	6013      	str	r3, [r2, #0]
    osSemaphoreWait(I2CSemaphoreHandle,1); //decrement semaphore value for the lack of way to create a semaphore with a count of 0.
 8002322:	4bb5      	ldr	r3, [pc, #724]	; (80025f8 <TemperatureManager+0x2f8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2101      	movs	r1, #1
 8002328:	4618      	mov	r0, r3
 800232a:	f007 fe0d 	bl	8009f48 <osSemaphoreWait>

    uint8_t ADCConfigByte[NUMBER_OF_ADC_CH] = {0x9F,0xBF,0xDC,0xFF}; // Channel 3 is for RTD,Gain=1 //channel 4 is for the pressure sensor, Gain =1
 800232e:	4bb3      	ldr	r3, [pc, #716]	; (80025fc <TemperatureManager+0x2fc>)
 8002330:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t i32tempReading=0;
 8002332:	2300      	movs	r3, #0
 8002334:	657b      	str	r3, [r7, #84]	; 0x54
    int i =0;
 8002336:	2300      	movs	r3, #0
 8002338:	653b      	str	r3, [r7, #80]	; 0x50
    float AdcArray[NUMBER_OF_ADC_CH];
    float TemperatureCelsius[NUMBER_OF_ADC_CH-1];
    float TemperatureFarenheit[NUMBER_OF_ADC_CH-1];
	float tColdJunction;
	float temp1;
    uint32_t PreviousWakeTime = osKernelSysTick(); //must be nitialized before first use
 800233a:	f007 fcf2 	bl	8009d22 <osKernelSysTick>
 800233e:	4603      	mov	r3, r0
 8002340:	60bb      	str	r3, [r7, #8]
    bool DataReady;

    /* Infinite loop */
    for(;;)
    {
    	osDelayUntil(&PreviousWakeTime,5000);
 8002342:	f107 0308 	add.w	r3, r7, #8
 8002346:	f241 3188 	movw	r1, #5000	; 0x1388
 800234a:	4618      	mov	r0, r3
 800234c:	f007 fe80 	bl	800a050 <osDelayUntil>
    	//HAL_GPIO_TogglePin(USB_LED_GPIO_Port,USB_LED_Pin);

    	//coldjunction temperature
		//temp1 = uCAdcData[1]*3.3/4096;  //Vout=TC x TA + VoC where TC = 10mV/C V0C->500mV
		temp1 = 0.800;		///TODO: fetch this value from external ADC (I2C)
 8002350:	4bab      	ldr	r3, [pc, #684]	; (8002600 <TemperatureManager+0x300>)
 8002352:	64bb      	str	r3, [r7, #72]	; 0x48
		tColdJunction = (temp1-0.500)/.010;
 8002354:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002356:	f7fe f8cf 	bl	80004f8 <__aeabi_f2d>
 800235a:	f04f 0200 	mov.w	r2, #0
 800235e:	4ba9      	ldr	r3, [pc, #676]	; (8002604 <TemperatureManager+0x304>)
 8002360:	f7fd ff6a 	bl	8000238 <__aeabi_dsub>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	4610      	mov	r0, r2
 800236a:	4619      	mov	r1, r3
 800236c:	a39e      	add	r3, pc, #632	; (adr r3, 80025e8 <TemperatureManager+0x2e8>)
 800236e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002372:	f7fe fa43 	bl	80007fc <__aeabi_ddiv>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	4610      	mov	r0, r2
 800237c:	4619      	mov	r1, r3
 800237e:	f7fe fbc3 	bl	8000b08 <__aeabi_d2f>
 8002382:	4603      	mov	r3, r0
 8002384:	647b      	str	r3, [r7, #68]	; 0x44

		for (i=FrontThermocouple;i<PlenumRtd;i++) //we don't need to read ADC input 3 and 4
 8002386:	2300      	movs	r3, #0
 8002388:	653b      	str	r3, [r7, #80]	; 0x50
 800238a:	e0bf      	b.n	800250c <TemperatureManager+0x20c>
		{

			HAL_I2C_Master_Transmit_IT(&hi2c1, ADC_ADDRESS_7BIT,&ADCConfigByte[i],1);
 800238c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002392:	441a      	add	r2, r3
 8002394:	2301      	movs	r3, #1
 8002396:	21d0      	movs	r1, #208	; 0xd0
 8002398:	489b      	ldr	r0, [pc, #620]	; (8002608 <TemperatureManager+0x308>)
 800239a:	f003 fccb 	bl	8005d34 <HAL_I2C_Master_Transmit_IT>
			//osSemaphoreWait(I2CSemaphoreHandle,osWaitForever); //wait forever @@@@ to restart and I2C transaction in case of hang up sys
			if(osErrorOS == osSemaphoreWait(I2CSemaphoreHandle,1000)) //wait 500ms for an answer or retry
 800239e:	4b96      	ldr	r3, [pc, #600]	; (80025f8 <TemperatureManager+0x2f8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80023a6:	4618      	mov	r0, r3
 80023a8:	f007 fdce 	bl	8009f48 <osSemaphoreWait>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2bff      	cmp	r3, #255	; 0xff
 80023b0:	d10f      	bne.n	80023d2 <TemperatureManager+0xd2>
			{
				//clearly something is wrong Abort the transmission
				//HAL_GPIO_WritePin(STATUS_LED0_GPIO_Port,STATUS_LED0_Pin,RESET);
				HAL_I2C_Master_Abort_IT(&hi2c1,ADC_ADDRESS_7BIT);
 80023b2:	21d0      	movs	r1, #208	; 0xd0
 80023b4:	4894      	ldr	r0, [pc, #592]	; (8002608 <TemperatureManager+0x308>)
 80023b6:	f003 fe0d 	bl	8005fd4 <HAL_I2C_Master_Abort_IT>
				HAL_I2C_DeInit(&hi2c1);
 80023ba:	4893      	ldr	r0, [pc, #588]	; (8002608 <TemperatureManager+0x308>)
 80023bc:	f003 fc8a 	bl	8005cd4 <HAL_I2C_DeInit>
				osDelay(100);
 80023c0:	2064      	movs	r0, #100	; 0x64
 80023c2:	f007 fd0a 	bl	8009dda <osDelay>
				MX_I2C1_Init();
 80023c6:	f001 fff3 	bl	80043b0 <MX_I2C1_Init>
				osDelay(100);
 80023ca:	2064      	movs	r0, #100	; 0x64
 80023cc:	f007 fd05 	bl	8009dda <osDelay>
 80023d0:	e02d      	b.n	800242e <TemperatureManager+0x12e>
			}
			else
			{
				//do something in the callback
				HAL_GPIO_WritePin(STATUS_LED1_GPIO_Port,STATUS_LED1_Pin,RESET);
 80023d2:	2200      	movs	r2, #0
 80023d4:	2108      	movs	r1, #8
 80023d6:	488d      	ldr	r0, [pc, #564]	; (800260c <TemperatureManager+0x30c>)
 80023d8:	f003 fb07 	bl	80059ea <HAL_GPIO_WritePin>
				do{
					DataReady = false;
 80023dc:	2300      	movs	r3, #0
 80023de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					osDelay(300); //wait to give the chance to the ADC to complete the conversion 1/3.75 = 266ms
 80023e2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80023e6:	f007 fcf8 	bl	8009dda <osDelay>
					HAL_I2C_Master_Receive_IT(&hi2c1, ADC_ADDRESS_7BIT,adcData,4);
 80023ea:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80023ee:	2304      	movs	r3, #4
 80023f0:	21d0      	movs	r1, #208	; 0xd0
 80023f2:	4885      	ldr	r0, [pc, #532]	; (8002608 <TemperatureManager+0x308>)
 80023f4:	f003 fd42 	bl	8005e7c <HAL_I2C_Master_Receive_IT>
					//osSemaphoreWait(I2CSemaphoreHandle,osWaitForever); //wait forever @@@@ to restart and I2C transaction in case of hang up sys
					if(osErrorOS == osSemaphoreWait(I2CSemaphoreHandle,500)) //wait 500ms for an answer or retry
 80023f8:	4b7f      	ldr	r3, [pc, #508]	; (80025f8 <TemperatureManager+0x2f8>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002400:	4618      	mov	r0, r3
 8002402:	f007 fda1 	bl	8009f48 <osSemaphoreWait>
 8002406:	4603      	mov	r3, r0
 8002408:	2bff      	cmp	r3, #255	; 0xff
 800240a:	d008      	beq.n	800241e <TemperatureManager+0x11e>
					{
						continue;
					}
					else
					{
						DataReady = (IsDataNew(adcData[3]));
 800240c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002410:	b25b      	sxtb	r3, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	b2db      	uxtb	r3, r3
 8002416:	09db      	lsrs	r3, r3, #7
 8002418:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800241c:	e000      	b.n	8002420 <TemperatureManager+0x120>
						continue;
 800241e:	bf00      	nop
					}

				}while (!DataReady);
 8002420:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002424:	f083 0301 	eor.w	r3, r3, #1
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1d6      	bne.n	80023dc <TemperatureManager+0xdc>
			}
			i32tempReading = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	657b      	str	r3, [r7, #84]	; 0x54
			i32tempReading = (adcData[0] << 30) + (adcData[1] << 22)  + (adcData[2] << 14); // justify the result for 32bit storage
 8002432:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002436:	079a      	lsls	r2, r3, #30
 8002438:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800243c:	059b      	lsls	r3, r3, #22
 800243e:	441a      	add	r2, r3
 8002440:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002444:	039b      	lsls	r3, r3, #14
 8002446:	4413      	add	r3, r2
 8002448:	657b      	str	r3, [r7, #84]	; 0x54
			if (i32tempReading < 0){
 800244a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800244c:	2b00      	cmp	r3, #0
 800244e:	da02      	bge.n	8002456 <TemperatureManager+0x156>
				i32tempReading = -i32tempReading;
 8002450:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002452:	425b      	negs	r3, r3
 8002454:	657b      	str	r3, [r7, #84]	; 0x54
			}
			i32tempReading = (i32tempReading) >> 14;
 8002456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002458:	139b      	asrs	r3, r3, #14
 800245a:	657b      	str	r3, [r7, #84]	; 0x54

			//AdcArray[i] = ((float)(abs(i32tempReading))*15.625)/8; //15.625uV par bit  gain = 8
			AdcArray[i] = ((float)(i32tempReading)*15.625)/8; //15.625uV par bit  gain = 8
 800245c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800245e:	f7fe fc5d 	bl	8000d1c <__aeabi_i2f>
 8002462:	4603      	mov	r3, r0
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe f847 	bl	80004f8 <__aeabi_f2d>
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	4b68      	ldr	r3, [pc, #416]	; (8002610 <TemperatureManager+0x310>)
 8002470:	f7fe f89a 	bl	80005a8 <__aeabi_dmul>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4610      	mov	r0, r2
 800247a:	4619      	mov	r1, r3
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	4b64      	ldr	r3, [pc, #400]	; (8002614 <TemperatureManager+0x314>)
 8002482:	f7fe f9bb 	bl	80007fc <__aeabi_ddiv>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	4610      	mov	r0, r2
 800248c:	4619      	mov	r1, r3
 800248e:	f7fe fb3b 	bl	8000b08 <__aeabi_d2f>
 8002492:	4602      	mov	r2, r0
 8002494:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800249c:	440b      	add	r3, r1
 800249e:	f843 2c34 	str.w	r2, [r3, #-52]
			TemperatureCelsius[i] = uVtoDegreeCTypeK(AdcArray[i], tColdJunction); //6.7//26.1 //board is self heating to 7.3 above ambient
 80024a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80024aa:	4413      	add	r3, r2
 80024ac:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80024b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 f8f0 	bl	8002698 <uVtoDegreeCTypeK>
 80024b8:	4602      	mov	r2, r0
 80024ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80024c2:	440b      	add	r3, r1
 80024c4:	f843 2c40 	str.w	r2, [r3, #-64]
			TemperatureFarenheit[i] = TemperatureCelsius[i]*9/5+32;
 80024c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80024d0:	4413      	add	r3, r2
 80024d2:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80024d6:	4950      	ldr	r1, [pc, #320]	; (8002618 <TemperatureManager+0x318>)
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe fc73 	bl	8000dc4 <__aeabi_fmul>
 80024de:	4603      	mov	r3, r0
 80024e0:	494e      	ldr	r1, [pc, #312]	; (800261c <TemperatureManager+0x31c>)
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fe fd22 	bl	8000f2c <__aeabi_fdiv>
 80024e8:	4603      	mov	r3, r0
 80024ea:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe fb60 	bl	8000bb4 <__addsf3>
 80024f4:	4603      	mov	r3, r0
 80024f6:	461a      	mov	r2, r3
 80024f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002500:	440b      	add	r3, r1
 8002502:	f843 2c4c 	str.w	r2, [r3, #-76]
		for (i=FrontThermocouple;i<PlenumRtd;i++) //we don't need to read ADC input 3 and 4
 8002506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002508:	3301      	adds	r3, #1
 800250a:	653b      	str	r3, [r7, #80]	; 0x50
 800250c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800250e:	2b01      	cmp	r3, #1
 8002510:	f77f af3c 	ble.w	800238c <TemperatureManager+0x8c>

		}

    	//temp1 = uCAdcData[0]*3.3/4096; //12bit internal ADC reference to 3.3V
		temp1 = 2.0;
 8002514:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002518:	64bb      	str	r3, [r7, #72]	; 0x48
		if(temp1 < 1.65)
 800251a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800251c:	f7fd ffec 	bl	80004f8 <__aeabi_f2d>
 8002520:	a333      	add	r3, pc, #204	; (adr r3, 80025f0 <TemperatureManager+0x2f0>)
 8002522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002526:	f7fe fab1 	bl	8000a8c <__aeabi_dcmplt>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d009      	beq.n	8002544 <TemperatureManager+0x244>
		{
			//polynome appoximation go nuts below that voltage range
			TemperatureCelsius[i] = 0;
 8002530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002538:	4413      	add	r3, r2
 800253a:	f04f 0200 	mov.w	r2, #0
 800253e:	f843 2c40 	str.w	r2, [r3, #-64]
 8002542:	e00a      	b.n	800255a <TemperatureManager+0x25a>
		}
		else
		{
			TemperatureCelsius[i] = VtoDegreeCRtd(temp1);
 8002544:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002546:	f000 fbcb 	bl	8002ce0 <VtoDegreeCRtd>
 800254a:	4602      	mov	r2, r0
 800254c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002554:	440b      	add	r3, r1
 8002556:	f843 2c40 	str.w	r2, [r3, #-64]
		}
		TemperatureFarenheit[i] = TemperatureCelsius[i]*9/5+32;
 800255a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002562:	4413      	add	r3, r2
 8002564:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8002568:	492b      	ldr	r1, [pc, #172]	; (8002618 <TemperatureManager+0x318>)
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe fc2a 	bl	8000dc4 <__aeabi_fmul>
 8002570:	4603      	mov	r3, r0
 8002572:	492a      	ldr	r1, [pc, #168]	; (800261c <TemperatureManager+0x31c>)
 8002574:	4618      	mov	r0, r3
 8002576:	f7fe fcd9 	bl	8000f2c <__aeabi_fdiv>
 800257a:	4603      	mov	r3, r0
 800257c:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe fb17 	bl	8000bb4 <__addsf3>
 8002586:	4603      	mov	r3, r0
 8002588:	461a      	mov	r2, r3
 800258a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002592:	440b      	add	r3, r1
 8002594:	f843 2c4c 	str.w	r2, [r3, #-76]

		Algo_setBaffleTemp((int)(TemperatureFarenheit[FrontThermocouple]*10));
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4921      	ldr	r1, [pc, #132]	; (8002620 <TemperatureManager+0x320>)
 800259c:	4618      	mov	r0, r3
 800259e:	f7fe fc11 	bl	8000dc4 <__aeabi_fmul>
 80025a2:	4603      	mov	r3, r0
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fe fdd3 	bl	8001150 <__aeabi_f2iz>
 80025aa:	4603      	mov	r3, r0
 80025ac:	4618      	mov	r0, r3
 80025ae:	f001 fbf7 	bl	8003da0 <Algo_setBaffleTemp>
		Algo_setRearTemp((int)(TemperatureFarenheit[RearThermocouple]*10));
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	491a      	ldr	r1, [pc, #104]	; (8002620 <TemperatureManager+0x320>)
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe fc04 	bl	8000dc4 <__aeabi_fmul>
 80025bc:	4603      	mov	r3, r0
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe fdc6 	bl	8001150 <__aeabi_f2iz>
 80025c4:	4603      	mov	r3, r0
 80025c6:	4618      	mov	r0, r3
 80025c8:	f001 fbfe 	bl	8003dc8 <Algo_setRearTemp>
		Algo_setPlenumTemp((int)(TemperatureFarenheit[PlenumRtd]*10));
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	4914      	ldr	r1, [pc, #80]	; (8002620 <TemperatureManager+0x320>)
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fe fbf7 	bl	8000dc4 <__aeabi_fmul>
 80025d6:	4603      	mov	r3, r0
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fe fdb9 	bl	8001150 <__aeabi_f2iz>
 80025de:	4603      	mov	r3, r0
 80025e0:	4618      	mov	r0, r3
 80025e2:	f001 fc13 	bl	8003e0c <Algo_setPlenumTemp>
    	osDelayUntil(&PreviousWakeTime,5000);
 80025e6:	e6ac      	b.n	8002342 <TemperatureManager+0x42>
 80025e8:	47ae147b 	.word	0x47ae147b
 80025ec:	3f847ae1 	.word	0x3f847ae1
 80025f0:	66666666 	.word	0x66666666
 80025f4:	3ffa6666 	.word	0x3ffa6666
 80025f8:	20002f64 	.word	0x20002f64
 80025fc:	ffdcbf9f 	.word	0xffdcbf9f
 8002600:	3f4ccccd 	.word	0x3f4ccccd
 8002604:	3fe00000 	.word	0x3fe00000
 8002608:	20002f10 	.word	0x20002f10
 800260c:	40011000 	.word	0x40011000
 8002610:	402f4000 	.word	0x402f4000
 8002614:	40200000 	.word	0x40200000
 8002618:	41100000 	.word	0x41100000
 800261c:	40a00000 	.word	0x40a00000
 8002620:	41200000 	.word	0x41200000

08002624 <HAL_I2C_MasterTxCpltCallback>:

  	}
  /* USER CODE END TemperatureManager */
}
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(I2CSemaphoreHandle);
 800262c:	4b04      	ldr	r3, [pc, #16]	; (8002640 <HAL_I2C_MasterTxCpltCallback+0x1c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f007 fcd7 	bl	8009fe4 <osSemaphoreRelease>
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20002f64 	.word	0x20002f64

08002644 <HAL_I2C_MasterRxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(I2CSemaphoreHandle);
 800264c:	4b04      	ldr	r3, [pc, #16]	; (8002660 <HAL_I2C_MasterRxCpltCallback+0x1c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f007 fcc7 	bl	8009fe4 <osSemaphoreRelease>
}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20002f64 	.word	0x20002f64

08002664 <HAL_I2C_ErrorCallback>:
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
	uint32_t errorcode = hi2c->ErrorCode;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	60fb      	str	r3, [r7, #12]
}
 8002672:	bf00      	nop
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr

0800267c <HAL_I2C_AbortCpltCallback>:
void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
	uint32_t errorcode = hi2c->ErrorCode;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	60fb      	str	r3, [r7, #12]
}
 800268a:	bf00      	nop
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr
 8002694:	0000      	movs	r0, r0
	...

08002698 <uVtoDegreeCTypeK>:
#define T_COEF_A0 1.185976E-1
#define T_COEF_A1 -1.183432E-4
#define T_COEF_A2 1.269686E2

float uVtoDegreeCTypeK(float uVdata,float Tref)
{
 8002698:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800269c:	b08a      	sub	sp, #40	; 0x28
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	6039      	str	r1, [r7, #0]
    double Vref = T_COEF_C0 + T_COEF_C1*Tref + T_COEF_C2*pow(Tref,2) + T_COEF_C3*pow(Tref,3) + T_COEF_C4*pow(Tref,4) + T_COEF_C5*pow(Tref,5) + T_COEF_C6*pow(Tref,6) + T_COEF_C7*pow(Tref,7) + T_COEF_C8*pow(Tref,8) + T_COEF_C9*pow(Tref,9)+T_COEF_A0*pow(2.718281828,T_COEF_A1*(Tref-T_COEF_A2)*(Tref-T_COEF_A2));
 80026a4:	6838      	ldr	r0, [r7, #0]
 80026a6:	f7fd ff27 	bl	80004f8 <__aeabi_f2d>
 80026aa:	a3cd      	add	r3, pc, #820	; (adr r3, 80029e0 <uVtoDegreeCTypeK+0x348>)
 80026ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b0:	f7fd ff7a 	bl	80005a8 <__aeabi_dmul>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	4610      	mov	r0, r2
 80026ba:	4619      	mov	r1, r3
 80026bc:	a3ca      	add	r3, pc, #808	; (adr r3, 80029e8 <uVtoDegreeCTypeK+0x350>)
 80026be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c2:	f7fd fdb9 	bl	8000238 <__aeabi_dsub>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	4614      	mov	r4, r2
 80026cc:	461d      	mov	r5, r3
 80026ce:	6838      	ldr	r0, [r7, #0]
 80026d0:	f7fd ff12 	bl	80004f8 <__aeabi_f2d>
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026dc:	f00b fc72 	bl	800dfc4 <pow>
 80026e0:	a3c3      	add	r3, pc, #780	; (adr r3, 80029f0 <uVtoDegreeCTypeK+0x358>)
 80026e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e6:	f7fd ff5f 	bl	80005a8 <__aeabi_dmul>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	4620      	mov	r0, r4
 80026f0:	4629      	mov	r1, r5
 80026f2:	f7fd fda3 	bl	800023c <__adddf3>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	4614      	mov	r4, r2
 80026fc:	461d      	mov	r5, r3
 80026fe:	6838      	ldr	r0, [r7, #0]
 8002700:	f7fd fefa 	bl	80004f8 <__aeabi_f2d>
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	4bdd      	ldr	r3, [pc, #884]	; (8002a80 <uVtoDegreeCTypeK+0x3e8>)
 800270a:	f00b fc5b 	bl	800dfc4 <pow>
 800270e:	a3ba      	add	r3, pc, #744	; (adr r3, 80029f8 <uVtoDegreeCTypeK+0x360>)
 8002710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002714:	f7fd ff48 	bl	80005a8 <__aeabi_dmul>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4620      	mov	r0, r4
 800271e:	4629      	mov	r1, r5
 8002720:	f7fd fd8c 	bl	800023c <__adddf3>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4614      	mov	r4, r2
 800272a:	461d      	mov	r5, r3
 800272c:	6838      	ldr	r0, [r7, #0]
 800272e:	f7fd fee3 	bl	80004f8 <__aeabi_f2d>
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	4bd3      	ldr	r3, [pc, #844]	; (8002a84 <uVtoDegreeCTypeK+0x3ec>)
 8002738:	f00b fc44 	bl	800dfc4 <pow>
 800273c:	a3b0      	add	r3, pc, #704	; (adr r3, 8002a00 <uVtoDegreeCTypeK+0x368>)
 800273e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002742:	f7fd ff31 	bl	80005a8 <__aeabi_dmul>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	4620      	mov	r0, r4
 800274c:	4629      	mov	r1, r5
 800274e:	f7fd fd75 	bl	800023c <__adddf3>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	4614      	mov	r4, r2
 8002758:	461d      	mov	r5, r3
 800275a:	6838      	ldr	r0, [r7, #0]
 800275c:	f7fd fecc 	bl	80004f8 <__aeabi_f2d>
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	4bc8      	ldr	r3, [pc, #800]	; (8002a88 <uVtoDegreeCTypeK+0x3f0>)
 8002766:	f00b fc2d 	bl	800dfc4 <pow>
 800276a:	a3a7      	add	r3, pc, #668	; (adr r3, 8002a08 <uVtoDegreeCTypeK+0x370>)
 800276c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002770:	f7fd ff1a 	bl	80005a8 <__aeabi_dmul>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4620      	mov	r0, r4
 800277a:	4629      	mov	r1, r5
 800277c:	f7fd fd5e 	bl	800023c <__adddf3>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4614      	mov	r4, r2
 8002786:	461d      	mov	r5, r3
 8002788:	6838      	ldr	r0, [r7, #0]
 800278a:	f7fd feb5 	bl	80004f8 <__aeabi_f2d>
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	4bbe      	ldr	r3, [pc, #760]	; (8002a8c <uVtoDegreeCTypeK+0x3f4>)
 8002794:	f00b fc16 	bl	800dfc4 <pow>
 8002798:	a39d      	add	r3, pc, #628	; (adr r3, 8002a10 <uVtoDegreeCTypeK+0x378>)
 800279a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279e:	f7fd ff03 	bl	80005a8 <__aeabi_dmul>
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	4620      	mov	r0, r4
 80027a8:	4629      	mov	r1, r5
 80027aa:	f7fd fd47 	bl	800023c <__adddf3>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4614      	mov	r4, r2
 80027b4:	461d      	mov	r5, r3
 80027b6:	6838      	ldr	r0, [r7, #0]
 80027b8:	f7fd fe9e 	bl	80004f8 <__aeabi_f2d>
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	4bb3      	ldr	r3, [pc, #716]	; (8002a90 <uVtoDegreeCTypeK+0x3f8>)
 80027c2:	f00b fbff 	bl	800dfc4 <pow>
 80027c6:	a394      	add	r3, pc, #592	; (adr r3, 8002a18 <uVtoDegreeCTypeK+0x380>)
 80027c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027cc:	f7fd feec 	bl	80005a8 <__aeabi_dmul>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4620      	mov	r0, r4
 80027d6:	4629      	mov	r1, r5
 80027d8:	f7fd fd30 	bl	800023c <__adddf3>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4614      	mov	r4, r2
 80027e2:	461d      	mov	r5, r3
 80027e4:	6838      	ldr	r0, [r7, #0]
 80027e6:	f7fd fe87 	bl	80004f8 <__aeabi_f2d>
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	4ba9      	ldr	r3, [pc, #676]	; (8002a94 <uVtoDegreeCTypeK+0x3fc>)
 80027f0:	f00b fbe8 	bl	800dfc4 <pow>
 80027f4:	a38a      	add	r3, pc, #552	; (adr r3, 8002a20 <uVtoDegreeCTypeK+0x388>)
 80027f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fa:	f7fd fed5 	bl	80005a8 <__aeabi_dmul>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4620      	mov	r0, r4
 8002804:	4629      	mov	r1, r5
 8002806:	f7fd fd19 	bl	800023c <__adddf3>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4614      	mov	r4, r2
 8002810:	461d      	mov	r5, r3
 8002812:	6838      	ldr	r0, [r7, #0]
 8002814:	f7fd fe70 	bl	80004f8 <__aeabi_f2d>
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	4b9e      	ldr	r3, [pc, #632]	; (8002a98 <uVtoDegreeCTypeK+0x400>)
 800281e:	f00b fbd1 	bl	800dfc4 <pow>
 8002822:	a381      	add	r3, pc, #516	; (adr r3, 8002a28 <uVtoDegreeCTypeK+0x390>)
 8002824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002828:	f7fd febe 	bl	80005a8 <__aeabi_dmul>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4620      	mov	r0, r4
 8002832:	4629      	mov	r1, r5
 8002834:	f7fd fd02 	bl	800023c <__adddf3>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4614      	mov	r4, r2
 800283e:	461d      	mov	r5, r3
 8002840:	6838      	ldr	r0, [r7, #0]
 8002842:	f7fd fe59 	bl	80004f8 <__aeabi_f2d>
 8002846:	a37a      	add	r3, pc, #488	; (adr r3, 8002a30 <uVtoDegreeCTypeK+0x398>)
 8002848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284c:	f7fd fcf4 	bl	8000238 <__aeabi_dsub>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4610      	mov	r0, r2
 8002856:	4619      	mov	r1, r3
 8002858:	a377      	add	r3, pc, #476	; (adr r3, 8002a38 <uVtoDegreeCTypeK+0x3a0>)
 800285a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285e:	f7fd fea3 	bl	80005a8 <__aeabi_dmul>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4690      	mov	r8, r2
 8002868:	4699      	mov	r9, r3
 800286a:	6838      	ldr	r0, [r7, #0]
 800286c:	f7fd fe44 	bl	80004f8 <__aeabi_f2d>
 8002870:	a36f      	add	r3, pc, #444	; (adr r3, 8002a30 <uVtoDegreeCTypeK+0x398>)
 8002872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002876:	f7fd fcdf 	bl	8000238 <__aeabi_dsub>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4640      	mov	r0, r8
 8002880:	4649      	mov	r1, r9
 8002882:	f7fd fe91 	bl	80005a8 <__aeabi_dmul>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	a16d      	add	r1, pc, #436	; (adr r1, 8002a40 <uVtoDegreeCTypeK+0x3a8>)
 800288c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002890:	f00b fb98 	bl	800dfc4 <pow>
 8002894:	a36c      	add	r3, pc, #432	; (adr r3, 8002a48 <uVtoDegreeCTypeK+0x3b0>)
 8002896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289a:	f7fd fe85 	bl	80005a8 <__aeabi_dmul>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	4620      	mov	r0, r4
 80028a4:	4629      	mov	r1, r5
 80028a6:	f7fd fcc9 	bl	800023c <__adddf3>
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double Vmeas = uVdata/1000; //value need to be in mV
 80028b2:	497a      	ldr	r1, [pc, #488]	; (8002a9c <uVtoDegreeCTypeK+0x404>)
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7fe fb39 	bl	8000f2c <__aeabi_fdiv>
 80028ba:	4603      	mov	r3, r0
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fd fe1b 	bl	80004f8 <__aeabi_f2d>
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double totalV = Vmeas + Vref;
 80028ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028d2:	f7fd fcb3 	bl	800023c <__adddf3>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	e9c7 2302 	strd	r2, r3, [r7, #8]

    double t90;
    if(totalV < 20.644)
 80028de:	a35c      	add	r3, pc, #368	; (adr r3, 8002a50 <uVtoDegreeCTypeK+0x3b8>)
 80028e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028e8:	f7fe f8d0 	bl	8000a8c <__aeabi_dcmplt>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 812a 	beq.w	8002b48 <uVtoDegreeCTypeK+0x4b0>
    {
     t90 = T_COEF_D0_0_500 + T_COEF_D1_0_500 *totalV + T_COEF_D2_0_500 *pow(totalV,2) + T_COEF_D3_0_500 *pow(totalV,3) + T_COEF_D4_0_500 *pow(totalV,4) + T_COEF_D5_0_500 *pow(totalV,5) + T_COEF_D6_0_500 *pow(totalV,6) + T_COEF_D7_0_500 *pow(totalV,7) + T_COEF_D8_0_500 *pow(totalV,8) + T_COEF_D9_0_500 *pow(totalV,9);
 80028f4:	a358      	add	r3, pc, #352	; (adr r3, 8002a58 <uVtoDegreeCTypeK+0x3c0>)
 80028f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028fe:	f7fd fe53 	bl	80005a8 <__aeabi_dmul>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	4610      	mov	r0, r2
 8002908:	4619      	mov	r1, r3
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	f7fd fc93 	bl	800023c <__adddf3>
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	4614      	mov	r4, r2
 800291c:	461d      	mov	r5, r3
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002926:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800292a:	f00b fb4b 	bl	800dfc4 <pow>
 800292e:	a34c      	add	r3, pc, #304	; (adr r3, 8002a60 <uVtoDegreeCTypeK+0x3c8>)
 8002930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002934:	f7fd fe38 	bl	80005a8 <__aeabi_dmul>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4620      	mov	r0, r4
 800293e:	4629      	mov	r1, r5
 8002940:	f7fd fc7c 	bl	800023c <__adddf3>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4614      	mov	r4, r2
 800294a:	461d      	mov	r5, r3
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	4b4b      	ldr	r3, [pc, #300]	; (8002a80 <uVtoDegreeCTypeK+0x3e8>)
 8002952:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002956:	f00b fb35 	bl	800dfc4 <pow>
 800295a:	a343      	add	r3, pc, #268	; (adr r3, 8002a68 <uVtoDegreeCTypeK+0x3d0>)
 800295c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002960:	f7fd fe22 	bl	80005a8 <__aeabi_dmul>
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	4620      	mov	r0, r4
 800296a:	4629      	mov	r1, r5
 800296c:	f7fd fc66 	bl	800023c <__adddf3>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	4614      	mov	r4, r2
 8002976:	461d      	mov	r5, r3
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	4b41      	ldr	r3, [pc, #260]	; (8002a84 <uVtoDegreeCTypeK+0x3ec>)
 800297e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002982:	f00b fb1f 	bl	800dfc4 <pow>
 8002986:	a33a      	add	r3, pc, #232	; (adr r3, 8002a70 <uVtoDegreeCTypeK+0x3d8>)
 8002988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298c:	f7fd fe0c 	bl	80005a8 <__aeabi_dmul>
 8002990:	4602      	mov	r2, r0
 8002992:	460b      	mov	r3, r1
 8002994:	4620      	mov	r0, r4
 8002996:	4629      	mov	r1, r5
 8002998:	f7fd fc50 	bl	800023c <__adddf3>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4614      	mov	r4, r2
 80029a2:	461d      	mov	r5, r3
 80029a4:	f04f 0200 	mov.w	r2, #0
 80029a8:	4b37      	ldr	r3, [pc, #220]	; (8002a88 <uVtoDegreeCTypeK+0x3f0>)
 80029aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029ae:	f00b fb09 	bl	800dfc4 <pow>
 80029b2:	a331      	add	r3, pc, #196	; (adr r3, 8002a78 <uVtoDegreeCTypeK+0x3e0>)
 80029b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b8:	f7fd fdf6 	bl	80005a8 <__aeabi_dmul>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4620      	mov	r0, r4
 80029c2:	4629      	mov	r1, r5
 80029c4:	f7fd fc3a 	bl	800023c <__adddf3>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4614      	mov	r4, r2
 80029ce:	461d      	mov	r5, r3
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	4b2d      	ldr	r3, [pc, #180]	; (8002a8c <uVtoDegreeCTypeK+0x3f4>)
 80029d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029da:	e061      	b.n	8002aa0 <uVtoDegreeCTypeK+0x408>
 80029dc:	f3af 8000 	nop.w
 80029e0:	ecfa2196 	.word	0xecfa2196
 80029e4:	3fa3ed7a 	.word	0x3fa3ed7a
 80029e8:	c4b5b30b 	.word	0xc4b5b30b
 80029ec:	3f9205d7 	.word	0x3f9205d7
 80029f0:	f72891e7 	.word	0xf72891e7
 80029f4:	3ef375d4 	.word	0x3ef375d4
 80029f8:	7a34de08 	.word	0x7a34de08
 80029fc:	be7ab2ac 	.word	0xbe7ab2ac
 8002a00:	b676ec5f 	.word	0xb676ec5f
 8002a04:	3df5e184 	.word	0x3df5e184
 8002a08:	c620f2a8 	.word	0xc620f2a8
 8002a0c:	bd63ba97 	.word	0xbd63ba97
 8002a10:	e5aa091d 	.word	0xe5aa091d
 8002a14:	3cc43402 	.word	0x3cc43402
 8002a18:	01c8db89 	.word	0x01c8db89
 8002a1c:	bc17a08b 	.word	0xbc17a08b
 8002a20:	b8001899 	.word	0xb8001899
 8002a24:	3b5d5cb4 	.word	0x3b5d5cb4
 8002a28:	51ff39ec 	.word	0x51ff39ec
 8002a2c:	ba8df847 	.word	0xba8df847
 8002a30:	8adab9f5 	.word	0x8adab9f5
 8002a34:	405fbdfd 	.word	0x405fbdfd
 8002a38:	b1df7541 	.word	0xb1df7541
 8002a3c:	bf1f05e0 	.word	0xbf1f05e0
 8002a40:	8b04919b 	.word	0x8b04919b
 8002a44:	4005bf0a 	.word	0x4005bf0a
 8002a48:	8d6253b2 	.word	0x8d6253b2
 8002a4c:	3fbe5c69 	.word	0x3fbe5c69
 8002a50:	2f1a9fbe 	.word	0x2f1a9fbe
 8002a54:	4034a4dd 	.word	0x4034a4dd
 8002a58:	886594af 	.word	0x886594af
 8002a5c:	40391563 	.word	0x40391563
 8002a60:	f62184e0 	.word	0xf62184e0
 8002a64:	3fb41f32 	.word	0x3fb41f32
 8002a68:	3c90aa07 	.word	0x3c90aa07
 8002a6c:	bfd00521 	.word	0xbfd00521
 8002a70:	cf12f82a 	.word	0xcf12f82a
 8002a74:	3fb5497e 	.word	0x3fb5497e
 8002a78:	55785780 	.word	0x55785780
 8002a7c:	bf89266f 	.word	0xbf89266f
 8002a80:	40080000 	.word	0x40080000
 8002a84:	40100000 	.word	0x40100000
 8002a88:	40140000 	.word	0x40140000
 8002a8c:	40180000 	.word	0x40180000
 8002a90:	401c0000 	.word	0x401c0000
 8002a94:	40200000 	.word	0x40200000
 8002a98:	40220000 	.word	0x40220000
 8002a9c:	447a0000 	.word	0x447a0000
 8002aa0:	f00b fa90 	bl	800dfc4 <pow>
 8002aa4:	a370      	add	r3, pc, #448	; (adr r3, 8002c68 <uVtoDegreeCTypeK+0x5d0>)
 8002aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aaa:	f7fd fd7d 	bl	80005a8 <__aeabi_dmul>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	f7fd fbc1 	bl	800023c <__adddf3>
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	4614      	mov	r4, r2
 8002ac0:	461d      	mov	r5, r3
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	4b7e      	ldr	r3, [pc, #504]	; (8002cc0 <uVtoDegreeCTypeK+0x628>)
 8002ac8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002acc:	f00b fa7a 	bl	800dfc4 <pow>
 8002ad0:	a367      	add	r3, pc, #412	; (adr r3, 8002c70 <uVtoDegreeCTypeK+0x5d8>)
 8002ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad6:	f7fd fd67 	bl	80005a8 <__aeabi_dmul>
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	4620      	mov	r0, r4
 8002ae0:	4629      	mov	r1, r5
 8002ae2:	f7fd fbab 	bl	800023c <__adddf3>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4614      	mov	r4, r2
 8002aec:	461d      	mov	r5, r3
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	4b74      	ldr	r3, [pc, #464]	; (8002cc4 <uVtoDegreeCTypeK+0x62c>)
 8002af4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002af8:	f00b fa64 	bl	800dfc4 <pow>
 8002afc:	a35e      	add	r3, pc, #376	; (adr r3, 8002c78 <uVtoDegreeCTypeK+0x5e0>)
 8002afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b02:	f7fd fd51 	bl	80005a8 <__aeabi_dmul>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	4629      	mov	r1, r5
 8002b0e:	f7fd fb95 	bl	800023c <__adddf3>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	4614      	mov	r4, r2
 8002b18:	461d      	mov	r5, r3
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	4b6a      	ldr	r3, [pc, #424]	; (8002cc8 <uVtoDegreeCTypeK+0x630>)
 8002b20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b24:	f00b fa4e 	bl	800dfc4 <pow>
 8002b28:	a355      	add	r3, pc, #340	; (adr r3, 8002c80 <uVtoDegreeCTypeK+0x5e8>)
 8002b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2e:	f7fd fd3b 	bl	80005a8 <__aeabi_dmul>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	4620      	mov	r0, r4
 8002b38:	4629      	mov	r1, r5
 8002b3a:	f7fd fb7f 	bl	800023c <__adddf3>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002b46:	e082      	b.n	8002c4e <uVtoDegreeCTypeK+0x5b6>
    }
    else
    {
	    t90 = T_COEF_D0_500_1372 + T_COEF_D1_500_1372 *totalV + T_COEF_D2_500_1372 *pow(totalV,2) + T_COEF_D3_500_1372 *pow(totalV,3) + T_COEF_D4_500_1372 *pow(totalV,4) + T_COEF_D5_500_1372 *pow(totalV,5) + T_COEF_D6_500_1372 *pow(totalV,6);
 8002b48:	a34f      	add	r3, pc, #316	; (adr r3, 8002c88 <uVtoDegreeCTypeK+0x5f0>)
 8002b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b52:	f7fd fd29 	bl	80005a8 <__aeabi_dmul>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	a34c      	add	r3, pc, #304	; (adr r3, 8002c90 <uVtoDegreeCTypeK+0x5f8>)
 8002b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b64:	f7fd fb68 	bl	8000238 <__aeabi_dsub>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4614      	mov	r4, r2
 8002b6e:	461d      	mov	r5, r3
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b78:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b7c:	f00b fa22 	bl	800dfc4 <pow>
 8002b80:	a345      	add	r3, pc, #276	; (adr r3, 8002c98 <uVtoDegreeCTypeK+0x600>)
 8002b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b86:	f7fd fd0f 	bl	80005a8 <__aeabi_dmul>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	4620      	mov	r0, r4
 8002b90:	4629      	mov	r1, r5
 8002b92:	f7fd fb53 	bl	800023c <__adddf3>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4614      	mov	r4, r2
 8002b9c:	461d      	mov	r5, r3
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	4b4a      	ldr	r3, [pc, #296]	; (8002ccc <uVtoDegreeCTypeK+0x634>)
 8002ba4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ba8:	f00b fa0c 	bl	800dfc4 <pow>
 8002bac:	a33c      	add	r3, pc, #240	; (adr r3, 8002ca0 <uVtoDegreeCTypeK+0x608>)
 8002bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb2:	f7fd fcf9 	bl	80005a8 <__aeabi_dmul>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4620      	mov	r0, r4
 8002bbc:	4629      	mov	r1, r5
 8002bbe:	f7fd fb3d 	bl	800023c <__adddf3>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4614      	mov	r4, r2
 8002bc8:	461d      	mov	r5, r3
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	4b40      	ldr	r3, [pc, #256]	; (8002cd0 <uVtoDegreeCTypeK+0x638>)
 8002bd0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bd4:	f00b f9f6 	bl	800dfc4 <pow>
 8002bd8:	a333      	add	r3, pc, #204	; (adr r3, 8002ca8 <uVtoDegreeCTypeK+0x610>)
 8002bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bde:	f7fd fce3 	bl	80005a8 <__aeabi_dmul>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	4620      	mov	r0, r4
 8002be8:	4629      	mov	r1, r5
 8002bea:	f7fd fb27 	bl	800023c <__adddf3>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4614      	mov	r4, r2
 8002bf4:	461d      	mov	r5, r3
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	4b36      	ldr	r3, [pc, #216]	; (8002cd4 <uVtoDegreeCTypeK+0x63c>)
 8002bfc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c00:	f00b f9e0 	bl	800dfc4 <pow>
 8002c04:	a32a      	add	r3, pc, #168	; (adr r3, 8002cb0 <uVtoDegreeCTypeK+0x618>)
 8002c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0a:	f7fd fccd 	bl	80005a8 <__aeabi_dmul>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	4620      	mov	r0, r4
 8002c14:	4629      	mov	r1, r5
 8002c16:	f7fd fb11 	bl	800023c <__adddf3>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4614      	mov	r4, r2
 8002c20:	461d      	mov	r5, r3
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	4b2c      	ldr	r3, [pc, #176]	; (8002cd8 <uVtoDegreeCTypeK+0x640>)
 8002c28:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c2c:	f00b f9ca 	bl	800dfc4 <pow>
 8002c30:	a321      	add	r3, pc, #132	; (adr r3, 8002cb8 <uVtoDegreeCTypeK+0x620>)
 8002c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c36:	f7fd fcb7 	bl	80005a8 <__aeabi_dmul>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	4620      	mov	r0, r4
 8002c40:	4629      	mov	r1, r5
 8002c42:	f7fd fafb 	bl	800023c <__adddf3>
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }

    return (float)t90;
 8002c4e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002c52:	f7fd ff59 	bl	8000b08 <__aeabi_d2f>
 8002c56:	4603      	mov	r3, r0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3728      	adds	r7, #40	; 0x28
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c62:	bf00      	nop
 8002c64:	f3af 8000 	nop.w
 8002c68:	598742c5 	.word	0x598742c5
 8002c6c:	3f50101c 	.word	0x3f50101c
 8002c70:	8fe5dfc5 	.word	0x8fe5dfc5
 8002c74:	bf072311 	.word	0xbf072311
 8002c78:	d5041d19 	.word	0xd5041d19
 8002c7c:	3eb1beee 	.word	0x3eb1beee
 8002c80:	f20e972b 	.word	0xf20e972b
 8002c84:	be469b94 	.word	0xbe469b94
 8002c88:	251c193b 	.word	0x251c193b
 8002c8c:	404826af 	.word	0x404826af
 8002c90:	1d14e3bd 	.word	0x1d14e3bd
 8002c94:	406079c9 	.word	0x406079c9
 8002c98:	7dffe020 	.word	0x7dffe020
 8002c9c:	bffa587c 	.word	0xbffa587c
 8002ca0:	72875bff 	.word	0x72875bff
 8002ca4:	3fabfabb 	.word	0x3fabfabb
 8002ca8:	43f14f16 	.word	0x43f14f16
 8002cac:	bf4f9f9b 	.word	0xbf4f9f9b
 8002cb0:	31b5afb6 	.word	0x31b5afb6
 8002cb4:	3ee275a4 	.word	0x3ee275a4
 8002cb8:	f722eba7 	.word	0xf722eba7
 8002cbc:	be60b376 	.word	0xbe60b376
 8002cc0:	401c0000 	.word	0x401c0000
 8002cc4:	40200000 	.word	0x40200000
 8002cc8:	40220000 	.word	0x40220000
 8002ccc:	40080000 	.word	0x40080000
 8002cd0:	40100000 	.word	0x40100000
 8002cd4:	40140000 	.word	0x40140000
 8002cd8:	40180000 	.word	0x40180000
 8002cdc:	00000000 	.word	0x00000000

08002ce0 <VtoDegreeCRtd>:
float VtoDegreeCRtd(float Vdata)
{
 8002ce0:	b5b0      	push	{r4, r5, r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
	//using a y = 366.02x^2 -942.3x +561.55 where x is the ADC voltage and y is the temperature in C
	return (Vdata*Vdata)*366.02 - 942.3*Vdata + 561.55;
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7fe f86a 	bl	8000dc4 <__aeabi_fmul>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fd fc00 	bl	80004f8 <__aeabi_f2d>
 8002cf8:	a315      	add	r3, pc, #84	; (adr r3, 8002d50 <VtoDegreeCRtd+0x70>)
 8002cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfe:	f7fd fc53 	bl	80005a8 <__aeabi_dmul>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4614      	mov	r4, r2
 8002d08:	461d      	mov	r5, r3
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7fd fbf4 	bl	80004f8 <__aeabi_f2d>
 8002d10:	a311      	add	r3, pc, #68	; (adr r3, 8002d58 <VtoDegreeCRtd+0x78>)
 8002d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d16:	f7fd fc47 	bl	80005a8 <__aeabi_dmul>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4620      	mov	r0, r4
 8002d20:	4629      	mov	r1, r5
 8002d22:	f7fd fa89 	bl	8000238 <__aeabi_dsub>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	a30c      	add	r3, pc, #48	; (adr r3, 8002d60 <VtoDegreeCRtd+0x80>)
 8002d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d34:	f7fd fa82 	bl	800023c <__adddf3>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f7fd fee2 	bl	8000b08 <__aeabi_d2f>
 8002d44:	4603      	mov	r3, r0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	eb851eb8 	.word	0xeb851eb8
 8002d54:	4076e051 	.word	0x4076e051
 8002d58:	66666666 	.word	0x66666666
 8002d5c:	408d7266 	.word	0x408d7266
 8002d60:	66666666 	.word	0x66666666
 8002d64:	40818c66 	.word	0x40818c66

08002d68 <AirInput_forceAperture>:
#include "air_input.h"

#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))

void AirInput_forceAperture( AirInput * self, int aperture) {
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  aperture = constrain(aperture, self->minValue, self->maxValue); //TODO: MIN_VALEUR IS NOT ZERO FOR THE PRIMARY
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	da02      	bge.n	8002d82 <AirInput_forceAperture+0x1a>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	e005      	b.n	8002d8e <AirInput_forceAperture+0x26>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691a      	ldr	r2, [r3, #16]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	bfa8      	it	ge
 8002d8c:	4613      	movge	r3, r2
 8002d8e:	603b      	str	r3, [r7, #0]
  self->aperture = aperture;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	601a      	str	r2, [r3, #0]
  self->setPoint = aperture;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	605a      	str	r2, [r3, #4]
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr

08002da6 <AirInput_getAperture>:


int AirInput_getAperture( AirInput * self) {
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  return self->aperture;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr

08002dbc <AirInput_InPosition>:
bool AirInput_InPosition( AirInput * self)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
	return self->aperture == self->setPoint;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	bf0c      	ite	eq
 8002dd0:	2301      	moveq	r3, #1
 8002dd2:	2300      	movne	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr

08002de0 <AirInput_setAjustement>:
  self->setPoint = setPoint;
  self->secPerStep = secPerStep;
}


void AirInput_setAjustement( AirInput * self, int adjustement, uint32_t secPerStep) {
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
  self->setPoint += adjustement;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	441a      	add	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	605a      	str	r2, [r3, #4]
  self->setPoint = constrain(self->setPoint, self->minValue, self->maxValue);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	da02      	bge.n	8002e0a <AirInput_setAjustement+0x2a>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	e006      	b.n	8002e18 <AirInput_setAjustement+0x38>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	4293      	cmp	r3, r2
 8002e14:	bfa8      	it	ge
 8002e16:	4613      	movge	r3, r2
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	6053      	str	r3, [r2, #4]
  self->secPerStep = secPerStep;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	609a      	str	r2, [r3, #8]
}
 8002e22:	bf00      	nop
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr

08002e2c <AirInput_task>:


void AirInput_task( AirInput * self, uint32_t currentTime_ms) {
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]

  if (self->aperture != self->setPoint) {
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d01f      	beq.n	8002e82 <AirInput_task+0x56>
    if ((currentTime_ms - self->timeRefRampe) >= (self->secPerStep * 1000)) {
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	1ad2      	subs	r2, r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002e52:	fb01 f303 	mul.w	r3, r1, r3
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d313      	bcc.n	8002e82 <AirInput_task+0x56>
      self->timeRefRampe = currentTime_ms;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	60da      	str	r2, [r3, #12]
      if (self->setPoint > self->aperture) {
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	dd05      	ble.n	8002e78 <AirInput_task+0x4c>
        self->aperture++;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	601a      	str	r2, [r3, #0]
      } else {
        self->aperture--;
      }
    }
  }
}
 8002e76:	e004      	b.n	8002e82 <AirInput_task+0x56>
        self->aperture--;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	1e5a      	subs	r2, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	601a      	str	r2, [r3, #0]
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr

08002e8c <Algo_init>:
		AirInput* grill, const uint8_t MinGrill, const uint8_t MaxGrill);
void AirAdjustment(int adjustement, const uint32_t secondPerStep,
		AirInput* primaire, const uint8_t MinPrimary, const uint8_t MaxPrimary,
		AirInput* grill, const uint8_t MinGrill, const uint8_t MaxGrill);

void Algo_init() {
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0

  if(GPIO_PIN_SET==HAL_GPIO_ReadPin(Button_Input_GPIO_Port,Button_Input_Pin))
 8002e90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e94:	4817      	ldr	r0, [pc, #92]	; (8002ef4 <Algo_init+0x68>)
 8002e96:	f002 fd91 	bl	80059bc <HAL_GPIO_ReadPin>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d103      	bne.n	8002ea8 <Algo_init+0x1c>
  {
	  currentState = PRODUCTION_TEST;
 8002ea0:	4b15      	ldr	r3, [pc, #84]	; (8002ef8 <Algo_init+0x6c>)
 8002ea2:	220c      	movs	r2, #12
 8002ea4:	701a      	strb	r2, [r3, #0]
 8002ea6:	e002      	b.n	8002eae <Algo_init+0x22>
  }
  else
  {
	  currentState = ZEROING_STEPPER;
 8002ea8:	4b13      	ldr	r3, [pc, #76]	; (8002ef8 <Algo_init+0x6c>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	701a      	strb	r2, [r3, #0]
  }

  reloadingEvent = false;
 8002eae:	4b13      	ldr	r3, [pc, #76]	; (8002efc <Algo_init+0x70>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	701a      	strb	r2, [r3, #0]
  AirInput_forceAperture(&primary, PRIMARY_CLOSED_SECONDARY_FULL_OPEN);
 8002eb4:	210d      	movs	r1, #13
 8002eb6:	4812      	ldr	r0, [pc, #72]	; (8002f00 <Algo_init+0x74>)
 8002eb8:	f7ff ff56 	bl	8002d68 <AirInput_forceAperture>
  AirInput_forceAperture(&grill, GRILL_CLOSED);
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	4811      	ldr	r0, [pc, #68]	; (8002f04 <Algo_init+0x78>)
 8002ec0:	f7ff ff52 	bl	8002d68 <AirInput_forceAperture>
  baffleTemperature = 0;
 8002ec4:	4b10      	ldr	r3, [pc, #64]	; (8002f08 <Algo_init+0x7c>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
  rearTemperature = 0;
 8002eca:	4b10      	ldr	r3, [pc, #64]	; (8002f0c <Algo_init+0x80>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
  thermostatRequest = false;
 8002ed0:	4b0f      	ldr	r3, [pc, #60]	; (8002f10 <Algo_init+0x84>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	701a      	strb	r2, [r3, #0]
  delLoadingEnd = ALGO_DEL_OFF;
 8002ed6:	4b0f      	ldr	r3, [pc, #60]	; (8002f14 <Algo_init+0x88>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	701a      	strb	r2, [r3, #0]
  delFermeturePorte = ALGO_DEL_OFF;
 8002edc:	4b0e      	ldr	r3, [pc, #56]	; (8002f18 <Algo_init+0x8c>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	701a      	strb	r2, [r3, #0]
  Slope_init(&slopeBaffleTemp, frontTempDataStore, NB_DATA, SAMPLING_RATE);
 8002ee2:	4b0e      	ldr	r3, [pc, #56]	; (8002f1c <Algo_init+0x90>)
 8002ee4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ee8:	490d      	ldr	r1, [pc, #52]	; (8002f20 <Algo_init+0x94>)
 8002eea:	480e      	ldr	r0, [pc, #56]	; (8002f24 <Algo_init+0x98>)
 8002eec:	f001 fcfa 	bl	80048e4 <Slope_init>
}
 8002ef0:	bf00      	nop
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40010c00 	.word	0x40010c00
 8002ef8:	200000e0 	.word	0x200000e0
 8002efc:	200000e1 	.word	0x200000e1
 8002f00:	20000000 	.word	0x20000000
 8002f04:	20000018 	.word	0x20000018
 8002f08:	200000e8 	.word	0x200000e8
 8002f0c:	200000ec 	.word	0x200000ec
 8002f10:	200000f4 	.word	0x200000f4
 8002f14:	200000e3 	.word	0x200000e3
 8002f18:	200000e4 	.word	0x200000e4
 8002f1c:	3e4ccccd 	.word	0x3e4ccccd
 8002f20:	200000f8 	.word	0x200000f8
 8002f24:	200005ac 	.word	0x200005ac

08002f28 <manageStateMachine>:

static void manageStateMachine(uint32_t currentTime_ms) {
 8002f28:	b590      	push	{r4, r7, lr}
 8002f2a:	b093      	sub	sp, #76	; 0x4c
 8002f2c:	af04      	add	r7, sp, #16
 8002f2e:	6078      	str	r0, [r7, #4]

	  State nextState = currentState;
 8002f30:	4b9d      	ldr	r3, [pc, #628]	; (80031a8 <manageStateMachine+0x280>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  float dTavant;
	  int adjustement;
	  FurnaceModel Model = readModel();
 8002f38:	f7fe fc0a 	bl	8001750 <readModel>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  Model = HEATMAX; //c'était une bonne idée les dip switch, mais on le fera pas :) pis HeatMax c'est la HeatCommander oh yeah!
 8002f42:	2300      	movs	r3, #0
 8002f44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  const uint32_t SEC_PER_STEP_COMB_LOW = 6;
	  const uint32_t SEC_PER_STEP_COMB_HIGH = 6;
	  const uint32_t SEC_PER_STEP_COAL_HIGH = 12;
#else
	  //pour palier au fait qu'on applique des 1/2 pas, nous divisons les valeurs de NOVIKA 2019-12-04
	  const uint32_t SEC_PER_STEP_TEMP_RISE = 6;
 8002f48:	2306      	movs	r3, #6
 8002f4a:	62bb      	str	r3, [r7, #40]	; 0x28
	  const uint32_t SEC_PER_STEP_COMB_LOW = 3;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24
	  const uint32_t SEC_PER_STEP_COMB_HIGH = 6;
 8002f50:	2306      	movs	r3, #6
 8002f52:	623b      	str	r3, [r7, #32]
	  const uint32_t SEC_PER_STEP_COAL_HIGH = 6;
 8002f54:	2306      	movs	r3, #6
 8002f56:	61fb      	str	r3, [r7, #28]
#endif

	  //calculate time used in the state transition.
	  timeSinceStateEntry = currentTime_ms - stateChangeTimeRef;
 8002f58:	4b94      	ldr	r3, [pc, #592]	; (80031ac <manageStateMachine+0x284>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	4a93      	ldr	r2, [pc, #588]	; (80031b0 <manageStateMachine+0x288>)
 8002f62:	6013      	str	r3, [r2, #0]
	  uint32_t timeInTemperatureRise = 0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	61bb      	str	r3, [r7, #24]
#if PID_CONTROL_ON
	  static uint32_t Pidtimeref = 0;
	  uint32_t TimeSinceLastPIDUpdate = currentTime_ms - Pidtimeref;
#endif
	  uint32_t TimeForStep = currentTime_ms - timeRefAutoMode;
 8002f68:	4b92      	ldr	r3, [pc, #584]	; (80031b4 <manageStateMachine+0x28c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	617b      	str	r3, [r7, #20]

	  // TODO: la periode utilisée pour le calcule de la pente n'est pas définie
  //       dans le document
  dTavant = computeSlopeBaffleTemp(2); //�tait 300, selon ce que Novika utilise test du 2019-12-04.
 8002f72:	2002      	movs	r0, #2
 8002f74:	f000 fed2 	bl	8003d1c <computeSlopeBaffleTemp>
 8002f78:	6138      	str	r0, [r7, #16]
  	  	  	  	  	  	  	  	  	  // la d�riv� risque d'�tre sketch, une mesure de temp�rature /5 secondes si on
  int deltaTemperature = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
  /* Perform state's actions. */
  switch (currentState) {
 8002f7e:	4b8a      	ldr	r3, [pc, #552]	; (80031a8 <manageStateMachine+0x280>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	2b0b      	cmp	r3, #11
 8002f86:	d81b      	bhi.n	8002fc0 <manageStateMachine+0x98>
 8002f88:	a201      	add	r2, pc, #4	; (adr r2, 8002f90 <manageStateMachine+0x68>)
 8002f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8e:	bf00      	nop
 8002f90:	08003025 	.word	0x08003025
 8002f94:	080030f5 	.word	0x080030f5
 8002f98:	08003187 	.word	0x08003187
 8002f9c:	08003519 	.word	0x08003519
 8002fa0:	08002fc1 	.word	0x08002fc1
 8002fa4:	0800334b 	.word	0x0800334b
 8002fa8:	08003849 	.word	0x08003849
 8002fac:	0800389b 	.word	0x0800389b
 8002fb0:	0800392d 	.word	0x0800392d
 8002fb4:	08003a65 	.word	0x08003a65
 8002fb8:	08003a65 	.word	0x08003a65
 8002fbc:	08003af7 	.word	0x08003af7

    default:
    case ZEROING_STEPPER:
		AirInput_forceAperture(&primary, PrimaryMotorParam[Model].MinWaiting);
 8002fc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002fc4:	4a7c      	ldr	r2, [pc, #496]	; (80031b8 <manageStateMachine+0x290>)
 8002fc6:	015b      	lsls	r3, r3, #5
 8002fc8:	4413      	add	r3, r2
 8002fca:	3302      	adds	r3, #2
 8002fcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	487a      	ldr	r0, [pc, #488]	; (80031bc <manageStateMachine+0x294>)
 8002fd4:	f7ff fec8 	bl	8002d68 <AirInput_forceAperture>
		AirInput_forceAperture(&grill, BoostMotorParam[Model].MinWaiting);
 8002fd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002fdc:	4a78      	ldr	r2, [pc, #480]	; (80031c0 <manageStateMachine+0x298>)
 8002fde:	015b      	lsls	r3, r3, #5
 8002fe0:	4413      	add	r3, r2
 8002fe2:	3302      	adds	r3, #2
 8002fe4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4876      	ldr	r0, [pc, #472]	; (80031c4 <manageStateMachine+0x29c>)
 8002fec:	f7ff febc 	bl	8002d68 <AirInput_forceAperture>
		AllMotorToZero(); //set all motors to zero
 8002ff0:	f7ff f872 	bl	80020d8 <AllMotorToZero>
		while(!AirInput_InPosition(&grill) || !AirInput_InPosition(&primary))
 8002ff4:	bf00      	nop
 8002ff6:	4873      	ldr	r0, [pc, #460]	; (80031c4 <manageStateMachine+0x29c>)
 8002ff8:	f7ff fee0 	bl	8002dbc <AirInput_InPosition>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	f083 0301 	eor.w	r3, r3, #1
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1f6      	bne.n	8002ff6 <manageStateMachine+0xce>
 8003008:	486c      	ldr	r0, [pc, #432]	; (80031bc <manageStateMachine+0x294>)
 800300a:	f7ff fed7 	bl	8002dbc <AirInput_InPosition>
 800300e:	4603      	mov	r3, r0
 8003010:	f083 0301 	eor.w	r3, r3, #1
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1ed      	bne.n	8002ff6 <manageStateMachine+0xce>
		{
		};
		nextState = WAITING;
 800301a:	2301      	movs	r3, #1
 800301c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		break;
 8003020:	f000 bd9b 	b.w	8003b5a <manageStateMachine+0xc32>
    case WAITING:

    	AirInput_forceAperture(&primary, PrimaryMotorParam[Model].MaxWaiting);// PRIMARY_CLOSED_SECONDARY_FULL_OPEN);
 8003024:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003028:	4a63      	ldr	r2, [pc, #396]	; (80031b8 <manageStateMachine+0x290>)
 800302a:	015b      	lsls	r3, r3, #5
 800302c:	4413      	add	r3, r2
 800302e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003032:	4619      	mov	r1, r3
 8003034:	4861      	ldr	r0, [pc, #388]	; (80031bc <manageStateMachine+0x294>)
 8003036:	f7ff fe97 	bl	8002d68 <AirInput_forceAperture>
    	AirInput_forceAperture(&grill, BoostMotorParam[Model].MaxWaiting);// GRILL_CLOSED);
 800303a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800303e:	4a60      	ldr	r2, [pc, #384]	; (80031c0 <manageStateMachine+0x298>)
 8003040:	015b      	lsls	r3, r3, #5
 8003042:	4413      	add	r3, r2
 8003044:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003048:	4619      	mov	r1, r3
 800304a:	485e      	ldr	r0, [pc, #376]	; (80031c4 <manageStateMachine+0x29c>)
 800304c:	f7ff fe8c 	bl	8002d68 <AirInput_forceAperture>
    	delLoadingEnd = ALGO_DEL_OFF;
 8003050:	4b5d      	ldr	r3, [pc, #372]	; (80031c8 <manageStateMachine+0x2a0>)
 8003052:	2200      	movs	r2, #0
 8003054:	701a      	strb	r2, [r3, #0]
    	delFermeturePorte = ALGO_DEL_OFF;
 8003056:	4b5d      	ldr	r3, [pc, #372]	; (80031cc <manageStateMachine+0x2a4>)
 8003058:	2200      	movs	r2, #0
 800305a:	701a      	strb	r2, [r3, #0]



		if(baffleTemperature > 8000 && rearTemperature > 7000 && (!Algo_getInterlockRequest()))
 800305c:	4b5c      	ldr	r3, [pc, #368]	; (80031d0 <manageStateMachine+0x2a8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8003064:	dd15      	ble.n	8003092 <manageStateMachine+0x16a>
 8003066:	4b5b      	ldr	r3, [pc, #364]	; (80031d4 <manageStateMachine+0x2ac>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f641 3258 	movw	r2, #7000	; 0x1b58
 800306e:	4293      	cmp	r3, r2
 8003070:	dd0f      	ble.n	8003092 <manageStateMachine+0x16a>
 8003072:	f000 ff21 	bl	8003eb8 <Algo_getInterlockRequest>
 8003076:	4603      	mov	r3, r0
 8003078:	f083 0301 	eor.w	r3, r3, #1
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d007      	beq.n	8003092 <manageStateMachine+0x16a>
		{
		  nextState = TEMPERATURE_RISE; //the only way this can happen is if we lost power we don't want to go back in reload/temprise
 8003082:	2303      	movs	r3, #3
 8003084:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  reloadingEvent = false;
 8003088:	4b53      	ldr	r3, [pc, #332]	; (80031d8 <manageStateMachine+0x2b0>)
 800308a:	2200      	movs	r2, #0
 800308c:	701a      	strb	r2, [r3, #0]
		  nextState = RELOAD_IGNITION;
		  reloadingEvent = false;
		  initPID(&TemperaturePID,Ki,Kd,Kp,20,-20); // pas utilisé
		}

		break;
 800308e:	f000 bd39 	b.w	8003b04 <manageStateMachine+0xbdc>
		else if ((baffleTemperature > TemperatureParam[Model].WaitingToIgnition || reloadingEvent) && (!Algo_getInterlockRequest()) ) { //at 95F, someone is starting a fire
 8003092:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003096:	4951      	ldr	r1, [pc, #324]	; (80031dc <manageStateMachine+0x2b4>)
 8003098:	4613      	mov	r3, r2
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	4413      	add	r3, r2
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	440b      	add	r3, r1
 80030a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030a6:	461a      	mov	r2, r3
 80030a8:	4b49      	ldr	r3, [pc, #292]	; (80031d0 <manageStateMachine+0x2a8>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	db04      	blt.n	80030ba <manageStateMachine+0x192>
 80030b0:	4b49      	ldr	r3, [pc, #292]	; (80031d8 <manageStateMachine+0x2b0>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 8525 	beq.w	8003b04 <manageStateMachine+0xbdc>
 80030ba:	f000 fefd 	bl	8003eb8 <Algo_getInterlockRequest>
 80030be:	4603      	mov	r3, r0
 80030c0:	f083 0301 	eor.w	r3, r3, #1
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 851c 	beq.w	8003b04 <manageStateMachine+0xbdc>
		  nextState = RELOAD_IGNITION;
 80030cc:	2302      	movs	r3, #2
 80030ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  reloadingEvent = false;
 80030d2:	4b41      	ldr	r3, [pc, #260]	; (80031d8 <manageStateMachine+0x2b0>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	701a      	strb	r2, [r3, #0]
		  initPID(&TemperaturePID,Ki,Kd,Kp,20,-20); // pas utilisé
 80030d8:	f06f 0313 	mvn.w	r3, #19
 80030dc:	9301      	str	r3, [sp, #4]
 80030de:	2314      	movs	r3, #20
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	4b3f      	ldr	r3, [pc, #252]	; (80031e0 <manageStateMachine+0x2b8>)
 80030e4:	4a3f      	ldr	r2, [pc, #252]	; (80031e4 <manageStateMachine+0x2bc>)
 80030e6:	f04f 0100 	mov.w	r1, #0
 80030ea:	483f      	ldr	r0, [pc, #252]	; (80031e8 <manageStateMachine+0x2c0>)
 80030ec:	f7ff f83d 	bl	800216a <initPID>
		break;
 80030f0:	f000 bd08 	b.w	8003b04 <manageStateMachine+0xbdc>

    case RELOAD_IGNITION:

		AirInput_forceAperture(&primary, PrimaryMotorParam[Model].MaxReload);// PRIMARY_SECONDARY_FULL_OPEN);
 80030f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80030f8:	4a2f      	ldr	r2, [pc, #188]	; (80031b8 <manageStateMachine+0x290>)
 80030fa:	015b      	lsls	r3, r3, #5
 80030fc:	4413      	add	r3, r2
 80030fe:	3304      	adds	r3, #4
 8003100:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003104:	4619      	mov	r1, r3
 8003106:	482d      	ldr	r0, [pc, #180]	; (80031bc <manageStateMachine+0x294>)
 8003108:	f7ff fe2e 	bl	8002d68 <AirInput_forceAperture>
		AirInput_forceAperture(&grill, BoostMotorParam[Model].MaxReload);// 39); //2020-03-20 28 //2020-03-18 100
 800310c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003110:	4a2b      	ldr	r2, [pc, #172]	; (80031c0 <manageStateMachine+0x298>)
 8003112:	015b      	lsls	r3, r3, #5
 8003114:	4413      	add	r3, r2
 8003116:	3304      	adds	r3, #4
 8003118:	f9b3 3000 	ldrsh.w	r3, [r3]
 800311c:	4619      	mov	r1, r3
 800311e:	4829      	ldr	r0, [pc, #164]	; (80031c4 <manageStateMachine+0x29c>)
 8003120:	f7ff fe22 	bl	8002d68 <AirInput_forceAperture>

		if (((baffleTemperature > TemperatureParam[Model].IgnitionToTrise) && (timeSinceStateEntry >= MINUTES(1))) || (baffleTemperature > 10000)) {
 8003124:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003128:	492c      	ldr	r1, [pc, #176]	; (80031dc <manageStateMachine+0x2b4>)
 800312a:	4613      	mov	r3, r2
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	4413      	add	r3, r2
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	440b      	add	r3, r1
 8003134:	3302      	adds	r3, #2
 8003136:	f9b3 3000 	ldrsh.w	r3, [r3]
 800313a:	461a      	mov	r2, r3
 800313c:	4b24      	ldr	r3, [pc, #144]	; (80031d0 <manageStateMachine+0x2a8>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	da05      	bge.n	8003150 <manageStateMachine+0x228>
 8003144:	4b1a      	ldr	r3, [pc, #104]	; (80031b0 <manageStateMachine+0x288>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800314c:	4293      	cmp	r3, r2
 800314e:	d805      	bhi.n	800315c <manageStateMachine+0x234>
 8003150:	4b1f      	ldr	r3, [pc, #124]	; (80031d0 <manageStateMachine+0x2a8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f242 7210 	movw	r2, #10000	; 0x2710
 8003158:	4293      	cmp	r3, r2
 800315a:	dd09      	ble.n	8003170 <manageStateMachine+0x248>
		nextState = TEMPERATURE_RISE;
 800315c:	2303      	movs	r3, #3
 800315e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		reloadingEvent = false;
 8003162:	4b1d      	ldr	r3, [pc, #116]	; (80031d8 <manageStateMachine+0x2b0>)
 8003164:	2200      	movs	r2, #0
 8003166:	701a      	strb	r2, [r3, #0]
		AirInput_forceAperture(&grill, GRILL_CLOSED);
 8003168:	2100      	movs	r1, #0
 800316a:	4816      	ldr	r0, [pc, #88]	; (80031c4 <manageStateMachine+0x29c>)
 800316c:	f7ff fdfc 	bl	8002d68 <AirInput_forceAperture>
		}
		if(timeSinceStateEntry >= MINUTES(20))
 8003170:	4b0f      	ldr	r3, [pc, #60]	; (80031b0 <manageStateMachine+0x288>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a1d      	ldr	r2, [pc, #116]	; (80031ec <manageStateMachine+0x2c4>)
 8003176:	4293      	cmp	r3, r2
 8003178:	f240 84c6 	bls.w	8003b08 <manageStateMachine+0xbe0>
		{
		  //ignition fail or coal was hot enough to make us enter in Ignition we go back to WAITING
		  nextState = ZEROING_STEPPER;
 800317c:	2300      	movs	r3, #0
 800317e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}
      break;
 8003182:	f000 bcc1 	b.w	8003b08 <manageStateMachine+0xbe0>

    case TEMPERATURE_RISE:

		targetTemperature = thermostatRequest ? TemperatureParam[Model].TriseTargetHigh : TemperatureParam[Model].TriseTargetLow;
 8003186:	4b1a      	ldr	r3, [pc, #104]	; (80031f0 <manageStateMachine+0x2c8>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d032      	beq.n	80031f4 <manageStateMachine+0x2cc>
 800318e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003192:	4912      	ldr	r1, [pc, #72]	; (80031dc <manageStateMachine+0x2b4>)
 8003194:	4613      	mov	r3, r2
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	4413      	add	r3, r2
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	440b      	add	r3, r1
 800319e:	3306      	adds	r3, #6
 80031a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031a4:	461a      	mov	r2, r3
 80031a6:	e031      	b.n	800320c <manageStateMachine+0x2e4>
 80031a8:	200000e0 	.word	0x200000e0
 80031ac:	200005f8 	.word	0x200005f8
 80031b0:	200005c8 	.word	0x200005c8
 80031b4:	200005fc 	.word	0x200005fc
 80031b8:	0800f278 	.word	0x0800f278
 80031bc:	20000000 	.word	0x20000000
 80031c0:	0800f2b8 	.word	0x0800f2b8
 80031c4:	20000018 	.word	0x20000018
 80031c8:	200000e3 	.word	0x200000e3
 80031cc:	200000e4 	.word	0x200000e4
 80031d0:	200000e8 	.word	0x200000e8
 80031d4:	200000ec 	.word	0x200000ec
 80031d8:	200000e1 	.word	0x200000e1
 80031dc:	0800f234 	.word	0x0800f234
 80031e0:	3da3d70a 	.word	0x3da3d70a
 80031e4:	3ca3d70a 	.word	0x3ca3d70a
 80031e8:	200005d0 	.word	0x200005d0
 80031ec:	00124f7f 	.word	0x00124f7f
 80031f0:	200000f4 	.word	0x200000f4
 80031f4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80031f8:	49b6      	ldr	r1, [pc, #728]	; (80034d4 <manageStateMachine+0x5ac>)
 80031fa:	4613      	mov	r3, r2
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	4413      	add	r3, r2
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	440b      	add	r3, r1
 8003204:	3304      	adds	r3, #4
 8003206:	f9b3 3000 	ldrsh.w	r3, [r3]
 800320a:	461a      	mov	r2, r3
 800320c:	4bb2      	ldr	r3, [pc, #712]	; (80034d8 <manageStateMachine+0x5b0>)
 800320e:	601a      	str	r2, [r3, #0]

		if(historyState != currentState){
 8003210:	4bb2      	ldr	r3, [pc, #712]	; (80034dc <manageStateMachine+0x5b4>)
 8003212:	781a      	ldrb	r2, [r3, #0]
 8003214:	4bb2      	ldr	r3, [pc, #712]	; (80034e0 <manageStateMachine+0x5b8>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d01b      	beq.n	8003254 <manageStateMachine+0x32c>
		  AirInput_forceAperture(&primary, PrimaryMotorParam[Model].MaxTempRise);
 800321c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003220:	4ab0      	ldr	r2, [pc, #704]	; (80034e4 <manageStateMachine+0x5bc>)
 8003222:	015b      	lsls	r3, r3, #5
 8003224:	4413      	add	r3, r2
 8003226:	3308      	adds	r3, #8
 8003228:	f9b3 3000 	ldrsh.w	r3, [r3]
 800322c:	4619      	mov	r1, r3
 800322e:	48ae      	ldr	r0, [pc, #696]	; (80034e8 <manageStateMachine+0x5c0>)
 8003230:	f7ff fd9a 	bl	8002d68 <AirInput_forceAperture>
		  AirInput_forceAperture(&grill, BoostMotorParam[Model].MaxTempRise);
 8003234:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003238:	4aac      	ldr	r2, [pc, #688]	; (80034ec <manageStateMachine+0x5c4>)
 800323a:	015b      	lsls	r3, r3, #5
 800323c:	4413      	add	r3, r2
 800323e:	3308      	adds	r3, #8
 8003240:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003244:	4619      	mov	r1, r3
 8003246:	48aa      	ldr	r0, [pc, #680]	; (80034f0 <manageStateMachine+0x5c8>)
 8003248:	f7ff fd8e 	bl	8002d68 <AirInput_forceAperture>
		  historyState = currentState;
 800324c:	4ba4      	ldr	r3, [pc, #656]	; (80034e0 <manageStateMachine+0x5b8>)
 800324e:	781a      	ldrb	r2, [r3, #0]
 8003250:	4ba2      	ldr	r3, [pc, #648]	; (80034dc <manageStateMachine+0x5b4>)
 8003252:	701a      	strb	r2, [r3, #0]
		   to +/- 3 steps, it should take 3 * sec per step to complete
		   the movement. Reevaluate the control at that maximum period. */
//		if((timeSinceStateEntry >= MINUTES(3)) ||  (baffleTemperature > targetTemperature)) //3minutes // changemenet 2 min 2021-12-03
		//asservie seulement si on est depuis 3 minutes dans Temperature Rise ou qu'on a atteint 650 ou 660

			if (TimeForStep >= (1 * SEC_PER_STEP_TEMP_RISE * 1000)) { // changer de 3 a 2 2021-12-03
 8003254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003256:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800325a:	fb02 f303 	mul.w	r3, r2, r3
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	429a      	cmp	r2, r3
 8003262:	d338      	bcc.n	80032d6 <manageStateMachine+0x3ae>
			  timeRefAutoMode = currentTime_ms;
 8003264:	4aa3      	ldr	r2, [pc, #652]	; (80034f4 <manageStateMachine+0x5cc>)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6013      	str	r3, [r2, #0]

			  adjustement = computeAjustement(targetTemperature, dTavant);
 800326a:	4b9b      	ldr	r3, [pc, #620]	; (80034d8 <manageStateMachine+0x5b0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6939      	ldr	r1, [r7, #16]
 8003270:	4618      	mov	r0, r3
 8003272:	f000 fe43 	bl	8003efc <computeAjustement>
 8003276:	6338      	str	r0, [r7, #48]	; 0x30
			  AirAdjustment(adjustement, SEC_PER_STEP_TEMP_RISE,
							  &primary, PrimaryMotorParam[Model].MinTempRise, PrimaryMotorParam[Model].MaxTempRise,
 8003278:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800327c:	4a99      	ldr	r2, [pc, #612]	; (80034e4 <manageStateMachine+0x5bc>)
 800327e:	015b      	lsls	r3, r3, #5
 8003280:	4413      	add	r3, r2
 8003282:	330a      	adds	r3, #10
 8003284:	f9b3 3000 	ldrsh.w	r3, [r3]
			  AirAdjustment(adjustement, SEC_PER_STEP_TEMP_RISE,
 8003288:	b2d8      	uxtb	r0, r3
							  &primary, PrimaryMotorParam[Model].MinTempRise, PrimaryMotorParam[Model].MaxTempRise,
 800328a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800328e:	4a95      	ldr	r2, [pc, #596]	; (80034e4 <manageStateMachine+0x5bc>)
 8003290:	015b      	lsls	r3, r3, #5
 8003292:	4413      	add	r3, r2
 8003294:	3308      	adds	r3, #8
 8003296:	f9b3 3000 	ldrsh.w	r3, [r3]
			  AirAdjustment(adjustement, SEC_PER_STEP_TEMP_RISE,
 800329a:	b2db      	uxtb	r3, r3
							  &grill, BoostMotorParam[Model].MinTempRise,BoostMotorParam[Model].MaxTempRise);
 800329c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80032a0:	4992      	ldr	r1, [pc, #584]	; (80034ec <manageStateMachine+0x5c4>)
 80032a2:	0152      	lsls	r2, r2, #5
 80032a4:	440a      	add	r2, r1
 80032a6:	320a      	adds	r2, #10
 80032a8:	f9b2 2000 	ldrsh.w	r2, [r2]
			  AirAdjustment(adjustement, SEC_PER_STEP_TEMP_RISE,
 80032ac:	b2d2      	uxtb	r2, r2
							  &grill, BoostMotorParam[Model].MinTempRise,BoostMotorParam[Model].MaxTempRise);
 80032ae:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80032b2:	4c8e      	ldr	r4, [pc, #568]	; (80034ec <manageStateMachine+0x5c4>)
 80032b4:	0149      	lsls	r1, r1, #5
 80032b6:	4421      	add	r1, r4
 80032b8:	3108      	adds	r1, #8
 80032ba:	f9b1 1000 	ldrsh.w	r1, [r1]
			  AirAdjustment(adjustement, SEC_PER_STEP_TEMP_RISE,
 80032be:	b2c9      	uxtb	r1, r1
 80032c0:	9103      	str	r1, [sp, #12]
 80032c2:	9202      	str	r2, [sp, #8]
 80032c4:	4a8a      	ldr	r2, [pc, #552]	; (80034f0 <manageStateMachine+0x5c8>)
 80032c6:	9201      	str	r2, [sp, #4]
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	4603      	mov	r3, r0
 80032cc:	4a86      	ldr	r2, [pc, #536]	; (80034e8 <manageStateMachine+0x5c0>)
 80032ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032d2:	f000 fe67 	bl	8003fa4 <AirAdjustment>
			}
			timeInTemperatureRise = thermostatRequest ? MINUTES(10):MINUTES(7);
 80032d6:	4b88      	ldr	r3, [pc, #544]	; (80034f8 <manageStateMachine+0x5d0>)
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <manageStateMachine+0x3ba>
 80032de:	4b87      	ldr	r3, [pc, #540]	; (80034fc <manageStateMachine+0x5d4>)
 80032e0:	e000      	b.n	80032e4 <manageStateMachine+0x3bc>
 80032e2:	4b87      	ldr	r3, [pc, #540]	; (8003500 <manageStateMachine+0x5d8>)
 80032e4:	61bb      	str	r3, [r7, #24]
			if ( timeSinceStateEntry > timeInTemperatureRise && (baffleTemperature > targetTemperature))
 80032e6:	4b87      	ldr	r3, [pc, #540]	; (8003504 <manageStateMachine+0x5dc>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d20e      	bcs.n	800330e <manageStateMachine+0x3e6>
 80032f0:	4b85      	ldr	r3, [pc, #532]	; (8003508 <manageStateMachine+0x5e0>)
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	4b78      	ldr	r3, [pc, #480]	; (80034d8 <manageStateMachine+0x5b0>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	dd08      	ble.n	800330e <manageStateMachine+0x3e6>
			{
			  nextState = thermostatRequest ? COMBUSTION_HIGH : COMBUSTION_LOW;
 80032fc:	4b7e      	ldr	r3, [pc, #504]	; (80034f8 <manageStateMachine+0x5d0>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <manageStateMachine+0x3e0>
 8003304:	2306      	movs	r3, #6
 8003306:	e000      	b.n	800330a <manageStateMachine+0x3e2>
 8003308:	2304      	movs	r3, #4
 800330a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}


#endif
		if(reloadingEvent || (baffleTemperature < 3000)) {// changé pour 300 au lieu de 460 2022-03-04
 800330e:	4b7f      	ldr	r3, [pc, #508]	; (800350c <manageStateMachine+0x5e4>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d105      	bne.n	8003322 <manageStateMachine+0x3fa>
 8003316:	4b7c      	ldr	r3, [pc, #496]	; (8003508 <manageStateMachine+0x5e0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800331e:	4293      	cmp	r3, r2
 8003320:	dc03      	bgt.n	800332a <manageStateMachine+0x402>
			nextState = ZEROING_STEPPER;
 8003322:	2300      	movs	r3, #0
 8003324:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		{
			nextState = thermostatRequest ? COMBUSTION_HIGH : COMBUSTION_LOW;
		}

      break;
 8003328:	e3f0      	b.n	8003b0c <manageStateMachine+0xbe4>
		else if(timeSinceStateEntry > MINUTES(30))
 800332a:	4b76      	ldr	r3, [pc, #472]	; (8003504 <manageStateMachine+0x5dc>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a78      	ldr	r2, [pc, #480]	; (8003510 <manageStateMachine+0x5e8>)
 8003330:	4293      	cmp	r3, r2
 8003332:	f240 83eb 	bls.w	8003b0c <manageStateMachine+0xbe4>
			nextState = thermostatRequest ? COMBUSTION_HIGH : COMBUSTION_LOW;
 8003336:	4b70      	ldr	r3, [pc, #448]	; (80034f8 <manageStateMachine+0x5d0>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <manageStateMachine+0x41a>
 800333e:	2306      	movs	r3, #6
 8003340:	e000      	b.n	8003344 <manageStateMachine+0x41c>
 8003342:	2304      	movs	r3, #4
 8003344:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      break;
 8003348:	e3e0      	b.n	8003b0c <manageStateMachine+0xbe4>

	case COMBUSTION_HIGH:
			if(historyState != currentState){
 800334a:	4b64      	ldr	r3, [pc, #400]	; (80034dc <manageStateMachine+0x5b4>)
 800334c:	781a      	ldrb	r2, [r3, #0]
 800334e:	4b64      	ldr	r3, [pc, #400]	; (80034e0 <manageStateMachine+0x5b8>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d02e      	beq.n	80033b4 <manageStateMachine+0x48c>

				StateEntryControlAdjustment(&primary, PrimaryMotorParam[Model].MinCombHigh, PrimaryMotorParam[Model].MaxCombHigh,
 8003356:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800335a:	4a62      	ldr	r2, [pc, #392]	; (80034e4 <manageStateMachine+0x5bc>)
 800335c:	015b      	lsls	r3, r3, #5
 800335e:	4413      	add	r3, r2
 8003360:	3316      	adds	r3, #22
 8003362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003366:	b2d9      	uxtb	r1, r3
 8003368:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800336c:	4a5d      	ldr	r2, [pc, #372]	; (80034e4 <manageStateMachine+0x5bc>)
 800336e:	015b      	lsls	r3, r3, #5
 8003370:	4413      	add	r3, r2
 8003372:	3314      	adds	r3, #20
 8003374:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003378:	b2d8      	uxtb	r0, r3
							  				&grill, BoostMotorParam[Model].MinCombHigh,BoostMotorParam[Model].MaxCombHigh);
 800337a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800337e:	4a5b      	ldr	r2, [pc, #364]	; (80034ec <manageStateMachine+0x5c4>)
 8003380:	015b      	lsls	r3, r3, #5
 8003382:	4413      	add	r3, r2
 8003384:	3316      	adds	r3, #22
 8003386:	f9b3 3000 	ldrsh.w	r3, [r3]
				StateEntryControlAdjustment(&primary, PrimaryMotorParam[Model].MinCombHigh, PrimaryMotorParam[Model].MaxCombHigh,
 800338a:	b2db      	uxtb	r3, r3
							  				&grill, BoostMotorParam[Model].MinCombHigh,BoostMotorParam[Model].MaxCombHigh);
 800338c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003390:	4c56      	ldr	r4, [pc, #344]	; (80034ec <manageStateMachine+0x5c4>)
 8003392:	0152      	lsls	r2, r2, #5
 8003394:	4422      	add	r2, r4
 8003396:	3214      	adds	r2, #20
 8003398:	f9b2 2000 	ldrsh.w	r2, [r2]
				StateEntryControlAdjustment(&primary, PrimaryMotorParam[Model].MinCombHigh, PrimaryMotorParam[Model].MaxCombHigh,
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	9201      	str	r2, [sp, #4]
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	4b53      	ldr	r3, [pc, #332]	; (80034f0 <manageStateMachine+0x5c8>)
 80033a4:	4602      	mov	r2, r0
 80033a6:	4850      	ldr	r0, [pc, #320]	; (80034e8 <manageStateMachine+0x5c0>)
 80033a8:	f000 fe42 	bl	8004030 <StateEntryControlAdjustment>
				historyState = currentState;
 80033ac:	4b4c      	ldr	r3, [pc, #304]	; (80034e0 <manageStateMachine+0x5b8>)
 80033ae:	781a      	ldrb	r2, [r3, #0]
 80033b0:	4b4a      	ldr	r3, [pc, #296]	; (80034dc <manageStateMachine+0x5b4>)
 80033b2:	701a      	strb	r2, [r3, #0]
            }
#else
            /* Since the control algo (i.e. computeAjustement) is limited
               to +/- 3 steps, it whould take 3 * sec per step to complete
               the mouvement. Reevaluate the control at that maximum period. */
            if (TimeForStep >= (3 * SEC_PER_STEP_COMB_HIGH * 1000)&& AirInput_InPosition(&grill) && AirInput_InPosition(&primary) ) {
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80033ba:	fb02 f303 	mul.w	r3, r2, r3
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d34d      	bcc.n	8003460 <manageStateMachine+0x538>
 80033c4:	484a      	ldr	r0, [pc, #296]	; (80034f0 <manageStateMachine+0x5c8>)
 80033c6:	f7ff fcf9 	bl	8002dbc <AirInput_InPosition>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d047      	beq.n	8003460 <manageStateMachine+0x538>
 80033d0:	4845      	ldr	r0, [pc, #276]	; (80034e8 <manageStateMachine+0x5c0>)
 80033d2:	f7ff fcf3 	bl	8002dbc <AirInput_InPosition>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d041      	beq.n	8003460 <manageStateMachine+0x538>
              timeRefAutoMode = currentTime_ms;
 80033dc:	4a45      	ldr	r2, [pc, #276]	; (80034f4 <manageStateMachine+0x5cc>)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6013      	str	r3, [r2, #0]
              adjustement = computeAjustement(TemperatureParam[Model].CombHighTarget, dTavant);
 80033e2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80033e6:	493b      	ldr	r1, [pc, #236]	; (80034d4 <manageStateMachine+0x5ac>)
 80033e8:	4613      	mov	r3, r2
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	4413      	add	r3, r2
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	440b      	add	r3, r1
 80033f2:	330a      	adds	r3, #10
 80033f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033f8:	6939      	ldr	r1, [r7, #16]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 fd7e 	bl	8003efc <computeAjustement>
 8003400:	6338      	str	r0, [r7, #48]	; 0x30
			  AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
											&primary, PrimaryMotorParam[Model].MinCombHigh, PrimaryMotorParam[Model].MaxCombHigh,
 8003402:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003406:	4a37      	ldr	r2, [pc, #220]	; (80034e4 <manageStateMachine+0x5bc>)
 8003408:	015b      	lsls	r3, r3, #5
 800340a:	4413      	add	r3, r2
 800340c:	3316      	adds	r3, #22
 800340e:	f9b3 3000 	ldrsh.w	r3, [r3]
			  AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 8003412:	b2d8      	uxtb	r0, r3
											&primary, PrimaryMotorParam[Model].MinCombHigh, PrimaryMotorParam[Model].MaxCombHigh,
 8003414:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003418:	4a32      	ldr	r2, [pc, #200]	; (80034e4 <manageStateMachine+0x5bc>)
 800341a:	015b      	lsls	r3, r3, #5
 800341c:	4413      	add	r3, r2
 800341e:	3314      	adds	r3, #20
 8003420:	f9b3 3000 	ldrsh.w	r3, [r3]
			  AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 8003424:	b2db      	uxtb	r3, r3
							  				&grill, BoostMotorParam[Model].MinCombHigh,BoostMotorParam[Model].MaxCombHigh);
 8003426:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800342a:	4930      	ldr	r1, [pc, #192]	; (80034ec <manageStateMachine+0x5c4>)
 800342c:	0152      	lsls	r2, r2, #5
 800342e:	440a      	add	r2, r1
 8003430:	3216      	adds	r2, #22
 8003432:	f9b2 2000 	ldrsh.w	r2, [r2]
			  AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 8003436:	b2d2      	uxtb	r2, r2
							  				&grill, BoostMotorParam[Model].MinCombHigh,BoostMotorParam[Model].MaxCombHigh);
 8003438:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800343c:	4c2b      	ldr	r4, [pc, #172]	; (80034ec <manageStateMachine+0x5c4>)
 800343e:	0149      	lsls	r1, r1, #5
 8003440:	4421      	add	r1, r4
 8003442:	3114      	adds	r1, #20
 8003444:	f9b1 1000 	ldrsh.w	r1, [r1]
			  AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 8003448:	b2c9      	uxtb	r1, r1
 800344a:	9103      	str	r1, [sp, #12]
 800344c:	9202      	str	r2, [sp, #8]
 800344e:	4a28      	ldr	r2, [pc, #160]	; (80034f0 <manageStateMachine+0x5c8>)
 8003450:	9201      	str	r2, [sp, #4]
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	4603      	mov	r3, r0
 8003456:	4a24      	ldr	r2, [pc, #144]	; (80034e8 <manageStateMachine+0x5c0>)
 8003458:	6a39      	ldr	r1, [r7, #32]
 800345a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800345c:	f000 fda2 	bl	8003fa4 <AirAdjustment>

            }
#endif
            if ( ((baffleTemperature) >= (rearTemperature-TemperatureParam[Model].CoalDeltaTemp)) // changement de <= à >= UFEC 23 2021-11-23
 8003460:	4b2c      	ldr	r3, [pc, #176]	; (8003514 <manageStateMachine+0x5ec>)
 8003462:	6819      	ldr	r1, [r3, #0]
 8003464:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003468:	481a      	ldr	r0, [pc, #104]	; (80034d4 <manageStateMachine+0x5ac>)
 800346a:	4613      	mov	r3, r2
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	4413      	add	r3, r2
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	4403      	add	r3, r0
 8003474:	3316      	adds	r3, #22
 8003476:	f9b3 3000 	ldrsh.w	r3, [r3]
 800347a:	1aca      	subs	r2, r1, r3
 800347c:	4b22      	ldr	r3, [pc, #136]	; (8003508 <manageStateMachine+0x5e0>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	429a      	cmp	r2, r3
 8003482:	dc12      	bgt.n	80034aa <manageStateMachine+0x582>
            		&& (TemperatureParam[Model].CoalCrossOverRearHigh > rearTemperature) ) //détection de l'état coal/braise
 8003484:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003488:	4912      	ldr	r1, [pc, #72]	; (80034d4 <manageStateMachine+0x5ac>)
 800348a:	4613      	mov	r3, r2
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	4413      	add	r3, r2
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	440b      	add	r3, r1
 8003494:	3314      	adds	r3, #20
 8003496:	f9b3 3000 	ldrsh.w	r3, [r3]
 800349a:	461a      	mov	r2, r3
 800349c:	4b1d      	ldr	r3, [pc, #116]	; (8003514 <manageStateMachine+0x5ec>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	dd02      	ble.n	80034aa <manageStateMachine+0x582>
            {
            	nextState = COAL_HIGH;
 80034a4:	2309      	movs	r3, #9
 80034a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            }
            if (!thermostatRequest) {
 80034aa:	4b13      	ldr	r3, [pc, #76]	; (80034f8 <manageStateMachine+0x5d0>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	f083 0301 	eor.w	r3, r3, #1
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d003      	beq.n	80034c0 <manageStateMachine+0x598>

              nextState = COMBUSTION_LOW;
 80034b8:	2304      	movs	r3, #4
 80034ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            } else if (reloadingEvent) {
              nextState = ZEROING_STEPPER;
            }

          break;
 80034be:	e327      	b.n	8003b10 <manageStateMachine+0xbe8>
            } else if (reloadingEvent) {
 80034c0:	4b12      	ldr	r3, [pc, #72]	; (800350c <manageStateMachine+0x5e4>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 8323 	beq.w	8003b10 <manageStateMachine+0xbe8>
              nextState = ZEROING_STEPPER;
 80034ca:	2300      	movs	r3, #0
 80034cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          break;
 80034d0:	e31e      	b.n	8003b10 <manageStateMachine+0xbe8>
 80034d2:	bf00      	nop
 80034d4:	0800f234 	.word	0x0800f234
 80034d8:	20000600 	.word	0x20000600
 80034dc:	20000604 	.word	0x20000604
 80034e0:	200000e0 	.word	0x200000e0
 80034e4:	0800f278 	.word	0x0800f278
 80034e8:	20000000 	.word	0x20000000
 80034ec:	0800f2b8 	.word	0x0800f2b8
 80034f0:	20000018 	.word	0x20000018
 80034f4:	200005fc 	.word	0x200005fc
 80034f8:	200000f4 	.word	0x200000f4
 80034fc:	000927c0 	.word	0x000927c0
 8003500:	000668a0 	.word	0x000668a0
 8003504:	200005c8 	.word	0x200005c8
 8003508:	200000e8 	.word	0x200000e8
 800350c:	200000e1 	.word	0x200000e1
 8003510:	001b7740 	.word	0x001b7740
 8003514:	200000ec 	.word	0x200000ec

    case COMBUSTION_LOW:
    	//HAL_GPIO_WritePin(SPEED1_COIL_GPIO_Port,SPEED1_COIL_Pin,RESET);//desactive le relai pour activer la carte 2 PLV 15/12/21
		if(historyState != currentState){
 8003518:	4bbc      	ldr	r3, [pc, #752]	; (800380c <manageStateMachine+0x8e4>)
 800351a:	781a      	ldrb	r2, [r3, #0]
 800351c:	4bbc      	ldr	r3, [pc, #752]	; (8003810 <manageStateMachine+0x8e8>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	429a      	cmp	r2, r3
 8003522:	d02e      	beq.n	8003582 <manageStateMachine+0x65a>

			StateEntryControlAdjustment(&primary, PrimaryMotorParam[Model].MinCombLow, PrimaryMotorParam[Model].MaxCombLow,
 8003524:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003528:	4aba      	ldr	r2, [pc, #744]	; (8003814 <manageStateMachine+0x8ec>)
 800352a:	015b      	lsls	r3, r3, #5
 800352c:	4413      	add	r3, r2
 800352e:	330e      	adds	r3, #14
 8003530:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003534:	b2d9      	uxtb	r1, r3
 8003536:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800353a:	4ab6      	ldr	r2, [pc, #728]	; (8003814 <manageStateMachine+0x8ec>)
 800353c:	015b      	lsls	r3, r3, #5
 800353e:	4413      	add	r3, r2
 8003540:	330c      	adds	r3, #12
 8003542:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003546:	b2d8      	uxtb	r0, r3
							  			&grill, BoostMotorParam[Model].MinCombLow,BoostMotorParam[Model].MaxCombLow);
 8003548:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800354c:	4ab2      	ldr	r2, [pc, #712]	; (8003818 <manageStateMachine+0x8f0>)
 800354e:	015b      	lsls	r3, r3, #5
 8003550:	4413      	add	r3, r2
 8003552:	330e      	adds	r3, #14
 8003554:	f9b3 3000 	ldrsh.w	r3, [r3]
			StateEntryControlAdjustment(&primary, PrimaryMotorParam[Model].MinCombLow, PrimaryMotorParam[Model].MaxCombLow,
 8003558:	b2db      	uxtb	r3, r3
							  			&grill, BoostMotorParam[Model].MinCombLow,BoostMotorParam[Model].MaxCombLow);
 800355a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800355e:	4cae      	ldr	r4, [pc, #696]	; (8003818 <manageStateMachine+0x8f0>)
 8003560:	0152      	lsls	r2, r2, #5
 8003562:	4422      	add	r2, r4
 8003564:	320c      	adds	r2, #12
 8003566:	f9b2 2000 	ldrsh.w	r2, [r2]
			StateEntryControlAdjustment(&primary, PrimaryMotorParam[Model].MinCombLow, PrimaryMotorParam[Model].MaxCombLow,
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	9201      	str	r2, [sp, #4]
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	4baa      	ldr	r3, [pc, #680]	; (800381c <manageStateMachine+0x8f4>)
 8003572:	4602      	mov	r2, r0
 8003574:	48aa      	ldr	r0, [pc, #680]	; (8003820 <manageStateMachine+0x8f8>)
 8003576:	f000 fd5b 	bl	8004030 <StateEntryControlAdjustment>
		    historyState = currentState;
 800357a:	4ba5      	ldr	r3, [pc, #660]	; (8003810 <manageStateMachine+0x8e8>)
 800357c:	781a      	ldrb	r2, [r3, #0]
 800357e:	4ba3      	ldr	r3, [pc, #652]	; (800380c <manageStateMachine+0x8e4>)
 8003580:	701a      	strb	r2, [r3, #0]
        	PIDTrapPosition = PIDTrapPosition > PRIMARY_SECONDARY_FULL_OPEN?PRIMARY_SECONDARY_FULL_OPEN:PIDTrapPosition<0?0:PIDTrapPosition;

        }
		AirInput_forceAperture(&primary,PIDTrapPosition);
#else
		deltaTemperature = abs(rearTemperature - baffleTemperature);
 8003582:	4ba8      	ldr	r3, [pc, #672]	; (8003824 <manageStateMachine+0x8fc>)
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	4ba8      	ldr	r3, [pc, #672]	; (8003828 <manageStateMachine+0x900>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	bfb8      	it	lt
 8003590:	425b      	neglt	r3, r3
 8003592:	60fb      	str	r3, [r7, #12]

		if (rearTemperature < TemperatureParam[Model].FlameLoss && ( deltaTemperature < TemperatureParam[Model].FlameLossDelta)) { //changement de reartemp pour le flameloss au lieu de baffletemp GTF 2022-08-30
 8003594:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003598:	49a4      	ldr	r1, [pc, #656]	; (800382c <manageStateMachine+0x904>)
 800359a:	4613      	mov	r3, r2
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	4413      	add	r3, r2
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	440b      	add	r3, r1
 80035a4:	330e      	adds	r3, #14
 80035a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035aa:	461a      	mov	r2, r3
 80035ac:	4b9d      	ldr	r3, [pc, #628]	; (8003824 <manageStateMachine+0x8fc>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	dd16      	ble.n	80035e2 <manageStateMachine+0x6ba>
 80035b4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80035b8:	499c      	ldr	r1, [pc, #624]	; (800382c <manageStateMachine+0x904>)
 80035ba:	4613      	mov	r3, r2
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	4413      	add	r3, r2
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	440b      	add	r3, r1
 80035c4:	3310      	adds	r3, #16
 80035c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035ca:	461a      	mov	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4293      	cmp	r3, r2
 80035d0:	da07      	bge.n	80035e2 <manageStateMachine+0x6ba>
			nextState = FLAME_LOSS;
 80035d2:	2308      	movs	r3, #8
 80035d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			AirInput_forceAperture(&grill, GRILL_FULL_OPEN);
 80035d8:	2164      	movs	r1, #100	; 0x64
 80035da:	4890      	ldr	r0, [pc, #576]	; (800381c <manageStateMachine+0x8f4>)
 80035dc:	f7ff fbc4 	bl	8002d68 <AirInput_forceAperture>
 80035e0:	e0de      	b.n	80037a0 <manageStateMachine+0x878>
		}
		else{
			//we loss the flamme but we are not in coal yet, we reopen the grill
		  //AirInput_setSetPoint(&grill, GRILL_CLOSED, SEC_PER_STEP_COMB_LOW);
		  if (TimeForStep >= (1 * SEC_PER_STEP_COMB_LOW * 1000)
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035e8:	fb02 f303 	mul.w	r3, r2, r3
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	f0c0 80d6 	bcc.w	80037a0 <manageStateMachine+0x878>
				  && AirInput_InPosition(&grill)
 80035f4:	4889      	ldr	r0, [pc, #548]	; (800381c <manageStateMachine+0x8f4>)
 80035f6:	f7ff fbe1 	bl	8002dbc <AirInput_InPosition>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 80cf 	beq.w	80037a0 <manageStateMachine+0x878>
				  && AirInput_InPosition(&primary)
 8003602:	4887      	ldr	r0, [pc, #540]	; (8003820 <manageStateMachine+0x8f8>)
 8003604:	f7ff fbda 	bl	8002dbc <AirInput_InPosition>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 80c8 	beq.w	80037a0 <manageStateMachine+0x878>
				  && (timeSinceStateEntry >=MINUTES(2)) ) {
 8003610:	4b87      	ldr	r3, [pc, #540]	; (8003830 <manageStateMachine+0x908>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a87      	ldr	r2, [pc, #540]	; (8003834 <manageStateMachine+0x90c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	f240 80c2 	bls.w	80037a0 <manageStateMachine+0x878>

			timeRefAutoMode = currentTime_ms;
 800361c:	4a86      	ldr	r2, [pc, #536]	; (8003838 <manageStateMachine+0x910>)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6013      	str	r3, [r2, #0]

			adjustement = computeAjustement(TemperatureParam[Model].CombLowTarget, dTavant);
 8003622:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003626:	4981      	ldr	r1, [pc, #516]	; (800382c <manageStateMachine+0x904>)
 8003628:	4613      	mov	r3, r2
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	4413      	add	r3, r2
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	440b      	add	r3, r1
 8003632:	3308      	adds	r3, #8
 8003634:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003638:	6939      	ldr	r1, [r7, #16]
 800363a:	4618      	mov	r0, r3
 800363c:	f000 fc5e 	bl	8003efc <computeAjustement>
 8003640:	6338      	str	r0, [r7, #48]	; 0x30

			if (timeSinceStateEntry > MINUTES(60) && (rearTemperature > TemperatureParam[Model].CombLowtoSuperLow)) //changé 35 min pour 60
 8003642:	4b7b      	ldr	r3, [pc, #492]	; (8003830 <manageStateMachine+0x908>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a7d      	ldr	r2, [pc, #500]	; (800383c <manageStateMachine+0x914>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d97a      	bls.n	8003742 <manageStateMachine+0x81a>
 800364c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003650:	4976      	ldr	r1, [pc, #472]	; (800382c <manageStateMachine+0x904>)
 8003652:	4613      	mov	r3, r2
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	4413      	add	r3, r2
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	440b      	add	r3, r1
 800365c:	330c      	adds	r3, #12
 800365e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003662:	461a      	mov	r2, r3
 8003664:	4b6f      	ldr	r3, [pc, #444]	; (8003824 <manageStateMachine+0x8fc>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	da6a      	bge.n	8003742 <manageStateMachine+0x81a>
			{		
				StateEntryControlAdjustment(&primary,PrimaryMotorParam[Model].MinCombSuperLow,PrimaryMotorParam[Model].MaxCombSuperLow,
 800366c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003670:	4a68      	ldr	r2, [pc, #416]	; (8003814 <manageStateMachine+0x8ec>)
 8003672:	015b      	lsls	r3, r3, #5
 8003674:	4413      	add	r3, r2
 8003676:	3312      	adds	r3, #18
 8003678:	f9b3 3000 	ldrsh.w	r3, [r3]
 800367c:	b2d9      	uxtb	r1, r3
 800367e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003682:	4a64      	ldr	r2, [pc, #400]	; (8003814 <manageStateMachine+0x8ec>)
 8003684:	015b      	lsls	r3, r3, #5
 8003686:	4413      	add	r3, r2
 8003688:	3310      	adds	r3, #16
 800368a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800368e:	b2d8      	uxtb	r0, r3
											&grill,BoostMotorParam[Model].MinCombSuperLow,BoostMotorParam[Model].MaxCombSuperLow);
 8003690:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003694:	4a60      	ldr	r2, [pc, #384]	; (8003818 <manageStateMachine+0x8f0>)
 8003696:	015b      	lsls	r3, r3, #5
 8003698:	4413      	add	r3, r2
 800369a:	3312      	adds	r3, #18
 800369c:	f9b3 3000 	ldrsh.w	r3, [r3]
				StateEntryControlAdjustment(&primary,PrimaryMotorParam[Model].MinCombSuperLow,PrimaryMotorParam[Model].MaxCombSuperLow,
 80036a0:	b2db      	uxtb	r3, r3
											&grill,BoostMotorParam[Model].MinCombSuperLow,BoostMotorParam[Model].MaxCombSuperLow);
 80036a2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80036a6:	4c5c      	ldr	r4, [pc, #368]	; (8003818 <manageStateMachine+0x8f0>)
 80036a8:	0152      	lsls	r2, r2, #5
 80036aa:	4422      	add	r2, r4
 80036ac:	3210      	adds	r2, #16
 80036ae:	f9b2 2000 	ldrsh.w	r2, [r2]
				StateEntryControlAdjustment(&primary,PrimaryMotorParam[Model].MinCombSuperLow,PrimaryMotorParam[Model].MaxCombSuperLow,
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	9201      	str	r2, [sp, #4]
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	4b58      	ldr	r3, [pc, #352]	; (800381c <manageStateMachine+0x8f4>)
 80036ba:	4602      	mov	r2, r0
 80036bc:	4858      	ldr	r0, [pc, #352]	; (8003820 <manageStateMachine+0x8f8>)
 80036be:	f000 fcb7 	bl	8004030 <StateEntryControlAdjustment>
				adjustement = computeAjustement(TemperatureParam[Model].CombLowtoSuperLow, dTavant);
 80036c2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80036c6:	4959      	ldr	r1, [pc, #356]	; (800382c <manageStateMachine+0x904>)
 80036c8:	4613      	mov	r3, r2
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	4413      	add	r3, r2
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	440b      	add	r3, r1
 80036d2:	330c      	adds	r3, #12
 80036d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036d8:	6939      	ldr	r1, [r7, #16]
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fc0e 	bl	8003efc <computeAjustement>
 80036e0:	6338      	str	r0, [r7, #48]	; 0x30
			
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
									&primary,PrimaryMotorParam[Model].MinCombSuperLow,PrimaryMotorParam[Model].MaxCombSuperLow,
 80036e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80036e6:	4a4b      	ldr	r2, [pc, #300]	; (8003814 <manageStateMachine+0x8ec>)
 80036e8:	015b      	lsls	r3, r3, #5
 80036ea:	4413      	add	r3, r2
 80036ec:	3312      	adds	r3, #18
 80036ee:	f9b3 3000 	ldrsh.w	r3, [r3]
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 80036f2:	b2d8      	uxtb	r0, r3
									&primary,PrimaryMotorParam[Model].MinCombSuperLow,PrimaryMotorParam[Model].MaxCombSuperLow,
 80036f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80036f8:	4a46      	ldr	r2, [pc, #280]	; (8003814 <manageStateMachine+0x8ec>)
 80036fa:	015b      	lsls	r3, r3, #5
 80036fc:	4413      	add	r3, r2
 80036fe:	3310      	adds	r3, #16
 8003700:	f9b3 3000 	ldrsh.w	r3, [r3]
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 8003704:	b2db      	uxtb	r3, r3
									&grill,BoostMotorParam[Model].MinCombSuperLow,BoostMotorParam[Model].MaxCombSuperLow);
 8003706:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800370a:	4943      	ldr	r1, [pc, #268]	; (8003818 <manageStateMachine+0x8f0>)
 800370c:	0152      	lsls	r2, r2, #5
 800370e:	440a      	add	r2, r1
 8003710:	3212      	adds	r2, #18
 8003712:	f9b2 2000 	ldrsh.w	r2, [r2]
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 8003716:	b2d2      	uxtb	r2, r2
									&grill,BoostMotorParam[Model].MinCombSuperLow,BoostMotorParam[Model].MaxCombSuperLow);
 8003718:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800371c:	4c3e      	ldr	r4, [pc, #248]	; (8003818 <manageStateMachine+0x8f0>)
 800371e:	0149      	lsls	r1, r1, #5
 8003720:	4421      	add	r1, r4
 8003722:	3110      	adds	r1, #16
 8003724:	f9b1 1000 	ldrsh.w	r1, [r1]
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 8003728:	b2c9      	uxtb	r1, r1
 800372a:	9103      	str	r1, [sp, #12]
 800372c:	9202      	str	r2, [sp, #8]
 800372e:	4a3b      	ldr	r2, [pc, #236]	; (800381c <manageStateMachine+0x8f4>)
 8003730:	9201      	str	r2, [sp, #4]
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	4603      	mov	r3, r0
 8003736:	4a3a      	ldr	r2, [pc, #232]	; (8003820 <manageStateMachine+0x8f8>)
 8003738:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800373a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800373c:	f000 fc32 	bl	8003fa4 <AirAdjustment>
 8003740:	e02e      	b.n	80037a0 <manageStateMachine+0x878>
			
			}
			else
			{
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
							  &primary, PrimaryMotorParam[Model].MinCombLow, PrimaryMotorParam[Model].MaxCombLow,
 8003742:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003746:	4a33      	ldr	r2, [pc, #204]	; (8003814 <manageStateMachine+0x8ec>)
 8003748:	015b      	lsls	r3, r3, #5
 800374a:	4413      	add	r3, r2
 800374c:	330e      	adds	r3, #14
 800374e:	f9b3 3000 	ldrsh.w	r3, [r3]
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 8003752:	b2d8      	uxtb	r0, r3
							  &primary, PrimaryMotorParam[Model].MinCombLow, PrimaryMotorParam[Model].MaxCombLow,
 8003754:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003758:	4a2e      	ldr	r2, [pc, #184]	; (8003814 <manageStateMachine+0x8ec>)
 800375a:	015b      	lsls	r3, r3, #5
 800375c:	4413      	add	r3, r2
 800375e:	330c      	adds	r3, #12
 8003760:	f9b3 3000 	ldrsh.w	r3, [r3]
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 8003764:	b2db      	uxtb	r3, r3
							  &grill,BoostMotorParam[Model].MinCombLow,BoostMotorParam[Model].MaxCombLow);
 8003766:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800376a:	492b      	ldr	r1, [pc, #172]	; (8003818 <manageStateMachine+0x8f0>)
 800376c:	0152      	lsls	r2, r2, #5
 800376e:	440a      	add	r2, r1
 8003770:	320e      	adds	r2, #14
 8003772:	f9b2 2000 	ldrsh.w	r2, [r2]
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 8003776:	b2d2      	uxtb	r2, r2
							  &grill,BoostMotorParam[Model].MinCombLow,BoostMotorParam[Model].MaxCombLow);
 8003778:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800377c:	4c26      	ldr	r4, [pc, #152]	; (8003818 <manageStateMachine+0x8f0>)
 800377e:	0149      	lsls	r1, r1, #5
 8003780:	4421      	add	r1, r4
 8003782:	310c      	adds	r1, #12
 8003784:	f9b1 1000 	ldrsh.w	r1, [r1]
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 8003788:	b2c9      	uxtb	r1, r1
 800378a:	9103      	str	r1, [sp, #12]
 800378c:	9202      	str	r2, [sp, #8]
 800378e:	4a23      	ldr	r2, [pc, #140]	; (800381c <manageStateMachine+0x8f4>)
 8003790:	9201      	str	r2, [sp, #4]
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	4603      	mov	r3, r0
 8003796:	4a22      	ldr	r2, [pc, #136]	; (8003820 <manageStateMachine+0x8f8>)
 8003798:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800379a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800379c:	f000 fc02 	bl	8003fa4 <AirAdjustment>
			}
  	  	  }
		}

#endif
		if ( (baffleTemperature <= (rearTemperature-TemperatureParam[Model].CoalDeltaTemp)) //RETOUR À <= ET CHANGEMENENT POUR 200 POUR LE COALCROSSOVERLOW gtf 2022-08-30
 80037a0:	4b20      	ldr	r3, [pc, #128]	; (8003824 <manageStateMachine+0x8fc>)
 80037a2:	6819      	ldr	r1, [r3, #0]
 80037a4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80037a8:	4820      	ldr	r0, [pc, #128]	; (800382c <manageStateMachine+0x904>)
 80037aa:	4613      	mov	r3, r2
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	4413      	add	r3, r2
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	4403      	add	r3, r0
 80037b4:	3316      	adds	r3, #22
 80037b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037ba:	1aca      	subs	r2, r1, r3
 80037bc:	4b1a      	ldr	r3, [pc, #104]	; (8003828 <manageStateMachine+0x900>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	db12      	blt.n	80037ea <manageStateMachine+0x8c2>
				&& (rearTemperature < TemperatureParam[Model].CoalCrossOverRearLow) )
 80037c4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80037c8:	4918      	ldr	r1, [pc, #96]	; (800382c <manageStateMachine+0x904>)
 80037ca:	4613      	mov	r3, r2
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	4413      	add	r3, r2
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	440b      	add	r3, r1
 80037d4:	3312      	adds	r3, #18
 80037d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037da:	461a      	mov	r2, r3
 80037dc:	4b11      	ldr	r3, [pc, #68]	; (8003824 <manageStateMachine+0x8fc>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	dd02      	ble.n	80037ea <manageStateMachine+0x8c2>
        {
        	nextState = COAL_LOW;
 80037e4:	2307      	movs	r3, #7
 80037e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        if (thermostatRequest) {
 80037ea:	4b15      	ldr	r3, [pc, #84]	; (8003840 <manageStateMachine+0x918>)
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <manageStateMachine+0x8d2>
          nextState = COMBUSTION_HIGH;
 80037f2:	2306      	movs	r3, #6
 80037f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        } else if (reloadingEvent) {
          nextState = ZEROING_STEPPER;
        }
      break;
 80037f8:	e18c      	b.n	8003b14 <manageStateMachine+0xbec>
        } else if (reloadingEvent) {
 80037fa:	4b12      	ldr	r3, [pc, #72]	; (8003844 <manageStateMachine+0x91c>)
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 8188 	beq.w	8003b14 <manageStateMachine+0xbec>
          nextState = ZEROING_STEPPER;
 8003804:	2300      	movs	r3, #0
 8003806:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      break;
 800380a:	e183      	b.n	8003b14 <manageStateMachine+0xbec>
 800380c:	20000604 	.word	0x20000604
 8003810:	200000e0 	.word	0x200000e0
 8003814:	0800f278 	.word	0x0800f278
 8003818:	0800f2b8 	.word	0x0800f2b8
 800381c:	20000018 	.word	0x20000018
 8003820:	20000000 	.word	0x20000000
 8003824:	200000ec 	.word	0x200000ec
 8003828:	200000e8 	.word	0x200000e8
 800382c:	0800f234 	.word	0x0800f234
 8003830:	200005c8 	.word	0x200005c8
 8003834:	0001d4bf 	.word	0x0001d4bf
 8003838:	200005fc 	.word	0x200005fc
 800383c:	0036ee80 	.word	0x0036ee80
 8003840:	200000f4 	.word	0x200000f4
 8003844:	200000e1 	.word	0x200000e1

    case COAL_LOW: //remplacement de la logic du low pour la logic du high de la fournaise pour UFEC 23 2021-11-23

    	//HAL_GPIO_WritePin(SPEED1_COIL_GPIO_Port,SPEED1_COIL_Pin,SET);//active le relai pour activer la carte 2 PLV 15/12/21
    	AirInput_forceAperture(&primary, PrimaryMotorParam[Model].MaxCoalLow);
 8003848:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800384c:	4ab5      	ldr	r2, [pc, #724]	; (8003b24 <manageStateMachine+0xbfc>)
 800384e:	015b      	lsls	r3, r3, #5
 8003850:	4413      	add	r3, r2
 8003852:	331c      	adds	r3, #28
 8003854:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003858:	4619      	mov	r1, r3
 800385a:	48b3      	ldr	r0, [pc, #716]	; (8003b28 <manageStateMachine+0xc00>)
 800385c:	f7ff fa84 	bl	8002d68 <AirInput_forceAperture>
    	AirInput_forceAperture(&grill, BoostMotorParam[Model].MaxCoalLow);
 8003860:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003864:	4ab1      	ldr	r2, [pc, #708]	; (8003b2c <manageStateMachine+0xc04>)
 8003866:	015b      	lsls	r3, r3, #5
 8003868:	4413      	add	r3, r2
 800386a:	331c      	adds	r3, #28
 800386c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003870:	4619      	mov	r1, r3
 8003872:	48af      	ldr	r0, [pc, #700]	; (8003b30 <manageStateMachine+0xc08>)
 8003874:	f7ff fa78 	bl	8002d68 <AirInput_forceAperture>
    	if (thermostatRequest) {
 8003878:	4bae      	ldr	r3, [pc, #696]	; (8003b34 <manageStateMachine+0xc0c>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <manageStateMachine+0x960>
    	          nextState = COAL_HIGH;
 8003880:	2309      	movs	r3, #9
 8003882:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    	    	//}else if (reloadingEvent) {
    	          //  nextState = ZEROING_STEPPER;
    	        //}else if (baffleTemperature > TemperatureParam[Model].CombLowTarget){
    	        	//nextState = COMBUSTION_LOW;
    	        //}
    	break;
 8003886:	e147      	b.n	8003b18 <manageStateMachine+0xbf0>
    	}else if (reloadingEvent) {
 8003888:	4bab      	ldr	r3, [pc, #684]	; (8003b38 <manageStateMachine+0xc10>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 8143 	beq.w	8003b18 <manageStateMachine+0xbf0>
            nextState = ZEROING_STEPPER;
 8003892:	2300      	movs	r3, #0
 8003894:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    	break;
 8003898:	e13e      	b.n	8003b18 <manageStateMachine+0xbf0>

    case FLAME_LOSS:
    	deltaTemperature = abs(rearTemperature - baffleTemperature);
 800389a:	4ba8      	ldr	r3, [pc, #672]	; (8003b3c <manageStateMachine+0xc14>)
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	4ba8      	ldr	r3, [pc, #672]	; (8003b40 <manageStateMachine+0xc18>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	bfb8      	it	lt
 80038a8:	425b      	neglt	r3, r3
 80038aa:	60fb      	str	r3, [r7, #12]
    	if( deltaTemperature > TemperatureParam[Model].FlameLossDelta && timeSinceStateEntry >= MINUTES(1))
 80038ac:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80038b0:	49a4      	ldr	r1, [pc, #656]	; (8003b44 <manageStateMachine+0xc1c>)
 80038b2:	4613      	mov	r3, r2
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	4413      	add	r3, r2
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	440b      	add	r3, r1
 80038bc:	3310      	adds	r3, #16
 80038be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038c2:	461a      	mov	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4293      	cmp	r3, r2
 80038c8:	dd0d      	ble.n	80038e6 <manageStateMachine+0x9be>
 80038ca:	4b9f      	ldr	r3, [pc, #636]	; (8003b48 <manageStateMachine+0xc20>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d907      	bls.n	80038e6 <manageStateMachine+0x9be>
    	{
    		nextState = historyState;
 80038d6:	4b9d      	ldr	r3, [pc, #628]	; (8003b4c <manageStateMachine+0xc24>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    		AirInput_forceAperture(&grill, GRILL_CLOSED);
 80038de:	2100      	movs	r1, #0
 80038e0:	4893      	ldr	r0, [pc, #588]	; (8003b30 <manageStateMachine+0xc08>)
 80038e2:	f7ff fa41 	bl	8002d68 <AirInput_forceAperture>
    	}
		if(reloadingEvent) {
 80038e6:	4b94      	ldr	r3, [pc, #592]	; (8003b38 <manageStateMachine+0xc10>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <manageStateMachine+0x9ce>
			nextState = ZEROING_STEPPER;
 80038ee:	2300      	movs	r3, #0
 80038f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}
		else if((rearTemperature < TemperatureParam[Model].CoalCrossOverRearLow) && timeSinceStateEntry >= MINUTES(5))
		{
			nextState = COAL_HIGH;
		}
    	break;
 80038f4:	e112      	b.n	8003b1c <manageStateMachine+0xbf4>
		else if((rearTemperature < TemperatureParam[Model].CoalCrossOverRearLow) && timeSinceStateEntry >= MINUTES(5))
 80038f6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80038fa:	4992      	ldr	r1, [pc, #584]	; (8003b44 <manageStateMachine+0xc1c>)
 80038fc:	4613      	mov	r3, r2
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	4413      	add	r3, r2
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	440b      	add	r3, r1
 8003906:	3312      	adds	r3, #18
 8003908:	f9b3 3000 	ldrsh.w	r3, [r3]
 800390c:	461a      	mov	r2, r3
 800390e:	4b8b      	ldr	r3, [pc, #556]	; (8003b3c <manageStateMachine+0xc14>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	f340 8102 	ble.w	8003b1c <manageStateMachine+0xbf4>
 8003918:	4b8b      	ldr	r3, [pc, #556]	; (8003b48 <manageStateMachine+0xc20>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a8c      	ldr	r2, [pc, #560]	; (8003b50 <manageStateMachine+0xc28>)
 800391e:	4293      	cmp	r3, r2
 8003920:	f240 80fc 	bls.w	8003b1c <manageStateMachine+0xbf4>
			nextState = COAL_HIGH;
 8003924:	2309      	movs	r3, #9
 8003926:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    	break;
 800392a:	e0f7      	b.n	8003b1c <manageStateMachine+0xbf4>

    case COAL_HIGH:
		if(historyState != currentState){
 800392c:	4b87      	ldr	r3, [pc, #540]	; (8003b4c <manageStateMachine+0xc24>)
 800392e:	781a      	ldrb	r2, [r3, #0]
 8003930:	4b88      	ldr	r3, [pc, #544]	; (8003b54 <manageStateMachine+0xc2c>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	429a      	cmp	r2, r3
 8003936:	d01d      	beq.n	8003974 <manageStateMachine+0xa4c>
			StateEntryControlAdjustment(&primary,PrimaryMotorParam[Model].MinCoalHigh, PrimaryMotorParam[Model].MaxCoalHigh,
 8003938:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800393c:	4a79      	ldr	r2, [pc, #484]	; (8003b24 <manageStateMachine+0xbfc>)
 800393e:	015b      	lsls	r3, r3, #5
 8003940:	4413      	add	r3, r2
 8003942:	331a      	adds	r3, #26
 8003944:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003948:	b2d9      	uxtb	r1, r3
 800394a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800394e:	4a75      	ldr	r2, [pc, #468]	; (8003b24 <manageStateMachine+0xbfc>)
 8003950:	015b      	lsls	r3, r3, #5
 8003952:	4413      	add	r3, r2
 8003954:	3318      	adds	r3, #24
 8003956:	f9b3 3000 	ldrsh.w	r3, [r3]
 800395a:	b2da      	uxtb	r2, r3
 800395c:	2300      	movs	r3, #0
 800395e:	9301      	str	r3, [sp, #4]
 8003960:	2300      	movs	r3, #0
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	4b72      	ldr	r3, [pc, #456]	; (8003b30 <manageStateMachine+0xc08>)
 8003966:	4870      	ldr	r0, [pc, #448]	; (8003b28 <manageStateMachine+0xc00>)
 8003968:	f000 fb62 	bl	8004030 <StateEntryControlAdjustment>
											&grill,GRILL_CLOSED,GRILL_CLOSED);
		    historyState = currentState;
 800396c:	4b79      	ldr	r3, [pc, #484]	; (8003b54 <manageStateMachine+0xc2c>)
 800396e:	781a      	ldrb	r2, [r3, #0]
 8003970:	4b76      	ldr	r3, [pc, #472]	; (8003b4c <manageStateMachine+0xc24>)
 8003972:	701a      	strb	r2, [r3, #0]
		}
        /* Since the control algo (i.e. computeAjustement) is limited
           to +/- 3 steps, it whould take 3 * sec per step to complete
           the mouvement. Reevaluate the control at that maximum period. */
        if (TimeForStep >= (3 * SEC_PER_STEP_COAL_HIGH * 1000)) {
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800397a:	fb02 f303 	mul.w	r3, r2, r3
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	429a      	cmp	r2, r3
 8003982:	d348      	bcc.n	8003a16 <manageStateMachine+0xaee>
        	if(rearTemperature > 9000) /// C'EST QUOI ÇA GTF 2022-03-11
 8003984:	4b6d      	ldr	r3, [pc, #436]	; (8003b3c <manageStateMachine+0xc14>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f242 3228 	movw	r2, #9000	; 0x2328
 800398c:	4293      	cmp	r3, r2
 800398e:	dd03      	ble.n	8003998 <manageStateMachine+0xa70>
        	{
        		adjustement = -1; //Si T > 900, on ferme. Sinon on suit le tableau d'ajustement
 8003990:	f04f 33ff 	mov.w	r3, #4294967295
 8003994:	633b      	str	r3, [r7, #48]	; 0x30
 8003996:	e00f      	b.n	80039b8 <manageStateMachine+0xa90>
        	}
        	else
        	{
        		adjustement = computeAjustement( TemperatureParam[Model].CombHighTarget, dTavant);
 8003998:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800399c:	4969      	ldr	r1, [pc, #420]	; (8003b44 <manageStateMachine+0xc1c>)
 800399e:	4613      	mov	r3, r2
 80039a0:	011b      	lsls	r3, r3, #4
 80039a2:	4413      	add	r3, r2
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	440b      	add	r3, r1
 80039a8:	330a      	adds	r3, #10
 80039aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039ae:	6939      	ldr	r1, [r7, #16]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 faa3 	bl	8003efc <computeAjustement>
 80039b6:	6338      	str	r0, [r7, #48]	; 0x30
        	}
            AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
					  	  	  &primary, PrimaryMotorParam[Model].MinCoalHigh, PrimaryMotorParam[Model].MaxCoalHigh,
 80039b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80039bc:	4a59      	ldr	r2, [pc, #356]	; (8003b24 <manageStateMachine+0xbfc>)
 80039be:	015b      	lsls	r3, r3, #5
 80039c0:	4413      	add	r3, r2
 80039c2:	331a      	adds	r3, #26
 80039c4:	f9b3 3000 	ldrsh.w	r3, [r3]
            AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 80039c8:	b2d8      	uxtb	r0, r3
					  	  	  &primary, PrimaryMotorParam[Model].MinCoalHigh, PrimaryMotorParam[Model].MaxCoalHigh,
 80039ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80039ce:	4a55      	ldr	r2, [pc, #340]	; (8003b24 <manageStateMachine+0xbfc>)
 80039d0:	015b      	lsls	r3, r3, #5
 80039d2:	4413      	add	r3, r2
 80039d4:	3318      	adds	r3, #24
 80039d6:	f9b3 3000 	ldrsh.w	r3, [r3]
            AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 80039da:	b2db      	uxtb	r3, r3
							  &grill, BoostMotorParam[Model].MinCoalHigh, BoostMotorParam[Model].MaxCoalHigh);
 80039dc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80039e0:	4952      	ldr	r1, [pc, #328]	; (8003b2c <manageStateMachine+0xc04>)
 80039e2:	0152      	lsls	r2, r2, #5
 80039e4:	440a      	add	r2, r1
 80039e6:	321a      	adds	r2, #26
 80039e8:	f9b2 2000 	ldrsh.w	r2, [r2]
            AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 80039ec:	b2d2      	uxtb	r2, r2
							  &grill, BoostMotorParam[Model].MinCoalHigh, BoostMotorParam[Model].MaxCoalHigh);
 80039ee:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80039f2:	4c4e      	ldr	r4, [pc, #312]	; (8003b2c <manageStateMachine+0xc04>)
 80039f4:	0149      	lsls	r1, r1, #5
 80039f6:	4421      	add	r1, r4
 80039f8:	3118      	adds	r1, #24
 80039fa:	f9b1 1000 	ldrsh.w	r1, [r1]
            AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 80039fe:	b2c9      	uxtb	r1, r1
 8003a00:	9103      	str	r1, [sp, #12]
 8003a02:	9202      	str	r2, [sp, #8]
 8003a04:	4a4a      	ldr	r2, [pc, #296]	; (8003b30 <manageStateMachine+0xc08>)
 8003a06:	9201      	str	r2, [sp, #4]
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	4a46      	ldr	r2, [pc, #280]	; (8003b28 <manageStateMachine+0xc00>)
 8003a0e:	6a39      	ldr	r1, [r7, #32]
 8003a10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a12:	f000 fac7 	bl	8003fa4 <AirAdjustment>
        }

    	if (!thermostatRequest) {
 8003a16:	4b47      	ldr	r3, [pc, #284]	; (8003b34 <manageStateMachine+0xc0c>)
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	f083 0301 	eor.w	r3, r3, #1
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <manageStateMachine+0xb04>
    	          nextState = COAL_LOW;
 8003a24:	2307      	movs	r3, #7
 8003a26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    	}else if (reloadingEvent) {
            nextState = ZEROING_STEPPER;
        }else if (baffleTemperature > TemperatureParam[Model].CombLowTarget){
        	nextState = COMBUSTION_HIGH;
        }
    	break;
 8003a2a:	e079      	b.n	8003b20 <manageStateMachine+0xbf8>
    	}else if (reloadingEvent) {
 8003a2c:	4b42      	ldr	r3, [pc, #264]	; (8003b38 <manageStateMachine+0xc10>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <manageStateMachine+0xb14>
            nextState = ZEROING_STEPPER;
 8003a34:	2300      	movs	r3, #0
 8003a36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    	break;
 8003a3a:	e071      	b.n	8003b20 <manageStateMachine+0xbf8>
        }else if (baffleTemperature > TemperatureParam[Model].CombLowTarget){
 8003a3c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003a40:	4940      	ldr	r1, [pc, #256]	; (8003b44 <manageStateMachine+0xc1c>)
 8003a42:	4613      	mov	r3, r2
 8003a44:	011b      	lsls	r3, r3, #4
 8003a46:	4413      	add	r3, r2
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	440b      	add	r3, r1
 8003a4c:	3308      	adds	r3, #8
 8003a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a52:	461a      	mov	r2, r3
 8003a54:	4b3a      	ldr	r3, [pc, #232]	; (8003b40 <manageStateMachine+0xc18>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	da61      	bge.n	8003b20 <manageStateMachine+0xbf8>
        	nextState = COMBUSTION_HIGH;
 8003a5c:	2306      	movs	r3, #6
 8003a5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    	break;
 8003a62:	e05d      	b.n	8003b20 <manageStateMachine+0xbf8>

    case OVERTEMP:
    case SAFETY:
      AirInput_forceAperture(&grill, GRILL_CLOSED);
 8003a64:	2100      	movs	r1, #0
 8003a66:	4832      	ldr	r0, [pc, #200]	; (8003b30 <manageStateMachine+0xc08>)
 8003a68:	f7ff f97e 	bl	8002d68 <AirInput_forceAperture>
      AirInput_forceAperture(&primary, PRIMARY_CLOSED_SECONDARY_FULL_OPEN);
 8003a6c:	210d      	movs	r1, #13
 8003a6e:	482e      	ldr	r0, [pc, #184]	; (8003b28 <manageStateMachine+0xc00>)
 8003a70:	f7ff f97a 	bl	8002d68 <AirInput_forceAperture>

      if ((baffleTemperature < TemperatureParam[Model].OverheatBaffle)
 8003a74:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003a78:	4932      	ldr	r1, [pc, #200]	; (8003b44 <manageStateMachine+0xc1c>)
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	4413      	add	r3, r2
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	440b      	add	r3, r1
 8003a84:	331e      	adds	r3, #30
 8003a86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	4b2c      	ldr	r3, [pc, #176]	; (8003b40 <manageStateMachine+0xc18>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	dd61      	ble.n	8003b58 <manageStateMachine+0xc30>
    		  && (rearTemperature < TemperatureParam[Model].OverheatChamber)
 8003a94:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003a98:	492a      	ldr	r1, [pc, #168]	; (8003b44 <manageStateMachine+0xc1c>)
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	4413      	add	r3, r2
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	440b      	add	r3, r1
 8003aa4:	3320      	adds	r3, #32
 8003aa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	4b23      	ldr	r3, [pc, #140]	; (8003b3c <manageStateMachine+0xc14>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	dd51      	ble.n	8003b58 <manageStateMachine+0xc30>
			  && (Algo_getPlenumTemp() < TemperatureParam[Model].OverheatPlenumExit)){
 8003ab4:	f000 f9b8 	bl	8003e28 <Algo_getPlenumTemp>
 8003ab8:	4601      	mov	r1, r0
 8003aba:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003abe:	4821      	ldr	r0, [pc, #132]	; (8003b44 <manageStateMachine+0xc1c>)
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	4413      	add	r3, r2
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	4403      	add	r3, r0
 8003aca:	331c      	adds	r3, #28
 8003acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ad0:	4299      	cmp	r1, r3
 8003ad2:	da41      	bge.n	8003b58 <manageStateMachine+0xc30>
    	  if(historyState == SAFETY || historyState == OVERTEMP)
 8003ad4:	4b1d      	ldr	r3, [pc, #116]	; (8003b4c <manageStateMachine+0xc24>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b0b      	cmp	r3, #11
 8003ada:	d003      	beq.n	8003ae4 <manageStateMachine+0xbbc>
 8003adc:	4b1b      	ldr	r3, [pc, #108]	; (8003b4c <manageStateMachine+0xc24>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b0a      	cmp	r3, #10
 8003ae2:	d103      	bne.n	8003aec <manageStateMachine+0xbc4>
    	  {
    		  nextState = ZEROING_STEPPER; //autre façon de fermer les trappes
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    	  else
    	  {
    		  nextState = historyState;
    	  }
      }
      break;
 8003aea:	e035      	b.n	8003b58 <manageStateMachine+0xc30>
    		  nextState = historyState;
 8003aec:	4b17      	ldr	r3, [pc, #92]	; (8003b4c <manageStateMachine+0xc24>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      break;
 8003af4:	e030      	b.n	8003b58 <manageStateMachine+0xc30>

    case PRODUCTION_TEST:
    	TestRunner();
 8003af6:	f7fe fb9b 	bl	8002230 <TestRunner>
		nextState = currentState;  //assign the current state in the runner
 8003afa:	4b16      	ldr	r3, [pc, #88]	; (8003b54 <manageStateMachine+0xc2c>)
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    	break;
 8003b02:	e02a      	b.n	8003b5a <manageStateMachine+0xc32>
		break;
 8003b04:	bf00      	nop
 8003b06:	e028      	b.n	8003b5a <manageStateMachine+0xc32>
      break;
 8003b08:	bf00      	nop
 8003b0a:	e026      	b.n	8003b5a <manageStateMachine+0xc32>
      break;
 8003b0c:	bf00      	nop
 8003b0e:	e024      	b.n	8003b5a <manageStateMachine+0xc32>
          break;
 8003b10:	bf00      	nop
 8003b12:	e022      	b.n	8003b5a <manageStateMachine+0xc32>
      break;
 8003b14:	bf00      	nop
 8003b16:	e020      	b.n	8003b5a <manageStateMachine+0xc32>
    	break;
 8003b18:	bf00      	nop
 8003b1a:	e01e      	b.n	8003b5a <manageStateMachine+0xc32>
    	break;
 8003b1c:	bf00      	nop
 8003b1e:	e01c      	b.n	8003b5a <manageStateMachine+0xc32>
    	break;
 8003b20:	bf00      	nop
 8003b22:	e01a      	b.n	8003b5a <manageStateMachine+0xc32>
 8003b24:	0800f278 	.word	0x0800f278
 8003b28:	20000000 	.word	0x20000000
 8003b2c:	0800f2b8 	.word	0x0800f2b8
 8003b30:	20000018 	.word	0x20000018
 8003b34:	200000f4 	.word	0x200000f4
 8003b38:	200000e1 	.word	0x200000e1
 8003b3c:	200000ec 	.word	0x200000ec
 8003b40:	200000e8 	.word	0x200000e8
 8003b44:	0800f234 	.word	0x0800f234
 8003b48:	200005c8 	.word	0x200005c8
 8003b4c:	20000604 	.word	0x20000604
 8003b50:	000493df 	.word	0x000493df
 8003b54:	200000e0 	.word	0x200000e0
      break;
 8003b58:	bf00      	nop
  }

	if((GPIO_PIN_SET==HAL_GPIO_ReadPin(Safety_ON_GPIO_Port,Safety_ON_Pin)) && (currentState !=PRODUCTION_TEST))
 8003b5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b5e:	4853      	ldr	r0, [pc, #332]	; (8003cac <manageStateMachine+0xd84>)
 8003b60:	f001 ff2c 	bl	80059bc <HAL_GPIO_ReadPin>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d110      	bne.n	8003b8c <manageStateMachine+0xc64>
 8003b6a:	4b51      	ldr	r3, [pc, #324]	; (8003cb0 <manageStateMachine+0xd88>)
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	2b0c      	cmp	r3, #12
 8003b70:	d00c      	beq.n	8003b8c <manageStateMachine+0xc64>
	{
		uint32_t kerneltime = osKernelSysTick();
 8003b72:	f006 f8d6 	bl	8009d22 <osKernelSysTick>
 8003b76:	60b8      	str	r0, [r7, #8]
		if ((Safetydebounce_ms+100) < kerneltime)
 8003b78:	4b4e      	ldr	r3, [pc, #312]	; (8003cb4 <manageStateMachine+0xd8c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3364      	adds	r3, #100	; 0x64
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d909      	bls.n	8003b98 <manageStateMachine+0xc70>
		{
			nextState = SAFETY; //force the safety state
 8003b84:	230b      	movs	r3, #11
 8003b86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	{
 8003b8a:	e005      	b.n	8003b98 <manageStateMachine+0xc70>
		}
	}
	else
	{
		Safetydebounce_ms = osKernelSysTick();
 8003b8c:	f006 f8c9 	bl	8009d22 <osKernelSysTick>
 8003b90:	4603      	mov	r3, r0
 8003b92:	4a48      	ldr	r2, [pc, #288]	; (8003cb4 <manageStateMachine+0xd8c>)
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	e000      	b.n	8003b9a <manageStateMachine+0xc72>
	{
 8003b98:	bf00      	nop
	}

  /* Perform superstate action's */
  switch (currentState) {
 8003b9a:	4b45      	ldr	r3, [pc, #276]	; (8003cb0 <manageStateMachine+0xd88>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d04f      	beq.n	8003c42 <manageStateMachine+0xd1a>
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	dd02      	ble.n	8003bac <manageStateMachine+0xc84>
 8003ba6:	3b0a      	subs	r3, #10
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d94a      	bls.n	8003c42 <manageStateMachine+0xd1a>

    default:
	if ((baffleTemperature > TemperatureParam[Model].OverheatBaffle) || (rearTemperature > TemperatureParam[Model].OverheatChamber) || (Algo_getPlenumTemp()>TemperatureParam[Model].OverheatPlenum)) {
 8003bac:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003bb0:	4941      	ldr	r1, [pc, #260]	; (8003cb8 <manageStateMachine+0xd90>)
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	4413      	add	r3, r2
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	440b      	add	r3, r1
 8003bbc:	331e      	adds	r3, #30
 8003bbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	4b3d      	ldr	r3, [pc, #244]	; (8003cbc <manageStateMachine+0xd94>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	db1f      	blt.n	8003c0c <manageStateMachine+0xce4>
 8003bcc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003bd0:	4939      	ldr	r1, [pc, #228]	; (8003cb8 <manageStateMachine+0xd90>)
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	4413      	add	r3, r2
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	440b      	add	r3, r1
 8003bdc:	3320      	adds	r3, #32
 8003bde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003be2:	461a      	mov	r2, r3
 8003be4:	4b36      	ldr	r3, [pc, #216]	; (8003cc0 <manageStateMachine+0xd98>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	db0f      	blt.n	8003c0c <manageStateMachine+0xce4>
 8003bec:	f000 f91c 	bl	8003e28 <Algo_getPlenumTemp>
 8003bf0:	4601      	mov	r1, r0
 8003bf2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003bf6:	4830      	ldr	r0, [pc, #192]	; (8003cb8 <manageStateMachine+0xd90>)
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	011b      	lsls	r3, r3, #4
 8003bfc:	4413      	add	r3, r2
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	4403      	add	r3, r0
 8003c02:	331a      	adds	r3, #26
 8003c04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c08:	4299      	cmp	r1, r3
 8003c0a:	dd02      	ble.n	8003c12 <manageStateMachine+0xcea>
		nextState = OVERTEMP;
 8003c0c:	230a      	movs	r3, #10
 8003c0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}
	if(currentState != RELOAD_IGNITION)
 8003c12:	4b27      	ldr	r3, [pc, #156]	; (8003cb0 <manageStateMachine+0xd88>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d015      	beq.n	8003c46 <manageStateMachine+0xd1e>
	{
		if ((baffleTemperature < ColdStoveTemp) && (rearTemperature < ColdStoveTemp) && timeSinceStateEntry > MINUTES(1)) {
 8003c1a:	4b28      	ldr	r3, [pc, #160]	; (8003cbc <manageStateMachine+0xd94>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8003c22:	da10      	bge.n	8003c46 <manageStateMachine+0xd1e>
 8003c24:	4b26      	ldr	r3, [pc, #152]	; (8003cc0 <manageStateMachine+0xd98>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8003c2c:	da0b      	bge.n	8003c46 <manageStateMachine+0xd1e>
 8003c2e:	4b25      	ldr	r3, [pc, #148]	; (8003cc4 <manageStateMachine+0xd9c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d905      	bls.n	8003c46 <manageStateMachine+0xd1e>
		nextState = WAITING;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}
	}
      break;
 8003c40:	e001      	b.n	8003c46 <manageStateMachine+0xd1e>
    //case RELOAD_IGNITION:
    case OVERTEMP:
    case SAFETY:
    case PRODUCTION_TEST:
      /* do nothing */
      break;
 8003c42:	bf00      	nop
 8003c44:	e000      	b.n	8003c48 <manageStateMachine+0xd20>
      break;
 8003c46:	bf00      	nop
  }
  if(Algo_getInterlockRequest() && (currentState !=PRODUCTION_TEST))
 8003c48:	f000 f936 	bl	8003eb8 <Algo_getInterlockRequest>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d006      	beq.n	8003c60 <manageStateMachine+0xd38>
 8003c52:	4b17      	ldr	r3, [pc, #92]	; (8003cb0 <manageStateMachine+0xd88>)
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	2b0c      	cmp	r3, #12
 8003c58:	d002      	beq.n	8003c60 <manageStateMachine+0xd38>
  {
  		nextState = WAITING;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  if (nextState != currentState) {
 8003c60:	4b13      	ldr	r3, [pc, #76]	; (8003cb0 <manageStateMachine+0xd88>)
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d01a      	beq.n	8003ca2 <manageStateMachine+0xd7a>

	if ((currentState == COMBUSTION_HIGH  && nextState == COMBUSTION_LOW) || (currentState == COMBUSTION_LOW && nextState == COMBUSTION_HIGH))
 8003c6c:	4b10      	ldr	r3, [pc, #64]	; (8003cb0 <manageStateMachine+0xd88>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b06      	cmp	r3, #6
 8003c72:	d103      	bne.n	8003c7c <manageStateMachine+0xd54>
 8003c74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	d00a      	beq.n	8003c92 <manageStateMachine+0xd6a>
 8003c7c:	4b0c      	ldr	r3, [pc, #48]	; (8003cb0 <manageStateMachine+0xd88>)
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	d103      	bne.n	8003c8c <manageStateMachine+0xd64>
 8003c84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003c88:	2b06      	cmp	r3, #6
 8003c8a:	d002      	beq.n	8003c92 <manageStateMachine+0xd6a>
	{
		//do not update the state stateChangeTimeRef
	}
	else
	{
	    stateChangeTimeRef = currentTime_ms;
 8003c8c:	4a0e      	ldr	r2, [pc, #56]	; (8003cc8 <manageStateMachine+0xda0>)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6013      	str	r3, [r2, #0]
	}
	historyState = currentState;
 8003c92:	4b07      	ldr	r3, [pc, #28]	; (8003cb0 <manageStateMachine+0xd88>)
 8003c94:	781a      	ldrb	r2, [r3, #0]
 8003c96:	4b0d      	ldr	r3, [pc, #52]	; (8003ccc <manageStateMachine+0xda4>)
 8003c98:	701a      	strb	r2, [r3, #0]
    currentState = nextState;
 8003c9a:	4a05      	ldr	r2, [pc, #20]	; (8003cb0 <manageStateMachine+0xd88>)
 8003c9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003ca0:	7013      	strb	r3, [r2, #0]
  }
}
 8003ca2:	bf00      	nop
 8003ca4:	373c      	adds	r7, #60	; 0x3c
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd90      	pop	{r4, r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40010c00 	.word	0x40010c00
 8003cb0:	200000e0 	.word	0x200000e0
 8003cb4:	20000608 	.word	0x20000608
 8003cb8:	0800f234 	.word	0x0800f234
 8003cbc:	200000e8 	.word	0x200000e8
 8003cc0:	200000ec 	.word	0x200000ec
 8003cc4:	200005c8 	.word	0x200005c8
 8003cc8:	200005f8 	.word	0x200005f8
 8003ccc:	20000604 	.word	0x20000604

08003cd0 <Algo_task>:

void Algo_task(uint32_t currentTime_ms) {
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]

  manageStateMachine(currentTime_ms);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7ff f925 	bl	8002f28 <manageStateMachine>
//  managePlenumSpeed(Algo_getPlenumTemp(),Algo_getThermostatRequest(),currentTime_ms);

  if(Algo_getState()!= PRODUCTION_TEST)
 8003cde:	f000 f855 	bl	8003d8c <Algo_getState>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b0c      	cmp	r3, #12
 8003ce6:	d007      	beq.n	8003cf8 <Algo_task+0x28>
  {
	  AirInput_task( &primary, currentTime_ms);
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	4805      	ldr	r0, [pc, #20]	; (8003d00 <Algo_task+0x30>)
 8003cec:	f7ff f89e 	bl	8002e2c <AirInput_task>
	  AirInput_task( &grill, currentTime_ms);
 8003cf0:	6879      	ldr	r1, [r7, #4]
 8003cf2:	4804      	ldr	r0, [pc, #16]	; (8003d04 <Algo_task+0x34>)
 8003cf4:	f7ff f89a 	bl	8002e2c <AirInput_task>
  }
}
 8003cf8:	bf00      	nop
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	20000000 	.word	0x20000000
 8003d04:	20000018 	.word	0x20000018

08003d08 <Algo_getBaffleTempSlope>:

void Algo_setSimulatorMode( bool active) {
  simulatorMode = active;
}

float Algo_getBaffleTempSlope() {
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  return Algo_slopeBaffleTemp;
 8003d0c:	4b02      	ldr	r3, [pc, #8]	; (8003d18 <Algo_getBaffleTempSlope+0x10>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bc80      	pop	{r7}
 8003d16:	4770      	bx	lr
 8003d18:	200005c4 	.word	0x200005c4

08003d1c <computeSlopeBaffleTemp>:

/* Returns temperature slope in [*C / s] */
static float computeSlopeBaffleTemp(unsigned int nbData) {
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  if (simulatorMode)
 8003d24:	4b0c      	ldr	r3, [pc, #48]	; (8003d58 <computeSlopeBaffleTemp+0x3c>)
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <computeSlopeBaffleTemp+0x16>
  {
    return Algo_Simulator_slopeBaffleTemp;
 8003d2c:	4b0b      	ldr	r3, [pc, #44]	; (8003d5c <computeSlopeBaffleTemp+0x40>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	e00e      	b.n	8003d50 <computeSlopeBaffleTemp+0x34>
  }
  else
  {
	Algo_slopeBaffleTemp = Slope_compute(&slopeBaffleTemp, nbData) / 10.0;
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	480a      	ldr	r0, [pc, #40]	; (8003d60 <computeSlopeBaffleTemp+0x44>)
 8003d36:	f000 fe1b 	bl	8004970 <Slope_compute>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	4909      	ldr	r1, [pc, #36]	; (8003d64 <computeSlopeBaffleTemp+0x48>)
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fd f8f4 	bl	8000f2c <__aeabi_fdiv>
 8003d44:	4603      	mov	r3, r0
 8003d46:	461a      	mov	r2, r3
 8003d48:	4b07      	ldr	r3, [pc, #28]	; (8003d68 <computeSlopeBaffleTemp+0x4c>)
 8003d4a:	601a      	str	r2, [r3, #0]
    return Algo_slopeBaffleTemp;
 8003d4c:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <computeSlopeBaffleTemp+0x4c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
  }
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	200005a8 	.word	0x200005a8
 8003d5c:	200005c0 	.word	0x200005c0
 8003d60:	200005ac 	.word	0x200005ac
 8003d64:	41200000 	.word	0x41200000
 8003d68:	200005c4 	.word	0x200005c4

08003d6c <Algo_setState>:

void Algo_setState(State state) {
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	4603      	mov	r3, r0
 8003d74:	71fb      	strb	r3, [r7, #7]
  //if (simulatorMode) {
    currentState = state;
 8003d76:	4a04      	ldr	r2, [pc, #16]	; (8003d88 <Algo_setState+0x1c>)
 8003d78:	79fb      	ldrb	r3, [r7, #7]
 8003d7a:	7013      	strb	r3, [r2, #0]
  //}
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bc80      	pop	{r7}
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	200000e0 	.word	0x200000e0

08003d8c <Algo_getState>:

State Algo_getState() {
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  return currentState;
 8003d90:	4b02      	ldr	r3, [pc, #8]	; (8003d9c <Algo_getState+0x10>)
 8003d92:	781b      	ldrb	r3, [r3, #0]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bc80      	pop	{r7}
 8003d9a:	4770      	bx	lr
 8003d9c:	200000e0 	.word	0x200000e0

08003da0 <Algo_setBaffleTemp>:
uint32_t getStateTime(){
  return timeSinceStateEntry;
}

void Algo_setBaffleTemp(int temp) {
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  baffleTemperature = temp;
 8003da8:	4a05      	ldr	r2, [pc, #20]	; (8003dc0 <Algo_setBaffleTemp+0x20>)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6013      	str	r3, [r2, #0]
  Slope_addData(&slopeBaffleTemp, temp);
 8003dae:	6879      	ldr	r1, [r7, #4]
 8003db0:	4804      	ldr	r0, [pc, #16]	; (8003dc4 <Algo_setBaffleTemp+0x24>)
 8003db2:	f000 fdb2 	bl	800491a <Slope_addData>
}
 8003db6:	bf00      	nop
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	200000e8 	.word	0x200000e8
 8003dc4:	200005ac 	.word	0x200005ac

08003dc8 <Algo_setRearTemp>:

void Algo_setRearTemp(int temp) {
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  rearTemperature = temp;
 8003dd0:	4a03      	ldr	r2, [pc, #12]	; (8003de0 <Algo_setRearTemp+0x18>)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6013      	str	r3, [r2, #0]
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bc80      	pop	{r7}
 8003dde:	4770      	bx	lr
 8003de0:	200000ec 	.word	0x200000ec

08003de4 <Algo_getRearTemp>:
int Algo_getRearTemp() {
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  return rearTemperature;
 8003de8:	4b02      	ldr	r3, [pc, #8]	; (8003df4 <Algo_getRearTemp+0x10>)
 8003dea:	681b      	ldr	r3, [r3, #0]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bc80      	pop	{r7}
 8003df2:	4770      	bx	lr
 8003df4:	200000ec 	.word	0x200000ec

08003df8 <Algo_getBaffleTemp>:

int Algo_getBaffleTemp() {
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  return baffleTemperature;
 8003dfc:	4b02      	ldr	r3, [pc, #8]	; (8003e08 <Algo_getBaffleTemp+0x10>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bc80      	pop	{r7}
 8003e06:	4770      	bx	lr
 8003e08:	200000e8 	.word	0x200000e8

08003e0c <Algo_setPlenumTemp>:

void Algo_setPlenumTemp(int temp) {
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  plenumTemp = temp;
 8003e14:	4a03      	ldr	r2, [pc, #12]	; (8003e24 <Algo_setPlenumTemp+0x18>)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6013      	str	r3, [r2, #0]
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bc80      	pop	{r7}
 8003e22:	4770      	bx	lr
 8003e24:	200000f0 	.word	0x200000f0

08003e28 <Algo_getPlenumTemp>:
int Algo_getPlenumTemp() {
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  return plenumTemp;
 8003e2c:	4b02      	ldr	r3, [pc, #8]	; (8003e38 <Algo_getPlenumTemp+0x10>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bc80      	pop	{r7}
 8003e36:	4770      	bx	lr
 8003e38:	200000f0 	.word	0x200000f0

08003e3c <Algo_getPrimary>:

int Algo_getPrimary() {
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  return AirInput_getAperture(&primary);
 8003e40:	4802      	ldr	r0, [pc, #8]	; (8003e4c <Algo_getPrimary+0x10>)
 8003e42:	f7fe ffb0 	bl	8002da6 <AirInput_getAperture>
 8003e46:	4603      	mov	r3, r0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	20000000 	.word	0x20000000

08003e50 <Algo_getGrill>:

int Algo_getGrill() {
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  return AirInput_getAperture(&grill);
 8003e54:	4802      	ldr	r0, [pc, #8]	; (8003e60 <Algo_getGrill+0x10>)
 8003e56:	f7fe ffa6 	bl	8002da6 <AirInput_getAperture>
 8003e5a:	4603      	mov	r3, r0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	20000018 	.word	0x20000018

08003e64 <Algo_setThermostatRequest>:

Algo_DELState Algo_getStateFermeturePorte() {
  return delFermeturePorte;
}

void Algo_setThermostatRequest(bool demand) {
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	71fb      	strb	r3, [r7, #7]
  thermostatRequest = demand;
 8003e6e:	4a04      	ldr	r2, [pc, #16]	; (8003e80 <Algo_setThermostatRequest+0x1c>)
 8003e70:	79fb      	ldrb	r3, [r7, #7]
 8003e72:	7013      	strb	r3, [r2, #0]
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bc80      	pop	{r7}
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	200000f4 	.word	0x200000f4

08003e84 <Algo_getThermostatRequest>:
bool Algo_getThermostatRequest() {
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  return thermostatRequest;
 8003e88:	4b02      	ldr	r3, [pc, #8]	; (8003e94 <Algo_getThermostatRequest+0x10>)
 8003e8a:	781b      	ldrb	r3, [r3, #0]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bc80      	pop	{r7}
 8003e92:	4770      	bx	lr
 8003e94:	200000f4 	.word	0x200000f4

08003e98 <Algo_setInterlockRequest>:
void Algo_setInterlockRequest(bool demand) {
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	71fb      	strb	r3, [r7, #7]
	interlockRequest = demand;
 8003ea2:	4a04      	ldr	r2, [pc, #16]	; (8003eb4 <Algo_setInterlockRequest+0x1c>)
 8003ea4:	79fb      	ldrb	r3, [r7, #7]
 8003ea6:	7013      	strb	r3, [r2, #0]
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bc80      	pop	{r7}
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	200000f5 	.word	0x200000f5

08003eb8 <Algo_getInterlockRequest>:
bool Algo_getInterlockRequest() {
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
  return interlockRequest;
 8003ebc:	4b02      	ldr	r3, [pc, #8]	; (8003ec8 <Algo_getInterlockRequest+0x10>)
 8003ebe:	781b      	ldrb	r3, [r3, #0]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bc80      	pop	{r7}
 8003ec6:	4770      	bx	lr
 8003ec8:	200000f5 	.word	0x200000f5

08003ecc <Algo_startChargement>:

void Algo_startChargement(uint32_t currentTime_ms) {
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  reloadingEvent = true;
 8003ed4:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <Algo_startChargement+0x24>)
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	701a      	strb	r2, [r3, #0]
  fanPauseRequired = true;
 8003eda:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <Algo_startChargement+0x28>)
 8003edc:	2201      	movs	r2, #1
 8003ede:	701a      	strb	r2, [r3, #0]
  TimeOfReloadRequest = currentTime_ms;
 8003ee0:	4a05      	ldr	r2, [pc, #20]	; (8003ef8 <Algo_startChargement+0x2c>)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6013      	str	r3, [r2, #0]
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bc80      	pop	{r7}
 8003eee:	4770      	bx	lr
 8003ef0:	200000e1 	.word	0x200000e1
 8003ef4:	200000e2 	.word	0x200000e2
 8003ef8:	200005cc 	.word	0x200005cc

08003efc <computeAjustement>:

void Algo_clearReloadRequest() {
  reloadingEvent = false;
}

static int computeAjustement( int tempTarget_tenthF, float dTempAvant_FperS) {
 8003efc:	b5b0      	push	{r4, r5, r7, lr}
 8003efe:	b08e      	sub	sp, #56	; 0x38
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]

  //                  [line][column]
  const int adjustment[3][3] = {
 8003f06:	4b23      	ldr	r3, [pc, #140]	; (8003f94 <computeAjustement+0x98>)
 8003f08:	f107 040c 	add.w	r4, r7, #12
 8003f0c:	461d      	mov	r5, r3
 8003f0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f16:	682b      	ldr	r3, [r5, #0]
 8003f18:	6023      	str	r3, [r4, #0]
  };

  unsigned int line;
  unsigned int column;

  if (baffleTemperature > (tempTarget_tenthF + 50)) {
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f20:	4b1d      	ldr	r3, [pc, #116]	; (8003f98 <computeAjustement+0x9c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	da02      	bge.n	8003f2e <computeAjustement+0x32>
    line = 0;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f2c:	e00b      	b.n	8003f46 <computeAjustement+0x4a>
  } else if (baffleTemperature >= (tempTarget_tenthF - 50)) {
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f1a3 0232 	sub.w	r2, r3, #50	; 0x32
 8003f34:	4b18      	ldr	r3, [pc, #96]	; (8003f98 <computeAjustement+0x9c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	dc02      	bgt.n	8003f42 <computeAjustement+0x46>
    line = 1;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f40:	e001      	b.n	8003f46 <computeAjustement+0x4a>
  } else {
    line = 2;
 8003f42:	2302      	movs	r3, #2
 8003f44:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if (dTempAvant_FperS < -6.0) {
 8003f46:	4915      	ldr	r1, [pc, #84]	; (8003f9c <computeAjustement+0xa0>)
 8003f48:	6838      	ldr	r0, [r7, #0]
 8003f4a:	f7fd f8d9 	bl	8001100 <__aeabi_fcmplt>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d002      	beq.n	8003f5a <computeAjustement+0x5e>
    column = 0;
 8003f54:	2300      	movs	r3, #0
 8003f56:	633b      	str	r3, [r7, #48]	; 0x30
 8003f58:	e00b      	b.n	8003f72 <computeAjustement+0x76>
  } else if (dTempAvant_FperS <= 6.0) {
 8003f5a:	4911      	ldr	r1, [pc, #68]	; (8003fa0 <computeAjustement+0xa4>)
 8003f5c:	6838      	ldr	r0, [r7, #0]
 8003f5e:	f7fd f8d9 	bl	8001114 <__aeabi_fcmple>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <computeAjustement+0x72>
    column = 1;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	633b      	str	r3, [r7, #48]	; 0x30
 8003f6c:	e001      	b.n	8003f72 <computeAjustement+0x76>
  } else {
    column = 2;
 8003f6e:	2302      	movs	r3, #2
 8003f70:	633b      	str	r3, [r7, #48]	; 0x30
  }

  return adjustment[line][column];
 8003f72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f74:	4613      	mov	r3, r2
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	4413      	add	r3, r2
 8003f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f7c:	4413      	add	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003f84:	4413      	add	r3, r2
 8003f86:	f853 3c2c 	ldr.w	r3, [r3, #-44]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3738      	adds	r7, #56	; 0x38
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bdb0      	pop	{r4, r5, r7, pc}
 8003f92:	bf00      	nop
 8003f94:	0800f030 	.word	0x0800f030
 8003f98:	200000e8 	.word	0x200000e8
 8003f9c:	c0c00000 	.word	0xc0c00000
 8003fa0:	40c00000 	.word	0x40c00000

08003fa4 <AirAdjustment>:

void AirAdjustment(int adjustement, const uint32_t secondPerStep,
		AirInput* primaire, const uint8_t MinPrimary, const uint8_t MaxPrimary,
		AirInput* grill, const uint8_t MinGrill, const uint8_t MaxGrill)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
 8003fb0:	70fb      	strb	r3, [r7, #3]
	if (adjustement > 0)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	dd1a      	ble.n	8003fee <AirAdjustment+0x4a>
	{
		if (AirInput_getAperture(primaire) >= MaxPrimary)
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7fe fef4 	bl	8002da6 <AirInput_getAperture>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	7e3b      	ldrb	r3, [r7, #24]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	db0d      	blt.n	8003fe2 <AirAdjustment+0x3e>
		{
			if (AirInput_getAperture(grill) < MaxGrill)
 8003fc6:	69f8      	ldr	r0, [r7, #28]
 8003fc8:	f7fe feed 	bl	8002da6 <AirInput_getAperture>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	da28      	bge.n	8004028 <AirAdjustment+0x84>
			{
				AirInput_setAjustement(grill, adjustement, secondPerStep);
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	68f9      	ldr	r1, [r7, #12]
 8003fda:	69f8      	ldr	r0, [r7, #28]
 8003fdc:	f7fe ff00 	bl	8002de0 <AirInput_setAjustement>
				AirInput_setAjustement(primaire, adjustement,secondPerStep);
			}
		}
	}
	/*else{do nothing} air setting doesn't need further adjustment*/
}
 8003fe0:	e022      	b.n	8004028 <AirAdjustment+0x84>
			AirInput_setAjustement(primaire, adjustement, secondPerStep);
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	68f9      	ldr	r1, [r7, #12]
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7fe fefa 	bl	8002de0 <AirInput_setAjustement>
}
 8003fec:	e01c      	b.n	8004028 <AirAdjustment+0x84>
	else if (adjustement < 0)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	da19      	bge.n	8004028 <AirAdjustment+0x84>
		if (AirInput_getAperture(grill) > MinGrill)
 8003ff4:	69f8      	ldr	r0, [r7, #28]
 8003ff6:	f7fe fed6 	bl	8002da6 <AirInput_getAperture>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004000:	429a      	cmp	r2, r3
 8004002:	dd05      	ble.n	8004010 <AirAdjustment+0x6c>
			AirInput_setAjustement(grill, adjustement,secondPerStep);
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	68f9      	ldr	r1, [r7, #12]
 8004008:	69f8      	ldr	r0, [r7, #28]
 800400a:	f7fe fee9 	bl	8002de0 <AirInput_setAjustement>
}
 800400e:	e00b      	b.n	8004028 <AirAdjustment+0x84>
			if(AirInput_getAperture(primaire) > MinPrimary)
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7fe fec8 	bl	8002da6 <AirInput_getAperture>
 8004016:	4602      	mov	r2, r0
 8004018:	78fb      	ldrb	r3, [r7, #3]
 800401a:	429a      	cmp	r2, r3
 800401c:	dd04      	ble.n	8004028 <AirAdjustment+0x84>
				AirInput_setAjustement(primaire, adjustement,secondPerStep);
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	68f9      	ldr	r1, [r7, #12]
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7fe fedc 	bl	8002de0 <AirInput_setAjustement>
}
 8004028:	bf00      	nop
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <StateEntryControlAdjustment>:


void StateEntryControlAdjustment( AirInput* primaireSecondaire, const uint8_t MinPrimary, const uint8_t MaxPrimary,
		AirInput* grill, const uint8_t MinGrill, const uint8_t MaxGrill)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08a      	sub	sp, #40	; 0x28
 8004034:	af04      	add	r7, sp, #16
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	607b      	str	r3, [r7, #4]
 800403a:	460b      	mov	r3, r1
 800403c:	72fb      	strb	r3, [r7, #11]
 800403e:	4613      	mov	r3, r2
 8004040:	72bb      	strb	r3, [r7, #10]
	int aperture = AirInput_getAperture(primaireSecondaire);
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f7fe feaf 	bl	8002da6 <AirInput_getAperture>
 8004048:	6178      	str	r0, [r7, #20]
	int apertureAdjustment = 0;
 800404a:	2300      	movs	r3, #0
 800404c:	613b      	str	r3, [r7, #16]
	if (aperture >= MaxPrimary)
 800404e:	7abb      	ldrb	r3, [r7, #10]
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	429a      	cmp	r2, r3
 8004054:	db15      	blt.n	8004082 <StateEntryControlAdjustment+0x52>
	{
		apertureAdjustment = MaxPrimary - aperture;
 8004056:	7aba      	ldrb	r2, [r7, #10]
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	613b      	str	r3, [r7, #16]
		AirAdjustment(apertureAdjustment,2,primaireSecondaire,MinPrimary,MaxPrimary,grill,MinGrill,MaxGrill);
 800405e:	7afa      	ldrb	r2, [r7, #11]
 8004060:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004064:	9303      	str	r3, [sp, #12]
 8004066:	f897 3020 	ldrb.w	r3, [r7, #32]
 800406a:	9302      	str	r3, [sp, #8]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	9301      	str	r3, [sp, #4]
 8004070:	7abb      	ldrb	r3, [r7, #10]
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	4613      	mov	r3, r2
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	2102      	movs	r1, #2
 800407a:	6938      	ldr	r0, [r7, #16]
 800407c:	f7ff ff92 	bl	8003fa4 <AirAdjustment>
 8004080:	e018      	b.n	80040b4 <StateEntryControlAdjustment+0x84>
	}
	else if (aperture <= MinPrimary)
 8004082:	7afb      	ldrb	r3, [r7, #11]
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	429a      	cmp	r2, r3
 8004088:	dc14      	bgt.n	80040b4 <StateEntryControlAdjustment+0x84>
	{
		apertureAdjustment = MinPrimary - aperture;
 800408a:	7afa      	ldrb	r2, [r7, #11]
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	613b      	str	r3, [r7, #16]
		AirAdjustment(apertureAdjustment,2,primaireSecondaire,MinPrimary,MaxPrimary,grill,MinGrill,MaxGrill);
 8004092:	7afa      	ldrb	r2, [r7, #11]
 8004094:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004098:	9303      	str	r3, [sp, #12]
 800409a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800409e:	9302      	str	r3, [sp, #8]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	9301      	str	r3, [sp, #4]
 80040a4:	7abb      	ldrb	r3, [r7, #10]
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	4613      	mov	r3, r2
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	2102      	movs	r1, #2
 80040ae:	6938      	ldr	r0, [r7, #16]
 80040b0:	f7ff ff78 	bl	8003fa4 <AirAdjustment>
	}

	aperture = AirInput_getAperture(grill);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f7fe fe76 	bl	8002da6 <AirInput_getAperture>
 80040ba:	6178      	str	r0, [r7, #20]
	if (aperture >= MaxGrill)
 80040bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	db16      	blt.n	80040f4 <StateEntryControlAdjustment+0xc4>
	{
		apertureAdjustment = MaxGrill - aperture;
 80040c6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	613b      	str	r3, [r7, #16]
		AirAdjustment(apertureAdjustment,1,primaireSecondaire,MinPrimary,MaxPrimary,grill,MinGrill,MaxGrill);
 80040d0:	7afa      	ldrb	r2, [r7, #11]
 80040d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80040d6:	9303      	str	r3, [sp, #12]
 80040d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80040dc:	9302      	str	r3, [sp, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	9301      	str	r3, [sp, #4]
 80040e2:	7abb      	ldrb	r3, [r7, #10]
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	4613      	mov	r3, r2
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	2101      	movs	r1, #1
 80040ec:	6938      	ldr	r0, [r7, #16]
 80040ee:	f7ff ff59 	bl	8003fa4 <AirAdjustment>
	else if (aperture <= MinGrill)
	{
		apertureAdjustment = MinGrill - aperture;
		AirAdjustment(apertureAdjustment,1,primaireSecondaire,MinPrimary,MaxPrimary,grill,MinGrill,MaxGrill);
	}
}
 80040f2:	e01a      	b.n	800412a <StateEntryControlAdjustment+0xfa>
	else if (aperture <= MinGrill)
 80040f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	dc15      	bgt.n	800412a <StateEntryControlAdjustment+0xfa>
		apertureAdjustment = MinGrill - aperture;
 80040fe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	613b      	str	r3, [r7, #16]
		AirAdjustment(apertureAdjustment,1,primaireSecondaire,MinPrimary,MaxPrimary,grill,MinGrill,MaxGrill);
 8004108:	7afa      	ldrb	r2, [r7, #11]
 800410a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800410e:	9303      	str	r3, [sp, #12]
 8004110:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004114:	9302      	str	r3, [sp, #8]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	9301      	str	r3, [sp, #4]
 800411a:	7abb      	ldrb	r3, [r7, #10]
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	4613      	mov	r3, r2
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	2101      	movs	r1, #1
 8004124:	6938      	ldr	r0, [r7, #16]
 8004126:	f7ff ff3d 	bl	8003fa4 <AirAdjustment>
}
 800412a:	bf00      	nop
 800412c:	3718      	adds	r7, #24
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
	...

08004134 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4a06      	ldr	r2, [pc, #24]	; (800415c <vApplicationGetIdleTaskMemory+0x28>)
 8004144:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	4a05      	ldr	r2, [pc, #20]	; (8004160 <vApplicationGetIdleTaskMemory+0x2c>)
 800414a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2280      	movs	r2, #128	; 0x80
 8004150:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8004152:	bf00      	nop
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr
 800415c:	2000060c 	.word	0x2000060c
 8004160:	20000660 	.word	0x20000660

08004164 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4a07      	ldr	r2, [pc, #28]	; (8004190 <vApplicationGetTimerTaskMemory+0x2c>)
 8004174:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	4a06      	ldr	r2, [pc, #24]	; (8004194 <vApplicationGetTimerTaskMemory+0x30>)
 800417a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004182:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8004184:	bf00      	nop
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	bc80      	pop	{r7}
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	20000860 	.word	0x20000860
 8004194:	200008b4 	.word	0x200008b4

08004198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004198:	b5b0      	push	{r4, r5, r7, lr}
 800419a:	b0a8      	sub	sp, #160	; 0xa0
 800419c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800419e:	f000 ff75 	bl	800508c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80041a2:	f000 f8a1 	bl	80042e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80041a6:	f000 f9a5 	bl	80044f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80041aa:	f000 f901 	bl	80043b0 <MX_I2C1_Init>
  MX_RTC_Init();
 80041ae:	f000 f92d 	bl	800440c <MX_RTC_Init>
  MX_USART1_UART_Init();
 80041b2:	f000 f975 	bl	80044a0 <MX_USART1_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of I2CSemaphore */
  osSemaphoreDef(I2CSemaphore);
 80041b6:	2300      	movs	r3, #0
 80041b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80041bc:	2300      	movs	r3, #0
 80041be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  I2CSemaphoreHandle = osSemaphoreCreate(osSemaphore(I2CSemaphore), 1);
 80041c2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80041c6:	2101      	movs	r1, #1
 80041c8:	4618      	mov	r0, r3
 80041ca:	f005 fe8b 	bl	8009ee4 <osSemaphoreCreate>
 80041ce:	4603      	mov	r3, r0
 80041d0:	4a38      	ldr	r2, [pc, #224]	; (80042b4 <main+0x11c>)
 80041d2:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of Timer */
  osTimerDef(Timer, TimerCallback);
 80041d4:	4b38      	ldr	r3, [pc, #224]	; (80042b8 <main+0x120>)
 80041d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041da:	2300      	movs	r3, #0
 80041dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  TimerHandle = osTimerCreate(osTimer(Timer), osTimerPeriodic, NULL);
 80041e0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80041e4:	2200      	movs	r2, #0
 80041e6:	2101      	movs	r1, #1
 80041e8:	4618      	mov	r0, r3
 80041ea:	f005 fe0b 	bl	8009e04 <osTimerCreate>
 80041ee:	4603      	mov	r3, r0
 80041f0:	4a32      	ldr	r2, [pc, #200]	; (80042bc <main+0x124>)
 80041f2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80041f4:	4b32      	ldr	r3, [pc, #200]	; (80042c0 <main+0x128>)
 80041f6:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80041fa:	461d      	mov	r5, r3
 80041fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004200:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004204:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004208:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800420c:	2100      	movs	r1, #0
 800420e:	4618      	mov	r0, r3
 8004210:	f005 fd97 	bl	8009d42 <osThreadCreate>
 8004214:	4603      	mov	r3, r0
 8004216:	4a2b      	ldr	r2, [pc, #172]	; (80042c4 <main+0x12c>)
 8004218:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  osThreadDef(TemperatureMeas, TemperatureManager, osPriorityNormal, 0, 512); //TODO: Validate maximum stack needed adding printf end in Hard Fault handler
 800421a:	4b2b      	ldr	r3, [pc, #172]	; (80042c8 <main+0x130>)
 800421c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8004220:	461d      	mov	r5, r3
 8004222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004226:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800422a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TemperatureMeasHandle = osThreadCreate(osThread(TemperatureMeas), NULL);
 800422e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004232:	2100      	movs	r1, #0
 8004234:	4618      	mov	r0, r3
 8004236:	f005 fd84 	bl	8009d42 <osThreadCreate>
 800423a:	4603      	mov	r3, r0
 800423c:	4a23      	ldr	r2, [pc, #140]	; (80042cc <main+0x134>)
 800423e:	6013      	str	r3, [r2, #0]

  osThreadDef(StepperManagerT, Steppermanager, osPriorityNormal, 0, 128);
 8004240:	4b23      	ldr	r3, [pc, #140]	; (80042d0 <main+0x138>)
 8004242:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8004246:	461d      	mov	r5, r3
 8004248:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800424a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800424c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004250:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  StepperManagerTHandle = osThreadCreate(osThread(StepperManagerT), NULL);
 8004254:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004258:	2100      	movs	r1, #0
 800425a:	4618      	mov	r0, r3
 800425c:	f005 fd71 	bl	8009d42 <osThreadCreate>
 8004260:	4603      	mov	r3, r0
 8004262:	4a1c      	ldr	r2, [pc, #112]	; (80042d4 <main+0x13c>)
 8004264:	6013      	str	r3, [r2, #0]

  osThreadDef(DebugManagerT, DebugManager, osPriorityNormal, 0, 512);
 8004266:	4b1c      	ldr	r3, [pc, #112]	; (80042d8 <main+0x140>)
 8004268:	f107 0420 	add.w	r4, r7, #32
 800426c:	461d      	mov	r5, r3
 800426e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004270:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004272:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004276:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DebugManagerTHandle = osThreadCreate(osThread(DebugManagerT), NULL);
 800427a:	f107 0320 	add.w	r3, r7, #32
 800427e:	2100      	movs	r1, #0
 8004280:	4618      	mov	r0, r3
 8004282:	f005 fd5e 	bl	8009d42 <osThreadCreate>
 8004286:	4603      	mov	r3, r0
 8004288:	4a14      	ldr	r2, [pc, #80]	; (80042dc <main+0x144>)
 800428a:	6013      	str	r3, [r2, #0]

  osThreadDef(HmiManagerT, HmiManager, osPriorityNormal, 0, 128);
 800428c:	4b14      	ldr	r3, [pc, #80]	; (80042e0 <main+0x148>)
 800428e:	1d3c      	adds	r4, r7, #4
 8004290:	461d      	mov	r5, r3
 8004292:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004294:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004296:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800429a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HmiManagerTHandle = osThreadCreate(osThread(HmiManagerT), NULL);
 800429e:	1d3b      	adds	r3, r7, #4
 80042a0:	2100      	movs	r1, #0
 80042a2:	4618      	mov	r0, r3
 80042a4:	f005 fd4d 	bl	8009d42 <osThreadCreate>
 80042a8:	4603      	mov	r3, r0
 80042aa:	4a0e      	ldr	r2, [pc, #56]	; (80042e4 <main+0x14c>)
 80042ac:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80042ae:	f005 fd31 	bl	8009d14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80042b2:	e7fe      	b.n	80042b2 <main+0x11a>
 80042b4:	20002f64 	.word	0x20002f64
 80042b8:	0800488d 	.word	0x0800488d
 80042bc:	20002fc0 	.word	0x20002fc0
 80042c0:	0800f09c 	.word	0x0800f09c
 80042c4:	20002f68 	.word	0x20002f68
 80042c8:	0800f0b8 	.word	0x0800f0b8
 80042cc:	20002fbc 	.word	0x20002fbc
 80042d0:	0800f0d4 	.word	0x0800f0d4
 80042d4:	20002fd8 	.word	0x20002fd8
 80042d8:	0800f0f0 	.word	0x0800f0f0
 80042dc:	20002f74 	.word	0x20002f74
 80042e0:	0800f10c 	.word	0x0800f10c
 80042e4:	20002f70 	.word	0x20002f70

080042e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b09c      	sub	sp, #112	; 0x70
 80042ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80042ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80042f2:	2238      	movs	r2, #56	; 0x38
 80042f4:	2100      	movs	r1, #0
 80042f6:	4618      	mov	r0, r3
 80042f8:	f008 fea0 	bl	800d03c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80042fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004300:	2200      	movs	r2, #0
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	605a      	str	r2, [r3, #4]
 8004306:	609a      	str	r2, [r3, #8]
 8004308:	60da      	str	r2, [r3, #12]
 800430a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800430c:	1d3b      	adds	r3, r7, #4
 800430e:	2220      	movs	r2, #32
 8004310:	2100      	movs	r1, #0
 8004312:	4618      	mov	r0, r3
 8004314:	f008 fe92 	bl	800d03c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8004318:	230a      	movs	r3, #10
 800431a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800431c:	2301      	movs	r3, #1
 800431e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004320:	2310      	movs	r3, #16
 8004322:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004324:	2301      	movs	r3, #1
 8004326:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8004328:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800432c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800432e:	2302      	movs	r3, #2
 8004330:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8004332:	2300      	movs	r3, #0
 8004334:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8004336:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 800433a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 800433c:	2300      	movs	r3, #0
 800433e:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004340:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004344:	4618      	mov	r0, r3
 8004346:	f003 fb51 	bl	80079ec <HAL_RCC_OscConfig>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8004350:	f000 fabe 	bl	80048d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004354:	230f      	movs	r3, #15
 8004356:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004358:	2302      	movs	r3, #2
 800435a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800435c:	2300      	movs	r3, #0
 800435e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004360:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004364:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004366:	2300      	movs	r3, #0
 8004368:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800436a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800436e:	2101      	movs	r1, #1
 8004370:	4618      	mov	r0, r3
 8004372:	f003 fe51 	bl	8008018 <HAL_RCC_ClockConfig>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800437c:	f000 faa8 	bl	80048d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004380:	2301      	movs	r3, #1
 8004382:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004384:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004388:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800438a:	1d3b      	adds	r3, r7, #4
 800438c:	4618      	mov	r0, r3
 800438e:	f004 f891 	bl	80084b4 <HAL_RCCEx_PeriphCLKConfig>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8004398:	f000 fa9a 	bl	80048d0 <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800439c:	4b03      	ldr	r3, [pc, #12]	; (80043ac <SystemClock_Config+0xc4>)
 800439e:	2201      	movs	r2, #1
 80043a0:	601a      	str	r2, [r3, #0]
}
 80043a2:	bf00      	nop
 80043a4:	3770      	adds	r7, #112	; 0x70
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	42420070 	.word	0x42420070

080043b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80043b4:	4b12      	ldr	r3, [pc, #72]	; (8004400 <MX_I2C1_Init+0x50>)
 80043b6:	4a13      	ldr	r2, [pc, #76]	; (8004404 <MX_I2C1_Init+0x54>)
 80043b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80043ba:	4b11      	ldr	r3, [pc, #68]	; (8004400 <MX_I2C1_Init+0x50>)
 80043bc:	4a12      	ldr	r2, [pc, #72]	; (8004408 <MX_I2C1_Init+0x58>)
 80043be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80043c0:	4b0f      	ldr	r3, [pc, #60]	; (8004400 <MX_I2C1_Init+0x50>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80043c6:	4b0e      	ldr	r3, [pc, #56]	; (8004400 <MX_I2C1_Init+0x50>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80043cc:	4b0c      	ldr	r3, [pc, #48]	; (8004400 <MX_I2C1_Init+0x50>)
 80043ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80043d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80043d4:	4b0a      	ldr	r3, [pc, #40]	; (8004400 <MX_I2C1_Init+0x50>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80043da:	4b09      	ldr	r3, [pc, #36]	; (8004400 <MX_I2C1_Init+0x50>)
 80043dc:	2200      	movs	r2, #0
 80043de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80043e0:	4b07      	ldr	r3, [pc, #28]	; (8004400 <MX_I2C1_Init+0x50>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80043e6:	4b06      	ldr	r3, [pc, #24]	; (8004400 <MX_I2C1_Init+0x50>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80043ec:	4804      	ldr	r0, [pc, #16]	; (8004400 <MX_I2C1_Init+0x50>)
 80043ee:	f001 fb2d 	bl	8005a4c <HAL_I2C_Init>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d001      	beq.n	80043fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80043f8:	f000 fa6a 	bl	80048d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80043fc:	bf00      	nop
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	20002f10 	.word	0x20002f10
 8004404:	40005400 	.word	0x40005400
 8004408:	000186a0 	.word	0x000186a0

0800440c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004412:	1d3b      	adds	r3, r7, #4
 8004414:	2100      	movs	r1, #0
 8004416:	460a      	mov	r2, r1
 8004418:	801a      	strh	r2, [r3, #0]
 800441a:	460a      	mov	r2, r1
 800441c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800441e:	2300      	movs	r3, #0
 8004420:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004422:	4b1d      	ldr	r3, [pc, #116]	; (8004498 <MX_RTC_Init+0x8c>)
 8004424:	4a1d      	ldr	r2, [pc, #116]	; (800449c <MX_RTC_Init+0x90>)
 8004426:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8004428:	4b1b      	ldr	r3, [pc, #108]	; (8004498 <MX_RTC_Init+0x8c>)
 800442a:	f04f 32ff 	mov.w	r2, #4294967295
 800442e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8004430:	4b19      	ldr	r3, [pc, #100]	; (8004498 <MX_RTC_Init+0x8c>)
 8004432:	2200      	movs	r2, #0
 8004434:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004436:	4818      	ldr	r0, [pc, #96]	; (8004498 <MX_RTC_Init+0x8c>)
 8004438:	f004 fad2 	bl	80089e0 <HAL_RTC_Init>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 8004442:	f000 fa45 	bl	80048d0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8004446:	2300      	movs	r3, #0
 8004448:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800444a:	2300      	movs	r3, #0
 800444c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800444e:	2300      	movs	r3, #0
 8004450:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004452:	1d3b      	adds	r3, r7, #4
 8004454:	2201      	movs	r2, #1
 8004456:	4619      	mov	r1, r3
 8004458:	480f      	ldr	r0, [pc, #60]	; (8004498 <MX_RTC_Init+0x8c>)
 800445a:	f004 fb57 	bl	8008b0c <HAL_RTC_SetTime>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8004464:	f000 fa34 	bl	80048d0 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004468:	2301      	movs	r3, #1
 800446a:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800446c:	2301      	movs	r3, #1
 800446e:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8004470:	2301      	movs	r3, #1
 8004472:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8004474:	2300      	movs	r3, #0
 8004476:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8004478:	463b      	mov	r3, r7
 800447a:	2201      	movs	r2, #1
 800447c:	4619      	mov	r1, r3
 800447e:	4806      	ldr	r0, [pc, #24]	; (8004498 <MX_RTC_Init+0x8c>)
 8004480:	f004 fcb4 	bl	8008dec <HAL_RTC_SetDate>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800448a:	f000 fa21 	bl	80048d0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800448e:	bf00      	nop
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	20002fc4 	.word	0x20002fc4
 800449c:	40002800 	.word	0x40002800

080044a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80044a4:	4b11      	ldr	r3, [pc, #68]	; (80044ec <MX_USART1_UART_Init+0x4c>)
 80044a6:	4a12      	ldr	r2, [pc, #72]	; (80044f0 <MX_USART1_UART_Init+0x50>)
 80044a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80044aa:	4b10      	ldr	r3, [pc, #64]	; (80044ec <MX_USART1_UART_Init+0x4c>)
 80044ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80044b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80044b2:	4b0e      	ldr	r3, [pc, #56]	; (80044ec <MX_USART1_UART_Init+0x4c>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80044b8:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <MX_USART1_UART_Init+0x4c>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80044be:	4b0b      	ldr	r3, [pc, #44]	; (80044ec <MX_USART1_UART_Init+0x4c>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80044c4:	4b09      	ldr	r3, [pc, #36]	; (80044ec <MX_USART1_UART_Init+0x4c>)
 80044c6:	220c      	movs	r2, #12
 80044c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044ca:	4b08      	ldr	r3, [pc, #32]	; (80044ec <MX_USART1_UART_Init+0x4c>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80044d0:	4b06      	ldr	r3, [pc, #24]	; (80044ec <MX_USART1_UART_Init+0x4c>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80044d6:	4805      	ldr	r0, [pc, #20]	; (80044ec <MX_USART1_UART_Init+0x4c>)
 80044d8:	f005 fa3c 	bl	8009954 <HAL_UART_Init>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80044e2:	f000 f9f5 	bl	80048d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80044e6:	bf00      	nop
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	20002f78 	.word	0x20002f78
 80044f0:	40013800 	.word	0x40013800

080044f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b088      	sub	sp, #32
 80044f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044fa:	f107 0310 	add.w	r3, r7, #16
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	605a      	str	r2, [r3, #4]
 8004504:	609a      	str	r2, [r3, #8]
 8004506:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004508:	4b73      	ldr	r3, [pc, #460]	; (80046d8 <MX_GPIO_Init+0x1e4>)
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	4a72      	ldr	r2, [pc, #456]	; (80046d8 <MX_GPIO_Init+0x1e4>)
 800450e:	f043 0310 	orr.w	r3, r3, #16
 8004512:	6193      	str	r3, [r2, #24]
 8004514:	4b70      	ldr	r3, [pc, #448]	; (80046d8 <MX_GPIO_Init+0x1e4>)
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	f003 0310 	and.w	r3, r3, #16
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004520:	4b6d      	ldr	r3, [pc, #436]	; (80046d8 <MX_GPIO_Init+0x1e4>)
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	4a6c      	ldr	r2, [pc, #432]	; (80046d8 <MX_GPIO_Init+0x1e4>)
 8004526:	f043 0320 	orr.w	r3, r3, #32
 800452a:	6193      	str	r3, [r2, #24]
 800452c:	4b6a      	ldr	r3, [pc, #424]	; (80046d8 <MX_GPIO_Init+0x1e4>)
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	f003 0320 	and.w	r3, r3, #32
 8004534:	60bb      	str	r3, [r7, #8]
 8004536:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004538:	4b67      	ldr	r3, [pc, #412]	; (80046d8 <MX_GPIO_Init+0x1e4>)
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	4a66      	ldr	r2, [pc, #408]	; (80046d8 <MX_GPIO_Init+0x1e4>)
 800453e:	f043 0304 	orr.w	r3, r3, #4
 8004542:	6193      	str	r3, [r2, #24]
 8004544:	4b64      	ldr	r3, [pc, #400]	; (80046d8 <MX_GPIO_Init+0x1e4>)
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	607b      	str	r3, [r7, #4]
 800454e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004550:	4b61      	ldr	r3, [pc, #388]	; (80046d8 <MX_GPIO_Init+0x1e4>)
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	4a60      	ldr	r2, [pc, #384]	; (80046d8 <MX_GPIO_Init+0x1e4>)
 8004556:	f043 0308 	orr.w	r3, r3, #8
 800455a:	6193      	str	r3, [r2, #24]
 800455c:	4b5e      	ldr	r3, [pc, #376]	; (80046d8 <MX_GPIO_Init+0x1e4>)
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	f003 0308 	and.w	r3, r3, #8
 8004564:	603b      	str	r3, [r7, #0]
 8004566:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Step2_LowCurrent_Pin|uc_Stepper_Sleep_Pin|Step3_ENABLE_Pin|SPEED2_COIL_Pin
 8004568:	2200      	movs	r2, #0
 800456a:	f643 71f0 	movw	r1, #16368	; 0x3ff0
 800456e:	485b      	ldr	r0, [pc, #364]	; (80046dc <MX_GPIO_Init+0x1e8>)
 8004570:	f001 fa3b 	bl	80059ea <HAL_GPIO_WritePin>
                          |SPEED3_COIL_Pin|Step2_DIR_Pin|Step1_LowCurrent_Pin|Step2_STEP_Pin
                          |Step2_RESET_Pin|Step2_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Step3_RESET_Pin|STATUS_LED1_Pin, GPIO_PIN_SET);
 8004574:	2201      	movs	r2, #1
 8004576:	210c      	movs	r1, #12
 8004578:	4858      	ldr	r0, [pc, #352]	; (80046dc <MX_GPIO_Init+0x1e8>)
 800457a:	f001 fa36 	bl	80059ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_ON_Pin|Step3_DIR_Pin|AFK_Var_Pin|USB_ENABLE_Pin, GPIO_PIN_RESET);
 800457e:	2200      	movs	r2, #0
 8004580:	f248 01a2 	movw	r1, #32930	; 0x80a2
 8004584:	4856      	ldr	r0, [pc, #344]	; (80046e0 <MX_GPIO_Init+0x1ec>)
 8004586:	f001 fa30 	bl	80059ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STATUS_LED2_Pin|Button_LED_Pin, GPIO_PIN_SET);
 800458a:	2201      	movs	r2, #1
 800458c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004590:	4853      	ldr	r0, [pc, #332]	; (80046e0 <MX_GPIO_Init+0x1ec>)
 8004592:	f001 fa2a 	bl	80059ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Step3_STEP_Pin|Step3_LowCurrent_Pin|Stepper_HalfStep_Pin|Step1_STEP_Pin
 8004596:	2200      	movs	r2, #0
 8004598:	f248 013e 	movw	r1, #32830	; 0x803e
 800459c:	4851      	ldr	r0, [pc, #324]	; (80046e4 <MX_GPIO_Init+0x1f0>)
 800459e:	f001 fa24 	bl	80059ea <HAL_GPIO_WritePin>
                          |Step1_RESET_Pin|Step1_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Step1_DIR_GPIO_Port, Step1_DIR_Pin, GPIO_PIN_RESET);
 80045a2:	2200      	movs	r2, #0
 80045a4:	2104      	movs	r1, #4
 80045a6:	4850      	ldr	r0, [pc, #320]	; (80046e8 <MX_GPIO_Init+0x1f4>)
 80045a8:	f001 fa1f 	bl	80059ea <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Step2_LowCurrent_Pin Step3_RESET_Pin STATUS_LED1_Pin uc_Stepper_Sleep_Pin
                           Step3_ENABLE_Pin SPEED2_COIL_Pin SPEED3_COIL_Pin Step2_DIR_Pin
                           Step1_LowCurrent_Pin Step2_STEP_Pin Step2_RESET_Pin Step2_ENABLE_Pin */
  GPIO_InitStruct.Pin = Step2_LowCurrent_Pin|Step3_RESET_Pin|STATUS_LED1_Pin|uc_Stepper_Sleep_Pin
 80045ac:	f643 73fc 	movw	r3, #16380	; 0x3ffc
 80045b0:	613b      	str	r3, [r7, #16]
                          |Step3_ENABLE_Pin|SPEED2_COIL_Pin|SPEED3_COIL_Pin|Step2_DIR_Pin
                          |Step1_LowCurrent_Pin|Step2_STEP_Pin|Step2_RESET_Pin|Step2_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045b2:	2301      	movs	r3, #1
 80045b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b6:	2300      	movs	r3, #0
 80045b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ba:	2302      	movs	r3, #2
 80045bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045be:	f107 0310 	add.w	r3, r7, #16
 80045c2:	4619      	mov	r1, r3
 80045c4:	4845      	ldr	r0, [pc, #276]	; (80046dc <MX_GPIO_Init+0x1e8>)
 80045c6:	f000 ffb9 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_switch1_Pin Limit_switch2_Pin */
  GPIO_InitStruct.Pin = Limit_switch1_Pin|Limit_switch2_Pin;
 80045ca:	2303      	movs	r3, #3
 80045cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045ce:	2300      	movs	r3, #0
 80045d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d2:	2300      	movs	r3, #0
 80045d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045d6:	f107 0310 	add.w	r3, r7, #16
 80045da:	4619      	mov	r1, r3
 80045dc:	483f      	ldr	r0, [pc, #252]	; (80046dc <MX_GPIO_Init+0x1e8>)
 80045de:	f000 ffad 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_ON_Pin STATUS_LED2_Pin Step3_DIR_Pin AFK_Var_Pin
                           Button_LED_Pin USB_ENABLE_Pin */
  GPIO_InitStruct.Pin = Buzzer_ON_Pin|STATUS_LED2_Pin|Step3_DIR_Pin|AFK_Var_Pin
 80045e2:	f248 13b2 	movw	r3, #33202	; 0x81b2
 80045e6:	613b      	str	r3, [r7, #16]
                          |Button_LED_Pin|USB_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045e8:	2301      	movs	r3, #1
 80045ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ec:	2300      	movs	r3, #0
 80045ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045f0:	2302      	movs	r3, #2
 80045f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045f4:	f107 0310 	add.w	r3, r7, #16
 80045f8:	4619      	mov	r1, r3
 80045fa:	4839      	ldr	r0, [pc, #228]	; (80046e0 <MX_GPIO_Init+0x1ec>)
 80045fc:	f000 ff9e 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004600:	2304      	movs	r3, #4
 8004602:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004604:	2302      	movs	r3, #2
 8004606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004608:	2303      	movs	r3, #3
 800460a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800460c:	f107 0310 	add.w	r3, r7, #16
 8004610:	4619      	mov	r1, r3
 8004612:	4833      	ldr	r0, [pc, #204]	; (80046e0 <MX_GPIO_Init+0x1ec>)
 8004614:	f000 ff92 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004618:	2308      	movs	r3, #8
 800461a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800461c:	2300      	movs	r3, #0
 800461e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004620:	2300      	movs	r3, #0
 8004622:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004624:	f107 0310 	add.w	r3, r7, #16
 8004628:	4619      	mov	r1, r3
 800462a:	482d      	ldr	r0, [pc, #180]	; (80046e0 <MX_GPIO_Init+0x1ec>)
 800462c:	f000 ff86 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pin : Limit_switch3_Pin */
  GPIO_InitStruct.Pin = Limit_switch3_Pin;
 8004630:	2340      	movs	r3, #64	; 0x40
 8004632:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004634:	2300      	movs	r3, #0
 8004636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004638:	2300      	movs	r3, #0
 800463a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Limit_switch3_GPIO_Port, &GPIO_InitStruct);
 800463c:	f107 0310 	add.w	r3, r7, #16
 8004640:	4619      	mov	r1, r3
 8004642:	4827      	ldr	r0, [pc, #156]	; (80046e0 <MX_GPIO_Init+0x1ec>)
 8004644:	f000 ff7a 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_switch_Door_Pin Thermostat_Input_Pin Safety_ON_Pin Interlock_Input_Pin
                           Button_Input_Pin USB_Fault_Pin */
  GPIO_InitStruct.Pin = Limit_switch_Door_Pin|Thermostat_Input_Pin|Safety_ON_Pin|Interlock_Input_Pin
 8004648:	f247 3301 	movw	r3, #29441	; 0x7301
 800464c:	613b      	str	r3, [r7, #16]
                          |Button_Input_Pin|USB_Fault_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800464e:	2300      	movs	r3, #0
 8004650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004652:	2300      	movs	r3, #0
 8004654:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004656:	f107 0310 	add.w	r3, r7, #16
 800465a:	4619      	mov	r1, r3
 800465c:	4821      	ldr	r0, [pc, #132]	; (80046e4 <MX_GPIO_Init+0x1f0>)
 800465e:	f000 ff6d 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pins : Step3_STEP_Pin Step3_LowCurrent_Pin Stepper_HalfStep_Pin Step1_STEP_Pin
                           Step1_RESET_Pin Step1_ENABLE_Pin */
  GPIO_InitStruct.Pin = Step3_STEP_Pin|Step3_LowCurrent_Pin|Stepper_HalfStep_Pin|Step1_STEP_Pin
 8004662:	f248 033e 	movw	r3, #32830	; 0x803e
 8004666:	613b      	str	r3, [r7, #16]
                          |Step1_RESET_Pin|Step1_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004668:	2301      	movs	r3, #1
 800466a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800466c:	2300      	movs	r3, #0
 800466e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004670:	2302      	movs	r3, #2
 8004672:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004674:	f107 0310 	add.w	r3, r7, #16
 8004678:	4619      	mov	r1, r3
 800467a:	481a      	ldr	r0, [pc, #104]	; (80046e4 <MX_GPIO_Init+0x1f0>)
 800467c:	f000 ff5e 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004680:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004684:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004686:	2302      	movs	r3, #2
 8004688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800468a:	2303      	movs	r3, #3
 800468c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800468e:	f107 0310 	add.w	r3, r7, #16
 8004692:	4619      	mov	r1, r3
 8004694:	4813      	ldr	r0, [pc, #76]	; (80046e4 <MX_GPIO_Init+0x1f0>)
 8004696:	f000 ff51 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800469a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800469e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80046a0:	2300      	movs	r3, #0
 80046a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a4:	2300      	movs	r3, #0
 80046a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046a8:	f107 0310 	add.w	r3, r7, #16
 80046ac:	4619      	mov	r1, r3
 80046ae:	480d      	ldr	r0, [pc, #52]	; (80046e4 <MX_GPIO_Init+0x1f0>)
 80046b0:	f000 ff44 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pin : Step1_DIR_Pin */
  GPIO_InitStruct.Pin = Step1_DIR_Pin;
 80046b4:	2304      	movs	r3, #4
 80046b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046b8:	2301      	movs	r3, #1
 80046ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046bc:	2300      	movs	r3, #0
 80046be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046c0:	2302      	movs	r3, #2
 80046c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Step1_DIR_GPIO_Port, &GPIO_InitStruct);
 80046c4:	f107 0310 	add.w	r3, r7, #16
 80046c8:	4619      	mov	r1, r3
 80046ca:	4807      	ldr	r0, [pc, #28]	; (80046e8 <MX_GPIO_Init+0x1f4>)
 80046cc:	f000 ff36 	bl	800553c <HAL_GPIO_Init>

}
 80046d0:	bf00      	nop
 80046d2:	3720      	adds	r7, #32
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	40021000 	.word	0x40021000
 80046dc:	40011000 	.word	0x40011000
 80046e0:	40010800 	.word	0x40010800
 80046e4:	40010c00 	.word	0x40010c00
 80046e8:	40011400 	.word	0x40011400

080046ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	printf("-------------------------------\n\r"); //TODO: if we remove this call, go to hardfault handler  or fail to execute
 80046f4:	4858      	ldr	r0, [pc, #352]	; (8004858 <StartDefaultTask+0x16c>)
 80046f6:	f008 fca9 	bl	800d04c <iprintf>

	    switch (readModel())
 80046fa:	f7fd f829 	bl	8001750 <readModel>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b05      	cmp	r3, #5
 8004702:	d827      	bhi.n	8004754 <StartDefaultTask+0x68>
 8004704:	a201      	add	r2, pc, #4	; (adr r2, 800470c <StartDefaultTask+0x20>)
 8004706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470a:	bf00      	nop
 800470c:	08004725 	.word	0x08004725
 8004710:	0800472d 	.word	0x0800472d
 8004714:	08004735 	.word	0x08004735
 8004718:	0800473d 	.word	0x0800473d
 800471c:	08004745 	.word	0x08004745
 8004720:	0800474d 	.word	0x0800474d
	    {
	    	  case HEATMAX:
	  	   	  printf("HeatCom CaddyAdv");
 8004724:	484d      	ldr	r0, [pc, #308]	; (800485c <StartDefaultTask+0x170>)
 8004726:	f008 fc91 	bl	800d04c <iprintf>
	  	  break;
 800472a:	e017      	b.n	800475c <StartDefaultTask+0x70>
	    	  case CADDY_ADVANCED:
	    		  printf("Caddy Advanced");
 800472c:	484c      	ldr	r0, [pc, #304]	; (8004860 <StartDefaultTask+0x174>)
 800472e:	f008 fc8d 	bl	800d04c <iprintf>
	  	  break;
 8004732:	e013      	b.n	800475c <StartDefaultTask+0x70>
	    	  case HEATPACK:
	    		  printf("Heatpack");
 8004734:	484b      	ldr	r0, [pc, #300]	; (8004864 <StartDefaultTask+0x178>)
 8004736:	f008 fc89 	bl	800d04c <iprintf>
	  	  break;
 800473a:	e00f      	b.n	800475c <StartDefaultTask+0x70>
	    	  case MINI_CADDY:
	    		  printf("Mini Caddy");
 800473c:	484a      	ldr	r0, [pc, #296]	; (8004868 <StartDefaultTask+0x17c>)
 800473e:	f008 fc85 	bl	800d04c <iprintf>
	    	  break;
 8004742:	e00b      	b.n	800475c <StartDefaultTask+0x70>
	    	  case HEATPRO:
	    		  printf("HeatPro");
 8004744:	4849      	ldr	r0, [pc, #292]	; (800486c <StartDefaultTask+0x180>)
 8004746:	f008 fc81 	bl	800d04c <iprintf>
	  	  break;
 800474a:	e007      	b.n	800475c <StartDefaultTask+0x70>
	    	  case MAX_CADDY:
	    		  printf("Max Caddy");
 800474c:	4848      	ldr	r0, [pc, #288]	; (8004870 <StartDefaultTask+0x184>)
 800474e:	f008 fc7d 	bl	800d04c <iprintf>
	  	  break;
 8004752:	e003      	b.n	800475c <StartDefaultTask+0x70>
	    	  default:
	    		  printf("Invalid Model");
 8004754:	4847      	ldr	r0, [pc, #284]	; (8004874 <StartDefaultTask+0x188>)
 8004756:	f008 fc79 	bl	800d04c <iprintf>
	    		break;
 800475a:	bf00      	nop
	    }
	    uint32_t j=0; //for a dumbass delay
 800475c:	2300      	movs	r3, #0
 800475e:	60fb      	str	r3, [r7, #12]
	    //HAL_GPIO_WritePin(STATUS_LED0_GPIO_Port,STATUS_LED0_Pin,SET);
	    HAL_GPIO_WritePin(STATUS_LED1_GPIO_Port,STATUS_LED1_Pin,SET);
 8004760:	2201      	movs	r2, #1
 8004762:	2108      	movs	r1, #8
 8004764:	4844      	ldr	r0, [pc, #272]	; (8004878 <StartDefaultTask+0x18c>)
 8004766:	f001 f940 	bl	80059ea <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(STATUS_LED2_GPIO_Port,STATUS_LED2_Pin,SET);
 800476a:	2201      	movs	r2, #1
 800476c:	2110      	movs	r1, #16
 800476e:	4843      	ldr	r0, [pc, #268]	; (800487c <StartDefaultTask+0x190>)
 8004770:	f001 f93b 	bl	80059ea <HAL_GPIO_WritePin>
	    for(j=0;j<10000000;j++){asm("NOP");}
 8004774:	2300      	movs	r3, #0
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	e003      	b.n	8004782 <StartDefaultTask+0x96>
 800477a:	bf00      	nop
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	3301      	adds	r3, #1
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4a3e      	ldr	r2, [pc, #248]	; (8004880 <StartDefaultTask+0x194>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d3f7      	bcc.n	800477a <StartDefaultTask+0x8e>
	    printf(" Version %i.%i.%i\n\r",MAJOR_VER,MINOR_VER,REVISION_VER);
 800478a:	2308      	movs	r3, #8
 800478c:	2200      	movs	r2, #0
 800478e:	2101      	movs	r1, #1
 8004790:	483c      	ldr	r0, [pc, #240]	; (8004884 <StartDefaultTask+0x198>)
 8004792:	f008 fc5b 	bl	800d04c <iprintf>


	    int i=0;
 8004796:	2300      	movs	r3, #0
 8004798:	60bb      	str	r3, [r7, #8]

	    for(i=0;i<MAJOR_VER;i++)
 800479a:	2300      	movs	r3, #0
 800479c:	60bb      	str	r3, [r7, #8]
 800479e:	e002      	b.n	80047a6 <StartDefaultTask+0xba>
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	3301      	adds	r3, #1
 80047a4:	60bb      	str	r3, [r7, #8]
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	ddf9      	ble.n	80047a0 <StartDefaultTask+0xb4>
	  	  //HAL_GPIO_WritePin(STATUS_LED0_GPIO_Port,STATUS_LED0_Pin,RESET);
	  	  //for(j=0;j<5000000;j++){asm("NOP");}
	  	  //HAL_GPIO_WritePin(STATUS_LED0_GPIO_Port,STATUS_LED0_Pin,SET);
	  	  //for(j=0;j<5000000;j++){asm("NOP");}
	    }
	    for(i=0;i<MINOR_VER;i++)
 80047ac:	2300      	movs	r3, #0
 80047ae:	60bb      	str	r3, [r7, #8]
 80047b0:	e022      	b.n	80047f8 <StartDefaultTask+0x10c>
	    {
	  	  HAL_GPIO_WritePin(STATUS_LED1_GPIO_Port,STATUS_LED1_Pin,RESET);
 80047b2:	2200      	movs	r2, #0
 80047b4:	2108      	movs	r1, #8
 80047b6:	4830      	ldr	r0, [pc, #192]	; (8004878 <StartDefaultTask+0x18c>)
 80047b8:	f001 f917 	bl	80059ea <HAL_GPIO_WritePin>
	  	  for(j=0;j<5000000;j++){asm("NOP");}
 80047bc:	2300      	movs	r3, #0
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	e003      	b.n	80047ca <StartDefaultTask+0xde>
 80047c2:	bf00      	nop
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	3301      	adds	r3, #1
 80047c8:	60fb      	str	r3, [r7, #12]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	4a2e      	ldr	r2, [pc, #184]	; (8004888 <StartDefaultTask+0x19c>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d9f7      	bls.n	80047c2 <StartDefaultTask+0xd6>
	  	  HAL_GPIO_WritePin(STATUS_LED1_GPIO_Port,STATUS_LED1_Pin,SET);
 80047d2:	2201      	movs	r2, #1
 80047d4:	2108      	movs	r1, #8
 80047d6:	4828      	ldr	r0, [pc, #160]	; (8004878 <StartDefaultTask+0x18c>)
 80047d8:	f001 f907 	bl	80059ea <HAL_GPIO_WritePin>
	  	  for(j=0;j<5000000;j++){asm("NOP");}
 80047dc:	2300      	movs	r3, #0
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	e003      	b.n	80047ea <StartDefaultTask+0xfe>
 80047e2:	bf00      	nop
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	3301      	adds	r3, #1
 80047e8:	60fb      	str	r3, [r7, #12]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	4a26      	ldr	r2, [pc, #152]	; (8004888 <StartDefaultTask+0x19c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d9f7      	bls.n	80047e2 <StartDefaultTask+0xf6>
	    for(i=0;i<MINOR_VER;i++)
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	3301      	adds	r3, #1
 80047f6:	60bb      	str	r3, [r7, #8]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	dbd9      	blt.n	80047b2 <StartDefaultTask+0xc6>
	    }
	    for(i=0;i<REVISION_VER;i++)
 80047fe:	2300      	movs	r3, #0
 8004800:	60bb      	str	r3, [r7, #8]
 8004802:	e022      	b.n	800484a <StartDefaultTask+0x15e>
	    {
	  	  HAL_GPIO_WritePin(STATUS_LED2_GPIO_Port,STATUS_LED2_Pin,RESET);
 8004804:	2200      	movs	r2, #0
 8004806:	2110      	movs	r1, #16
 8004808:	481c      	ldr	r0, [pc, #112]	; (800487c <StartDefaultTask+0x190>)
 800480a:	f001 f8ee 	bl	80059ea <HAL_GPIO_WritePin>
	  	  for(j=0;j<5000000;j++){asm("NOP");}
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	e003      	b.n	800481c <StartDefaultTask+0x130>
 8004814:	bf00      	nop
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	3301      	adds	r3, #1
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4a1a      	ldr	r2, [pc, #104]	; (8004888 <StartDefaultTask+0x19c>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d9f7      	bls.n	8004814 <StartDefaultTask+0x128>
	  	  HAL_GPIO_WritePin(STATUS_LED2_GPIO_Port,STATUS_LED2_Pin,SET);
 8004824:	2201      	movs	r2, #1
 8004826:	2110      	movs	r1, #16
 8004828:	4814      	ldr	r0, [pc, #80]	; (800487c <StartDefaultTask+0x190>)
 800482a:	f001 f8de 	bl	80059ea <HAL_GPIO_WritePin>
	  	  for(j=0;j<5000000;j++){asm("NOP");}
 800482e:	2300      	movs	r3, #0
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	e003      	b.n	800483c <StartDefaultTask+0x150>
 8004834:	bf00      	nop
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	3301      	adds	r3, #1
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4a12      	ldr	r2, [pc, #72]	; (8004888 <StartDefaultTask+0x19c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d9f7      	bls.n	8004834 <StartDefaultTask+0x148>
	    for(i=0;i<REVISION_VER;i++)
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	3301      	adds	r3, #1
 8004848:	60bb      	str	r3, [r7, #8]
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b07      	cmp	r3, #7
 800484e:	ddd9      	ble.n	8004804 <StartDefaultTask+0x118>
	    }
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8004850:	2001      	movs	r0, #1
 8004852:	f005 fac2 	bl	8009dda <osDelay>
 8004856:	e7fb      	b.n	8004850 <StartDefaultTask+0x164>
 8004858:	0800f128 	.word	0x0800f128
 800485c:	0800f14c 	.word	0x0800f14c
 8004860:	0800f160 	.word	0x0800f160
 8004864:	0800f170 	.word	0x0800f170
 8004868:	0800f17c 	.word	0x0800f17c
 800486c:	0800f188 	.word	0x0800f188
 8004870:	0800f190 	.word	0x0800f190
 8004874:	0800f19c 	.word	0x0800f19c
 8004878:	40011000 	.word	0x40011000
 800487c:	40010800 	.word	0x40010800
 8004880:	00989680 	.word	0x00989680
 8004884:	0800f1ac 	.word	0x0800f1ac
 8004888:	004c4b3f 	.word	0x004c4b3f

0800488c <TimerCallback>:
  /* USER CODE END 5 */
}

/* TimerCallback function */
void TimerCallback(void const * argument)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TimerCallback */
	osTimerStop(TimerHandle);
 8004894:	4b04      	ldr	r3, [pc, #16]	; (80048a8 <TimerCallback+0x1c>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4618      	mov	r0, r3
 800489a:	f005 fae7 	bl	8009e6c <osTimerStop>
  /* USER CODE END TimerCallback */
}
 800489e:	bf00      	nop
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	20002fc0 	.word	0x20002fc0

080048ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a04      	ldr	r2, [pc, #16]	; (80048cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d101      	bne.n	80048c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80048be:	f000 fbfb 	bl	80050b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80048c2:	bf00      	nop
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	40012c00 	.word	0x40012c00

080048d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	printf("Error Handler called");
 80048d4:	4802      	ldr	r0, [pc, #8]	; (80048e0 <Error_Handler+0x10>)
 80048d6:	f008 fbb9 	bl	800d04c <iprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80048da:	b672      	cpsid	i
}
 80048dc:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80048de:	e7fe      	b.n	80048de <Error_Handler+0xe>
 80048e0:	0800f1c0 	.word	0x0800f1c0

080048e4 <Slope_init>:
  https://www.embeddedrelated.com/showcode/323.php
*/

#include "slope.h"

void Slope_init(Slope * slope, int dataStore[], unsigned int nbDataMax, float samplingRate) {
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	603b      	str	r3, [r7, #0]
  if (sizeof(uint64_t) != 8) {
    // ERROR: the size of int64_t on this platform is not supported.
    while(true) {;}
  }

  slope->dataStore = dataStore;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	601a      	str	r2, [r3, #0]
  slope->nbDataMax = nbDataMax;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	605a      	str	r2, [r3, #4]
  slope->nbDataInDataStore = 0;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	609a      	str	r2, [r3, #8]
  slope->dataIndex = 0;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	60da      	str	r2, [r3, #12]
  slope->samplingRate = samplingRate;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	611a      	str	r2, [r3, #16]
}
 8004910:	bf00      	nop
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr

0800491a <Slope_addData>:

void Slope_addData(Slope * slope, int data) {
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	6039      	str	r1, [r7, #0]

  if (slope->nbDataInDataStore < slope->nbDataMax) {
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	429a      	cmp	r2, r3
 800492e:	d204      	bcs.n	800493a <Slope_addData+0x20>
    slope->nbDataInDataStore++;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	1c5a      	adds	r2, r3, #1
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	609a      	str	r2, [r3, #8]
  }

  slope->dataStore[slope->dataIndex] = data;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	601a      	str	r2, [r3, #0]
  slope->dataIndex++;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	1c5a      	adds	r2, r3, #1
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	60da      	str	r2, [r3, #12]
  if (slope->dataIndex >= slope->nbDataMax) {
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68da      	ldr	r2, [r3, #12]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	429a      	cmp	r2, r3
 800495e:	d302      	bcc.n	8004966 <Slope_addData+0x4c>
    slope->dataIndex = 0;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	60da      	str	r2, [r3, #12]
  }
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	bc80      	pop	{r7}
 800496e:	4770      	bx	lr

08004970 <Slope_compute>:

float Slope_compute(Slope * slope, unsigned int nbData) {
 8004970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004974:	b097      	sub	sp, #92	; 0x5c
 8004976:	af00      	add	r7, sp, #0
 8004978:	61f8      	str	r0, [r7, #28]
 800497a:	61b9      	str	r1, [r7, #24]

  int64_t nbDataToUse;
  int64_t sumX = 0;
 800497c:	f04f 0200 	mov.w	r2, #0
 8004980:	f04f 0300 	mov.w	r3, #0
 8004984:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  int64_t sumY = 0;
 8004988:	f04f 0200 	mov.w	r2, #0
 800498c:	f04f 0300 	mov.w	r3, #0
 8004990:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  int64_t sumXY = 0;
 8004994:	f04f 0200 	mov.w	r2, #0
 8004998:	f04f 0300 	mov.w	r3, #0
 800499c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
   int64_t sumX2 = 0;
 80049a0:	f04f 0200 	mov.w	r2, #0
 80049a4:	f04f 0300 	mov.w	r3, #0
 80049a8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  unsigned int readingIndex;
  float slopeValue;

  if (nbData > slope->nbDataInDataStore) {
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d907      	bls.n	80049c6 <Slope_compute+0x56>
    nbDataToUse = slope->nbDataInDataStore;
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	461a      	mov	r2, r3
 80049bc:	f04f 0300 	mov.w	r3, #0
 80049c0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 80049c4:	e005      	b.n	80049d2 <Slope_compute+0x62>
  } else {
    nbDataToUse = nbData;
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	461a      	mov	r2, r3
 80049ca:	f04f 0300 	mov.w	r3, #0
 80049ce:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  }

  if (slope->dataIndex >= nbDataToUse) {
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f04f 0100 	mov.w	r1, #0
 80049dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80049e0:	4290      	cmp	r0, r2
 80049e2:	eb71 0303 	sbcs.w	r3, r1, r3
 80049e6:	db05      	blt.n	80049f4 <Slope_compute+0x84>
    readingIndex = slope->dataIndex - nbDataToUse;
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	68da      	ldr	r2, [r3, #12]
 80049ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049f2:	e007      	b.n	8004a04 <Slope_compute+0x94>
  } else {
    readingIndex = slope->nbDataInDataStore - (nbDataToUse - slope->dataIndex);
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	6899      	ldr	r1, [r3, #8]
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	440b      	add	r3, r1
 8004a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (int32_t i = 0; i < nbDataToUse; i++) {
 8004a04:	2300      	movs	r3, #0
 8004a06:	627b      	str	r3, [r7, #36]	; 0x24
 8004a08:	e04c      	b.n	8004aa4 <Slope_compute+0x134>

    sumX += i;
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8004a12:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a16:	1814      	adds	r4, r2, r0
 8004a18:	eb43 0501 	adc.w	r5, r3, r1
 8004a1c:	e9c7 4512 	strd	r4, r5, [r7, #72]	; 0x48
    sumY += slope->dataStore[readingIndex];
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8004a32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a36:	eb12 0800 	adds.w	r8, r2, r0
 8004a3a:	eb43 0901 	adc.w	r9, r3, r1
 8004a3e:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
    sumXY += (i * slope->dataStore[readingIndex]); // ATTENTION: TODO: trouver un moyen de tester si on fait un overflow
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4413      	add	r3, r2
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a50:	fb02 f303 	mul.w	r3, r2, r3
 8004a54:	4618      	mov	r0, r3
 8004a56:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8004a5a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a5e:	eb12 0a00 	adds.w	sl, r2, r0
 8004a62:	eb43 0b01 	adc.w	fp, r3, r1
 8004a66:	e9c7 ab0e 	strd	sl, fp, [r7, #56]	; 0x38
    sumX2 += i * i;
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	fb03 f303 	mul.w	r3, r3, r3
 8004a70:	4618      	mov	r0, r3
 8004a72:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8004a76:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004a7a:	1816      	adds	r6, r2, r0
 8004a7c:	603e      	str	r6, [r7, #0]
 8004a7e:	414b      	adcs	r3, r1
 8004a80:	607b      	str	r3, [r7, #4]
 8004a82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a86:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    readingIndex++;
 8004a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (readingIndex >= slope->nbDataInDataStore) {
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d301      	bcc.n	8004a9e <Slope_compute+0x12e>
      readingIndex = 0;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (int32_t i = 0; i < nbDataToUse; i++) {
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8004aac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ab0:	4290      	cmp	r0, r2
 8004ab2:	eb71 0303 	sbcs.w	r3, r1, r3
 8004ab6:	dba8      	blt.n	8004a0a <Slope_compute+0x9a>
    }
  }

  if ((sumX != 0) || (sumX2 != 0)) {
 8004ab8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004abc:	4313      	orrs	r3, r2
 8004abe:	d103      	bne.n	8004ac8 <Slope_compute+0x158>
 8004ac0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	d05d      	beq.n	8004b84 <Slope_compute+0x214>
    slopeValue = (((sumX * sumY) - (nbDataToUse * sumXY)) * 1.0) / (((sumX * sumX) - (nbDataToUse * sumX2)) * 1.0);
 8004ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004acc:	fb02 f203 	mul.w	r2, r2, r3
 8004ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ad2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004ad4:	fb01 f303 	mul.w	r3, r1, r3
 8004ad8:	4413      	add	r3, r2
 8004ada:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004adc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ade:	fba1 0102 	umull	r0, r1, r1, r2
 8004ae2:	440b      	add	r3, r1
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ae8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004aea:	fb02 f203 	mul.w	r2, r2, r3
 8004aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004af0:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8004af2:	fb04 f303 	mul.w	r3, r4, r3
 8004af6:	18d4      	adds	r4, r2, r3
 8004af8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afc:	fba2 2303 	umull	r2, r3, r2, r3
 8004b00:	441c      	add	r4, r3
 8004b02:	4623      	mov	r3, r4
 8004b04:	1a84      	subs	r4, r0, r2
 8004b06:	613c      	str	r4, [r7, #16]
 8004b08:	eb61 0303 	sbc.w	r3, r1, r3
 8004b0c:	617b      	str	r3, [r7, #20]
 8004b0e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b12:	f7fb fd1b 	bl	800054c <__aeabi_l2d>
 8004b16:	4604      	mov	r4, r0
 8004b18:	460d      	mov	r5, r1
 8004b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b1e:	fb02 f203 	mul.w	r2, r2, r3
 8004b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b24:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004b26:	fb01 f303 	mul.w	r3, r1, r3
 8004b2a:	441a      	add	r2, r3
 8004b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b2e:	fba3 0103 	umull	r0, r1, r3, r3
 8004b32:	1853      	adds	r3, r2, r1
 8004b34:	4619      	mov	r1, r3
 8004b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b3a:	fb02 f203 	mul.w	r2, r2, r3
 8004b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b40:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 8004b42:	fb06 f303 	mul.w	r3, r6, r3
 8004b46:	18d6      	adds	r6, r2, r3
 8004b48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b50:	441e      	add	r6, r3
 8004b52:	4633      	mov	r3, r6
 8004b54:	1a86      	subs	r6, r0, r2
 8004b56:	60be      	str	r6, [r7, #8]
 8004b58:	eb61 0303 	sbc.w	r3, r1, r3
 8004b5c:	60fb      	str	r3, [r7, #12]
 8004b5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b62:	f7fb fcf3 	bl	800054c <__aeabi_l2d>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4620      	mov	r0, r4
 8004b6c:	4629      	mov	r1, r5
 8004b6e:	f7fb fe45 	bl	80007fc <__aeabi_ddiv>
 8004b72:	4602      	mov	r2, r0
 8004b74:	460b      	mov	r3, r1
 8004b76:	4610      	mov	r0, r2
 8004b78:	4619      	mov	r1, r3
 8004b7a:	f7fb ffc5 	bl	8000b08 <__aeabi_d2f>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b82:	e002      	b.n	8004b8a <Slope_compute+0x21a>
  } else {
    slopeValue = 0.0;
 8004b84:	f04f 0300 	mov.w	r3, #0
 8004b88:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  return slopeValue * slope->samplingRate;
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7fc f917 	bl	8000dc4 <__aeabi_fmul>
 8004b96:	4603      	mov	r3, r0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	375c      	adds	r7, #92	; 0x5c
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004baa:	4b18      	ldr	r3, [pc, #96]	; (8004c0c <HAL_MspInit+0x68>)
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	4a17      	ldr	r2, [pc, #92]	; (8004c0c <HAL_MspInit+0x68>)
 8004bb0:	f043 0301 	orr.w	r3, r3, #1
 8004bb4:	6193      	str	r3, [r2, #24]
 8004bb6:	4b15      	ldr	r3, [pc, #84]	; (8004c0c <HAL_MspInit+0x68>)
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	60bb      	str	r3, [r7, #8]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004bc2:	4b12      	ldr	r3, [pc, #72]	; (8004c0c <HAL_MspInit+0x68>)
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	4a11      	ldr	r2, [pc, #68]	; (8004c0c <HAL_MspInit+0x68>)
 8004bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bcc:	61d3      	str	r3, [r2, #28]
 8004bce:	4b0f      	ldr	r3, [pc, #60]	; (8004c0c <HAL_MspInit+0x68>)
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd6:	607b      	str	r3, [r7, #4]
 8004bd8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004bda:	2200      	movs	r2, #0
 8004bdc:	210f      	movs	r1, #15
 8004bde:	f06f 0001 	mvn.w	r0, #1
 8004be2:	f000 fb5e 	bl	80052a2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004be6:	4b0a      	ldr	r3, [pc, #40]	; (8004c10 <HAL_MspInit+0x6c>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	60fb      	str	r3, [r7, #12]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	4a04      	ldr	r2, [pc, #16]	; (8004c10 <HAL_MspInit+0x6c>)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c02:	bf00      	nop
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	40010000 	.word	0x40010000

08004c14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b088      	sub	sp, #32
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c1c:	f107 0310 	add.w	r3, r7, #16
 8004c20:	2200      	movs	r2, #0
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	605a      	str	r2, [r3, #4]
 8004c26:	609a      	str	r2, [r3, #8]
 8004c28:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a1d      	ldr	r2, [pc, #116]	; (8004ca4 <HAL_I2C_MspInit+0x90>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d133      	bne.n	8004c9c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c34:	4b1c      	ldr	r3, [pc, #112]	; (8004ca8 <HAL_I2C_MspInit+0x94>)
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	4a1b      	ldr	r2, [pc, #108]	; (8004ca8 <HAL_I2C_MspInit+0x94>)
 8004c3a:	f043 0308 	orr.w	r3, r3, #8
 8004c3e:	6193      	str	r3, [r2, #24]
 8004c40:	4b19      	ldr	r3, [pc, #100]	; (8004ca8 <HAL_I2C_MspInit+0x94>)
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	f003 0308 	and.w	r3, r3, #8
 8004c48:	60fb      	str	r3, [r7, #12]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 8004c4c:	23c0      	movs	r3, #192	; 0xc0
 8004c4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c50:	2312      	movs	r3, #18
 8004c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c54:	2303      	movs	r3, #3
 8004c56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c58:	f107 0310 	add.w	r3, r7, #16
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	4813      	ldr	r0, [pc, #76]	; (8004cac <HAL_I2C_MspInit+0x98>)
 8004c60:	f000 fc6c 	bl	800553c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004c64:	4b10      	ldr	r3, [pc, #64]	; (8004ca8 <HAL_I2C_MspInit+0x94>)
 8004c66:	69db      	ldr	r3, [r3, #28]
 8004c68:	4a0f      	ldr	r2, [pc, #60]	; (8004ca8 <HAL_I2C_MspInit+0x94>)
 8004c6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c6e:	61d3      	str	r3, [r2, #28]
 8004c70:	4b0d      	ldr	r3, [pc, #52]	; (8004ca8 <HAL_I2C_MspInit+0x94>)
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c78:	60bb      	str	r3, [r7, #8]
 8004c7a:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	2105      	movs	r1, #5
 8004c80:	201f      	movs	r0, #31
 8004c82:	f000 fb0e 	bl	80052a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004c86:	201f      	movs	r0, #31
 8004c88:	f000 fb27 	bl	80052da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	2105      	movs	r1, #5
 8004c90:	2020      	movs	r0, #32
 8004c92:	f000 fb06 	bl	80052a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004c96:	2020      	movs	r0, #32
 8004c98:	f000 fb1f 	bl	80052da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004c9c:	bf00      	nop
 8004c9e:	3720      	adds	r7, #32
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40005400 	.word	0x40005400
 8004ca8:	40021000 	.word	0x40021000
 8004cac:	40010c00 	.word	0x40010c00

08004cb0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a0d      	ldr	r2, [pc, #52]	; (8004cf4 <HAL_I2C_MspDeInit+0x44>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d113      	bne.n	8004cea <HAL_I2C_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004cc2:	4b0d      	ldr	r3, [pc, #52]	; (8004cf8 <HAL_I2C_MspDeInit+0x48>)
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	4a0c      	ldr	r2, [pc, #48]	; (8004cf8 <HAL_I2C_MspDeInit+0x48>)
 8004cc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ccc:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C_SDA_GPIO_Port, I2C_SDA_Pin);
 8004cce:	2140      	movs	r1, #64	; 0x40
 8004cd0:	480a      	ldr	r0, [pc, #40]	; (8004cfc <HAL_I2C_MspDeInit+0x4c>)
 8004cd2:	f000 fdb7 	bl	8005844 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C_SCL_GPIO_Port, I2C_SCL_Pin);
 8004cd6:	2180      	movs	r1, #128	; 0x80
 8004cd8:	4808      	ldr	r0, [pc, #32]	; (8004cfc <HAL_I2C_MspDeInit+0x4c>)
 8004cda:	f000 fdb3 	bl	8005844 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8004cde:	201f      	movs	r0, #31
 8004ce0:	f000 fb09 	bl	80052f6 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8004ce4:	2020      	movs	r0, #32
 8004ce6:	f000 fb06 	bl	80052f6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8004cea:	bf00      	nop
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	40005400 	.word	0x40005400
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	40010c00 	.word	0x40010c00

08004d00 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a0b      	ldr	r2, [pc, #44]	; (8004d3c <HAL_RTC_MspInit+0x3c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d110      	bne.n	8004d34 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8004d12:	f002 fe5f 	bl	80079d4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8004d16:	4b0a      	ldr	r3, [pc, #40]	; (8004d40 <HAL_RTC_MspInit+0x40>)
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	4a09      	ldr	r2, [pc, #36]	; (8004d40 <HAL_RTC_MspInit+0x40>)
 8004d1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d20:	61d3      	str	r3, [r2, #28]
 8004d22:	4b07      	ldr	r3, [pc, #28]	; (8004d40 <HAL_RTC_MspInit+0x40>)
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d2a:	60fb      	str	r3, [r7, #12]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004d2e:	4b05      	ldr	r3, [pc, #20]	; (8004d44 <HAL_RTC_MspInit+0x44>)
 8004d30:	2201      	movs	r2, #1
 8004d32:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004d34:	bf00      	nop
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	40002800 	.word	0x40002800
 8004d40:	40021000 	.word	0x40021000
 8004d44:	4242043c 	.word	0x4242043c

08004d48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b088      	sub	sp, #32
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d50:	f107 0310 	add.w	r3, r7, #16
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]
 8004d58:	605a      	str	r2, [r3, #4]
 8004d5a:	609a      	str	r2, [r3, #8]
 8004d5c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a1c      	ldr	r2, [pc, #112]	; (8004dd4 <HAL_UART_MspInit+0x8c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d131      	bne.n	8004dcc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004d68:	4b1b      	ldr	r3, [pc, #108]	; (8004dd8 <HAL_UART_MspInit+0x90>)
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	4a1a      	ldr	r2, [pc, #104]	; (8004dd8 <HAL_UART_MspInit+0x90>)
 8004d6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d72:	6193      	str	r3, [r2, #24]
 8004d74:	4b18      	ldr	r3, [pc, #96]	; (8004dd8 <HAL_UART_MspInit+0x90>)
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d80:	4b15      	ldr	r3, [pc, #84]	; (8004dd8 <HAL_UART_MspInit+0x90>)
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	4a14      	ldr	r2, [pc, #80]	; (8004dd8 <HAL_UART_MspInit+0x90>)
 8004d86:	f043 0304 	orr.w	r3, r3, #4
 8004d8a:	6193      	str	r3, [r2, #24]
 8004d8c:	4b12      	ldr	r3, [pc, #72]	; (8004dd8 <HAL_UART_MspInit+0x90>)
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	60bb      	str	r3, [r7, #8]
 8004d96:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004d98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d9e:	2302      	movs	r3, #2
 8004da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004da2:	2303      	movs	r3, #3
 8004da4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004da6:	f107 0310 	add.w	r3, r7, #16
 8004daa:	4619      	mov	r1, r3
 8004dac:	480b      	ldr	r0, [pc, #44]	; (8004ddc <HAL_UART_MspInit+0x94>)
 8004dae:	f000 fbc5 	bl	800553c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004db2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004db6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004db8:	2300      	movs	r3, #0
 8004dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dc0:	f107 0310 	add.w	r3, r7, #16
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4805      	ldr	r0, [pc, #20]	; (8004ddc <HAL_UART_MspInit+0x94>)
 8004dc8:	f000 fbb8 	bl	800553c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004dcc:	bf00      	nop
 8004dce:	3720      	adds	r7, #32
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40013800 	.word	0x40013800
 8004dd8:	40021000 	.word	0x40021000
 8004ddc:	40010800 	.word	0x40010800

08004de0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b08c      	sub	sp, #48	; 0x30
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004de8:	2300      	movs	r3, #0
 8004dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004dec:	2300      	movs	r3, #0
 8004dee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8004df0:	2200      	movs	r2, #0
 8004df2:	6879      	ldr	r1, [r7, #4]
 8004df4:	2019      	movs	r0, #25
 8004df6:	f000 fa54 	bl	80052a2 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004dfa:	2019      	movs	r0, #25
 8004dfc:	f000 fa6d 	bl	80052da <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004e00:	4b1e      	ldr	r3, [pc, #120]	; (8004e7c <HAL_InitTick+0x9c>)
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	4a1d      	ldr	r2, [pc, #116]	; (8004e7c <HAL_InitTick+0x9c>)
 8004e06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e0a:	6193      	str	r3, [r2, #24]
 8004e0c:	4b1b      	ldr	r3, [pc, #108]	; (8004e7c <HAL_InitTick+0x9c>)
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e14:	60fb      	str	r3, [r7, #12]
 8004e16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004e18:	f107 0210 	add.w	r2, r7, #16
 8004e1c:	f107 0314 	add.w	r3, r7, #20
 8004e20:	4611      	mov	r1, r2
 8004e22:	4618      	mov	r0, r3
 8004e24:	f003 faf8 	bl	8008418 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004e28:	f003 fae2 	bl	80083f0 <HAL_RCC_GetPCLK2Freq>
 8004e2c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e30:	4a13      	ldr	r2, [pc, #76]	; (8004e80 <HAL_InitTick+0xa0>)
 8004e32:	fba2 2303 	umull	r2, r3, r2, r3
 8004e36:	0c9b      	lsrs	r3, r3, #18
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004e3c:	4b11      	ldr	r3, [pc, #68]	; (8004e84 <HAL_InitTick+0xa4>)
 8004e3e:	4a12      	ldr	r2, [pc, #72]	; (8004e88 <HAL_InitTick+0xa8>)
 8004e40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004e42:	4b10      	ldr	r3, [pc, #64]	; (8004e84 <HAL_InitTick+0xa4>)
 8004e44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004e48:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004e4a:	4a0e      	ldr	r2, [pc, #56]	; (8004e84 <HAL_InitTick+0xa4>)
 8004e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004e50:	4b0c      	ldr	r3, [pc, #48]	; (8004e84 <HAL_InitTick+0xa4>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e56:	4b0b      	ldr	r3, [pc, #44]	; (8004e84 <HAL_InitTick+0xa4>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004e5c:	4809      	ldr	r0, [pc, #36]	; (8004e84 <HAL_InitTick+0xa4>)
 8004e5e:	f004 fb1d 	bl	800949c <HAL_TIM_Base_Init>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d104      	bne.n	8004e72 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004e68:	4806      	ldr	r0, [pc, #24]	; (8004e84 <HAL_InitTick+0xa4>)
 8004e6a:	f004 fb6f 	bl	800954c <HAL_TIM_Base_Start_IT>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	e000      	b.n	8004e74 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3730      	adds	r7, #48	; 0x30
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	431bde83 	.word	0x431bde83
 8004e84:	20002fdc 	.word	0x20002fdc
 8004e88:	40012c00 	.word	0x40012c00

08004e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004e90:	e7fe      	b.n	8004e90 <NMI_Handler+0x4>

08004e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e92:	b480      	push	{r7}
 8004e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e96:	e7fe      	b.n	8004e96 <HardFault_Handler+0x4>

08004e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e9c:	e7fe      	b.n	8004e9c <MemManage_Handler+0x4>

08004e9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ea2:	e7fe      	b.n	8004ea2 <BusFault_Handler+0x4>

08004ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ea8:	e7fe      	b.n	8004ea8 <UsageFault_Handler+0x4>

08004eaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004eae:	bf00      	nop
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bc80      	pop	{r7}
 8004eb4:	4770      	bx	lr
	...

08004eb8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004ebc:	4802      	ldr	r0, [pc, #8]	; (8004ec8 <TIM1_UP_IRQHandler+0x10>)
 8004ebe:	f004 fb9f 	bl	8009600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8004ec2:	bf00      	nop
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	20002fdc 	.word	0x20002fdc

08004ecc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004ed0:	4802      	ldr	r0, [pc, #8]	; (8004edc <I2C1_EV_IRQHandler+0x10>)
 8004ed2:	f001 f8ce 	bl	8006072 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004ed6:	bf00      	nop
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	20002f10 	.word	0x20002f10

08004ee0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004ee4:	4802      	ldr	r0, [pc, #8]	; (8004ef0 <I2C1_ER_IRQHandler+0x10>)
 8004ee6:	f001 fa35 	bl	8006354 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004eea:	bf00      	nop
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	20002f10 	.word	0x20002f10

08004ef4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f00:	2300      	movs	r3, #0
 8004f02:	617b      	str	r3, [r7, #20]
 8004f04:	e00a      	b.n	8004f1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004f06:	f3af 8000 	nop.w
 8004f0a:	4601      	mov	r1, r0
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	1c5a      	adds	r2, r3, #1
 8004f10:	60ba      	str	r2, [r7, #8]
 8004f12:	b2ca      	uxtb	r2, r1
 8004f14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	dbf0      	blt.n	8004f06 <_read+0x12>
	}

return len;
 8004f24:	687b      	ldr	r3, [r7, #4]
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3718      	adds	r7, #24
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b086      	sub	sp, #24
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	60f8      	str	r0, [r7, #12]
 8004f36:	60b9      	str	r1, [r7, #8]
 8004f38:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	617b      	str	r3, [r7, #20]
 8004f3e:	e009      	b.n	8004f54 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	1c5a      	adds	r2, r3, #1
 8004f44:	60ba      	str	r2, [r7, #8]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7fc fbef 	bl	800172c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	3301      	adds	r3, #1
 8004f52:	617b      	str	r3, [r7, #20]
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	dbf1      	blt.n	8004f40 <_write+0x12>
	}
	return len;
 8004f5c:	687b      	ldr	r3, [r7, #4]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3718      	adds	r7, #24
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <_close>:

int _close(int file)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
	return -1;
 8004f6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bc80      	pop	{r7}
 8004f7a:	4770      	bx	lr

08004f7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f8c:	605a      	str	r2, [r3, #4]
	return 0;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bc80      	pop	{r7}
 8004f98:	4770      	bx	lr

08004f9a <_isatty>:

int _isatty(int file)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
	return 1;
 8004fa2:	2301      	movs	r3, #1
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bc80      	pop	{r7}
 8004fac:	4770      	bx	lr

08004fae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b085      	sub	sp, #20
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	60f8      	str	r0, [r7, #12]
 8004fb6:	60b9      	str	r1, [r7, #8]
 8004fb8:	607a      	str	r2, [r7, #4]
	return 0;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bc80      	pop	{r7}
 8004fc4:	4770      	bx	lr
	...

08004fc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004fd0:	4a14      	ldr	r2, [pc, #80]	; (8005024 <_sbrk+0x5c>)
 8004fd2:	4b15      	ldr	r3, [pc, #84]	; (8005028 <_sbrk+0x60>)
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004fdc:	4b13      	ldr	r3, [pc, #76]	; (800502c <_sbrk+0x64>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d102      	bne.n	8004fea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004fe4:	4b11      	ldr	r3, [pc, #68]	; (800502c <_sbrk+0x64>)
 8004fe6:	4a12      	ldr	r2, [pc, #72]	; (8005030 <_sbrk+0x68>)
 8004fe8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004fea:	4b10      	ldr	r3, [pc, #64]	; (800502c <_sbrk+0x64>)
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d207      	bcs.n	8005008 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ff8:	f007 ffe8 	bl	800cfcc <__errno>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	220c      	movs	r2, #12
 8005000:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005002:	f04f 33ff 	mov.w	r3, #4294967295
 8005006:	e009      	b.n	800501c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005008:	4b08      	ldr	r3, [pc, #32]	; (800502c <_sbrk+0x64>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800500e:	4b07      	ldr	r3, [pc, #28]	; (800502c <_sbrk+0x64>)
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4413      	add	r3, r2
 8005016:	4a05      	ldr	r2, [pc, #20]	; (800502c <_sbrk+0x64>)
 8005018:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800501a:	68fb      	ldr	r3, [r7, #12]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3718      	adds	r7, #24
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	20010000 	.word	0x20010000
 8005028:	00000400 	.word	0x00000400
 800502c:	20000cb4 	.word	0x20000cb4
 8005030:	20003078 	.word	0x20003078

08005034 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005034:	b480      	push	{r7}
 8005036:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005038:	bf00      	nop
 800503a:	46bd      	mov	sp, r7
 800503c:	bc80      	pop	{r7}
 800503e:	4770      	bx	lr

08005040 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005040:	480c      	ldr	r0, [pc, #48]	; (8005074 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005042:	490d      	ldr	r1, [pc, #52]	; (8005078 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005044:	4a0d      	ldr	r2, [pc, #52]	; (800507c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005048:	e002      	b.n	8005050 <LoopCopyDataInit>

0800504a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800504a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800504c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800504e:	3304      	adds	r3, #4

08005050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005054:	d3f9      	bcc.n	800504a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005056:	4a0a      	ldr	r2, [pc, #40]	; (8005080 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005058:	4c0a      	ldr	r4, [pc, #40]	; (8005084 <LoopFillZerobss+0x22>)
  movs r3, #0
 800505a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800505c:	e001      	b.n	8005062 <LoopFillZerobss>

0800505e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800505e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005060:	3204      	adds	r2, #4

08005062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005064:	d3fb      	bcc.n	800505e <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005066:	f7ff ffe5 	bl	8005034 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800506a:	f007 ffb5 	bl	800cfd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800506e:	f7ff f893 	bl	8004198 <main>
  bx lr
 8005072:	4770      	bx	lr
  ldr r0, =_sdata
 8005074:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005078:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 800507c:	0800f3f8 	.word	0x0800f3f8
  ldr r2, =_sbss
 8005080:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8005084:	20003078 	.word	0x20003078

08005088 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005088:	e7fe      	b.n	8005088 <ADC1_2_IRQHandler>
	...

0800508c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005090:	4b08      	ldr	r3, [pc, #32]	; (80050b4 <HAL_Init+0x28>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a07      	ldr	r2, [pc, #28]	; (80050b4 <HAL_Init+0x28>)
 8005096:	f043 0310 	orr.w	r3, r3, #16
 800509a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800509c:	2003      	movs	r0, #3
 800509e:	f000 f8f5 	bl	800528c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80050a2:	2000      	movs	r0, #0
 80050a4:	f7ff fe9c 	bl	8004de0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80050a8:	f7ff fd7c 	bl	8004ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	40022000 	.word	0x40022000

080050b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80050bc:	4b05      	ldr	r3, [pc, #20]	; (80050d4 <HAL_IncTick+0x1c>)
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	461a      	mov	r2, r3
 80050c2:	4b05      	ldr	r3, [pc, #20]	; (80050d8 <HAL_IncTick+0x20>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4413      	add	r3, r2
 80050c8:	4a03      	ldr	r2, [pc, #12]	; (80050d8 <HAL_IncTick+0x20>)
 80050ca:	6013      	str	r3, [r2, #0]
}
 80050cc:	bf00      	nop
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bc80      	pop	{r7}
 80050d2:	4770      	bx	lr
 80050d4:	20000038 	.word	0x20000038
 80050d8:	20003024 	.word	0x20003024

080050dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80050dc:	b480      	push	{r7}
 80050de:	af00      	add	r7, sp, #0
  return uwTick;
 80050e0:	4b02      	ldr	r3, [pc, #8]	; (80050ec <HAL_GetTick+0x10>)
 80050e2:	681b      	ldr	r3, [r3, #0]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bc80      	pop	{r7}
 80050ea:	4770      	bx	lr
 80050ec:	20003024 	.word	0x20003024

080050f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f003 0307 	and.w	r3, r3, #7
 80050fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005100:	4b0c      	ldr	r3, [pc, #48]	; (8005134 <__NVIC_SetPriorityGrouping+0x44>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800510c:	4013      	ands	r3, r2
 800510e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005118:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800511c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005122:	4a04      	ldr	r2, [pc, #16]	; (8005134 <__NVIC_SetPriorityGrouping+0x44>)
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	60d3      	str	r3, [r2, #12]
}
 8005128:	bf00      	nop
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	bc80      	pop	{r7}
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	e000ed00 	.word	0xe000ed00

08005138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005138:	b480      	push	{r7}
 800513a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800513c:	4b04      	ldr	r3, [pc, #16]	; (8005150 <__NVIC_GetPriorityGrouping+0x18>)
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	0a1b      	lsrs	r3, r3, #8
 8005142:	f003 0307 	and.w	r3, r3, #7
}
 8005146:	4618      	mov	r0, r3
 8005148:	46bd      	mov	sp, r7
 800514a:	bc80      	pop	{r7}
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	e000ed00 	.word	0xe000ed00

08005154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	4603      	mov	r3, r0
 800515c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800515e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005162:	2b00      	cmp	r3, #0
 8005164:	db0b      	blt.n	800517e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005166:	79fb      	ldrb	r3, [r7, #7]
 8005168:	f003 021f 	and.w	r2, r3, #31
 800516c:	4906      	ldr	r1, [pc, #24]	; (8005188 <__NVIC_EnableIRQ+0x34>)
 800516e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005172:	095b      	lsrs	r3, r3, #5
 8005174:	2001      	movs	r0, #1
 8005176:	fa00 f202 	lsl.w	r2, r0, r2
 800517a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	bc80      	pop	{r7}
 8005186:	4770      	bx	lr
 8005188:	e000e100 	.word	0xe000e100

0800518c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	4603      	mov	r3, r0
 8005194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800519a:	2b00      	cmp	r3, #0
 800519c:	db12      	blt.n	80051c4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800519e:	79fb      	ldrb	r3, [r7, #7]
 80051a0:	f003 021f 	and.w	r2, r3, #31
 80051a4:	490a      	ldr	r1, [pc, #40]	; (80051d0 <__NVIC_DisableIRQ+0x44>)
 80051a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051aa:	095b      	lsrs	r3, r3, #5
 80051ac:	2001      	movs	r0, #1
 80051ae:	fa00 f202 	lsl.w	r2, r0, r2
 80051b2:	3320      	adds	r3, #32
 80051b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80051b8:	f3bf 8f4f 	dsb	sy
}
 80051bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80051be:	f3bf 8f6f 	isb	sy
}
 80051c2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bc80      	pop	{r7}
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	e000e100 	.word	0xe000e100

080051d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	4603      	mov	r3, r0
 80051dc:	6039      	str	r1, [r7, #0]
 80051de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	db0a      	blt.n	80051fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	490c      	ldr	r1, [pc, #48]	; (8005220 <__NVIC_SetPriority+0x4c>)
 80051ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051f2:	0112      	lsls	r2, r2, #4
 80051f4:	b2d2      	uxtb	r2, r2
 80051f6:	440b      	add	r3, r1
 80051f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051fc:	e00a      	b.n	8005214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	b2da      	uxtb	r2, r3
 8005202:	4908      	ldr	r1, [pc, #32]	; (8005224 <__NVIC_SetPriority+0x50>)
 8005204:	79fb      	ldrb	r3, [r7, #7]
 8005206:	f003 030f 	and.w	r3, r3, #15
 800520a:	3b04      	subs	r3, #4
 800520c:	0112      	lsls	r2, r2, #4
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	440b      	add	r3, r1
 8005212:	761a      	strb	r2, [r3, #24]
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	bc80      	pop	{r7}
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	e000e100 	.word	0xe000e100
 8005224:	e000ed00 	.word	0xe000ed00

08005228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005228:	b480      	push	{r7}
 800522a:	b089      	sub	sp, #36	; 0x24
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f003 0307 	and.w	r3, r3, #7
 800523a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	f1c3 0307 	rsb	r3, r3, #7
 8005242:	2b04      	cmp	r3, #4
 8005244:	bf28      	it	cs
 8005246:	2304      	movcs	r3, #4
 8005248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	3304      	adds	r3, #4
 800524e:	2b06      	cmp	r3, #6
 8005250:	d902      	bls.n	8005258 <NVIC_EncodePriority+0x30>
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	3b03      	subs	r3, #3
 8005256:	e000      	b.n	800525a <NVIC_EncodePriority+0x32>
 8005258:	2300      	movs	r3, #0
 800525a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800525c:	f04f 32ff 	mov.w	r2, #4294967295
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	fa02 f303 	lsl.w	r3, r2, r3
 8005266:	43da      	mvns	r2, r3
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	401a      	ands	r2, r3
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005270:	f04f 31ff 	mov.w	r1, #4294967295
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	fa01 f303 	lsl.w	r3, r1, r3
 800527a:	43d9      	mvns	r1, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005280:	4313      	orrs	r3, r2
         );
}
 8005282:	4618      	mov	r0, r3
 8005284:	3724      	adds	r7, #36	; 0x24
 8005286:	46bd      	mov	sp, r7
 8005288:	bc80      	pop	{r7}
 800528a:	4770      	bx	lr

0800528c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f7ff ff2b 	bl	80050f0 <__NVIC_SetPriorityGrouping>
}
 800529a:	bf00      	nop
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b086      	sub	sp, #24
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	4603      	mov	r3, r0
 80052aa:	60b9      	str	r1, [r7, #8]
 80052ac:	607a      	str	r2, [r7, #4]
 80052ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80052b0:	2300      	movs	r3, #0
 80052b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80052b4:	f7ff ff40 	bl	8005138 <__NVIC_GetPriorityGrouping>
 80052b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	68b9      	ldr	r1, [r7, #8]
 80052be:	6978      	ldr	r0, [r7, #20]
 80052c0:	f7ff ffb2 	bl	8005228 <NVIC_EncodePriority>
 80052c4:	4602      	mov	r2, r0
 80052c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052ca:	4611      	mov	r1, r2
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7ff ff81 	bl	80051d4 <__NVIC_SetPriority>
}
 80052d2:	bf00      	nop
 80052d4:	3718      	adds	r7, #24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b082      	sub	sp, #8
 80052de:	af00      	add	r7, sp, #0
 80052e0:	4603      	mov	r3, r0
 80052e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7ff ff33 	bl	8005154 <__NVIC_EnableIRQ>
}
 80052ee:	bf00      	nop
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b082      	sub	sp, #8
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	4603      	mov	r3, r0
 80052fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005304:	4618      	mov	r0, r3
 8005306:	f7ff ff41 	bl	800518c <__NVIC_DisableIRQ>
}
 800530a:	bf00      	nop
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
	...

08005314 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800531c:	2300      	movs	r3, #0
 800531e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005326:	2b02      	cmp	r3, #2
 8005328:	d005      	beq.n	8005336 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2204      	movs	r2, #4
 800532e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	73fb      	strb	r3, [r7, #15]
 8005334:	e0d6      	b.n	80054e4 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 020e 	bic.w	r2, r2, #14
 8005344:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 0201 	bic.w	r2, r2, #1
 8005354:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	461a      	mov	r2, r3
 800535c:	4b64      	ldr	r3, [pc, #400]	; (80054f0 <HAL_DMA_Abort_IT+0x1dc>)
 800535e:	429a      	cmp	r2, r3
 8005360:	d958      	bls.n	8005414 <HAL_DMA_Abort_IT+0x100>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a63      	ldr	r2, [pc, #396]	; (80054f4 <HAL_DMA_Abort_IT+0x1e0>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d04f      	beq.n	800540c <HAL_DMA_Abort_IT+0xf8>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a61      	ldr	r2, [pc, #388]	; (80054f8 <HAL_DMA_Abort_IT+0x1e4>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d048      	beq.n	8005408 <HAL_DMA_Abort_IT+0xf4>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a60      	ldr	r2, [pc, #384]	; (80054fc <HAL_DMA_Abort_IT+0x1e8>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d040      	beq.n	8005402 <HAL_DMA_Abort_IT+0xee>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a5e      	ldr	r2, [pc, #376]	; (8005500 <HAL_DMA_Abort_IT+0x1ec>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d038      	beq.n	80053fc <HAL_DMA_Abort_IT+0xe8>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a5d      	ldr	r2, [pc, #372]	; (8005504 <HAL_DMA_Abort_IT+0x1f0>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d030      	beq.n	80053f6 <HAL_DMA_Abort_IT+0xe2>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a5b      	ldr	r2, [pc, #364]	; (8005508 <HAL_DMA_Abort_IT+0x1f4>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d028      	beq.n	80053f0 <HAL_DMA_Abort_IT+0xdc>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a53      	ldr	r2, [pc, #332]	; (80054f0 <HAL_DMA_Abort_IT+0x1dc>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d020      	beq.n	80053ea <HAL_DMA_Abort_IT+0xd6>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a57      	ldr	r2, [pc, #348]	; (800550c <HAL_DMA_Abort_IT+0x1f8>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d019      	beq.n	80053e6 <HAL_DMA_Abort_IT+0xd2>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a56      	ldr	r2, [pc, #344]	; (8005510 <HAL_DMA_Abort_IT+0x1fc>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d012      	beq.n	80053e2 <HAL_DMA_Abort_IT+0xce>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a54      	ldr	r2, [pc, #336]	; (8005514 <HAL_DMA_Abort_IT+0x200>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d00a      	beq.n	80053dc <HAL_DMA_Abort_IT+0xc8>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a53      	ldr	r2, [pc, #332]	; (8005518 <HAL_DMA_Abort_IT+0x204>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d102      	bne.n	80053d6 <HAL_DMA_Abort_IT+0xc2>
 80053d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053d4:	e01b      	b.n	800540e <HAL_DMA_Abort_IT+0xfa>
 80053d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80053da:	e018      	b.n	800540e <HAL_DMA_Abort_IT+0xfa>
 80053dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053e0:	e015      	b.n	800540e <HAL_DMA_Abort_IT+0xfa>
 80053e2:	2310      	movs	r3, #16
 80053e4:	e013      	b.n	800540e <HAL_DMA_Abort_IT+0xfa>
 80053e6:	2301      	movs	r3, #1
 80053e8:	e011      	b.n	800540e <HAL_DMA_Abort_IT+0xfa>
 80053ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053ee:	e00e      	b.n	800540e <HAL_DMA_Abort_IT+0xfa>
 80053f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80053f4:	e00b      	b.n	800540e <HAL_DMA_Abort_IT+0xfa>
 80053f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80053fa:	e008      	b.n	800540e <HAL_DMA_Abort_IT+0xfa>
 80053fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005400:	e005      	b.n	800540e <HAL_DMA_Abort_IT+0xfa>
 8005402:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005406:	e002      	b.n	800540e <HAL_DMA_Abort_IT+0xfa>
 8005408:	2310      	movs	r3, #16
 800540a:	e000      	b.n	800540e <HAL_DMA_Abort_IT+0xfa>
 800540c:	2301      	movs	r3, #1
 800540e:	4a43      	ldr	r2, [pc, #268]	; (800551c <HAL_DMA_Abort_IT+0x208>)
 8005410:	6053      	str	r3, [r2, #4]
 8005412:	e057      	b.n	80054c4 <HAL_DMA_Abort_IT+0x1b0>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a36      	ldr	r2, [pc, #216]	; (80054f4 <HAL_DMA_Abort_IT+0x1e0>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d04f      	beq.n	80054be <HAL_DMA_Abort_IT+0x1aa>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a35      	ldr	r2, [pc, #212]	; (80054f8 <HAL_DMA_Abort_IT+0x1e4>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d048      	beq.n	80054ba <HAL_DMA_Abort_IT+0x1a6>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a33      	ldr	r2, [pc, #204]	; (80054fc <HAL_DMA_Abort_IT+0x1e8>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d040      	beq.n	80054b4 <HAL_DMA_Abort_IT+0x1a0>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a32      	ldr	r2, [pc, #200]	; (8005500 <HAL_DMA_Abort_IT+0x1ec>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d038      	beq.n	80054ae <HAL_DMA_Abort_IT+0x19a>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a30      	ldr	r2, [pc, #192]	; (8005504 <HAL_DMA_Abort_IT+0x1f0>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d030      	beq.n	80054a8 <HAL_DMA_Abort_IT+0x194>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a2f      	ldr	r2, [pc, #188]	; (8005508 <HAL_DMA_Abort_IT+0x1f4>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d028      	beq.n	80054a2 <HAL_DMA_Abort_IT+0x18e>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a26      	ldr	r2, [pc, #152]	; (80054f0 <HAL_DMA_Abort_IT+0x1dc>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d020      	beq.n	800549c <HAL_DMA_Abort_IT+0x188>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a2b      	ldr	r2, [pc, #172]	; (800550c <HAL_DMA_Abort_IT+0x1f8>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d019      	beq.n	8005498 <HAL_DMA_Abort_IT+0x184>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a29      	ldr	r2, [pc, #164]	; (8005510 <HAL_DMA_Abort_IT+0x1fc>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d012      	beq.n	8005494 <HAL_DMA_Abort_IT+0x180>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a28      	ldr	r2, [pc, #160]	; (8005514 <HAL_DMA_Abort_IT+0x200>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d00a      	beq.n	800548e <HAL_DMA_Abort_IT+0x17a>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a26      	ldr	r2, [pc, #152]	; (8005518 <HAL_DMA_Abort_IT+0x204>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d102      	bne.n	8005488 <HAL_DMA_Abort_IT+0x174>
 8005482:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005486:	e01b      	b.n	80054c0 <HAL_DMA_Abort_IT+0x1ac>
 8005488:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800548c:	e018      	b.n	80054c0 <HAL_DMA_Abort_IT+0x1ac>
 800548e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005492:	e015      	b.n	80054c0 <HAL_DMA_Abort_IT+0x1ac>
 8005494:	2310      	movs	r3, #16
 8005496:	e013      	b.n	80054c0 <HAL_DMA_Abort_IT+0x1ac>
 8005498:	2301      	movs	r3, #1
 800549a:	e011      	b.n	80054c0 <HAL_DMA_Abort_IT+0x1ac>
 800549c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054a0:	e00e      	b.n	80054c0 <HAL_DMA_Abort_IT+0x1ac>
 80054a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80054a6:	e00b      	b.n	80054c0 <HAL_DMA_Abort_IT+0x1ac>
 80054a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80054ac:	e008      	b.n	80054c0 <HAL_DMA_Abort_IT+0x1ac>
 80054ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054b2:	e005      	b.n	80054c0 <HAL_DMA_Abort_IT+0x1ac>
 80054b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054b8:	e002      	b.n	80054c0 <HAL_DMA_Abort_IT+0x1ac>
 80054ba:	2310      	movs	r3, #16
 80054bc:	e000      	b.n	80054c0 <HAL_DMA_Abort_IT+0x1ac>
 80054be:	2301      	movs	r3, #1
 80054c0:	4a17      	ldr	r2, [pc, #92]	; (8005520 <HAL_DMA_Abort_IT+0x20c>)
 80054c2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d003      	beq.n	80054e4 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	4798      	blx	r3
    } 
  }
  return status;
 80054e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	40020080 	.word	0x40020080
 80054f4:	40020008 	.word	0x40020008
 80054f8:	4002001c 	.word	0x4002001c
 80054fc:	40020030 	.word	0x40020030
 8005500:	40020044 	.word	0x40020044
 8005504:	40020058 	.word	0x40020058
 8005508:	4002006c 	.word	0x4002006c
 800550c:	40020408 	.word	0x40020408
 8005510:	4002041c 	.word	0x4002041c
 8005514:	40020430 	.word	0x40020430
 8005518:	40020444 	.word	0x40020444
 800551c:	40020400 	.word	0x40020400
 8005520:	40020000 	.word	0x40020000

08005524 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8005532:	4618      	mov	r0, r3
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	bc80      	pop	{r7}
 800553a:	4770      	bx	lr

0800553c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800553c:	b480      	push	{r7}
 800553e:	b08b      	sub	sp, #44	; 0x2c
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005546:	2300      	movs	r3, #0
 8005548:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800554a:	2300      	movs	r3, #0
 800554c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800554e:	e169      	b.n	8005824 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005550:	2201      	movs	r2, #1
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	fa02 f303 	lsl.w	r3, r2, r3
 8005558:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	69fa      	ldr	r2, [r7, #28]
 8005560:	4013      	ands	r3, r2
 8005562:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	429a      	cmp	r2, r3
 800556a:	f040 8158 	bne.w	800581e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	4a9a      	ldr	r2, [pc, #616]	; (80057dc <HAL_GPIO_Init+0x2a0>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d05e      	beq.n	8005636 <HAL_GPIO_Init+0xfa>
 8005578:	4a98      	ldr	r2, [pc, #608]	; (80057dc <HAL_GPIO_Init+0x2a0>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d875      	bhi.n	800566a <HAL_GPIO_Init+0x12e>
 800557e:	4a98      	ldr	r2, [pc, #608]	; (80057e0 <HAL_GPIO_Init+0x2a4>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d058      	beq.n	8005636 <HAL_GPIO_Init+0xfa>
 8005584:	4a96      	ldr	r2, [pc, #600]	; (80057e0 <HAL_GPIO_Init+0x2a4>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d86f      	bhi.n	800566a <HAL_GPIO_Init+0x12e>
 800558a:	4a96      	ldr	r2, [pc, #600]	; (80057e4 <HAL_GPIO_Init+0x2a8>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d052      	beq.n	8005636 <HAL_GPIO_Init+0xfa>
 8005590:	4a94      	ldr	r2, [pc, #592]	; (80057e4 <HAL_GPIO_Init+0x2a8>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d869      	bhi.n	800566a <HAL_GPIO_Init+0x12e>
 8005596:	4a94      	ldr	r2, [pc, #592]	; (80057e8 <HAL_GPIO_Init+0x2ac>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d04c      	beq.n	8005636 <HAL_GPIO_Init+0xfa>
 800559c:	4a92      	ldr	r2, [pc, #584]	; (80057e8 <HAL_GPIO_Init+0x2ac>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d863      	bhi.n	800566a <HAL_GPIO_Init+0x12e>
 80055a2:	4a92      	ldr	r2, [pc, #584]	; (80057ec <HAL_GPIO_Init+0x2b0>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d046      	beq.n	8005636 <HAL_GPIO_Init+0xfa>
 80055a8:	4a90      	ldr	r2, [pc, #576]	; (80057ec <HAL_GPIO_Init+0x2b0>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d85d      	bhi.n	800566a <HAL_GPIO_Init+0x12e>
 80055ae:	2b12      	cmp	r3, #18
 80055b0:	d82a      	bhi.n	8005608 <HAL_GPIO_Init+0xcc>
 80055b2:	2b12      	cmp	r3, #18
 80055b4:	d859      	bhi.n	800566a <HAL_GPIO_Init+0x12e>
 80055b6:	a201      	add	r2, pc, #4	; (adr r2, 80055bc <HAL_GPIO_Init+0x80>)
 80055b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055bc:	08005637 	.word	0x08005637
 80055c0:	08005611 	.word	0x08005611
 80055c4:	08005623 	.word	0x08005623
 80055c8:	08005665 	.word	0x08005665
 80055cc:	0800566b 	.word	0x0800566b
 80055d0:	0800566b 	.word	0x0800566b
 80055d4:	0800566b 	.word	0x0800566b
 80055d8:	0800566b 	.word	0x0800566b
 80055dc:	0800566b 	.word	0x0800566b
 80055e0:	0800566b 	.word	0x0800566b
 80055e4:	0800566b 	.word	0x0800566b
 80055e8:	0800566b 	.word	0x0800566b
 80055ec:	0800566b 	.word	0x0800566b
 80055f0:	0800566b 	.word	0x0800566b
 80055f4:	0800566b 	.word	0x0800566b
 80055f8:	0800566b 	.word	0x0800566b
 80055fc:	0800566b 	.word	0x0800566b
 8005600:	08005619 	.word	0x08005619
 8005604:	0800562d 	.word	0x0800562d
 8005608:	4a79      	ldr	r2, [pc, #484]	; (80057f0 <HAL_GPIO_Init+0x2b4>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d013      	beq.n	8005636 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800560e:	e02c      	b.n	800566a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	623b      	str	r3, [r7, #32]
          break;
 8005616:	e029      	b.n	800566c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	3304      	adds	r3, #4
 800561e:	623b      	str	r3, [r7, #32]
          break;
 8005620:	e024      	b.n	800566c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	3308      	adds	r3, #8
 8005628:	623b      	str	r3, [r7, #32]
          break;
 800562a:	e01f      	b.n	800566c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	330c      	adds	r3, #12
 8005632:	623b      	str	r3, [r7, #32]
          break;
 8005634:	e01a      	b.n	800566c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d102      	bne.n	8005644 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800563e:	2304      	movs	r3, #4
 8005640:	623b      	str	r3, [r7, #32]
          break;
 8005642:	e013      	b.n	800566c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d105      	bne.n	8005658 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800564c:	2308      	movs	r3, #8
 800564e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	69fa      	ldr	r2, [r7, #28]
 8005654:	611a      	str	r2, [r3, #16]
          break;
 8005656:	e009      	b.n	800566c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005658:	2308      	movs	r3, #8
 800565a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	69fa      	ldr	r2, [r7, #28]
 8005660:	615a      	str	r2, [r3, #20]
          break;
 8005662:	e003      	b.n	800566c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005664:	2300      	movs	r3, #0
 8005666:	623b      	str	r3, [r7, #32]
          break;
 8005668:	e000      	b.n	800566c <HAL_GPIO_Init+0x130>
          break;
 800566a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	2bff      	cmp	r3, #255	; 0xff
 8005670:	d801      	bhi.n	8005676 <HAL_GPIO_Init+0x13a>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	e001      	b.n	800567a <HAL_GPIO_Init+0x13e>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	3304      	adds	r3, #4
 800567a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	2bff      	cmp	r3, #255	; 0xff
 8005680:	d802      	bhi.n	8005688 <HAL_GPIO_Init+0x14c>
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	e002      	b.n	800568e <HAL_GPIO_Init+0x152>
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568a:	3b08      	subs	r3, #8
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	210f      	movs	r1, #15
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	fa01 f303 	lsl.w	r3, r1, r3
 800569c:	43db      	mvns	r3, r3
 800569e:	401a      	ands	r2, r3
 80056a0:	6a39      	ldr	r1, [r7, #32]
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	fa01 f303 	lsl.w	r3, r1, r3
 80056a8:	431a      	orrs	r2, r3
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f000 80b1 	beq.w	800581e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80056bc:	4b4d      	ldr	r3, [pc, #308]	; (80057f4 <HAL_GPIO_Init+0x2b8>)
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	4a4c      	ldr	r2, [pc, #304]	; (80057f4 <HAL_GPIO_Init+0x2b8>)
 80056c2:	f043 0301 	orr.w	r3, r3, #1
 80056c6:	6193      	str	r3, [r2, #24]
 80056c8:	4b4a      	ldr	r3, [pc, #296]	; (80057f4 <HAL_GPIO_Init+0x2b8>)
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	60bb      	str	r3, [r7, #8]
 80056d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80056d4:	4a48      	ldr	r2, [pc, #288]	; (80057f8 <HAL_GPIO_Init+0x2bc>)
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	089b      	lsrs	r3, r3, #2
 80056da:	3302      	adds	r3, #2
 80056dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e4:	f003 0303 	and.w	r3, r3, #3
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	220f      	movs	r2, #15
 80056ec:	fa02 f303 	lsl.w	r3, r2, r3
 80056f0:	43db      	mvns	r3, r3
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	4013      	ands	r3, r2
 80056f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a40      	ldr	r2, [pc, #256]	; (80057fc <HAL_GPIO_Init+0x2c0>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d013      	beq.n	8005728 <HAL_GPIO_Init+0x1ec>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a3f      	ldr	r2, [pc, #252]	; (8005800 <HAL_GPIO_Init+0x2c4>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d00d      	beq.n	8005724 <HAL_GPIO_Init+0x1e8>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a3e      	ldr	r2, [pc, #248]	; (8005804 <HAL_GPIO_Init+0x2c8>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d007      	beq.n	8005720 <HAL_GPIO_Init+0x1e4>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a3d      	ldr	r2, [pc, #244]	; (8005808 <HAL_GPIO_Init+0x2cc>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d101      	bne.n	800571c <HAL_GPIO_Init+0x1e0>
 8005718:	2303      	movs	r3, #3
 800571a:	e006      	b.n	800572a <HAL_GPIO_Init+0x1ee>
 800571c:	2304      	movs	r3, #4
 800571e:	e004      	b.n	800572a <HAL_GPIO_Init+0x1ee>
 8005720:	2302      	movs	r3, #2
 8005722:	e002      	b.n	800572a <HAL_GPIO_Init+0x1ee>
 8005724:	2301      	movs	r3, #1
 8005726:	e000      	b.n	800572a <HAL_GPIO_Init+0x1ee>
 8005728:	2300      	movs	r3, #0
 800572a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800572c:	f002 0203 	and.w	r2, r2, #3
 8005730:	0092      	lsls	r2, r2, #2
 8005732:	4093      	lsls	r3, r2
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	4313      	orrs	r3, r2
 8005738:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800573a:	492f      	ldr	r1, [pc, #188]	; (80057f8 <HAL_GPIO_Init+0x2bc>)
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	089b      	lsrs	r3, r3, #2
 8005740:	3302      	adds	r3, #2
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d006      	beq.n	8005762 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005754:	4b2d      	ldr	r3, [pc, #180]	; (800580c <HAL_GPIO_Init+0x2d0>)
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	492c      	ldr	r1, [pc, #176]	; (800580c <HAL_GPIO_Init+0x2d0>)
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	4313      	orrs	r3, r2
 800575e:	600b      	str	r3, [r1, #0]
 8005760:	e006      	b.n	8005770 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005762:	4b2a      	ldr	r3, [pc, #168]	; (800580c <HAL_GPIO_Init+0x2d0>)
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	43db      	mvns	r3, r3
 800576a:	4928      	ldr	r1, [pc, #160]	; (800580c <HAL_GPIO_Init+0x2d0>)
 800576c:	4013      	ands	r3, r2
 800576e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d006      	beq.n	800578a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800577c:	4b23      	ldr	r3, [pc, #140]	; (800580c <HAL_GPIO_Init+0x2d0>)
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	4922      	ldr	r1, [pc, #136]	; (800580c <HAL_GPIO_Init+0x2d0>)
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	4313      	orrs	r3, r2
 8005786:	604b      	str	r3, [r1, #4]
 8005788:	e006      	b.n	8005798 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800578a:	4b20      	ldr	r3, [pc, #128]	; (800580c <HAL_GPIO_Init+0x2d0>)
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	43db      	mvns	r3, r3
 8005792:	491e      	ldr	r1, [pc, #120]	; (800580c <HAL_GPIO_Init+0x2d0>)
 8005794:	4013      	ands	r3, r2
 8005796:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d006      	beq.n	80057b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80057a4:	4b19      	ldr	r3, [pc, #100]	; (800580c <HAL_GPIO_Init+0x2d0>)
 80057a6:	689a      	ldr	r2, [r3, #8]
 80057a8:	4918      	ldr	r1, [pc, #96]	; (800580c <HAL_GPIO_Init+0x2d0>)
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	608b      	str	r3, [r1, #8]
 80057b0:	e006      	b.n	80057c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80057b2:	4b16      	ldr	r3, [pc, #88]	; (800580c <HAL_GPIO_Init+0x2d0>)
 80057b4:	689a      	ldr	r2, [r3, #8]
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	43db      	mvns	r3, r3
 80057ba:	4914      	ldr	r1, [pc, #80]	; (800580c <HAL_GPIO_Init+0x2d0>)
 80057bc:	4013      	ands	r3, r2
 80057be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d021      	beq.n	8005810 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80057cc:	4b0f      	ldr	r3, [pc, #60]	; (800580c <HAL_GPIO_Init+0x2d0>)
 80057ce:	68da      	ldr	r2, [r3, #12]
 80057d0:	490e      	ldr	r1, [pc, #56]	; (800580c <HAL_GPIO_Init+0x2d0>)
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	60cb      	str	r3, [r1, #12]
 80057d8:	e021      	b.n	800581e <HAL_GPIO_Init+0x2e2>
 80057da:	bf00      	nop
 80057dc:	10320000 	.word	0x10320000
 80057e0:	10310000 	.word	0x10310000
 80057e4:	10220000 	.word	0x10220000
 80057e8:	10210000 	.word	0x10210000
 80057ec:	10120000 	.word	0x10120000
 80057f0:	10110000 	.word	0x10110000
 80057f4:	40021000 	.word	0x40021000
 80057f8:	40010000 	.word	0x40010000
 80057fc:	40010800 	.word	0x40010800
 8005800:	40010c00 	.word	0x40010c00
 8005804:	40011000 	.word	0x40011000
 8005808:	40011400 	.word	0x40011400
 800580c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005810:	4b0b      	ldr	r3, [pc, #44]	; (8005840 <HAL_GPIO_Init+0x304>)
 8005812:	68da      	ldr	r2, [r3, #12]
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	43db      	mvns	r3, r3
 8005818:	4909      	ldr	r1, [pc, #36]	; (8005840 <HAL_GPIO_Init+0x304>)
 800581a:	4013      	ands	r3, r2
 800581c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	3301      	adds	r3, #1
 8005822:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	fa22 f303 	lsr.w	r3, r2, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	f47f ae8e 	bne.w	8005550 <HAL_GPIO_Init+0x14>
  }
}
 8005834:	bf00      	nop
 8005836:	bf00      	nop
 8005838:	372c      	adds	r7, #44	; 0x2c
 800583a:	46bd      	mov	sp, r7
 800583c:	bc80      	pop	{r7}
 800583e:	4770      	bx	lr
 8005840:	40010400 	.word	0x40010400

08005844 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005844:	b480      	push	{r7}
 8005846:	b089      	sub	sp, #36	; 0x24
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800584e:	2300      	movs	r3, #0
 8005850:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8005852:	e09a      	b.n	800598a <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005854:	2201      	movs	r2, #1
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	fa02 f303 	lsl.w	r3, r2, r3
 800585c:	683a      	ldr	r2, [r7, #0]
 800585e:	4013      	ands	r3, r2
 8005860:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 808d 	beq.w	8005984 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800586a:	4a4e      	ldr	r2, [pc, #312]	; (80059a4 <HAL_GPIO_DeInit+0x160>)
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	089b      	lsrs	r3, r3, #2
 8005870:	3302      	adds	r3, #2
 8005872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005876:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	f003 0303 	and.w	r3, r3, #3
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	220f      	movs	r2, #15
 8005882:	fa02 f303 	lsl.w	r3, r2, r3
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	4013      	ands	r3, r2
 800588a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a46      	ldr	r2, [pc, #280]	; (80059a8 <HAL_GPIO_DeInit+0x164>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d013      	beq.n	80058bc <HAL_GPIO_DeInit+0x78>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a45      	ldr	r2, [pc, #276]	; (80059ac <HAL_GPIO_DeInit+0x168>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d00d      	beq.n	80058b8 <HAL_GPIO_DeInit+0x74>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a44      	ldr	r2, [pc, #272]	; (80059b0 <HAL_GPIO_DeInit+0x16c>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d007      	beq.n	80058b4 <HAL_GPIO_DeInit+0x70>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a43      	ldr	r2, [pc, #268]	; (80059b4 <HAL_GPIO_DeInit+0x170>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d101      	bne.n	80058b0 <HAL_GPIO_DeInit+0x6c>
 80058ac:	2303      	movs	r3, #3
 80058ae:	e006      	b.n	80058be <HAL_GPIO_DeInit+0x7a>
 80058b0:	2304      	movs	r3, #4
 80058b2:	e004      	b.n	80058be <HAL_GPIO_DeInit+0x7a>
 80058b4:	2302      	movs	r3, #2
 80058b6:	e002      	b.n	80058be <HAL_GPIO_DeInit+0x7a>
 80058b8:	2301      	movs	r3, #1
 80058ba:	e000      	b.n	80058be <HAL_GPIO_DeInit+0x7a>
 80058bc:	2300      	movs	r3, #0
 80058be:	69fa      	ldr	r2, [r7, #28]
 80058c0:	f002 0203 	and.w	r2, r2, #3
 80058c4:	0092      	lsls	r2, r2, #2
 80058c6:	4093      	lsls	r3, r2
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d132      	bne.n	8005934 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	f003 0303 	and.w	r3, r3, #3
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	220f      	movs	r2, #15
 80058d8:	fa02 f303 	lsl.w	r3, r2, r3
 80058dc:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80058de:	4a31      	ldr	r2, [pc, #196]	; (80059a4 <HAL_GPIO_DeInit+0x160>)
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	089b      	lsrs	r3, r3, #2
 80058e4:	3302      	adds	r3, #2
 80058e6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	43da      	mvns	r2, r3
 80058ee:	482d      	ldr	r0, [pc, #180]	; (80059a4 <HAL_GPIO_DeInit+0x160>)
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	089b      	lsrs	r3, r3, #2
 80058f4:	400a      	ands	r2, r1
 80058f6:	3302      	adds	r3, #2
 80058f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80058fc:	4b2e      	ldr	r3, [pc, #184]	; (80059b8 <HAL_GPIO_DeInit+0x174>)
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	43db      	mvns	r3, r3
 8005904:	492c      	ldr	r1, [pc, #176]	; (80059b8 <HAL_GPIO_DeInit+0x174>)
 8005906:	4013      	ands	r3, r2
 8005908:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800590a:	4b2b      	ldr	r3, [pc, #172]	; (80059b8 <HAL_GPIO_DeInit+0x174>)
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	43db      	mvns	r3, r3
 8005912:	4929      	ldr	r1, [pc, #164]	; (80059b8 <HAL_GPIO_DeInit+0x174>)
 8005914:	4013      	ands	r3, r2
 8005916:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8005918:	4b27      	ldr	r3, [pc, #156]	; (80059b8 <HAL_GPIO_DeInit+0x174>)
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	43db      	mvns	r3, r3
 8005920:	4925      	ldr	r1, [pc, #148]	; (80059b8 <HAL_GPIO_DeInit+0x174>)
 8005922:	4013      	ands	r3, r2
 8005924:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8005926:	4b24      	ldr	r3, [pc, #144]	; (80059b8 <HAL_GPIO_DeInit+0x174>)
 8005928:	68da      	ldr	r2, [r3, #12]
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	43db      	mvns	r3, r3
 800592e:	4922      	ldr	r1, [pc, #136]	; (80059b8 <HAL_GPIO_DeInit+0x174>)
 8005930:	4013      	ands	r3, r2
 8005932:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	2bff      	cmp	r3, #255	; 0xff
 8005938:	d801      	bhi.n	800593e <HAL_GPIO_DeInit+0xfa>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	e001      	b.n	8005942 <HAL_GPIO_DeInit+0xfe>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	3304      	adds	r3, #4
 8005942:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	2bff      	cmp	r3, #255	; 0xff
 8005948:	d802      	bhi.n	8005950 <HAL_GPIO_DeInit+0x10c>
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	e002      	b.n	8005956 <HAL_GPIO_DeInit+0x112>
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	3b08      	subs	r3, #8
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	210f      	movs	r1, #15
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	fa01 f303 	lsl.w	r3, r1, r3
 8005964:	43db      	mvns	r3, r3
 8005966:	401a      	ands	r2, r3
 8005968:	2104      	movs	r1, #4
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	fa01 f303 	lsl.w	r3, r1, r3
 8005970:	431a      	orrs	r2, r3
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	43db      	mvns	r3, r3
 800597e:	401a      	ands	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	3301      	adds	r3, #1
 8005988:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	fa22 f303 	lsr.w	r3, r2, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	f47f af5e 	bne.w	8005854 <HAL_GPIO_DeInit+0x10>
  }
}
 8005998:	bf00      	nop
 800599a:	bf00      	nop
 800599c:	3724      	adds	r7, #36	; 0x24
 800599e:	46bd      	mov	sp, r7
 80059a0:	bc80      	pop	{r7}
 80059a2:	4770      	bx	lr
 80059a4:	40010000 	.word	0x40010000
 80059a8:	40010800 	.word	0x40010800
 80059ac:	40010c00 	.word	0x40010c00
 80059b0:	40011000 	.word	0x40011000
 80059b4:	40011400 	.word	0x40011400
 80059b8:	40010400 	.word	0x40010400

080059bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	460b      	mov	r3, r1
 80059c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	887b      	ldrh	r3, [r7, #2]
 80059ce:	4013      	ands	r3, r2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d002      	beq.n	80059da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80059d4:	2301      	movs	r3, #1
 80059d6:	73fb      	strb	r3, [r7, #15]
 80059d8:	e001      	b.n	80059de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80059da:	2300      	movs	r3, #0
 80059dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80059de:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bc80      	pop	{r7}
 80059e8:	4770      	bx	lr

080059ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b083      	sub	sp, #12
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
 80059f2:	460b      	mov	r3, r1
 80059f4:	807b      	strh	r3, [r7, #2]
 80059f6:	4613      	mov	r3, r2
 80059f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80059fa:	787b      	ldrb	r3, [r7, #1]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d003      	beq.n	8005a08 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a00:	887a      	ldrh	r2, [r7, #2]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005a06:	e003      	b.n	8005a10 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005a08:	887b      	ldrh	r3, [r7, #2]
 8005a0a:	041a      	lsls	r2, r3, #16
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	611a      	str	r2, [r3, #16]
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bc80      	pop	{r7}
 8005a18:	4770      	bx	lr

08005a1a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005a1a:	b480      	push	{r7}
 8005a1c:	b085      	sub	sp, #20
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
 8005a22:	460b      	mov	r3, r1
 8005a24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005a2c:	887a      	ldrh	r2, [r7, #2]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	4013      	ands	r3, r2
 8005a32:	041a      	lsls	r2, r3, #16
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	43d9      	mvns	r1, r3
 8005a38:	887b      	ldrh	r3, [r7, #2]
 8005a3a:	400b      	ands	r3, r1
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	611a      	str	r2, [r3, #16]
}
 8005a42:	bf00      	nop
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bc80      	pop	{r7}
 8005a4a:	4770      	bx	lr

08005a4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e12b      	b.n	8005cb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d106      	bne.n	8005a78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7ff f8ce 	bl	8004c14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2224      	movs	r2, #36	; 0x24
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0201 	bic.w	r2, r2, #1
 8005a8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005aae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005ab0:	f002 fc8a 	bl	80083c8 <HAL_RCC_GetPCLK1Freq>
 8005ab4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	4a81      	ldr	r2, [pc, #516]	; (8005cc0 <HAL_I2C_Init+0x274>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d807      	bhi.n	8005ad0 <HAL_I2C_Init+0x84>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	4a80      	ldr	r2, [pc, #512]	; (8005cc4 <HAL_I2C_Init+0x278>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	bf94      	ite	ls
 8005ac8:	2301      	movls	r3, #1
 8005aca:	2300      	movhi	r3, #0
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	e006      	b.n	8005ade <HAL_I2C_Init+0x92>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4a7d      	ldr	r2, [pc, #500]	; (8005cc8 <HAL_I2C_Init+0x27c>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	bf94      	ite	ls
 8005ad8:	2301      	movls	r3, #1
 8005ada:	2300      	movhi	r3, #0
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e0e7      	b.n	8005cb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	4a78      	ldr	r2, [pc, #480]	; (8005ccc <HAL_I2C_Init+0x280>)
 8005aea:	fba2 2303 	umull	r2, r3, r2, r3
 8005aee:	0c9b      	lsrs	r3, r3, #18
 8005af0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	430a      	orrs	r2, r1
 8005b04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	6a1b      	ldr	r3, [r3, #32]
 8005b0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	4a6a      	ldr	r2, [pc, #424]	; (8005cc0 <HAL_I2C_Init+0x274>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d802      	bhi.n	8005b20 <HAL_I2C_Init+0xd4>
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	e009      	b.n	8005b34 <HAL_I2C_Init+0xe8>
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005b26:	fb02 f303 	mul.w	r3, r2, r3
 8005b2a:	4a69      	ldr	r2, [pc, #420]	; (8005cd0 <HAL_I2C_Init+0x284>)
 8005b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b30:	099b      	lsrs	r3, r3, #6
 8005b32:	3301      	adds	r3, #1
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	6812      	ldr	r2, [r2, #0]
 8005b38:	430b      	orrs	r3, r1
 8005b3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	69db      	ldr	r3, [r3, #28]
 8005b42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005b46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	495c      	ldr	r1, [pc, #368]	; (8005cc0 <HAL_I2C_Init+0x274>)
 8005b50:	428b      	cmp	r3, r1
 8005b52:	d819      	bhi.n	8005b88 <HAL_I2C_Init+0x13c>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	1e59      	subs	r1, r3, #1
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b62:	1c59      	adds	r1, r3, #1
 8005b64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005b68:	400b      	ands	r3, r1
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00a      	beq.n	8005b84 <HAL_I2C_Init+0x138>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	1e59      	subs	r1, r3, #1
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	005b      	lsls	r3, r3, #1
 8005b78:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b82:	e051      	b.n	8005c28 <HAL_I2C_Init+0x1dc>
 8005b84:	2304      	movs	r3, #4
 8005b86:	e04f      	b.n	8005c28 <HAL_I2C_Init+0x1dc>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d111      	bne.n	8005bb4 <HAL_I2C_Init+0x168>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	1e58      	subs	r0, r3, #1
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6859      	ldr	r1, [r3, #4]
 8005b98:	460b      	mov	r3, r1
 8005b9a:	005b      	lsls	r3, r3, #1
 8005b9c:	440b      	add	r3, r1
 8005b9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	bf0c      	ite	eq
 8005bac:	2301      	moveq	r3, #1
 8005bae:	2300      	movne	r3, #0
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	e012      	b.n	8005bda <HAL_I2C_Init+0x18e>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	1e58      	subs	r0, r3, #1
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6859      	ldr	r1, [r3, #4]
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	440b      	add	r3, r1
 8005bc2:	0099      	lsls	r1, r3, #2
 8005bc4:	440b      	add	r3, r1
 8005bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bca:	3301      	adds	r3, #1
 8005bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	bf0c      	ite	eq
 8005bd4:	2301      	moveq	r3, #1
 8005bd6:	2300      	movne	r3, #0
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d001      	beq.n	8005be2 <HAL_I2C_Init+0x196>
 8005bde:	2301      	movs	r3, #1
 8005be0:	e022      	b.n	8005c28 <HAL_I2C_Init+0x1dc>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10e      	bne.n	8005c08 <HAL_I2C_Init+0x1bc>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	1e58      	subs	r0, r3, #1
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6859      	ldr	r1, [r3, #4]
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	005b      	lsls	r3, r3, #1
 8005bf6:	440b      	add	r3, r1
 8005bf8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c06:	e00f      	b.n	8005c28 <HAL_I2C_Init+0x1dc>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	1e58      	subs	r0, r3, #1
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6859      	ldr	r1, [r3, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	440b      	add	r3, r1
 8005c16:	0099      	lsls	r1, r3, #2
 8005c18:	440b      	add	r3, r1
 8005c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c1e:	3301      	adds	r3, #1
 8005c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c28:	6879      	ldr	r1, [r7, #4]
 8005c2a:	6809      	ldr	r1, [r1, #0]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	69da      	ldr	r2, [r3, #28]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	431a      	orrs	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005c56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	6911      	ldr	r1, [r2, #16]
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	68d2      	ldr	r2, [r2, #12]
 8005c62:	4311      	orrs	r1, r2
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	6812      	ldr	r2, [r2, #0]
 8005c68:	430b      	orrs	r3, r1
 8005c6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	695a      	ldr	r2, [r3, #20]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	430a      	orrs	r2, r1
 8005c86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f042 0201 	orr.w	r2, r2, #1
 8005c96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	000186a0 	.word	0x000186a0
 8005cc4:	001e847f 	.word	0x001e847f
 8005cc8:	003d08ff 	.word	0x003d08ff
 8005ccc:	431bde83 	.word	0x431bde83
 8005cd0:	10624dd3 	.word	0x10624dd3

08005cd4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e021      	b.n	8005d2a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2224      	movs	r2, #36	; 0x24
 8005cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0201 	bic.w	r2, r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7fe ffd6 	bl	8004cb0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
	...

08005d34 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b087      	sub	sp, #28
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	607a      	str	r2, [r7, #4]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	460b      	mov	r3, r1
 8005d42:	817b      	strh	r3, [r7, #10]
 8005d44:	4613      	mov	r3, r2
 8005d46:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2b20      	cmp	r3, #32
 8005d56:	f040 8085 	bne.w	8005e64 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005d5a:	4b45      	ldr	r3, [pc, #276]	; (8005e70 <HAL_I2C_Master_Transmit_IT+0x13c>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	08db      	lsrs	r3, r3, #3
 8005d60:	4a44      	ldr	r2, [pc, #272]	; (8005e74 <HAL_I2C_Master_Transmit_IT+0x140>)
 8005d62:	fba2 2303 	umull	r2, r3, r2, r3
 8005d66:	0a1a      	lsrs	r2, r3, #8
 8005d68:	4613      	mov	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4413      	add	r3, r2
 8005d6e:	009a      	lsls	r2, r3, #2
 8005d70:	4413      	add	r3, r2
 8005d72:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	3b01      	subs	r3, #1
 8005d78:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d116      	bne.n	8005dae <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2220      	movs	r2, #32
 8005d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	f043 0220 	orr.w	r2, r3, #32
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e05b      	b.n	8005e66 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d0db      	beq.n	8005d74 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d101      	bne.n	8005dca <HAL_I2C_Master_Transmit_IT+0x96>
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	e04d      	b.n	8005e66 <HAL_I2C_Master_Transmit_IT+0x132>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d007      	beq.n	8005df0 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0201 	orr.w	r2, r2, #1
 8005dee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dfe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2221      	movs	r2, #33	; 0x21
 8005e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2210      	movs	r2, #16
 8005e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	893a      	ldrh	r2, [r7, #8]
 8005e20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	4a12      	ldr	r2, [pc, #72]	; (8005e78 <HAL_I2C_Master_Transmit_IT+0x144>)
 8005e30:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8005e32:	897a      	ldrh	r2, [r7, #10]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8005e4e:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e5e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005e60:	2300      	movs	r3, #0
 8005e62:	e000      	b.n	8005e66 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8005e64:	2302      	movs	r3, #2
  }
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	371c      	adds	r7, #28
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bc80      	pop	{r7}
 8005e6e:	4770      	bx	lr
 8005e70:	20000030 	.word	0x20000030
 8005e74:	14f8b589 	.word	0x14f8b589
 8005e78:	ffff0000 	.word	0xffff0000

08005e7c <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b087      	sub	sp, #28
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	607a      	str	r2, [r7, #4]
 8005e86:	461a      	mov	r2, r3
 8005e88:	460b      	mov	r3, r1
 8005e8a:	817b      	strh	r3, [r7, #10]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005e90:	2300      	movs	r3, #0
 8005e92:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b20      	cmp	r3, #32
 8005e9e:	f040 808d 	bne.w	8005fbc <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005ea2:	4b49      	ldr	r3, [pc, #292]	; (8005fc8 <HAL_I2C_Master_Receive_IT+0x14c>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	08db      	lsrs	r3, r3, #3
 8005ea8:	4a48      	ldr	r2, [pc, #288]	; (8005fcc <HAL_I2C_Master_Receive_IT+0x150>)
 8005eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8005eae:	0a1a      	lsrs	r2, r3, #8
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	009a      	lsls	r2, r3, #2
 8005eb8:	4413      	add	r3, r2
 8005eba:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d116      	bne.n	8005ef6 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee2:	f043 0220 	orr.w	r2, r3, #32
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e063      	b.n	8005fbe <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d0db      	beq.n	8005ebc <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d101      	bne.n	8005f12 <HAL_I2C_Master_Receive_IT+0x96>
 8005f0e:	2302      	movs	r3, #2
 8005f10:	e055      	b.n	8005fbe <HAL_I2C_Master_Receive_IT+0x142>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d007      	beq.n	8005f38 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f042 0201 	orr.w	r2, r2, #1
 8005f36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2222      	movs	r2, #34	; 0x22
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2210      	movs	r2, #16
 8005f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	893a      	ldrh	r2, [r7, #8]
 8005f68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	4a16      	ldr	r2, [pc, #88]	; (8005fd0 <HAL_I2C_Master_Receive_IT+0x154>)
 8005f78:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8005f7a:	897a      	ldrh	r2, [r7, #10]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8005f96:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fa6:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fb6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	e000      	b.n	8005fbe <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8005fbc:	2302      	movs	r3, #2
  }
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	371c      	adds	r7, #28
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bc80      	pop	{r7}
 8005fc6:	4770      	bx	lr
 8005fc8:	20000030 	.word	0x20000030
 8005fcc:	14f8b589 	.word	0x14f8b589
 8005fd0:	ffff0000 	.word	0xffff0000

08005fd4 <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	460b      	mov	r3, r1
 8005fde:	807b      	strh	r3, [r7, #2]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fe6:	73fb      	strb	r3, [r7, #15]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(DevAddress);

  /* Abort Master transfer during Receive or Transmit process    */
  if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && (CurrentMode == HAL_I2C_MODE_MASTER))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d138      	bne.n	8006068 <HAL_I2C_Master_Abort_IT+0x94>
 8005ff6:	7bfb      	ldrb	r3, [r7, #15]
 8005ff8:	2b10      	cmp	r3, #16
 8005ffa:	d135      	bne.n	8006068 <HAL_I2C_Master_Abort_IT+0x94>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006002:	2b01      	cmp	r3, #1
 8006004:	d101      	bne.n	800600a <HAL_I2C_Master_Abort_IT+0x36>
 8006006:	2302      	movs	r3, #2
 8006008:	e02f      	b.n	800606a <HAL_I2C_Master_Abort_IT+0x96>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hi2c->PreviousState = I2C_STATE_NONE;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_ABORT;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2260      	movs	r2, #96	; 0x60
 800601c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800602e:	601a      	str	r2, [r3, #0]

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800603e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006054:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f001 fa92 	bl	8007588 <I2C_ITError>

    return HAL_OK;
 8006064:	2300      	movs	r3, #0
 8006066:	e000      	b.n	800606a <HAL_I2C_Master_Abort_IT+0x96>
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    /* Or periphal is not in busy state, mean there is no active sequence to be abort */
    return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
  }
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b088      	sub	sp, #32
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800607a:	2300      	movs	r3, #0
 800607c:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608a:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006092:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800609a:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800609c:	7bfb      	ldrb	r3, [r7, #15]
 800609e:	2b10      	cmp	r3, #16
 80060a0:	d003      	beq.n	80060aa <HAL_I2C_EV_IRQHandler+0x38>
 80060a2:	7bfb      	ldrb	r3, [r7, #15]
 80060a4:	2b40      	cmp	r3, #64	; 0x40
 80060a6:	f040 80c1 	bne.w	800622c <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10d      	bne.n	80060e0 <HAL_I2C_EV_IRQHandler+0x6e>
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80060ca:	d003      	beq.n	80060d4 <HAL_I2C_EV_IRQHandler+0x62>
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80060d2:	d101      	bne.n	80060d8 <HAL_I2C_EV_IRQHandler+0x66>
 80060d4:	2301      	movs	r3, #1
 80060d6:	e000      	b.n	80060da <HAL_I2C_EV_IRQHandler+0x68>
 80060d8:	2300      	movs	r3, #0
 80060da:	2b01      	cmp	r3, #1
 80060dc:	f000 8132 	beq.w	8006344 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00c      	beq.n	8006104 <HAL_I2C_EV_IRQHandler+0x92>
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	0a5b      	lsrs	r3, r3, #9
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d006      	beq.n	8006104 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f001 fc52 	bl	80079a0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 fd53 	bl	8006ba8 <I2C_Master_SB>
 8006102:	e092      	b.n	800622a <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	08db      	lsrs	r3, r3, #3
 8006108:	f003 0301 	and.w	r3, r3, #1
 800610c:	2b00      	cmp	r3, #0
 800610e:	d009      	beq.n	8006124 <HAL_I2C_EV_IRQHandler+0xb2>
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	0a5b      	lsrs	r3, r3, #9
 8006114:	f003 0301 	and.w	r3, r3, #1
 8006118:	2b00      	cmp	r3, #0
 800611a:	d003      	beq.n	8006124 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 fdc8 	bl	8006cb2 <I2C_Master_ADD10>
 8006122:	e082      	b.n	800622a <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	085b      	lsrs	r3, r3, #1
 8006128:	f003 0301 	and.w	r3, r3, #1
 800612c:	2b00      	cmp	r3, #0
 800612e:	d009      	beq.n	8006144 <HAL_I2C_EV_IRQHandler+0xd2>
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	0a5b      	lsrs	r3, r3, #9
 8006134:	f003 0301 	and.w	r3, r3, #1
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 fde1 	bl	8006d04 <I2C_Master_ADDR>
 8006142:	e072      	b.n	800622a <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	089b      	lsrs	r3, r3, #2
 8006148:	f003 0301 	and.w	r3, r3, #1
 800614c:	2b00      	cmp	r3, #0
 800614e:	d03b      	beq.n	80061c8 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800615a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800615e:	f000 80f3 	beq.w	8006348 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	09db      	lsrs	r3, r3, #7
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00f      	beq.n	800618e <HAL_I2C_EV_IRQHandler+0x11c>
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	0a9b      	lsrs	r3, r3, #10
 8006172:	f003 0301 	and.w	r3, r3, #1
 8006176:	2b00      	cmp	r3, #0
 8006178:	d009      	beq.n	800618e <HAL_I2C_EV_IRQHandler+0x11c>
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	089b      	lsrs	r3, r3, #2
 800617e:	f003 0301 	and.w	r3, r3, #1
 8006182:	2b00      	cmp	r3, #0
 8006184:	d103      	bne.n	800618e <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 f9cd 	bl	8006526 <I2C_MasterTransmit_TXE>
 800618c:	e04d      	b.n	800622a <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	089b      	lsrs	r3, r3, #2
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 80d6 	beq.w	8006348 <HAL_I2C_EV_IRQHandler+0x2d6>
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	0a5b      	lsrs	r3, r3, #9
 80061a0:	f003 0301 	and.w	r3, r3, #1
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 80cf 	beq.w	8006348 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80061aa:	7bbb      	ldrb	r3, [r7, #14]
 80061ac:	2b21      	cmp	r3, #33	; 0x21
 80061ae:	d103      	bne.n	80061b8 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fa54 	bl	800665e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061b6:	e0c7      	b.n	8006348 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80061b8:	7bfb      	ldrb	r3, [r7, #15]
 80061ba:	2b40      	cmp	r3, #64	; 0x40
 80061bc:	f040 80c4 	bne.w	8006348 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 fac2 	bl	800674a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061c6:	e0bf      	b.n	8006348 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061d6:	f000 80b7 	beq.w	8006348 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	099b      	lsrs	r3, r3, #6
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00f      	beq.n	8006206 <HAL_I2C_EV_IRQHandler+0x194>
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	0a9b      	lsrs	r3, r3, #10
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d009      	beq.n	8006206 <HAL_I2C_EV_IRQHandler+0x194>
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	089b      	lsrs	r3, r3, #2
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d103      	bne.n	8006206 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 fb37 	bl	8006872 <I2C_MasterReceive_RXNE>
 8006204:	e011      	b.n	800622a <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	089b      	lsrs	r3, r3, #2
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 809a 	beq.w	8006348 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	0a5b      	lsrs	r3, r3, #9
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 8093 	beq.w	8006348 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 fbd6 	bl	80069d4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006228:	e08e      	b.n	8006348 <HAL_I2C_EV_IRQHandler+0x2d6>
 800622a:	e08d      	b.n	8006348 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006230:	2b00      	cmp	r3, #0
 8006232:	d004      	beq.n	800623e <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	61fb      	str	r3, [r7, #28]
 800623c:	e007      	b.n	800624e <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	695b      	ldr	r3, [r3, #20]
 800624c:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	085b      	lsrs	r3, r3, #1
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b00      	cmp	r3, #0
 8006258:	d012      	beq.n	8006280 <HAL_I2C_EV_IRQHandler+0x20e>
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	0a5b      	lsrs	r3, r3, #9
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00c      	beq.n	8006280 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626a:	2b00      	cmp	r3, #0
 800626c:	d003      	beq.n	8006276 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006276:	69b9      	ldr	r1, [r7, #24]
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 ff9a 	bl	80071b2 <I2C_Slave_ADDR>
 800627e:	e066      	b.n	800634e <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	091b      	lsrs	r3, r3, #4
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	2b00      	cmp	r3, #0
 800628a:	d009      	beq.n	80062a0 <HAL_I2C_EV_IRQHandler+0x22e>
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	0a5b      	lsrs	r3, r3, #9
 8006290:	f003 0301 	and.w	r3, r3, #1
 8006294:	2b00      	cmp	r3, #0
 8006296:	d003      	beq.n	80062a0 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 ffd5 	bl	8007248 <I2C_Slave_STOPF>
 800629e:	e056      	b.n	800634e <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80062a0:	7bbb      	ldrb	r3, [r7, #14]
 80062a2:	2b21      	cmp	r3, #33	; 0x21
 80062a4:	d002      	beq.n	80062ac <HAL_I2C_EV_IRQHandler+0x23a>
 80062a6:	7bbb      	ldrb	r3, [r7, #14]
 80062a8:	2b29      	cmp	r3, #41	; 0x29
 80062aa:	d125      	bne.n	80062f8 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	09db      	lsrs	r3, r3, #7
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00f      	beq.n	80062d8 <HAL_I2C_EV_IRQHandler+0x266>
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	0a9b      	lsrs	r3, r3, #10
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d009      	beq.n	80062d8 <HAL_I2C_EV_IRQHandler+0x266>
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	089b      	lsrs	r3, r3, #2
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d103      	bne.n	80062d8 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 feb2 	bl	800703a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80062d6:	e039      	b.n	800634c <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	089b      	lsrs	r3, r3, #2
 80062dc:	f003 0301 	and.w	r3, r3, #1
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d033      	beq.n	800634c <HAL_I2C_EV_IRQHandler+0x2da>
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	0a5b      	lsrs	r3, r3, #9
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d02d      	beq.n	800634c <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 fedf 	bl	80070b4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80062f6:	e029      	b.n	800634c <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	099b      	lsrs	r3, r3, #6
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00f      	beq.n	8006324 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	0a9b      	lsrs	r3, r3, #10
 8006308:	f003 0301 	and.w	r3, r3, #1
 800630c:	2b00      	cmp	r3, #0
 800630e:	d009      	beq.n	8006324 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	089b      	lsrs	r3, r3, #2
 8006314:	f003 0301 	and.w	r3, r3, #1
 8006318:	2b00      	cmp	r3, #0
 800631a:	d103      	bne.n	8006324 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 fee9 	bl	80070f4 <I2C_SlaveReceive_RXNE>
 8006322:	e014      	b.n	800634e <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	089b      	lsrs	r3, r3, #2
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00e      	beq.n	800634e <HAL_I2C_EV_IRQHandler+0x2dc>
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	0a5b      	lsrs	r3, r3, #9
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b00      	cmp	r3, #0
 800633a:	d008      	beq.n	800634e <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 ff17 	bl	8007170 <I2C_SlaveReceive_BTF>
 8006342:	e004      	b.n	800634e <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006344:	bf00      	nop
 8006346:	e002      	b.n	800634e <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006348:	bf00      	nop
 800634a:	e000      	b.n	800634e <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800634c:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800634e:	3720      	adds	r7, #32
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b08a      	sub	sp, #40	; 0x28
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800636c:	2300      	movs	r3, #0
 800636e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006376:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006378:	6a3b      	ldr	r3, [r7, #32]
 800637a:	0a1b      	lsrs	r3, r3, #8
 800637c:	f003 0301 	and.w	r3, r3, #1
 8006380:	2b00      	cmp	r3, #0
 8006382:	d016      	beq.n	80063b2 <HAL_I2C_ER_IRQHandler+0x5e>
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	0a1b      	lsrs	r3, r3, #8
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	2b00      	cmp	r3, #0
 800638e:	d010      	beq.n	80063b2 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006392:	f043 0301 	orr.w	r3, r3, #1
 8006396:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80063a0:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063b0:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80063b2:	6a3b      	ldr	r3, [r7, #32]
 80063b4:	0a5b      	lsrs	r3, r3, #9
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00e      	beq.n	80063dc <HAL_I2C_ER_IRQHandler+0x88>
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	0a1b      	lsrs	r3, r3, #8
 80063c2:	f003 0301 	and.w	r3, r3, #1
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d008      	beq.n	80063dc <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	f043 0302 	orr.w	r3, r3, #2
 80063d0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80063da:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80063dc:	6a3b      	ldr	r3, [r7, #32]
 80063de:	0a9b      	lsrs	r3, r3, #10
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d03f      	beq.n	8006468 <HAL_I2C_ER_IRQHandler+0x114>
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	0a1b      	lsrs	r3, r3, #8
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d039      	beq.n	8006468 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80063f4:	7efb      	ldrb	r3, [r7, #27]
 80063f6:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006406:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640c:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800640e:	7ebb      	ldrb	r3, [r7, #26]
 8006410:	2b20      	cmp	r3, #32
 8006412:	d112      	bne.n	800643a <HAL_I2C_ER_IRQHandler+0xe6>
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10f      	bne.n	800643a <HAL_I2C_ER_IRQHandler+0xe6>
 800641a:	7cfb      	ldrb	r3, [r7, #19]
 800641c:	2b21      	cmp	r3, #33	; 0x21
 800641e:	d008      	beq.n	8006432 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006420:	7cfb      	ldrb	r3, [r7, #19]
 8006422:	2b29      	cmp	r3, #41	; 0x29
 8006424:	d005      	beq.n	8006432 <HAL_I2C_ER_IRQHandler+0xde>
 8006426:	7cfb      	ldrb	r3, [r7, #19]
 8006428:	2b28      	cmp	r3, #40	; 0x28
 800642a:	d106      	bne.n	800643a <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2b21      	cmp	r3, #33	; 0x21
 8006430:	d103      	bne.n	800643a <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f001 f838 	bl	80074a8 <I2C_Slave_AF>
 8006438:	e016      	b.n	8006468 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006442:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	f043 0304 	orr.w	r3, r3, #4
 800644a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800644c:	7efb      	ldrb	r3, [r7, #27]
 800644e:	2b10      	cmp	r3, #16
 8006450:	d002      	beq.n	8006458 <HAL_I2C_ER_IRQHandler+0x104>
 8006452:	7efb      	ldrb	r3, [r7, #27]
 8006454:	2b40      	cmp	r3, #64	; 0x40
 8006456:	d107      	bne.n	8006468 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006466:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	0adb      	lsrs	r3, r3, #11
 800646c:	f003 0301 	and.w	r3, r3, #1
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00e      	beq.n	8006492 <HAL_I2C_ER_IRQHandler+0x13e>
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	0a1b      	lsrs	r3, r3, #8
 8006478:	f003 0301 	and.w	r3, r3, #1
 800647c:	2b00      	cmp	r3, #0
 800647e:	d008      	beq.n	8006492 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006482:	f043 0308 	orr.w	r3, r3, #8
 8006486:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006490:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	2b00      	cmp	r3, #0
 8006496:	d008      	beq.n	80064aa <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	431a      	orrs	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f001 f86f 	bl	8007588 <I2C_ITError>
  }
}
 80064aa:	bf00      	nop
 80064ac:	3728      	adds	r7, #40	; 0x28
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b083      	sub	sp, #12
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80064ba:	bf00      	nop
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	bc80      	pop	{r7}
 80064c2:	4770      	bx	lr

080064c4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bc80      	pop	{r7}
 80064d4:	4770      	bx	lr

080064d6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b083      	sub	sp, #12
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	460b      	mov	r3, r1
 80064e0:	70fb      	strb	r3, [r7, #3]
 80064e2:	4613      	mov	r3, r2
 80064e4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80064e6:	bf00      	nop
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bc80      	pop	{r7}
 80064ee:	4770      	bx	lr

080064f0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bc80      	pop	{r7}
 8006500:	4770      	bx	lr

08006502 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006502:	b480      	push	{r7}
 8006504:	b083      	sub	sp, #12
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800650a:	bf00      	nop
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	bc80      	pop	{r7}
 8006512:	4770      	bx	lr

08006514 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	bc80      	pop	{r7}
 8006524:	4770      	bx	lr

08006526 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b084      	sub	sp, #16
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006534:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800653c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006542:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006548:	2b00      	cmp	r3, #0
 800654a:	d150      	bne.n	80065ee <I2C_MasterTransmit_TXE+0xc8>
 800654c:	7bfb      	ldrb	r3, [r7, #15]
 800654e:	2b21      	cmp	r3, #33	; 0x21
 8006550:	d14d      	bne.n	80065ee <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	2b08      	cmp	r3, #8
 8006556:	d01d      	beq.n	8006594 <I2C_MasterTransmit_TXE+0x6e>
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2b20      	cmp	r3, #32
 800655c:	d01a      	beq.n	8006594 <I2C_MasterTransmit_TXE+0x6e>
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006564:	d016      	beq.n	8006594 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006574:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2211      	movs	r2, #17
 800657a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2220      	movs	r2, #32
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f7fc f849 	bl	8002624 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006592:	e060      	b.n	8006656 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80065a2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065b2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2220      	movs	r2, #32
 80065be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b40      	cmp	r3, #64	; 0x40
 80065cc:	d107      	bne.n	80065de <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7ff ff93 	bl	8006502 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80065dc:	e03b      	b.n	8006656 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7fc f81c 	bl	8002624 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80065ec:	e033      	b.n	8006656 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80065ee:	7bfb      	ldrb	r3, [r7, #15]
 80065f0:	2b21      	cmp	r3, #33	; 0x21
 80065f2:	d005      	beq.n	8006600 <I2C_MasterTransmit_TXE+0xda>
 80065f4:	7bbb      	ldrb	r3, [r7, #14]
 80065f6:	2b40      	cmp	r3, #64	; 0x40
 80065f8:	d12d      	bne.n	8006656 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80065fa:	7bfb      	ldrb	r3, [r7, #15]
 80065fc:	2b22      	cmp	r3, #34	; 0x22
 80065fe:	d12a      	bne.n	8006656 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006604:	b29b      	uxth	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d108      	bne.n	800661c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006618:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800661a:	e01c      	b.n	8006656 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b40      	cmp	r3, #64	; 0x40
 8006626:	d103      	bne.n	8006630 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 f88e 	bl	800674a <I2C_MemoryTransmit_TXE_BTF>
}
 800662e:	e012      	b.n	8006656 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006634:	781a      	ldrb	r2, [r3, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800664a:	b29b      	uxth	r3, r3
 800664c:	3b01      	subs	r3, #1
 800664e:	b29a      	uxth	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006654:	e7ff      	b.n	8006656 <I2C_MasterTransmit_TXE+0x130>
 8006656:	bf00      	nop
 8006658:	3710      	adds	r7, #16
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}

0800665e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800665e:	b580      	push	{r7, lr}
 8006660:	b084      	sub	sp, #16
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006672:	b2db      	uxtb	r3, r3
 8006674:	2b21      	cmp	r3, #33	; 0x21
 8006676:	d164      	bne.n	8006742 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800667c:	b29b      	uxth	r3, r3
 800667e:	2b00      	cmp	r3, #0
 8006680:	d012      	beq.n	80066a8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006686:	781a      	ldrb	r2, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006692:	1c5a      	adds	r2, r3, #1
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800669c:	b29b      	uxth	r3, r3
 800669e:	3b01      	subs	r3, #1
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80066a6:	e04c      	b.n	8006742 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2b08      	cmp	r3, #8
 80066ac:	d01d      	beq.n	80066ea <I2C_MasterTransmit_BTF+0x8c>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2b20      	cmp	r3, #32
 80066b2:	d01a      	beq.n	80066ea <I2C_MasterTransmit_BTF+0x8c>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80066ba:	d016      	beq.n	80066ea <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80066ca:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2211      	movs	r2, #17
 80066d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2220      	movs	r2, #32
 80066de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f7fb ff9e 	bl	8002624 <HAL_I2C_MasterTxCpltCallback>
}
 80066e8:	e02b      	b.n	8006742 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	685a      	ldr	r2, [r3, #4]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80066f8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006708:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2220      	movs	r2, #32
 8006714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800671e:	b2db      	uxtb	r3, r3
 8006720:	2b40      	cmp	r3, #64	; 0x40
 8006722:	d107      	bne.n	8006734 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f7ff fee8 	bl	8006502 <HAL_I2C_MemTxCpltCallback>
}
 8006732:	e006      	b.n	8006742 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f7fb ff71 	bl	8002624 <HAL_I2C_MasterTxCpltCallback>
}
 8006742:	bf00      	nop
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b084      	sub	sp, #16
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006758:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800675e:	2b00      	cmp	r3, #0
 8006760:	d11d      	bne.n	800679e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006766:	2b01      	cmp	r3, #1
 8006768:	d10b      	bne.n	8006782 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800676e:	b2da      	uxtb	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800677a:	1c9a      	adds	r2, r3, #2
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006780:	e073      	b.n	800686a <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006786:	b29b      	uxth	r3, r3
 8006788:	121b      	asrs	r3, r3, #8
 800678a:	b2da      	uxtb	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006796:	1c5a      	adds	r2, r3, #1
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800679c:	e065      	b.n	800686a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d10b      	bne.n	80067be <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067b6:	1c5a      	adds	r2, r3, #1
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	651a      	str	r2, [r3, #80]	; 0x50
}
 80067bc:	e055      	b.n	800686a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d151      	bne.n	800686a <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80067c6:	7bfb      	ldrb	r3, [r7, #15]
 80067c8:	2b22      	cmp	r3, #34	; 0x22
 80067ca:	d10d      	bne.n	80067e8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067da:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067e0:	1c5a      	adds	r2, r3, #1
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80067e6:	e040      	b.n	800686a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d015      	beq.n	800681e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80067f2:	7bfb      	ldrb	r3, [r7, #15]
 80067f4:	2b21      	cmp	r3, #33	; 0x21
 80067f6:	d112      	bne.n	800681e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fc:	781a      	ldrb	r2, [r3, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006808:	1c5a      	adds	r2, r3, #1
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006812:	b29b      	uxth	r3, r3
 8006814:	3b01      	subs	r3, #1
 8006816:	b29a      	uxth	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800681c:	e025      	b.n	800686a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006822:	b29b      	uxth	r3, r3
 8006824:	2b00      	cmp	r3, #0
 8006826:	d120      	bne.n	800686a <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006828:	7bfb      	ldrb	r3, [r7, #15]
 800682a:	2b21      	cmp	r3, #33	; 0x21
 800682c:	d11d      	bne.n	800686a <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	685a      	ldr	r2, [r3, #4]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800683c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800684c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2220      	movs	r2, #32
 8006858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f7ff fe4c 	bl	8006502 <HAL_I2C_MemTxCpltCallback>
}
 800686a:	bf00      	nop
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b084      	sub	sp, #16
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b22      	cmp	r3, #34	; 0x22
 8006884:	f040 80a2 	bne.w	80069cc <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800688c:	b29b      	uxth	r3, r3
 800688e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2b03      	cmp	r3, #3
 8006894:	d921      	bls.n	80068da <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	691a      	ldr	r2, [r3, #16]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a0:	b2d2      	uxtb	r2, r2
 80068a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a8:	1c5a      	adds	r2, r3, #1
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	3b01      	subs	r3, #1
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	2b03      	cmp	r3, #3
 80068c4:	f040 8082 	bne.w	80069cc <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	685a      	ldr	r2, [r3, #4]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068d6:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80068d8:	e078      	b.n	80069cc <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d074      	beq.n	80069cc <I2C_MasterReceive_RXNE+0x15a>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d002      	beq.n	80068ee <I2C_MasterReceive_RXNE+0x7c>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d16e      	bne.n	80069cc <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f001 f824 	bl	800793c <I2C_WaitOnSTOPRequestThroughIT>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d142      	bne.n	8006980 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006908:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006918:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	691a      	ldr	r2, [r3, #16]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006924:	b2d2      	uxtb	r2, r2
 8006926:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692c:	1c5a      	adds	r2, r3, #1
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006936:	b29b      	uxth	r3, r3
 8006938:	3b01      	subs	r3, #1
 800693a:	b29a      	uxth	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2220      	movs	r2, #32
 8006944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b40      	cmp	r3, #64	; 0x40
 8006952:	d10a      	bne.n	800696a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f7ff fdd6 	bl	8006514 <HAL_I2C_MemRxCpltCallback>
}
 8006968:	e030      	b.n	80069cc <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2212      	movs	r2, #18
 8006976:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f7fb fe63 	bl	8002644 <HAL_I2C_MasterRxCpltCallback>
}
 800697e:	e025      	b.n	80069cc <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685a      	ldr	r2, [r3, #4]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800698e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	691a      	ldr	r2, [r3, #16]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699a:	b2d2      	uxtb	r2, r2
 800699c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a2:	1c5a      	adds	r2, r3, #1
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	3b01      	subs	r3, #1
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2220      	movs	r2, #32
 80069ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7fb fe4c 	bl	8002664 <HAL_I2C_ErrorCallback>
}
 80069cc:	bf00      	nop
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	2b04      	cmp	r3, #4
 80069ea:	d11b      	bne.n	8006a24 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	685a      	ldr	r2, [r3, #4]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069fa:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	691a      	ldr	r2, [r3, #16]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a06:	b2d2      	uxtb	r2, r2
 8006a08:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0e:	1c5a      	adds	r2, r3, #1
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006a22:	e0bd      	b.n	8006ba0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	2b03      	cmp	r3, #3
 8006a2c:	d129      	bne.n	8006a82 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a3c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2b04      	cmp	r3, #4
 8006a42:	d00a      	beq.n	8006a5a <I2C_MasterReceive_BTF+0x86>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d007      	beq.n	8006a5a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a58:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	691a      	ldr	r2, [r3, #16]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a64:	b2d2      	uxtb	r2, r2
 8006a66:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6c:	1c5a      	adds	r2, r3, #1
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006a80:	e08e      	b.n	8006ba0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d176      	bne.n	8006b7a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d002      	beq.n	8006a98 <I2C_MasterReceive_BTF+0xc4>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2b10      	cmp	r3, #16
 8006a96:	d108      	bne.n	8006aaa <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aa6:	601a      	str	r2, [r3, #0]
 8006aa8:	e019      	b.n	8006ade <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2b04      	cmp	r3, #4
 8006aae:	d002      	beq.n	8006ab6 <I2C_MasterReceive_BTF+0xe2>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d108      	bne.n	8006ac8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ac4:	601a      	str	r2, [r3, #0]
 8006ac6:	e00a      	b.n	8006ade <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2b10      	cmp	r3, #16
 8006acc:	d007      	beq.n	8006ade <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006adc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	691a      	ldr	r2, [r3, #16]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae8:	b2d2      	uxtb	r2, r2
 8006aea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af0:	1c5a      	adds	r2, r3, #1
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	3b01      	subs	r3, #1
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	691a      	ldr	r2, [r3, #16]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0e:	b2d2      	uxtb	r2, r2
 8006b10:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b16:	1c5a      	adds	r2, r3, #1
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	3b01      	subs	r3, #1
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006b38:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b40      	cmp	r3, #64	; 0x40
 8006b4c:	d10a      	bne.n	8006b64 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f7ff fcd9 	bl	8006514 <HAL_I2C_MemRxCpltCallback>
}
 8006b62:	e01d      	b.n	8006ba0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2212      	movs	r2, #18
 8006b70:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f7fb fd66 	bl	8002644 <HAL_I2C_MasterRxCpltCallback>
}
 8006b78:	e012      	b.n	8006ba0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	691a      	ldr	r2, [r3, #16]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b84:	b2d2      	uxtb	r2, r2
 8006b86:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8c:	1c5a      	adds	r2, r3, #1
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006ba0:	bf00      	nop
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	2b40      	cmp	r3, #64	; 0x40
 8006bba:	d117      	bne.n	8006bec <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d109      	bne.n	8006bd8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	461a      	mov	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006bd4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006bd6:	e067      	b.n	8006ca8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	f043 0301 	orr.w	r3, r3, #1
 8006be2:	b2da      	uxtb	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	611a      	str	r2, [r3, #16]
}
 8006bea:	e05d      	b.n	8006ca8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bf4:	d133      	bne.n	8006c5e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b21      	cmp	r3, #33	; 0x21
 8006c00:	d109      	bne.n	8006c16 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	461a      	mov	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006c12:	611a      	str	r2, [r3, #16]
 8006c14:	e008      	b.n	8006c28 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	f043 0301 	orr.w	r3, r3, #1
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d004      	beq.n	8006c3a <I2C_Master_SB+0x92>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d108      	bne.n	8006c4c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d032      	beq.n	8006ca8 <I2C_Master_SB+0x100>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d02d      	beq.n	8006ca8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	685a      	ldr	r2, [r3, #4]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c5a:	605a      	str	r2, [r3, #4]
}
 8006c5c:	e024      	b.n	8006ca8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10e      	bne.n	8006c84 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	11db      	asrs	r3, r3, #7
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	f003 0306 	and.w	r3, r3, #6
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	f063 030f 	orn	r3, r3, #15
 8006c7a:	b2da      	uxtb	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	611a      	str	r2, [r3, #16]
}
 8006c82:	e011      	b.n	8006ca8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d10d      	bne.n	8006ca8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	11db      	asrs	r3, r3, #7
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	f003 0306 	and.w	r3, r3, #6
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	f063 030e 	orn	r3, r3, #14
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	611a      	str	r2, [r3, #16]
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bc80      	pop	{r7}
 8006cb0:	4770      	bx	lr

08006cb2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006cb2:	b480      	push	{r7}
 8006cb4:	b083      	sub	sp, #12
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cbe:	b2da      	uxtb	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d004      	beq.n	8006cd8 <I2C_Master_ADD10+0x26>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d108      	bne.n	8006cea <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00c      	beq.n	8006cfa <I2C_Master_ADD10+0x48>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d007      	beq.n	8006cfa <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	685a      	ldr	r2, [r3, #4]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cf8:	605a      	str	r2, [r3, #4]
  }
}
 8006cfa:	bf00      	nop
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bc80      	pop	{r7}
 8006d02:	4770      	bx	lr

08006d04 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b091      	sub	sp, #68	; 0x44
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d1a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d20:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	2b22      	cmp	r3, #34	; 0x22
 8006d2c:	f040 8174 	bne.w	8007018 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10f      	bne.n	8006d58 <I2C_Master_ADDR+0x54>
 8006d38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006d3c:	2b40      	cmp	r3, #64	; 0x40
 8006d3e:	d10b      	bne.n	8006d58 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d40:	2300      	movs	r3, #0
 8006d42:	633b      	str	r3, [r7, #48]	; 0x30
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	633b      	str	r3, [r7, #48]	; 0x30
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	633b      	str	r3, [r7, #48]	; 0x30
 8006d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d56:	e16b      	b.n	8007030 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d11d      	bne.n	8006d9c <I2C_Master_ADDR+0x98>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d68:	d118      	bne.n	8006d9c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	695b      	ldr	r3, [r3, #20]
 8006d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d8e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d94:	1c5a      	adds	r2, r3, #1
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	651a      	str	r2, [r3, #80]	; 0x50
 8006d9a:	e149      	b.n	8007030 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d113      	bne.n	8006dce <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006da6:	2300      	movs	r3, #0
 8006da8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	695b      	ldr	r3, [r3, #20]
 8006db0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dba:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dca:	601a      	str	r2, [r3, #0]
 8006dcc:	e120      	b.n	8007010 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	f040 808a 	bne.w	8006eee <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ddc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006de0:	d137      	bne.n	8006e52 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006df0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e00:	d113      	bne.n	8006e2a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e10:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e12:	2300      	movs	r3, #0
 8006e14:	627b      	str	r3, [r7, #36]	; 0x24
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	695b      	ldr	r3, [r3, #20]
 8006e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	627b      	str	r3, [r7, #36]	; 0x24
 8006e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e28:	e0f2      	b.n	8007010 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	623b      	str	r3, [r7, #32]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	695b      	ldr	r3, [r3, #20]
 8006e34:	623b      	str	r3, [r7, #32]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	699b      	ldr	r3, [r3, #24]
 8006e3c:	623b      	str	r3, [r7, #32]
 8006e3e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e4e:	601a      	str	r2, [r3, #0]
 8006e50:	e0de      	b.n	8007010 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e54:	2b08      	cmp	r3, #8
 8006e56:	d02e      	beq.n	8006eb6 <I2C_Master_ADDR+0x1b2>
 8006e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5a:	2b20      	cmp	r3, #32
 8006e5c:	d02b      	beq.n	8006eb6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e60:	2b12      	cmp	r3, #18
 8006e62:	d102      	bne.n	8006e6a <I2C_Master_ADDR+0x166>
 8006e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d125      	bne.n	8006eb6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6c:	2b04      	cmp	r3, #4
 8006e6e:	d00e      	beq.n	8006e8e <I2C_Master_ADDR+0x18a>
 8006e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d00b      	beq.n	8006e8e <I2C_Master_ADDR+0x18a>
 8006e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e78:	2b10      	cmp	r3, #16
 8006e7a:	d008      	beq.n	8006e8e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e8a:	601a      	str	r2, [r3, #0]
 8006e8c:	e007      	b.n	8006e9e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e9c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	61fb      	str	r3, [r7, #28]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	61fb      	str	r3, [r7, #28]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	61fb      	str	r3, [r7, #28]
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	e0ac      	b.n	8007010 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ec4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	61bb      	str	r3, [r7, #24]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	695b      	ldr	r3, [r3, #20]
 8006ed0:	61bb      	str	r3, [r7, #24]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	61bb      	str	r3, [r7, #24]
 8006eda:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006eea:	601a      	str	r2, [r3, #0]
 8006eec:	e090      	b.n	8007010 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	d158      	bne.n	8006faa <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efa:	2b04      	cmp	r3, #4
 8006efc:	d021      	beq.n	8006f42 <I2C_Master_ADDR+0x23e>
 8006efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d01e      	beq.n	8006f42 <I2C_Master_ADDR+0x23e>
 8006f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f06:	2b10      	cmp	r3, #16
 8006f08:	d01b      	beq.n	8006f42 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f18:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	617b      	str	r3, [r7, #20]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	695b      	ldr	r3, [r3, #20]
 8006f24:	617b      	str	r3, [r7, #20]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	617b      	str	r3, [r7, #20]
 8006f2e:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f3e:	601a      	str	r2, [r3, #0]
 8006f40:	e012      	b.n	8006f68 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f50:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f52:	2300      	movs	r3, #0
 8006f54:	613b      	str	r3, [r7, #16]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	695b      	ldr	r3, [r3, #20]
 8006f5c:	613b      	str	r3, [r7, #16]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	613b      	str	r3, [r7, #16]
 8006f66:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f76:	d14b      	bne.n	8007010 <I2C_Master_ADDR+0x30c>
 8006f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f7e:	d00b      	beq.n	8006f98 <I2C_Master_ADDR+0x294>
 8006f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d008      	beq.n	8006f98 <I2C_Master_ADDR+0x294>
 8006f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f88:	2b08      	cmp	r3, #8
 8006f8a:	d005      	beq.n	8006f98 <I2C_Master_ADDR+0x294>
 8006f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8e:	2b10      	cmp	r3, #16
 8006f90:	d002      	beq.n	8006f98 <I2C_Master_ADDR+0x294>
 8006f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f94:	2b20      	cmp	r3, #32
 8006f96:	d13b      	bne.n	8007010 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	685a      	ldr	r2, [r3, #4]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006fa6:	605a      	str	r2, [r3, #4]
 8006fa8:	e032      	b.n	8007010 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006fb8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fc8:	d117      	bne.n	8006ffa <I2C_Master_ADDR+0x2f6>
 8006fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fcc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006fd0:	d00b      	beq.n	8006fea <I2C_Master_ADDR+0x2e6>
 8006fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d008      	beq.n	8006fea <I2C_Master_ADDR+0x2e6>
 8006fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fda:	2b08      	cmp	r3, #8
 8006fdc:	d005      	beq.n	8006fea <I2C_Master_ADDR+0x2e6>
 8006fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe0:	2b10      	cmp	r3, #16
 8006fe2:	d002      	beq.n	8006fea <I2C_Master_ADDR+0x2e6>
 8006fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe6:	2b20      	cmp	r3, #32
 8006fe8:	d107      	bne.n	8006ffa <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ff8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	60fb      	str	r3, [r7, #12]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	695b      	ldr	r3, [r3, #20]
 8007004:	60fb      	str	r3, [r7, #12]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	699b      	ldr	r3, [r3, #24]
 800700c:	60fb      	str	r3, [r7, #12]
 800700e:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007016:	e00b      	b.n	8007030 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007018:	2300      	movs	r3, #0
 800701a:	60bb      	str	r3, [r7, #8]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	60bb      	str	r3, [r7, #8]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	60bb      	str	r3, [r7, #8]
 800702c:	68bb      	ldr	r3, [r7, #8]
}
 800702e:	e7ff      	b.n	8007030 <I2C_Master_ADDR+0x32c>
 8007030:	bf00      	nop
 8007032:	3744      	adds	r7, #68	; 0x44
 8007034:	46bd      	mov	sp, r7
 8007036:	bc80      	pop	{r7}
 8007038:	4770      	bx	lr

0800703a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b084      	sub	sp, #16
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007048:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800704e:	b29b      	uxth	r3, r3
 8007050:	2b00      	cmp	r3, #0
 8007052:	d02b      	beq.n	80070ac <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007058:	781a      	ldrb	r2, [r3, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007064:	1c5a      	adds	r2, r3, #1
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800706e:	b29b      	uxth	r3, r3
 8007070:	3b01      	subs	r3, #1
 8007072:	b29a      	uxth	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800707c:	b29b      	uxth	r3, r3
 800707e:	2b00      	cmp	r3, #0
 8007080:	d114      	bne.n	80070ac <I2C_SlaveTransmit_TXE+0x72>
 8007082:	7bfb      	ldrb	r3, [r7, #15]
 8007084:	2b29      	cmp	r3, #41	; 0x29
 8007086:	d111      	bne.n	80070ac <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	685a      	ldr	r2, [r3, #4]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007096:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2221      	movs	r2, #33	; 0x21
 800709c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2228      	movs	r2, #40	; 0x28
 80070a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f7ff fa03 	bl	80064b2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80070ac:	bf00      	nop
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d011      	beq.n	80070ea <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ca:	781a      	ldrb	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d6:	1c5a      	adds	r2, r3, #1
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	3b01      	subs	r3, #1
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80070ea:	bf00      	nop
 80070ec:	370c      	adds	r7, #12
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bc80      	pop	{r7}
 80070f2:	4770      	bx	lr

080070f4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007102:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007108:	b29b      	uxth	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d02c      	beq.n	8007168 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	691a      	ldr	r2, [r3, #16]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007118:	b2d2      	uxtb	r2, r2
 800711a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007120:	1c5a      	adds	r2, r3, #1
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800712a:	b29b      	uxth	r3, r3
 800712c:	3b01      	subs	r3, #1
 800712e:	b29a      	uxth	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007138:	b29b      	uxth	r3, r3
 800713a:	2b00      	cmp	r3, #0
 800713c:	d114      	bne.n	8007168 <I2C_SlaveReceive_RXNE+0x74>
 800713e:	7bfb      	ldrb	r3, [r7, #15]
 8007140:	2b2a      	cmp	r3, #42	; 0x2a
 8007142:	d111      	bne.n	8007168 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	685a      	ldr	r2, [r3, #4]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007152:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2222      	movs	r2, #34	; 0x22
 8007158:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2228      	movs	r2, #40	; 0x28
 800715e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f7ff f9ae 	bl	80064c4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007168:	bf00      	nop
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800717c:	b29b      	uxth	r3, r3
 800717e:	2b00      	cmp	r3, #0
 8007180:	d012      	beq.n	80071a8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	691a      	ldr	r2, [r3, #16]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718c:	b2d2      	uxtb	r2, r2
 800718e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007194:	1c5a      	adds	r2, r3, #1
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800719e:	b29b      	uxth	r3, r3
 80071a0:	3b01      	subs	r3, #1
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80071a8:	bf00      	nop
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bc80      	pop	{r7}
 80071b0:	4770      	bx	lr

080071b2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b084      	sub	sp, #16
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
 80071ba:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80071bc:	2300      	movs	r3, #0
 80071be:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80071cc:	2b28      	cmp	r3, #40	; 0x28
 80071ce:	d127      	bne.n	8007220 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	685a      	ldr	r2, [r3, #4]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071de:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	089b      	lsrs	r3, r3, #2
 80071e4:	f003 0301 	and.w	r3, r3, #1
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d101      	bne.n	80071f0 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80071ec:	2301      	movs	r3, #1
 80071ee:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	09db      	lsrs	r3, r3, #7
 80071f4:	f003 0301 	and.w	r3, r3, #1
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d103      	bne.n	8007204 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	81bb      	strh	r3, [r7, #12]
 8007202:	e002      	b.n	800720a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007212:	89ba      	ldrh	r2, [r7, #12]
 8007214:	7bfb      	ldrb	r3, [r7, #15]
 8007216:	4619      	mov	r1, r3
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f7ff f95c 	bl	80064d6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800721e:	e00e      	b.n	800723e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007220:	2300      	movs	r3, #0
 8007222:	60bb      	str	r3, [r7, #8]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	60bb      	str	r3, [r7, #8]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	60bb      	str	r3, [r7, #8]
 8007234:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800723e:	bf00      	nop
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
	...

08007248 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007256:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	685a      	ldr	r2, [r3, #4]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007266:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007268:	2300      	movs	r3, #0
 800726a:	60bb      	str	r3, [r7, #8]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	60bb      	str	r3, [r7, #8]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f042 0201 	orr.w	r2, r2, #1
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007294:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072a4:	d172      	bne.n	800738c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80072a6:	7bfb      	ldrb	r3, [r7, #15]
 80072a8:	2b22      	cmp	r3, #34	; 0x22
 80072aa:	d002      	beq.n	80072b2 <I2C_Slave_STOPF+0x6a>
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
 80072ae:	2b2a      	cmp	r3, #42	; 0x2a
 80072b0:	d135      	bne.n	800731e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d005      	beq.n	80072d6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ce:	f043 0204 	orr.w	r2, r3, #4
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072e4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7fe f91a 	bl	8005524 <HAL_DMA_GetState>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d049      	beq.n	800738a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fa:	4a69      	ldr	r2, [pc, #420]	; (80074a0 <I2C_Slave_STOPF+0x258>)
 80072fc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007302:	4618      	mov	r0, r3
 8007304:	f7fe f806 	bl	8005314 <HAL_DMA_Abort_IT>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d03d      	beq.n	800738a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007318:	4610      	mov	r0, r2
 800731a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800731c:	e035      	b.n	800738a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	b29a      	uxth	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007330:	b29b      	uxth	r3, r3
 8007332:	2b00      	cmp	r3, #0
 8007334:	d005      	beq.n	8007342 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733a:	f043 0204 	orr.w	r2, r3, #4
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	685a      	ldr	r2, [r3, #4]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007350:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007356:	4618      	mov	r0, r3
 8007358:	f7fe f8e4 	bl	8005524 <HAL_DMA_GetState>
 800735c:	4603      	mov	r3, r0
 800735e:	2b01      	cmp	r3, #1
 8007360:	d014      	beq.n	800738c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007366:	4a4e      	ldr	r2, [pc, #312]	; (80074a0 <I2C_Slave_STOPF+0x258>)
 8007368:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800736e:	4618      	mov	r0, r3
 8007370:	f7fd ffd0 	bl	8005314 <HAL_DMA_Abort_IT>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d008      	beq.n	800738c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800737e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007384:	4610      	mov	r0, r2
 8007386:	4798      	blx	r3
 8007388:	e000      	b.n	800738c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800738a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007390:	b29b      	uxth	r3, r3
 8007392:	2b00      	cmp	r3, #0
 8007394:	d03e      	beq.n	8007414 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	695b      	ldr	r3, [r3, #20]
 800739c:	f003 0304 	and.w	r3, r3, #4
 80073a0:	2b04      	cmp	r3, #4
 80073a2:	d112      	bne.n	80073ca <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	691a      	ldr	r2, [r3, #16]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ae:	b2d2      	uxtb	r2, r2
 80073b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b6:	1c5a      	adds	r2, r3, #1
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	3b01      	subs	r3, #1
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	695b      	ldr	r3, [r3, #20]
 80073d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d4:	2b40      	cmp	r3, #64	; 0x40
 80073d6:	d112      	bne.n	80073fe <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	691a      	ldr	r2, [r3, #16]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e2:	b2d2      	uxtb	r2, r2
 80073e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ea:	1c5a      	adds	r2, r3, #1
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	3b01      	subs	r3, #1
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007402:	b29b      	uxth	r3, r3
 8007404:	2b00      	cmp	r3, #0
 8007406:	d005      	beq.n	8007414 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740c:	f043 0204 	orr.w	r2, r3, #4
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007418:	2b00      	cmp	r3, #0
 800741a:	d003      	beq.n	8007424 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 f8b3 	bl	8007588 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007422:	e039      	b.n	8007498 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007424:	7bfb      	ldrb	r3, [r7, #15]
 8007426:	2b2a      	cmp	r3, #42	; 0x2a
 8007428:	d109      	bne.n	800743e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2228      	movs	r2, #40	; 0x28
 8007434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f7ff f843 	bl	80064c4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b28      	cmp	r3, #40	; 0x28
 8007448:	d111      	bne.n	800746e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a15      	ldr	r2, [pc, #84]	; (80074a4 <I2C_Slave_STOPF+0x25c>)
 800744e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2220      	movs	r2, #32
 800745a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f7ff f842 	bl	80064f0 <HAL_I2C_ListenCpltCallback>
}
 800746c:	e014      	b.n	8007498 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007472:	2b22      	cmp	r3, #34	; 0x22
 8007474:	d002      	beq.n	800747c <I2C_Slave_STOPF+0x234>
 8007476:	7bfb      	ldrb	r3, [r7, #15]
 8007478:	2b22      	cmp	r3, #34	; 0x22
 800747a:	d10d      	bne.n	8007498 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2220      	movs	r2, #32
 8007486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f7ff f816 	bl	80064c4 <HAL_I2C_SlaveRxCpltCallback>
}
 8007498:	bf00      	nop
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	080077ed 	.word	0x080077ed
 80074a4:	ffff0000 	.word	0xffff0000

080074a8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074b6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074bc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	2b08      	cmp	r3, #8
 80074c2:	d002      	beq.n	80074ca <I2C_Slave_AF+0x22>
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	2b20      	cmp	r3, #32
 80074c8:	d129      	bne.n	800751e <I2C_Slave_AF+0x76>
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
 80074cc:	2b28      	cmp	r3, #40	; 0x28
 80074ce:	d126      	bne.n	800751e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a2c      	ldr	r2, [pc, #176]	; (8007584 <I2C_Slave_AF+0xdc>)
 80074d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	685a      	ldr	r2, [r3, #4]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80074e4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074ee:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074fe:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2220      	movs	r2, #32
 800750a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f7fe ffea 	bl	80064f0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800751c:	e02e      	b.n	800757c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800751e:	7bfb      	ldrb	r3, [r7, #15]
 8007520:	2b21      	cmp	r3, #33	; 0x21
 8007522:	d126      	bne.n	8007572 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4a17      	ldr	r2, [pc, #92]	; (8007584 <I2C_Slave_AF+0xdc>)
 8007528:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2221      	movs	r2, #33	; 0x21
 800752e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2220      	movs	r2, #32
 8007534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	685a      	ldr	r2, [r3, #4]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800754e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007558:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007568:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f7fe ffa1 	bl	80064b2 <HAL_I2C_SlaveTxCpltCallback>
}
 8007570:	e004      	b.n	800757c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800757a:	615a      	str	r2, [r3, #20]
}
 800757c:	bf00      	nop
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	ffff0000 	.word	0xffff0000

08007588 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007596:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800759e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80075a0:	7bbb      	ldrb	r3, [r7, #14]
 80075a2:	2b10      	cmp	r3, #16
 80075a4:	d002      	beq.n	80075ac <I2C_ITError+0x24>
 80075a6:	7bbb      	ldrb	r3, [r7, #14]
 80075a8:	2b40      	cmp	r3, #64	; 0x40
 80075aa:	d10a      	bne.n	80075c2 <I2C_ITError+0x3a>
 80075ac:	7bfb      	ldrb	r3, [r7, #15]
 80075ae:	2b22      	cmp	r3, #34	; 0x22
 80075b0:	d107      	bne.n	80075c2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075c0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80075c2:	7bfb      	ldrb	r3, [r7, #15]
 80075c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80075c8:	2b28      	cmp	r3, #40	; 0x28
 80075ca:	d107      	bne.n	80075dc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2228      	movs	r2, #40	; 0x28
 80075d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80075da:	e015      	b.n	8007608 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075ea:	d00a      	beq.n	8007602 <I2C_ITError+0x7a>
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
 80075ee:	2b60      	cmp	r3, #96	; 0x60
 80075f0:	d007      	beq.n	8007602 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2220      	movs	r2, #32
 80075f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007612:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007616:	d161      	bne.n	80076dc <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	685a      	ldr	r2, [r3, #4]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007626:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800762c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007630:	2b01      	cmp	r3, #1
 8007632:	d020      	beq.n	8007676 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007638:	4a6a      	ldr	r2, [pc, #424]	; (80077e4 <I2C_ITError+0x25c>)
 800763a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007640:	4618      	mov	r0, r3
 8007642:	f7fd fe67 	bl	8005314 <HAL_DMA_Abort_IT>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	f000 8089 	beq.w	8007760 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f022 0201 	bic.w	r2, r2, #1
 800765c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2220      	movs	r2, #32
 8007662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800766a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007670:	4610      	mov	r0, r2
 8007672:	4798      	blx	r3
 8007674:	e074      	b.n	8007760 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767a:	4a5a      	ldr	r2, [pc, #360]	; (80077e4 <I2C_ITError+0x25c>)
 800767c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007682:	4618      	mov	r0, r3
 8007684:	f7fd fe46 	bl	8005314 <HAL_DMA_Abort_IT>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d068      	beq.n	8007760 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	695b      	ldr	r3, [r3, #20]
 8007694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007698:	2b40      	cmp	r3, #64	; 0x40
 800769a:	d10b      	bne.n	80076b4 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	691a      	ldr	r2, [r3, #16]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a6:	b2d2      	uxtb	r2, r2
 80076a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ae:	1c5a      	adds	r2, r3, #1
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f022 0201 	bic.w	r2, r2, #1
 80076c2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2220      	movs	r2, #32
 80076c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80076d6:	4610      	mov	r0, r2
 80076d8:	4798      	blx	r3
 80076da:	e041      	b.n	8007760 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	2b60      	cmp	r3, #96	; 0x60
 80076e6:	d125      	bne.n	8007734 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2220      	movs	r2, #32
 80076ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	695b      	ldr	r3, [r3, #20]
 80076fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007700:	2b40      	cmp	r3, #64	; 0x40
 8007702:	d10b      	bne.n	800771c <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	691a      	ldr	r2, [r3, #16]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770e:	b2d2      	uxtb	r2, r2
 8007710:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007716:	1c5a      	adds	r2, r3, #1
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f022 0201 	bic.w	r2, r2, #1
 800772a:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f7fa ffa5 	bl	800267c <HAL_I2C_AbortCpltCallback>
 8007732:	e015      	b.n	8007760 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	695b      	ldr	r3, [r3, #20]
 800773a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800773e:	2b40      	cmp	r3, #64	; 0x40
 8007740:	d10b      	bne.n	800775a <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	691a      	ldr	r2, [r3, #16]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774c:	b2d2      	uxtb	r2, r2
 800774e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007754:	1c5a      	adds	r2, r3, #1
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f7fa ff82 	bl	8002664 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007764:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	f003 0301 	and.w	r3, r3, #1
 800776c:	2b00      	cmp	r3, #0
 800776e:	d10e      	bne.n	800778e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007776:	2b00      	cmp	r3, #0
 8007778:	d109      	bne.n	800778e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007780:	2b00      	cmp	r3, #0
 8007782:	d104      	bne.n	800778e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800778a:	2b00      	cmp	r3, #0
 800778c:	d007      	beq.n	800779e <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	685a      	ldr	r2, [r3, #4]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800779c:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077a4:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077aa:	f003 0304 	and.w	r3, r3, #4
 80077ae:	2b04      	cmp	r3, #4
 80077b0:	d113      	bne.n	80077da <I2C_ITError+0x252>
 80077b2:	7bfb      	ldrb	r3, [r7, #15]
 80077b4:	2b28      	cmp	r3, #40	; 0x28
 80077b6:	d110      	bne.n	80077da <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a0b      	ldr	r2, [pc, #44]	; (80077e8 <I2C_ITError+0x260>)
 80077bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2220      	movs	r2, #32
 80077c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f7fe fe8b 	bl	80064f0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80077da:	bf00      	nop
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	080077ed 	.word	0x080077ed
 80077e8:	ffff0000 	.word	0xffff0000

080077ec <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b086      	sub	sp, #24
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077f4:	2300      	movs	r3, #0
 80077f6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007804:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007806:	4b4b      	ldr	r3, [pc, #300]	; (8007934 <I2C_DMAAbort+0x148>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	08db      	lsrs	r3, r3, #3
 800780c:	4a4a      	ldr	r2, [pc, #296]	; (8007938 <I2C_DMAAbort+0x14c>)
 800780e:	fba2 2303 	umull	r2, r3, r2, r3
 8007812:	0a1a      	lsrs	r2, r3, #8
 8007814:	4613      	mov	r3, r2
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	4413      	add	r3, r2
 800781a:	00da      	lsls	r2, r3, #3
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d106      	bne.n	8007834 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782a:	f043 0220 	orr.w	r2, r3, #32
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007832:	e00a      	b.n	800784a <I2C_DMAAbort+0x5e>
    }
    count--;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	3b01      	subs	r3, #1
 8007838:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007844:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007848:	d0ea      	beq.n	8007820 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800784e:	2b00      	cmp	r3, #0
 8007850:	d003      	beq.n	800785a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007856:	2200      	movs	r2, #0
 8007858:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785e:	2b00      	cmp	r3, #0
 8007860:	d003      	beq.n	800786a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007866:	2200      	movs	r2, #0
 8007868:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007878:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	2200      	movs	r2, #0
 800787e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007884:	2b00      	cmp	r3, #0
 8007886:	d003      	beq.n	8007890 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800788c:	2200      	movs	r2, #0
 800788e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007894:	2b00      	cmp	r3, #0
 8007896:	d003      	beq.n	80078a0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789c:	2200      	movs	r2, #0
 800789e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f022 0201 	bic.w	r2, r2, #1
 80078ae:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	2b60      	cmp	r3, #96	; 0x60
 80078ba:	d10e      	bne.n	80078da <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	2220      	movs	r2, #32
 80078c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	2200      	movs	r2, #0
 80078d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80078d2:	6978      	ldr	r0, [r7, #20]
 80078d4:	f7fa fed2 	bl	800267c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80078d8:	e027      	b.n	800792a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80078da:	7cfb      	ldrb	r3, [r7, #19]
 80078dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80078e0:	2b28      	cmp	r3, #40	; 0x28
 80078e2:	d117      	bne.n	8007914 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f042 0201 	orr.w	r2, r2, #1
 80078f2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007902:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	2200      	movs	r2, #0
 8007908:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	2228      	movs	r2, #40	; 0x28
 800790e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007912:	e007      	b.n	8007924 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	2220      	movs	r2, #32
 8007918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007924:	6978      	ldr	r0, [r7, #20]
 8007926:	f7fa fe9d 	bl	8002664 <HAL_I2C_ErrorCallback>
}
 800792a:	bf00      	nop
 800792c:	3718      	adds	r7, #24
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	20000030 	.word	0x20000030
 8007938:	14f8b589 	.word	0x14f8b589

0800793c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800793c:	b480      	push	{r7}
 800793e:	b085      	sub	sp, #20
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007944:	2300      	movs	r3, #0
 8007946:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007948:	4b13      	ldr	r3, [pc, #76]	; (8007998 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	08db      	lsrs	r3, r3, #3
 800794e:	4a13      	ldr	r2, [pc, #76]	; (800799c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007950:	fba2 2303 	umull	r2, r3, r2, r3
 8007954:	0a1a      	lsrs	r2, r3, #8
 8007956:	4613      	mov	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4413      	add	r3, r2
 800795c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	3b01      	subs	r3, #1
 8007962:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d107      	bne.n	800797a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796e:	f043 0220 	orr.w	r2, r3, #32
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e008      	b.n	800798c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007988:	d0e9      	beq.n	800795e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3714      	adds	r7, #20
 8007990:	46bd      	mov	sp, r7
 8007992:	bc80      	pop	{r7}
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	20000030 	.word	0x20000030
 800799c:	14f8b589 	.word	0x14f8b589

080079a0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ac:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80079b0:	d103      	bne.n	80079ba <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2201      	movs	r2, #1
 80079b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80079b8:	e007      	b.n	80079ca <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079be:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80079c2:	d102      	bne.n	80079ca <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2208      	movs	r2, #8
 80079c8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80079ca:	bf00      	nop
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bc80      	pop	{r7}
 80079d2:	4770      	bx	lr

080079d4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80079d4:	b480      	push	{r7}
 80079d6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80079d8:	4b03      	ldr	r3, [pc, #12]	; (80079e8 <HAL_PWR_EnableBkUpAccess+0x14>)
 80079da:	2201      	movs	r2, #1
 80079dc:	601a      	str	r2, [r3, #0]
}
 80079de:	bf00      	nop
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bc80      	pop	{r7}
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	420e0020 	.word	0x420e0020

080079ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b086      	sub	sp, #24
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d101      	bne.n	80079fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	e304      	b.n	8008008 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f000 8087 	beq.w	8007b1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007a0c:	4b92      	ldr	r3, [pc, #584]	; (8007c58 <HAL_RCC_OscConfig+0x26c>)
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	f003 030c 	and.w	r3, r3, #12
 8007a14:	2b04      	cmp	r3, #4
 8007a16:	d00c      	beq.n	8007a32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007a18:	4b8f      	ldr	r3, [pc, #572]	; (8007c58 <HAL_RCC_OscConfig+0x26c>)
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	f003 030c 	and.w	r3, r3, #12
 8007a20:	2b08      	cmp	r3, #8
 8007a22:	d112      	bne.n	8007a4a <HAL_RCC_OscConfig+0x5e>
 8007a24:	4b8c      	ldr	r3, [pc, #560]	; (8007c58 <HAL_RCC_OscConfig+0x26c>)
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a30:	d10b      	bne.n	8007a4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a32:	4b89      	ldr	r3, [pc, #548]	; (8007c58 <HAL_RCC_OscConfig+0x26c>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d06c      	beq.n	8007b18 <HAL_RCC_OscConfig+0x12c>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d168      	bne.n	8007b18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e2de      	b.n	8008008 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a52:	d106      	bne.n	8007a62 <HAL_RCC_OscConfig+0x76>
 8007a54:	4b80      	ldr	r3, [pc, #512]	; (8007c58 <HAL_RCC_OscConfig+0x26c>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a7f      	ldr	r2, [pc, #508]	; (8007c58 <HAL_RCC_OscConfig+0x26c>)
 8007a5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a5e:	6013      	str	r3, [r2, #0]
 8007a60:	e02e      	b.n	8007ac0 <HAL_RCC_OscConfig+0xd4>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d10c      	bne.n	8007a84 <HAL_RCC_OscConfig+0x98>
 8007a6a:	4b7b      	ldr	r3, [pc, #492]	; (8007c58 <HAL_RCC_OscConfig+0x26c>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a7a      	ldr	r2, [pc, #488]	; (8007c58 <HAL_RCC_OscConfig+0x26c>)
 8007a70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a74:	6013      	str	r3, [r2, #0]
 8007a76:	4b78      	ldr	r3, [pc, #480]	; (8007c58 <HAL_RCC_OscConfig+0x26c>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a77      	ldr	r2, [pc, #476]	; (8007c58 <HAL_RCC_OscConfig+0x26c>)
 8007a7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a80:	6013      	str	r3, [r2, #0]
 8007a82:	e01d      	b.n	8007ac0 <HAL_RCC_OscConfig+0xd4>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a8c:	d10c      	bne.n	8007aa8 <HAL_RCC_OscConfig+0xbc>
 8007a8e:	4b72      	ldr	r3, [pc, #456]	; (8007c58 <HAL_RCC_OscConfig+0x26c>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a71      	ldr	r2, [pc, #452]	; (8007c58 <HAL_RCC_OscConfig+0x26c>)
 8007a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a98:	6013      	str	r3, [r2, #0]
 8007a9a:	4b6f      	ldr	r3, [pc, #444]	; (8007c58 <HAL_RCC_OscConfig+0x26c>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a6e      	ldr	r2, [pc, #440]	; (8007c58 <HAL_RCC_OscConfig+0x26c>)
 8007aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007aa4:	6013      	str	r3, [r2, #0]
 8007aa6:	e00b      	b.n	8007ac0 <HAL_RCC_OscConfig+0xd4>
 8007aa8:	4b6b      	ldr	r3, [pc, #428]	; (8007c58 <HAL_RCC_OscConfig+0x26c>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a6a      	ldr	r2, [pc, #424]	; (8007c58 <HAL_RCC_OscConfig+0x26c>)
 8007aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ab2:	6013      	str	r3, [r2, #0]
 8007ab4:	4b68      	ldr	r3, [pc, #416]	; (8007c58 <HAL_RCC_OscConfig+0x26c>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a67      	ldr	r2, [pc, #412]	; (8007c58 <HAL_RCC_OscConfig+0x26c>)
 8007aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007abe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d013      	beq.n	8007af0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ac8:	f7fd fb08 	bl	80050dc <HAL_GetTick>
 8007acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ace:	e008      	b.n	8007ae2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ad0:	f7fd fb04 	bl	80050dc <HAL_GetTick>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	2b64      	cmp	r3, #100	; 0x64
 8007adc:	d901      	bls.n	8007ae2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e292      	b.n	8008008 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ae2:	4b5d      	ldr	r3, [pc, #372]	; (8007c58 <HAL_RCC_OscConfig+0x26c>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d0f0      	beq.n	8007ad0 <HAL_RCC_OscConfig+0xe4>
 8007aee:	e014      	b.n	8007b1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007af0:	f7fd faf4 	bl	80050dc <HAL_GetTick>
 8007af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007af6:	e008      	b.n	8007b0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007af8:	f7fd faf0 	bl	80050dc <HAL_GetTick>
 8007afc:	4602      	mov	r2, r0
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	1ad3      	subs	r3, r2, r3
 8007b02:	2b64      	cmp	r3, #100	; 0x64
 8007b04:	d901      	bls.n	8007b0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007b06:	2303      	movs	r3, #3
 8007b08:	e27e      	b.n	8008008 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b0a:	4b53      	ldr	r3, [pc, #332]	; (8007c58 <HAL_RCC_OscConfig+0x26c>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1f0      	bne.n	8007af8 <HAL_RCC_OscConfig+0x10c>
 8007b16:	e000      	b.n	8007b1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 0302 	and.w	r3, r3, #2
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d063      	beq.n	8007bee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007b26:	4b4c      	ldr	r3, [pc, #304]	; (8007c58 <HAL_RCC_OscConfig+0x26c>)
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	f003 030c 	and.w	r3, r3, #12
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00b      	beq.n	8007b4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007b32:	4b49      	ldr	r3, [pc, #292]	; (8007c58 <HAL_RCC_OscConfig+0x26c>)
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	f003 030c 	and.w	r3, r3, #12
 8007b3a:	2b08      	cmp	r3, #8
 8007b3c:	d11c      	bne.n	8007b78 <HAL_RCC_OscConfig+0x18c>
 8007b3e:	4b46      	ldr	r3, [pc, #280]	; (8007c58 <HAL_RCC_OscConfig+0x26c>)
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d116      	bne.n	8007b78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b4a:	4b43      	ldr	r3, [pc, #268]	; (8007c58 <HAL_RCC_OscConfig+0x26c>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f003 0302 	and.w	r3, r3, #2
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d005      	beq.n	8007b62 <HAL_RCC_OscConfig+0x176>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	695b      	ldr	r3, [r3, #20]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d001      	beq.n	8007b62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e252      	b.n	8008008 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b62:	4b3d      	ldr	r3, [pc, #244]	; (8007c58 <HAL_RCC_OscConfig+0x26c>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	699b      	ldr	r3, [r3, #24]
 8007b6e:	00db      	lsls	r3, r3, #3
 8007b70:	4939      	ldr	r1, [pc, #228]	; (8007c58 <HAL_RCC_OscConfig+0x26c>)
 8007b72:	4313      	orrs	r3, r2
 8007b74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b76:	e03a      	b.n	8007bee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	695b      	ldr	r3, [r3, #20]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d020      	beq.n	8007bc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b80:	4b36      	ldr	r3, [pc, #216]	; (8007c5c <HAL_RCC_OscConfig+0x270>)
 8007b82:	2201      	movs	r2, #1
 8007b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b86:	f7fd faa9 	bl	80050dc <HAL_GetTick>
 8007b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b8c:	e008      	b.n	8007ba0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b8e:	f7fd faa5 	bl	80050dc <HAL_GetTick>
 8007b92:	4602      	mov	r2, r0
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	1ad3      	subs	r3, r2, r3
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d901      	bls.n	8007ba0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	e233      	b.n	8008008 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ba0:	4b2d      	ldr	r3, [pc, #180]	; (8007c58 <HAL_RCC_OscConfig+0x26c>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 0302 	and.w	r3, r3, #2
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d0f0      	beq.n	8007b8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bac:	4b2a      	ldr	r3, [pc, #168]	; (8007c58 <HAL_RCC_OscConfig+0x26c>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	699b      	ldr	r3, [r3, #24]
 8007bb8:	00db      	lsls	r3, r3, #3
 8007bba:	4927      	ldr	r1, [pc, #156]	; (8007c58 <HAL_RCC_OscConfig+0x26c>)
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	600b      	str	r3, [r1, #0]
 8007bc0:	e015      	b.n	8007bee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007bc2:	4b26      	ldr	r3, [pc, #152]	; (8007c5c <HAL_RCC_OscConfig+0x270>)
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bc8:	f7fd fa88 	bl	80050dc <HAL_GetTick>
 8007bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bce:	e008      	b.n	8007be2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007bd0:	f7fd fa84 	bl	80050dc <HAL_GetTick>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	1ad3      	subs	r3, r2, r3
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d901      	bls.n	8007be2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	e212      	b.n	8008008 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007be2:	4b1d      	ldr	r3, [pc, #116]	; (8007c58 <HAL_RCC_OscConfig+0x26c>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 0302 	and.w	r3, r3, #2
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1f0      	bne.n	8007bd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 0308 	and.w	r3, r3, #8
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d03a      	beq.n	8007c70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	69db      	ldr	r3, [r3, #28]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d019      	beq.n	8007c36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c02:	4b17      	ldr	r3, [pc, #92]	; (8007c60 <HAL_RCC_OscConfig+0x274>)
 8007c04:	2201      	movs	r2, #1
 8007c06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c08:	f7fd fa68 	bl	80050dc <HAL_GetTick>
 8007c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c0e:	e008      	b.n	8007c22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c10:	f7fd fa64 	bl	80050dc <HAL_GetTick>
 8007c14:	4602      	mov	r2, r0
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d901      	bls.n	8007c22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	e1f2      	b.n	8008008 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c22:	4b0d      	ldr	r3, [pc, #52]	; (8007c58 <HAL_RCC_OscConfig+0x26c>)
 8007c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c26:	f003 0302 	and.w	r3, r3, #2
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d0f0      	beq.n	8007c10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007c2e:	2001      	movs	r0, #1
 8007c30:	f000 fc22 	bl	8008478 <RCC_Delay>
 8007c34:	e01c      	b.n	8007c70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c36:	4b0a      	ldr	r3, [pc, #40]	; (8007c60 <HAL_RCC_OscConfig+0x274>)
 8007c38:	2200      	movs	r2, #0
 8007c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c3c:	f7fd fa4e 	bl	80050dc <HAL_GetTick>
 8007c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c42:	e00f      	b.n	8007c64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c44:	f7fd fa4a 	bl	80050dc <HAL_GetTick>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	2b02      	cmp	r3, #2
 8007c50:	d908      	bls.n	8007c64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e1d8      	b.n	8008008 <HAL_RCC_OscConfig+0x61c>
 8007c56:	bf00      	nop
 8007c58:	40021000 	.word	0x40021000
 8007c5c:	42420000 	.word	0x42420000
 8007c60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c64:	4b9b      	ldr	r3, [pc, #620]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c68:	f003 0302 	and.w	r3, r3, #2
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d1e9      	bne.n	8007c44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 0304 	and.w	r3, r3, #4
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f000 80a6 	beq.w	8007dca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c82:	4b94      	ldr	r3, [pc, #592]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d10d      	bne.n	8007caa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c8e:	4b91      	ldr	r3, [pc, #580]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007c90:	69db      	ldr	r3, [r3, #28]
 8007c92:	4a90      	ldr	r2, [pc, #576]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c98:	61d3      	str	r3, [r2, #28]
 8007c9a:	4b8e      	ldr	r3, [pc, #568]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007c9c:	69db      	ldr	r3, [r3, #28]
 8007c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ca2:	60bb      	str	r3, [r7, #8]
 8007ca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007caa:	4b8b      	ldr	r3, [pc, #556]	; (8007ed8 <HAL_RCC_OscConfig+0x4ec>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d118      	bne.n	8007ce8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007cb6:	4b88      	ldr	r3, [pc, #544]	; (8007ed8 <HAL_RCC_OscConfig+0x4ec>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a87      	ldr	r2, [pc, #540]	; (8007ed8 <HAL_RCC_OscConfig+0x4ec>)
 8007cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007cc2:	f7fd fa0b 	bl	80050dc <HAL_GetTick>
 8007cc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cc8:	e008      	b.n	8007cdc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cca:	f7fd fa07 	bl	80050dc <HAL_GetTick>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	2b64      	cmp	r3, #100	; 0x64
 8007cd6:	d901      	bls.n	8007cdc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e195      	b.n	8008008 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cdc:	4b7e      	ldr	r3, [pc, #504]	; (8007ed8 <HAL_RCC_OscConfig+0x4ec>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d0f0      	beq.n	8007cca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d106      	bne.n	8007cfe <HAL_RCC_OscConfig+0x312>
 8007cf0:	4b78      	ldr	r3, [pc, #480]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007cf2:	6a1b      	ldr	r3, [r3, #32]
 8007cf4:	4a77      	ldr	r2, [pc, #476]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007cf6:	f043 0301 	orr.w	r3, r3, #1
 8007cfa:	6213      	str	r3, [r2, #32]
 8007cfc:	e02d      	b.n	8007d5a <HAL_RCC_OscConfig+0x36e>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d10c      	bne.n	8007d20 <HAL_RCC_OscConfig+0x334>
 8007d06:	4b73      	ldr	r3, [pc, #460]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	4a72      	ldr	r2, [pc, #456]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007d0c:	f023 0301 	bic.w	r3, r3, #1
 8007d10:	6213      	str	r3, [r2, #32]
 8007d12:	4b70      	ldr	r3, [pc, #448]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007d14:	6a1b      	ldr	r3, [r3, #32]
 8007d16:	4a6f      	ldr	r2, [pc, #444]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007d18:	f023 0304 	bic.w	r3, r3, #4
 8007d1c:	6213      	str	r3, [r2, #32]
 8007d1e:	e01c      	b.n	8007d5a <HAL_RCC_OscConfig+0x36e>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	2b05      	cmp	r3, #5
 8007d26:	d10c      	bne.n	8007d42 <HAL_RCC_OscConfig+0x356>
 8007d28:	4b6a      	ldr	r3, [pc, #424]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007d2a:	6a1b      	ldr	r3, [r3, #32]
 8007d2c:	4a69      	ldr	r2, [pc, #420]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007d2e:	f043 0304 	orr.w	r3, r3, #4
 8007d32:	6213      	str	r3, [r2, #32]
 8007d34:	4b67      	ldr	r3, [pc, #412]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007d36:	6a1b      	ldr	r3, [r3, #32]
 8007d38:	4a66      	ldr	r2, [pc, #408]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007d3a:	f043 0301 	orr.w	r3, r3, #1
 8007d3e:	6213      	str	r3, [r2, #32]
 8007d40:	e00b      	b.n	8007d5a <HAL_RCC_OscConfig+0x36e>
 8007d42:	4b64      	ldr	r3, [pc, #400]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007d44:	6a1b      	ldr	r3, [r3, #32]
 8007d46:	4a63      	ldr	r2, [pc, #396]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007d48:	f023 0301 	bic.w	r3, r3, #1
 8007d4c:	6213      	str	r3, [r2, #32]
 8007d4e:	4b61      	ldr	r3, [pc, #388]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007d50:	6a1b      	ldr	r3, [r3, #32]
 8007d52:	4a60      	ldr	r2, [pc, #384]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007d54:	f023 0304 	bic.w	r3, r3, #4
 8007d58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d015      	beq.n	8007d8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d62:	f7fd f9bb 	bl	80050dc <HAL_GetTick>
 8007d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d68:	e00a      	b.n	8007d80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d6a:	f7fd f9b7 	bl	80050dc <HAL_GetTick>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d901      	bls.n	8007d80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	e143      	b.n	8008008 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d80:	4b54      	ldr	r3, [pc, #336]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007d82:	6a1b      	ldr	r3, [r3, #32]
 8007d84:	f003 0302 	and.w	r3, r3, #2
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d0ee      	beq.n	8007d6a <HAL_RCC_OscConfig+0x37e>
 8007d8c:	e014      	b.n	8007db8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d8e:	f7fd f9a5 	bl	80050dc <HAL_GetTick>
 8007d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d94:	e00a      	b.n	8007dac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d96:	f7fd f9a1 	bl	80050dc <HAL_GetTick>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	1ad3      	subs	r3, r2, r3
 8007da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d901      	bls.n	8007dac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007da8:	2303      	movs	r3, #3
 8007daa:	e12d      	b.n	8008008 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007dac:	4b49      	ldr	r3, [pc, #292]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007dae:	6a1b      	ldr	r3, [r3, #32]
 8007db0:	f003 0302 	and.w	r3, r3, #2
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d1ee      	bne.n	8007d96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007db8:	7dfb      	ldrb	r3, [r7, #23]
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d105      	bne.n	8007dca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007dbe:	4b45      	ldr	r3, [pc, #276]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007dc0:	69db      	ldr	r3, [r3, #28]
 8007dc2:	4a44      	ldr	r2, [pc, #272]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007dc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007dc8:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f000 808c 	beq.w	8007eec <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8007dd4:	4b3f      	ldr	r3, [pc, #252]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007de0:	d10e      	bne.n	8007e00 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8007de2:	4b3c      	ldr	r3, [pc, #240]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8007dea:	2b08      	cmp	r3, #8
 8007dec:	d108      	bne.n	8007e00 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8007dee:	4b39      	ldr	r3, [pc, #228]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8007df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dfa:	d101      	bne.n	8007e00 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e103      	b.n	8008008 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	d14e      	bne.n	8007ea6 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8007e08:	4b32      	ldr	r3, [pc, #200]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d009      	beq.n	8007e28 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8007e14:	4b2f      	ldr	r3, [pc, #188]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d001      	beq.n	8007e28 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	e0ef      	b.n	8008008 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8007e28:	4b2c      	ldr	r3, [pc, #176]	; (8007edc <HAL_RCC_OscConfig+0x4f0>)
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e2e:	f7fd f955 	bl	80050dc <HAL_GetTick>
 8007e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8007e34:	e008      	b.n	8007e48 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007e36:	f7fd f951 	bl	80050dc <HAL_GetTick>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	1ad3      	subs	r3, r2, r3
 8007e40:	2b64      	cmp	r3, #100	; 0x64
 8007e42:	d901      	bls.n	8007e48 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e0df      	b.n	8008008 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8007e48:	4b22      	ldr	r3, [pc, #136]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1f0      	bne.n	8007e36 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8007e54:	4b1f      	ldr	r3, [pc, #124]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e60:	491c      	ldr	r1, [pc, #112]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007e62:	4313      	orrs	r3, r2
 8007e64:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8007e66:	4b1b      	ldr	r3, [pc, #108]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e6a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e72:	4918      	ldr	r1, [pc, #96]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007e74:	4313      	orrs	r3, r2
 8007e76:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8007e78:	4b18      	ldr	r3, [pc, #96]	; (8007edc <HAL_RCC_OscConfig+0x4f0>)
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e7e:	f7fd f92d 	bl	80050dc <HAL_GetTick>
 8007e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8007e84:	e008      	b.n	8007e98 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007e86:	f7fd f929 	bl	80050dc <HAL_GetTick>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	2b64      	cmp	r3, #100	; 0x64
 8007e92:	d901      	bls.n	8007e98 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8007e94:	2303      	movs	r3, #3
 8007e96:	e0b7      	b.n	8008008 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8007e98:	4b0e      	ldr	r3, [pc, #56]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d0f0      	beq.n	8007e86 <HAL_RCC_OscConfig+0x49a>
 8007ea4:	e022      	b.n	8007eec <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8007ea6:	4b0b      	ldr	r3, [pc, #44]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eaa:	4a0a      	ldr	r2, [pc, #40]	; (8007ed4 <HAL_RCC_OscConfig+0x4e8>)
 8007eac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007eb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8007eb2:	4b0a      	ldr	r3, [pc, #40]	; (8007edc <HAL_RCC_OscConfig+0x4f0>)
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007eb8:	f7fd f910 	bl	80050dc <HAL_GetTick>
 8007ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8007ebe:	e00f      	b.n	8007ee0 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007ec0:	f7fd f90c 	bl	80050dc <HAL_GetTick>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	2b64      	cmp	r3, #100	; 0x64
 8007ecc:	d908      	bls.n	8007ee0 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e09a      	b.n	8008008 <HAL_RCC_OscConfig+0x61c>
 8007ed2:	bf00      	nop
 8007ed4:	40021000 	.word	0x40021000
 8007ed8:	40007000 	.word	0x40007000
 8007edc:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8007ee0:	4b4b      	ldr	r3, [pc, #300]	; (8008010 <HAL_RCC_OscConfig+0x624>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1e9      	bne.n	8007ec0 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a1b      	ldr	r3, [r3, #32]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f000 8088 	beq.w	8008006 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ef6:	4b46      	ldr	r3, [pc, #280]	; (8008010 <HAL_RCC_OscConfig+0x624>)
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	f003 030c 	and.w	r3, r3, #12
 8007efe:	2b08      	cmp	r3, #8
 8007f00:	d068      	beq.n	8007fd4 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a1b      	ldr	r3, [r3, #32]
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d14d      	bne.n	8007fa6 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f0a:	4b42      	ldr	r3, [pc, #264]	; (8008014 <HAL_RCC_OscConfig+0x628>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f10:	f7fd f8e4 	bl	80050dc <HAL_GetTick>
 8007f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f16:	e008      	b.n	8007f2a <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f18:	f7fd f8e0 	bl	80050dc <HAL_GetTick>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	1ad3      	subs	r3, r2, r3
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d901      	bls.n	8007f2a <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8007f26:	2303      	movs	r3, #3
 8007f28:	e06e      	b.n	8008008 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f2a:	4b39      	ldr	r3, [pc, #228]	; (8008010 <HAL_RCC_OscConfig+0x624>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1f0      	bne.n	8007f18 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f3e:	d10f      	bne.n	8007f60 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8007f40:	4b33      	ldr	r3, [pc, #204]	; (8008010 <HAL_RCC_OscConfig+0x624>)
 8007f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	4931      	ldr	r1, [pc, #196]	; (8008010 <HAL_RCC_OscConfig+0x624>)
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007f4e:	4b30      	ldr	r3, [pc, #192]	; (8008010 <HAL_RCC_OscConfig+0x624>)
 8007f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f52:	f023 020f 	bic.w	r2, r3, #15
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	492d      	ldr	r1, [pc, #180]	; (8008010 <HAL_RCC_OscConfig+0x624>)
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f60:	4b2b      	ldr	r3, [pc, #172]	; (8008010 <HAL_RCC_OscConfig+0x624>)
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f70:	430b      	orrs	r3, r1
 8007f72:	4927      	ldr	r1, [pc, #156]	; (8008010 <HAL_RCC_OscConfig+0x624>)
 8007f74:	4313      	orrs	r3, r2
 8007f76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f78:	4b26      	ldr	r3, [pc, #152]	; (8008014 <HAL_RCC_OscConfig+0x628>)
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f7e:	f7fd f8ad 	bl	80050dc <HAL_GetTick>
 8007f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007f84:	e008      	b.n	8007f98 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f86:	f7fd f8a9 	bl	80050dc <HAL_GetTick>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d901      	bls.n	8007f98 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8007f94:	2303      	movs	r3, #3
 8007f96:	e037      	b.n	8008008 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007f98:	4b1d      	ldr	r3, [pc, #116]	; (8008010 <HAL_RCC_OscConfig+0x624>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d0f0      	beq.n	8007f86 <HAL_RCC_OscConfig+0x59a>
 8007fa4:	e02f      	b.n	8008006 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fa6:	4b1b      	ldr	r3, [pc, #108]	; (8008014 <HAL_RCC_OscConfig+0x628>)
 8007fa8:	2200      	movs	r2, #0
 8007faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fac:	f7fd f896 	bl	80050dc <HAL_GetTick>
 8007fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007fb2:	e008      	b.n	8007fc6 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fb4:	f7fd f892 	bl	80050dc <HAL_GetTick>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d901      	bls.n	8007fc6 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	e020      	b.n	8008008 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007fc6:	4b12      	ldr	r3, [pc, #72]	; (8008010 <HAL_RCC_OscConfig+0x624>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1f0      	bne.n	8007fb4 <HAL_RCC_OscConfig+0x5c8>
 8007fd2:	e018      	b.n	8008006 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a1b      	ldr	r3, [r3, #32]
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d101      	bne.n	8007fe0 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e013      	b.n	8008008 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007fe0:	4b0b      	ldr	r3, [pc, #44]	; (8008010 <HAL_RCC_OscConfig+0x624>)
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d106      	bne.n	8008002 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d001      	beq.n	8008006 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	e000      	b.n	8008008 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	3718      	adds	r7, #24
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	40021000 	.word	0x40021000
 8008014:	42420060 	.word	0x42420060

08008018 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d101      	bne.n	800802c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	e0d0      	b.n	80081ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800802c:	4b6a      	ldr	r3, [pc, #424]	; (80081d8 <HAL_RCC_ClockConfig+0x1c0>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 0307 	and.w	r3, r3, #7
 8008034:	683a      	ldr	r2, [r7, #0]
 8008036:	429a      	cmp	r2, r3
 8008038:	d910      	bls.n	800805c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800803a:	4b67      	ldr	r3, [pc, #412]	; (80081d8 <HAL_RCC_ClockConfig+0x1c0>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f023 0207 	bic.w	r2, r3, #7
 8008042:	4965      	ldr	r1, [pc, #404]	; (80081d8 <HAL_RCC_ClockConfig+0x1c0>)
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	4313      	orrs	r3, r2
 8008048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800804a:	4b63      	ldr	r3, [pc, #396]	; (80081d8 <HAL_RCC_ClockConfig+0x1c0>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 0307 	and.w	r3, r3, #7
 8008052:	683a      	ldr	r2, [r7, #0]
 8008054:	429a      	cmp	r2, r3
 8008056:	d001      	beq.n	800805c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	e0b8      	b.n	80081ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 0302 	and.w	r3, r3, #2
 8008064:	2b00      	cmp	r3, #0
 8008066:	d020      	beq.n	80080aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f003 0304 	and.w	r3, r3, #4
 8008070:	2b00      	cmp	r3, #0
 8008072:	d005      	beq.n	8008080 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008074:	4b59      	ldr	r3, [pc, #356]	; (80081dc <HAL_RCC_ClockConfig+0x1c4>)
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	4a58      	ldr	r2, [pc, #352]	; (80081dc <HAL_RCC_ClockConfig+0x1c4>)
 800807a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800807e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 0308 	and.w	r3, r3, #8
 8008088:	2b00      	cmp	r3, #0
 800808a:	d005      	beq.n	8008098 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800808c:	4b53      	ldr	r3, [pc, #332]	; (80081dc <HAL_RCC_ClockConfig+0x1c4>)
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	4a52      	ldr	r2, [pc, #328]	; (80081dc <HAL_RCC_ClockConfig+0x1c4>)
 8008092:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008096:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008098:	4b50      	ldr	r3, [pc, #320]	; (80081dc <HAL_RCC_ClockConfig+0x1c4>)
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	494d      	ldr	r1, [pc, #308]	; (80081dc <HAL_RCC_ClockConfig+0x1c4>)
 80080a6:	4313      	orrs	r3, r2
 80080a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 0301 	and.w	r3, r3, #1
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d040      	beq.n	8008138 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d107      	bne.n	80080ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080be:	4b47      	ldr	r3, [pc, #284]	; (80081dc <HAL_RCC_ClockConfig+0x1c4>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d115      	bne.n	80080f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	e07f      	b.n	80081ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	d107      	bne.n	80080e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080d6:	4b41      	ldr	r3, [pc, #260]	; (80081dc <HAL_RCC_ClockConfig+0x1c4>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d109      	bne.n	80080f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e073      	b.n	80081ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080e6:	4b3d      	ldr	r3, [pc, #244]	; (80081dc <HAL_RCC_ClockConfig+0x1c4>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f003 0302 	and.w	r3, r3, #2
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d101      	bne.n	80080f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	e06b      	b.n	80081ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80080f6:	4b39      	ldr	r3, [pc, #228]	; (80081dc <HAL_RCC_ClockConfig+0x1c4>)
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	f023 0203 	bic.w	r2, r3, #3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	4936      	ldr	r1, [pc, #216]	; (80081dc <HAL_RCC_ClockConfig+0x1c4>)
 8008104:	4313      	orrs	r3, r2
 8008106:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008108:	f7fc ffe8 	bl	80050dc <HAL_GetTick>
 800810c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800810e:	e00a      	b.n	8008126 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008110:	f7fc ffe4 	bl	80050dc <HAL_GetTick>
 8008114:	4602      	mov	r2, r0
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	f241 3288 	movw	r2, #5000	; 0x1388
 800811e:	4293      	cmp	r3, r2
 8008120:	d901      	bls.n	8008126 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008122:	2303      	movs	r3, #3
 8008124:	e053      	b.n	80081ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008126:	4b2d      	ldr	r3, [pc, #180]	; (80081dc <HAL_RCC_ClockConfig+0x1c4>)
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	f003 020c 	and.w	r2, r3, #12
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	429a      	cmp	r2, r3
 8008136:	d1eb      	bne.n	8008110 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008138:	4b27      	ldr	r3, [pc, #156]	; (80081d8 <HAL_RCC_ClockConfig+0x1c0>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f003 0307 	and.w	r3, r3, #7
 8008140:	683a      	ldr	r2, [r7, #0]
 8008142:	429a      	cmp	r2, r3
 8008144:	d210      	bcs.n	8008168 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008146:	4b24      	ldr	r3, [pc, #144]	; (80081d8 <HAL_RCC_ClockConfig+0x1c0>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f023 0207 	bic.w	r2, r3, #7
 800814e:	4922      	ldr	r1, [pc, #136]	; (80081d8 <HAL_RCC_ClockConfig+0x1c0>)
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	4313      	orrs	r3, r2
 8008154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008156:	4b20      	ldr	r3, [pc, #128]	; (80081d8 <HAL_RCC_ClockConfig+0x1c0>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 0307 	and.w	r3, r3, #7
 800815e:	683a      	ldr	r2, [r7, #0]
 8008160:	429a      	cmp	r2, r3
 8008162:	d001      	beq.n	8008168 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	e032      	b.n	80081ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 0304 	and.w	r3, r3, #4
 8008170:	2b00      	cmp	r3, #0
 8008172:	d008      	beq.n	8008186 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008174:	4b19      	ldr	r3, [pc, #100]	; (80081dc <HAL_RCC_ClockConfig+0x1c4>)
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	4916      	ldr	r1, [pc, #88]	; (80081dc <HAL_RCC_ClockConfig+0x1c4>)
 8008182:	4313      	orrs	r3, r2
 8008184:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f003 0308 	and.w	r3, r3, #8
 800818e:	2b00      	cmp	r3, #0
 8008190:	d009      	beq.n	80081a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008192:	4b12      	ldr	r3, [pc, #72]	; (80081dc <HAL_RCC_ClockConfig+0x1c4>)
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	00db      	lsls	r3, r3, #3
 80081a0:	490e      	ldr	r1, [pc, #56]	; (80081dc <HAL_RCC_ClockConfig+0x1c4>)
 80081a2:	4313      	orrs	r3, r2
 80081a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80081a6:	f000 f821 	bl	80081ec <HAL_RCC_GetSysClockFreq>
 80081aa:	4602      	mov	r2, r0
 80081ac:	4b0b      	ldr	r3, [pc, #44]	; (80081dc <HAL_RCC_ClockConfig+0x1c4>)
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	091b      	lsrs	r3, r3, #4
 80081b2:	f003 030f 	and.w	r3, r3, #15
 80081b6:	490a      	ldr	r1, [pc, #40]	; (80081e0 <HAL_RCC_ClockConfig+0x1c8>)
 80081b8:	5ccb      	ldrb	r3, [r1, r3]
 80081ba:	fa22 f303 	lsr.w	r3, r2, r3
 80081be:	4a09      	ldr	r2, [pc, #36]	; (80081e4 <HAL_RCC_ClockConfig+0x1cc>)
 80081c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80081c2:	4b09      	ldr	r3, [pc, #36]	; (80081e8 <HAL_RCC_ClockConfig+0x1d0>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7fc fe0a 	bl	8004de0 <HAL_InitTick>

  return HAL_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	40022000 	.word	0x40022000
 80081dc:	40021000 	.word	0x40021000
 80081e0:	0800f2f8 	.word	0x0800f2f8
 80081e4:	20000030 	.word	0x20000030
 80081e8:	20000034 	.word	0x20000034

080081ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80081f0:	b091      	sub	sp, #68	; 0x44
 80081f2:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80081f4:	4b6a      	ldr	r3, [pc, #424]	; (80083a0 <HAL_RCC_GetSysClockFreq+0x1b4>)
 80081f6:	f107 0414 	add.w	r4, r7, #20
 80081fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80081fc:	c407      	stmia	r4!, {r0, r1, r2}
 80081fe:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8008200:	4b68      	ldr	r3, [pc, #416]	; (80083a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008202:	1d3c      	adds	r4, r7, #4
 8008204:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008206:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800820a:	2300      	movs	r3, #0
 800820c:	637b      	str	r3, [r7, #52]	; 0x34
 800820e:	2300      	movs	r3, #0
 8008210:	633b      	str	r3, [r7, #48]	; 0x30
 8008212:	2300      	movs	r3, #0
 8008214:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008216:	2300      	movs	r3, #0
 8008218:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 800821a:	2300      	movs	r3, #0
 800821c:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 800821e:	2300      	movs	r3, #0
 8008220:	62bb      	str	r3, [r7, #40]	; 0x28
 8008222:	2300      	movs	r3, #0
 8008224:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008226:	4b60      	ldr	r3, [pc, #384]	; (80083a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800822c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800822e:	f003 030c 	and.w	r3, r3, #12
 8008232:	2b04      	cmp	r3, #4
 8008234:	d002      	beq.n	800823c <HAL_RCC_GetSysClockFreq+0x50>
 8008236:	2b08      	cmp	r3, #8
 8008238:	d003      	beq.n	8008242 <HAL_RCC_GetSysClockFreq+0x56>
 800823a:	e0a8      	b.n	800838e <HAL_RCC_GetSysClockFreq+0x1a2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800823c:	4b5b      	ldr	r3, [pc, #364]	; (80083ac <HAL_RCC_GetSysClockFreq+0x1c0>)
 800823e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008240:	e0a8      	b.n	8008394 <HAL_RCC_GetSysClockFreq+0x1a8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008244:	0c9b      	lsrs	r3, r3, #18
 8008246:	f003 030f 	and.w	r3, r3, #15
 800824a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800824e:	4413      	add	r3, r2
 8008250:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8008254:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800825c:	2b00      	cmp	r3, #0
 800825e:	f000 808e 	beq.w	800837e <HAL_RCC_GetSysClockFreq+0x192>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8008262:	4b51      	ldr	r3, [pc, #324]	; (80083a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008266:	f003 030f 	and.w	r3, r3, #15
 800826a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800826e:	4413      	add	r3, r2
 8008270:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8008274:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8008276:	4b4c      	ldr	r3, [pc, #304]	; (80083a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800827a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800827e:	2b00      	cmp	r3, #0
 8008280:	d06b      	beq.n	800835a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8008282:	4b49      	ldr	r3, [pc, #292]	; (80083a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008286:	091b      	lsrs	r3, r3, #4
 8008288:	f003 030f 	and.w	r3, r3, #15
 800828c:	3301      	adds	r3, #1
 800828e:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8008290:	4b45      	ldr	r3, [pc, #276]	; (80083a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008294:	0a1b      	lsrs	r3, r3, #8
 8008296:	f003 030f 	and.w	r3, r3, #15
 800829a:	3302      	adds	r3, #2
 800829c:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800829e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a0:	4618      	mov	r0, r3
 80082a2:	f04f 0100 	mov.w	r1, #0
 80082a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a8:	461a      	mov	r2, r3
 80082aa:	f04f 0300 	mov.w	r3, #0
 80082ae:	fb02 f501 	mul.w	r5, r2, r1
 80082b2:	fb00 f403 	mul.w	r4, r0, r3
 80082b6:	192e      	adds	r6, r5, r4
 80082b8:	fba0 4502 	umull	r4, r5, r0, r2
 80082bc:	1973      	adds	r3, r6, r5
 80082be:	461d      	mov	r5, r3
 80082c0:	4620      	mov	r0, r4
 80082c2:	4629      	mov	r1, r5
 80082c4:	f04f 0200 	mov.w	r2, #0
 80082c8:	f04f 0300 	mov.w	r3, #0
 80082cc:	014b      	lsls	r3, r1, #5
 80082ce:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80082d2:	0142      	lsls	r2, r0, #5
 80082d4:	4610      	mov	r0, r2
 80082d6:	4619      	mov	r1, r3
 80082d8:	1b00      	subs	r0, r0, r4
 80082da:	eb61 0105 	sbc.w	r1, r1, r5
 80082de:	f04f 0200 	mov.w	r2, #0
 80082e2:	f04f 0300 	mov.w	r3, #0
 80082e6:	018b      	lsls	r3, r1, #6
 80082e8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80082ec:	0182      	lsls	r2, r0, #6
 80082ee:	1a12      	subs	r2, r2, r0
 80082f0:	eb63 0301 	sbc.w	r3, r3, r1
 80082f4:	f04f 0000 	mov.w	r0, #0
 80082f8:	f04f 0100 	mov.w	r1, #0
 80082fc:	00d9      	lsls	r1, r3, #3
 80082fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008302:	00d0      	lsls	r0, r2, #3
 8008304:	4602      	mov	r2, r0
 8008306:	460b      	mov	r3, r1
 8008308:	1912      	adds	r2, r2, r4
 800830a:	eb45 0303 	adc.w	r3, r5, r3
 800830e:	f04f 0000 	mov.w	r0, #0
 8008312:	f04f 0100 	mov.w	r1, #0
 8008316:	0259      	lsls	r1, r3, #9
 8008318:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800831c:	0250      	lsls	r0, r2, #9
 800831e:	4602      	mov	r2, r0
 8008320:	460b      	mov	r3, r1
 8008322:	4690      	mov	r8, r2
 8008324:	4699      	mov	r9, r3
 8008326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008328:	4618      	mov	r0, r3
 800832a:	f04f 0100 	mov.w	r1, #0
 800832e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008330:	461a      	mov	r2, r3
 8008332:	f04f 0300 	mov.w	r3, #0
 8008336:	fb02 f501 	mul.w	r5, r2, r1
 800833a:	fb00 f403 	mul.w	r4, r0, r3
 800833e:	442c      	add	r4, r5
 8008340:	fba0 2302 	umull	r2, r3, r0, r2
 8008344:	18e1      	adds	r1, r4, r3
 8008346:	460b      	mov	r3, r1
 8008348:	4640      	mov	r0, r8
 800834a:	4649      	mov	r1, r9
 800834c:	f7f8 ff46 	bl	80011dc <__aeabi_uldivmod>
 8008350:	4602      	mov	r2, r0
 8008352:	460b      	mov	r3, r1
 8008354:	4613      	mov	r3, r2
 8008356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008358:	e007      	b.n	800836a <HAL_RCC_GetSysClockFreq+0x17e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 800835a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835c:	4a13      	ldr	r2, [pc, #76]	; (80083ac <HAL_RCC_GetSysClockFreq+0x1c0>)
 800835e:	fb02 f203 	mul.w	r2, r2, r3
 8008362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008364:	fbb2 f3f3 	udiv	r3, r2, r3
 8008368:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 800836a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800836e:	461a      	mov	r2, r3
 8008370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008372:	4293      	cmp	r3, r2
 8008374:	d108      	bne.n	8008388 <HAL_RCC_GetSysClockFreq+0x19c>
        {
          pllclk = pllclk / 2;
 8008376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008378:	085b      	lsrs	r3, r3, #1
 800837a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800837c:	e004      	b.n	8008388 <HAL_RCC_GetSysClockFreq+0x19c>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800837e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008380:	4a0b      	ldr	r2, [pc, #44]	; (80083b0 <HAL_RCC_GetSysClockFreq+0x1c4>)
 8008382:	fb02 f303 	mul.w	r3, r2, r3
 8008386:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8008388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800838a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800838c:	e002      	b.n	8008394 <HAL_RCC_GetSysClockFreq+0x1a8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800838e:	4b07      	ldr	r3, [pc, #28]	; (80083ac <HAL_RCC_GetSysClockFreq+0x1c0>)
 8008390:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008392:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008396:	4618      	mov	r0, r3
 8008398:	3744      	adds	r7, #68	; 0x44
 800839a:	46bd      	mov	sp, r7
 800839c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083a0:	0800f1d8 	.word	0x0800f1d8
 80083a4:	0800f1e8 	.word	0x0800f1e8
 80083a8:	40021000 	.word	0x40021000
 80083ac:	007a1200 	.word	0x007a1200
 80083b0:	003d0900 	.word	0x003d0900

080083b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80083b4:	b480      	push	{r7}
 80083b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80083b8:	4b02      	ldr	r3, [pc, #8]	; (80083c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80083ba:	681b      	ldr	r3, [r3, #0]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	46bd      	mov	sp, r7
 80083c0:	bc80      	pop	{r7}
 80083c2:	4770      	bx	lr
 80083c4:	20000030 	.word	0x20000030

080083c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80083cc:	f7ff fff2 	bl	80083b4 <HAL_RCC_GetHCLKFreq>
 80083d0:	4602      	mov	r2, r0
 80083d2:	4b05      	ldr	r3, [pc, #20]	; (80083e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	0a1b      	lsrs	r3, r3, #8
 80083d8:	f003 0307 	and.w	r3, r3, #7
 80083dc:	4903      	ldr	r1, [pc, #12]	; (80083ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80083de:	5ccb      	ldrb	r3, [r1, r3]
 80083e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	40021000 	.word	0x40021000
 80083ec:	0800f308 	.word	0x0800f308

080083f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80083f4:	f7ff ffde 	bl	80083b4 <HAL_RCC_GetHCLKFreq>
 80083f8:	4602      	mov	r2, r0
 80083fa:	4b05      	ldr	r3, [pc, #20]	; (8008410 <HAL_RCC_GetPCLK2Freq+0x20>)
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	0adb      	lsrs	r3, r3, #11
 8008400:	f003 0307 	and.w	r3, r3, #7
 8008404:	4903      	ldr	r1, [pc, #12]	; (8008414 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008406:	5ccb      	ldrb	r3, [r1, r3]
 8008408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800840c:	4618      	mov	r0, r3
 800840e:	bd80      	pop	{r7, pc}
 8008410:	40021000 	.word	0x40021000
 8008414:	0800f308 	.word	0x0800f308

08008418 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	220f      	movs	r2, #15
 8008426:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008428:	4b11      	ldr	r3, [pc, #68]	; (8008470 <HAL_RCC_GetClockConfig+0x58>)
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	f003 0203 	and.w	r2, r3, #3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008434:	4b0e      	ldr	r3, [pc, #56]	; (8008470 <HAL_RCC_GetClockConfig+0x58>)
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008440:	4b0b      	ldr	r3, [pc, #44]	; (8008470 <HAL_RCC_GetClockConfig+0x58>)
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800844c:	4b08      	ldr	r3, [pc, #32]	; (8008470 <HAL_RCC_GetClockConfig+0x58>)
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	08db      	lsrs	r3, r3, #3
 8008452:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800845a:	4b06      	ldr	r3, [pc, #24]	; (8008474 <HAL_RCC_GetClockConfig+0x5c>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 0207 	and.w	r2, r3, #7
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8008466:	bf00      	nop
 8008468:	370c      	adds	r7, #12
 800846a:	46bd      	mov	sp, r7
 800846c:	bc80      	pop	{r7}
 800846e:	4770      	bx	lr
 8008470:	40021000 	.word	0x40021000
 8008474:	40022000 	.word	0x40022000

08008478 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008480:	4b0a      	ldr	r3, [pc, #40]	; (80084ac <RCC_Delay+0x34>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a0a      	ldr	r2, [pc, #40]	; (80084b0 <RCC_Delay+0x38>)
 8008486:	fba2 2303 	umull	r2, r3, r2, r3
 800848a:	0a5b      	lsrs	r3, r3, #9
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	fb02 f303 	mul.w	r3, r2, r3
 8008492:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008494:	bf00      	nop
  }
  while (Delay --);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	1e5a      	subs	r2, r3, #1
 800849a:	60fa      	str	r2, [r7, #12]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d1f9      	bne.n	8008494 <RCC_Delay+0x1c>
}
 80084a0:	bf00      	nop
 80084a2:	bf00      	nop
 80084a4:	3714      	adds	r7, #20
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bc80      	pop	{r7}
 80084aa:	4770      	bx	lr
 80084ac:	20000030 	.word	0x20000030
 80084b0:	10624dd3 	.word	0x10624dd3

080084b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b088      	sub	sp, #32
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80084bc:	2300      	movs	r3, #0
 80084be:	617b      	str	r3, [r7, #20]
 80084c0:	2300      	movs	r3, #0
 80084c2:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 80084c4:	2300      	movs	r3, #0
 80084c6:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 0301 	and.w	r3, r3, #1
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d07d      	beq.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 80084d4:	2300      	movs	r3, #0
 80084d6:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80084d8:	4b8b      	ldr	r3, [pc, #556]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80084da:	69db      	ldr	r3, [r3, #28]
 80084dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d10d      	bne.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80084e4:	4b88      	ldr	r3, [pc, #544]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80084e6:	69db      	ldr	r3, [r3, #28]
 80084e8:	4a87      	ldr	r2, [pc, #540]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80084ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084ee:	61d3      	str	r3, [r2, #28]
 80084f0:	4b85      	ldr	r3, [pc, #532]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80084f2:	69db      	ldr	r3, [r3, #28]
 80084f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084f8:	60fb      	str	r3, [r7, #12]
 80084fa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80084fc:	2301      	movs	r3, #1
 80084fe:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008500:	4b82      	ldr	r3, [pc, #520]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008508:	2b00      	cmp	r3, #0
 800850a:	d118      	bne.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800850c:	4b7f      	ldr	r3, [pc, #508]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a7e      	ldr	r2, [pc, #504]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008516:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008518:	f7fc fde0 	bl	80050dc <HAL_GetTick>
 800851c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800851e:	e008      	b.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008520:	f7fc fddc 	bl	80050dc <HAL_GetTick>
 8008524:	4602      	mov	r2, r0
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	1ad3      	subs	r3, r2, r3
 800852a:	2b64      	cmp	r3, #100	; 0x64
 800852c:	d901      	bls.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 800852e:	2303      	movs	r3, #3
 8008530:	e0e5      	b.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008532:	4b76      	ldr	r3, [pc, #472]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800853a:	2b00      	cmp	r3, #0
 800853c:	d0f0      	beq.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800853e:	4b72      	ldr	r3, [pc, #456]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008540:	6a1b      	ldr	r3, [r3, #32]
 8008542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008546:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d02e      	beq.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0xf8>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008556:	693a      	ldr	r2, [r7, #16]
 8008558:	429a      	cmp	r2, r3
 800855a:	d027      	beq.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800855c:	4b6a      	ldr	r3, [pc, #424]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800855e:	6a1b      	ldr	r3, [r3, #32]
 8008560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008564:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008566:	4b6a      	ldr	r3, [pc, #424]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8008568:	2201      	movs	r2, #1
 800856a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800856c:	4b68      	ldr	r3, [pc, #416]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800856e:	2200      	movs	r2, #0
 8008570:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008572:	4a65      	ldr	r2, [pc, #404]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	f003 0301 	and.w	r3, r3, #1
 800857e:	2b00      	cmp	r3, #0
 8008580:	d014      	beq.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008582:	f7fc fdab 	bl	80050dc <HAL_GetTick>
 8008586:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008588:	e00a      	b.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800858a:	f7fc fda7 	bl	80050dc <HAL_GetTick>
 800858e:	4602      	mov	r2, r0
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	1ad3      	subs	r3, r2, r3
 8008594:	f241 3288 	movw	r2, #5000	; 0x1388
 8008598:	4293      	cmp	r3, r2
 800859a:	d901      	bls.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 800859c:	2303      	movs	r3, #3
 800859e:	e0ae      	b.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085a0:	4b59      	ldr	r3, [pc, #356]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80085a2:	6a1b      	ldr	r3, [r3, #32]
 80085a4:	f003 0302 	and.w	r3, r3, #2
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d0ee      	beq.n	800858a <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80085ac:	4b56      	ldr	r3, [pc, #344]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80085ae:	6a1b      	ldr	r3, [r3, #32]
 80085b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	4953      	ldr	r1, [pc, #332]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80085ba:	4313      	orrs	r3, r2
 80085bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80085be:	7efb      	ldrb	r3, [r7, #27]
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d105      	bne.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80085c4:	4b50      	ldr	r3, [pc, #320]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80085c6:	69db      	ldr	r3, [r3, #28]
 80085c8:	4a4f      	ldr	r2, [pc, #316]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80085ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 0302 	and.w	r3, r3, #2
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d008      	beq.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80085dc:	4b4a      	ldr	r3, [pc, #296]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	4947      	ldr	r1, [pc, #284]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80085ea:	4313      	orrs	r3, r2
 80085ec:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 0304 	and.w	r3, r3, #4
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d008      	beq.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80085fa:	4b43      	ldr	r3, [pc, #268]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80085fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	4940      	ldr	r1, [pc, #256]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008608:	4313      	orrs	r3, r2
 800860a:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f003 0308 	and.w	r3, r3, #8
 8008614:	2b00      	cmp	r3, #0
 8008616:	d008      	beq.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8008618:	4b3b      	ldr	r3, [pc, #236]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800861a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800861c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	4938      	ldr	r1, [pc, #224]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008626:	4313      	orrs	r3, r2
 8008628:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 800862a:	4b37      	ldr	r3, [pc, #220]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800862c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008632:	2b00      	cmp	r3, #0
 8008634:	d105      	bne.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8008636:	4b34      	ldr	r3, [pc, #208]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800863a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800863e:	2b00      	cmp	r3, #0
 8008640:	d001      	beq.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8008642:	2301      	movs	r3, #1
 8008644:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d148      	bne.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 800864c:	4b2e      	ldr	r3, [pc, #184]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008654:	2b00      	cmp	r3, #0
 8008656:	d138      	bne.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8008658:	4b2b      	ldr	r3, [pc, #172]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d009      	beq.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8008664:	4b28      	ldr	r3, [pc, #160]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008668:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8008670:	429a      	cmp	r2, r3
 8008672:	d001      	beq.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	e042      	b.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8008678:	4b23      	ldr	r3, [pc, #140]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800867a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	699b      	ldr	r3, [r3, #24]
 8008684:	4920      	ldr	r1, [pc, #128]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008686:	4313      	orrs	r3, r2
 8008688:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 800868a:	4b1f      	ldr	r3, [pc, #124]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800868c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868e:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	695b      	ldr	r3, [r3, #20]
 8008696:	491c      	ldr	r1, [pc, #112]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008698:	4313      	orrs	r3, r2
 800869a:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 800869c:	4b1d      	ldr	r3, [pc, #116]	; (8008714 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800869e:	2201      	movs	r2, #1
 80086a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086a2:	f7fc fd1b 	bl	80050dc <HAL_GetTick>
 80086a6:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80086a8:	e008      	b.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80086aa:	f7fc fd17 	bl	80050dc <HAL_GetTick>
 80086ae:	4602      	mov	r2, r0
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	1ad3      	subs	r3, r2, r3
 80086b4:	2b64      	cmp	r3, #100	; 0x64
 80086b6:	d901      	bls.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 80086b8:	2303      	movs	r3, #3
 80086ba:	e020      	b.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80086bc:	4b12      	ldr	r3, [pc, #72]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d0f0      	beq.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80086c8:	e009      	b.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 80086ca:	4b0f      	ldr	r3, [pc, #60]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80086cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ce:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	695b      	ldr	r3, [r3, #20]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d001      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	e00f      	b.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f003 0310 	and.w	r3, r3, #16
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d008      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80086ea:	4b07      	ldr	r3, [pc, #28]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	69db      	ldr	r3, [r3, #28]
 80086f6:	4904      	ldr	r1, [pc, #16]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80086f8:	4313      	orrs	r3, r2
 80086fa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3720      	adds	r7, #32
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	40021000 	.word	0x40021000
 800870c:	40007000 	.word	0x40007000
 8008710:	42420440 	.word	0x42420440
 8008714:	42420070 	.word	0x42420070

08008718 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008718:	b590      	push	{r4, r7, lr}
 800871a:	b093      	sub	sp, #76	; 0x4c
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8008720:	4ba9      	ldr	r3, [pc, #676]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8008722:	f107 0418 	add.w	r4, r7, #24
 8008726:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008728:	c407      	stmia	r4!, {r0, r1, r2}
 800872a:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 800872c:	4ba7      	ldr	r3, [pc, #668]	; (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800872e:	f107 0408 	add.w	r4, r7, #8
 8008732:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008734:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8008738:	2300      	movs	r3, #0
 800873a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800873c:	2300      	movs	r3, #0
 800873e:	647b      	str	r3, [r7, #68]	; 0x44
 8008740:	2300      	movs	r3, #0
 8008742:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
 8008744:	2300      	movs	r3, #0
 8008746:	637b      	str	r3, [r7, #52]	; 0x34
 8008748:	2300      	movs	r3, #0
 800874a:	633b      	str	r3, [r7, #48]	; 0x30
 800874c:	2300      	movs	r3, #0
 800874e:	62fb      	str	r3, [r7, #44]	; 0x2c
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[2] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8008750:	2300      	movs	r3, #0
 8008752:	62bb      	str	r3, [r7, #40]	; 0x28
 8008754:	2300      	movs	r3, #0
 8008756:	643b      	str	r3, [r7, #64]	; 0x40
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	3b01      	subs	r3, #1
 800875c:	2b0f      	cmp	r3, #15
 800875e:	f200 8124 	bhi.w	80089aa <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 8008762:	a201      	add	r2, pc, #4	; (adr r2, 8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8008764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008768:	08008929 	.word	0x08008929
 800876c:	0800898f 	.word	0x0800898f
 8008770:	080089ab 	.word	0x080089ab
 8008774:	08008887 	.word	0x08008887
 8008778:	080089ab 	.word	0x080089ab
 800877c:	080089ab 	.word	0x080089ab
 8008780:	080089ab 	.word	0x080089ab
 8008784:	080088d9 	.word	0x080088d9
 8008788:	080089ab 	.word	0x080089ab
 800878c:	080089ab 	.word	0x080089ab
 8008790:	080089ab 	.word	0x080089ab
 8008794:	080089ab 	.word	0x080089ab
 8008798:	080089ab 	.word	0x080089ab
 800879c:	080089ab 	.word	0x080089ab
 80087a0:	080089ab 	.word	0x080089ab
 80087a4:	080087a9 	.word	0x080087a9
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80087a8:	4b89      	ldr	r3, [pc, #548]	; (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80087ae:	4b88      	ldr	r3, [pc, #544]	; (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f000 80f9 	beq.w	80089ae <HAL_RCCEx_GetPeriphCLKFreq+0x296>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80087bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087be:	0c9b      	lsrs	r3, r3, #18
 80087c0:	f003 030f 	and.w	r3, r3, #15
 80087c4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80087c8:	4413      	add	r3, r2
 80087ca:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80087ce:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80087d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d03e      	beq.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80087da:	4b7d      	ldr	r3, [pc, #500]	; (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80087dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087de:	f003 030f 	and.w	r3, r3, #15
 80087e2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80087e6:	4413      	add	r3, r2
 80087e8:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 80087ec:	63fb      	str	r3, [r7, #60]	; 0x3c
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80087ee:	4b78      	ldr	r3, [pc, #480]	; (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80087f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d01c      	beq.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80087fa:	4b75      	ldr	r3, [pc, #468]	; (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80087fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fe:	091b      	lsrs	r3, r3, #4
 8008800:	f003 030f 	and.w	r3, r3, #15
 8008804:	3301      	adds	r3, #1
 8008806:	62fb      	str	r3, [r7, #44]	; 0x2c
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8008808:	4b71      	ldr	r3, [pc, #452]	; (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800880a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880c:	0a1b      	lsrs	r3, r3, #8
 800880e:	f003 030f 	and.w	r3, r3, #15
 8008812:	3302      	adds	r3, #2
 8008814:	637b      	str	r3, [r7, #52]	; 0x34
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 8008816:	4a6f      	ldr	r2, [pc, #444]	; (80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881a:	fbb2 f3f3 	udiv	r3, r2, r3
 800881e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008820:	fb02 f203 	mul.w	r2, r2, r3
 8008824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008826:	fbb2 f2f3 	udiv	r2, r2, r3
 800882a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800882c:	fb02 f303 	mul.w	r3, r2, r3
 8008830:	647b      	str	r3, [r7, #68]	; 0x44
 8008832:	e007      	b.n	8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8008834:	4a67      	ldr	r2, [pc, #412]	; (80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008838:	fbb2 f2f3 	udiv	r2, r2, r3
 800883c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800883e:	fb02 f303 	mul.w	r3, r2, r3
 8008842:	647b      	str	r3, [r7, #68]	; 0x44
          }

          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8008844:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008848:	461a      	mov	r2, r3
 800884a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884c:	4293      	cmp	r3, r2
 800884e:	d108      	bne.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
          {
            pllclk = pllclk / 2;
 8008850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008852:	085b      	lsrs	r3, r3, #1
 8008854:	647b      	str	r3, [r7, #68]	; 0x44
 8008856:	e004      	b.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800885a:	4a5f      	ldr	r2, [pc, #380]	; (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800885c:	fb02 f303 	mul.w	r3, r2, r3
 8008860:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 8008862:	4b5b      	ldr	r3, [pc, #364]	; (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800886a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800886e:	d102      	bne.n	8008876 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        {
          /* Prescaler of 2 selected for USB */
          frequency = pllclk;
 8008870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008872:	643b      	str	r3, [r7, #64]	; 0x40
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8008874:	e09b      	b.n	80089ae <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          frequency = (2 * pllclk) / 3;
 8008876:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008878:	005b      	lsls	r3, r3, #1
 800887a:	4a58      	ldr	r2, [pc, #352]	; (80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800887c:	fba2 2303 	umull	r2, r3, r2, r3
 8008880:	085b      	lsrs	r3, r3, #1
 8008882:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8008884:	e093      	b.n	80089ae <HAL_RCCEx_GetPeriphCLKFreq+0x296>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 8008886:	4b52      	ldr	r3, [pc, #328]	; (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800888a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800888e:	2b00      	cmp	r3, #0
 8008890:	d103      	bne.n	800889a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        /* SYSCLK used as source clock for I2S2 */
        frequency = HAL_RCC_GetSysClockFreq();
 8008892:	f7ff fcab 	bl	80081ec <HAL_RCC_GetSysClockFreq>
 8008896:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8008898:	e08b      	b.n	80089b2 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 800889a:	4b4d      	ldr	r3, [pc, #308]	; (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	f000 8085 	beq.w	80089b2 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80088a8:	4b49      	ldr	r3, [pc, #292]	; (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80088aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ac:	091b      	lsrs	r3, r3, #4
 80088ae:	f003 030f 	and.w	r3, r3, #15
 80088b2:	3301      	adds	r3, #1
 80088b4:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 80088b6:	4b46      	ldr	r3, [pc, #280]	; (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80088b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ba:	0b1b      	lsrs	r3, r3, #12
 80088bc:	f003 030f 	and.w	r3, r3, #15
 80088c0:	3302      	adds	r3, #2
 80088c2:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 80088c4:	4a43      	ldr	r2, [pc, #268]	; (80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80088c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80088cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ce:	fb02 f303 	mul.w	r3, r2, r3
 80088d2:	005b      	lsls	r3, r3, #1
 80088d4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80088d6:	e06c      	b.n	80089b2 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 80088d8:	4b3d      	ldr	r3, [pc, #244]	; (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80088da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d103      	bne.n	80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
      {
        /* SYSCLK used as source clock for I2S3 */
        frequency = HAL_RCC_GetSysClockFreq();
 80088e4:	f7ff fc82 	bl	80081ec <HAL_RCC_GetSysClockFreq>
 80088e8:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80088ea:	e064      	b.n	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 80088ec:	4b38      	ldr	r3, [pc, #224]	; (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d05e      	beq.n	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80088f8:	4b35      	ldr	r3, [pc, #212]	; (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80088fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fc:	091b      	lsrs	r3, r3, #4
 80088fe:	f003 030f 	and.w	r3, r3, #15
 8008902:	3301      	adds	r3, #1
 8008904:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8008906:	4b32      	ldr	r3, [pc, #200]	; (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890a:	0b1b      	lsrs	r3, r3, #12
 800890c:	f003 030f 	and.w	r3, r3, #15
 8008910:	3302      	adds	r3, #2
 8008912:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8008914:	4a2f      	ldr	r2, [pc, #188]	; (80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008918:	fbb2 f3f3 	udiv	r3, r2, r3
 800891c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800891e:	fb02 f303 	mul.w	r3, r2, r3
 8008922:	005b      	lsls	r3, r3, #1
 8008924:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8008926:	e046      	b.n	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8008928:	4b29      	ldr	r3, [pc, #164]	; (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800892a:	6a1b      	ldr	r3, [r3, #32]
 800892c:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800892e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008930:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008938:	d108      	bne.n	800894c <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 800893a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893c:	f003 0302 	and.w	r3, r3, #2
 8008940:	2b00      	cmp	r3, #0
 8008942:	d003      	beq.n	800894c <HAL_RCCEx_GetPeriphCLKFreq+0x234>
      {
        frequency = LSE_VALUE;
 8008944:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008948:	643b      	str	r3, [r7, #64]	; 0x40
 800894a:	e01f      	b.n	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800894c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008952:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008956:	d109      	bne.n	800896c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8008958:	4b1d      	ldr	r3, [pc, #116]	; (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800895a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895c:	f003 0302 	and.w	r3, r3, #2
 8008960:	2b00      	cmp	r3, #0
 8008962:	d003      	beq.n	800896c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
      {
        frequency = LSI_VALUE;
 8008964:	f649 4340 	movw	r3, #40000	; 0x9c40
 8008968:	643b      	str	r3, [r7, #64]	; 0x40
 800896a:	e00f      	b.n	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800896c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008972:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008976:	d120      	bne.n	80089ba <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 8008978:	4b15      	ldr	r3, [pc, #84]	; (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008980:	2b00      	cmp	r3, #0
 8008982:	d01a      	beq.n	80089ba <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
      {
        frequency = HSE_VALUE / 128U;
 8008984:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008988:	643b      	str	r3, [r7, #64]	; 0x40
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 800898a:	e016      	b.n	80089ba <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 800898c:	e015      	b.n	80089ba <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800898e:	f7ff fd2f 	bl	80083f0 <HAL_RCC_GetPCLK2Freq>
 8008992:	4602      	mov	r2, r0
 8008994:	4b0e      	ldr	r3, [pc, #56]	; (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	0b9b      	lsrs	r3, r3, #14
 800899a:	f003 0303 	and.w	r3, r3, #3
 800899e:	3301      	adds	r3, #1
 80089a0:	005b      	lsls	r3, r3, #1
 80089a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80089a6:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80089a8:	e008      	b.n	80089bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
    }
    default:
    {
      break;
 80089aa:	bf00      	nop
 80089ac:	e006      	b.n	80089bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 80089ae:	bf00      	nop
 80089b0:	e004      	b.n	80089bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 80089b2:	bf00      	nop
 80089b4:	e002      	b.n	80089bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 80089b6:	bf00      	nop
 80089b8:	e000      	b.n	80089bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 80089ba:	bf00      	nop
    }
  }
  return (frequency);
 80089bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80089be:	4618      	mov	r0, r3
 80089c0:	374c      	adds	r7, #76	; 0x4c
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd90      	pop	{r4, r7, pc}
 80089c6:	bf00      	nop
 80089c8:	0800f1f8 	.word	0x0800f1f8
 80089cc:	0800f208 	.word	0x0800f208
 80089d0:	40021000 	.word	0x40021000
 80089d4:	007a1200 	.word	0x007a1200
 80089d8:	003d0900 	.word	0x003d0900
 80089dc:	aaaaaaab 	.word	0xaaaaaaab

080089e0 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80089e8:	2300      	movs	r3, #0
 80089ea:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d101      	bne.n	80089f6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e084      	b.n	8008b00 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	7c5b      	ldrb	r3, [r3, #17]
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d105      	bne.n	8008a0c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f7fc f97a 	bl	8004d00 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2202      	movs	r2, #2
 8008a10:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 faa0 	bl	8008f58 <HAL_RTC_WaitForSynchro>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d004      	beq.n	8008a28 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2204      	movs	r2, #4
 8008a22:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8008a24:	2301      	movs	r3, #1
 8008a26:	e06b      	b.n	8008b00 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 fb59 	bl	80090e0 <RTC_EnterInitMode>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d004      	beq.n	8008a3e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2204      	movs	r2, #4
 8008a38:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e060      	b.n	8008b00 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	685a      	ldr	r2, [r3, #4]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f022 0207 	bic.w	r2, r2, #7
 8008a4c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d005      	beq.n	8008a62 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8008a56:	4b2c      	ldr	r3, [pc, #176]	; (8008b08 <HAL_RTC_Init+0x128>)
 8008a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a5a:	4a2b      	ldr	r2, [pc, #172]	; (8008b08 <HAL_RTC_Init+0x128>)
 8008a5c:	f023 0301 	bic.w	r3, r3, #1
 8008a60:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8008a62:	4b29      	ldr	r3, [pc, #164]	; (8008b08 <HAL_RTC_Init+0x128>)
 8008a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a66:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	4926      	ldr	r1, [pc, #152]	; (8008b08 <HAL_RTC_Init+0x128>)
 8008a70:	4313      	orrs	r3, r2
 8008a72:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a7c:	d003      	beq.n	8008a86 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	60fb      	str	r3, [r7, #12]
 8008a84:	e00e      	b.n	8008aa4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8008a86:	2001      	movs	r0, #1
 8008a88:	f7ff fe46 	bl	8008718 <HAL_RCCEx_GetPeriphCLKFreq>
 8008a8c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d104      	bne.n	8008a9e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2204      	movs	r2, #4
 8008a98:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e030      	b.n	8008b00 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	f023 010f 	bic.w	r1, r3, #15
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	0c1a      	lsrs	r2, r3, #16
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	430a      	orrs	r2, r1
 8008ab8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	0c1b      	lsrs	r3, r3, #16
 8008ac2:	041b      	lsls	r3, r3, #16
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	b291      	uxth	r1, r2
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	6812      	ldr	r2, [r2, #0]
 8008acc:	430b      	orrs	r3, r1
 8008ace:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 fb2d 	bl	8009130 <RTC_ExitInitMode>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d004      	beq.n	8008ae6 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2204      	movs	r2, #4
 8008ae0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e00c      	b.n	8008b00 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2201      	movs	r2, #1
 8008af0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2201      	movs	r2, #1
 8008af6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8008afe:	2300      	movs	r3, #0
  }
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	40006c00 	.word	0x40006c00

08008b0c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008b0c:	b590      	push	{r4, r7, lr}
 8008b0e:	b087      	sub	sp, #28
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	617b      	str	r3, [r7, #20]
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d002      	beq.n	8008b2c <HAL_RTC_SetTime+0x20>
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d101      	bne.n	8008b30 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e080      	b.n	8008c32 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	7c1b      	ldrb	r3, [r3, #16]
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d101      	bne.n	8008b3c <HAL_RTC_SetTime+0x30>
 8008b38:	2302      	movs	r3, #2
 8008b3a:	e07a      	b.n	8008c32 <HAL_RTC_SetTime+0x126>
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2202      	movs	r2, #2
 8008b46:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d113      	bne.n	8008b76 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	461a      	mov	r2, r3
 8008b54:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008b58:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	785b      	ldrb	r3, [r3, #1]
 8008b60:	4619      	mov	r1, r3
 8008b62:	460b      	mov	r3, r1
 8008b64:	011b      	lsls	r3, r3, #4
 8008b66:	1a5b      	subs	r3, r3, r1
 8008b68:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8008b6a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8008b6c:	68ba      	ldr	r2, [r7, #8]
 8008b6e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8008b70:	4413      	add	r3, r2
 8008b72:	617b      	str	r3, [r7, #20]
 8008b74:	e01e      	b.n	8008bb4 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 fb1d 	bl	80091ba <RTC_Bcd2ToByte>
 8008b80:	4603      	mov	r3, r0
 8008b82:	461a      	mov	r2, r3
 8008b84:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008b88:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	785b      	ldrb	r3, [r3, #1]
 8008b90:	4618      	mov	r0, r3
 8008b92:	f000 fb12 	bl	80091ba <RTC_Bcd2ToByte>
 8008b96:	4603      	mov	r3, r0
 8008b98:	461a      	mov	r2, r3
 8008b9a:	4613      	mov	r3, r2
 8008b9c:	011b      	lsls	r3, r3, #4
 8008b9e:	1a9b      	subs	r3, r3, r2
 8008ba0:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8008ba2:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	789b      	ldrb	r3, [r3, #2]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f000 fb06 	bl	80091ba <RTC_Bcd2ToByte>
 8008bae:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8008bb0:	4423      	add	r3, r4
 8008bb2:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8008bb4:	6979      	ldr	r1, [r7, #20]
 8008bb6:	68f8      	ldr	r0, [r7, #12]
 8008bb8:	f000 fa2b 	bl	8009012 <RTC_WriteTimeCounter>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d007      	beq.n	8008bd2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2204      	movs	r2, #4
 8008bc6:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e02f      	b.n	8008c32 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	685a      	ldr	r2, [r3, #4]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f022 0205 	bic.w	r2, r2, #5
 8008be0:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f000 fa3c 	bl	8009060 <RTC_ReadAlarmCounter>
 8008be8:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bf0:	d018      	beq.n	8008c24 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8008bf2:	693a      	ldr	r2, [r7, #16]
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d214      	bcs.n	8008c24 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8008c00:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008c04:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8008c06:	6939      	ldr	r1, [r7, #16]
 8008c08:	68f8      	ldr	r0, [r7, #12]
 8008c0a:	f000 fa42 	bl	8009092 <RTC_WriteAlarmCounter>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d007      	beq.n	8008c24 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2204      	movs	r2, #4
 8008c18:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e006      	b.n	8008c32 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2201      	movs	r2, #1
 8008c28:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8008c30:	2300      	movs	r3, #0
  }
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	371c      	adds	r7, #28
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd90      	pop	{r4, r7, pc}
	...

08008c3c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b088      	sub	sp, #32
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	61bb      	str	r3, [r7, #24]
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	61fb      	str	r3, [r7, #28]
 8008c50:	2300      	movs	r3, #0
 8008c52:	617b      	str	r3, [r7, #20]
 8008c54:	2300      	movs	r3, #0
 8008c56:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d002      	beq.n	8008c64 <HAL_RTC_GetTime+0x28>
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d101      	bne.n	8008c68 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	e0b5      	b.n	8008dd4 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	f003 0304 	and.w	r3, r3, #4
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d001      	beq.n	8008c7a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	e0ac      	b.n	8008dd4 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8008c7a:	68f8      	ldr	r0, [r7, #12]
 8008c7c:	f000 f999 	bl	8008fb2 <RTC_ReadTimeCounter>
 8008c80:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	4a55      	ldr	r2, [pc, #340]	; (8008ddc <HAL_RTC_GetTime+0x1a0>)
 8008c86:	fba2 2303 	umull	r2, r3, r2, r3
 8008c8a:	0adb      	lsrs	r3, r3, #11
 8008c8c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8008c8e:	69ba      	ldr	r2, [r7, #24]
 8008c90:	4b52      	ldr	r3, [pc, #328]	; (8008ddc <HAL_RTC_GetTime+0x1a0>)
 8008c92:	fba3 1302 	umull	r1, r3, r3, r2
 8008c96:	0adb      	lsrs	r3, r3, #11
 8008c98:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8008c9c:	fb01 f303 	mul.w	r3, r1, r3
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	4a4f      	ldr	r2, [pc, #316]	; (8008de0 <HAL_RTC_GetTime+0x1a4>)
 8008ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ca8:	095b      	lsrs	r3, r3, #5
 8008caa:	b2da      	uxtb	r2, r3
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	4a4a      	ldr	r2, [pc, #296]	; (8008ddc <HAL_RTC_GetTime+0x1a0>)
 8008cb4:	fba2 1203 	umull	r1, r2, r2, r3
 8008cb8:	0ad2      	lsrs	r2, r2, #11
 8008cba:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8008cbe:	fb01 f202 	mul.w	r2, r1, r2
 8008cc2:	1a9a      	subs	r2, r3, r2
 8008cc4:	4b46      	ldr	r3, [pc, #280]	; (8008de0 <HAL_RTC_GetTime+0x1a4>)
 8008cc6:	fba3 1302 	umull	r1, r3, r3, r2
 8008cca:	0959      	lsrs	r1, r3, #5
 8008ccc:	460b      	mov	r3, r1
 8008cce:	011b      	lsls	r3, r3, #4
 8008cd0:	1a5b      	subs	r3, r3, r1
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	1ad1      	subs	r1, r2, r3
 8008cd6:	b2ca      	uxtb	r2, r1
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	2b17      	cmp	r3, #23
 8008ce0:	d955      	bls.n	8008d8e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	4a3f      	ldr	r2, [pc, #252]	; (8008de4 <HAL_RTC_GetTime+0x1a8>)
 8008ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8008cea:	091b      	lsrs	r3, r3, #4
 8008cec:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8008cee:	6939      	ldr	r1, [r7, #16]
 8008cf0:	4b3c      	ldr	r3, [pc, #240]	; (8008de4 <HAL_RTC_GetTime+0x1a8>)
 8008cf2:	fba3 2301 	umull	r2, r3, r3, r1
 8008cf6:	091a      	lsrs	r2, r3, #4
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	005b      	lsls	r3, r3, #1
 8008cfc:	4413      	add	r3, r2
 8008cfe:	00db      	lsls	r3, r3, #3
 8008d00:	1aca      	subs	r2, r1, r3
 8008d02:	b2d2      	uxtb	r2, r2
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f000 f9a9 	bl	8009060 <RTC_ReadAlarmCounter>
 8008d0e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d16:	d008      	beq.n	8008d2a <HAL_RTC_GetTime+0xee>
 8008d18:	69fa      	ldr	r2, [r7, #28]
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d904      	bls.n	8008d2a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8008d20:	69fa      	ldr	r2, [r7, #28]
 8008d22:	69bb      	ldr	r3, [r7, #24]
 8008d24:	1ad3      	subs	r3, r2, r3
 8008d26:	61fb      	str	r3, [r7, #28]
 8008d28:	e002      	b.n	8008d30 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8008d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d2e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	4a2d      	ldr	r2, [pc, #180]	; (8008de8 <HAL_RTC_GetTime+0x1ac>)
 8008d34:	fb02 f303 	mul.w	r3, r2, r3
 8008d38:	69ba      	ldr	r2, [r7, #24]
 8008d3a:	1ad3      	subs	r3, r2, r3
 8008d3c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8008d3e:	69b9      	ldr	r1, [r7, #24]
 8008d40:	68f8      	ldr	r0, [r7, #12]
 8008d42:	f000 f966 	bl	8009012 <RTC_WriteTimeCounter>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d001      	beq.n	8008d50 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e041      	b.n	8008dd4 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d56:	d00c      	beq.n	8008d72 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8008d58:	69fa      	ldr	r2, [r7, #28]
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8008d60:	69f9      	ldr	r1, [r7, #28]
 8008d62:	68f8      	ldr	r0, [r7, #12]
 8008d64:	f000 f995 	bl	8009092 <RTC_WriteAlarmCounter>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00a      	beq.n	8008d84 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e030      	b.n	8008dd4 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8008d72:	69f9      	ldr	r1, [r7, #28]
 8008d74:	68f8      	ldr	r0, [r7, #12]
 8008d76:	f000 f98c 	bl	8009092 <RTC_WriteAlarmCounter>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d001      	beq.n	8008d84 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8008d80:	2301      	movs	r3, #1
 8008d82:	e027      	b.n	8008dd4 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8008d84:	6979      	ldr	r1, [r7, #20]
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	f000 fa34 	bl	80091f4 <RTC_DateUpdate>
 8008d8c:	e003      	b.n	8008d96 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	b2da      	uxtb	r2, r3
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d01a      	beq.n	8008dd2 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	4618      	mov	r0, r3
 8008da2:	f000 f9ed 	bl	8009180 <RTC_ByteToBcd2>
 8008da6:	4603      	mov	r3, r0
 8008da8:	461a      	mov	r2, r3
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	785b      	ldrb	r3, [r3, #1]
 8008db2:	4618      	mov	r0, r3
 8008db4:	f000 f9e4 	bl	8009180 <RTC_ByteToBcd2>
 8008db8:	4603      	mov	r3, r0
 8008dba:	461a      	mov	r2, r3
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	789b      	ldrb	r3, [r3, #2]
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f000 f9db 	bl	8009180 <RTC_ByteToBcd2>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	461a      	mov	r2, r3
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008dd2:	2300      	movs	r3, #0
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3720      	adds	r7, #32
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}
 8008ddc:	91a2b3c5 	.word	0x91a2b3c5
 8008de0:	88888889 	.word	0x88888889
 8008de4:	aaaaaaab 	.word	0xaaaaaaab
 8008de8:	00015180 	.word	0x00015180

08008dec <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b088      	sub	sp, #32
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	61fb      	str	r3, [r7, #28]
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	61bb      	str	r3, [r7, #24]
 8008e00:	2300      	movs	r3, #0
 8008e02:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d002      	beq.n	8008e10 <HAL_RTC_SetDate+0x24>
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d101      	bne.n	8008e14 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	e097      	b.n	8008f44 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	7c1b      	ldrb	r3, [r3, #16]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d101      	bne.n	8008e20 <HAL_RTC_SetDate+0x34>
 8008e1c:	2302      	movs	r3, #2
 8008e1e:	e091      	b.n	8008f44 <HAL_RTC_SetDate+0x158>
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2201      	movs	r2, #1
 8008e24:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2202      	movs	r2, #2
 8008e2a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d10c      	bne.n	8008e4c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	78da      	ldrb	r2, [r3, #3]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	785a      	ldrb	r2, [r3, #1]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	789a      	ldrb	r2, [r3, #2]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	739a      	strb	r2, [r3, #14]
 8008e4a:	e01a      	b.n	8008e82 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	78db      	ldrb	r3, [r3, #3]
 8008e50:	4618      	mov	r0, r3
 8008e52:	f000 f9b2 	bl	80091ba <RTC_Bcd2ToByte>
 8008e56:	4603      	mov	r3, r0
 8008e58:	461a      	mov	r2, r3
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	785b      	ldrb	r3, [r3, #1]
 8008e62:	4618      	mov	r0, r3
 8008e64:	f000 f9a9 	bl	80091ba <RTC_Bcd2ToByte>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	789b      	ldrb	r3, [r3, #2]
 8008e74:	4618      	mov	r0, r3
 8008e76:	f000 f9a0 	bl	80091ba <RTC_Bcd2ToByte>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	7bdb      	ldrb	r3, [r3, #15]
 8008e86:	4618      	mov	r0, r3
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	7b59      	ldrb	r1, [r3, #13]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	7b9b      	ldrb	r3, [r3, #14]
 8008e90:	461a      	mov	r2, r3
 8008e92:	f000 fa8b 	bl	80093ac <RTC_WeekDayNum>
 8008e96:	4603      	mov	r3, r0
 8008e98:	461a      	mov	r2, r3
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	7b1a      	ldrb	r2, [r3, #12]
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	f000 f883 	bl	8008fb2 <RTC_ReadTimeCounter>
 8008eac:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	4a26      	ldr	r2, [pc, #152]	; (8008f4c <HAL_RTC_SetDate+0x160>)
 8008eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8008eb6:	0adb      	lsrs	r3, r3, #11
 8008eb8:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	2b18      	cmp	r3, #24
 8008ebe:	d93a      	bls.n	8008f36 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	4a23      	ldr	r2, [pc, #140]	; (8008f50 <HAL_RTC_SetDate+0x164>)
 8008ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ec8:	091b      	lsrs	r3, r3, #4
 8008eca:	4a22      	ldr	r2, [pc, #136]	; (8008f54 <HAL_RTC_SetDate+0x168>)
 8008ecc:	fb02 f303 	mul.w	r3, r2, r3
 8008ed0:	69fa      	ldr	r2, [r7, #28]
 8008ed2:	1ad3      	subs	r3, r2, r3
 8008ed4:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8008ed6:	69f9      	ldr	r1, [r7, #28]
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	f000 f89a 	bl	8009012 <RTC_WriteTimeCounter>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d007      	beq.n	8008ef4 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2204      	movs	r2, #4
 8008ee8:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2200      	movs	r2, #0
 8008eee:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e027      	b.n	8008f44 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f000 f8b3 	bl	8009060 <RTC_ReadAlarmCounter>
 8008efa:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8008efc:	69bb      	ldr	r3, [r7, #24]
 8008efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f02:	d018      	beq.n	8008f36 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8008f04:	69ba      	ldr	r2, [r7, #24]
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d214      	bcs.n	8008f36 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8008f0c:	69bb      	ldr	r3, [r7, #24]
 8008f0e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8008f12:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008f16:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8008f18:	69b9      	ldr	r1, [r7, #24]
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f000 f8b9 	bl	8009092 <RTC_WriteAlarmCounter>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d007      	beq.n	8008f36 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2204      	movs	r2, #4
 8008f2a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	e006      	b.n	8008f44 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8008f42:	2300      	movs	r3, #0
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3720      	adds	r7, #32
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	91a2b3c5 	.word	0x91a2b3c5
 8008f50:	aaaaaaab 	.word	0xaaaaaaab
 8008f54:	00015180 	.word	0x00015180

08008f58 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008f60:	2300      	movs	r3, #0
 8008f62:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d101      	bne.n	8008f6e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e01d      	b.n	8008faa <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	685a      	ldr	r2, [r3, #4]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f022 0208 	bic.w	r2, r2, #8
 8008f7c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8008f7e:	f7fc f8ad 	bl	80050dc <HAL_GetTick>
 8008f82:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8008f84:	e009      	b.n	8008f9a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8008f86:	f7fc f8a9 	bl	80050dc <HAL_GetTick>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	1ad3      	subs	r3, r2, r3
 8008f90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f94:	d901      	bls.n	8008f9a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8008f96:	2303      	movs	r3, #3
 8008f98:	e007      	b.n	8008faa <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	f003 0308 	and.w	r3, r3, #8
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d0ee      	beq.n	8008f86 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8008fa8:	2300      	movs	r3, #0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8008fb2:	b480      	push	{r7}
 8008fb4:	b087      	sub	sp, #28
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	827b      	strh	r3, [r7, #18]
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	823b      	strh	r3, [r7, #16]
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	699b      	ldr	r3, [r3, #24]
 8008fd0:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	69db      	ldr	r3, [r3, #28]
 8008fd8:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	699b      	ldr	r3, [r3, #24]
 8008fe0:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8008fe2:	8a7a      	ldrh	r2, [r7, #18]
 8008fe4:	8a3b      	ldrh	r3, [r7, #16]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d008      	beq.n	8008ffc <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8008fea:	8a3b      	ldrh	r3, [r7, #16]
 8008fec:	041a      	lsls	r2, r3, #16
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	69db      	ldr	r3, [r3, #28]
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	617b      	str	r3, [r7, #20]
 8008ffa:	e004      	b.n	8009006 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8008ffc:	8a7b      	ldrh	r3, [r7, #18]
 8008ffe:	041a      	lsls	r2, r3, #16
 8009000:	89fb      	ldrh	r3, [r7, #14]
 8009002:	4313      	orrs	r3, r2
 8009004:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8009006:	697b      	ldr	r3, [r7, #20]
}
 8009008:	4618      	mov	r0, r3
 800900a:	371c      	adds	r7, #28
 800900c:	46bd      	mov	sp, r7
 800900e:	bc80      	pop	{r7}
 8009010:	4770      	bx	lr

08009012 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8009012:	b580      	push	{r7, lr}
 8009014:	b084      	sub	sp, #16
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
 800901a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800901c:	2300      	movs	r3, #0
 800901e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 f85d 	bl	80090e0 <RTC_EnterInitMode>
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d002      	beq.n	8009032 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800902c:	2301      	movs	r3, #1
 800902e:	73fb      	strb	r3, [r7, #15]
 8009030:	e011      	b.n	8009056 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	683a      	ldr	r2, [r7, #0]
 8009038:	0c12      	lsrs	r2, r2, #16
 800903a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	683a      	ldr	r2, [r7, #0]
 8009042:	b292      	uxth	r2, r2
 8009044:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 f872 	bl	8009130 <RTC_ExitInitMode>
 800904c:	4603      	mov	r3, r0
 800904e:	2b00      	cmp	r3, #0
 8009050:	d001      	beq.n	8009056 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8009052:	2301      	movs	r3, #1
 8009054:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009056:	7bfb      	ldrb	r3, [r7, #15]
}
 8009058:	4618      	mov	r0, r3
 800905a:	3710      	adds	r7, #16
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8009060:	b480      	push	{r7}
 8009062:	b085      	sub	sp, #20
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8009068:	2300      	movs	r3, #0
 800906a:	81fb      	strh	r3, [r7, #14]
 800906c:	2300      	movs	r3, #0
 800906e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	6a1b      	ldr	r3, [r3, #32]
 8009076:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8009080:	89fb      	ldrh	r3, [r7, #14]
 8009082:	041a      	lsls	r2, r3, #16
 8009084:	89bb      	ldrh	r3, [r7, #12]
 8009086:	4313      	orrs	r3, r2
}
 8009088:	4618      	mov	r0, r3
 800908a:	3714      	adds	r7, #20
 800908c:	46bd      	mov	sp, r7
 800908e:	bc80      	pop	{r7}
 8009090:	4770      	bx	lr

08009092 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b084      	sub	sp, #16
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
 800909a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800909c:	2300      	movs	r3, #0
 800909e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 f81d 	bl	80090e0 <RTC_EnterInitMode>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d002      	beq.n	80090b2 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80090ac:	2301      	movs	r3, #1
 80090ae:	73fb      	strb	r3, [r7, #15]
 80090b0:	e011      	b.n	80090d6 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	683a      	ldr	r2, [r7, #0]
 80090b8:	0c12      	lsrs	r2, r2, #16
 80090ba:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	683a      	ldr	r2, [r7, #0]
 80090c2:	b292      	uxth	r2, r2
 80090c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 f832 	bl	8009130 <RTC_ExitInitMode>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d001      	beq.n	80090d6 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80090d2:	2301      	movs	r3, #1
 80090d4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80090d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3710      	adds	r7, #16
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80090e8:	2300      	movs	r3, #0
 80090ea:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80090ec:	f7fb fff6 	bl	80050dc <HAL_GetTick>
 80090f0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80090f2:	e009      	b.n	8009108 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80090f4:	f7fb fff2 	bl	80050dc <HAL_GetTick>
 80090f8:	4602      	mov	r2, r0
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	1ad3      	subs	r3, r2, r3
 80090fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009102:	d901      	bls.n	8009108 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8009104:	2303      	movs	r3, #3
 8009106:	e00f      	b.n	8009128 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	f003 0320 	and.w	r3, r3, #32
 8009112:	2b00      	cmp	r3, #0
 8009114:	d0ee      	beq.n	80090f4 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	685a      	ldr	r2, [r3, #4]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f042 0210 	orr.w	r2, r2, #16
 8009124:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8009126:	2300      	movs	r3, #0
}
 8009128:	4618      	mov	r0, r3
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009138:	2300      	movs	r3, #0
 800913a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	685a      	ldr	r2, [r3, #4]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f022 0210 	bic.w	r2, r2, #16
 800914a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800914c:	f7fb ffc6 	bl	80050dc <HAL_GetTick>
 8009150:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8009152:	e009      	b.n	8009168 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8009154:	f7fb ffc2 	bl	80050dc <HAL_GetTick>
 8009158:	4602      	mov	r2, r0
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	1ad3      	subs	r3, r2, r3
 800915e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009162:	d901      	bls.n	8009168 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8009164:	2303      	movs	r3, #3
 8009166:	e007      	b.n	8009178 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	f003 0320 	and.w	r3, r3, #32
 8009172:	2b00      	cmp	r3, #0
 8009174:	d0ee      	beq.n	8009154 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8009176:	2300      	movs	r3, #0
}
 8009178:	4618      	mov	r0, r3
 800917a:	3710      	adds	r7, #16
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009180:	b480      	push	{r7}
 8009182:	b085      	sub	sp, #20
 8009184:	af00      	add	r7, sp, #0
 8009186:	4603      	mov	r3, r0
 8009188:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800918a:	2300      	movs	r3, #0
 800918c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800918e:	e005      	b.n	800919c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	3301      	adds	r3, #1
 8009194:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8009196:	79fb      	ldrb	r3, [r7, #7]
 8009198:	3b0a      	subs	r3, #10
 800919a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800919c:	79fb      	ldrb	r3, [r7, #7]
 800919e:	2b09      	cmp	r3, #9
 80091a0:	d8f6      	bhi.n	8009190 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	011b      	lsls	r3, r3, #4
 80091a8:	b2da      	uxtb	r2, r3
 80091aa:	79fb      	ldrb	r3, [r7, #7]
 80091ac:	4313      	orrs	r3, r2
 80091ae:	b2db      	uxtb	r3, r3
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3714      	adds	r7, #20
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bc80      	pop	{r7}
 80091b8:	4770      	bx	lr

080091ba <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80091ba:	b480      	push	{r7}
 80091bc:	b085      	sub	sp, #20
 80091be:	af00      	add	r7, sp, #0
 80091c0:	4603      	mov	r3, r0
 80091c2:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80091c4:	2300      	movs	r3, #0
 80091c6:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80091c8:	79fb      	ldrb	r3, [r7, #7]
 80091ca:	091b      	lsrs	r3, r3, #4
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	461a      	mov	r2, r3
 80091d0:	4613      	mov	r3, r2
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	4413      	add	r3, r2
 80091d6:	005b      	lsls	r3, r3, #1
 80091d8:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80091da:	79fb      	ldrb	r3, [r7, #7]
 80091dc:	f003 030f 	and.w	r3, r3, #15
 80091e0:	b2da      	uxtb	r2, r3
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	4413      	add	r3, r2
 80091e8:	b2db      	uxtb	r3, r3
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3714      	adds	r7, #20
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bc80      	pop	{r7}
 80091f2:	4770      	bx	lr

080091f4 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b086      	sub	sp, #24
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80091fe:	2300      	movs	r3, #0
 8009200:	617b      	str	r3, [r7, #20]
 8009202:	2300      	movs	r3, #0
 8009204:	613b      	str	r3, [r7, #16]
 8009206:	2300      	movs	r3, #0
 8009208:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800920a:	2300      	movs	r3, #0
 800920c:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	7bdb      	ldrb	r3, [r3, #15]
 8009212:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	7b5b      	ldrb	r3, [r3, #13]
 8009218:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	7b9b      	ldrb	r3, [r3, #14]
 800921e:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8009220:	2300      	movs	r3, #0
 8009222:	60bb      	str	r3, [r7, #8]
 8009224:	e06f      	b.n	8009306 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	2b01      	cmp	r3, #1
 800922a:	d011      	beq.n	8009250 <RTC_DateUpdate+0x5c>
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	2b03      	cmp	r3, #3
 8009230:	d00e      	beq.n	8009250 <RTC_DateUpdate+0x5c>
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	2b05      	cmp	r3, #5
 8009236:	d00b      	beq.n	8009250 <RTC_DateUpdate+0x5c>
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	2b07      	cmp	r3, #7
 800923c:	d008      	beq.n	8009250 <RTC_DateUpdate+0x5c>
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	2b08      	cmp	r3, #8
 8009242:	d005      	beq.n	8009250 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	2b0a      	cmp	r3, #10
 8009248:	d002      	beq.n	8009250 <RTC_DateUpdate+0x5c>
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	2b0c      	cmp	r3, #12
 800924e:	d117      	bne.n	8009280 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2b1e      	cmp	r3, #30
 8009254:	d803      	bhi.n	800925e <RTC_DateUpdate+0x6a>
      {
        day++;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	3301      	adds	r3, #1
 800925a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800925c:	e050      	b.n	8009300 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	2b0c      	cmp	r3, #12
 8009262:	d005      	beq.n	8009270 <RTC_DateUpdate+0x7c>
        {
          month++;
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	3301      	adds	r3, #1
 8009268:	613b      	str	r3, [r7, #16]
          day = 1U;
 800926a:	2301      	movs	r3, #1
 800926c:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800926e:	e047      	b.n	8009300 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8009270:	2301      	movs	r3, #1
 8009272:	613b      	str	r3, [r7, #16]
          day = 1U;
 8009274:	2301      	movs	r3, #1
 8009276:	60fb      	str	r3, [r7, #12]
          year++;
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	3301      	adds	r3, #1
 800927c:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800927e:	e03f      	b.n	8009300 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	2b04      	cmp	r3, #4
 8009284:	d008      	beq.n	8009298 <RTC_DateUpdate+0xa4>
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	2b06      	cmp	r3, #6
 800928a:	d005      	beq.n	8009298 <RTC_DateUpdate+0xa4>
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	2b09      	cmp	r3, #9
 8009290:	d002      	beq.n	8009298 <RTC_DateUpdate+0xa4>
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	2b0b      	cmp	r3, #11
 8009296:	d10c      	bne.n	80092b2 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2b1d      	cmp	r3, #29
 800929c:	d803      	bhi.n	80092a6 <RTC_DateUpdate+0xb2>
      {
        day++;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	3301      	adds	r3, #1
 80092a2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80092a4:	e02c      	b.n	8009300 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	3301      	adds	r3, #1
 80092aa:	613b      	str	r3, [r7, #16]
        day = 1U;
 80092ac:	2301      	movs	r3, #1
 80092ae:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80092b0:	e026      	b.n	8009300 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	2b02      	cmp	r3, #2
 80092b6:	d123      	bne.n	8009300 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2b1b      	cmp	r3, #27
 80092bc:	d803      	bhi.n	80092c6 <RTC_DateUpdate+0xd2>
      {
        day++;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	3301      	adds	r3, #1
 80092c2:	60fb      	str	r3, [r7, #12]
 80092c4:	e01c      	b.n	8009300 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2b1c      	cmp	r3, #28
 80092ca:	d111      	bne.n	80092f0 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	4618      	mov	r0, r3
 80092d2:	f000 f839 	bl	8009348 <RTC_IsLeapYear>
 80092d6:	4603      	mov	r3, r0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d003      	beq.n	80092e4 <RTC_DateUpdate+0xf0>
        {
          day++;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	3301      	adds	r3, #1
 80092e0:	60fb      	str	r3, [r7, #12]
 80092e2:	e00d      	b.n	8009300 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	3301      	adds	r3, #1
 80092e8:	613b      	str	r3, [r7, #16]
          day = 1U;
 80092ea:	2301      	movs	r3, #1
 80092ec:	60fb      	str	r3, [r7, #12]
 80092ee:	e007      	b.n	8009300 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2b1d      	cmp	r3, #29
 80092f4:	d104      	bne.n	8009300 <RTC_DateUpdate+0x10c>
      {
        month++;
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	3301      	adds	r3, #1
 80092fa:	613b      	str	r3, [r7, #16]
        day = 1U;
 80092fc:	2301      	movs	r3, #1
 80092fe:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	3301      	adds	r3, #1
 8009304:	60bb      	str	r3, [r7, #8]
 8009306:	68ba      	ldr	r2, [r7, #8]
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	429a      	cmp	r2, r3
 800930c:	d38b      	bcc.n	8009226 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	b2da      	uxtb	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	b2da      	uxtb	r2, r3
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	b2da      	uxtb	r2, r3
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	b2db      	uxtb	r3, r3
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	b2d2      	uxtb	r2, r2
 800932e:	4619      	mov	r1, r3
 8009330:	6978      	ldr	r0, [r7, #20]
 8009332:	f000 f83b 	bl	80093ac <RTC_WeekDayNum>
 8009336:	4603      	mov	r3, r0
 8009338:	461a      	mov	r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	731a      	strb	r2, [r3, #12]
}
 800933e:	bf00      	nop
 8009340:	3718      	adds	r7, #24
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
	...

08009348 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	4603      	mov	r3, r0
 8009350:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8009352:	88fb      	ldrh	r3, [r7, #6]
 8009354:	f003 0303 	and.w	r3, r3, #3
 8009358:	b29b      	uxth	r3, r3
 800935a:	2b00      	cmp	r3, #0
 800935c:	d001      	beq.n	8009362 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800935e:	2300      	movs	r3, #0
 8009360:	e01d      	b.n	800939e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8009362:	88fb      	ldrh	r3, [r7, #6]
 8009364:	4a10      	ldr	r2, [pc, #64]	; (80093a8 <RTC_IsLeapYear+0x60>)
 8009366:	fba2 1203 	umull	r1, r2, r2, r3
 800936a:	0952      	lsrs	r2, r2, #5
 800936c:	2164      	movs	r1, #100	; 0x64
 800936e:	fb01 f202 	mul.w	r2, r1, r2
 8009372:	1a9b      	subs	r3, r3, r2
 8009374:	b29b      	uxth	r3, r3
 8009376:	2b00      	cmp	r3, #0
 8009378:	d001      	beq.n	800937e <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800937a:	2301      	movs	r3, #1
 800937c:	e00f      	b.n	800939e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800937e:	88fb      	ldrh	r3, [r7, #6]
 8009380:	4a09      	ldr	r2, [pc, #36]	; (80093a8 <RTC_IsLeapYear+0x60>)
 8009382:	fba2 1203 	umull	r1, r2, r2, r3
 8009386:	09d2      	lsrs	r2, r2, #7
 8009388:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800938c:	fb01 f202 	mul.w	r2, r1, r2
 8009390:	1a9b      	subs	r3, r3, r2
 8009392:	b29b      	uxth	r3, r3
 8009394:	2b00      	cmp	r3, #0
 8009396:	d101      	bne.n	800939c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8009398:	2301      	movs	r3, #1
 800939a:	e000      	b.n	800939e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 800939c:	2300      	movs	r3, #0
  }
}
 800939e:	4618      	mov	r0, r3
 80093a0:	370c      	adds	r7, #12
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bc80      	pop	{r7}
 80093a6:	4770      	bx	lr
 80093a8:	51eb851f 	.word	0x51eb851f

080093ac <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b085      	sub	sp, #20
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	460b      	mov	r3, r1
 80093b6:	70fb      	strb	r3, [r7, #3]
 80093b8:	4613      	mov	r3, r2
 80093ba:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80093bc:	2300      	movs	r3, #0
 80093be:	60bb      	str	r3, [r7, #8]
 80093c0:	2300      	movs	r3, #0
 80093c2:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80093ca:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80093cc:	78fb      	ldrb	r3, [r7, #3]
 80093ce:	2b02      	cmp	r3, #2
 80093d0:	d82d      	bhi.n	800942e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80093d2:	78fa      	ldrb	r2, [r7, #3]
 80093d4:	4613      	mov	r3, r2
 80093d6:	005b      	lsls	r3, r3, #1
 80093d8:	4413      	add	r3, r2
 80093da:	00db      	lsls	r3, r3, #3
 80093dc:	1a9b      	subs	r3, r3, r2
 80093de:	4a2c      	ldr	r2, [pc, #176]	; (8009490 <RTC_WeekDayNum+0xe4>)
 80093e0:	fba2 2303 	umull	r2, r3, r2, r3
 80093e4:	085a      	lsrs	r2, r3, #1
 80093e6:	78bb      	ldrb	r3, [r7, #2]
 80093e8:	441a      	add	r2, r3
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	441a      	add	r2, r3
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	3b01      	subs	r3, #1
 80093f2:	089b      	lsrs	r3, r3, #2
 80093f4:	441a      	add	r2, r3
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	3b01      	subs	r3, #1
 80093fa:	4926      	ldr	r1, [pc, #152]	; (8009494 <RTC_WeekDayNum+0xe8>)
 80093fc:	fba1 1303 	umull	r1, r3, r1, r3
 8009400:	095b      	lsrs	r3, r3, #5
 8009402:	1ad2      	subs	r2, r2, r3
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	3b01      	subs	r3, #1
 8009408:	4922      	ldr	r1, [pc, #136]	; (8009494 <RTC_WeekDayNum+0xe8>)
 800940a:	fba1 1303 	umull	r1, r3, r1, r3
 800940e:	09db      	lsrs	r3, r3, #7
 8009410:	4413      	add	r3, r2
 8009412:	1d1a      	adds	r2, r3, #4
 8009414:	4b20      	ldr	r3, [pc, #128]	; (8009498 <RTC_WeekDayNum+0xec>)
 8009416:	fba3 1302 	umull	r1, r3, r3, r2
 800941a:	1ad1      	subs	r1, r2, r3
 800941c:	0849      	lsrs	r1, r1, #1
 800941e:	440b      	add	r3, r1
 8009420:	0899      	lsrs	r1, r3, #2
 8009422:	460b      	mov	r3, r1
 8009424:	00db      	lsls	r3, r3, #3
 8009426:	1a5b      	subs	r3, r3, r1
 8009428:	1ad3      	subs	r3, r2, r3
 800942a:	60fb      	str	r3, [r7, #12]
 800942c:	e029      	b.n	8009482 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800942e:	78fa      	ldrb	r2, [r7, #3]
 8009430:	4613      	mov	r3, r2
 8009432:	005b      	lsls	r3, r3, #1
 8009434:	4413      	add	r3, r2
 8009436:	00db      	lsls	r3, r3, #3
 8009438:	1a9b      	subs	r3, r3, r2
 800943a:	4a15      	ldr	r2, [pc, #84]	; (8009490 <RTC_WeekDayNum+0xe4>)
 800943c:	fba2 2303 	umull	r2, r3, r2, r3
 8009440:	085a      	lsrs	r2, r3, #1
 8009442:	78bb      	ldrb	r3, [r7, #2]
 8009444:	441a      	add	r2, r3
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	441a      	add	r2, r3
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	089b      	lsrs	r3, r3, #2
 800944e:	441a      	add	r2, r3
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	4910      	ldr	r1, [pc, #64]	; (8009494 <RTC_WeekDayNum+0xe8>)
 8009454:	fba1 1303 	umull	r1, r3, r1, r3
 8009458:	095b      	lsrs	r3, r3, #5
 800945a:	1ad2      	subs	r2, r2, r3
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	490d      	ldr	r1, [pc, #52]	; (8009494 <RTC_WeekDayNum+0xe8>)
 8009460:	fba1 1303 	umull	r1, r3, r1, r3
 8009464:	09db      	lsrs	r3, r3, #7
 8009466:	4413      	add	r3, r2
 8009468:	1c9a      	adds	r2, r3, #2
 800946a:	4b0b      	ldr	r3, [pc, #44]	; (8009498 <RTC_WeekDayNum+0xec>)
 800946c:	fba3 1302 	umull	r1, r3, r3, r2
 8009470:	1ad1      	subs	r1, r2, r3
 8009472:	0849      	lsrs	r1, r1, #1
 8009474:	440b      	add	r3, r1
 8009476:	0899      	lsrs	r1, r3, #2
 8009478:	460b      	mov	r3, r1
 800947a:	00db      	lsls	r3, r3, #3
 800947c:	1a5b      	subs	r3, r3, r1
 800947e:	1ad3      	subs	r3, r2, r3
 8009480:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	b2db      	uxtb	r3, r3
}
 8009486:	4618      	mov	r0, r3
 8009488:	3714      	adds	r7, #20
 800948a:	46bd      	mov	sp, r7
 800948c:	bc80      	pop	{r7}
 800948e:	4770      	bx	lr
 8009490:	38e38e39 	.word	0x38e38e39
 8009494:	51eb851f 	.word	0x51eb851f
 8009498:	24924925 	.word	0x24924925

0800949c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d101      	bne.n	80094ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80094aa:	2301      	movs	r3, #1
 80094ac:	e041      	b.n	8009532 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d106      	bne.n	80094c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f839 	bl	800953a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2202      	movs	r2, #2
 80094cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	3304      	adds	r3, #4
 80094d8:	4619      	mov	r1, r3
 80094da:	4610      	mov	r0, r2
 80094dc:	f000 f9bc 	bl	8009858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009530:	2300      	movs	r3, #0
}
 8009532:	4618      	mov	r0, r3
 8009534:	3708      	adds	r7, #8
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800953a:	b480      	push	{r7}
 800953c:	b083      	sub	sp, #12
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009542:	bf00      	nop
 8009544:	370c      	adds	r7, #12
 8009546:	46bd      	mov	sp, r7
 8009548:	bc80      	pop	{r7}
 800954a:	4770      	bx	lr

0800954c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800954c:	b480      	push	{r7}
 800954e:	b085      	sub	sp, #20
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800955a:	b2db      	uxtb	r3, r3
 800955c:	2b01      	cmp	r3, #1
 800955e:	d001      	beq.n	8009564 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009560:	2301      	movs	r3, #1
 8009562:	e03f      	b.n	80095e4 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2202      	movs	r2, #2
 8009568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	68da      	ldr	r2, [r3, #12]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f042 0201 	orr.w	r2, r2, #1
 800957a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a1b      	ldr	r2, [pc, #108]	; (80095f0 <HAL_TIM_Base_Start_IT+0xa4>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d013      	beq.n	80095ae <HAL_TIM_Base_Start_IT+0x62>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800958e:	d00e      	beq.n	80095ae <HAL_TIM_Base_Start_IT+0x62>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a17      	ldr	r2, [pc, #92]	; (80095f4 <HAL_TIM_Base_Start_IT+0xa8>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d009      	beq.n	80095ae <HAL_TIM_Base_Start_IT+0x62>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a16      	ldr	r2, [pc, #88]	; (80095f8 <HAL_TIM_Base_Start_IT+0xac>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d004      	beq.n	80095ae <HAL_TIM_Base_Start_IT+0x62>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a14      	ldr	r2, [pc, #80]	; (80095fc <HAL_TIM_Base_Start_IT+0xb0>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d111      	bne.n	80095d2 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	f003 0307 	and.w	r3, r3, #7
 80095b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2b06      	cmp	r3, #6
 80095be:	d010      	beq.n	80095e2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f042 0201 	orr.w	r2, r2, #1
 80095ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095d0:	e007      	b.n	80095e2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f042 0201 	orr.w	r2, r2, #1
 80095e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80095e2:	2300      	movs	r3, #0
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3714      	adds	r7, #20
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bc80      	pop	{r7}
 80095ec:	4770      	bx	lr
 80095ee:	bf00      	nop
 80095f0:	40012c00 	.word	0x40012c00
 80095f4:	40000400 	.word	0x40000400
 80095f8:	40000800 	.word	0x40000800
 80095fc:	40000c00 	.word	0x40000c00

08009600 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	f003 0302 	and.w	r3, r3, #2
 8009612:	2b02      	cmp	r3, #2
 8009614:	d122      	bne.n	800965c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	f003 0302 	and.w	r3, r3, #2
 8009620:	2b02      	cmp	r3, #2
 8009622:	d11b      	bne.n	800965c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f06f 0202 	mvn.w	r2, #2
 800962c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2201      	movs	r2, #1
 8009632:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	699b      	ldr	r3, [r3, #24]
 800963a:	f003 0303 	and.w	r3, r3, #3
 800963e:	2b00      	cmp	r3, #0
 8009640:	d003      	beq.n	800964a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 f8ed 	bl	8009822 <HAL_TIM_IC_CaptureCallback>
 8009648:	e005      	b.n	8009656 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 f8e0 	bl	8009810 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 f8ef 	bl	8009834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	691b      	ldr	r3, [r3, #16]
 8009662:	f003 0304 	and.w	r3, r3, #4
 8009666:	2b04      	cmp	r3, #4
 8009668:	d122      	bne.n	80096b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	f003 0304 	and.w	r3, r3, #4
 8009674:	2b04      	cmp	r3, #4
 8009676:	d11b      	bne.n	80096b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f06f 0204 	mvn.w	r2, #4
 8009680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2202      	movs	r2, #2
 8009686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	699b      	ldr	r3, [r3, #24]
 800968e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009692:	2b00      	cmp	r3, #0
 8009694:	d003      	beq.n	800969e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 f8c3 	bl	8009822 <HAL_TIM_IC_CaptureCallback>
 800969c:	e005      	b.n	80096aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 f8b6 	bl	8009810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 f8c5 	bl	8009834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	691b      	ldr	r3, [r3, #16]
 80096b6:	f003 0308 	and.w	r3, r3, #8
 80096ba:	2b08      	cmp	r3, #8
 80096bc:	d122      	bne.n	8009704 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	f003 0308 	and.w	r3, r3, #8
 80096c8:	2b08      	cmp	r3, #8
 80096ca:	d11b      	bne.n	8009704 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f06f 0208 	mvn.w	r2, #8
 80096d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2204      	movs	r2, #4
 80096da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	69db      	ldr	r3, [r3, #28]
 80096e2:	f003 0303 	and.w	r3, r3, #3
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d003      	beq.n	80096f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 f899 	bl	8009822 <HAL_TIM_IC_CaptureCallback>
 80096f0:	e005      	b.n	80096fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 f88c 	bl	8009810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 f89b 	bl	8009834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	691b      	ldr	r3, [r3, #16]
 800970a:	f003 0310 	and.w	r3, r3, #16
 800970e:	2b10      	cmp	r3, #16
 8009710:	d122      	bne.n	8009758 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	f003 0310 	and.w	r3, r3, #16
 800971c:	2b10      	cmp	r3, #16
 800971e:	d11b      	bne.n	8009758 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f06f 0210 	mvn.w	r2, #16
 8009728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2208      	movs	r2, #8
 800972e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	69db      	ldr	r3, [r3, #28]
 8009736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800973a:	2b00      	cmp	r3, #0
 800973c:	d003      	beq.n	8009746 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 f86f 	bl	8009822 <HAL_TIM_IC_CaptureCallback>
 8009744:	e005      	b.n	8009752 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 f862 	bl	8009810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 f871 	bl	8009834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	691b      	ldr	r3, [r3, #16]
 800975e:	f003 0301 	and.w	r3, r3, #1
 8009762:	2b01      	cmp	r3, #1
 8009764:	d10e      	bne.n	8009784 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	f003 0301 	and.w	r3, r3, #1
 8009770:	2b01      	cmp	r3, #1
 8009772:	d107      	bne.n	8009784 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f06f 0201 	mvn.w	r2, #1
 800977c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f7fb f894 	bl	80048ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	691b      	ldr	r3, [r3, #16]
 800978a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800978e:	2b80      	cmp	r3, #128	; 0x80
 8009790:	d10e      	bne.n	80097b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800979c:	2b80      	cmp	r3, #128	; 0x80
 800979e:	d107      	bne.n	80097b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80097a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 f8c9 	bl	8009942 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	691b      	ldr	r3, [r3, #16]
 80097b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ba:	2b40      	cmp	r3, #64	; 0x40
 80097bc:	d10e      	bne.n	80097dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097c8:	2b40      	cmp	r3, #64	; 0x40
 80097ca:	d107      	bne.n	80097dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80097d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 f835 	bl	8009846 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	f003 0320 	and.w	r3, r3, #32
 80097e6:	2b20      	cmp	r3, #32
 80097e8:	d10e      	bne.n	8009808 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	f003 0320 	and.w	r3, r3, #32
 80097f4:	2b20      	cmp	r3, #32
 80097f6:	d107      	bne.n	8009808 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f06f 0220 	mvn.w	r2, #32
 8009800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 f894 	bl	8009930 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009808:	bf00      	nop
 800980a:	3708      	adds	r7, #8
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009818:	bf00      	nop
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	bc80      	pop	{r7}
 8009820:	4770      	bx	lr

08009822 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009822:	b480      	push	{r7}
 8009824:	b083      	sub	sp, #12
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800982a:	bf00      	nop
 800982c:	370c      	adds	r7, #12
 800982e:	46bd      	mov	sp, r7
 8009830:	bc80      	pop	{r7}
 8009832:	4770      	bx	lr

08009834 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800983c:	bf00      	nop
 800983e:	370c      	adds	r7, #12
 8009840:	46bd      	mov	sp, r7
 8009842:	bc80      	pop	{r7}
 8009844:	4770      	bx	lr

08009846 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009846:	b480      	push	{r7}
 8009848:	b083      	sub	sp, #12
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800984e:	bf00      	nop
 8009850:	370c      	adds	r7, #12
 8009852:	46bd      	mov	sp, r7
 8009854:	bc80      	pop	{r7}
 8009856:	4770      	bx	lr

08009858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009858:	b480      	push	{r7}
 800985a:	b085      	sub	sp, #20
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	4a2d      	ldr	r2, [pc, #180]	; (8009920 <TIM_Base_SetConfig+0xc8>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d00f      	beq.n	8009890 <TIM_Base_SetConfig+0x38>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009876:	d00b      	beq.n	8009890 <TIM_Base_SetConfig+0x38>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	4a2a      	ldr	r2, [pc, #168]	; (8009924 <TIM_Base_SetConfig+0xcc>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d007      	beq.n	8009890 <TIM_Base_SetConfig+0x38>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4a29      	ldr	r2, [pc, #164]	; (8009928 <TIM_Base_SetConfig+0xd0>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d003      	beq.n	8009890 <TIM_Base_SetConfig+0x38>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4a28      	ldr	r2, [pc, #160]	; (800992c <TIM_Base_SetConfig+0xd4>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d108      	bne.n	80098a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009896:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	68fa      	ldr	r2, [r7, #12]
 800989e:	4313      	orrs	r3, r2
 80098a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	4a1e      	ldr	r2, [pc, #120]	; (8009920 <TIM_Base_SetConfig+0xc8>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d00f      	beq.n	80098ca <TIM_Base_SetConfig+0x72>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098b0:	d00b      	beq.n	80098ca <TIM_Base_SetConfig+0x72>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	4a1b      	ldr	r2, [pc, #108]	; (8009924 <TIM_Base_SetConfig+0xcc>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d007      	beq.n	80098ca <TIM_Base_SetConfig+0x72>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4a1a      	ldr	r2, [pc, #104]	; (8009928 <TIM_Base_SetConfig+0xd0>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d003      	beq.n	80098ca <TIM_Base_SetConfig+0x72>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4a19      	ldr	r2, [pc, #100]	; (800992c <TIM_Base_SetConfig+0xd4>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d108      	bne.n	80098dc <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	68fa      	ldr	r2, [r7, #12]
 80098d8:	4313      	orrs	r3, r2
 80098da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	695b      	ldr	r3, [r3, #20]
 80098e6:	4313      	orrs	r3, r2
 80098e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	68fa      	ldr	r2, [r7, #12]
 80098ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	689a      	ldr	r2, [r3, #8]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	4a07      	ldr	r2, [pc, #28]	; (8009920 <TIM_Base_SetConfig+0xc8>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d103      	bne.n	8009910 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	691a      	ldr	r2, [r3, #16]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2201      	movs	r2, #1
 8009914:	615a      	str	r2, [r3, #20]
}
 8009916:	bf00      	nop
 8009918:	3714      	adds	r7, #20
 800991a:	46bd      	mov	sp, r7
 800991c:	bc80      	pop	{r7}
 800991e:	4770      	bx	lr
 8009920:	40012c00 	.word	0x40012c00
 8009924:	40000400 	.word	0x40000400
 8009928:	40000800 	.word	0x40000800
 800992c:	40000c00 	.word	0x40000c00

08009930 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009938:	bf00      	nop
 800993a:	370c      	adds	r7, #12
 800993c:	46bd      	mov	sp, r7
 800993e:	bc80      	pop	{r7}
 8009940:	4770      	bx	lr

08009942 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009942:	b480      	push	{r7}
 8009944:	b083      	sub	sp, #12
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800994a:	bf00      	nop
 800994c:	370c      	adds	r7, #12
 800994e:	46bd      	mov	sp, r7
 8009950:	bc80      	pop	{r7}
 8009952:	4770      	bx	lr

08009954 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d101      	bne.n	8009966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	e03f      	b.n	80099e6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800996c:	b2db      	uxtb	r3, r3
 800996e:	2b00      	cmp	r3, #0
 8009970:	d106      	bne.n	8009980 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f7fb f9e4 	bl	8004d48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2224      	movs	r2, #36	; 0x24
 8009984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	68da      	ldr	r2, [r3, #12]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009996:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 f905 	bl	8009ba8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	691a      	ldr	r2, [r3, #16]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80099ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	695a      	ldr	r2, [r3, #20]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80099bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	68da      	ldr	r2, [r3, #12]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80099cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2220      	movs	r2, #32
 80099d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2220      	movs	r2, #32
 80099e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3708      	adds	r7, #8
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b08a      	sub	sp, #40	; 0x28
 80099f2:	af02      	add	r7, sp, #8
 80099f4:	60f8      	str	r0, [r7, #12]
 80099f6:	60b9      	str	r1, [r7, #8]
 80099f8:	603b      	str	r3, [r7, #0]
 80099fa:	4613      	mov	r3, r2
 80099fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80099fe:	2300      	movs	r3, #0
 8009a00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	2b20      	cmp	r3, #32
 8009a0c:	d17c      	bne.n	8009b08 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d002      	beq.n	8009a1a <HAL_UART_Transmit+0x2c>
 8009a14:	88fb      	ldrh	r3, [r7, #6]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d101      	bne.n	8009a1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e075      	b.n	8009b0a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d101      	bne.n	8009a2c <HAL_UART_Transmit+0x3e>
 8009a28:	2302      	movs	r3, #2
 8009a2a:	e06e      	b.n	8009b0a <HAL_UART_Transmit+0x11c>
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2200      	movs	r2, #0
 8009a38:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2221      	movs	r2, #33	; 0x21
 8009a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009a42:	f7fb fb4b 	bl	80050dc <HAL_GetTick>
 8009a46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	88fa      	ldrh	r2, [r7, #6]
 8009a4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	88fa      	ldrh	r2, [r7, #6]
 8009a52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a5c:	d108      	bne.n	8009a70 <HAL_UART_Transmit+0x82>
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	691b      	ldr	r3, [r3, #16]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d104      	bne.n	8009a70 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009a66:	2300      	movs	r3, #0
 8009a68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	61bb      	str	r3, [r7, #24]
 8009a6e:	e003      	b.n	8009a78 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009a74:	2300      	movs	r3, #0
 8009a76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009a80:	e02a      	b.n	8009ad8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	9300      	str	r3, [sp, #0]
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	2180      	movs	r1, #128	; 0x80
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	f000 f840 	bl	8009b12 <UART_WaitOnFlagUntilTimeout>
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d001      	beq.n	8009a9c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009a98:	2303      	movs	r3, #3
 8009a9a:	e036      	b.n	8009b0a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d10b      	bne.n	8009aba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	881b      	ldrh	r3, [r3, #0]
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ab0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009ab2:	69bb      	ldr	r3, [r7, #24]
 8009ab4:	3302      	adds	r3, #2
 8009ab6:	61bb      	str	r3, [r7, #24]
 8009ab8:	e007      	b.n	8009aca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009aba:	69fb      	ldr	r3, [r7, #28]
 8009abc:	781a      	ldrb	r2, [r3, #0]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	3b01      	subs	r3, #1
 8009ad2:	b29a      	uxth	r2, r3
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d1cf      	bne.n	8009a82 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	9300      	str	r3, [sp, #0]
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	2140      	movs	r1, #64	; 0x40
 8009aec:	68f8      	ldr	r0, [r7, #12]
 8009aee:	f000 f810 	bl	8009b12 <UART_WaitOnFlagUntilTimeout>
 8009af2:	4603      	mov	r3, r0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d001      	beq.n	8009afc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009af8:	2303      	movs	r3, #3
 8009afa:	e006      	b.n	8009b0a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2220      	movs	r2, #32
 8009b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009b04:	2300      	movs	r3, #0
 8009b06:	e000      	b.n	8009b0a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009b08:	2302      	movs	r3, #2
  }
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3720      	adds	r7, #32
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b084      	sub	sp, #16
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	60f8      	str	r0, [r7, #12]
 8009b1a:	60b9      	str	r1, [r7, #8]
 8009b1c:	603b      	str	r3, [r7, #0]
 8009b1e:	4613      	mov	r3, r2
 8009b20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b22:	e02c      	b.n	8009b7e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b2a:	d028      	beq.n	8009b7e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009b2c:	69bb      	ldr	r3, [r7, #24]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d007      	beq.n	8009b42 <UART_WaitOnFlagUntilTimeout+0x30>
 8009b32:	f7fb fad3 	bl	80050dc <HAL_GetTick>
 8009b36:	4602      	mov	r2, r0
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	1ad3      	subs	r3, r2, r3
 8009b3c:	69ba      	ldr	r2, [r7, #24]
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d21d      	bcs.n	8009b7e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	68da      	ldr	r2, [r3, #12]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009b50:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	695a      	ldr	r2, [r3, #20]
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f022 0201 	bic.w	r2, r2, #1
 8009b60:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2220      	movs	r2, #32
 8009b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2220      	movs	r2, #32
 8009b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2200      	movs	r2, #0
 8009b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009b7a:	2303      	movs	r3, #3
 8009b7c:	e00f      	b.n	8009b9e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	4013      	ands	r3, r2
 8009b88:	68ba      	ldr	r2, [r7, #8]
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	bf0c      	ite	eq
 8009b8e:	2301      	moveq	r3, #1
 8009b90:	2300      	movne	r3, #0
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	461a      	mov	r2, r3
 8009b96:	79fb      	ldrb	r3, [r7, #7]
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	d0c3      	beq.n	8009b24 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3710      	adds	r7, #16
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
	...

08009ba8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	691b      	ldr	r3, [r3, #16]
 8009bb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	68da      	ldr	r2, [r3, #12]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	430a      	orrs	r2, r1
 8009bc4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	689a      	ldr	r2, [r3, #8]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	691b      	ldr	r3, [r3, #16]
 8009bce:	431a      	orrs	r2, r3
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	695b      	ldr	r3, [r3, #20]
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009be2:	f023 030c 	bic.w	r3, r3, #12
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	6812      	ldr	r2, [r2, #0]
 8009bea:	68b9      	ldr	r1, [r7, #8]
 8009bec:	430b      	orrs	r3, r1
 8009bee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	695b      	ldr	r3, [r3, #20]
 8009bf6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	699a      	ldr	r2, [r3, #24]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	430a      	orrs	r2, r1
 8009c04:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a2c      	ldr	r2, [pc, #176]	; (8009cbc <UART_SetConfig+0x114>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d103      	bne.n	8009c18 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009c10:	f7fe fbee 	bl	80083f0 <HAL_RCC_GetPCLK2Freq>
 8009c14:	60f8      	str	r0, [r7, #12]
 8009c16:	e002      	b.n	8009c1e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009c18:	f7fe fbd6 	bl	80083c8 <HAL_RCC_GetPCLK1Freq>
 8009c1c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009c1e:	68fa      	ldr	r2, [r7, #12]
 8009c20:	4613      	mov	r3, r2
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	4413      	add	r3, r2
 8009c26:	009a      	lsls	r2, r3, #2
 8009c28:	441a      	add	r2, r3
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c34:	4a22      	ldr	r2, [pc, #136]	; (8009cc0 <UART_SetConfig+0x118>)
 8009c36:	fba2 2303 	umull	r2, r3, r2, r3
 8009c3a:	095b      	lsrs	r3, r3, #5
 8009c3c:	0119      	lsls	r1, r3, #4
 8009c3e:	68fa      	ldr	r2, [r7, #12]
 8009c40:	4613      	mov	r3, r2
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	4413      	add	r3, r2
 8009c46:	009a      	lsls	r2, r3, #2
 8009c48:	441a      	add	r2, r3
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c54:	4b1a      	ldr	r3, [pc, #104]	; (8009cc0 <UART_SetConfig+0x118>)
 8009c56:	fba3 0302 	umull	r0, r3, r3, r2
 8009c5a:	095b      	lsrs	r3, r3, #5
 8009c5c:	2064      	movs	r0, #100	; 0x64
 8009c5e:	fb00 f303 	mul.w	r3, r0, r3
 8009c62:	1ad3      	subs	r3, r2, r3
 8009c64:	011b      	lsls	r3, r3, #4
 8009c66:	3332      	adds	r3, #50	; 0x32
 8009c68:	4a15      	ldr	r2, [pc, #84]	; (8009cc0 <UART_SetConfig+0x118>)
 8009c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8009c6e:	095b      	lsrs	r3, r3, #5
 8009c70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c74:	4419      	add	r1, r3
 8009c76:	68fa      	ldr	r2, [r7, #12]
 8009c78:	4613      	mov	r3, r2
 8009c7a:	009b      	lsls	r3, r3, #2
 8009c7c:	4413      	add	r3, r2
 8009c7e:	009a      	lsls	r2, r3, #2
 8009c80:	441a      	add	r2, r3
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c8c:	4b0c      	ldr	r3, [pc, #48]	; (8009cc0 <UART_SetConfig+0x118>)
 8009c8e:	fba3 0302 	umull	r0, r3, r3, r2
 8009c92:	095b      	lsrs	r3, r3, #5
 8009c94:	2064      	movs	r0, #100	; 0x64
 8009c96:	fb00 f303 	mul.w	r3, r0, r3
 8009c9a:	1ad3      	subs	r3, r2, r3
 8009c9c:	011b      	lsls	r3, r3, #4
 8009c9e:	3332      	adds	r3, #50	; 0x32
 8009ca0:	4a07      	ldr	r2, [pc, #28]	; (8009cc0 <UART_SetConfig+0x118>)
 8009ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ca6:	095b      	lsrs	r3, r3, #5
 8009ca8:	f003 020f 	and.w	r2, r3, #15
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	440a      	add	r2, r1
 8009cb2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009cb4:	bf00      	nop
 8009cb6:	3710      	adds	r7, #16
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	40013800 	.word	0x40013800
 8009cc0:	51eb851f 	.word	0x51eb851f

08009cc4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	4603      	mov	r3, r0
 8009ccc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009cd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009cd6:	2b84      	cmp	r3, #132	; 0x84
 8009cd8:	d005      	beq.n	8009ce6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009cda:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	4413      	add	r3, r2
 8009ce2:	3303      	adds	r3, #3
 8009ce4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3714      	adds	r7, #20
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bc80      	pop	{r7}
 8009cf0:	4770      	bx	lr

08009cf2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009cf2:	b480      	push	{r7}
 8009cf4:	b083      	sub	sp, #12
 8009cf6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cf8:	f3ef 8305 	mrs	r3, IPSR
 8009cfc:	607b      	str	r3, [r7, #4]
  return(result);
 8009cfe:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	bf14      	ite	ne
 8009d04:	2301      	movne	r3, #1
 8009d06:	2300      	moveq	r3, #0
 8009d08:	b2db      	uxtb	r3, r3
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	370c      	adds	r7, #12
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bc80      	pop	{r7}
 8009d12:	4770      	bx	lr

08009d14 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009d18:	f001 fb6a 	bl	800b3f0 <vTaskStartScheduler>
  
  return osOK;
 8009d1c:	2300      	movs	r3, #0
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8009d26:	f7ff ffe4 	bl	8009cf2 <inHandlerMode>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d003      	beq.n	8009d38 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8009d30:	f001 fc7c 	bl	800b62c <xTaskGetTickCountFromISR>
 8009d34:	4603      	mov	r3, r0
 8009d36:	e002      	b.n	8009d3e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8009d38:	f001 fc6a 	bl	800b610 <xTaskGetTickCount>
 8009d3c:	4603      	mov	r3, r0
  }
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	bd80      	pop	{r7, pc}

08009d42 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009d42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d44:	b089      	sub	sp, #36	; 0x24
 8009d46:	af04      	add	r7, sp, #16
 8009d48:	6078      	str	r0, [r7, #4]
 8009d4a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	695b      	ldr	r3, [r3, #20]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d020      	beq.n	8009d96 <osThreadCreate+0x54>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	699b      	ldr	r3, [r3, #24]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d01c      	beq.n	8009d96 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	685c      	ldr	r4, [r3, #4]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681d      	ldr	r5, [r3, #0]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	691e      	ldr	r6, [r3, #16]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7ff ffa8 	bl	8009cc4 <makeFreeRtosPriority>
 8009d74:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	695b      	ldr	r3, [r3, #20]
 8009d7a:	687a      	ldr	r2, [r7, #4]
 8009d7c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009d7e:	9202      	str	r2, [sp, #8]
 8009d80:	9301      	str	r3, [sp, #4]
 8009d82:	9100      	str	r1, [sp, #0]
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	4632      	mov	r2, r6
 8009d88:	4629      	mov	r1, r5
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	f001 f96a 	bl	800b064 <xTaskCreateStatic>
 8009d90:	4603      	mov	r3, r0
 8009d92:	60fb      	str	r3, [r7, #12]
 8009d94:	e01c      	b.n	8009dd0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	685c      	ldr	r4, [r3, #4]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009da2:	b29e      	uxth	r6, r3
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7ff ff8a 	bl	8009cc4 <makeFreeRtosPriority>
 8009db0:	4602      	mov	r2, r0
 8009db2:	f107 030c 	add.w	r3, r7, #12
 8009db6:	9301      	str	r3, [sp, #4]
 8009db8:	9200      	str	r2, [sp, #0]
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	4632      	mov	r2, r6
 8009dbe:	4629      	mov	r1, r5
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	f001 f9ab 	bl	800b11c <xTaskCreate>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d001      	beq.n	8009dd0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	e000      	b.n	8009dd2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3714      	adds	r7, #20
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009dda <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b084      	sub	sp, #16
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d001      	beq.n	8009df0 <osDelay+0x16>
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	e000      	b.n	8009df2 <osDelay+0x18>
 8009df0:	2301      	movs	r3, #1
 8009df2:	4618      	mov	r0, r3
 8009df4:	f001 fac8 	bl	800b388 <vTaskDelay>
  
  return osOK;
 8009df8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3710      	adds	r7, #16
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
	...

08009e04 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b086      	sub	sp, #24
 8009e08:	af02      	add	r7, sp, #8
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	607a      	str	r2, [r7, #4]
 8009e10:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d013      	beq.n	8009e42 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8009e1a:	7afb      	ldrb	r3, [r7, #11]
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d101      	bne.n	8009e24 <osTimerCreate+0x20>
 8009e20:	2101      	movs	r1, #1
 8009e22:	e000      	b.n	8009e26 <osTimerCreate+0x22>
 8009e24:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8009e2a:	68fa      	ldr	r2, [r7, #12]
 8009e2c:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8009e2e:	9201      	str	r2, [sp, #4]
 8009e30:	9300      	str	r3, [sp, #0]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	460a      	mov	r2, r1
 8009e36:	2101      	movs	r1, #1
 8009e38:	480b      	ldr	r0, [pc, #44]	; (8009e68 <osTimerCreate+0x64>)
 8009e3a:	f002 f9de 	bl	800c1fa <xTimerCreateStatic>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	e00e      	b.n	8009e60 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8009e42:	7afb      	ldrb	r3, [r7, #11]
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d101      	bne.n	8009e4c <osTimerCreate+0x48>
 8009e48:	2201      	movs	r2, #1
 8009e4a:	e000      	b.n	8009e4e <osTimerCreate+0x4a>
 8009e4c:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8009e52:	9300      	str	r3, [sp, #0]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2101      	movs	r1, #1
 8009e58:	4803      	ldr	r0, [pc, #12]	; (8009e68 <osTimerCreate+0x64>)
 8009e5a:	f002 f9ad 	bl	800c1b8 <xTimerCreate>
 8009e5e:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3710      	adds	r7, #16
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	0800f218 	.word	0x0800f218

08009e6c <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b086      	sub	sp, #24
 8009e70:	af02      	add	r7, sp, #8
 8009e72:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009e74:	2300      	movs	r3, #0
 8009e76:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 8009e7c:	f7ff ff39 	bl	8009cf2 <inHandlerMode>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d019      	beq.n	8009eba <osTimerStop+0x4e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 8009e86:	f107 0308 	add.w	r3, r7, #8
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	9200      	str	r2, [sp, #0]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	2108      	movs	r1, #8
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f002 fa20 	bl	800c2d8 <xTimerGenericCommand>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	d001      	beq.n	8009ea2 <osTimerStop+0x36>
      return osErrorOS;
 8009e9e:	23ff      	movs	r3, #255	; 0xff
 8009ea0:	e019      	b.n	8009ed6 <osTimerStop+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d015      	beq.n	8009ed4 <osTimerStop+0x68>
 8009ea8:	4b0d      	ldr	r3, [pc, #52]	; (8009ee0 <osTimerStop+0x74>)
 8009eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eae:	601a      	str	r2, [r3, #0]
 8009eb0:	f3bf 8f4f 	dsb	sy
 8009eb4:	f3bf 8f6f 	isb	sy
 8009eb8:	e00c      	b.n	8009ed4 <osTimerStop+0x68>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 8009eba:	2300      	movs	r3, #0
 8009ebc:	9300      	str	r3, [sp, #0]
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	2103      	movs	r1, #3
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f002 fa07 	bl	800c2d8 <xTimerGenericCommand>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d001      	beq.n	8009ed4 <osTimerStop+0x68>
      result = osErrorOS;
 8009ed0:	23ff      	movs	r3, #255	; 0xff
 8009ed2:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3710      	adds	r7, #16
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	e000ed04 	.word	0xe000ed04

08009ee4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b086      	sub	sp, #24
 8009ee8:	af02      	add	r7, sp, #8
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d00f      	beq.n	8009f16 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d10a      	bne.n	8009f12 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	2203      	movs	r2, #3
 8009f02:	9200      	str	r2, [sp, #0]
 8009f04:	2200      	movs	r2, #0
 8009f06:	2100      	movs	r1, #0
 8009f08:	2001      	movs	r0, #1
 8009f0a:	f000 f9c3 	bl	800a294 <xQueueGenericCreateStatic>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	e016      	b.n	8009f40 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8009f12:	2300      	movs	r3, #0
 8009f14:	e014      	b.n	8009f40 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d110      	bne.n	8009f3e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8009f1c:	2203      	movs	r2, #3
 8009f1e:	2100      	movs	r1, #0
 8009f20:	2001      	movs	r0, #1
 8009f22:	f000 fa2e 	bl	800a382 <xQueueGenericCreate>
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d005      	beq.n	8009f3a <osSemaphoreCreate+0x56>
 8009f2e:	2300      	movs	r3, #0
 8009f30:	2200      	movs	r2, #0
 8009f32:	2100      	movs	r1, #0
 8009f34:	68f8      	ldr	r0, [r7, #12]
 8009f36:	f000 fa81 	bl	800a43c <xQueueGenericSend>
      return sema;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	e000      	b.n	8009f40 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8009f3e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3710      	adds	r7, #16
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009f52:	2300      	movs	r3, #0
 8009f54:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d101      	bne.n	8009f60 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8009f5c:	2380      	movs	r3, #128	; 0x80
 8009f5e:	e03a      	b.n	8009fd6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8009f60:	2300      	movs	r3, #0
 8009f62:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f6a:	d103      	bne.n	8009f74 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8009f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8009f70:	60fb      	str	r3, [r7, #12]
 8009f72:	e009      	b.n	8009f88 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d006      	beq.n	8009f88 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d101      	bne.n	8009f88 <osSemaphoreWait+0x40>
      ticks = 1;
 8009f84:	2301      	movs	r3, #1
 8009f86:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009f88:	f7ff feb3 	bl	8009cf2 <inHandlerMode>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d017      	beq.n	8009fc2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009f92:	f107 0308 	add.w	r3, r7, #8
 8009f96:	461a      	mov	r2, r3
 8009f98:	2100      	movs	r1, #0
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 fe5e 	bl	800ac5c <xQueueReceiveFromISR>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d001      	beq.n	8009faa <osSemaphoreWait+0x62>
      return osErrorOS;
 8009fa6:	23ff      	movs	r3, #255	; 0xff
 8009fa8:	e015      	b.n	8009fd6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d011      	beq.n	8009fd4 <osSemaphoreWait+0x8c>
 8009fb0:	4b0b      	ldr	r3, [pc, #44]	; (8009fe0 <osSemaphoreWait+0x98>)
 8009fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fb6:	601a      	str	r2, [r3, #0]
 8009fb8:	f3bf 8f4f 	dsb	sy
 8009fbc:	f3bf 8f6f 	isb	sy
 8009fc0:	e008      	b.n	8009fd4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8009fc2:	68f9      	ldr	r1, [r7, #12]
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 fd3d 	bl	800aa44 <xQueueSemaphoreTake>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d001      	beq.n	8009fd4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8009fd0:	23ff      	movs	r3, #255	; 0xff
 8009fd2:	e000      	b.n	8009fd6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8009fd4:	2300      	movs	r3, #0
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3710      	adds	r7, #16
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	e000ed04 	.word	0xe000ed04

08009fe4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009fec:	2300      	movs	r3, #0
 8009fee:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8009ff4:	f7ff fe7d 	bl	8009cf2 <inHandlerMode>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d016      	beq.n	800a02c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009ffe:	f107 0308 	add.w	r3, r7, #8
 800a002:	4619      	mov	r1, r3
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f000 fbaf 	bl	800a768 <xQueueGiveFromISR>
 800a00a:	4603      	mov	r3, r0
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	d001      	beq.n	800a014 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800a010:	23ff      	movs	r3, #255	; 0xff
 800a012:	e017      	b.n	800a044 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d013      	beq.n	800a042 <osSemaphoreRelease+0x5e>
 800a01a:	4b0c      	ldr	r3, [pc, #48]	; (800a04c <osSemaphoreRelease+0x68>)
 800a01c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a020:	601a      	str	r2, [r3, #0]
 800a022:	f3bf 8f4f 	dsb	sy
 800a026:	f3bf 8f6f 	isb	sy
 800a02a:	e00a      	b.n	800a042 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800a02c:	2300      	movs	r3, #0
 800a02e:	2200      	movs	r2, #0
 800a030:	2100      	movs	r1, #0
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 fa02 	bl	800a43c <xQueueGenericSend>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d001      	beq.n	800a042 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800a03e:	23ff      	movs	r3, #255	; 0xff
 800a040:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800a042:	68fb      	ldr	r3, [r7, #12]
}
 800a044:	4618      	mov	r0, r3
 800a046:	3710      	adds	r7, #16
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	e000ed04 	.word	0xe000ed04

0800a050 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
  return osOK;
#else
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
 800a05a:	2381      	movs	r3, #129	; 0x81
#endif
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	370c      	adds	r7, #12
 800a060:	46bd      	mov	sp, r7
 800a062:	bc80      	pop	{r7}
 800a064:	4770      	bx	lr

0800a066 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a066:	b480      	push	{r7}
 800a068:	b083      	sub	sp, #12
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f103 0208 	add.w	r2, r3, #8
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f04f 32ff 	mov.w	r2, #4294967295
 800a07e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f103 0208 	add.w	r2, r3, #8
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f103 0208 	add.w	r2, r3, #8
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2200      	movs	r2, #0
 800a098:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a09a:	bf00      	nop
 800a09c:	370c      	adds	r7, #12
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bc80      	pop	{r7}
 800a0a2:	4770      	bx	lr

0800a0a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b083      	sub	sp, #12
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a0b2:	bf00      	nop
 800a0b4:	370c      	adds	r7, #12
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bc80      	pop	{r7}
 800a0ba:	4770      	bx	lr

0800a0bc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b085      	sub	sp, #20
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	68fa      	ldr	r2, [r7, #12]
 800a0d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	689a      	ldr	r2, [r3, #8]
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	689b      	ldr	r3, [r3, #8]
 800a0de:	683a      	ldr	r2, [r7, #0]
 800a0e0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	683a      	ldr	r2, [r7, #0]
 800a0e6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	1c5a      	adds	r2, r3, #1
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	601a      	str	r2, [r3, #0]
}
 800a0f8:	bf00      	nop
 800a0fa:	3714      	adds	r7, #20
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bc80      	pop	{r7}
 800a100:	4770      	bx	lr

0800a102 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a102:	b480      	push	{r7}
 800a104:	b085      	sub	sp, #20
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
 800a10a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a118:	d103      	bne.n	800a122 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	691b      	ldr	r3, [r3, #16]
 800a11e:	60fb      	str	r3, [r7, #12]
 800a120:	e00c      	b.n	800a13c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	3308      	adds	r3, #8
 800a126:	60fb      	str	r3, [r7, #12]
 800a128:	e002      	b.n	800a130 <vListInsert+0x2e>
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	60fb      	str	r3, [r7, #12]
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	68ba      	ldr	r2, [r7, #8]
 800a138:	429a      	cmp	r2, r3
 800a13a:	d2f6      	bcs.n	800a12a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	685a      	ldr	r2, [r3, #4]
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	683a      	ldr	r2, [r7, #0]
 800a14a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	68fa      	ldr	r2, [r7, #12]
 800a150:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	683a      	ldr	r2, [r7, #0]
 800a156:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	1c5a      	adds	r2, r3, #1
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	601a      	str	r2, [r3, #0]
}
 800a168:	bf00      	nop
 800a16a:	3714      	adds	r7, #20
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bc80      	pop	{r7}
 800a170:	4770      	bx	lr

0800a172 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a172:	b480      	push	{r7}
 800a174:	b085      	sub	sp, #20
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	691b      	ldr	r3, [r3, #16]
 800a17e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	687a      	ldr	r2, [r7, #4]
 800a186:	6892      	ldr	r2, [r2, #8]
 800a188:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	6852      	ldr	r2, [r2, #4]
 800a192:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d103      	bne.n	800a1a6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	689a      	ldr	r2, [r3, #8]
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	1e5a      	subs	r2, r3, #1
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3714      	adds	r7, #20
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bc80      	pop	{r7}
 800a1c2:	4770      	bx	lr

0800a1c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d10a      	bne.n	800a1ee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1dc:	f383 8811 	msr	BASEPRI, r3
 800a1e0:	f3bf 8f6f 	isb	sy
 800a1e4:	f3bf 8f4f 	dsb	sy
 800a1e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a1ea:	bf00      	nop
 800a1ec:	e7fe      	b.n	800a1ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a1ee:	f002 fc15 	bl	800ca1c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1fa:	68f9      	ldr	r1, [r7, #12]
 800a1fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a1fe:	fb01 f303 	mul.w	r3, r1, r3
 800a202:	441a      	add	r2, r3
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2200      	movs	r2, #0
 800a20c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a21e:	3b01      	subs	r3, #1
 800a220:	68f9      	ldr	r1, [r7, #12]
 800a222:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a224:	fb01 f303 	mul.w	r3, r1, r3
 800a228:	441a      	add	r2, r3
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	22ff      	movs	r2, #255	; 0xff
 800a232:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	22ff      	movs	r2, #255	; 0xff
 800a23a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d114      	bne.n	800a26e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	691b      	ldr	r3, [r3, #16]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d01a      	beq.n	800a282 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	3310      	adds	r3, #16
 800a250:	4618      	mov	r0, r3
 800a252:	f001 fb65 	bl	800b920 <xTaskRemoveFromEventList>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d012      	beq.n	800a282 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a25c:	4b0c      	ldr	r3, [pc, #48]	; (800a290 <xQueueGenericReset+0xcc>)
 800a25e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a262:	601a      	str	r2, [r3, #0]
 800a264:	f3bf 8f4f 	dsb	sy
 800a268:	f3bf 8f6f 	isb	sy
 800a26c:	e009      	b.n	800a282 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	3310      	adds	r3, #16
 800a272:	4618      	mov	r0, r3
 800a274:	f7ff fef7 	bl	800a066 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	3324      	adds	r3, #36	; 0x24
 800a27c:	4618      	mov	r0, r3
 800a27e:	f7ff fef2 	bl	800a066 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a282:	f002 fbfb 	bl	800ca7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a286:	2301      	movs	r3, #1
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3710      	adds	r7, #16
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	e000ed04 	.word	0xe000ed04

0800a294 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a294:	b580      	push	{r7, lr}
 800a296:	b08e      	sub	sp, #56	; 0x38
 800a298:	af02      	add	r7, sp, #8
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	607a      	str	r2, [r7, #4]
 800a2a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d10a      	bne.n	800a2be <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ac:	f383 8811 	msr	BASEPRI, r3
 800a2b0:	f3bf 8f6f 	isb	sy
 800a2b4:	f3bf 8f4f 	dsb	sy
 800a2b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a2ba:	bf00      	nop
 800a2bc:	e7fe      	b.n	800a2bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d10a      	bne.n	800a2da <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c8:	f383 8811 	msr	BASEPRI, r3
 800a2cc:	f3bf 8f6f 	isb	sy
 800a2d0:	f3bf 8f4f 	dsb	sy
 800a2d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a2d6:	bf00      	nop
 800a2d8:	e7fe      	b.n	800a2d8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d002      	beq.n	800a2e6 <xQueueGenericCreateStatic+0x52>
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d001      	beq.n	800a2ea <xQueueGenericCreateStatic+0x56>
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	e000      	b.n	800a2ec <xQueueGenericCreateStatic+0x58>
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d10a      	bne.n	800a306 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f4:	f383 8811 	msr	BASEPRI, r3
 800a2f8:	f3bf 8f6f 	isb	sy
 800a2fc:	f3bf 8f4f 	dsb	sy
 800a300:	623b      	str	r3, [r7, #32]
}
 800a302:	bf00      	nop
 800a304:	e7fe      	b.n	800a304 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d102      	bne.n	800a312 <xQueueGenericCreateStatic+0x7e>
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d101      	bne.n	800a316 <xQueueGenericCreateStatic+0x82>
 800a312:	2301      	movs	r3, #1
 800a314:	e000      	b.n	800a318 <xQueueGenericCreateStatic+0x84>
 800a316:	2300      	movs	r3, #0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d10a      	bne.n	800a332 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a320:	f383 8811 	msr	BASEPRI, r3
 800a324:	f3bf 8f6f 	isb	sy
 800a328:	f3bf 8f4f 	dsb	sy
 800a32c:	61fb      	str	r3, [r7, #28]
}
 800a32e:	bf00      	nop
 800a330:	e7fe      	b.n	800a330 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a332:	2348      	movs	r3, #72	; 0x48
 800a334:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	2b48      	cmp	r3, #72	; 0x48
 800a33a:	d00a      	beq.n	800a352 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a340:	f383 8811 	msr	BASEPRI, r3
 800a344:	f3bf 8f6f 	isb	sy
 800a348:	f3bf 8f4f 	dsb	sy
 800a34c:	61bb      	str	r3, [r7, #24]
}
 800a34e:	bf00      	nop
 800a350:	e7fe      	b.n	800a350 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d00d      	beq.n	800a378 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35e:	2201      	movs	r2, #1
 800a360:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a364:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a36a:	9300      	str	r3, [sp, #0]
 800a36c:	4613      	mov	r3, r2
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	68b9      	ldr	r1, [r7, #8]
 800a372:	68f8      	ldr	r0, [r7, #12]
 800a374:	f000 f843 	bl	800a3fe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3730      	adds	r7, #48	; 0x30
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a382:	b580      	push	{r7, lr}
 800a384:	b08a      	sub	sp, #40	; 0x28
 800a386:	af02      	add	r7, sp, #8
 800a388:	60f8      	str	r0, [r7, #12]
 800a38a:	60b9      	str	r1, [r7, #8]
 800a38c:	4613      	mov	r3, r2
 800a38e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d10a      	bne.n	800a3ac <xQueueGenericCreate+0x2a>
	__asm volatile
 800a396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a39a:	f383 8811 	msr	BASEPRI, r3
 800a39e:	f3bf 8f6f 	isb	sy
 800a3a2:	f3bf 8f4f 	dsb	sy
 800a3a6:	613b      	str	r3, [r7, #16]
}
 800a3a8:	bf00      	nop
 800a3aa:	e7fe      	b.n	800a3aa <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d102      	bne.n	800a3b8 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	61fb      	str	r3, [r7, #28]
 800a3b6:	e004      	b.n	800a3c2 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	68ba      	ldr	r2, [r7, #8]
 800a3bc:	fb02 f303 	mul.w	r3, r2, r3
 800a3c0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a3c2:	69fb      	ldr	r3, [r7, #28]
 800a3c4:	3348      	adds	r3, #72	; 0x48
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f002 fc28 	bl	800cc1c <pvPortMalloc>
 800a3cc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a3ce:	69bb      	ldr	r3, [r7, #24]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d00f      	beq.n	800a3f4 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800a3d4:	69bb      	ldr	r3, [r7, #24]
 800a3d6:	3348      	adds	r3, #72	; 0x48
 800a3d8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a3e2:	79fa      	ldrb	r2, [r7, #7]
 800a3e4:	69bb      	ldr	r3, [r7, #24]
 800a3e6:	9300      	str	r3, [sp, #0]
 800a3e8:	4613      	mov	r3, r2
 800a3ea:	697a      	ldr	r2, [r7, #20]
 800a3ec:	68b9      	ldr	r1, [r7, #8]
 800a3ee:	68f8      	ldr	r0, [r7, #12]
 800a3f0:	f000 f805 	bl	800a3fe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a3f4:	69bb      	ldr	r3, [r7, #24]
	}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3720      	adds	r7, #32
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}

0800a3fe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a3fe:	b580      	push	{r7, lr}
 800a400:	b084      	sub	sp, #16
 800a402:	af00      	add	r7, sp, #0
 800a404:	60f8      	str	r0, [r7, #12]
 800a406:	60b9      	str	r1, [r7, #8]
 800a408:	607a      	str	r2, [r7, #4]
 800a40a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d103      	bne.n	800a41a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a412:	69bb      	ldr	r3, [r7, #24]
 800a414:	69ba      	ldr	r2, [r7, #24]
 800a416:	601a      	str	r2, [r3, #0]
 800a418:	e002      	b.n	800a420 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a41a:	69bb      	ldr	r3, [r7, #24]
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a420:	69bb      	ldr	r3, [r7, #24]
 800a422:	68fa      	ldr	r2, [r7, #12]
 800a424:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a426:	69bb      	ldr	r3, [r7, #24]
 800a428:	68ba      	ldr	r2, [r7, #8]
 800a42a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a42c:	2101      	movs	r1, #1
 800a42e:	69b8      	ldr	r0, [r7, #24]
 800a430:	f7ff fec8 	bl	800a1c4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a434:	bf00      	nop
 800a436:	3710      	adds	r7, #16
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b08e      	sub	sp, #56	; 0x38
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	607a      	str	r2, [r7, #4]
 800a448:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a44a:	2300      	movs	r3, #0
 800a44c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a454:	2b00      	cmp	r3, #0
 800a456:	d10a      	bne.n	800a46e <xQueueGenericSend+0x32>
	__asm volatile
 800a458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a45c:	f383 8811 	msr	BASEPRI, r3
 800a460:	f3bf 8f6f 	isb	sy
 800a464:	f3bf 8f4f 	dsb	sy
 800a468:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a46a:	bf00      	nop
 800a46c:	e7fe      	b.n	800a46c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d103      	bne.n	800a47c <xQueueGenericSend+0x40>
 800a474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d101      	bne.n	800a480 <xQueueGenericSend+0x44>
 800a47c:	2301      	movs	r3, #1
 800a47e:	e000      	b.n	800a482 <xQueueGenericSend+0x46>
 800a480:	2300      	movs	r3, #0
 800a482:	2b00      	cmp	r3, #0
 800a484:	d10a      	bne.n	800a49c <xQueueGenericSend+0x60>
	__asm volatile
 800a486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48a:	f383 8811 	msr	BASEPRI, r3
 800a48e:	f3bf 8f6f 	isb	sy
 800a492:	f3bf 8f4f 	dsb	sy
 800a496:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a498:	bf00      	nop
 800a49a:	e7fe      	b.n	800a49a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	2b02      	cmp	r3, #2
 800a4a0:	d103      	bne.n	800a4aa <xQueueGenericSend+0x6e>
 800a4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d101      	bne.n	800a4ae <xQueueGenericSend+0x72>
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	e000      	b.n	800a4b0 <xQueueGenericSend+0x74>
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d10a      	bne.n	800a4ca <xQueueGenericSend+0x8e>
	__asm volatile
 800a4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b8:	f383 8811 	msr	BASEPRI, r3
 800a4bc:	f3bf 8f6f 	isb	sy
 800a4c0:	f3bf 8f4f 	dsb	sy
 800a4c4:	623b      	str	r3, [r7, #32]
}
 800a4c6:	bf00      	nop
 800a4c8:	e7fe      	b.n	800a4c8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a4ca:	f001 fbe9 	bl	800bca0 <xTaskGetSchedulerState>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d102      	bne.n	800a4da <xQueueGenericSend+0x9e>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d101      	bne.n	800a4de <xQueueGenericSend+0xa2>
 800a4da:	2301      	movs	r3, #1
 800a4dc:	e000      	b.n	800a4e0 <xQueueGenericSend+0xa4>
 800a4de:	2300      	movs	r3, #0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d10a      	bne.n	800a4fa <xQueueGenericSend+0xbe>
	__asm volatile
 800a4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e8:	f383 8811 	msr	BASEPRI, r3
 800a4ec:	f3bf 8f6f 	isb	sy
 800a4f0:	f3bf 8f4f 	dsb	sy
 800a4f4:	61fb      	str	r3, [r7, #28]
}
 800a4f6:	bf00      	nop
 800a4f8:	e7fe      	b.n	800a4f8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a4fa:	f002 fa8f 	bl	800ca1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a506:	429a      	cmp	r2, r3
 800a508:	d302      	bcc.n	800a510 <xQueueGenericSend+0xd4>
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	2b02      	cmp	r3, #2
 800a50e:	d129      	bne.n	800a564 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a510:	683a      	ldr	r2, [r7, #0]
 800a512:	68b9      	ldr	r1, [r7, #8]
 800a514:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a516:	f000 fc38 	bl	800ad8a <prvCopyDataToQueue>
 800a51a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a520:	2b00      	cmp	r3, #0
 800a522:	d010      	beq.n	800a546 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a526:	3324      	adds	r3, #36	; 0x24
 800a528:	4618      	mov	r0, r3
 800a52a:	f001 f9f9 	bl	800b920 <xTaskRemoveFromEventList>
 800a52e:	4603      	mov	r3, r0
 800a530:	2b00      	cmp	r3, #0
 800a532:	d013      	beq.n	800a55c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a534:	4b3f      	ldr	r3, [pc, #252]	; (800a634 <xQueueGenericSend+0x1f8>)
 800a536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a53a:	601a      	str	r2, [r3, #0]
 800a53c:	f3bf 8f4f 	dsb	sy
 800a540:	f3bf 8f6f 	isb	sy
 800a544:	e00a      	b.n	800a55c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d007      	beq.n	800a55c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a54c:	4b39      	ldr	r3, [pc, #228]	; (800a634 <xQueueGenericSend+0x1f8>)
 800a54e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a552:	601a      	str	r2, [r3, #0]
 800a554:	f3bf 8f4f 	dsb	sy
 800a558:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a55c:	f002 fa8e 	bl	800ca7c <vPortExitCritical>
				return pdPASS;
 800a560:	2301      	movs	r3, #1
 800a562:	e063      	b.n	800a62c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d103      	bne.n	800a572 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a56a:	f002 fa87 	bl	800ca7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a56e:	2300      	movs	r3, #0
 800a570:	e05c      	b.n	800a62c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a574:	2b00      	cmp	r3, #0
 800a576:	d106      	bne.n	800a586 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a578:	f107 0314 	add.w	r3, r7, #20
 800a57c:	4618      	mov	r0, r3
 800a57e:	f001 fa31 	bl	800b9e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a582:	2301      	movs	r3, #1
 800a584:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a586:	f002 fa79 	bl	800ca7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a58a:	f000 ff97 	bl	800b4bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a58e:	f002 fa45 	bl	800ca1c <vPortEnterCritical>
 800a592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a594:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a598:	b25b      	sxtb	r3, r3
 800a59a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a59e:	d103      	bne.n	800a5a8 <xQueueGenericSend+0x16c>
 800a5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5ae:	b25b      	sxtb	r3, r3
 800a5b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5b4:	d103      	bne.n	800a5be <xQueueGenericSend+0x182>
 800a5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5be:	f002 fa5d 	bl	800ca7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a5c2:	1d3a      	adds	r2, r7, #4
 800a5c4:	f107 0314 	add.w	r3, r7, #20
 800a5c8:	4611      	mov	r1, r2
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f001 fa20 	bl	800ba10 <xTaskCheckForTimeOut>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d124      	bne.n	800a620 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a5d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5d8:	f000 fccf 	bl	800af7a <prvIsQueueFull>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d018      	beq.n	800a614 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e4:	3310      	adds	r3, #16
 800a5e6:	687a      	ldr	r2, [r7, #4]
 800a5e8:	4611      	mov	r1, r2
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f001 f948 	bl	800b880 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a5f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5f2:	f000 fc5a 	bl	800aeaa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a5f6:	f000 ff6f 	bl	800b4d8 <xTaskResumeAll>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	f47f af7c 	bne.w	800a4fa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a602:	4b0c      	ldr	r3, [pc, #48]	; (800a634 <xQueueGenericSend+0x1f8>)
 800a604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a608:	601a      	str	r2, [r3, #0]
 800a60a:	f3bf 8f4f 	dsb	sy
 800a60e:	f3bf 8f6f 	isb	sy
 800a612:	e772      	b.n	800a4fa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a614:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a616:	f000 fc48 	bl	800aeaa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a61a:	f000 ff5d 	bl	800b4d8 <xTaskResumeAll>
 800a61e:	e76c      	b.n	800a4fa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a622:	f000 fc42 	bl	800aeaa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a626:	f000 ff57 	bl	800b4d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a62a:	2300      	movs	r3, #0
		}
	}
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3738      	adds	r7, #56	; 0x38
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}
 800a634:	e000ed04 	.word	0xe000ed04

0800a638 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b08e      	sub	sp, #56	; 0x38
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	60f8      	str	r0, [r7, #12]
 800a640:	60b9      	str	r1, [r7, #8]
 800a642:	607a      	str	r2, [r7, #4]
 800a644:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d10a      	bne.n	800a666 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a654:	f383 8811 	msr	BASEPRI, r3
 800a658:	f3bf 8f6f 	isb	sy
 800a65c:	f3bf 8f4f 	dsb	sy
 800a660:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a662:	bf00      	nop
 800a664:	e7fe      	b.n	800a664 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d103      	bne.n	800a674 <xQueueGenericSendFromISR+0x3c>
 800a66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a670:	2b00      	cmp	r3, #0
 800a672:	d101      	bne.n	800a678 <xQueueGenericSendFromISR+0x40>
 800a674:	2301      	movs	r3, #1
 800a676:	e000      	b.n	800a67a <xQueueGenericSendFromISR+0x42>
 800a678:	2300      	movs	r3, #0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d10a      	bne.n	800a694 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a682:	f383 8811 	msr	BASEPRI, r3
 800a686:	f3bf 8f6f 	isb	sy
 800a68a:	f3bf 8f4f 	dsb	sy
 800a68e:	623b      	str	r3, [r7, #32]
}
 800a690:	bf00      	nop
 800a692:	e7fe      	b.n	800a692 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	2b02      	cmp	r3, #2
 800a698:	d103      	bne.n	800a6a2 <xQueueGenericSendFromISR+0x6a>
 800a69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d101      	bne.n	800a6a6 <xQueueGenericSendFromISR+0x6e>
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	e000      	b.n	800a6a8 <xQueueGenericSendFromISR+0x70>
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d10a      	bne.n	800a6c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b0:	f383 8811 	msr	BASEPRI, r3
 800a6b4:	f3bf 8f6f 	isb	sy
 800a6b8:	f3bf 8f4f 	dsb	sy
 800a6bc:	61fb      	str	r3, [r7, #28]
}
 800a6be:	bf00      	nop
 800a6c0:	e7fe      	b.n	800a6c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a6c2:	f002 fa6d 	bl	800cba0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a6c6:	f3ef 8211 	mrs	r2, BASEPRI
 800a6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ce:	f383 8811 	msr	BASEPRI, r3
 800a6d2:	f3bf 8f6f 	isb	sy
 800a6d6:	f3bf 8f4f 	dsb	sy
 800a6da:	61ba      	str	r2, [r7, #24]
 800a6dc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a6de:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a6e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d302      	bcc.n	800a6f4 <xQueueGenericSendFromISR+0xbc>
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	2b02      	cmp	r3, #2
 800a6f2:	d12c      	bne.n	800a74e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a6fe:	683a      	ldr	r2, [r7, #0]
 800a700:	68b9      	ldr	r1, [r7, #8]
 800a702:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a704:	f000 fb41 	bl	800ad8a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a708:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a70c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a710:	d112      	bne.n	800a738 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a716:	2b00      	cmp	r3, #0
 800a718:	d016      	beq.n	800a748 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a71c:	3324      	adds	r3, #36	; 0x24
 800a71e:	4618      	mov	r0, r3
 800a720:	f001 f8fe 	bl	800b920 <xTaskRemoveFromEventList>
 800a724:	4603      	mov	r3, r0
 800a726:	2b00      	cmp	r3, #0
 800a728:	d00e      	beq.n	800a748 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d00b      	beq.n	800a748 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	601a      	str	r2, [r3, #0]
 800a736:	e007      	b.n	800a748 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a738:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a73c:	3301      	adds	r3, #1
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	b25a      	sxtb	r2, r3
 800a742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a748:	2301      	movs	r3, #1
 800a74a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a74c:	e001      	b.n	800a752 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a74e:	2300      	movs	r3, #0
 800a750:	637b      	str	r3, [r7, #52]	; 0x34
 800a752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a754:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a75c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a75e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a760:	4618      	mov	r0, r3
 800a762:	3738      	adds	r7, #56	; 0x38
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b08e      	sub	sp, #56	; 0x38
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d10a      	bne.n	800a792 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a780:	f383 8811 	msr	BASEPRI, r3
 800a784:	f3bf 8f6f 	isb	sy
 800a788:	f3bf 8f4f 	dsb	sy
 800a78c:	623b      	str	r3, [r7, #32]
}
 800a78e:	bf00      	nop
 800a790:	e7fe      	b.n	800a790 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a796:	2b00      	cmp	r3, #0
 800a798:	d00a      	beq.n	800a7b0 <xQueueGiveFromISR+0x48>
	__asm volatile
 800a79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79e:	f383 8811 	msr	BASEPRI, r3
 800a7a2:	f3bf 8f6f 	isb	sy
 800a7a6:	f3bf 8f4f 	dsb	sy
 800a7aa:	61fb      	str	r3, [r7, #28]
}
 800a7ac:	bf00      	nop
 800a7ae:	e7fe      	b.n	800a7ae <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800a7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d103      	bne.n	800a7c0 <xQueueGiveFromISR+0x58>
 800a7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d101      	bne.n	800a7c4 <xQueueGiveFromISR+0x5c>
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	e000      	b.n	800a7c6 <xQueueGiveFromISR+0x5e>
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d10a      	bne.n	800a7e0 <xQueueGiveFromISR+0x78>
	__asm volatile
 800a7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ce:	f383 8811 	msr	BASEPRI, r3
 800a7d2:	f3bf 8f6f 	isb	sy
 800a7d6:	f3bf 8f4f 	dsb	sy
 800a7da:	61bb      	str	r3, [r7, #24]
}
 800a7dc:	bf00      	nop
 800a7de:	e7fe      	b.n	800a7de <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a7e0:	f002 f9de 	bl	800cba0 <vPortValidateInterruptPriority>
	__asm volatile
 800a7e4:	f3ef 8211 	mrs	r2, BASEPRI
 800a7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ec:	f383 8811 	msr	BASEPRI, r3
 800a7f0:	f3bf 8f6f 	isb	sy
 800a7f4:	f3bf 8f4f 	dsb	sy
 800a7f8:	617a      	str	r2, [r7, #20]
 800a7fa:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a7fc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a7fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a804:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a80a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d22b      	bcs.n	800a868 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a812:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81c:	1c5a      	adds	r2, r3, #1
 800a81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a820:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a822:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a82a:	d112      	bne.n	800a852 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a830:	2b00      	cmp	r3, #0
 800a832:	d016      	beq.n	800a862 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a836:	3324      	adds	r3, #36	; 0x24
 800a838:	4618      	mov	r0, r3
 800a83a:	f001 f871 	bl	800b920 <xTaskRemoveFromEventList>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b00      	cmp	r3, #0
 800a842:	d00e      	beq.n	800a862 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00b      	beq.n	800a862 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	2201      	movs	r2, #1
 800a84e:	601a      	str	r2, [r3, #0]
 800a850:	e007      	b.n	800a862 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a852:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a856:	3301      	adds	r3, #1
 800a858:	b2db      	uxtb	r3, r3
 800a85a:	b25a      	sxtb	r2, r3
 800a85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a862:	2301      	movs	r3, #1
 800a864:	637b      	str	r3, [r7, #52]	; 0x34
 800a866:	e001      	b.n	800a86c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a868:	2300      	movs	r3, #0
 800a86a:	637b      	str	r3, [r7, #52]	; 0x34
 800a86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a86e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f383 8811 	msr	BASEPRI, r3
}
 800a876:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3738      	adds	r7, #56	; 0x38
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
	...

0800a884 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b08c      	sub	sp, #48	; 0x30
 800a888:	af00      	add	r7, sp, #0
 800a88a:	60f8      	str	r0, [r7, #12]
 800a88c:	60b9      	str	r1, [r7, #8]
 800a88e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a890:	2300      	movs	r3, #0
 800a892:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d10a      	bne.n	800a8b4 <xQueueReceive+0x30>
	__asm volatile
 800a89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a2:	f383 8811 	msr	BASEPRI, r3
 800a8a6:	f3bf 8f6f 	isb	sy
 800a8aa:	f3bf 8f4f 	dsb	sy
 800a8ae:	623b      	str	r3, [r7, #32]
}
 800a8b0:	bf00      	nop
 800a8b2:	e7fe      	b.n	800a8b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d103      	bne.n	800a8c2 <xQueueReceive+0x3e>
 800a8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d101      	bne.n	800a8c6 <xQueueReceive+0x42>
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	e000      	b.n	800a8c8 <xQueueReceive+0x44>
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d10a      	bne.n	800a8e2 <xQueueReceive+0x5e>
	__asm volatile
 800a8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d0:	f383 8811 	msr	BASEPRI, r3
 800a8d4:	f3bf 8f6f 	isb	sy
 800a8d8:	f3bf 8f4f 	dsb	sy
 800a8dc:	61fb      	str	r3, [r7, #28]
}
 800a8de:	bf00      	nop
 800a8e0:	e7fe      	b.n	800a8e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a8e2:	f001 f9dd 	bl	800bca0 <xTaskGetSchedulerState>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d102      	bne.n	800a8f2 <xQueueReceive+0x6e>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d101      	bne.n	800a8f6 <xQueueReceive+0x72>
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e000      	b.n	800a8f8 <xQueueReceive+0x74>
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d10a      	bne.n	800a912 <xQueueReceive+0x8e>
	__asm volatile
 800a8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a900:	f383 8811 	msr	BASEPRI, r3
 800a904:	f3bf 8f6f 	isb	sy
 800a908:	f3bf 8f4f 	dsb	sy
 800a90c:	61bb      	str	r3, [r7, #24]
}
 800a90e:	bf00      	nop
 800a910:	e7fe      	b.n	800a910 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a912:	f002 f883 	bl	800ca1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a91a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d01f      	beq.n	800a962 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a922:	68b9      	ldr	r1, [r7, #8]
 800a924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a926:	f000 fa9a 	bl	800ae5e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92c:	1e5a      	subs	r2, r3, #1
 800a92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a930:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a934:	691b      	ldr	r3, [r3, #16]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d00f      	beq.n	800a95a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93c:	3310      	adds	r3, #16
 800a93e:	4618      	mov	r0, r3
 800a940:	f000 ffee 	bl	800b920 <xTaskRemoveFromEventList>
 800a944:	4603      	mov	r3, r0
 800a946:	2b00      	cmp	r3, #0
 800a948:	d007      	beq.n	800a95a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a94a:	4b3d      	ldr	r3, [pc, #244]	; (800aa40 <xQueueReceive+0x1bc>)
 800a94c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a950:	601a      	str	r2, [r3, #0]
 800a952:	f3bf 8f4f 	dsb	sy
 800a956:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a95a:	f002 f88f 	bl	800ca7c <vPortExitCritical>
				return pdPASS;
 800a95e:	2301      	movs	r3, #1
 800a960:	e069      	b.n	800aa36 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d103      	bne.n	800a970 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a968:	f002 f888 	bl	800ca7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a96c:	2300      	movs	r3, #0
 800a96e:	e062      	b.n	800aa36 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a972:	2b00      	cmp	r3, #0
 800a974:	d106      	bne.n	800a984 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a976:	f107 0310 	add.w	r3, r7, #16
 800a97a:	4618      	mov	r0, r3
 800a97c:	f001 f832 	bl	800b9e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a980:	2301      	movs	r3, #1
 800a982:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a984:	f002 f87a 	bl	800ca7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a988:	f000 fd98 	bl	800b4bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a98c:	f002 f846 	bl	800ca1c <vPortEnterCritical>
 800a990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a992:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a996:	b25b      	sxtb	r3, r3
 800a998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a99c:	d103      	bne.n	800a9a6 <xQueueReceive+0x122>
 800a99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9ac:	b25b      	sxtb	r3, r3
 800a9ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9b2:	d103      	bne.n	800a9bc <xQueueReceive+0x138>
 800a9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9bc:	f002 f85e 	bl	800ca7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9c0:	1d3a      	adds	r2, r7, #4
 800a9c2:	f107 0310 	add.w	r3, r7, #16
 800a9c6:	4611      	mov	r1, r2
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f001 f821 	bl	800ba10 <xTaskCheckForTimeOut>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d123      	bne.n	800aa1c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9d6:	f000 faba 	bl	800af4e <prvIsQueueEmpty>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d017      	beq.n	800aa10 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e2:	3324      	adds	r3, #36	; 0x24
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	4611      	mov	r1, r2
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f000 ff49 	bl	800b880 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a9ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9f0:	f000 fa5b 	bl	800aeaa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a9f4:	f000 fd70 	bl	800b4d8 <xTaskResumeAll>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d189      	bne.n	800a912 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a9fe:	4b10      	ldr	r3, [pc, #64]	; (800aa40 <xQueueReceive+0x1bc>)
 800aa00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa04:	601a      	str	r2, [r3, #0]
 800aa06:	f3bf 8f4f 	dsb	sy
 800aa0a:	f3bf 8f6f 	isb	sy
 800aa0e:	e780      	b.n	800a912 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aa10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa12:	f000 fa4a 	bl	800aeaa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa16:	f000 fd5f 	bl	800b4d8 <xTaskResumeAll>
 800aa1a:	e77a      	b.n	800a912 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aa1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa1e:	f000 fa44 	bl	800aeaa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa22:	f000 fd59 	bl	800b4d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa28:	f000 fa91 	bl	800af4e <prvIsQueueEmpty>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	f43f af6f 	beq.w	800a912 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aa34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3730      	adds	r7, #48	; 0x30
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	e000ed04 	.word	0xe000ed04

0800aa44 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b08e      	sub	sp, #56	; 0x38
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800aa56:	2300      	movs	r3, #0
 800aa58:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aa5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d10a      	bne.n	800aa76 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800aa60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa64:	f383 8811 	msr	BASEPRI, r3
 800aa68:	f3bf 8f6f 	isb	sy
 800aa6c:	f3bf 8f4f 	dsb	sy
 800aa70:	623b      	str	r3, [r7, #32]
}
 800aa72:	bf00      	nop
 800aa74:	e7fe      	b.n	800aa74 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800aa76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d00a      	beq.n	800aa94 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800aa7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa82:	f383 8811 	msr	BASEPRI, r3
 800aa86:	f3bf 8f6f 	isb	sy
 800aa8a:	f3bf 8f4f 	dsb	sy
 800aa8e:	61fb      	str	r3, [r7, #28]
}
 800aa90:	bf00      	nop
 800aa92:	e7fe      	b.n	800aa92 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa94:	f001 f904 	bl	800bca0 <xTaskGetSchedulerState>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d102      	bne.n	800aaa4 <xQueueSemaphoreTake+0x60>
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d101      	bne.n	800aaa8 <xQueueSemaphoreTake+0x64>
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	e000      	b.n	800aaaa <xQueueSemaphoreTake+0x66>
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d10a      	bne.n	800aac4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800aaae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab2:	f383 8811 	msr	BASEPRI, r3
 800aab6:	f3bf 8f6f 	isb	sy
 800aaba:	f3bf 8f4f 	dsb	sy
 800aabe:	61bb      	str	r3, [r7, #24]
}
 800aac0:	bf00      	nop
 800aac2:	e7fe      	b.n	800aac2 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800aac4:	f001 ffaa 	bl	800ca1c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800aac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aacc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800aace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d024      	beq.n	800ab1e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800aad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad6:	1e5a      	subs	r2, r3, #1
 800aad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aada:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d104      	bne.n	800aaee <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800aae4:	f001 faa6 	bl	800c034 <pvTaskIncrementMutexHeldCount>
 800aae8:	4602      	mov	r2, r0
 800aaea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaec:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aaee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf0:	691b      	ldr	r3, [r3, #16]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d00f      	beq.n	800ab16 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aaf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf8:	3310      	adds	r3, #16
 800aafa:	4618      	mov	r0, r3
 800aafc:	f000 ff10 	bl	800b920 <xTaskRemoveFromEventList>
 800ab00:	4603      	mov	r3, r0
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d007      	beq.n	800ab16 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ab06:	4b54      	ldr	r3, [pc, #336]	; (800ac58 <xQueueSemaphoreTake+0x214>)
 800ab08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab0c:	601a      	str	r2, [r3, #0]
 800ab0e:	f3bf 8f4f 	dsb	sy
 800ab12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab16:	f001 ffb1 	bl	800ca7c <vPortExitCritical>
				return pdPASS;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	e097      	b.n	800ac4e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d111      	bne.n	800ab48 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ab24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d00a      	beq.n	800ab40 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ab2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab2e:	f383 8811 	msr	BASEPRI, r3
 800ab32:	f3bf 8f6f 	isb	sy
 800ab36:	f3bf 8f4f 	dsb	sy
 800ab3a:	617b      	str	r3, [r7, #20]
}
 800ab3c:	bf00      	nop
 800ab3e:	e7fe      	b.n	800ab3e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ab40:	f001 ff9c 	bl	800ca7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ab44:	2300      	movs	r3, #0
 800ab46:	e082      	b.n	800ac4e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d106      	bne.n	800ab5c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab4e:	f107 030c 	add.w	r3, r7, #12
 800ab52:	4618      	mov	r0, r3
 800ab54:	f000 ff46 	bl	800b9e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab5c:	f001 ff8e 	bl	800ca7c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab60:	f000 fcac 	bl	800b4bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab64:	f001 ff5a 	bl	800ca1c <vPortEnterCritical>
 800ab68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab6e:	b25b      	sxtb	r3, r3
 800ab70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab74:	d103      	bne.n	800ab7e <xQueueSemaphoreTake+0x13a>
 800ab76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab78:	2200      	movs	r2, #0
 800ab7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab84:	b25b      	sxtb	r3, r3
 800ab86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab8a:	d103      	bne.n	800ab94 <xQueueSemaphoreTake+0x150>
 800ab8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab8e:	2200      	movs	r2, #0
 800ab90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab94:	f001 ff72 	bl	800ca7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab98:	463a      	mov	r2, r7
 800ab9a:	f107 030c 	add.w	r3, r7, #12
 800ab9e:	4611      	mov	r1, r2
 800aba0:	4618      	mov	r0, r3
 800aba2:	f000 ff35 	bl	800ba10 <xTaskCheckForTimeOut>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d132      	bne.n	800ac12 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800abae:	f000 f9ce 	bl	800af4e <prvIsQueueEmpty>
 800abb2:	4603      	mov	r3, r0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d026      	beq.n	800ac06 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800abb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d109      	bne.n	800abd4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800abc0:	f001 ff2c 	bl	800ca1c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800abc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc6:	685b      	ldr	r3, [r3, #4]
 800abc8:	4618      	mov	r0, r3
 800abca:	f001 f887 	bl	800bcdc <xTaskPriorityInherit>
 800abce:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800abd0:	f001 ff54 	bl	800ca7c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800abd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd6:	3324      	adds	r3, #36	; 0x24
 800abd8:	683a      	ldr	r2, [r7, #0]
 800abda:	4611      	mov	r1, r2
 800abdc:	4618      	mov	r0, r3
 800abde:	f000 fe4f 	bl	800b880 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800abe2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800abe4:	f000 f961 	bl	800aeaa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800abe8:	f000 fc76 	bl	800b4d8 <xTaskResumeAll>
 800abec:	4603      	mov	r3, r0
 800abee:	2b00      	cmp	r3, #0
 800abf0:	f47f af68 	bne.w	800aac4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800abf4:	4b18      	ldr	r3, [pc, #96]	; (800ac58 <xQueueSemaphoreTake+0x214>)
 800abf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abfa:	601a      	str	r2, [r3, #0]
 800abfc:	f3bf 8f4f 	dsb	sy
 800ac00:	f3bf 8f6f 	isb	sy
 800ac04:	e75e      	b.n	800aac4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ac06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac08:	f000 f94f 	bl	800aeaa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac0c:	f000 fc64 	bl	800b4d8 <xTaskResumeAll>
 800ac10:	e758      	b.n	800aac4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ac12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac14:	f000 f949 	bl	800aeaa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac18:	f000 fc5e 	bl	800b4d8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac1e:	f000 f996 	bl	800af4e <prvIsQueueEmpty>
 800ac22:	4603      	mov	r3, r0
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	f43f af4d 	beq.w	800aac4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ac2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00d      	beq.n	800ac4c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ac30:	f001 fef4 	bl	800ca1c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ac34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac36:	f000 f891 	bl	800ad5c <prvGetDisinheritPriorityAfterTimeout>
 800ac3a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800ac3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ac42:	4618      	mov	r0, r3
 800ac44:	f001 f956 	bl	800bef4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ac48:	f001 ff18 	bl	800ca7c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ac4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3738      	adds	r7, #56	; 0x38
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	e000ed04 	.word	0xe000ed04

0800ac5c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b08e      	sub	sp, #56	; 0x38
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	60f8      	str	r0, [r7, #12]
 800ac64:	60b9      	str	r1, [r7, #8]
 800ac66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ac6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d10a      	bne.n	800ac88 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ac72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac76:	f383 8811 	msr	BASEPRI, r3
 800ac7a:	f3bf 8f6f 	isb	sy
 800ac7e:	f3bf 8f4f 	dsb	sy
 800ac82:	623b      	str	r3, [r7, #32]
}
 800ac84:	bf00      	nop
 800ac86:	e7fe      	b.n	800ac86 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d103      	bne.n	800ac96 <xQueueReceiveFromISR+0x3a>
 800ac8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d101      	bne.n	800ac9a <xQueueReceiveFromISR+0x3e>
 800ac96:	2301      	movs	r3, #1
 800ac98:	e000      	b.n	800ac9c <xQueueReceiveFromISR+0x40>
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d10a      	bne.n	800acb6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800aca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca4:	f383 8811 	msr	BASEPRI, r3
 800aca8:	f3bf 8f6f 	isb	sy
 800acac:	f3bf 8f4f 	dsb	sy
 800acb0:	61fb      	str	r3, [r7, #28]
}
 800acb2:	bf00      	nop
 800acb4:	e7fe      	b.n	800acb4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800acb6:	f001 ff73 	bl	800cba0 <vPortValidateInterruptPriority>
	__asm volatile
 800acba:	f3ef 8211 	mrs	r2, BASEPRI
 800acbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc2:	f383 8811 	msr	BASEPRI, r3
 800acc6:	f3bf 8f6f 	isb	sy
 800acca:	f3bf 8f4f 	dsb	sy
 800acce:	61ba      	str	r2, [r7, #24]
 800acd0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800acd2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800acd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800acd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acda:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800acdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d02f      	beq.n	800ad42 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ace2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ace8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800acec:	68b9      	ldr	r1, [r7, #8]
 800acee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acf0:	f000 f8b5 	bl	800ae5e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800acf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf6:	1e5a      	subs	r2, r3, #1
 800acf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acfa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800acfc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ad00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad04:	d112      	bne.n	800ad2c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad08:	691b      	ldr	r3, [r3, #16]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d016      	beq.n	800ad3c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad10:	3310      	adds	r3, #16
 800ad12:	4618      	mov	r0, r3
 800ad14:	f000 fe04 	bl	800b920 <xTaskRemoveFromEventList>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d00e      	beq.n	800ad3c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d00b      	beq.n	800ad3c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2201      	movs	r2, #1
 800ad28:	601a      	str	r2, [r3, #0]
 800ad2a:	e007      	b.n	800ad3c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ad2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad30:	3301      	adds	r3, #1
 800ad32:	b2db      	uxtb	r3, r3
 800ad34:	b25a      	sxtb	r2, r3
 800ad36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	637b      	str	r3, [r7, #52]	; 0x34
 800ad40:	e001      	b.n	800ad46 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ad42:	2300      	movs	r3, #0
 800ad44:	637b      	str	r3, [r7, #52]	; 0x34
 800ad46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad48:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	f383 8811 	msr	BASEPRI, r3
}
 800ad50:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ad52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3738      	adds	r7, #56	; 0x38
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b085      	sub	sp, #20
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d006      	beq.n	800ad7a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f1c3 0307 	rsb	r3, r3, #7
 800ad76:	60fb      	str	r3, [r7, #12]
 800ad78:	e001      	b.n	800ad7e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
	}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3714      	adds	r7, #20
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bc80      	pop	{r7}
 800ad88:	4770      	bx	lr

0800ad8a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ad8a:	b580      	push	{r7, lr}
 800ad8c:	b086      	sub	sp, #24
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	60f8      	str	r0, [r7, #12]
 800ad92:	60b9      	str	r1, [r7, #8]
 800ad94:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ad96:	2300      	movs	r3, #0
 800ad98:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad9e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d10d      	bne.n	800adc4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d14d      	bne.n	800ae4c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	4618      	mov	r0, r3
 800adb6:	f001 f817 	bl	800bde8 <xTaskPriorityDisinherit>
 800adba:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2200      	movs	r2, #0
 800adc0:	605a      	str	r2, [r3, #4]
 800adc2:	e043      	b.n	800ae4c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d119      	bne.n	800adfe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	6898      	ldr	r0, [r3, #8]
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800add2:	461a      	mov	r2, r3
 800add4:	68b9      	ldr	r1, [r7, #8]
 800add6:	f002 f923 	bl	800d020 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	689a      	ldr	r2, [r3, #8]
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ade2:	441a      	add	r2, r3
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	689a      	ldr	r2, [r3, #8]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d32b      	bcc.n	800ae4c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	609a      	str	r2, [r3, #8]
 800adfc:	e026      	b.n	800ae4c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	68d8      	ldr	r0, [r3, #12]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae06:	461a      	mov	r2, r3
 800ae08:	68b9      	ldr	r1, [r7, #8]
 800ae0a:	f002 f909 	bl	800d020 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	68da      	ldr	r2, [r3, #12]
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae16:	425b      	negs	r3, r3
 800ae18:	441a      	add	r2, r3
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	68da      	ldr	r2, [r3, #12]
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d207      	bcs.n	800ae3a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	685a      	ldr	r2, [r3, #4]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae32:	425b      	negs	r3, r3
 800ae34:	441a      	add	r2, r3
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2b02      	cmp	r3, #2
 800ae3e:	d105      	bne.n	800ae4c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d002      	beq.n	800ae4c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	3b01      	subs	r3, #1
 800ae4a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	1c5a      	adds	r2, r3, #1
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ae54:	697b      	ldr	r3, [r7, #20]
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3718      	adds	r7, #24
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}

0800ae5e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ae5e:	b580      	push	{r7, lr}
 800ae60:	b082      	sub	sp, #8
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
 800ae66:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d018      	beq.n	800aea2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	68da      	ldr	r2, [r3, #12]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae78:	441a      	add	r2, r3
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	68da      	ldr	r2, [r3, #12]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d303      	bcc.n	800ae92 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681a      	ldr	r2, [r3, #0]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	68d9      	ldr	r1, [r3, #12]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	6838      	ldr	r0, [r7, #0]
 800ae9e:	f002 f8bf 	bl	800d020 <memcpy>
	}
}
 800aea2:	bf00      	nop
 800aea4:	3708      	adds	r7, #8
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}

0800aeaa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aeaa:	b580      	push	{r7, lr}
 800aeac:	b084      	sub	sp, #16
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aeb2:	f001 fdb3 	bl	800ca1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aebc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aebe:	e011      	b.n	800aee4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d012      	beq.n	800aeee <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	3324      	adds	r3, #36	; 0x24
 800aecc:	4618      	mov	r0, r3
 800aece:	f000 fd27 	bl	800b920 <xTaskRemoveFromEventList>
 800aed2:	4603      	mov	r3, r0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d001      	beq.n	800aedc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aed8:	f000 fdfc 	bl	800bad4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aedc:	7bfb      	ldrb	r3, [r7, #15]
 800aede:	3b01      	subs	r3, #1
 800aee0:	b2db      	uxtb	r3, r3
 800aee2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	dce9      	bgt.n	800aec0 <prvUnlockQueue+0x16>
 800aeec:	e000      	b.n	800aef0 <prvUnlockQueue+0x46>
					break;
 800aeee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	22ff      	movs	r2, #255	; 0xff
 800aef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800aef8:	f001 fdc0 	bl	800ca7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aefc:	f001 fd8e 	bl	800ca1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af06:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af08:	e011      	b.n	800af2e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	691b      	ldr	r3, [r3, #16]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d012      	beq.n	800af38 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	3310      	adds	r3, #16
 800af16:	4618      	mov	r0, r3
 800af18:	f000 fd02 	bl	800b920 <xTaskRemoveFromEventList>
 800af1c:	4603      	mov	r3, r0
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d001      	beq.n	800af26 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800af22:	f000 fdd7 	bl	800bad4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800af26:	7bbb      	ldrb	r3, [r7, #14]
 800af28:	3b01      	subs	r3, #1
 800af2a:	b2db      	uxtb	r3, r3
 800af2c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af32:	2b00      	cmp	r3, #0
 800af34:	dce9      	bgt.n	800af0a <prvUnlockQueue+0x60>
 800af36:	e000      	b.n	800af3a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800af38:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	22ff      	movs	r2, #255	; 0xff
 800af3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800af42:	f001 fd9b 	bl	800ca7c <vPortExitCritical>
}
 800af46:	bf00      	nop
 800af48:	3710      	adds	r7, #16
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}

0800af4e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800af4e:	b580      	push	{r7, lr}
 800af50:	b084      	sub	sp, #16
 800af52:	af00      	add	r7, sp, #0
 800af54:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af56:	f001 fd61 	bl	800ca1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d102      	bne.n	800af68 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800af62:	2301      	movs	r3, #1
 800af64:	60fb      	str	r3, [r7, #12]
 800af66:	e001      	b.n	800af6c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800af68:	2300      	movs	r3, #0
 800af6a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af6c:	f001 fd86 	bl	800ca7c <vPortExitCritical>

	return xReturn;
 800af70:	68fb      	ldr	r3, [r7, #12]
}
 800af72:	4618      	mov	r0, r3
 800af74:	3710      	adds	r7, #16
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}

0800af7a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800af7a:	b580      	push	{r7, lr}
 800af7c:	b084      	sub	sp, #16
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af82:	f001 fd4b 	bl	800ca1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af8e:	429a      	cmp	r2, r3
 800af90:	d102      	bne.n	800af98 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800af92:	2301      	movs	r3, #1
 800af94:	60fb      	str	r3, [r7, #12]
 800af96:	e001      	b.n	800af9c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800af98:	2300      	movs	r3, #0
 800af9a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af9c:	f001 fd6e 	bl	800ca7c <vPortExitCritical>

	return xReturn;
 800afa0:	68fb      	ldr	r3, [r7, #12]
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3710      	adds	r7, #16
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
	...

0800afac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800afac:	b480      	push	{r7}
 800afae:	b085      	sub	sp, #20
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800afb6:	2300      	movs	r3, #0
 800afb8:	60fb      	str	r3, [r7, #12]
 800afba:	e014      	b.n	800afe6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800afbc:	4a0e      	ldr	r2, [pc, #56]	; (800aff8 <vQueueAddToRegistry+0x4c>)
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d10b      	bne.n	800afe0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800afc8:	490b      	ldr	r1, [pc, #44]	; (800aff8 <vQueueAddToRegistry+0x4c>)
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	683a      	ldr	r2, [r7, #0]
 800afce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800afd2:	4a09      	ldr	r2, [pc, #36]	; (800aff8 <vQueueAddToRegistry+0x4c>)
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	00db      	lsls	r3, r3, #3
 800afd8:	4413      	add	r3, r2
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800afde:	e006      	b.n	800afee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	3301      	adds	r3, #1
 800afe4:	60fb      	str	r3, [r7, #12]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2b07      	cmp	r3, #7
 800afea:	d9e7      	bls.n	800afbc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800afec:	bf00      	nop
 800afee:	bf00      	nop
 800aff0:	3714      	adds	r7, #20
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bc80      	pop	{r7}
 800aff6:	4770      	bx	lr
 800aff8:	20003028 	.word	0x20003028

0800affc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800affc:	b580      	push	{r7, lr}
 800affe:	b086      	sub	sp, #24
 800b000:	af00      	add	r7, sp, #0
 800b002:	60f8      	str	r0, [r7, #12]
 800b004:	60b9      	str	r1, [r7, #8]
 800b006:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b00c:	f001 fd06 	bl	800ca1c <vPortEnterCritical>
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b016:	b25b      	sxtb	r3, r3
 800b018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b01c:	d103      	bne.n	800b026 <vQueueWaitForMessageRestricted+0x2a>
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	2200      	movs	r2, #0
 800b022:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b02c:	b25b      	sxtb	r3, r3
 800b02e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b032:	d103      	bne.n	800b03c <vQueueWaitForMessageRestricted+0x40>
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	2200      	movs	r2, #0
 800b038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b03c:	f001 fd1e 	bl	800ca7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b044:	2b00      	cmp	r3, #0
 800b046:	d106      	bne.n	800b056 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	3324      	adds	r3, #36	; 0x24
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	68b9      	ldr	r1, [r7, #8]
 800b050:	4618      	mov	r0, r3
 800b052:	f000 fc39 	bl	800b8c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b056:	6978      	ldr	r0, [r7, #20]
 800b058:	f7ff ff27 	bl	800aeaa <prvUnlockQueue>
	}
 800b05c:	bf00      	nop
 800b05e:	3718      	adds	r7, #24
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b064:	b580      	push	{r7, lr}
 800b066:	b08e      	sub	sp, #56	; 0x38
 800b068:	af04      	add	r7, sp, #16
 800b06a:	60f8      	str	r0, [r7, #12]
 800b06c:	60b9      	str	r1, [r7, #8]
 800b06e:	607a      	str	r2, [r7, #4]
 800b070:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b074:	2b00      	cmp	r3, #0
 800b076:	d10a      	bne.n	800b08e <xTaskCreateStatic+0x2a>
	__asm volatile
 800b078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b07c:	f383 8811 	msr	BASEPRI, r3
 800b080:	f3bf 8f6f 	isb	sy
 800b084:	f3bf 8f4f 	dsb	sy
 800b088:	623b      	str	r3, [r7, #32]
}
 800b08a:	bf00      	nop
 800b08c:	e7fe      	b.n	800b08c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b090:	2b00      	cmp	r3, #0
 800b092:	d10a      	bne.n	800b0aa <xTaskCreateStatic+0x46>
	__asm volatile
 800b094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b098:	f383 8811 	msr	BASEPRI, r3
 800b09c:	f3bf 8f6f 	isb	sy
 800b0a0:	f3bf 8f4f 	dsb	sy
 800b0a4:	61fb      	str	r3, [r7, #28]
}
 800b0a6:	bf00      	nop
 800b0a8:	e7fe      	b.n	800b0a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b0aa:	2354      	movs	r3, #84	; 0x54
 800b0ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	2b54      	cmp	r3, #84	; 0x54
 800b0b2:	d00a      	beq.n	800b0ca <xTaskCreateStatic+0x66>
	__asm volatile
 800b0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b8:	f383 8811 	msr	BASEPRI, r3
 800b0bc:	f3bf 8f6f 	isb	sy
 800b0c0:	f3bf 8f4f 	dsb	sy
 800b0c4:	61bb      	str	r3, [r7, #24]
}
 800b0c6:	bf00      	nop
 800b0c8:	e7fe      	b.n	800b0c8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d01e      	beq.n	800b10e <xTaskCreateStatic+0xaa>
 800b0d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d01b      	beq.n	800b10e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0de:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e2:	2202      	movs	r2, #2
 800b0e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	9303      	str	r3, [sp, #12]
 800b0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ee:	9302      	str	r3, [sp, #8]
 800b0f0:	f107 0314 	add.w	r3, r7, #20
 800b0f4:	9301      	str	r3, [sp, #4]
 800b0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f8:	9300      	str	r3, [sp, #0]
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	68b9      	ldr	r1, [r7, #8]
 800b100:	68f8      	ldr	r0, [r7, #12]
 800b102:	f000 f850 	bl	800b1a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b106:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b108:	f000 f8d4 	bl	800b2b4 <prvAddNewTaskToReadyList>
 800b10c:	e001      	b.n	800b112 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800b10e:	2300      	movs	r3, #0
 800b110:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b112:	697b      	ldr	r3, [r7, #20]
	}
 800b114:	4618      	mov	r0, r3
 800b116:	3728      	adds	r7, #40	; 0x28
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b08c      	sub	sp, #48	; 0x30
 800b120:	af04      	add	r7, sp, #16
 800b122:	60f8      	str	r0, [r7, #12]
 800b124:	60b9      	str	r1, [r7, #8]
 800b126:	603b      	str	r3, [r7, #0]
 800b128:	4613      	mov	r3, r2
 800b12a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b12c:	88fb      	ldrh	r3, [r7, #6]
 800b12e:	009b      	lsls	r3, r3, #2
 800b130:	4618      	mov	r0, r3
 800b132:	f001 fd73 	bl	800cc1c <pvPortMalloc>
 800b136:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d00e      	beq.n	800b15c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b13e:	2054      	movs	r0, #84	; 0x54
 800b140:	f001 fd6c 	bl	800cc1c <pvPortMalloc>
 800b144:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b146:	69fb      	ldr	r3, [r7, #28]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d003      	beq.n	800b154 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b14c:	69fb      	ldr	r3, [r7, #28]
 800b14e:	697a      	ldr	r2, [r7, #20]
 800b150:	631a      	str	r2, [r3, #48]	; 0x30
 800b152:	e005      	b.n	800b160 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b154:	6978      	ldr	r0, [r7, #20]
 800b156:	f001 fe25 	bl	800cda4 <vPortFree>
 800b15a:	e001      	b.n	800b160 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b15c:	2300      	movs	r3, #0
 800b15e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b160:	69fb      	ldr	r3, [r7, #28]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d017      	beq.n	800b196 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b166:	69fb      	ldr	r3, [r7, #28]
 800b168:	2200      	movs	r2, #0
 800b16a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b16e:	88fa      	ldrh	r2, [r7, #6]
 800b170:	2300      	movs	r3, #0
 800b172:	9303      	str	r3, [sp, #12]
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	9302      	str	r3, [sp, #8]
 800b178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b17a:	9301      	str	r3, [sp, #4]
 800b17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b17e:	9300      	str	r3, [sp, #0]
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	68b9      	ldr	r1, [r7, #8]
 800b184:	68f8      	ldr	r0, [r7, #12]
 800b186:	f000 f80e 	bl	800b1a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b18a:	69f8      	ldr	r0, [r7, #28]
 800b18c:	f000 f892 	bl	800b2b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b190:	2301      	movs	r3, #1
 800b192:	61bb      	str	r3, [r7, #24]
 800b194:	e002      	b.n	800b19c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b196:	f04f 33ff 	mov.w	r3, #4294967295
 800b19a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b19c:	69bb      	ldr	r3, [r7, #24]
	}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3720      	adds	r7, #32
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}

0800b1a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b088      	sub	sp, #32
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	60f8      	str	r0, [r7, #12]
 800b1ae:	60b9      	str	r1, [r7, #8]
 800b1b0:	607a      	str	r2, [r7, #4]
 800b1b2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	461a      	mov	r2, r3
 800b1be:	21a5      	movs	r1, #165	; 0xa5
 800b1c0:	f001 ff3c 	bl	800d03c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b1ce:	3b01      	subs	r3, #1
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	4413      	add	r3, r2
 800b1d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b1d6:	69bb      	ldr	r3, [r7, #24]
 800b1d8:	f023 0307 	bic.w	r3, r3, #7
 800b1dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	f003 0307 	and.w	r3, r3, #7
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d00a      	beq.n	800b1fe <prvInitialiseNewTask+0x58>
	__asm volatile
 800b1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ec:	f383 8811 	msr	BASEPRI, r3
 800b1f0:	f3bf 8f6f 	isb	sy
 800b1f4:	f3bf 8f4f 	dsb	sy
 800b1f8:	617b      	str	r3, [r7, #20]
}
 800b1fa:	bf00      	nop
 800b1fc:	e7fe      	b.n	800b1fc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b1fe:	2300      	movs	r3, #0
 800b200:	61fb      	str	r3, [r7, #28]
 800b202:	e012      	b.n	800b22a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b204:	68ba      	ldr	r2, [r7, #8]
 800b206:	69fb      	ldr	r3, [r7, #28]
 800b208:	4413      	add	r3, r2
 800b20a:	7819      	ldrb	r1, [r3, #0]
 800b20c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b20e:	69fb      	ldr	r3, [r7, #28]
 800b210:	4413      	add	r3, r2
 800b212:	3334      	adds	r3, #52	; 0x34
 800b214:	460a      	mov	r2, r1
 800b216:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b218:	68ba      	ldr	r2, [r7, #8]
 800b21a:	69fb      	ldr	r3, [r7, #28]
 800b21c:	4413      	add	r3, r2
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d006      	beq.n	800b232 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b224:	69fb      	ldr	r3, [r7, #28]
 800b226:	3301      	adds	r3, #1
 800b228:	61fb      	str	r3, [r7, #28]
 800b22a:	69fb      	ldr	r3, [r7, #28]
 800b22c:	2b0f      	cmp	r3, #15
 800b22e:	d9e9      	bls.n	800b204 <prvInitialiseNewTask+0x5e>
 800b230:	e000      	b.n	800b234 <prvInitialiseNewTask+0x8e>
		{
			break;
 800b232:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b236:	2200      	movs	r2, #0
 800b238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b23e:	2b06      	cmp	r3, #6
 800b240:	d901      	bls.n	800b246 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b242:	2306      	movs	r3, #6
 800b244:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b24a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b24e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b250:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b254:	2200      	movs	r2, #0
 800b256:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b25a:	3304      	adds	r3, #4
 800b25c:	4618      	mov	r0, r3
 800b25e:	f7fe ff21 	bl	800a0a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b264:	3318      	adds	r3, #24
 800b266:	4618      	mov	r0, r3
 800b268:	f7fe ff1c 	bl	800a0a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b26e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b270:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b274:	f1c3 0207 	rsb	r2, r3, #7
 800b278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b27a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b27e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b280:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b284:	2200      	movs	r2, #0
 800b286:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b28a:	2200      	movs	r2, #0
 800b28c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b290:	683a      	ldr	r2, [r7, #0]
 800b292:	68f9      	ldr	r1, [r7, #12]
 800b294:	69b8      	ldr	r0, [r7, #24]
 800b296:	f001 facf 	bl	800c838 <pxPortInitialiseStack>
 800b29a:	4602      	mov	r2, r0
 800b29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b29e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d002      	beq.n	800b2ac <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2ac:	bf00      	nop
 800b2ae:	3720      	adds	r7, #32
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b082      	sub	sp, #8
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b2bc:	f001 fbae 	bl	800ca1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b2c0:	4b2a      	ldr	r3, [pc, #168]	; (800b36c <prvAddNewTaskToReadyList+0xb8>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	4a29      	ldr	r2, [pc, #164]	; (800b36c <prvAddNewTaskToReadyList+0xb8>)
 800b2c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b2ca:	4b29      	ldr	r3, [pc, #164]	; (800b370 <prvAddNewTaskToReadyList+0xbc>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d109      	bne.n	800b2e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b2d2:	4a27      	ldr	r2, [pc, #156]	; (800b370 <prvAddNewTaskToReadyList+0xbc>)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b2d8:	4b24      	ldr	r3, [pc, #144]	; (800b36c <prvAddNewTaskToReadyList+0xb8>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d110      	bne.n	800b302 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b2e0:	f000 fc1c 	bl	800bb1c <prvInitialiseTaskLists>
 800b2e4:	e00d      	b.n	800b302 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b2e6:	4b23      	ldr	r3, [pc, #140]	; (800b374 <prvAddNewTaskToReadyList+0xc0>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d109      	bne.n	800b302 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b2ee:	4b20      	ldr	r3, [pc, #128]	; (800b370 <prvAddNewTaskToReadyList+0xbc>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	d802      	bhi.n	800b302 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b2fc:	4a1c      	ldr	r2, [pc, #112]	; (800b370 <prvAddNewTaskToReadyList+0xbc>)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b302:	4b1d      	ldr	r3, [pc, #116]	; (800b378 <prvAddNewTaskToReadyList+0xc4>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	3301      	adds	r3, #1
 800b308:	4a1b      	ldr	r2, [pc, #108]	; (800b378 <prvAddNewTaskToReadyList+0xc4>)
 800b30a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b310:	2201      	movs	r2, #1
 800b312:	409a      	lsls	r2, r3
 800b314:	4b19      	ldr	r3, [pc, #100]	; (800b37c <prvAddNewTaskToReadyList+0xc8>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4313      	orrs	r3, r2
 800b31a:	4a18      	ldr	r2, [pc, #96]	; (800b37c <prvAddNewTaskToReadyList+0xc8>)
 800b31c:	6013      	str	r3, [r2, #0]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b322:	4613      	mov	r3, r2
 800b324:	009b      	lsls	r3, r3, #2
 800b326:	4413      	add	r3, r2
 800b328:	009b      	lsls	r3, r3, #2
 800b32a:	4a15      	ldr	r2, [pc, #84]	; (800b380 <prvAddNewTaskToReadyList+0xcc>)
 800b32c:	441a      	add	r2, r3
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	3304      	adds	r3, #4
 800b332:	4619      	mov	r1, r3
 800b334:	4610      	mov	r0, r2
 800b336:	f7fe fec1 	bl	800a0bc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b33a:	f001 fb9f 	bl	800ca7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b33e:	4b0d      	ldr	r3, [pc, #52]	; (800b374 <prvAddNewTaskToReadyList+0xc0>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d00e      	beq.n	800b364 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b346:	4b0a      	ldr	r3, [pc, #40]	; (800b370 <prvAddNewTaskToReadyList+0xbc>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b350:	429a      	cmp	r2, r3
 800b352:	d207      	bcs.n	800b364 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b354:	4b0b      	ldr	r3, [pc, #44]	; (800b384 <prvAddNewTaskToReadyList+0xd0>)
 800b356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b35a:	601a      	str	r2, [r3, #0]
 800b35c:	f3bf 8f4f 	dsb	sy
 800b360:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b364:	bf00      	nop
 800b366:	3708      	adds	r7, #8
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}
 800b36c:	20000db8 	.word	0x20000db8
 800b370:	20000cb8 	.word	0x20000cb8
 800b374:	20000dc4 	.word	0x20000dc4
 800b378:	20000dd4 	.word	0x20000dd4
 800b37c:	20000dc0 	.word	0x20000dc0
 800b380:	20000cbc 	.word	0x20000cbc
 800b384:	e000ed04 	.word	0xe000ed04

0800b388 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b084      	sub	sp, #16
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b390:	2300      	movs	r3, #0
 800b392:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d017      	beq.n	800b3ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b39a:	4b13      	ldr	r3, [pc, #76]	; (800b3e8 <vTaskDelay+0x60>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d00a      	beq.n	800b3b8 <vTaskDelay+0x30>
	__asm volatile
 800b3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a6:	f383 8811 	msr	BASEPRI, r3
 800b3aa:	f3bf 8f6f 	isb	sy
 800b3ae:	f3bf 8f4f 	dsb	sy
 800b3b2:	60bb      	str	r3, [r7, #8]
}
 800b3b4:	bf00      	nop
 800b3b6:	e7fe      	b.n	800b3b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b3b8:	f000 f880 	bl	800b4bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b3bc:	2100      	movs	r1, #0
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 fe4c 	bl	800c05c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b3c4:	f000 f888 	bl	800b4d8 <xTaskResumeAll>
 800b3c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d107      	bne.n	800b3e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b3d0:	4b06      	ldr	r3, [pc, #24]	; (800b3ec <vTaskDelay+0x64>)
 800b3d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3d6:	601a      	str	r2, [r3, #0]
 800b3d8:	f3bf 8f4f 	dsb	sy
 800b3dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b3e0:	bf00      	nop
 800b3e2:	3710      	adds	r7, #16
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}
 800b3e8:	20000de0 	.word	0x20000de0
 800b3ec:	e000ed04 	.word	0xe000ed04

0800b3f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b08a      	sub	sp, #40	; 0x28
 800b3f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b3fe:	463a      	mov	r2, r7
 800b400:	1d39      	adds	r1, r7, #4
 800b402:	f107 0308 	add.w	r3, r7, #8
 800b406:	4618      	mov	r0, r3
 800b408:	f7f8 fe94 	bl	8004134 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b40c:	6839      	ldr	r1, [r7, #0]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	68ba      	ldr	r2, [r7, #8]
 800b412:	9202      	str	r2, [sp, #8]
 800b414:	9301      	str	r3, [sp, #4]
 800b416:	2300      	movs	r3, #0
 800b418:	9300      	str	r3, [sp, #0]
 800b41a:	2300      	movs	r3, #0
 800b41c:	460a      	mov	r2, r1
 800b41e:	4921      	ldr	r1, [pc, #132]	; (800b4a4 <vTaskStartScheduler+0xb4>)
 800b420:	4821      	ldr	r0, [pc, #132]	; (800b4a8 <vTaskStartScheduler+0xb8>)
 800b422:	f7ff fe1f 	bl	800b064 <xTaskCreateStatic>
 800b426:	4603      	mov	r3, r0
 800b428:	4a20      	ldr	r2, [pc, #128]	; (800b4ac <vTaskStartScheduler+0xbc>)
 800b42a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b42c:	4b1f      	ldr	r3, [pc, #124]	; (800b4ac <vTaskStartScheduler+0xbc>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d002      	beq.n	800b43a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b434:	2301      	movs	r3, #1
 800b436:	617b      	str	r3, [r7, #20]
 800b438:	e001      	b.n	800b43e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b43a:	2300      	movs	r3, #0
 800b43c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	2b01      	cmp	r3, #1
 800b442:	d102      	bne.n	800b44a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b444:	f000 fe70 	bl	800c128 <xTimerCreateTimerTask>
 800b448:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	d116      	bne.n	800b47e <vTaskStartScheduler+0x8e>
	__asm volatile
 800b450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b454:	f383 8811 	msr	BASEPRI, r3
 800b458:	f3bf 8f6f 	isb	sy
 800b45c:	f3bf 8f4f 	dsb	sy
 800b460:	613b      	str	r3, [r7, #16]
}
 800b462:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b464:	4b12      	ldr	r3, [pc, #72]	; (800b4b0 <vTaskStartScheduler+0xc0>)
 800b466:	f04f 32ff 	mov.w	r2, #4294967295
 800b46a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b46c:	4b11      	ldr	r3, [pc, #68]	; (800b4b4 <vTaskStartScheduler+0xc4>)
 800b46e:	2201      	movs	r2, #1
 800b470:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b472:	4b11      	ldr	r3, [pc, #68]	; (800b4b8 <vTaskStartScheduler+0xc8>)
 800b474:	2200      	movs	r2, #0
 800b476:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b478:	f001 fa5e 	bl	800c938 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b47c:	e00e      	b.n	800b49c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b484:	d10a      	bne.n	800b49c <vTaskStartScheduler+0xac>
	__asm volatile
 800b486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b48a:	f383 8811 	msr	BASEPRI, r3
 800b48e:	f3bf 8f6f 	isb	sy
 800b492:	f3bf 8f4f 	dsb	sy
 800b496:	60fb      	str	r3, [r7, #12]
}
 800b498:	bf00      	nop
 800b49a:	e7fe      	b.n	800b49a <vTaskStartScheduler+0xaa>
}
 800b49c:	bf00      	nop
 800b49e:	3718      	adds	r7, #24
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	0800f21c 	.word	0x0800f21c
 800b4a8:	0800baed 	.word	0x0800baed
 800b4ac:	20000ddc 	.word	0x20000ddc
 800b4b0:	20000dd8 	.word	0x20000dd8
 800b4b4:	20000dc4 	.word	0x20000dc4
 800b4b8:	20000dbc 	.word	0x20000dbc

0800b4bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b4bc:	b480      	push	{r7}
 800b4be:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b4c0:	4b04      	ldr	r3, [pc, #16]	; (800b4d4 <vTaskSuspendAll+0x18>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	3301      	adds	r3, #1
 800b4c6:	4a03      	ldr	r2, [pc, #12]	; (800b4d4 <vTaskSuspendAll+0x18>)
 800b4c8:	6013      	str	r3, [r2, #0]
}
 800b4ca:	bf00      	nop
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bc80      	pop	{r7}
 800b4d0:	4770      	bx	lr
 800b4d2:	bf00      	nop
 800b4d4:	20000de0 	.word	0x20000de0

0800b4d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b084      	sub	sp, #16
 800b4dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b4e6:	4b41      	ldr	r3, [pc, #260]	; (800b5ec <xTaskResumeAll+0x114>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d10a      	bne.n	800b504 <xTaskResumeAll+0x2c>
	__asm volatile
 800b4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f2:	f383 8811 	msr	BASEPRI, r3
 800b4f6:	f3bf 8f6f 	isb	sy
 800b4fa:	f3bf 8f4f 	dsb	sy
 800b4fe:	603b      	str	r3, [r7, #0]
}
 800b500:	bf00      	nop
 800b502:	e7fe      	b.n	800b502 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b504:	f001 fa8a 	bl	800ca1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b508:	4b38      	ldr	r3, [pc, #224]	; (800b5ec <xTaskResumeAll+0x114>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	3b01      	subs	r3, #1
 800b50e:	4a37      	ldr	r2, [pc, #220]	; (800b5ec <xTaskResumeAll+0x114>)
 800b510:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b512:	4b36      	ldr	r3, [pc, #216]	; (800b5ec <xTaskResumeAll+0x114>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d161      	bne.n	800b5de <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b51a:	4b35      	ldr	r3, [pc, #212]	; (800b5f0 <xTaskResumeAll+0x118>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d05d      	beq.n	800b5de <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b522:	e02e      	b.n	800b582 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b524:	4b33      	ldr	r3, [pc, #204]	; (800b5f4 <xTaskResumeAll+0x11c>)
 800b526:	68db      	ldr	r3, [r3, #12]
 800b528:	68db      	ldr	r3, [r3, #12]
 800b52a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	3318      	adds	r3, #24
 800b530:	4618      	mov	r0, r3
 800b532:	f7fe fe1e 	bl	800a172 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	3304      	adds	r3, #4
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7fe fe19 	bl	800a172 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b544:	2201      	movs	r2, #1
 800b546:	409a      	lsls	r2, r3
 800b548:	4b2b      	ldr	r3, [pc, #172]	; (800b5f8 <xTaskResumeAll+0x120>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	4313      	orrs	r3, r2
 800b54e:	4a2a      	ldr	r2, [pc, #168]	; (800b5f8 <xTaskResumeAll+0x120>)
 800b550:	6013      	str	r3, [r2, #0]
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b556:	4613      	mov	r3, r2
 800b558:	009b      	lsls	r3, r3, #2
 800b55a:	4413      	add	r3, r2
 800b55c:	009b      	lsls	r3, r3, #2
 800b55e:	4a27      	ldr	r2, [pc, #156]	; (800b5fc <xTaskResumeAll+0x124>)
 800b560:	441a      	add	r2, r3
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	3304      	adds	r3, #4
 800b566:	4619      	mov	r1, r3
 800b568:	4610      	mov	r0, r2
 800b56a:	f7fe fda7 	bl	800a0bc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b572:	4b23      	ldr	r3, [pc, #140]	; (800b600 <xTaskResumeAll+0x128>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b578:	429a      	cmp	r2, r3
 800b57a:	d302      	bcc.n	800b582 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b57c:	4b21      	ldr	r3, [pc, #132]	; (800b604 <xTaskResumeAll+0x12c>)
 800b57e:	2201      	movs	r2, #1
 800b580:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b582:	4b1c      	ldr	r3, [pc, #112]	; (800b5f4 <xTaskResumeAll+0x11c>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d1cc      	bne.n	800b524 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d001      	beq.n	800b594 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b590:	f000 fb62 	bl	800bc58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b594:	4b1c      	ldr	r3, [pc, #112]	; (800b608 <xTaskResumeAll+0x130>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d010      	beq.n	800b5c2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b5a0:	f000 f856 	bl	800b650 <xTaskIncrementTick>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d002      	beq.n	800b5b0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b5aa:	4b16      	ldr	r3, [pc, #88]	; (800b604 <xTaskResumeAll+0x12c>)
 800b5ac:	2201      	movs	r2, #1
 800b5ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	3b01      	subs	r3, #1
 800b5b4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d1f1      	bne.n	800b5a0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800b5bc:	4b12      	ldr	r3, [pc, #72]	; (800b608 <xTaskResumeAll+0x130>)
 800b5be:	2200      	movs	r2, #0
 800b5c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b5c2:	4b10      	ldr	r3, [pc, #64]	; (800b604 <xTaskResumeAll+0x12c>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d009      	beq.n	800b5de <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b5ce:	4b0f      	ldr	r3, [pc, #60]	; (800b60c <xTaskResumeAll+0x134>)
 800b5d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5d4:	601a      	str	r2, [r3, #0]
 800b5d6:	f3bf 8f4f 	dsb	sy
 800b5da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b5de:	f001 fa4d 	bl	800ca7c <vPortExitCritical>

	return xAlreadyYielded;
 800b5e2:	68bb      	ldr	r3, [r7, #8]
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3710      	adds	r7, #16
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}
 800b5ec:	20000de0 	.word	0x20000de0
 800b5f0:	20000db8 	.word	0x20000db8
 800b5f4:	20000d78 	.word	0x20000d78
 800b5f8:	20000dc0 	.word	0x20000dc0
 800b5fc:	20000cbc 	.word	0x20000cbc
 800b600:	20000cb8 	.word	0x20000cb8
 800b604:	20000dcc 	.word	0x20000dcc
 800b608:	20000dc8 	.word	0x20000dc8
 800b60c:	e000ed04 	.word	0xe000ed04

0800b610 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b610:	b480      	push	{r7}
 800b612:	b083      	sub	sp, #12
 800b614:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b616:	4b04      	ldr	r3, [pc, #16]	; (800b628 <xTaskGetTickCount+0x18>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b61c:	687b      	ldr	r3, [r7, #4]
}
 800b61e:	4618      	mov	r0, r3
 800b620:	370c      	adds	r7, #12
 800b622:	46bd      	mov	sp, r7
 800b624:	bc80      	pop	{r7}
 800b626:	4770      	bx	lr
 800b628:	20000dbc 	.word	0x20000dbc

0800b62c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b632:	f001 fab5 	bl	800cba0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b636:	2300      	movs	r3, #0
 800b638:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b63a:	4b04      	ldr	r3, [pc, #16]	; (800b64c <xTaskGetTickCountFromISR+0x20>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b640:	683b      	ldr	r3, [r7, #0]
}
 800b642:	4618      	mov	r0, r3
 800b644:	3708      	adds	r7, #8
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}
 800b64a:	bf00      	nop
 800b64c:	20000dbc 	.word	0x20000dbc

0800b650 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b086      	sub	sp, #24
 800b654:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b656:	2300      	movs	r3, #0
 800b658:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b65a:	4b51      	ldr	r3, [pc, #324]	; (800b7a0 <xTaskIncrementTick+0x150>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	f040 808d 	bne.w	800b77e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b664:	4b4f      	ldr	r3, [pc, #316]	; (800b7a4 <xTaskIncrementTick+0x154>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	3301      	adds	r3, #1
 800b66a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b66c:	4a4d      	ldr	r2, [pc, #308]	; (800b7a4 <xTaskIncrementTick+0x154>)
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d120      	bne.n	800b6ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b678:	4b4b      	ldr	r3, [pc, #300]	; (800b7a8 <xTaskIncrementTick+0x158>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d00a      	beq.n	800b698 <xTaskIncrementTick+0x48>
	__asm volatile
 800b682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b686:	f383 8811 	msr	BASEPRI, r3
 800b68a:	f3bf 8f6f 	isb	sy
 800b68e:	f3bf 8f4f 	dsb	sy
 800b692:	603b      	str	r3, [r7, #0]
}
 800b694:	bf00      	nop
 800b696:	e7fe      	b.n	800b696 <xTaskIncrementTick+0x46>
 800b698:	4b43      	ldr	r3, [pc, #268]	; (800b7a8 <xTaskIncrementTick+0x158>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	60fb      	str	r3, [r7, #12]
 800b69e:	4b43      	ldr	r3, [pc, #268]	; (800b7ac <xTaskIncrementTick+0x15c>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	4a41      	ldr	r2, [pc, #260]	; (800b7a8 <xTaskIncrementTick+0x158>)
 800b6a4:	6013      	str	r3, [r2, #0]
 800b6a6:	4a41      	ldr	r2, [pc, #260]	; (800b7ac <xTaskIncrementTick+0x15c>)
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	6013      	str	r3, [r2, #0]
 800b6ac:	4b40      	ldr	r3, [pc, #256]	; (800b7b0 <xTaskIncrementTick+0x160>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	4a3f      	ldr	r2, [pc, #252]	; (800b7b0 <xTaskIncrementTick+0x160>)
 800b6b4:	6013      	str	r3, [r2, #0]
 800b6b6:	f000 facf 	bl	800bc58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b6ba:	4b3e      	ldr	r3, [pc, #248]	; (800b7b4 <xTaskIncrementTick+0x164>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	693a      	ldr	r2, [r7, #16]
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d34d      	bcc.n	800b760 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6c4:	4b38      	ldr	r3, [pc, #224]	; (800b7a8 <xTaskIncrementTick+0x158>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d101      	bne.n	800b6d2 <xTaskIncrementTick+0x82>
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	e000      	b.n	800b6d4 <xTaskIncrementTick+0x84>
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d004      	beq.n	800b6e2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6d8:	4b36      	ldr	r3, [pc, #216]	; (800b7b4 <xTaskIncrementTick+0x164>)
 800b6da:	f04f 32ff 	mov.w	r2, #4294967295
 800b6de:	601a      	str	r2, [r3, #0]
					break;
 800b6e0:	e03e      	b.n	800b760 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b6e2:	4b31      	ldr	r3, [pc, #196]	; (800b7a8 <xTaskIncrementTick+0x158>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	68db      	ldr	r3, [r3, #12]
 800b6e8:	68db      	ldr	r3, [r3, #12]
 800b6ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b6f2:	693a      	ldr	r2, [r7, #16]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	d203      	bcs.n	800b702 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b6fa:	4a2e      	ldr	r2, [pc, #184]	; (800b7b4 <xTaskIncrementTick+0x164>)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6013      	str	r3, [r2, #0]
						break;
 800b700:	e02e      	b.n	800b760 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	3304      	adds	r3, #4
 800b706:	4618      	mov	r0, r3
 800b708:	f7fe fd33 	bl	800a172 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b710:	2b00      	cmp	r3, #0
 800b712:	d004      	beq.n	800b71e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	3318      	adds	r3, #24
 800b718:	4618      	mov	r0, r3
 800b71a:	f7fe fd2a 	bl	800a172 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b722:	2201      	movs	r2, #1
 800b724:	409a      	lsls	r2, r3
 800b726:	4b24      	ldr	r3, [pc, #144]	; (800b7b8 <xTaskIncrementTick+0x168>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4313      	orrs	r3, r2
 800b72c:	4a22      	ldr	r2, [pc, #136]	; (800b7b8 <xTaskIncrementTick+0x168>)
 800b72e:	6013      	str	r3, [r2, #0]
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b734:	4613      	mov	r3, r2
 800b736:	009b      	lsls	r3, r3, #2
 800b738:	4413      	add	r3, r2
 800b73a:	009b      	lsls	r3, r3, #2
 800b73c:	4a1f      	ldr	r2, [pc, #124]	; (800b7bc <xTaskIncrementTick+0x16c>)
 800b73e:	441a      	add	r2, r3
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	3304      	adds	r3, #4
 800b744:	4619      	mov	r1, r3
 800b746:	4610      	mov	r0, r2
 800b748:	f7fe fcb8 	bl	800a0bc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b750:	4b1b      	ldr	r3, [pc, #108]	; (800b7c0 <xTaskIncrementTick+0x170>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b756:	429a      	cmp	r2, r3
 800b758:	d3b4      	bcc.n	800b6c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b75a:	2301      	movs	r3, #1
 800b75c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b75e:	e7b1      	b.n	800b6c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b760:	4b17      	ldr	r3, [pc, #92]	; (800b7c0 <xTaskIncrementTick+0x170>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b766:	4915      	ldr	r1, [pc, #84]	; (800b7bc <xTaskIncrementTick+0x16c>)
 800b768:	4613      	mov	r3, r2
 800b76a:	009b      	lsls	r3, r3, #2
 800b76c:	4413      	add	r3, r2
 800b76e:	009b      	lsls	r3, r3, #2
 800b770:	440b      	add	r3, r1
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	2b01      	cmp	r3, #1
 800b776:	d907      	bls.n	800b788 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800b778:	2301      	movs	r3, #1
 800b77a:	617b      	str	r3, [r7, #20]
 800b77c:	e004      	b.n	800b788 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b77e:	4b11      	ldr	r3, [pc, #68]	; (800b7c4 <xTaskIncrementTick+0x174>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	3301      	adds	r3, #1
 800b784:	4a0f      	ldr	r2, [pc, #60]	; (800b7c4 <xTaskIncrementTick+0x174>)
 800b786:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b788:	4b0f      	ldr	r3, [pc, #60]	; (800b7c8 <xTaskIncrementTick+0x178>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d001      	beq.n	800b794 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800b790:	2301      	movs	r3, #1
 800b792:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b794:	697b      	ldr	r3, [r7, #20]
}
 800b796:	4618      	mov	r0, r3
 800b798:	3718      	adds	r7, #24
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}
 800b79e:	bf00      	nop
 800b7a0:	20000de0 	.word	0x20000de0
 800b7a4:	20000dbc 	.word	0x20000dbc
 800b7a8:	20000d70 	.word	0x20000d70
 800b7ac:	20000d74 	.word	0x20000d74
 800b7b0:	20000dd0 	.word	0x20000dd0
 800b7b4:	20000dd8 	.word	0x20000dd8
 800b7b8:	20000dc0 	.word	0x20000dc0
 800b7bc:	20000cbc 	.word	0x20000cbc
 800b7c0:	20000cb8 	.word	0x20000cb8
 800b7c4:	20000dc8 	.word	0x20000dc8
 800b7c8:	20000dcc 	.word	0x20000dcc

0800b7cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b087      	sub	sp, #28
 800b7d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b7d2:	4b26      	ldr	r3, [pc, #152]	; (800b86c <vTaskSwitchContext+0xa0>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d003      	beq.n	800b7e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b7da:	4b25      	ldr	r3, [pc, #148]	; (800b870 <vTaskSwitchContext+0xa4>)
 800b7dc:	2201      	movs	r2, #1
 800b7de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b7e0:	e03f      	b.n	800b862 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800b7e2:	4b23      	ldr	r3, [pc, #140]	; (800b870 <vTaskSwitchContext+0xa4>)
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b7e8:	4b22      	ldr	r3, [pc, #136]	; (800b874 <vTaskSwitchContext+0xa8>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	fab3 f383 	clz	r3, r3
 800b7f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b7f6:	7afb      	ldrb	r3, [r7, #11]
 800b7f8:	f1c3 031f 	rsb	r3, r3, #31
 800b7fc:	617b      	str	r3, [r7, #20]
 800b7fe:	491e      	ldr	r1, [pc, #120]	; (800b878 <vTaskSwitchContext+0xac>)
 800b800:	697a      	ldr	r2, [r7, #20]
 800b802:	4613      	mov	r3, r2
 800b804:	009b      	lsls	r3, r3, #2
 800b806:	4413      	add	r3, r2
 800b808:	009b      	lsls	r3, r3, #2
 800b80a:	440b      	add	r3, r1
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d10a      	bne.n	800b828 <vTaskSwitchContext+0x5c>
	__asm volatile
 800b812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b816:	f383 8811 	msr	BASEPRI, r3
 800b81a:	f3bf 8f6f 	isb	sy
 800b81e:	f3bf 8f4f 	dsb	sy
 800b822:	607b      	str	r3, [r7, #4]
}
 800b824:	bf00      	nop
 800b826:	e7fe      	b.n	800b826 <vTaskSwitchContext+0x5a>
 800b828:	697a      	ldr	r2, [r7, #20]
 800b82a:	4613      	mov	r3, r2
 800b82c:	009b      	lsls	r3, r3, #2
 800b82e:	4413      	add	r3, r2
 800b830:	009b      	lsls	r3, r3, #2
 800b832:	4a11      	ldr	r2, [pc, #68]	; (800b878 <vTaskSwitchContext+0xac>)
 800b834:	4413      	add	r3, r2
 800b836:	613b      	str	r3, [r7, #16]
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	685b      	ldr	r3, [r3, #4]
 800b83c:	685a      	ldr	r2, [r3, #4]
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	605a      	str	r2, [r3, #4]
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	685a      	ldr	r2, [r3, #4]
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	3308      	adds	r3, #8
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d104      	bne.n	800b858 <vTaskSwitchContext+0x8c>
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	685a      	ldr	r2, [r3, #4]
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	605a      	str	r2, [r3, #4]
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	68db      	ldr	r3, [r3, #12]
 800b85e:	4a07      	ldr	r2, [pc, #28]	; (800b87c <vTaskSwitchContext+0xb0>)
 800b860:	6013      	str	r3, [r2, #0]
}
 800b862:	bf00      	nop
 800b864:	371c      	adds	r7, #28
 800b866:	46bd      	mov	sp, r7
 800b868:	bc80      	pop	{r7}
 800b86a:	4770      	bx	lr
 800b86c:	20000de0 	.word	0x20000de0
 800b870:	20000dcc 	.word	0x20000dcc
 800b874:	20000dc0 	.word	0x20000dc0
 800b878:	20000cbc 	.word	0x20000cbc
 800b87c:	20000cb8 	.word	0x20000cb8

0800b880 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b084      	sub	sp, #16
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d10a      	bne.n	800b8a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b894:	f383 8811 	msr	BASEPRI, r3
 800b898:	f3bf 8f6f 	isb	sy
 800b89c:	f3bf 8f4f 	dsb	sy
 800b8a0:	60fb      	str	r3, [r7, #12]
}
 800b8a2:	bf00      	nop
 800b8a4:	e7fe      	b.n	800b8a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b8a6:	4b07      	ldr	r3, [pc, #28]	; (800b8c4 <vTaskPlaceOnEventList+0x44>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	3318      	adds	r3, #24
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f7fe fc27 	bl	800a102 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b8b4:	2101      	movs	r1, #1
 800b8b6:	6838      	ldr	r0, [r7, #0]
 800b8b8:	f000 fbd0 	bl	800c05c <prvAddCurrentTaskToDelayedList>
}
 800b8bc:	bf00      	nop
 800b8be:	3710      	adds	r7, #16
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}
 800b8c4:	20000cb8 	.word	0x20000cb8

0800b8c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b086      	sub	sp, #24
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	60f8      	str	r0, [r7, #12]
 800b8d0:	60b9      	str	r1, [r7, #8]
 800b8d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d10a      	bne.n	800b8f0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8de:	f383 8811 	msr	BASEPRI, r3
 800b8e2:	f3bf 8f6f 	isb	sy
 800b8e6:	f3bf 8f4f 	dsb	sy
 800b8ea:	617b      	str	r3, [r7, #20]
}
 800b8ec:	bf00      	nop
 800b8ee:	e7fe      	b.n	800b8ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b8f0:	4b0a      	ldr	r3, [pc, #40]	; (800b91c <vTaskPlaceOnEventListRestricted+0x54>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	3318      	adds	r3, #24
 800b8f6:	4619      	mov	r1, r3
 800b8f8:	68f8      	ldr	r0, [r7, #12]
 800b8fa:	f7fe fbdf 	bl	800a0bc <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d002      	beq.n	800b90a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b904:	f04f 33ff 	mov.w	r3, #4294967295
 800b908:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b90a:	6879      	ldr	r1, [r7, #4]
 800b90c:	68b8      	ldr	r0, [r7, #8]
 800b90e:	f000 fba5 	bl	800c05c <prvAddCurrentTaskToDelayedList>
	}
 800b912:	bf00      	nop
 800b914:	3718      	adds	r7, #24
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop
 800b91c:	20000cb8 	.word	0x20000cb8

0800b920 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b086      	sub	sp, #24
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	68db      	ldr	r3, [r3, #12]
 800b92c:	68db      	ldr	r3, [r3, #12]
 800b92e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d10a      	bne.n	800b94c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b93a:	f383 8811 	msr	BASEPRI, r3
 800b93e:	f3bf 8f6f 	isb	sy
 800b942:	f3bf 8f4f 	dsb	sy
 800b946:	60fb      	str	r3, [r7, #12]
}
 800b948:	bf00      	nop
 800b94a:	e7fe      	b.n	800b94a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	3318      	adds	r3, #24
 800b950:	4618      	mov	r0, r3
 800b952:	f7fe fc0e 	bl	800a172 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b956:	4b1d      	ldr	r3, [pc, #116]	; (800b9cc <xTaskRemoveFromEventList+0xac>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d11c      	bne.n	800b998 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	3304      	adds	r3, #4
 800b962:	4618      	mov	r0, r3
 800b964:	f7fe fc05 	bl	800a172 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b96c:	2201      	movs	r2, #1
 800b96e:	409a      	lsls	r2, r3
 800b970:	4b17      	ldr	r3, [pc, #92]	; (800b9d0 <xTaskRemoveFromEventList+0xb0>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	4313      	orrs	r3, r2
 800b976:	4a16      	ldr	r2, [pc, #88]	; (800b9d0 <xTaskRemoveFromEventList+0xb0>)
 800b978:	6013      	str	r3, [r2, #0]
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b97e:	4613      	mov	r3, r2
 800b980:	009b      	lsls	r3, r3, #2
 800b982:	4413      	add	r3, r2
 800b984:	009b      	lsls	r3, r3, #2
 800b986:	4a13      	ldr	r2, [pc, #76]	; (800b9d4 <xTaskRemoveFromEventList+0xb4>)
 800b988:	441a      	add	r2, r3
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	3304      	adds	r3, #4
 800b98e:	4619      	mov	r1, r3
 800b990:	4610      	mov	r0, r2
 800b992:	f7fe fb93 	bl	800a0bc <vListInsertEnd>
 800b996:	e005      	b.n	800b9a4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	3318      	adds	r3, #24
 800b99c:	4619      	mov	r1, r3
 800b99e:	480e      	ldr	r0, [pc, #56]	; (800b9d8 <xTaskRemoveFromEventList+0xb8>)
 800b9a0:	f7fe fb8c 	bl	800a0bc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9a8:	4b0c      	ldr	r3, [pc, #48]	; (800b9dc <xTaskRemoveFromEventList+0xbc>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d905      	bls.n	800b9be <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b9b6:	4b0a      	ldr	r3, [pc, #40]	; (800b9e0 <xTaskRemoveFromEventList+0xc0>)
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	601a      	str	r2, [r3, #0]
 800b9bc:	e001      	b.n	800b9c2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b9c2:	697b      	ldr	r3, [r7, #20]
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3718      	adds	r7, #24
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}
 800b9cc:	20000de0 	.word	0x20000de0
 800b9d0:	20000dc0 	.word	0x20000dc0
 800b9d4:	20000cbc 	.word	0x20000cbc
 800b9d8:	20000d78 	.word	0x20000d78
 800b9dc:	20000cb8 	.word	0x20000cb8
 800b9e0:	20000dcc 	.word	0x20000dcc

0800b9e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b083      	sub	sp, #12
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b9ec:	4b06      	ldr	r3, [pc, #24]	; (800ba08 <vTaskInternalSetTimeOutState+0x24>)
 800b9ee:	681a      	ldr	r2, [r3, #0]
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b9f4:	4b05      	ldr	r3, [pc, #20]	; (800ba0c <vTaskInternalSetTimeOutState+0x28>)
 800b9f6:	681a      	ldr	r2, [r3, #0]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	605a      	str	r2, [r3, #4]
}
 800b9fc:	bf00      	nop
 800b9fe:	370c      	adds	r7, #12
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bc80      	pop	{r7}
 800ba04:	4770      	bx	lr
 800ba06:	bf00      	nop
 800ba08:	20000dd0 	.word	0x20000dd0
 800ba0c:	20000dbc 	.word	0x20000dbc

0800ba10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b088      	sub	sp, #32
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d10a      	bne.n	800ba36 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ba20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba24:	f383 8811 	msr	BASEPRI, r3
 800ba28:	f3bf 8f6f 	isb	sy
 800ba2c:	f3bf 8f4f 	dsb	sy
 800ba30:	613b      	str	r3, [r7, #16]
}
 800ba32:	bf00      	nop
 800ba34:	e7fe      	b.n	800ba34 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d10a      	bne.n	800ba52 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ba3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba40:	f383 8811 	msr	BASEPRI, r3
 800ba44:	f3bf 8f6f 	isb	sy
 800ba48:	f3bf 8f4f 	dsb	sy
 800ba4c:	60fb      	str	r3, [r7, #12]
}
 800ba4e:	bf00      	nop
 800ba50:	e7fe      	b.n	800ba50 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ba52:	f000 ffe3 	bl	800ca1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ba56:	4b1d      	ldr	r3, [pc, #116]	; (800bacc <xTaskCheckForTimeOut+0xbc>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	69ba      	ldr	r2, [r7, #24]
 800ba62:	1ad3      	subs	r3, r2, r3
 800ba64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba6e:	d102      	bne.n	800ba76 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ba70:	2300      	movs	r3, #0
 800ba72:	61fb      	str	r3, [r7, #28]
 800ba74:	e023      	b.n	800babe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681a      	ldr	r2, [r3, #0]
 800ba7a:	4b15      	ldr	r3, [pc, #84]	; (800bad0 <xTaskCheckForTimeOut+0xc0>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d007      	beq.n	800ba92 <xTaskCheckForTimeOut+0x82>
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	69ba      	ldr	r2, [r7, #24]
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d302      	bcc.n	800ba92 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	61fb      	str	r3, [r7, #28]
 800ba90:	e015      	b.n	800babe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	697a      	ldr	r2, [r7, #20]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d20b      	bcs.n	800bab4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	681a      	ldr	r2, [r3, #0]
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	1ad2      	subs	r2, r2, r3
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f7ff ff9b 	bl	800b9e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800baae:	2300      	movs	r3, #0
 800bab0:	61fb      	str	r3, [r7, #28]
 800bab2:	e004      	b.n	800babe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	2200      	movs	r2, #0
 800bab8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800baba:	2301      	movs	r3, #1
 800babc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800babe:	f000 ffdd 	bl	800ca7c <vPortExitCritical>

	return xReturn;
 800bac2:	69fb      	ldr	r3, [r7, #28]
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3720      	adds	r7, #32
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	20000dbc 	.word	0x20000dbc
 800bad0:	20000dd0 	.word	0x20000dd0

0800bad4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bad4:	b480      	push	{r7}
 800bad6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bad8:	4b03      	ldr	r3, [pc, #12]	; (800bae8 <vTaskMissedYield+0x14>)
 800bada:	2201      	movs	r2, #1
 800badc:	601a      	str	r2, [r3, #0]
}
 800bade:	bf00      	nop
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bc80      	pop	{r7}
 800bae4:	4770      	bx	lr
 800bae6:	bf00      	nop
 800bae8:	20000dcc 	.word	0x20000dcc

0800baec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b082      	sub	sp, #8
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800baf4:	f000 f852 	bl	800bb9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800baf8:	4b06      	ldr	r3, [pc, #24]	; (800bb14 <prvIdleTask+0x28>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	2b01      	cmp	r3, #1
 800bafe:	d9f9      	bls.n	800baf4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bb00:	4b05      	ldr	r3, [pc, #20]	; (800bb18 <prvIdleTask+0x2c>)
 800bb02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb06:	601a      	str	r2, [r3, #0]
 800bb08:	f3bf 8f4f 	dsb	sy
 800bb0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bb10:	e7f0      	b.n	800baf4 <prvIdleTask+0x8>
 800bb12:	bf00      	nop
 800bb14:	20000cbc 	.word	0x20000cbc
 800bb18:	e000ed04 	.word	0xe000ed04

0800bb1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b082      	sub	sp, #8
 800bb20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb22:	2300      	movs	r3, #0
 800bb24:	607b      	str	r3, [r7, #4]
 800bb26:	e00c      	b.n	800bb42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bb28:	687a      	ldr	r2, [r7, #4]
 800bb2a:	4613      	mov	r3, r2
 800bb2c:	009b      	lsls	r3, r3, #2
 800bb2e:	4413      	add	r3, r2
 800bb30:	009b      	lsls	r3, r3, #2
 800bb32:	4a12      	ldr	r2, [pc, #72]	; (800bb7c <prvInitialiseTaskLists+0x60>)
 800bb34:	4413      	add	r3, r2
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7fe fa95 	bl	800a066 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	3301      	adds	r3, #1
 800bb40:	607b      	str	r3, [r7, #4]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2b06      	cmp	r3, #6
 800bb46:	d9ef      	bls.n	800bb28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bb48:	480d      	ldr	r0, [pc, #52]	; (800bb80 <prvInitialiseTaskLists+0x64>)
 800bb4a:	f7fe fa8c 	bl	800a066 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bb4e:	480d      	ldr	r0, [pc, #52]	; (800bb84 <prvInitialiseTaskLists+0x68>)
 800bb50:	f7fe fa89 	bl	800a066 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bb54:	480c      	ldr	r0, [pc, #48]	; (800bb88 <prvInitialiseTaskLists+0x6c>)
 800bb56:	f7fe fa86 	bl	800a066 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bb5a:	480c      	ldr	r0, [pc, #48]	; (800bb8c <prvInitialiseTaskLists+0x70>)
 800bb5c:	f7fe fa83 	bl	800a066 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bb60:	480b      	ldr	r0, [pc, #44]	; (800bb90 <prvInitialiseTaskLists+0x74>)
 800bb62:	f7fe fa80 	bl	800a066 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bb66:	4b0b      	ldr	r3, [pc, #44]	; (800bb94 <prvInitialiseTaskLists+0x78>)
 800bb68:	4a05      	ldr	r2, [pc, #20]	; (800bb80 <prvInitialiseTaskLists+0x64>)
 800bb6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bb6c:	4b0a      	ldr	r3, [pc, #40]	; (800bb98 <prvInitialiseTaskLists+0x7c>)
 800bb6e:	4a05      	ldr	r2, [pc, #20]	; (800bb84 <prvInitialiseTaskLists+0x68>)
 800bb70:	601a      	str	r2, [r3, #0]
}
 800bb72:	bf00      	nop
 800bb74:	3708      	adds	r7, #8
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
 800bb7a:	bf00      	nop
 800bb7c:	20000cbc 	.word	0x20000cbc
 800bb80:	20000d48 	.word	0x20000d48
 800bb84:	20000d5c 	.word	0x20000d5c
 800bb88:	20000d78 	.word	0x20000d78
 800bb8c:	20000d8c 	.word	0x20000d8c
 800bb90:	20000da4 	.word	0x20000da4
 800bb94:	20000d70 	.word	0x20000d70
 800bb98:	20000d74 	.word	0x20000d74

0800bb9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b082      	sub	sp, #8
 800bba0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bba2:	e019      	b.n	800bbd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bba4:	f000 ff3a 	bl	800ca1c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800bba8:	4b10      	ldr	r3, [pc, #64]	; (800bbec <prvCheckTasksWaitingTermination+0x50>)
 800bbaa:	68db      	ldr	r3, [r3, #12]
 800bbac:	68db      	ldr	r3, [r3, #12]
 800bbae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	3304      	adds	r3, #4
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f7fe fadc 	bl	800a172 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bbba:	4b0d      	ldr	r3, [pc, #52]	; (800bbf0 <prvCheckTasksWaitingTermination+0x54>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	3b01      	subs	r3, #1
 800bbc0:	4a0b      	ldr	r2, [pc, #44]	; (800bbf0 <prvCheckTasksWaitingTermination+0x54>)
 800bbc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bbc4:	4b0b      	ldr	r3, [pc, #44]	; (800bbf4 <prvCheckTasksWaitingTermination+0x58>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	3b01      	subs	r3, #1
 800bbca:	4a0a      	ldr	r2, [pc, #40]	; (800bbf4 <prvCheckTasksWaitingTermination+0x58>)
 800bbcc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bbce:	f000 ff55 	bl	800ca7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f000 f810 	bl	800bbf8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bbd8:	4b06      	ldr	r3, [pc, #24]	; (800bbf4 <prvCheckTasksWaitingTermination+0x58>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d1e1      	bne.n	800bba4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bbe0:	bf00      	nop
 800bbe2:	bf00      	nop
 800bbe4:	3708      	adds	r7, #8
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
 800bbea:	bf00      	nop
 800bbec:	20000d8c 	.word	0x20000d8c
 800bbf0:	20000db8 	.word	0x20000db8
 800bbf4:	20000da0 	.word	0x20000da0

0800bbf8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b084      	sub	sp, #16
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d108      	bne.n	800bc1c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f001 f8c8 	bl	800cda4 <vPortFree>
				vPortFree( pxTCB );
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f001 f8c5 	bl	800cda4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bc1a:	e018      	b.n	800bc4e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	d103      	bne.n	800bc2e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f001 f8bc 	bl	800cda4 <vPortFree>
	}
 800bc2c:	e00f      	b.n	800bc4e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bc34:	2b02      	cmp	r3, #2
 800bc36:	d00a      	beq.n	800bc4e <prvDeleteTCB+0x56>
	__asm volatile
 800bc38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc3c:	f383 8811 	msr	BASEPRI, r3
 800bc40:	f3bf 8f6f 	isb	sy
 800bc44:	f3bf 8f4f 	dsb	sy
 800bc48:	60fb      	str	r3, [r7, #12]
}
 800bc4a:	bf00      	nop
 800bc4c:	e7fe      	b.n	800bc4c <prvDeleteTCB+0x54>
	}
 800bc4e:	bf00      	nop
 800bc50:	3710      	adds	r7, #16
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
	...

0800bc58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b083      	sub	sp, #12
 800bc5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc5e:	4b0e      	ldr	r3, [pc, #56]	; (800bc98 <prvResetNextTaskUnblockTime+0x40>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d101      	bne.n	800bc6c <prvResetNextTaskUnblockTime+0x14>
 800bc68:	2301      	movs	r3, #1
 800bc6a:	e000      	b.n	800bc6e <prvResetNextTaskUnblockTime+0x16>
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d004      	beq.n	800bc7c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bc72:	4b0a      	ldr	r3, [pc, #40]	; (800bc9c <prvResetNextTaskUnblockTime+0x44>)
 800bc74:	f04f 32ff 	mov.w	r2, #4294967295
 800bc78:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bc7a:	e008      	b.n	800bc8e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bc7c:	4b06      	ldr	r3, [pc, #24]	; (800bc98 <prvResetNextTaskUnblockTime+0x40>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	68db      	ldr	r3, [r3, #12]
 800bc82:	68db      	ldr	r3, [r3, #12]
 800bc84:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	685b      	ldr	r3, [r3, #4]
 800bc8a:	4a04      	ldr	r2, [pc, #16]	; (800bc9c <prvResetNextTaskUnblockTime+0x44>)
 800bc8c:	6013      	str	r3, [r2, #0]
}
 800bc8e:	bf00      	nop
 800bc90:	370c      	adds	r7, #12
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bc80      	pop	{r7}
 800bc96:	4770      	bx	lr
 800bc98:	20000d70 	.word	0x20000d70
 800bc9c:	20000dd8 	.word	0x20000dd8

0800bca0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bca0:	b480      	push	{r7}
 800bca2:	b083      	sub	sp, #12
 800bca4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bca6:	4b0b      	ldr	r3, [pc, #44]	; (800bcd4 <xTaskGetSchedulerState+0x34>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d102      	bne.n	800bcb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bcae:	2301      	movs	r3, #1
 800bcb0:	607b      	str	r3, [r7, #4]
 800bcb2:	e008      	b.n	800bcc6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcb4:	4b08      	ldr	r3, [pc, #32]	; (800bcd8 <xTaskGetSchedulerState+0x38>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d102      	bne.n	800bcc2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bcbc:	2302      	movs	r3, #2
 800bcbe:	607b      	str	r3, [r7, #4]
 800bcc0:	e001      	b.n	800bcc6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bcc6:	687b      	ldr	r3, [r7, #4]
	}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	370c      	adds	r7, #12
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bc80      	pop	{r7}
 800bcd0:	4770      	bx	lr
 800bcd2:	bf00      	nop
 800bcd4:	20000dc4 	.word	0x20000dc4
 800bcd8:	20000de0 	.word	0x20000de0

0800bcdc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b084      	sub	sp, #16
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bce8:	2300      	movs	r3, #0
 800bcea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d06e      	beq.n	800bdd0 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcf6:	4b39      	ldr	r3, [pc, #228]	; (800bddc <xTaskPriorityInherit+0x100>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	d25e      	bcs.n	800bdbe <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	699b      	ldr	r3, [r3, #24]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	db06      	blt.n	800bd16 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd08:	4b34      	ldr	r3, [pc, #208]	; (800bddc <xTaskPriorityInherit+0x100>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd0e:	f1c3 0207 	rsb	r2, r3, #7
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	6959      	ldr	r1, [r3, #20]
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd1e:	4613      	mov	r3, r2
 800bd20:	009b      	lsls	r3, r3, #2
 800bd22:	4413      	add	r3, r2
 800bd24:	009b      	lsls	r3, r3, #2
 800bd26:	4a2e      	ldr	r2, [pc, #184]	; (800bde0 <xTaskPriorityInherit+0x104>)
 800bd28:	4413      	add	r3, r2
 800bd2a:	4299      	cmp	r1, r3
 800bd2c:	d101      	bne.n	800bd32 <xTaskPriorityInherit+0x56>
 800bd2e:	2301      	movs	r3, #1
 800bd30:	e000      	b.n	800bd34 <xTaskPriorityInherit+0x58>
 800bd32:	2300      	movs	r3, #0
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d03a      	beq.n	800bdae <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	3304      	adds	r3, #4
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f7fe fa18 	bl	800a172 <uxListRemove>
 800bd42:	4603      	mov	r3, r0
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d115      	bne.n	800bd74 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd4c:	4924      	ldr	r1, [pc, #144]	; (800bde0 <xTaskPriorityInherit+0x104>)
 800bd4e:	4613      	mov	r3, r2
 800bd50:	009b      	lsls	r3, r3, #2
 800bd52:	4413      	add	r3, r2
 800bd54:	009b      	lsls	r3, r3, #2
 800bd56:	440b      	add	r3, r1
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d10a      	bne.n	800bd74 <xTaskPriorityInherit+0x98>
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd62:	2201      	movs	r2, #1
 800bd64:	fa02 f303 	lsl.w	r3, r2, r3
 800bd68:	43da      	mvns	r2, r3
 800bd6a:	4b1e      	ldr	r3, [pc, #120]	; (800bde4 <xTaskPriorityInherit+0x108>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	4013      	ands	r3, r2
 800bd70:	4a1c      	ldr	r2, [pc, #112]	; (800bde4 <xTaskPriorityInherit+0x108>)
 800bd72:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bd74:	4b19      	ldr	r3, [pc, #100]	; (800bddc <xTaskPriorityInherit+0x100>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd82:	2201      	movs	r2, #1
 800bd84:	409a      	lsls	r2, r3
 800bd86:	4b17      	ldr	r3, [pc, #92]	; (800bde4 <xTaskPriorityInherit+0x108>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	4a15      	ldr	r2, [pc, #84]	; (800bde4 <xTaskPriorityInherit+0x108>)
 800bd8e:	6013      	str	r3, [r2, #0]
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd94:	4613      	mov	r3, r2
 800bd96:	009b      	lsls	r3, r3, #2
 800bd98:	4413      	add	r3, r2
 800bd9a:	009b      	lsls	r3, r3, #2
 800bd9c:	4a10      	ldr	r2, [pc, #64]	; (800bde0 <xTaskPriorityInherit+0x104>)
 800bd9e:	441a      	add	r2, r3
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	3304      	adds	r3, #4
 800bda4:	4619      	mov	r1, r3
 800bda6:	4610      	mov	r0, r2
 800bda8:	f7fe f988 	bl	800a0bc <vListInsertEnd>
 800bdac:	e004      	b.n	800bdb8 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bdae:	4b0b      	ldr	r3, [pc, #44]	; (800bddc <xTaskPriorityInherit+0x100>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bdb8:	2301      	movs	r3, #1
 800bdba:	60fb      	str	r3, [r7, #12]
 800bdbc:	e008      	b.n	800bdd0 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bdc2:	4b06      	ldr	r3, [pc, #24]	; (800bddc <xTaskPriorityInherit+0x100>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d201      	bcs.n	800bdd0 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bdcc:	2301      	movs	r3, #1
 800bdce:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
	}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3710      	adds	r7, #16
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
 800bdda:	bf00      	nop
 800bddc:	20000cb8 	.word	0x20000cb8
 800bde0:	20000cbc 	.word	0x20000cbc
 800bde4:	20000dc0 	.word	0x20000dc0

0800bde8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b086      	sub	sp, #24
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d06e      	beq.n	800bedc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bdfe:	4b3a      	ldr	r3, [pc, #232]	; (800bee8 <xTaskPriorityDisinherit+0x100>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	693a      	ldr	r2, [r7, #16]
 800be04:	429a      	cmp	r2, r3
 800be06:	d00a      	beq.n	800be1e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800be08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be0c:	f383 8811 	msr	BASEPRI, r3
 800be10:	f3bf 8f6f 	isb	sy
 800be14:	f3bf 8f4f 	dsb	sy
 800be18:	60fb      	str	r3, [r7, #12]
}
 800be1a:	bf00      	nop
 800be1c:	e7fe      	b.n	800be1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be22:	2b00      	cmp	r3, #0
 800be24:	d10a      	bne.n	800be3c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800be26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be2a:	f383 8811 	msr	BASEPRI, r3
 800be2e:	f3bf 8f6f 	isb	sy
 800be32:	f3bf 8f4f 	dsb	sy
 800be36:	60bb      	str	r3, [r7, #8]
}
 800be38:	bf00      	nop
 800be3a:	e7fe      	b.n	800be3a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be40:	1e5a      	subs	r2, r3, #1
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be4e:	429a      	cmp	r2, r3
 800be50:	d044      	beq.n	800bedc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be56:	2b00      	cmp	r3, #0
 800be58:	d140      	bne.n	800bedc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	3304      	adds	r3, #4
 800be5e:	4618      	mov	r0, r3
 800be60:	f7fe f987 	bl	800a172 <uxListRemove>
 800be64:	4603      	mov	r3, r0
 800be66:	2b00      	cmp	r3, #0
 800be68:	d115      	bne.n	800be96 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be6e:	491f      	ldr	r1, [pc, #124]	; (800beec <xTaskPriorityDisinherit+0x104>)
 800be70:	4613      	mov	r3, r2
 800be72:	009b      	lsls	r3, r3, #2
 800be74:	4413      	add	r3, r2
 800be76:	009b      	lsls	r3, r3, #2
 800be78:	440b      	add	r3, r1
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d10a      	bne.n	800be96 <xTaskPriorityDisinherit+0xae>
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be84:	2201      	movs	r2, #1
 800be86:	fa02 f303 	lsl.w	r3, r2, r3
 800be8a:	43da      	mvns	r2, r3
 800be8c:	4b18      	ldr	r3, [pc, #96]	; (800bef0 <xTaskPriorityDisinherit+0x108>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4013      	ands	r3, r2
 800be92:	4a17      	ldr	r2, [pc, #92]	; (800bef0 <xTaskPriorityDisinherit+0x108>)
 800be94:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea2:	f1c3 0207 	rsb	r2, r3, #7
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beae:	2201      	movs	r2, #1
 800beb0:	409a      	lsls	r2, r3
 800beb2:	4b0f      	ldr	r3, [pc, #60]	; (800bef0 <xTaskPriorityDisinherit+0x108>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	4313      	orrs	r3, r2
 800beb8:	4a0d      	ldr	r2, [pc, #52]	; (800bef0 <xTaskPriorityDisinherit+0x108>)
 800beba:	6013      	str	r3, [r2, #0]
 800bebc:	693b      	ldr	r3, [r7, #16]
 800bebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bec0:	4613      	mov	r3, r2
 800bec2:	009b      	lsls	r3, r3, #2
 800bec4:	4413      	add	r3, r2
 800bec6:	009b      	lsls	r3, r3, #2
 800bec8:	4a08      	ldr	r2, [pc, #32]	; (800beec <xTaskPriorityDisinherit+0x104>)
 800beca:	441a      	add	r2, r3
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	3304      	adds	r3, #4
 800bed0:	4619      	mov	r1, r3
 800bed2:	4610      	mov	r0, r2
 800bed4:	f7fe f8f2 	bl	800a0bc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bed8:	2301      	movs	r3, #1
 800beda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bedc:	697b      	ldr	r3, [r7, #20]
	}
 800bede:	4618      	mov	r0, r3
 800bee0:	3718      	adds	r7, #24
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop
 800bee8:	20000cb8 	.word	0x20000cb8
 800beec:	20000cbc 	.word	0x20000cbc
 800bef0:	20000dc0 	.word	0x20000dc0

0800bef4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b088      	sub	sp, #32
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bf02:	2301      	movs	r3, #1
 800bf04:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	f000 8088 	beq.w	800c01e <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bf0e:	69bb      	ldr	r3, [r7, #24]
 800bf10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d10a      	bne.n	800bf2c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800bf16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf1a:	f383 8811 	msr	BASEPRI, r3
 800bf1e:	f3bf 8f6f 	isb	sy
 800bf22:	f3bf 8f4f 	dsb	sy
 800bf26:	60fb      	str	r3, [r7, #12]
}
 800bf28:	bf00      	nop
 800bf2a:	e7fe      	b.n	800bf2a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bf2c:	69bb      	ldr	r3, [r7, #24]
 800bf2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf30:	683a      	ldr	r2, [r7, #0]
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d902      	bls.n	800bf3c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	61fb      	str	r3, [r7, #28]
 800bf3a:	e002      	b.n	800bf42 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bf3c:	69bb      	ldr	r3, [r7, #24]
 800bf3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf40:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bf42:	69bb      	ldr	r3, [r7, #24]
 800bf44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf46:	69fa      	ldr	r2, [r7, #28]
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d068      	beq.n	800c01e <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bf4c:	69bb      	ldr	r3, [r7, #24]
 800bf4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf50:	697a      	ldr	r2, [r7, #20]
 800bf52:	429a      	cmp	r2, r3
 800bf54:	d163      	bne.n	800c01e <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bf56:	4b34      	ldr	r3, [pc, #208]	; (800c028 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	69ba      	ldr	r2, [r7, #24]
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	d10a      	bne.n	800bf76 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800bf60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf64:	f383 8811 	msr	BASEPRI, r3
 800bf68:	f3bf 8f6f 	isb	sy
 800bf6c:	f3bf 8f4f 	dsb	sy
 800bf70:	60bb      	str	r3, [r7, #8]
}
 800bf72:	bf00      	nop
 800bf74:	e7fe      	b.n	800bf74 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bf76:	69bb      	ldr	r3, [r7, #24]
 800bf78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf7a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bf7c:	69bb      	ldr	r3, [r7, #24]
 800bf7e:	69fa      	ldr	r2, [r7, #28]
 800bf80:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bf82:	69bb      	ldr	r3, [r7, #24]
 800bf84:	699b      	ldr	r3, [r3, #24]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	db04      	blt.n	800bf94 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf8a:	69fb      	ldr	r3, [r7, #28]
 800bf8c:	f1c3 0207 	rsb	r2, r3, #7
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bf94:	69bb      	ldr	r3, [r7, #24]
 800bf96:	6959      	ldr	r1, [r3, #20]
 800bf98:	693a      	ldr	r2, [r7, #16]
 800bf9a:	4613      	mov	r3, r2
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	4413      	add	r3, r2
 800bfa0:	009b      	lsls	r3, r3, #2
 800bfa2:	4a22      	ldr	r2, [pc, #136]	; (800c02c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800bfa4:	4413      	add	r3, r2
 800bfa6:	4299      	cmp	r1, r3
 800bfa8:	d101      	bne.n	800bfae <vTaskPriorityDisinheritAfterTimeout+0xba>
 800bfaa:	2301      	movs	r3, #1
 800bfac:	e000      	b.n	800bfb0 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800bfae:	2300      	movs	r3, #0
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d034      	beq.n	800c01e <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bfb4:	69bb      	ldr	r3, [r7, #24]
 800bfb6:	3304      	adds	r3, #4
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f7fe f8da 	bl	800a172 <uxListRemove>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d115      	bne.n	800bff0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bfc4:	69bb      	ldr	r3, [r7, #24]
 800bfc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfc8:	4918      	ldr	r1, [pc, #96]	; (800c02c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800bfca:	4613      	mov	r3, r2
 800bfcc:	009b      	lsls	r3, r3, #2
 800bfce:	4413      	add	r3, r2
 800bfd0:	009b      	lsls	r3, r3, #2
 800bfd2:	440b      	add	r3, r1
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d10a      	bne.n	800bff0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800bfda:	69bb      	ldr	r3, [r7, #24]
 800bfdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfde:	2201      	movs	r2, #1
 800bfe0:	fa02 f303 	lsl.w	r3, r2, r3
 800bfe4:	43da      	mvns	r2, r3
 800bfe6:	4b12      	ldr	r3, [pc, #72]	; (800c030 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	4013      	ands	r3, r2
 800bfec:	4a10      	ldr	r2, [pc, #64]	; (800c030 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800bfee:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bff0:	69bb      	ldr	r3, [r7, #24]
 800bff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bff4:	2201      	movs	r2, #1
 800bff6:	409a      	lsls	r2, r3
 800bff8:	4b0d      	ldr	r3, [pc, #52]	; (800c030 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	4313      	orrs	r3, r2
 800bffe:	4a0c      	ldr	r2, [pc, #48]	; (800c030 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800c000:	6013      	str	r3, [r2, #0]
 800c002:	69bb      	ldr	r3, [r7, #24]
 800c004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c006:	4613      	mov	r3, r2
 800c008:	009b      	lsls	r3, r3, #2
 800c00a:	4413      	add	r3, r2
 800c00c:	009b      	lsls	r3, r3, #2
 800c00e:	4a07      	ldr	r2, [pc, #28]	; (800c02c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c010:	441a      	add	r2, r3
 800c012:	69bb      	ldr	r3, [r7, #24]
 800c014:	3304      	adds	r3, #4
 800c016:	4619      	mov	r1, r3
 800c018:	4610      	mov	r0, r2
 800c01a:	f7fe f84f 	bl	800a0bc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c01e:	bf00      	nop
 800c020:	3720      	adds	r7, #32
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}
 800c026:	bf00      	nop
 800c028:	20000cb8 	.word	0x20000cb8
 800c02c:	20000cbc 	.word	0x20000cbc
 800c030:	20000dc0 	.word	0x20000dc0

0800c034 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800c034:	b480      	push	{r7}
 800c036:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c038:	4b07      	ldr	r3, [pc, #28]	; (800c058 <pvTaskIncrementMutexHeldCount+0x24>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d004      	beq.n	800c04a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c040:	4b05      	ldr	r3, [pc, #20]	; (800c058 <pvTaskIncrementMutexHeldCount+0x24>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c046:	3201      	adds	r2, #1
 800c048:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c04a:	4b03      	ldr	r3, [pc, #12]	; (800c058 <pvTaskIncrementMutexHeldCount+0x24>)
 800c04c:	681b      	ldr	r3, [r3, #0]
	}
 800c04e:	4618      	mov	r0, r3
 800c050:	46bd      	mov	sp, r7
 800c052:	bc80      	pop	{r7}
 800c054:	4770      	bx	lr
 800c056:	bf00      	nop
 800c058:	20000cb8 	.word	0x20000cb8

0800c05c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b084      	sub	sp, #16
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
 800c064:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c066:	4b29      	ldr	r3, [pc, #164]	; (800c10c <prvAddCurrentTaskToDelayedList+0xb0>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c06c:	4b28      	ldr	r3, [pc, #160]	; (800c110 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	3304      	adds	r3, #4
 800c072:	4618      	mov	r0, r3
 800c074:	f7fe f87d 	bl	800a172 <uxListRemove>
 800c078:	4603      	mov	r3, r0
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d10b      	bne.n	800c096 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800c07e:	4b24      	ldr	r3, [pc, #144]	; (800c110 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c084:	2201      	movs	r2, #1
 800c086:	fa02 f303 	lsl.w	r3, r2, r3
 800c08a:	43da      	mvns	r2, r3
 800c08c:	4b21      	ldr	r3, [pc, #132]	; (800c114 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	4013      	ands	r3, r2
 800c092:	4a20      	ldr	r2, [pc, #128]	; (800c114 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c094:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c09c:	d10a      	bne.n	800c0b4 <prvAddCurrentTaskToDelayedList+0x58>
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d007      	beq.n	800c0b4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0a4:	4b1a      	ldr	r3, [pc, #104]	; (800c110 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	3304      	adds	r3, #4
 800c0aa:	4619      	mov	r1, r3
 800c0ac:	481a      	ldr	r0, [pc, #104]	; (800c118 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c0ae:	f7fe f805 	bl	800a0bc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c0b2:	e026      	b.n	800c102 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c0b4:	68fa      	ldr	r2, [r7, #12]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	4413      	add	r3, r2
 800c0ba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c0bc:	4b14      	ldr	r3, [pc, #80]	; (800c110 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	68ba      	ldr	r2, [r7, #8]
 800c0c2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c0c4:	68ba      	ldr	r2, [r7, #8]
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d209      	bcs.n	800c0e0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0cc:	4b13      	ldr	r3, [pc, #76]	; (800c11c <prvAddCurrentTaskToDelayedList+0xc0>)
 800c0ce:	681a      	ldr	r2, [r3, #0]
 800c0d0:	4b0f      	ldr	r3, [pc, #60]	; (800c110 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	3304      	adds	r3, #4
 800c0d6:	4619      	mov	r1, r3
 800c0d8:	4610      	mov	r0, r2
 800c0da:	f7fe f812 	bl	800a102 <vListInsert>
}
 800c0de:	e010      	b.n	800c102 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0e0:	4b0f      	ldr	r3, [pc, #60]	; (800c120 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c0e2:	681a      	ldr	r2, [r3, #0]
 800c0e4:	4b0a      	ldr	r3, [pc, #40]	; (800c110 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	3304      	adds	r3, #4
 800c0ea:	4619      	mov	r1, r3
 800c0ec:	4610      	mov	r0, r2
 800c0ee:	f7fe f808 	bl	800a102 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c0f2:	4b0c      	ldr	r3, [pc, #48]	; (800c124 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	68ba      	ldr	r2, [r7, #8]
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	d202      	bcs.n	800c102 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c0fc:	4a09      	ldr	r2, [pc, #36]	; (800c124 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	6013      	str	r3, [r2, #0]
}
 800c102:	bf00      	nop
 800c104:	3710      	adds	r7, #16
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}
 800c10a:	bf00      	nop
 800c10c:	20000dbc 	.word	0x20000dbc
 800c110:	20000cb8 	.word	0x20000cb8
 800c114:	20000dc0 	.word	0x20000dc0
 800c118:	20000da4 	.word	0x20000da4
 800c11c:	20000d74 	.word	0x20000d74
 800c120:	20000d70 	.word	0x20000d70
 800c124:	20000dd8 	.word	0x20000dd8

0800c128 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b08a      	sub	sp, #40	; 0x28
 800c12c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c12e:	2300      	movs	r3, #0
 800c130:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c132:	f000 fb41 	bl	800c7b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c136:	4b1c      	ldr	r3, [pc, #112]	; (800c1a8 <xTimerCreateTimerTask+0x80>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d021      	beq.n	800c182 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c13e:	2300      	movs	r3, #0
 800c140:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c142:	2300      	movs	r3, #0
 800c144:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c146:	1d3a      	adds	r2, r7, #4
 800c148:	f107 0108 	add.w	r1, r7, #8
 800c14c:	f107 030c 	add.w	r3, r7, #12
 800c150:	4618      	mov	r0, r3
 800c152:	f7f8 f807 	bl	8004164 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c156:	6879      	ldr	r1, [r7, #4]
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	68fa      	ldr	r2, [r7, #12]
 800c15c:	9202      	str	r2, [sp, #8]
 800c15e:	9301      	str	r3, [sp, #4]
 800c160:	2302      	movs	r3, #2
 800c162:	9300      	str	r3, [sp, #0]
 800c164:	2300      	movs	r3, #0
 800c166:	460a      	mov	r2, r1
 800c168:	4910      	ldr	r1, [pc, #64]	; (800c1ac <xTimerCreateTimerTask+0x84>)
 800c16a:	4811      	ldr	r0, [pc, #68]	; (800c1b0 <xTimerCreateTimerTask+0x88>)
 800c16c:	f7fe ff7a 	bl	800b064 <xTaskCreateStatic>
 800c170:	4603      	mov	r3, r0
 800c172:	4a10      	ldr	r2, [pc, #64]	; (800c1b4 <xTimerCreateTimerTask+0x8c>)
 800c174:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c176:	4b0f      	ldr	r3, [pc, #60]	; (800c1b4 <xTimerCreateTimerTask+0x8c>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d001      	beq.n	800c182 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c17e:	2301      	movs	r3, #1
 800c180:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d10a      	bne.n	800c19e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18c:	f383 8811 	msr	BASEPRI, r3
 800c190:	f3bf 8f6f 	isb	sy
 800c194:	f3bf 8f4f 	dsb	sy
 800c198:	613b      	str	r3, [r7, #16]
}
 800c19a:	bf00      	nop
 800c19c:	e7fe      	b.n	800c19c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c19e:	697b      	ldr	r3, [r7, #20]
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3718      	adds	r7, #24
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}
 800c1a8:	20000e14 	.word	0x20000e14
 800c1ac:	0800f224 	.word	0x0800f224
 800c1b0:	0800c3f5 	.word	0x0800c3f5
 800c1b4:	20000e18 	.word	0x20000e18

0800c1b8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b088      	sub	sp, #32
 800c1bc:	af02      	add	r7, sp, #8
 800c1be:	60f8      	str	r0, [r7, #12]
 800c1c0:	60b9      	str	r1, [r7, #8]
 800c1c2:	607a      	str	r2, [r7, #4]
 800c1c4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800c1c6:	202c      	movs	r0, #44	; 0x2c
 800c1c8:	f000 fd28 	bl	800cc1c <pvPortMalloc>
 800c1cc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d00d      	beq.n	800c1f0 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	9301      	str	r3, [sp, #4]
 800c1d8:	6a3b      	ldr	r3, [r7, #32]
 800c1da:	9300      	str	r3, [sp, #0]
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	687a      	ldr	r2, [r7, #4]
 800c1e0:	68b9      	ldr	r1, [r7, #8]
 800c1e2:	68f8      	ldr	r0, [r7, #12]
 800c1e4:	f000 f846 	bl	800c274 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800c1f0:	697b      	ldr	r3, [r7, #20]
	}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3718      	adds	r7, #24
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}

0800c1fa <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800c1fa:	b580      	push	{r7, lr}
 800c1fc:	b08a      	sub	sp, #40	; 0x28
 800c1fe:	af02      	add	r7, sp, #8
 800c200:	60f8      	str	r0, [r7, #12]
 800c202:	60b9      	str	r1, [r7, #8]
 800c204:	607a      	str	r2, [r7, #4]
 800c206:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800c208:	232c      	movs	r3, #44	; 0x2c
 800c20a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	2b2c      	cmp	r3, #44	; 0x2c
 800c210:	d00a      	beq.n	800c228 <xTimerCreateStatic+0x2e>
	__asm volatile
 800c212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c216:	f383 8811 	msr	BASEPRI, r3
 800c21a:	f3bf 8f6f 	isb	sy
 800c21e:	f3bf 8f4f 	dsb	sy
 800c222:	61bb      	str	r3, [r7, #24]
}
 800c224:	bf00      	nop
 800c226:	e7fe      	b.n	800c226 <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800c228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d10a      	bne.n	800c244 <xTimerCreateStatic+0x4a>
	__asm volatile
 800c22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c232:	f383 8811 	msr	BASEPRI, r3
 800c236:	f3bf 8f6f 	isb	sy
 800c23a:	f3bf 8f4f 	dsb	sy
 800c23e:	617b      	str	r3, [r7, #20]
}
 800c240:	bf00      	nop
 800c242:	e7fe      	b.n	800c242 <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c246:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800c248:	69fb      	ldr	r3, [r7, #28]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d00d      	beq.n	800c26a <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c24e:	69fb      	ldr	r3, [r7, #28]
 800c250:	9301      	str	r3, [sp, #4]
 800c252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c254:	9300      	str	r3, [sp, #0]
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	687a      	ldr	r2, [r7, #4]
 800c25a:	68b9      	ldr	r1, [r7, #8]
 800c25c:	68f8      	ldr	r0, [r7, #12]
 800c25e:	f000 f809 	bl	800c274 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800c262:	69fb      	ldr	r3, [r7, #28]
 800c264:	2201      	movs	r2, #1
 800c266:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800c26a:	69fb      	ldr	r3, [r7, #28]
	}
 800c26c:	4618      	mov	r0, r3
 800c26e:	3720      	adds	r7, #32
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}

0800c274 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b086      	sub	sp, #24
 800c278:	af00      	add	r7, sp, #0
 800c27a:	60f8      	str	r0, [r7, #12]
 800c27c:	60b9      	str	r1, [r7, #8]
 800c27e:	607a      	str	r2, [r7, #4]
 800c280:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d10a      	bne.n	800c29e <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800c288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c28c:	f383 8811 	msr	BASEPRI, r3
 800c290:	f3bf 8f6f 	isb	sy
 800c294:	f3bf 8f4f 	dsb	sy
 800c298:	617b      	str	r3, [r7, #20]
}
 800c29a:	bf00      	nop
 800c29c:	e7fe      	b.n	800c29c <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800c29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d015      	beq.n	800c2d0 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c2a4:	f000 fa88 	bl	800c7b8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2aa:	68fa      	ldr	r2, [r7, #12]
 800c2ac:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b0:	68ba      	ldr	r2, [r7, #8]
 800c2b2:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800c2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800c2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2bc:	683a      	ldr	r2, [r7, #0]
 800c2be:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c2:	6a3a      	ldr	r2, [r7, #32]
 800c2c4:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c8:	3304      	adds	r3, #4
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7fd feea 	bl	800a0a4 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c2d0:	bf00      	nop
 800c2d2:	3718      	adds	r7, #24
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}

0800c2d8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b08a      	sub	sp, #40	; 0x28
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	60f8      	str	r0, [r7, #12]
 800c2e0:	60b9      	str	r1, [r7, #8]
 800c2e2:	607a      	str	r2, [r7, #4]
 800c2e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d10a      	bne.n	800c306 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f4:	f383 8811 	msr	BASEPRI, r3
 800c2f8:	f3bf 8f6f 	isb	sy
 800c2fc:	f3bf 8f4f 	dsb	sy
 800c300:	623b      	str	r3, [r7, #32]
}
 800c302:	bf00      	nop
 800c304:	e7fe      	b.n	800c304 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c306:	4b1a      	ldr	r3, [pc, #104]	; (800c370 <xTimerGenericCommand+0x98>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d02a      	beq.n	800c364 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	2b05      	cmp	r3, #5
 800c31e:	dc18      	bgt.n	800c352 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c320:	f7ff fcbe 	bl	800bca0 <xTaskGetSchedulerState>
 800c324:	4603      	mov	r3, r0
 800c326:	2b02      	cmp	r3, #2
 800c328:	d109      	bne.n	800c33e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c32a:	4b11      	ldr	r3, [pc, #68]	; (800c370 <xTimerGenericCommand+0x98>)
 800c32c:	6818      	ldr	r0, [r3, #0]
 800c32e:	f107 0114 	add.w	r1, r7, #20
 800c332:	2300      	movs	r3, #0
 800c334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c336:	f7fe f881 	bl	800a43c <xQueueGenericSend>
 800c33a:	6278      	str	r0, [r7, #36]	; 0x24
 800c33c:	e012      	b.n	800c364 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c33e:	4b0c      	ldr	r3, [pc, #48]	; (800c370 <xTimerGenericCommand+0x98>)
 800c340:	6818      	ldr	r0, [r3, #0]
 800c342:	f107 0114 	add.w	r1, r7, #20
 800c346:	2300      	movs	r3, #0
 800c348:	2200      	movs	r2, #0
 800c34a:	f7fe f877 	bl	800a43c <xQueueGenericSend>
 800c34e:	6278      	str	r0, [r7, #36]	; 0x24
 800c350:	e008      	b.n	800c364 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c352:	4b07      	ldr	r3, [pc, #28]	; (800c370 <xTimerGenericCommand+0x98>)
 800c354:	6818      	ldr	r0, [r3, #0]
 800c356:	f107 0114 	add.w	r1, r7, #20
 800c35a:	2300      	movs	r3, #0
 800c35c:	683a      	ldr	r2, [r7, #0]
 800c35e:	f7fe f96b 	bl	800a638 <xQueueGenericSendFromISR>
 800c362:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c366:	4618      	mov	r0, r3
 800c368:	3728      	adds	r7, #40	; 0x28
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}
 800c36e:	bf00      	nop
 800c370:	20000e14 	.word	0x20000e14

0800c374 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b088      	sub	sp, #32
 800c378:	af02      	add	r7, sp, #8
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c37e:	4b1c      	ldr	r3, [pc, #112]	; (800c3f0 <prvProcessExpiredTimer+0x7c>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	68db      	ldr	r3, [r3, #12]
 800c384:	68db      	ldr	r3, [r3, #12]
 800c386:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	3304      	adds	r3, #4
 800c38c:	4618      	mov	r0, r3
 800c38e:	f7fd fef0 	bl	800a172 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	69db      	ldr	r3, [r3, #28]
 800c396:	2b01      	cmp	r3, #1
 800c398:	d122      	bne.n	800c3e0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	699a      	ldr	r2, [r3, #24]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	18d1      	adds	r1, r2, r3
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	683a      	ldr	r2, [r7, #0]
 800c3a6:	6978      	ldr	r0, [r7, #20]
 800c3a8:	f000 f8c8 	bl	800c53c <prvInsertTimerInActiveList>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d016      	beq.n	800c3e0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	9300      	str	r3, [sp, #0]
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	687a      	ldr	r2, [r7, #4]
 800c3ba:	2100      	movs	r1, #0
 800c3bc:	6978      	ldr	r0, [r7, #20]
 800c3be:	f7ff ff8b 	bl	800c2d8 <xTimerGenericCommand>
 800c3c2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d10a      	bne.n	800c3e0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800c3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ce:	f383 8811 	msr	BASEPRI, r3
 800c3d2:	f3bf 8f6f 	isb	sy
 800c3d6:	f3bf 8f4f 	dsb	sy
 800c3da:	60fb      	str	r3, [r7, #12]
}
 800c3dc:	bf00      	nop
 800c3de:	e7fe      	b.n	800c3de <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3e4:	6978      	ldr	r0, [r7, #20]
 800c3e6:	4798      	blx	r3
}
 800c3e8:	bf00      	nop
 800c3ea:	3718      	adds	r7, #24
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}
 800c3f0:	20000e0c 	.word	0x20000e0c

0800c3f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b084      	sub	sp, #16
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c3fc:	f107 0308 	add.w	r3, r7, #8
 800c400:	4618      	mov	r0, r3
 800c402:	f000 f857 	bl	800c4b4 <prvGetNextExpireTime>
 800c406:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	4619      	mov	r1, r3
 800c40c:	68f8      	ldr	r0, [r7, #12]
 800c40e:	f000 f803 	bl	800c418 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c412:	f000 f8d5 	bl	800c5c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c416:	e7f1      	b.n	800c3fc <prvTimerTask+0x8>

0800c418 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b084      	sub	sp, #16
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c422:	f7ff f84b 	bl	800b4bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c426:	f107 0308 	add.w	r3, r7, #8
 800c42a:	4618      	mov	r0, r3
 800c42c:	f000 f866 	bl	800c4fc <prvSampleTimeNow>
 800c430:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d130      	bne.n	800c49a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d10a      	bne.n	800c454 <prvProcessTimerOrBlockTask+0x3c>
 800c43e:	687a      	ldr	r2, [r7, #4]
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	429a      	cmp	r2, r3
 800c444:	d806      	bhi.n	800c454 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c446:	f7ff f847 	bl	800b4d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c44a:	68f9      	ldr	r1, [r7, #12]
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f7ff ff91 	bl	800c374 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c452:	e024      	b.n	800c49e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d008      	beq.n	800c46c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c45a:	4b13      	ldr	r3, [pc, #76]	; (800c4a8 <prvProcessTimerOrBlockTask+0x90>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	2b00      	cmp	r3, #0
 800c462:	bf0c      	ite	eq
 800c464:	2301      	moveq	r3, #1
 800c466:	2300      	movne	r3, #0
 800c468:	b2db      	uxtb	r3, r3
 800c46a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c46c:	4b0f      	ldr	r3, [pc, #60]	; (800c4ac <prvProcessTimerOrBlockTask+0x94>)
 800c46e:	6818      	ldr	r0, [r3, #0]
 800c470:	687a      	ldr	r2, [r7, #4]
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	1ad3      	subs	r3, r2, r3
 800c476:	683a      	ldr	r2, [r7, #0]
 800c478:	4619      	mov	r1, r3
 800c47a:	f7fe fdbf 	bl	800affc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c47e:	f7ff f82b 	bl	800b4d8 <xTaskResumeAll>
 800c482:	4603      	mov	r3, r0
 800c484:	2b00      	cmp	r3, #0
 800c486:	d10a      	bne.n	800c49e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c488:	4b09      	ldr	r3, [pc, #36]	; (800c4b0 <prvProcessTimerOrBlockTask+0x98>)
 800c48a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c48e:	601a      	str	r2, [r3, #0]
 800c490:	f3bf 8f4f 	dsb	sy
 800c494:	f3bf 8f6f 	isb	sy
}
 800c498:	e001      	b.n	800c49e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c49a:	f7ff f81d 	bl	800b4d8 <xTaskResumeAll>
}
 800c49e:	bf00      	nop
 800c4a0:	3710      	adds	r7, #16
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}
 800c4a6:	bf00      	nop
 800c4a8:	20000e10 	.word	0x20000e10
 800c4ac:	20000e14 	.word	0x20000e14
 800c4b0:	e000ed04 	.word	0xe000ed04

0800c4b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b085      	sub	sp, #20
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c4bc:	4b0e      	ldr	r3, [pc, #56]	; (800c4f8 <prvGetNextExpireTime+0x44>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	bf0c      	ite	eq
 800c4c6:	2301      	moveq	r3, #1
 800c4c8:	2300      	movne	r3, #0
 800c4ca:	b2db      	uxtb	r3, r3
 800c4cc:	461a      	mov	r2, r3
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d105      	bne.n	800c4e6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c4da:	4b07      	ldr	r3, [pc, #28]	; (800c4f8 <prvGetNextExpireTime+0x44>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	68db      	ldr	r3, [r3, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	60fb      	str	r3, [r7, #12]
 800c4e4:	e001      	b.n	800c4ea <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3714      	adds	r7, #20
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bc80      	pop	{r7}
 800c4f4:	4770      	bx	lr
 800c4f6:	bf00      	nop
 800c4f8:	20000e0c 	.word	0x20000e0c

0800c4fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b084      	sub	sp, #16
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c504:	f7ff f884 	bl	800b610 <xTaskGetTickCount>
 800c508:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c50a:	4b0b      	ldr	r3, [pc, #44]	; (800c538 <prvSampleTimeNow+0x3c>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	68fa      	ldr	r2, [r7, #12]
 800c510:	429a      	cmp	r2, r3
 800c512:	d205      	bcs.n	800c520 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c514:	f000 f8ee 	bl	800c6f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2201      	movs	r2, #1
 800c51c:	601a      	str	r2, [r3, #0]
 800c51e:	e002      	b.n	800c526 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2200      	movs	r2, #0
 800c524:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c526:	4a04      	ldr	r2, [pc, #16]	; (800c538 <prvSampleTimeNow+0x3c>)
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c52c:	68fb      	ldr	r3, [r7, #12]
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3710      	adds	r7, #16
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}
 800c536:	bf00      	nop
 800c538:	20000e1c 	.word	0x20000e1c

0800c53c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b086      	sub	sp, #24
 800c540:	af00      	add	r7, sp, #0
 800c542:	60f8      	str	r0, [r7, #12]
 800c544:	60b9      	str	r1, [r7, #8]
 800c546:	607a      	str	r2, [r7, #4]
 800c548:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c54a:	2300      	movs	r3, #0
 800c54c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	68ba      	ldr	r2, [r7, #8]
 800c552:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	68fa      	ldr	r2, [r7, #12]
 800c558:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c55a:	68ba      	ldr	r2, [r7, #8]
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	429a      	cmp	r2, r3
 800c560:	d812      	bhi.n	800c588 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c562:	687a      	ldr	r2, [r7, #4]
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	1ad2      	subs	r2, r2, r3
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	699b      	ldr	r3, [r3, #24]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d302      	bcc.n	800c576 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c570:	2301      	movs	r3, #1
 800c572:	617b      	str	r3, [r7, #20]
 800c574:	e01b      	b.n	800c5ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c576:	4b10      	ldr	r3, [pc, #64]	; (800c5b8 <prvInsertTimerInActiveList+0x7c>)
 800c578:	681a      	ldr	r2, [r3, #0]
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	3304      	adds	r3, #4
 800c57e:	4619      	mov	r1, r3
 800c580:	4610      	mov	r0, r2
 800c582:	f7fd fdbe 	bl	800a102 <vListInsert>
 800c586:	e012      	b.n	800c5ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c588:	687a      	ldr	r2, [r7, #4]
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d206      	bcs.n	800c59e <prvInsertTimerInActiveList+0x62>
 800c590:	68ba      	ldr	r2, [r7, #8]
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	429a      	cmp	r2, r3
 800c596:	d302      	bcc.n	800c59e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c598:	2301      	movs	r3, #1
 800c59a:	617b      	str	r3, [r7, #20]
 800c59c:	e007      	b.n	800c5ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c59e:	4b07      	ldr	r3, [pc, #28]	; (800c5bc <prvInsertTimerInActiveList+0x80>)
 800c5a0:	681a      	ldr	r2, [r3, #0]
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	3304      	adds	r3, #4
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	4610      	mov	r0, r2
 800c5aa:	f7fd fdaa 	bl	800a102 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c5ae:	697b      	ldr	r3, [r7, #20]
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3718      	adds	r7, #24
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}
 800c5b8:	20000e10 	.word	0x20000e10
 800c5bc:	20000e0c 	.word	0x20000e0c

0800c5c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b08c      	sub	sp, #48	; 0x30
 800c5c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c5c6:	e081      	b.n	800c6cc <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	db7d      	blt.n	800c6ca <prvProcessReceivedCommands+0x10a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d4:	695b      	ldr	r3, [r3, #20]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d004      	beq.n	800c5e4 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5dc:	3304      	adds	r3, #4
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f7fd fdc7 	bl	800a172 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c5e4:	1d3b      	adds	r3, r7, #4
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f7ff ff88 	bl	800c4fc <prvSampleTimeNow>
 800c5ec:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	2b09      	cmp	r3, #9
 800c5f2:	d86b      	bhi.n	800c6cc <prvProcessReceivedCommands+0x10c>
 800c5f4:	a201      	add	r2, pc, #4	; (adr r2, 800c5fc <prvProcessReceivedCommands+0x3c>)
 800c5f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5fa:	bf00      	nop
 800c5fc:	0800c625 	.word	0x0800c625
 800c600:	0800c625 	.word	0x0800c625
 800c604:	0800c625 	.word	0x0800c625
 800c608:	0800c6cd 	.word	0x0800c6cd
 800c60c:	0800c681 	.word	0x0800c681
 800c610:	0800c6b9 	.word	0x0800c6b9
 800c614:	0800c625 	.word	0x0800c625
 800c618:	0800c625 	.word	0x0800c625
 800c61c:	0800c6cd 	.word	0x0800c6cd
 800c620:	0800c681 	.word	0x0800c681
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c624:	68fa      	ldr	r2, [r7, #12]
 800c626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c628:	699b      	ldr	r3, [r3, #24]
 800c62a:	18d1      	adds	r1, r2, r3
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	6a3a      	ldr	r2, [r7, #32]
 800c630:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c632:	f7ff ff83 	bl	800c53c <prvInsertTimerInActiveList>
 800c636:	4603      	mov	r3, r0
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d047      	beq.n	800c6cc <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c640:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c642:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c646:	69db      	ldr	r3, [r3, #28]
 800c648:	2b01      	cmp	r3, #1
 800c64a:	d13f      	bne.n	800c6cc <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c64c:	68fa      	ldr	r2, [r7, #12]
 800c64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c650:	699b      	ldr	r3, [r3, #24]
 800c652:	441a      	add	r2, r3
 800c654:	2300      	movs	r3, #0
 800c656:	9300      	str	r3, [sp, #0]
 800c658:	2300      	movs	r3, #0
 800c65a:	2100      	movs	r1, #0
 800c65c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c65e:	f7ff fe3b 	bl	800c2d8 <xTimerGenericCommand>
 800c662:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800c664:	69fb      	ldr	r3, [r7, #28]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d130      	bne.n	800c6cc <prvProcessReceivedCommands+0x10c>
	__asm volatile
 800c66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c66e:	f383 8811 	msr	BASEPRI, r3
 800c672:	f3bf 8f6f 	isb	sy
 800c676:	f3bf 8f4f 	dsb	sy
 800c67a:	61bb      	str	r3, [r7, #24]
}
 800c67c:	bf00      	nop
 800c67e:	e7fe      	b.n	800c67e <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c680:	68fa      	ldr	r2, [r7, #12]
 800c682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c684:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c688:	699b      	ldr	r3, [r3, #24]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d10a      	bne.n	800c6a4 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800c68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c692:	f383 8811 	msr	BASEPRI, r3
 800c696:	f3bf 8f6f 	isb	sy
 800c69a:	f3bf 8f4f 	dsb	sy
 800c69e:	617b      	str	r3, [r7, #20]
}
 800c6a0:	bf00      	nop
 800c6a2:	e7fe      	b.n	800c6a2 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a6:	699a      	ldr	r2, [r3, #24]
 800c6a8:	6a3b      	ldr	r3, [r7, #32]
 800c6aa:	18d1      	adds	r1, r2, r3
 800c6ac:	6a3b      	ldr	r3, [r7, #32]
 800c6ae:	6a3a      	ldr	r2, [r7, #32]
 800c6b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c6b2:	f7ff ff43 	bl	800c53c <prvInsertTimerInActiveList>
					break;
 800c6b6:	e009      	b.n	800c6cc <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d104      	bne.n	800c6cc <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 800c6c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c6c4:	f000 fb6e 	bl	800cda4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c6c8:	e000      	b.n	800c6cc <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c6ca:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c6cc:	4b08      	ldr	r3, [pc, #32]	; (800c6f0 <prvProcessReceivedCommands+0x130>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	f107 0108 	add.w	r1, r7, #8
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f7fe f8d4 	bl	800a884 <xQueueReceive>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	f47f af72 	bne.w	800c5c8 <prvProcessReceivedCommands+0x8>
	}
}
 800c6e4:	bf00      	nop
 800c6e6:	bf00      	nop
 800c6e8:	3728      	adds	r7, #40	; 0x28
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
 800c6ee:	bf00      	nop
 800c6f0:	20000e14 	.word	0x20000e14

0800c6f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b088      	sub	sp, #32
 800c6f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c6fa:	e045      	b.n	800c788 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c6fc:	4b2c      	ldr	r3, [pc, #176]	; (800c7b0 <prvSwitchTimerLists+0xbc>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	68db      	ldr	r3, [r3, #12]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c706:	4b2a      	ldr	r3, [pc, #168]	; (800c7b0 <prvSwitchTimerLists+0xbc>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	68db      	ldr	r3, [r3, #12]
 800c70c:	68db      	ldr	r3, [r3, #12]
 800c70e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	3304      	adds	r3, #4
 800c714:	4618      	mov	r0, r3
 800c716:	f7fd fd2c 	bl	800a172 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c71e:	68f8      	ldr	r0, [r7, #12]
 800c720:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	69db      	ldr	r3, [r3, #28]
 800c726:	2b01      	cmp	r3, #1
 800c728:	d12e      	bne.n	800c788 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	699b      	ldr	r3, [r3, #24]
 800c72e:	693a      	ldr	r2, [r7, #16]
 800c730:	4413      	add	r3, r2
 800c732:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c734:	68ba      	ldr	r2, [r7, #8]
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	429a      	cmp	r2, r3
 800c73a:	d90e      	bls.n	800c75a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	68ba      	ldr	r2, [r7, #8]
 800c740:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	68fa      	ldr	r2, [r7, #12]
 800c746:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c748:	4b19      	ldr	r3, [pc, #100]	; (800c7b0 <prvSwitchTimerLists+0xbc>)
 800c74a:	681a      	ldr	r2, [r3, #0]
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	3304      	adds	r3, #4
 800c750:	4619      	mov	r1, r3
 800c752:	4610      	mov	r0, r2
 800c754:	f7fd fcd5 	bl	800a102 <vListInsert>
 800c758:	e016      	b.n	800c788 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c75a:	2300      	movs	r3, #0
 800c75c:	9300      	str	r3, [sp, #0]
 800c75e:	2300      	movs	r3, #0
 800c760:	693a      	ldr	r2, [r7, #16]
 800c762:	2100      	movs	r1, #0
 800c764:	68f8      	ldr	r0, [r7, #12]
 800c766:	f7ff fdb7 	bl	800c2d8 <xTimerGenericCommand>
 800c76a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d10a      	bne.n	800c788 <prvSwitchTimerLists+0x94>
	__asm volatile
 800c772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c776:	f383 8811 	msr	BASEPRI, r3
 800c77a:	f3bf 8f6f 	isb	sy
 800c77e:	f3bf 8f4f 	dsb	sy
 800c782:	603b      	str	r3, [r7, #0]
}
 800c784:	bf00      	nop
 800c786:	e7fe      	b.n	800c786 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c788:	4b09      	ldr	r3, [pc, #36]	; (800c7b0 <prvSwitchTimerLists+0xbc>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d1b4      	bne.n	800c6fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c792:	4b07      	ldr	r3, [pc, #28]	; (800c7b0 <prvSwitchTimerLists+0xbc>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c798:	4b06      	ldr	r3, [pc, #24]	; (800c7b4 <prvSwitchTimerLists+0xc0>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	4a04      	ldr	r2, [pc, #16]	; (800c7b0 <prvSwitchTimerLists+0xbc>)
 800c79e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c7a0:	4a04      	ldr	r2, [pc, #16]	; (800c7b4 <prvSwitchTimerLists+0xc0>)
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	6013      	str	r3, [r2, #0]
}
 800c7a6:	bf00      	nop
 800c7a8:	3718      	adds	r7, #24
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
 800c7ae:	bf00      	nop
 800c7b0:	20000e0c 	.word	0x20000e0c
 800c7b4:	20000e10 	.word	0x20000e10

0800c7b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b082      	sub	sp, #8
 800c7bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c7be:	f000 f92d 	bl	800ca1c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c7c2:	4b15      	ldr	r3, [pc, #84]	; (800c818 <prvCheckForValidListAndQueue+0x60>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d120      	bne.n	800c80c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c7ca:	4814      	ldr	r0, [pc, #80]	; (800c81c <prvCheckForValidListAndQueue+0x64>)
 800c7cc:	f7fd fc4b 	bl	800a066 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c7d0:	4813      	ldr	r0, [pc, #76]	; (800c820 <prvCheckForValidListAndQueue+0x68>)
 800c7d2:	f7fd fc48 	bl	800a066 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c7d6:	4b13      	ldr	r3, [pc, #76]	; (800c824 <prvCheckForValidListAndQueue+0x6c>)
 800c7d8:	4a10      	ldr	r2, [pc, #64]	; (800c81c <prvCheckForValidListAndQueue+0x64>)
 800c7da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c7dc:	4b12      	ldr	r3, [pc, #72]	; (800c828 <prvCheckForValidListAndQueue+0x70>)
 800c7de:	4a10      	ldr	r2, [pc, #64]	; (800c820 <prvCheckForValidListAndQueue+0x68>)
 800c7e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	9300      	str	r3, [sp, #0]
 800c7e6:	4b11      	ldr	r3, [pc, #68]	; (800c82c <prvCheckForValidListAndQueue+0x74>)
 800c7e8:	4a11      	ldr	r2, [pc, #68]	; (800c830 <prvCheckForValidListAndQueue+0x78>)
 800c7ea:	210c      	movs	r1, #12
 800c7ec:	200a      	movs	r0, #10
 800c7ee:	f7fd fd51 	bl	800a294 <xQueueGenericCreateStatic>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	4a08      	ldr	r2, [pc, #32]	; (800c818 <prvCheckForValidListAndQueue+0x60>)
 800c7f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c7f8:	4b07      	ldr	r3, [pc, #28]	; (800c818 <prvCheckForValidListAndQueue+0x60>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d005      	beq.n	800c80c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c800:	4b05      	ldr	r3, [pc, #20]	; (800c818 <prvCheckForValidListAndQueue+0x60>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	490b      	ldr	r1, [pc, #44]	; (800c834 <prvCheckForValidListAndQueue+0x7c>)
 800c806:	4618      	mov	r0, r3
 800c808:	f7fe fbd0 	bl	800afac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c80c:	f000 f936 	bl	800ca7c <vPortExitCritical>
}
 800c810:	bf00      	nop
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
 800c816:	bf00      	nop
 800c818:	20000e14 	.word	0x20000e14
 800c81c:	20000de4 	.word	0x20000de4
 800c820:	20000df8 	.word	0x20000df8
 800c824:	20000e0c 	.word	0x20000e0c
 800c828:	20000e10 	.word	0x20000e10
 800c82c:	20000e98 	.word	0x20000e98
 800c830:	20000e20 	.word	0x20000e20
 800c834:	0800f22c 	.word	0x0800f22c

0800c838 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c838:	b480      	push	{r7}
 800c83a:	b085      	sub	sp, #20
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	60f8      	str	r0, [r7, #12]
 800c840:	60b9      	str	r1, [r7, #8]
 800c842:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	3b04      	subs	r3, #4
 800c848:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c850:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	3b04      	subs	r3, #4
 800c856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	f023 0201 	bic.w	r2, r3, #1
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	3b04      	subs	r3, #4
 800c866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c868:	4a08      	ldr	r2, [pc, #32]	; (800c88c <pxPortInitialiseStack+0x54>)
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	3b14      	subs	r3, #20
 800c872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c874:	687a      	ldr	r2, [r7, #4]
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	3b20      	subs	r3, #32
 800c87e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c880:	68fb      	ldr	r3, [r7, #12]
}
 800c882:	4618      	mov	r0, r3
 800c884:	3714      	adds	r7, #20
 800c886:	46bd      	mov	sp, r7
 800c888:	bc80      	pop	{r7}
 800c88a:	4770      	bx	lr
 800c88c:	0800c891 	.word	0x0800c891

0800c890 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c890:	b480      	push	{r7}
 800c892:	b085      	sub	sp, #20
 800c894:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800c896:	2300      	movs	r3, #0
 800c898:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c89a:	4b12      	ldr	r3, [pc, #72]	; (800c8e4 <prvTaskExitError+0x54>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8a2:	d00a      	beq.n	800c8ba <prvTaskExitError+0x2a>
	__asm volatile
 800c8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8a8:	f383 8811 	msr	BASEPRI, r3
 800c8ac:	f3bf 8f6f 	isb	sy
 800c8b0:	f3bf 8f4f 	dsb	sy
 800c8b4:	60fb      	str	r3, [r7, #12]
}
 800c8b6:	bf00      	nop
 800c8b8:	e7fe      	b.n	800c8b8 <prvTaskExitError+0x28>
	__asm volatile
 800c8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8be:	f383 8811 	msr	BASEPRI, r3
 800c8c2:	f3bf 8f6f 	isb	sy
 800c8c6:	f3bf 8f4f 	dsb	sy
 800c8ca:	60bb      	str	r3, [r7, #8]
}
 800c8cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c8ce:	bf00      	nop
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d0fc      	beq.n	800c8d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c8d6:	bf00      	nop
 800c8d8:	bf00      	nop
 800c8da:	3714      	adds	r7, #20
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bc80      	pop	{r7}
 800c8e0:	4770      	bx	lr
 800c8e2:	bf00      	nop
 800c8e4:	2000003c 	.word	0x2000003c
	...

0800c8f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c8f0:	4b07      	ldr	r3, [pc, #28]	; (800c910 <pxCurrentTCBConst2>)
 800c8f2:	6819      	ldr	r1, [r3, #0]
 800c8f4:	6808      	ldr	r0, [r1, #0]
 800c8f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c8fa:	f380 8809 	msr	PSP, r0
 800c8fe:	f3bf 8f6f 	isb	sy
 800c902:	f04f 0000 	mov.w	r0, #0
 800c906:	f380 8811 	msr	BASEPRI, r0
 800c90a:	f04e 0e0d 	orr.w	lr, lr, #13
 800c90e:	4770      	bx	lr

0800c910 <pxCurrentTCBConst2>:
 800c910:	20000cb8 	.word	0x20000cb8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c914:	bf00      	nop
 800c916:	bf00      	nop

0800c918 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800c918:	4806      	ldr	r0, [pc, #24]	; (800c934 <prvPortStartFirstTask+0x1c>)
 800c91a:	6800      	ldr	r0, [r0, #0]
 800c91c:	6800      	ldr	r0, [r0, #0]
 800c91e:	f380 8808 	msr	MSP, r0
 800c922:	b662      	cpsie	i
 800c924:	b661      	cpsie	f
 800c926:	f3bf 8f4f 	dsb	sy
 800c92a:	f3bf 8f6f 	isb	sy
 800c92e:	df00      	svc	0
 800c930:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c932:	bf00      	nop
 800c934:	e000ed08 	.word	0xe000ed08

0800c938 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b084      	sub	sp, #16
 800c93c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c93e:	4b32      	ldr	r3, [pc, #200]	; (800ca08 <xPortStartScheduler+0xd0>)
 800c940:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	b2db      	uxtb	r3, r3
 800c948:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	22ff      	movs	r2, #255	; 0xff
 800c94e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	781b      	ldrb	r3, [r3, #0]
 800c954:	b2db      	uxtb	r3, r3
 800c956:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c958:	78fb      	ldrb	r3, [r7, #3]
 800c95a:	b2db      	uxtb	r3, r3
 800c95c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c960:	b2da      	uxtb	r2, r3
 800c962:	4b2a      	ldr	r3, [pc, #168]	; (800ca0c <xPortStartScheduler+0xd4>)
 800c964:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c966:	4b2a      	ldr	r3, [pc, #168]	; (800ca10 <xPortStartScheduler+0xd8>)
 800c968:	2207      	movs	r2, #7
 800c96a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c96c:	e009      	b.n	800c982 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c96e:	4b28      	ldr	r3, [pc, #160]	; (800ca10 <xPortStartScheduler+0xd8>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	3b01      	subs	r3, #1
 800c974:	4a26      	ldr	r2, [pc, #152]	; (800ca10 <xPortStartScheduler+0xd8>)
 800c976:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c978:	78fb      	ldrb	r3, [r7, #3]
 800c97a:	b2db      	uxtb	r3, r3
 800c97c:	005b      	lsls	r3, r3, #1
 800c97e:	b2db      	uxtb	r3, r3
 800c980:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c982:	78fb      	ldrb	r3, [r7, #3]
 800c984:	b2db      	uxtb	r3, r3
 800c986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c98a:	2b80      	cmp	r3, #128	; 0x80
 800c98c:	d0ef      	beq.n	800c96e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c98e:	4b20      	ldr	r3, [pc, #128]	; (800ca10 <xPortStartScheduler+0xd8>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	f1c3 0307 	rsb	r3, r3, #7
 800c996:	2b04      	cmp	r3, #4
 800c998:	d00a      	beq.n	800c9b0 <xPortStartScheduler+0x78>
	__asm volatile
 800c99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c99e:	f383 8811 	msr	BASEPRI, r3
 800c9a2:	f3bf 8f6f 	isb	sy
 800c9a6:	f3bf 8f4f 	dsb	sy
 800c9aa:	60bb      	str	r3, [r7, #8]
}
 800c9ac:	bf00      	nop
 800c9ae:	e7fe      	b.n	800c9ae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c9b0:	4b17      	ldr	r3, [pc, #92]	; (800ca10 <xPortStartScheduler+0xd8>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	021b      	lsls	r3, r3, #8
 800c9b6:	4a16      	ldr	r2, [pc, #88]	; (800ca10 <xPortStartScheduler+0xd8>)
 800c9b8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c9ba:	4b15      	ldr	r3, [pc, #84]	; (800ca10 <xPortStartScheduler+0xd8>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c9c2:	4a13      	ldr	r2, [pc, #76]	; (800ca10 <xPortStartScheduler+0xd8>)
 800c9c4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	b2da      	uxtb	r2, r3
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c9ce:	4b11      	ldr	r3, [pc, #68]	; (800ca14 <xPortStartScheduler+0xdc>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	4a10      	ldr	r2, [pc, #64]	; (800ca14 <xPortStartScheduler+0xdc>)
 800c9d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c9d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c9da:	4b0e      	ldr	r3, [pc, #56]	; (800ca14 <xPortStartScheduler+0xdc>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	4a0d      	ldr	r2, [pc, #52]	; (800ca14 <xPortStartScheduler+0xdc>)
 800c9e0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c9e4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c9e6:	f000 f8b9 	bl	800cb5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c9ea:	4b0b      	ldr	r3, [pc, #44]	; (800ca18 <xPortStartScheduler+0xe0>)
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c9f0:	f7ff ff92 	bl	800c918 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c9f4:	f7fe feea 	bl	800b7cc <vTaskSwitchContext>
	prvTaskExitError();
 800c9f8:	f7ff ff4a 	bl	800c890 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c9fc:	2300      	movs	r3, #0
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3710      	adds	r7, #16
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}
 800ca06:	bf00      	nop
 800ca08:	e000e400 	.word	0xe000e400
 800ca0c:	20000ee0 	.word	0x20000ee0
 800ca10:	20000ee4 	.word	0x20000ee4
 800ca14:	e000ed20 	.word	0xe000ed20
 800ca18:	2000003c 	.word	0x2000003c

0800ca1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b083      	sub	sp, #12
 800ca20:	af00      	add	r7, sp, #0
	__asm volatile
 800ca22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca26:	f383 8811 	msr	BASEPRI, r3
 800ca2a:	f3bf 8f6f 	isb	sy
 800ca2e:	f3bf 8f4f 	dsb	sy
 800ca32:	607b      	str	r3, [r7, #4]
}
 800ca34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ca36:	4b0f      	ldr	r3, [pc, #60]	; (800ca74 <vPortEnterCritical+0x58>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	3301      	adds	r3, #1
 800ca3c:	4a0d      	ldr	r2, [pc, #52]	; (800ca74 <vPortEnterCritical+0x58>)
 800ca3e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ca40:	4b0c      	ldr	r3, [pc, #48]	; (800ca74 <vPortEnterCritical+0x58>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	2b01      	cmp	r3, #1
 800ca46:	d10f      	bne.n	800ca68 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ca48:	4b0b      	ldr	r3, [pc, #44]	; (800ca78 <vPortEnterCritical+0x5c>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	b2db      	uxtb	r3, r3
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d00a      	beq.n	800ca68 <vPortEnterCritical+0x4c>
	__asm volatile
 800ca52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca56:	f383 8811 	msr	BASEPRI, r3
 800ca5a:	f3bf 8f6f 	isb	sy
 800ca5e:	f3bf 8f4f 	dsb	sy
 800ca62:	603b      	str	r3, [r7, #0]
}
 800ca64:	bf00      	nop
 800ca66:	e7fe      	b.n	800ca66 <vPortEnterCritical+0x4a>
	}
}
 800ca68:	bf00      	nop
 800ca6a:	370c      	adds	r7, #12
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bc80      	pop	{r7}
 800ca70:	4770      	bx	lr
 800ca72:	bf00      	nop
 800ca74:	2000003c 	.word	0x2000003c
 800ca78:	e000ed04 	.word	0xe000ed04

0800ca7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b083      	sub	sp, #12
 800ca80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ca82:	4b11      	ldr	r3, [pc, #68]	; (800cac8 <vPortExitCritical+0x4c>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d10a      	bne.n	800caa0 <vPortExitCritical+0x24>
	__asm volatile
 800ca8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca8e:	f383 8811 	msr	BASEPRI, r3
 800ca92:	f3bf 8f6f 	isb	sy
 800ca96:	f3bf 8f4f 	dsb	sy
 800ca9a:	607b      	str	r3, [r7, #4]
}
 800ca9c:	bf00      	nop
 800ca9e:	e7fe      	b.n	800ca9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800caa0:	4b09      	ldr	r3, [pc, #36]	; (800cac8 <vPortExitCritical+0x4c>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	3b01      	subs	r3, #1
 800caa6:	4a08      	ldr	r2, [pc, #32]	; (800cac8 <vPortExitCritical+0x4c>)
 800caa8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800caaa:	4b07      	ldr	r3, [pc, #28]	; (800cac8 <vPortExitCritical+0x4c>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d105      	bne.n	800cabe <vPortExitCritical+0x42>
 800cab2:	2300      	movs	r3, #0
 800cab4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	f383 8811 	msr	BASEPRI, r3
}
 800cabc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cabe:	bf00      	nop
 800cac0:	370c      	adds	r7, #12
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bc80      	pop	{r7}
 800cac6:	4770      	bx	lr
 800cac8:	2000003c 	.word	0x2000003c
 800cacc:	00000000 	.word	0x00000000

0800cad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cad0:	f3ef 8009 	mrs	r0, PSP
 800cad4:	f3bf 8f6f 	isb	sy
 800cad8:	4b0d      	ldr	r3, [pc, #52]	; (800cb10 <pxCurrentTCBConst>)
 800cada:	681a      	ldr	r2, [r3, #0]
 800cadc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cae0:	6010      	str	r0, [r2, #0]
 800cae2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800cae6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800caea:	f380 8811 	msr	BASEPRI, r0
 800caee:	f7fe fe6d 	bl	800b7cc <vTaskSwitchContext>
 800caf2:	f04f 0000 	mov.w	r0, #0
 800caf6:	f380 8811 	msr	BASEPRI, r0
 800cafa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cafe:	6819      	ldr	r1, [r3, #0]
 800cb00:	6808      	ldr	r0, [r1, #0]
 800cb02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cb06:	f380 8809 	msr	PSP, r0
 800cb0a:	f3bf 8f6f 	isb	sy
 800cb0e:	4770      	bx	lr

0800cb10 <pxCurrentTCBConst>:
 800cb10:	20000cb8 	.word	0x20000cb8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cb14:	bf00      	nop
 800cb16:	bf00      	nop

0800cb18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
	__asm volatile
 800cb1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb22:	f383 8811 	msr	BASEPRI, r3
 800cb26:	f3bf 8f6f 	isb	sy
 800cb2a:	f3bf 8f4f 	dsb	sy
 800cb2e:	607b      	str	r3, [r7, #4]
}
 800cb30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cb32:	f7fe fd8d 	bl	800b650 <xTaskIncrementTick>
 800cb36:	4603      	mov	r3, r0
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d003      	beq.n	800cb44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cb3c:	4b06      	ldr	r3, [pc, #24]	; (800cb58 <SysTick_Handler+0x40>)
 800cb3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb42:	601a      	str	r2, [r3, #0]
 800cb44:	2300      	movs	r3, #0
 800cb46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	f383 8811 	msr	BASEPRI, r3
}
 800cb4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cb50:	bf00      	nop
 800cb52:	3708      	adds	r7, #8
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}
 800cb58:	e000ed04 	.word	0xe000ed04

0800cb5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cb60:	4b0a      	ldr	r3, [pc, #40]	; (800cb8c <vPortSetupTimerInterrupt+0x30>)
 800cb62:	2200      	movs	r2, #0
 800cb64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cb66:	4b0a      	ldr	r3, [pc, #40]	; (800cb90 <vPortSetupTimerInterrupt+0x34>)
 800cb68:	2200      	movs	r2, #0
 800cb6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cb6c:	4b09      	ldr	r3, [pc, #36]	; (800cb94 <vPortSetupTimerInterrupt+0x38>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	4a09      	ldr	r2, [pc, #36]	; (800cb98 <vPortSetupTimerInterrupt+0x3c>)
 800cb72:	fba2 2303 	umull	r2, r3, r2, r3
 800cb76:	099b      	lsrs	r3, r3, #6
 800cb78:	4a08      	ldr	r2, [pc, #32]	; (800cb9c <vPortSetupTimerInterrupt+0x40>)
 800cb7a:	3b01      	subs	r3, #1
 800cb7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cb7e:	4b03      	ldr	r3, [pc, #12]	; (800cb8c <vPortSetupTimerInterrupt+0x30>)
 800cb80:	2207      	movs	r2, #7
 800cb82:	601a      	str	r2, [r3, #0]
}
 800cb84:	bf00      	nop
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bc80      	pop	{r7}
 800cb8a:	4770      	bx	lr
 800cb8c:	e000e010 	.word	0xe000e010
 800cb90:	e000e018 	.word	0xe000e018
 800cb94:	20000030 	.word	0x20000030
 800cb98:	10624dd3 	.word	0x10624dd3
 800cb9c:	e000e014 	.word	0xe000e014

0800cba0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cba0:	b480      	push	{r7}
 800cba2:	b085      	sub	sp, #20
 800cba4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cba6:	f3ef 8305 	mrs	r3, IPSR
 800cbaa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2b0f      	cmp	r3, #15
 800cbb0:	d914      	bls.n	800cbdc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cbb2:	4a16      	ldr	r2, [pc, #88]	; (800cc0c <vPortValidateInterruptPriority+0x6c>)
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	4413      	add	r3, r2
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cbbc:	4b14      	ldr	r3, [pc, #80]	; (800cc10 <vPortValidateInterruptPriority+0x70>)
 800cbbe:	781b      	ldrb	r3, [r3, #0]
 800cbc0:	7afa      	ldrb	r2, [r7, #11]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d20a      	bcs.n	800cbdc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cbc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbca:	f383 8811 	msr	BASEPRI, r3
 800cbce:	f3bf 8f6f 	isb	sy
 800cbd2:	f3bf 8f4f 	dsb	sy
 800cbd6:	607b      	str	r3, [r7, #4]
}
 800cbd8:	bf00      	nop
 800cbda:	e7fe      	b.n	800cbda <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cbdc:	4b0d      	ldr	r3, [pc, #52]	; (800cc14 <vPortValidateInterruptPriority+0x74>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cbe4:	4b0c      	ldr	r3, [pc, #48]	; (800cc18 <vPortValidateInterruptPriority+0x78>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d90a      	bls.n	800cc02 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cbec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf0:	f383 8811 	msr	BASEPRI, r3
 800cbf4:	f3bf 8f6f 	isb	sy
 800cbf8:	f3bf 8f4f 	dsb	sy
 800cbfc:	603b      	str	r3, [r7, #0]
}
 800cbfe:	bf00      	nop
 800cc00:	e7fe      	b.n	800cc00 <vPortValidateInterruptPriority+0x60>
	}
 800cc02:	bf00      	nop
 800cc04:	3714      	adds	r7, #20
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bc80      	pop	{r7}
 800cc0a:	4770      	bx	lr
 800cc0c:	e000e3f0 	.word	0xe000e3f0
 800cc10:	20000ee0 	.word	0x20000ee0
 800cc14:	e000ed0c 	.word	0xe000ed0c
 800cc18:	20000ee4 	.word	0x20000ee4

0800cc1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b08a      	sub	sp, #40	; 0x28
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cc24:	2300      	movs	r3, #0
 800cc26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cc28:	f7fe fc48 	bl	800b4bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cc2c:	4b58      	ldr	r3, [pc, #352]	; (800cd90 <pvPortMalloc+0x174>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d101      	bne.n	800cc38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cc34:	f000 f910 	bl	800ce58 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cc38:	4b56      	ldr	r3, [pc, #344]	; (800cd94 <pvPortMalloc+0x178>)
 800cc3a:	681a      	ldr	r2, [r3, #0]
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	4013      	ands	r3, r2
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	f040 808e 	bne.w	800cd62 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d01d      	beq.n	800cc88 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cc4c:	2208      	movs	r2, #8
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	4413      	add	r3, r2
 800cc52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f003 0307 	and.w	r3, r3, #7
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d014      	beq.n	800cc88 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f023 0307 	bic.w	r3, r3, #7
 800cc64:	3308      	adds	r3, #8
 800cc66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f003 0307 	and.w	r3, r3, #7
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d00a      	beq.n	800cc88 <pvPortMalloc+0x6c>
	__asm volatile
 800cc72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc76:	f383 8811 	msr	BASEPRI, r3
 800cc7a:	f3bf 8f6f 	isb	sy
 800cc7e:	f3bf 8f4f 	dsb	sy
 800cc82:	617b      	str	r3, [r7, #20]
}
 800cc84:	bf00      	nop
 800cc86:	e7fe      	b.n	800cc86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d069      	beq.n	800cd62 <pvPortMalloc+0x146>
 800cc8e:	4b42      	ldr	r3, [pc, #264]	; (800cd98 <pvPortMalloc+0x17c>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	687a      	ldr	r2, [r7, #4]
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d864      	bhi.n	800cd62 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cc98:	4b40      	ldr	r3, [pc, #256]	; (800cd9c <pvPortMalloc+0x180>)
 800cc9a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cc9c:	4b3f      	ldr	r3, [pc, #252]	; (800cd9c <pvPortMalloc+0x180>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cca2:	e004      	b.n	800ccae <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ccae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb0:	685b      	ldr	r3, [r3, #4]
 800ccb2:	687a      	ldr	r2, [r7, #4]
 800ccb4:	429a      	cmp	r2, r3
 800ccb6:	d903      	bls.n	800ccc0 <pvPortMalloc+0xa4>
 800ccb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d1f1      	bne.n	800cca4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ccc0:	4b33      	ldr	r3, [pc, #204]	; (800cd90 <pvPortMalloc+0x174>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	d04b      	beq.n	800cd62 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ccca:	6a3b      	ldr	r3, [r7, #32]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	2208      	movs	r2, #8
 800ccd0:	4413      	add	r3, r2
 800ccd2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ccd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd6:	681a      	ldr	r2, [r3, #0]
 800ccd8:	6a3b      	ldr	r3, [r7, #32]
 800ccda:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ccdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccde:	685a      	ldr	r2, [r3, #4]
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	1ad2      	subs	r2, r2, r3
 800cce4:	2308      	movs	r3, #8
 800cce6:	005b      	lsls	r3, r3, #1
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d91f      	bls.n	800cd2c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ccec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	4413      	add	r3, r2
 800ccf2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ccf4:	69bb      	ldr	r3, [r7, #24]
 800ccf6:	f003 0307 	and.w	r3, r3, #7
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d00a      	beq.n	800cd14 <pvPortMalloc+0xf8>
	__asm volatile
 800ccfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd02:	f383 8811 	msr	BASEPRI, r3
 800cd06:	f3bf 8f6f 	isb	sy
 800cd0a:	f3bf 8f4f 	dsb	sy
 800cd0e:	613b      	str	r3, [r7, #16]
}
 800cd10:	bf00      	nop
 800cd12:	e7fe      	b.n	800cd12 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd16:	685a      	ldr	r2, [r3, #4]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	1ad2      	subs	r2, r2, r3
 800cd1c:	69bb      	ldr	r3, [r7, #24]
 800cd1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd22:	687a      	ldr	r2, [r7, #4]
 800cd24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cd26:	69b8      	ldr	r0, [r7, #24]
 800cd28:	f000 f8f8 	bl	800cf1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cd2c:	4b1a      	ldr	r3, [pc, #104]	; (800cd98 <pvPortMalloc+0x17c>)
 800cd2e:	681a      	ldr	r2, [r3, #0]
 800cd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd32:	685b      	ldr	r3, [r3, #4]
 800cd34:	1ad3      	subs	r3, r2, r3
 800cd36:	4a18      	ldr	r2, [pc, #96]	; (800cd98 <pvPortMalloc+0x17c>)
 800cd38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cd3a:	4b17      	ldr	r3, [pc, #92]	; (800cd98 <pvPortMalloc+0x17c>)
 800cd3c:	681a      	ldr	r2, [r3, #0]
 800cd3e:	4b18      	ldr	r3, [pc, #96]	; (800cda0 <pvPortMalloc+0x184>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d203      	bcs.n	800cd4e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cd46:	4b14      	ldr	r3, [pc, #80]	; (800cd98 <pvPortMalloc+0x17c>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	4a15      	ldr	r2, [pc, #84]	; (800cda0 <pvPortMalloc+0x184>)
 800cd4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cd4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd50:	685a      	ldr	r2, [r3, #4]
 800cd52:	4b10      	ldr	r3, [pc, #64]	; (800cd94 <pvPortMalloc+0x178>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	431a      	orrs	r2, r3
 800cd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd5e:	2200      	movs	r2, #0
 800cd60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cd62:	f7fe fbb9 	bl	800b4d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd66:	69fb      	ldr	r3, [r7, #28]
 800cd68:	f003 0307 	and.w	r3, r3, #7
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d00a      	beq.n	800cd86 <pvPortMalloc+0x16a>
	__asm volatile
 800cd70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd74:	f383 8811 	msr	BASEPRI, r3
 800cd78:	f3bf 8f6f 	isb	sy
 800cd7c:	f3bf 8f4f 	dsb	sy
 800cd80:	60fb      	str	r3, [r7, #12]
}
 800cd82:	bf00      	nop
 800cd84:	e7fe      	b.n	800cd84 <pvPortMalloc+0x168>
	return pvReturn;
 800cd86:	69fb      	ldr	r3, [r7, #28]
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3728      	adds	r7, #40	; 0x28
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	20002ef0 	.word	0x20002ef0
 800cd94:	20002efc 	.word	0x20002efc
 800cd98:	20002ef4 	.word	0x20002ef4
 800cd9c:	20002ee8 	.word	0x20002ee8
 800cda0:	20002ef8 	.word	0x20002ef8

0800cda4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b086      	sub	sp, #24
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d048      	beq.n	800ce48 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cdb6:	2308      	movs	r3, #8
 800cdb8:	425b      	negs	r3, r3
 800cdba:	697a      	ldr	r2, [r7, #20]
 800cdbc:	4413      	add	r3, r2
 800cdbe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	685a      	ldr	r2, [r3, #4]
 800cdc8:	4b21      	ldr	r3, [pc, #132]	; (800ce50 <vPortFree+0xac>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	4013      	ands	r3, r2
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d10a      	bne.n	800cde8 <vPortFree+0x44>
	__asm volatile
 800cdd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd6:	f383 8811 	msr	BASEPRI, r3
 800cdda:	f3bf 8f6f 	isb	sy
 800cdde:	f3bf 8f4f 	dsb	sy
 800cde2:	60fb      	str	r3, [r7, #12]
}
 800cde4:	bf00      	nop
 800cde6:	e7fe      	b.n	800cde6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cde8:	693b      	ldr	r3, [r7, #16]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d00a      	beq.n	800ce06 <vPortFree+0x62>
	__asm volatile
 800cdf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf4:	f383 8811 	msr	BASEPRI, r3
 800cdf8:	f3bf 8f6f 	isb	sy
 800cdfc:	f3bf 8f4f 	dsb	sy
 800ce00:	60bb      	str	r3, [r7, #8]
}
 800ce02:	bf00      	nop
 800ce04:	e7fe      	b.n	800ce04 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	685a      	ldr	r2, [r3, #4]
 800ce0a:	4b11      	ldr	r3, [pc, #68]	; (800ce50 <vPortFree+0xac>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	4013      	ands	r3, r2
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d019      	beq.n	800ce48 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d115      	bne.n	800ce48 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	685a      	ldr	r2, [r3, #4]
 800ce20:	4b0b      	ldr	r3, [pc, #44]	; (800ce50 <vPortFree+0xac>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	43db      	mvns	r3, r3
 800ce26:	401a      	ands	r2, r3
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ce2c:	f7fe fb46 	bl	800b4bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	685a      	ldr	r2, [r3, #4]
 800ce34:	4b07      	ldr	r3, [pc, #28]	; (800ce54 <vPortFree+0xb0>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	4413      	add	r3, r2
 800ce3a:	4a06      	ldr	r2, [pc, #24]	; (800ce54 <vPortFree+0xb0>)
 800ce3c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ce3e:	6938      	ldr	r0, [r7, #16]
 800ce40:	f000 f86c 	bl	800cf1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ce44:	f7fe fb48 	bl	800b4d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ce48:	bf00      	nop
 800ce4a:	3718      	adds	r7, #24
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}
 800ce50:	20002efc 	.word	0x20002efc
 800ce54:	20002ef4 	.word	0x20002ef4

0800ce58 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b085      	sub	sp, #20
 800ce5c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ce5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ce62:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ce64:	4b27      	ldr	r3, [pc, #156]	; (800cf04 <prvHeapInit+0xac>)
 800ce66:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	f003 0307 	and.w	r3, r3, #7
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d00c      	beq.n	800ce8c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	3307      	adds	r3, #7
 800ce76:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	f023 0307 	bic.w	r3, r3, #7
 800ce7e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ce80:	68ba      	ldr	r2, [r7, #8]
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	1ad3      	subs	r3, r2, r3
 800ce86:	4a1f      	ldr	r2, [pc, #124]	; (800cf04 <prvHeapInit+0xac>)
 800ce88:	4413      	add	r3, r2
 800ce8a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ce90:	4a1d      	ldr	r2, [pc, #116]	; (800cf08 <prvHeapInit+0xb0>)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ce96:	4b1c      	ldr	r3, [pc, #112]	; (800cf08 <prvHeapInit+0xb0>)
 800ce98:	2200      	movs	r2, #0
 800ce9a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	68ba      	ldr	r2, [r7, #8]
 800cea0:	4413      	add	r3, r2
 800cea2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cea4:	2208      	movs	r2, #8
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	1a9b      	subs	r3, r3, r2
 800ceaa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	f023 0307 	bic.w	r3, r3, #7
 800ceb2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	4a15      	ldr	r2, [pc, #84]	; (800cf0c <prvHeapInit+0xb4>)
 800ceb8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ceba:	4b14      	ldr	r3, [pc, #80]	; (800cf0c <prvHeapInit+0xb4>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	2200      	movs	r2, #0
 800cec0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cec2:	4b12      	ldr	r3, [pc, #72]	; (800cf0c <prvHeapInit+0xb4>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	2200      	movs	r2, #0
 800cec8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	68fa      	ldr	r2, [r7, #12]
 800ced2:	1ad2      	subs	r2, r2, r3
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ced8:	4b0c      	ldr	r3, [pc, #48]	; (800cf0c <prvHeapInit+0xb4>)
 800ceda:	681a      	ldr	r2, [r3, #0]
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	685b      	ldr	r3, [r3, #4]
 800cee4:	4a0a      	ldr	r2, [pc, #40]	; (800cf10 <prvHeapInit+0xb8>)
 800cee6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	685b      	ldr	r3, [r3, #4]
 800ceec:	4a09      	ldr	r2, [pc, #36]	; (800cf14 <prvHeapInit+0xbc>)
 800ceee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cef0:	4b09      	ldr	r3, [pc, #36]	; (800cf18 <prvHeapInit+0xc0>)
 800cef2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cef6:	601a      	str	r2, [r3, #0]
}
 800cef8:	bf00      	nop
 800cefa:	3714      	adds	r7, #20
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bc80      	pop	{r7}
 800cf00:	4770      	bx	lr
 800cf02:	bf00      	nop
 800cf04:	20000ee8 	.word	0x20000ee8
 800cf08:	20002ee8 	.word	0x20002ee8
 800cf0c:	20002ef0 	.word	0x20002ef0
 800cf10:	20002ef8 	.word	0x20002ef8
 800cf14:	20002ef4 	.word	0x20002ef4
 800cf18:	20002efc 	.word	0x20002efc

0800cf1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b085      	sub	sp, #20
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cf24:	4b27      	ldr	r3, [pc, #156]	; (800cfc4 <prvInsertBlockIntoFreeList+0xa8>)
 800cf26:	60fb      	str	r3, [r7, #12]
 800cf28:	e002      	b.n	800cf30 <prvInsertBlockIntoFreeList+0x14>
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	60fb      	str	r3, [r7, #12]
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	687a      	ldr	r2, [r7, #4]
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d8f7      	bhi.n	800cf2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	685b      	ldr	r3, [r3, #4]
 800cf42:	68ba      	ldr	r2, [r7, #8]
 800cf44:	4413      	add	r3, r2
 800cf46:	687a      	ldr	r2, [r7, #4]
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d108      	bne.n	800cf5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	685a      	ldr	r2, [r3, #4]
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	685b      	ldr	r3, [r3, #4]
 800cf54:	441a      	add	r2, r3
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	685b      	ldr	r3, [r3, #4]
 800cf66:	68ba      	ldr	r2, [r7, #8]
 800cf68:	441a      	add	r2, r3
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	d118      	bne.n	800cfa4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	681a      	ldr	r2, [r3, #0]
 800cf76:	4b14      	ldr	r3, [pc, #80]	; (800cfc8 <prvInsertBlockIntoFreeList+0xac>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d00d      	beq.n	800cf9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	685a      	ldr	r2, [r3, #4]
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	685b      	ldr	r3, [r3, #4]
 800cf88:	441a      	add	r2, r3
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	681a      	ldr	r2, [r3, #0]
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	601a      	str	r2, [r3, #0]
 800cf98:	e008      	b.n	800cfac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cf9a:	4b0b      	ldr	r3, [pc, #44]	; (800cfc8 <prvInsertBlockIntoFreeList+0xac>)
 800cf9c:	681a      	ldr	r2, [r3, #0]
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	601a      	str	r2, [r3, #0]
 800cfa2:	e003      	b.n	800cfac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	681a      	ldr	r2, [r3, #0]
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cfac:	68fa      	ldr	r2, [r7, #12]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d002      	beq.n	800cfba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	687a      	ldr	r2, [r7, #4]
 800cfb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cfba:	bf00      	nop
 800cfbc:	3714      	adds	r7, #20
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bc80      	pop	{r7}
 800cfc2:	4770      	bx	lr
 800cfc4:	20002ee8 	.word	0x20002ee8
 800cfc8:	20002ef0 	.word	0x20002ef0

0800cfcc <__errno>:
 800cfcc:	4b01      	ldr	r3, [pc, #4]	; (800cfd4 <__errno+0x8>)
 800cfce:	6818      	ldr	r0, [r3, #0]
 800cfd0:	4770      	bx	lr
 800cfd2:	bf00      	nop
 800cfd4:	20000040 	.word	0x20000040

0800cfd8 <__libc_init_array>:
 800cfd8:	b570      	push	{r4, r5, r6, lr}
 800cfda:	2600      	movs	r6, #0
 800cfdc:	4d0c      	ldr	r5, [pc, #48]	; (800d010 <__libc_init_array+0x38>)
 800cfde:	4c0d      	ldr	r4, [pc, #52]	; (800d014 <__libc_init_array+0x3c>)
 800cfe0:	1b64      	subs	r4, r4, r5
 800cfe2:	10a4      	asrs	r4, r4, #2
 800cfe4:	42a6      	cmp	r6, r4
 800cfe6:	d109      	bne.n	800cffc <__libc_init_array+0x24>
 800cfe8:	f001 ff7c 	bl	800eee4 <_init>
 800cfec:	2600      	movs	r6, #0
 800cfee:	4d0a      	ldr	r5, [pc, #40]	; (800d018 <__libc_init_array+0x40>)
 800cff0:	4c0a      	ldr	r4, [pc, #40]	; (800d01c <__libc_init_array+0x44>)
 800cff2:	1b64      	subs	r4, r4, r5
 800cff4:	10a4      	asrs	r4, r4, #2
 800cff6:	42a6      	cmp	r6, r4
 800cff8:	d105      	bne.n	800d006 <__libc_init_array+0x2e>
 800cffa:	bd70      	pop	{r4, r5, r6, pc}
 800cffc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d000:	4798      	blx	r3
 800d002:	3601      	adds	r6, #1
 800d004:	e7ee      	b.n	800cfe4 <__libc_init_array+0xc>
 800d006:	f855 3b04 	ldr.w	r3, [r5], #4
 800d00a:	4798      	blx	r3
 800d00c:	3601      	adds	r6, #1
 800d00e:	e7f2      	b.n	800cff6 <__libc_init_array+0x1e>
 800d010:	0800f3f0 	.word	0x0800f3f0
 800d014:	0800f3f0 	.word	0x0800f3f0
 800d018:	0800f3f0 	.word	0x0800f3f0
 800d01c:	0800f3f4 	.word	0x0800f3f4

0800d020 <memcpy>:
 800d020:	440a      	add	r2, r1
 800d022:	4291      	cmp	r1, r2
 800d024:	f100 33ff 	add.w	r3, r0, #4294967295
 800d028:	d100      	bne.n	800d02c <memcpy+0xc>
 800d02a:	4770      	bx	lr
 800d02c:	b510      	push	{r4, lr}
 800d02e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d032:	4291      	cmp	r1, r2
 800d034:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d038:	d1f9      	bne.n	800d02e <memcpy+0xe>
 800d03a:	bd10      	pop	{r4, pc}

0800d03c <memset>:
 800d03c:	4603      	mov	r3, r0
 800d03e:	4402      	add	r2, r0
 800d040:	4293      	cmp	r3, r2
 800d042:	d100      	bne.n	800d046 <memset+0xa>
 800d044:	4770      	bx	lr
 800d046:	f803 1b01 	strb.w	r1, [r3], #1
 800d04a:	e7f9      	b.n	800d040 <memset+0x4>

0800d04c <iprintf>:
 800d04c:	b40f      	push	{r0, r1, r2, r3}
 800d04e:	4b0a      	ldr	r3, [pc, #40]	; (800d078 <iprintf+0x2c>)
 800d050:	b513      	push	{r0, r1, r4, lr}
 800d052:	681c      	ldr	r4, [r3, #0]
 800d054:	b124      	cbz	r4, 800d060 <iprintf+0x14>
 800d056:	69a3      	ldr	r3, [r4, #24]
 800d058:	b913      	cbnz	r3, 800d060 <iprintf+0x14>
 800d05a:	4620      	mov	r0, r4
 800d05c:	f000 f87a 	bl	800d154 <__sinit>
 800d060:	ab05      	add	r3, sp, #20
 800d062:	4620      	mov	r0, r4
 800d064:	9a04      	ldr	r2, [sp, #16]
 800d066:	68a1      	ldr	r1, [r4, #8]
 800d068:	9301      	str	r3, [sp, #4]
 800d06a:	f000 f995 	bl	800d398 <_vfiprintf_r>
 800d06e:	b002      	add	sp, #8
 800d070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d074:	b004      	add	sp, #16
 800d076:	4770      	bx	lr
 800d078:	20000040 	.word	0x20000040

0800d07c <putchar>:
 800d07c:	b538      	push	{r3, r4, r5, lr}
 800d07e:	4b08      	ldr	r3, [pc, #32]	; (800d0a0 <putchar+0x24>)
 800d080:	4605      	mov	r5, r0
 800d082:	681c      	ldr	r4, [r3, #0]
 800d084:	b124      	cbz	r4, 800d090 <putchar+0x14>
 800d086:	69a3      	ldr	r3, [r4, #24]
 800d088:	b913      	cbnz	r3, 800d090 <putchar+0x14>
 800d08a:	4620      	mov	r0, r4
 800d08c:	f000 f862 	bl	800d154 <__sinit>
 800d090:	4629      	mov	r1, r5
 800d092:	4620      	mov	r0, r4
 800d094:	68a2      	ldr	r2, [r4, #8]
 800d096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d09a:	f000 bc43 	b.w	800d924 <_putc_r>
 800d09e:	bf00      	nop
 800d0a0:	20000040 	.word	0x20000040

0800d0a4 <std>:
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	b510      	push	{r4, lr}
 800d0a8:	4604      	mov	r4, r0
 800d0aa:	e9c0 3300 	strd	r3, r3, [r0]
 800d0ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d0b2:	6083      	str	r3, [r0, #8]
 800d0b4:	8181      	strh	r1, [r0, #12]
 800d0b6:	6643      	str	r3, [r0, #100]	; 0x64
 800d0b8:	81c2      	strh	r2, [r0, #14]
 800d0ba:	6183      	str	r3, [r0, #24]
 800d0bc:	4619      	mov	r1, r3
 800d0be:	2208      	movs	r2, #8
 800d0c0:	305c      	adds	r0, #92	; 0x5c
 800d0c2:	f7ff ffbb 	bl	800d03c <memset>
 800d0c6:	4b05      	ldr	r3, [pc, #20]	; (800d0dc <std+0x38>)
 800d0c8:	6224      	str	r4, [r4, #32]
 800d0ca:	6263      	str	r3, [r4, #36]	; 0x24
 800d0cc:	4b04      	ldr	r3, [pc, #16]	; (800d0e0 <std+0x3c>)
 800d0ce:	62a3      	str	r3, [r4, #40]	; 0x28
 800d0d0:	4b04      	ldr	r3, [pc, #16]	; (800d0e4 <std+0x40>)
 800d0d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d0d4:	4b04      	ldr	r3, [pc, #16]	; (800d0e8 <std+0x44>)
 800d0d6:	6323      	str	r3, [r4, #48]	; 0x30
 800d0d8:	bd10      	pop	{r4, pc}
 800d0da:	bf00      	nop
 800d0dc:	0800d9d5 	.word	0x0800d9d5
 800d0e0:	0800d9f7 	.word	0x0800d9f7
 800d0e4:	0800da2f 	.word	0x0800da2f
 800d0e8:	0800da53 	.word	0x0800da53

0800d0ec <_cleanup_r>:
 800d0ec:	4901      	ldr	r1, [pc, #4]	; (800d0f4 <_cleanup_r+0x8>)
 800d0ee:	f000 b8af 	b.w	800d250 <_fwalk_reent>
 800d0f2:	bf00      	nop
 800d0f4:	0800dd2d 	.word	0x0800dd2d

0800d0f8 <__sfmoreglue>:
 800d0f8:	b570      	push	{r4, r5, r6, lr}
 800d0fa:	2568      	movs	r5, #104	; 0x68
 800d0fc:	1e4a      	subs	r2, r1, #1
 800d0fe:	4355      	muls	r5, r2
 800d100:	460e      	mov	r6, r1
 800d102:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d106:	f000 f8c5 	bl	800d294 <_malloc_r>
 800d10a:	4604      	mov	r4, r0
 800d10c:	b140      	cbz	r0, 800d120 <__sfmoreglue+0x28>
 800d10e:	2100      	movs	r1, #0
 800d110:	e9c0 1600 	strd	r1, r6, [r0]
 800d114:	300c      	adds	r0, #12
 800d116:	60a0      	str	r0, [r4, #8]
 800d118:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d11c:	f7ff ff8e 	bl	800d03c <memset>
 800d120:	4620      	mov	r0, r4
 800d122:	bd70      	pop	{r4, r5, r6, pc}

0800d124 <__sfp_lock_acquire>:
 800d124:	4801      	ldr	r0, [pc, #4]	; (800d12c <__sfp_lock_acquire+0x8>)
 800d126:	f000 b8b3 	b.w	800d290 <__retarget_lock_acquire_recursive>
 800d12a:	bf00      	nop
 800d12c:	20003070 	.word	0x20003070

0800d130 <__sfp_lock_release>:
 800d130:	4801      	ldr	r0, [pc, #4]	; (800d138 <__sfp_lock_release+0x8>)
 800d132:	f000 b8ae 	b.w	800d292 <__retarget_lock_release_recursive>
 800d136:	bf00      	nop
 800d138:	20003070 	.word	0x20003070

0800d13c <__sinit_lock_acquire>:
 800d13c:	4801      	ldr	r0, [pc, #4]	; (800d144 <__sinit_lock_acquire+0x8>)
 800d13e:	f000 b8a7 	b.w	800d290 <__retarget_lock_acquire_recursive>
 800d142:	bf00      	nop
 800d144:	2000306b 	.word	0x2000306b

0800d148 <__sinit_lock_release>:
 800d148:	4801      	ldr	r0, [pc, #4]	; (800d150 <__sinit_lock_release+0x8>)
 800d14a:	f000 b8a2 	b.w	800d292 <__retarget_lock_release_recursive>
 800d14e:	bf00      	nop
 800d150:	2000306b 	.word	0x2000306b

0800d154 <__sinit>:
 800d154:	b510      	push	{r4, lr}
 800d156:	4604      	mov	r4, r0
 800d158:	f7ff fff0 	bl	800d13c <__sinit_lock_acquire>
 800d15c:	69a3      	ldr	r3, [r4, #24]
 800d15e:	b11b      	cbz	r3, 800d168 <__sinit+0x14>
 800d160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d164:	f7ff bff0 	b.w	800d148 <__sinit_lock_release>
 800d168:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d16c:	6523      	str	r3, [r4, #80]	; 0x50
 800d16e:	4b13      	ldr	r3, [pc, #76]	; (800d1bc <__sinit+0x68>)
 800d170:	4a13      	ldr	r2, [pc, #76]	; (800d1c0 <__sinit+0x6c>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	62a2      	str	r2, [r4, #40]	; 0x28
 800d176:	42a3      	cmp	r3, r4
 800d178:	bf08      	it	eq
 800d17a:	2301      	moveq	r3, #1
 800d17c:	4620      	mov	r0, r4
 800d17e:	bf08      	it	eq
 800d180:	61a3      	streq	r3, [r4, #24]
 800d182:	f000 f81f 	bl	800d1c4 <__sfp>
 800d186:	6060      	str	r0, [r4, #4]
 800d188:	4620      	mov	r0, r4
 800d18a:	f000 f81b 	bl	800d1c4 <__sfp>
 800d18e:	60a0      	str	r0, [r4, #8]
 800d190:	4620      	mov	r0, r4
 800d192:	f000 f817 	bl	800d1c4 <__sfp>
 800d196:	2200      	movs	r2, #0
 800d198:	2104      	movs	r1, #4
 800d19a:	60e0      	str	r0, [r4, #12]
 800d19c:	6860      	ldr	r0, [r4, #4]
 800d19e:	f7ff ff81 	bl	800d0a4 <std>
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	2109      	movs	r1, #9
 800d1a6:	68a0      	ldr	r0, [r4, #8]
 800d1a8:	f7ff ff7c 	bl	800d0a4 <std>
 800d1ac:	2202      	movs	r2, #2
 800d1ae:	2112      	movs	r1, #18
 800d1b0:	68e0      	ldr	r0, [r4, #12]
 800d1b2:	f7ff ff77 	bl	800d0a4 <std>
 800d1b6:	2301      	movs	r3, #1
 800d1b8:	61a3      	str	r3, [r4, #24]
 800d1ba:	e7d1      	b.n	800d160 <__sinit+0xc>
 800d1bc:	0800f310 	.word	0x0800f310
 800d1c0:	0800d0ed 	.word	0x0800d0ed

0800d1c4 <__sfp>:
 800d1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1c6:	4607      	mov	r7, r0
 800d1c8:	f7ff ffac 	bl	800d124 <__sfp_lock_acquire>
 800d1cc:	4b1e      	ldr	r3, [pc, #120]	; (800d248 <__sfp+0x84>)
 800d1ce:	681e      	ldr	r6, [r3, #0]
 800d1d0:	69b3      	ldr	r3, [r6, #24]
 800d1d2:	b913      	cbnz	r3, 800d1da <__sfp+0x16>
 800d1d4:	4630      	mov	r0, r6
 800d1d6:	f7ff ffbd 	bl	800d154 <__sinit>
 800d1da:	3648      	adds	r6, #72	; 0x48
 800d1dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d1e0:	3b01      	subs	r3, #1
 800d1e2:	d503      	bpl.n	800d1ec <__sfp+0x28>
 800d1e4:	6833      	ldr	r3, [r6, #0]
 800d1e6:	b30b      	cbz	r3, 800d22c <__sfp+0x68>
 800d1e8:	6836      	ldr	r6, [r6, #0]
 800d1ea:	e7f7      	b.n	800d1dc <__sfp+0x18>
 800d1ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d1f0:	b9d5      	cbnz	r5, 800d228 <__sfp+0x64>
 800d1f2:	4b16      	ldr	r3, [pc, #88]	; (800d24c <__sfp+0x88>)
 800d1f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d1f8:	60e3      	str	r3, [r4, #12]
 800d1fa:	6665      	str	r5, [r4, #100]	; 0x64
 800d1fc:	f000 f847 	bl	800d28e <__retarget_lock_init_recursive>
 800d200:	f7ff ff96 	bl	800d130 <__sfp_lock_release>
 800d204:	2208      	movs	r2, #8
 800d206:	4629      	mov	r1, r5
 800d208:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d20c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d210:	6025      	str	r5, [r4, #0]
 800d212:	61a5      	str	r5, [r4, #24]
 800d214:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d218:	f7ff ff10 	bl	800d03c <memset>
 800d21c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d220:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d224:	4620      	mov	r0, r4
 800d226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d228:	3468      	adds	r4, #104	; 0x68
 800d22a:	e7d9      	b.n	800d1e0 <__sfp+0x1c>
 800d22c:	2104      	movs	r1, #4
 800d22e:	4638      	mov	r0, r7
 800d230:	f7ff ff62 	bl	800d0f8 <__sfmoreglue>
 800d234:	4604      	mov	r4, r0
 800d236:	6030      	str	r0, [r6, #0]
 800d238:	2800      	cmp	r0, #0
 800d23a:	d1d5      	bne.n	800d1e8 <__sfp+0x24>
 800d23c:	f7ff ff78 	bl	800d130 <__sfp_lock_release>
 800d240:	230c      	movs	r3, #12
 800d242:	603b      	str	r3, [r7, #0]
 800d244:	e7ee      	b.n	800d224 <__sfp+0x60>
 800d246:	bf00      	nop
 800d248:	0800f310 	.word	0x0800f310
 800d24c:	ffff0001 	.word	0xffff0001

0800d250 <_fwalk_reent>:
 800d250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d254:	4606      	mov	r6, r0
 800d256:	4688      	mov	r8, r1
 800d258:	2700      	movs	r7, #0
 800d25a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d25e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d262:	f1b9 0901 	subs.w	r9, r9, #1
 800d266:	d505      	bpl.n	800d274 <_fwalk_reent+0x24>
 800d268:	6824      	ldr	r4, [r4, #0]
 800d26a:	2c00      	cmp	r4, #0
 800d26c:	d1f7      	bne.n	800d25e <_fwalk_reent+0xe>
 800d26e:	4638      	mov	r0, r7
 800d270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d274:	89ab      	ldrh	r3, [r5, #12]
 800d276:	2b01      	cmp	r3, #1
 800d278:	d907      	bls.n	800d28a <_fwalk_reent+0x3a>
 800d27a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d27e:	3301      	adds	r3, #1
 800d280:	d003      	beq.n	800d28a <_fwalk_reent+0x3a>
 800d282:	4629      	mov	r1, r5
 800d284:	4630      	mov	r0, r6
 800d286:	47c0      	blx	r8
 800d288:	4307      	orrs	r7, r0
 800d28a:	3568      	adds	r5, #104	; 0x68
 800d28c:	e7e9      	b.n	800d262 <_fwalk_reent+0x12>

0800d28e <__retarget_lock_init_recursive>:
 800d28e:	4770      	bx	lr

0800d290 <__retarget_lock_acquire_recursive>:
 800d290:	4770      	bx	lr

0800d292 <__retarget_lock_release_recursive>:
 800d292:	4770      	bx	lr

0800d294 <_malloc_r>:
 800d294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d296:	1ccd      	adds	r5, r1, #3
 800d298:	f025 0503 	bic.w	r5, r5, #3
 800d29c:	3508      	adds	r5, #8
 800d29e:	2d0c      	cmp	r5, #12
 800d2a0:	bf38      	it	cc
 800d2a2:	250c      	movcc	r5, #12
 800d2a4:	2d00      	cmp	r5, #0
 800d2a6:	4606      	mov	r6, r0
 800d2a8:	db01      	blt.n	800d2ae <_malloc_r+0x1a>
 800d2aa:	42a9      	cmp	r1, r5
 800d2ac:	d903      	bls.n	800d2b6 <_malloc_r+0x22>
 800d2ae:	230c      	movs	r3, #12
 800d2b0:	6033      	str	r3, [r6, #0]
 800d2b2:	2000      	movs	r0, #0
 800d2b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2b6:	f000 fdf9 	bl	800deac <__malloc_lock>
 800d2ba:	4921      	ldr	r1, [pc, #132]	; (800d340 <_malloc_r+0xac>)
 800d2bc:	680a      	ldr	r2, [r1, #0]
 800d2be:	4614      	mov	r4, r2
 800d2c0:	b99c      	cbnz	r4, 800d2ea <_malloc_r+0x56>
 800d2c2:	4f20      	ldr	r7, [pc, #128]	; (800d344 <_malloc_r+0xb0>)
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	b923      	cbnz	r3, 800d2d2 <_malloc_r+0x3e>
 800d2c8:	4621      	mov	r1, r4
 800d2ca:	4630      	mov	r0, r6
 800d2cc:	f000 fb72 	bl	800d9b4 <_sbrk_r>
 800d2d0:	6038      	str	r0, [r7, #0]
 800d2d2:	4629      	mov	r1, r5
 800d2d4:	4630      	mov	r0, r6
 800d2d6:	f000 fb6d 	bl	800d9b4 <_sbrk_r>
 800d2da:	1c43      	adds	r3, r0, #1
 800d2dc:	d123      	bne.n	800d326 <_malloc_r+0x92>
 800d2de:	230c      	movs	r3, #12
 800d2e0:	4630      	mov	r0, r6
 800d2e2:	6033      	str	r3, [r6, #0]
 800d2e4:	f000 fde8 	bl	800deb8 <__malloc_unlock>
 800d2e8:	e7e3      	b.n	800d2b2 <_malloc_r+0x1e>
 800d2ea:	6823      	ldr	r3, [r4, #0]
 800d2ec:	1b5b      	subs	r3, r3, r5
 800d2ee:	d417      	bmi.n	800d320 <_malloc_r+0x8c>
 800d2f0:	2b0b      	cmp	r3, #11
 800d2f2:	d903      	bls.n	800d2fc <_malloc_r+0x68>
 800d2f4:	6023      	str	r3, [r4, #0]
 800d2f6:	441c      	add	r4, r3
 800d2f8:	6025      	str	r5, [r4, #0]
 800d2fa:	e004      	b.n	800d306 <_malloc_r+0x72>
 800d2fc:	6863      	ldr	r3, [r4, #4]
 800d2fe:	42a2      	cmp	r2, r4
 800d300:	bf0c      	ite	eq
 800d302:	600b      	streq	r3, [r1, #0]
 800d304:	6053      	strne	r3, [r2, #4]
 800d306:	4630      	mov	r0, r6
 800d308:	f000 fdd6 	bl	800deb8 <__malloc_unlock>
 800d30c:	f104 000b 	add.w	r0, r4, #11
 800d310:	1d23      	adds	r3, r4, #4
 800d312:	f020 0007 	bic.w	r0, r0, #7
 800d316:	1ac2      	subs	r2, r0, r3
 800d318:	d0cc      	beq.n	800d2b4 <_malloc_r+0x20>
 800d31a:	1a1b      	subs	r3, r3, r0
 800d31c:	50a3      	str	r3, [r4, r2]
 800d31e:	e7c9      	b.n	800d2b4 <_malloc_r+0x20>
 800d320:	4622      	mov	r2, r4
 800d322:	6864      	ldr	r4, [r4, #4]
 800d324:	e7cc      	b.n	800d2c0 <_malloc_r+0x2c>
 800d326:	1cc4      	adds	r4, r0, #3
 800d328:	f024 0403 	bic.w	r4, r4, #3
 800d32c:	42a0      	cmp	r0, r4
 800d32e:	d0e3      	beq.n	800d2f8 <_malloc_r+0x64>
 800d330:	1a21      	subs	r1, r4, r0
 800d332:	4630      	mov	r0, r6
 800d334:	f000 fb3e 	bl	800d9b4 <_sbrk_r>
 800d338:	3001      	adds	r0, #1
 800d33a:	d1dd      	bne.n	800d2f8 <_malloc_r+0x64>
 800d33c:	e7cf      	b.n	800d2de <_malloc_r+0x4a>
 800d33e:	bf00      	nop
 800d340:	20002f00 	.word	0x20002f00
 800d344:	20002f04 	.word	0x20002f04

0800d348 <__sfputc_r>:
 800d348:	6893      	ldr	r3, [r2, #8]
 800d34a:	b410      	push	{r4}
 800d34c:	3b01      	subs	r3, #1
 800d34e:	2b00      	cmp	r3, #0
 800d350:	6093      	str	r3, [r2, #8]
 800d352:	da07      	bge.n	800d364 <__sfputc_r+0x1c>
 800d354:	6994      	ldr	r4, [r2, #24]
 800d356:	42a3      	cmp	r3, r4
 800d358:	db01      	blt.n	800d35e <__sfputc_r+0x16>
 800d35a:	290a      	cmp	r1, #10
 800d35c:	d102      	bne.n	800d364 <__sfputc_r+0x1c>
 800d35e:	bc10      	pop	{r4}
 800d360:	f000 bb7c 	b.w	800da5c <__swbuf_r>
 800d364:	6813      	ldr	r3, [r2, #0]
 800d366:	1c58      	adds	r0, r3, #1
 800d368:	6010      	str	r0, [r2, #0]
 800d36a:	7019      	strb	r1, [r3, #0]
 800d36c:	4608      	mov	r0, r1
 800d36e:	bc10      	pop	{r4}
 800d370:	4770      	bx	lr

0800d372 <__sfputs_r>:
 800d372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d374:	4606      	mov	r6, r0
 800d376:	460f      	mov	r7, r1
 800d378:	4614      	mov	r4, r2
 800d37a:	18d5      	adds	r5, r2, r3
 800d37c:	42ac      	cmp	r4, r5
 800d37e:	d101      	bne.n	800d384 <__sfputs_r+0x12>
 800d380:	2000      	movs	r0, #0
 800d382:	e007      	b.n	800d394 <__sfputs_r+0x22>
 800d384:	463a      	mov	r2, r7
 800d386:	4630      	mov	r0, r6
 800d388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d38c:	f7ff ffdc 	bl	800d348 <__sfputc_r>
 800d390:	1c43      	adds	r3, r0, #1
 800d392:	d1f3      	bne.n	800d37c <__sfputs_r+0xa>
 800d394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d398 <_vfiprintf_r>:
 800d398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d39c:	460d      	mov	r5, r1
 800d39e:	4614      	mov	r4, r2
 800d3a0:	4698      	mov	r8, r3
 800d3a2:	4606      	mov	r6, r0
 800d3a4:	b09d      	sub	sp, #116	; 0x74
 800d3a6:	b118      	cbz	r0, 800d3b0 <_vfiprintf_r+0x18>
 800d3a8:	6983      	ldr	r3, [r0, #24]
 800d3aa:	b90b      	cbnz	r3, 800d3b0 <_vfiprintf_r+0x18>
 800d3ac:	f7ff fed2 	bl	800d154 <__sinit>
 800d3b0:	4b89      	ldr	r3, [pc, #548]	; (800d5d8 <_vfiprintf_r+0x240>)
 800d3b2:	429d      	cmp	r5, r3
 800d3b4:	d11b      	bne.n	800d3ee <_vfiprintf_r+0x56>
 800d3b6:	6875      	ldr	r5, [r6, #4]
 800d3b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d3ba:	07d9      	lsls	r1, r3, #31
 800d3bc:	d405      	bmi.n	800d3ca <_vfiprintf_r+0x32>
 800d3be:	89ab      	ldrh	r3, [r5, #12]
 800d3c0:	059a      	lsls	r2, r3, #22
 800d3c2:	d402      	bmi.n	800d3ca <_vfiprintf_r+0x32>
 800d3c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d3c6:	f7ff ff63 	bl	800d290 <__retarget_lock_acquire_recursive>
 800d3ca:	89ab      	ldrh	r3, [r5, #12]
 800d3cc:	071b      	lsls	r3, r3, #28
 800d3ce:	d501      	bpl.n	800d3d4 <_vfiprintf_r+0x3c>
 800d3d0:	692b      	ldr	r3, [r5, #16]
 800d3d2:	b9eb      	cbnz	r3, 800d410 <_vfiprintf_r+0x78>
 800d3d4:	4629      	mov	r1, r5
 800d3d6:	4630      	mov	r0, r6
 800d3d8:	f000 fba4 	bl	800db24 <__swsetup_r>
 800d3dc:	b1c0      	cbz	r0, 800d410 <_vfiprintf_r+0x78>
 800d3de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d3e0:	07dc      	lsls	r4, r3, #31
 800d3e2:	d50e      	bpl.n	800d402 <_vfiprintf_r+0x6a>
 800d3e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3e8:	b01d      	add	sp, #116	; 0x74
 800d3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3ee:	4b7b      	ldr	r3, [pc, #492]	; (800d5dc <_vfiprintf_r+0x244>)
 800d3f0:	429d      	cmp	r5, r3
 800d3f2:	d101      	bne.n	800d3f8 <_vfiprintf_r+0x60>
 800d3f4:	68b5      	ldr	r5, [r6, #8]
 800d3f6:	e7df      	b.n	800d3b8 <_vfiprintf_r+0x20>
 800d3f8:	4b79      	ldr	r3, [pc, #484]	; (800d5e0 <_vfiprintf_r+0x248>)
 800d3fa:	429d      	cmp	r5, r3
 800d3fc:	bf08      	it	eq
 800d3fe:	68f5      	ldreq	r5, [r6, #12]
 800d400:	e7da      	b.n	800d3b8 <_vfiprintf_r+0x20>
 800d402:	89ab      	ldrh	r3, [r5, #12]
 800d404:	0598      	lsls	r0, r3, #22
 800d406:	d4ed      	bmi.n	800d3e4 <_vfiprintf_r+0x4c>
 800d408:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d40a:	f7ff ff42 	bl	800d292 <__retarget_lock_release_recursive>
 800d40e:	e7e9      	b.n	800d3e4 <_vfiprintf_r+0x4c>
 800d410:	2300      	movs	r3, #0
 800d412:	9309      	str	r3, [sp, #36]	; 0x24
 800d414:	2320      	movs	r3, #32
 800d416:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d41a:	2330      	movs	r3, #48	; 0x30
 800d41c:	f04f 0901 	mov.w	r9, #1
 800d420:	f8cd 800c 	str.w	r8, [sp, #12]
 800d424:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800d5e4 <_vfiprintf_r+0x24c>
 800d428:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d42c:	4623      	mov	r3, r4
 800d42e:	469a      	mov	sl, r3
 800d430:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d434:	b10a      	cbz	r2, 800d43a <_vfiprintf_r+0xa2>
 800d436:	2a25      	cmp	r2, #37	; 0x25
 800d438:	d1f9      	bne.n	800d42e <_vfiprintf_r+0x96>
 800d43a:	ebba 0b04 	subs.w	fp, sl, r4
 800d43e:	d00b      	beq.n	800d458 <_vfiprintf_r+0xc0>
 800d440:	465b      	mov	r3, fp
 800d442:	4622      	mov	r2, r4
 800d444:	4629      	mov	r1, r5
 800d446:	4630      	mov	r0, r6
 800d448:	f7ff ff93 	bl	800d372 <__sfputs_r>
 800d44c:	3001      	adds	r0, #1
 800d44e:	f000 80aa 	beq.w	800d5a6 <_vfiprintf_r+0x20e>
 800d452:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d454:	445a      	add	r2, fp
 800d456:	9209      	str	r2, [sp, #36]	; 0x24
 800d458:	f89a 3000 	ldrb.w	r3, [sl]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	f000 80a2 	beq.w	800d5a6 <_vfiprintf_r+0x20e>
 800d462:	2300      	movs	r3, #0
 800d464:	f04f 32ff 	mov.w	r2, #4294967295
 800d468:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d46c:	f10a 0a01 	add.w	sl, sl, #1
 800d470:	9304      	str	r3, [sp, #16]
 800d472:	9307      	str	r3, [sp, #28]
 800d474:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d478:	931a      	str	r3, [sp, #104]	; 0x68
 800d47a:	4654      	mov	r4, sl
 800d47c:	2205      	movs	r2, #5
 800d47e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d482:	4858      	ldr	r0, [pc, #352]	; (800d5e4 <_vfiprintf_r+0x24c>)
 800d484:	f000 fd04 	bl	800de90 <memchr>
 800d488:	9a04      	ldr	r2, [sp, #16]
 800d48a:	b9d8      	cbnz	r0, 800d4c4 <_vfiprintf_r+0x12c>
 800d48c:	06d1      	lsls	r1, r2, #27
 800d48e:	bf44      	itt	mi
 800d490:	2320      	movmi	r3, #32
 800d492:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d496:	0713      	lsls	r3, r2, #28
 800d498:	bf44      	itt	mi
 800d49a:	232b      	movmi	r3, #43	; 0x2b
 800d49c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4a0:	f89a 3000 	ldrb.w	r3, [sl]
 800d4a4:	2b2a      	cmp	r3, #42	; 0x2a
 800d4a6:	d015      	beq.n	800d4d4 <_vfiprintf_r+0x13c>
 800d4a8:	4654      	mov	r4, sl
 800d4aa:	2000      	movs	r0, #0
 800d4ac:	f04f 0c0a 	mov.w	ip, #10
 800d4b0:	9a07      	ldr	r2, [sp, #28]
 800d4b2:	4621      	mov	r1, r4
 800d4b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4b8:	3b30      	subs	r3, #48	; 0x30
 800d4ba:	2b09      	cmp	r3, #9
 800d4bc:	d94e      	bls.n	800d55c <_vfiprintf_r+0x1c4>
 800d4be:	b1b0      	cbz	r0, 800d4ee <_vfiprintf_r+0x156>
 800d4c0:	9207      	str	r2, [sp, #28]
 800d4c2:	e014      	b.n	800d4ee <_vfiprintf_r+0x156>
 800d4c4:	eba0 0308 	sub.w	r3, r0, r8
 800d4c8:	fa09 f303 	lsl.w	r3, r9, r3
 800d4cc:	4313      	orrs	r3, r2
 800d4ce:	46a2      	mov	sl, r4
 800d4d0:	9304      	str	r3, [sp, #16]
 800d4d2:	e7d2      	b.n	800d47a <_vfiprintf_r+0xe2>
 800d4d4:	9b03      	ldr	r3, [sp, #12]
 800d4d6:	1d19      	adds	r1, r3, #4
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	9103      	str	r1, [sp, #12]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	bfbb      	ittet	lt
 800d4e0:	425b      	neglt	r3, r3
 800d4e2:	f042 0202 	orrlt.w	r2, r2, #2
 800d4e6:	9307      	strge	r3, [sp, #28]
 800d4e8:	9307      	strlt	r3, [sp, #28]
 800d4ea:	bfb8      	it	lt
 800d4ec:	9204      	strlt	r2, [sp, #16]
 800d4ee:	7823      	ldrb	r3, [r4, #0]
 800d4f0:	2b2e      	cmp	r3, #46	; 0x2e
 800d4f2:	d10c      	bne.n	800d50e <_vfiprintf_r+0x176>
 800d4f4:	7863      	ldrb	r3, [r4, #1]
 800d4f6:	2b2a      	cmp	r3, #42	; 0x2a
 800d4f8:	d135      	bne.n	800d566 <_vfiprintf_r+0x1ce>
 800d4fa:	9b03      	ldr	r3, [sp, #12]
 800d4fc:	3402      	adds	r4, #2
 800d4fe:	1d1a      	adds	r2, r3, #4
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	9203      	str	r2, [sp, #12]
 800d504:	2b00      	cmp	r3, #0
 800d506:	bfb8      	it	lt
 800d508:	f04f 33ff 	movlt.w	r3, #4294967295
 800d50c:	9305      	str	r3, [sp, #20]
 800d50e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d5f4 <_vfiprintf_r+0x25c>
 800d512:	2203      	movs	r2, #3
 800d514:	4650      	mov	r0, sl
 800d516:	7821      	ldrb	r1, [r4, #0]
 800d518:	f000 fcba 	bl	800de90 <memchr>
 800d51c:	b140      	cbz	r0, 800d530 <_vfiprintf_r+0x198>
 800d51e:	2340      	movs	r3, #64	; 0x40
 800d520:	eba0 000a 	sub.w	r0, r0, sl
 800d524:	fa03 f000 	lsl.w	r0, r3, r0
 800d528:	9b04      	ldr	r3, [sp, #16]
 800d52a:	3401      	adds	r4, #1
 800d52c:	4303      	orrs	r3, r0
 800d52e:	9304      	str	r3, [sp, #16]
 800d530:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d534:	2206      	movs	r2, #6
 800d536:	482c      	ldr	r0, [pc, #176]	; (800d5e8 <_vfiprintf_r+0x250>)
 800d538:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d53c:	f000 fca8 	bl	800de90 <memchr>
 800d540:	2800      	cmp	r0, #0
 800d542:	d03f      	beq.n	800d5c4 <_vfiprintf_r+0x22c>
 800d544:	4b29      	ldr	r3, [pc, #164]	; (800d5ec <_vfiprintf_r+0x254>)
 800d546:	bb1b      	cbnz	r3, 800d590 <_vfiprintf_r+0x1f8>
 800d548:	9b03      	ldr	r3, [sp, #12]
 800d54a:	3307      	adds	r3, #7
 800d54c:	f023 0307 	bic.w	r3, r3, #7
 800d550:	3308      	adds	r3, #8
 800d552:	9303      	str	r3, [sp, #12]
 800d554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d556:	443b      	add	r3, r7
 800d558:	9309      	str	r3, [sp, #36]	; 0x24
 800d55a:	e767      	b.n	800d42c <_vfiprintf_r+0x94>
 800d55c:	460c      	mov	r4, r1
 800d55e:	2001      	movs	r0, #1
 800d560:	fb0c 3202 	mla	r2, ip, r2, r3
 800d564:	e7a5      	b.n	800d4b2 <_vfiprintf_r+0x11a>
 800d566:	2300      	movs	r3, #0
 800d568:	f04f 0c0a 	mov.w	ip, #10
 800d56c:	4619      	mov	r1, r3
 800d56e:	3401      	adds	r4, #1
 800d570:	9305      	str	r3, [sp, #20]
 800d572:	4620      	mov	r0, r4
 800d574:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d578:	3a30      	subs	r2, #48	; 0x30
 800d57a:	2a09      	cmp	r2, #9
 800d57c:	d903      	bls.n	800d586 <_vfiprintf_r+0x1ee>
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d0c5      	beq.n	800d50e <_vfiprintf_r+0x176>
 800d582:	9105      	str	r1, [sp, #20]
 800d584:	e7c3      	b.n	800d50e <_vfiprintf_r+0x176>
 800d586:	4604      	mov	r4, r0
 800d588:	2301      	movs	r3, #1
 800d58a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d58e:	e7f0      	b.n	800d572 <_vfiprintf_r+0x1da>
 800d590:	ab03      	add	r3, sp, #12
 800d592:	9300      	str	r3, [sp, #0]
 800d594:	462a      	mov	r2, r5
 800d596:	4630      	mov	r0, r6
 800d598:	4b15      	ldr	r3, [pc, #84]	; (800d5f0 <_vfiprintf_r+0x258>)
 800d59a:	a904      	add	r1, sp, #16
 800d59c:	f3af 8000 	nop.w
 800d5a0:	4607      	mov	r7, r0
 800d5a2:	1c78      	adds	r0, r7, #1
 800d5a4:	d1d6      	bne.n	800d554 <_vfiprintf_r+0x1bc>
 800d5a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5a8:	07d9      	lsls	r1, r3, #31
 800d5aa:	d405      	bmi.n	800d5b8 <_vfiprintf_r+0x220>
 800d5ac:	89ab      	ldrh	r3, [r5, #12]
 800d5ae:	059a      	lsls	r2, r3, #22
 800d5b0:	d402      	bmi.n	800d5b8 <_vfiprintf_r+0x220>
 800d5b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d5b4:	f7ff fe6d 	bl	800d292 <__retarget_lock_release_recursive>
 800d5b8:	89ab      	ldrh	r3, [r5, #12]
 800d5ba:	065b      	lsls	r3, r3, #25
 800d5bc:	f53f af12 	bmi.w	800d3e4 <_vfiprintf_r+0x4c>
 800d5c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d5c2:	e711      	b.n	800d3e8 <_vfiprintf_r+0x50>
 800d5c4:	ab03      	add	r3, sp, #12
 800d5c6:	9300      	str	r3, [sp, #0]
 800d5c8:	462a      	mov	r2, r5
 800d5ca:	4630      	mov	r0, r6
 800d5cc:	4b08      	ldr	r3, [pc, #32]	; (800d5f0 <_vfiprintf_r+0x258>)
 800d5ce:	a904      	add	r1, sp, #16
 800d5d0:	f000 f882 	bl	800d6d8 <_printf_i>
 800d5d4:	e7e4      	b.n	800d5a0 <_vfiprintf_r+0x208>
 800d5d6:	bf00      	nop
 800d5d8:	0800f334 	.word	0x0800f334
 800d5dc:	0800f354 	.word	0x0800f354
 800d5e0:	0800f314 	.word	0x0800f314
 800d5e4:	0800f374 	.word	0x0800f374
 800d5e8:	0800f37e 	.word	0x0800f37e
 800d5ec:	00000000 	.word	0x00000000
 800d5f0:	0800d373 	.word	0x0800d373
 800d5f4:	0800f37a 	.word	0x0800f37a

0800d5f8 <_printf_common>:
 800d5f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5fc:	4616      	mov	r6, r2
 800d5fe:	4699      	mov	r9, r3
 800d600:	688a      	ldr	r2, [r1, #8]
 800d602:	690b      	ldr	r3, [r1, #16]
 800d604:	4607      	mov	r7, r0
 800d606:	4293      	cmp	r3, r2
 800d608:	bfb8      	it	lt
 800d60a:	4613      	movlt	r3, r2
 800d60c:	6033      	str	r3, [r6, #0]
 800d60e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d612:	460c      	mov	r4, r1
 800d614:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d618:	b10a      	cbz	r2, 800d61e <_printf_common+0x26>
 800d61a:	3301      	adds	r3, #1
 800d61c:	6033      	str	r3, [r6, #0]
 800d61e:	6823      	ldr	r3, [r4, #0]
 800d620:	0699      	lsls	r1, r3, #26
 800d622:	bf42      	ittt	mi
 800d624:	6833      	ldrmi	r3, [r6, #0]
 800d626:	3302      	addmi	r3, #2
 800d628:	6033      	strmi	r3, [r6, #0]
 800d62a:	6825      	ldr	r5, [r4, #0]
 800d62c:	f015 0506 	ands.w	r5, r5, #6
 800d630:	d106      	bne.n	800d640 <_printf_common+0x48>
 800d632:	f104 0a19 	add.w	sl, r4, #25
 800d636:	68e3      	ldr	r3, [r4, #12]
 800d638:	6832      	ldr	r2, [r6, #0]
 800d63a:	1a9b      	subs	r3, r3, r2
 800d63c:	42ab      	cmp	r3, r5
 800d63e:	dc28      	bgt.n	800d692 <_printf_common+0x9a>
 800d640:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d644:	1e13      	subs	r3, r2, #0
 800d646:	6822      	ldr	r2, [r4, #0]
 800d648:	bf18      	it	ne
 800d64a:	2301      	movne	r3, #1
 800d64c:	0692      	lsls	r2, r2, #26
 800d64e:	d42d      	bmi.n	800d6ac <_printf_common+0xb4>
 800d650:	4649      	mov	r1, r9
 800d652:	4638      	mov	r0, r7
 800d654:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d658:	47c0      	blx	r8
 800d65a:	3001      	adds	r0, #1
 800d65c:	d020      	beq.n	800d6a0 <_printf_common+0xa8>
 800d65e:	6823      	ldr	r3, [r4, #0]
 800d660:	68e5      	ldr	r5, [r4, #12]
 800d662:	f003 0306 	and.w	r3, r3, #6
 800d666:	2b04      	cmp	r3, #4
 800d668:	bf18      	it	ne
 800d66a:	2500      	movne	r5, #0
 800d66c:	6832      	ldr	r2, [r6, #0]
 800d66e:	f04f 0600 	mov.w	r6, #0
 800d672:	68a3      	ldr	r3, [r4, #8]
 800d674:	bf08      	it	eq
 800d676:	1aad      	subeq	r5, r5, r2
 800d678:	6922      	ldr	r2, [r4, #16]
 800d67a:	bf08      	it	eq
 800d67c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d680:	4293      	cmp	r3, r2
 800d682:	bfc4      	itt	gt
 800d684:	1a9b      	subgt	r3, r3, r2
 800d686:	18ed      	addgt	r5, r5, r3
 800d688:	341a      	adds	r4, #26
 800d68a:	42b5      	cmp	r5, r6
 800d68c:	d11a      	bne.n	800d6c4 <_printf_common+0xcc>
 800d68e:	2000      	movs	r0, #0
 800d690:	e008      	b.n	800d6a4 <_printf_common+0xac>
 800d692:	2301      	movs	r3, #1
 800d694:	4652      	mov	r2, sl
 800d696:	4649      	mov	r1, r9
 800d698:	4638      	mov	r0, r7
 800d69a:	47c0      	blx	r8
 800d69c:	3001      	adds	r0, #1
 800d69e:	d103      	bne.n	800d6a8 <_printf_common+0xb0>
 800d6a0:	f04f 30ff 	mov.w	r0, #4294967295
 800d6a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6a8:	3501      	adds	r5, #1
 800d6aa:	e7c4      	b.n	800d636 <_printf_common+0x3e>
 800d6ac:	2030      	movs	r0, #48	; 0x30
 800d6ae:	18e1      	adds	r1, r4, r3
 800d6b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d6b4:	1c5a      	adds	r2, r3, #1
 800d6b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d6ba:	4422      	add	r2, r4
 800d6bc:	3302      	adds	r3, #2
 800d6be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d6c2:	e7c5      	b.n	800d650 <_printf_common+0x58>
 800d6c4:	2301      	movs	r3, #1
 800d6c6:	4622      	mov	r2, r4
 800d6c8:	4649      	mov	r1, r9
 800d6ca:	4638      	mov	r0, r7
 800d6cc:	47c0      	blx	r8
 800d6ce:	3001      	adds	r0, #1
 800d6d0:	d0e6      	beq.n	800d6a0 <_printf_common+0xa8>
 800d6d2:	3601      	adds	r6, #1
 800d6d4:	e7d9      	b.n	800d68a <_printf_common+0x92>
	...

0800d6d8 <_printf_i>:
 800d6d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d6dc:	460c      	mov	r4, r1
 800d6de:	7e27      	ldrb	r7, [r4, #24]
 800d6e0:	4691      	mov	r9, r2
 800d6e2:	2f78      	cmp	r7, #120	; 0x78
 800d6e4:	4680      	mov	r8, r0
 800d6e6:	469a      	mov	sl, r3
 800d6e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d6ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d6ee:	d807      	bhi.n	800d700 <_printf_i+0x28>
 800d6f0:	2f62      	cmp	r7, #98	; 0x62
 800d6f2:	d80a      	bhi.n	800d70a <_printf_i+0x32>
 800d6f4:	2f00      	cmp	r7, #0
 800d6f6:	f000 80d9 	beq.w	800d8ac <_printf_i+0x1d4>
 800d6fa:	2f58      	cmp	r7, #88	; 0x58
 800d6fc:	f000 80a4 	beq.w	800d848 <_printf_i+0x170>
 800d700:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d704:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d708:	e03a      	b.n	800d780 <_printf_i+0xa8>
 800d70a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d70e:	2b15      	cmp	r3, #21
 800d710:	d8f6      	bhi.n	800d700 <_printf_i+0x28>
 800d712:	a001      	add	r0, pc, #4	; (adr r0, 800d718 <_printf_i+0x40>)
 800d714:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d718:	0800d771 	.word	0x0800d771
 800d71c:	0800d785 	.word	0x0800d785
 800d720:	0800d701 	.word	0x0800d701
 800d724:	0800d701 	.word	0x0800d701
 800d728:	0800d701 	.word	0x0800d701
 800d72c:	0800d701 	.word	0x0800d701
 800d730:	0800d785 	.word	0x0800d785
 800d734:	0800d701 	.word	0x0800d701
 800d738:	0800d701 	.word	0x0800d701
 800d73c:	0800d701 	.word	0x0800d701
 800d740:	0800d701 	.word	0x0800d701
 800d744:	0800d893 	.word	0x0800d893
 800d748:	0800d7b5 	.word	0x0800d7b5
 800d74c:	0800d875 	.word	0x0800d875
 800d750:	0800d701 	.word	0x0800d701
 800d754:	0800d701 	.word	0x0800d701
 800d758:	0800d8b5 	.word	0x0800d8b5
 800d75c:	0800d701 	.word	0x0800d701
 800d760:	0800d7b5 	.word	0x0800d7b5
 800d764:	0800d701 	.word	0x0800d701
 800d768:	0800d701 	.word	0x0800d701
 800d76c:	0800d87d 	.word	0x0800d87d
 800d770:	680b      	ldr	r3, [r1, #0]
 800d772:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d776:	1d1a      	adds	r2, r3, #4
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	600a      	str	r2, [r1, #0]
 800d77c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d780:	2301      	movs	r3, #1
 800d782:	e0a4      	b.n	800d8ce <_printf_i+0x1f6>
 800d784:	6825      	ldr	r5, [r4, #0]
 800d786:	6808      	ldr	r0, [r1, #0]
 800d788:	062e      	lsls	r6, r5, #24
 800d78a:	f100 0304 	add.w	r3, r0, #4
 800d78e:	d50a      	bpl.n	800d7a6 <_printf_i+0xce>
 800d790:	6805      	ldr	r5, [r0, #0]
 800d792:	600b      	str	r3, [r1, #0]
 800d794:	2d00      	cmp	r5, #0
 800d796:	da03      	bge.n	800d7a0 <_printf_i+0xc8>
 800d798:	232d      	movs	r3, #45	; 0x2d
 800d79a:	426d      	negs	r5, r5
 800d79c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7a0:	230a      	movs	r3, #10
 800d7a2:	485e      	ldr	r0, [pc, #376]	; (800d91c <_printf_i+0x244>)
 800d7a4:	e019      	b.n	800d7da <_printf_i+0x102>
 800d7a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d7aa:	6805      	ldr	r5, [r0, #0]
 800d7ac:	600b      	str	r3, [r1, #0]
 800d7ae:	bf18      	it	ne
 800d7b0:	b22d      	sxthne	r5, r5
 800d7b2:	e7ef      	b.n	800d794 <_printf_i+0xbc>
 800d7b4:	680b      	ldr	r3, [r1, #0]
 800d7b6:	6825      	ldr	r5, [r4, #0]
 800d7b8:	1d18      	adds	r0, r3, #4
 800d7ba:	6008      	str	r0, [r1, #0]
 800d7bc:	0628      	lsls	r0, r5, #24
 800d7be:	d501      	bpl.n	800d7c4 <_printf_i+0xec>
 800d7c0:	681d      	ldr	r5, [r3, #0]
 800d7c2:	e002      	b.n	800d7ca <_printf_i+0xf2>
 800d7c4:	0669      	lsls	r1, r5, #25
 800d7c6:	d5fb      	bpl.n	800d7c0 <_printf_i+0xe8>
 800d7c8:	881d      	ldrh	r5, [r3, #0]
 800d7ca:	2f6f      	cmp	r7, #111	; 0x6f
 800d7cc:	bf0c      	ite	eq
 800d7ce:	2308      	moveq	r3, #8
 800d7d0:	230a      	movne	r3, #10
 800d7d2:	4852      	ldr	r0, [pc, #328]	; (800d91c <_printf_i+0x244>)
 800d7d4:	2100      	movs	r1, #0
 800d7d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d7da:	6866      	ldr	r6, [r4, #4]
 800d7dc:	2e00      	cmp	r6, #0
 800d7de:	bfa8      	it	ge
 800d7e0:	6821      	ldrge	r1, [r4, #0]
 800d7e2:	60a6      	str	r6, [r4, #8]
 800d7e4:	bfa4      	itt	ge
 800d7e6:	f021 0104 	bicge.w	r1, r1, #4
 800d7ea:	6021      	strge	r1, [r4, #0]
 800d7ec:	b90d      	cbnz	r5, 800d7f2 <_printf_i+0x11a>
 800d7ee:	2e00      	cmp	r6, #0
 800d7f0:	d04d      	beq.n	800d88e <_printf_i+0x1b6>
 800d7f2:	4616      	mov	r6, r2
 800d7f4:	fbb5 f1f3 	udiv	r1, r5, r3
 800d7f8:	fb03 5711 	mls	r7, r3, r1, r5
 800d7fc:	5dc7      	ldrb	r7, [r0, r7]
 800d7fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d802:	462f      	mov	r7, r5
 800d804:	42bb      	cmp	r3, r7
 800d806:	460d      	mov	r5, r1
 800d808:	d9f4      	bls.n	800d7f4 <_printf_i+0x11c>
 800d80a:	2b08      	cmp	r3, #8
 800d80c:	d10b      	bne.n	800d826 <_printf_i+0x14e>
 800d80e:	6823      	ldr	r3, [r4, #0]
 800d810:	07df      	lsls	r7, r3, #31
 800d812:	d508      	bpl.n	800d826 <_printf_i+0x14e>
 800d814:	6923      	ldr	r3, [r4, #16]
 800d816:	6861      	ldr	r1, [r4, #4]
 800d818:	4299      	cmp	r1, r3
 800d81a:	bfde      	ittt	le
 800d81c:	2330      	movle	r3, #48	; 0x30
 800d81e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d822:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d826:	1b92      	subs	r2, r2, r6
 800d828:	6122      	str	r2, [r4, #16]
 800d82a:	464b      	mov	r3, r9
 800d82c:	4621      	mov	r1, r4
 800d82e:	4640      	mov	r0, r8
 800d830:	f8cd a000 	str.w	sl, [sp]
 800d834:	aa03      	add	r2, sp, #12
 800d836:	f7ff fedf 	bl	800d5f8 <_printf_common>
 800d83a:	3001      	adds	r0, #1
 800d83c:	d14c      	bne.n	800d8d8 <_printf_i+0x200>
 800d83e:	f04f 30ff 	mov.w	r0, #4294967295
 800d842:	b004      	add	sp, #16
 800d844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d848:	4834      	ldr	r0, [pc, #208]	; (800d91c <_printf_i+0x244>)
 800d84a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d84e:	680e      	ldr	r6, [r1, #0]
 800d850:	6823      	ldr	r3, [r4, #0]
 800d852:	f856 5b04 	ldr.w	r5, [r6], #4
 800d856:	061f      	lsls	r7, r3, #24
 800d858:	600e      	str	r6, [r1, #0]
 800d85a:	d514      	bpl.n	800d886 <_printf_i+0x1ae>
 800d85c:	07d9      	lsls	r1, r3, #31
 800d85e:	bf44      	itt	mi
 800d860:	f043 0320 	orrmi.w	r3, r3, #32
 800d864:	6023      	strmi	r3, [r4, #0]
 800d866:	b91d      	cbnz	r5, 800d870 <_printf_i+0x198>
 800d868:	6823      	ldr	r3, [r4, #0]
 800d86a:	f023 0320 	bic.w	r3, r3, #32
 800d86e:	6023      	str	r3, [r4, #0]
 800d870:	2310      	movs	r3, #16
 800d872:	e7af      	b.n	800d7d4 <_printf_i+0xfc>
 800d874:	6823      	ldr	r3, [r4, #0]
 800d876:	f043 0320 	orr.w	r3, r3, #32
 800d87a:	6023      	str	r3, [r4, #0]
 800d87c:	2378      	movs	r3, #120	; 0x78
 800d87e:	4828      	ldr	r0, [pc, #160]	; (800d920 <_printf_i+0x248>)
 800d880:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d884:	e7e3      	b.n	800d84e <_printf_i+0x176>
 800d886:	065e      	lsls	r6, r3, #25
 800d888:	bf48      	it	mi
 800d88a:	b2ad      	uxthmi	r5, r5
 800d88c:	e7e6      	b.n	800d85c <_printf_i+0x184>
 800d88e:	4616      	mov	r6, r2
 800d890:	e7bb      	b.n	800d80a <_printf_i+0x132>
 800d892:	680b      	ldr	r3, [r1, #0]
 800d894:	6826      	ldr	r6, [r4, #0]
 800d896:	1d1d      	adds	r5, r3, #4
 800d898:	6960      	ldr	r0, [r4, #20]
 800d89a:	600d      	str	r5, [r1, #0]
 800d89c:	0635      	lsls	r5, r6, #24
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	d501      	bpl.n	800d8a6 <_printf_i+0x1ce>
 800d8a2:	6018      	str	r0, [r3, #0]
 800d8a4:	e002      	b.n	800d8ac <_printf_i+0x1d4>
 800d8a6:	0671      	lsls	r1, r6, #25
 800d8a8:	d5fb      	bpl.n	800d8a2 <_printf_i+0x1ca>
 800d8aa:	8018      	strh	r0, [r3, #0]
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	4616      	mov	r6, r2
 800d8b0:	6123      	str	r3, [r4, #16]
 800d8b2:	e7ba      	b.n	800d82a <_printf_i+0x152>
 800d8b4:	680b      	ldr	r3, [r1, #0]
 800d8b6:	1d1a      	adds	r2, r3, #4
 800d8b8:	600a      	str	r2, [r1, #0]
 800d8ba:	681e      	ldr	r6, [r3, #0]
 800d8bc:	2100      	movs	r1, #0
 800d8be:	4630      	mov	r0, r6
 800d8c0:	6862      	ldr	r2, [r4, #4]
 800d8c2:	f000 fae5 	bl	800de90 <memchr>
 800d8c6:	b108      	cbz	r0, 800d8cc <_printf_i+0x1f4>
 800d8c8:	1b80      	subs	r0, r0, r6
 800d8ca:	6060      	str	r0, [r4, #4]
 800d8cc:	6863      	ldr	r3, [r4, #4]
 800d8ce:	6123      	str	r3, [r4, #16]
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d8d6:	e7a8      	b.n	800d82a <_printf_i+0x152>
 800d8d8:	4632      	mov	r2, r6
 800d8da:	4649      	mov	r1, r9
 800d8dc:	4640      	mov	r0, r8
 800d8de:	6923      	ldr	r3, [r4, #16]
 800d8e0:	47d0      	blx	sl
 800d8e2:	3001      	adds	r0, #1
 800d8e4:	d0ab      	beq.n	800d83e <_printf_i+0x166>
 800d8e6:	6823      	ldr	r3, [r4, #0]
 800d8e8:	079b      	lsls	r3, r3, #30
 800d8ea:	d413      	bmi.n	800d914 <_printf_i+0x23c>
 800d8ec:	68e0      	ldr	r0, [r4, #12]
 800d8ee:	9b03      	ldr	r3, [sp, #12]
 800d8f0:	4298      	cmp	r0, r3
 800d8f2:	bfb8      	it	lt
 800d8f4:	4618      	movlt	r0, r3
 800d8f6:	e7a4      	b.n	800d842 <_printf_i+0x16a>
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	4632      	mov	r2, r6
 800d8fc:	4649      	mov	r1, r9
 800d8fe:	4640      	mov	r0, r8
 800d900:	47d0      	blx	sl
 800d902:	3001      	adds	r0, #1
 800d904:	d09b      	beq.n	800d83e <_printf_i+0x166>
 800d906:	3501      	adds	r5, #1
 800d908:	68e3      	ldr	r3, [r4, #12]
 800d90a:	9903      	ldr	r1, [sp, #12]
 800d90c:	1a5b      	subs	r3, r3, r1
 800d90e:	42ab      	cmp	r3, r5
 800d910:	dcf2      	bgt.n	800d8f8 <_printf_i+0x220>
 800d912:	e7eb      	b.n	800d8ec <_printf_i+0x214>
 800d914:	2500      	movs	r5, #0
 800d916:	f104 0619 	add.w	r6, r4, #25
 800d91a:	e7f5      	b.n	800d908 <_printf_i+0x230>
 800d91c:	0800f385 	.word	0x0800f385
 800d920:	0800f396 	.word	0x0800f396

0800d924 <_putc_r>:
 800d924:	b570      	push	{r4, r5, r6, lr}
 800d926:	460d      	mov	r5, r1
 800d928:	4614      	mov	r4, r2
 800d92a:	4606      	mov	r6, r0
 800d92c:	b118      	cbz	r0, 800d936 <_putc_r+0x12>
 800d92e:	6983      	ldr	r3, [r0, #24]
 800d930:	b90b      	cbnz	r3, 800d936 <_putc_r+0x12>
 800d932:	f7ff fc0f 	bl	800d154 <__sinit>
 800d936:	4b1c      	ldr	r3, [pc, #112]	; (800d9a8 <_putc_r+0x84>)
 800d938:	429c      	cmp	r4, r3
 800d93a:	d124      	bne.n	800d986 <_putc_r+0x62>
 800d93c:	6874      	ldr	r4, [r6, #4]
 800d93e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d940:	07d8      	lsls	r0, r3, #31
 800d942:	d405      	bmi.n	800d950 <_putc_r+0x2c>
 800d944:	89a3      	ldrh	r3, [r4, #12]
 800d946:	0599      	lsls	r1, r3, #22
 800d948:	d402      	bmi.n	800d950 <_putc_r+0x2c>
 800d94a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d94c:	f7ff fca0 	bl	800d290 <__retarget_lock_acquire_recursive>
 800d950:	68a3      	ldr	r3, [r4, #8]
 800d952:	3b01      	subs	r3, #1
 800d954:	2b00      	cmp	r3, #0
 800d956:	60a3      	str	r3, [r4, #8]
 800d958:	da05      	bge.n	800d966 <_putc_r+0x42>
 800d95a:	69a2      	ldr	r2, [r4, #24]
 800d95c:	4293      	cmp	r3, r2
 800d95e:	db1c      	blt.n	800d99a <_putc_r+0x76>
 800d960:	b2eb      	uxtb	r3, r5
 800d962:	2b0a      	cmp	r3, #10
 800d964:	d019      	beq.n	800d99a <_putc_r+0x76>
 800d966:	6823      	ldr	r3, [r4, #0]
 800d968:	1c5a      	adds	r2, r3, #1
 800d96a:	6022      	str	r2, [r4, #0]
 800d96c:	701d      	strb	r5, [r3, #0]
 800d96e:	b2ed      	uxtb	r5, r5
 800d970:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d972:	07da      	lsls	r2, r3, #31
 800d974:	d405      	bmi.n	800d982 <_putc_r+0x5e>
 800d976:	89a3      	ldrh	r3, [r4, #12]
 800d978:	059b      	lsls	r3, r3, #22
 800d97a:	d402      	bmi.n	800d982 <_putc_r+0x5e>
 800d97c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d97e:	f7ff fc88 	bl	800d292 <__retarget_lock_release_recursive>
 800d982:	4628      	mov	r0, r5
 800d984:	bd70      	pop	{r4, r5, r6, pc}
 800d986:	4b09      	ldr	r3, [pc, #36]	; (800d9ac <_putc_r+0x88>)
 800d988:	429c      	cmp	r4, r3
 800d98a:	d101      	bne.n	800d990 <_putc_r+0x6c>
 800d98c:	68b4      	ldr	r4, [r6, #8]
 800d98e:	e7d6      	b.n	800d93e <_putc_r+0x1a>
 800d990:	4b07      	ldr	r3, [pc, #28]	; (800d9b0 <_putc_r+0x8c>)
 800d992:	429c      	cmp	r4, r3
 800d994:	bf08      	it	eq
 800d996:	68f4      	ldreq	r4, [r6, #12]
 800d998:	e7d1      	b.n	800d93e <_putc_r+0x1a>
 800d99a:	4629      	mov	r1, r5
 800d99c:	4622      	mov	r2, r4
 800d99e:	4630      	mov	r0, r6
 800d9a0:	f000 f85c 	bl	800da5c <__swbuf_r>
 800d9a4:	4605      	mov	r5, r0
 800d9a6:	e7e3      	b.n	800d970 <_putc_r+0x4c>
 800d9a8:	0800f334 	.word	0x0800f334
 800d9ac:	0800f354 	.word	0x0800f354
 800d9b0:	0800f314 	.word	0x0800f314

0800d9b4 <_sbrk_r>:
 800d9b4:	b538      	push	{r3, r4, r5, lr}
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	4d05      	ldr	r5, [pc, #20]	; (800d9d0 <_sbrk_r+0x1c>)
 800d9ba:	4604      	mov	r4, r0
 800d9bc:	4608      	mov	r0, r1
 800d9be:	602b      	str	r3, [r5, #0]
 800d9c0:	f7f7 fb02 	bl	8004fc8 <_sbrk>
 800d9c4:	1c43      	adds	r3, r0, #1
 800d9c6:	d102      	bne.n	800d9ce <_sbrk_r+0x1a>
 800d9c8:	682b      	ldr	r3, [r5, #0]
 800d9ca:	b103      	cbz	r3, 800d9ce <_sbrk_r+0x1a>
 800d9cc:	6023      	str	r3, [r4, #0]
 800d9ce:	bd38      	pop	{r3, r4, r5, pc}
 800d9d0:	20003074 	.word	0x20003074

0800d9d4 <__sread>:
 800d9d4:	b510      	push	{r4, lr}
 800d9d6:	460c      	mov	r4, r1
 800d9d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9dc:	f000 fabe 	bl	800df5c <_read_r>
 800d9e0:	2800      	cmp	r0, #0
 800d9e2:	bfab      	itete	ge
 800d9e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d9e6:	89a3      	ldrhlt	r3, [r4, #12]
 800d9e8:	181b      	addge	r3, r3, r0
 800d9ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d9ee:	bfac      	ite	ge
 800d9f0:	6563      	strge	r3, [r4, #84]	; 0x54
 800d9f2:	81a3      	strhlt	r3, [r4, #12]
 800d9f4:	bd10      	pop	{r4, pc}

0800d9f6 <__swrite>:
 800d9f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9fa:	461f      	mov	r7, r3
 800d9fc:	898b      	ldrh	r3, [r1, #12]
 800d9fe:	4605      	mov	r5, r0
 800da00:	05db      	lsls	r3, r3, #23
 800da02:	460c      	mov	r4, r1
 800da04:	4616      	mov	r6, r2
 800da06:	d505      	bpl.n	800da14 <__swrite+0x1e>
 800da08:	2302      	movs	r3, #2
 800da0a:	2200      	movs	r2, #0
 800da0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da10:	f000 f9c8 	bl	800dda4 <_lseek_r>
 800da14:	89a3      	ldrh	r3, [r4, #12]
 800da16:	4632      	mov	r2, r6
 800da18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800da1c:	81a3      	strh	r3, [r4, #12]
 800da1e:	4628      	mov	r0, r5
 800da20:	463b      	mov	r3, r7
 800da22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da2a:	f000 b869 	b.w	800db00 <_write_r>

0800da2e <__sseek>:
 800da2e:	b510      	push	{r4, lr}
 800da30:	460c      	mov	r4, r1
 800da32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da36:	f000 f9b5 	bl	800dda4 <_lseek_r>
 800da3a:	1c43      	adds	r3, r0, #1
 800da3c:	89a3      	ldrh	r3, [r4, #12]
 800da3e:	bf15      	itete	ne
 800da40:	6560      	strne	r0, [r4, #84]	; 0x54
 800da42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800da46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800da4a:	81a3      	strheq	r3, [r4, #12]
 800da4c:	bf18      	it	ne
 800da4e:	81a3      	strhne	r3, [r4, #12]
 800da50:	bd10      	pop	{r4, pc}

0800da52 <__sclose>:
 800da52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da56:	f000 b8d3 	b.w	800dc00 <_close_r>
	...

0800da5c <__swbuf_r>:
 800da5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da5e:	460e      	mov	r6, r1
 800da60:	4614      	mov	r4, r2
 800da62:	4605      	mov	r5, r0
 800da64:	b118      	cbz	r0, 800da6e <__swbuf_r+0x12>
 800da66:	6983      	ldr	r3, [r0, #24]
 800da68:	b90b      	cbnz	r3, 800da6e <__swbuf_r+0x12>
 800da6a:	f7ff fb73 	bl	800d154 <__sinit>
 800da6e:	4b21      	ldr	r3, [pc, #132]	; (800daf4 <__swbuf_r+0x98>)
 800da70:	429c      	cmp	r4, r3
 800da72:	d12b      	bne.n	800dacc <__swbuf_r+0x70>
 800da74:	686c      	ldr	r4, [r5, #4]
 800da76:	69a3      	ldr	r3, [r4, #24]
 800da78:	60a3      	str	r3, [r4, #8]
 800da7a:	89a3      	ldrh	r3, [r4, #12]
 800da7c:	071a      	lsls	r2, r3, #28
 800da7e:	d52f      	bpl.n	800dae0 <__swbuf_r+0x84>
 800da80:	6923      	ldr	r3, [r4, #16]
 800da82:	b36b      	cbz	r3, 800dae0 <__swbuf_r+0x84>
 800da84:	6923      	ldr	r3, [r4, #16]
 800da86:	6820      	ldr	r0, [r4, #0]
 800da88:	b2f6      	uxtb	r6, r6
 800da8a:	1ac0      	subs	r0, r0, r3
 800da8c:	6963      	ldr	r3, [r4, #20]
 800da8e:	4637      	mov	r7, r6
 800da90:	4283      	cmp	r3, r0
 800da92:	dc04      	bgt.n	800da9e <__swbuf_r+0x42>
 800da94:	4621      	mov	r1, r4
 800da96:	4628      	mov	r0, r5
 800da98:	f000 f948 	bl	800dd2c <_fflush_r>
 800da9c:	bb30      	cbnz	r0, 800daec <__swbuf_r+0x90>
 800da9e:	68a3      	ldr	r3, [r4, #8]
 800daa0:	3001      	adds	r0, #1
 800daa2:	3b01      	subs	r3, #1
 800daa4:	60a3      	str	r3, [r4, #8]
 800daa6:	6823      	ldr	r3, [r4, #0]
 800daa8:	1c5a      	adds	r2, r3, #1
 800daaa:	6022      	str	r2, [r4, #0]
 800daac:	701e      	strb	r6, [r3, #0]
 800daae:	6963      	ldr	r3, [r4, #20]
 800dab0:	4283      	cmp	r3, r0
 800dab2:	d004      	beq.n	800dabe <__swbuf_r+0x62>
 800dab4:	89a3      	ldrh	r3, [r4, #12]
 800dab6:	07db      	lsls	r3, r3, #31
 800dab8:	d506      	bpl.n	800dac8 <__swbuf_r+0x6c>
 800daba:	2e0a      	cmp	r6, #10
 800dabc:	d104      	bne.n	800dac8 <__swbuf_r+0x6c>
 800dabe:	4621      	mov	r1, r4
 800dac0:	4628      	mov	r0, r5
 800dac2:	f000 f933 	bl	800dd2c <_fflush_r>
 800dac6:	b988      	cbnz	r0, 800daec <__swbuf_r+0x90>
 800dac8:	4638      	mov	r0, r7
 800daca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dacc:	4b0a      	ldr	r3, [pc, #40]	; (800daf8 <__swbuf_r+0x9c>)
 800dace:	429c      	cmp	r4, r3
 800dad0:	d101      	bne.n	800dad6 <__swbuf_r+0x7a>
 800dad2:	68ac      	ldr	r4, [r5, #8]
 800dad4:	e7cf      	b.n	800da76 <__swbuf_r+0x1a>
 800dad6:	4b09      	ldr	r3, [pc, #36]	; (800dafc <__swbuf_r+0xa0>)
 800dad8:	429c      	cmp	r4, r3
 800dada:	bf08      	it	eq
 800dadc:	68ec      	ldreq	r4, [r5, #12]
 800dade:	e7ca      	b.n	800da76 <__swbuf_r+0x1a>
 800dae0:	4621      	mov	r1, r4
 800dae2:	4628      	mov	r0, r5
 800dae4:	f000 f81e 	bl	800db24 <__swsetup_r>
 800dae8:	2800      	cmp	r0, #0
 800daea:	d0cb      	beq.n	800da84 <__swbuf_r+0x28>
 800daec:	f04f 37ff 	mov.w	r7, #4294967295
 800daf0:	e7ea      	b.n	800dac8 <__swbuf_r+0x6c>
 800daf2:	bf00      	nop
 800daf4:	0800f334 	.word	0x0800f334
 800daf8:	0800f354 	.word	0x0800f354
 800dafc:	0800f314 	.word	0x0800f314

0800db00 <_write_r>:
 800db00:	b538      	push	{r3, r4, r5, lr}
 800db02:	4604      	mov	r4, r0
 800db04:	4608      	mov	r0, r1
 800db06:	4611      	mov	r1, r2
 800db08:	2200      	movs	r2, #0
 800db0a:	4d05      	ldr	r5, [pc, #20]	; (800db20 <_write_r+0x20>)
 800db0c:	602a      	str	r2, [r5, #0]
 800db0e:	461a      	mov	r2, r3
 800db10:	f7f7 fa0d 	bl	8004f2e <_write>
 800db14:	1c43      	adds	r3, r0, #1
 800db16:	d102      	bne.n	800db1e <_write_r+0x1e>
 800db18:	682b      	ldr	r3, [r5, #0]
 800db1a:	b103      	cbz	r3, 800db1e <_write_r+0x1e>
 800db1c:	6023      	str	r3, [r4, #0]
 800db1e:	bd38      	pop	{r3, r4, r5, pc}
 800db20:	20003074 	.word	0x20003074

0800db24 <__swsetup_r>:
 800db24:	4b32      	ldr	r3, [pc, #200]	; (800dbf0 <__swsetup_r+0xcc>)
 800db26:	b570      	push	{r4, r5, r6, lr}
 800db28:	681d      	ldr	r5, [r3, #0]
 800db2a:	4606      	mov	r6, r0
 800db2c:	460c      	mov	r4, r1
 800db2e:	b125      	cbz	r5, 800db3a <__swsetup_r+0x16>
 800db30:	69ab      	ldr	r3, [r5, #24]
 800db32:	b913      	cbnz	r3, 800db3a <__swsetup_r+0x16>
 800db34:	4628      	mov	r0, r5
 800db36:	f7ff fb0d 	bl	800d154 <__sinit>
 800db3a:	4b2e      	ldr	r3, [pc, #184]	; (800dbf4 <__swsetup_r+0xd0>)
 800db3c:	429c      	cmp	r4, r3
 800db3e:	d10f      	bne.n	800db60 <__swsetup_r+0x3c>
 800db40:	686c      	ldr	r4, [r5, #4]
 800db42:	89a3      	ldrh	r3, [r4, #12]
 800db44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db48:	0719      	lsls	r1, r3, #28
 800db4a:	d42c      	bmi.n	800dba6 <__swsetup_r+0x82>
 800db4c:	06dd      	lsls	r5, r3, #27
 800db4e:	d411      	bmi.n	800db74 <__swsetup_r+0x50>
 800db50:	2309      	movs	r3, #9
 800db52:	6033      	str	r3, [r6, #0]
 800db54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800db58:	f04f 30ff 	mov.w	r0, #4294967295
 800db5c:	81a3      	strh	r3, [r4, #12]
 800db5e:	e03e      	b.n	800dbde <__swsetup_r+0xba>
 800db60:	4b25      	ldr	r3, [pc, #148]	; (800dbf8 <__swsetup_r+0xd4>)
 800db62:	429c      	cmp	r4, r3
 800db64:	d101      	bne.n	800db6a <__swsetup_r+0x46>
 800db66:	68ac      	ldr	r4, [r5, #8]
 800db68:	e7eb      	b.n	800db42 <__swsetup_r+0x1e>
 800db6a:	4b24      	ldr	r3, [pc, #144]	; (800dbfc <__swsetup_r+0xd8>)
 800db6c:	429c      	cmp	r4, r3
 800db6e:	bf08      	it	eq
 800db70:	68ec      	ldreq	r4, [r5, #12]
 800db72:	e7e6      	b.n	800db42 <__swsetup_r+0x1e>
 800db74:	0758      	lsls	r0, r3, #29
 800db76:	d512      	bpl.n	800db9e <__swsetup_r+0x7a>
 800db78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db7a:	b141      	cbz	r1, 800db8e <__swsetup_r+0x6a>
 800db7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db80:	4299      	cmp	r1, r3
 800db82:	d002      	beq.n	800db8a <__swsetup_r+0x66>
 800db84:	4630      	mov	r0, r6
 800db86:	f000 f99d 	bl	800dec4 <_free_r>
 800db8a:	2300      	movs	r3, #0
 800db8c:	6363      	str	r3, [r4, #52]	; 0x34
 800db8e:	89a3      	ldrh	r3, [r4, #12]
 800db90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800db94:	81a3      	strh	r3, [r4, #12]
 800db96:	2300      	movs	r3, #0
 800db98:	6063      	str	r3, [r4, #4]
 800db9a:	6923      	ldr	r3, [r4, #16]
 800db9c:	6023      	str	r3, [r4, #0]
 800db9e:	89a3      	ldrh	r3, [r4, #12]
 800dba0:	f043 0308 	orr.w	r3, r3, #8
 800dba4:	81a3      	strh	r3, [r4, #12]
 800dba6:	6923      	ldr	r3, [r4, #16]
 800dba8:	b94b      	cbnz	r3, 800dbbe <__swsetup_r+0x9a>
 800dbaa:	89a3      	ldrh	r3, [r4, #12]
 800dbac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dbb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dbb4:	d003      	beq.n	800dbbe <__swsetup_r+0x9a>
 800dbb6:	4621      	mov	r1, r4
 800dbb8:	4630      	mov	r0, r6
 800dbba:	f000 f929 	bl	800de10 <__smakebuf_r>
 800dbbe:	89a0      	ldrh	r0, [r4, #12]
 800dbc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dbc4:	f010 0301 	ands.w	r3, r0, #1
 800dbc8:	d00a      	beq.n	800dbe0 <__swsetup_r+0xbc>
 800dbca:	2300      	movs	r3, #0
 800dbcc:	60a3      	str	r3, [r4, #8]
 800dbce:	6963      	ldr	r3, [r4, #20]
 800dbd0:	425b      	negs	r3, r3
 800dbd2:	61a3      	str	r3, [r4, #24]
 800dbd4:	6923      	ldr	r3, [r4, #16]
 800dbd6:	b943      	cbnz	r3, 800dbea <__swsetup_r+0xc6>
 800dbd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dbdc:	d1ba      	bne.n	800db54 <__swsetup_r+0x30>
 800dbde:	bd70      	pop	{r4, r5, r6, pc}
 800dbe0:	0781      	lsls	r1, r0, #30
 800dbe2:	bf58      	it	pl
 800dbe4:	6963      	ldrpl	r3, [r4, #20]
 800dbe6:	60a3      	str	r3, [r4, #8]
 800dbe8:	e7f4      	b.n	800dbd4 <__swsetup_r+0xb0>
 800dbea:	2000      	movs	r0, #0
 800dbec:	e7f7      	b.n	800dbde <__swsetup_r+0xba>
 800dbee:	bf00      	nop
 800dbf0:	20000040 	.word	0x20000040
 800dbf4:	0800f334 	.word	0x0800f334
 800dbf8:	0800f354 	.word	0x0800f354
 800dbfc:	0800f314 	.word	0x0800f314

0800dc00 <_close_r>:
 800dc00:	b538      	push	{r3, r4, r5, lr}
 800dc02:	2300      	movs	r3, #0
 800dc04:	4d05      	ldr	r5, [pc, #20]	; (800dc1c <_close_r+0x1c>)
 800dc06:	4604      	mov	r4, r0
 800dc08:	4608      	mov	r0, r1
 800dc0a:	602b      	str	r3, [r5, #0]
 800dc0c:	f7f7 f9ab 	bl	8004f66 <_close>
 800dc10:	1c43      	adds	r3, r0, #1
 800dc12:	d102      	bne.n	800dc1a <_close_r+0x1a>
 800dc14:	682b      	ldr	r3, [r5, #0]
 800dc16:	b103      	cbz	r3, 800dc1a <_close_r+0x1a>
 800dc18:	6023      	str	r3, [r4, #0]
 800dc1a:	bd38      	pop	{r3, r4, r5, pc}
 800dc1c:	20003074 	.word	0x20003074

0800dc20 <__sflush_r>:
 800dc20:	898a      	ldrh	r2, [r1, #12]
 800dc22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc26:	4605      	mov	r5, r0
 800dc28:	0710      	lsls	r0, r2, #28
 800dc2a:	460c      	mov	r4, r1
 800dc2c:	d458      	bmi.n	800dce0 <__sflush_r+0xc0>
 800dc2e:	684b      	ldr	r3, [r1, #4]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	dc05      	bgt.n	800dc40 <__sflush_r+0x20>
 800dc34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	dc02      	bgt.n	800dc40 <__sflush_r+0x20>
 800dc3a:	2000      	movs	r0, #0
 800dc3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc42:	2e00      	cmp	r6, #0
 800dc44:	d0f9      	beq.n	800dc3a <__sflush_r+0x1a>
 800dc46:	2300      	movs	r3, #0
 800dc48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dc4c:	682f      	ldr	r7, [r5, #0]
 800dc4e:	602b      	str	r3, [r5, #0]
 800dc50:	d032      	beq.n	800dcb8 <__sflush_r+0x98>
 800dc52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dc54:	89a3      	ldrh	r3, [r4, #12]
 800dc56:	075a      	lsls	r2, r3, #29
 800dc58:	d505      	bpl.n	800dc66 <__sflush_r+0x46>
 800dc5a:	6863      	ldr	r3, [r4, #4]
 800dc5c:	1ac0      	subs	r0, r0, r3
 800dc5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dc60:	b10b      	cbz	r3, 800dc66 <__sflush_r+0x46>
 800dc62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dc64:	1ac0      	subs	r0, r0, r3
 800dc66:	2300      	movs	r3, #0
 800dc68:	4602      	mov	r2, r0
 800dc6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc6c:	4628      	mov	r0, r5
 800dc6e:	6a21      	ldr	r1, [r4, #32]
 800dc70:	47b0      	blx	r6
 800dc72:	1c43      	adds	r3, r0, #1
 800dc74:	89a3      	ldrh	r3, [r4, #12]
 800dc76:	d106      	bne.n	800dc86 <__sflush_r+0x66>
 800dc78:	6829      	ldr	r1, [r5, #0]
 800dc7a:	291d      	cmp	r1, #29
 800dc7c:	d82c      	bhi.n	800dcd8 <__sflush_r+0xb8>
 800dc7e:	4a2a      	ldr	r2, [pc, #168]	; (800dd28 <__sflush_r+0x108>)
 800dc80:	40ca      	lsrs	r2, r1
 800dc82:	07d6      	lsls	r6, r2, #31
 800dc84:	d528      	bpl.n	800dcd8 <__sflush_r+0xb8>
 800dc86:	2200      	movs	r2, #0
 800dc88:	6062      	str	r2, [r4, #4]
 800dc8a:	6922      	ldr	r2, [r4, #16]
 800dc8c:	04d9      	lsls	r1, r3, #19
 800dc8e:	6022      	str	r2, [r4, #0]
 800dc90:	d504      	bpl.n	800dc9c <__sflush_r+0x7c>
 800dc92:	1c42      	adds	r2, r0, #1
 800dc94:	d101      	bne.n	800dc9a <__sflush_r+0x7a>
 800dc96:	682b      	ldr	r3, [r5, #0]
 800dc98:	b903      	cbnz	r3, 800dc9c <__sflush_r+0x7c>
 800dc9a:	6560      	str	r0, [r4, #84]	; 0x54
 800dc9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc9e:	602f      	str	r7, [r5, #0]
 800dca0:	2900      	cmp	r1, #0
 800dca2:	d0ca      	beq.n	800dc3a <__sflush_r+0x1a>
 800dca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dca8:	4299      	cmp	r1, r3
 800dcaa:	d002      	beq.n	800dcb2 <__sflush_r+0x92>
 800dcac:	4628      	mov	r0, r5
 800dcae:	f000 f909 	bl	800dec4 <_free_r>
 800dcb2:	2000      	movs	r0, #0
 800dcb4:	6360      	str	r0, [r4, #52]	; 0x34
 800dcb6:	e7c1      	b.n	800dc3c <__sflush_r+0x1c>
 800dcb8:	6a21      	ldr	r1, [r4, #32]
 800dcba:	2301      	movs	r3, #1
 800dcbc:	4628      	mov	r0, r5
 800dcbe:	47b0      	blx	r6
 800dcc0:	1c41      	adds	r1, r0, #1
 800dcc2:	d1c7      	bne.n	800dc54 <__sflush_r+0x34>
 800dcc4:	682b      	ldr	r3, [r5, #0]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d0c4      	beq.n	800dc54 <__sflush_r+0x34>
 800dcca:	2b1d      	cmp	r3, #29
 800dccc:	d001      	beq.n	800dcd2 <__sflush_r+0xb2>
 800dcce:	2b16      	cmp	r3, #22
 800dcd0:	d101      	bne.n	800dcd6 <__sflush_r+0xb6>
 800dcd2:	602f      	str	r7, [r5, #0]
 800dcd4:	e7b1      	b.n	800dc3a <__sflush_r+0x1a>
 800dcd6:	89a3      	ldrh	r3, [r4, #12]
 800dcd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcdc:	81a3      	strh	r3, [r4, #12]
 800dcde:	e7ad      	b.n	800dc3c <__sflush_r+0x1c>
 800dce0:	690f      	ldr	r7, [r1, #16]
 800dce2:	2f00      	cmp	r7, #0
 800dce4:	d0a9      	beq.n	800dc3a <__sflush_r+0x1a>
 800dce6:	0793      	lsls	r3, r2, #30
 800dce8:	bf18      	it	ne
 800dcea:	2300      	movne	r3, #0
 800dcec:	680e      	ldr	r6, [r1, #0]
 800dcee:	bf08      	it	eq
 800dcf0:	694b      	ldreq	r3, [r1, #20]
 800dcf2:	eba6 0807 	sub.w	r8, r6, r7
 800dcf6:	600f      	str	r7, [r1, #0]
 800dcf8:	608b      	str	r3, [r1, #8]
 800dcfa:	f1b8 0f00 	cmp.w	r8, #0
 800dcfe:	dd9c      	ble.n	800dc3a <__sflush_r+0x1a>
 800dd00:	4643      	mov	r3, r8
 800dd02:	463a      	mov	r2, r7
 800dd04:	4628      	mov	r0, r5
 800dd06:	6a21      	ldr	r1, [r4, #32]
 800dd08:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dd0a:	47b0      	blx	r6
 800dd0c:	2800      	cmp	r0, #0
 800dd0e:	dc06      	bgt.n	800dd1e <__sflush_r+0xfe>
 800dd10:	89a3      	ldrh	r3, [r4, #12]
 800dd12:	f04f 30ff 	mov.w	r0, #4294967295
 800dd16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd1a:	81a3      	strh	r3, [r4, #12]
 800dd1c:	e78e      	b.n	800dc3c <__sflush_r+0x1c>
 800dd1e:	4407      	add	r7, r0
 800dd20:	eba8 0800 	sub.w	r8, r8, r0
 800dd24:	e7e9      	b.n	800dcfa <__sflush_r+0xda>
 800dd26:	bf00      	nop
 800dd28:	20400001 	.word	0x20400001

0800dd2c <_fflush_r>:
 800dd2c:	b538      	push	{r3, r4, r5, lr}
 800dd2e:	690b      	ldr	r3, [r1, #16]
 800dd30:	4605      	mov	r5, r0
 800dd32:	460c      	mov	r4, r1
 800dd34:	b913      	cbnz	r3, 800dd3c <_fflush_r+0x10>
 800dd36:	2500      	movs	r5, #0
 800dd38:	4628      	mov	r0, r5
 800dd3a:	bd38      	pop	{r3, r4, r5, pc}
 800dd3c:	b118      	cbz	r0, 800dd46 <_fflush_r+0x1a>
 800dd3e:	6983      	ldr	r3, [r0, #24]
 800dd40:	b90b      	cbnz	r3, 800dd46 <_fflush_r+0x1a>
 800dd42:	f7ff fa07 	bl	800d154 <__sinit>
 800dd46:	4b14      	ldr	r3, [pc, #80]	; (800dd98 <_fflush_r+0x6c>)
 800dd48:	429c      	cmp	r4, r3
 800dd4a:	d11b      	bne.n	800dd84 <_fflush_r+0x58>
 800dd4c:	686c      	ldr	r4, [r5, #4]
 800dd4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d0ef      	beq.n	800dd36 <_fflush_r+0xa>
 800dd56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dd58:	07d0      	lsls	r0, r2, #31
 800dd5a:	d404      	bmi.n	800dd66 <_fflush_r+0x3a>
 800dd5c:	0599      	lsls	r1, r3, #22
 800dd5e:	d402      	bmi.n	800dd66 <_fflush_r+0x3a>
 800dd60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd62:	f7ff fa95 	bl	800d290 <__retarget_lock_acquire_recursive>
 800dd66:	4628      	mov	r0, r5
 800dd68:	4621      	mov	r1, r4
 800dd6a:	f7ff ff59 	bl	800dc20 <__sflush_r>
 800dd6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd70:	4605      	mov	r5, r0
 800dd72:	07da      	lsls	r2, r3, #31
 800dd74:	d4e0      	bmi.n	800dd38 <_fflush_r+0xc>
 800dd76:	89a3      	ldrh	r3, [r4, #12]
 800dd78:	059b      	lsls	r3, r3, #22
 800dd7a:	d4dd      	bmi.n	800dd38 <_fflush_r+0xc>
 800dd7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd7e:	f7ff fa88 	bl	800d292 <__retarget_lock_release_recursive>
 800dd82:	e7d9      	b.n	800dd38 <_fflush_r+0xc>
 800dd84:	4b05      	ldr	r3, [pc, #20]	; (800dd9c <_fflush_r+0x70>)
 800dd86:	429c      	cmp	r4, r3
 800dd88:	d101      	bne.n	800dd8e <_fflush_r+0x62>
 800dd8a:	68ac      	ldr	r4, [r5, #8]
 800dd8c:	e7df      	b.n	800dd4e <_fflush_r+0x22>
 800dd8e:	4b04      	ldr	r3, [pc, #16]	; (800dda0 <_fflush_r+0x74>)
 800dd90:	429c      	cmp	r4, r3
 800dd92:	bf08      	it	eq
 800dd94:	68ec      	ldreq	r4, [r5, #12]
 800dd96:	e7da      	b.n	800dd4e <_fflush_r+0x22>
 800dd98:	0800f334 	.word	0x0800f334
 800dd9c:	0800f354 	.word	0x0800f354
 800dda0:	0800f314 	.word	0x0800f314

0800dda4 <_lseek_r>:
 800dda4:	b538      	push	{r3, r4, r5, lr}
 800dda6:	4604      	mov	r4, r0
 800dda8:	4608      	mov	r0, r1
 800ddaa:	4611      	mov	r1, r2
 800ddac:	2200      	movs	r2, #0
 800ddae:	4d05      	ldr	r5, [pc, #20]	; (800ddc4 <_lseek_r+0x20>)
 800ddb0:	602a      	str	r2, [r5, #0]
 800ddb2:	461a      	mov	r2, r3
 800ddb4:	f7f7 f8fb 	bl	8004fae <_lseek>
 800ddb8:	1c43      	adds	r3, r0, #1
 800ddba:	d102      	bne.n	800ddc2 <_lseek_r+0x1e>
 800ddbc:	682b      	ldr	r3, [r5, #0]
 800ddbe:	b103      	cbz	r3, 800ddc2 <_lseek_r+0x1e>
 800ddc0:	6023      	str	r3, [r4, #0]
 800ddc2:	bd38      	pop	{r3, r4, r5, pc}
 800ddc4:	20003074 	.word	0x20003074

0800ddc8 <__swhatbuf_r>:
 800ddc8:	b570      	push	{r4, r5, r6, lr}
 800ddca:	460e      	mov	r6, r1
 800ddcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddd0:	4614      	mov	r4, r2
 800ddd2:	2900      	cmp	r1, #0
 800ddd4:	461d      	mov	r5, r3
 800ddd6:	b096      	sub	sp, #88	; 0x58
 800ddd8:	da07      	bge.n	800ddea <__swhatbuf_r+0x22>
 800ddda:	2300      	movs	r3, #0
 800dddc:	602b      	str	r3, [r5, #0]
 800ddde:	89b3      	ldrh	r3, [r6, #12]
 800dde0:	061a      	lsls	r2, r3, #24
 800dde2:	d410      	bmi.n	800de06 <__swhatbuf_r+0x3e>
 800dde4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dde8:	e00e      	b.n	800de08 <__swhatbuf_r+0x40>
 800ddea:	466a      	mov	r2, sp
 800ddec:	f000 f8c8 	bl	800df80 <_fstat_r>
 800ddf0:	2800      	cmp	r0, #0
 800ddf2:	dbf2      	blt.n	800ddda <__swhatbuf_r+0x12>
 800ddf4:	9a01      	ldr	r2, [sp, #4]
 800ddf6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ddfa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ddfe:	425a      	negs	r2, r3
 800de00:	415a      	adcs	r2, r3
 800de02:	602a      	str	r2, [r5, #0]
 800de04:	e7ee      	b.n	800dde4 <__swhatbuf_r+0x1c>
 800de06:	2340      	movs	r3, #64	; 0x40
 800de08:	2000      	movs	r0, #0
 800de0a:	6023      	str	r3, [r4, #0]
 800de0c:	b016      	add	sp, #88	; 0x58
 800de0e:	bd70      	pop	{r4, r5, r6, pc}

0800de10 <__smakebuf_r>:
 800de10:	898b      	ldrh	r3, [r1, #12]
 800de12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de14:	079d      	lsls	r5, r3, #30
 800de16:	4606      	mov	r6, r0
 800de18:	460c      	mov	r4, r1
 800de1a:	d507      	bpl.n	800de2c <__smakebuf_r+0x1c>
 800de1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800de20:	6023      	str	r3, [r4, #0]
 800de22:	6123      	str	r3, [r4, #16]
 800de24:	2301      	movs	r3, #1
 800de26:	6163      	str	r3, [r4, #20]
 800de28:	b002      	add	sp, #8
 800de2a:	bd70      	pop	{r4, r5, r6, pc}
 800de2c:	466a      	mov	r2, sp
 800de2e:	ab01      	add	r3, sp, #4
 800de30:	f7ff ffca 	bl	800ddc8 <__swhatbuf_r>
 800de34:	9900      	ldr	r1, [sp, #0]
 800de36:	4605      	mov	r5, r0
 800de38:	4630      	mov	r0, r6
 800de3a:	f7ff fa2b 	bl	800d294 <_malloc_r>
 800de3e:	b948      	cbnz	r0, 800de54 <__smakebuf_r+0x44>
 800de40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de44:	059a      	lsls	r2, r3, #22
 800de46:	d4ef      	bmi.n	800de28 <__smakebuf_r+0x18>
 800de48:	f023 0303 	bic.w	r3, r3, #3
 800de4c:	f043 0302 	orr.w	r3, r3, #2
 800de50:	81a3      	strh	r3, [r4, #12]
 800de52:	e7e3      	b.n	800de1c <__smakebuf_r+0xc>
 800de54:	4b0d      	ldr	r3, [pc, #52]	; (800de8c <__smakebuf_r+0x7c>)
 800de56:	62b3      	str	r3, [r6, #40]	; 0x28
 800de58:	89a3      	ldrh	r3, [r4, #12]
 800de5a:	6020      	str	r0, [r4, #0]
 800de5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de60:	81a3      	strh	r3, [r4, #12]
 800de62:	9b00      	ldr	r3, [sp, #0]
 800de64:	6120      	str	r0, [r4, #16]
 800de66:	6163      	str	r3, [r4, #20]
 800de68:	9b01      	ldr	r3, [sp, #4]
 800de6a:	b15b      	cbz	r3, 800de84 <__smakebuf_r+0x74>
 800de6c:	4630      	mov	r0, r6
 800de6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de72:	f000 f897 	bl	800dfa4 <_isatty_r>
 800de76:	b128      	cbz	r0, 800de84 <__smakebuf_r+0x74>
 800de78:	89a3      	ldrh	r3, [r4, #12]
 800de7a:	f023 0303 	bic.w	r3, r3, #3
 800de7e:	f043 0301 	orr.w	r3, r3, #1
 800de82:	81a3      	strh	r3, [r4, #12]
 800de84:	89a0      	ldrh	r0, [r4, #12]
 800de86:	4305      	orrs	r5, r0
 800de88:	81a5      	strh	r5, [r4, #12]
 800de8a:	e7cd      	b.n	800de28 <__smakebuf_r+0x18>
 800de8c:	0800d0ed 	.word	0x0800d0ed

0800de90 <memchr>:
 800de90:	4603      	mov	r3, r0
 800de92:	b510      	push	{r4, lr}
 800de94:	b2c9      	uxtb	r1, r1
 800de96:	4402      	add	r2, r0
 800de98:	4293      	cmp	r3, r2
 800de9a:	4618      	mov	r0, r3
 800de9c:	d101      	bne.n	800dea2 <memchr+0x12>
 800de9e:	2000      	movs	r0, #0
 800dea0:	e003      	b.n	800deaa <memchr+0x1a>
 800dea2:	7804      	ldrb	r4, [r0, #0]
 800dea4:	3301      	adds	r3, #1
 800dea6:	428c      	cmp	r4, r1
 800dea8:	d1f6      	bne.n	800de98 <memchr+0x8>
 800deaa:	bd10      	pop	{r4, pc}

0800deac <__malloc_lock>:
 800deac:	4801      	ldr	r0, [pc, #4]	; (800deb4 <__malloc_lock+0x8>)
 800deae:	f7ff b9ef 	b.w	800d290 <__retarget_lock_acquire_recursive>
 800deb2:	bf00      	nop
 800deb4:	2000306c 	.word	0x2000306c

0800deb8 <__malloc_unlock>:
 800deb8:	4801      	ldr	r0, [pc, #4]	; (800dec0 <__malloc_unlock+0x8>)
 800deba:	f7ff b9ea 	b.w	800d292 <__retarget_lock_release_recursive>
 800debe:	bf00      	nop
 800dec0:	2000306c 	.word	0x2000306c

0800dec4 <_free_r>:
 800dec4:	b538      	push	{r3, r4, r5, lr}
 800dec6:	4605      	mov	r5, r0
 800dec8:	2900      	cmp	r1, #0
 800deca:	d043      	beq.n	800df54 <_free_r+0x90>
 800decc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ded0:	1f0c      	subs	r4, r1, #4
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	bfb8      	it	lt
 800ded6:	18e4      	addlt	r4, r4, r3
 800ded8:	f7ff ffe8 	bl	800deac <__malloc_lock>
 800dedc:	4a1e      	ldr	r2, [pc, #120]	; (800df58 <_free_r+0x94>)
 800dede:	6813      	ldr	r3, [r2, #0]
 800dee0:	4610      	mov	r0, r2
 800dee2:	b933      	cbnz	r3, 800def2 <_free_r+0x2e>
 800dee4:	6063      	str	r3, [r4, #4]
 800dee6:	6014      	str	r4, [r2, #0]
 800dee8:	4628      	mov	r0, r5
 800deea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800deee:	f7ff bfe3 	b.w	800deb8 <__malloc_unlock>
 800def2:	42a3      	cmp	r3, r4
 800def4:	d90a      	bls.n	800df0c <_free_r+0x48>
 800def6:	6821      	ldr	r1, [r4, #0]
 800def8:	1862      	adds	r2, r4, r1
 800defa:	4293      	cmp	r3, r2
 800defc:	bf01      	itttt	eq
 800defe:	681a      	ldreq	r2, [r3, #0]
 800df00:	685b      	ldreq	r3, [r3, #4]
 800df02:	1852      	addeq	r2, r2, r1
 800df04:	6022      	streq	r2, [r4, #0]
 800df06:	6063      	str	r3, [r4, #4]
 800df08:	6004      	str	r4, [r0, #0]
 800df0a:	e7ed      	b.n	800dee8 <_free_r+0x24>
 800df0c:	461a      	mov	r2, r3
 800df0e:	685b      	ldr	r3, [r3, #4]
 800df10:	b10b      	cbz	r3, 800df16 <_free_r+0x52>
 800df12:	42a3      	cmp	r3, r4
 800df14:	d9fa      	bls.n	800df0c <_free_r+0x48>
 800df16:	6811      	ldr	r1, [r2, #0]
 800df18:	1850      	adds	r0, r2, r1
 800df1a:	42a0      	cmp	r0, r4
 800df1c:	d10b      	bne.n	800df36 <_free_r+0x72>
 800df1e:	6820      	ldr	r0, [r4, #0]
 800df20:	4401      	add	r1, r0
 800df22:	1850      	adds	r0, r2, r1
 800df24:	4283      	cmp	r3, r0
 800df26:	6011      	str	r1, [r2, #0]
 800df28:	d1de      	bne.n	800dee8 <_free_r+0x24>
 800df2a:	6818      	ldr	r0, [r3, #0]
 800df2c:	685b      	ldr	r3, [r3, #4]
 800df2e:	4401      	add	r1, r0
 800df30:	6011      	str	r1, [r2, #0]
 800df32:	6053      	str	r3, [r2, #4]
 800df34:	e7d8      	b.n	800dee8 <_free_r+0x24>
 800df36:	d902      	bls.n	800df3e <_free_r+0x7a>
 800df38:	230c      	movs	r3, #12
 800df3a:	602b      	str	r3, [r5, #0]
 800df3c:	e7d4      	b.n	800dee8 <_free_r+0x24>
 800df3e:	6820      	ldr	r0, [r4, #0]
 800df40:	1821      	adds	r1, r4, r0
 800df42:	428b      	cmp	r3, r1
 800df44:	bf01      	itttt	eq
 800df46:	6819      	ldreq	r1, [r3, #0]
 800df48:	685b      	ldreq	r3, [r3, #4]
 800df4a:	1809      	addeq	r1, r1, r0
 800df4c:	6021      	streq	r1, [r4, #0]
 800df4e:	6063      	str	r3, [r4, #4]
 800df50:	6054      	str	r4, [r2, #4]
 800df52:	e7c9      	b.n	800dee8 <_free_r+0x24>
 800df54:	bd38      	pop	{r3, r4, r5, pc}
 800df56:	bf00      	nop
 800df58:	20002f00 	.word	0x20002f00

0800df5c <_read_r>:
 800df5c:	b538      	push	{r3, r4, r5, lr}
 800df5e:	4604      	mov	r4, r0
 800df60:	4608      	mov	r0, r1
 800df62:	4611      	mov	r1, r2
 800df64:	2200      	movs	r2, #0
 800df66:	4d05      	ldr	r5, [pc, #20]	; (800df7c <_read_r+0x20>)
 800df68:	602a      	str	r2, [r5, #0]
 800df6a:	461a      	mov	r2, r3
 800df6c:	f7f6 ffc2 	bl	8004ef4 <_read>
 800df70:	1c43      	adds	r3, r0, #1
 800df72:	d102      	bne.n	800df7a <_read_r+0x1e>
 800df74:	682b      	ldr	r3, [r5, #0]
 800df76:	b103      	cbz	r3, 800df7a <_read_r+0x1e>
 800df78:	6023      	str	r3, [r4, #0]
 800df7a:	bd38      	pop	{r3, r4, r5, pc}
 800df7c:	20003074 	.word	0x20003074

0800df80 <_fstat_r>:
 800df80:	b538      	push	{r3, r4, r5, lr}
 800df82:	2300      	movs	r3, #0
 800df84:	4d06      	ldr	r5, [pc, #24]	; (800dfa0 <_fstat_r+0x20>)
 800df86:	4604      	mov	r4, r0
 800df88:	4608      	mov	r0, r1
 800df8a:	4611      	mov	r1, r2
 800df8c:	602b      	str	r3, [r5, #0]
 800df8e:	f7f6 fff5 	bl	8004f7c <_fstat>
 800df92:	1c43      	adds	r3, r0, #1
 800df94:	d102      	bne.n	800df9c <_fstat_r+0x1c>
 800df96:	682b      	ldr	r3, [r5, #0]
 800df98:	b103      	cbz	r3, 800df9c <_fstat_r+0x1c>
 800df9a:	6023      	str	r3, [r4, #0]
 800df9c:	bd38      	pop	{r3, r4, r5, pc}
 800df9e:	bf00      	nop
 800dfa0:	20003074 	.word	0x20003074

0800dfa4 <_isatty_r>:
 800dfa4:	b538      	push	{r3, r4, r5, lr}
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	4d05      	ldr	r5, [pc, #20]	; (800dfc0 <_isatty_r+0x1c>)
 800dfaa:	4604      	mov	r4, r0
 800dfac:	4608      	mov	r0, r1
 800dfae:	602b      	str	r3, [r5, #0]
 800dfb0:	f7f6 fff3 	bl	8004f9a <_isatty>
 800dfb4:	1c43      	adds	r3, r0, #1
 800dfb6:	d102      	bne.n	800dfbe <_isatty_r+0x1a>
 800dfb8:	682b      	ldr	r3, [r5, #0]
 800dfba:	b103      	cbz	r3, 800dfbe <_isatty_r+0x1a>
 800dfbc:	6023      	str	r3, [r4, #0]
 800dfbe:	bd38      	pop	{r3, r4, r5, pc}
 800dfc0:	20003074 	.word	0x20003074

0800dfc4 <pow>:
 800dfc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfc8:	461f      	mov	r7, r3
 800dfca:	4680      	mov	r8, r0
 800dfcc:	4689      	mov	r9, r1
 800dfce:	4616      	mov	r6, r2
 800dfd0:	f000 f8a6 	bl	800e120 <__ieee754_pow>
 800dfd4:	4b4d      	ldr	r3, [pc, #308]	; (800e10c <pow+0x148>)
 800dfd6:	4604      	mov	r4, r0
 800dfd8:	f993 3000 	ldrsb.w	r3, [r3]
 800dfdc:	460d      	mov	r5, r1
 800dfde:	3301      	adds	r3, #1
 800dfe0:	d015      	beq.n	800e00e <pow+0x4a>
 800dfe2:	4632      	mov	r2, r6
 800dfe4:	463b      	mov	r3, r7
 800dfe6:	4630      	mov	r0, r6
 800dfe8:	4639      	mov	r1, r7
 800dfea:	f7f2 fd77 	bl	8000adc <__aeabi_dcmpun>
 800dfee:	b970      	cbnz	r0, 800e00e <pow+0x4a>
 800dff0:	4642      	mov	r2, r8
 800dff2:	464b      	mov	r3, r9
 800dff4:	4640      	mov	r0, r8
 800dff6:	4649      	mov	r1, r9
 800dff8:	f7f2 fd70 	bl	8000adc <__aeabi_dcmpun>
 800dffc:	2200      	movs	r2, #0
 800dffe:	2300      	movs	r3, #0
 800e000:	b148      	cbz	r0, 800e016 <pow+0x52>
 800e002:	4630      	mov	r0, r6
 800e004:	4639      	mov	r1, r7
 800e006:	f7f2 fd37 	bl	8000a78 <__aeabi_dcmpeq>
 800e00a:	2800      	cmp	r0, #0
 800e00c:	d17b      	bne.n	800e106 <pow+0x142>
 800e00e:	4620      	mov	r0, r4
 800e010:	4629      	mov	r1, r5
 800e012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e016:	4640      	mov	r0, r8
 800e018:	4649      	mov	r1, r9
 800e01a:	f7f2 fd2d 	bl	8000a78 <__aeabi_dcmpeq>
 800e01e:	b1e0      	cbz	r0, 800e05a <pow+0x96>
 800e020:	2200      	movs	r2, #0
 800e022:	2300      	movs	r3, #0
 800e024:	4630      	mov	r0, r6
 800e026:	4639      	mov	r1, r7
 800e028:	f7f2 fd26 	bl	8000a78 <__aeabi_dcmpeq>
 800e02c:	2800      	cmp	r0, #0
 800e02e:	d16a      	bne.n	800e106 <pow+0x142>
 800e030:	4630      	mov	r0, r6
 800e032:	4639      	mov	r1, r7
 800e034:	f000 fe39 	bl	800ecaa <finite>
 800e038:	2800      	cmp	r0, #0
 800e03a:	d0e8      	beq.n	800e00e <pow+0x4a>
 800e03c:	2200      	movs	r2, #0
 800e03e:	2300      	movs	r3, #0
 800e040:	4630      	mov	r0, r6
 800e042:	4639      	mov	r1, r7
 800e044:	f7f2 fd22 	bl	8000a8c <__aeabi_dcmplt>
 800e048:	2800      	cmp	r0, #0
 800e04a:	d0e0      	beq.n	800e00e <pow+0x4a>
 800e04c:	f7fe ffbe 	bl	800cfcc <__errno>
 800e050:	2321      	movs	r3, #33	; 0x21
 800e052:	2400      	movs	r4, #0
 800e054:	6003      	str	r3, [r0, #0]
 800e056:	4d2e      	ldr	r5, [pc, #184]	; (800e110 <pow+0x14c>)
 800e058:	e7d9      	b.n	800e00e <pow+0x4a>
 800e05a:	4620      	mov	r0, r4
 800e05c:	4629      	mov	r1, r5
 800e05e:	f000 fe24 	bl	800ecaa <finite>
 800e062:	bba8      	cbnz	r0, 800e0d0 <pow+0x10c>
 800e064:	4640      	mov	r0, r8
 800e066:	4649      	mov	r1, r9
 800e068:	f000 fe1f 	bl	800ecaa <finite>
 800e06c:	b380      	cbz	r0, 800e0d0 <pow+0x10c>
 800e06e:	4630      	mov	r0, r6
 800e070:	4639      	mov	r1, r7
 800e072:	f000 fe1a 	bl	800ecaa <finite>
 800e076:	b358      	cbz	r0, 800e0d0 <pow+0x10c>
 800e078:	4622      	mov	r2, r4
 800e07a:	462b      	mov	r3, r5
 800e07c:	4620      	mov	r0, r4
 800e07e:	4629      	mov	r1, r5
 800e080:	f7f2 fd2c 	bl	8000adc <__aeabi_dcmpun>
 800e084:	b160      	cbz	r0, 800e0a0 <pow+0xdc>
 800e086:	f7fe ffa1 	bl	800cfcc <__errno>
 800e08a:	2321      	movs	r3, #33	; 0x21
 800e08c:	2200      	movs	r2, #0
 800e08e:	6003      	str	r3, [r0, #0]
 800e090:	2300      	movs	r3, #0
 800e092:	4610      	mov	r0, r2
 800e094:	4619      	mov	r1, r3
 800e096:	f7f2 fbb1 	bl	80007fc <__aeabi_ddiv>
 800e09a:	4604      	mov	r4, r0
 800e09c:	460d      	mov	r5, r1
 800e09e:	e7b6      	b.n	800e00e <pow+0x4a>
 800e0a0:	f7fe ff94 	bl	800cfcc <__errno>
 800e0a4:	2322      	movs	r3, #34	; 0x22
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	6003      	str	r3, [r0, #0]
 800e0aa:	4649      	mov	r1, r9
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	4640      	mov	r0, r8
 800e0b0:	f7f2 fcec 	bl	8000a8c <__aeabi_dcmplt>
 800e0b4:	2400      	movs	r4, #0
 800e0b6:	b148      	cbz	r0, 800e0cc <pow+0x108>
 800e0b8:	4630      	mov	r0, r6
 800e0ba:	4639      	mov	r1, r7
 800e0bc:	f000 fe02 	bl	800ecc4 <rint>
 800e0c0:	4632      	mov	r2, r6
 800e0c2:	463b      	mov	r3, r7
 800e0c4:	f7f2 fcd8 	bl	8000a78 <__aeabi_dcmpeq>
 800e0c8:	2800      	cmp	r0, #0
 800e0ca:	d0c4      	beq.n	800e056 <pow+0x92>
 800e0cc:	4d11      	ldr	r5, [pc, #68]	; (800e114 <pow+0x150>)
 800e0ce:	e79e      	b.n	800e00e <pow+0x4a>
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	4620      	mov	r0, r4
 800e0d6:	4629      	mov	r1, r5
 800e0d8:	f7f2 fcce 	bl	8000a78 <__aeabi_dcmpeq>
 800e0dc:	2800      	cmp	r0, #0
 800e0de:	d096      	beq.n	800e00e <pow+0x4a>
 800e0e0:	4640      	mov	r0, r8
 800e0e2:	4649      	mov	r1, r9
 800e0e4:	f000 fde1 	bl	800ecaa <finite>
 800e0e8:	2800      	cmp	r0, #0
 800e0ea:	d090      	beq.n	800e00e <pow+0x4a>
 800e0ec:	4630      	mov	r0, r6
 800e0ee:	4639      	mov	r1, r7
 800e0f0:	f000 fddb 	bl	800ecaa <finite>
 800e0f4:	2800      	cmp	r0, #0
 800e0f6:	d08a      	beq.n	800e00e <pow+0x4a>
 800e0f8:	f7fe ff68 	bl	800cfcc <__errno>
 800e0fc:	2322      	movs	r3, #34	; 0x22
 800e0fe:	2400      	movs	r4, #0
 800e100:	2500      	movs	r5, #0
 800e102:	6003      	str	r3, [r0, #0]
 800e104:	e783      	b.n	800e00e <pow+0x4a>
 800e106:	2400      	movs	r4, #0
 800e108:	4d03      	ldr	r5, [pc, #12]	; (800e118 <pow+0x154>)
 800e10a:	e780      	b.n	800e00e <pow+0x4a>
 800e10c:	200000a4 	.word	0x200000a4
 800e110:	fff00000 	.word	0xfff00000
 800e114:	7ff00000 	.word	0x7ff00000
 800e118:	3ff00000 	.word	0x3ff00000
 800e11c:	00000000 	.word	0x00000000

0800e120 <__ieee754_pow>:
 800e120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e124:	b093      	sub	sp, #76	; 0x4c
 800e126:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e12a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800e12e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800e132:	ea55 0302 	orrs.w	r3, r5, r2
 800e136:	4607      	mov	r7, r0
 800e138:	4688      	mov	r8, r1
 800e13a:	f000 84bf 	beq.w	800eabc <__ieee754_pow+0x99c>
 800e13e:	4b7e      	ldr	r3, [pc, #504]	; (800e338 <__ieee754_pow+0x218>)
 800e140:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800e144:	429c      	cmp	r4, r3
 800e146:	4689      	mov	r9, r1
 800e148:	4682      	mov	sl, r0
 800e14a:	dc09      	bgt.n	800e160 <__ieee754_pow+0x40>
 800e14c:	d103      	bne.n	800e156 <__ieee754_pow+0x36>
 800e14e:	b978      	cbnz	r0, 800e170 <__ieee754_pow+0x50>
 800e150:	42a5      	cmp	r5, r4
 800e152:	dd02      	ble.n	800e15a <__ieee754_pow+0x3a>
 800e154:	e00c      	b.n	800e170 <__ieee754_pow+0x50>
 800e156:	429d      	cmp	r5, r3
 800e158:	dc02      	bgt.n	800e160 <__ieee754_pow+0x40>
 800e15a:	429d      	cmp	r5, r3
 800e15c:	d10e      	bne.n	800e17c <__ieee754_pow+0x5c>
 800e15e:	b16a      	cbz	r2, 800e17c <__ieee754_pow+0x5c>
 800e160:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e164:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e168:	ea54 030a 	orrs.w	r3, r4, sl
 800e16c:	f000 84a6 	beq.w	800eabc <__ieee754_pow+0x99c>
 800e170:	4872      	ldr	r0, [pc, #456]	; (800e33c <__ieee754_pow+0x21c>)
 800e172:	b013      	add	sp, #76	; 0x4c
 800e174:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e178:	f000 bd9e 	b.w	800ecb8 <nan>
 800e17c:	f1b9 0f00 	cmp.w	r9, #0
 800e180:	da39      	bge.n	800e1f6 <__ieee754_pow+0xd6>
 800e182:	4b6f      	ldr	r3, [pc, #444]	; (800e340 <__ieee754_pow+0x220>)
 800e184:	429d      	cmp	r5, r3
 800e186:	dc54      	bgt.n	800e232 <__ieee754_pow+0x112>
 800e188:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e18c:	429d      	cmp	r5, r3
 800e18e:	f340 84a6 	ble.w	800eade <__ieee754_pow+0x9be>
 800e192:	152b      	asrs	r3, r5, #20
 800e194:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e198:	2b14      	cmp	r3, #20
 800e19a:	dd0f      	ble.n	800e1bc <__ieee754_pow+0x9c>
 800e19c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e1a0:	fa22 f103 	lsr.w	r1, r2, r3
 800e1a4:	fa01 f303 	lsl.w	r3, r1, r3
 800e1a8:	4293      	cmp	r3, r2
 800e1aa:	f040 8498 	bne.w	800eade <__ieee754_pow+0x9be>
 800e1ae:	f001 0101 	and.w	r1, r1, #1
 800e1b2:	f1c1 0302 	rsb	r3, r1, #2
 800e1b6:	9300      	str	r3, [sp, #0]
 800e1b8:	b182      	cbz	r2, 800e1dc <__ieee754_pow+0xbc>
 800e1ba:	e05e      	b.n	800e27a <__ieee754_pow+0x15a>
 800e1bc:	2a00      	cmp	r2, #0
 800e1be:	d15a      	bne.n	800e276 <__ieee754_pow+0x156>
 800e1c0:	f1c3 0314 	rsb	r3, r3, #20
 800e1c4:	fa45 f103 	asr.w	r1, r5, r3
 800e1c8:	fa01 f303 	lsl.w	r3, r1, r3
 800e1cc:	42ab      	cmp	r3, r5
 800e1ce:	f040 8483 	bne.w	800ead8 <__ieee754_pow+0x9b8>
 800e1d2:	f001 0101 	and.w	r1, r1, #1
 800e1d6:	f1c1 0302 	rsb	r3, r1, #2
 800e1da:	9300      	str	r3, [sp, #0]
 800e1dc:	4b59      	ldr	r3, [pc, #356]	; (800e344 <__ieee754_pow+0x224>)
 800e1de:	429d      	cmp	r5, r3
 800e1e0:	d130      	bne.n	800e244 <__ieee754_pow+0x124>
 800e1e2:	2e00      	cmp	r6, #0
 800e1e4:	f280 8474 	bge.w	800ead0 <__ieee754_pow+0x9b0>
 800e1e8:	463a      	mov	r2, r7
 800e1ea:	4643      	mov	r3, r8
 800e1ec:	2000      	movs	r0, #0
 800e1ee:	4955      	ldr	r1, [pc, #340]	; (800e344 <__ieee754_pow+0x224>)
 800e1f0:	f7f2 fb04 	bl	80007fc <__aeabi_ddiv>
 800e1f4:	e02f      	b.n	800e256 <__ieee754_pow+0x136>
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	9300      	str	r3, [sp, #0]
 800e1fa:	2a00      	cmp	r2, #0
 800e1fc:	d13d      	bne.n	800e27a <__ieee754_pow+0x15a>
 800e1fe:	4b4e      	ldr	r3, [pc, #312]	; (800e338 <__ieee754_pow+0x218>)
 800e200:	429d      	cmp	r5, r3
 800e202:	d1eb      	bne.n	800e1dc <__ieee754_pow+0xbc>
 800e204:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e208:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e20c:	ea53 030a 	orrs.w	r3, r3, sl
 800e210:	f000 8454 	beq.w	800eabc <__ieee754_pow+0x99c>
 800e214:	4b4c      	ldr	r3, [pc, #304]	; (800e348 <__ieee754_pow+0x228>)
 800e216:	429c      	cmp	r4, r3
 800e218:	dd0d      	ble.n	800e236 <__ieee754_pow+0x116>
 800e21a:	2e00      	cmp	r6, #0
 800e21c:	f280 8454 	bge.w	800eac8 <__ieee754_pow+0x9a8>
 800e220:	f04f 0b00 	mov.w	fp, #0
 800e224:	f04f 0c00 	mov.w	ip, #0
 800e228:	4658      	mov	r0, fp
 800e22a:	4661      	mov	r1, ip
 800e22c:	b013      	add	sp, #76	; 0x4c
 800e22e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e232:	2302      	movs	r3, #2
 800e234:	e7e0      	b.n	800e1f8 <__ieee754_pow+0xd8>
 800e236:	2e00      	cmp	r6, #0
 800e238:	daf2      	bge.n	800e220 <__ieee754_pow+0x100>
 800e23a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800e23e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800e242:	e7f1      	b.n	800e228 <__ieee754_pow+0x108>
 800e244:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800e248:	d108      	bne.n	800e25c <__ieee754_pow+0x13c>
 800e24a:	463a      	mov	r2, r7
 800e24c:	4643      	mov	r3, r8
 800e24e:	4638      	mov	r0, r7
 800e250:	4641      	mov	r1, r8
 800e252:	f7f2 f9a9 	bl	80005a8 <__aeabi_dmul>
 800e256:	4683      	mov	fp, r0
 800e258:	468c      	mov	ip, r1
 800e25a:	e7e5      	b.n	800e228 <__ieee754_pow+0x108>
 800e25c:	4b3b      	ldr	r3, [pc, #236]	; (800e34c <__ieee754_pow+0x22c>)
 800e25e:	429e      	cmp	r6, r3
 800e260:	d10b      	bne.n	800e27a <__ieee754_pow+0x15a>
 800e262:	f1b9 0f00 	cmp.w	r9, #0
 800e266:	db08      	blt.n	800e27a <__ieee754_pow+0x15a>
 800e268:	4638      	mov	r0, r7
 800e26a:	4641      	mov	r1, r8
 800e26c:	b013      	add	sp, #76	; 0x4c
 800e26e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e272:	f000 bc6b 	b.w	800eb4c <__ieee754_sqrt>
 800e276:	2300      	movs	r3, #0
 800e278:	9300      	str	r3, [sp, #0]
 800e27a:	4638      	mov	r0, r7
 800e27c:	4641      	mov	r1, r8
 800e27e:	f000 fd11 	bl	800eca4 <fabs>
 800e282:	4683      	mov	fp, r0
 800e284:	468c      	mov	ip, r1
 800e286:	f1ba 0f00 	cmp.w	sl, #0
 800e28a:	d129      	bne.n	800e2e0 <__ieee754_pow+0x1c0>
 800e28c:	b124      	cbz	r4, 800e298 <__ieee754_pow+0x178>
 800e28e:	4b2d      	ldr	r3, [pc, #180]	; (800e344 <__ieee754_pow+0x224>)
 800e290:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800e294:	429a      	cmp	r2, r3
 800e296:	d123      	bne.n	800e2e0 <__ieee754_pow+0x1c0>
 800e298:	2e00      	cmp	r6, #0
 800e29a:	da07      	bge.n	800e2ac <__ieee754_pow+0x18c>
 800e29c:	465a      	mov	r2, fp
 800e29e:	4663      	mov	r3, ip
 800e2a0:	2000      	movs	r0, #0
 800e2a2:	4928      	ldr	r1, [pc, #160]	; (800e344 <__ieee754_pow+0x224>)
 800e2a4:	f7f2 faaa 	bl	80007fc <__aeabi_ddiv>
 800e2a8:	4683      	mov	fp, r0
 800e2aa:	468c      	mov	ip, r1
 800e2ac:	f1b9 0f00 	cmp.w	r9, #0
 800e2b0:	daba      	bge.n	800e228 <__ieee754_pow+0x108>
 800e2b2:	9b00      	ldr	r3, [sp, #0]
 800e2b4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e2b8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e2bc:	4323      	orrs	r3, r4
 800e2be:	d108      	bne.n	800e2d2 <__ieee754_pow+0x1b2>
 800e2c0:	465a      	mov	r2, fp
 800e2c2:	4663      	mov	r3, ip
 800e2c4:	4658      	mov	r0, fp
 800e2c6:	4661      	mov	r1, ip
 800e2c8:	f7f1 ffb6 	bl	8000238 <__aeabi_dsub>
 800e2cc:	4602      	mov	r2, r0
 800e2ce:	460b      	mov	r3, r1
 800e2d0:	e78e      	b.n	800e1f0 <__ieee754_pow+0xd0>
 800e2d2:	9b00      	ldr	r3, [sp, #0]
 800e2d4:	2b01      	cmp	r3, #1
 800e2d6:	d1a7      	bne.n	800e228 <__ieee754_pow+0x108>
 800e2d8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800e2dc:	469c      	mov	ip, r3
 800e2de:	e7a3      	b.n	800e228 <__ieee754_pow+0x108>
 800e2e0:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800e2e4:	3b01      	subs	r3, #1
 800e2e6:	930c      	str	r3, [sp, #48]	; 0x30
 800e2e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e2ea:	9b00      	ldr	r3, [sp, #0]
 800e2ec:	4313      	orrs	r3, r2
 800e2ee:	d104      	bne.n	800e2fa <__ieee754_pow+0x1da>
 800e2f0:	463a      	mov	r2, r7
 800e2f2:	4643      	mov	r3, r8
 800e2f4:	4638      	mov	r0, r7
 800e2f6:	4641      	mov	r1, r8
 800e2f8:	e7e6      	b.n	800e2c8 <__ieee754_pow+0x1a8>
 800e2fa:	4b15      	ldr	r3, [pc, #84]	; (800e350 <__ieee754_pow+0x230>)
 800e2fc:	429d      	cmp	r5, r3
 800e2fe:	f340 80f9 	ble.w	800e4f4 <__ieee754_pow+0x3d4>
 800e302:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e306:	429d      	cmp	r5, r3
 800e308:	4b0f      	ldr	r3, [pc, #60]	; (800e348 <__ieee754_pow+0x228>)
 800e30a:	dd09      	ble.n	800e320 <__ieee754_pow+0x200>
 800e30c:	429c      	cmp	r4, r3
 800e30e:	dc0c      	bgt.n	800e32a <__ieee754_pow+0x20a>
 800e310:	2e00      	cmp	r6, #0
 800e312:	da85      	bge.n	800e220 <__ieee754_pow+0x100>
 800e314:	a306      	add	r3, pc, #24	; (adr r3, 800e330 <__ieee754_pow+0x210>)
 800e316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e31a:	4610      	mov	r0, r2
 800e31c:	4619      	mov	r1, r3
 800e31e:	e798      	b.n	800e252 <__ieee754_pow+0x132>
 800e320:	429c      	cmp	r4, r3
 800e322:	dbf5      	blt.n	800e310 <__ieee754_pow+0x1f0>
 800e324:	4b07      	ldr	r3, [pc, #28]	; (800e344 <__ieee754_pow+0x224>)
 800e326:	429c      	cmp	r4, r3
 800e328:	dd14      	ble.n	800e354 <__ieee754_pow+0x234>
 800e32a:	2e00      	cmp	r6, #0
 800e32c:	dcf2      	bgt.n	800e314 <__ieee754_pow+0x1f4>
 800e32e:	e777      	b.n	800e220 <__ieee754_pow+0x100>
 800e330:	8800759c 	.word	0x8800759c
 800e334:	7e37e43c 	.word	0x7e37e43c
 800e338:	7ff00000 	.word	0x7ff00000
 800e33c:	0800f379 	.word	0x0800f379
 800e340:	433fffff 	.word	0x433fffff
 800e344:	3ff00000 	.word	0x3ff00000
 800e348:	3fefffff 	.word	0x3fefffff
 800e34c:	3fe00000 	.word	0x3fe00000
 800e350:	41e00000 	.word	0x41e00000
 800e354:	4661      	mov	r1, ip
 800e356:	2200      	movs	r2, #0
 800e358:	4658      	mov	r0, fp
 800e35a:	4b61      	ldr	r3, [pc, #388]	; (800e4e0 <__ieee754_pow+0x3c0>)
 800e35c:	f7f1 ff6c 	bl	8000238 <__aeabi_dsub>
 800e360:	a355      	add	r3, pc, #340	; (adr r3, 800e4b8 <__ieee754_pow+0x398>)
 800e362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e366:	4604      	mov	r4, r0
 800e368:	460d      	mov	r5, r1
 800e36a:	f7f2 f91d 	bl	80005a8 <__aeabi_dmul>
 800e36e:	a354      	add	r3, pc, #336	; (adr r3, 800e4c0 <__ieee754_pow+0x3a0>)
 800e370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e374:	4606      	mov	r6, r0
 800e376:	460f      	mov	r7, r1
 800e378:	4620      	mov	r0, r4
 800e37a:	4629      	mov	r1, r5
 800e37c:	f7f2 f914 	bl	80005a8 <__aeabi_dmul>
 800e380:	2200      	movs	r2, #0
 800e382:	4682      	mov	sl, r0
 800e384:	468b      	mov	fp, r1
 800e386:	4620      	mov	r0, r4
 800e388:	4629      	mov	r1, r5
 800e38a:	4b56      	ldr	r3, [pc, #344]	; (800e4e4 <__ieee754_pow+0x3c4>)
 800e38c:	f7f2 f90c 	bl	80005a8 <__aeabi_dmul>
 800e390:	4602      	mov	r2, r0
 800e392:	460b      	mov	r3, r1
 800e394:	a14c      	add	r1, pc, #304	; (adr r1, 800e4c8 <__ieee754_pow+0x3a8>)
 800e396:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e39a:	f7f1 ff4d 	bl	8000238 <__aeabi_dsub>
 800e39e:	4622      	mov	r2, r4
 800e3a0:	462b      	mov	r3, r5
 800e3a2:	f7f2 f901 	bl	80005a8 <__aeabi_dmul>
 800e3a6:	4602      	mov	r2, r0
 800e3a8:	460b      	mov	r3, r1
 800e3aa:	2000      	movs	r0, #0
 800e3ac:	494e      	ldr	r1, [pc, #312]	; (800e4e8 <__ieee754_pow+0x3c8>)
 800e3ae:	f7f1 ff43 	bl	8000238 <__aeabi_dsub>
 800e3b2:	4622      	mov	r2, r4
 800e3b4:	462b      	mov	r3, r5
 800e3b6:	4680      	mov	r8, r0
 800e3b8:	4689      	mov	r9, r1
 800e3ba:	4620      	mov	r0, r4
 800e3bc:	4629      	mov	r1, r5
 800e3be:	f7f2 f8f3 	bl	80005a8 <__aeabi_dmul>
 800e3c2:	4602      	mov	r2, r0
 800e3c4:	460b      	mov	r3, r1
 800e3c6:	4640      	mov	r0, r8
 800e3c8:	4649      	mov	r1, r9
 800e3ca:	f7f2 f8ed 	bl	80005a8 <__aeabi_dmul>
 800e3ce:	a340      	add	r3, pc, #256	; (adr r3, 800e4d0 <__ieee754_pow+0x3b0>)
 800e3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3d4:	f7f2 f8e8 	bl	80005a8 <__aeabi_dmul>
 800e3d8:	4602      	mov	r2, r0
 800e3da:	460b      	mov	r3, r1
 800e3dc:	4650      	mov	r0, sl
 800e3de:	4659      	mov	r1, fp
 800e3e0:	f7f1 ff2a 	bl	8000238 <__aeabi_dsub>
 800e3e4:	f04f 0a00 	mov.w	sl, #0
 800e3e8:	4602      	mov	r2, r0
 800e3ea:	460b      	mov	r3, r1
 800e3ec:	4604      	mov	r4, r0
 800e3ee:	460d      	mov	r5, r1
 800e3f0:	4630      	mov	r0, r6
 800e3f2:	4639      	mov	r1, r7
 800e3f4:	f7f1 ff22 	bl	800023c <__adddf3>
 800e3f8:	4632      	mov	r2, r6
 800e3fa:	463b      	mov	r3, r7
 800e3fc:	4650      	mov	r0, sl
 800e3fe:	468b      	mov	fp, r1
 800e400:	f7f1 ff1a 	bl	8000238 <__aeabi_dsub>
 800e404:	4602      	mov	r2, r0
 800e406:	460b      	mov	r3, r1
 800e408:	4620      	mov	r0, r4
 800e40a:	4629      	mov	r1, r5
 800e40c:	f7f1 ff14 	bl	8000238 <__aeabi_dsub>
 800e410:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e414:	9b00      	ldr	r3, [sp, #0]
 800e416:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e418:	3b01      	subs	r3, #1
 800e41a:	4313      	orrs	r3, r2
 800e41c:	f04f 0600 	mov.w	r6, #0
 800e420:	f04f 0200 	mov.w	r2, #0
 800e424:	bf0c      	ite	eq
 800e426:	4b31      	ldreq	r3, [pc, #196]	; (800e4ec <__ieee754_pow+0x3cc>)
 800e428:	4b2d      	ldrne	r3, [pc, #180]	; (800e4e0 <__ieee754_pow+0x3c0>)
 800e42a:	4604      	mov	r4, r0
 800e42c:	460d      	mov	r5, r1
 800e42e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e432:	e9cd 2300 	strd	r2, r3, [sp]
 800e436:	4632      	mov	r2, r6
 800e438:	463b      	mov	r3, r7
 800e43a:	f7f1 fefd 	bl	8000238 <__aeabi_dsub>
 800e43e:	4652      	mov	r2, sl
 800e440:	465b      	mov	r3, fp
 800e442:	f7f2 f8b1 	bl	80005a8 <__aeabi_dmul>
 800e446:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e44a:	4680      	mov	r8, r0
 800e44c:	4689      	mov	r9, r1
 800e44e:	4620      	mov	r0, r4
 800e450:	4629      	mov	r1, r5
 800e452:	f7f2 f8a9 	bl	80005a8 <__aeabi_dmul>
 800e456:	4602      	mov	r2, r0
 800e458:	460b      	mov	r3, r1
 800e45a:	4640      	mov	r0, r8
 800e45c:	4649      	mov	r1, r9
 800e45e:	f7f1 feed 	bl	800023c <__adddf3>
 800e462:	4632      	mov	r2, r6
 800e464:	463b      	mov	r3, r7
 800e466:	4680      	mov	r8, r0
 800e468:	4689      	mov	r9, r1
 800e46a:	4650      	mov	r0, sl
 800e46c:	4659      	mov	r1, fp
 800e46e:	f7f2 f89b 	bl	80005a8 <__aeabi_dmul>
 800e472:	4604      	mov	r4, r0
 800e474:	460d      	mov	r5, r1
 800e476:	460b      	mov	r3, r1
 800e478:	4602      	mov	r2, r0
 800e47a:	4649      	mov	r1, r9
 800e47c:	4640      	mov	r0, r8
 800e47e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800e482:	f7f1 fedb 	bl	800023c <__adddf3>
 800e486:	4b1a      	ldr	r3, [pc, #104]	; (800e4f0 <__ieee754_pow+0x3d0>)
 800e488:	4682      	mov	sl, r0
 800e48a:	4299      	cmp	r1, r3
 800e48c:	460f      	mov	r7, r1
 800e48e:	460e      	mov	r6, r1
 800e490:	f340 82ed 	ble.w	800ea6e <__ieee754_pow+0x94e>
 800e494:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e498:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e49c:	4303      	orrs	r3, r0
 800e49e:	f000 81e7 	beq.w	800e870 <__ieee754_pow+0x750>
 800e4a2:	a30d      	add	r3, pc, #52	; (adr r3, 800e4d8 <__ieee754_pow+0x3b8>)
 800e4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e4ac:	f7f2 f87c 	bl	80005a8 <__aeabi_dmul>
 800e4b0:	a309      	add	r3, pc, #36	; (adr r3, 800e4d8 <__ieee754_pow+0x3b8>)
 800e4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4b6:	e6cc      	b.n	800e252 <__ieee754_pow+0x132>
 800e4b8:	60000000 	.word	0x60000000
 800e4bc:	3ff71547 	.word	0x3ff71547
 800e4c0:	f85ddf44 	.word	0xf85ddf44
 800e4c4:	3e54ae0b 	.word	0x3e54ae0b
 800e4c8:	55555555 	.word	0x55555555
 800e4cc:	3fd55555 	.word	0x3fd55555
 800e4d0:	652b82fe 	.word	0x652b82fe
 800e4d4:	3ff71547 	.word	0x3ff71547
 800e4d8:	8800759c 	.word	0x8800759c
 800e4dc:	7e37e43c 	.word	0x7e37e43c
 800e4e0:	3ff00000 	.word	0x3ff00000
 800e4e4:	3fd00000 	.word	0x3fd00000
 800e4e8:	3fe00000 	.word	0x3fe00000
 800e4ec:	bff00000 	.word	0xbff00000
 800e4f0:	408fffff 	.word	0x408fffff
 800e4f4:	4bd4      	ldr	r3, [pc, #848]	; (800e848 <__ieee754_pow+0x728>)
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	ea09 0303 	and.w	r3, r9, r3
 800e4fc:	b943      	cbnz	r3, 800e510 <__ieee754_pow+0x3f0>
 800e4fe:	4658      	mov	r0, fp
 800e500:	4661      	mov	r1, ip
 800e502:	4bd2      	ldr	r3, [pc, #840]	; (800e84c <__ieee754_pow+0x72c>)
 800e504:	f7f2 f850 	bl	80005a8 <__aeabi_dmul>
 800e508:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e50c:	4683      	mov	fp, r0
 800e50e:	460c      	mov	r4, r1
 800e510:	1523      	asrs	r3, r4, #20
 800e512:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e516:	4413      	add	r3, r2
 800e518:	930b      	str	r3, [sp, #44]	; 0x2c
 800e51a:	4bcd      	ldr	r3, [pc, #820]	; (800e850 <__ieee754_pow+0x730>)
 800e51c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e520:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e524:	429c      	cmp	r4, r3
 800e526:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e52a:	dd08      	ble.n	800e53e <__ieee754_pow+0x41e>
 800e52c:	4bc9      	ldr	r3, [pc, #804]	; (800e854 <__ieee754_pow+0x734>)
 800e52e:	429c      	cmp	r4, r3
 800e530:	f340 819c 	ble.w	800e86c <__ieee754_pow+0x74c>
 800e534:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e536:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e53a:	3301      	adds	r3, #1
 800e53c:	930b      	str	r3, [sp, #44]	; 0x2c
 800e53e:	2600      	movs	r6, #0
 800e540:	00f3      	lsls	r3, r6, #3
 800e542:	930d      	str	r3, [sp, #52]	; 0x34
 800e544:	4bc4      	ldr	r3, [pc, #784]	; (800e858 <__ieee754_pow+0x738>)
 800e546:	4658      	mov	r0, fp
 800e548:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e54c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e550:	4629      	mov	r1, r5
 800e552:	461a      	mov	r2, r3
 800e554:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800e558:	4623      	mov	r3, r4
 800e55a:	f7f1 fe6d 	bl	8000238 <__aeabi_dsub>
 800e55e:	46da      	mov	sl, fp
 800e560:	462b      	mov	r3, r5
 800e562:	4652      	mov	r2, sl
 800e564:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800e568:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e56c:	f7f1 fe66 	bl	800023c <__adddf3>
 800e570:	4602      	mov	r2, r0
 800e572:	460b      	mov	r3, r1
 800e574:	2000      	movs	r0, #0
 800e576:	49b9      	ldr	r1, [pc, #740]	; (800e85c <__ieee754_pow+0x73c>)
 800e578:	f7f2 f940 	bl	80007fc <__aeabi_ddiv>
 800e57c:	4602      	mov	r2, r0
 800e57e:	460b      	mov	r3, r1
 800e580:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e584:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e588:	f7f2 f80e 	bl	80005a8 <__aeabi_dmul>
 800e58c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e590:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800e594:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e598:	2300      	movs	r3, #0
 800e59a:	2200      	movs	r2, #0
 800e59c:	46ab      	mov	fp, r5
 800e59e:	106d      	asrs	r5, r5, #1
 800e5a0:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e5a4:	9304      	str	r3, [sp, #16]
 800e5a6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e5aa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e5ae:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800e5b2:	4640      	mov	r0, r8
 800e5b4:	4649      	mov	r1, r9
 800e5b6:	4614      	mov	r4, r2
 800e5b8:	461d      	mov	r5, r3
 800e5ba:	f7f1 fff5 	bl	80005a8 <__aeabi_dmul>
 800e5be:	4602      	mov	r2, r0
 800e5c0:	460b      	mov	r3, r1
 800e5c2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e5c6:	f7f1 fe37 	bl	8000238 <__aeabi_dsub>
 800e5ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e5ce:	4606      	mov	r6, r0
 800e5d0:	460f      	mov	r7, r1
 800e5d2:	4620      	mov	r0, r4
 800e5d4:	4629      	mov	r1, r5
 800e5d6:	f7f1 fe2f 	bl	8000238 <__aeabi_dsub>
 800e5da:	4602      	mov	r2, r0
 800e5dc:	460b      	mov	r3, r1
 800e5de:	4650      	mov	r0, sl
 800e5e0:	4659      	mov	r1, fp
 800e5e2:	f7f1 fe29 	bl	8000238 <__aeabi_dsub>
 800e5e6:	4642      	mov	r2, r8
 800e5e8:	464b      	mov	r3, r9
 800e5ea:	f7f1 ffdd 	bl	80005a8 <__aeabi_dmul>
 800e5ee:	4602      	mov	r2, r0
 800e5f0:	460b      	mov	r3, r1
 800e5f2:	4630      	mov	r0, r6
 800e5f4:	4639      	mov	r1, r7
 800e5f6:	f7f1 fe1f 	bl	8000238 <__aeabi_dsub>
 800e5fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e5fe:	f7f1 ffd3 	bl	80005a8 <__aeabi_dmul>
 800e602:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e606:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e60a:	4610      	mov	r0, r2
 800e60c:	4619      	mov	r1, r3
 800e60e:	f7f1 ffcb 	bl	80005a8 <__aeabi_dmul>
 800e612:	a37b      	add	r3, pc, #492	; (adr r3, 800e800 <__ieee754_pow+0x6e0>)
 800e614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e618:	4604      	mov	r4, r0
 800e61a:	460d      	mov	r5, r1
 800e61c:	f7f1 ffc4 	bl	80005a8 <__aeabi_dmul>
 800e620:	a379      	add	r3, pc, #484	; (adr r3, 800e808 <__ieee754_pow+0x6e8>)
 800e622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e626:	f7f1 fe09 	bl	800023c <__adddf3>
 800e62a:	4622      	mov	r2, r4
 800e62c:	462b      	mov	r3, r5
 800e62e:	f7f1 ffbb 	bl	80005a8 <__aeabi_dmul>
 800e632:	a377      	add	r3, pc, #476	; (adr r3, 800e810 <__ieee754_pow+0x6f0>)
 800e634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e638:	f7f1 fe00 	bl	800023c <__adddf3>
 800e63c:	4622      	mov	r2, r4
 800e63e:	462b      	mov	r3, r5
 800e640:	f7f1 ffb2 	bl	80005a8 <__aeabi_dmul>
 800e644:	a374      	add	r3, pc, #464	; (adr r3, 800e818 <__ieee754_pow+0x6f8>)
 800e646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e64a:	f7f1 fdf7 	bl	800023c <__adddf3>
 800e64e:	4622      	mov	r2, r4
 800e650:	462b      	mov	r3, r5
 800e652:	f7f1 ffa9 	bl	80005a8 <__aeabi_dmul>
 800e656:	a372      	add	r3, pc, #456	; (adr r3, 800e820 <__ieee754_pow+0x700>)
 800e658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e65c:	f7f1 fdee 	bl	800023c <__adddf3>
 800e660:	4622      	mov	r2, r4
 800e662:	462b      	mov	r3, r5
 800e664:	f7f1 ffa0 	bl	80005a8 <__aeabi_dmul>
 800e668:	a36f      	add	r3, pc, #444	; (adr r3, 800e828 <__ieee754_pow+0x708>)
 800e66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e66e:	f7f1 fde5 	bl	800023c <__adddf3>
 800e672:	4622      	mov	r2, r4
 800e674:	4606      	mov	r6, r0
 800e676:	460f      	mov	r7, r1
 800e678:	462b      	mov	r3, r5
 800e67a:	4620      	mov	r0, r4
 800e67c:	4629      	mov	r1, r5
 800e67e:	f7f1 ff93 	bl	80005a8 <__aeabi_dmul>
 800e682:	4602      	mov	r2, r0
 800e684:	460b      	mov	r3, r1
 800e686:	4630      	mov	r0, r6
 800e688:	4639      	mov	r1, r7
 800e68a:	f7f1 ff8d 	bl	80005a8 <__aeabi_dmul>
 800e68e:	4604      	mov	r4, r0
 800e690:	460d      	mov	r5, r1
 800e692:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e696:	4642      	mov	r2, r8
 800e698:	464b      	mov	r3, r9
 800e69a:	f7f1 fdcf 	bl	800023c <__adddf3>
 800e69e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e6a2:	f7f1 ff81 	bl	80005a8 <__aeabi_dmul>
 800e6a6:	4622      	mov	r2, r4
 800e6a8:	462b      	mov	r3, r5
 800e6aa:	f7f1 fdc7 	bl	800023c <__adddf3>
 800e6ae:	4642      	mov	r2, r8
 800e6b0:	4606      	mov	r6, r0
 800e6b2:	460f      	mov	r7, r1
 800e6b4:	464b      	mov	r3, r9
 800e6b6:	4640      	mov	r0, r8
 800e6b8:	4649      	mov	r1, r9
 800e6ba:	f7f1 ff75 	bl	80005a8 <__aeabi_dmul>
 800e6be:	2200      	movs	r2, #0
 800e6c0:	4b67      	ldr	r3, [pc, #412]	; (800e860 <__ieee754_pow+0x740>)
 800e6c2:	4682      	mov	sl, r0
 800e6c4:	468b      	mov	fp, r1
 800e6c6:	f7f1 fdb9 	bl	800023c <__adddf3>
 800e6ca:	4632      	mov	r2, r6
 800e6cc:	463b      	mov	r3, r7
 800e6ce:	f7f1 fdb5 	bl	800023c <__adddf3>
 800e6d2:	9c04      	ldr	r4, [sp, #16]
 800e6d4:	460d      	mov	r5, r1
 800e6d6:	4622      	mov	r2, r4
 800e6d8:	460b      	mov	r3, r1
 800e6da:	4640      	mov	r0, r8
 800e6dc:	4649      	mov	r1, r9
 800e6de:	f7f1 ff63 	bl	80005a8 <__aeabi_dmul>
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	4680      	mov	r8, r0
 800e6e6:	4689      	mov	r9, r1
 800e6e8:	4620      	mov	r0, r4
 800e6ea:	4629      	mov	r1, r5
 800e6ec:	4b5c      	ldr	r3, [pc, #368]	; (800e860 <__ieee754_pow+0x740>)
 800e6ee:	f7f1 fda3 	bl	8000238 <__aeabi_dsub>
 800e6f2:	4652      	mov	r2, sl
 800e6f4:	465b      	mov	r3, fp
 800e6f6:	f7f1 fd9f 	bl	8000238 <__aeabi_dsub>
 800e6fa:	4602      	mov	r2, r0
 800e6fc:	460b      	mov	r3, r1
 800e6fe:	4630      	mov	r0, r6
 800e700:	4639      	mov	r1, r7
 800e702:	f7f1 fd99 	bl	8000238 <__aeabi_dsub>
 800e706:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e70a:	f7f1 ff4d 	bl	80005a8 <__aeabi_dmul>
 800e70e:	4622      	mov	r2, r4
 800e710:	4606      	mov	r6, r0
 800e712:	460f      	mov	r7, r1
 800e714:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e718:	462b      	mov	r3, r5
 800e71a:	f7f1 ff45 	bl	80005a8 <__aeabi_dmul>
 800e71e:	4602      	mov	r2, r0
 800e720:	460b      	mov	r3, r1
 800e722:	4630      	mov	r0, r6
 800e724:	4639      	mov	r1, r7
 800e726:	f7f1 fd89 	bl	800023c <__adddf3>
 800e72a:	4606      	mov	r6, r0
 800e72c:	460f      	mov	r7, r1
 800e72e:	4602      	mov	r2, r0
 800e730:	460b      	mov	r3, r1
 800e732:	4640      	mov	r0, r8
 800e734:	4649      	mov	r1, r9
 800e736:	f7f1 fd81 	bl	800023c <__adddf3>
 800e73a:	a33d      	add	r3, pc, #244	; (adr r3, 800e830 <__ieee754_pow+0x710>)
 800e73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e740:	9c04      	ldr	r4, [sp, #16]
 800e742:	460d      	mov	r5, r1
 800e744:	4620      	mov	r0, r4
 800e746:	f7f1 ff2f 	bl	80005a8 <__aeabi_dmul>
 800e74a:	4642      	mov	r2, r8
 800e74c:	464b      	mov	r3, r9
 800e74e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e752:	4620      	mov	r0, r4
 800e754:	4629      	mov	r1, r5
 800e756:	f7f1 fd6f 	bl	8000238 <__aeabi_dsub>
 800e75a:	4602      	mov	r2, r0
 800e75c:	460b      	mov	r3, r1
 800e75e:	4630      	mov	r0, r6
 800e760:	4639      	mov	r1, r7
 800e762:	f7f1 fd69 	bl	8000238 <__aeabi_dsub>
 800e766:	a334      	add	r3, pc, #208	; (adr r3, 800e838 <__ieee754_pow+0x718>)
 800e768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e76c:	f7f1 ff1c 	bl	80005a8 <__aeabi_dmul>
 800e770:	a333      	add	r3, pc, #204	; (adr r3, 800e840 <__ieee754_pow+0x720>)
 800e772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e776:	4606      	mov	r6, r0
 800e778:	460f      	mov	r7, r1
 800e77a:	4620      	mov	r0, r4
 800e77c:	4629      	mov	r1, r5
 800e77e:	f7f1 ff13 	bl	80005a8 <__aeabi_dmul>
 800e782:	4602      	mov	r2, r0
 800e784:	460b      	mov	r3, r1
 800e786:	4630      	mov	r0, r6
 800e788:	4639      	mov	r1, r7
 800e78a:	f7f1 fd57 	bl	800023c <__adddf3>
 800e78e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e790:	4b34      	ldr	r3, [pc, #208]	; (800e864 <__ieee754_pow+0x744>)
 800e792:	4413      	add	r3, r2
 800e794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e798:	f7f1 fd50 	bl	800023c <__adddf3>
 800e79c:	4680      	mov	r8, r0
 800e79e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e7a0:	4689      	mov	r9, r1
 800e7a2:	f7f1 fe97 	bl	80004d4 <__aeabi_i2d>
 800e7a6:	4604      	mov	r4, r0
 800e7a8:	460d      	mov	r5, r1
 800e7aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e7ac:	4b2e      	ldr	r3, [pc, #184]	; (800e868 <__ieee754_pow+0x748>)
 800e7ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e7b2:	4413      	add	r3, r2
 800e7b4:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e7b8:	4642      	mov	r2, r8
 800e7ba:	464b      	mov	r3, r9
 800e7bc:	f7f1 fd3e 	bl	800023c <__adddf3>
 800e7c0:	4632      	mov	r2, r6
 800e7c2:	463b      	mov	r3, r7
 800e7c4:	f7f1 fd3a 	bl	800023c <__adddf3>
 800e7c8:	4622      	mov	r2, r4
 800e7ca:	462b      	mov	r3, r5
 800e7cc:	f7f1 fd36 	bl	800023c <__adddf3>
 800e7d0:	f8dd a010 	ldr.w	sl, [sp, #16]
 800e7d4:	4622      	mov	r2, r4
 800e7d6:	462b      	mov	r3, r5
 800e7d8:	4650      	mov	r0, sl
 800e7da:	468b      	mov	fp, r1
 800e7dc:	f7f1 fd2c 	bl	8000238 <__aeabi_dsub>
 800e7e0:	4632      	mov	r2, r6
 800e7e2:	463b      	mov	r3, r7
 800e7e4:	f7f1 fd28 	bl	8000238 <__aeabi_dsub>
 800e7e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e7ec:	f7f1 fd24 	bl	8000238 <__aeabi_dsub>
 800e7f0:	4602      	mov	r2, r0
 800e7f2:	460b      	mov	r3, r1
 800e7f4:	4640      	mov	r0, r8
 800e7f6:	4649      	mov	r1, r9
 800e7f8:	e608      	b.n	800e40c <__ieee754_pow+0x2ec>
 800e7fa:	bf00      	nop
 800e7fc:	f3af 8000 	nop.w
 800e800:	4a454eef 	.word	0x4a454eef
 800e804:	3fca7e28 	.word	0x3fca7e28
 800e808:	93c9db65 	.word	0x93c9db65
 800e80c:	3fcd864a 	.word	0x3fcd864a
 800e810:	a91d4101 	.word	0xa91d4101
 800e814:	3fd17460 	.word	0x3fd17460
 800e818:	518f264d 	.word	0x518f264d
 800e81c:	3fd55555 	.word	0x3fd55555
 800e820:	db6fabff 	.word	0xdb6fabff
 800e824:	3fdb6db6 	.word	0x3fdb6db6
 800e828:	33333303 	.word	0x33333303
 800e82c:	3fe33333 	.word	0x3fe33333
 800e830:	e0000000 	.word	0xe0000000
 800e834:	3feec709 	.word	0x3feec709
 800e838:	dc3a03fd 	.word	0xdc3a03fd
 800e83c:	3feec709 	.word	0x3feec709
 800e840:	145b01f5 	.word	0x145b01f5
 800e844:	be3e2fe0 	.word	0xbe3e2fe0
 800e848:	7ff00000 	.word	0x7ff00000
 800e84c:	43400000 	.word	0x43400000
 800e850:	0003988e 	.word	0x0003988e
 800e854:	000bb679 	.word	0x000bb679
 800e858:	0800f3a8 	.word	0x0800f3a8
 800e85c:	3ff00000 	.word	0x3ff00000
 800e860:	40080000 	.word	0x40080000
 800e864:	0800f3c8 	.word	0x0800f3c8
 800e868:	0800f3b8 	.word	0x0800f3b8
 800e86c:	2601      	movs	r6, #1
 800e86e:	e667      	b.n	800e540 <__ieee754_pow+0x420>
 800e870:	a39d      	add	r3, pc, #628	; (adr r3, 800eae8 <__ieee754_pow+0x9c8>)
 800e872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e876:	4640      	mov	r0, r8
 800e878:	4649      	mov	r1, r9
 800e87a:	f7f1 fcdf 	bl	800023c <__adddf3>
 800e87e:	4622      	mov	r2, r4
 800e880:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e884:	462b      	mov	r3, r5
 800e886:	4650      	mov	r0, sl
 800e888:	4639      	mov	r1, r7
 800e88a:	f7f1 fcd5 	bl	8000238 <__aeabi_dsub>
 800e88e:	4602      	mov	r2, r0
 800e890:	460b      	mov	r3, r1
 800e892:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e896:	f7f2 f917 	bl	8000ac8 <__aeabi_dcmpgt>
 800e89a:	2800      	cmp	r0, #0
 800e89c:	f47f ae01 	bne.w	800e4a2 <__ieee754_pow+0x382>
 800e8a0:	4aa5      	ldr	r2, [pc, #660]	; (800eb38 <__ieee754_pow+0xa18>)
 800e8a2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800e8a6:	4293      	cmp	r3, r2
 800e8a8:	f340 8103 	ble.w	800eab2 <__ieee754_pow+0x992>
 800e8ac:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e8b0:	2000      	movs	r0, #0
 800e8b2:	151b      	asrs	r3, r3, #20
 800e8b4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e8b8:	fa4a f303 	asr.w	r3, sl, r3
 800e8bc:	4433      	add	r3, r6
 800e8be:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e8c2:	4f9e      	ldr	r7, [pc, #632]	; (800eb3c <__ieee754_pow+0xa1c>)
 800e8c4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e8c8:	4117      	asrs	r7, r2
 800e8ca:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e8ce:	ea23 0107 	bic.w	r1, r3, r7
 800e8d2:	f1c2 0214 	rsb	r2, r2, #20
 800e8d6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e8da:	460b      	mov	r3, r1
 800e8dc:	fa4a fa02 	asr.w	sl, sl, r2
 800e8e0:	2e00      	cmp	r6, #0
 800e8e2:	4602      	mov	r2, r0
 800e8e4:	4629      	mov	r1, r5
 800e8e6:	4620      	mov	r0, r4
 800e8e8:	bfb8      	it	lt
 800e8ea:	f1ca 0a00 	rsblt	sl, sl, #0
 800e8ee:	f7f1 fca3 	bl	8000238 <__aeabi_dsub>
 800e8f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8fa:	2400      	movs	r4, #0
 800e8fc:	4642      	mov	r2, r8
 800e8fe:	464b      	mov	r3, r9
 800e900:	f7f1 fc9c 	bl	800023c <__adddf3>
 800e904:	a37a      	add	r3, pc, #488	; (adr r3, 800eaf0 <__ieee754_pow+0x9d0>)
 800e906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e90a:	4620      	mov	r0, r4
 800e90c:	460d      	mov	r5, r1
 800e90e:	f7f1 fe4b 	bl	80005a8 <__aeabi_dmul>
 800e912:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e916:	4606      	mov	r6, r0
 800e918:	460f      	mov	r7, r1
 800e91a:	4620      	mov	r0, r4
 800e91c:	4629      	mov	r1, r5
 800e91e:	f7f1 fc8b 	bl	8000238 <__aeabi_dsub>
 800e922:	4602      	mov	r2, r0
 800e924:	460b      	mov	r3, r1
 800e926:	4640      	mov	r0, r8
 800e928:	4649      	mov	r1, r9
 800e92a:	f7f1 fc85 	bl	8000238 <__aeabi_dsub>
 800e92e:	a372      	add	r3, pc, #456	; (adr r3, 800eaf8 <__ieee754_pow+0x9d8>)
 800e930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e934:	f7f1 fe38 	bl	80005a8 <__aeabi_dmul>
 800e938:	a371      	add	r3, pc, #452	; (adr r3, 800eb00 <__ieee754_pow+0x9e0>)
 800e93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e93e:	4680      	mov	r8, r0
 800e940:	4689      	mov	r9, r1
 800e942:	4620      	mov	r0, r4
 800e944:	4629      	mov	r1, r5
 800e946:	f7f1 fe2f 	bl	80005a8 <__aeabi_dmul>
 800e94a:	4602      	mov	r2, r0
 800e94c:	460b      	mov	r3, r1
 800e94e:	4640      	mov	r0, r8
 800e950:	4649      	mov	r1, r9
 800e952:	f7f1 fc73 	bl	800023c <__adddf3>
 800e956:	4604      	mov	r4, r0
 800e958:	460d      	mov	r5, r1
 800e95a:	4602      	mov	r2, r0
 800e95c:	460b      	mov	r3, r1
 800e95e:	4630      	mov	r0, r6
 800e960:	4639      	mov	r1, r7
 800e962:	f7f1 fc6b 	bl	800023c <__adddf3>
 800e966:	4632      	mov	r2, r6
 800e968:	463b      	mov	r3, r7
 800e96a:	4680      	mov	r8, r0
 800e96c:	4689      	mov	r9, r1
 800e96e:	f7f1 fc63 	bl	8000238 <__aeabi_dsub>
 800e972:	4602      	mov	r2, r0
 800e974:	460b      	mov	r3, r1
 800e976:	4620      	mov	r0, r4
 800e978:	4629      	mov	r1, r5
 800e97a:	f7f1 fc5d 	bl	8000238 <__aeabi_dsub>
 800e97e:	4642      	mov	r2, r8
 800e980:	4606      	mov	r6, r0
 800e982:	460f      	mov	r7, r1
 800e984:	464b      	mov	r3, r9
 800e986:	4640      	mov	r0, r8
 800e988:	4649      	mov	r1, r9
 800e98a:	f7f1 fe0d 	bl	80005a8 <__aeabi_dmul>
 800e98e:	a35e      	add	r3, pc, #376	; (adr r3, 800eb08 <__ieee754_pow+0x9e8>)
 800e990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e994:	4604      	mov	r4, r0
 800e996:	460d      	mov	r5, r1
 800e998:	f7f1 fe06 	bl	80005a8 <__aeabi_dmul>
 800e99c:	a35c      	add	r3, pc, #368	; (adr r3, 800eb10 <__ieee754_pow+0x9f0>)
 800e99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a2:	f7f1 fc49 	bl	8000238 <__aeabi_dsub>
 800e9a6:	4622      	mov	r2, r4
 800e9a8:	462b      	mov	r3, r5
 800e9aa:	f7f1 fdfd 	bl	80005a8 <__aeabi_dmul>
 800e9ae:	a35a      	add	r3, pc, #360	; (adr r3, 800eb18 <__ieee754_pow+0x9f8>)
 800e9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b4:	f7f1 fc42 	bl	800023c <__adddf3>
 800e9b8:	4622      	mov	r2, r4
 800e9ba:	462b      	mov	r3, r5
 800e9bc:	f7f1 fdf4 	bl	80005a8 <__aeabi_dmul>
 800e9c0:	a357      	add	r3, pc, #348	; (adr r3, 800eb20 <__ieee754_pow+0xa00>)
 800e9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c6:	f7f1 fc37 	bl	8000238 <__aeabi_dsub>
 800e9ca:	4622      	mov	r2, r4
 800e9cc:	462b      	mov	r3, r5
 800e9ce:	f7f1 fdeb 	bl	80005a8 <__aeabi_dmul>
 800e9d2:	a355      	add	r3, pc, #340	; (adr r3, 800eb28 <__ieee754_pow+0xa08>)
 800e9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d8:	f7f1 fc30 	bl	800023c <__adddf3>
 800e9dc:	4622      	mov	r2, r4
 800e9de:	462b      	mov	r3, r5
 800e9e0:	f7f1 fde2 	bl	80005a8 <__aeabi_dmul>
 800e9e4:	4602      	mov	r2, r0
 800e9e6:	460b      	mov	r3, r1
 800e9e8:	4640      	mov	r0, r8
 800e9ea:	4649      	mov	r1, r9
 800e9ec:	f7f1 fc24 	bl	8000238 <__aeabi_dsub>
 800e9f0:	4604      	mov	r4, r0
 800e9f2:	460d      	mov	r5, r1
 800e9f4:	4602      	mov	r2, r0
 800e9f6:	460b      	mov	r3, r1
 800e9f8:	4640      	mov	r0, r8
 800e9fa:	4649      	mov	r1, r9
 800e9fc:	f7f1 fdd4 	bl	80005a8 <__aeabi_dmul>
 800ea00:	2200      	movs	r2, #0
 800ea02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ea0a:	4620      	mov	r0, r4
 800ea0c:	4629      	mov	r1, r5
 800ea0e:	f7f1 fc13 	bl	8000238 <__aeabi_dsub>
 800ea12:	4602      	mov	r2, r0
 800ea14:	460b      	mov	r3, r1
 800ea16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea1a:	f7f1 feef 	bl	80007fc <__aeabi_ddiv>
 800ea1e:	4632      	mov	r2, r6
 800ea20:	4604      	mov	r4, r0
 800ea22:	460d      	mov	r5, r1
 800ea24:	463b      	mov	r3, r7
 800ea26:	4640      	mov	r0, r8
 800ea28:	4649      	mov	r1, r9
 800ea2a:	f7f1 fdbd 	bl	80005a8 <__aeabi_dmul>
 800ea2e:	4632      	mov	r2, r6
 800ea30:	463b      	mov	r3, r7
 800ea32:	f7f1 fc03 	bl	800023c <__adddf3>
 800ea36:	4602      	mov	r2, r0
 800ea38:	460b      	mov	r3, r1
 800ea3a:	4620      	mov	r0, r4
 800ea3c:	4629      	mov	r1, r5
 800ea3e:	f7f1 fbfb 	bl	8000238 <__aeabi_dsub>
 800ea42:	4642      	mov	r2, r8
 800ea44:	464b      	mov	r3, r9
 800ea46:	f7f1 fbf7 	bl	8000238 <__aeabi_dsub>
 800ea4a:	4602      	mov	r2, r0
 800ea4c:	460b      	mov	r3, r1
 800ea4e:	2000      	movs	r0, #0
 800ea50:	493b      	ldr	r1, [pc, #236]	; (800eb40 <__ieee754_pow+0xa20>)
 800ea52:	f7f1 fbf1 	bl	8000238 <__aeabi_dsub>
 800ea56:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800ea5a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800ea5e:	da2b      	bge.n	800eab8 <__ieee754_pow+0x998>
 800ea60:	4652      	mov	r2, sl
 800ea62:	f000 f9b9 	bl	800edd8 <scalbn>
 800ea66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea6a:	f7ff bbf2 	b.w	800e252 <__ieee754_pow+0x132>
 800ea6e:	4b35      	ldr	r3, [pc, #212]	; (800eb44 <__ieee754_pow+0xa24>)
 800ea70:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800ea74:	429f      	cmp	r7, r3
 800ea76:	f77f af13 	ble.w	800e8a0 <__ieee754_pow+0x780>
 800ea7a:	4b33      	ldr	r3, [pc, #204]	; (800eb48 <__ieee754_pow+0xa28>)
 800ea7c:	440b      	add	r3, r1
 800ea7e:	4303      	orrs	r3, r0
 800ea80:	d00b      	beq.n	800ea9a <__ieee754_pow+0x97a>
 800ea82:	a32b      	add	r3, pc, #172	; (adr r3, 800eb30 <__ieee754_pow+0xa10>)
 800ea84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea88:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ea8c:	f7f1 fd8c 	bl	80005a8 <__aeabi_dmul>
 800ea90:	a327      	add	r3, pc, #156	; (adr r3, 800eb30 <__ieee754_pow+0xa10>)
 800ea92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea96:	f7ff bbdc 	b.w	800e252 <__ieee754_pow+0x132>
 800ea9a:	4622      	mov	r2, r4
 800ea9c:	462b      	mov	r3, r5
 800ea9e:	f7f1 fbcb 	bl	8000238 <__aeabi_dsub>
 800eaa2:	4642      	mov	r2, r8
 800eaa4:	464b      	mov	r3, r9
 800eaa6:	f7f2 f805 	bl	8000ab4 <__aeabi_dcmpge>
 800eaaa:	2800      	cmp	r0, #0
 800eaac:	f43f aef8 	beq.w	800e8a0 <__ieee754_pow+0x780>
 800eab0:	e7e7      	b.n	800ea82 <__ieee754_pow+0x962>
 800eab2:	f04f 0a00 	mov.w	sl, #0
 800eab6:	e71e      	b.n	800e8f6 <__ieee754_pow+0x7d6>
 800eab8:	4621      	mov	r1, r4
 800eaba:	e7d4      	b.n	800ea66 <__ieee754_pow+0x946>
 800eabc:	f04f 0b00 	mov.w	fp, #0
 800eac0:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800eb40 <__ieee754_pow+0xa20>
 800eac4:	f7ff bbb0 	b.w	800e228 <__ieee754_pow+0x108>
 800eac8:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800eacc:	f7ff bbac 	b.w	800e228 <__ieee754_pow+0x108>
 800ead0:	4638      	mov	r0, r7
 800ead2:	4641      	mov	r1, r8
 800ead4:	f7ff bbbf 	b.w	800e256 <__ieee754_pow+0x136>
 800ead8:	9200      	str	r2, [sp, #0]
 800eada:	f7ff bb7f 	b.w	800e1dc <__ieee754_pow+0xbc>
 800eade:	2300      	movs	r3, #0
 800eae0:	f7ff bb69 	b.w	800e1b6 <__ieee754_pow+0x96>
 800eae4:	f3af 8000 	nop.w
 800eae8:	652b82fe 	.word	0x652b82fe
 800eaec:	3c971547 	.word	0x3c971547
 800eaf0:	00000000 	.word	0x00000000
 800eaf4:	3fe62e43 	.word	0x3fe62e43
 800eaf8:	fefa39ef 	.word	0xfefa39ef
 800eafc:	3fe62e42 	.word	0x3fe62e42
 800eb00:	0ca86c39 	.word	0x0ca86c39
 800eb04:	be205c61 	.word	0xbe205c61
 800eb08:	72bea4d0 	.word	0x72bea4d0
 800eb0c:	3e663769 	.word	0x3e663769
 800eb10:	c5d26bf1 	.word	0xc5d26bf1
 800eb14:	3ebbbd41 	.word	0x3ebbbd41
 800eb18:	af25de2c 	.word	0xaf25de2c
 800eb1c:	3f11566a 	.word	0x3f11566a
 800eb20:	16bebd93 	.word	0x16bebd93
 800eb24:	3f66c16c 	.word	0x3f66c16c
 800eb28:	5555553e 	.word	0x5555553e
 800eb2c:	3fc55555 	.word	0x3fc55555
 800eb30:	c2f8f359 	.word	0xc2f8f359
 800eb34:	01a56e1f 	.word	0x01a56e1f
 800eb38:	3fe00000 	.word	0x3fe00000
 800eb3c:	000fffff 	.word	0x000fffff
 800eb40:	3ff00000 	.word	0x3ff00000
 800eb44:	4090cbff 	.word	0x4090cbff
 800eb48:	3f6f3400 	.word	0x3f6f3400

0800eb4c <__ieee754_sqrt>:
 800eb4c:	f8df c150 	ldr.w	ip, [pc, #336]	; 800eca0 <__ieee754_sqrt+0x154>
 800eb50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb54:	ea3c 0c01 	bics.w	ip, ip, r1
 800eb58:	460b      	mov	r3, r1
 800eb5a:	4606      	mov	r6, r0
 800eb5c:	460d      	mov	r5, r1
 800eb5e:	460a      	mov	r2, r1
 800eb60:	4607      	mov	r7, r0
 800eb62:	4604      	mov	r4, r0
 800eb64:	d10e      	bne.n	800eb84 <__ieee754_sqrt+0x38>
 800eb66:	4602      	mov	r2, r0
 800eb68:	f7f1 fd1e 	bl	80005a8 <__aeabi_dmul>
 800eb6c:	4602      	mov	r2, r0
 800eb6e:	460b      	mov	r3, r1
 800eb70:	4630      	mov	r0, r6
 800eb72:	4629      	mov	r1, r5
 800eb74:	f7f1 fb62 	bl	800023c <__adddf3>
 800eb78:	4606      	mov	r6, r0
 800eb7a:	460d      	mov	r5, r1
 800eb7c:	4630      	mov	r0, r6
 800eb7e:	4629      	mov	r1, r5
 800eb80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb84:	2900      	cmp	r1, #0
 800eb86:	dc0d      	bgt.n	800eba4 <__ieee754_sqrt+0x58>
 800eb88:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800eb8c:	ea5c 0707 	orrs.w	r7, ip, r7
 800eb90:	d0f4      	beq.n	800eb7c <__ieee754_sqrt+0x30>
 800eb92:	b139      	cbz	r1, 800eba4 <__ieee754_sqrt+0x58>
 800eb94:	4602      	mov	r2, r0
 800eb96:	f7f1 fb4f 	bl	8000238 <__aeabi_dsub>
 800eb9a:	4602      	mov	r2, r0
 800eb9c:	460b      	mov	r3, r1
 800eb9e:	f7f1 fe2d 	bl	80007fc <__aeabi_ddiv>
 800eba2:	e7e9      	b.n	800eb78 <__ieee754_sqrt+0x2c>
 800eba4:	1512      	asrs	r2, r2, #20
 800eba6:	d074      	beq.n	800ec92 <__ieee754_sqrt+0x146>
 800eba8:	2000      	movs	r0, #0
 800ebaa:	07d5      	lsls	r5, r2, #31
 800ebac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ebb0:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800ebb4:	bf5e      	ittt	pl
 800ebb6:	0fe3      	lsrpl	r3, r4, #31
 800ebb8:	0064      	lslpl	r4, r4, #1
 800ebba:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800ebbe:	0fe3      	lsrs	r3, r4, #31
 800ebc0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800ebc4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800ebc8:	2516      	movs	r5, #22
 800ebca:	4601      	mov	r1, r0
 800ebcc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ebd0:	1076      	asrs	r6, r6, #1
 800ebd2:	0064      	lsls	r4, r4, #1
 800ebd4:	188f      	adds	r7, r1, r2
 800ebd6:	429f      	cmp	r7, r3
 800ebd8:	bfde      	ittt	le
 800ebda:	1bdb      	suble	r3, r3, r7
 800ebdc:	18b9      	addle	r1, r7, r2
 800ebde:	1880      	addle	r0, r0, r2
 800ebe0:	005b      	lsls	r3, r3, #1
 800ebe2:	3d01      	subs	r5, #1
 800ebe4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800ebe8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ebec:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800ebf0:	d1f0      	bne.n	800ebd4 <__ieee754_sqrt+0x88>
 800ebf2:	462a      	mov	r2, r5
 800ebf4:	f04f 0e20 	mov.w	lr, #32
 800ebf8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800ebfc:	428b      	cmp	r3, r1
 800ebfe:	eb07 0c05 	add.w	ip, r7, r5
 800ec02:	dc02      	bgt.n	800ec0a <__ieee754_sqrt+0xbe>
 800ec04:	d113      	bne.n	800ec2e <__ieee754_sqrt+0xe2>
 800ec06:	45a4      	cmp	ip, r4
 800ec08:	d811      	bhi.n	800ec2e <__ieee754_sqrt+0xe2>
 800ec0a:	f1bc 0f00 	cmp.w	ip, #0
 800ec0e:	eb0c 0507 	add.w	r5, ip, r7
 800ec12:	da43      	bge.n	800ec9c <__ieee754_sqrt+0x150>
 800ec14:	2d00      	cmp	r5, #0
 800ec16:	db41      	blt.n	800ec9c <__ieee754_sqrt+0x150>
 800ec18:	f101 0801 	add.w	r8, r1, #1
 800ec1c:	1a5b      	subs	r3, r3, r1
 800ec1e:	4641      	mov	r1, r8
 800ec20:	45a4      	cmp	ip, r4
 800ec22:	bf88      	it	hi
 800ec24:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ec28:	eba4 040c 	sub.w	r4, r4, ip
 800ec2c:	443a      	add	r2, r7
 800ec2e:	005b      	lsls	r3, r3, #1
 800ec30:	f1be 0e01 	subs.w	lr, lr, #1
 800ec34:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800ec38:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800ec3c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800ec40:	d1dc      	bne.n	800ebfc <__ieee754_sqrt+0xb0>
 800ec42:	4323      	orrs	r3, r4
 800ec44:	d006      	beq.n	800ec54 <__ieee754_sqrt+0x108>
 800ec46:	1c54      	adds	r4, r2, #1
 800ec48:	bf0b      	itete	eq
 800ec4a:	4672      	moveq	r2, lr
 800ec4c:	3201      	addne	r2, #1
 800ec4e:	3001      	addeq	r0, #1
 800ec50:	f022 0201 	bicne.w	r2, r2, #1
 800ec54:	1043      	asrs	r3, r0, #1
 800ec56:	07c1      	lsls	r1, r0, #31
 800ec58:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ec5c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ec60:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ec64:	bf48      	it	mi
 800ec66:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ec6a:	4610      	mov	r0, r2
 800ec6c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800ec70:	e782      	b.n	800eb78 <__ieee754_sqrt+0x2c>
 800ec72:	0ae3      	lsrs	r3, r4, #11
 800ec74:	3915      	subs	r1, #21
 800ec76:	0564      	lsls	r4, r4, #21
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d0fa      	beq.n	800ec72 <__ieee754_sqrt+0x126>
 800ec7c:	02de      	lsls	r6, r3, #11
 800ec7e:	d50a      	bpl.n	800ec96 <__ieee754_sqrt+0x14a>
 800ec80:	f1c2 0020 	rsb	r0, r2, #32
 800ec84:	fa24 f000 	lsr.w	r0, r4, r0
 800ec88:	1e55      	subs	r5, r2, #1
 800ec8a:	4094      	lsls	r4, r2
 800ec8c:	4303      	orrs	r3, r0
 800ec8e:	1b4a      	subs	r2, r1, r5
 800ec90:	e78a      	b.n	800eba8 <__ieee754_sqrt+0x5c>
 800ec92:	4611      	mov	r1, r2
 800ec94:	e7f0      	b.n	800ec78 <__ieee754_sqrt+0x12c>
 800ec96:	005b      	lsls	r3, r3, #1
 800ec98:	3201      	adds	r2, #1
 800ec9a:	e7ef      	b.n	800ec7c <__ieee754_sqrt+0x130>
 800ec9c:	4688      	mov	r8, r1
 800ec9e:	e7bd      	b.n	800ec1c <__ieee754_sqrt+0xd0>
 800eca0:	7ff00000 	.word	0x7ff00000

0800eca4 <fabs>:
 800eca4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800eca8:	4770      	bx	lr

0800ecaa <finite>:
 800ecaa:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800ecae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ecb2:	0fc0      	lsrs	r0, r0, #31
 800ecb4:	4770      	bx	lr
	...

0800ecb8 <nan>:
 800ecb8:	2000      	movs	r0, #0
 800ecba:	4901      	ldr	r1, [pc, #4]	; (800ecc0 <nan+0x8>)
 800ecbc:	4770      	bx	lr
 800ecbe:	bf00      	nop
 800ecc0:	7ff80000 	.word	0x7ff80000

0800ecc4 <rint>:
 800ecc4:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800ecc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ecca:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800ecce:	2f13      	cmp	r7, #19
 800ecd0:	4602      	mov	r2, r0
 800ecd2:	460b      	mov	r3, r1
 800ecd4:	460c      	mov	r4, r1
 800ecd6:	4605      	mov	r5, r0
 800ecd8:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800ecdc:	dc59      	bgt.n	800ed92 <rint+0xce>
 800ecde:	2f00      	cmp	r7, #0
 800ece0:	da2a      	bge.n	800ed38 <rint+0x74>
 800ece2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ece6:	4301      	orrs	r1, r0
 800ece8:	d022      	beq.n	800ed30 <rint+0x6c>
 800ecea:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800ecee:	4301      	orrs	r1, r0
 800ecf0:	424d      	negs	r5, r1
 800ecf2:	430d      	orrs	r5, r1
 800ecf4:	4936      	ldr	r1, [pc, #216]	; (800edd0 <rint+0x10c>)
 800ecf6:	0c5c      	lsrs	r4, r3, #17
 800ecf8:	0b2d      	lsrs	r5, r5, #12
 800ecfa:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800ecfe:	0464      	lsls	r4, r4, #17
 800ed00:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ed04:	ea45 0304 	orr.w	r3, r5, r4
 800ed08:	e9d1 4500 	ldrd	r4, r5, [r1]
 800ed0c:	4620      	mov	r0, r4
 800ed0e:	4629      	mov	r1, r5
 800ed10:	f7f1 fa94 	bl	800023c <__adddf3>
 800ed14:	e9cd 0100 	strd	r0, r1, [sp]
 800ed18:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ed1c:	462b      	mov	r3, r5
 800ed1e:	4622      	mov	r2, r4
 800ed20:	f7f1 fa8a 	bl	8000238 <__aeabi_dsub>
 800ed24:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ed28:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800ed2c:	4602      	mov	r2, r0
 800ed2e:	460b      	mov	r3, r1
 800ed30:	4610      	mov	r0, r2
 800ed32:	4619      	mov	r1, r3
 800ed34:	b003      	add	sp, #12
 800ed36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed38:	4926      	ldr	r1, [pc, #152]	; (800edd4 <rint+0x110>)
 800ed3a:	4139      	asrs	r1, r7
 800ed3c:	ea03 0001 	and.w	r0, r3, r1
 800ed40:	4310      	orrs	r0, r2
 800ed42:	d0f5      	beq.n	800ed30 <rint+0x6c>
 800ed44:	084b      	lsrs	r3, r1, #1
 800ed46:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800ed4a:	ea52 0501 	orrs.w	r5, r2, r1
 800ed4e:	d00c      	beq.n	800ed6a <rint+0xa6>
 800ed50:	ea24 0303 	bic.w	r3, r4, r3
 800ed54:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800ed58:	2f13      	cmp	r7, #19
 800ed5a:	bf0c      	ite	eq
 800ed5c:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800ed60:	2500      	movne	r5, #0
 800ed62:	fa44 f707 	asr.w	r7, r4, r7
 800ed66:	ea43 0407 	orr.w	r4, r3, r7
 800ed6a:	4919      	ldr	r1, [pc, #100]	; (800edd0 <rint+0x10c>)
 800ed6c:	4623      	mov	r3, r4
 800ed6e:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800ed72:	462a      	mov	r2, r5
 800ed74:	e9d6 4500 	ldrd	r4, r5, [r6]
 800ed78:	4620      	mov	r0, r4
 800ed7a:	4629      	mov	r1, r5
 800ed7c:	f7f1 fa5e 	bl	800023c <__adddf3>
 800ed80:	e9cd 0100 	strd	r0, r1, [sp]
 800ed84:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ed88:	4622      	mov	r2, r4
 800ed8a:	462b      	mov	r3, r5
 800ed8c:	f7f1 fa54 	bl	8000238 <__aeabi_dsub>
 800ed90:	e7cc      	b.n	800ed2c <rint+0x68>
 800ed92:	2f33      	cmp	r7, #51	; 0x33
 800ed94:	dd05      	ble.n	800eda2 <rint+0xde>
 800ed96:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800ed9a:	d1c9      	bne.n	800ed30 <rint+0x6c>
 800ed9c:	f7f1 fa4e 	bl	800023c <__adddf3>
 800eda0:	e7c4      	b.n	800ed2c <rint+0x68>
 800eda2:	f04f 31ff 	mov.w	r1, #4294967295
 800eda6:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800edaa:	fa21 f10c 	lsr.w	r1, r1, ip
 800edae:	4208      	tst	r0, r1
 800edb0:	d0be      	beq.n	800ed30 <rint+0x6c>
 800edb2:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800edb6:	bf18      	it	ne
 800edb8:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800edbc:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800edc0:	bf1e      	ittt	ne
 800edc2:	ea20 0303 	bicne.w	r3, r0, r3
 800edc6:	fa45 fc0c 	asrne.w	ip, r5, ip
 800edca:	ea43 050c 	orrne.w	r5, r3, ip
 800edce:	e7cc      	b.n	800ed6a <rint+0xa6>
 800edd0:	0800f3d8 	.word	0x0800f3d8
 800edd4:	000fffff 	.word	0x000fffff

0800edd8 <scalbn>:
 800edd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edda:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800edde:	4604      	mov	r4, r0
 800ede0:	460d      	mov	r5, r1
 800ede2:	4617      	mov	r7, r2
 800ede4:	460b      	mov	r3, r1
 800ede6:	b996      	cbnz	r6, 800ee0e <scalbn+0x36>
 800ede8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800edec:	4303      	orrs	r3, r0
 800edee:	d039      	beq.n	800ee64 <scalbn+0x8c>
 800edf0:	4b35      	ldr	r3, [pc, #212]	; (800eec8 <scalbn+0xf0>)
 800edf2:	2200      	movs	r2, #0
 800edf4:	f7f1 fbd8 	bl	80005a8 <__aeabi_dmul>
 800edf8:	4b34      	ldr	r3, [pc, #208]	; (800eecc <scalbn+0xf4>)
 800edfa:	4604      	mov	r4, r0
 800edfc:	429f      	cmp	r7, r3
 800edfe:	460d      	mov	r5, r1
 800ee00:	da0f      	bge.n	800ee22 <scalbn+0x4a>
 800ee02:	a32d      	add	r3, pc, #180	; (adr r3, 800eeb8 <scalbn+0xe0>)
 800ee04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee08:	f7f1 fbce 	bl	80005a8 <__aeabi_dmul>
 800ee0c:	e006      	b.n	800ee1c <scalbn+0x44>
 800ee0e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ee12:	4296      	cmp	r6, r2
 800ee14:	d10a      	bne.n	800ee2c <scalbn+0x54>
 800ee16:	4602      	mov	r2, r0
 800ee18:	f7f1 fa10 	bl	800023c <__adddf3>
 800ee1c:	4604      	mov	r4, r0
 800ee1e:	460d      	mov	r5, r1
 800ee20:	e020      	b.n	800ee64 <scalbn+0x8c>
 800ee22:	460b      	mov	r3, r1
 800ee24:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ee28:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800ee2c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800ee30:	19b9      	adds	r1, r7, r6
 800ee32:	4291      	cmp	r1, r2
 800ee34:	dd0e      	ble.n	800ee54 <scalbn+0x7c>
 800ee36:	a322      	add	r3, pc, #136	; (adr r3, 800eec0 <scalbn+0xe8>)
 800ee38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee3c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800ee40:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800ee44:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800ee48:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800ee4c:	4820      	ldr	r0, [pc, #128]	; (800eed0 <scalbn+0xf8>)
 800ee4e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800ee52:	e7d9      	b.n	800ee08 <scalbn+0x30>
 800ee54:	2900      	cmp	r1, #0
 800ee56:	dd08      	ble.n	800ee6a <scalbn+0x92>
 800ee58:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ee5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ee60:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800ee64:	4620      	mov	r0, r4
 800ee66:	4629      	mov	r1, r5
 800ee68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee6a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800ee6e:	da16      	bge.n	800ee9e <scalbn+0xc6>
 800ee70:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ee74:	429f      	cmp	r7, r3
 800ee76:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800ee7a:	dd08      	ble.n	800ee8e <scalbn+0xb6>
 800ee7c:	4c15      	ldr	r4, [pc, #84]	; (800eed4 <scalbn+0xfc>)
 800ee7e:	4814      	ldr	r0, [pc, #80]	; (800eed0 <scalbn+0xf8>)
 800ee80:	f363 74df 	bfi	r4, r3, #31, #1
 800ee84:	a30e      	add	r3, pc, #56	; (adr r3, 800eec0 <scalbn+0xe8>)
 800ee86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee8a:	4621      	mov	r1, r4
 800ee8c:	e7bc      	b.n	800ee08 <scalbn+0x30>
 800ee8e:	4c12      	ldr	r4, [pc, #72]	; (800eed8 <scalbn+0x100>)
 800ee90:	4812      	ldr	r0, [pc, #72]	; (800eedc <scalbn+0x104>)
 800ee92:	f363 74df 	bfi	r4, r3, #31, #1
 800ee96:	a308      	add	r3, pc, #32	; (adr r3, 800eeb8 <scalbn+0xe0>)
 800ee98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee9c:	e7f5      	b.n	800ee8a <scalbn+0xb2>
 800ee9e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800eea2:	3136      	adds	r1, #54	; 0x36
 800eea4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800eea8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800eeac:	4620      	mov	r0, r4
 800eeae:	4629      	mov	r1, r5
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	4b0b      	ldr	r3, [pc, #44]	; (800eee0 <scalbn+0x108>)
 800eeb4:	e7a8      	b.n	800ee08 <scalbn+0x30>
 800eeb6:	bf00      	nop
 800eeb8:	c2f8f359 	.word	0xc2f8f359
 800eebc:	01a56e1f 	.word	0x01a56e1f
 800eec0:	8800759c 	.word	0x8800759c
 800eec4:	7e37e43c 	.word	0x7e37e43c
 800eec8:	43500000 	.word	0x43500000
 800eecc:	ffff3cb0 	.word	0xffff3cb0
 800eed0:	8800759c 	.word	0x8800759c
 800eed4:	7e37e43c 	.word	0x7e37e43c
 800eed8:	01a56e1f 	.word	0x01a56e1f
 800eedc:	c2f8f359 	.word	0xc2f8f359
 800eee0:	3c900000 	.word	0x3c900000

0800eee4 <_init>:
 800eee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eee6:	bf00      	nop
 800eee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eeea:	bc08      	pop	{r3}
 800eeec:	469e      	mov	lr, r3
 800eeee:	4770      	bx	lr

0800eef0 <_fini>:
 800eef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eef2:	bf00      	nop
 800eef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eef6:	bc08      	pop	{r3}
 800eef8:	469e      	mov	lr, r3
 800eefa:	4770      	bx	lr
