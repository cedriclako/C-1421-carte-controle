
UFEC23.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fbec  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  0800fde0  0800fde0  0001fde0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010288  08010288  000300c4  2**0
                  CONTENTS
  4 .ARM          00000008  08010288  08010288  00020288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010290  08010290  000300c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010290  08010290  00020290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010294  08010294  00020294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08010298  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000306c  200000c4  0801035c  000300c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003130  0801035c  00033130  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002624c  00000000  00000000  000300ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000054fc  00000000  00000000  00056339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc0  00000000  00000000  0005b838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019b0  00000000  00000000  0005d3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000251d4  00000000  00000000  0005eda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021d8a  00000000  00000000  00083f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7851  00000000  00000000  000a5d06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016d557  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f7c  00000000  00000000  0016d5ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200000c4 	.word	0x200000c4
 800020c:	00000000 	.word	0x00000000
 8000210:	0800fdc4 	.word	0x0800fdc4

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200000c8 	.word	0x200000c8
 800022c:	0800fdc4 	.word	0x0800fdc4

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2uiz>:
 8000b08:	004a      	lsls	r2, r1, #1
 8000b0a:	d211      	bcs.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d211      	bcs.n	8000b36 <__aeabi_d2uiz+0x2e>
 8000b12:	d50d      	bpl.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d40e      	bmi.n	8000b3c <__aeabi_d2uiz+0x34>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_d2uiz+0x3a>
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0000 	mov.w	r0, #0
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_frsub>:
 8000be8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bec:	e002      	b.n	8000bf4 <__addsf3>
 8000bee:	bf00      	nop

08000bf0 <__aeabi_fsub>:
 8000bf0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bf4 <__addsf3>:
 8000bf4:	0042      	lsls	r2, r0, #1
 8000bf6:	bf1f      	itttt	ne
 8000bf8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bfc:	ea92 0f03 	teqne	r2, r3
 8000c00:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c04:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c08:	d06a      	beq.n	8000ce0 <__addsf3+0xec>
 8000c0a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c0e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c12:	bfc1      	itttt	gt
 8000c14:	18d2      	addgt	r2, r2, r3
 8000c16:	4041      	eorgt	r1, r0
 8000c18:	4048      	eorgt	r0, r1
 8000c1a:	4041      	eorgt	r1, r0
 8000c1c:	bfb8      	it	lt
 8000c1e:	425b      	neglt	r3, r3
 8000c20:	2b19      	cmp	r3, #25
 8000c22:	bf88      	it	hi
 8000c24:	4770      	bxhi	lr
 8000c26:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c32:	bf18      	it	ne
 8000c34:	4240      	negne	r0, r0
 8000c36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c3a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c3e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c42:	bf18      	it	ne
 8000c44:	4249      	negne	r1, r1
 8000c46:	ea92 0f03 	teq	r2, r3
 8000c4a:	d03f      	beq.n	8000ccc <__addsf3+0xd8>
 8000c4c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c50:	fa41 fc03 	asr.w	ip, r1, r3
 8000c54:	eb10 000c 	adds.w	r0, r0, ip
 8000c58:	f1c3 0320 	rsb	r3, r3, #32
 8000c5c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c60:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	d502      	bpl.n	8000c6c <__addsf3+0x78>
 8000c66:	4249      	negs	r1, r1
 8000c68:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c6c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c70:	d313      	bcc.n	8000c9a <__addsf3+0xa6>
 8000c72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c76:	d306      	bcc.n	8000c86 <__addsf3+0x92>
 8000c78:	0840      	lsrs	r0, r0, #1
 8000c7a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c7e:	f102 0201 	add.w	r2, r2, #1
 8000c82:	2afe      	cmp	r2, #254	; 0xfe
 8000c84:	d251      	bcs.n	8000d2a <__addsf3+0x136>
 8000c86:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c8e:	bf08      	it	eq
 8000c90:	f020 0001 	biceq.w	r0, r0, #1
 8000c94:	ea40 0003 	orr.w	r0, r0, r3
 8000c98:	4770      	bx	lr
 8000c9a:	0049      	lsls	r1, r1, #1
 8000c9c:	eb40 0000 	adc.w	r0, r0, r0
 8000ca0:	3a01      	subs	r2, #1
 8000ca2:	bf28      	it	cs
 8000ca4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ca8:	d2ed      	bcs.n	8000c86 <__addsf3+0x92>
 8000caa:	fab0 fc80 	clz	ip, r0
 8000cae:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cb2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cb6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cba:	bfaa      	itet	ge
 8000cbc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc0:	4252      	neglt	r2, r2
 8000cc2:	4318      	orrge	r0, r3
 8000cc4:	bfbc      	itt	lt
 8000cc6:	40d0      	lsrlt	r0, r2
 8000cc8:	4318      	orrlt	r0, r3
 8000cca:	4770      	bx	lr
 8000ccc:	f092 0f00 	teq	r2, #0
 8000cd0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cd4:	bf06      	itte	eq
 8000cd6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cda:	3201      	addeq	r2, #1
 8000cdc:	3b01      	subne	r3, #1
 8000cde:	e7b5      	b.n	8000c4c <__addsf3+0x58>
 8000ce0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ce4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ce8:	bf18      	it	ne
 8000cea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cee:	d021      	beq.n	8000d34 <__addsf3+0x140>
 8000cf0:	ea92 0f03 	teq	r2, r3
 8000cf4:	d004      	beq.n	8000d00 <__addsf3+0x10c>
 8000cf6:	f092 0f00 	teq	r2, #0
 8000cfa:	bf08      	it	eq
 8000cfc:	4608      	moveq	r0, r1
 8000cfe:	4770      	bx	lr
 8000d00:	ea90 0f01 	teq	r0, r1
 8000d04:	bf1c      	itt	ne
 8000d06:	2000      	movne	r0, #0
 8000d08:	4770      	bxne	lr
 8000d0a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d0e:	d104      	bne.n	8000d1a <__addsf3+0x126>
 8000d10:	0040      	lsls	r0, r0, #1
 8000d12:	bf28      	it	cs
 8000d14:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d18:	4770      	bx	lr
 8000d1a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d1e:	bf3c      	itt	cc
 8000d20:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d24:	4770      	bxcc	lr
 8000d26:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d2a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d32:	4770      	bx	lr
 8000d34:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d38:	bf16      	itet	ne
 8000d3a:	4608      	movne	r0, r1
 8000d3c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d40:	4601      	movne	r1, r0
 8000d42:	0242      	lsls	r2, r0, #9
 8000d44:	bf06      	itte	eq
 8000d46:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d4a:	ea90 0f01 	teqeq	r0, r1
 8000d4e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d52:	4770      	bx	lr

08000d54 <__aeabi_ui2f>:
 8000d54:	f04f 0300 	mov.w	r3, #0
 8000d58:	e004      	b.n	8000d64 <__aeabi_i2f+0x8>
 8000d5a:	bf00      	nop

08000d5c <__aeabi_i2f>:
 8000d5c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d60:	bf48      	it	mi
 8000d62:	4240      	negmi	r0, r0
 8000d64:	ea5f 0c00 	movs.w	ip, r0
 8000d68:	bf08      	it	eq
 8000d6a:	4770      	bxeq	lr
 8000d6c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d70:	4601      	mov	r1, r0
 8000d72:	f04f 0000 	mov.w	r0, #0
 8000d76:	e01c      	b.n	8000db2 <__aeabi_l2f+0x2a>

08000d78 <__aeabi_ul2f>:
 8000d78:	ea50 0201 	orrs.w	r2, r0, r1
 8000d7c:	bf08      	it	eq
 8000d7e:	4770      	bxeq	lr
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	e00a      	b.n	8000d9c <__aeabi_l2f+0x14>
 8000d86:	bf00      	nop

08000d88 <__aeabi_l2f>:
 8000d88:	ea50 0201 	orrs.w	r2, r0, r1
 8000d8c:	bf08      	it	eq
 8000d8e:	4770      	bxeq	lr
 8000d90:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d94:	d502      	bpl.n	8000d9c <__aeabi_l2f+0x14>
 8000d96:	4240      	negs	r0, r0
 8000d98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d9c:	ea5f 0c01 	movs.w	ip, r1
 8000da0:	bf02      	ittt	eq
 8000da2:	4684      	moveq	ip, r0
 8000da4:	4601      	moveq	r1, r0
 8000da6:	2000      	moveq	r0, #0
 8000da8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dac:	bf08      	it	eq
 8000dae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000db2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000db6:	fabc f28c 	clz	r2, ip
 8000dba:	3a08      	subs	r2, #8
 8000dbc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc0:	db10      	blt.n	8000de4 <__aeabi_l2f+0x5c>
 8000dc2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dcc:	f1c2 0220 	rsb	r2, r2, #32
 8000dd0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dd4:	fa20 f202 	lsr.w	r2, r0, r2
 8000dd8:	eb43 0002 	adc.w	r0, r3, r2
 8000ddc:	bf08      	it	eq
 8000dde:	f020 0001 	biceq.w	r0, r0, #1
 8000de2:	4770      	bx	lr
 8000de4:	f102 0220 	add.w	r2, r2, #32
 8000de8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dec:	f1c2 0220 	rsb	r2, r2, #32
 8000df0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000df4:	fa21 f202 	lsr.w	r2, r1, r2
 8000df8:	eb43 0002 	adc.w	r0, r3, r2
 8000dfc:	bf08      	it	eq
 8000dfe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e02:	4770      	bx	lr

08000e04 <__aeabi_fmul>:
 8000e04:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e08:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e0c:	bf1e      	ittt	ne
 8000e0e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e12:	ea92 0f0c 	teqne	r2, ip
 8000e16:	ea93 0f0c 	teqne	r3, ip
 8000e1a:	d06f      	beq.n	8000efc <__aeabi_fmul+0xf8>
 8000e1c:	441a      	add	r2, r3
 8000e1e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e22:	0240      	lsls	r0, r0, #9
 8000e24:	bf18      	it	ne
 8000e26:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e2a:	d01e      	beq.n	8000e6a <__aeabi_fmul+0x66>
 8000e2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e30:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e34:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e38:	fba0 3101 	umull	r3, r1, r0, r1
 8000e3c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e40:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e44:	bf3e      	ittt	cc
 8000e46:	0049      	lslcc	r1, r1, #1
 8000e48:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e4c:	005b      	lslcc	r3, r3, #1
 8000e4e:	ea40 0001 	orr.w	r0, r0, r1
 8000e52:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e56:	2afd      	cmp	r2, #253	; 0xfd
 8000e58:	d81d      	bhi.n	8000e96 <__aeabi_fmul+0x92>
 8000e5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e62:	bf08      	it	eq
 8000e64:	f020 0001 	biceq.w	r0, r0, #1
 8000e68:	4770      	bx	lr
 8000e6a:	f090 0f00 	teq	r0, #0
 8000e6e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e72:	bf08      	it	eq
 8000e74:	0249      	lsleq	r1, r1, #9
 8000e76:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e7a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e7e:	3a7f      	subs	r2, #127	; 0x7f
 8000e80:	bfc2      	ittt	gt
 8000e82:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e86:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e8a:	4770      	bxgt	lr
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	f04f 0300 	mov.w	r3, #0
 8000e94:	3a01      	subs	r2, #1
 8000e96:	dc5d      	bgt.n	8000f54 <__aeabi_fmul+0x150>
 8000e98:	f112 0f19 	cmn.w	r2, #25
 8000e9c:	bfdc      	itt	le
 8000e9e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ea2:	4770      	bxle	lr
 8000ea4:	f1c2 0200 	rsb	r2, r2, #0
 8000ea8:	0041      	lsls	r1, r0, #1
 8000eaa:	fa21 f102 	lsr.w	r1, r1, r2
 8000eae:	f1c2 0220 	rsb	r2, r2, #32
 8000eb2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eba:	f140 0000 	adc.w	r0, r0, #0
 8000ebe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ec2:	bf08      	it	eq
 8000ec4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ec8:	4770      	bx	lr
 8000eca:	f092 0f00 	teq	r2, #0
 8000ece:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ed2:	bf02      	ittt	eq
 8000ed4:	0040      	lsleq	r0, r0, #1
 8000ed6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eda:	3a01      	subeq	r2, #1
 8000edc:	d0f9      	beq.n	8000ed2 <__aeabi_fmul+0xce>
 8000ede:	ea40 000c 	orr.w	r0, r0, ip
 8000ee2:	f093 0f00 	teq	r3, #0
 8000ee6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eea:	bf02      	ittt	eq
 8000eec:	0049      	lsleq	r1, r1, #1
 8000eee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ef2:	3b01      	subeq	r3, #1
 8000ef4:	d0f9      	beq.n	8000eea <__aeabi_fmul+0xe6>
 8000ef6:	ea41 010c 	orr.w	r1, r1, ip
 8000efa:	e78f      	b.n	8000e1c <__aeabi_fmul+0x18>
 8000efc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f00:	ea92 0f0c 	teq	r2, ip
 8000f04:	bf18      	it	ne
 8000f06:	ea93 0f0c 	teqne	r3, ip
 8000f0a:	d00a      	beq.n	8000f22 <__aeabi_fmul+0x11e>
 8000f0c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f10:	bf18      	it	ne
 8000f12:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f16:	d1d8      	bne.n	8000eca <__aeabi_fmul+0xc6>
 8000f18:	ea80 0001 	eor.w	r0, r0, r1
 8000f1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f20:	4770      	bx	lr
 8000f22:	f090 0f00 	teq	r0, #0
 8000f26:	bf17      	itett	ne
 8000f28:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f2c:	4608      	moveq	r0, r1
 8000f2e:	f091 0f00 	teqne	r1, #0
 8000f32:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f36:	d014      	beq.n	8000f62 <__aeabi_fmul+0x15e>
 8000f38:	ea92 0f0c 	teq	r2, ip
 8000f3c:	d101      	bne.n	8000f42 <__aeabi_fmul+0x13e>
 8000f3e:	0242      	lsls	r2, r0, #9
 8000f40:	d10f      	bne.n	8000f62 <__aeabi_fmul+0x15e>
 8000f42:	ea93 0f0c 	teq	r3, ip
 8000f46:	d103      	bne.n	8000f50 <__aeabi_fmul+0x14c>
 8000f48:	024b      	lsls	r3, r1, #9
 8000f4a:	bf18      	it	ne
 8000f4c:	4608      	movne	r0, r1
 8000f4e:	d108      	bne.n	8000f62 <__aeabi_fmul+0x15e>
 8000f50:	ea80 0001 	eor.w	r0, r0, r1
 8000f54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f60:	4770      	bx	lr
 8000f62:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f66:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f6a:	4770      	bx	lr

08000f6c <__aeabi_fdiv>:
 8000f6c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f70:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f74:	bf1e      	ittt	ne
 8000f76:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f7a:	ea92 0f0c 	teqne	r2, ip
 8000f7e:	ea93 0f0c 	teqne	r3, ip
 8000f82:	d069      	beq.n	8001058 <__aeabi_fdiv+0xec>
 8000f84:	eba2 0203 	sub.w	r2, r2, r3
 8000f88:	ea80 0c01 	eor.w	ip, r0, r1
 8000f8c:	0249      	lsls	r1, r1, #9
 8000f8e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f92:	d037      	beq.n	8001004 <__aeabi_fdiv+0x98>
 8000f94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f98:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f9c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fa0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fa4:	428b      	cmp	r3, r1
 8000fa6:	bf38      	it	cc
 8000fa8:	005b      	lslcc	r3, r3, #1
 8000faa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fae:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fb2:	428b      	cmp	r3, r1
 8000fb4:	bf24      	itt	cs
 8000fb6:	1a5b      	subcs	r3, r3, r1
 8000fb8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fbc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fc0:	bf24      	itt	cs
 8000fc2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fc6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fca:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fce:	bf24      	itt	cs
 8000fd0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fd4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fd8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fdc:	bf24      	itt	cs
 8000fde:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fe2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fe6:	011b      	lsls	r3, r3, #4
 8000fe8:	bf18      	it	ne
 8000fea:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fee:	d1e0      	bne.n	8000fb2 <__aeabi_fdiv+0x46>
 8000ff0:	2afd      	cmp	r2, #253	; 0xfd
 8000ff2:	f63f af50 	bhi.w	8000e96 <__aeabi_fmul+0x92>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ffc:	bf08      	it	eq
 8000ffe:	f020 0001 	biceq.w	r0, r0, #1
 8001002:	4770      	bx	lr
 8001004:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001008:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800100c:	327f      	adds	r2, #127	; 0x7f
 800100e:	bfc2      	ittt	gt
 8001010:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001014:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001018:	4770      	bxgt	lr
 800101a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800101e:	f04f 0300 	mov.w	r3, #0
 8001022:	3a01      	subs	r2, #1
 8001024:	e737      	b.n	8000e96 <__aeabi_fmul+0x92>
 8001026:	f092 0f00 	teq	r2, #0
 800102a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800102e:	bf02      	ittt	eq
 8001030:	0040      	lsleq	r0, r0, #1
 8001032:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001036:	3a01      	subeq	r2, #1
 8001038:	d0f9      	beq.n	800102e <__aeabi_fdiv+0xc2>
 800103a:	ea40 000c 	orr.w	r0, r0, ip
 800103e:	f093 0f00 	teq	r3, #0
 8001042:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001046:	bf02      	ittt	eq
 8001048:	0049      	lsleq	r1, r1, #1
 800104a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800104e:	3b01      	subeq	r3, #1
 8001050:	d0f9      	beq.n	8001046 <__aeabi_fdiv+0xda>
 8001052:	ea41 010c 	orr.w	r1, r1, ip
 8001056:	e795      	b.n	8000f84 <__aeabi_fdiv+0x18>
 8001058:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800105c:	ea92 0f0c 	teq	r2, ip
 8001060:	d108      	bne.n	8001074 <__aeabi_fdiv+0x108>
 8001062:	0242      	lsls	r2, r0, #9
 8001064:	f47f af7d 	bne.w	8000f62 <__aeabi_fmul+0x15e>
 8001068:	ea93 0f0c 	teq	r3, ip
 800106c:	f47f af70 	bne.w	8000f50 <__aeabi_fmul+0x14c>
 8001070:	4608      	mov	r0, r1
 8001072:	e776      	b.n	8000f62 <__aeabi_fmul+0x15e>
 8001074:	ea93 0f0c 	teq	r3, ip
 8001078:	d104      	bne.n	8001084 <__aeabi_fdiv+0x118>
 800107a:	024b      	lsls	r3, r1, #9
 800107c:	f43f af4c 	beq.w	8000f18 <__aeabi_fmul+0x114>
 8001080:	4608      	mov	r0, r1
 8001082:	e76e      	b.n	8000f62 <__aeabi_fmul+0x15e>
 8001084:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001088:	bf18      	it	ne
 800108a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800108e:	d1ca      	bne.n	8001026 <__aeabi_fdiv+0xba>
 8001090:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001094:	f47f af5c 	bne.w	8000f50 <__aeabi_fmul+0x14c>
 8001098:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800109c:	f47f af3c 	bne.w	8000f18 <__aeabi_fmul+0x114>
 80010a0:	e75f      	b.n	8000f62 <__aeabi_fmul+0x15e>
 80010a2:	bf00      	nop

080010a4 <__gesf2>:
 80010a4:	f04f 3cff 	mov.w	ip, #4294967295
 80010a8:	e006      	b.n	80010b8 <__cmpsf2+0x4>
 80010aa:	bf00      	nop

080010ac <__lesf2>:
 80010ac:	f04f 0c01 	mov.w	ip, #1
 80010b0:	e002      	b.n	80010b8 <__cmpsf2+0x4>
 80010b2:	bf00      	nop

080010b4 <__cmpsf2>:
 80010b4:	f04f 0c01 	mov.w	ip, #1
 80010b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010bc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010c4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010c8:	bf18      	it	ne
 80010ca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010ce:	d011      	beq.n	80010f4 <__cmpsf2+0x40>
 80010d0:	b001      	add	sp, #4
 80010d2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010d6:	bf18      	it	ne
 80010d8:	ea90 0f01 	teqne	r0, r1
 80010dc:	bf58      	it	pl
 80010de:	ebb2 0003 	subspl.w	r0, r2, r3
 80010e2:	bf88      	it	hi
 80010e4:	17c8      	asrhi	r0, r1, #31
 80010e6:	bf38      	it	cc
 80010e8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010ec:	bf18      	it	ne
 80010ee:	f040 0001 	orrne.w	r0, r0, #1
 80010f2:	4770      	bx	lr
 80010f4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010f8:	d102      	bne.n	8001100 <__cmpsf2+0x4c>
 80010fa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010fe:	d105      	bne.n	800110c <__cmpsf2+0x58>
 8001100:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001104:	d1e4      	bne.n	80010d0 <__cmpsf2+0x1c>
 8001106:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800110a:	d0e1      	beq.n	80010d0 <__cmpsf2+0x1c>
 800110c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop

08001114 <__aeabi_cfrcmple>:
 8001114:	4684      	mov	ip, r0
 8001116:	4608      	mov	r0, r1
 8001118:	4661      	mov	r1, ip
 800111a:	e7ff      	b.n	800111c <__aeabi_cfcmpeq>

0800111c <__aeabi_cfcmpeq>:
 800111c:	b50f      	push	{r0, r1, r2, r3, lr}
 800111e:	f7ff ffc9 	bl	80010b4 <__cmpsf2>
 8001122:	2800      	cmp	r0, #0
 8001124:	bf48      	it	mi
 8001126:	f110 0f00 	cmnmi.w	r0, #0
 800112a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800112c <__aeabi_fcmpeq>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff fff4 	bl	800111c <__aeabi_cfcmpeq>
 8001134:	bf0c      	ite	eq
 8001136:	2001      	moveq	r0, #1
 8001138:	2000      	movne	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_fcmplt>:
 8001140:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001144:	f7ff ffea 	bl	800111c <__aeabi_cfcmpeq>
 8001148:	bf34      	ite	cc
 800114a:	2001      	movcc	r0, #1
 800114c:	2000      	movcs	r0, #0
 800114e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001152:	bf00      	nop

08001154 <__aeabi_fcmple>:
 8001154:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001158:	f7ff ffe0 	bl	800111c <__aeabi_cfcmpeq>
 800115c:	bf94      	ite	ls
 800115e:	2001      	movls	r0, #1
 8001160:	2000      	movhi	r0, #0
 8001162:	f85d fb08 	ldr.w	pc, [sp], #8
 8001166:	bf00      	nop

08001168 <__aeabi_fcmpge>:
 8001168:	f84d ed08 	str.w	lr, [sp, #-8]!
 800116c:	f7ff ffd2 	bl	8001114 <__aeabi_cfrcmple>
 8001170:	bf94      	ite	ls
 8001172:	2001      	movls	r0, #1
 8001174:	2000      	movhi	r0, #0
 8001176:	f85d fb08 	ldr.w	pc, [sp], #8
 800117a:	bf00      	nop

0800117c <__aeabi_fcmpgt>:
 800117c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001180:	f7ff ffc8 	bl	8001114 <__aeabi_cfrcmple>
 8001184:	bf34      	ite	cc
 8001186:	2001      	movcc	r0, #1
 8001188:	2000      	movcs	r0, #0
 800118a:	f85d fb08 	ldr.w	pc, [sp], #8
 800118e:	bf00      	nop

08001190 <__aeabi_f2iz>:
 8001190:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001194:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001198:	d30f      	bcc.n	80011ba <__aeabi_f2iz+0x2a>
 800119a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800119e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011a2:	d90d      	bls.n	80011c0 <__aeabi_f2iz+0x30>
 80011a4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011ac:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80011b0:	fa23 f002 	lsr.w	r0, r3, r2
 80011b4:	bf18      	it	ne
 80011b6:	4240      	negne	r0, r0
 80011b8:	4770      	bx	lr
 80011ba:	f04f 0000 	mov.w	r0, #0
 80011be:	4770      	bx	lr
 80011c0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011c4:	d101      	bne.n	80011ca <__aeabi_f2iz+0x3a>
 80011c6:	0242      	lsls	r2, r0, #9
 80011c8:	d105      	bne.n	80011d6 <__aeabi_f2iz+0x46>
 80011ca:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011ce:	bf08      	it	eq
 80011d0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011d4:	4770      	bx	lr
 80011d6:	f04f 0000 	mov.w	r0, #0
 80011da:	4770      	bx	lr

080011dc <__aeabi_f2uiz>:
 80011dc:	0042      	lsls	r2, r0, #1
 80011de:	d20e      	bcs.n	80011fe <__aeabi_f2uiz+0x22>
 80011e0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011e4:	d30b      	bcc.n	80011fe <__aeabi_f2uiz+0x22>
 80011e6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011ea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011ee:	d409      	bmi.n	8001204 <__aeabi_f2uiz+0x28>
 80011f0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011f8:	fa23 f002 	lsr.w	r0, r3, r2
 80011fc:	4770      	bx	lr
 80011fe:	f04f 0000 	mov.w	r0, #0
 8001202:	4770      	bx	lr
 8001204:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001208:	d101      	bne.n	800120e <__aeabi_f2uiz+0x32>
 800120a:	0242      	lsls	r2, r0, #9
 800120c:	d102      	bne.n	8001214 <__aeabi_f2uiz+0x38>
 800120e:	f04f 30ff 	mov.w	r0, #4294967295
 8001212:	4770      	bx	lr
 8001214:	f04f 0000 	mov.w	r0, #0
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop

0800121c <__aeabi_uldivmod>:
 800121c:	b953      	cbnz	r3, 8001234 <__aeabi_uldivmod+0x18>
 800121e:	b94a      	cbnz	r2, 8001234 <__aeabi_uldivmod+0x18>
 8001220:	2900      	cmp	r1, #0
 8001222:	bf08      	it	eq
 8001224:	2800      	cmpeq	r0, #0
 8001226:	bf1c      	itt	ne
 8001228:	f04f 31ff 	movne.w	r1, #4294967295
 800122c:	f04f 30ff 	movne.w	r0, #4294967295
 8001230:	f000 b96e 	b.w	8001510 <__aeabi_idiv0>
 8001234:	f1ad 0c08 	sub.w	ip, sp, #8
 8001238:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800123c:	f000 f806 	bl	800124c <__udivmoddi4>
 8001240:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001244:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001248:	b004      	add	sp, #16
 800124a:	4770      	bx	lr

0800124c <__udivmoddi4>:
 800124c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001250:	9e08      	ldr	r6, [sp, #32]
 8001252:	460d      	mov	r5, r1
 8001254:	4604      	mov	r4, r0
 8001256:	468e      	mov	lr, r1
 8001258:	2b00      	cmp	r3, #0
 800125a:	f040 8083 	bne.w	8001364 <__udivmoddi4+0x118>
 800125e:	428a      	cmp	r2, r1
 8001260:	4617      	mov	r7, r2
 8001262:	d947      	bls.n	80012f4 <__udivmoddi4+0xa8>
 8001264:	fab2 f382 	clz	r3, r2
 8001268:	b14b      	cbz	r3, 800127e <__udivmoddi4+0x32>
 800126a:	f1c3 0120 	rsb	r1, r3, #32
 800126e:	fa05 fe03 	lsl.w	lr, r5, r3
 8001272:	fa20 f101 	lsr.w	r1, r0, r1
 8001276:	409f      	lsls	r7, r3
 8001278:	ea41 0e0e 	orr.w	lr, r1, lr
 800127c:	409c      	lsls	r4, r3
 800127e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001282:	fbbe fcf8 	udiv	ip, lr, r8
 8001286:	fa1f f987 	uxth.w	r9, r7
 800128a:	fb08 e21c 	mls	r2, r8, ip, lr
 800128e:	fb0c f009 	mul.w	r0, ip, r9
 8001292:	0c21      	lsrs	r1, r4, #16
 8001294:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001298:	4290      	cmp	r0, r2
 800129a:	d90a      	bls.n	80012b2 <__udivmoddi4+0x66>
 800129c:	18ba      	adds	r2, r7, r2
 800129e:	f10c 31ff 	add.w	r1, ip, #4294967295
 80012a2:	f080 8118 	bcs.w	80014d6 <__udivmoddi4+0x28a>
 80012a6:	4290      	cmp	r0, r2
 80012a8:	f240 8115 	bls.w	80014d6 <__udivmoddi4+0x28a>
 80012ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80012b0:	443a      	add	r2, r7
 80012b2:	1a12      	subs	r2, r2, r0
 80012b4:	fbb2 f0f8 	udiv	r0, r2, r8
 80012b8:	fb08 2210 	mls	r2, r8, r0, r2
 80012bc:	fb00 f109 	mul.w	r1, r0, r9
 80012c0:	b2a4      	uxth	r4, r4
 80012c2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80012c6:	42a1      	cmp	r1, r4
 80012c8:	d909      	bls.n	80012de <__udivmoddi4+0x92>
 80012ca:	193c      	adds	r4, r7, r4
 80012cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80012d0:	f080 8103 	bcs.w	80014da <__udivmoddi4+0x28e>
 80012d4:	42a1      	cmp	r1, r4
 80012d6:	f240 8100 	bls.w	80014da <__udivmoddi4+0x28e>
 80012da:	3802      	subs	r0, #2
 80012dc:	443c      	add	r4, r7
 80012de:	1a64      	subs	r4, r4, r1
 80012e0:	2100      	movs	r1, #0
 80012e2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80012e6:	b11e      	cbz	r6, 80012f0 <__udivmoddi4+0xa4>
 80012e8:	2200      	movs	r2, #0
 80012ea:	40dc      	lsrs	r4, r3
 80012ec:	e9c6 4200 	strd	r4, r2, [r6]
 80012f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012f4:	b902      	cbnz	r2, 80012f8 <__udivmoddi4+0xac>
 80012f6:	deff      	udf	#255	; 0xff
 80012f8:	fab2 f382 	clz	r3, r2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d14f      	bne.n	80013a0 <__udivmoddi4+0x154>
 8001300:	1a8d      	subs	r5, r1, r2
 8001302:	2101      	movs	r1, #1
 8001304:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001308:	fa1f f882 	uxth.w	r8, r2
 800130c:	fbb5 fcfe 	udiv	ip, r5, lr
 8001310:	fb0e 551c 	mls	r5, lr, ip, r5
 8001314:	fb08 f00c 	mul.w	r0, r8, ip
 8001318:	0c22      	lsrs	r2, r4, #16
 800131a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800131e:	42a8      	cmp	r0, r5
 8001320:	d907      	bls.n	8001332 <__udivmoddi4+0xe6>
 8001322:	197d      	adds	r5, r7, r5
 8001324:	f10c 32ff 	add.w	r2, ip, #4294967295
 8001328:	d202      	bcs.n	8001330 <__udivmoddi4+0xe4>
 800132a:	42a8      	cmp	r0, r5
 800132c:	f200 80e9 	bhi.w	8001502 <__udivmoddi4+0x2b6>
 8001330:	4694      	mov	ip, r2
 8001332:	1a2d      	subs	r5, r5, r0
 8001334:	fbb5 f0fe 	udiv	r0, r5, lr
 8001338:	fb0e 5510 	mls	r5, lr, r0, r5
 800133c:	fb08 f800 	mul.w	r8, r8, r0
 8001340:	b2a4      	uxth	r4, r4
 8001342:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001346:	45a0      	cmp	r8, r4
 8001348:	d907      	bls.n	800135a <__udivmoddi4+0x10e>
 800134a:	193c      	adds	r4, r7, r4
 800134c:	f100 32ff 	add.w	r2, r0, #4294967295
 8001350:	d202      	bcs.n	8001358 <__udivmoddi4+0x10c>
 8001352:	45a0      	cmp	r8, r4
 8001354:	f200 80d9 	bhi.w	800150a <__udivmoddi4+0x2be>
 8001358:	4610      	mov	r0, r2
 800135a:	eba4 0408 	sub.w	r4, r4, r8
 800135e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001362:	e7c0      	b.n	80012e6 <__udivmoddi4+0x9a>
 8001364:	428b      	cmp	r3, r1
 8001366:	d908      	bls.n	800137a <__udivmoddi4+0x12e>
 8001368:	2e00      	cmp	r6, #0
 800136a:	f000 80b1 	beq.w	80014d0 <__udivmoddi4+0x284>
 800136e:	2100      	movs	r1, #0
 8001370:	e9c6 0500 	strd	r0, r5, [r6]
 8001374:	4608      	mov	r0, r1
 8001376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800137a:	fab3 f183 	clz	r1, r3
 800137e:	2900      	cmp	r1, #0
 8001380:	d14b      	bne.n	800141a <__udivmoddi4+0x1ce>
 8001382:	42ab      	cmp	r3, r5
 8001384:	d302      	bcc.n	800138c <__udivmoddi4+0x140>
 8001386:	4282      	cmp	r2, r0
 8001388:	f200 80b9 	bhi.w	80014fe <__udivmoddi4+0x2b2>
 800138c:	1a84      	subs	r4, r0, r2
 800138e:	eb65 0303 	sbc.w	r3, r5, r3
 8001392:	2001      	movs	r0, #1
 8001394:	469e      	mov	lr, r3
 8001396:	2e00      	cmp	r6, #0
 8001398:	d0aa      	beq.n	80012f0 <__udivmoddi4+0xa4>
 800139a:	e9c6 4e00 	strd	r4, lr, [r6]
 800139e:	e7a7      	b.n	80012f0 <__udivmoddi4+0xa4>
 80013a0:	409f      	lsls	r7, r3
 80013a2:	f1c3 0220 	rsb	r2, r3, #32
 80013a6:	40d1      	lsrs	r1, r2
 80013a8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80013ac:	fbb1 f0fe 	udiv	r0, r1, lr
 80013b0:	fa1f f887 	uxth.w	r8, r7
 80013b4:	fb0e 1110 	mls	r1, lr, r0, r1
 80013b8:	fa24 f202 	lsr.w	r2, r4, r2
 80013bc:	409d      	lsls	r5, r3
 80013be:	fb00 fc08 	mul.w	ip, r0, r8
 80013c2:	432a      	orrs	r2, r5
 80013c4:	0c15      	lsrs	r5, r2, #16
 80013c6:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80013ca:	45ac      	cmp	ip, r5
 80013cc:	fa04 f403 	lsl.w	r4, r4, r3
 80013d0:	d909      	bls.n	80013e6 <__udivmoddi4+0x19a>
 80013d2:	197d      	adds	r5, r7, r5
 80013d4:	f100 31ff 	add.w	r1, r0, #4294967295
 80013d8:	f080 808f 	bcs.w	80014fa <__udivmoddi4+0x2ae>
 80013dc:	45ac      	cmp	ip, r5
 80013de:	f240 808c 	bls.w	80014fa <__udivmoddi4+0x2ae>
 80013e2:	3802      	subs	r0, #2
 80013e4:	443d      	add	r5, r7
 80013e6:	eba5 050c 	sub.w	r5, r5, ip
 80013ea:	fbb5 f1fe 	udiv	r1, r5, lr
 80013ee:	fb0e 5c11 	mls	ip, lr, r1, r5
 80013f2:	fb01 f908 	mul.w	r9, r1, r8
 80013f6:	b295      	uxth	r5, r2
 80013f8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80013fc:	45a9      	cmp	r9, r5
 80013fe:	d907      	bls.n	8001410 <__udivmoddi4+0x1c4>
 8001400:	197d      	adds	r5, r7, r5
 8001402:	f101 32ff 	add.w	r2, r1, #4294967295
 8001406:	d274      	bcs.n	80014f2 <__udivmoddi4+0x2a6>
 8001408:	45a9      	cmp	r9, r5
 800140a:	d972      	bls.n	80014f2 <__udivmoddi4+0x2a6>
 800140c:	3902      	subs	r1, #2
 800140e:	443d      	add	r5, r7
 8001410:	eba5 0509 	sub.w	r5, r5, r9
 8001414:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001418:	e778      	b.n	800130c <__udivmoddi4+0xc0>
 800141a:	f1c1 0720 	rsb	r7, r1, #32
 800141e:	408b      	lsls	r3, r1
 8001420:	fa22 fc07 	lsr.w	ip, r2, r7
 8001424:	ea4c 0c03 	orr.w	ip, ip, r3
 8001428:	fa25 f407 	lsr.w	r4, r5, r7
 800142c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001430:	fbb4 f9fe 	udiv	r9, r4, lr
 8001434:	fa1f f88c 	uxth.w	r8, ip
 8001438:	fb0e 4419 	mls	r4, lr, r9, r4
 800143c:	fa20 f307 	lsr.w	r3, r0, r7
 8001440:	fb09 fa08 	mul.w	sl, r9, r8
 8001444:	408d      	lsls	r5, r1
 8001446:	431d      	orrs	r5, r3
 8001448:	0c2b      	lsrs	r3, r5, #16
 800144a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800144e:	45a2      	cmp	sl, r4
 8001450:	fa02 f201 	lsl.w	r2, r2, r1
 8001454:	fa00 f301 	lsl.w	r3, r0, r1
 8001458:	d909      	bls.n	800146e <__udivmoddi4+0x222>
 800145a:	eb1c 0404 	adds.w	r4, ip, r4
 800145e:	f109 30ff 	add.w	r0, r9, #4294967295
 8001462:	d248      	bcs.n	80014f6 <__udivmoddi4+0x2aa>
 8001464:	45a2      	cmp	sl, r4
 8001466:	d946      	bls.n	80014f6 <__udivmoddi4+0x2aa>
 8001468:	f1a9 0902 	sub.w	r9, r9, #2
 800146c:	4464      	add	r4, ip
 800146e:	eba4 040a 	sub.w	r4, r4, sl
 8001472:	fbb4 f0fe 	udiv	r0, r4, lr
 8001476:	fb0e 4410 	mls	r4, lr, r0, r4
 800147a:	fb00 fa08 	mul.w	sl, r0, r8
 800147e:	b2ad      	uxth	r5, r5
 8001480:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001484:	45a2      	cmp	sl, r4
 8001486:	d908      	bls.n	800149a <__udivmoddi4+0x24e>
 8001488:	eb1c 0404 	adds.w	r4, ip, r4
 800148c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001490:	d22d      	bcs.n	80014ee <__udivmoddi4+0x2a2>
 8001492:	45a2      	cmp	sl, r4
 8001494:	d92b      	bls.n	80014ee <__udivmoddi4+0x2a2>
 8001496:	3802      	subs	r0, #2
 8001498:	4464      	add	r4, ip
 800149a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800149e:	fba0 8902 	umull	r8, r9, r0, r2
 80014a2:	eba4 040a 	sub.w	r4, r4, sl
 80014a6:	454c      	cmp	r4, r9
 80014a8:	46c6      	mov	lr, r8
 80014aa:	464d      	mov	r5, r9
 80014ac:	d319      	bcc.n	80014e2 <__udivmoddi4+0x296>
 80014ae:	d016      	beq.n	80014de <__udivmoddi4+0x292>
 80014b0:	b15e      	cbz	r6, 80014ca <__udivmoddi4+0x27e>
 80014b2:	ebb3 020e 	subs.w	r2, r3, lr
 80014b6:	eb64 0405 	sbc.w	r4, r4, r5
 80014ba:	fa04 f707 	lsl.w	r7, r4, r7
 80014be:	fa22 f301 	lsr.w	r3, r2, r1
 80014c2:	431f      	orrs	r7, r3
 80014c4:	40cc      	lsrs	r4, r1
 80014c6:	e9c6 7400 	strd	r7, r4, [r6]
 80014ca:	2100      	movs	r1, #0
 80014cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014d0:	4631      	mov	r1, r6
 80014d2:	4630      	mov	r0, r6
 80014d4:	e70c      	b.n	80012f0 <__udivmoddi4+0xa4>
 80014d6:	468c      	mov	ip, r1
 80014d8:	e6eb      	b.n	80012b2 <__udivmoddi4+0x66>
 80014da:	4610      	mov	r0, r2
 80014dc:	e6ff      	b.n	80012de <__udivmoddi4+0x92>
 80014de:	4543      	cmp	r3, r8
 80014e0:	d2e6      	bcs.n	80014b0 <__udivmoddi4+0x264>
 80014e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80014e6:	eb69 050c 	sbc.w	r5, r9, ip
 80014ea:	3801      	subs	r0, #1
 80014ec:	e7e0      	b.n	80014b0 <__udivmoddi4+0x264>
 80014ee:	4628      	mov	r0, r5
 80014f0:	e7d3      	b.n	800149a <__udivmoddi4+0x24e>
 80014f2:	4611      	mov	r1, r2
 80014f4:	e78c      	b.n	8001410 <__udivmoddi4+0x1c4>
 80014f6:	4681      	mov	r9, r0
 80014f8:	e7b9      	b.n	800146e <__udivmoddi4+0x222>
 80014fa:	4608      	mov	r0, r1
 80014fc:	e773      	b.n	80013e6 <__udivmoddi4+0x19a>
 80014fe:	4608      	mov	r0, r1
 8001500:	e749      	b.n	8001396 <__udivmoddi4+0x14a>
 8001502:	f1ac 0c02 	sub.w	ip, ip, #2
 8001506:	443d      	add	r5, r7
 8001508:	e713      	b.n	8001332 <__udivmoddi4+0xe6>
 800150a:	3802      	subs	r0, #2
 800150c:	443c      	add	r4, r7
 800150e:	e724      	b.n	800135a <__udivmoddi4+0x10e>

08001510 <__aeabi_idiv0>:
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop

08001514 <DebugManager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Steppermanager */
void DebugManager(void const * argument)
{
 8001514:	b5b0      	push	{r4, r5, r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]

	State TempAlgoState;

	for(;;)
	{
		osDelay(5000);
 800151c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001520:	f009 fbcf 	bl	800acc2 <osDelay>
		HAL_RTC_GetTime(&hrtc,&sTime,0);
 8001524:	2200      	movs	r2, #0
 8001526:	4990      	ldr	r1, [pc, #576]	; (8001768 <DebugManager+0x254>)
 8001528:	4890      	ldr	r0, [pc, #576]	; (800176c <DebugManager+0x258>)
 800152a:	f007 fddd 	bl	80090e8 <HAL_RTC_GetTime>
		printf("#");
 800152e:	2023      	movs	r0, #35	; 0x23
 8001530:	f00c fd14 	bl	800df5c <putchar>
		printf("%02i:%02i:%02i ",sTime.Hours,sTime.Minutes,sTime.Seconds);
 8001534:	4b8c      	ldr	r3, [pc, #560]	; (8001768 <DebugManager+0x254>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	4619      	mov	r1, r3
 800153a:	4b8b      	ldr	r3, [pc, #556]	; (8001768 <DebugManager+0x254>)
 800153c:	785b      	ldrb	r3, [r3, #1]
 800153e:	461a      	mov	r2, r3
 8001540:	4b89      	ldr	r3, [pc, #548]	; (8001768 <DebugManager+0x254>)
 8001542:	789b      	ldrb	r3, [r3, #2]
 8001544:	488a      	ldr	r0, [pc, #552]	; (8001770 <DebugManager+0x25c>)
 8001546:	f00c fcf1 	bl	800df2c <iprintf>
		printf("Tavant:%iF TArriere:%iF Plenum:%iF ",Algo_getBaffleTemp()/10,Algo_getRearTemp()/10,Algo_getPlenumTemp()/10);
 800154a:	f002 fdb7 	bl	80040bc <Algo_getBaffleTemp>
 800154e:	4603      	mov	r3, r0
 8001550:	4a88      	ldr	r2, [pc, #544]	; (8001774 <DebugManager+0x260>)
 8001552:	fb82 1203 	smull	r1, r2, r2, r3
 8001556:	1092      	asrs	r2, r2, #2
 8001558:	17db      	asrs	r3, r3, #31
 800155a:	1ad4      	subs	r4, r2, r3
 800155c:	f002 fda4 	bl	80040a8 <Algo_getRearTemp>
 8001560:	4603      	mov	r3, r0
 8001562:	4a84      	ldr	r2, [pc, #528]	; (8001774 <DebugManager+0x260>)
 8001564:	fb82 1203 	smull	r1, r2, r2, r3
 8001568:	1092      	asrs	r2, r2, #2
 800156a:	17db      	asrs	r3, r3, #31
 800156c:	1ad5      	subs	r5, r2, r3
 800156e:	f002 fdbd 	bl	80040ec <Algo_getPlenumTemp>
 8001572:	4603      	mov	r3, r0
 8001574:	4a7f      	ldr	r2, [pc, #508]	; (8001774 <DebugManager+0x260>)
 8001576:	fb82 1203 	smull	r1, r2, r2, r3
 800157a:	1092      	asrs	r2, r2, #2
 800157c:	17db      	asrs	r3, r3, #31
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	462a      	mov	r2, r5
 8001582:	4621      	mov	r1, r4
 8001584:	487c      	ldr	r0, [pc, #496]	; (8001778 <DebugManager+0x264>)
 8001586:	f00c fcd1 	bl	800df2c <iprintf>
		printf("State:");
 800158a:	487c      	ldr	r0, [pc, #496]	; (800177c <DebugManager+0x268>)
 800158c:	f00c fcce 	bl	800df2c <iprintf>

		TempAlgoState = Algo_getState();
 8001590:	f002 fd5e 	bl	8004050 <Algo_getState>
 8001594:	4603      	mov	r3, r0
 8001596:	73fb      	strb	r3, [r7, #15]
		switch (TempAlgoState) {
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	2b0c      	cmp	r3, #12
 800159c:	d850      	bhi.n	8001640 <DebugManager+0x12c>
 800159e:	a201      	add	r2, pc, #4	; (adr r2, 80015a4 <DebugManager+0x90>)
 80015a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a4:	080015d9 	.word	0x080015d9
 80015a8:	080015e1 	.word	0x080015e1
 80015ac:	08001609 	.word	0x08001609
 80015b0:	080015e9 	.word	0x080015e9
 80015b4:	080015f1 	.word	0x080015f1
 80015b8:	080015f9 	.word	0x080015f9
 80015bc:	08001601 	.word	0x08001601
 80015c0:	08001621 	.word	0x08001621
 80015c4:	08001611 	.word	0x08001611
 80015c8:	08001619 	.word	0x08001619
 80015cc:	08001629 	.word	0x08001629
 80015d0:	08001631 	.word	0x08001631
 80015d4:	08001639 	.word	0x08001639
			case ZEROING_STEPPER:
				printf("ZEROING_STEP");
 80015d8:	4869      	ldr	r0, [pc, #420]	; (8001780 <DebugManager+0x26c>)
 80015da:	f00c fca7 	bl	800df2c <iprintf>
				break;
 80015de:	e033      	b.n	8001648 <DebugManager+0x134>
			case WAITING:
				printf("WAITING");
 80015e0:	4868      	ldr	r0, [pc, #416]	; (8001784 <DebugManager+0x270>)
 80015e2:	f00c fca3 	bl	800df2c <iprintf>
				break;
 80015e6:	e02f      	b.n	8001648 <DebugManager+0x134>
			case TEMPERATURE_RISE:
				printf("TEMP_RISE");
 80015e8:	4867      	ldr	r0, [pc, #412]	; (8001788 <DebugManager+0x274>)
 80015ea:	f00c fc9f 	bl	800df2c <iprintf>
				break;
 80015ee:	e02b      	b.n	8001648 <DebugManager+0x134>
			case COMBUSTION_LOW:
				printf("COMB_LOW");
 80015f0:	4866      	ldr	r0, [pc, #408]	; (800178c <DebugManager+0x278>)
 80015f2:	f00c fc9b 	bl	800df2c <iprintf>
				break;
 80015f6:	e027      	b.n	8001648 <DebugManager+0x134>
			case COMBUSTION_LOW2:
				printf("COMB_LOW2");
 80015f8:	4865      	ldr	r0, [pc, #404]	; (8001790 <DebugManager+0x27c>)
 80015fa:	f00c fc97 	bl	800df2c <iprintf>
				break;
 80015fe:	e023      	b.n	8001648 <DebugManager+0x134>
			case COMBUSTION_HIGH:
				printf("COMB_HIGH");
 8001600:	4864      	ldr	r0, [pc, #400]	; (8001794 <DebugManager+0x280>)
 8001602:	f00c fc93 	bl	800df2c <iprintf>
				break;
 8001606:	e01f      	b.n	8001648 <DebugManager+0x134>
			case RELOAD_IGNITION:
				printf("RELOAD_IGNI");
 8001608:	4863      	ldr	r0, [pc, #396]	; (8001798 <DebugManager+0x284>)
 800160a:	f00c fc8f 	bl	800df2c <iprintf>
				break;
 800160e:	e01b      	b.n	8001648 <DebugManager+0x134>
			case FLAME_LOSS:
				printf("FLAME_LOSS");
 8001610:	4862      	ldr	r0, [pc, #392]	; (800179c <DebugManager+0x288>)
 8001612:	f00c fc8b 	bl	800df2c <iprintf>
				break;
 8001616:	e017      	b.n	8001648 <DebugManager+0x134>
			case COAL_HIGH:
				printf("COAL_HIGH");
 8001618:	4861      	ldr	r0, [pc, #388]	; (80017a0 <DebugManager+0x28c>)
 800161a:	f00c fc87 	bl	800df2c <iprintf>
				break;
 800161e:	e013      	b.n	8001648 <DebugManager+0x134>
			case COAL_LOW:
				printf("COAL_LOW");
 8001620:	4860      	ldr	r0, [pc, #384]	; (80017a4 <DebugManager+0x290>)
 8001622:	f00c fc83 	bl	800df2c <iprintf>
				break;
 8001626:	e00f      	b.n	8001648 <DebugManager+0x134>
			case OVERTEMP:
				printf("OVERTEMP");
 8001628:	485f      	ldr	r0, [pc, #380]	; (80017a8 <DebugManager+0x294>)
 800162a:	f00c fc7f 	bl	800df2c <iprintf>
				break;
 800162e:	e00b      	b.n	8001648 <DebugManager+0x134>
			case SAFETY:
				printf("SAFETY");
 8001630:	485e      	ldr	r0, [pc, #376]	; (80017ac <DebugManager+0x298>)
 8001632:	f00c fc7b 	bl	800df2c <iprintf>
				break;
 8001636:	e007      	b.n	8001648 <DebugManager+0x134>
			case PRODUCTION_TEST:
				printf("PRODTEST");
 8001638:	485d      	ldr	r0, [pc, #372]	; (80017b0 <DebugManager+0x29c>)
 800163a:	f00c fc77 	bl	800df2c <iprintf>
				break;
 800163e:	e003      	b.n	8001648 <DebugManager+0x134>
			default:
				printf("UNKNOWN");
 8001640:	485c      	ldr	r0, [pc, #368]	; (80017b4 <DebugManager+0x2a0>)
 8001642:	f00c fc73 	bl	800df2c <iprintf>
				break;
 8001646:	bf00      	nop
		}
		printf(" tStat:");
 8001648:	485b      	ldr	r0, [pc, #364]	; (80017b8 <DebugManager+0x2a4>)
 800164a:	f00c fc6f 	bl	800df2c <iprintf>
		if (Algo_getThermostatRequest())
 800164e:	f002 fd85 	bl	800415c <Algo_getThermostatRequest>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <DebugManager+0x14c>
		{
			printf("ON ");
 8001658:	4858      	ldr	r0, [pc, #352]	; (80017bc <DebugManager+0x2a8>)
 800165a:	f00c fc67 	bl	800df2c <iprintf>
 800165e:	e002      	b.n	8001666 <DebugManager+0x152>
		}
		else
		{
			printf("OFF ");
 8001660:	4857      	ldr	r0, [pc, #348]	; (80017c0 <DebugManager+0x2ac>)
 8001662:	f00c fc63 	bl	800df2c <iprintf>
		}
		printf("dTav:%i",(int)Algo_getBaffleTempSlope());
 8001666:	f002 fcb1 	bl	8003fcc <Algo_getBaffleTempSlope>
 800166a:	4603      	mov	r3, r0
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fd8f 	bl	8001190 <__aeabi_f2iz>
 8001672:	4603      	mov	r3, r0
 8001674:	4619      	mov	r1, r3
 8001676:	4853      	ldr	r0, [pc, #332]	; (80017c4 <DebugManager+0x2b0>)
 8001678:	f00c fc58 	bl	800df2c <iprintf>
		printf(" FanSpeed:%i ",Mot_getFanSpeed());
 800167c:	f000 fd8e 	bl	800219c <Mot_getFanSpeed>
 8001680:	4603      	mov	r3, r0
 8001682:	4619      	mov	r1, r3
 8001684:	4850      	ldr	r0, [pc, #320]	; (80017c8 <DebugManager+0x2b4>)
 8001686:	f00c fc51 	bl	800df2c <iprintf>
		printf("Grille:%i ",	Algo_getGrill()*9/10);
 800168a:	f002 fd43 	bl	8004114 <Algo_getGrill>
 800168e:	4602      	mov	r2, r0
 8001690:	4613      	mov	r3, r2
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	4413      	add	r3, r2
 8001696:	4a37      	ldr	r2, [pc, #220]	; (8001774 <DebugManager+0x260>)
 8001698:	fb82 1203 	smull	r1, r2, r2, r3
 800169c:	1092      	asrs	r2, r2, #2
 800169e:	17db      	asrs	r3, r3, #31
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	4619      	mov	r1, r3
 80016a4:	4849      	ldr	r0, [pc, #292]	; (80017cc <DebugManager+0x2b8>)
 80016a6:	f00c fc41 	bl	800df2c <iprintf>
		printf("PIDPos:%i ",PIDTrapPosition*9/10);
 80016aa:	4b49      	ldr	r3, [pc, #292]	; (80017d0 <DebugManager+0x2bc>)
 80016ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b0:	461a      	mov	r2, r3
 80016b2:	4613      	mov	r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	4413      	add	r3, r2
 80016b8:	4a2e      	ldr	r2, [pc, #184]	; (8001774 <DebugManager+0x260>)
 80016ba:	fb82 1203 	smull	r1, r2, r2, r3
 80016be:	1092      	asrs	r2, r2, #2
 80016c0:	17db      	asrs	r3, r3, #31
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	4619      	mov	r1, r3
 80016c6:	4843      	ldr	r0, [pc, #268]	; (80017d4 <DebugManager+0x2c0>)
 80016c8:	f00c fc30 	bl	800df2c <iprintf>
		//printf("PrimSec:%i ",Algo_getPrimary()*9/10);
		printf("Prim:%i ",Algo_getPrimary()*9/10);
 80016cc:	f002 fd18 	bl	8004100 <Algo_getPrimary>
 80016d0:	4602      	mov	r2, r0
 80016d2:	4613      	mov	r3, r2
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	4413      	add	r3, r2
 80016d8:	4a26      	ldr	r2, [pc, #152]	; (8001774 <DebugManager+0x260>)
 80016da:	fb82 1203 	smull	r1, r2, r2, r3
 80016de:	1092      	asrs	r2, r2, #2
 80016e0:	17db      	asrs	r3, r3, #31
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	4619      	mov	r1, r3
 80016e6:	483c      	ldr	r0, [pc, #240]	; (80017d8 <DebugManager+0x2c4>)
 80016e8:	f00c fc20 	bl	800df2c <iprintf>
		printf("Sec:%i ",Algo_getSecondary()*9/10);
 80016ec:	f002 fd1c 	bl	8004128 <Algo_getSecondary>
 80016f0:	4602      	mov	r2, r0
 80016f2:	4613      	mov	r3, r2
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	4413      	add	r3, r2
 80016f8:	4a1e      	ldr	r2, [pc, #120]	; (8001774 <DebugManager+0x260>)
 80016fa:	fb82 1203 	smull	r1, r2, r2, r3
 80016fe:	1092      	asrs	r2, r2, #2
 8001700:	17db      	asrs	r3, r3, #31
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	4619      	mov	r1, r3
 8001706:	4835      	ldr	r0, [pc, #212]	; (80017dc <DebugManager+0x2c8>)
 8001708:	f00c fc10 	bl	800df2c <iprintf>
		printf("PartCH0:%u ", Particle_getCH0());
 800170c:	f000 ffae 	bl	800266c <Particle_getCH0>
 8001710:	4603      	mov	r3, r0
 8001712:	4619      	mov	r1, r3
 8001714:	4832      	ldr	r0, [pc, #200]	; (80017e0 <DebugManager+0x2cc>)
 8001716:	f00c fc09 	bl	800df2c <iprintf>
		printf("PartCH1:%u ", Particle_getCH1());
 800171a:	f000 ffb1 	bl	8002680 <Particle_getCH1>
 800171e:	4603      	mov	r3, r0
 8001720:	4619      	mov	r1, r3
 8001722:	4830      	ldr	r0, [pc, #192]	; (80017e4 <DebugManager+0x2d0>)
 8001724:	f00c fc02 	bl	800df2c <iprintf>
		printf("PartVar:%u ",Particle_getVariance());
 8001728:	f000 ffb4 	bl	8002694 <Particle_getVariance>
 800172c:	4603      	mov	r3, r0
 800172e:	4619      	mov	r1, r3
 8001730:	482d      	ldr	r0, [pc, #180]	; (80017e8 <DebugManager+0x2d4>)
 8001732:	f00c fbfb 	bl	800df2c <iprintf>
		printf("PartSlope:%i ",Particle_getSlope());
 8001736:	f000 ffb7 	bl	80026a8 <Particle_getSlope>
 800173a:	4603      	mov	r3, r0
 800173c:	4619      	mov	r1, r3
 800173e:	482b      	ldr	r0, [pc, #172]	; (80017ec <DebugManager+0x2d8>)
 8001740:	f00c fbf4 	bl	800df2c <iprintf>
		printf("TPart:%u ",Particle_getTemperature());
 8001744:	f000 ffba 	bl	80026bc <Particle_getTemperature>
 8001748:	4603      	mov	r3, r0
 800174a:	4619      	mov	r1, r3
 800174c:	4828      	ldr	r0, [pc, #160]	; (80017f0 <DebugManager+0x2dc>)
 800174e:	f00c fbed 	bl	800df2c <iprintf>
		printf("PartCurr:%u",Particle_getCurrent());
 8001752:	f000 ffbd 	bl	80026d0 <Particle_getCurrent>
 8001756:	4603      	mov	r3, r0
 8001758:	4619      	mov	r1, r3
 800175a:	4826      	ldr	r0, [pc, #152]	; (80017f4 <DebugManager+0x2e0>)
 800175c:	f00c fbe6 	bl	800df2c <iprintf>

		// TODO: Ajouter variance et pente
		printf("*\n\r");
 8001760:	4825      	ldr	r0, [pc, #148]	; (80017f8 <DebugManager+0x2e4>)
 8001762:	f00c fbe3 	bl	800df2c <iprintf>
		osDelay(5000);
 8001766:	e6d9      	b.n	800151c <DebugManager+0x8>
 8001768:	20003024 	.word	0x20003024
 800176c:	2000307c 	.word	0x2000307c
 8001770:	0800fde0 	.word	0x0800fde0
 8001774:	66666667 	.word	0x66666667
 8001778:	0800fdf0 	.word	0x0800fdf0
 800177c:	0800fe14 	.word	0x0800fe14
 8001780:	0800fe1c 	.word	0x0800fe1c
 8001784:	0800fe2c 	.word	0x0800fe2c
 8001788:	0800fe34 	.word	0x0800fe34
 800178c:	0800fe40 	.word	0x0800fe40
 8001790:	0800fe4c 	.word	0x0800fe4c
 8001794:	0800fe58 	.word	0x0800fe58
 8001798:	0800fe64 	.word	0x0800fe64
 800179c:	0800fe70 	.word	0x0800fe70
 80017a0:	0800fe7c 	.word	0x0800fe7c
 80017a4:	0800fe88 	.word	0x0800fe88
 80017a8:	0800fe94 	.word	0x0800fe94
 80017ac:	0800fea0 	.word	0x0800fea0
 80017b0:	0800fea8 	.word	0x0800fea8
 80017b4:	0800feb4 	.word	0x0800feb4
 80017b8:	0800febc 	.word	0x0800febc
 80017bc:	0800fec4 	.word	0x0800fec4
 80017c0:	0800fec8 	.word	0x0800fec8
 80017c4:	0800fed0 	.word	0x0800fed0
 80017c8:	0800fed8 	.word	0x0800fed8
 80017cc:	0800fee8 	.word	0x0800fee8
 80017d0:	2000065c 	.word	0x2000065c
 80017d4:	0800fef4 	.word	0x0800fef4
 80017d8:	0800ff00 	.word	0x0800ff00
 80017dc:	0800ff0c 	.word	0x0800ff0c
 80017e0:	0800ff14 	.word	0x0800ff14
 80017e4:	0800ff20 	.word	0x0800ff20
 80017e8:	0800ff2c 	.word	0x0800ff2c
 80017ec:	0800ff38 	.word	0x0800ff38
 80017f0:	0800ff48 	.word	0x0800ff48
 80017f4:	0800ff54 	.word	0x0800ff54
 80017f8:	0800ff60 	.word	0x0800ff60

080017fc <__io_putchar>:
 extern "C" {
#endif

 extern UART_HandleTypeDef huart1;

int __io_putchar(int ch) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001804:	1d39      	adds	r1, r7, #4
 8001806:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800180a:	2201      	movs	r2, #1
 800180c:	4803      	ldr	r0, [pc, #12]	; (800181c <__io_putchar+0x20>)
 800180e:	f008 fb73 	bl	8009ef8 <HAL_UART_Transmit>
  return ch;
 8001812:	687b      	ldr	r3, [r7, #4]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20003030 	.word	0x20003030

08001820 <readModel>:

}
*/

FurnaceModel readModel()
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
	FurnaceModel model = 0;  //default to Heatmax
 8001826:	2300      	movs	r3, #0
 8001828:	71fb      	strb	r3, [r7, #7]
	if(GPIO_PIN_SET == HAL_GPIO_ReadPin(Model_bit0_GPIO_Port,Model_bit0_Pin))
	{
		model +=4;
	}
*/
	return model;
 800182a:	79fb      	ldrb	r3, [r7, #7]
}
 800182c:	4618      	mov	r0, r3
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr
	...

08001838 <HmiManager>:

void HmiManager()
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
	static uint32_t LastButtonPressedTime_ms = 0;
	static uint32_t LastButttonToggle_ms =0;
	uint32_t LastButttonToggleTemp_ms =0;
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
    bool interlockActive;

	for(;;)
	{

		osDelay(50);
 8001842:	2032      	movs	r0, #50	; 0x32
 8001844:	f009 fa3d 	bl	800acc2 <osDelay>
		State algostate = Algo_getState();
 8001848:	f002 fc02 	bl	8004050 <Algo_getState>
 800184c:	4603      	mov	r3, r0
 800184e:	72fb      	strb	r3, [r7, #11]
		uint32_t kerneltime = osKernelSysTick();
 8001850:	f009 f9db 	bl	800ac0a <osKernelSysTick>
 8001854:	6078      	str	r0, [r7, #4]

		tStatDemand = (HAL_GPIO_ReadPin(Thermostat_Input_GPIO_Port,Thermostat_Input_Pin) == GPIO_PIN_RESET);
 8001856:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800185a:	48a6      	ldr	r0, [pc, #664]	; (8001af4 <HmiManager+0x2bc>)
 800185c:	f004 fb04 	bl	8005e68 <HAL_GPIO_ReadPin>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	bf0c      	ite	eq
 8001866:	2301      	moveq	r3, #1
 8001868:	2300      	movne	r3, #0
 800186a:	70fb      	strb	r3, [r7, #3]
		interlockActive = (HAL_GPIO_ReadPin(Interlock_Input_GPIO_Port,Interlock_Input_Pin) == GPIO_PIN_RESET);
 800186c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001870:	48a0      	ldr	r0, [pc, #640]	; (8001af4 <HmiManager+0x2bc>)
 8001872:	f004 faf9 	bl	8005e68 <HAL_GPIO_ReadPin>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	bf0c      	ite	eq
 800187c:	2301      	moveq	r3, #1
 800187e:	2300      	movne	r3, #0
 8001880:	70bb      	strb	r3, [r7, #2]

		Algo_setThermostatRequest(tStatDemand);
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	4618      	mov	r0, r3
 8001886:	f002 fc59 	bl	800413c <Algo_setThermostatRequest>
		Algo_setInterlockRequest(interlockActive);
 800188a:	78bb      	ldrb	r3, [r7, #2]
 800188c:	4618      	mov	r0, r3
 800188e:	f002 fc6f 	bl	8004170 <Algo_setInterlockRequest>

		if(algostate !=PRODUCTION_TEST)
 8001892:	7afb      	ldrb	r3, [r7, #11]
 8001894:	2b0c      	cmp	r3, #12
 8001896:	f000 8089 	beq.w	80019ac <HmiManager+0x174>
			//{
			//	HAL_GPIO_TogglePin(Button_LED_GPIO_Port, Button_LED_Pin);
			//}
			//else
			//{
				if( (tStatDemand || Algo_getInterlockRequest()) && (Algo_getState() !=SAFETY && Algo_getState() != OVERTEMP && !ButtonBlinkingrequired) )
 800189a:	78fb      	ldrb	r3, [r7, #3]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d104      	bne.n	80018aa <HmiManager+0x72>
 80018a0:	f002 fc76 	bl	8004190 <Algo_getInterlockRequest>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d029      	beq.n	80018fe <HmiManager+0xc6>
 80018aa:	f002 fbd1 	bl	8004050 <Algo_getState>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b0b      	cmp	r3, #11
 80018b2:	d024      	beq.n	80018fe <HmiManager+0xc6>
 80018b4:	f002 fbcc 	bl	8004050 <Algo_getState>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b0a      	cmp	r3, #10
 80018bc:	d01f      	beq.n	80018fe <HmiManager+0xc6>
 80018be:	4b8e      	ldr	r3, [pc, #568]	; (8001af8 <HmiManager+0x2c0>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	f083 0301 	eor.w	r3, r3, #1
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d018      	beq.n	80018fe <HmiManager+0xc6>
				{
					if(Algo_getInterlockRequest() || Algo_getRearTemp() < 4000) //if rear temp below 400F, furnace is too cold and reignition is needded
 80018cc:	f002 fc60 	bl	8004190 <Algo_getInterlockRequest>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d105      	bne.n	80018e2 <HmiManager+0xaa>
 80018d6:	f002 fbe7 	bl	80040a8 <Algo_getRearTemp>
 80018da:	4603      	mov	r3, r0
 80018dc:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80018e0:	da06      	bge.n	80018f0 <HmiManager+0xb8>
					{
						SetButtonLed_OFF();
 80018e2:	2200      	movs	r2, #0
 80018e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018e8:	4884      	ldr	r0, [pc, #528]	; (8001afc <HmiManager+0x2c4>)
 80018ea:	f004 fad4 	bl	8005e96 <HAL_GPIO_WritePin>
					if(Algo_getInterlockRequest() || Algo_getRearTemp() < 4000) //if rear temp below 400F, furnace is too cold and reignition is needded
 80018ee:	e119      	b.n	8001b24 <HmiManager+0x2ec>
					}
					else
					{
						SetButtonLed_ON();
 80018f0:	2201      	movs	r2, #1
 80018f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018f6:	4881      	ldr	r0, [pc, #516]	; (8001afc <HmiManager+0x2c4>)
 80018f8:	f004 facd 	bl	8005e96 <HAL_GPIO_WritePin>
					if(Algo_getInterlockRequest() || Algo_getRearTemp() < 4000) //if rear temp below 400F, furnace is too cold and reignition is needded
 80018fc:	e112      	b.n	8001b24 <HmiManager+0x2ec>
					}
				}
				else if(Algo_getBaffleTemp()>4000 || Algo_getState() ==SAFETY || Algo_getState() ==OVERTEMP || ButtonBlinkingrequired)
 80018fe:	f002 fbdd 	bl	80040bc <Algo_getBaffleTemp>
 8001902:	4603      	mov	r3, r0
 8001904:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001908:	dc0d      	bgt.n	8001926 <HmiManager+0xee>
 800190a:	f002 fba1 	bl	8004050 <Algo_getState>
 800190e:	4603      	mov	r3, r0
 8001910:	2b0b      	cmp	r3, #11
 8001912:	d008      	beq.n	8001926 <HmiManager+0xee>
 8001914:	f002 fb9c 	bl	8004050 <Algo_getState>
 8001918:	4603      	mov	r3, r0
 800191a:	2b0a      	cmp	r3, #10
 800191c:	d003      	beq.n	8001926 <HmiManager+0xee>
 800191e:	4b76      	ldr	r3, [pc, #472]	; (8001af8 <HmiManager+0x2c0>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d03b      	beq.n	800199e <HmiManager+0x166>
				{
					if(Algo_getState() ==SAFETY || Algo_getState() ==OVERTEMP)
 8001926:	f002 fb93 	bl	8004050 <Algo_getState>
 800192a:	4603      	mov	r3, r0
 800192c:	2b0b      	cmp	r3, #11
 800192e:	d004      	beq.n	800193a <HmiManager+0x102>
 8001930:	f002 fb8e 	bl	8004050 <Algo_getState>
 8001934:	4603      	mov	r3, r0
 8001936:	2b0a      	cmp	r3, #10
 8001938:	d104      	bne.n	8001944 <HmiManager+0x10c>
					{
						LastButttonToggleTemp_ms = LastButttonToggle_ms+100;
 800193a:	4b71      	ldr	r3, [pc, #452]	; (8001b00 <HmiManager+0x2c8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	3364      	adds	r3, #100	; 0x64
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	e00d      	b.n	8001960 <HmiManager+0x128>
					}
					else if (ButtonBlinkingrequired)
 8001944:	4b6c      	ldr	r3, [pc, #432]	; (8001af8 <HmiManager+0x2c0>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d004      	beq.n	8001956 <HmiManager+0x11e>
					{
						LastButttonToggleTemp_ms = LastButttonToggle_ms+50;
 800194c:	4b6c      	ldr	r3, [pc, #432]	; (8001b00 <HmiManager+0x2c8>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	3332      	adds	r3, #50	; 0x32
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	e004      	b.n	8001960 <HmiManager+0x128>
					}
					else
					{
						LastButttonToggleTemp_ms = LastButttonToggle_ms+1500;
 8001956:	4b6a      	ldr	r3, [pc, #424]	; (8001b00 <HmiManager+0x2c8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 800195e:	60fb      	str	r3, [r7, #12]
					}
					if((LastButttonToggleTemp_ms) < kerneltime) //1Hz
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	429a      	cmp	r2, r3
 8001966:	f080 80dd 	bcs.w	8001b24 <HmiManager+0x2ec>
					{
						if(ButtonBlinkingrequired && (buttonblinkrequirecount >=0))
 800196a:	4b63      	ldr	r3, [pc, #396]	; (8001af8 <HmiManager+0x2c0>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00c      	beq.n	800198c <HmiManager+0x154>
						{
							buttonblinkrequirecount--;
 8001972:	4b64      	ldr	r3, [pc, #400]	; (8001b04 <HmiManager+0x2cc>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	3b01      	subs	r3, #1
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4b62      	ldr	r3, [pc, #392]	; (8001b04 <HmiManager+0x2cc>)
 800197c:	701a      	strb	r2, [r3, #0]
							if(buttonblinkrequirecount ==0)
 800197e:	4b61      	ldr	r3, [pc, #388]	; (8001b04 <HmiManager+0x2cc>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d102      	bne.n	800198c <HmiManager+0x154>
							{
								ButtonBlinkingrequired = false;
 8001986:	4b5c      	ldr	r3, [pc, #368]	; (8001af8 <HmiManager+0x2c0>)
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
							}
						}
						LastButttonToggle_ms = kerneltime;
 800198c:	4a5c      	ldr	r2, [pc, #368]	; (8001b00 <HmiManager+0x2c8>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6013      	str	r3, [r2, #0]
						HAL_GPIO_TogglePin(Button_LED_GPIO_Port, Button_LED_Pin);
 8001992:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001996:	4859      	ldr	r0, [pc, #356]	; (8001afc <HmiManager+0x2c4>)
 8001998:	f004 fa95 	bl	8005ec6 <HAL_GPIO_TogglePin>
					if((LastButttonToggleTemp_ms) < kerneltime) //1Hz
 800199c:	e0c2      	b.n	8001b24 <HmiManager+0x2ec>
					}
				}
				else
				{
					SetButtonLed_OFF();
 800199e:	2200      	movs	r2, #0
 80019a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019a4:	4855      	ldr	r0, [pc, #340]	; (8001afc <HmiManager+0x2c4>)
 80019a6:	f004 fa76 	bl	8005e96 <HAL_GPIO_WritePin>
 80019aa:	e0bb      	b.n	8001b24 <HmiManager+0x2ec>
				}
			//}
		}
		else
		{
			currentState = getTestState();
 80019ac:	f000 ffba 	bl	8002924 <getTestState>
 80019b0:	4603      	mov	r3, r0
 80019b2:	461a      	mov	r2, r3
 80019b4:	4b54      	ldr	r3, [pc, #336]	; (8001b08 <HmiManager+0x2d0>)
 80019b6:	701a      	strb	r2, [r3, #0]
			void Algo_clearReloadRequest(); // in case we generate an event on function entry
			if(currentState == THERMO_REAR_TEST)
 80019b8:	4b53      	ldr	r3, [pc, #332]	; (8001b08 <HmiManager+0x2d0>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d117      	bne.n	80019f0 <HmiManager+0x1b8>
				thermocoupleTestPeriod = (float)1000/Algo_getRearTemp()*800;
 80019c0:	f002 fb72 	bl	80040a8 <Algo_getRearTemp>
 80019c4:	4603      	mov	r3, r0
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff f9c8 	bl	8000d5c <__aeabi_i2f>
 80019cc:	4603      	mov	r3, r0
 80019ce:	4619      	mov	r1, r3
 80019d0:	484e      	ldr	r0, [pc, #312]	; (8001b0c <HmiManager+0x2d4>)
 80019d2:	f7ff facb 	bl	8000f6c <__aeabi_fdiv>
 80019d6:	4603      	mov	r3, r0
 80019d8:	494d      	ldr	r1, [pc, #308]	; (8001b10 <HmiManager+0x2d8>)
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fa12 	bl	8000e04 <__aeabi_fmul>
 80019e0:	4603      	mov	r3, r0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fbfa 	bl	80011dc <__aeabi_f2uiz>
 80019e8:	4603      	mov	r3, r0
 80019ea:	4a4a      	ldr	r2, [pc, #296]	; (8001b14 <HmiManager+0x2dc>)
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	e036      	b.n	8001a5e <HmiManager+0x226>
			else if (currentState== THERMO_BAFFLE_TEST)
 80019f0:	4b45      	ldr	r3, [pc, #276]	; (8001b08 <HmiManager+0x2d0>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b03      	cmp	r3, #3
 80019f6:	d117      	bne.n	8001a28 <HmiManager+0x1f0>
				thermocoupleTestPeriod = (float)1000/Algo_getBaffleTemp()*800;
 80019f8:	f002 fb60 	bl	80040bc <Algo_getBaffleTemp>
 80019fc:	4603      	mov	r3, r0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff f9ac 	bl	8000d5c <__aeabi_i2f>
 8001a04:	4603      	mov	r3, r0
 8001a06:	4619      	mov	r1, r3
 8001a08:	4840      	ldr	r0, [pc, #256]	; (8001b0c <HmiManager+0x2d4>)
 8001a0a:	f7ff faaf 	bl	8000f6c <__aeabi_fdiv>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	493f      	ldr	r1, [pc, #252]	; (8001b10 <HmiManager+0x2d8>)
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff f9f6 	bl	8000e04 <__aeabi_fmul>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff fbde 	bl	80011dc <__aeabi_f2uiz>
 8001a20:	4603      	mov	r3, r0
 8001a22:	4a3c      	ldr	r2, [pc, #240]	; (8001b14 <HmiManager+0x2dc>)
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	e01a      	b.n	8001a5e <HmiManager+0x226>
			else if (currentState== PLENUM_RTD_TEST)
 8001a28:	4b37      	ldr	r3, [pc, #220]	; (8001b08 <HmiManager+0x2d0>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b04      	cmp	r3, #4
 8001a2e:	d116      	bne.n	8001a5e <HmiManager+0x226>
				thermocoupleTestPeriod = (float)1000/Algo_getPlenumTemp()*1000;
 8001a30:	f002 fb5c 	bl	80040ec <Algo_getPlenumTemp>
 8001a34:	4603      	mov	r3, r0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff f990 	bl	8000d5c <__aeabi_i2f>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4832      	ldr	r0, [pc, #200]	; (8001b0c <HmiManager+0x2d4>)
 8001a42:	f7ff fa93 	bl	8000f6c <__aeabi_fdiv>
 8001a46:	4603      	mov	r3, r0
 8001a48:	4930      	ldr	r1, [pc, #192]	; (8001b0c <HmiManager+0x2d4>)
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff f9da 	bl	8000e04 <__aeabi_fmul>
 8001a50:	4603      	mov	r3, r0
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff fbc2 	bl	80011dc <__aeabi_f2uiz>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	4a2e      	ldr	r2, [pc, #184]	; (8001b14 <HmiManager+0x2dc>)
 8001a5c:	6013      	str	r3, [r2, #0]

			if (currentState == THERMO_REAR_TEST
 8001a5e:	4b2a      	ldr	r3, [pc, #168]	; (8001b08 <HmiManager+0x2d0>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d007      	beq.n	8001a76 <HmiManager+0x23e>
					|| currentState == THERMO_BAFFLE_TEST
 8001a66:	4b28      	ldr	r3, [pc, #160]	; (8001b08 <HmiManager+0x2d0>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d003      	beq.n	8001a76 <HmiManager+0x23e>
					|| currentState == PLENUM_RTD_TEST)
 8001a6e:	4b26      	ldr	r3, [pc, #152]	; (8001b08 <HmiManager+0x2d0>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d110      	bne.n	8001a98 <HmiManager+0x260>
			{
				if((LastButttonToggle_ms+thermocoupleTestPeriod) < kerneltime)
 8001a76:	4b22      	ldr	r3, [pc, #136]	; (8001b00 <HmiManager+0x2c8>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	4b26      	ldr	r3, [pc, #152]	; (8001b14 <HmiManager+0x2dc>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4413      	add	r3, r2
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d94e      	bls.n	8001b24 <HmiManager+0x2ec>
				{
					LastButttonToggle_ms = kerneltime;
 8001a86:	4a1e      	ldr	r2, [pc, #120]	; (8001b00 <HmiManager+0x2c8>)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6013      	str	r3, [r2, #0]
					ToggleButtonLed();
 8001a8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a90:	481a      	ldr	r0, [pc, #104]	; (8001afc <HmiManager+0x2c4>)
 8001a92:	f004 fa18 	bl	8005ec6 <HAL_GPIO_TogglePin>
				if((LastButttonToggle_ms+thermocoupleTestPeriod) < kerneltime)
 8001a96:	e045      	b.n	8001b24 <HmiManager+0x2ec>
				}
			}
			else if (currentState == THERMOSTAT_TEST)
 8001a98:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <HmiManager+0x2d0>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b07      	cmp	r3, #7
 8001a9e:	d112      	bne.n	8001ac6 <HmiManager+0x28e>
			{
				Algo_getThermostatRequest()?SetButtonLed_ON():SetButtonLed_OFF();
 8001aa0:	f002 fb5c 	bl	800415c <Algo_getThermostatRequest>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d006      	beq.n	8001ab8 <HmiManager+0x280>
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ab0:	4812      	ldr	r0, [pc, #72]	; (8001afc <HmiManager+0x2c4>)
 8001ab2:	f004 f9f0 	bl	8005e96 <HAL_GPIO_WritePin>
 8001ab6:	e035      	b.n	8001b24 <HmiManager+0x2ec>
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001abe:	480f      	ldr	r0, [pc, #60]	; (8001afc <HmiManager+0x2c4>)
 8001ac0:	f004 f9e9 	bl	8005e96 <HAL_GPIO_WritePin>
 8001ac4:	e02e      	b.n	8001b24 <HmiManager+0x2ec>
			}
			else if(currentState == INTERLOCK_TEST)
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <HmiManager+0x2d0>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d124      	bne.n	8001b18 <HmiManager+0x2e0>
			{
				Algo_getInterlockRequest()?SetButtonLed_ON():SetButtonLed_OFF();
 8001ace:	f002 fb5f 	bl	8004190 <Algo_getInterlockRequest>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d006      	beq.n	8001ae6 <HmiManager+0x2ae>
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ade:	4807      	ldr	r0, [pc, #28]	; (8001afc <HmiManager+0x2c4>)
 8001ae0:	f004 f9d9 	bl	8005e96 <HAL_GPIO_WritePin>
 8001ae4:	e01e      	b.n	8001b24 <HmiManager+0x2ec>
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aec:	4803      	ldr	r0, [pc, #12]	; (8001afc <HmiManager+0x2c4>)
 8001aee:	f004 f9d2 	bl	8005e96 <HAL_GPIO_WritePin>
 8001af2:	e017      	b.n	8001b24 <HmiManager+0x2ec>
 8001af4:	40010c00 	.word	0x40010c00
 8001af8:	200000e0 	.word	0x200000e0
 8001afc:	40010800 	.word	0x40010800
 8001b00:	200000e4 	.word	0x200000e4
 8001b04:	200000e8 	.word	0x200000e8
 8001b08:	200000e9 	.word	0x200000e9
 8001b0c:	447a0000 	.word	0x447a0000
 8001b10:	44480000 	.word	0x44480000
 8001b14:	200000ec 	.word	0x200000ec
			}
			else
			{
				SetButtonLed_OFF();
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b1e:	4821      	ldr	r0, [pc, #132]	; (8001ba4 <HmiManager+0x36c>)
 8001b20:	f004 f9b9 	bl	8005e96 <HAL_GPIO_WritePin>
			}
		}
		if(algostate !=PRODUCTION_TEST)
 8001b24:	7afb      	ldrb	r3, [r7, #11]
 8001b26:	2b0c      	cmp	r3, #12
 8001b28:	d01c      	beq.n	8001b64 <HmiManager+0x32c>
		{
			if(GPIO_PIN_SET==HAL_GPIO_ReadPin(Button_Input_GPIO_Port,Button_Input_Pin))
 8001b2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b2e:	481e      	ldr	r0, [pc, #120]	; (8001ba8 <HmiManager+0x370>)
 8001b30:	f004 f99a 	bl	8005e68 <HAL_GPIO_ReadPin>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d10f      	bne.n	8001b5a <HmiManager+0x322>
			{
				if ((LastButtonPressedTime_ms+100) < kerneltime)
 8001b3a:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <HmiManager+0x374>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	3364      	adds	r3, #100	; 0x64
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d90e      	bls.n	8001b64 <HmiManager+0x32c>
				{
					Algo_startChargement(kerneltime);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f002 fb2c 	bl	80041a4 <Algo_startChargement>
					ButtonBlinkingrequired = true;
 8001b4c:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <HmiManager+0x378>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	701a      	strb	r2, [r3, #0]
					buttonblinkrequirecount = 6;
 8001b52:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <HmiManager+0x37c>)
 8001b54:	2206      	movs	r2, #6
 8001b56:	701a      	strb	r2, [r3, #0]
 8001b58:	e004      	b.n	8001b64 <HmiManager+0x32c>
				}
			}
			else
			{
				LastButtonPressedTime_ms = osKernelSysTick();
 8001b5a:	f009 f856 	bl	800ac0a <osKernelSysTick>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	4a12      	ldr	r2, [pc, #72]	; (8001bac <HmiManager+0x374>)
 8001b62:	6013      	str	r3, [r2, #0]
			}
		}

//Status bit Handling
		switch(algostate)
 8001b64:	7afb      	ldrb	r3, [r7, #11]
 8001b66:	3b0a      	subs	r3, #10
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d805      	bhi.n	8001b78 <HmiManager+0x340>
		{
			case SAFETY:
			case OVERTEMP:
				Set_STATUS_BIT2_ON();
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2110      	movs	r1, #16
 8001b70:	480c      	ldr	r0, [pc, #48]	; (8001ba4 <HmiManager+0x36c>)
 8001b72:	f004 f990 	bl	8005e96 <HAL_GPIO_WritePin>
				break;
 8001b76:	e005      	b.n	8001b84 <HmiManager+0x34c>
			default:
				Set_STATUS_BIT2_OFF();
 8001b78:	2201      	movs	r2, #1
 8001b7a:	2110      	movs	r1, #16
 8001b7c:	4809      	ldr	r0, [pc, #36]	; (8001ba4 <HmiManager+0x36c>)
 8001b7e:	f004 f98a 	bl	8005e96 <HAL_GPIO_WritePin>
				break;
 8001b82:	bf00      	nop
		}
		//tStatDemand?Set_STATUS_BIT0_ON():Set_STATUS_BIT0_OFF();
		interlockActive?Set_STATUS_BIT1_ON():Set_STATUS_BIT1_OFF();
 8001b84:	78bb      	ldrb	r3, [r7, #2]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d005      	beq.n	8001b96 <HmiManager+0x35e>
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2108      	movs	r1, #8
 8001b8e:	480a      	ldr	r0, [pc, #40]	; (8001bb8 <HmiManager+0x380>)
 8001b90:	f004 f981 	bl	8005e96 <HAL_GPIO_WritePin>
 8001b94:	e655      	b.n	8001842 <HmiManager+0xa>
 8001b96:	2201      	movs	r2, #1
 8001b98:	2108      	movs	r1, #8
 8001b9a:	4807      	ldr	r0, [pc, #28]	; (8001bb8 <HmiManager+0x380>)
 8001b9c:	f004 f97b 	bl	8005e96 <HAL_GPIO_WritePin>
	{
 8001ba0:	e64f      	b.n	8001842 <HmiManager+0xa>
 8001ba2:	bf00      	nop
 8001ba4:	40010800 	.word	0x40010800
 8001ba8:	40010c00 	.word	0x40010c00
 8001bac:	200000f0 	.word	0x200000f0
 8001bb0:	200000e0 	.word	0x200000e0
 8001bb4:	200000e8 	.word	0x200000e8
 8001bb8:	40011000 	.word	0x40011000

08001bbc <Steppermanager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Steppermanager */
void Steppermanager(void const * argument)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
	//sleep is active low but we inverse the logic with transistor
	//static int GrillPosition = 0;
	//static int PrimaryPosition = 0;
	//printf("\n Stepper manager running");

	HAL_GPIO_WritePin(uc_Stepper_Sleep_GPIO_Port,uc_Stepper_Sleep_Pin,RESET);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2110      	movs	r1, #16
 8001bc8:	4815      	ldr	r0, [pc, #84]	; (8001c20 <Steppermanager+0x64>)
 8001bca:	f004 f964 	bl	8005e96 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(Stepper_HalfStep_GPIO_Port,Stepper_HalfStep_Pin,SET);
	Algo_init();
 8001bce:	f001 fcbd 	bl	800354c <Algo_init>
  {
//#ifdef TEST_MOTEUR
//	vStepperPositioning(tman_getMoteur1Req(),&GrillPosition,GrillStepper);
//	vStepperPositioning(tman_getMoteur2Req(),&PrimaryPosition,PrimaryStepper);
//#else
	osDelay(50);
 8001bd2:	2032      	movs	r0, #50	; 0x32
 8001bd4:	f009 f875 	bl	800acc2 <osDelay>

	Algo_task(osKernelSysTick());
 8001bd8:	f009 f817 	bl	800ac0a <osKernelSysTick>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	4618      	mov	r0, r3
 8001be0:	f002 f9d2 	bl	8003f88 <Algo_task>
	if(Algo_getState() != PRODUCTION_TEST)
 8001be4:	f002 fa34 	bl	8004050 <Algo_getState>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b0c      	cmp	r3, #12
 8001bec:	d0f1      	beq.n	8001bd2 <Steppermanager+0x16>
	{
		vStepperPositioning(Algo_getGrill(),&stepperPosition[GrillStepper],GrillStepper);
 8001bee:	f002 fa91 	bl	8004114 <Algo_getGrill>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	490b      	ldr	r1, [pc, #44]	; (8001c24 <Steppermanager+0x68>)
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f000 f819 	bl	8001c30 <vStepperPositioning>
		vStepperPositioning(Algo_getPrimary(),&stepperPosition[PrimaryStepper],PrimaryStepper);
 8001bfe:	f002 fa7f 	bl	8004100 <Algo_getPrimary>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2200      	movs	r2, #0
 8001c06:	4908      	ldr	r1, [pc, #32]	; (8001c28 <Steppermanager+0x6c>)
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f000 f811 	bl	8001c30 <vStepperPositioning>
		vStepperPositioning(Algo_getSecondary(),&stepperPosition[SecondaryStepper],SecondaryStepper);
 8001c0e:	f002 fa8b 	bl	8004128 <Algo_getSecondary>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2202      	movs	r2, #2
 8001c16:	4905      	ldr	r1, [pc, #20]	; (8001c2c <Steppermanager+0x70>)
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f000 f809 	bl	8001c30 <vStepperPositioning>
	osDelay(50);
 8001c1e:	e7d8      	b.n	8001bd2 <Steppermanager+0x16>
 8001c20:	40011000 	.word	0x40011000
 8001c24:	20002f74 	.word	0x20002f74
 8001c28:	20002f70 	.word	0x20002f70
 8001c2c:	20002f78 	.word	0x20002f78

08001c30 <vStepperPositioning>:
  /* USER CODE END Steppermanager */
}


void vStepperPositioning(int RequestedPosition,int *CurrentPosition, motor_t MotorId)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	71fb      	strb	r3, [r7, #7]
    //MotorControl_t* pstMotorControl;
    //pstMotorControl = &stMotor[MotorId];
    int StepToPerform = 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]

    bool StepperToZero = false;
 8001c42:	2300      	movs	r3, #0
 8001c44:	74fb      	strb	r3, [r7, #19]

    StepperToZero = vLimitSwitchActive(MotorId);
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f000 f91d 	bl	8001e88 <vLimitSwitchActive>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	74fb      	strb	r3, [r7, #19]

    if(StepperToZero)
 8001c52:	7cfb      	ldrb	r3, [r7, #19]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d015      	beq.n	8001c84 <vStepperPositioning+0x54>
    {
    	switch(MotorId)
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d00e      	beq.n	8001c7c <vStepperPositioning+0x4c>
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	dc12      	bgt.n	8001c88 <vStepperPositioning+0x58>
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d002      	beq.n	8001c6c <vStepperPositioning+0x3c>
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d004      	beq.n	8001c74 <vStepperPositioning+0x44>
    		break;
    	case SecondaryStepper:
    		*CurrentPosition = SECONDARY_MINIMUM_OPENING;
    		break;
    	default:
    		break;
 8001c6a:	e00d      	b.n	8001c88 <vStepperPositioning+0x58>
    		*CurrentPosition = PRIMARY_MINIMUM_OPENING;
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	220d      	movs	r2, #13
 8001c70:	601a      	str	r2, [r3, #0]
    		break;
 8001c72:	e00a      	b.n	8001c8a <vStepperPositioning+0x5a>
    		*CurrentPosition = 0;
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
    		break;
 8001c7a:	e006      	b.n	8001c8a <vStepperPositioning+0x5a>
    		*CurrentPosition = SECONDARY_MINIMUM_OPENING;
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	220d      	movs	r2, #13
 8001c80:	601a      	str	r2, [r3, #0]
    		break;
 8001c82:	e002      	b.n	8001c8a <vStepperPositioning+0x5a>
    	}
    }
 8001c84:	bf00      	nop
 8001c86:	e000      	b.n	8001c8a <vStepperPositioning+0x5a>
    		break;
 8001c88:	bf00      	nop

    StepToPerform = *CurrentPosition - RequestedPosition;
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	617b      	str	r3, [r7, #20]

	switch(MotorId)
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d020      	beq.n	8001cdc <vStepperPositioning+0xac>
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	dc2b      	bgt.n	8001cf6 <vStepperPositioning+0xc6>
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <vStepperPositioning+0x78>
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d00d      	beq.n	8001cc2 <vStepperPositioning+0x92>
		{
			StepToPerform = 1;
		}
		break;
	default:
		break;
 8001ca6:	e026      	b.n	8001cf6 <vStepperPositioning+0xc6>
		if (*CurrentPosition == PRIMARY_MINIMUM_OPENING	 && !StepperToZero)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b0d      	cmp	r3, #13
 8001cae:	d124      	bne.n	8001cfa <vStepperPositioning+0xca>
 8001cb0:	7cfb      	ldrb	r3, [r7, #19]
 8001cb2:	f083 0301 	eor.w	r3, r3, #1
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d01e      	beq.n	8001cfa <vStepperPositioning+0xca>
			StepToPerform = 1;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	617b      	str	r3, [r7, #20]
		break;
 8001cc0:	e01b      	b.n	8001cfa <vStepperPositioning+0xca>
		if (*CurrentPosition == 0 && !StepperToZero)
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d119      	bne.n	8001cfe <vStepperPositioning+0xce>
 8001cca:	7cfb      	ldrb	r3, [r7, #19]
 8001ccc:	f083 0301 	eor.w	r3, r3, #1
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d013      	beq.n	8001cfe <vStepperPositioning+0xce>
			StepToPerform = 1;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	617b      	str	r3, [r7, #20]
		break;
 8001cda:	e010      	b.n	8001cfe <vStepperPositioning+0xce>
		if (*CurrentPosition == SECONDARY_MINIMUM_OPENING && !StepperToZero)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b0d      	cmp	r3, #13
 8001ce2:	d10e      	bne.n	8001d02 <vStepperPositioning+0xd2>
 8001ce4:	7cfb      	ldrb	r3, [r7, #19]
 8001ce6:	f083 0301 	eor.w	r3, r3, #1
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d008      	beq.n	8001d02 <vStepperPositioning+0xd2>
			StepToPerform = 1;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	617b      	str	r3, [r7, #20]
		break;
 8001cf4:	e005      	b.n	8001d02 <vStepperPositioning+0xd2>
		break;
 8001cf6:	bf00      	nop
 8001cf8:	e070      	b.n	8001ddc <vStepperPositioning+0x1ac>
		break;
 8001cfa:	bf00      	nop
 8001cfc:	e06e      	b.n	8001ddc <vStepperPositioning+0x1ac>
		break;
 8001cfe:	bf00      	nop
 8001d00:	e06c      	b.n	8001ddc <vStepperPositioning+0x1ac>
		break;
 8001d02:	bf00      	nop
	}

    while (StepToPerform != 0)
 8001d04:	e06a      	b.n	8001ddc <vStepperPositioning+0x1ac>
    {
    	vEnableStepper(MotorId);
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f000 f8f9 	bl	8001f00 <vEnableStepper>
    	vStepperMaxTorque(MotorId,true);
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	2101      	movs	r1, #1
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 f934 	bl	8001f80 <vStepperMaxTorque>

    	if(StepToPerform > 0)
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	dd43      	ble.n	8001da6 <vStepperPositioning+0x176>
		{
			vSetStepperMotorDirection(MotorId, Closing);
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	2100      	movs	r1, #0
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 f9a4 	bl	8002070 <vSetStepperMotorDirection>
			*CurrentPosition = *CurrentPosition - 1;
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	1e5a      	subs	r2, r3, #1
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	601a      	str	r2, [r3, #0]

			switch(MotorId)
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d01c      	beq.n	8001d72 <vStepperPositioning+0x142>
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	dc25      	bgt.n	8001d88 <vStepperPositioning+0x158>
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d002      	beq.n	8001d46 <vStepperPositioning+0x116>
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d00b      	beq.n	8001d5c <vStepperPositioning+0x12c>
					*CurrentPosition = SECONDARY_MINIMUM_OPENING;
					vDisableStepper(SecondaryStepper);
				}
				break;
			default:
				break;
 8001d44:	e020      	b.n	8001d88 <vStepperPositioning+0x158>
				if (*CurrentPosition < PRIMARY_MINIMUM_OPENING)
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2b0c      	cmp	r3, #12
 8001d4c:	dc1e      	bgt.n	8001d8c <vStepperPositioning+0x15c>
					*CurrentPosition = PRIMARY_MINIMUM_OPENING;
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	220d      	movs	r2, #13
 8001d52:	601a      	str	r2, [r3, #0]
					vDisableStepper(PrimaryStepper);
 8001d54:	2000      	movs	r0, #0
 8001d56:	f000 f95f 	bl	8002018 <vDisableStepper>
				break;
 8001d5a:	e017      	b.n	8001d8c <vStepperPositioning+0x15c>
				if(*CurrentPosition < 0)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	da15      	bge.n	8001d90 <vStepperPositioning+0x160>
					*CurrentPosition = 0;
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
					vDisableStepper(GrillStepper);
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	f000 f954 	bl	8002018 <vDisableStepper>
				break;
 8001d70:	e00e      	b.n	8001d90 <vStepperPositioning+0x160>
				if (*CurrentPosition < SECONDARY_MINIMUM_OPENING)
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2b0c      	cmp	r3, #12
 8001d78:	dc0c      	bgt.n	8001d94 <vStepperPositioning+0x164>
					*CurrentPosition = SECONDARY_MINIMUM_OPENING;
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	220d      	movs	r2, #13
 8001d7e:	601a      	str	r2, [r3, #0]
					vDisableStepper(SecondaryStepper);
 8001d80:	2002      	movs	r0, #2
 8001d82:	f000 f949 	bl	8002018 <vDisableStepper>
				break;
 8001d86:	e005      	b.n	8001d94 <vStepperPositioning+0x164>
				break;
 8001d88:	bf00      	nop
 8001d8a:	e004      	b.n	8001d96 <vStepperPositioning+0x166>
				break;
 8001d8c:	bf00      	nop
 8001d8e:	e002      	b.n	8001d96 <vStepperPositioning+0x166>
				break;
 8001d90:	bf00      	nop
 8001d92:	e000      	b.n	8001d96 <vStepperPositioning+0x166>
				break;
 8001d94:	bf00      	nop
			}

 			vToggleOneStep(MotorId);
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f000 f827 	bl	8001dec <vToggleOneStep>
			StepToPerform--;
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	3b01      	subs	r3, #1
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	e01a      	b.n	8001ddc <vStepperPositioning+0x1ac>
		}
		else if(StepToPerform < 0)
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	da17      	bge.n	8001ddc <vStepperPositioning+0x1ac>
		{
			vEnableStepper(MotorId);
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 f8a6 	bl	8001f00 <vEnableStepper>
			osDelay(50);
 8001db4:	2032      	movs	r0, #50	; 0x32
 8001db6:	f008 ff84 	bl	800acc2 <osDelay>
			vSetStepperMotorDirection(MotorId, Opening);
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 f956 	bl	8002070 <vSetStepperMotorDirection>
			*CurrentPosition = *CurrentPosition + 1;
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	1c5a      	adds	r2, r3, #1
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	601a      	str	r2, [r3, #0]
			vToggleOneStep(MotorId);
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f000 f80b 	bl	8001dec <vToggleOneStep>
			StepToPerform++;
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	617b      	str	r3, [r7, #20]
    while (StepToPerform != 0)
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d191      	bne.n	8001d06 <vStepperPositioning+0xd6>
	//vStepperMaxTorque(MotorId,false);
    //vStepperMaxTorque(MotorId,true); TODO : re-enable max torque
    //osDelay(100);
	//vDisableStepper(MotorId);

}
 8001de2:	bf00      	nop
 8001de4:	bf00      	nop
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <vToggleOneStep>:

void vToggleOneStep(motor_t Motor)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
    switch(Motor)
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d02a      	beq.n	8001e52 <vToggleOneStep+0x66>
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	dc39      	bgt.n	8001e74 <vToggleOneStep+0x88>
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d002      	beq.n	8001e0a <vToggleOneStep+0x1e>
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d011      	beq.n	8001e2c <vToggleOneStep+0x40>
            osDelay(10);
            Secondary_Step_SetHigh();
            osDelay(10);
            break;
        default:
            break;
 8001e08:	e034      	b.n	8001e74 <vToggleOneStep+0x88>
            Primary_Step_SetLow();
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2108      	movs	r1, #8
 8001e0e:	481c      	ldr	r0, [pc, #112]	; (8001e80 <vToggleOneStep+0x94>)
 8001e10:	f004 f841 	bl	8005e96 <HAL_GPIO_WritePin>
            osDelay(10);
 8001e14:	200a      	movs	r0, #10
 8001e16:	f008 ff54 	bl	800acc2 <osDelay>
            Primary_Step_SetHigh();
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	2108      	movs	r1, #8
 8001e1e:	4818      	ldr	r0, [pc, #96]	; (8001e80 <vToggleOneStep+0x94>)
 8001e20:	f004 f839 	bl	8005e96 <HAL_GPIO_WritePin>
            osDelay(10);
 8001e24:	200a      	movs	r0, #10
 8001e26:	f008 ff4c 	bl	800acc2 <osDelay>
            break;
 8001e2a:	e024      	b.n	8001e76 <vToggleOneStep+0x8a>
            Grill_Step_SetLow();
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e32:	4814      	ldr	r0, [pc, #80]	; (8001e84 <vToggleOneStep+0x98>)
 8001e34:	f004 f82f 	bl	8005e96 <HAL_GPIO_WritePin>
            osDelay(10);
 8001e38:	200a      	movs	r0, #10
 8001e3a:	f008 ff42 	bl	800acc2 <osDelay>
            Grill_Step_SetHigh();
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e44:	480f      	ldr	r0, [pc, #60]	; (8001e84 <vToggleOneStep+0x98>)
 8001e46:	f004 f826 	bl	8005e96 <HAL_GPIO_WritePin>
            osDelay(10);
 8001e4a:	200a      	movs	r0, #10
 8001e4c:	f008 ff39 	bl	800acc2 <osDelay>
            break;
 8001e50:	e011      	b.n	8001e76 <vToggleOneStep+0x8a>
            Secondary_Step_SetLow();
 8001e52:	2200      	movs	r2, #0
 8001e54:	2102      	movs	r1, #2
 8001e56:	480a      	ldr	r0, [pc, #40]	; (8001e80 <vToggleOneStep+0x94>)
 8001e58:	f004 f81d 	bl	8005e96 <HAL_GPIO_WritePin>
            osDelay(10);
 8001e5c:	200a      	movs	r0, #10
 8001e5e:	f008 ff30 	bl	800acc2 <osDelay>
            Secondary_Step_SetHigh();
 8001e62:	2201      	movs	r2, #1
 8001e64:	2102      	movs	r1, #2
 8001e66:	4806      	ldr	r0, [pc, #24]	; (8001e80 <vToggleOneStep+0x94>)
 8001e68:	f004 f815 	bl	8005e96 <HAL_GPIO_WritePin>
            osDelay(10);
 8001e6c:	200a      	movs	r0, #10
 8001e6e:	f008 ff28 	bl	800acc2 <osDelay>
            break;
 8001e72:	e000      	b.n	8001e76 <vToggleOneStep+0x8a>
            break;
 8001e74:	bf00      	nop
    }
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40010c00 	.word	0x40010c00
 8001e84:	40011000 	.word	0x40011000

08001e88 <vLimitSwitchActive>:
bool vLimitSwitchActive(motor_t MotorId)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	71fb      	strb	r3, [r7, #7]
	bool active=false;
 8001e92:	2300      	movs	r3, #0
 8001e94:	73fb      	strb	r3, [r7, #15]
    switch(MotorId)
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d01c      	beq.n	8001ed6 <vLimitSwitchActive+0x4e>
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	dc25      	bgt.n	8001eec <vLimitSwitchActive+0x64>
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d002      	beq.n	8001eaa <vLimitSwitchActive+0x22>
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d00b      	beq.n	8001ec0 <vLimitSwitchActive+0x38>
        case SecondaryStepper:
        	active = (GPIO_PIN_RESET == HAL_GPIO_ReadPin(Limit_switch3_GPIO_Port,Limit_switch3_Pin));
        	break;

        default:
            break;
 8001ea8:	e020      	b.n	8001eec <vLimitSwitchActive+0x64>
        	active = (GPIO_PIN_RESET == HAL_GPIO_ReadPin(Limit_switch1_GPIO_Port,Limit_switch1_Pin));
 8001eaa:	2101      	movs	r1, #1
 8001eac:	4812      	ldr	r0, [pc, #72]	; (8001ef8 <vLimitSwitchActive+0x70>)
 8001eae:	f003 ffdb 	bl	8005e68 <HAL_GPIO_ReadPin>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	bf0c      	ite	eq
 8001eb8:	2301      	moveq	r3, #1
 8001eba:	2300      	movne	r3, #0
 8001ebc:	73fb      	strb	r3, [r7, #15]
            break;
 8001ebe:	e016      	b.n	8001eee <vLimitSwitchActive+0x66>
        	active = (GPIO_PIN_RESET == HAL_GPIO_ReadPin(Limit_switch2_GPIO_Port,Limit_switch2_Pin));
 8001ec0:	2102      	movs	r1, #2
 8001ec2:	480d      	ldr	r0, [pc, #52]	; (8001ef8 <vLimitSwitchActive+0x70>)
 8001ec4:	f003 ffd0 	bl	8005e68 <HAL_GPIO_ReadPin>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	bf0c      	ite	eq
 8001ece:	2301      	moveq	r3, #1
 8001ed0:	2300      	movne	r3, #0
 8001ed2:	73fb      	strb	r3, [r7, #15]
        	break;
 8001ed4:	e00b      	b.n	8001eee <vLimitSwitchActive+0x66>
        	active = (GPIO_PIN_RESET == HAL_GPIO_ReadPin(Limit_switch3_GPIO_Port,Limit_switch3_Pin));
 8001ed6:	2140      	movs	r1, #64	; 0x40
 8001ed8:	4808      	ldr	r0, [pc, #32]	; (8001efc <vLimitSwitchActive+0x74>)
 8001eda:	f003 ffc5 	bl	8005e68 <HAL_GPIO_ReadPin>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	bf0c      	ite	eq
 8001ee4:	2301      	moveq	r3, #1
 8001ee6:	2300      	movne	r3, #0
 8001ee8:	73fb      	strb	r3, [r7, #15]
        	break;
 8001eea:	e000      	b.n	8001eee <vLimitSwitchActive+0x66>
            break;
 8001eec:	bf00      	nop
    }
    return active;
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40011000 	.word	0x40011000
 8001efc:	40010800 	.word	0x40010800

08001f00 <vEnableStepper>:

void vEnableStepper(motor_t Motor)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]
    Step1_2_3_WAKE();
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2110      	movs	r1, #16
 8001f0e:	481a      	ldr	r0, [pc, #104]	; (8001f78 <vEnableStepper+0x78>)
 8001f10:	f003 ffc1 	bl	8005e96 <HAL_GPIO_WritePin>
	switch(Motor)
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d01e      	beq.n	8001f58 <vEnableStepper+0x58>
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	dc27      	bgt.n	8001f6e <vEnableStepper+0x6e>
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d002      	beq.n	8001f28 <vEnableStepper+0x28>
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d00b      	beq.n	8001f3e <vEnableStepper+0x3e>
        	Secondary_ENABLE();
        	Secondary_nRESET();

            break;
        default:
            break;
 8001f26:	e022      	b.n	8001f6e <vEnableStepper+0x6e>
            Primary_ENABLE();
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2120      	movs	r1, #32
 8001f2c:	4813      	ldr	r0, [pc, #76]	; (8001f7c <vEnableStepper+0x7c>)
 8001f2e:	f003 ffb2 	bl	8005e96 <HAL_GPIO_WritePin>
            Primary_nRESET();
 8001f32:	2201      	movs	r2, #1
 8001f34:	2110      	movs	r1, #16
 8001f36:	4811      	ldr	r0, [pc, #68]	; (8001f7c <vEnableStepper+0x7c>)
 8001f38:	f003 ffad 	bl	8005e96 <HAL_GPIO_WritePin>
            break;
 8001f3c:	e018      	b.n	8001f70 <vEnableStepper+0x70>
            Grill_ENABLE();
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f44:	480c      	ldr	r0, [pc, #48]	; (8001f78 <vEnableStepper+0x78>)
 8001f46:	f003 ffa6 	bl	8005e96 <HAL_GPIO_WritePin>
            Grill_nRESET();
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f50:	4809      	ldr	r0, [pc, #36]	; (8001f78 <vEnableStepper+0x78>)
 8001f52:	f003 ffa0 	bl	8005e96 <HAL_GPIO_WritePin>
            break;
 8001f56:	e00b      	b.n	8001f70 <vEnableStepper+0x70>
        	Secondary_ENABLE();
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2120      	movs	r1, #32
 8001f5c:	4806      	ldr	r0, [pc, #24]	; (8001f78 <vEnableStepper+0x78>)
 8001f5e:	f003 ff9a 	bl	8005e96 <HAL_GPIO_WritePin>
        	Secondary_nRESET();
 8001f62:	2201      	movs	r2, #1
 8001f64:	2104      	movs	r1, #4
 8001f66:	4804      	ldr	r0, [pc, #16]	; (8001f78 <vEnableStepper+0x78>)
 8001f68:	f003 ff95 	bl	8005e96 <HAL_GPIO_WritePin>
            break;
 8001f6c:	e000      	b.n	8001f70 <vEnableStepper+0x70>
            break;
 8001f6e:	bf00      	nop
    }
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40011000 	.word	0x40011000
 8001f7c:	40010c00 	.word	0x40010c00

08001f80 <vStepperMaxTorque>:
void vStepperMaxTorque(motor_t Motor,bool bApplyMaxTorque)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	460a      	mov	r2, r1
 8001f8a:	71fb      	strb	r3, [r7, #7]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	71bb      	strb	r3, [r7, #6]
	switch(Motor)
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d028      	beq.n	8001fe8 <vStepperMaxTorque+0x68>
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	dc35      	bgt.n	8002006 <vStepperMaxTorque+0x86>
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <vStepperMaxTorque+0x24>
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d011      	beq.n	8001fc6 <vStepperMaxTorque+0x46>
			{
        		Secondary_TorqueMin();
        	}
            break;
        default:
            break;
 8001fa2:	e030      	b.n	8002006 <vStepperMaxTorque+0x86>
        	if(bApplyMaxTorque)
 8001fa4:	79bb      	ldrb	r3, [r7, #6]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d006      	beq.n	8001fb8 <vStepperMaxTorque+0x38>
        		Primary_TorqueMax();
 8001faa:	2200      	movs	r2, #0
 8001fac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fb0:	4817      	ldr	r0, [pc, #92]	; (8002010 <vStepperMaxTorque+0x90>)
 8001fb2:	f003 ff70 	bl	8005e96 <HAL_GPIO_WritePin>
            break;
 8001fb6:	e027      	b.n	8002008 <vStepperMaxTorque+0x88>
        		Primary_TorqueMin();
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fbe:	4814      	ldr	r0, [pc, #80]	; (8002010 <vStepperMaxTorque+0x90>)
 8001fc0:	f003 ff69 	bl	8005e96 <HAL_GPIO_WritePin>
            break;
 8001fc4:	e020      	b.n	8002008 <vStepperMaxTorque+0x88>
        	if(bApplyMaxTorque)
 8001fc6:	79bb      	ldrb	r3, [r7, #6]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d006      	beq.n	8001fda <vStepperMaxTorque+0x5a>
        		Grill_TorqueMax();
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fd2:	480f      	ldr	r0, [pc, #60]	; (8002010 <vStepperMaxTorque+0x90>)
 8001fd4:	f003 ff5f 	bl	8005e96 <HAL_GPIO_WritePin>
            break;
 8001fd8:	e016      	b.n	8002008 <vStepperMaxTorque+0x88>
        		Grill_TorqueMin();
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fe0:	480b      	ldr	r0, [pc, #44]	; (8002010 <vStepperMaxTorque+0x90>)
 8001fe2:	f003 ff58 	bl	8005e96 <HAL_GPIO_WritePin>
            break;
 8001fe6:	e00f      	b.n	8002008 <vStepperMaxTorque+0x88>
        	if(bApplyMaxTorque)
 8001fe8:	79bb      	ldrb	r3, [r7, #6]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d005      	beq.n	8001ffa <vStepperMaxTorque+0x7a>
        		Secondary_TorqueMax();
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2104      	movs	r1, #4
 8001ff2:	4808      	ldr	r0, [pc, #32]	; (8002014 <vStepperMaxTorque+0x94>)
 8001ff4:	f003 ff4f 	bl	8005e96 <HAL_GPIO_WritePin>
            break;
 8001ff8:	e006      	b.n	8002008 <vStepperMaxTorque+0x88>
        		Secondary_TorqueMin();
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	2104      	movs	r1, #4
 8001ffe:	4805      	ldr	r0, [pc, #20]	; (8002014 <vStepperMaxTorque+0x94>)
 8002000:	f003 ff49 	bl	8005e96 <HAL_GPIO_WritePin>
            break;
 8002004:	e000      	b.n	8002008 <vStepperMaxTorque+0x88>
            break;
 8002006:	bf00      	nop
    }
}
 8002008:	bf00      	nop
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40011000 	.word	0x40011000
 8002014:	40010c00 	.word	0x40010c00

08002018 <vDisableStepper>:

void vDisableStepper(motor_t Motor)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	71fb      	strb	r3, [r7, #7]
	//Step1_2_3_SLEEP();
    switch(Motor)
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	2b02      	cmp	r3, #2
 8002026:	d013      	beq.n	8002050 <vDisableStepper+0x38>
 8002028:	2b02      	cmp	r3, #2
 800202a:	dc17      	bgt.n	800205c <vDisableStepper+0x44>
 800202c:	2b00      	cmp	r3, #0
 800202e:	d002      	beq.n	8002036 <vDisableStepper+0x1e>
 8002030:	2b01      	cmp	r3, #1
 8002032:	d006      	beq.n	8002042 <vDisableStepper+0x2a>
            break;
        case SecondaryStepper:
        	Secondary_DISABLE();
        	break;
        default:
            break;
 8002034:	e012      	b.n	800205c <vDisableStepper+0x44>
            Primary_DISABLE();
 8002036:	2201      	movs	r2, #1
 8002038:	2120      	movs	r1, #32
 800203a:	480b      	ldr	r0, [pc, #44]	; (8002068 <vDisableStepper+0x50>)
 800203c:	f003 ff2b 	bl	8005e96 <HAL_GPIO_WritePin>
            break;
 8002040:	e00d      	b.n	800205e <vDisableStepper+0x46>
            Grill_DISABLE();
 8002042:	2201      	movs	r2, #1
 8002044:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002048:	4808      	ldr	r0, [pc, #32]	; (800206c <vDisableStepper+0x54>)
 800204a:	f003 ff24 	bl	8005e96 <HAL_GPIO_WritePin>
            break;
 800204e:	e006      	b.n	800205e <vDisableStepper+0x46>
        	Secondary_DISABLE();
 8002050:	2201      	movs	r2, #1
 8002052:	2120      	movs	r1, #32
 8002054:	4805      	ldr	r0, [pc, #20]	; (800206c <vDisableStepper+0x54>)
 8002056:	f003 ff1e 	bl	8005e96 <HAL_GPIO_WritePin>
        	break;
 800205a:	e000      	b.n	800205e <vDisableStepper+0x46>
            break;
 800205c:	bf00      	nop
    }
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40010c00 	.word	0x40010c00
 800206c:	40011000 	.word	0x40011000

08002070 <vSetStepperMotorDirection>:

void vSetStepperMotorDirection(motor_t Motor, motor_direction_t Direction)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	460a      	mov	r2, r1
 800207a:	71fb      	strb	r3, [r7, #7]
 800207c:	4613      	mov	r3, r2
 800207e:	71bb      	strb	r3, [r7, #6]
    switch(Motor)
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	2b02      	cmp	r3, #2
 8002084:	d026      	beq.n	80020d4 <vSetStepperMotorDirection+0x64>
 8002086:	2b02      	cmp	r3, #2
 8002088:	dc33      	bgt.n	80020f2 <vSetStepperMotorDirection+0x82>
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <vSetStepperMotorDirection+0x24>
 800208e:	2b01      	cmp	r3, #1
 8002090:	d00f      	beq.n	80020b2 <vSetStepperMotorDirection+0x42>
 8002092:	e02e      	b.n	80020f2 <vSetStepperMotorDirection+0x82>
    {
    case PrimaryStepper:
        if(Direction == Opening)
 8002094:	79bb      	ldrb	r3, [r7, #6]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d105      	bne.n	80020a6 <vSetStepperMotorDirection+0x36>
        {
        	Primary_DIR_SetHigh();
 800209a:	2201      	movs	r2, #1
 800209c:	2104      	movs	r1, #4
 800209e:	4817      	ldr	r0, [pc, #92]	; (80020fc <vSetStepperMotorDirection+0x8c>)
 80020a0:	f003 fef9 	bl	8005e96 <HAL_GPIO_WritePin>
        }
        else
        {
        	Primary_DIR_SetLow();
        }
        break;
 80020a4:	e026      	b.n	80020f4 <vSetStepperMotorDirection+0x84>
        	Primary_DIR_SetLow();
 80020a6:	2200      	movs	r2, #0
 80020a8:	2104      	movs	r1, #4
 80020aa:	4814      	ldr	r0, [pc, #80]	; (80020fc <vSetStepperMotorDirection+0x8c>)
 80020ac:	f003 fef3 	bl	8005e96 <HAL_GPIO_WritePin>
        break;
 80020b0:	e020      	b.n	80020f4 <vSetStepperMotorDirection+0x84>
    case GrillStepper:
        if(Direction == Opening)
 80020b2:	79bb      	ldrb	r3, [r7, #6]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d106      	bne.n	80020c6 <vSetStepperMotorDirection+0x56>
        {
        	Grill_DIR_SetHigh();
 80020b8:	2201      	movs	r2, #1
 80020ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020be:	4810      	ldr	r0, [pc, #64]	; (8002100 <vSetStepperMotorDirection+0x90>)
 80020c0:	f003 fee9 	bl	8005e96 <HAL_GPIO_WritePin>
        }
        else
        {
        	Grill_DIR_SetLow();
        }
        break;
 80020c4:	e016      	b.n	80020f4 <vSetStepperMotorDirection+0x84>
        	Grill_DIR_SetLow();
 80020c6:	2200      	movs	r2, #0
 80020c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020cc:	480c      	ldr	r0, [pc, #48]	; (8002100 <vSetStepperMotorDirection+0x90>)
 80020ce:	f003 fee2 	bl	8005e96 <HAL_GPIO_WritePin>
        break;
 80020d2:	e00f      	b.n	80020f4 <vSetStepperMotorDirection+0x84>
    case SecondaryStepper:
        if(Direction == Opening)
 80020d4:	79bb      	ldrb	r3, [r7, #6]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d105      	bne.n	80020e6 <vSetStepperMotorDirection+0x76>
        {
        	Secondary_DIR_SetHigh();
 80020da:	2201      	movs	r2, #1
 80020dc:	2120      	movs	r1, #32
 80020de:	4809      	ldr	r0, [pc, #36]	; (8002104 <vSetStepperMotorDirection+0x94>)
 80020e0:	f003 fed9 	bl	8005e96 <HAL_GPIO_WritePin>
        }
        else
        {
        	Secondary_DIR_SetLow();
        }
        break;
 80020e4:	e006      	b.n	80020f4 <vSetStepperMotorDirection+0x84>
        	Secondary_DIR_SetLow();
 80020e6:	2200      	movs	r2, #0
 80020e8:	2120      	movs	r1, #32
 80020ea:	4806      	ldr	r0, [pc, #24]	; (8002104 <vSetStepperMotorDirection+0x94>)
 80020ec:	f003 fed3 	bl	8005e96 <HAL_GPIO_WritePin>
        break;
 80020f0:	e000      	b.n	80020f4 <vSetStepperMotorDirection+0x84>
    default:
    	while(1);
 80020f2:	e7fe      	b.n	80020f2 <vSetStepperMotorDirection+0x82>
    	//wrong motor argument
    }

}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40011400 	.word	0x40011400
 8002100:	40011000 	.word	0x40011000
 8002104:	40010800 	.word	0x40010800

08002108 <vSetSpeed>:
{
    return &stMotor[Index];
}

void vSetSpeed(Mot_FanSpeed RequestedSpeed)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	71fb      	strb	r3, [r7, #7]
	  switch (RequestedSpeed)
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	2b03      	cmp	r3, #3
 8002116:	d022      	beq.n	800215e <vSetSpeed+0x56>
 8002118:	2b03      	cmp	r3, #3
 800211a:	dc2e      	bgt.n	800217a <vSetSpeed+0x72>
 800211c:	2b01      	cmp	r3, #1
 800211e:	d002      	beq.n	8002126 <vSetSpeed+0x1e>
 8002120:	2b02      	cmp	r3, #2
 8002122:	d00e      	beq.n	8002142 <vSetSpeed+0x3a>
 8002124:	e029      	b.n	800217a <vSetSpeed+0x72>
	  {
		  case 1://speed1
			  HAL_GPIO_WritePin(SPEED2_COIL_GPIO_Port,SPEED2_COIL_Pin,RESET);
 8002126:	2200      	movs	r2, #0
 8002128:	2140      	movs	r1, #64	; 0x40
 800212a:	481b      	ldr	r0, [pc, #108]	; (8002198 <vSetSpeed+0x90>)
 800212c:	f003 feb3 	bl	8005e96 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SPEED3_COIL_GPIO_Port,SPEED3_COIL_Pin,RESET);
 8002130:	2200      	movs	r2, #0
 8002132:	2180      	movs	r1, #128	; 0x80
 8002134:	4818      	ldr	r0, [pc, #96]	; (8002198 <vSetSpeed+0x90>)
 8002136:	f003 feae 	bl	8005e96 <HAL_GPIO_WritePin>
			  osDelay(200);//break before make
 800213a:	20c8      	movs	r0, #200	; 0xc8
 800213c:	f008 fdc1 	bl	800acc2 <osDelay>
			  //HAL_GPIO_WritePin(SPEED1_COIL_GPIO_Port,SPEED1_COIL_Pin,SET);
			  break;
 8002140:	e026      	b.n	8002190 <vSetSpeed+0x88>
		  case 2://speed2
			  HAL_GPIO_WritePin(SPEED3_COIL_GPIO_Port,SPEED3_COIL_Pin,RESET);
 8002142:	2200      	movs	r2, #0
 8002144:	2180      	movs	r1, #128	; 0x80
 8002146:	4814      	ldr	r0, [pc, #80]	; (8002198 <vSetSpeed+0x90>)
 8002148:	f003 fea5 	bl	8005e96 <HAL_GPIO_WritePin>
			  //HAL_GPIO_WritePin(SPEED1_COIL_GPIO_Port,SPEED1_COIL_Pin,RESET);
			  osDelay(200);//break before make
 800214c:	20c8      	movs	r0, #200	; 0xc8
 800214e:	f008 fdb8 	bl	800acc2 <osDelay>
			  HAL_GPIO_WritePin(SPEED2_COIL_GPIO_Port,SPEED2_COIL_Pin,SET);
 8002152:	2201      	movs	r2, #1
 8002154:	2140      	movs	r1, #64	; 0x40
 8002156:	4810      	ldr	r0, [pc, #64]	; (8002198 <vSetSpeed+0x90>)
 8002158:	f003 fe9d 	bl	8005e96 <HAL_GPIO_WritePin>
			  break;
 800215c:	e018      	b.n	8002190 <vSetSpeed+0x88>
		  case 3://speed3
			  //HAL_GPIO_WritePin(SPEED1_COIL_GPIO_Port,SPEED1_COIL_Pin,RESET);
			  HAL_GPIO_WritePin(SPEED2_COIL_GPIO_Port,SPEED2_COIL_Pin,RESET);
 800215e:	2200      	movs	r2, #0
 8002160:	2140      	movs	r1, #64	; 0x40
 8002162:	480d      	ldr	r0, [pc, #52]	; (8002198 <vSetSpeed+0x90>)
 8002164:	f003 fe97 	bl	8005e96 <HAL_GPIO_WritePin>
			  osDelay(200);//break before make
 8002168:	20c8      	movs	r0, #200	; 0xc8
 800216a:	f008 fdaa 	bl	800acc2 <osDelay>
			  HAL_GPIO_WritePin(SPEED3_COIL_GPIO_Port,SPEED3_COIL_Pin,SET);
 800216e:	2201      	movs	r2, #1
 8002170:	2180      	movs	r1, #128	; 0x80
 8002172:	4809      	ldr	r0, [pc, #36]	; (8002198 <vSetSpeed+0x90>)
 8002174:	f003 fe8f 	bl	8005e96 <HAL_GPIO_WritePin>
			  break;
 8002178:	e00a      	b.n	8002190 <vSetSpeed+0x88>
		  case 4: //speed4 controlled by hardware
		  default: //stop
			  //HAL_GPIO_WritePin(SPEED1_COIL_GPIO_Port,SPEED1_COIL_Pin,RESET);
			  HAL_GPIO_WritePin(SPEED2_COIL_GPIO_Port,SPEED2_COIL_Pin,RESET);
 800217a:	2200      	movs	r2, #0
 800217c:	2140      	movs	r1, #64	; 0x40
 800217e:	4806      	ldr	r0, [pc, #24]	; (8002198 <vSetSpeed+0x90>)
 8002180:	f003 fe89 	bl	8005e96 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SPEED3_COIL_GPIO_Port,SPEED3_COIL_Pin,RESET);
 8002184:	2200      	movs	r2, #0
 8002186:	2180      	movs	r1, #128	; 0x80
 8002188:	4803      	ldr	r0, [pc, #12]	; (8002198 <vSetSpeed+0x90>)
 800218a:	f003 fe84 	bl	8005e96 <HAL_GPIO_WritePin>
			  break;
 800218e:	bf00      	nop
	  }
}
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40011000 	.word	0x40011000

0800219c <Mot_getFanSpeed>:

Mot_FanSpeed Mot_getFanSpeed() {
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return plenumSpeed;
 80021a0:	4b02      	ldr	r3, [pc, #8]	; (80021ac <Mot_getFanSpeed+0x10>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr
 80021ac:	200000f4 	.word	0x200000f4

080021b0 <StepperMotorProdTest>:
	  }
  plenumPreviousSpeed = plenumSpeed;
}

void StepperMotorProdTest(motor_t MotorId)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	71fb      	strb	r3, [r7, #7]
	// on ouvre jusqu'à ce que la limite switch soit inactive,
	// on ferme jusqu'à ce qu'elle soit active
	//on va au max et on ferme sur la switch
	//on ouvre à 25% et on désactive les moteurs.

	vSetStepperMotorDirection(MotorId, Opening);
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	2101      	movs	r1, #1
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff ff56 	bl	8002070 <vSetStepperMotorDirection>
	vEnableStepper(MotorId);
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff fe9a 	bl	8001f00 <vEnableStepper>
	while(vLimitSwitchActive(MotorId))
 80021cc:	e006      	b.n	80021dc <StepperMotorProdTest+0x2c>
	{
		vToggleOneStep(MotorId);
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff fe0b 	bl	8001dec <vToggleOneStep>
		osDelay(5);
 80021d6:	2005      	movs	r0, #5
 80021d8:	f008 fd73 	bl	800acc2 <osDelay>
	while(vLimitSwitchActive(MotorId))
 80021dc:	79fb      	ldrb	r3, [r7, #7]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff fe52 	bl	8001e88 <vLimitSwitchActive>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f1      	bne.n	80021ce <StepperMotorProdTest+0x1e>
	}
	vSetStepperMotorDirection(MotorId, Closing);
 80021ea:	79fb      	ldrb	r3, [r7, #7]
 80021ec:	2100      	movs	r1, #0
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff ff3e 	bl	8002070 <vSetStepperMotorDirection>
	while(!vLimitSwitchActive(MotorId))
 80021f4:	e006      	b.n	8002204 <StepperMotorProdTest+0x54>
	{
		vToggleOneStep(MotorId);
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff fdf7 	bl	8001dec <vToggleOneStep>
		osDelay(5);
 80021fe:	2005      	movs	r0, #5
 8002200:	f008 fd5f 	bl	800acc2 <osDelay>
	while(!vLimitSwitchActive(MotorId))
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff fe3e 	bl	8001e88 <vLimitSwitchActive>
 800220c:	4603      	mov	r3, r0
 800220e:	f083 0301 	eor.w	r3, r3, #1
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1ee      	bne.n	80021f6 <StepperMotorProdTest+0x46>
	}
	vSetStepperMotorDirection(MotorId, Opening);
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	2101      	movs	r1, #1
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff ff27 	bl	8002070 <vSetStepperMotorDirection>
	int stepToFull;
	stepToFull = (MotorId == PrimaryStepper)?STEP_RANGE_PRIMARY:STEP_RANGE_GRILL;
 8002222:	79fb      	ldrb	r3, [r7, #7]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <StepperMotorProdTest+0x7c>
 8002228:	23bb      	movs	r3, #187	; 0xbb
 800222a:	e000      	b.n	800222e <StepperMotorProdTest+0x7e>
 800222c:	2364      	movs	r3, #100	; 0x64
 800222e:	60bb      	str	r3, [r7, #8]
	int i;
	for (i=0;i<=stepToFull;i++)
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	e009      	b.n	800224a <StepperMotorProdTest+0x9a>
	{
		vToggleOneStep(MotorId);
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fdd7 	bl	8001dec <vToggleOneStep>
		osDelay(5);
 800223e:	2005      	movs	r0, #5
 8002240:	f008 fd3f 	bl	800acc2 <osDelay>
	for (i=0;i<=stepToFull;i++)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	3301      	adds	r3, #1
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	429a      	cmp	r2, r3
 8002250:	ddf1      	ble.n	8002236 <StepperMotorProdTest+0x86>
	}
	vSetStepperMotorDirection(MotorId, Closing);
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	2100      	movs	r1, #0
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff ff0a 	bl	8002070 <vSetStepperMotorDirection>
	for (i=0;i<=stepToFull;i++)
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	e009      	b.n	8002276 <StepperMotorProdTest+0xc6>
	{
		vToggleOneStep(MotorId);
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff fdc1 	bl	8001dec <vToggleOneStep>
		osDelay(5);
 800226a:	2005      	movs	r0, #5
 800226c:	f008 fd29 	bl	800acc2 <osDelay>
	for (i=0;i<=stepToFull;i++)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	3301      	adds	r3, #1
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	429a      	cmp	r2, r3
 800227c:	ddf1      	ble.n	8002262 <StepperMotorProdTest+0xb2>
	}
	//repeat for proper 0
	vSetStepperMotorDirection(MotorId, Opening);
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	2101      	movs	r1, #1
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff fef4 	bl	8002070 <vSetStepperMotorDirection>
	while(vLimitSwitchActive(MotorId))
 8002288:	e006      	b.n	8002298 <StepperMotorProdTest+0xe8>
	{
		vToggleOneStep(MotorId);
 800228a:	79fb      	ldrb	r3, [r7, #7]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fdad 	bl	8001dec <vToggleOneStep>
		osDelay(5);
 8002292:	2005      	movs	r0, #5
 8002294:	f008 fd15 	bl	800acc2 <osDelay>
	while(vLimitSwitchActive(MotorId))
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fdf4 	bl	8001e88 <vLimitSwitchActive>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f1      	bne.n	800228a <StepperMotorProdTest+0xda>
	}
	vSetStepperMotorDirection(MotorId, Closing);
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	2100      	movs	r1, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff fee0 	bl	8002070 <vSetStepperMotorDirection>
	while(!vLimitSwitchActive(MotorId))
 80022b0:	e006      	b.n	80022c0 <StepperMotorProdTest+0x110>
	{
		vToggleOneStep(MotorId);
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff fd99 	bl	8001dec <vToggleOneStep>
		osDelay(5);
 80022ba:	2005      	movs	r0, #5
 80022bc:	f008 fd01 	bl	800acc2 <osDelay>
	while(!vLimitSwitchActive(MotorId))
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff fde0 	bl	8001e88 <vLimitSwitchActive>
 80022c8:	4603      	mov	r3, r0
 80022ca:	f083 0301 	eor.w	r3, r3, #1
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1ee      	bne.n	80022b2 <StepperMotorProdTest+0x102>
	}
	vSetStepperMotorDirection(MotorId, Opening);
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	2101      	movs	r1, #1
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff fec9 	bl	8002070 <vSetStepperMotorDirection>
	for (i=0;i<=stepToFull/3;i++)
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	e009      	b.n	80022f8 <StepperMotorProdTest+0x148>
	{
		vToggleOneStep(MotorId);
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff fd80 	bl	8001dec <vToggleOneStep>
		osDelay(5);
 80022ec:	2005      	movs	r0, #5
 80022ee:	f008 fce8 	bl	800acc2 <osDelay>
	for (i=0;i<=stepToFull/3;i++)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	3301      	adds	r3, #1
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	4a08      	ldr	r2, [pc, #32]	; (800231c <StepperMotorProdTest+0x16c>)
 80022fc:	fb82 1203 	smull	r1, r2, r2, r3
 8002300:	17db      	asrs	r3, r3, #31
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	429a      	cmp	r2, r3
 8002308:	ddec      	ble.n	80022e4 <StepperMotorProdTest+0x134>
	}
	vDisableStepper(MotorId);
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff fe83 	bl	8002018 <vDisableStepper>
}
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	55555556 	.word	0x55555556

08002320 <AllMotorToZero>:
void AllMotorToZero()
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
	int i=0;
 8002326:	2300      	movs	r3, #0
 8002328:	607b      	str	r3, [r7, #4]

	for(i=0;i<NumberOfMotors;i++)
 800232a:	2300      	movs	r3, #0
 800232c:	607b      	str	r3, [r7, #4]
 800232e:	e03d      	b.n	80023ac <AllMotorToZero+0x8c>
	{
		vEnableStepper(i);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	b2db      	uxtb	r3, r3
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff fde3 	bl	8001f00 <vEnableStepper>
		vSetStepperMotorDirection(i, Opening);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2101      	movs	r1, #1
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff fe95 	bl	8002070 <vSetStepperMotorDirection>
		while(vLimitSwitchActive(i))
 8002346:	e007      	b.n	8002358 <AllMotorToZero+0x38>
		{
			vToggleOneStep(i);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff fd4d 	bl	8001dec <vToggleOneStep>
			osDelay(5);
 8002352:	2005      	movs	r0, #5
 8002354:	f008 fcb5 	bl	800acc2 <osDelay>
		while(vLimitSwitchActive(i))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff fd93 	bl	8001e88 <vLimitSwitchActive>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1ef      	bne.n	8002348 <AllMotorToZero+0x28>
		}
		vSetStepperMotorDirection(i, Closing);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2100      	movs	r1, #0
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff fe7e 	bl	8002070 <vSetStepperMotorDirection>
		while(!vLimitSwitchActive(i))
 8002374:	e007      	b.n	8002386 <AllMotorToZero+0x66>
		{
			vToggleOneStep(i);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	b2db      	uxtb	r3, r3
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fd36 	bl	8001dec <vToggleOneStep>
			osDelay(5);
 8002380:	2005      	movs	r0, #5
 8002382:	f008 fc9e 	bl	800acc2 <osDelay>
		while(!vLimitSwitchActive(i))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fd7c 	bl	8001e88 <vLimitSwitchActive>
 8002390:	4603      	mov	r3, r0
 8002392:	f083 0301 	eor.w	r3, r3, #1
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1ec      	bne.n	8002376 <AllMotorToZero+0x56>
		}
		vDisableStepper(i);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff fe39 	bl	8002018 <vDisableStepper>
	for(i=0;i<NumberOfMotors;i++)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3301      	adds	r3, #1
 80023aa:	607b      	str	r3, [r7, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	ddbe      	ble.n	8002330 <AllMotorToZero+0x10>
	}
}
 80023b2:	bf00      	nop
 80023b4:	bf00      	nop
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <ParticlesManager>:
static uint8_t TX_BUFFER[TX_BUFFER_LENGTH];
static MeasureParticles_t ParticleDevice;

bool validateRxChecksum(uint8_t buffer_index);

void ParticlesManager(void const * argument) {
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]

	osSemaphoreDef(MP_UART_SemaphoreHandle);
 80023c4:	2300      	movs	r3, #0
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	2300      	movs	r3, #0
 80023ca:	613b      	str	r3, [r7, #16]
	MP_UART_SemaphoreHandle = osSemaphoreCreate(osSemaphore(MP_UART_SemaphoreHandle), 1);
 80023cc:	f107 030c 	add.w	r3, r7, #12
 80023d0:	2101      	movs	r1, #1
 80023d2:	4618      	mov	r0, r3
 80023d4:	f008 fcfa 	bl	800adcc <osSemaphoreCreate>
 80023d8:	4603      	mov	r3, r0
 80023da:	4a9a      	ldr	r2, [pc, #616]	; (8002644 <ParticlesManager+0x288>)
 80023dc:	6013      	str	r3, [r2, #0]
	osSemaphoreWait(MP_UART_SemaphoreHandle,1); //decrement semaphore value for the lack of way to create a semaphore with a count of 0.
 80023de:	4b99      	ldr	r3, [pc, #612]	; (8002644 <ParticlesManager+0x288>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2101      	movs	r1, #1
 80023e4:	4618      	mov	r0, r3
 80023e6:	f008 fd23 	bl	800ae30 <osSemaphoreWait>
	uint8_t rx_payload_size, tx_size;


	for(;;) {

		if(rx_success)
 80023ea:	4b97      	ldr	r3, [pc, #604]	; (8002648 <ParticlesManager+0x28c>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d006      	beq.n	8002400 <ParticlesManager+0x44>
		{
			rx_success = false;
 80023f2:	4b95      	ldr	r3, [pc, #596]	; (8002648 <ParticlesManager+0x28c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	701a      	strb	r2, [r3, #0]
			osDelay(5000);
 80023f8:	f241 3088 	movw	r0, #5000	; 0x1388
 80023fc:	f008 fc61 	bl	800acc2 <osDelay>
		}

		if(!config_mode)
 8002400:	4b92      	ldr	r3, [pc, #584]	; (800264c <ParticlesManager+0x290>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	f083 0301 	eor.w	r3, r3, #1
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d019      	beq.n	8002442 <ParticlesManager+0x86>
		{
			TX_BUFFER[0] = START_BYTE;
 800240e:	4b90      	ldr	r3, [pc, #576]	; (8002650 <ParticlesManager+0x294>)
 8002410:	22cc      	movs	r2, #204	; 0xcc
 8002412:	701a      	strb	r2, [r3, #0]
			TX_BUFFER[1] = READ_CMD;
 8002414:	4b8e      	ldr	r3, [pc, #568]	; (8002650 <ParticlesManager+0x294>)
 8002416:	2200      	movs	r2, #0
 8002418:	705a      	strb	r2, [r3, #1]
			tx_checksum = READ_CMD;
 800241a:	4b8e      	ldr	r3, [pc, #568]	; (8002654 <ParticlesManager+0x298>)
 800241c:	2200      	movs	r2, #0
 800241e:	801a      	strh	r2, [r3, #0]
			TX_BUFFER[2] = (uint8_t)(tx_checksum >> 8);
 8002420:	4b8c      	ldr	r3, [pc, #560]	; (8002654 <ParticlesManager+0x298>)
 8002422:	881b      	ldrh	r3, [r3, #0]
 8002424:	0a1b      	lsrs	r3, r3, #8
 8002426:	b29b      	uxth	r3, r3
 8002428:	b2da      	uxtb	r2, r3
 800242a:	4b89      	ldr	r3, [pc, #548]	; (8002650 <ParticlesManager+0x294>)
 800242c:	709a      	strb	r2, [r3, #2]
			TX_BUFFER[3] = (uint8_t)(tx_checksum & 0x00FF);
 800242e:	4b89      	ldr	r3, [pc, #548]	; (8002654 <ParticlesManager+0x298>)
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	b2da      	uxtb	r2, r3
 8002434:	4b86      	ldr	r3, [pc, #536]	; (8002650 <ParticlesManager+0x294>)
 8002436:	70da      	strb	r2, [r3, #3]
			TX_BUFFER[4] = STOP_BYTE;
 8002438:	4b85      	ldr	r3, [pc, #532]	; (8002650 <ParticlesManager+0x294>)
 800243a:	2299      	movs	r2, #153	; 0x99
 800243c:	711a      	strb	r2, [r3, #4]
			tx_size = 5;
 800243e:	2305      	movs	r3, #5
 8002440:	77bb      	strb	r3, [r7, #30]
		}else
		{
			//TODO:implement config routine
		}

		HAL_UART_Transmit_IT(&huart3, TX_BUFFER, tx_size);
 8002442:	7fbb      	ldrb	r3, [r7, #30]
 8002444:	b29b      	uxth	r3, r3
 8002446:	461a      	mov	r2, r3
 8002448:	4981      	ldr	r1, [pc, #516]	; (8002650 <ParticlesManager+0x294>)
 800244a:	4883      	ldr	r0, [pc, #524]	; (8002658 <ParticlesManager+0x29c>)
 800244c:	f007 fde6 	bl	800a01c <HAL_UART_Transmit_IT>

		if(osErrorOS == osSemaphoreWait(MP_UART_SemaphoreHandle,500)) //wait 500ms for an answer or retry
 8002450:	4b7c      	ldr	r3, [pc, #496]	; (8002644 <ParticlesManager+0x288>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002458:	4618      	mov	r0, r3
 800245a:	f008 fce9 	bl	800ae30 <osSemaphoreWait>
 800245e:	4603      	mov	r3, r0
 8002460:	2bff      	cmp	r3, #255	; 0xff
 8002462:	d10e      	bne.n	8002482 <ParticlesManager+0xc6>
		{
			//clearly something is wrong Abort the transmission
			//HAL_GPIO_WritePin(STATUS_LED0_GPIO_Port,STATUS_LED0_Pin,RESET);
			HAL_UART_Abort_IT(&huart3);
 8002464:	487c      	ldr	r0, [pc, #496]	; (8002658 <ParticlesManager+0x29c>)
 8002466:	f007 fe6d 	bl	800a144 <HAL_UART_Abort_IT>
			HAL_UART_DeInit(&huart3);
 800246a:	487b      	ldr	r0, [pc, #492]	; (8002658 <ParticlesManager+0x29c>)
 800246c:	f007 fd15 	bl	8009e9a <HAL_UART_DeInit>
			osDelay(100);
 8002470:	2064      	movs	r0, #100	; 0x64
 8002472:	f008 fc26 	bl	800acc2 <osDelay>
			MX_USART3_UART_Init();
 8002476:	f002 f9bf 	bl	80047f8 <MX_USART3_UART_Init>
			osDelay(100);
 800247a:	2064      	movs	r0, #100	; 0x64
 800247c:	f008 fc21 	bl	800acc2 <osDelay>
 8002480:	e032      	b.n	80024e8 <ParticlesManager+0x12c>
		}
		else
		{
			RX_BUFFER[0] = 0;
 8002482:	4b76      	ldr	r3, [pc, #472]	; (800265c <ParticlesManager+0x2a0>)
 8002484:	2200      	movs	r2, #0
 8002486:	701a      	strb	r2, [r3, #0]
			HAL_UARTEx_ReceiveToIdle_IT(&huart3, RX_BUFFER,RX_BUFFER_LENGTH);
 8002488:	2218      	movs	r2, #24
 800248a:	4974      	ldr	r1, [pc, #464]	; (800265c <ParticlesManager+0x2a0>)
 800248c:	4872      	ldr	r0, [pc, #456]	; (8002658 <ParticlesManager+0x29c>)
 800248e:	f007 fe09 	bl	800a0a4 <HAL_UARTEx_ReceiveToIdle_IT>
			Rx_complete = false;
 8002492:	4b73      	ldr	r3, [pc, #460]	; (8002660 <ParticlesManager+0x2a4>)
 8002494:	2200      	movs	r2, #0
 8002496:	701a      	strb	r2, [r3, #0]
			do{

				if(osErrorOS == osSemaphoreWait(MP_UART_SemaphoreHandle,200))
 8002498:	4b6a      	ldr	r3, [pc, #424]	; (8002644 <ParticlesManager+0x288>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	21c8      	movs	r1, #200	; 0xc8
 800249e:	4618      	mov	r0, r3
 80024a0:	f008 fcc6 	bl	800ae30 <osSemaphoreWait>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2bff      	cmp	r3, #255	; 0xff
 80024a8:	d115      	bne.n	80024d6 <ParticlesManager+0x11a>
				{
					if(RX_BUFFER[0] == START_BYTE)
 80024aa:	4b6c      	ldr	r3, [pc, #432]	; (800265c <ParticlesManager+0x2a0>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2bcc      	cmp	r3, #204	; 0xcc
 80024b0:	d119      	bne.n	80024e6 <ParticlesManager+0x12a>
					{
						rx_payload_size = RX_BUFFER[1] & 0x3F;
 80024b2:	4b6a      	ldr	r3, [pc, #424]	; (800265c <ParticlesManager+0x2a0>)
 80024b4:	785b      	ldrb	r3, [r3, #1]
 80024b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024ba:	77fb      	strb	r3, [r7, #31]

						if(rx_payload_size != 0 && RX_BUFFER[rx_payload_size + 4] == STOP_BYTE)
 80024bc:	7ffb      	ldrb	r3, [r7, #31]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d011      	beq.n	80024e6 <ParticlesManager+0x12a>
 80024c2:	7ffb      	ldrb	r3, [r7, #31]
 80024c4:	3304      	adds	r3, #4
 80024c6:	4a65      	ldr	r2, [pc, #404]	; (800265c <ParticlesManager+0x2a0>)
 80024c8:	5cd3      	ldrb	r3, [r2, r3]
 80024ca:	2b99      	cmp	r3, #153	; 0x99
 80024cc:	d10b      	bne.n	80024e6 <ParticlesManager+0x12a>
						{
							Rx_complete = true;
 80024ce:	4b64      	ldr	r3, [pc, #400]	; (8002660 <ParticlesManager+0x2a4>)
 80024d0:	2201      	movs	r2, #1
 80024d2:	701a      	strb	r2, [r3, #0]
						}

					}
					break;
 80024d4:	e007      	b.n	80024e6 <ParticlesManager+0x12a>

				}

			}while (!Rx_complete);
 80024d6:	4b62      	ldr	r3, [pc, #392]	; (8002660 <ParticlesManager+0x2a4>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	f083 0301 	eor.w	r3, r3, #1
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1d9      	bne.n	8002498 <ParticlesManager+0xdc>
 80024e4:	e000      	b.n	80024e8 <ParticlesManager+0x12c>
					break;
 80024e6:	bf00      	nop

		}

		if(Rx_complete)
 80024e8:	4b5d      	ldr	r3, [pc, #372]	; (8002660 <ParticlesManager+0x2a4>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f43f af7c 	beq.w	80023ea <ParticlesManager+0x2e>
		{
			int sign = 1;
 80024f2:	2301      	movs	r3, #1
 80024f4:	61bb      	str	r3, [r7, #24]
			rx_checksum = RX_BUFFER[1];
 80024f6:	4b59      	ldr	r3, [pc, #356]	; (800265c <ParticlesManager+0x2a0>)
 80024f8:	785b      	ldrb	r3, [r3, #1]
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	4b59      	ldr	r3, [pc, #356]	; (8002664 <ParticlesManager+0x2a8>)
 80024fe:	801a      	strh	r2, [r3, #0]
			for(uint8_t i = 2;i <= rx_payload_size+1;i++)
 8002500:	2302      	movs	r3, #2
 8002502:	75fb      	strb	r3, [r7, #23]
 8002504:	e00c      	b.n	8002520 <ParticlesManager+0x164>
			{
				rx_checksum += RX_BUFFER[i];
 8002506:	7dfb      	ldrb	r3, [r7, #23]
 8002508:	4a54      	ldr	r2, [pc, #336]	; (800265c <ParticlesManager+0x2a0>)
 800250a:	5cd3      	ldrb	r3, [r2, r3]
 800250c:	b29a      	uxth	r2, r3
 800250e:	4b55      	ldr	r3, [pc, #340]	; (8002664 <ParticlesManager+0x2a8>)
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	4413      	add	r3, r2
 8002514:	b29a      	uxth	r2, r3
 8002516:	4b53      	ldr	r3, [pc, #332]	; (8002664 <ParticlesManager+0x2a8>)
 8002518:	801a      	strh	r2, [r3, #0]
			for(uint8_t i = 2;i <= rx_payload_size+1;i++)
 800251a:	7dfb      	ldrb	r3, [r7, #23]
 800251c:	3301      	adds	r3, #1
 800251e:	75fb      	strb	r3, [r7, #23]
 8002520:	7dfa      	ldrb	r2, [r7, #23]
 8002522:	7ffb      	ldrb	r3, [r7, #31]
 8002524:	3301      	adds	r3, #1
 8002526:	429a      	cmp	r2, r3
 8002528:	dded      	ble.n	8002506 <ParticlesManager+0x14a>
			}

			if(rx_checksum == ((uint16_t)(RX_BUFFER[rx_payload_size+2] << 8) + (uint16_t)RX_BUFFER[rx_payload_size+3]))
 800252a:	4b4e      	ldr	r3, [pc, #312]	; (8002664 <ParticlesManager+0x2a8>)
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	4619      	mov	r1, r3
 8002530:	7ffb      	ldrb	r3, [r7, #31]
 8002532:	3302      	adds	r3, #2
 8002534:	4a49      	ldr	r2, [pc, #292]	; (800265c <ParticlesManager+0x2a0>)
 8002536:	5cd3      	ldrb	r3, [r2, r3]
 8002538:	b29b      	uxth	r3, r3
 800253a:	021b      	lsls	r3, r3, #8
 800253c:	b29b      	uxth	r3, r3
 800253e:	4618      	mov	r0, r3
 8002540:	7ffb      	ldrb	r3, [r7, #31]
 8002542:	3303      	adds	r3, #3
 8002544:	4a45      	ldr	r2, [pc, #276]	; (800265c <ParticlesManager+0x2a0>)
 8002546:	5cd3      	ldrb	r3, [r2, r3]
 8002548:	4403      	add	r3, r0
 800254a:	4299      	cmp	r1, r3
 800254c:	f47f af4d 	bne.w	80023ea <ParticlesManager+0x2e>
			{
				rx_success = true;
 8002550:	4b3d      	ldr	r3, [pc, #244]	; (8002648 <ParticlesManager+0x28c>)
 8002552:	2201      	movs	r2, #1
 8002554:	701a      	strb	r2, [r3, #0]
				if((RX_BUFFER[1] & 0xC0) == READ_CMD)
 8002556:	4b41      	ldr	r3, [pc, #260]	; (800265c <ParticlesManager+0x2a0>)
 8002558:	785b      	ldrb	r3, [r3, #1]
 800255a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800255e:	2b00      	cmp	r3, #0
 8002560:	f47f af43 	bne.w	80023ea <ParticlesManager+0x2e>
				{
					ParticleDevice.ch0_ON = (uint16_t)(RX_BUFFER[2] << 8) + (uint16_t)RX_BUFFER[3];
 8002564:	4b3d      	ldr	r3, [pc, #244]	; (800265c <ParticlesManager+0x2a0>)
 8002566:	789b      	ldrb	r3, [r3, #2]
 8002568:	b29b      	uxth	r3, r3
 800256a:	021b      	lsls	r3, r3, #8
 800256c:	b29a      	uxth	r2, r3
 800256e:	4b3b      	ldr	r3, [pc, #236]	; (800265c <ParticlesManager+0x2a0>)
 8002570:	78db      	ldrb	r3, [r3, #3]
 8002572:	b29b      	uxth	r3, r3
 8002574:	4413      	add	r3, r2
 8002576:	b29a      	uxth	r2, r3
 8002578:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <ParticlesManager+0x2ac>)
 800257a:	801a      	strh	r2, [r3, #0]
					ParticleDevice.ch0_OFF = (uint16_t)(RX_BUFFER[4] << 8) + (uint16_t)RX_BUFFER[5];
 800257c:	4b37      	ldr	r3, [pc, #220]	; (800265c <ParticlesManager+0x2a0>)
 800257e:	791b      	ldrb	r3, [r3, #4]
 8002580:	b29b      	uxth	r3, r3
 8002582:	021b      	lsls	r3, r3, #8
 8002584:	b29a      	uxth	r2, r3
 8002586:	4b35      	ldr	r3, [pc, #212]	; (800265c <ParticlesManager+0x2a0>)
 8002588:	795b      	ldrb	r3, [r3, #5]
 800258a:	b29b      	uxth	r3, r3
 800258c:	4413      	add	r3, r2
 800258e:	b29a      	uxth	r2, r3
 8002590:	4b35      	ldr	r3, [pc, #212]	; (8002668 <ParticlesManager+0x2ac>)
 8002592:	805a      	strh	r2, [r3, #2]
					ParticleDevice.ch1_ON = (uint16_t)(RX_BUFFER[6] << 8) + (uint16_t)RX_BUFFER[7];
 8002594:	4b31      	ldr	r3, [pc, #196]	; (800265c <ParticlesManager+0x2a0>)
 8002596:	799b      	ldrb	r3, [r3, #6]
 8002598:	b29b      	uxth	r3, r3
 800259a:	021b      	lsls	r3, r3, #8
 800259c:	b29a      	uxth	r2, r3
 800259e:	4b2f      	ldr	r3, [pc, #188]	; (800265c <ParticlesManager+0x2a0>)
 80025a0:	79db      	ldrb	r3, [r3, #7]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	4b2f      	ldr	r3, [pc, #188]	; (8002668 <ParticlesManager+0x2ac>)
 80025aa:	809a      	strh	r2, [r3, #4]
					ParticleDevice.ch1_OFF = (uint16_t)(RX_BUFFER[8] << 8) + (uint16_t)RX_BUFFER[9];
 80025ac:	4b2b      	ldr	r3, [pc, #172]	; (800265c <ParticlesManager+0x2a0>)
 80025ae:	7a1b      	ldrb	r3, [r3, #8]
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	021b      	lsls	r3, r3, #8
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	4b29      	ldr	r3, [pc, #164]	; (800265c <ParticlesManager+0x2a0>)
 80025b8:	7a5b      	ldrb	r3, [r3, #9]
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	4413      	add	r3, r2
 80025be:	b29a      	uxth	r2, r3
 80025c0:	4b29      	ldr	r3, [pc, #164]	; (8002668 <ParticlesManager+0x2ac>)
 80025c2:	80da      	strh	r2, [r3, #6]
					ParticleDevice.variance = (uint16_t)(RX_BUFFER[10] << 8) + (uint16_t)RX_BUFFER[11];
 80025c4:	4b25      	ldr	r3, [pc, #148]	; (800265c <ParticlesManager+0x2a0>)
 80025c6:	7a9b      	ldrb	r3, [r3, #10]
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	021b      	lsls	r3, r3, #8
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	4b23      	ldr	r3, [pc, #140]	; (800265c <ParticlesManager+0x2a0>)
 80025d0:	7adb      	ldrb	r3, [r3, #11]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	4413      	add	r3, r2
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	4b23      	ldr	r3, [pc, #140]	; (8002668 <ParticlesManager+0x2ac>)
 80025da:	815a      	strh	r2, [r3, #10]
					ParticleDevice.temperature = (uint16_t)(RX_BUFFER[12] << 8) + (uint16_t)RX_BUFFER[13];
 80025dc:	4b1f      	ldr	r3, [pc, #124]	; (800265c <ParticlesManager+0x2a0>)
 80025de:	7b1b      	ldrb	r3, [r3, #12]
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	021b      	lsls	r3, r3, #8
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	4b1d      	ldr	r3, [pc, #116]	; (800265c <ParticlesManager+0x2a0>)
 80025e8:	7b5b      	ldrb	r3, [r3, #13]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <ParticlesManager+0x2ac>)
 80025f2:	819a      	strh	r2, [r3, #12]
					ParticleDevice.LED_current_meas = (uint16_t)(RX_BUFFER[14] << 8) + (uint16_t)RX_BUFFER[15];
 80025f4:	4b19      	ldr	r3, [pc, #100]	; (800265c <ParticlesManager+0x2a0>)
 80025f6:	7b9b      	ldrb	r3, [r3, #14]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	021b      	lsls	r3, r3, #8
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	4b17      	ldr	r3, [pc, #92]	; (800265c <ParticlesManager+0x2a0>)
 8002600:	7bdb      	ldrb	r3, [r3, #15]
 8002602:	b29b      	uxth	r3, r3
 8002604:	4413      	add	r3, r2
 8002606:	b29a      	uxth	r2, r3
 8002608:	4b17      	ldr	r3, [pc, #92]	; (8002668 <ParticlesManager+0x2ac>)
 800260a:	829a      	strh	r2, [r3, #20]

					if(RX_BUFFER[16] & 0x80)
 800260c:	4b13      	ldr	r3, [pc, #76]	; (800265c <ParticlesManager+0x2a0>)
 800260e:	7c1b      	ldrb	r3, [r3, #16]
 8002610:	b25b      	sxtb	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	da09      	bge.n	800262a <ParticlesManager+0x26e>
					{
						RX_BUFFER[16] &= 0x7F;
 8002616:	4b11      	ldr	r3, [pc, #68]	; (800265c <ParticlesManager+0x2a0>)
 8002618:	7c1b      	ldrb	r3, [r3, #16]
 800261a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800261e:	b2da      	uxtb	r2, r3
 8002620:	4b0e      	ldr	r3, [pc, #56]	; (800265c <ParticlesManager+0x2a0>)
 8002622:	741a      	strb	r2, [r3, #16]
						sign = -1;
 8002624:	f04f 33ff 	mov.w	r3, #4294967295
 8002628:	61bb      	str	r3, [r7, #24]
					}
					ParticleDevice.slope = sign*((int)(RX_BUFFER[16] << 8) + (int)RX_BUFFER[17]);
 800262a:	4b0c      	ldr	r3, [pc, #48]	; (800265c <ParticlesManager+0x2a0>)
 800262c:	7c1b      	ldrb	r3, [r3, #16]
 800262e:	021b      	lsls	r3, r3, #8
 8002630:	4a0a      	ldr	r2, [pc, #40]	; (800265c <ParticlesManager+0x2a0>)
 8002632:	7c52      	ldrb	r2, [r2, #17]
 8002634:	4413      	add	r3, r2
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	fb02 f303 	mul.w	r3, r2, r3
 800263c:	4a0a      	ldr	r2, [pc, #40]	; (8002668 <ParticlesManager+0x2ac>)
 800263e:	6113      	str	r3, [r2, #16]
		if(rx_success)
 8002640:	e6d3      	b.n	80023ea <ParticlesManager+0x2e>
 8002642:	bf00      	nop
 8002644:	20002f7c 	.word	0x20002f7c
 8002648:	20000000 	.word	0x20000000
 800264c:	20000138 	.word	0x20000138
 8002650:	20000110 	.word	0x20000110
 8002654:	2000013a 	.word	0x2000013a
 8002658:	20002f8c 	.word	0x20002f8c
 800265c:	200000f8 	.word	0x200000f8
 8002660:	2000013c 	.word	0x2000013c
 8002664:	2000013e 	.word	0x2000013e
 8002668:	2000011c 	.word	0x2000011c

0800266c <Particle_getCH0>:
	}

}

uint16_t Particle_getCH0(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
	return ParticleDevice.ch0_ON;
 8002670:	4b02      	ldr	r3, [pc, #8]	; (800267c <Particle_getCH0+0x10>)
 8002672:	881b      	ldrh	r3, [r3, #0]
}
 8002674:	4618      	mov	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr
 800267c:	2000011c 	.word	0x2000011c

08002680 <Particle_getCH1>:

uint16_t Particle_getCH1(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
	return ParticleDevice.ch1_ON;
 8002684:	4b02      	ldr	r3, [pc, #8]	; (8002690 <Particle_getCH1+0x10>)
 8002686:	889b      	ldrh	r3, [r3, #4]
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr
 8002690:	2000011c 	.word	0x2000011c

08002694 <Particle_getVariance>:

uint16_t Particle_getVariance(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
	return ParticleDevice.variance;
 8002698:	4b02      	ldr	r3, [pc, #8]	; (80026a4 <Particle_getVariance+0x10>)
 800269a:	895b      	ldrh	r3, [r3, #10]
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr
 80026a4:	2000011c 	.word	0x2000011c

080026a8 <Particle_getSlope>:

int Particle_getSlope(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
	return ParticleDevice.slope;
 80026ac:	4b02      	ldr	r3, [pc, #8]	; (80026b8 <Particle_getSlope+0x10>)
 80026ae:	691b      	ldr	r3, [r3, #16]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr
 80026b8:	2000011c 	.word	0x2000011c

080026bc <Particle_getTemperature>:

uint16_t Particle_getTemperature(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
	return ParticleDevice.temperature;
 80026c0:	4b02      	ldr	r3, [pc, #8]	; (80026cc <Particle_getTemperature+0x10>)
 80026c2:	899b      	ldrh	r3, [r3, #12]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr
 80026cc:	2000011c 	.word	0x2000011c

080026d0 <Particle_getCurrent>:

uint16_t Particle_getCurrent(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
	return (uint16_t)(ParticleDevice.LED_current_meas*3.3/4.096);
 80026d4:	4b12      	ldr	r3, [pc, #72]	; (8002720 <Particle_getCurrent+0x50>)
 80026d6:	8a9b      	ldrh	r3, [r3, #20]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fd fefb 	bl	80004d4 <__aeabi_i2d>
 80026de:	a30c      	add	r3, pc, #48	; (adr r3, 8002710 <Particle_getCurrent+0x40>)
 80026e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e4:	f7fd ff60 	bl	80005a8 <__aeabi_dmul>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	4610      	mov	r0, r2
 80026ee:	4619      	mov	r1, r3
 80026f0:	a309      	add	r3, pc, #36	; (adr r3, 8002718 <Particle_getCurrent+0x48>)
 80026f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f6:	f7fe f881 	bl	80007fc <__aeabi_ddiv>
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	4610      	mov	r0, r2
 8002700:	4619      	mov	r1, r3
 8002702:	f7fe fa01 	bl	8000b08 <__aeabi_d2uiz>
 8002706:	4603      	mov	r3, r0
 8002708:	b29b      	uxth	r3, r3
}
 800270a:	4618      	mov	r0, r3
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	66666666 	.word	0x66666666
 8002714:	400a6666 	.word	0x400a6666
 8002718:	d2f1a9fc 	.word	0xd2f1a9fc
 800271c:	4010624d 	.word	0x4010624d
 8002720:	2000011c 	.word	0x2000011c

08002724 <HAL_UART_RxCpltCallback>:
	return (sum == (uint16_t)(RX_BUFFER[i] << 8) + (uint16_t)RX_BUFFER[i+1]);
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART3)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a05      	ldr	r2, [pc, #20]	; (8002748 <HAL_UART_RxCpltCallback+0x24>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d104      	bne.n	8002740 <HAL_UART_RxCpltCallback+0x1c>
	{

		osSemaphoreRelease(MP_UART_SemaphoreHandle);
 8002736:	4b05      	ldr	r3, [pc, #20]	; (800274c <HAL_UART_RxCpltCallback+0x28>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f008 fbc6 	bl	800aecc <osSemaphoreRelease>
	}

}
 8002740:	bf00      	nop
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40004800 	.word	0x40004800
 800274c:	20002f7c 	.word	0x20002f7c

08002750 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART3)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a05      	ldr	r2, [pc, #20]	; (8002774 <HAL_UART_TxCpltCallback+0x24>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d104      	bne.n	800276c <HAL_UART_TxCpltCallback+0x1c>
	{
		osSemaphoreRelease(MP_UART_SemaphoreHandle);
 8002762:	4b05      	ldr	r3, [pc, #20]	; (8002778 <HAL_UART_TxCpltCallback+0x28>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f008 fbb0 	bl	800aecc <osSemaphoreRelease>
	}
}
 800276c:	bf00      	nop
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40004800 	.word	0x40004800
 8002778:	20002f7c 	.word	0x20002f7c

0800277c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART3)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a05      	ldr	r2, [pc, #20]	; (80027a0 <HAL_UART_ErrorCallback+0x24>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d102      	bne.n	8002794 <HAL_UART_ErrorCallback+0x18>
	{
		uint32_t errorcode = huart->ErrorCode;//send this error code up the line to communicate to PC?
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	60fb      	str	r3, [r7, #12]
	}

}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40004800 	.word	0x40004800

080027a4 <initPID>:
    return (pTerm + dTerm + iTerm); //iTerm +

}

void initPID(PIDtype* pid, float ki, float kd, float kp,int iErrorMax, int iErrorMin)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
 80027b0:	603b      	str	r3, [r7, #0]
	pid->dLastValue = 0;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
	pid->iErrorMax = iErrorMax;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	609a      	str	r2, [r3, #8]
	pid->iErrorMin = iErrorMin;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	69fa      	ldr	r2, [r7, #28]
 80027c2:	60da      	str	r2, [r3, #12]
	pid->previousError = 0;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	611a      	str	r2, [r3, #16]
	pid->kd = kd;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	61da      	str	r2, [r3, #28]
	pid->ki = ki;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	619a      	str	r2, [r3, #24]
	pid->kp = kp;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	615a      	str	r2, [r3, #20]
	pid->PIDPosition = 0;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	621a      	str	r2, [r3, #32]
}
 80027e2:	bf00      	nop
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <TestButtonWalkthrough>:
//static Test* pTestState = &TestList[MOTOR_SPEED1_TEST];
static Test TestState = COMPLETED;
Test getTestState();

void TestButtonWalkthrough(Test* pteststate)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
	static int debounceCounter=0;

	//function used to "harshly" debounce with timer and stuff for production testing
	if(GPIO_PIN_SET==HAL_GPIO_ReadPin(Button_Input_GPIO_Port,Button_Input_Pin))
 80027f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027f8:	4819      	ldr	r0, [pc, #100]	; (8002860 <TestButtonWalkthrough+0x74>)
 80027fa:	f003 fb35 	bl	8005e68 <HAL_GPIO_ReadPin>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b01      	cmp	r3, #1
 8002802:	d125      	bne.n	8002850 <TestButtonWalkthrough+0x64>
	{
		debounceCounter++;
 8002804:	4b17      	ldr	r3, [pc, #92]	; (8002864 <TestButtonWalkthrough+0x78>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	3301      	adds	r3, #1
 800280a:	4a16      	ldr	r2, [pc, #88]	; (8002864 <TestButtonWalkthrough+0x78>)
 800280c:	6013      	str	r3, [r2, #0]
		if(debounceCounter > 1)
 800280e:	4b15      	ldr	r3, [pc, #84]	; (8002864 <TestButtonWalkthrough+0x78>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2b01      	cmp	r3, #1
 8002814:	dd1f      	ble.n	8002856 <TestButtonWalkthrough+0x6a>
		{
			(*pteststate)++; //increment the test sequence.
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	3301      	adds	r3, #1
 800281c:	b2da      	uxtb	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	701a      	strb	r2, [r3, #0]
			if(*pteststate >=NB_OF_TEST)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b08      	cmp	r3, #8
 8002828:	d905      	bls.n	8002836 <TestButtonWalkthrough+0x4a>
			{
				*pteststate = 0;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	701a      	strb	r2, [r3, #0]
				Algo_setState(ZEROING_STEPPER);
 8002830:	2000      	movs	r0, #0
 8002832:	f001 fbfd 	bl	8004030 <Algo_setState>
			}
			debounceCounter = 0 ;
 8002836:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <TestButtonWalkthrough+0x78>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
			while(GPIO_PIN_SET==HAL_GPIO_ReadPin(Button_Input_GPIO_Port,Button_Input_Pin)){}; // stay here if button is maintained
 800283c:	bf00      	nop
 800283e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002842:	4807      	ldr	r0, [pc, #28]	; (8002860 <TestButtonWalkthrough+0x74>)
 8002844:	f003 fb10 	bl	8005e68 <HAL_GPIO_ReadPin>
 8002848:	4603      	mov	r3, r0
 800284a:	2b01      	cmp	r3, #1
 800284c:	d0f7      	beq.n	800283e <TestButtonWalkthrough+0x52>
	}
	else
	{
		debounceCounter =0;
	}
}
 800284e:	e002      	b.n	8002856 <TestButtonWalkthrough+0x6a>
		debounceCounter =0;
 8002850:	4b04      	ldr	r3, [pc, #16]	; (8002864 <TestButtonWalkthrough+0x78>)
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
}
 8002856:	bf00      	nop
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40010c00 	.word	0x40010c00
 8002864:	20000144 	.word	0x20000144

08002868 <TestRunner>:

void TestRunner()
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
	//pTestState = &TestList[MOTOR_SPEED1_TEST];
	// we are going to use the status led to encode the test step

	switch (TestState) {
 800286c:	4b2c      	ldr	r3, [pc, #176]	; (8002920 <TestRunner+0xb8>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b08      	cmp	r3, #8
 8002872:	d851      	bhi.n	8002918 <TestRunner+0xb0>
 8002874:	a201      	add	r2, pc, #4	; (adr r2, 800287c <TestRunner+0x14>)
 8002876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287a:	bf00      	nop
 800287c:	080028a1 	.word	0x080028a1
 8002880:	080028a9 	.word	0x080028a9
 8002884:	080028b7 	.word	0x080028b7
 8002888:	080028c5 	.word	0x080028c5
 800288c:	080028cd 	.word	0x080028cd
 8002890:	080028d5 	.word	0x080028d5
 8002894:	080028ef 	.word	0x080028ef
 8002898:	08002909 	.word	0x08002909
 800289c:	08002911 	.word	0x08002911
		case COMPLETED:
			//setStatusBit(TestState);
			TestButtonWalkthrough(&TestState);
 80028a0:	481f      	ldr	r0, [pc, #124]	; (8002920 <TestRunner+0xb8>)
 80028a2:	f7ff ffa3 	bl	80027ec <TestButtonWalkthrough>
			break;
 80028a6:	e038      	b.n	800291a <TestRunner+0xb2>
		case MOTOR_SPEED1_TEST:
			vSetSpeed(1);
 80028a8:	2001      	movs	r0, #1
 80028aa:	f7ff fc2d 	bl	8002108 <vSetSpeed>
			//setStatusBit(TestState);
			TestButtonWalkthrough(&TestState);
 80028ae:	481c      	ldr	r0, [pc, #112]	; (8002920 <TestRunner+0xb8>)
 80028b0:	f7ff ff9c 	bl	80027ec <TestButtonWalkthrough>
			break;
 80028b4:	e031      	b.n	800291a <TestRunner+0xb2>
		case THERMO_REAR_TEST:
			vSetSpeed(0);
 80028b6:	2000      	movs	r0, #0
 80028b8:	f7ff fc26 	bl	8002108 <vSetSpeed>
			//setStatusBit(1);
			TestButtonWalkthrough(&TestState);
 80028bc:	4818      	ldr	r0, [pc, #96]	; (8002920 <TestRunner+0xb8>)
 80028be:	f7ff ff95 	bl	80027ec <TestButtonWalkthrough>
			break;
 80028c2:	e02a      	b.n	800291a <TestRunner+0xb2>
		case THERMO_BAFFLE_TEST:
			//setStatusBit(2);
			TestButtonWalkthrough(&TestState);
 80028c4:	4816      	ldr	r0, [pc, #88]	; (8002920 <TestRunner+0xb8>)
 80028c6:	f7ff ff91 	bl	80027ec <TestButtonWalkthrough>
			break;
 80028ca:	e026      	b.n	800291a <TestRunner+0xb2>
		case PLENUM_RTD_TEST:
			//setStatusBit(3);
			TestButtonWalkthrough(&TestState);
 80028cc:	4814      	ldr	r0, [pc, #80]	; (8002920 <TestRunner+0xb8>)
 80028ce:	f7ff ff8d 	bl	80027ec <TestButtonWalkthrough>
			break;
 80028d2:	e022      	b.n	800291a <TestRunner+0xb2>
		case STEPPER_MOTOR1_TEST:
			//setStatusBit(4);
			StepperMotorProdTest(PrimaryStepper);
 80028d4:	2000      	movs	r0, #0
 80028d6:	f7ff fc6b 	bl	80021b0 <StepperMotorProdTest>
			TestButtonWalkthrough(&TestState);
 80028da:	4811      	ldr	r0, [pc, #68]	; (8002920 <TestRunner+0xb8>)
 80028dc:	f7ff ff86 	bl	80027ec <TestButtonWalkthrough>
			TestState++;
 80028e0:	4b0f      	ldr	r3, [pc, #60]	; (8002920 <TestRunner+0xb8>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	3301      	adds	r3, #1
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <TestRunner+0xb8>)
 80028ea:	701a      	strb	r2, [r3, #0]
			break;
 80028ec:	e015      	b.n	800291a <TestRunner+0xb2>
		case STEPPER_MOTOR2_TEST:
			//setStatusBit(5);
			StepperMotorProdTest(GrillStepper);
 80028ee:	2001      	movs	r0, #1
 80028f0:	f7ff fc5e 	bl	80021b0 <StepperMotorProdTest>
			TestButtonWalkthrough(&TestState);
 80028f4:	480a      	ldr	r0, [pc, #40]	; (8002920 <TestRunner+0xb8>)
 80028f6:	f7ff ff79 	bl	80027ec <TestButtonWalkthrough>
			TestState++;
 80028fa:	4b09      	ldr	r3, [pc, #36]	; (8002920 <TestRunner+0xb8>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	3301      	adds	r3, #1
 8002900:	b2da      	uxtb	r2, r3
 8002902:	4b07      	ldr	r3, [pc, #28]	; (8002920 <TestRunner+0xb8>)
 8002904:	701a      	strb	r2, [r3, #0]
			break;
 8002906:	e008      	b.n	800291a <TestRunner+0xb2>
		case THERMOSTAT_TEST:
			//setStatusBit(6);
			TestButtonWalkthrough(&TestState);
 8002908:	4805      	ldr	r0, [pc, #20]	; (8002920 <TestRunner+0xb8>)
 800290a:	f7ff ff6f 	bl	80027ec <TestButtonWalkthrough>
			break;
 800290e:	e004      	b.n	800291a <TestRunner+0xb2>
		case INTERLOCK_TEST:
			//setStatusBit(7);
			TestButtonWalkthrough(&TestState);
 8002910:	4803      	ldr	r0, [pc, #12]	; (8002920 <TestRunner+0xb8>)
 8002912:	f7ff ff6b 	bl	80027ec <TestButtonWalkthrough>
			break;
 8002916:	e000      	b.n	800291a <TestRunner+0xb2>
		default:
			break;
 8002918:	bf00      	nop
	}
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000140 	.word	0x20000140

08002924 <getTestState>:
Test getTestState()
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
	return TestState;
 8002928:	4b02      	ldr	r3, [pc, #8]	; (8002934 <getTestState+0x10>)
 800292a:	781b      	ldrb	r3, [r3, #0]
}
 800292c:	4618      	mov	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr
 8002934:	20000140 	.word	0x20000140

08002938 <TemperatureManager>:
	TempSense_board, // Used to determine cold junction temp
	NUMBER_OF_ADC_CH
};

void TemperatureManager(void const * argument)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b098      	sub	sp, #96	; 0x60
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TemperatureManager */
	osSemaphoreDef(I2CSemaphoreHandle);
 8002940:	2300      	movs	r3, #0
 8002942:	647b      	str	r3, [r7, #68]	; 0x44
 8002944:	2300      	movs	r3, #0
 8002946:	64bb      	str	r3, [r7, #72]	; 0x48
    I2CSemaphoreHandle = osSemaphoreCreate(osSemaphore(I2CSemaphoreHandle), 1);
 8002948:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800294c:	2101      	movs	r1, #1
 800294e:	4618      	mov	r0, r3
 8002950:	f008 fa3c 	bl	800adcc <osSemaphoreCreate>
 8002954:	4603      	mov	r3, r0
 8002956:	4ab0      	ldr	r2, [pc, #704]	; (8002c18 <TemperatureManager+0x2e0>)
 8002958:	6013      	str	r3, [r2, #0]
    osSemaphoreWait(I2CSemaphoreHandle,1); //decrement semaphore value for the lack of way to create a semaphore with a count of 0.
 800295a:	4baf      	ldr	r3, [pc, #700]	; (8002c18 <TemperatureManager+0x2e0>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2101      	movs	r1, #1
 8002960:	4618      	mov	r0, r3
 8002962:	f008 fa65 	bl	800ae30 <osSemaphoreWait>

    uint8_t ADCConfigByte[NUMBER_OF_ADC_CH] = {0x9F,0xBF,0xDC,0xFC}; // Channel 3 is for RTD,Gain=1 //channel 4 is for the pressure sensor, Gain =1
 8002966:	4bad      	ldr	r3, [pc, #692]	; (8002c1c <TemperatureManager+0x2e4>)
 8002968:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t i32tempReading=0;
 800296a:	2300      	movs	r3, #0
 800296c:	65fb      	str	r3, [r7, #92]	; 0x5c
    int i =0;
 800296e:	2300      	movs	r3, #0
 8002970:	65bb      	str	r3, [r7, #88]	; 0x58
    float AdcArray[NUMBER_OF_ADC_CH];
    float TemperatureCelsius[NUMBER_OF_ADC_CH];
    float TemperatureFarenheit[NUMBER_OF_ADC_CH];
	float tColdJunction;
	float temp1;
    uint32_t PreviousWakeTime = osKernelSysTick(); //must be nitialized before first use
 8002972:	f008 f94a 	bl	800ac0a <osKernelSysTick>
 8002976:	4603      	mov	r3, r0
 8002978:	60bb      	str	r3, [r7, #8]
    bool DataReady;

    /* Infinite loop */
    for(;;)
    {
    	osDelayUntil(&PreviousWakeTime,5000);
 800297a:	f107 0308 	add.w	r3, r7, #8
 800297e:	f241 3188 	movw	r1, #5000	; 0x1388
 8002982:	4618      	mov	r0, r3
 8002984:	f008 fad8 	bl	800af38 <osDelayUntil>
    	//HAL_GPIO_TogglePin(USB_LED_GPIO_Port,USB_LED_Pin);

    	//coldjunction temperature
		//temp1 = uCAdcData[1]*3.3/4096;  //Vout=TC x TA + VoC where TC = 10mV/C V0C->500mV
		temp1 = 0.800;		///TODO: fetch this value from external ADC (I2C)
 8002988:	4ba5      	ldr	r3, [pc, #660]	; (8002c20 <TemperatureManager+0x2e8>)
 800298a:	64fb      	str	r3, [r7, #76]	; 0x4c
		tColdJunction = (temp1-0.500)/.010;
 800298c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800298e:	f7fd fdb3 	bl	80004f8 <__aeabi_f2d>
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	4ba3      	ldr	r3, [pc, #652]	; (8002c24 <TemperatureManager+0x2ec>)
 8002998:	f7fd fc4e 	bl	8000238 <__aeabi_dsub>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4610      	mov	r0, r2
 80029a2:	4619      	mov	r1, r3
 80029a4:	a398      	add	r3, pc, #608	; (adr r3, 8002c08 <TemperatureManager+0x2d0>)
 80029a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029aa:	f7fd ff27 	bl	80007fc <__aeabi_ddiv>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	4610      	mov	r0, r2
 80029b4:	4619      	mov	r1, r3
 80029b6:	f7fe f8c7 	bl	8000b48 <__aeabi_d2f>
 80029ba:	4603      	mov	r3, r0
 80029bc:	657b      	str	r3, [r7, #84]	; 0x54

		for (i=TempSense_board;i>=FrontThermocouple;i--)
 80029be:	2303      	movs	r3, #3
 80029c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80029c2:	e15c      	b.n	8002c7e <TemperatureManager+0x346>
		{

			HAL_I2C_Master_Transmit_IT(&hi2c1, ADC_ADDRESS_7BIT,&ADCConfigByte[i],1);
 80029c4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80029c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029ca:	441a      	add	r2, r3
 80029cc:	2301      	movs	r3, #1
 80029ce:	21d0      	movs	r1, #208	; 0xd0
 80029d0:	4895      	ldr	r0, [pc, #596]	; (8002c28 <TemperatureManager+0x2f0>)
 80029d2:	f003 fc05 	bl	80061e0 <HAL_I2C_Master_Transmit_IT>
			//osSemaphoreWait(I2CSemaphoreHandle,osWaitForever); //wait forever @@@@ to restart and I2C transaction in case of hang up sys
			if(osErrorOS == osSemaphoreWait(I2CSemaphoreHandle,1000)) //wait 500ms for an answer or retry
 80029d6:	4b90      	ldr	r3, [pc, #576]	; (8002c18 <TemperatureManager+0x2e0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80029de:	4618      	mov	r0, r3
 80029e0:	f008 fa26 	bl	800ae30 <osSemaphoreWait>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2bff      	cmp	r3, #255	; 0xff
 80029e8:	d10f      	bne.n	8002a0a <TemperatureManager+0xd2>
			{
				//clearly something is wrong Abort the transmission
				//HAL_GPIO_WritePin(STATUS_LED0_GPIO_Port,STATUS_LED0_Pin,RESET);
				HAL_I2C_Master_Abort_IT(&hi2c1,ADC_ADDRESS_7BIT);
 80029ea:	21d0      	movs	r1, #208	; 0xd0
 80029ec:	488e      	ldr	r0, [pc, #568]	; (8002c28 <TemperatureManager+0x2f0>)
 80029ee:	f003 fd47 	bl	8006480 <HAL_I2C_Master_Abort_IT>
				HAL_I2C_DeInit(&hi2c1);
 80029f2:	488d      	ldr	r0, [pc, #564]	; (8002c28 <TemperatureManager+0x2f0>)
 80029f4:	f003 fbc4 	bl	8006180 <HAL_I2C_DeInit>
				osDelay(100);
 80029f8:	2064      	movs	r0, #100	; 0x64
 80029fa:	f008 f962 	bl	800acc2 <osDelay>
				MX_I2C1_Init();
 80029fe:	f001 fe59 	bl	80046b4 <MX_I2C1_Init>
				osDelay(100);
 8002a02:	2064      	movs	r0, #100	; 0x64
 8002a04:	f008 f95d 	bl	800acc2 <osDelay>
 8002a08:	e02d      	b.n	8002a66 <TemperatureManager+0x12e>
			}
			else
			{
				//do something in the callback
				HAL_GPIO_WritePin(STATUS_LED1_GPIO_Port,STATUS_LED1_Pin,RESET);
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	2108      	movs	r1, #8
 8002a0e:	4887      	ldr	r0, [pc, #540]	; (8002c2c <TemperatureManager+0x2f4>)
 8002a10:	f003 fa41 	bl	8005e96 <HAL_GPIO_WritePin>
				do{
					DataReady = false;
 8002a14:	2300      	movs	r3, #0
 8002a16:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
					osDelay(300); //wait to give the chance to the ADC to complete the conversion 1/3.75 = 266ms
 8002a1a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002a1e:	f008 f950 	bl	800acc2 <osDelay>
					HAL_I2C_Master_Receive_IT(&hi2c1, ADC_ADDRESS_7BIT,adcData,4);
 8002a22:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002a26:	2304      	movs	r3, #4
 8002a28:	21d0      	movs	r1, #208	; 0xd0
 8002a2a:	487f      	ldr	r0, [pc, #508]	; (8002c28 <TemperatureManager+0x2f0>)
 8002a2c:	f003 fc7c 	bl	8006328 <HAL_I2C_Master_Receive_IT>
					//osSemaphoreWait(I2CSemaphoreHandle,osWaitForever); //wait forever @@@@ to restart and I2C transaction in case of hang up sys
					if(osErrorOS == osSemaphoreWait(I2CSemaphoreHandle,500)) //wait 500ms for an answer or retry
 8002a30:	4b79      	ldr	r3, [pc, #484]	; (8002c18 <TemperatureManager+0x2e0>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f008 f9f9 	bl	800ae30 <osSemaphoreWait>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2bff      	cmp	r3, #255	; 0xff
 8002a42:	d008      	beq.n	8002a56 <TemperatureManager+0x11e>
					{
						continue;
					}
					else
					{
						DataReady = (IsDataNew(adcData[3]));
 8002a44:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002a48:	b25b      	sxtb	r3, r3
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	09db      	lsrs	r3, r3, #7
 8002a50:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8002a54:	e000      	b.n	8002a58 <TemperatureManager+0x120>
						continue;
 8002a56:	bf00      	nop
					}

				}while (!DataReady);
 8002a58:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002a5c:	f083 0301 	eor.w	r3, r3, #1
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1d6      	bne.n	8002a14 <TemperatureManager+0xdc>
			}
			i32tempReading = 0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	65fb      	str	r3, [r7, #92]	; 0x5c
			i32tempReading = (adcData[0] << 30) + (adcData[1] << 22)  + (adcData[2] << 14); // justify the result for 32bit storage
 8002a6a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002a6e:	079a      	lsls	r2, r3, #30
 8002a70:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002a74:	059b      	lsls	r3, r3, #22
 8002a76:	441a      	add	r2, r3
 8002a78:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002a7c:	039b      	lsls	r3, r3, #14
 8002a7e:	4413      	add	r3, r2
 8002a80:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (i32tempReading < 0){
 8002a82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	da02      	bge.n	8002a8e <TemperatureManager+0x156>
				i32tempReading = -i32tempReading;
 8002a88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a8a:	425b      	negs	r3, r3
 8002a8c:	65fb      	str	r3, [r7, #92]	; 0x5c
			}
			i32tempReading = (i32tempReading) >> 14;
 8002a8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a90:	139b      	asrs	r3, r3, #14
 8002a92:	65fb      	str	r3, [r7, #92]	; 0x5c

			//AdcArray[i] = ((float)(abs(i32tempReading))*15.625)/8; //15.625uV par bit  gain = 8
			switch(i)
 8002a94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a96:	2b03      	cmp	r3, #3
 8002a98:	d06e      	beq.n	8002b78 <TemperatureManager+0x240>
 8002a9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	f300 80cb 	bgt.w	8002c38 <TemperatureManager+0x300>
 8002aa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	dc03      	bgt.n	8002ab0 <TemperatureManager+0x178>
 8002aa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	da04      	bge.n	8002ab8 <TemperatureManager+0x180>
					AdcArray[i] = (float)(i32tempReading*15.625e-6);
					TemperatureCelsius[i] = (AdcArray[i]-0.500)/.010;
					tColdJunction = TemperatureCelsius[i];
					break;
				default:
					break;
 8002aae:	e0c3      	b.n	8002c38 <TemperatureManager+0x300>
			switch(i)
 8002ab0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d037      	beq.n	8002b26 <TemperatureManager+0x1ee>
					break;
 8002ab6:	e0bf      	b.n	8002c38 <TemperatureManager+0x300>
					AdcArray[i] = ((float)(i32tempReading)*15.625)/8; //15.625uV par bit  gain = 8
 8002ab8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002aba:	f7fe f94f 	bl	8000d5c <__aeabi_i2f>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fd fd19 	bl	80004f8 <__aeabi_f2d>
 8002ac6:	f04f 0200 	mov.w	r2, #0
 8002aca:	4b59      	ldr	r3, [pc, #356]	; (8002c30 <TemperatureManager+0x2f8>)
 8002acc:	f7fd fd6c 	bl	80005a8 <__aeabi_dmul>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	4b55      	ldr	r3, [pc, #340]	; (8002c34 <TemperatureManager+0x2fc>)
 8002ade:	f7fd fe8d 	bl	80007fc <__aeabi_ddiv>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	4619      	mov	r1, r3
 8002aea:	f7fe f82d 	bl	8000b48 <__aeabi_d2f>
 8002aee:	4602      	mov	r2, r0
 8002af0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002af8:	440b      	add	r3, r1
 8002afa:	f843 2c34 	str.w	r2, [r3, #-52]
					TemperatureCelsius[i] = uVtoDegreeCTypeK(AdcArray[i], tColdJunction); //6.7//26.1 //board is self heating to 7.3 above ambient
 8002afe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002b06:	4413      	add	r3, r2
 8002b08:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8002b0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 f922 	bl	8002d58 <uVtoDegreeCTypeK>
 8002b14:	4602      	mov	r2, r0
 8002b16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002b1e:	440b      	add	r3, r1
 8002b20:	f843 2c44 	str.w	r2, [r3, #-68]
					break;
 8002b24:	e089      	b.n	8002c3a <TemperatureManager+0x302>
					AdcArray[i] = (float)(i32tempReading*15.625e-6);
 8002b26:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002b28:	f7fd fcd4 	bl	80004d4 <__aeabi_i2d>
 8002b2c:	a338      	add	r3, pc, #224	; (adr r3, 8002c10 <TemperatureManager+0x2d8>)
 8002b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b32:	f7fd fd39 	bl	80005a8 <__aeabi_dmul>
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	4610      	mov	r0, r2
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	f7fe f803 	bl	8000b48 <__aeabi_d2f>
 8002b42:	4602      	mov	r2, r0
 8002b44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002b4c:	440b      	add	r3, r1
 8002b4e:	f843 2c34 	str.w	r2, [r3, #-52]
					TemperatureCelsius[i] = VtoDegreeCRtd(AdcArray[i]);
 8002b52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 fc1d 	bl	80033a0 <VtoDegreeCRtd>
 8002b66:	4602      	mov	r2, r0
 8002b68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002b70:	440b      	add	r3, r1
 8002b72:	f843 2c44 	str.w	r2, [r3, #-68]
					break;
 8002b76:	e060      	b.n	8002c3a <TemperatureManager+0x302>
					AdcArray[i] = (float)(i32tempReading*15.625e-6);
 8002b78:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002b7a:	f7fd fcab 	bl	80004d4 <__aeabi_i2d>
 8002b7e:	a324      	add	r3, pc, #144	; (adr r3, 8002c10 <TemperatureManager+0x2d8>)
 8002b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b84:	f7fd fd10 	bl	80005a8 <__aeabi_dmul>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	4619      	mov	r1, r3
 8002b90:	f7fd ffda 	bl	8000b48 <__aeabi_d2f>
 8002b94:	4602      	mov	r2, r0
 8002b96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002b9e:	440b      	add	r3, r1
 8002ba0:	f843 2c34 	str.w	r2, [r3, #-52]
					TemperatureCelsius[i] = (AdcArray[i]-0.500)/.010;
 8002ba4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002bac:	4413      	add	r3, r2
 8002bae:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fd fca0 	bl	80004f8 <__aeabi_f2d>
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	4b19      	ldr	r3, [pc, #100]	; (8002c24 <TemperatureManager+0x2ec>)
 8002bbe:	f7fd fb3b 	bl	8000238 <__aeabi_dsub>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	4619      	mov	r1, r3
 8002bca:	a30f      	add	r3, pc, #60	; (adr r3, 8002c08 <TemperatureManager+0x2d0>)
 8002bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd0:	f7fd fe14 	bl	80007fc <__aeabi_ddiv>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4619      	mov	r1, r3
 8002bdc:	f7fd ffb4 	bl	8000b48 <__aeabi_d2f>
 8002be0:	4602      	mov	r2, r0
 8002be2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002bea:	440b      	add	r3, r1
 8002bec:	f843 2c44 	str.w	r2, [r3, #-68]
					tColdJunction = TemperatureCelsius[i];
 8002bf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8002bfe:	657b      	str	r3, [r7, #84]	; 0x54
					break;
 8002c00:	e01b      	b.n	8002c3a <TemperatureManager+0x302>
 8002c02:	bf00      	nop
 8002c04:	f3af 8000 	nop.w
 8002c08:	47ae147b 	.word	0x47ae147b
 8002c0c:	3f847ae1 	.word	0x3f847ae1
 8002c10:	d2f1a9fc 	.word	0xd2f1a9fc
 8002c14:	3ef0624d 	.word	0x3ef0624d
 8002c18:	20002f80 	.word	0x20002f80
 8002c1c:	fcdcbf9f 	.word	0xfcdcbf9f
 8002c20:	3f4ccccd 	.word	0x3f4ccccd
 8002c24:	3fe00000 	.word	0x3fe00000
 8002c28:	20002fd0 	.word	0x20002fd0
 8002c2c:	40011000 	.word	0x40011000
 8002c30:	402f4000 	.word	0x402f4000
 8002c34:	40200000 	.word	0x40200000
					break;
 8002c38:	bf00      	nop
			}

			TemperatureFarenheit[i] = TemperatureCelsius[i]*9/5+32;
 8002c3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002c42:	4413      	add	r3, r2
 8002c44:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8002c48:	4923      	ldr	r1, [pc, #140]	; (8002cd8 <TemperatureManager+0x3a0>)
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fe f8da 	bl	8000e04 <__aeabi_fmul>
 8002c50:	4603      	mov	r3, r0
 8002c52:	4922      	ldr	r1, [pc, #136]	; (8002cdc <TemperatureManager+0x3a4>)
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7fe f989 	bl	8000f6c <__aeabi_fdiv>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fd ffc7 	bl	8000bf4 <__addsf3>
 8002c66:	4603      	mov	r3, r0
 8002c68:	461a      	mov	r2, r3
 8002c6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002c72:	440b      	add	r3, r1
 8002c74:	f843 2c54 	str.w	r2, [r3, #-84]
		for (i=TempSense_board;i>=FrontThermocouple;i--)
 8002c78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f6bf ae9f 	bge.w	80029c4 <TemperatureManager+0x8c>

		}

		Algo_setBaffleTemp((int)(TemperatureFarenheit[FrontThermocouple]*10));
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	4915      	ldr	r1, [pc, #84]	; (8002ce0 <TemperatureManager+0x3a8>)
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fe f8ba 	bl	8000e04 <__aeabi_fmul>
 8002c90:	4603      	mov	r3, r0
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fe fa7c 	bl	8001190 <__aeabi_f2iz>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f001 f9e2 	bl	8004064 <Algo_setBaffleTemp>
		Algo_setRearTemp((int)(TemperatureFarenheit[RearThermocouple]*10));
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	490f      	ldr	r1, [pc, #60]	; (8002ce0 <TemperatureManager+0x3a8>)
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fe f8ad 	bl	8000e04 <__aeabi_fmul>
 8002caa:	4603      	mov	r3, r0
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fe fa6f 	bl	8001190 <__aeabi_f2iz>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f001 f9e9 	bl	800408c <Algo_setRearTemp>
		Algo_setPlenumTemp((int)(TemperatureFarenheit[PlenumRtd]*10));
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	4908      	ldr	r1, [pc, #32]	; (8002ce0 <TemperatureManager+0x3a8>)
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fe f8a0 	bl	8000e04 <__aeabi_fmul>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fe fa62 	bl	8001190 <__aeabi_f2iz>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f001 f9fe 	bl	80040d0 <Algo_setPlenumTemp>
    	osDelayUntil(&PreviousWakeTime,5000);
 8002cd4:	e651      	b.n	800297a <TemperatureManager+0x42>
 8002cd6:	bf00      	nop
 8002cd8:	41100000 	.word	0x41100000
 8002cdc:	40a00000 	.word	0x40a00000
 8002ce0:	41200000 	.word	0x41200000

08002ce4 <HAL_I2C_MasterTxCpltCallback>:

  	}
  /* USER CODE END TemperatureManager */
}
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(I2CSemaphoreHandle);
 8002cec:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <HAL_I2C_MasterTxCpltCallback+0x1c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f008 f8eb 	bl	800aecc <osSemaphoreRelease>
}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20002f80 	.word	0x20002f80

08002d04 <HAL_I2C_MasterRxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(I2CSemaphoreHandle);
 8002d0c:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <HAL_I2C_MasterRxCpltCallback+0x1c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f008 f8db 	bl	800aecc <osSemaphoreRelease>
}
 8002d16:	bf00      	nop
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20002f80 	.word	0x20002f80

08002d24 <HAL_I2C_ErrorCallback>:
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
	uint32_t errorcode = hi2c->ErrorCode;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	60fb      	str	r3, [r7, #12]
	UNUSED(errorcode);
}
 8002d32:	bf00      	nop
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr

08002d3c <HAL_I2C_AbortCpltCallback>:
void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
	uint32_t errorcode = hi2c->ErrorCode;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	60fb      	str	r3, [r7, #12]
	UNUSED(errorcode);
}
 8002d4a:	bf00      	nop
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr
 8002d54:	0000      	movs	r0, r0
	...

08002d58 <uVtoDegreeCTypeK>:
#define T_COEF_A0 1.185976E-1
#define T_COEF_A1 -1.183432E-4
#define T_COEF_A2 1.269686E2

float uVtoDegreeCTypeK(float uVdata,float Tref)
{
 8002d58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d5c:	b08a      	sub	sp, #40	; 0x28
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	6039      	str	r1, [r7, #0]
    double Vref = T_COEF_C0 + T_COEF_C1*Tref + T_COEF_C2*pow(Tref,2) + T_COEF_C3*pow(Tref,3) + T_COEF_C4*pow(Tref,4) + T_COEF_C5*pow(Tref,5) + T_COEF_C6*pow(Tref,6) + T_COEF_C7*pow(Tref,7) + T_COEF_C8*pow(Tref,8) + T_COEF_C9*pow(Tref,9)+T_COEF_A0*pow(2.718281828,T_COEF_A1*(Tref-T_COEF_A2)*(Tref-T_COEF_A2));
 8002d64:	6838      	ldr	r0, [r7, #0]
 8002d66:	f7fd fbc7 	bl	80004f8 <__aeabi_f2d>
 8002d6a:	a3cd      	add	r3, pc, #820	; (adr r3, 80030a0 <uVtoDegreeCTypeK+0x348>)
 8002d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d70:	f7fd fc1a 	bl	80005a8 <__aeabi_dmul>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4610      	mov	r0, r2
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	a3ca      	add	r3, pc, #808	; (adr r3, 80030a8 <uVtoDegreeCTypeK+0x350>)
 8002d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d82:	f7fd fa59 	bl	8000238 <__aeabi_dsub>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4614      	mov	r4, r2
 8002d8c:	461d      	mov	r5, r3
 8002d8e:	6838      	ldr	r0, [r7, #0]
 8002d90:	f7fd fbb2 	bl	80004f8 <__aeabi_f2d>
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d9c:	f00c f882 	bl	800eea4 <pow>
 8002da0:	a3c3      	add	r3, pc, #780	; (adr r3, 80030b0 <uVtoDegreeCTypeK+0x358>)
 8002da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da6:	f7fd fbff 	bl	80005a8 <__aeabi_dmul>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4620      	mov	r0, r4
 8002db0:	4629      	mov	r1, r5
 8002db2:	f7fd fa43 	bl	800023c <__adddf3>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4614      	mov	r4, r2
 8002dbc:	461d      	mov	r5, r3
 8002dbe:	6838      	ldr	r0, [r7, #0]
 8002dc0:	f7fd fb9a 	bl	80004f8 <__aeabi_f2d>
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	4bdd      	ldr	r3, [pc, #884]	; (8003140 <uVtoDegreeCTypeK+0x3e8>)
 8002dca:	f00c f86b 	bl	800eea4 <pow>
 8002dce:	a3ba      	add	r3, pc, #744	; (adr r3, 80030b8 <uVtoDegreeCTypeK+0x360>)
 8002dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd4:	f7fd fbe8 	bl	80005a8 <__aeabi_dmul>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4620      	mov	r0, r4
 8002dde:	4629      	mov	r1, r5
 8002de0:	f7fd fa2c 	bl	800023c <__adddf3>
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	4614      	mov	r4, r2
 8002dea:	461d      	mov	r5, r3
 8002dec:	6838      	ldr	r0, [r7, #0]
 8002dee:	f7fd fb83 	bl	80004f8 <__aeabi_f2d>
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	4bd3      	ldr	r3, [pc, #844]	; (8003144 <uVtoDegreeCTypeK+0x3ec>)
 8002df8:	f00c f854 	bl	800eea4 <pow>
 8002dfc:	a3b0      	add	r3, pc, #704	; (adr r3, 80030c0 <uVtoDegreeCTypeK+0x368>)
 8002dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e02:	f7fd fbd1 	bl	80005a8 <__aeabi_dmul>
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4620      	mov	r0, r4
 8002e0c:	4629      	mov	r1, r5
 8002e0e:	f7fd fa15 	bl	800023c <__adddf3>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4614      	mov	r4, r2
 8002e18:	461d      	mov	r5, r3
 8002e1a:	6838      	ldr	r0, [r7, #0]
 8002e1c:	f7fd fb6c 	bl	80004f8 <__aeabi_f2d>
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	4bc8      	ldr	r3, [pc, #800]	; (8003148 <uVtoDegreeCTypeK+0x3f0>)
 8002e26:	f00c f83d 	bl	800eea4 <pow>
 8002e2a:	a3a7      	add	r3, pc, #668	; (adr r3, 80030c8 <uVtoDegreeCTypeK+0x370>)
 8002e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e30:	f7fd fbba 	bl	80005a8 <__aeabi_dmul>
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	4620      	mov	r0, r4
 8002e3a:	4629      	mov	r1, r5
 8002e3c:	f7fd f9fe 	bl	800023c <__adddf3>
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	4614      	mov	r4, r2
 8002e46:	461d      	mov	r5, r3
 8002e48:	6838      	ldr	r0, [r7, #0]
 8002e4a:	f7fd fb55 	bl	80004f8 <__aeabi_f2d>
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	4bbe      	ldr	r3, [pc, #760]	; (800314c <uVtoDegreeCTypeK+0x3f4>)
 8002e54:	f00c f826 	bl	800eea4 <pow>
 8002e58:	a39d      	add	r3, pc, #628	; (adr r3, 80030d0 <uVtoDegreeCTypeK+0x378>)
 8002e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5e:	f7fd fba3 	bl	80005a8 <__aeabi_dmul>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4620      	mov	r0, r4
 8002e68:	4629      	mov	r1, r5
 8002e6a:	f7fd f9e7 	bl	800023c <__adddf3>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	4614      	mov	r4, r2
 8002e74:	461d      	mov	r5, r3
 8002e76:	6838      	ldr	r0, [r7, #0]
 8002e78:	f7fd fb3e 	bl	80004f8 <__aeabi_f2d>
 8002e7c:	f04f 0200 	mov.w	r2, #0
 8002e80:	4bb3      	ldr	r3, [pc, #716]	; (8003150 <uVtoDegreeCTypeK+0x3f8>)
 8002e82:	f00c f80f 	bl	800eea4 <pow>
 8002e86:	a394      	add	r3, pc, #592	; (adr r3, 80030d8 <uVtoDegreeCTypeK+0x380>)
 8002e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8c:	f7fd fb8c 	bl	80005a8 <__aeabi_dmul>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4620      	mov	r0, r4
 8002e96:	4629      	mov	r1, r5
 8002e98:	f7fd f9d0 	bl	800023c <__adddf3>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4614      	mov	r4, r2
 8002ea2:	461d      	mov	r5, r3
 8002ea4:	6838      	ldr	r0, [r7, #0]
 8002ea6:	f7fd fb27 	bl	80004f8 <__aeabi_f2d>
 8002eaa:	f04f 0200 	mov.w	r2, #0
 8002eae:	4ba9      	ldr	r3, [pc, #676]	; (8003154 <uVtoDegreeCTypeK+0x3fc>)
 8002eb0:	f00b fff8 	bl	800eea4 <pow>
 8002eb4:	a38a      	add	r3, pc, #552	; (adr r3, 80030e0 <uVtoDegreeCTypeK+0x388>)
 8002eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eba:	f7fd fb75 	bl	80005a8 <__aeabi_dmul>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	4620      	mov	r0, r4
 8002ec4:	4629      	mov	r1, r5
 8002ec6:	f7fd f9b9 	bl	800023c <__adddf3>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4614      	mov	r4, r2
 8002ed0:	461d      	mov	r5, r3
 8002ed2:	6838      	ldr	r0, [r7, #0]
 8002ed4:	f7fd fb10 	bl	80004f8 <__aeabi_f2d>
 8002ed8:	f04f 0200 	mov.w	r2, #0
 8002edc:	4b9e      	ldr	r3, [pc, #632]	; (8003158 <uVtoDegreeCTypeK+0x400>)
 8002ede:	f00b ffe1 	bl	800eea4 <pow>
 8002ee2:	a381      	add	r3, pc, #516	; (adr r3, 80030e8 <uVtoDegreeCTypeK+0x390>)
 8002ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee8:	f7fd fb5e 	bl	80005a8 <__aeabi_dmul>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	4629      	mov	r1, r5
 8002ef4:	f7fd f9a2 	bl	800023c <__adddf3>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4614      	mov	r4, r2
 8002efe:	461d      	mov	r5, r3
 8002f00:	6838      	ldr	r0, [r7, #0]
 8002f02:	f7fd faf9 	bl	80004f8 <__aeabi_f2d>
 8002f06:	a37a      	add	r3, pc, #488	; (adr r3, 80030f0 <uVtoDegreeCTypeK+0x398>)
 8002f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0c:	f7fd f994 	bl	8000238 <__aeabi_dsub>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4610      	mov	r0, r2
 8002f16:	4619      	mov	r1, r3
 8002f18:	a377      	add	r3, pc, #476	; (adr r3, 80030f8 <uVtoDegreeCTypeK+0x3a0>)
 8002f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1e:	f7fd fb43 	bl	80005a8 <__aeabi_dmul>
 8002f22:	4602      	mov	r2, r0
 8002f24:	460b      	mov	r3, r1
 8002f26:	4690      	mov	r8, r2
 8002f28:	4699      	mov	r9, r3
 8002f2a:	6838      	ldr	r0, [r7, #0]
 8002f2c:	f7fd fae4 	bl	80004f8 <__aeabi_f2d>
 8002f30:	a36f      	add	r3, pc, #444	; (adr r3, 80030f0 <uVtoDegreeCTypeK+0x398>)
 8002f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f36:	f7fd f97f 	bl	8000238 <__aeabi_dsub>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4640      	mov	r0, r8
 8002f40:	4649      	mov	r1, r9
 8002f42:	f7fd fb31 	bl	80005a8 <__aeabi_dmul>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	a16d      	add	r1, pc, #436	; (adr r1, 8003100 <uVtoDegreeCTypeK+0x3a8>)
 8002f4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f50:	f00b ffa8 	bl	800eea4 <pow>
 8002f54:	a36c      	add	r3, pc, #432	; (adr r3, 8003108 <uVtoDegreeCTypeK+0x3b0>)
 8002f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5a:	f7fd fb25 	bl	80005a8 <__aeabi_dmul>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	460b      	mov	r3, r1
 8002f62:	4620      	mov	r0, r4
 8002f64:	4629      	mov	r1, r5
 8002f66:	f7fd f969 	bl	800023c <__adddf3>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double Vmeas = uVdata/1000; //value need to be in mV
 8002f72:	497a      	ldr	r1, [pc, #488]	; (800315c <uVtoDegreeCTypeK+0x404>)
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7fd fff9 	bl	8000f6c <__aeabi_fdiv>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fd fabb 	bl	80004f8 <__aeabi_f2d>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double totalV = Vmeas + Vref;
 8002f8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f92:	f7fd f953 	bl	800023c <__adddf3>
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	e9c7 2302 	strd	r2, r3, [r7, #8]

    double t90;
    if(totalV < 20.644)
 8002f9e:	a35c      	add	r3, pc, #368	; (adr r3, 8003110 <uVtoDegreeCTypeK+0x3b8>)
 8002fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fa8:	f7fd fd70 	bl	8000a8c <__aeabi_dcmplt>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 812a 	beq.w	8003208 <uVtoDegreeCTypeK+0x4b0>
    {
     t90 = T_COEF_D0_0_500 + T_COEF_D1_0_500 *totalV + T_COEF_D2_0_500 *pow(totalV,2) + T_COEF_D3_0_500 *pow(totalV,3) + T_COEF_D4_0_500 *pow(totalV,4) + T_COEF_D5_0_500 *pow(totalV,5) + T_COEF_D6_0_500 *pow(totalV,6) + T_COEF_D7_0_500 *pow(totalV,7) + T_COEF_D8_0_500 *pow(totalV,8) + T_COEF_D9_0_500 *pow(totalV,9);
 8002fb4:	a358      	add	r3, pc, #352	; (adr r3, 8003118 <uVtoDegreeCTypeK+0x3c0>)
 8002fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fbe:	f7fd faf3 	bl	80005a8 <__aeabi_dmul>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	4610      	mov	r0, r2
 8002fc8:	4619      	mov	r1, r3
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	f7fd f933 	bl	800023c <__adddf3>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4614      	mov	r4, r2
 8002fdc:	461d      	mov	r5, r3
 8002fde:	f04f 0200 	mov.w	r2, #0
 8002fe2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fe6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fea:	f00b ff5b 	bl	800eea4 <pow>
 8002fee:	a34c      	add	r3, pc, #304	; (adr r3, 8003120 <uVtoDegreeCTypeK+0x3c8>)
 8002ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff4:	f7fd fad8 	bl	80005a8 <__aeabi_dmul>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4620      	mov	r0, r4
 8002ffe:	4629      	mov	r1, r5
 8003000:	f7fd f91c 	bl	800023c <__adddf3>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	4614      	mov	r4, r2
 800300a:	461d      	mov	r5, r3
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	4b4b      	ldr	r3, [pc, #300]	; (8003140 <uVtoDegreeCTypeK+0x3e8>)
 8003012:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003016:	f00b ff45 	bl	800eea4 <pow>
 800301a:	a343      	add	r3, pc, #268	; (adr r3, 8003128 <uVtoDegreeCTypeK+0x3d0>)
 800301c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003020:	f7fd fac2 	bl	80005a8 <__aeabi_dmul>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4620      	mov	r0, r4
 800302a:	4629      	mov	r1, r5
 800302c:	f7fd f906 	bl	800023c <__adddf3>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4614      	mov	r4, r2
 8003036:	461d      	mov	r5, r3
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	4b41      	ldr	r3, [pc, #260]	; (8003144 <uVtoDegreeCTypeK+0x3ec>)
 800303e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003042:	f00b ff2f 	bl	800eea4 <pow>
 8003046:	a33a      	add	r3, pc, #232	; (adr r3, 8003130 <uVtoDegreeCTypeK+0x3d8>)
 8003048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304c:	f7fd faac 	bl	80005a8 <__aeabi_dmul>
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	4620      	mov	r0, r4
 8003056:	4629      	mov	r1, r5
 8003058:	f7fd f8f0 	bl	800023c <__adddf3>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4614      	mov	r4, r2
 8003062:	461d      	mov	r5, r3
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	4b37      	ldr	r3, [pc, #220]	; (8003148 <uVtoDegreeCTypeK+0x3f0>)
 800306a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800306e:	f00b ff19 	bl	800eea4 <pow>
 8003072:	a331      	add	r3, pc, #196	; (adr r3, 8003138 <uVtoDegreeCTypeK+0x3e0>)
 8003074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003078:	f7fd fa96 	bl	80005a8 <__aeabi_dmul>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4620      	mov	r0, r4
 8003082:	4629      	mov	r1, r5
 8003084:	f7fd f8da 	bl	800023c <__adddf3>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	4614      	mov	r4, r2
 800308e:	461d      	mov	r5, r3
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	4b2d      	ldr	r3, [pc, #180]	; (800314c <uVtoDegreeCTypeK+0x3f4>)
 8003096:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800309a:	e061      	b.n	8003160 <uVtoDegreeCTypeK+0x408>
 800309c:	f3af 8000 	nop.w
 80030a0:	ecfa2196 	.word	0xecfa2196
 80030a4:	3fa3ed7a 	.word	0x3fa3ed7a
 80030a8:	c4b5b30b 	.word	0xc4b5b30b
 80030ac:	3f9205d7 	.word	0x3f9205d7
 80030b0:	f72891e7 	.word	0xf72891e7
 80030b4:	3ef375d4 	.word	0x3ef375d4
 80030b8:	7a34de08 	.word	0x7a34de08
 80030bc:	be7ab2ac 	.word	0xbe7ab2ac
 80030c0:	b676ec5f 	.word	0xb676ec5f
 80030c4:	3df5e184 	.word	0x3df5e184
 80030c8:	c620f2a8 	.word	0xc620f2a8
 80030cc:	bd63ba97 	.word	0xbd63ba97
 80030d0:	e5aa091d 	.word	0xe5aa091d
 80030d4:	3cc43402 	.word	0x3cc43402
 80030d8:	01c8db89 	.word	0x01c8db89
 80030dc:	bc17a08b 	.word	0xbc17a08b
 80030e0:	b8001899 	.word	0xb8001899
 80030e4:	3b5d5cb4 	.word	0x3b5d5cb4
 80030e8:	51ff39ec 	.word	0x51ff39ec
 80030ec:	ba8df847 	.word	0xba8df847
 80030f0:	8adab9f5 	.word	0x8adab9f5
 80030f4:	405fbdfd 	.word	0x405fbdfd
 80030f8:	b1df7541 	.word	0xb1df7541
 80030fc:	bf1f05e0 	.word	0xbf1f05e0
 8003100:	8b04919b 	.word	0x8b04919b
 8003104:	4005bf0a 	.word	0x4005bf0a
 8003108:	8d6253b2 	.word	0x8d6253b2
 800310c:	3fbe5c69 	.word	0x3fbe5c69
 8003110:	2f1a9fbe 	.word	0x2f1a9fbe
 8003114:	4034a4dd 	.word	0x4034a4dd
 8003118:	886594af 	.word	0x886594af
 800311c:	40391563 	.word	0x40391563
 8003120:	f62184e0 	.word	0xf62184e0
 8003124:	3fb41f32 	.word	0x3fb41f32
 8003128:	3c90aa07 	.word	0x3c90aa07
 800312c:	bfd00521 	.word	0xbfd00521
 8003130:	cf12f82a 	.word	0xcf12f82a
 8003134:	3fb5497e 	.word	0x3fb5497e
 8003138:	55785780 	.word	0x55785780
 800313c:	bf89266f 	.word	0xbf89266f
 8003140:	40080000 	.word	0x40080000
 8003144:	40100000 	.word	0x40100000
 8003148:	40140000 	.word	0x40140000
 800314c:	40180000 	.word	0x40180000
 8003150:	401c0000 	.word	0x401c0000
 8003154:	40200000 	.word	0x40200000
 8003158:	40220000 	.word	0x40220000
 800315c:	447a0000 	.word	0x447a0000
 8003160:	f00b fea0 	bl	800eea4 <pow>
 8003164:	a370      	add	r3, pc, #448	; (adr r3, 8003328 <uVtoDegreeCTypeK+0x5d0>)
 8003166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316a:	f7fd fa1d 	bl	80005a8 <__aeabi_dmul>
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	4620      	mov	r0, r4
 8003174:	4629      	mov	r1, r5
 8003176:	f7fd f861 	bl	800023c <__adddf3>
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	4614      	mov	r4, r2
 8003180:	461d      	mov	r5, r3
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	4b7e      	ldr	r3, [pc, #504]	; (8003380 <uVtoDegreeCTypeK+0x628>)
 8003188:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800318c:	f00b fe8a 	bl	800eea4 <pow>
 8003190:	a367      	add	r3, pc, #412	; (adr r3, 8003330 <uVtoDegreeCTypeK+0x5d8>)
 8003192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003196:	f7fd fa07 	bl	80005a8 <__aeabi_dmul>
 800319a:	4602      	mov	r2, r0
 800319c:	460b      	mov	r3, r1
 800319e:	4620      	mov	r0, r4
 80031a0:	4629      	mov	r1, r5
 80031a2:	f7fd f84b 	bl	800023c <__adddf3>
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	4614      	mov	r4, r2
 80031ac:	461d      	mov	r5, r3
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	4b74      	ldr	r3, [pc, #464]	; (8003384 <uVtoDegreeCTypeK+0x62c>)
 80031b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031b8:	f00b fe74 	bl	800eea4 <pow>
 80031bc:	a35e      	add	r3, pc, #376	; (adr r3, 8003338 <uVtoDegreeCTypeK+0x5e0>)
 80031be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c2:	f7fd f9f1 	bl	80005a8 <__aeabi_dmul>
 80031c6:	4602      	mov	r2, r0
 80031c8:	460b      	mov	r3, r1
 80031ca:	4620      	mov	r0, r4
 80031cc:	4629      	mov	r1, r5
 80031ce:	f7fd f835 	bl	800023c <__adddf3>
 80031d2:	4602      	mov	r2, r0
 80031d4:	460b      	mov	r3, r1
 80031d6:	4614      	mov	r4, r2
 80031d8:	461d      	mov	r5, r3
 80031da:	f04f 0200 	mov.w	r2, #0
 80031de:	4b6a      	ldr	r3, [pc, #424]	; (8003388 <uVtoDegreeCTypeK+0x630>)
 80031e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031e4:	f00b fe5e 	bl	800eea4 <pow>
 80031e8:	a355      	add	r3, pc, #340	; (adr r3, 8003340 <uVtoDegreeCTypeK+0x5e8>)
 80031ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ee:	f7fd f9db 	bl	80005a8 <__aeabi_dmul>
 80031f2:	4602      	mov	r2, r0
 80031f4:	460b      	mov	r3, r1
 80031f6:	4620      	mov	r0, r4
 80031f8:	4629      	mov	r1, r5
 80031fa:	f7fd f81f 	bl	800023c <__adddf3>
 80031fe:	4602      	mov	r2, r0
 8003200:	460b      	mov	r3, r1
 8003202:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8003206:	e082      	b.n	800330e <uVtoDegreeCTypeK+0x5b6>
    }
    else
    {
	    t90 = T_COEF_D0_500_1372 + T_COEF_D1_500_1372 *totalV + T_COEF_D2_500_1372 *pow(totalV,2) + T_COEF_D3_500_1372 *pow(totalV,3) + T_COEF_D4_500_1372 *pow(totalV,4) + T_COEF_D5_500_1372 *pow(totalV,5) + T_COEF_D6_500_1372 *pow(totalV,6);
 8003208:	a34f      	add	r3, pc, #316	; (adr r3, 8003348 <uVtoDegreeCTypeK+0x5f0>)
 800320a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003212:	f7fd f9c9 	bl	80005a8 <__aeabi_dmul>
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	4610      	mov	r0, r2
 800321c:	4619      	mov	r1, r3
 800321e:	a34c      	add	r3, pc, #304	; (adr r3, 8003350 <uVtoDegreeCTypeK+0x5f8>)
 8003220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003224:	f7fd f808 	bl	8000238 <__aeabi_dsub>
 8003228:	4602      	mov	r2, r0
 800322a:	460b      	mov	r3, r1
 800322c:	4614      	mov	r4, r2
 800322e:	461d      	mov	r5, r3
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003238:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800323c:	f00b fe32 	bl	800eea4 <pow>
 8003240:	a345      	add	r3, pc, #276	; (adr r3, 8003358 <uVtoDegreeCTypeK+0x600>)
 8003242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003246:	f7fd f9af 	bl	80005a8 <__aeabi_dmul>
 800324a:	4602      	mov	r2, r0
 800324c:	460b      	mov	r3, r1
 800324e:	4620      	mov	r0, r4
 8003250:	4629      	mov	r1, r5
 8003252:	f7fc fff3 	bl	800023c <__adddf3>
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	4614      	mov	r4, r2
 800325c:	461d      	mov	r5, r3
 800325e:	f04f 0200 	mov.w	r2, #0
 8003262:	4b4a      	ldr	r3, [pc, #296]	; (800338c <uVtoDegreeCTypeK+0x634>)
 8003264:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003268:	f00b fe1c 	bl	800eea4 <pow>
 800326c:	a33c      	add	r3, pc, #240	; (adr r3, 8003360 <uVtoDegreeCTypeK+0x608>)
 800326e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003272:	f7fd f999 	bl	80005a8 <__aeabi_dmul>
 8003276:	4602      	mov	r2, r0
 8003278:	460b      	mov	r3, r1
 800327a:	4620      	mov	r0, r4
 800327c:	4629      	mov	r1, r5
 800327e:	f7fc ffdd 	bl	800023c <__adddf3>
 8003282:	4602      	mov	r2, r0
 8003284:	460b      	mov	r3, r1
 8003286:	4614      	mov	r4, r2
 8003288:	461d      	mov	r5, r3
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	4b40      	ldr	r3, [pc, #256]	; (8003390 <uVtoDegreeCTypeK+0x638>)
 8003290:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003294:	f00b fe06 	bl	800eea4 <pow>
 8003298:	a333      	add	r3, pc, #204	; (adr r3, 8003368 <uVtoDegreeCTypeK+0x610>)
 800329a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329e:	f7fd f983 	bl	80005a8 <__aeabi_dmul>
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	4620      	mov	r0, r4
 80032a8:	4629      	mov	r1, r5
 80032aa:	f7fc ffc7 	bl	800023c <__adddf3>
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	4614      	mov	r4, r2
 80032b4:	461d      	mov	r5, r3
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	4b36      	ldr	r3, [pc, #216]	; (8003394 <uVtoDegreeCTypeK+0x63c>)
 80032bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032c0:	f00b fdf0 	bl	800eea4 <pow>
 80032c4:	a32a      	add	r3, pc, #168	; (adr r3, 8003370 <uVtoDegreeCTypeK+0x618>)
 80032c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ca:	f7fd f96d 	bl	80005a8 <__aeabi_dmul>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	4620      	mov	r0, r4
 80032d4:	4629      	mov	r1, r5
 80032d6:	f7fc ffb1 	bl	800023c <__adddf3>
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	4614      	mov	r4, r2
 80032e0:	461d      	mov	r5, r3
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	4b2c      	ldr	r3, [pc, #176]	; (8003398 <uVtoDegreeCTypeK+0x640>)
 80032e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032ec:	f00b fdda 	bl	800eea4 <pow>
 80032f0:	a321      	add	r3, pc, #132	; (adr r3, 8003378 <uVtoDegreeCTypeK+0x620>)
 80032f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f6:	f7fd f957 	bl	80005a8 <__aeabi_dmul>
 80032fa:	4602      	mov	r2, r0
 80032fc:	460b      	mov	r3, r1
 80032fe:	4620      	mov	r0, r4
 8003300:	4629      	mov	r1, r5
 8003302:	f7fc ff9b 	bl	800023c <__adddf3>
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
 800330a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }

    return (float)t90;
 800330e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003312:	f7fd fc19 	bl	8000b48 <__aeabi_d2f>
 8003316:	4603      	mov	r3, r0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3728      	adds	r7, #40	; 0x28
 800331c:	46bd      	mov	sp, r7
 800331e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003322:	bf00      	nop
 8003324:	f3af 8000 	nop.w
 8003328:	598742c5 	.word	0x598742c5
 800332c:	3f50101c 	.word	0x3f50101c
 8003330:	8fe5dfc5 	.word	0x8fe5dfc5
 8003334:	bf072311 	.word	0xbf072311
 8003338:	d5041d19 	.word	0xd5041d19
 800333c:	3eb1beee 	.word	0x3eb1beee
 8003340:	f20e972b 	.word	0xf20e972b
 8003344:	be469b94 	.word	0xbe469b94
 8003348:	251c193b 	.word	0x251c193b
 800334c:	404826af 	.word	0x404826af
 8003350:	1d14e3bd 	.word	0x1d14e3bd
 8003354:	406079c9 	.word	0x406079c9
 8003358:	7dffe020 	.word	0x7dffe020
 800335c:	bffa587c 	.word	0xbffa587c
 8003360:	72875bff 	.word	0x72875bff
 8003364:	3fabfabb 	.word	0x3fabfabb
 8003368:	43f14f16 	.word	0x43f14f16
 800336c:	bf4f9f9b 	.word	0xbf4f9f9b
 8003370:	31b5afb6 	.word	0x31b5afb6
 8003374:	3ee275a4 	.word	0x3ee275a4
 8003378:	f722eba7 	.word	0xf722eba7
 800337c:	be60b376 	.word	0xbe60b376
 8003380:	401c0000 	.word	0x401c0000
 8003384:	40200000 	.word	0x40200000
 8003388:	40220000 	.word	0x40220000
 800338c:	40080000 	.word	0x40080000
 8003390:	40100000 	.word	0x40100000
 8003394:	40140000 	.word	0x40140000
 8003398:	40180000 	.word	0x40180000
 800339c:	00000000 	.word	0x00000000

080033a0 <VtoDegreeCRtd>:
float VtoDegreeCRtd(float Vdata)
{
 80033a0:	b5b0      	push	{r4, r5, r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
	//using a y = 366.02x^2 -942.3x +561.55 where x is the ADC voltage and y is the temperature in C
	return (Vdata*Vdata)*366.02 - 942.3*Vdata + 561.55;
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7fd fd2a 	bl	8000e04 <__aeabi_fmul>
 80033b0:	4603      	mov	r3, r0
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fd f8a0 	bl	80004f8 <__aeabi_f2d>
 80033b8:	a315      	add	r3, pc, #84	; (adr r3, 8003410 <VtoDegreeCRtd+0x70>)
 80033ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033be:	f7fd f8f3 	bl	80005a8 <__aeabi_dmul>
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	4614      	mov	r4, r2
 80033c8:	461d      	mov	r5, r3
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7fd f894 	bl	80004f8 <__aeabi_f2d>
 80033d0:	a311      	add	r3, pc, #68	; (adr r3, 8003418 <VtoDegreeCRtd+0x78>)
 80033d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d6:	f7fd f8e7 	bl	80005a8 <__aeabi_dmul>
 80033da:	4602      	mov	r2, r0
 80033dc:	460b      	mov	r3, r1
 80033de:	4620      	mov	r0, r4
 80033e0:	4629      	mov	r1, r5
 80033e2:	f7fc ff29 	bl	8000238 <__aeabi_dsub>
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	4610      	mov	r0, r2
 80033ec:	4619      	mov	r1, r3
 80033ee:	a30c      	add	r3, pc, #48	; (adr r3, 8003420 <VtoDegreeCRtd+0x80>)
 80033f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f4:	f7fc ff22 	bl	800023c <__adddf3>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4610      	mov	r0, r2
 80033fe:	4619      	mov	r1, r3
 8003400:	f7fd fba2 	bl	8000b48 <__aeabi_d2f>
 8003404:	4603      	mov	r3, r0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bdb0      	pop	{r4, r5, r7, pc}
 800340e:	bf00      	nop
 8003410:	eb851eb8 	.word	0xeb851eb8
 8003414:	4076e051 	.word	0x4076e051
 8003418:	66666666 	.word	0x66666666
 800341c:	408d7266 	.word	0x408d7266
 8003420:	66666666 	.word	0x66666666
 8003424:	40818c66 	.word	0x40818c66

08003428 <AirInput_forceAperture>:
#include "air_input.h"

#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))

void AirInput_forceAperture( AirInput * self, int aperture) {
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  aperture = constrain(aperture, self->minValue, self->maxValue); //TODO: MIN_VALEUR IS NOT ZERO FOR THE PRIMARY
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	429a      	cmp	r2, r3
 800343a:	da02      	bge.n	8003442 <AirInput_forceAperture+0x1a>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	e005      	b.n	800344e <AirInput_forceAperture+0x26>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691a      	ldr	r2, [r3, #16]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	4293      	cmp	r3, r2
 800344a:	bfa8      	it	ge
 800344c:	4613      	movge	r3, r2
 800344e:	603b      	str	r3, [r7, #0]
  self->aperture = aperture;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	601a      	str	r2, [r3, #0]
  self->setPoint = aperture;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	605a      	str	r2, [r3, #4]
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	bc80      	pop	{r7}
 8003464:	4770      	bx	lr

08003466 <AirInput_getAperture>:


int AirInput_getAperture( AirInput * self) {
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  return self->aperture;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
}
 8003472:	4618      	mov	r0, r3
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr

0800347c <AirInput_InPosition>:
bool AirInput_InPosition( AirInput * self)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
	return self->aperture == self->setPoint;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	429a      	cmp	r2, r3
 800348e:	bf0c      	ite	eq
 8003490:	2301      	moveq	r3, #1
 8003492:	2300      	movne	r3, #0
 8003494:	b2db      	uxtb	r3, r3
}
 8003496:	4618      	mov	r0, r3
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr

080034a0 <AirInput_setAjustement>:
  self->setPoint = setPoint;
  self->secPerStep = secPerStep;
}


void AirInput_setAjustement( AirInput * self, int adjustement, uint32_t secPerStep) {
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  self->setPoint += adjustement;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	441a      	add	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	605a      	str	r2, [r3, #4]
  self->setPoint = constrain(self->setPoint, self->minValue, self->maxValue);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	da02      	bge.n	80034ca <AirInput_setAjustement+0x2a>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	e006      	b.n	80034d8 <AirInput_setAjustement+0x38>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	4293      	cmp	r3, r2
 80034d4:	bfa8      	it	ge
 80034d6:	4613      	movge	r3, r2
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	6053      	str	r3, [r2, #4]
  self->secPerStep = secPerStep;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	609a      	str	r2, [r3, #8]
}
 80034e2:	bf00      	nop
 80034e4:	3714      	adds	r7, #20
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bc80      	pop	{r7}
 80034ea:	4770      	bx	lr

080034ec <AirInput_task>:


void AirInput_task( AirInput * self, uint32_t currentTime_ms) {
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]

  if (self->aperture != self->setPoint) {
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d01f      	beq.n	8003542 <AirInput_task+0x56>
    if ((currentTime_ms - self->timeRefRampe) >= (self->secPerStep * 1000)) {
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	1ad2      	subs	r2, r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003512:	fb01 f303 	mul.w	r3, r1, r3
 8003516:	429a      	cmp	r2, r3
 8003518:	d313      	bcc.n	8003542 <AirInput_task+0x56>
      self->timeRefRampe = currentTime_ms;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	60da      	str	r2, [r3, #12]
      if (self->setPoint > self->aperture) {
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	429a      	cmp	r2, r3
 800352a:	dd05      	ble.n	8003538 <AirInput_task+0x4c>
        self->aperture++;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	601a      	str	r2, [r3, #0]
      } else {
        self->aperture--;
      }
    }
  }
}
 8003536:	e004      	b.n	8003542 <AirInput_task+0x56>
        self->aperture--;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	1e5a      	subs	r2, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	601a      	str	r2, [r3, #0]
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr

0800354c <Algo_init>:
void AirAdjustment(int adjustement, const uint32_t secondPerStep,
		const uint8_t MinPrimary, const uint8_t MaxPrimary,
		const uint8_t MinGrill, const uint8_t MaxGrill,
		const uint8_t MinSecondary, const uint8_t MaxSecondary);

void Algo_init() {
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0

  if(GPIO_PIN_SET==HAL_GPIO_ReadPin(Button_Input_GPIO_Port,Button_Input_Pin))
 8003550:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003554:	4819      	ldr	r0, [pc, #100]	; (80035bc <Algo_init+0x70>)
 8003556:	f002 fc87 	bl	8005e68 <HAL_GPIO_ReadPin>
 800355a:	4603      	mov	r3, r0
 800355c:	2b01      	cmp	r3, #1
 800355e:	d103      	bne.n	8003568 <Algo_init+0x1c>
  {
	  currentState = PRODUCTION_TEST;
 8003560:	4b17      	ldr	r3, [pc, #92]	; (80035c0 <Algo_init+0x74>)
 8003562:	220c      	movs	r2, #12
 8003564:	701a      	strb	r2, [r3, #0]
 8003566:	e002      	b.n	800356e <Algo_init+0x22>
  }
  else
  {
	  currentState = ZEROING_STEPPER;
 8003568:	4b15      	ldr	r3, [pc, #84]	; (80035c0 <Algo_init+0x74>)
 800356a:	2200      	movs	r2, #0
 800356c:	701a      	strb	r2, [r3, #0]
  }

  reloadingEvent = false;
 800356e:	4b15      	ldr	r3, [pc, #84]	; (80035c4 <Algo_init+0x78>)
 8003570:	2200      	movs	r2, #0
 8003572:	701a      	strb	r2, [r3, #0]
  AirInput_forceAperture(&primary, PRIMARY_CLOSED);
 8003574:	210d      	movs	r1, #13
 8003576:	4814      	ldr	r0, [pc, #80]	; (80035c8 <Algo_init+0x7c>)
 8003578:	f7ff ff56 	bl	8003428 <AirInput_forceAperture>
  AirInput_forceAperture(&grill, GRILL_CLOSED);
 800357c:	2100      	movs	r1, #0
 800357e:	4813      	ldr	r0, [pc, #76]	; (80035cc <Algo_init+0x80>)
 8003580:	f7ff ff52 	bl	8003428 <AirInput_forceAperture>
  AirInput_forceAperture(&secondary, SECONDARY_CLOSED);
 8003584:	210d      	movs	r1, #13
 8003586:	4812      	ldr	r0, [pc, #72]	; (80035d0 <Algo_init+0x84>)
 8003588:	f7ff ff4e 	bl	8003428 <AirInput_forceAperture>
  baffleTemperature = 0;
 800358c:	4b11      	ldr	r3, [pc, #68]	; (80035d4 <Algo_init+0x88>)
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
  rearTemperature = 0;
 8003592:	4b11      	ldr	r3, [pc, #68]	; (80035d8 <Algo_init+0x8c>)
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
  thermostatRequest = false;
 8003598:	4b10      	ldr	r3, [pc, #64]	; (80035dc <Algo_init+0x90>)
 800359a:	2200      	movs	r2, #0
 800359c:	701a      	strb	r2, [r3, #0]
  delLoadingEnd = ALGO_DEL_OFF;
 800359e:	4b10      	ldr	r3, [pc, #64]	; (80035e0 <Algo_init+0x94>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	701a      	strb	r2, [r3, #0]
  delFermeturePorte = ALGO_DEL_OFF;
 80035a4:	4b0f      	ldr	r3, [pc, #60]	; (80035e4 <Algo_init+0x98>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	701a      	strb	r2, [r3, #0]
  Slope_init(&slopeBaffleTemp, frontTempDataStore, NB_DATA, SAMPLING_RATE);
 80035aa:	4b0f      	ldr	r3, [pc, #60]	; (80035e8 <Algo_init+0x9c>)
 80035ac:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035b0:	490e      	ldr	r1, [pc, #56]	; (80035ec <Algo_init+0xa0>)
 80035b2:	480f      	ldr	r0, [pc, #60]	; (80035f0 <Algo_init+0xa4>)
 80035b4:	f001 fb2e 	bl	8004c14 <Slope_init>
}
 80035b8:	bf00      	nop
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40010c00 	.word	0x40010c00
 80035c0:	20000148 	.word	0x20000148
 80035c4:	20000149 	.word	0x20000149
 80035c8:	20000004 	.word	0x20000004
 80035cc:	2000001c 	.word	0x2000001c
 80035d0:	20000034 	.word	0x20000034
 80035d4:	20000150 	.word	0x20000150
 80035d8:	20000154 	.word	0x20000154
 80035dc:	2000015c 	.word	0x2000015c
 80035e0:	2000014b 	.word	0x2000014b
 80035e4:	2000014c 	.word	0x2000014c
 80035e8:	3e4ccccd 	.word	0x3e4ccccd
 80035ec:	20000160 	.word	0x20000160
 80035f0:	20000614 	.word	0x20000614

080035f4 <manageStateMachine>:

static void manageStateMachine(uint32_t currentTime_ms) {
 80035f4:	b5b0      	push	{r4, r5, r7, lr}
 80035f6:	b092      	sub	sp, #72	; 0x48
 80035f8:	af04      	add	r7, sp, #16
 80035fa:	6078      	str	r0, [r7, #4]

	  State nextState = currentState;
 80035fc:	4bb2      	ldr	r3, [pc, #712]	; (80038c8 <manageStateMachine+0x2d4>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  static uint32_t timeRefAutoMode = 0;
	  static int targetTemperature = 0;
	  static uint32_t Safetydebounce_ms = 0;

	  //pour palier au fait qu'on applique des 1/2 pas, nous divisons les valeurs de NOVIKA 2019-12-04
	  const uint32_t SEC_PER_STEP_TEMP_RISE = 6;
 8003604:	2306      	movs	r3, #6
 8003606:	62fb      	str	r3, [r7, #44]	; 0x2c
	  const uint32_t SEC_PER_STEP_COMB_LOW = 3;
 8003608:	2303      	movs	r3, #3
 800360a:	62bb      	str	r3, [r7, #40]	; 0x28
	  const uint32_t SEC_PER_STEP_COMB_HIGH = 6;
 800360c:	2306      	movs	r3, #6
 800360e:	627b      	str	r3, [r7, #36]	; 0x24
	  const uint32_t SEC_PER_STEP_COAL_HIGH = 6;
 8003610:	2306      	movs	r3, #6
 8003612:	623b      	str	r3, [r7, #32]


	  //calculate time used in the state transition.
	  timeSinceStateEntry = currentTime_ms - stateChangeTimeRef;
 8003614:	4bad      	ldr	r3, [pc, #692]	; (80038cc <manageStateMachine+0x2d8>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	4aac      	ldr	r2, [pc, #688]	; (80038d0 <manageStateMachine+0x2dc>)
 800361e:	6013      	str	r3, [r2, #0]
	  uint32_t timeInTemperatureRise = 0;
 8003620:	2300      	movs	r3, #0
 8003622:	61fb      	str	r3, [r7, #28]
#if PID_CONTROL_ON
	  static uint32_t Pidtimeref = 0;
	  uint32_t TimeSinceLastPIDUpdate = currentTime_ms - Pidtimeref;
#endif
	  uint32_t TimeForStep = currentTime_ms - timeRefAutoMode;
 8003624:	4bab      	ldr	r3, [pc, #684]	; (80038d4 <manageStateMachine+0x2e0>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	61bb      	str	r3, [r7, #24]

	  // TODO: la periode utilisée pour le calcule de la pente n'est pas définie
  //       dans le document
  dTavant = computeSlopeBaffleTemp(2); //�tait 300, selon ce que Novika utilise test du 2019-12-04.
 800362e:	2002      	movs	r0, #2
 8003630:	f000 fcd6 	bl	8003fe0 <computeSlopeBaffleTemp>
 8003634:	6178      	str	r0, [r7, #20]
  	  	  	  	  	  	  	  	  	  // la d�riv� risque d'�tre sketch, une mesure de temp�rature /5 secondes si on
  int deltaTemperature = 0;
 8003636:	2300      	movs	r3, #0
 8003638:	613b      	str	r3, [r7, #16]
  /* Perform state's actions. */
  switch (currentState) {
 800363a:	4ba3      	ldr	r3, [pc, #652]	; (80038c8 <manageStateMachine+0x2d4>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	3b01      	subs	r3, #1
 8003640:	2b0b      	cmp	r3, #11
 8003642:	d81b      	bhi.n	800367c <manageStateMachine+0x88>
 8003644:	a201      	add	r2, pc, #4	; (adr r2, 800364c <manageStateMachine+0x58>)
 8003646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364a:	bf00      	nop
 800364c:	080036df 	.word	0x080036df
 8003650:	0800378d 	.word	0x0800378d
 8003654:	080037f9 	.word	0x080037f9
 8003658:	08003a4d 	.word	0x08003a4d
 800365c:	0800367d 	.word	0x0800367d
 8003660:	0800395f 	.word	0x0800395f
 8003664:	08003c2d 	.word	0x08003c2d
 8003668:	08003c63 	.word	0x08003c63
 800366c:	08003cd1 	.word	0x08003cd1
 8003670:	08003d9b 	.word	0x08003d9b
 8003674:	08003d9b 	.word	0x08003d9b
 8003678:	08003df7 	.word	0x08003df7

    default:
    case ZEROING_STEPPER:
		AirInput_forceAperture(&primary, PrimaryMotorParam.MinWaiting);
 800367c:	230d      	movs	r3, #13
 800367e:	4619      	mov	r1, r3
 8003680:	4895      	ldr	r0, [pc, #596]	; (80038d8 <manageStateMachine+0x2e4>)
 8003682:	f7ff fed1 	bl	8003428 <AirInput_forceAperture>
		AirInput_forceAperture(&grill, GrillMotorParam.MinWaiting);
 8003686:	2300      	movs	r3, #0
 8003688:	4619      	mov	r1, r3
 800368a:	4894      	ldr	r0, [pc, #592]	; (80038dc <manageStateMachine+0x2e8>)
 800368c:	f7ff fecc 	bl	8003428 <AirInput_forceAperture>
		AirInput_forceAperture(&secondary, SecondaryMotorParam.MinWaiting);
 8003690:	230d      	movs	r3, #13
 8003692:	4619      	mov	r1, r3
 8003694:	4892      	ldr	r0, [pc, #584]	; (80038e0 <manageStateMachine+0x2ec>)
 8003696:	f7ff fec7 	bl	8003428 <AirInput_forceAperture>
		AllMotorToZero(); //set all motors to zero
 800369a:	f7fe fe41 	bl	8002320 <AllMotorToZero>
		while(!AirInput_InPosition(&grill) || !AirInput_InPosition(&primary) || !AirInput_InPosition(&secondary))
 800369e:	bf00      	nop
 80036a0:	488e      	ldr	r0, [pc, #568]	; (80038dc <manageStateMachine+0x2e8>)
 80036a2:	f7ff feeb 	bl	800347c <AirInput_InPosition>
 80036a6:	4603      	mov	r3, r0
 80036a8:	f083 0301 	eor.w	r3, r3, #1
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f6      	bne.n	80036a0 <manageStateMachine+0xac>
 80036b2:	4889      	ldr	r0, [pc, #548]	; (80038d8 <manageStateMachine+0x2e4>)
 80036b4:	f7ff fee2 	bl	800347c <AirInput_InPosition>
 80036b8:	4603      	mov	r3, r0
 80036ba:	f083 0301 	eor.w	r3, r3, #1
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1ed      	bne.n	80036a0 <manageStateMachine+0xac>
 80036c4:	4886      	ldr	r0, [pc, #536]	; (80038e0 <manageStateMachine+0x2ec>)
 80036c6:	f7ff fed9 	bl	800347c <AirInput_InPosition>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f083 0301 	eor.w	r3, r3, #1
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1e4      	bne.n	80036a0 <manageStateMachine+0xac>
		{
		};
		nextState = WAITING;
 80036d6:	2301      	movs	r3, #1
 80036d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		break;
 80036dc:	e3a3      	b.n	8003e26 <manageStateMachine+0x832>
    case WAITING:

    	AirInput_forceAperture(&primary, PrimaryMotorParam.MaxWaiting);// PRIMARY_CLOSED_SECONDARY_FULL_OPEN);
 80036de:	230d      	movs	r3, #13
 80036e0:	4619      	mov	r1, r3
 80036e2:	487d      	ldr	r0, [pc, #500]	; (80038d8 <manageStateMachine+0x2e4>)
 80036e4:	f7ff fea0 	bl	8003428 <AirInput_forceAperture>
    	AirInput_forceAperture(&grill, GrillMotorParam.MaxWaiting);// GRILL_CLOSED);
 80036e8:	2300      	movs	r3, #0
 80036ea:	4619      	mov	r1, r3
 80036ec:	487b      	ldr	r0, [pc, #492]	; (80038dc <manageStateMachine+0x2e8>)
 80036ee:	f7ff fe9b 	bl	8003428 <AirInput_forceAperture>
    	AirInput_forceAperture(&secondary, SecondaryMotorParam.MaxWaiting);
 80036f2:	230d      	movs	r3, #13
 80036f4:	4619      	mov	r1, r3
 80036f6:	487a      	ldr	r0, [pc, #488]	; (80038e0 <manageStateMachine+0x2ec>)
 80036f8:	f7ff fe96 	bl	8003428 <AirInput_forceAperture>
    	delLoadingEnd = ALGO_DEL_OFF;
 80036fc:	4b79      	ldr	r3, [pc, #484]	; (80038e4 <manageStateMachine+0x2f0>)
 80036fe:	2200      	movs	r2, #0
 8003700:	701a      	strb	r2, [r3, #0]
    	delFermeturePorte = ALGO_DEL_OFF;
 8003702:	4b79      	ldr	r3, [pc, #484]	; (80038e8 <manageStateMachine+0x2f4>)
 8003704:	2200      	movs	r2, #0
 8003706:	701a      	strb	r2, [r3, #0]



		if(baffleTemperature > 8000 && rearTemperature > 7000 && (!Algo_getInterlockRequest()))
 8003708:	4b78      	ldr	r3, [pc, #480]	; (80038ec <manageStateMachine+0x2f8>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8003710:	dd14      	ble.n	800373c <manageStateMachine+0x148>
 8003712:	4b77      	ldr	r3, [pc, #476]	; (80038f0 <manageStateMachine+0x2fc>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f641 3258 	movw	r2, #7000	; 0x1b58
 800371a:	4293      	cmp	r3, r2
 800371c:	dd0e      	ble.n	800373c <manageStateMachine+0x148>
 800371e:	f000 fd37 	bl	8004190 <Algo_getInterlockRequest>
 8003722:	4603      	mov	r3, r0
 8003724:	f083 0301 	eor.w	r3, r3, #1
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d006      	beq.n	800373c <manageStateMachine+0x148>
		{
		  nextState = TEMPERATURE_RISE; //the only way this can happen is if we lost power we don't want to go back in reload/temprise
 800372e:	2303      	movs	r3, #3
 8003730:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  reloadingEvent = false;
 8003734:	4b6f      	ldr	r3, [pc, #444]	; (80038f4 <manageStateMachine+0x300>)
 8003736:	2200      	movs	r2, #0
 8003738:	701a      	strb	r2, [r3, #0]
		  nextState = RELOAD_IGNITION;
		  reloadingEvent = false;
		  initPID(&TemperaturePID,Ki,Kd,Kp,20,-20); // pas utilisé
		}

		break;
 800373a:	e363      	b.n	8003e04 <manageStateMachine+0x810>
		else if ((baffleTemperature > TemperatureParam.WaitingToIgnition || reloadingEvent) && (!Algo_getInterlockRequest()) ) { //at 95F, someone is starting a fire
 800373c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003740:	461a      	mov	r2, r3
 8003742:	4b6a      	ldr	r3, [pc, #424]	; (80038ec <manageStateMachine+0x2f8>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	db04      	blt.n	8003754 <manageStateMachine+0x160>
 800374a:	4b6a      	ldr	r3, [pc, #424]	; (80038f4 <manageStateMachine+0x300>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 8358 	beq.w	8003e04 <manageStateMachine+0x810>
 8003754:	f000 fd1c 	bl	8004190 <Algo_getInterlockRequest>
 8003758:	4603      	mov	r3, r0
 800375a:	f083 0301 	eor.w	r3, r3, #1
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 834f 	beq.w	8003e04 <manageStateMachine+0x810>
		  nextState = RELOAD_IGNITION;
 8003766:	2302      	movs	r3, #2
 8003768:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  reloadingEvent = false;
 800376c:	4b61      	ldr	r3, [pc, #388]	; (80038f4 <manageStateMachine+0x300>)
 800376e:	2200      	movs	r2, #0
 8003770:	701a      	strb	r2, [r3, #0]
		  initPID(&TemperaturePID,Ki,Kd,Kp,20,-20); // pas utilisé
 8003772:	f06f 0313 	mvn.w	r3, #19
 8003776:	9301      	str	r3, [sp, #4]
 8003778:	2314      	movs	r3, #20
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	4b5e      	ldr	r3, [pc, #376]	; (80038f8 <manageStateMachine+0x304>)
 800377e:	4a5f      	ldr	r2, [pc, #380]	; (80038fc <manageStateMachine+0x308>)
 8003780:	f04f 0100 	mov.w	r1, #0
 8003784:	485e      	ldr	r0, [pc, #376]	; (8003900 <manageStateMachine+0x30c>)
 8003786:	f7ff f80d 	bl	80027a4 <initPID>
		break;
 800378a:	e33b      	b.n	8003e04 <manageStateMachine+0x810>

    case RELOAD_IGNITION:

		AirInput_forceAperture(&primary, PrimaryMotorParam.MaxReload);// PRIMARY_SECONDARY_FULL_OPEN);
 800378c:	23c8      	movs	r3, #200	; 0xc8
 800378e:	4619      	mov	r1, r3
 8003790:	4851      	ldr	r0, [pc, #324]	; (80038d8 <manageStateMachine+0x2e4>)
 8003792:	f7ff fe49 	bl	8003428 <AirInput_forceAperture>
		AirInput_forceAperture(&grill, GrillMotorParam.MaxReload);// 39); //2020-03-20 28 //2020-03-18 100
 8003796:	2327      	movs	r3, #39	; 0x27
 8003798:	4619      	mov	r1, r3
 800379a:	4850      	ldr	r0, [pc, #320]	; (80038dc <manageStateMachine+0x2e8>)
 800379c:	f7ff fe44 	bl	8003428 <AirInput_forceAperture>
		AirInput_forceAperture(&secondary, SecondaryMotorParam.MaxReload);
 80037a0:	23c8      	movs	r3, #200	; 0xc8
 80037a2:	4619      	mov	r1, r3
 80037a4:	484e      	ldr	r0, [pc, #312]	; (80038e0 <manageStateMachine+0x2ec>)
 80037a6:	f7ff fe3f 	bl	8003428 <AirInput_forceAperture>

		if (((baffleTemperature > TemperatureParam.IgnitionToTrise) && (timeSinceStateEntry >= MINUTES(1))) || (baffleTemperature > 10000)) {
 80037aa:	f241 4382 	movw	r3, #5250	; 0x1482
 80037ae:	461a      	mov	r2, r3
 80037b0:	4b4e      	ldr	r3, [pc, #312]	; (80038ec <manageStateMachine+0x2f8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	da05      	bge.n	80037c4 <manageStateMachine+0x1d0>
 80037b8:	4b45      	ldr	r3, [pc, #276]	; (80038d0 <manageStateMachine+0x2dc>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d805      	bhi.n	80037d0 <manageStateMachine+0x1dc>
 80037c4:	4b49      	ldr	r3, [pc, #292]	; (80038ec <manageStateMachine+0x2f8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f242 7210 	movw	r2, #10000	; 0x2710
 80037cc:	4293      	cmp	r3, r2
 80037ce:	dd09      	ble.n	80037e4 <manageStateMachine+0x1f0>
		nextState = TEMPERATURE_RISE;
 80037d0:	2303      	movs	r3, #3
 80037d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		reloadingEvent = false;
 80037d6:	4b47      	ldr	r3, [pc, #284]	; (80038f4 <manageStateMachine+0x300>)
 80037d8:	2200      	movs	r2, #0
 80037da:	701a      	strb	r2, [r3, #0]
		AirInput_forceAperture(&grill, GRILL_CLOSED);
 80037dc:	2100      	movs	r1, #0
 80037de:	483f      	ldr	r0, [pc, #252]	; (80038dc <manageStateMachine+0x2e8>)
 80037e0:	f7ff fe22 	bl	8003428 <AirInput_forceAperture>
		}
		if(timeSinceStateEntry >= MINUTES(20))
 80037e4:	4b3a      	ldr	r3, [pc, #232]	; (80038d0 <manageStateMachine+0x2dc>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a46      	ldr	r2, [pc, #280]	; (8003904 <manageStateMachine+0x310>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	f240 830c 	bls.w	8003e08 <manageStateMachine+0x814>
		{
		  //ignition fail or coal was hot enough to make us enter in Ignition we go back to WAITING
		  nextState = ZEROING_STEPPER;
 80037f0:	2300      	movs	r3, #0
 80037f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}
      break;
 80037f6:	e307      	b.n	8003e08 <manageStateMachine+0x814>

    case TEMPERATURE_RISE:

		targetTemperature = thermostatRequest ? TemperatureParam.TriseTargetHigh : TemperatureParam.TriseTargetLow;
 80037f8:	4b43      	ldr	r3, [pc, #268]	; (8003908 <manageStateMachine+0x314>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <manageStateMachine+0x214>
 8003800:	f641 3358 	movw	r3, #7000	; 0x1b58
 8003804:	461a      	mov	r2, r3
 8003806:	e002      	b.n	800380e <manageStateMachine+0x21a>
 8003808:	f241 6376 	movw	r3, #5750	; 0x1676
 800380c:	461a      	mov	r2, r3
 800380e:	4b3f      	ldr	r3, [pc, #252]	; (800390c <manageStateMachine+0x318>)
 8003810:	601a      	str	r2, [r3, #0]

		if(historyState != currentState){
 8003812:	4b3f      	ldr	r3, [pc, #252]	; (8003910 <manageStateMachine+0x31c>)
 8003814:	781a      	ldrb	r2, [r3, #0]
 8003816:	4b2c      	ldr	r3, [pc, #176]	; (80038c8 <manageStateMachine+0x2d4>)
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d012      	beq.n	8003844 <manageStateMachine+0x250>
		  AirInput_forceAperture(&primary, PrimaryMotorParam.MaxTempRise);
 800381e:	2364      	movs	r3, #100	; 0x64
 8003820:	4619      	mov	r1, r3
 8003822:	482d      	ldr	r0, [pc, #180]	; (80038d8 <manageStateMachine+0x2e4>)
 8003824:	f7ff fe00 	bl	8003428 <AirInput_forceAperture>
		  AirInput_forceAperture(&grill, GrillMotorParam.MaxTempRise);
 8003828:	2300      	movs	r3, #0
 800382a:	4619      	mov	r1, r3
 800382c:	482b      	ldr	r0, [pc, #172]	; (80038dc <manageStateMachine+0x2e8>)
 800382e:	f7ff fdfb 	bl	8003428 <AirInput_forceAperture>
		  AirInput_forceAperture(&secondary, SecondaryMotorParam.MaxTempRise);
 8003832:	2364      	movs	r3, #100	; 0x64
 8003834:	4619      	mov	r1, r3
 8003836:	482a      	ldr	r0, [pc, #168]	; (80038e0 <manageStateMachine+0x2ec>)
 8003838:	f7ff fdf6 	bl	8003428 <AirInput_forceAperture>
		  historyState = currentState;
 800383c:	4b22      	ldr	r3, [pc, #136]	; (80038c8 <manageStateMachine+0x2d4>)
 800383e:	781a      	ldrb	r2, [r3, #0]
 8003840:	4b33      	ldr	r3, [pc, #204]	; (8003910 <manageStateMachine+0x31c>)
 8003842:	701a      	strb	r2, [r3, #0]
		   to +/- 3 steps, it should take 3 * sec per step to complete
		   the movement. Reevaluate the control at that maximum period. */
//		if((timeSinceStateEntry >= MINUTES(3)) ||  (baffleTemperature > targetTemperature)) //3minutes // changemenet 2 min 2021-12-03
		//asservie seulement si on est depuis 3 minutes dans Temperature Rise ou qu'on a atteint 650 ou 660

			if (TimeForStep >= (1 * SEC_PER_STEP_TEMP_RISE * 1000)) { // changer de 3 a 2 2021-12-03
 8003844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003846:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800384a:	fb02 f303 	mul.w	r3, r2, r3
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	429a      	cmp	r2, r3
 8003852:	d31f      	bcc.n	8003894 <manageStateMachine+0x2a0>
			  timeRefAutoMode = currentTime_ms;
 8003854:	4a1f      	ldr	r2, [pc, #124]	; (80038d4 <manageStateMachine+0x2e0>)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6013      	str	r3, [r2, #0]

			  adjustement = computeAjustement(targetTemperature, dTavant);
 800385a:	4b2c      	ldr	r3, [pc, #176]	; (800390c <manageStateMachine+0x318>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6979      	ldr	r1, [r7, #20]
 8003860:	4618      	mov	r0, r3
 8003862:	f000 fcb7 	bl	80041d4 <computeAjustement>
 8003866:	6338      	str	r0, [r7, #48]	; 0x30
			  AirAdjustment(adjustement, SEC_PER_STEP_TEMP_RISE,
							  PrimaryMotorParam.MinTempRise, PrimaryMotorParam.MaxTempRise,
 8003868:	2323      	movs	r3, #35	; 0x23
			  AirAdjustment(adjustement, SEC_PER_STEP_TEMP_RISE,
 800386a:	b2dc      	uxtb	r4, r3
							  PrimaryMotorParam.MinTempRise, PrimaryMotorParam.MaxTempRise,
 800386c:	2364      	movs	r3, #100	; 0x64
			  AirAdjustment(adjustement, SEC_PER_STEP_TEMP_RISE,
 800386e:	b2dd      	uxtb	r5, r3
							  GrillMotorParam.MinTempRise,GrillMotorParam.MaxTempRise,
 8003870:	2300      	movs	r3, #0
			  AirAdjustment(adjustement, SEC_PER_STEP_TEMP_RISE,
 8003872:	b2db      	uxtb	r3, r3
							  GrillMotorParam.MinTempRise,GrillMotorParam.MaxTempRise,
 8003874:	2200      	movs	r2, #0
			  AirAdjustment(adjustement, SEC_PER_STEP_TEMP_RISE,
 8003876:	b2d2      	uxtb	r2, r2
							  SecondaryMotorParam.MinTempRise,SecondaryMotorParam.MaxTempRise);
 8003878:	2123      	movs	r1, #35	; 0x23
			  AirAdjustment(adjustement, SEC_PER_STEP_TEMP_RISE,
 800387a:	b2c9      	uxtb	r1, r1
							  SecondaryMotorParam.MinTempRise,SecondaryMotorParam.MaxTempRise);
 800387c:	2064      	movs	r0, #100	; 0x64
			  AirAdjustment(adjustement, SEC_PER_STEP_TEMP_RISE,
 800387e:	b2c0      	uxtb	r0, r0
 8003880:	9003      	str	r0, [sp, #12]
 8003882:	9102      	str	r1, [sp, #8]
 8003884:	9201      	str	r2, [sp, #4]
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	462b      	mov	r3, r5
 800388a:	4622      	mov	r2, r4
 800388c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800388e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003890:	f000 fcf4 	bl	800427c <AirAdjustment>
			}
			timeInTemperatureRise = thermostatRequest ? MINUTES(10):MINUTES(7);
 8003894:	4b1c      	ldr	r3, [pc, #112]	; (8003908 <manageStateMachine+0x314>)
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <manageStateMachine+0x2ac>
 800389c:	4b1d      	ldr	r3, [pc, #116]	; (8003914 <manageStateMachine+0x320>)
 800389e:	e000      	b.n	80038a2 <manageStateMachine+0x2ae>
 80038a0:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <manageStateMachine+0x324>)
 80038a2:	61fb      	str	r3, [r7, #28]
			if ( timeSinceStateEntry > timeInTemperatureRise && (baffleTemperature > targetTemperature))
 80038a4:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <manageStateMachine+0x2dc>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	69fa      	ldr	r2, [r7, #28]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d239      	bcs.n	8003922 <manageStateMachine+0x32e>
 80038ae:	4b0f      	ldr	r3, [pc, #60]	; (80038ec <manageStateMachine+0x2f8>)
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	4b16      	ldr	r3, [pc, #88]	; (800390c <manageStateMachine+0x318>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	dd33      	ble.n	8003922 <manageStateMachine+0x32e>
			{
			  nextState = thermostatRequest ? COMBUSTION_HIGH : COMBUSTION_LOW;
 80038ba:	4b13      	ldr	r3, [pc, #76]	; (8003908 <manageStateMachine+0x314>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d02c      	beq.n	800391c <manageStateMachine+0x328>
 80038c2:	2306      	movs	r3, #6
 80038c4:	e02b      	b.n	800391e <manageStateMachine+0x32a>
 80038c6:	bf00      	nop
 80038c8:	20000148 	.word	0x20000148
 80038cc:	20000660 	.word	0x20000660
 80038d0:	20000630 	.word	0x20000630
 80038d4:	20000664 	.word	0x20000664
 80038d8:	20000004 	.word	0x20000004
 80038dc:	2000001c 	.word	0x2000001c
 80038e0:	20000034 	.word	0x20000034
 80038e4:	2000014b 	.word	0x2000014b
 80038e8:	2000014c 	.word	0x2000014c
 80038ec:	20000150 	.word	0x20000150
 80038f0:	20000154 	.word	0x20000154
 80038f4:	20000149 	.word	0x20000149
 80038f8:	3da3d70a 	.word	0x3da3d70a
 80038fc:	3ca3d70a 	.word	0x3ca3d70a
 8003900:	20000638 	.word	0x20000638
 8003904:	00124f7f 	.word	0x00124f7f
 8003908:	2000015c 	.word	0x2000015c
 800390c:	20000668 	.word	0x20000668
 8003910:	2000066c 	.word	0x2000066c
 8003914:	000927c0 	.word	0x000927c0
 8003918:	000668a0 	.word	0x000668a0
 800391c:	2304      	movs	r3, #4
 800391e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}


#endif
		if(reloadingEvent || (baffleTemperature < 3000)) {// changé pour 300 au lieu de 460 2022-03-04
 8003922:	4b98      	ldr	r3, [pc, #608]	; (8003b84 <manageStateMachine+0x590>)
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d105      	bne.n	8003936 <manageStateMachine+0x342>
 800392a:	4b97      	ldr	r3, [pc, #604]	; (8003b88 <manageStateMachine+0x594>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8003932:	4293      	cmp	r3, r2
 8003934:	dc03      	bgt.n	800393e <manageStateMachine+0x34a>
			nextState = ZEROING_STEPPER;
 8003936:	2300      	movs	r3, #0
 8003938:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		{
			nextState = thermostatRequest ? COMBUSTION_HIGH : COMBUSTION_LOW;
		}

      break;
 800393c:	e266      	b.n	8003e0c <manageStateMachine+0x818>
		else if(timeSinceStateEntry > MINUTES(30))
 800393e:	4b93      	ldr	r3, [pc, #588]	; (8003b8c <manageStateMachine+0x598>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a93      	ldr	r2, [pc, #588]	; (8003b90 <manageStateMachine+0x59c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	f240 8261 	bls.w	8003e0c <manageStateMachine+0x818>
			nextState = thermostatRequest ? COMBUSTION_HIGH : COMBUSTION_LOW;
 800394a:	4b92      	ldr	r3, [pc, #584]	; (8003b94 <manageStateMachine+0x5a0>)
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <manageStateMachine+0x362>
 8003952:	2306      	movs	r3, #6
 8003954:	e000      	b.n	8003958 <manageStateMachine+0x364>
 8003956:	2304      	movs	r3, #4
 8003958:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      break;
 800395c:	e256      	b.n	8003e0c <manageStateMachine+0x818>

	case COMBUSTION_HIGH:
			if(historyState != currentState){
 800395e:	4b8e      	ldr	r3, [pc, #568]	; (8003b98 <manageStateMachine+0x5a4>)
 8003960:	781a      	ldrb	r2, [r3, #0]
 8003962:	4b8e      	ldr	r3, [pc, #568]	; (8003b9c <manageStateMachine+0x5a8>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d015      	beq.n	8003996 <manageStateMachine+0x3a2>

				StateEntryControlAdjustment(PrimaryMotorParam.MinCombHigh, PrimaryMotorParam.MaxCombHigh,
 800396a:	231c      	movs	r3, #28
 800396c:	b2d8      	uxtb	r0, r3
 800396e:	23c8      	movs	r3, #200	; 0xc8
 8003970:	b2d9      	uxtb	r1, r3
							  				GrillMotorParam.MinCombHigh,GrillMotorParam.MaxCombHigh,
 8003972:	2300      	movs	r3, #0
				StateEntryControlAdjustment(PrimaryMotorParam.MinCombHigh, PrimaryMotorParam.MaxCombHigh,
 8003974:	b2dc      	uxtb	r4, r3
							  				GrillMotorParam.MinCombHigh,GrillMotorParam.MaxCombHigh,
 8003976:	2300      	movs	r3, #0
				StateEntryControlAdjustment(PrimaryMotorParam.MinCombHigh, PrimaryMotorParam.MaxCombHigh,
 8003978:	b2dd      	uxtb	r5, r3
											SecondaryMotorParam.MinCombHigh,SecondaryMotorParam.MaxCombHigh);
 800397a:	231c      	movs	r3, #28
				StateEntryControlAdjustment(PrimaryMotorParam.MinCombHigh, PrimaryMotorParam.MaxCombHigh,
 800397c:	b2db      	uxtb	r3, r3
											SecondaryMotorParam.MinCombHigh,SecondaryMotorParam.MaxCombHigh);
 800397e:	22c8      	movs	r2, #200	; 0xc8
				StateEntryControlAdjustment(PrimaryMotorParam.MinCombHigh, PrimaryMotorParam.MaxCombHigh,
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	9201      	str	r2, [sp, #4]
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	462b      	mov	r3, r5
 8003988:	4622      	mov	r2, r4
 800398a:	f000 fcc3 	bl	8004314 <StateEntryControlAdjustment>
				historyState = currentState;
 800398e:	4b83      	ldr	r3, [pc, #524]	; (8003b9c <manageStateMachine+0x5a8>)
 8003990:	781a      	ldrb	r2, [r3, #0]
 8003992:	4b81      	ldr	r3, [pc, #516]	; (8003b98 <manageStateMachine+0x5a4>)
 8003994:	701a      	strb	r2, [r3, #0]
            }
#else
            /* Since the control algo (i.e. computeAjustement) is limited
               to +/- 3 steps, it whould take 3 * sec per step to complete
               the mouvement. Reevaluate the control at that maximum period. */
            if (TimeForStep >= (3 * SEC_PER_STEP_COMB_HIGH * 1000)&& AirInput_InPosition(&grill) && AirInput_InPosition(&primary) ) {
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800399c:	fb02 f303 	mul.w	r3, r2, r3
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d32b      	bcc.n	80039fe <manageStateMachine+0x40a>
 80039a6:	487e      	ldr	r0, [pc, #504]	; (8003ba0 <manageStateMachine+0x5ac>)
 80039a8:	f7ff fd68 	bl	800347c <AirInput_InPosition>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d025      	beq.n	80039fe <manageStateMachine+0x40a>
 80039b2:	487c      	ldr	r0, [pc, #496]	; (8003ba4 <manageStateMachine+0x5b0>)
 80039b4:	f7ff fd62 	bl	800347c <AirInput_InPosition>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d01f      	beq.n	80039fe <manageStateMachine+0x40a>
              timeRefAutoMode = currentTime_ms;
 80039be:	4a7a      	ldr	r2, [pc, #488]	; (8003ba8 <manageStateMachine+0x5b4>)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6013      	str	r3, [r2, #0]
              adjustement = computeAjustement(TemperatureParam.CombHighTarget, dTavant);
 80039c4:	f641 3358 	movw	r3, #7000	; 0x1b58
 80039c8:	6979      	ldr	r1, [r7, #20]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 fc02 	bl	80041d4 <computeAjustement>
 80039d0:	6338      	str	r0, [r7, #48]	; 0x30
			  AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
											PrimaryMotorParam.MinCombHigh, PrimaryMotorParam.MaxCombHigh,
 80039d2:	231c      	movs	r3, #28
			  AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 80039d4:	b2dc      	uxtb	r4, r3
											PrimaryMotorParam.MinCombHigh, PrimaryMotorParam.MaxCombHigh,
 80039d6:	23c8      	movs	r3, #200	; 0xc8
			  AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 80039d8:	b2dd      	uxtb	r5, r3
							  				GrillMotorParam.MinCombHigh,GrillMotorParam.MaxCombHigh,
 80039da:	2300      	movs	r3, #0
			  AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 80039dc:	b2db      	uxtb	r3, r3
							  				GrillMotorParam.MinCombHigh,GrillMotorParam.MaxCombHigh,
 80039de:	2200      	movs	r2, #0
			  AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 80039e0:	b2d2      	uxtb	r2, r2
											SecondaryMotorParam.MinCombHigh,SecondaryMotorParam.MaxCombHigh);
 80039e2:	211c      	movs	r1, #28
			  AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 80039e4:	b2c9      	uxtb	r1, r1
											SecondaryMotorParam.MinCombHigh,SecondaryMotorParam.MaxCombHigh);
 80039e6:	20c8      	movs	r0, #200	; 0xc8
			  AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 80039e8:	b2c0      	uxtb	r0, r0
 80039ea:	9003      	str	r0, [sp, #12]
 80039ec:	9102      	str	r1, [sp, #8]
 80039ee:	9201      	str	r2, [sp, #4]
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	462b      	mov	r3, r5
 80039f4:	4622      	mov	r2, r4
 80039f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039fa:	f000 fc3f 	bl	800427c <AirAdjustment>

            }
#endif
            if ( ((baffleTemperature) >= (rearTemperature-TemperatureParam.CoalDeltaTemp)) // changement de <= à >= UFEC 23 2021-11-23
 80039fe:	4b6b      	ldr	r3, [pc, #428]	; (8003bac <manageStateMachine+0x5b8>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003a06:	1a9a      	subs	r2, r3, r2
 8003a08:	4b5f      	ldr	r3, [pc, #380]	; (8003b88 <manageStateMachine+0x594>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	dc09      	bgt.n	8003a24 <manageStateMachine+0x430>
            		&& (TemperatureParam.CoalCrossOverRearHigh > rearTemperature) ) //détection de l'état coal/braise
 8003a10:	f242 1334 	movw	r3, #8500	; 0x2134
 8003a14:	461a      	mov	r2, r3
 8003a16:	4b65      	ldr	r3, [pc, #404]	; (8003bac <manageStateMachine+0x5b8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	dd02      	ble.n	8003a24 <manageStateMachine+0x430>
            {
            	nextState = COAL_HIGH;
 8003a1e:	2309      	movs	r3, #9
 8003a20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            }
            if (!thermostatRequest) {
 8003a24:	4b5b      	ldr	r3, [pc, #364]	; (8003b94 <manageStateMachine+0x5a0>)
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	f083 0301 	eor.w	r3, r3, #1
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <manageStateMachine+0x446>

              nextState = COMBUSTION_LOW;
 8003a32:	2304      	movs	r3, #4
 8003a34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            } else if (reloadingEvent) {
              nextState = ZEROING_STEPPER;
            }

          break;
 8003a38:	e1ea      	b.n	8003e10 <manageStateMachine+0x81c>
            } else if (reloadingEvent) {
 8003a3a:	4b52      	ldr	r3, [pc, #328]	; (8003b84 <manageStateMachine+0x590>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 81e6 	beq.w	8003e10 <manageStateMachine+0x81c>
              nextState = ZEROING_STEPPER;
 8003a44:	2300      	movs	r3, #0
 8003a46:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          break;
 8003a4a:	e1e1      	b.n	8003e10 <manageStateMachine+0x81c>

    case COMBUSTION_LOW:
    	//HAL_GPIO_WritePin(SPEED1_COIL_GPIO_Port,SPEED1_COIL_Pin,RESET);//desactive le relai pour activer la carte 2 PLV 15/12/21
		if(historyState != currentState){
 8003a4c:	4b52      	ldr	r3, [pc, #328]	; (8003b98 <manageStateMachine+0x5a4>)
 8003a4e:	781a      	ldrb	r2, [r3, #0]
 8003a50:	4b52      	ldr	r3, [pc, #328]	; (8003b9c <manageStateMachine+0x5a8>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d015      	beq.n	8003a84 <manageStateMachine+0x490>

			StateEntryControlAdjustment(PrimaryMotorParam.MinCombLow, PrimaryMotorParam.MaxCombLow,
 8003a58:	232b      	movs	r3, #43	; 0x2b
 8003a5a:	b2d8      	uxtb	r0, r3
 8003a5c:	233d      	movs	r3, #61	; 0x3d
 8003a5e:	b2d9      	uxtb	r1, r3
							  			GrillMotorParam.MinCombLow,GrillMotorParam.MaxCombLow,
 8003a60:	2300      	movs	r3, #0
			StateEntryControlAdjustment(PrimaryMotorParam.MinCombLow, PrimaryMotorParam.MaxCombLow,
 8003a62:	b2dc      	uxtb	r4, r3
							  			GrillMotorParam.MinCombLow,GrillMotorParam.MaxCombLow,
 8003a64:	2300      	movs	r3, #0
			StateEntryControlAdjustment(PrimaryMotorParam.MinCombLow, PrimaryMotorParam.MaxCombLow,
 8003a66:	b2dd      	uxtb	r5, r3
										SecondaryMotorParam.MinCombLow,SecondaryMotorParam.MaxCombLow);
 8003a68:	232b      	movs	r3, #43	; 0x2b
			StateEntryControlAdjustment(PrimaryMotorParam.MinCombLow, PrimaryMotorParam.MaxCombLow,
 8003a6a:	b2db      	uxtb	r3, r3
										SecondaryMotorParam.MinCombLow,SecondaryMotorParam.MaxCombLow);
 8003a6c:	223d      	movs	r2, #61	; 0x3d
			StateEntryControlAdjustment(PrimaryMotorParam.MinCombLow, PrimaryMotorParam.MaxCombLow,
 8003a6e:	b2d2      	uxtb	r2, r2
 8003a70:	9201      	str	r2, [sp, #4]
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	462b      	mov	r3, r5
 8003a76:	4622      	mov	r2, r4
 8003a78:	f000 fc4c 	bl	8004314 <StateEntryControlAdjustment>
		    historyState = currentState;
 8003a7c:	4b47      	ldr	r3, [pc, #284]	; (8003b9c <manageStateMachine+0x5a8>)
 8003a7e:	781a      	ldrb	r2, [r3, #0]
 8003a80:	4b45      	ldr	r3, [pc, #276]	; (8003b98 <manageStateMachine+0x5a4>)
 8003a82:	701a      	strb	r2, [r3, #0]
        	PIDTrapPosition = PIDTrapPosition > PRIMARY_SECONDARY_FULL_OPEN?PRIMARY_SECONDARY_FULL_OPEN:PIDTrapPosition<0?0:PIDTrapPosition;

        }
		AirInput_forceAperture(&primary,PIDTrapPosition);
#else
		deltaTemperature = abs(rearTemperature - baffleTemperature);
 8003a84:	4b49      	ldr	r3, [pc, #292]	; (8003bac <manageStateMachine+0x5b8>)
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	4b3f      	ldr	r3, [pc, #252]	; (8003b88 <manageStateMachine+0x594>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	bfb8      	it	lt
 8003a92:	425b      	neglt	r3, r3
 8003a94:	613b      	str	r3, [r7, #16]

		if (rearTemperature < TemperatureParam.FlameLoss && ( deltaTemperature < TemperatureParam.FlameLossDelta)) { //changement de reartemp pour le flameloss au lieu de baffletemp GTF 2022-08-30
 8003a96:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	4b43      	ldr	r3, [pc, #268]	; (8003bac <manageStateMachine+0x5b8>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	dd0d      	ble.n	8003ac0 <manageStateMachine+0x4cc>
 8003aa4:	f240 63d6 	movw	r3, #1750	; 0x6d6
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	4293      	cmp	r3, r2
 8003aae:	da07      	bge.n	8003ac0 <manageStateMachine+0x4cc>
			nextState = FLAME_LOSS;
 8003ab0:	2308      	movs	r3, #8
 8003ab2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			AirInput_forceAperture(&grill, GRILL_FULL_OPEN);
 8003ab6:	2164      	movs	r1, #100	; 0x64
 8003ab8:	4839      	ldr	r0, [pc, #228]	; (8003ba0 <manageStateMachine+0x5ac>)
 8003aba:	f7ff fcb5 	bl	8003428 <AirInput_forceAperture>
 8003abe:	e091      	b.n	8003be4 <manageStateMachine+0x5f0>
		}
		else{
			//we loss the flamme but we are not in coal yet, we reopen the grill
		  //AirInput_setSetPoint(&grill, GRILL_CLOSED, SEC_PER_STEP_COMB_LOW);
		  if (TimeForStep >= (1 * SEC_PER_STEP_COMB_LOW * 1000)
 8003ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ac6:	fb02 f303 	mul.w	r3, r2, r3
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	f0c0 8089 	bcc.w	8003be4 <manageStateMachine+0x5f0>
				  && AirInput_InPosition(&grill)
 8003ad2:	4833      	ldr	r0, [pc, #204]	; (8003ba0 <manageStateMachine+0x5ac>)
 8003ad4:	f7ff fcd2 	bl	800347c <AirInput_InPosition>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 8082 	beq.w	8003be4 <manageStateMachine+0x5f0>
				  && AirInput_InPosition(&primary)
 8003ae0:	4830      	ldr	r0, [pc, #192]	; (8003ba4 <manageStateMachine+0x5b0>)
 8003ae2:	f7ff fccb 	bl	800347c <AirInput_InPosition>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d07b      	beq.n	8003be4 <manageStateMachine+0x5f0>
				  && (timeSinceStateEntry >=MINUTES(2)) ) {
 8003aec:	4b27      	ldr	r3, [pc, #156]	; (8003b8c <manageStateMachine+0x598>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a2f      	ldr	r2, [pc, #188]	; (8003bb0 <manageStateMachine+0x5bc>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d976      	bls.n	8003be4 <manageStateMachine+0x5f0>

			timeRefAutoMode = currentTime_ms;
 8003af6:	4a2c      	ldr	r2, [pc, #176]	; (8003ba8 <manageStateMachine+0x5b4>)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6013      	str	r3, [r2, #0]

			adjustement = computeAjustement(TemperatureParam.CombLowTarget, dTavant);
 8003afc:	f641 13c8 	movw	r3, #6600	; 0x19c8
 8003b00:	6979      	ldr	r1, [r7, #20]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 fb66 	bl	80041d4 <computeAjustement>
 8003b08:	6338      	str	r0, [r7, #48]	; 0x30

			if (timeSinceStateEntry > MINUTES(60) && (rearTemperature > TemperatureParam.CombLowtoSuperLow)) //changé 35 min pour 60
 8003b0a:	4b20      	ldr	r3, [pc, #128]	; (8003b8c <manageStateMachine+0x598>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a29      	ldr	r2, [pc, #164]	; (8003bb4 <manageStateMachine+0x5c0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d951      	bls.n	8003bb8 <manageStateMachine+0x5c4>
 8003b14:	f641 3358 	movw	r3, #7000	; 0x1b58
 8003b18:	461a      	mov	r2, r3
 8003b1a:	4b24      	ldr	r3, [pc, #144]	; (8003bac <manageStateMachine+0x5b8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	da4a      	bge.n	8003bb8 <manageStateMachine+0x5c4>
			{		
				StateEntryControlAdjustment(PrimaryMotorParam.MinCombSuperLow,PrimaryMotorParam.MaxCombSuperLow,
 8003b22:	2316      	movs	r3, #22
 8003b24:	b2d8      	uxtb	r0, r3
 8003b26:	2316      	movs	r3, #22
 8003b28:	b2d9      	uxtb	r1, r3
											GrillMotorParam.MinCombSuperLow,GrillMotorParam.MaxCombSuperLow,
 8003b2a:	2300      	movs	r3, #0
				StateEntryControlAdjustment(PrimaryMotorParam.MinCombSuperLow,PrimaryMotorParam.MaxCombSuperLow,
 8003b2c:	b2dc      	uxtb	r4, r3
											GrillMotorParam.MinCombSuperLow,GrillMotorParam.MaxCombSuperLow,
 8003b2e:	2300      	movs	r3, #0
				StateEntryControlAdjustment(PrimaryMotorParam.MinCombSuperLow,PrimaryMotorParam.MaxCombSuperLow,
 8003b30:	b2dd      	uxtb	r5, r3
											SecondaryMotorParam.MinCombSuperLow,SecondaryMotorParam.MaxCombSuperLow);
 8003b32:	2316      	movs	r3, #22
				StateEntryControlAdjustment(PrimaryMotorParam.MinCombSuperLow,PrimaryMotorParam.MaxCombSuperLow,
 8003b34:	b2db      	uxtb	r3, r3
											SecondaryMotorParam.MinCombSuperLow,SecondaryMotorParam.MaxCombSuperLow);
 8003b36:	2216      	movs	r2, #22
				StateEntryControlAdjustment(PrimaryMotorParam.MinCombSuperLow,PrimaryMotorParam.MaxCombSuperLow,
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	9201      	str	r2, [sp, #4]
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	462b      	mov	r3, r5
 8003b40:	4622      	mov	r2, r4
 8003b42:	f000 fbe7 	bl	8004314 <StateEntryControlAdjustment>
				adjustement = computeAjustement(TemperatureParam.CombLowtoSuperLow, dTavant);
 8003b46:	f641 3358 	movw	r3, #7000	; 0x1b58
 8003b4a:	6979      	ldr	r1, [r7, #20]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f000 fb41 	bl	80041d4 <computeAjustement>
 8003b52:	6338      	str	r0, [r7, #48]	; 0x30
			
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
									PrimaryMotorParam.MinCombSuperLow,PrimaryMotorParam.MaxCombSuperLow,
 8003b54:	2316      	movs	r3, #22
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 8003b56:	b2dc      	uxtb	r4, r3
									PrimaryMotorParam.MinCombSuperLow,PrimaryMotorParam.MaxCombSuperLow,
 8003b58:	2316      	movs	r3, #22
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 8003b5a:	b2dd      	uxtb	r5, r3
									GrillMotorParam.MinCombSuperLow,GrillMotorParam.MaxCombSuperLow,
 8003b5c:	2300      	movs	r3, #0
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 8003b5e:	b2db      	uxtb	r3, r3
									GrillMotorParam.MinCombSuperLow,GrillMotorParam.MaxCombSuperLow,
 8003b60:	2200      	movs	r2, #0
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 8003b62:	b2d2      	uxtb	r2, r2
									SecondaryMotorParam.MinCombSuperLow,SecondaryMotorParam.MaxCombSuperLow);
 8003b64:	2116      	movs	r1, #22
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 8003b66:	b2c9      	uxtb	r1, r1
									SecondaryMotorParam.MinCombSuperLow,SecondaryMotorParam.MaxCombSuperLow);
 8003b68:	2016      	movs	r0, #22
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 8003b6a:	b2c0      	uxtb	r0, r0
 8003b6c:	9003      	str	r0, [sp, #12]
 8003b6e:	9102      	str	r1, [sp, #8]
 8003b70:	9201      	str	r2, [sp, #4]
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	462b      	mov	r3, r5
 8003b76:	4622      	mov	r2, r4
 8003b78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b7c:	f000 fb7e 	bl	800427c <AirAdjustment>
 8003b80:	e030      	b.n	8003be4 <manageStateMachine+0x5f0>
 8003b82:	bf00      	nop
 8003b84:	20000149 	.word	0x20000149
 8003b88:	20000150 	.word	0x20000150
 8003b8c:	20000630 	.word	0x20000630
 8003b90:	001b7740 	.word	0x001b7740
 8003b94:	2000015c 	.word	0x2000015c
 8003b98:	2000066c 	.word	0x2000066c
 8003b9c:	20000148 	.word	0x20000148
 8003ba0:	2000001c 	.word	0x2000001c
 8003ba4:	20000004 	.word	0x20000004
 8003ba8:	20000664 	.word	0x20000664
 8003bac:	20000154 	.word	0x20000154
 8003bb0:	0001d4bf 	.word	0x0001d4bf
 8003bb4:	0036ee80 	.word	0x0036ee80
			
			}
			else
			{
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
							  PrimaryMotorParam.MinCombLow, PrimaryMotorParam.MaxCombLow,
 8003bb8:	232b      	movs	r3, #43	; 0x2b
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 8003bba:	b2dc      	uxtb	r4, r3
							  PrimaryMotorParam.MinCombLow, PrimaryMotorParam.MaxCombLow,
 8003bbc:	233d      	movs	r3, #61	; 0x3d
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 8003bbe:	b2dd      	uxtb	r5, r3
							  GrillMotorParam.MinCombLow,GrillMotorParam.MaxCombLow,
 8003bc0:	2300      	movs	r3, #0
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 8003bc2:	b2db      	uxtb	r3, r3
							  GrillMotorParam.MinCombLow,GrillMotorParam.MaxCombLow,
 8003bc4:	2200      	movs	r2, #0
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 8003bc6:	b2d2      	uxtb	r2, r2
							  SecondaryMotorParam.MinCombLow,SecondaryMotorParam.MaxCombLow);
 8003bc8:	212b      	movs	r1, #43	; 0x2b
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 8003bca:	b2c9      	uxtb	r1, r1
							  SecondaryMotorParam.MinCombLow,SecondaryMotorParam.MaxCombLow);
 8003bcc:	203d      	movs	r0, #61	; 0x3d
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 8003bce:	b2c0      	uxtb	r0, r0
 8003bd0:	9003      	str	r0, [sp, #12]
 8003bd2:	9102      	str	r1, [sp, #8]
 8003bd4:	9201      	str	r2, [sp, #4]
 8003bd6:	9300      	str	r3, [sp, #0]
 8003bd8:	462b      	mov	r3, r5
 8003bda:	4622      	mov	r2, r4
 8003bdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003be0:	f000 fb4c 	bl	800427c <AirAdjustment>
			}
  	  	  }
		}

#endif
		if ( (baffleTemperature <= (rearTemperature-TemperatureParam.CoalDeltaTemp)) //RETOUR À <= ET CHANGEMENENT POUR 200 POUR LE COALCROSSOVERLOW gtf 2022-08-30
 8003be4:	4b9f      	ldr	r3, [pc, #636]	; (8003e64 <manageStateMachine+0x870>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003bec:	1a9a      	subs	r2, r3, r2
 8003bee:	4b9e      	ldr	r3, [pc, #632]	; (8003e68 <manageStateMachine+0x874>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	db09      	blt.n	8003c0a <manageStateMachine+0x616>
				&& (rearTemperature < TemperatureParam.CoalCrossOverRearLow) )
 8003bf6:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	4b99      	ldr	r3, [pc, #612]	; (8003e64 <manageStateMachine+0x870>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	dd02      	ble.n	8003c0a <manageStateMachine+0x616>
        {
        	nextState = COAL_LOW;
 8003c04:	2307      	movs	r3, #7
 8003c06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        if (thermostatRequest) {
 8003c0a:	4b98      	ldr	r3, [pc, #608]	; (8003e6c <manageStateMachine+0x878>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <manageStateMachine+0x626>
          nextState = COMBUSTION_HIGH;
 8003c12:	2306      	movs	r3, #6
 8003c14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        } else if (reloadingEvent) {
          nextState = ZEROING_STEPPER;
        }
      break;
 8003c18:	e0fc      	b.n	8003e14 <manageStateMachine+0x820>
        } else if (reloadingEvent) {
 8003c1a:	4b95      	ldr	r3, [pc, #596]	; (8003e70 <manageStateMachine+0x87c>)
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 80f8 	beq.w	8003e14 <manageStateMachine+0x820>
          nextState = ZEROING_STEPPER;
 8003c24:	2300      	movs	r3, #0
 8003c26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      break;
 8003c2a:	e0f3      	b.n	8003e14 <manageStateMachine+0x820>

    case COAL_LOW: //remplacement de la logic du low pour la logic du high de la fournaise pour UFEC 23 2021-11-23

    	//HAL_GPIO_WritePin(SPEED1_COIL_GPIO_Port,SPEED1_COIL_Pin,SET);//active le relai pour activer la carte 2 PLV 15/12/21
    	AirInput_forceAperture(&primary, PrimaryMotorParam.MaxCoalLow);
 8003c2c:	230e      	movs	r3, #14
 8003c2e:	4619      	mov	r1, r3
 8003c30:	4890      	ldr	r0, [pc, #576]	; (8003e74 <manageStateMachine+0x880>)
 8003c32:	f7ff fbf9 	bl	8003428 <AirInput_forceAperture>
    	AirInput_forceAperture(&grill, GrillMotorParam.MaxCoalLow);
 8003c36:	2300      	movs	r3, #0
 8003c38:	4619      	mov	r1, r3
 8003c3a:	488f      	ldr	r0, [pc, #572]	; (8003e78 <manageStateMachine+0x884>)
 8003c3c:	f7ff fbf4 	bl	8003428 <AirInput_forceAperture>
    	if (thermostatRequest) {
 8003c40:	4b8a      	ldr	r3, [pc, #552]	; (8003e6c <manageStateMachine+0x878>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <manageStateMachine+0x65c>
    	          nextState = COAL_HIGH;
 8003c48:	2309      	movs	r3, #9
 8003c4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    	    	//}else if (reloadingEvent) {
    	          //  nextState = ZEROING_STEPPER;
    	        //}else if (baffleTemperature > TemperatureParam.CombLowTarget){
    	        	//nextState = COMBUSTION_LOW;
    	        //}
    	break;
 8003c4e:	e0e3      	b.n	8003e18 <manageStateMachine+0x824>
    	}else if (reloadingEvent) {
 8003c50:	4b87      	ldr	r3, [pc, #540]	; (8003e70 <manageStateMachine+0x87c>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 80df 	beq.w	8003e18 <manageStateMachine+0x824>
            nextState = ZEROING_STEPPER;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    	break;
 8003c60:	e0da      	b.n	8003e18 <manageStateMachine+0x824>

    case FLAME_LOSS:
    	deltaTemperature = abs(rearTemperature - baffleTemperature);
 8003c62:	4b80      	ldr	r3, [pc, #512]	; (8003e64 <manageStateMachine+0x870>)
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	4b80      	ldr	r3, [pc, #512]	; (8003e68 <manageStateMachine+0x874>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	bfb8      	it	lt
 8003c70:	425b      	neglt	r3, r3
 8003c72:	613b      	str	r3, [r7, #16]
    	if( deltaTemperature > TemperatureParam.FlameLossDelta && timeSinceStateEntry >= MINUTES(1))
 8003c74:	f240 63d6 	movw	r3, #1750	; 0x6d6
 8003c78:	461a      	mov	r2, r3
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	dd0d      	ble.n	8003c9c <manageStateMachine+0x6a8>
 8003c80:	4b7e      	ldr	r3, [pc, #504]	; (8003e7c <manageStateMachine+0x888>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d907      	bls.n	8003c9c <manageStateMachine+0x6a8>
    	{
    		nextState = historyState;
 8003c8c:	4b7c      	ldr	r3, [pc, #496]	; (8003e80 <manageStateMachine+0x88c>)
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    		AirInput_forceAperture(&grill, GRILL_CLOSED);
 8003c94:	2100      	movs	r1, #0
 8003c96:	4878      	ldr	r0, [pc, #480]	; (8003e78 <manageStateMachine+0x884>)
 8003c98:	f7ff fbc6 	bl	8003428 <AirInput_forceAperture>
    	}
		if(reloadingEvent) {
 8003c9c:	4b74      	ldr	r3, [pc, #464]	; (8003e70 <manageStateMachine+0x87c>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d003      	beq.n	8003cac <manageStateMachine+0x6b8>
			nextState = ZEROING_STEPPER;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}
		else if((rearTemperature < TemperatureParam.CoalCrossOverRearLow) && timeSinceStateEntry >= MINUTES(5))
		{
			nextState = COAL_HIGH;
		}
    	break;
 8003caa:	e0b7      	b.n	8003e1c <manageStateMachine+0x828>
		else if((rearTemperature < TemperatureParam.CoalCrossOverRearLow) && timeSinceStateEntry >= MINUTES(5))
 8003cac:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	4b6c      	ldr	r3, [pc, #432]	; (8003e64 <manageStateMachine+0x870>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	f340 80b0 	ble.w	8003e1c <manageStateMachine+0x828>
 8003cbc:	4b6f      	ldr	r3, [pc, #444]	; (8003e7c <manageStateMachine+0x888>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a70      	ldr	r2, [pc, #448]	; (8003e84 <manageStateMachine+0x890>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	f240 80aa 	bls.w	8003e1c <manageStateMachine+0x828>
			nextState = COAL_HIGH;
 8003cc8:	2309      	movs	r3, #9
 8003cca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    	break;
 8003cce:	e0a5      	b.n	8003e1c <manageStateMachine+0x828>

    case COAL_HIGH:
		if(historyState != currentState){
 8003cd0:	4b6b      	ldr	r3, [pc, #428]	; (8003e80 <manageStateMachine+0x88c>)
 8003cd2:	781a      	ldrb	r2, [r3, #0]
 8003cd4:	4b6c      	ldr	r3, [pc, #432]	; (8003e88 <manageStateMachine+0x894>)
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d011      	beq.n	8003d00 <manageStateMachine+0x70c>
			StateEntryControlAdjustment(PrimaryMotorParam.MinCoalHigh, PrimaryMotorParam.MaxCoalHigh,
 8003cdc:	2323      	movs	r3, #35	; 0x23
 8003cde:	b2d8      	uxtb	r0, r3
 8003ce0:	23c8      	movs	r3, #200	; 0xc8
 8003ce2:	b2d9      	uxtb	r1, r3
										GRILL_CLOSED,GRILL_CLOSED,
										SecondaryMotorParam.MinCoalHigh, SecondaryMotorParam.MaxCoalHigh);
 8003ce4:	2323      	movs	r3, #35	; 0x23
			StateEntryControlAdjustment(PrimaryMotorParam.MinCoalHigh, PrimaryMotorParam.MaxCoalHigh,
 8003ce6:	b2db      	uxtb	r3, r3
										SecondaryMotorParam.MinCoalHigh, SecondaryMotorParam.MaxCoalHigh);
 8003ce8:	22c8      	movs	r2, #200	; 0xc8
			StateEntryControlAdjustment(PrimaryMotorParam.MinCoalHigh, PrimaryMotorParam.MaxCoalHigh,
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	9201      	str	r2, [sp, #4]
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f000 fb0e 	bl	8004314 <StateEntryControlAdjustment>
		    historyState = currentState;
 8003cf8:	4b63      	ldr	r3, [pc, #396]	; (8003e88 <manageStateMachine+0x894>)
 8003cfa:	781a      	ldrb	r2, [r3, #0]
 8003cfc:	4b60      	ldr	r3, [pc, #384]	; (8003e80 <manageStateMachine+0x88c>)
 8003cfe:	701a      	strb	r2, [r3, #0]
		}
        /* Since the control algo (i.e. computeAjustement) is limited
           to +/- 3 steps, it whould take 3 * sec per step to complete
           the mouvement. Reevaluate the control at that maximum period. */
        if (TimeForStep >= (3 * SEC_PER_STEP_COAL_HIGH * 1000)) {
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003d06:	fb02 f303 	mul.w	r3, r2, r3
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d326      	bcc.n	8003d5e <manageStateMachine+0x76a>
        	if(rearTemperature > 9000) /// C'EST QUOI ÇA GTF 2022-03-11
 8003d10:	4b54      	ldr	r3, [pc, #336]	; (8003e64 <manageStateMachine+0x870>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f242 3228 	movw	r2, #9000	; 0x2328
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	dd03      	ble.n	8003d24 <manageStateMachine+0x730>
        	{
        		adjustement = -1; //Si T > 900, on ferme. Sinon on suit le tableau d'ajustement
 8003d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d20:	633b      	str	r3, [r7, #48]	; 0x30
 8003d22:	e006      	b.n	8003d32 <manageStateMachine+0x73e>
        	}
        	else
        	{
        		adjustement = computeAjustement( TemperatureParam.CombHighTarget, dTavant);
 8003d24:	f641 3358 	movw	r3, #7000	; 0x1b58
 8003d28:	6979      	ldr	r1, [r7, #20]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 fa52 	bl	80041d4 <computeAjustement>
 8003d30:	6338      	str	r0, [r7, #48]	; 0x30
        	}
            AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
					  	  	  PrimaryMotorParam.MinCoalHigh, PrimaryMotorParam.MaxCoalHigh,
 8003d32:	2323      	movs	r3, #35	; 0x23
            AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 8003d34:	b2dc      	uxtb	r4, r3
					  	  	  PrimaryMotorParam.MinCoalHigh, PrimaryMotorParam.MaxCoalHigh,
 8003d36:	23c8      	movs	r3, #200	; 0xc8
            AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 8003d38:	b2dd      	uxtb	r5, r3
							  GrillMotorParam.MinCoalHigh, GrillMotorParam.MaxCoalHigh,
 8003d3a:	2300      	movs	r3, #0
            AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 8003d3c:	b2db      	uxtb	r3, r3
							  GrillMotorParam.MinCoalHigh, GrillMotorParam.MaxCoalHigh,
 8003d3e:	22c8      	movs	r2, #200	; 0xc8
            AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 8003d40:	b2d2      	uxtb	r2, r2
							  SecondaryMotorParam.MinCoalHigh, SecondaryMotorParam.MaxCoalHigh);
 8003d42:	2123      	movs	r1, #35	; 0x23
            AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 8003d44:	b2c9      	uxtb	r1, r1
							  SecondaryMotorParam.MinCoalHigh, SecondaryMotorParam.MaxCoalHigh);
 8003d46:	20c8      	movs	r0, #200	; 0xc8
            AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 8003d48:	b2c0      	uxtb	r0, r0
 8003d4a:	9003      	str	r0, [sp, #12]
 8003d4c:	9102      	str	r1, [sp, #8]
 8003d4e:	9201      	str	r2, [sp, #4]
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	462b      	mov	r3, r5
 8003d54:	4622      	mov	r2, r4
 8003d56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d5a:	f000 fa8f 	bl	800427c <AirAdjustment>
        }

    	if (!thermostatRequest) {
 8003d5e:	4b43      	ldr	r3, [pc, #268]	; (8003e6c <manageStateMachine+0x878>)
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	f083 0301 	eor.w	r3, r3, #1
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <manageStateMachine+0x780>
    	          nextState = COAL_LOW;
 8003d6c:	2307      	movs	r3, #7
 8003d6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    	}else if (reloadingEvent) {
            nextState = ZEROING_STEPPER;
        }else if (baffleTemperature > TemperatureParam.CombLowTarget){
        	nextState = COMBUSTION_HIGH;
        }
    	break;
 8003d72:	e055      	b.n	8003e20 <manageStateMachine+0x82c>
    	}else if (reloadingEvent) {
 8003d74:	4b3e      	ldr	r3, [pc, #248]	; (8003e70 <manageStateMachine+0x87c>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <manageStateMachine+0x790>
            nextState = ZEROING_STEPPER;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    	break;
 8003d82:	e04d      	b.n	8003e20 <manageStateMachine+0x82c>
        }else if (baffleTemperature > TemperatureParam.CombLowTarget){
 8003d84:	f641 13c8 	movw	r3, #6600	; 0x19c8
 8003d88:	461a      	mov	r2, r3
 8003d8a:	4b37      	ldr	r3, [pc, #220]	; (8003e68 <manageStateMachine+0x874>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	da46      	bge.n	8003e20 <manageStateMachine+0x82c>
        	nextState = COMBUSTION_HIGH;
 8003d92:	2306      	movs	r3, #6
 8003d94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    	break;
 8003d98:	e042      	b.n	8003e20 <manageStateMachine+0x82c>

    case OVERTEMP:
    case SAFETY:
      AirInput_forceAperture(&grill, GRILL_CLOSED);
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	4836      	ldr	r0, [pc, #216]	; (8003e78 <manageStateMachine+0x884>)
 8003d9e:	f7ff fb43 	bl	8003428 <AirInput_forceAperture>
      AirInput_forceAperture(&primary, PRIMARY_CLOSED);
 8003da2:	210d      	movs	r1, #13
 8003da4:	4833      	ldr	r0, [pc, #204]	; (8003e74 <manageStateMachine+0x880>)
 8003da6:	f7ff fb3f 	bl	8003428 <AirInput_forceAperture>

      if ((baffleTemperature < TemperatureParam.OverheatBaffle)
 8003daa:	f643 2398 	movw	r3, #15000	; 0x3a98
 8003dae:	461a      	mov	r2, r3
 8003db0:	4b2d      	ldr	r3, [pc, #180]	; (8003e68 <manageStateMachine+0x874>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	dd35      	ble.n	8003e24 <manageStateMachine+0x830>
    		  && (rearTemperature < TemperatureParam.OverheatChamber)
 8003db8:	f243 23c8 	movw	r3, #13000	; 0x32c8
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	4b29      	ldr	r3, [pc, #164]	; (8003e64 <manageStateMachine+0x870>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	dd2e      	ble.n	8003e24 <manageStateMachine+0x830>
			  && (Algo_getPlenumTemp() < TemperatureParam.OverheatPlenumExit)){
 8003dc6:	f000 f991 	bl	80040ec <Algo_getPlenumTemp>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	f640 0234 	movw	r2, #2100	; 0x834
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	da27      	bge.n	8003e24 <manageStateMachine+0x830>
    	  if(historyState == SAFETY || historyState == OVERTEMP)
 8003dd4:	4b2a      	ldr	r3, [pc, #168]	; (8003e80 <manageStateMachine+0x88c>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	2b0b      	cmp	r3, #11
 8003dda:	d003      	beq.n	8003de4 <manageStateMachine+0x7f0>
 8003ddc:	4b28      	ldr	r3, [pc, #160]	; (8003e80 <manageStateMachine+0x88c>)
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	2b0a      	cmp	r3, #10
 8003de2:	d103      	bne.n	8003dec <manageStateMachine+0x7f8>
    	  {
    		  nextState = ZEROING_STEPPER; //autre façon de fermer les trappes
 8003de4:	2300      	movs	r3, #0
 8003de6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    	  else
    	  {
    		  nextState = historyState;
    	  }
      }
      break;
 8003dea:	e01b      	b.n	8003e24 <manageStateMachine+0x830>
    		  nextState = historyState;
 8003dec:	4b24      	ldr	r3, [pc, #144]	; (8003e80 <manageStateMachine+0x88c>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      break;
 8003df4:	e016      	b.n	8003e24 <manageStateMachine+0x830>

    case PRODUCTION_TEST:
    	TestRunner();
 8003df6:	f7fe fd37 	bl	8002868 <TestRunner>
		nextState = currentState;  //assign the current state in the runner
 8003dfa:	4b23      	ldr	r3, [pc, #140]	; (8003e88 <manageStateMachine+0x894>)
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    	break;
 8003e02:	e010      	b.n	8003e26 <manageStateMachine+0x832>
		break;
 8003e04:	bf00      	nop
 8003e06:	e00e      	b.n	8003e26 <manageStateMachine+0x832>
      break;
 8003e08:	bf00      	nop
 8003e0a:	e00c      	b.n	8003e26 <manageStateMachine+0x832>
      break;
 8003e0c:	bf00      	nop
 8003e0e:	e00a      	b.n	8003e26 <manageStateMachine+0x832>
          break;
 8003e10:	bf00      	nop
 8003e12:	e008      	b.n	8003e26 <manageStateMachine+0x832>
      break;
 8003e14:	bf00      	nop
 8003e16:	e006      	b.n	8003e26 <manageStateMachine+0x832>
    	break;
 8003e18:	bf00      	nop
 8003e1a:	e004      	b.n	8003e26 <manageStateMachine+0x832>
    	break;
 8003e1c:	bf00      	nop
 8003e1e:	e002      	b.n	8003e26 <manageStateMachine+0x832>
    	break;
 8003e20:	bf00      	nop
 8003e22:	e000      	b.n	8003e26 <manageStateMachine+0x832>
      break;
 8003e24:	bf00      	nop
  }

	if((GPIO_PIN_SET==HAL_GPIO_ReadPin(Safety_ON_GPIO_Port,Safety_ON_Pin)) && (currentState !=PRODUCTION_TEST))
 8003e26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e2a:	4818      	ldr	r0, [pc, #96]	; (8003e8c <manageStateMachine+0x898>)
 8003e2c:	f002 f81c 	bl	8005e68 <HAL_GPIO_ReadPin>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d110      	bne.n	8003e58 <manageStateMachine+0x864>
 8003e36:	4b14      	ldr	r3, [pc, #80]	; (8003e88 <manageStateMachine+0x894>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b0c      	cmp	r3, #12
 8003e3c:	d00c      	beq.n	8003e58 <manageStateMachine+0x864>
	{
		uint32_t kerneltime = osKernelSysTick();
 8003e3e:	f006 fee4 	bl	800ac0a <osKernelSysTick>
 8003e42:	60f8      	str	r0, [r7, #12]
		if ((Safetydebounce_ms+100) < kerneltime)
 8003e44:	4b12      	ldr	r3, [pc, #72]	; (8003e90 <manageStateMachine+0x89c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3364      	adds	r3, #100	; 0x64
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d921      	bls.n	8003e94 <manageStateMachine+0x8a0>
		{
			nextState = SAFETY; //force the safety state
 8003e50:	230b      	movs	r3, #11
 8003e52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	{
 8003e56:	e01d      	b.n	8003e94 <manageStateMachine+0x8a0>
		}
	}
	else
	{
		Safetydebounce_ms = osKernelSysTick();
 8003e58:	f006 fed7 	bl	800ac0a <osKernelSysTick>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	4a0c      	ldr	r2, [pc, #48]	; (8003e90 <manageStateMachine+0x89c>)
 8003e60:	6013      	str	r3, [r2, #0]
 8003e62:	e018      	b.n	8003e96 <manageStateMachine+0x8a2>
 8003e64:	20000154 	.word	0x20000154
 8003e68:	20000150 	.word	0x20000150
 8003e6c:	2000015c 	.word	0x2000015c
 8003e70:	20000149 	.word	0x20000149
 8003e74:	20000004 	.word	0x20000004
 8003e78:	2000001c 	.word	0x2000001c
 8003e7c:	20000630 	.word	0x20000630
 8003e80:	2000066c 	.word	0x2000066c
 8003e84:	000493df 	.word	0x000493df
 8003e88:	20000148 	.word	0x20000148
 8003e8c:	40010c00 	.word	0x40010c00
 8003e90:	20000670 	.word	0x20000670
	{
 8003e94:	bf00      	nop
	}

  /* Perform superstate action's */
  switch (currentState) {
 8003e96:	4b36      	ldr	r3, [pc, #216]	; (8003f70 <manageStateMachine+0x97c>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d034      	beq.n	8003f08 <manageStateMachine+0x914>
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	dd02      	ble.n	8003ea8 <manageStateMachine+0x8b4>
 8003ea2:	3b0a      	subs	r3, #10
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d92f      	bls.n	8003f08 <manageStateMachine+0x914>

    default:
	if ((baffleTemperature > TemperatureParam.OverheatBaffle) || (rearTemperature > TemperatureParam.OverheatChamber) || (Algo_getPlenumTemp()>TemperatureParam.OverheatPlenum)) {
 8003ea8:	f643 2398 	movw	r3, #15000	; 0x3a98
 8003eac:	461a      	mov	r2, r3
 8003eae:	4b31      	ldr	r3, [pc, #196]	; (8003f74 <manageStateMachine+0x980>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	db0d      	blt.n	8003ed2 <manageStateMachine+0x8de>
 8003eb6:	f243 23c8 	movw	r3, #13000	; 0x32c8
 8003eba:	461a      	mov	r2, r3
 8003ebc:	4b2e      	ldr	r3, [pc, #184]	; (8003f78 <manageStateMachine+0x984>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	db06      	blt.n	8003ed2 <manageStateMachine+0x8de>
 8003ec4:	f000 f912 	bl	80040ec <Algo_getPlenumTemp>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	f640 0298 	movw	r2, #2200	; 0x898
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	dd02      	ble.n	8003ed8 <manageStateMachine+0x8e4>
		nextState = OVERTEMP;
 8003ed2:	230a      	movs	r3, #10
 8003ed4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}
	if(currentState != RELOAD_IGNITION)
 8003ed8:	4b25      	ldr	r3, [pc, #148]	; (8003f70 <manageStateMachine+0x97c>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d015      	beq.n	8003f0c <manageStateMachine+0x918>
	{
		if ((baffleTemperature < ColdStoveTemp) && (rearTemperature < ColdStoveTemp) && timeSinceStateEntry > MINUTES(1)) {
 8003ee0:	4b24      	ldr	r3, [pc, #144]	; (8003f74 <manageStateMachine+0x980>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8003ee8:	da10      	bge.n	8003f0c <manageStateMachine+0x918>
 8003eea:	4b23      	ldr	r3, [pc, #140]	; (8003f78 <manageStateMachine+0x984>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8003ef2:	da0b      	bge.n	8003f0c <manageStateMachine+0x918>
 8003ef4:	4b21      	ldr	r3, [pc, #132]	; (8003f7c <manageStateMachine+0x988>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d905      	bls.n	8003f0c <manageStateMachine+0x918>
		nextState = WAITING;
 8003f00:	2301      	movs	r3, #1
 8003f02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}
	}
      break;
 8003f06:	e001      	b.n	8003f0c <manageStateMachine+0x918>
    //case RELOAD_IGNITION:
    case OVERTEMP:
    case SAFETY:
    case PRODUCTION_TEST:
      /* do nothing */
      break;
 8003f08:	bf00      	nop
 8003f0a:	e000      	b.n	8003f0e <manageStateMachine+0x91a>
      break;
 8003f0c:	bf00      	nop
  }
  if(Algo_getInterlockRequest() && (currentState !=PRODUCTION_TEST))
 8003f0e:	f000 f93f 	bl	8004190 <Algo_getInterlockRequest>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d006      	beq.n	8003f26 <manageStateMachine+0x932>
 8003f18:	4b15      	ldr	r3, [pc, #84]	; (8003f70 <manageStateMachine+0x97c>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	2b0c      	cmp	r3, #12
 8003f1e:	d002      	beq.n	8003f26 <manageStateMachine+0x932>
  {
  		nextState = WAITING;
 8003f20:	2301      	movs	r3, #1
 8003f22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  if (nextState != currentState) {
 8003f26:	4b12      	ldr	r3, [pc, #72]	; (8003f70 <manageStateMachine+0x97c>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d01a      	beq.n	8003f68 <manageStateMachine+0x974>

	if ((currentState == COMBUSTION_HIGH  && nextState == COMBUSTION_LOW) || (currentState == COMBUSTION_LOW && nextState == COMBUSTION_HIGH))
 8003f32:	4b0f      	ldr	r3, [pc, #60]	; (8003f70 <manageStateMachine+0x97c>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b06      	cmp	r3, #6
 8003f38:	d103      	bne.n	8003f42 <manageStateMachine+0x94e>
 8003f3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d00a      	beq.n	8003f58 <manageStateMachine+0x964>
 8003f42:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <manageStateMachine+0x97c>)
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d103      	bne.n	8003f52 <manageStateMachine+0x95e>
 8003f4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003f4e:	2b06      	cmp	r3, #6
 8003f50:	d002      	beq.n	8003f58 <manageStateMachine+0x964>
	{
		//do not update the state stateChangeTimeRef
	}
	else
	{
	    stateChangeTimeRef = currentTime_ms;
 8003f52:	4a0b      	ldr	r2, [pc, #44]	; (8003f80 <manageStateMachine+0x98c>)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6013      	str	r3, [r2, #0]
	}
	historyState = currentState;
 8003f58:	4b05      	ldr	r3, [pc, #20]	; (8003f70 <manageStateMachine+0x97c>)
 8003f5a:	781a      	ldrb	r2, [r3, #0]
 8003f5c:	4b09      	ldr	r3, [pc, #36]	; (8003f84 <manageStateMachine+0x990>)
 8003f5e:	701a      	strb	r2, [r3, #0]
    currentState = nextState;
 8003f60:	4a03      	ldr	r2, [pc, #12]	; (8003f70 <manageStateMachine+0x97c>)
 8003f62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003f66:	7013      	strb	r3, [r2, #0]
  }
}
 8003f68:	bf00      	nop
 8003f6a:	3738      	adds	r7, #56	; 0x38
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bdb0      	pop	{r4, r5, r7, pc}
 8003f70:	20000148 	.word	0x20000148
 8003f74:	20000150 	.word	0x20000150
 8003f78:	20000154 	.word	0x20000154
 8003f7c:	20000630 	.word	0x20000630
 8003f80:	20000660 	.word	0x20000660
 8003f84:	2000066c 	.word	0x2000066c

08003f88 <Algo_task>:

void Algo_task(uint32_t currentTime_ms) {
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]

  manageStateMachine(currentTime_ms);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f7ff fb2f 	bl	80035f4 <manageStateMachine>
//  managePlenumSpeed(Algo_getPlenumTemp(),Algo_getThermostatRequest(),currentTime_ms);

  if(Algo_getState()!= PRODUCTION_TEST)
 8003f96:	f000 f85b 	bl	8004050 <Algo_getState>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b0c      	cmp	r3, #12
 8003f9e:	d00b      	beq.n	8003fb8 <Algo_task+0x30>
  {
	  AirInput_task( &primary, currentTime_ms);
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	4807      	ldr	r0, [pc, #28]	; (8003fc0 <Algo_task+0x38>)
 8003fa4:	f7ff faa2 	bl	80034ec <AirInput_task>
	  AirInput_task( &grill, currentTime_ms);
 8003fa8:	6879      	ldr	r1, [r7, #4]
 8003faa:	4806      	ldr	r0, [pc, #24]	; (8003fc4 <Algo_task+0x3c>)
 8003fac:	f7ff fa9e 	bl	80034ec <AirInput_task>
	  AirInput_task( &secondary, currentTime_ms);
 8003fb0:	6879      	ldr	r1, [r7, #4]
 8003fb2:	4805      	ldr	r0, [pc, #20]	; (8003fc8 <Algo_task+0x40>)
 8003fb4:	f7ff fa9a 	bl	80034ec <AirInput_task>
  }
}
 8003fb8:	bf00      	nop
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	20000004 	.word	0x20000004
 8003fc4:	2000001c 	.word	0x2000001c
 8003fc8:	20000034 	.word	0x20000034

08003fcc <Algo_getBaffleTempSlope>:

void Algo_setSimulatorMode( bool active) {
  simulatorMode = active;
}

float Algo_getBaffleTempSlope() {
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
  return Algo_slopeBaffleTemp;
 8003fd0:	4b02      	ldr	r3, [pc, #8]	; (8003fdc <Algo_getBaffleTempSlope+0x10>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bc80      	pop	{r7}
 8003fda:	4770      	bx	lr
 8003fdc:	2000062c 	.word	0x2000062c

08003fe0 <computeSlopeBaffleTemp>:

/* Returns temperature slope in [*C / s] */
static float computeSlopeBaffleTemp(unsigned int nbData) {
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  if (simulatorMode)
 8003fe8:	4b0c      	ldr	r3, [pc, #48]	; (800401c <computeSlopeBaffleTemp+0x3c>)
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d002      	beq.n	8003ff6 <computeSlopeBaffleTemp+0x16>
  {
    return Algo_Simulator_slopeBaffleTemp;
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <computeSlopeBaffleTemp+0x40>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	e00e      	b.n	8004014 <computeSlopeBaffleTemp+0x34>
  }
  else
  {
	Algo_slopeBaffleTemp = Slope_compute(&slopeBaffleTemp, nbData) / 10.0;
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	480a      	ldr	r0, [pc, #40]	; (8004024 <computeSlopeBaffleTemp+0x44>)
 8003ffa:	f000 fe51 	bl	8004ca0 <Slope_compute>
 8003ffe:	4603      	mov	r3, r0
 8004000:	4909      	ldr	r1, [pc, #36]	; (8004028 <computeSlopeBaffleTemp+0x48>)
 8004002:	4618      	mov	r0, r3
 8004004:	f7fc ffb2 	bl	8000f6c <__aeabi_fdiv>
 8004008:	4603      	mov	r3, r0
 800400a:	461a      	mov	r2, r3
 800400c:	4b07      	ldr	r3, [pc, #28]	; (800402c <computeSlopeBaffleTemp+0x4c>)
 800400e:	601a      	str	r2, [r3, #0]
    return Algo_slopeBaffleTemp;
 8004010:	4b06      	ldr	r3, [pc, #24]	; (800402c <computeSlopeBaffleTemp+0x4c>)
 8004012:	681b      	ldr	r3, [r3, #0]
  }
}
 8004014:	4618      	mov	r0, r3
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	20000610 	.word	0x20000610
 8004020:	20000628 	.word	0x20000628
 8004024:	20000614 	.word	0x20000614
 8004028:	41200000 	.word	0x41200000
 800402c:	2000062c 	.word	0x2000062c

08004030 <Algo_setState>:

void Algo_setState(State state) {
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	4603      	mov	r3, r0
 8004038:	71fb      	strb	r3, [r7, #7]
  //if (simulatorMode) {
    currentState = state;
 800403a:	4a04      	ldr	r2, [pc, #16]	; (800404c <Algo_setState+0x1c>)
 800403c:	79fb      	ldrb	r3, [r7, #7]
 800403e:	7013      	strb	r3, [r2, #0]
  //}
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	20000148 	.word	0x20000148

08004050 <Algo_getState>:

State Algo_getState() {
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  return currentState;
 8004054:	4b02      	ldr	r3, [pc, #8]	; (8004060 <Algo_getState+0x10>)
 8004056:	781b      	ldrb	r3, [r3, #0]
}
 8004058:	4618      	mov	r0, r3
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr
 8004060:	20000148 	.word	0x20000148

08004064 <Algo_setBaffleTemp>:
uint32_t getStateTime(){
  return timeSinceStateEntry;
}

void Algo_setBaffleTemp(int temp) {
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  baffleTemperature = temp;
 800406c:	4a05      	ldr	r2, [pc, #20]	; (8004084 <Algo_setBaffleTemp+0x20>)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6013      	str	r3, [r2, #0]
  Slope_addData(&slopeBaffleTemp, temp);
 8004072:	6879      	ldr	r1, [r7, #4]
 8004074:	4804      	ldr	r0, [pc, #16]	; (8004088 <Algo_setBaffleTemp+0x24>)
 8004076:	f000 fde8 	bl	8004c4a <Slope_addData>
}
 800407a:	bf00      	nop
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	20000150 	.word	0x20000150
 8004088:	20000614 	.word	0x20000614

0800408c <Algo_setRearTemp>:

void Algo_setRearTemp(int temp) {
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  rearTemperature = temp;
 8004094:	4a03      	ldr	r2, [pc, #12]	; (80040a4 <Algo_setRearTemp+0x18>)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6013      	str	r3, [r2, #0]
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	bc80      	pop	{r7}
 80040a2:	4770      	bx	lr
 80040a4:	20000154 	.word	0x20000154

080040a8 <Algo_getRearTemp>:
int Algo_getRearTemp() {
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
  return rearTemperature;
 80040ac:	4b02      	ldr	r3, [pc, #8]	; (80040b8 <Algo_getRearTemp+0x10>)
 80040ae:	681b      	ldr	r3, [r3, #0]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bc80      	pop	{r7}
 80040b6:	4770      	bx	lr
 80040b8:	20000154 	.word	0x20000154

080040bc <Algo_getBaffleTemp>:

int Algo_getBaffleTemp() {
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  return baffleTemperature;
 80040c0:	4b02      	ldr	r3, [pc, #8]	; (80040cc <Algo_getBaffleTemp+0x10>)
 80040c2:	681b      	ldr	r3, [r3, #0]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bc80      	pop	{r7}
 80040ca:	4770      	bx	lr
 80040cc:	20000150 	.word	0x20000150

080040d0 <Algo_setPlenumTemp>:

void Algo_setPlenumTemp(int temp) {
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  plenumTemp = temp;
 80040d8:	4a03      	ldr	r2, [pc, #12]	; (80040e8 <Algo_setPlenumTemp+0x18>)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6013      	str	r3, [r2, #0]
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bc80      	pop	{r7}
 80040e6:	4770      	bx	lr
 80040e8:	20000158 	.word	0x20000158

080040ec <Algo_getPlenumTemp>:
int Algo_getPlenumTemp() {
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  return plenumTemp;
 80040f0:	4b02      	ldr	r3, [pc, #8]	; (80040fc <Algo_getPlenumTemp+0x10>)
 80040f2:	681b      	ldr	r3, [r3, #0]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bc80      	pop	{r7}
 80040fa:	4770      	bx	lr
 80040fc:	20000158 	.word	0x20000158

08004100 <Algo_getPrimary>:

int Algo_getPrimary() {
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  return AirInput_getAperture(&primary);
 8004104:	4802      	ldr	r0, [pc, #8]	; (8004110 <Algo_getPrimary+0x10>)
 8004106:	f7ff f9ae 	bl	8003466 <AirInput_getAperture>
 800410a:	4603      	mov	r3, r0
}
 800410c:	4618      	mov	r0, r3
 800410e:	bd80      	pop	{r7, pc}
 8004110:	20000004 	.word	0x20000004

08004114 <Algo_getGrill>:

int Algo_getGrill() {
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  return AirInput_getAperture(&grill);
 8004118:	4802      	ldr	r0, [pc, #8]	; (8004124 <Algo_getGrill+0x10>)
 800411a:	f7ff f9a4 	bl	8003466 <AirInput_getAperture>
 800411e:	4603      	mov	r3, r0
}
 8004120:	4618      	mov	r0, r3
 8004122:	bd80      	pop	{r7, pc}
 8004124:	2000001c 	.word	0x2000001c

08004128 <Algo_getSecondary>:

int Algo_getSecondary() {
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
	return AirInput_getAperture(&secondary);
 800412c:	4802      	ldr	r0, [pc, #8]	; (8004138 <Algo_getSecondary+0x10>)
 800412e:	f7ff f99a 	bl	8003466 <AirInput_getAperture>
 8004132:	4603      	mov	r3, r0
}
 8004134:	4618      	mov	r0, r3
 8004136:	bd80      	pop	{r7, pc}
 8004138:	20000034 	.word	0x20000034

0800413c <Algo_setThermostatRequest>:

Algo_DELState Algo_getStateFermeturePorte() {
  return delFermeturePorte;
}

void Algo_setThermostatRequest(bool demand) {
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	4603      	mov	r3, r0
 8004144:	71fb      	strb	r3, [r7, #7]
  thermostatRequest = demand;
 8004146:	4a04      	ldr	r2, [pc, #16]	; (8004158 <Algo_setThermostatRequest+0x1c>)
 8004148:	79fb      	ldrb	r3, [r7, #7]
 800414a:	7013      	strb	r3, [r2, #0]
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	bc80      	pop	{r7}
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	2000015c 	.word	0x2000015c

0800415c <Algo_getThermostatRequest>:
bool Algo_getThermostatRequest() {
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
  return thermostatRequest;
 8004160:	4b02      	ldr	r3, [pc, #8]	; (800416c <Algo_getThermostatRequest+0x10>)
 8004162:	781b      	ldrb	r3, [r3, #0]
}
 8004164:	4618      	mov	r0, r3
 8004166:	46bd      	mov	sp, r7
 8004168:	bc80      	pop	{r7}
 800416a:	4770      	bx	lr
 800416c:	2000015c 	.word	0x2000015c

08004170 <Algo_setInterlockRequest>:
void Algo_setInterlockRequest(bool demand) {
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	4603      	mov	r3, r0
 8004178:	71fb      	strb	r3, [r7, #7]
	interlockRequest = demand;
 800417a:	4a04      	ldr	r2, [pc, #16]	; (800418c <Algo_setInterlockRequest+0x1c>)
 800417c:	79fb      	ldrb	r3, [r7, #7]
 800417e:	7013      	strb	r3, [r2, #0]
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	bc80      	pop	{r7}
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	2000015d 	.word	0x2000015d

08004190 <Algo_getInterlockRequest>:
bool Algo_getInterlockRequest() {
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  return interlockRequest;
 8004194:	4b02      	ldr	r3, [pc, #8]	; (80041a0 <Algo_getInterlockRequest+0x10>)
 8004196:	781b      	ldrb	r3, [r3, #0]
}
 8004198:	4618      	mov	r0, r3
 800419a:	46bd      	mov	sp, r7
 800419c:	bc80      	pop	{r7}
 800419e:	4770      	bx	lr
 80041a0:	2000015d 	.word	0x2000015d

080041a4 <Algo_startChargement>:

void Algo_startChargement(uint32_t currentTime_ms) {
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  reloadingEvent = true;
 80041ac:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <Algo_startChargement+0x24>)
 80041ae:	2201      	movs	r2, #1
 80041b0:	701a      	strb	r2, [r3, #0]
  fanPauseRequired = true;
 80041b2:	4b06      	ldr	r3, [pc, #24]	; (80041cc <Algo_startChargement+0x28>)
 80041b4:	2201      	movs	r2, #1
 80041b6:	701a      	strb	r2, [r3, #0]
  TimeOfReloadRequest = currentTime_ms;
 80041b8:	4a05      	ldr	r2, [pc, #20]	; (80041d0 <Algo_startChargement+0x2c>)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6013      	str	r3, [r2, #0]
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bc80      	pop	{r7}
 80041c6:	4770      	bx	lr
 80041c8:	20000149 	.word	0x20000149
 80041cc:	2000014a 	.word	0x2000014a
 80041d0:	20000634 	.word	0x20000634

080041d4 <computeAjustement>:

void Algo_clearReloadRequest() {
  reloadingEvent = false;
}

static int computeAjustement( int tempTarget_tenthF, float dTempAvant_FperS) {
 80041d4:	b5b0      	push	{r4, r5, r7, lr}
 80041d6:	b08e      	sub	sp, #56	; 0x38
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]

  //                  [line][column]
  const int adjustment[3][3] = {
 80041de:	4b23      	ldr	r3, [pc, #140]	; (800426c <computeAjustement+0x98>)
 80041e0:	f107 040c 	add.w	r4, r7, #12
 80041e4:	461d      	mov	r5, r3
 80041e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041ee:	682b      	ldr	r3, [r5, #0]
 80041f0:	6023      	str	r3, [r4, #0]
  };

  unsigned int line;
  unsigned int column;

  if (baffleTemperature > (tempTarget_tenthF + 50)) {
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80041f8:	4b1d      	ldr	r3, [pc, #116]	; (8004270 <computeAjustement+0x9c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	da02      	bge.n	8004206 <computeAjustement+0x32>
    line = 0;
 8004200:	2300      	movs	r3, #0
 8004202:	637b      	str	r3, [r7, #52]	; 0x34
 8004204:	e00b      	b.n	800421e <computeAjustement+0x4a>
  } else if (baffleTemperature >= (tempTarget_tenthF - 50)) {
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f1a3 0232 	sub.w	r2, r3, #50	; 0x32
 800420c:	4b18      	ldr	r3, [pc, #96]	; (8004270 <computeAjustement+0x9c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	429a      	cmp	r2, r3
 8004212:	dc02      	bgt.n	800421a <computeAjustement+0x46>
    line = 1;
 8004214:	2301      	movs	r3, #1
 8004216:	637b      	str	r3, [r7, #52]	; 0x34
 8004218:	e001      	b.n	800421e <computeAjustement+0x4a>
  } else {
    line = 2;
 800421a:	2302      	movs	r3, #2
 800421c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if (dTempAvant_FperS < -6.0) {
 800421e:	4915      	ldr	r1, [pc, #84]	; (8004274 <computeAjustement+0xa0>)
 8004220:	6838      	ldr	r0, [r7, #0]
 8004222:	f7fc ff8d 	bl	8001140 <__aeabi_fcmplt>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d002      	beq.n	8004232 <computeAjustement+0x5e>
    column = 0;
 800422c:	2300      	movs	r3, #0
 800422e:	633b      	str	r3, [r7, #48]	; 0x30
 8004230:	e00b      	b.n	800424a <computeAjustement+0x76>
  } else if (dTempAvant_FperS <= 6.0) {
 8004232:	4911      	ldr	r1, [pc, #68]	; (8004278 <computeAjustement+0xa4>)
 8004234:	6838      	ldr	r0, [r7, #0]
 8004236:	f7fc ff8d 	bl	8001154 <__aeabi_fcmple>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <computeAjustement+0x72>
    column = 1;
 8004240:	2301      	movs	r3, #1
 8004242:	633b      	str	r3, [r7, #48]	; 0x30
 8004244:	e001      	b.n	800424a <computeAjustement+0x76>
  } else {
    column = 2;
 8004246:	2302      	movs	r3, #2
 8004248:	633b      	str	r3, [r7, #48]	; 0x30
  }

  return adjustment[line][column];
 800424a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800424c:	4613      	mov	r3, r2
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	4413      	add	r3, r2
 8004252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004254:	4413      	add	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800425c:	4413      	add	r3, r2
 800425e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3738      	adds	r7, #56	; 0x38
 8004266:	46bd      	mov	sp, r7
 8004268:	bdb0      	pop	{r4, r5, r7, pc}
 800426a:	bf00      	nop
 800426c:	0800ff64 	.word	0x0800ff64
 8004270:	20000150 	.word	0x20000150
 8004274:	c0c00000 	.word	0xc0c00000
 8004278:	40c00000 	.word	0x40c00000

0800427c <AirAdjustment>:

void AirAdjustment(int adjustement, const uint32_t secondPerStep, /// Insérer la gestion du secondaire dans cette fonction
		const uint8_t MinPrimary, const uint8_t MaxPrimary,
		const uint8_t MinGrill, const uint8_t MaxGrill,
		const uint8_t MinSecondary, const uint8_t MaxSecondary)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	4611      	mov	r1, r2
 8004288:	461a      	mov	r2, r3
 800428a:	460b      	mov	r3, r1
 800428c:	71fb      	strb	r3, [r7, #7]
 800428e:	4613      	mov	r3, r2
 8004290:	71bb      	strb	r3, [r7, #6]
	if (adjustement > 0)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	dd19      	ble.n	80042cc <AirAdjustment+0x50>
	{
		if (AirInput_getAperture(&primary) >= MaxPrimary)
 8004298:	481c      	ldr	r0, [pc, #112]	; (800430c <AirAdjustment+0x90>)
 800429a:	f7ff f8e4 	bl	8003466 <AirInput_getAperture>
 800429e:	4602      	mov	r2, r0
 80042a0:	79bb      	ldrb	r3, [r7, #6]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	db0c      	blt.n	80042c0 <AirAdjustment+0x44>
		{
			if (AirInput_getAperture(&grill) < MaxGrill)
 80042a6:	481a      	ldr	r0, [pc, #104]	; (8004310 <AirAdjustment+0x94>)
 80042a8:	f7ff f8dd 	bl	8003466 <AirInput_getAperture>
 80042ac:	4602      	mov	r2, r0
 80042ae:	7f3b      	ldrb	r3, [r7, #28]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	da27      	bge.n	8004304 <AirAdjustment+0x88>
			{
				AirInput_setAjustement(&grill, adjustement, secondPerStep);
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	68f9      	ldr	r1, [r7, #12]
 80042b8:	4815      	ldr	r0, [pc, #84]	; (8004310 <AirAdjustment+0x94>)
 80042ba:	f7ff f8f1 	bl	80034a0 <AirInput_setAjustement>
				AirInput_setAjustement(&primary, adjustement, secondPerStep);
			}
		}
	}
	/*else{do nothing} air setting doesn't need further adjustment*/
}
 80042be:	e021      	b.n	8004304 <AirAdjustment+0x88>
			AirInput_setAjustement(&primary, adjustement, secondPerStep);
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	68f9      	ldr	r1, [r7, #12]
 80042c4:	4811      	ldr	r0, [pc, #68]	; (800430c <AirAdjustment+0x90>)
 80042c6:	f7ff f8eb 	bl	80034a0 <AirInput_setAjustement>
}
 80042ca:	e01b      	b.n	8004304 <AirAdjustment+0x88>
	else if (adjustement < 0)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	da18      	bge.n	8004304 <AirAdjustment+0x88>
		if (AirInput_getAperture(&grill) > MinGrill)
 80042d2:	480f      	ldr	r0, [pc, #60]	; (8004310 <AirAdjustment+0x94>)
 80042d4:	f7ff f8c7 	bl	8003466 <AirInput_getAperture>
 80042d8:	4602      	mov	r2, r0
 80042da:	7e3b      	ldrb	r3, [r7, #24]
 80042dc:	429a      	cmp	r2, r3
 80042de:	dd05      	ble.n	80042ec <AirAdjustment+0x70>
			AirInput_setAjustement(&grill, adjustement, secondPerStep);
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	68f9      	ldr	r1, [r7, #12]
 80042e4:	480a      	ldr	r0, [pc, #40]	; (8004310 <AirAdjustment+0x94>)
 80042e6:	f7ff f8db 	bl	80034a0 <AirInput_setAjustement>
}
 80042ea:	e00b      	b.n	8004304 <AirAdjustment+0x88>
			if(AirInput_getAperture(&primary) > MinPrimary)
 80042ec:	4807      	ldr	r0, [pc, #28]	; (800430c <AirAdjustment+0x90>)
 80042ee:	f7ff f8ba 	bl	8003466 <AirInput_getAperture>
 80042f2:	4602      	mov	r2, r0
 80042f4:	79fb      	ldrb	r3, [r7, #7]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	dd04      	ble.n	8004304 <AirAdjustment+0x88>
				AirInput_setAjustement(&primary, adjustement, secondPerStep);
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	68f9      	ldr	r1, [r7, #12]
 80042fe:	4803      	ldr	r0, [pc, #12]	; (800430c <AirAdjustment+0x90>)
 8004300:	f7ff f8ce 	bl	80034a0 <AirInput_setAjustement>
}
 8004304:	bf00      	nop
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	20000004 	.word	0x20000004
 8004310:	2000001c 	.word	0x2000001c

08004314 <StateEntryControlAdjustment>:


void StateEntryControlAdjustment(const uint8_t MinPrimary, const uint8_t MaxPrimary, /// Insérer la gestion du secondaire dans cette fonction
		const uint8_t MinGrill, const uint8_t MaxGrill,
		const uint8_t MinSecondary, const uint8_t MaxSecondary)
{
 8004314:	b590      	push	{r4, r7, lr}
 8004316:	b089      	sub	sp, #36	; 0x24
 8004318:	af04      	add	r7, sp, #16
 800431a:	4604      	mov	r4, r0
 800431c:	4608      	mov	r0, r1
 800431e:	4611      	mov	r1, r2
 8004320:	461a      	mov	r2, r3
 8004322:	4623      	mov	r3, r4
 8004324:	71fb      	strb	r3, [r7, #7]
 8004326:	4603      	mov	r3, r0
 8004328:	71bb      	strb	r3, [r7, #6]
 800432a:	460b      	mov	r3, r1
 800432c:	717b      	strb	r3, [r7, #5]
 800432e:	4613      	mov	r3, r2
 8004330:	713b      	strb	r3, [r7, #4]
	int aperture = AirInput_getAperture(&primary);
 8004332:	483a      	ldr	r0, [pc, #232]	; (800441c <StateEntryControlAdjustment+0x108>)
 8004334:	f7ff f897 	bl	8003466 <AirInput_getAperture>
 8004338:	60f8      	str	r0, [r7, #12]
	int apertureAdjustment = 0;
 800433a:	2300      	movs	r3, #0
 800433c:	60bb      	str	r3, [r7, #8]
	if (aperture >= MaxPrimary)
 800433e:	79bb      	ldrb	r3, [r7, #6]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	429a      	cmp	r2, r3
 8004344:	db15      	blt.n	8004372 <StateEntryControlAdjustment+0x5e>
	{
		apertureAdjustment = MaxPrimary - aperture;
 8004346:	79ba      	ldrb	r2, [r7, #6]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	60bb      	str	r3, [r7, #8]
		AirAdjustment(apertureAdjustment, 2, MinPrimary,MaxPrimary,
 800434e:	79b9      	ldrb	r1, [r7, #6]
 8004350:	79fa      	ldrb	r2, [r7, #7]
 8004352:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004356:	9303      	str	r3, [sp, #12]
 8004358:	f897 3020 	ldrb.w	r3, [r7, #32]
 800435c:	9302      	str	r3, [sp, #8]
 800435e:	793b      	ldrb	r3, [r7, #4]
 8004360:	9301      	str	r3, [sp, #4]
 8004362:	797b      	ldrb	r3, [r7, #5]
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	460b      	mov	r3, r1
 8004368:	2102      	movs	r1, #2
 800436a:	68b8      	ldr	r0, [r7, #8]
 800436c:	f7ff ff86 	bl	800427c <AirAdjustment>
 8004370:	e018      	b.n	80043a4 <StateEntryControlAdjustment+0x90>
				MinGrill,MaxGrill,
				MinSecondary, MaxSecondary);
	}
	else if (aperture <= MinPrimary)
 8004372:	79fb      	ldrb	r3, [r7, #7]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	429a      	cmp	r2, r3
 8004378:	dc14      	bgt.n	80043a4 <StateEntryControlAdjustment+0x90>
	{
		apertureAdjustment = MinPrimary - aperture;
 800437a:	79fa      	ldrb	r2, [r7, #7]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	60bb      	str	r3, [r7, #8]
		AirAdjustment(apertureAdjustment,2, MinPrimary, MaxPrimary,
 8004382:	79b9      	ldrb	r1, [r7, #6]
 8004384:	79fa      	ldrb	r2, [r7, #7]
 8004386:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800438a:	9303      	str	r3, [sp, #12]
 800438c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004390:	9302      	str	r3, [sp, #8]
 8004392:	793b      	ldrb	r3, [r7, #4]
 8004394:	9301      	str	r3, [sp, #4]
 8004396:	797b      	ldrb	r3, [r7, #5]
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	460b      	mov	r3, r1
 800439c:	2102      	movs	r1, #2
 800439e:	68b8      	ldr	r0, [r7, #8]
 80043a0:	f7ff ff6c 	bl	800427c <AirAdjustment>
				MinGrill,MaxGrill,
				MinSecondary,MaxSecondary);
	}

	aperture = AirInput_getAperture(&grill);
 80043a4:	481e      	ldr	r0, [pc, #120]	; (8004420 <StateEntryControlAdjustment+0x10c>)
 80043a6:	f7ff f85e 	bl	8003466 <AirInput_getAperture>
 80043aa:	60f8      	str	r0, [r7, #12]
	if (aperture >= MaxGrill)
 80043ac:	793b      	ldrb	r3, [r7, #4]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	db15      	blt.n	80043e0 <StateEntryControlAdjustment+0xcc>
	{
		apertureAdjustment = MaxGrill - aperture;
 80043b4:	793a      	ldrb	r2, [r7, #4]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	60bb      	str	r3, [r7, #8]
		AirAdjustment(apertureAdjustment,1, MinPrimary, MaxPrimary,
 80043bc:	79b9      	ldrb	r1, [r7, #6]
 80043be:	79fa      	ldrb	r2, [r7, #7]
 80043c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80043c4:	9303      	str	r3, [sp, #12]
 80043c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043ca:	9302      	str	r3, [sp, #8]
 80043cc:	793b      	ldrb	r3, [r7, #4]
 80043ce:	9301      	str	r3, [sp, #4]
 80043d0:	797b      	ldrb	r3, [r7, #5]
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	460b      	mov	r3, r1
 80043d6:	2101      	movs	r1, #1
 80043d8:	68b8      	ldr	r0, [r7, #8]
 80043da:	f7ff ff4f 	bl	800427c <AirAdjustment>
		apertureAdjustment = MinGrill - aperture;
		AirAdjustment(apertureAdjustment,1, MinPrimary, MaxPrimary,
				MinGrill, MaxGrill,
				MinSecondary, MaxSecondary);
	}
}
 80043de:	e018      	b.n	8004412 <StateEntryControlAdjustment+0xfe>
	else if (aperture <= MinGrill)
 80043e0:	797b      	ldrb	r3, [r7, #5]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	dc14      	bgt.n	8004412 <StateEntryControlAdjustment+0xfe>
		apertureAdjustment = MinGrill - aperture;
 80043e8:	797a      	ldrb	r2, [r7, #5]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	60bb      	str	r3, [r7, #8]
		AirAdjustment(apertureAdjustment,1, MinPrimary, MaxPrimary,
 80043f0:	79b9      	ldrb	r1, [r7, #6]
 80043f2:	79fa      	ldrb	r2, [r7, #7]
 80043f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80043f8:	9303      	str	r3, [sp, #12]
 80043fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043fe:	9302      	str	r3, [sp, #8]
 8004400:	793b      	ldrb	r3, [r7, #4]
 8004402:	9301      	str	r3, [sp, #4]
 8004404:	797b      	ldrb	r3, [r7, #5]
 8004406:	9300      	str	r3, [sp, #0]
 8004408:	460b      	mov	r3, r1
 800440a:	2101      	movs	r1, #1
 800440c:	68b8      	ldr	r0, [r7, #8]
 800440e:	f7ff ff35 	bl	800427c <AirAdjustment>
}
 8004412:	bf00      	nop
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	bd90      	pop	{r4, r7, pc}
 800441a:	bf00      	nop
 800441c:	20000004 	.word	0x20000004
 8004420:	2000001c 	.word	0x2000001c

08004424 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4a06      	ldr	r2, [pc, #24]	; (800444c <vApplicationGetIdleTaskMemory+0x28>)
 8004434:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	4a05      	ldr	r2, [pc, #20]	; (8004450 <vApplicationGetIdleTaskMemory+0x2c>)
 800443a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2280      	movs	r2, #128	; 0x80
 8004440:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8004442:	bf00      	nop
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr
 800444c:	20000674 	.word	0x20000674
 8004450:	200006c8 	.word	0x200006c8

08004454 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4a07      	ldr	r2, [pc, #28]	; (8004480 <vApplicationGetTimerTaskMemory+0x2c>)
 8004464:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	4a06      	ldr	r2, [pc, #24]	; (8004484 <vApplicationGetTimerTaskMemory+0x30>)
 800446a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004472:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8004474:	bf00      	nop
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	bc80      	pop	{r7}
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	200008c8 	.word	0x200008c8
 8004484:	2000091c 	.word	0x2000091c

08004488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004488:	b5b0      	push	{r4, r5, r7, lr}
 800448a:	b0ac      	sub	sp, #176	; 0xb0
 800448c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800448e:	f001 f819 	bl	80054c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004492:	f000 f8a9 	bl	80045e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004496:	f000 f9d9 	bl	800484c <MX_GPIO_Init>
  MX_I2C1_Init();
 800449a:	f000 f90b 	bl	80046b4 <MX_I2C1_Init>
  MX_RTC_Init();
 800449e:	f000 f937 	bl	8004710 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80044a2:	f000 f97f 	bl	80047a4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80044a6:	f000 f9a7 	bl	80047f8 <MX_USART3_UART_Init>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of Timer */
  osTimerDef(Timer, TimerCallback);
 80044aa:	4b41      	ldr	r3, [pc, #260]	; (80045b0 <main+0x128>)
 80044ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044b0:	2300      	movs	r3, #0
 80044b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  TimerHandle = osTimerCreate(osTimer(Timer), osTimerPeriodic, NULL);
 80044b6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80044ba:	2200      	movs	r2, #0
 80044bc:	2101      	movs	r1, #1
 80044be:	4618      	mov	r0, r3
 80044c0:	f006 fc14 	bl	800acec <osTimerCreate>
 80044c4:	4603      	mov	r3, r0
 80044c6:	4a3b      	ldr	r2, [pc, #236]	; (80045b4 <main+0x12c>)
 80044c8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80044ca:	4b3b      	ldr	r3, [pc, #236]	; (80045b8 <main+0x130>)
 80044cc:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80044d0:	461d      	mov	r5, r3
 80044d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80044da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80044de:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80044e2:	2100      	movs	r1, #0
 80044e4:	4618      	mov	r0, r3
 80044e6:	f006 fba0 	bl	800ac2a <osThreadCreate>
 80044ea:	4603      	mov	r3, r0
 80044ec:	4a33      	ldr	r2, [pc, #204]	; (80045bc <main+0x134>)
 80044ee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  osThreadDef(TemperatureMeas, TemperatureManager, osPriorityNormal, 0, 512); //TODO: Validate maximum stack needed adding printf end in Hard Fault handler
 80044f0:	4b33      	ldr	r3, [pc, #204]	; (80045c0 <main+0x138>)
 80044f2:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80044f6:	461d      	mov	r5, r3
 80044f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004500:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TemperatureMeasHandle = osThreadCreate(osThread(TemperatureMeas), NULL);
 8004504:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004508:	2100      	movs	r1, #0
 800450a:	4618      	mov	r0, r3
 800450c:	f006 fb8d 	bl	800ac2a <osThreadCreate>
 8004510:	4603      	mov	r3, r0
 8004512:	4a2c      	ldr	r2, [pc, #176]	; (80045c4 <main+0x13c>)
 8004514:	6013      	str	r3, [r2, #0]

  osThreadDef(StepperManagerT, Steppermanager, osPriorityNormal, 0, 128);
 8004516:	4b2c      	ldr	r3, [pc, #176]	; (80045c8 <main+0x140>)
 8004518:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800451c:	461d      	mov	r5, r3
 800451e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004522:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004526:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  StepperManagerTHandle = osThreadCreate(osThread(StepperManagerT), NULL);
 800452a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800452e:	2100      	movs	r1, #0
 8004530:	4618      	mov	r0, r3
 8004532:	f006 fb7a 	bl	800ac2a <osThreadCreate>
 8004536:	4603      	mov	r3, r0
 8004538:	4a24      	ldr	r2, [pc, #144]	; (80045cc <main+0x144>)
 800453a:	6013      	str	r3, [r2, #0]

  osThreadDef(DebugManagerT, DebugManager, osPriorityNormal, 0, 512);
 800453c:	4b24      	ldr	r3, [pc, #144]	; (80045d0 <main+0x148>)
 800453e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8004542:	461d      	mov	r5, r3
 8004544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004548:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800454c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DebugManagerTHandle = osThreadCreate(osThread(DebugManagerT), NULL);
 8004550:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004554:	2100      	movs	r1, #0
 8004556:	4618      	mov	r0, r3
 8004558:	f006 fb67 	bl	800ac2a <osThreadCreate>
 800455c:	4603      	mov	r3, r0
 800455e:	4a1d      	ldr	r2, [pc, #116]	; (80045d4 <main+0x14c>)
 8004560:	6013      	str	r3, [r2, #0]

  osThreadDef(HmiManagerT, HmiManager, osPriorityNormal, 0, 128);
 8004562:	4b1d      	ldr	r3, [pc, #116]	; (80045d8 <main+0x150>)
 8004564:	f107 041c 	add.w	r4, r7, #28
 8004568:	461d      	mov	r5, r3
 800456a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800456c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800456e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004572:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HmiManagerTHandle = osThreadCreate(osThread(HmiManagerT), NULL);
 8004576:	f107 031c 	add.w	r3, r7, #28
 800457a:	2100      	movs	r1, #0
 800457c:	4618      	mov	r0, r3
 800457e:	f006 fb54 	bl	800ac2a <osThreadCreate>
 8004582:	4603      	mov	r3, r0
 8004584:	4a15      	ldr	r2, [pc, #84]	; (80045dc <main+0x154>)
 8004586:	6013      	str	r3, [r2, #0]

  osThreadDef(ParticlesManagerT, ParticlesManager, osPriorityNormal, 0, 128);
 8004588:	4b15      	ldr	r3, [pc, #84]	; (80045e0 <main+0x158>)
 800458a:	463c      	mov	r4, r7
 800458c:	461d      	mov	r5, r3
 800458e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004592:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004596:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ParticlesManagerTHandle = osThreadCreate(osThread(ParticlesManagerT), NULL);
 800459a:	463b      	mov	r3, r7
 800459c:	2100      	movs	r1, #0
 800459e:	4618      	mov	r0, r3
 80045a0:	f006 fb43 	bl	800ac2a <osThreadCreate>
 80045a4:	4603      	mov	r3, r0
 80045a6:	4a0f      	ldr	r2, [pc, #60]	; (80045e4 <main+0x15c>)
 80045a8:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80045aa:	f006 fb27 	bl	800abfc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80045ae:	e7fe      	b.n	80045ae <main+0x126>
 80045b0:	08004bbd 	.word	0x08004bbd
 80045b4:	20003078 	.word	0x20003078
 80045b8:	0800ffe4 	.word	0x0800ffe4
 80045bc:	20002f88 	.word	0x20002f88
 80045c0:	08010000 	.word	0x08010000
 80045c4:	20003074 	.word	0x20003074
 80045c8:	0801001c 	.word	0x0801001c
 80045cc:	20003090 	.word	0x20003090
 80045d0:	08010038 	.word	0x08010038
 80045d4:	2000302c 	.word	0x2000302c
 80045d8:	08010054 	.word	0x08010054
 80045dc:	20003028 	.word	0x20003028
 80045e0:	08010070 	.word	0x08010070
 80045e4:	20002f84 	.word	0x20002f84

080045e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b09c      	sub	sp, #112	; 0x70
 80045ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80045ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80045f2:	2238      	movs	r2, #56	; 0x38
 80045f4:	2100      	movs	r1, #0
 80045f6:	4618      	mov	r0, r3
 80045f8:	f009 fc90 	bl	800df1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80045fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	605a      	str	r2, [r3, #4]
 8004606:	609a      	str	r2, [r3, #8]
 8004608:	60da      	str	r2, [r3, #12]
 800460a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800460c:	1d3b      	adds	r3, r7, #4
 800460e:	2220      	movs	r2, #32
 8004610:	2100      	movs	r1, #0
 8004612:	4618      	mov	r0, r3
 8004614:	f009 fc82 	bl	800df1c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004618:	2309      	movs	r3, #9
 800461a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800461c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004620:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004622:	2300      	movs	r3, #0
 8004624:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004626:	2301      	movs	r3, #1
 8004628:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800462a:	2301      	movs	r3, #1
 800462c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 800462e:	2300      	movs	r3, #0
 8004630:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004632:	2302      	movs	r3, #2
 8004634:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004636:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800463a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800463c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004640:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8004642:	2300      	movs	r3, #0
 8004644:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004646:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800464a:	4618      	mov	r0, r3
 800464c:	f003 fc24 	bl	8007e98 <HAL_RCC_OscConfig>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8004656:	f000 fad3 	bl	8004c00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800465a:	230f      	movs	r3, #15
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800465e:	2302      	movs	r3, #2
 8004660:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004662:	2300      	movs	r3, #0
 8004664:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800466a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800466c:	2300      	movs	r3, #0
 800466e:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004674:	2101      	movs	r1, #1
 8004676:	4618      	mov	r0, r3
 8004678:	f003 ff24 	bl	80084c4 <HAL_RCC_ClockConfig>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8004682:	f000 fabd 	bl	8004c00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004686:	2301      	movs	r3, #1
 8004688:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800468a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800468e:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004690:	1d3b      	adds	r3, r7, #4
 8004692:	4618      	mov	r0, r3
 8004694:	f004 f964 	bl	8008960 <HAL_RCCEx_PeriphCLKConfig>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800469e:	f000 faaf 	bl	8004c00 <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80046a2:	4b03      	ldr	r3, [pc, #12]	; (80046b0 <SystemClock_Config+0xc8>)
 80046a4:	2201      	movs	r2, #1
 80046a6:	601a      	str	r2, [r3, #0]
}
 80046a8:	bf00      	nop
 80046aa:	3770      	adds	r7, #112	; 0x70
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	42420070 	.word	0x42420070

080046b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80046b8:	4b12      	ldr	r3, [pc, #72]	; (8004704 <MX_I2C1_Init+0x50>)
 80046ba:	4a13      	ldr	r2, [pc, #76]	; (8004708 <MX_I2C1_Init+0x54>)
 80046bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80046be:	4b11      	ldr	r3, [pc, #68]	; (8004704 <MX_I2C1_Init+0x50>)
 80046c0:	4a12      	ldr	r2, [pc, #72]	; (800470c <MX_I2C1_Init+0x58>)
 80046c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80046c4:	4b0f      	ldr	r3, [pc, #60]	; (8004704 <MX_I2C1_Init+0x50>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80046ca:	4b0e      	ldr	r3, [pc, #56]	; (8004704 <MX_I2C1_Init+0x50>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80046d0:	4b0c      	ldr	r3, [pc, #48]	; (8004704 <MX_I2C1_Init+0x50>)
 80046d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80046d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80046d8:	4b0a      	ldr	r3, [pc, #40]	; (8004704 <MX_I2C1_Init+0x50>)
 80046da:	2200      	movs	r2, #0
 80046dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80046de:	4b09      	ldr	r3, [pc, #36]	; (8004704 <MX_I2C1_Init+0x50>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80046e4:	4b07      	ldr	r3, [pc, #28]	; (8004704 <MX_I2C1_Init+0x50>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80046ea:	4b06      	ldr	r3, [pc, #24]	; (8004704 <MX_I2C1_Init+0x50>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80046f0:	4804      	ldr	r0, [pc, #16]	; (8004704 <MX_I2C1_Init+0x50>)
 80046f2:	f001 fc01 	bl	8005ef8 <HAL_I2C_Init>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80046fc:	f000 fa80 	bl	8004c00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004700:	bf00      	nop
 8004702:	bd80      	pop	{r7, pc}
 8004704:	20002fd0 	.word	0x20002fd0
 8004708:	40005400 	.word	0x40005400
 800470c:	000186a0 	.word	0x000186a0

08004710 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004716:	1d3b      	adds	r3, r7, #4
 8004718:	2100      	movs	r1, #0
 800471a:	460a      	mov	r2, r1
 800471c:	801a      	strh	r2, [r3, #0]
 800471e:	460a      	mov	r2, r1
 8004720:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8004722:	2300      	movs	r3, #0
 8004724:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004726:	4b1d      	ldr	r3, [pc, #116]	; (800479c <MX_RTC_Init+0x8c>)
 8004728:	4a1d      	ldr	r2, [pc, #116]	; (80047a0 <MX_RTC_Init+0x90>)
 800472a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800472c:	4b1b      	ldr	r3, [pc, #108]	; (800479c <MX_RTC_Init+0x8c>)
 800472e:	f04f 32ff 	mov.w	r2, #4294967295
 8004732:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8004734:	4b19      	ldr	r3, [pc, #100]	; (800479c <MX_RTC_Init+0x8c>)
 8004736:	2200      	movs	r2, #0
 8004738:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800473a:	4818      	ldr	r0, [pc, #96]	; (800479c <MX_RTC_Init+0x8c>)
 800473c:	f004 fba6 	bl	8008e8c <HAL_RTC_Init>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 8004746:	f000 fa5b 	bl	8004c00 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800474a:	2300      	movs	r3, #0
 800474c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800474e:	2300      	movs	r3, #0
 8004750:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8004752:	2300      	movs	r3, #0
 8004754:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004756:	1d3b      	adds	r3, r7, #4
 8004758:	2201      	movs	r2, #1
 800475a:	4619      	mov	r1, r3
 800475c:	480f      	ldr	r0, [pc, #60]	; (800479c <MX_RTC_Init+0x8c>)
 800475e:	f004 fc2b 	bl	8008fb8 <HAL_RTC_SetTime>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8004768:	f000 fa4a 	bl	8004c00 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800476c:	2301      	movs	r3, #1
 800476e:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004770:	2301      	movs	r3, #1
 8004772:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8004774:	2301      	movs	r3, #1
 8004776:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8004778:	2300      	movs	r3, #0
 800477a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800477c:	463b      	mov	r3, r7
 800477e:	2201      	movs	r2, #1
 8004780:	4619      	mov	r1, r3
 8004782:	4806      	ldr	r0, [pc, #24]	; (800479c <MX_RTC_Init+0x8c>)
 8004784:	f004 fd88 	bl	8009298 <HAL_RTC_SetDate>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800478e:	f000 fa37 	bl	8004c00 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004792:	bf00      	nop
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	2000307c 	.word	0x2000307c
 80047a0:	40002800 	.word	0x40002800

080047a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80047a8:	4b11      	ldr	r3, [pc, #68]	; (80047f0 <MX_USART1_UART_Init+0x4c>)
 80047aa:	4a12      	ldr	r2, [pc, #72]	; (80047f4 <MX_USART1_UART_Init+0x50>)
 80047ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80047ae:	4b10      	ldr	r3, [pc, #64]	; (80047f0 <MX_USART1_UART_Init+0x4c>)
 80047b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80047b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80047b6:	4b0e      	ldr	r3, [pc, #56]	; (80047f0 <MX_USART1_UART_Init+0x4c>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80047bc:	4b0c      	ldr	r3, [pc, #48]	; (80047f0 <MX_USART1_UART_Init+0x4c>)
 80047be:	2200      	movs	r2, #0
 80047c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80047c2:	4b0b      	ldr	r3, [pc, #44]	; (80047f0 <MX_USART1_UART_Init+0x4c>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80047c8:	4b09      	ldr	r3, [pc, #36]	; (80047f0 <MX_USART1_UART_Init+0x4c>)
 80047ca:	220c      	movs	r2, #12
 80047cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047ce:	4b08      	ldr	r3, [pc, #32]	; (80047f0 <MX_USART1_UART_Init+0x4c>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80047d4:	4b06      	ldr	r3, [pc, #24]	; (80047f0 <MX_USART1_UART_Init+0x4c>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80047da:	4805      	ldr	r0, [pc, #20]	; (80047f0 <MX_USART1_UART_Init+0x4c>)
 80047dc:	f005 fb10 	bl	8009e00 <HAL_UART_Init>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80047e6:	f000 fa0b 	bl	8004c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80047ea:	bf00      	nop
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	20003030 	.word	0x20003030
 80047f4:	40013800 	.word	0x40013800

080047f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80047fc:	4b11      	ldr	r3, [pc, #68]	; (8004844 <MX_USART3_UART_Init+0x4c>)
 80047fe:	4a12      	ldr	r2, [pc, #72]	; (8004848 <MX_USART3_UART_Init+0x50>)
 8004800:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8004802:	4b10      	ldr	r3, [pc, #64]	; (8004844 <MX_USART3_UART_Init+0x4c>)
 8004804:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8004808:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800480a:	4b0e      	ldr	r3, [pc, #56]	; (8004844 <MX_USART3_UART_Init+0x4c>)
 800480c:	2200      	movs	r2, #0
 800480e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004810:	4b0c      	ldr	r3, [pc, #48]	; (8004844 <MX_USART3_UART_Init+0x4c>)
 8004812:	2200      	movs	r2, #0
 8004814:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004816:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <MX_USART3_UART_Init+0x4c>)
 8004818:	2200      	movs	r2, #0
 800481a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800481c:	4b09      	ldr	r3, [pc, #36]	; (8004844 <MX_USART3_UART_Init+0x4c>)
 800481e:	220c      	movs	r2, #12
 8004820:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004822:	4b08      	ldr	r3, [pc, #32]	; (8004844 <MX_USART3_UART_Init+0x4c>)
 8004824:	2200      	movs	r2, #0
 8004826:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004828:	4b06      	ldr	r3, [pc, #24]	; (8004844 <MX_USART3_UART_Init+0x4c>)
 800482a:	2200      	movs	r2, #0
 800482c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800482e:	4805      	ldr	r0, [pc, #20]	; (8004844 <MX_USART3_UART_Init+0x4c>)
 8004830:	f005 fae6 	bl	8009e00 <HAL_UART_Init>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800483a:	f000 f9e1 	bl	8004c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800483e:	bf00      	nop
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	20002f8c 	.word	0x20002f8c
 8004848:	40004800 	.word	0x40004800

0800484c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b088      	sub	sp, #32
 8004850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004852:	f107 0310 	add.w	r3, r7, #16
 8004856:	2200      	movs	r2, #0
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	605a      	str	r2, [r3, #4]
 800485c:	609a      	str	r2, [r3, #8]
 800485e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004860:	4b69      	ldr	r3, [pc, #420]	; (8004a08 <MX_GPIO_Init+0x1bc>)
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	4a68      	ldr	r2, [pc, #416]	; (8004a08 <MX_GPIO_Init+0x1bc>)
 8004866:	f043 0310 	orr.w	r3, r3, #16
 800486a:	6193      	str	r3, [r2, #24]
 800486c:	4b66      	ldr	r3, [pc, #408]	; (8004a08 <MX_GPIO_Init+0x1bc>)
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	f003 0310 	and.w	r3, r3, #16
 8004874:	60fb      	str	r3, [r7, #12]
 8004876:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004878:	4b63      	ldr	r3, [pc, #396]	; (8004a08 <MX_GPIO_Init+0x1bc>)
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	4a62      	ldr	r2, [pc, #392]	; (8004a08 <MX_GPIO_Init+0x1bc>)
 800487e:	f043 0320 	orr.w	r3, r3, #32
 8004882:	6193      	str	r3, [r2, #24]
 8004884:	4b60      	ldr	r3, [pc, #384]	; (8004a08 <MX_GPIO_Init+0x1bc>)
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	f003 0320 	and.w	r3, r3, #32
 800488c:	60bb      	str	r3, [r7, #8]
 800488e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004890:	4b5d      	ldr	r3, [pc, #372]	; (8004a08 <MX_GPIO_Init+0x1bc>)
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	4a5c      	ldr	r2, [pc, #368]	; (8004a08 <MX_GPIO_Init+0x1bc>)
 8004896:	f043 0304 	orr.w	r3, r3, #4
 800489a:	6193      	str	r3, [r2, #24]
 800489c:	4b5a      	ldr	r3, [pc, #360]	; (8004a08 <MX_GPIO_Init+0x1bc>)
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	607b      	str	r3, [r7, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80048a8:	4b57      	ldr	r3, [pc, #348]	; (8004a08 <MX_GPIO_Init+0x1bc>)
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	4a56      	ldr	r2, [pc, #344]	; (8004a08 <MX_GPIO_Init+0x1bc>)
 80048ae:	f043 0308 	orr.w	r3, r3, #8
 80048b2:	6193      	str	r3, [r2, #24]
 80048b4:	4b54      	ldr	r3, [pc, #336]	; (8004a08 <MX_GPIO_Init+0x1bc>)
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	f003 0308 	and.w	r3, r3, #8
 80048bc:	603b      	str	r3, [r7, #0]
 80048be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Step2_LowCurrent_Pin|uc_Stepper_Sleep_Pin|SPEED2_COIL_Pin|SPEED3_COIL_Pin
 80048c0:	2200      	movs	r2, #0
 80048c2:	f242 71d0 	movw	r1, #10192	; 0x27d0
 80048c6:	4851      	ldr	r0, [pc, #324]	; (8004a0c <MX_GPIO_Init+0x1c0>)
 80048c8:	f001 fae5 	bl	8005e96 <HAL_GPIO_WritePin>
                          |Step2_DIR_Pin|Step1_LowCurrent_Pin|Step2_STEP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Step3_RESET_Pin|STATUS_LED1_Pin|Step3_ENABLE_Pin|Step2_RESET_Pin
 80048cc:	2201      	movs	r2, #1
 80048ce:	f641 012c 	movw	r1, #6188	; 0x182c
 80048d2:	484e      	ldr	r0, [pc, #312]	; (8004a0c <MX_GPIO_Init+0x1c0>)
 80048d4:	f001 fadf 	bl	8005e96 <HAL_GPIO_WritePin>
                          |Step2_ENABLE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_ON_Pin|AFK_Var_Pin|USB_ENABLE_Pin, GPIO_PIN_RESET);
 80048d8:	2200      	movs	r2, #0
 80048da:	f248 0182 	movw	r1, #32898	; 0x8082
 80048de:	484c      	ldr	r0, [pc, #304]	; (8004a10 <MX_GPIO_Init+0x1c4>)
 80048e0:	f001 fad9 	bl	8005e96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STATUS_LED2_Pin|Step3_DIR_Pin|Button_LED_Pin, GPIO_PIN_SET);
 80048e4:	2201      	movs	r2, #1
 80048e6:	f44f 7198 	mov.w	r1, #304	; 0x130
 80048ea:	4849      	ldr	r0, [pc, #292]	; (8004a10 <MX_GPIO_Init+0x1c4>)
 80048ec:	f001 fad3 	bl	8005e96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Step3_STEP_Pin|Step3_LowCurrent_Pin|Stepper_HalfStep_Pin|Step1_STEP_Pin, GPIO_PIN_RESET);
 80048f0:	2200      	movs	r2, #0
 80048f2:	f248 010e 	movw	r1, #32782	; 0x800e
 80048f6:	4847      	ldr	r0, [pc, #284]	; (8004a14 <MX_GPIO_Init+0x1c8>)
 80048f8:	f001 facd 	bl	8005e96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Step1_DIR_GPIO_Port, Step1_DIR_Pin, GPIO_PIN_RESET);
 80048fc:	2200      	movs	r2, #0
 80048fe:	2104      	movs	r1, #4
 8004900:	4845      	ldr	r0, [pc, #276]	; (8004a18 <MX_GPIO_Init+0x1cc>)
 8004902:	f001 fac8 	bl	8005e96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Step1_RESET_Pin|Step1_ENABLE_Pin, GPIO_PIN_SET);
 8004906:	2201      	movs	r2, #1
 8004908:	2130      	movs	r1, #48	; 0x30
 800490a:	4842      	ldr	r0, [pc, #264]	; (8004a14 <MX_GPIO_Init+0x1c8>)
 800490c:	f001 fac3 	bl	8005e96 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Step2_LowCurrent_Pin Step3_RESET_Pin STATUS_LED1_Pin uc_Stepper_Sleep_Pin
                           Step3_ENABLE_Pin SPEED2_COIL_Pin SPEED3_COIL_Pin Step2_DIR_Pin
                           Step1_LowCurrent_Pin Step2_STEP_Pin Step2_RESET_Pin Step2_ENABLE_Pin */
  GPIO_InitStruct.Pin = Step2_LowCurrent_Pin|Step3_RESET_Pin|STATUS_LED1_Pin|uc_Stepper_Sleep_Pin
 8004910:	f643 73fc 	movw	r3, #16380	; 0x3ffc
 8004914:	613b      	str	r3, [r7, #16]
                          |Step3_ENABLE_Pin|SPEED2_COIL_Pin|SPEED3_COIL_Pin|Step2_DIR_Pin
                          |Step1_LowCurrent_Pin|Step2_STEP_Pin|Step2_RESET_Pin|Step2_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004916:	2301      	movs	r3, #1
 8004918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800491a:	2300      	movs	r3, #0
 800491c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800491e:	2302      	movs	r3, #2
 8004920:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004922:	f107 0310 	add.w	r3, r7, #16
 8004926:	4619      	mov	r1, r3
 8004928:	4838      	ldr	r0, [pc, #224]	; (8004a0c <MX_GPIO_Init+0x1c0>)
 800492a:	f001 f85d 	bl	80059e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_switch1_Pin Limit_switch2_Pin */
  GPIO_InitStruct.Pin = Limit_switch1_Pin|Limit_switch2_Pin;
 800492e:	2303      	movs	r3, #3
 8004930:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004932:	2300      	movs	r3, #0
 8004934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004936:	2300      	movs	r3, #0
 8004938:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800493a:	f107 0310 	add.w	r3, r7, #16
 800493e:	4619      	mov	r1, r3
 8004940:	4832      	ldr	r0, [pc, #200]	; (8004a0c <MX_GPIO_Init+0x1c0>)
 8004942:	f001 f851 	bl	80059e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_ON_Pin STATUS_LED2_Pin Step3_DIR_Pin AFK_Var_Pin
                           Button_LED_Pin USB_ENABLE_Pin */
  GPIO_InitStruct.Pin = Buzzer_ON_Pin|STATUS_LED2_Pin|Step3_DIR_Pin|AFK_Var_Pin
 8004946:	f248 13b2 	movw	r3, #33202	; 0x81b2
 800494a:	613b      	str	r3, [r7, #16]
                          |Button_LED_Pin|USB_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800494c:	2301      	movs	r3, #1
 800494e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004950:	2300      	movs	r3, #0
 8004952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004954:	2302      	movs	r3, #2
 8004956:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004958:	f107 0310 	add.w	r3, r7, #16
 800495c:	4619      	mov	r1, r3
 800495e:	482c      	ldr	r0, [pc, #176]	; (8004a10 <MX_GPIO_Init+0x1c4>)
 8004960:	f001 f842 	bl	80059e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004964:	2304      	movs	r3, #4
 8004966:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004968:	2302      	movs	r3, #2
 800496a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800496c:	2303      	movs	r3, #3
 800496e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004970:	f107 0310 	add.w	r3, r7, #16
 8004974:	4619      	mov	r1, r3
 8004976:	4826      	ldr	r0, [pc, #152]	; (8004a10 <MX_GPIO_Init+0x1c4>)
 8004978:	f001 f836 	bl	80059e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800497c:	2308      	movs	r3, #8
 800497e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004980:	2300      	movs	r3, #0
 8004982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004984:	2300      	movs	r3, #0
 8004986:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004988:	f107 0310 	add.w	r3, r7, #16
 800498c:	4619      	mov	r1, r3
 800498e:	4820      	ldr	r0, [pc, #128]	; (8004a10 <MX_GPIO_Init+0x1c4>)
 8004990:	f001 f82a 	bl	80059e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Limit_switch3_Pin */
  GPIO_InitStruct.Pin = Limit_switch3_Pin;
 8004994:	2340      	movs	r3, #64	; 0x40
 8004996:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004998:	2300      	movs	r3, #0
 800499a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800499c:	2300      	movs	r3, #0
 800499e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Limit_switch3_GPIO_Port, &GPIO_InitStruct);
 80049a0:	f107 0310 	add.w	r3, r7, #16
 80049a4:	4619      	mov	r1, r3
 80049a6:	481a      	ldr	r0, [pc, #104]	; (8004a10 <MX_GPIO_Init+0x1c4>)
 80049a8:	f001 f81e 	bl	80059e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_switch_Door_Pin Thermostat_Input_Pin Safety_ON_Pin Interlock_Input_Pin
                           Button_Input_Pin USB_Fault_Pin */
  GPIO_InitStruct.Pin = Limit_switch_Door_Pin|Thermostat_Input_Pin|Safety_ON_Pin|Interlock_Input_Pin
 80049ac:	f247 3301 	movw	r3, #29441	; 0x7301
 80049b0:	613b      	str	r3, [r7, #16]
                          |Button_Input_Pin|USB_Fault_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049b2:	2300      	movs	r3, #0
 80049b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049b6:	2300      	movs	r3, #0
 80049b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049ba:	f107 0310 	add.w	r3, r7, #16
 80049be:	4619      	mov	r1, r3
 80049c0:	4814      	ldr	r0, [pc, #80]	; (8004a14 <MX_GPIO_Init+0x1c8>)
 80049c2:	f001 f811 	bl	80059e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Step3_STEP_Pin Step3_LowCurrent_Pin Stepper_HalfStep_Pin Step1_STEP_Pin
                           Step1_RESET_Pin Step1_ENABLE_Pin */
  GPIO_InitStruct.Pin = Step3_STEP_Pin|Step3_LowCurrent_Pin|Stepper_HalfStep_Pin|Step1_STEP_Pin
 80049c6:	f248 033e 	movw	r3, #32830	; 0x803e
 80049ca:	613b      	str	r3, [r7, #16]
                          |Step1_RESET_Pin|Step1_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049cc:	2301      	movs	r3, #1
 80049ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049d0:	2300      	movs	r3, #0
 80049d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049d4:	2302      	movs	r3, #2
 80049d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049d8:	f107 0310 	add.w	r3, r7, #16
 80049dc:	4619      	mov	r1, r3
 80049de:	480d      	ldr	r0, [pc, #52]	; (8004a14 <MX_GPIO_Init+0x1c8>)
 80049e0:	f001 f802 	bl	80059e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Step1_DIR_Pin */
  GPIO_InitStruct.Pin = Step1_DIR_Pin;
 80049e4:	2304      	movs	r3, #4
 80049e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049e8:	2301      	movs	r3, #1
 80049ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ec:	2300      	movs	r3, #0
 80049ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049f0:	2302      	movs	r3, #2
 80049f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Step1_DIR_GPIO_Port, &GPIO_InitStruct);
 80049f4:	f107 0310 	add.w	r3, r7, #16
 80049f8:	4619      	mov	r1, r3
 80049fa:	4807      	ldr	r0, [pc, #28]	; (8004a18 <MX_GPIO_Init+0x1cc>)
 80049fc:	f000 fff4 	bl	80059e8 <HAL_GPIO_Init>

}
 8004a00:	bf00      	nop
 8004a02:	3720      	adds	r7, #32
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	40011000 	.word	0x40011000
 8004a10:	40010800 	.word	0x40010800
 8004a14:	40010c00 	.word	0x40010c00
 8004a18:	40011400 	.word	0x40011400

08004a1c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	printf("-------------------------------\n\r"); //TODO: if we remove this call, go to hardfault handler  or fail to execute
 8004a24:	4858      	ldr	r0, [pc, #352]	; (8004b88 <StartDefaultTask+0x16c>)
 8004a26:	f009 fa81 	bl	800df2c <iprintf>

	    switch (readModel())
 8004a2a:	f7fc fef9 	bl	8001820 <readModel>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b05      	cmp	r3, #5
 8004a32:	d827      	bhi.n	8004a84 <StartDefaultTask+0x68>
 8004a34:	a201      	add	r2, pc, #4	; (adr r2, 8004a3c <StartDefaultTask+0x20>)
 8004a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3a:	bf00      	nop
 8004a3c:	08004a55 	.word	0x08004a55
 8004a40:	08004a5d 	.word	0x08004a5d
 8004a44:	08004a65 	.word	0x08004a65
 8004a48:	08004a6d 	.word	0x08004a6d
 8004a4c:	08004a75 	.word	0x08004a75
 8004a50:	08004a7d 	.word	0x08004a7d
	    {
	    	  case HEATMAX:
	  	   	  printf("HeatCom CaddyAdv");
 8004a54:	484d      	ldr	r0, [pc, #308]	; (8004b8c <StartDefaultTask+0x170>)
 8004a56:	f009 fa69 	bl	800df2c <iprintf>
	  	  break;
 8004a5a:	e017      	b.n	8004a8c <StartDefaultTask+0x70>
	    	  case CADDY_ADVANCED:
	    		  printf("Caddy Advanced");
 8004a5c:	484c      	ldr	r0, [pc, #304]	; (8004b90 <StartDefaultTask+0x174>)
 8004a5e:	f009 fa65 	bl	800df2c <iprintf>
	  	  break;
 8004a62:	e013      	b.n	8004a8c <StartDefaultTask+0x70>
	    	  case HEATPACK:
	    		  printf("Heatpack");
 8004a64:	484b      	ldr	r0, [pc, #300]	; (8004b94 <StartDefaultTask+0x178>)
 8004a66:	f009 fa61 	bl	800df2c <iprintf>
	  	  break;
 8004a6a:	e00f      	b.n	8004a8c <StartDefaultTask+0x70>
	    	  case MINI_CADDY:
	    		  printf("Mini Caddy");
 8004a6c:	484a      	ldr	r0, [pc, #296]	; (8004b98 <StartDefaultTask+0x17c>)
 8004a6e:	f009 fa5d 	bl	800df2c <iprintf>
	    	  break;
 8004a72:	e00b      	b.n	8004a8c <StartDefaultTask+0x70>
	    	  case HEATPRO:
	    		  printf("HeatPro");
 8004a74:	4849      	ldr	r0, [pc, #292]	; (8004b9c <StartDefaultTask+0x180>)
 8004a76:	f009 fa59 	bl	800df2c <iprintf>
	  	  break;
 8004a7a:	e007      	b.n	8004a8c <StartDefaultTask+0x70>
	    	  case MAX_CADDY:
	    		  printf("Max Caddy");
 8004a7c:	4848      	ldr	r0, [pc, #288]	; (8004ba0 <StartDefaultTask+0x184>)
 8004a7e:	f009 fa55 	bl	800df2c <iprintf>
	  	  break;
 8004a82:	e003      	b.n	8004a8c <StartDefaultTask+0x70>
	    	  default:
	    		  printf("Invalid Model");
 8004a84:	4847      	ldr	r0, [pc, #284]	; (8004ba4 <StartDefaultTask+0x188>)
 8004a86:	f009 fa51 	bl	800df2c <iprintf>
	    		break;
 8004a8a:	bf00      	nop
	    }
	    uint32_t j=0; //for a dumbass delay
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	60fb      	str	r3, [r7, #12]
	    //HAL_GPIO_WritePin(STATUS_LED0_GPIO_Port,STATUS_LED0_Pin,SET);
	    HAL_GPIO_WritePin(STATUS_LED1_GPIO_Port,STATUS_LED1_Pin,SET);
 8004a90:	2201      	movs	r2, #1
 8004a92:	2108      	movs	r1, #8
 8004a94:	4844      	ldr	r0, [pc, #272]	; (8004ba8 <StartDefaultTask+0x18c>)
 8004a96:	f001 f9fe 	bl	8005e96 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(STATUS_LED2_GPIO_Port,STATUS_LED2_Pin,SET);
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	2110      	movs	r1, #16
 8004a9e:	4843      	ldr	r0, [pc, #268]	; (8004bac <StartDefaultTask+0x190>)
 8004aa0:	f001 f9f9 	bl	8005e96 <HAL_GPIO_WritePin>
	    for(j=0;j<10000000;j++){asm("NOP");}
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	e003      	b.n	8004ab2 <StartDefaultTask+0x96>
 8004aaa:	bf00      	nop
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	60fb      	str	r3, [r7, #12]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4a3e      	ldr	r2, [pc, #248]	; (8004bb0 <StartDefaultTask+0x194>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d3f7      	bcc.n	8004aaa <StartDefaultTask+0x8e>
	    printf(" Version %i.%i.%i\n\r",MAJOR_VER,MINOR_VER,REVISION_VER);
 8004aba:	2308      	movs	r3, #8
 8004abc:	2200      	movs	r2, #0
 8004abe:	2101      	movs	r1, #1
 8004ac0:	483c      	ldr	r0, [pc, #240]	; (8004bb4 <StartDefaultTask+0x198>)
 8004ac2:	f009 fa33 	bl	800df2c <iprintf>


	    int i=0;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60bb      	str	r3, [r7, #8]

	    for(i=0;i<MAJOR_VER;i++)
 8004aca:	2300      	movs	r3, #0
 8004acc:	60bb      	str	r3, [r7, #8]
 8004ace:	e002      	b.n	8004ad6 <StartDefaultTask+0xba>
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	60bb      	str	r3, [r7, #8]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	ddf9      	ble.n	8004ad0 <StartDefaultTask+0xb4>
	  	  //HAL_GPIO_WritePin(STATUS_LED0_GPIO_Port,STATUS_LED0_Pin,RESET);
	  	  //for(j=0;j<5000000;j++){asm("NOP");}
	  	  //HAL_GPIO_WritePin(STATUS_LED0_GPIO_Port,STATUS_LED0_Pin,SET);
	  	  //for(j=0;j<5000000;j++){asm("NOP");}
	    }
	    for(i=0;i<MINOR_VER;i++)
 8004adc:	2300      	movs	r3, #0
 8004ade:	60bb      	str	r3, [r7, #8]
 8004ae0:	e022      	b.n	8004b28 <StartDefaultTask+0x10c>
	    {
	  	  HAL_GPIO_WritePin(STATUS_LED1_GPIO_Port,STATUS_LED1_Pin,RESET);
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	2108      	movs	r1, #8
 8004ae6:	4830      	ldr	r0, [pc, #192]	; (8004ba8 <StartDefaultTask+0x18c>)
 8004ae8:	f001 f9d5 	bl	8005e96 <HAL_GPIO_WritePin>
	  	  for(j=0;j<5000000;j++){asm("NOP");}
 8004aec:	2300      	movs	r3, #0
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	e003      	b.n	8004afa <StartDefaultTask+0xde>
 8004af2:	bf00      	nop
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	3301      	adds	r3, #1
 8004af8:	60fb      	str	r3, [r7, #12]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	4a2e      	ldr	r2, [pc, #184]	; (8004bb8 <StartDefaultTask+0x19c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d9f7      	bls.n	8004af2 <StartDefaultTask+0xd6>
	  	  HAL_GPIO_WritePin(STATUS_LED1_GPIO_Port,STATUS_LED1_Pin,SET);
 8004b02:	2201      	movs	r2, #1
 8004b04:	2108      	movs	r1, #8
 8004b06:	4828      	ldr	r0, [pc, #160]	; (8004ba8 <StartDefaultTask+0x18c>)
 8004b08:	f001 f9c5 	bl	8005e96 <HAL_GPIO_WritePin>
	  	  for(j=0;j<5000000;j++){asm("NOP");}
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	e003      	b.n	8004b1a <StartDefaultTask+0xfe>
 8004b12:	bf00      	nop
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	3301      	adds	r3, #1
 8004b18:	60fb      	str	r3, [r7, #12]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	4a26      	ldr	r2, [pc, #152]	; (8004bb8 <StartDefaultTask+0x19c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d9f7      	bls.n	8004b12 <StartDefaultTask+0xf6>
	    for(i=0;i<MINOR_VER;i++)
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	3301      	adds	r3, #1
 8004b26:	60bb      	str	r3, [r7, #8]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	dbd9      	blt.n	8004ae2 <StartDefaultTask+0xc6>
	    }
	    for(i=0;i<REVISION_VER;i++)
 8004b2e:	2300      	movs	r3, #0
 8004b30:	60bb      	str	r3, [r7, #8]
 8004b32:	e022      	b.n	8004b7a <StartDefaultTask+0x15e>
	    {
	  	  HAL_GPIO_WritePin(STATUS_LED2_GPIO_Port,STATUS_LED2_Pin,RESET);
 8004b34:	2200      	movs	r2, #0
 8004b36:	2110      	movs	r1, #16
 8004b38:	481c      	ldr	r0, [pc, #112]	; (8004bac <StartDefaultTask+0x190>)
 8004b3a:	f001 f9ac 	bl	8005e96 <HAL_GPIO_WritePin>
	  	  for(j=0;j<5000000;j++){asm("NOP");}
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60fb      	str	r3, [r7, #12]
 8004b42:	e003      	b.n	8004b4c <StartDefaultTask+0x130>
 8004b44:	bf00      	nop
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	60fb      	str	r3, [r7, #12]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4a1a      	ldr	r2, [pc, #104]	; (8004bb8 <StartDefaultTask+0x19c>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d9f7      	bls.n	8004b44 <StartDefaultTask+0x128>
	  	  HAL_GPIO_WritePin(STATUS_LED2_GPIO_Port,STATUS_LED2_Pin,SET);
 8004b54:	2201      	movs	r2, #1
 8004b56:	2110      	movs	r1, #16
 8004b58:	4814      	ldr	r0, [pc, #80]	; (8004bac <StartDefaultTask+0x190>)
 8004b5a:	f001 f99c 	bl	8005e96 <HAL_GPIO_WritePin>
	  	  for(j=0;j<5000000;j++){asm("NOP");}
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60fb      	str	r3, [r7, #12]
 8004b62:	e003      	b.n	8004b6c <StartDefaultTask+0x150>
 8004b64:	bf00      	nop
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	60fb      	str	r3, [r7, #12]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4a12      	ldr	r2, [pc, #72]	; (8004bb8 <StartDefaultTask+0x19c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d9f7      	bls.n	8004b64 <StartDefaultTask+0x148>
	    for(i=0;i<REVISION_VER;i++)
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	3301      	adds	r3, #1
 8004b78:	60bb      	str	r3, [r7, #8]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	2b07      	cmp	r3, #7
 8004b7e:	ddd9      	ble.n	8004b34 <StartDefaultTask+0x118>
	    }

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8004b80:	2001      	movs	r0, #1
 8004b82:	f006 f89e 	bl	800acc2 <osDelay>
 8004b86:	e7fb      	b.n	8004b80 <StartDefaultTask+0x164>
 8004b88:	0801008c 	.word	0x0801008c
 8004b8c:	080100b0 	.word	0x080100b0
 8004b90:	080100c4 	.word	0x080100c4
 8004b94:	080100d4 	.word	0x080100d4
 8004b98:	080100e0 	.word	0x080100e0
 8004b9c:	080100ec 	.word	0x080100ec
 8004ba0:	080100f4 	.word	0x080100f4
 8004ba4:	08010100 	.word	0x08010100
 8004ba8:	40011000 	.word	0x40011000
 8004bac:	40010800 	.word	0x40010800
 8004bb0:	00989680 	.word	0x00989680
 8004bb4:	08010110 	.word	0x08010110
 8004bb8:	004c4b3f 	.word	0x004c4b3f

08004bbc <TimerCallback>:
  /* USER CODE END 5 */
}

/* TimerCallback function */
void TimerCallback(void const * argument)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TimerCallback */
	osTimerStop(TimerHandle);
 8004bc4:	4b04      	ldr	r3, [pc, #16]	; (8004bd8 <TimerCallback+0x1c>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f006 f8c3 	bl	800ad54 <osTimerStop>
  /* USER CODE END TimerCallback */
}
 8004bce:	bf00      	nop
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	20003078 	.word	0x20003078

08004bdc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a04      	ldr	r2, [pc, #16]	; (8004bfc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d101      	bne.n	8004bf2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004bee:	f000 fc7f 	bl	80054f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004bf2:	bf00      	nop
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	40012c00 	.word	0x40012c00

08004c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	printf("Error Handler called");
 8004c04:	4802      	ldr	r0, [pc, #8]	; (8004c10 <Error_Handler+0x10>)
 8004c06:	f009 f991 	bl	800df2c <iprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c0a:	b672      	cpsid	i
}
 8004c0c:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004c0e:	e7fe      	b.n	8004c0e <Error_Handler+0xe>
 8004c10:	08010124 	.word	0x08010124

08004c14 <Slope_init>:
  https://www.embeddedrelated.com/showcode/323.php
*/

#include "slope.h"

void Slope_init(Slope * slope, int dataStore[], unsigned int nbDataMax, float samplingRate) {
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
 8004c20:	603b      	str	r3, [r7, #0]
  if (sizeof(uint64_t) != 8) {
    // ERROR: the size of int64_t on this platform is not supported.
    while(true) {;}
  }

  slope->dataStore = dataStore;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	601a      	str	r2, [r3, #0]
  slope->nbDataMax = nbDataMax;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	605a      	str	r2, [r3, #4]
  slope->nbDataInDataStore = 0;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	609a      	str	r2, [r3, #8]
  slope->dataIndex = 0;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	60da      	str	r2, [r3, #12]
  slope->samplingRate = samplingRate;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	611a      	str	r2, [r3, #16]
}
 8004c40:	bf00      	nop
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bc80      	pop	{r7}
 8004c48:	4770      	bx	lr

08004c4a <Slope_addData>:

void Slope_addData(Slope * slope, int data) {
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
 8004c52:	6039      	str	r1, [r7, #0]

  if (slope->nbDataInDataStore < slope->nbDataMax) {
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689a      	ldr	r2, [r3, #8]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d204      	bcs.n	8004c6a <Slope_addData+0x20>
    slope->nbDataInDataStore++;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	1c5a      	adds	r2, r3, #1
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	609a      	str	r2, [r3, #8]
  }

  slope->dataStore[slope->dataIndex] = data;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	601a      	str	r2, [r3, #0]
  slope->dataIndex++;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	1c5a      	adds	r2, r3, #1
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	60da      	str	r2, [r3, #12]
  if (slope->dataIndex >= slope->nbDataMax) {
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68da      	ldr	r2, [r3, #12]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d302      	bcc.n	8004c96 <Slope_addData+0x4c>
    slope->dataIndex = 0;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	60da      	str	r2, [r3, #12]
  }
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bc80      	pop	{r7}
 8004c9e:	4770      	bx	lr

08004ca0 <Slope_compute>:

float Slope_compute(Slope * slope, unsigned int nbData) {
 8004ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca4:	b097      	sub	sp, #92	; 0x5c
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	61f8      	str	r0, [r7, #28]
 8004caa:	61b9      	str	r1, [r7, #24]

  int64_t nbDataToUse;
  int64_t sumX = 0;
 8004cac:	f04f 0200 	mov.w	r2, #0
 8004cb0:	f04f 0300 	mov.w	r3, #0
 8004cb4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  int64_t sumY = 0;
 8004cb8:	f04f 0200 	mov.w	r2, #0
 8004cbc:	f04f 0300 	mov.w	r3, #0
 8004cc0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  int64_t sumXY = 0;
 8004cc4:	f04f 0200 	mov.w	r2, #0
 8004cc8:	f04f 0300 	mov.w	r3, #0
 8004ccc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
   int64_t sumX2 = 0;
 8004cd0:	f04f 0200 	mov.w	r2, #0
 8004cd4:	f04f 0300 	mov.w	r3, #0
 8004cd8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  unsigned int readingIndex;
  float slopeValue;

  if (nbData > slope->nbDataInDataStore) {
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d907      	bls.n	8004cf6 <Slope_compute+0x56>
    nbDataToUse = slope->nbDataInDataStore;
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	461a      	mov	r2, r3
 8004cec:	f04f 0300 	mov.w	r3, #0
 8004cf0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8004cf4:	e005      	b.n	8004d02 <Slope_compute+0x62>
  } else {
    nbDataToUse = nbData;
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	f04f 0300 	mov.w	r3, #0
 8004cfe:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  }

  if (slope->dataIndex >= nbDataToUse) {
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f04f 0100 	mov.w	r1, #0
 8004d0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d10:	4290      	cmp	r0, r2
 8004d12:	eb71 0303 	sbcs.w	r3, r1, r3
 8004d16:	db05      	blt.n	8004d24 <Slope_compute+0x84>
    readingIndex = slope->dataIndex - nbDataToUse;
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	68da      	ldr	r2, [r3, #12]
 8004d1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d22:	e007      	b.n	8004d34 <Slope_compute+0x94>
  } else {
    readingIndex = slope->nbDataInDataStore - (nbDataToUse - slope->dataIndex);
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	6899      	ldr	r1, [r3, #8]
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	440b      	add	r3, r1
 8004d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (int32_t i = 0; i < nbDataToUse; i++) {
 8004d34:	2300      	movs	r3, #0
 8004d36:	627b      	str	r3, [r7, #36]	; 0x24
 8004d38:	e04c      	b.n	8004dd4 <Slope_compute+0x134>

    sumX += i;
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8004d42:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d46:	1814      	adds	r4, r2, r0
 8004d48:	eb43 0501 	adc.w	r5, r3, r1
 8004d4c:	e9c7 4512 	strd	r4, r5, [r7, #72]	; 0x48
    sumY += slope->dataStore[readingIndex];
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8004d62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d66:	eb12 0800 	adds.w	r8, r2, r0
 8004d6a:	eb43 0901 	adc.w	r9, r3, r1
 8004d6e:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
    sumXY += (i * slope->dataStore[readingIndex]); // ATTENTION: TODO: trouver un moyen de tester si on fait un overflow
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d80:	fb02 f303 	mul.w	r3, r2, r3
 8004d84:	4618      	mov	r0, r3
 8004d86:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8004d8a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d8e:	eb12 0a00 	adds.w	sl, r2, r0
 8004d92:	eb43 0b01 	adc.w	fp, r3, r1
 8004d96:	e9c7 ab0e 	strd	sl, fp, [r7, #56]	; 0x38
    sumX2 += i * i;
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	fb03 f303 	mul.w	r3, r3, r3
 8004da0:	4618      	mov	r0, r3
 8004da2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8004da6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004daa:	1816      	adds	r6, r2, r0
 8004dac:	603e      	str	r6, [r7, #0]
 8004dae:	414b      	adcs	r3, r1
 8004db0:	607b      	str	r3, [r7, #4]
 8004db2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004db6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    readingIndex++;
 8004dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (readingIndex >= slope->nbDataInDataStore) {
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d301      	bcc.n	8004dce <Slope_compute+0x12e>
      readingIndex = 0;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (int32_t i = 0; i < nbDataToUse; i++) {
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8004ddc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004de0:	4290      	cmp	r0, r2
 8004de2:	eb71 0303 	sbcs.w	r3, r1, r3
 8004de6:	dba8      	blt.n	8004d3a <Slope_compute+0x9a>
    }
  }

  if ((sumX != 0) || (sumX2 != 0)) {
 8004de8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004dec:	4313      	orrs	r3, r2
 8004dee:	d103      	bne.n	8004df8 <Slope_compute+0x158>
 8004df0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004df4:	4313      	orrs	r3, r2
 8004df6:	d05d      	beq.n	8004eb4 <Slope_compute+0x214>
    slopeValue = (((sumX * sumY) - (nbDataToUse * sumXY)) * 1.0) / (((sumX * sumX) - (nbDataToUse * sumX2)) * 1.0);
 8004df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004dfc:	fb02 f203 	mul.w	r2, r2, r3
 8004e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e02:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004e04:	fb01 f303 	mul.w	r3, r1, r3
 8004e08:	4413      	add	r3, r2
 8004e0a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004e0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e0e:	fba1 0102 	umull	r0, r1, r1, r2
 8004e12:	440b      	add	r3, r1
 8004e14:	4619      	mov	r1, r3
 8004e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e1a:	fb02 f203 	mul.w	r2, r2, r3
 8004e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e20:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8004e22:	fb04 f303 	mul.w	r3, r4, r3
 8004e26:	18d4      	adds	r4, r2, r3
 8004e28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e30:	441c      	add	r4, r3
 8004e32:	4623      	mov	r3, r4
 8004e34:	1a84      	subs	r4, r0, r2
 8004e36:	613c      	str	r4, [r7, #16]
 8004e38:	eb61 0303 	sbc.w	r3, r1, r3
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004e42:	f7fb fb83 	bl	800054c <__aeabi_l2d>
 8004e46:	4604      	mov	r4, r0
 8004e48:	460d      	mov	r5, r1
 8004e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e4e:	fb02 f203 	mul.w	r2, r2, r3
 8004e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e54:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004e56:	fb01 f303 	mul.w	r3, r1, r3
 8004e5a:	441a      	add	r2, r3
 8004e5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e5e:	fba3 0103 	umull	r0, r1, r3, r3
 8004e62:	1853      	adds	r3, r2, r1
 8004e64:	4619      	mov	r1, r3
 8004e66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e6a:	fb02 f203 	mul.w	r2, r2, r3
 8004e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e70:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 8004e72:	fb06 f303 	mul.w	r3, r6, r3
 8004e76:	18d6      	adds	r6, r2, r3
 8004e78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e80:	441e      	add	r6, r3
 8004e82:	4633      	mov	r3, r6
 8004e84:	1a86      	subs	r6, r0, r2
 8004e86:	60be      	str	r6, [r7, #8]
 8004e88:	eb61 0303 	sbc.w	r3, r1, r3
 8004e8c:	60fb      	str	r3, [r7, #12]
 8004e8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e92:	f7fb fb5b 	bl	800054c <__aeabi_l2d>
 8004e96:	4602      	mov	r2, r0
 8004e98:	460b      	mov	r3, r1
 8004e9a:	4620      	mov	r0, r4
 8004e9c:	4629      	mov	r1, r5
 8004e9e:	f7fb fcad 	bl	80007fc <__aeabi_ddiv>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	4610      	mov	r0, r2
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	f7fb fe4d 	bl	8000b48 <__aeabi_d2f>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eb2:	e002      	b.n	8004eba <Slope_compute+0x21a>
  } else {
    slopeValue = 0.0;
 8004eb4:	f04f 0300 	mov.w	r3, #0
 8004eb8:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  return slopeValue * slope->samplingRate;
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7fb ff9f 	bl	8000e04 <__aeabi_fmul>
 8004ec6:	4603      	mov	r3, r0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	375c      	adds	r7, #92	; 0x5c
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004eda:	4b18      	ldr	r3, [pc, #96]	; (8004f3c <HAL_MspInit+0x68>)
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	4a17      	ldr	r2, [pc, #92]	; (8004f3c <HAL_MspInit+0x68>)
 8004ee0:	f043 0301 	orr.w	r3, r3, #1
 8004ee4:	6193      	str	r3, [r2, #24]
 8004ee6:	4b15      	ldr	r3, [pc, #84]	; (8004f3c <HAL_MspInit+0x68>)
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	60bb      	str	r3, [r7, #8]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ef2:	4b12      	ldr	r3, [pc, #72]	; (8004f3c <HAL_MspInit+0x68>)
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	4a11      	ldr	r2, [pc, #68]	; (8004f3c <HAL_MspInit+0x68>)
 8004ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004efc:	61d3      	str	r3, [r2, #28]
 8004efe:	4b0f      	ldr	r3, [pc, #60]	; (8004f3c <HAL_MspInit+0x68>)
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f06:	607b      	str	r3, [r7, #4]
 8004f08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	210f      	movs	r1, #15
 8004f0e:	f06f 0001 	mvn.w	r0, #1
 8004f12:	f000 fbe2 	bl	80056da <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004f16:	4b0a      	ldr	r3, [pc, #40]	; (8004f40 <HAL_MspInit+0x6c>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f2a:	60fb      	str	r3, [r7, #12]
 8004f2c:	4a04      	ldr	r2, [pc, #16]	; (8004f40 <HAL_MspInit+0x6c>)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f32:	bf00      	nop
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	40021000 	.word	0x40021000
 8004f40:	40010000 	.word	0x40010000

08004f44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b088      	sub	sp, #32
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f4c:	f107 0310 	add.w	r3, r7, #16
 8004f50:	2200      	movs	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	605a      	str	r2, [r3, #4]
 8004f56:	609a      	str	r2, [r3, #8]
 8004f58:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a1d      	ldr	r2, [pc, #116]	; (8004fd4 <HAL_I2C_MspInit+0x90>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d133      	bne.n	8004fcc <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f64:	4b1c      	ldr	r3, [pc, #112]	; (8004fd8 <HAL_I2C_MspInit+0x94>)
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	4a1b      	ldr	r2, [pc, #108]	; (8004fd8 <HAL_I2C_MspInit+0x94>)
 8004f6a:	f043 0308 	orr.w	r3, r3, #8
 8004f6e:	6193      	str	r3, [r2, #24]
 8004f70:	4b19      	ldr	r3, [pc, #100]	; (8004fd8 <HAL_I2C_MspInit+0x94>)
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	f003 0308 	and.w	r3, r3, #8
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 8004f7c:	23c0      	movs	r3, #192	; 0xc0
 8004f7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f80:	2312      	movs	r3, #18
 8004f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f84:	2303      	movs	r3, #3
 8004f86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f88:	f107 0310 	add.w	r3, r7, #16
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4813      	ldr	r0, [pc, #76]	; (8004fdc <HAL_I2C_MspInit+0x98>)
 8004f90:	f000 fd2a 	bl	80059e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004f94:	4b10      	ldr	r3, [pc, #64]	; (8004fd8 <HAL_I2C_MspInit+0x94>)
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	4a0f      	ldr	r2, [pc, #60]	; (8004fd8 <HAL_I2C_MspInit+0x94>)
 8004f9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f9e:	61d3      	str	r3, [r2, #28]
 8004fa0:	4b0d      	ldr	r3, [pc, #52]	; (8004fd8 <HAL_I2C_MspInit+0x94>)
 8004fa2:	69db      	ldr	r3, [r3, #28]
 8004fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fa8:	60bb      	str	r3, [r7, #8]
 8004faa:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8004fac:	2200      	movs	r2, #0
 8004fae:	2105      	movs	r1, #5
 8004fb0:	201f      	movs	r0, #31
 8004fb2:	f000 fb92 	bl	80056da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004fb6:	201f      	movs	r0, #31
 8004fb8:	f000 fbab 	bl	8005712 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	2105      	movs	r1, #5
 8004fc0:	2020      	movs	r0, #32
 8004fc2:	f000 fb8a 	bl	80056da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004fc6:	2020      	movs	r0, #32
 8004fc8:	f000 fba3 	bl	8005712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004fcc:	bf00      	nop
 8004fce:	3720      	adds	r7, #32
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	40005400 	.word	0x40005400
 8004fd8:	40021000 	.word	0x40021000
 8004fdc:	40010c00 	.word	0x40010c00

08004fe0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a0d      	ldr	r2, [pc, #52]	; (8005024 <HAL_I2C_MspDeInit+0x44>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d113      	bne.n	800501a <HAL_I2C_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004ff2:	4b0d      	ldr	r3, [pc, #52]	; (8005028 <HAL_I2C_MspDeInit+0x48>)
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	4a0c      	ldr	r2, [pc, #48]	; (8005028 <HAL_I2C_MspDeInit+0x48>)
 8004ff8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ffc:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C_SDA_GPIO_Port, I2C_SDA_Pin);
 8004ffe:	2140      	movs	r1, #64	; 0x40
 8005000:	480a      	ldr	r0, [pc, #40]	; (800502c <HAL_I2C_MspDeInit+0x4c>)
 8005002:	f000 fe75 	bl	8005cf0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C_SCL_GPIO_Port, I2C_SCL_Pin);
 8005006:	2180      	movs	r1, #128	; 0x80
 8005008:	4808      	ldr	r0, [pc, #32]	; (800502c <HAL_I2C_MspDeInit+0x4c>)
 800500a:	f000 fe71 	bl	8005cf0 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800500e:	201f      	movs	r0, #31
 8005010:	f000 fb8d 	bl	800572e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8005014:	2020      	movs	r0, #32
 8005016:	f000 fb8a 	bl	800572e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800501a:	bf00      	nop
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	40005400 	.word	0x40005400
 8005028:	40021000 	.word	0x40021000
 800502c:	40010c00 	.word	0x40010c00

08005030 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a0b      	ldr	r2, [pc, #44]	; (800506c <HAL_RTC_MspInit+0x3c>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d110      	bne.n	8005064 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8005042:	f002 ff1d 	bl	8007e80 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8005046:	4b0a      	ldr	r3, [pc, #40]	; (8005070 <HAL_RTC_MspInit+0x40>)
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	4a09      	ldr	r2, [pc, #36]	; (8005070 <HAL_RTC_MspInit+0x40>)
 800504c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005050:	61d3      	str	r3, [r2, #28]
 8005052:	4b07      	ldr	r3, [pc, #28]	; (8005070 <HAL_RTC_MspInit+0x40>)
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800505a:	60fb      	str	r3, [r7, #12]
 800505c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800505e:	4b05      	ldr	r3, [pc, #20]	; (8005074 <HAL_RTC_MspInit+0x44>)
 8005060:	2201      	movs	r2, #1
 8005062:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005064:	bf00      	nop
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	40002800 	.word	0x40002800
 8005070:	40021000 	.word	0x40021000
 8005074:	4242043c 	.word	0x4242043c

08005078 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b08a      	sub	sp, #40	; 0x28
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005080:	f107 0318 	add.w	r3, r7, #24
 8005084:	2200      	movs	r2, #0
 8005086:	601a      	str	r2, [r3, #0]
 8005088:	605a      	str	r2, [r3, #4]
 800508a:	609a      	str	r2, [r3, #8]
 800508c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a3c      	ldr	r2, [pc, #240]	; (8005184 <HAL_UART_MspInit+0x10c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d132      	bne.n	80050fe <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005098:	4b3b      	ldr	r3, [pc, #236]	; (8005188 <HAL_UART_MspInit+0x110>)
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	4a3a      	ldr	r2, [pc, #232]	; (8005188 <HAL_UART_MspInit+0x110>)
 800509e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050a2:	6193      	str	r3, [r2, #24]
 80050a4:	4b38      	ldr	r3, [pc, #224]	; (8005188 <HAL_UART_MspInit+0x110>)
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050ac:	617b      	str	r3, [r7, #20]
 80050ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050b0:	4b35      	ldr	r3, [pc, #212]	; (8005188 <HAL_UART_MspInit+0x110>)
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	4a34      	ldr	r2, [pc, #208]	; (8005188 <HAL_UART_MspInit+0x110>)
 80050b6:	f043 0304 	orr.w	r3, r3, #4
 80050ba:	6193      	str	r3, [r2, #24]
 80050bc:	4b32      	ldr	r3, [pc, #200]	; (8005188 <HAL_UART_MspInit+0x110>)
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	f003 0304 	and.w	r3, r3, #4
 80050c4:	613b      	str	r3, [r7, #16]
 80050c6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80050c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ce:	2302      	movs	r3, #2
 80050d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80050d2:	2303      	movs	r3, #3
 80050d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050d6:	f107 0318 	add.w	r3, r7, #24
 80050da:	4619      	mov	r1, r3
 80050dc:	482b      	ldr	r0, [pc, #172]	; (800518c <HAL_UART_MspInit+0x114>)
 80050de:	f000 fc83 	bl	80059e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80050e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050e8:	2300      	movs	r3, #0
 80050ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ec:	2300      	movs	r3, #0
 80050ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050f0:	f107 0318 	add.w	r3, r7, #24
 80050f4:	4619      	mov	r1, r3
 80050f6:	4825      	ldr	r0, [pc, #148]	; (800518c <HAL_UART_MspInit+0x114>)
 80050f8:	f000 fc76 	bl	80059e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80050fc:	e03e      	b.n	800517c <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART3)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a23      	ldr	r2, [pc, #140]	; (8005190 <HAL_UART_MspInit+0x118>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d139      	bne.n	800517c <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005108:	4b1f      	ldr	r3, [pc, #124]	; (8005188 <HAL_UART_MspInit+0x110>)
 800510a:	69db      	ldr	r3, [r3, #28]
 800510c:	4a1e      	ldr	r2, [pc, #120]	; (8005188 <HAL_UART_MspInit+0x110>)
 800510e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005112:	61d3      	str	r3, [r2, #28]
 8005114:	4b1c      	ldr	r3, [pc, #112]	; (8005188 <HAL_UART_MspInit+0x110>)
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800511c:	60fb      	str	r3, [r7, #12]
 800511e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005120:	4b19      	ldr	r3, [pc, #100]	; (8005188 <HAL_UART_MspInit+0x110>)
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	4a18      	ldr	r2, [pc, #96]	; (8005188 <HAL_UART_MspInit+0x110>)
 8005126:	f043 0308 	orr.w	r3, r3, #8
 800512a:	6193      	str	r3, [r2, #24]
 800512c:	4b16      	ldr	r3, [pc, #88]	; (8005188 <HAL_UART_MspInit+0x110>)
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	f003 0308 	and.w	r3, r3, #8
 8005134:	60bb      	str	r3, [r7, #8]
 8005136:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005138:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800513c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800513e:	2302      	movs	r3, #2
 8005140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005142:	2303      	movs	r3, #3
 8005144:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005146:	f107 0318 	add.w	r3, r7, #24
 800514a:	4619      	mov	r1, r3
 800514c:	4811      	ldr	r0, [pc, #68]	; (8005194 <HAL_UART_MspInit+0x11c>)
 800514e:	f000 fc4b 	bl	80059e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005152:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005158:	2300      	movs	r3, #0
 800515a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800515c:	2300      	movs	r3, #0
 800515e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005160:	f107 0318 	add.w	r3, r7, #24
 8005164:	4619      	mov	r1, r3
 8005166:	480b      	ldr	r0, [pc, #44]	; (8005194 <HAL_UART_MspInit+0x11c>)
 8005168:	f000 fc3e 	bl	80059e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800516c:	2200      	movs	r2, #0
 800516e:	2105      	movs	r1, #5
 8005170:	2027      	movs	r0, #39	; 0x27
 8005172:	f000 fab2 	bl	80056da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005176:	2027      	movs	r0, #39	; 0x27
 8005178:	f000 facb 	bl	8005712 <HAL_NVIC_EnableIRQ>
}
 800517c:	bf00      	nop
 800517e:	3728      	adds	r7, #40	; 0x28
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	40013800 	.word	0x40013800
 8005188:	40021000 	.word	0x40021000
 800518c:	40010800 	.word	0x40010800
 8005190:	40004800 	.word	0x40004800
 8005194:	40010c00 	.word	0x40010c00

08005198 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a12      	ldr	r2, [pc, #72]	; (80051f0 <HAL_UART_MspDeInit+0x58>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d10b      	bne.n	80051c2 <HAL_UART_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80051aa:	4b12      	ldr	r3, [pc, #72]	; (80051f4 <HAL_UART_MspDeInit+0x5c>)
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	4a11      	ldr	r2, [pc, #68]	; (80051f4 <HAL_UART_MspDeInit+0x5c>)
 80051b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051b4:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80051b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80051ba:	480f      	ldr	r0, [pc, #60]	; (80051f8 <HAL_UART_MspDeInit+0x60>)
 80051bc:	f000 fd98 	bl	8005cf0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 80051c0:	e012      	b.n	80051e8 <HAL_UART_MspDeInit+0x50>
  else if(huart->Instance==USART3)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a0d      	ldr	r2, [pc, #52]	; (80051fc <HAL_UART_MspDeInit+0x64>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d10d      	bne.n	80051e8 <HAL_UART_MspDeInit+0x50>
    __HAL_RCC_USART3_CLK_DISABLE();
 80051cc:	4b09      	ldr	r3, [pc, #36]	; (80051f4 <HAL_UART_MspDeInit+0x5c>)
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	4a08      	ldr	r2, [pc, #32]	; (80051f4 <HAL_UART_MspDeInit+0x5c>)
 80051d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051d6:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 80051d8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80051dc:	4808      	ldr	r0, [pc, #32]	; (8005200 <HAL_UART_MspDeInit+0x68>)
 80051de:	f000 fd87 	bl	8005cf0 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 80051e2:	2027      	movs	r0, #39	; 0x27
 80051e4:	f000 faa3 	bl	800572e <HAL_NVIC_DisableIRQ>
}
 80051e8:	bf00      	nop
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	40013800 	.word	0x40013800
 80051f4:	40021000 	.word	0x40021000
 80051f8:	40010800 	.word	0x40010800
 80051fc:	40004800 	.word	0x40004800
 8005200:	40010c00 	.word	0x40010c00

08005204 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b08c      	sub	sp, #48	; 0x30
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800520c:	2300      	movs	r3, #0
 800520e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005210:	2300      	movs	r3, #0
 8005212:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8005214:	2200      	movs	r2, #0
 8005216:	6879      	ldr	r1, [r7, #4]
 8005218:	2019      	movs	r0, #25
 800521a:	f000 fa5e 	bl	80056da <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800521e:	2019      	movs	r0, #25
 8005220:	f000 fa77 	bl	8005712 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005224:	4b1e      	ldr	r3, [pc, #120]	; (80052a0 <HAL_InitTick+0x9c>)
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	4a1d      	ldr	r2, [pc, #116]	; (80052a0 <HAL_InitTick+0x9c>)
 800522a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800522e:	6193      	str	r3, [r2, #24]
 8005230:	4b1b      	ldr	r3, [pc, #108]	; (80052a0 <HAL_InitTick+0x9c>)
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005238:	60fb      	str	r3, [r7, #12]
 800523a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800523c:	f107 0210 	add.w	r2, r7, #16
 8005240:	f107 0314 	add.w	r3, r7, #20
 8005244:	4611      	mov	r1, r2
 8005246:	4618      	mov	r0, r3
 8005248:	f003 fb3c 	bl	80088c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800524c:	f003 fb26 	bl	800889c <HAL_RCC_GetPCLK2Freq>
 8005250:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005254:	4a13      	ldr	r2, [pc, #76]	; (80052a4 <HAL_InitTick+0xa0>)
 8005256:	fba2 2303 	umull	r2, r3, r2, r3
 800525a:	0c9b      	lsrs	r3, r3, #18
 800525c:	3b01      	subs	r3, #1
 800525e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005260:	4b11      	ldr	r3, [pc, #68]	; (80052a8 <HAL_InitTick+0xa4>)
 8005262:	4a12      	ldr	r2, [pc, #72]	; (80052ac <HAL_InitTick+0xa8>)
 8005264:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8005266:	4b10      	ldr	r3, [pc, #64]	; (80052a8 <HAL_InitTick+0xa4>)
 8005268:	f240 32e7 	movw	r2, #999	; 0x3e7
 800526c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800526e:	4a0e      	ldr	r2, [pc, #56]	; (80052a8 <HAL_InitTick+0xa4>)
 8005270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005272:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005274:	4b0c      	ldr	r3, [pc, #48]	; (80052a8 <HAL_InitTick+0xa4>)
 8005276:	2200      	movs	r2, #0
 8005278:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800527a:	4b0b      	ldr	r3, [pc, #44]	; (80052a8 <HAL_InitTick+0xa4>)
 800527c:	2200      	movs	r2, #0
 800527e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005280:	4809      	ldr	r0, [pc, #36]	; (80052a8 <HAL_InitTick+0xa4>)
 8005282:	f004 fb61 	bl	8009948 <HAL_TIM_Base_Init>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d104      	bne.n	8005296 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800528c:	4806      	ldr	r0, [pc, #24]	; (80052a8 <HAL_InitTick+0xa4>)
 800528e:	f004 fbb3 	bl	80099f8 <HAL_TIM_Base_Start_IT>
 8005292:	4603      	mov	r3, r0
 8005294:	e000      	b.n	8005298 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
}
 8005298:	4618      	mov	r0, r3
 800529a:	3730      	adds	r7, #48	; 0x30
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	40021000 	.word	0x40021000
 80052a4:	431bde83 	.word	0x431bde83
 80052a8:	20003094 	.word	0x20003094
 80052ac:	40012c00 	.word	0x40012c00

080052b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80052b0:	b480      	push	{r7}
 80052b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80052b4:	e7fe      	b.n	80052b4 <NMI_Handler+0x4>

080052b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80052b6:	b480      	push	{r7}
 80052b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80052ba:	e7fe      	b.n	80052ba <HardFault_Handler+0x4>

080052bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80052bc:	b480      	push	{r7}
 80052be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80052c0:	e7fe      	b.n	80052c0 <MemManage_Handler+0x4>

080052c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80052c2:	b480      	push	{r7}
 80052c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80052c6:	e7fe      	b.n	80052c6 <BusFault_Handler+0x4>

080052c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80052c8:	b480      	push	{r7}
 80052ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80052cc:	e7fe      	b.n	80052cc <UsageFault_Handler+0x4>

080052ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80052ce:	b480      	push	{r7}
 80052d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80052d2:	bf00      	nop
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bc80      	pop	{r7}
 80052d8:	4770      	bx	lr
	...

080052dc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80052e0:	4802      	ldr	r0, [pc, #8]	; (80052ec <TIM1_UP_IRQHandler+0x10>)
 80052e2:	f004 fbe3 	bl	8009aac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80052e6:	bf00      	nop
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	20003094 	.word	0x20003094

080052f0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80052f4:	4802      	ldr	r0, [pc, #8]	; (8005300 <I2C1_EV_IRQHandler+0x10>)
 80052f6:	f001 f912 	bl	800651e <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80052fa:	bf00      	nop
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	20002fd0 	.word	0x20002fd0

08005304 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005308:	4802      	ldr	r0, [pc, #8]	; (8005314 <I2C1_ER_IRQHandler+0x10>)
 800530a:	f001 fa79 	bl	8006800 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800530e:	bf00      	nop
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	20002fd0 	.word	0x20002fd0

08005318 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800531c:	4802      	ldr	r0, [pc, #8]	; (8005328 <USART3_IRQHandler+0x10>)
 800531e:	f004 ffc5 	bl	800a2ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005322:	bf00      	nop
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	20002f8c 	.word	0x20002f8c

0800532c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005338:	2300      	movs	r3, #0
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	e00a      	b.n	8005354 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800533e:	f3af 8000 	nop.w
 8005342:	4601      	mov	r1, r0
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	1c5a      	adds	r2, r3, #1
 8005348:	60ba      	str	r2, [r7, #8]
 800534a:	b2ca      	uxtb	r2, r1
 800534c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	3301      	adds	r3, #1
 8005352:	617b      	str	r3, [r7, #20]
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	429a      	cmp	r2, r3
 800535a:	dbf0      	blt.n	800533e <_read+0x12>
	}

return len;
 800535c:	687b      	ldr	r3, [r7, #4]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b086      	sub	sp, #24
 800536a:	af00      	add	r7, sp, #0
 800536c:	60f8      	str	r0, [r7, #12]
 800536e:	60b9      	str	r1, [r7, #8]
 8005370:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005372:	2300      	movs	r3, #0
 8005374:	617b      	str	r3, [r7, #20]
 8005376:	e009      	b.n	800538c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	60ba      	str	r2, [r7, #8]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	4618      	mov	r0, r3
 8005382:	f7fc fa3b 	bl	80017fc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	3301      	adds	r3, #1
 800538a:	617b      	str	r3, [r7, #20]
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	429a      	cmp	r2, r3
 8005392:	dbf1      	blt.n	8005378 <_write+0x12>
	}
	return len;
 8005394:	687b      	ldr	r3, [r7, #4]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3718      	adds	r7, #24
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <_close>:

int _close(int file)
{
 800539e:	b480      	push	{r7}
 80053a0:	b083      	sub	sp, #12
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
	return -1;
 80053a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bc80      	pop	{r7}
 80053b2:	4770      	bx	lr

080053b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80053c4:	605a      	str	r2, [r3, #4]
	return 0;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bc80      	pop	{r7}
 80053d0:	4770      	bx	lr

080053d2 <_isatty>:

int _isatty(int file)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
	return 1;
 80053da:	2301      	movs	r3, #1
}
 80053dc:	4618      	mov	r0, r3
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bc80      	pop	{r7}
 80053e4:	4770      	bx	lr

080053e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b085      	sub	sp, #20
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	60f8      	str	r0, [r7, #12]
 80053ee:	60b9      	str	r1, [r7, #8]
 80053f0:	607a      	str	r2, [r7, #4]
	return 0;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3714      	adds	r7, #20
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bc80      	pop	{r7}
 80053fc:	4770      	bx	lr
	...

08005400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005408:	4a14      	ldr	r2, [pc, #80]	; (800545c <_sbrk+0x5c>)
 800540a:	4b15      	ldr	r3, [pc, #84]	; (8005460 <_sbrk+0x60>)
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005414:	4b13      	ldr	r3, [pc, #76]	; (8005464 <_sbrk+0x64>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d102      	bne.n	8005422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800541c:	4b11      	ldr	r3, [pc, #68]	; (8005464 <_sbrk+0x64>)
 800541e:	4a12      	ldr	r2, [pc, #72]	; (8005468 <_sbrk+0x68>)
 8005420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005422:	4b10      	ldr	r3, [pc, #64]	; (8005464 <_sbrk+0x64>)
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4413      	add	r3, r2
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	429a      	cmp	r2, r3
 800542e:	d207      	bcs.n	8005440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005430:	f008 fd3c 	bl	800deac <__errno>
 8005434:	4603      	mov	r3, r0
 8005436:	220c      	movs	r2, #12
 8005438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800543a:	f04f 33ff 	mov.w	r3, #4294967295
 800543e:	e009      	b.n	8005454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005440:	4b08      	ldr	r3, [pc, #32]	; (8005464 <_sbrk+0x64>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005446:	4b07      	ldr	r3, [pc, #28]	; (8005464 <_sbrk+0x64>)
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4413      	add	r3, r2
 800544e:	4a05      	ldr	r2, [pc, #20]	; (8005464 <_sbrk+0x64>)
 8005450:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005452:	68fb      	ldr	r3, [r7, #12]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3718      	adds	r7, #24
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	20010000 	.word	0x20010000
 8005460:	00000400 	.word	0x00000400
 8005464:	20000d1c 	.word	0x20000d1c
 8005468:	20003130 	.word	0x20003130

0800546c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005470:	bf00      	nop
 8005472:	46bd      	mov	sp, r7
 8005474:	bc80      	pop	{r7}
 8005476:	4770      	bx	lr

08005478 <Reset_Handler>:
 8005478:	480c      	ldr	r0, [pc, #48]	; (80054ac <LoopFillZerobss+0x12>)
 800547a:	490d      	ldr	r1, [pc, #52]	; (80054b0 <LoopFillZerobss+0x16>)
 800547c:	4a0d      	ldr	r2, [pc, #52]	; (80054b4 <LoopFillZerobss+0x1a>)
 800547e:	2300      	movs	r3, #0
 8005480:	e002      	b.n	8005488 <LoopCopyDataInit>

08005482 <CopyDataInit>:
 8005482:	58d4      	ldr	r4, [r2, r3]
 8005484:	50c4      	str	r4, [r0, r3]
 8005486:	3304      	adds	r3, #4

08005488 <LoopCopyDataInit>:
 8005488:	18c4      	adds	r4, r0, r3
 800548a:	428c      	cmp	r4, r1
 800548c:	d3f9      	bcc.n	8005482 <CopyDataInit>
 800548e:	4a0a      	ldr	r2, [pc, #40]	; (80054b8 <LoopFillZerobss+0x1e>)
 8005490:	4c0a      	ldr	r4, [pc, #40]	; (80054bc <LoopFillZerobss+0x22>)
 8005492:	2300      	movs	r3, #0
 8005494:	e001      	b.n	800549a <LoopFillZerobss>

08005496 <FillZerobss>:
 8005496:	6013      	str	r3, [r2, #0]
 8005498:	3204      	adds	r2, #4

0800549a <LoopFillZerobss>:
 800549a:	42a2      	cmp	r2, r4
 800549c:	d3fb      	bcc.n	8005496 <FillZerobss>
 800549e:	f7ff ffe5 	bl	800546c <SystemInit>
 80054a2:	f008 fd09 	bl	800deb8 <__libc_init_array>
 80054a6:	f7fe ffef 	bl	8004488 <main>
 80054aa:	4770      	bx	lr
 80054ac:	20000000 	.word	0x20000000
 80054b0:	200000c4 	.word	0x200000c4
 80054b4:	08010298 	.word	0x08010298
 80054b8:	200000c4 	.word	0x200000c4
 80054bc:	20003130 	.word	0x20003130

080054c0 <ADC1_2_IRQHandler>:
 80054c0:	e7fe      	b.n	80054c0 <ADC1_2_IRQHandler>
	...

080054c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054c8:	4b08      	ldr	r3, [pc, #32]	; (80054ec <HAL_Init+0x28>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a07      	ldr	r2, [pc, #28]	; (80054ec <HAL_Init+0x28>)
 80054ce:	f043 0310 	orr.w	r3, r3, #16
 80054d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054d4:	2003      	movs	r0, #3
 80054d6:	f000 f8f5 	bl	80056c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80054da:	2000      	movs	r0, #0
 80054dc:	f7ff fe92 	bl	8005204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80054e0:	f7ff fcf8 	bl	8004ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	40022000 	.word	0x40022000

080054f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054f0:	b480      	push	{r7}
 80054f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80054f4:	4b05      	ldr	r3, [pc, #20]	; (800550c <HAL_IncTick+0x1c>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	461a      	mov	r2, r3
 80054fa:	4b05      	ldr	r3, [pc, #20]	; (8005510 <HAL_IncTick+0x20>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4413      	add	r3, r2
 8005500:	4a03      	ldr	r2, [pc, #12]	; (8005510 <HAL_IncTick+0x20>)
 8005502:	6013      	str	r3, [r2, #0]
}
 8005504:	bf00      	nop
 8005506:	46bd      	mov	sp, r7
 8005508:	bc80      	pop	{r7}
 800550a:	4770      	bx	lr
 800550c:	20000054 	.word	0x20000054
 8005510:	200030dc 	.word	0x200030dc

08005514 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005514:	b480      	push	{r7}
 8005516:	af00      	add	r7, sp, #0
  return uwTick;
 8005518:	4b02      	ldr	r3, [pc, #8]	; (8005524 <HAL_GetTick+0x10>)
 800551a:	681b      	ldr	r3, [r3, #0]
}
 800551c:	4618      	mov	r0, r3
 800551e:	46bd      	mov	sp, r7
 8005520:	bc80      	pop	{r7}
 8005522:	4770      	bx	lr
 8005524:	200030dc 	.word	0x200030dc

08005528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f003 0307 	and.w	r3, r3, #7
 8005536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005538:	4b0c      	ldr	r3, [pc, #48]	; (800556c <__NVIC_SetPriorityGrouping+0x44>)
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005544:	4013      	ands	r3, r2
 8005546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005550:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800555a:	4a04      	ldr	r2, [pc, #16]	; (800556c <__NVIC_SetPriorityGrouping+0x44>)
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	60d3      	str	r3, [r2, #12]
}
 8005560:	bf00      	nop
 8005562:	3714      	adds	r7, #20
 8005564:	46bd      	mov	sp, r7
 8005566:	bc80      	pop	{r7}
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	e000ed00 	.word	0xe000ed00

08005570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005570:	b480      	push	{r7}
 8005572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005574:	4b04      	ldr	r3, [pc, #16]	; (8005588 <__NVIC_GetPriorityGrouping+0x18>)
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	0a1b      	lsrs	r3, r3, #8
 800557a:	f003 0307 	and.w	r3, r3, #7
}
 800557e:	4618      	mov	r0, r3
 8005580:	46bd      	mov	sp, r7
 8005582:	bc80      	pop	{r7}
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	e000ed00 	.word	0xe000ed00

0800558c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	4603      	mov	r3, r0
 8005594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800559a:	2b00      	cmp	r3, #0
 800559c:	db0b      	blt.n	80055b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800559e:	79fb      	ldrb	r3, [r7, #7]
 80055a0:	f003 021f 	and.w	r2, r3, #31
 80055a4:	4906      	ldr	r1, [pc, #24]	; (80055c0 <__NVIC_EnableIRQ+0x34>)
 80055a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055aa:	095b      	lsrs	r3, r3, #5
 80055ac:	2001      	movs	r0, #1
 80055ae:	fa00 f202 	lsl.w	r2, r0, r2
 80055b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80055b6:	bf00      	nop
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bc80      	pop	{r7}
 80055be:	4770      	bx	lr
 80055c0:	e000e100 	.word	0xe000e100

080055c4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	4603      	mov	r3, r0
 80055cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	db12      	blt.n	80055fc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055d6:	79fb      	ldrb	r3, [r7, #7]
 80055d8:	f003 021f 	and.w	r2, r3, #31
 80055dc:	490a      	ldr	r1, [pc, #40]	; (8005608 <__NVIC_DisableIRQ+0x44>)
 80055de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055e2:	095b      	lsrs	r3, r3, #5
 80055e4:	2001      	movs	r0, #1
 80055e6:	fa00 f202 	lsl.w	r2, r0, r2
 80055ea:	3320      	adds	r3, #32
 80055ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80055f0:	f3bf 8f4f 	dsb	sy
}
 80055f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80055f6:	f3bf 8f6f 	isb	sy
}
 80055fa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	bc80      	pop	{r7}
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	e000e100 	.word	0xe000e100

0800560c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	4603      	mov	r3, r0
 8005614:	6039      	str	r1, [r7, #0]
 8005616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800561c:	2b00      	cmp	r3, #0
 800561e:	db0a      	blt.n	8005636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	b2da      	uxtb	r2, r3
 8005624:	490c      	ldr	r1, [pc, #48]	; (8005658 <__NVIC_SetPriority+0x4c>)
 8005626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800562a:	0112      	lsls	r2, r2, #4
 800562c:	b2d2      	uxtb	r2, r2
 800562e:	440b      	add	r3, r1
 8005630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005634:	e00a      	b.n	800564c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	b2da      	uxtb	r2, r3
 800563a:	4908      	ldr	r1, [pc, #32]	; (800565c <__NVIC_SetPriority+0x50>)
 800563c:	79fb      	ldrb	r3, [r7, #7]
 800563e:	f003 030f 	and.w	r3, r3, #15
 8005642:	3b04      	subs	r3, #4
 8005644:	0112      	lsls	r2, r2, #4
 8005646:	b2d2      	uxtb	r2, r2
 8005648:	440b      	add	r3, r1
 800564a:	761a      	strb	r2, [r3, #24]
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	bc80      	pop	{r7}
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	e000e100 	.word	0xe000e100
 800565c:	e000ed00 	.word	0xe000ed00

08005660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005660:	b480      	push	{r7}
 8005662:	b089      	sub	sp, #36	; 0x24
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f003 0307 	and.w	r3, r3, #7
 8005672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	f1c3 0307 	rsb	r3, r3, #7
 800567a:	2b04      	cmp	r3, #4
 800567c:	bf28      	it	cs
 800567e:	2304      	movcs	r3, #4
 8005680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	3304      	adds	r3, #4
 8005686:	2b06      	cmp	r3, #6
 8005688:	d902      	bls.n	8005690 <NVIC_EncodePriority+0x30>
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	3b03      	subs	r3, #3
 800568e:	e000      	b.n	8005692 <NVIC_EncodePriority+0x32>
 8005690:	2300      	movs	r3, #0
 8005692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005694:	f04f 32ff 	mov.w	r2, #4294967295
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	fa02 f303 	lsl.w	r3, r2, r3
 800569e:	43da      	mvns	r2, r3
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	401a      	ands	r2, r3
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056a8:	f04f 31ff 	mov.w	r1, #4294967295
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	fa01 f303 	lsl.w	r3, r1, r3
 80056b2:	43d9      	mvns	r1, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056b8:	4313      	orrs	r3, r2
         );
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3724      	adds	r7, #36	; 0x24
 80056be:	46bd      	mov	sp, r7
 80056c0:	bc80      	pop	{r7}
 80056c2:	4770      	bx	lr

080056c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f7ff ff2b 	bl	8005528 <__NVIC_SetPriorityGrouping>
}
 80056d2:	bf00      	nop
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80056da:	b580      	push	{r7, lr}
 80056dc:	b086      	sub	sp, #24
 80056de:	af00      	add	r7, sp, #0
 80056e0:	4603      	mov	r3, r0
 80056e2:	60b9      	str	r1, [r7, #8]
 80056e4:	607a      	str	r2, [r7, #4]
 80056e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80056ec:	f7ff ff40 	bl	8005570 <__NVIC_GetPriorityGrouping>
 80056f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	68b9      	ldr	r1, [r7, #8]
 80056f6:	6978      	ldr	r0, [r7, #20]
 80056f8:	f7ff ffb2 	bl	8005660 <NVIC_EncodePriority>
 80056fc:	4602      	mov	r2, r0
 80056fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005702:	4611      	mov	r1, r2
 8005704:	4618      	mov	r0, r3
 8005706:	f7ff ff81 	bl	800560c <__NVIC_SetPriority>
}
 800570a:	bf00      	nop
 800570c:	3718      	adds	r7, #24
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b082      	sub	sp, #8
 8005716:	af00      	add	r7, sp, #0
 8005718:	4603      	mov	r3, r0
 800571a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800571c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005720:	4618      	mov	r0, r3
 8005722:	f7ff ff33 	bl	800558c <__NVIC_EnableIRQ>
}
 8005726:	bf00      	nop
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b082      	sub	sp, #8
 8005732:	af00      	add	r7, sp, #0
 8005734:	4603      	mov	r3, r0
 8005736:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800573c:	4618      	mov	r0, r3
 800573e:	f7ff ff41 	bl	80055c4 <__NVIC_DisableIRQ>
}
 8005742:	bf00      	nop
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800574a:	b480      	push	{r7}
 800574c:	b085      	sub	sp, #20
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005752:	2300      	movs	r3, #0
 8005754:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800575c:	2b02      	cmp	r3, #2
 800575e:	d008      	beq.n	8005772 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2204      	movs	r2, #4
 8005764:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e020      	b.n	80057b4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f022 020e 	bic.w	r2, r2, #14
 8005780:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f022 0201 	bic.w	r2, r2, #1
 8005790:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800579a:	2101      	movs	r1, #1
 800579c:	fa01 f202 	lsl.w	r2, r1, r2
 80057a0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80057b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3714      	adds	r7, #20
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bc80      	pop	{r7}
 80057bc:	4770      	bx	lr
	...

080057c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057c8:	2300      	movs	r3, #0
 80057ca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d005      	beq.n	80057e2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2204      	movs	r2, #4
 80057da:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	73fb      	strb	r3, [r7, #15]
 80057e0:	e0d6      	b.n	8005990 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f022 020e 	bic.w	r2, r2, #14
 80057f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f022 0201 	bic.w	r2, r2, #1
 8005800:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	461a      	mov	r2, r3
 8005808:	4b64      	ldr	r3, [pc, #400]	; (800599c <HAL_DMA_Abort_IT+0x1dc>)
 800580a:	429a      	cmp	r2, r3
 800580c:	d958      	bls.n	80058c0 <HAL_DMA_Abort_IT+0x100>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a63      	ldr	r2, [pc, #396]	; (80059a0 <HAL_DMA_Abort_IT+0x1e0>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d04f      	beq.n	80058b8 <HAL_DMA_Abort_IT+0xf8>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a61      	ldr	r2, [pc, #388]	; (80059a4 <HAL_DMA_Abort_IT+0x1e4>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d048      	beq.n	80058b4 <HAL_DMA_Abort_IT+0xf4>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a60      	ldr	r2, [pc, #384]	; (80059a8 <HAL_DMA_Abort_IT+0x1e8>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d040      	beq.n	80058ae <HAL_DMA_Abort_IT+0xee>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a5e      	ldr	r2, [pc, #376]	; (80059ac <HAL_DMA_Abort_IT+0x1ec>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d038      	beq.n	80058a8 <HAL_DMA_Abort_IT+0xe8>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a5d      	ldr	r2, [pc, #372]	; (80059b0 <HAL_DMA_Abort_IT+0x1f0>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d030      	beq.n	80058a2 <HAL_DMA_Abort_IT+0xe2>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a5b      	ldr	r2, [pc, #364]	; (80059b4 <HAL_DMA_Abort_IT+0x1f4>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d028      	beq.n	800589c <HAL_DMA_Abort_IT+0xdc>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a53      	ldr	r2, [pc, #332]	; (800599c <HAL_DMA_Abort_IT+0x1dc>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d020      	beq.n	8005896 <HAL_DMA_Abort_IT+0xd6>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a57      	ldr	r2, [pc, #348]	; (80059b8 <HAL_DMA_Abort_IT+0x1f8>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d019      	beq.n	8005892 <HAL_DMA_Abort_IT+0xd2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a56      	ldr	r2, [pc, #344]	; (80059bc <HAL_DMA_Abort_IT+0x1fc>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d012      	beq.n	800588e <HAL_DMA_Abort_IT+0xce>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a54      	ldr	r2, [pc, #336]	; (80059c0 <HAL_DMA_Abort_IT+0x200>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d00a      	beq.n	8005888 <HAL_DMA_Abort_IT+0xc8>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a53      	ldr	r2, [pc, #332]	; (80059c4 <HAL_DMA_Abort_IT+0x204>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d102      	bne.n	8005882 <HAL_DMA_Abort_IT+0xc2>
 800587c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005880:	e01b      	b.n	80058ba <HAL_DMA_Abort_IT+0xfa>
 8005882:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005886:	e018      	b.n	80058ba <HAL_DMA_Abort_IT+0xfa>
 8005888:	f44f 7380 	mov.w	r3, #256	; 0x100
 800588c:	e015      	b.n	80058ba <HAL_DMA_Abort_IT+0xfa>
 800588e:	2310      	movs	r3, #16
 8005890:	e013      	b.n	80058ba <HAL_DMA_Abort_IT+0xfa>
 8005892:	2301      	movs	r3, #1
 8005894:	e011      	b.n	80058ba <HAL_DMA_Abort_IT+0xfa>
 8005896:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800589a:	e00e      	b.n	80058ba <HAL_DMA_Abort_IT+0xfa>
 800589c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80058a0:	e00b      	b.n	80058ba <HAL_DMA_Abort_IT+0xfa>
 80058a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80058a6:	e008      	b.n	80058ba <HAL_DMA_Abort_IT+0xfa>
 80058a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058ac:	e005      	b.n	80058ba <HAL_DMA_Abort_IT+0xfa>
 80058ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058b2:	e002      	b.n	80058ba <HAL_DMA_Abort_IT+0xfa>
 80058b4:	2310      	movs	r3, #16
 80058b6:	e000      	b.n	80058ba <HAL_DMA_Abort_IT+0xfa>
 80058b8:	2301      	movs	r3, #1
 80058ba:	4a43      	ldr	r2, [pc, #268]	; (80059c8 <HAL_DMA_Abort_IT+0x208>)
 80058bc:	6053      	str	r3, [r2, #4]
 80058be:	e057      	b.n	8005970 <HAL_DMA_Abort_IT+0x1b0>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a36      	ldr	r2, [pc, #216]	; (80059a0 <HAL_DMA_Abort_IT+0x1e0>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d04f      	beq.n	800596a <HAL_DMA_Abort_IT+0x1aa>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a35      	ldr	r2, [pc, #212]	; (80059a4 <HAL_DMA_Abort_IT+0x1e4>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d048      	beq.n	8005966 <HAL_DMA_Abort_IT+0x1a6>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a33      	ldr	r2, [pc, #204]	; (80059a8 <HAL_DMA_Abort_IT+0x1e8>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d040      	beq.n	8005960 <HAL_DMA_Abort_IT+0x1a0>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a32      	ldr	r2, [pc, #200]	; (80059ac <HAL_DMA_Abort_IT+0x1ec>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d038      	beq.n	800595a <HAL_DMA_Abort_IT+0x19a>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a30      	ldr	r2, [pc, #192]	; (80059b0 <HAL_DMA_Abort_IT+0x1f0>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d030      	beq.n	8005954 <HAL_DMA_Abort_IT+0x194>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a2f      	ldr	r2, [pc, #188]	; (80059b4 <HAL_DMA_Abort_IT+0x1f4>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d028      	beq.n	800594e <HAL_DMA_Abort_IT+0x18e>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a26      	ldr	r2, [pc, #152]	; (800599c <HAL_DMA_Abort_IT+0x1dc>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d020      	beq.n	8005948 <HAL_DMA_Abort_IT+0x188>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a2b      	ldr	r2, [pc, #172]	; (80059b8 <HAL_DMA_Abort_IT+0x1f8>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d019      	beq.n	8005944 <HAL_DMA_Abort_IT+0x184>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a29      	ldr	r2, [pc, #164]	; (80059bc <HAL_DMA_Abort_IT+0x1fc>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d012      	beq.n	8005940 <HAL_DMA_Abort_IT+0x180>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a28      	ldr	r2, [pc, #160]	; (80059c0 <HAL_DMA_Abort_IT+0x200>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d00a      	beq.n	800593a <HAL_DMA_Abort_IT+0x17a>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a26      	ldr	r2, [pc, #152]	; (80059c4 <HAL_DMA_Abort_IT+0x204>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d102      	bne.n	8005934 <HAL_DMA_Abort_IT+0x174>
 800592e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005932:	e01b      	b.n	800596c <HAL_DMA_Abort_IT+0x1ac>
 8005934:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005938:	e018      	b.n	800596c <HAL_DMA_Abort_IT+0x1ac>
 800593a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800593e:	e015      	b.n	800596c <HAL_DMA_Abort_IT+0x1ac>
 8005940:	2310      	movs	r3, #16
 8005942:	e013      	b.n	800596c <HAL_DMA_Abort_IT+0x1ac>
 8005944:	2301      	movs	r3, #1
 8005946:	e011      	b.n	800596c <HAL_DMA_Abort_IT+0x1ac>
 8005948:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800594c:	e00e      	b.n	800596c <HAL_DMA_Abort_IT+0x1ac>
 800594e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005952:	e00b      	b.n	800596c <HAL_DMA_Abort_IT+0x1ac>
 8005954:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005958:	e008      	b.n	800596c <HAL_DMA_Abort_IT+0x1ac>
 800595a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800595e:	e005      	b.n	800596c <HAL_DMA_Abort_IT+0x1ac>
 8005960:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005964:	e002      	b.n	800596c <HAL_DMA_Abort_IT+0x1ac>
 8005966:	2310      	movs	r3, #16
 8005968:	e000      	b.n	800596c <HAL_DMA_Abort_IT+0x1ac>
 800596a:	2301      	movs	r3, #1
 800596c:	4a17      	ldr	r2, [pc, #92]	; (80059cc <HAL_DMA_Abort_IT+0x20c>)
 800596e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005984:	2b00      	cmp	r3, #0
 8005986:	d003      	beq.n	8005990 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	4798      	blx	r3
    } 
  }
  return status;
 8005990:	7bfb      	ldrb	r3, [r7, #15]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	40020080 	.word	0x40020080
 80059a0:	40020008 	.word	0x40020008
 80059a4:	4002001c 	.word	0x4002001c
 80059a8:	40020030 	.word	0x40020030
 80059ac:	40020044 	.word	0x40020044
 80059b0:	40020058 	.word	0x40020058
 80059b4:	4002006c 	.word	0x4002006c
 80059b8:	40020408 	.word	0x40020408
 80059bc:	4002041c 	.word	0x4002041c
 80059c0:	40020430 	.word	0x40020430
 80059c4:	40020444 	.word	0x40020444
 80059c8:	40020400 	.word	0x40020400
 80059cc:	40020000 	.word	0x40020000

080059d0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80059de:	4618      	mov	r0, r3
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bc80      	pop	{r7}
 80059e6:	4770      	bx	lr

080059e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b08b      	sub	sp, #44	; 0x2c
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80059f2:	2300      	movs	r3, #0
 80059f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80059f6:	2300      	movs	r3, #0
 80059f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80059fa:	e169      	b.n	8005cd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80059fc:	2201      	movs	r2, #1
 80059fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a00:	fa02 f303 	lsl.w	r3, r2, r3
 8005a04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	69fa      	ldr	r2, [r7, #28]
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	f040 8158 	bne.w	8005cca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	4a9a      	ldr	r2, [pc, #616]	; (8005c88 <HAL_GPIO_Init+0x2a0>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d05e      	beq.n	8005ae2 <HAL_GPIO_Init+0xfa>
 8005a24:	4a98      	ldr	r2, [pc, #608]	; (8005c88 <HAL_GPIO_Init+0x2a0>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d875      	bhi.n	8005b16 <HAL_GPIO_Init+0x12e>
 8005a2a:	4a98      	ldr	r2, [pc, #608]	; (8005c8c <HAL_GPIO_Init+0x2a4>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d058      	beq.n	8005ae2 <HAL_GPIO_Init+0xfa>
 8005a30:	4a96      	ldr	r2, [pc, #600]	; (8005c8c <HAL_GPIO_Init+0x2a4>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d86f      	bhi.n	8005b16 <HAL_GPIO_Init+0x12e>
 8005a36:	4a96      	ldr	r2, [pc, #600]	; (8005c90 <HAL_GPIO_Init+0x2a8>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d052      	beq.n	8005ae2 <HAL_GPIO_Init+0xfa>
 8005a3c:	4a94      	ldr	r2, [pc, #592]	; (8005c90 <HAL_GPIO_Init+0x2a8>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d869      	bhi.n	8005b16 <HAL_GPIO_Init+0x12e>
 8005a42:	4a94      	ldr	r2, [pc, #592]	; (8005c94 <HAL_GPIO_Init+0x2ac>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d04c      	beq.n	8005ae2 <HAL_GPIO_Init+0xfa>
 8005a48:	4a92      	ldr	r2, [pc, #584]	; (8005c94 <HAL_GPIO_Init+0x2ac>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d863      	bhi.n	8005b16 <HAL_GPIO_Init+0x12e>
 8005a4e:	4a92      	ldr	r2, [pc, #584]	; (8005c98 <HAL_GPIO_Init+0x2b0>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d046      	beq.n	8005ae2 <HAL_GPIO_Init+0xfa>
 8005a54:	4a90      	ldr	r2, [pc, #576]	; (8005c98 <HAL_GPIO_Init+0x2b0>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d85d      	bhi.n	8005b16 <HAL_GPIO_Init+0x12e>
 8005a5a:	2b12      	cmp	r3, #18
 8005a5c:	d82a      	bhi.n	8005ab4 <HAL_GPIO_Init+0xcc>
 8005a5e:	2b12      	cmp	r3, #18
 8005a60:	d859      	bhi.n	8005b16 <HAL_GPIO_Init+0x12e>
 8005a62:	a201      	add	r2, pc, #4	; (adr r2, 8005a68 <HAL_GPIO_Init+0x80>)
 8005a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a68:	08005ae3 	.word	0x08005ae3
 8005a6c:	08005abd 	.word	0x08005abd
 8005a70:	08005acf 	.word	0x08005acf
 8005a74:	08005b11 	.word	0x08005b11
 8005a78:	08005b17 	.word	0x08005b17
 8005a7c:	08005b17 	.word	0x08005b17
 8005a80:	08005b17 	.word	0x08005b17
 8005a84:	08005b17 	.word	0x08005b17
 8005a88:	08005b17 	.word	0x08005b17
 8005a8c:	08005b17 	.word	0x08005b17
 8005a90:	08005b17 	.word	0x08005b17
 8005a94:	08005b17 	.word	0x08005b17
 8005a98:	08005b17 	.word	0x08005b17
 8005a9c:	08005b17 	.word	0x08005b17
 8005aa0:	08005b17 	.word	0x08005b17
 8005aa4:	08005b17 	.word	0x08005b17
 8005aa8:	08005b17 	.word	0x08005b17
 8005aac:	08005ac5 	.word	0x08005ac5
 8005ab0:	08005ad9 	.word	0x08005ad9
 8005ab4:	4a79      	ldr	r2, [pc, #484]	; (8005c9c <HAL_GPIO_Init+0x2b4>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d013      	beq.n	8005ae2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005aba:	e02c      	b.n	8005b16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	623b      	str	r3, [r7, #32]
          break;
 8005ac2:	e029      	b.n	8005b18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	3304      	adds	r3, #4
 8005aca:	623b      	str	r3, [r7, #32]
          break;
 8005acc:	e024      	b.n	8005b18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	3308      	adds	r3, #8
 8005ad4:	623b      	str	r3, [r7, #32]
          break;
 8005ad6:	e01f      	b.n	8005b18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	330c      	adds	r3, #12
 8005ade:	623b      	str	r3, [r7, #32]
          break;
 8005ae0:	e01a      	b.n	8005b18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d102      	bne.n	8005af0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005aea:	2304      	movs	r3, #4
 8005aec:	623b      	str	r3, [r7, #32]
          break;
 8005aee:	e013      	b.n	8005b18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d105      	bne.n	8005b04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005af8:	2308      	movs	r3, #8
 8005afa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	69fa      	ldr	r2, [r7, #28]
 8005b00:	611a      	str	r2, [r3, #16]
          break;
 8005b02:	e009      	b.n	8005b18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005b04:	2308      	movs	r3, #8
 8005b06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	69fa      	ldr	r2, [r7, #28]
 8005b0c:	615a      	str	r2, [r3, #20]
          break;
 8005b0e:	e003      	b.n	8005b18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005b10:	2300      	movs	r3, #0
 8005b12:	623b      	str	r3, [r7, #32]
          break;
 8005b14:	e000      	b.n	8005b18 <HAL_GPIO_Init+0x130>
          break;
 8005b16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	2bff      	cmp	r3, #255	; 0xff
 8005b1c:	d801      	bhi.n	8005b22 <HAL_GPIO_Init+0x13a>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	e001      	b.n	8005b26 <HAL_GPIO_Init+0x13e>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	3304      	adds	r3, #4
 8005b26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	2bff      	cmp	r3, #255	; 0xff
 8005b2c:	d802      	bhi.n	8005b34 <HAL_GPIO_Init+0x14c>
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	e002      	b.n	8005b3a <HAL_GPIO_Init+0x152>
 8005b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b36:	3b08      	subs	r3, #8
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	210f      	movs	r1, #15
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	fa01 f303 	lsl.w	r3, r1, r3
 8005b48:	43db      	mvns	r3, r3
 8005b4a:	401a      	ands	r2, r3
 8005b4c:	6a39      	ldr	r1, [r7, #32]
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	fa01 f303 	lsl.w	r3, r1, r3
 8005b54:	431a      	orrs	r2, r3
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f000 80b1 	beq.w	8005cca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005b68:	4b4d      	ldr	r3, [pc, #308]	; (8005ca0 <HAL_GPIO_Init+0x2b8>)
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	4a4c      	ldr	r2, [pc, #304]	; (8005ca0 <HAL_GPIO_Init+0x2b8>)
 8005b6e:	f043 0301 	orr.w	r3, r3, #1
 8005b72:	6193      	str	r3, [r2, #24]
 8005b74:	4b4a      	ldr	r3, [pc, #296]	; (8005ca0 <HAL_GPIO_Init+0x2b8>)
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	60bb      	str	r3, [r7, #8]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005b80:	4a48      	ldr	r2, [pc, #288]	; (8005ca4 <HAL_GPIO_Init+0x2bc>)
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	089b      	lsrs	r3, r3, #2
 8005b86:	3302      	adds	r3, #2
 8005b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	f003 0303 	and.w	r3, r3, #3
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	220f      	movs	r2, #15
 8005b98:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9c:	43db      	mvns	r3, r3
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a40      	ldr	r2, [pc, #256]	; (8005ca8 <HAL_GPIO_Init+0x2c0>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d013      	beq.n	8005bd4 <HAL_GPIO_Init+0x1ec>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a3f      	ldr	r2, [pc, #252]	; (8005cac <HAL_GPIO_Init+0x2c4>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d00d      	beq.n	8005bd0 <HAL_GPIO_Init+0x1e8>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a3e      	ldr	r2, [pc, #248]	; (8005cb0 <HAL_GPIO_Init+0x2c8>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d007      	beq.n	8005bcc <HAL_GPIO_Init+0x1e4>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a3d      	ldr	r2, [pc, #244]	; (8005cb4 <HAL_GPIO_Init+0x2cc>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d101      	bne.n	8005bc8 <HAL_GPIO_Init+0x1e0>
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e006      	b.n	8005bd6 <HAL_GPIO_Init+0x1ee>
 8005bc8:	2304      	movs	r3, #4
 8005bca:	e004      	b.n	8005bd6 <HAL_GPIO_Init+0x1ee>
 8005bcc:	2302      	movs	r3, #2
 8005bce:	e002      	b.n	8005bd6 <HAL_GPIO_Init+0x1ee>
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e000      	b.n	8005bd6 <HAL_GPIO_Init+0x1ee>
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bd8:	f002 0203 	and.w	r2, r2, #3
 8005bdc:	0092      	lsls	r2, r2, #2
 8005bde:	4093      	lsls	r3, r2
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005be6:	492f      	ldr	r1, [pc, #188]	; (8005ca4 <HAL_GPIO_Init+0x2bc>)
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	089b      	lsrs	r3, r3, #2
 8005bec:	3302      	adds	r3, #2
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d006      	beq.n	8005c0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005c00:	4b2d      	ldr	r3, [pc, #180]	; (8005cb8 <HAL_GPIO_Init+0x2d0>)
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	492c      	ldr	r1, [pc, #176]	; (8005cb8 <HAL_GPIO_Init+0x2d0>)
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	600b      	str	r3, [r1, #0]
 8005c0c:	e006      	b.n	8005c1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005c0e:	4b2a      	ldr	r3, [pc, #168]	; (8005cb8 <HAL_GPIO_Init+0x2d0>)
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	43db      	mvns	r3, r3
 8005c16:	4928      	ldr	r1, [pc, #160]	; (8005cb8 <HAL_GPIO_Init+0x2d0>)
 8005c18:	4013      	ands	r3, r2
 8005c1a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d006      	beq.n	8005c36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005c28:	4b23      	ldr	r3, [pc, #140]	; (8005cb8 <HAL_GPIO_Init+0x2d0>)
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	4922      	ldr	r1, [pc, #136]	; (8005cb8 <HAL_GPIO_Init+0x2d0>)
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	604b      	str	r3, [r1, #4]
 8005c34:	e006      	b.n	8005c44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005c36:	4b20      	ldr	r3, [pc, #128]	; (8005cb8 <HAL_GPIO_Init+0x2d0>)
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	43db      	mvns	r3, r3
 8005c3e:	491e      	ldr	r1, [pc, #120]	; (8005cb8 <HAL_GPIO_Init+0x2d0>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d006      	beq.n	8005c5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005c50:	4b19      	ldr	r3, [pc, #100]	; (8005cb8 <HAL_GPIO_Init+0x2d0>)
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	4918      	ldr	r1, [pc, #96]	; (8005cb8 <HAL_GPIO_Init+0x2d0>)
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	608b      	str	r3, [r1, #8]
 8005c5c:	e006      	b.n	8005c6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005c5e:	4b16      	ldr	r3, [pc, #88]	; (8005cb8 <HAL_GPIO_Init+0x2d0>)
 8005c60:	689a      	ldr	r2, [r3, #8]
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	43db      	mvns	r3, r3
 8005c66:	4914      	ldr	r1, [pc, #80]	; (8005cb8 <HAL_GPIO_Init+0x2d0>)
 8005c68:	4013      	ands	r3, r2
 8005c6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d021      	beq.n	8005cbc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005c78:	4b0f      	ldr	r3, [pc, #60]	; (8005cb8 <HAL_GPIO_Init+0x2d0>)
 8005c7a:	68da      	ldr	r2, [r3, #12]
 8005c7c:	490e      	ldr	r1, [pc, #56]	; (8005cb8 <HAL_GPIO_Init+0x2d0>)
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	60cb      	str	r3, [r1, #12]
 8005c84:	e021      	b.n	8005cca <HAL_GPIO_Init+0x2e2>
 8005c86:	bf00      	nop
 8005c88:	10320000 	.word	0x10320000
 8005c8c:	10310000 	.word	0x10310000
 8005c90:	10220000 	.word	0x10220000
 8005c94:	10210000 	.word	0x10210000
 8005c98:	10120000 	.word	0x10120000
 8005c9c:	10110000 	.word	0x10110000
 8005ca0:	40021000 	.word	0x40021000
 8005ca4:	40010000 	.word	0x40010000
 8005ca8:	40010800 	.word	0x40010800
 8005cac:	40010c00 	.word	0x40010c00
 8005cb0:	40011000 	.word	0x40011000
 8005cb4:	40011400 	.word	0x40011400
 8005cb8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005cbc:	4b0b      	ldr	r3, [pc, #44]	; (8005cec <HAL_GPIO_Init+0x304>)
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	43db      	mvns	r3, r3
 8005cc4:	4909      	ldr	r1, [pc, #36]	; (8005cec <HAL_GPIO_Init+0x304>)
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	3301      	adds	r3, #1
 8005cce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f47f ae8e 	bne.w	80059fc <HAL_GPIO_Init+0x14>
  }
}
 8005ce0:	bf00      	nop
 8005ce2:	bf00      	nop
 8005ce4:	372c      	adds	r7, #44	; 0x2c
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bc80      	pop	{r7}
 8005cea:	4770      	bx	lr
 8005cec:	40010400 	.word	0x40010400

08005cf0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b089      	sub	sp, #36	; 0x24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8005cfe:	e09a      	b.n	8005e36 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005d00:	2201      	movs	r2, #1
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	fa02 f303 	lsl.w	r3, r2, r3
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f000 808d 	beq.w	8005e30 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8005d16:	4a4e      	ldr	r2, [pc, #312]	; (8005e50 <HAL_GPIO_DeInit+0x160>)
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	089b      	lsrs	r3, r3, #2
 8005d1c:	3302      	adds	r3, #2
 8005d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d22:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	f003 0303 	and.w	r3, r3, #3
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	220f      	movs	r2, #15
 8005d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	4013      	ands	r3, r2
 8005d36:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a46      	ldr	r2, [pc, #280]	; (8005e54 <HAL_GPIO_DeInit+0x164>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d013      	beq.n	8005d68 <HAL_GPIO_DeInit+0x78>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a45      	ldr	r2, [pc, #276]	; (8005e58 <HAL_GPIO_DeInit+0x168>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d00d      	beq.n	8005d64 <HAL_GPIO_DeInit+0x74>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a44      	ldr	r2, [pc, #272]	; (8005e5c <HAL_GPIO_DeInit+0x16c>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d007      	beq.n	8005d60 <HAL_GPIO_DeInit+0x70>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a43      	ldr	r2, [pc, #268]	; (8005e60 <HAL_GPIO_DeInit+0x170>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d101      	bne.n	8005d5c <HAL_GPIO_DeInit+0x6c>
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e006      	b.n	8005d6a <HAL_GPIO_DeInit+0x7a>
 8005d5c:	2304      	movs	r3, #4
 8005d5e:	e004      	b.n	8005d6a <HAL_GPIO_DeInit+0x7a>
 8005d60:	2302      	movs	r3, #2
 8005d62:	e002      	b.n	8005d6a <HAL_GPIO_DeInit+0x7a>
 8005d64:	2301      	movs	r3, #1
 8005d66:	e000      	b.n	8005d6a <HAL_GPIO_DeInit+0x7a>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	69fa      	ldr	r2, [r7, #28]
 8005d6c:	f002 0203 	and.w	r2, r2, #3
 8005d70:	0092      	lsls	r2, r2, #2
 8005d72:	4093      	lsls	r3, r2
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d132      	bne.n	8005de0 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	f003 0303 	and.w	r3, r3, #3
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	220f      	movs	r2, #15
 8005d84:	fa02 f303 	lsl.w	r3, r2, r3
 8005d88:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8005d8a:	4a31      	ldr	r2, [pc, #196]	; (8005e50 <HAL_GPIO_DeInit+0x160>)
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	089b      	lsrs	r3, r3, #2
 8005d90:	3302      	adds	r3, #2
 8005d92:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	43da      	mvns	r2, r3
 8005d9a:	482d      	ldr	r0, [pc, #180]	; (8005e50 <HAL_GPIO_DeInit+0x160>)
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	089b      	lsrs	r3, r3, #2
 8005da0:	400a      	ands	r2, r1
 8005da2:	3302      	adds	r3, #2
 8005da4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8005da8:	4b2e      	ldr	r3, [pc, #184]	; (8005e64 <HAL_GPIO_DeInit+0x174>)
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	43db      	mvns	r3, r3
 8005db0:	492c      	ldr	r1, [pc, #176]	; (8005e64 <HAL_GPIO_DeInit+0x174>)
 8005db2:	4013      	ands	r3, r2
 8005db4:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8005db6:	4b2b      	ldr	r3, [pc, #172]	; (8005e64 <HAL_GPIO_DeInit+0x174>)
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	43db      	mvns	r3, r3
 8005dbe:	4929      	ldr	r1, [pc, #164]	; (8005e64 <HAL_GPIO_DeInit+0x174>)
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8005dc4:	4b27      	ldr	r3, [pc, #156]	; (8005e64 <HAL_GPIO_DeInit+0x174>)
 8005dc6:	689a      	ldr	r2, [r3, #8]
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	43db      	mvns	r3, r3
 8005dcc:	4925      	ldr	r1, [pc, #148]	; (8005e64 <HAL_GPIO_DeInit+0x174>)
 8005dce:	4013      	ands	r3, r2
 8005dd0:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8005dd2:	4b24      	ldr	r3, [pc, #144]	; (8005e64 <HAL_GPIO_DeInit+0x174>)
 8005dd4:	68da      	ldr	r2, [r3, #12]
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	43db      	mvns	r3, r3
 8005dda:	4922      	ldr	r1, [pc, #136]	; (8005e64 <HAL_GPIO_DeInit+0x174>)
 8005ddc:	4013      	ands	r3, r2
 8005dde:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	2bff      	cmp	r3, #255	; 0xff
 8005de4:	d801      	bhi.n	8005dea <HAL_GPIO_DeInit+0xfa>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	e001      	b.n	8005dee <HAL_GPIO_DeInit+0xfe>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	3304      	adds	r3, #4
 8005dee:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	2bff      	cmp	r3, #255	; 0xff
 8005df4:	d802      	bhi.n	8005dfc <HAL_GPIO_DeInit+0x10c>
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	e002      	b.n	8005e02 <HAL_GPIO_DeInit+0x112>
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	3b08      	subs	r3, #8
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	210f      	movs	r1, #15
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e10:	43db      	mvns	r3, r3
 8005e12:	401a      	ands	r2, r3
 8005e14:	2104      	movs	r1, #4
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	fa01 f303 	lsl.w	r3, r1, r3
 8005e1c:	431a      	orrs	r2, r3
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68da      	ldr	r2, [r3, #12]
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	43db      	mvns	r3, r3
 8005e2a:	401a      	ands	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	3301      	adds	r3, #1
 8005e34:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f47f af5e 	bne.w	8005d00 <HAL_GPIO_DeInit+0x10>
  }
}
 8005e44:	bf00      	nop
 8005e46:	bf00      	nop
 8005e48:	3724      	adds	r7, #36	; 0x24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bc80      	pop	{r7}
 8005e4e:	4770      	bx	lr
 8005e50:	40010000 	.word	0x40010000
 8005e54:	40010800 	.word	0x40010800
 8005e58:	40010c00 	.word	0x40010c00
 8005e5c:	40011000 	.word	0x40011000
 8005e60:	40011400 	.word	0x40011400
 8005e64:	40010400 	.word	0x40010400

08005e68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	460b      	mov	r3, r1
 8005e72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689a      	ldr	r2, [r3, #8]
 8005e78:	887b      	ldrh	r3, [r7, #2]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d002      	beq.n	8005e86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005e80:	2301      	movs	r3, #1
 8005e82:	73fb      	strb	r3, [r7, #15]
 8005e84:	e001      	b.n	8005e8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005e86:	2300      	movs	r3, #0
 8005e88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bc80      	pop	{r7}
 8005e94:	4770      	bx	lr

08005e96 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e96:	b480      	push	{r7}
 8005e98:	b083      	sub	sp, #12
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	807b      	strh	r3, [r7, #2]
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ea6:	787b      	ldrb	r3, [r7, #1]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d003      	beq.n	8005eb4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005eac:	887a      	ldrh	r2, [r7, #2]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005eb2:	e003      	b.n	8005ebc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005eb4:	887b      	ldrh	r3, [r7, #2]
 8005eb6:	041a      	lsls	r2, r3, #16
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	611a      	str	r2, [r3, #16]
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bc80      	pop	{r7}
 8005ec4:	4770      	bx	lr

08005ec6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b085      	sub	sp, #20
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	460b      	mov	r3, r1
 8005ed0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005ed8:	887a      	ldrh	r2, [r7, #2]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	4013      	ands	r3, r2
 8005ede:	041a      	lsls	r2, r3, #16
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	43d9      	mvns	r1, r3
 8005ee4:	887b      	ldrh	r3, [r7, #2]
 8005ee6:	400b      	ands	r3, r1
 8005ee8:	431a      	orrs	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	611a      	str	r2, [r3, #16]
}
 8005eee:	bf00      	nop
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bc80      	pop	{r7}
 8005ef6:	4770      	bx	lr

08005ef8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e12b      	b.n	8006162 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d106      	bne.n	8005f24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7ff f810 	bl	8004f44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2224      	movs	r2, #36	; 0x24
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f022 0201 	bic.w	r2, r2, #1
 8005f3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005f5c:	f002 fc8a 	bl	8008874 <HAL_RCC_GetPCLK1Freq>
 8005f60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	4a81      	ldr	r2, [pc, #516]	; (800616c <HAL_I2C_Init+0x274>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d807      	bhi.n	8005f7c <HAL_I2C_Init+0x84>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	4a80      	ldr	r2, [pc, #512]	; (8006170 <HAL_I2C_Init+0x278>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	bf94      	ite	ls
 8005f74:	2301      	movls	r3, #1
 8005f76:	2300      	movhi	r3, #0
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	e006      	b.n	8005f8a <HAL_I2C_Init+0x92>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	4a7d      	ldr	r2, [pc, #500]	; (8006174 <HAL_I2C_Init+0x27c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	bf94      	ite	ls
 8005f84:	2301      	movls	r3, #1
 8005f86:	2300      	movhi	r3, #0
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e0e7      	b.n	8006162 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	4a78      	ldr	r2, [pc, #480]	; (8006178 <HAL_I2C_Init+0x280>)
 8005f96:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9a:	0c9b      	lsrs	r3, r3, #18
 8005f9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6a1b      	ldr	r3, [r3, #32]
 8005fb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	4a6a      	ldr	r2, [pc, #424]	; (800616c <HAL_I2C_Init+0x274>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d802      	bhi.n	8005fcc <HAL_I2C_Init+0xd4>
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	e009      	b.n	8005fe0 <HAL_I2C_Init+0xe8>
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005fd2:	fb02 f303 	mul.w	r3, r2, r3
 8005fd6:	4a69      	ldr	r2, [pc, #420]	; (800617c <HAL_I2C_Init+0x284>)
 8005fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fdc:	099b      	lsrs	r3, r3, #6
 8005fde:	3301      	adds	r3, #1
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	6812      	ldr	r2, [r2, #0]
 8005fe4:	430b      	orrs	r3, r1
 8005fe6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005ff2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	495c      	ldr	r1, [pc, #368]	; (800616c <HAL_I2C_Init+0x274>)
 8005ffc:	428b      	cmp	r3, r1
 8005ffe:	d819      	bhi.n	8006034 <HAL_I2C_Init+0x13c>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	1e59      	subs	r1, r3, #1
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	005b      	lsls	r3, r3, #1
 800600a:	fbb1 f3f3 	udiv	r3, r1, r3
 800600e:	1c59      	adds	r1, r3, #1
 8006010:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006014:	400b      	ands	r3, r1
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00a      	beq.n	8006030 <HAL_I2C_Init+0x138>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	1e59      	subs	r1, r3, #1
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	005b      	lsls	r3, r3, #1
 8006024:	fbb1 f3f3 	udiv	r3, r1, r3
 8006028:	3301      	adds	r3, #1
 800602a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800602e:	e051      	b.n	80060d4 <HAL_I2C_Init+0x1dc>
 8006030:	2304      	movs	r3, #4
 8006032:	e04f      	b.n	80060d4 <HAL_I2C_Init+0x1dc>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d111      	bne.n	8006060 <HAL_I2C_Init+0x168>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	1e58      	subs	r0, r3, #1
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6859      	ldr	r1, [r3, #4]
 8006044:	460b      	mov	r3, r1
 8006046:	005b      	lsls	r3, r3, #1
 8006048:	440b      	add	r3, r1
 800604a:	fbb0 f3f3 	udiv	r3, r0, r3
 800604e:	3301      	adds	r3, #1
 8006050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006054:	2b00      	cmp	r3, #0
 8006056:	bf0c      	ite	eq
 8006058:	2301      	moveq	r3, #1
 800605a:	2300      	movne	r3, #0
 800605c:	b2db      	uxtb	r3, r3
 800605e:	e012      	b.n	8006086 <HAL_I2C_Init+0x18e>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	1e58      	subs	r0, r3, #1
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6859      	ldr	r1, [r3, #4]
 8006068:	460b      	mov	r3, r1
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	440b      	add	r3, r1
 800606e:	0099      	lsls	r1, r3, #2
 8006070:	440b      	add	r3, r1
 8006072:	fbb0 f3f3 	udiv	r3, r0, r3
 8006076:	3301      	adds	r3, #1
 8006078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800607c:	2b00      	cmp	r3, #0
 800607e:	bf0c      	ite	eq
 8006080:	2301      	moveq	r3, #1
 8006082:	2300      	movne	r3, #0
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <HAL_I2C_Init+0x196>
 800608a:	2301      	movs	r3, #1
 800608c:	e022      	b.n	80060d4 <HAL_I2C_Init+0x1dc>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10e      	bne.n	80060b4 <HAL_I2C_Init+0x1bc>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	1e58      	subs	r0, r3, #1
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6859      	ldr	r1, [r3, #4]
 800609e:	460b      	mov	r3, r1
 80060a0:	005b      	lsls	r3, r3, #1
 80060a2:	440b      	add	r3, r1
 80060a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80060a8:	3301      	adds	r3, #1
 80060aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060b2:	e00f      	b.n	80060d4 <HAL_I2C_Init+0x1dc>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	1e58      	subs	r0, r3, #1
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6859      	ldr	r1, [r3, #4]
 80060bc:	460b      	mov	r3, r1
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	440b      	add	r3, r1
 80060c2:	0099      	lsls	r1, r3, #2
 80060c4:	440b      	add	r3, r1
 80060c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80060ca:	3301      	adds	r3, #1
 80060cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060d4:	6879      	ldr	r1, [r7, #4]
 80060d6:	6809      	ldr	r1, [r1, #0]
 80060d8:	4313      	orrs	r3, r2
 80060da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	69da      	ldr	r2, [r3, #28]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	431a      	orrs	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006102:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	6911      	ldr	r1, [r2, #16]
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	68d2      	ldr	r2, [r2, #12]
 800610e:	4311      	orrs	r1, r2
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	6812      	ldr	r2, [r2, #0]
 8006114:	430b      	orrs	r3, r1
 8006116:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	695a      	ldr	r2, [r3, #20]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	431a      	orrs	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	430a      	orrs	r2, r1
 8006132:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f042 0201 	orr.w	r2, r2, #1
 8006142:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2220      	movs	r2, #32
 800614e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	000186a0 	.word	0x000186a0
 8006170:	001e847f 	.word	0x001e847f
 8006174:	003d08ff 	.word	0x003d08ff
 8006178:	431bde83 	.word	0x431bde83
 800617c:	10624dd3 	.word	0x10624dd3

08006180 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e021      	b.n	80061d6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2224      	movs	r2, #36	; 0x24
 8006196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f022 0201 	bic.w	r2, r2, #1
 80061a8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7fe ff18 	bl	8004fe0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
	...

080061e0 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b087      	sub	sp, #28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	607a      	str	r2, [r7, #4]
 80061ea:	461a      	mov	r2, r3
 80061ec:	460b      	mov	r3, r1
 80061ee:	817b      	strh	r3, [r7, #10]
 80061f0:	4613      	mov	r3, r2
 80061f2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80061f4:	2300      	movs	r3, #0
 80061f6:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b20      	cmp	r3, #32
 8006202:	f040 8085 	bne.w	8006310 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006206:	4b45      	ldr	r3, [pc, #276]	; (800631c <HAL_I2C_Master_Transmit_IT+0x13c>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	08db      	lsrs	r3, r3, #3
 800620c:	4a44      	ldr	r2, [pc, #272]	; (8006320 <HAL_I2C_Master_Transmit_IT+0x140>)
 800620e:	fba2 2303 	umull	r2, r3, r2, r3
 8006212:	0a1a      	lsrs	r2, r3, #8
 8006214:	4613      	mov	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4413      	add	r3, r2
 800621a:	009a      	lsls	r2, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	3b01      	subs	r3, #1
 8006224:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d116      	bne.n	800625a <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2220      	movs	r2, #32
 8006236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006246:	f043 0220 	orr.w	r2, r3, #32
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e05b      	b.n	8006312 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	f003 0302 	and.w	r3, r3, #2
 8006264:	2b02      	cmp	r3, #2
 8006266:	d0db      	beq.n	8006220 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800626e:	2b01      	cmp	r3, #1
 8006270:	d101      	bne.n	8006276 <HAL_I2C_Master_Transmit_IT+0x96>
 8006272:	2302      	movs	r3, #2
 8006274:	e04d      	b.n	8006312 <HAL_I2C_Master_Transmit_IT+0x132>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	2b01      	cmp	r3, #1
 800628a:	d007      	beq.n	800629c <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f042 0201 	orr.w	r2, r2, #1
 800629a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2221      	movs	r2, #33	; 0x21
 80062b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2210      	movs	r2, #16
 80062b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	893a      	ldrh	r2, [r7, #8]
 80062cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	4a12      	ldr	r2, [pc, #72]	; (8006324 <HAL_I2C_Master_Transmit_IT+0x144>)
 80062dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80062de:	897a      	ldrh	r2, [r7, #10]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80062fa:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800630a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800630c:	2300      	movs	r3, #0
 800630e:	e000      	b.n	8006312 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8006310:	2302      	movs	r3, #2
  }
}
 8006312:	4618      	mov	r0, r3
 8006314:	371c      	adds	r7, #28
 8006316:	46bd      	mov	sp, r7
 8006318:	bc80      	pop	{r7}
 800631a:	4770      	bx	lr
 800631c:	2000004c 	.word	0x2000004c
 8006320:	14f8b589 	.word	0x14f8b589
 8006324:	ffff0000 	.word	0xffff0000

08006328 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8006328:	b480      	push	{r7}
 800632a:	b087      	sub	sp, #28
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	607a      	str	r2, [r7, #4]
 8006332:	461a      	mov	r2, r3
 8006334:	460b      	mov	r3, r1
 8006336:	817b      	strh	r3, [r7, #10]
 8006338:	4613      	mov	r3, r2
 800633a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800633c:	2300      	movs	r3, #0
 800633e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2b20      	cmp	r3, #32
 800634a:	f040 808d 	bne.w	8006468 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800634e:	4b49      	ldr	r3, [pc, #292]	; (8006474 <HAL_I2C_Master_Receive_IT+0x14c>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	08db      	lsrs	r3, r3, #3
 8006354:	4a48      	ldr	r2, [pc, #288]	; (8006478 <HAL_I2C_Master_Receive_IT+0x150>)
 8006356:	fba2 2303 	umull	r2, r3, r2, r3
 800635a:	0a1a      	lsrs	r2, r3, #8
 800635c:	4613      	mov	r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	4413      	add	r3, r2
 8006362:	009a      	lsls	r2, r3, #2
 8006364:	4413      	add	r3, r2
 8006366:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	3b01      	subs	r3, #1
 800636c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d116      	bne.n	80063a2 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2220      	movs	r2, #32
 800637e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638e:	f043 0220 	orr.w	r2, r3, #32
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e063      	b.n	800646a <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d0db      	beq.n	8006368 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d101      	bne.n	80063be <HAL_I2C_Master_Receive_IT+0x96>
 80063ba:	2302      	movs	r3, #2
 80063bc:	e055      	b.n	800646a <HAL_I2C_Master_Receive_IT+0x142>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0301 	and.w	r3, r3, #1
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d007      	beq.n	80063e4 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f042 0201 	orr.w	r2, r2, #1
 80063e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2222      	movs	r2, #34	; 0x22
 80063f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2210      	movs	r2, #16
 8006400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	893a      	ldrh	r2, [r7, #8]
 8006414:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800641a:	b29a      	uxth	r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4a16      	ldr	r2, [pc, #88]	; (800647c <HAL_I2C_Master_Receive_IT+0x154>)
 8006424:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8006426:	897a      	ldrh	r2, [r7, #10]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006442:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006452:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006462:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006464:	2300      	movs	r3, #0
 8006466:	e000      	b.n	800646a <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8006468:	2302      	movs	r3, #2
  }
}
 800646a:	4618      	mov	r0, r3
 800646c:	371c      	adds	r7, #28
 800646e:	46bd      	mov	sp, r7
 8006470:	bc80      	pop	{r7}
 8006472:	4770      	bx	lr
 8006474:	2000004c 	.word	0x2000004c
 8006478:	14f8b589 	.word	0x14f8b589
 800647c:	ffff0000 	.word	0xffff0000

08006480 <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	460b      	mov	r3, r1
 800648a:	807b      	strh	r3, [r7, #2]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006492:	73fb      	strb	r3, [r7, #15]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(DevAddress);

  /* Abort Master transfer during Receive or Transmit process    */
  if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && (CurrentMode == HAL_I2C_MODE_MASTER))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	f003 0302 	and.w	r3, r3, #2
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d138      	bne.n	8006514 <HAL_I2C_Master_Abort_IT+0x94>
 80064a2:	7bfb      	ldrb	r3, [r7, #15]
 80064a4:	2b10      	cmp	r3, #16
 80064a6:	d135      	bne.n	8006514 <HAL_I2C_Master_Abort_IT+0x94>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d101      	bne.n	80064b6 <HAL_I2C_Master_Abort_IT+0x36>
 80064b2:	2302      	movs	r3, #2
 80064b4:	e02f      	b.n	8006516 <HAL_I2C_Master_Abort_IT+0x96>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2201      	movs	r2, #1
 80064ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hi2c->PreviousState = I2C_STATE_NONE;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_ABORT;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2260      	movs	r2, #96	; 0x60
 80064c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064da:	601a      	str	r2, [r3, #0]

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064ea:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	685a      	ldr	r2, [r3, #4]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006500:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f001 fa92 	bl	8007a34 <I2C_ITError>

    return HAL_OK;
 8006510:	2300      	movs	r3, #0
 8006512:	e000      	b.n	8006516 <HAL_I2C_Master_Abort_IT+0x96>
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    /* Or periphal is not in busy state, mean there is no active sequence to be abort */
    return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
  }
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b088      	sub	sp, #32
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006526:	2300      	movs	r3, #0
 8006528:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006536:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800653e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006546:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006548:	7bfb      	ldrb	r3, [r7, #15]
 800654a:	2b10      	cmp	r3, #16
 800654c:	d003      	beq.n	8006556 <HAL_I2C_EV_IRQHandler+0x38>
 800654e:	7bfb      	ldrb	r3, [r7, #15]
 8006550:	2b40      	cmp	r3, #64	; 0x40
 8006552:	f040 80c1 	bne.w	80066d8 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	695b      	ldr	r3, [r3, #20]
 8006564:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10d      	bne.n	800658c <HAL_I2C_EV_IRQHandler+0x6e>
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006576:	d003      	beq.n	8006580 <HAL_I2C_EV_IRQHandler+0x62>
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800657e:	d101      	bne.n	8006584 <HAL_I2C_EV_IRQHandler+0x66>
 8006580:	2301      	movs	r3, #1
 8006582:	e000      	b.n	8006586 <HAL_I2C_EV_IRQHandler+0x68>
 8006584:	2300      	movs	r3, #0
 8006586:	2b01      	cmp	r3, #1
 8006588:	f000 8132 	beq.w	80067f0 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00c      	beq.n	80065b0 <HAL_I2C_EV_IRQHandler+0x92>
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	0a5b      	lsrs	r3, r3, #9
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d006      	beq.n	80065b0 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f001 fc52 	bl	8007e4c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fd53 	bl	8007054 <I2C_Master_SB>
 80065ae:	e092      	b.n	80066d6 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	08db      	lsrs	r3, r3, #3
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d009      	beq.n	80065d0 <HAL_I2C_EV_IRQHandler+0xb2>
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	0a5b      	lsrs	r3, r3, #9
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d003      	beq.n	80065d0 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 fdc8 	bl	800715e <I2C_Master_ADD10>
 80065ce:	e082      	b.n	80066d6 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	085b      	lsrs	r3, r3, #1
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d009      	beq.n	80065f0 <HAL_I2C_EV_IRQHandler+0xd2>
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	0a5b      	lsrs	r3, r3, #9
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d003      	beq.n	80065f0 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fde1 	bl	80071b0 <I2C_Master_ADDR>
 80065ee:	e072      	b.n	80066d6 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	089b      	lsrs	r3, r3, #2
 80065f4:	f003 0301 	and.w	r3, r3, #1
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d03b      	beq.n	8006674 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800660a:	f000 80f3 	beq.w	80067f4 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	09db      	lsrs	r3, r3, #7
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00f      	beq.n	800663a <HAL_I2C_EV_IRQHandler+0x11c>
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	0a9b      	lsrs	r3, r3, #10
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b00      	cmp	r3, #0
 8006624:	d009      	beq.n	800663a <HAL_I2C_EV_IRQHandler+0x11c>
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	089b      	lsrs	r3, r3, #2
 800662a:	f003 0301 	and.w	r3, r3, #1
 800662e:	2b00      	cmp	r3, #0
 8006630:	d103      	bne.n	800663a <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f9cd 	bl	80069d2 <I2C_MasterTransmit_TXE>
 8006638:	e04d      	b.n	80066d6 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	089b      	lsrs	r3, r3, #2
 800663e:	f003 0301 	and.w	r3, r3, #1
 8006642:	2b00      	cmp	r3, #0
 8006644:	f000 80d6 	beq.w	80067f4 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	0a5b      	lsrs	r3, r3, #9
 800664c:	f003 0301 	and.w	r3, r3, #1
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 80cf 	beq.w	80067f4 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006656:	7bbb      	ldrb	r3, [r7, #14]
 8006658:	2b21      	cmp	r3, #33	; 0x21
 800665a:	d103      	bne.n	8006664 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 fa54 	bl	8006b0a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006662:	e0c7      	b.n	80067f4 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006664:	7bfb      	ldrb	r3, [r7, #15]
 8006666:	2b40      	cmp	r3, #64	; 0x40
 8006668:	f040 80c4 	bne.w	80067f4 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fac2 	bl	8006bf6 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006672:	e0bf      	b.n	80067f4 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800667e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006682:	f000 80b7 	beq.w	80067f4 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	099b      	lsrs	r3, r3, #6
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00f      	beq.n	80066b2 <HAL_I2C_EV_IRQHandler+0x194>
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	0a9b      	lsrs	r3, r3, #10
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	2b00      	cmp	r3, #0
 800669c:	d009      	beq.n	80066b2 <HAL_I2C_EV_IRQHandler+0x194>
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	089b      	lsrs	r3, r3, #2
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d103      	bne.n	80066b2 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 fb37 	bl	8006d1e <I2C_MasterReceive_RXNE>
 80066b0:	e011      	b.n	80066d6 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	089b      	lsrs	r3, r3, #2
 80066b6:	f003 0301 	and.w	r3, r3, #1
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f000 809a 	beq.w	80067f4 <HAL_I2C_EV_IRQHandler+0x2d6>
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	0a5b      	lsrs	r3, r3, #9
 80066c4:	f003 0301 	and.w	r3, r3, #1
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 8093 	beq.w	80067f4 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 fbd6 	bl	8006e80 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066d4:	e08e      	b.n	80067f4 <HAL_I2C_EV_IRQHandler+0x2d6>
 80066d6:	e08d      	b.n	80067f4 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d004      	beq.n	80066ea <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	61fb      	str	r3, [r7, #28]
 80066e8:	e007      	b.n	80066fa <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	085b      	lsrs	r3, r3, #1
 80066fe:	f003 0301 	and.w	r3, r3, #1
 8006702:	2b00      	cmp	r3, #0
 8006704:	d012      	beq.n	800672c <HAL_I2C_EV_IRQHandler+0x20e>
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	0a5b      	lsrs	r3, r3, #9
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00c      	beq.n	800672c <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006716:	2b00      	cmp	r3, #0
 8006718:	d003      	beq.n	8006722 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006722:	69b9      	ldr	r1, [r7, #24]
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 ff9a 	bl	800765e <I2C_Slave_ADDR>
 800672a:	e066      	b.n	80067fa <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	091b      	lsrs	r3, r3, #4
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	2b00      	cmp	r3, #0
 8006736:	d009      	beq.n	800674c <HAL_I2C_EV_IRQHandler+0x22e>
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	0a5b      	lsrs	r3, r3, #9
 800673c:	f003 0301 	and.w	r3, r3, #1
 8006740:	2b00      	cmp	r3, #0
 8006742:	d003      	beq.n	800674c <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 ffd5 	bl	80076f4 <I2C_Slave_STOPF>
 800674a:	e056      	b.n	80067fa <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800674c:	7bbb      	ldrb	r3, [r7, #14]
 800674e:	2b21      	cmp	r3, #33	; 0x21
 8006750:	d002      	beq.n	8006758 <HAL_I2C_EV_IRQHandler+0x23a>
 8006752:	7bbb      	ldrb	r3, [r7, #14]
 8006754:	2b29      	cmp	r3, #41	; 0x29
 8006756:	d125      	bne.n	80067a4 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	09db      	lsrs	r3, r3, #7
 800675c:	f003 0301 	and.w	r3, r3, #1
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00f      	beq.n	8006784 <HAL_I2C_EV_IRQHandler+0x266>
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	0a9b      	lsrs	r3, r3, #10
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	2b00      	cmp	r3, #0
 800676e:	d009      	beq.n	8006784 <HAL_I2C_EV_IRQHandler+0x266>
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	089b      	lsrs	r3, r3, #2
 8006774:	f003 0301 	and.w	r3, r3, #1
 8006778:	2b00      	cmp	r3, #0
 800677a:	d103      	bne.n	8006784 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 feb2 	bl	80074e6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006782:	e039      	b.n	80067f8 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	089b      	lsrs	r3, r3, #2
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	2b00      	cmp	r3, #0
 800678e:	d033      	beq.n	80067f8 <HAL_I2C_EV_IRQHandler+0x2da>
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	0a5b      	lsrs	r3, r3, #9
 8006794:	f003 0301 	and.w	r3, r3, #1
 8006798:	2b00      	cmp	r3, #0
 800679a:	d02d      	beq.n	80067f8 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 fedf 	bl	8007560 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80067a2:	e029      	b.n	80067f8 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	099b      	lsrs	r3, r3, #6
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00f      	beq.n	80067d0 <HAL_I2C_EV_IRQHandler+0x2b2>
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	0a9b      	lsrs	r3, r3, #10
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d009      	beq.n	80067d0 <HAL_I2C_EV_IRQHandler+0x2b2>
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	089b      	lsrs	r3, r3, #2
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d103      	bne.n	80067d0 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 fee9 	bl	80075a0 <I2C_SlaveReceive_RXNE>
 80067ce:	e014      	b.n	80067fa <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	089b      	lsrs	r3, r3, #2
 80067d4:	f003 0301 	and.w	r3, r3, #1
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00e      	beq.n	80067fa <HAL_I2C_EV_IRQHandler+0x2dc>
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	0a5b      	lsrs	r3, r3, #9
 80067e0:	f003 0301 	and.w	r3, r3, #1
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d008      	beq.n	80067fa <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 ff17 	bl	800761c <I2C_SlaveReceive_BTF>
 80067ee:	e004      	b.n	80067fa <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80067f0:	bf00      	nop
 80067f2:	e002      	b.n	80067fa <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067f4:	bf00      	nop
 80067f6:	e000      	b.n	80067fa <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80067f8:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80067fa:	3720      	adds	r7, #32
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b08a      	sub	sp, #40	; 0x28
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006818:	2300      	movs	r3, #0
 800681a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006822:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006824:	6a3b      	ldr	r3, [r7, #32]
 8006826:	0a1b      	lsrs	r3, r3, #8
 8006828:	f003 0301 	and.w	r3, r3, #1
 800682c:	2b00      	cmp	r3, #0
 800682e:	d016      	beq.n	800685e <HAL_I2C_ER_IRQHandler+0x5e>
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	0a1b      	lsrs	r3, r3, #8
 8006834:	f003 0301 	and.w	r3, r3, #1
 8006838:	2b00      	cmp	r3, #0
 800683a:	d010      	beq.n	800685e <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800683c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683e:	f043 0301 	orr.w	r3, r3, #1
 8006842:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800684c:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800685c:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800685e:	6a3b      	ldr	r3, [r7, #32]
 8006860:	0a5b      	lsrs	r3, r3, #9
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00e      	beq.n	8006888 <HAL_I2C_ER_IRQHandler+0x88>
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	0a1b      	lsrs	r3, r3, #8
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	2b00      	cmp	r3, #0
 8006874:	d008      	beq.n	8006888 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	f043 0302 	orr.w	r3, r3, #2
 800687c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006886:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006888:	6a3b      	ldr	r3, [r7, #32]
 800688a:	0a9b      	lsrs	r3, r3, #10
 800688c:	f003 0301 	and.w	r3, r3, #1
 8006890:	2b00      	cmp	r3, #0
 8006892:	d03f      	beq.n	8006914 <HAL_I2C_ER_IRQHandler+0x114>
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	0a1b      	lsrs	r3, r3, #8
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	2b00      	cmp	r3, #0
 800689e:	d039      	beq.n	8006914 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80068a0:	7efb      	ldrb	r3, [r7, #27]
 80068a2:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068b2:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b8:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80068ba:	7ebb      	ldrb	r3, [r7, #26]
 80068bc:	2b20      	cmp	r3, #32
 80068be:	d112      	bne.n	80068e6 <HAL_I2C_ER_IRQHandler+0xe6>
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10f      	bne.n	80068e6 <HAL_I2C_ER_IRQHandler+0xe6>
 80068c6:	7cfb      	ldrb	r3, [r7, #19]
 80068c8:	2b21      	cmp	r3, #33	; 0x21
 80068ca:	d008      	beq.n	80068de <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80068cc:	7cfb      	ldrb	r3, [r7, #19]
 80068ce:	2b29      	cmp	r3, #41	; 0x29
 80068d0:	d005      	beq.n	80068de <HAL_I2C_ER_IRQHandler+0xde>
 80068d2:	7cfb      	ldrb	r3, [r7, #19]
 80068d4:	2b28      	cmp	r3, #40	; 0x28
 80068d6:	d106      	bne.n	80068e6 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2b21      	cmp	r3, #33	; 0x21
 80068dc:	d103      	bne.n	80068e6 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f001 f838 	bl	8007954 <I2C_Slave_AF>
 80068e4:	e016      	b.n	8006914 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80068ee:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	f043 0304 	orr.w	r3, r3, #4
 80068f6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80068f8:	7efb      	ldrb	r3, [r7, #27]
 80068fa:	2b10      	cmp	r3, #16
 80068fc:	d002      	beq.n	8006904 <HAL_I2C_ER_IRQHandler+0x104>
 80068fe:	7efb      	ldrb	r3, [r7, #27]
 8006900:	2b40      	cmp	r3, #64	; 0x40
 8006902:	d107      	bne.n	8006914 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006912:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006914:	6a3b      	ldr	r3, [r7, #32]
 8006916:	0adb      	lsrs	r3, r3, #11
 8006918:	f003 0301 	and.w	r3, r3, #1
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00e      	beq.n	800693e <HAL_I2C_ER_IRQHandler+0x13e>
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	0a1b      	lsrs	r3, r3, #8
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	2b00      	cmp	r3, #0
 800692a:	d008      	beq.n	800693e <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692e:	f043 0308 	orr.w	r3, r3, #8
 8006932:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800693c:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	2b00      	cmp	r3, #0
 8006942:	d008      	beq.n	8006956 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694a:	431a      	orrs	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f001 f86f 	bl	8007a34 <I2C_ITError>
  }
}
 8006956:	bf00      	nop
 8006958:	3728      	adds	r7, #40	; 0x28
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800695e:	b480      	push	{r7}
 8006960:	b083      	sub	sp, #12
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006966:	bf00      	nop
 8006968:	370c      	adds	r7, #12
 800696a:	46bd      	mov	sp, r7
 800696c:	bc80      	pop	{r7}
 800696e:	4770      	bx	lr

08006970 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	bc80      	pop	{r7}
 8006980:	4770      	bx	lr

08006982 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006982:	b480      	push	{r7}
 8006984:	b083      	sub	sp, #12
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
 800698a:	460b      	mov	r3, r1
 800698c:	70fb      	strb	r3, [r7, #3]
 800698e:	4613      	mov	r3, r2
 8006990:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006992:	bf00      	nop
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	bc80      	pop	{r7}
 800699a:	4770      	bx	lr

0800699c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bc80      	pop	{r7}
 80069ac:	4770      	bx	lr

080069ae <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b083      	sub	sp, #12
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80069b6:	bf00      	nop
 80069b8:	370c      	adds	r7, #12
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bc80      	pop	{r7}
 80069be:	4770      	bx	lr

080069c0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bc80      	pop	{r7}
 80069d0:	4770      	bx	lr

080069d2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b084      	sub	sp, #16
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069e0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069e8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ee:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d150      	bne.n	8006a9a <I2C_MasterTransmit_TXE+0xc8>
 80069f8:	7bfb      	ldrb	r3, [r7, #15]
 80069fa:	2b21      	cmp	r3, #33	; 0x21
 80069fc:	d14d      	bne.n	8006a9a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	2b08      	cmp	r3, #8
 8006a02:	d01d      	beq.n	8006a40 <I2C_MasterTransmit_TXE+0x6e>
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	2b20      	cmp	r3, #32
 8006a08:	d01a      	beq.n	8006a40 <I2C_MasterTransmit_TXE+0x6e>
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a10:	d016      	beq.n	8006a40 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	685a      	ldr	r2, [r3, #4]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a20:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2211      	movs	r2, #17
 8006a26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2220      	movs	r2, #32
 8006a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f7fc f953 	bl	8002ce4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006a3e:	e060      	b.n	8006b02 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685a      	ldr	r2, [r3, #4]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a4e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a5e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2220      	movs	r2, #32
 8006a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b40      	cmp	r3, #64	; 0x40
 8006a78:	d107      	bne.n	8006a8a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f7ff ff93 	bl	80069ae <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006a88:	e03b      	b.n	8006b02 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7fc f926 	bl	8002ce4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006a98:	e033      	b.n	8006b02 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
 8006a9c:	2b21      	cmp	r3, #33	; 0x21
 8006a9e:	d005      	beq.n	8006aac <I2C_MasterTransmit_TXE+0xda>
 8006aa0:	7bbb      	ldrb	r3, [r7, #14]
 8006aa2:	2b40      	cmp	r3, #64	; 0x40
 8006aa4:	d12d      	bne.n	8006b02 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006aa6:	7bfb      	ldrb	r3, [r7, #15]
 8006aa8:	2b22      	cmp	r3, #34	; 0x22
 8006aaa:	d12a      	bne.n	8006b02 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d108      	bne.n	8006ac8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ac4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006ac6:	e01c      	b.n	8006b02 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	2b40      	cmp	r3, #64	; 0x40
 8006ad2:	d103      	bne.n	8006adc <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 f88e 	bl	8006bf6 <I2C_MemoryTransmit_TXE_BTF>
}
 8006ada:	e012      	b.n	8006b02 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae0:	781a      	ldrb	r2, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aec:	1c5a      	adds	r2, r3, #1
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	3b01      	subs	r3, #1
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006b00:	e7ff      	b.n	8006b02 <I2C_MasterTransmit_TXE+0x130>
 8006b02:	bf00      	nop
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b084      	sub	sp, #16
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b16:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	2b21      	cmp	r3, #33	; 0x21
 8006b22:	d164      	bne.n	8006bee <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d012      	beq.n	8006b54 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b32:	781a      	ldrb	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3e:	1c5a      	adds	r2, r3, #1
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006b52:	e04c      	b.n	8006bee <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2b08      	cmp	r3, #8
 8006b58:	d01d      	beq.n	8006b96 <I2C_MasterTransmit_BTF+0x8c>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2b20      	cmp	r3, #32
 8006b5e:	d01a      	beq.n	8006b96 <I2C_MasterTransmit_BTF+0x8c>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b66:	d016      	beq.n	8006b96 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	685a      	ldr	r2, [r3, #4]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b76:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2211      	movs	r2, #17
 8006b7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2220      	movs	r2, #32
 8006b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7fc f8a8 	bl	8002ce4 <HAL_I2C_MasterTxCpltCallback>
}
 8006b94:	e02b      	b.n	8006bee <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ba4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bb4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2220      	movs	r2, #32
 8006bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	2b40      	cmp	r3, #64	; 0x40
 8006bce:	d107      	bne.n	8006be0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f7ff fee8 	bl	80069ae <HAL_I2C_MemTxCpltCallback>
}
 8006bde:	e006      	b.n	8006bee <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f7fc f87b 	bl	8002ce4 <HAL_I2C_MasterTxCpltCallback>
}
 8006bee:	bf00      	nop
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b084      	sub	sp, #16
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c04:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d11d      	bne.n	8006c4a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d10b      	bne.n	8006c2e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c1a:	b2da      	uxtb	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c26:	1c9a      	adds	r2, r3, #2
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006c2c:	e073      	b.n	8006d16 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	121b      	asrs	r3, r3, #8
 8006c36:	b2da      	uxtb	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c42:	1c5a      	adds	r2, r3, #1
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006c48:	e065      	b.n	8006d16 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d10b      	bne.n	8006c6a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c56:	b2da      	uxtb	r2, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c62:	1c5a      	adds	r2, r3, #1
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006c68:	e055      	b.n	8006d16 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d151      	bne.n	8006d16 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006c72:	7bfb      	ldrb	r3, [r7, #15]
 8006c74:	2b22      	cmp	r3, #34	; 0x22
 8006c76:	d10d      	bne.n	8006c94 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c86:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c8c:	1c5a      	adds	r2, r3, #1
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006c92:	e040      	b.n	8006d16 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d015      	beq.n	8006cca <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006c9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ca0:	2b21      	cmp	r3, #33	; 0x21
 8006ca2:	d112      	bne.n	8006cca <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca8:	781a      	ldrb	r2, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb4:	1c5a      	adds	r2, r3, #1
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006cc8:	e025      	b.n	8006d16 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d120      	bne.n	8006d16 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006cd4:	7bfb      	ldrb	r3, [r7, #15]
 8006cd6:	2b21      	cmp	r3, #33	; 0x21
 8006cd8:	d11d      	bne.n	8006d16 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	685a      	ldr	r2, [r3, #4]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ce8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cf8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2220      	movs	r2, #32
 8006d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f7ff fe4c 	bl	80069ae <HAL_I2C_MemTxCpltCallback>
}
 8006d16:	bf00      	nop
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b084      	sub	sp, #16
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b22      	cmp	r3, #34	; 0x22
 8006d30:	f040 80a2 	bne.w	8006e78 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2b03      	cmp	r3, #3
 8006d40:	d921      	bls.n	8006d86 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	691a      	ldr	r2, [r3, #16]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	b2d2      	uxtb	r2, r2
 8006d4e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d54:	1c5a      	adds	r2, r3, #1
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	3b01      	subs	r3, #1
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	2b03      	cmp	r3, #3
 8006d70:	f040 8082 	bne.w	8006e78 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	685a      	ldr	r2, [r3, #4]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d82:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8006d84:	e078      	b.n	8006e78 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d074      	beq.n	8006e78 <I2C_MasterReceive_RXNE+0x15a>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d002      	beq.n	8006d9a <I2C_MasterReceive_RXNE+0x7c>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d16e      	bne.n	8006e78 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f001 f824 	bl	8007de8 <I2C_WaitOnSTOPRequestThroughIT>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d142      	bne.n	8006e2c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006db4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006dc4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	691a      	ldr	r2, [r3, #16]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd0:	b2d2      	uxtb	r2, r2
 8006dd2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd8:	1c5a      	adds	r2, r3, #1
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	3b01      	subs	r3, #1
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2220      	movs	r2, #32
 8006df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	2b40      	cmp	r3, #64	; 0x40
 8006dfe:	d10a      	bne.n	8006e16 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f7ff fdd6 	bl	80069c0 <HAL_I2C_MemRxCpltCallback>
}
 8006e14:	e030      	b.n	8006e78 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2212      	movs	r2, #18
 8006e22:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f7fb ff6d 	bl	8002d04 <HAL_I2C_MasterRxCpltCallback>
}
 8006e2a:	e025      	b.n	8006e78 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e3a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	691a      	ldr	r2, [r3, #16]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e46:	b2d2      	uxtb	r2, r2
 8006e48:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4e:	1c5a      	adds	r2, r3, #1
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2220      	movs	r2, #32
 8006e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7fb ff56 	bl	8002d24 <HAL_I2C_ErrorCallback>
}
 8006e78:	bf00      	nop
 8006e7a:	3710      	adds	r7, #16
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	2b04      	cmp	r3, #4
 8006e96:	d11b      	bne.n	8006ed0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	685a      	ldr	r2, [r3, #4]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ea6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	691a      	ldr	r2, [r3, #16]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb2:	b2d2      	uxtb	r2, r2
 8006eb4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eba:	1c5a      	adds	r2, r3, #1
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006ece:	e0bd      	b.n	800704c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	2b03      	cmp	r3, #3
 8006ed8:	d129      	bne.n	8006f2e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	685a      	ldr	r2, [r3, #4]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ee8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2b04      	cmp	r3, #4
 8006eee:	d00a      	beq.n	8006f06 <I2C_MasterReceive_BTF+0x86>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d007      	beq.n	8006f06 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f04:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	691a      	ldr	r2, [r3, #16]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f10:	b2d2      	uxtb	r2, r2
 8006f12:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f18:	1c5a      	adds	r2, r3, #1
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	3b01      	subs	r3, #1
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006f2c:	e08e      	b.n	800704c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d176      	bne.n	8007026 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d002      	beq.n	8006f44 <I2C_MasterReceive_BTF+0xc4>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2b10      	cmp	r3, #16
 8006f42:	d108      	bne.n	8006f56 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f52:	601a      	str	r2, [r3, #0]
 8006f54:	e019      	b.n	8006f8a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2b04      	cmp	r3, #4
 8006f5a:	d002      	beq.n	8006f62 <I2C_MasterReceive_BTF+0xe2>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d108      	bne.n	8006f74 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f70:	601a      	str	r2, [r3, #0]
 8006f72:	e00a      	b.n	8006f8a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2b10      	cmp	r3, #16
 8006f78:	d007      	beq.n	8006f8a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f88:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	691a      	ldr	r2, [r3, #16]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f94:	b2d2      	uxtb	r2, r2
 8006f96:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9c:	1c5a      	adds	r2, r3, #1
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	691a      	ldr	r2, [r3, #16]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fba:	b2d2      	uxtb	r2, r2
 8006fbc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc2:	1c5a      	adds	r2, r3, #1
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	685a      	ldr	r2, [r3, #4]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006fe4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2220      	movs	r2, #32
 8006fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	2b40      	cmp	r3, #64	; 0x40
 8006ff8:	d10a      	bne.n	8007010 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f7ff fcd9 	bl	80069c0 <HAL_I2C_MemRxCpltCallback>
}
 800700e:	e01d      	b.n	800704c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2212      	movs	r2, #18
 800701c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7fb fe70 	bl	8002d04 <HAL_I2C_MasterRxCpltCallback>
}
 8007024:	e012      	b.n	800704c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	691a      	ldr	r2, [r3, #16]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007030:	b2d2      	uxtb	r2, r2
 8007032:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007038:	1c5a      	adds	r2, r3, #1
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007042:	b29b      	uxth	r3, r3
 8007044:	3b01      	subs	r3, #1
 8007046:	b29a      	uxth	r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800704c:	bf00      	nop
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b40      	cmp	r3, #64	; 0x40
 8007066:	d117      	bne.n	8007098 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800706c:	2b00      	cmp	r3, #0
 800706e:	d109      	bne.n	8007084 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007074:	b2db      	uxtb	r3, r3
 8007076:	461a      	mov	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007080:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007082:	e067      	b.n	8007154 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007088:	b2db      	uxtb	r3, r3
 800708a:	f043 0301 	orr.w	r3, r3, #1
 800708e:	b2da      	uxtb	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	611a      	str	r2, [r3, #16]
}
 8007096:	e05d      	b.n	8007154 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070a0:	d133      	bne.n	800710a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b21      	cmp	r3, #33	; 0x21
 80070ac:	d109      	bne.n	80070c2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	461a      	mov	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80070be:	611a      	str	r2, [r3, #16]
 80070c0:	e008      	b.n	80070d4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	f043 0301 	orr.w	r3, r3, #1
 80070cc:	b2da      	uxtb	r2, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d004      	beq.n	80070e6 <I2C_Master_SB+0x92>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d108      	bne.n	80070f8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d032      	beq.n	8007154 <I2C_Master_SB+0x100>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d02d      	beq.n	8007154 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	685a      	ldr	r2, [r3, #4]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007106:	605a      	str	r2, [r3, #4]
}
 8007108:	e024      	b.n	8007154 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10e      	bne.n	8007130 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007116:	b29b      	uxth	r3, r3
 8007118:	11db      	asrs	r3, r3, #7
 800711a:	b2db      	uxtb	r3, r3
 800711c:	f003 0306 	and.w	r3, r3, #6
 8007120:	b2db      	uxtb	r3, r3
 8007122:	f063 030f 	orn	r3, r3, #15
 8007126:	b2da      	uxtb	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	611a      	str	r2, [r3, #16]
}
 800712e:	e011      	b.n	8007154 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007134:	2b01      	cmp	r3, #1
 8007136:	d10d      	bne.n	8007154 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800713c:	b29b      	uxth	r3, r3
 800713e:	11db      	asrs	r3, r3, #7
 8007140:	b2db      	uxtb	r3, r3
 8007142:	f003 0306 	and.w	r3, r3, #6
 8007146:	b2db      	uxtb	r3, r3
 8007148:	f063 030e 	orn	r3, r3, #14
 800714c:	b2da      	uxtb	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	611a      	str	r2, [r3, #16]
}
 8007154:	bf00      	nop
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	bc80      	pop	{r7}
 800715c:	4770      	bx	lr

0800715e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800715e:	b480      	push	{r7}
 8007160:	b083      	sub	sp, #12
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800716a:	b2da      	uxtb	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007176:	2b00      	cmp	r3, #0
 8007178:	d004      	beq.n	8007184 <I2C_Master_ADD10+0x26>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800717e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007180:	2b00      	cmp	r3, #0
 8007182:	d108      	bne.n	8007196 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00c      	beq.n	80071a6 <I2C_Master_ADD10+0x48>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007192:	2b00      	cmp	r3, #0
 8007194:	d007      	beq.n	80071a6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071a4:	605a      	str	r2, [r3, #4]
  }
}
 80071a6:	bf00      	nop
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bc80      	pop	{r7}
 80071ae:	4770      	bx	lr

080071b0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b091      	sub	sp, #68	; 0x44
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071cc:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b22      	cmp	r3, #34	; 0x22
 80071d8:	f040 8174 	bne.w	80074c4 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10f      	bne.n	8007204 <I2C_Master_ADDR+0x54>
 80071e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80071e8:	2b40      	cmp	r3, #64	; 0x40
 80071ea:	d10b      	bne.n	8007204 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071ec:	2300      	movs	r3, #0
 80071ee:	633b      	str	r3, [r7, #48]	; 0x30
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	633b      	str	r3, [r7, #48]	; 0x30
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	699b      	ldr	r3, [r3, #24]
 80071fe:	633b      	str	r3, [r7, #48]	; 0x30
 8007200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007202:	e16b      	b.n	80074dc <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007208:	2b00      	cmp	r3, #0
 800720a:	d11d      	bne.n	8007248 <I2C_Master_ADDR+0x98>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007214:	d118      	bne.n	8007248 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007216:	2300      	movs	r3, #0
 8007218:	62fb      	str	r3, [r7, #44]	; 0x2c
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	695b      	ldr	r3, [r3, #20]
 8007220:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800722a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800723a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007240:	1c5a      	adds	r2, r3, #1
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	651a      	str	r2, [r3, #80]	; 0x50
 8007246:	e149      	b.n	80074dc <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800724c:	b29b      	uxth	r3, r3
 800724e:	2b00      	cmp	r3, #0
 8007250:	d113      	bne.n	800727a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007252:	2300      	movs	r3, #0
 8007254:	62bb      	str	r3, [r7, #40]	; 0x28
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	695b      	ldr	r3, [r3, #20]
 800725c:	62bb      	str	r3, [r7, #40]	; 0x28
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	699b      	ldr	r3, [r3, #24]
 8007264:	62bb      	str	r3, [r7, #40]	; 0x28
 8007266:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007276:	601a      	str	r2, [r3, #0]
 8007278:	e120      	b.n	80074bc <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800727e:	b29b      	uxth	r3, r3
 8007280:	2b01      	cmp	r3, #1
 8007282:	f040 808a 	bne.w	800739a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007288:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800728c:	d137      	bne.n	80072fe <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800729c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072ac:	d113      	bne.n	80072d6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072bc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072be:	2300      	movs	r3, #0
 80072c0:	627b      	str	r3, [r7, #36]	; 0x24
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	695b      	ldr	r3, [r3, #20]
 80072c8:	627b      	str	r3, [r7, #36]	; 0x24
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	627b      	str	r3, [r7, #36]	; 0x24
 80072d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d4:	e0f2      	b.n	80074bc <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072d6:	2300      	movs	r3, #0
 80072d8:	623b      	str	r3, [r7, #32]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	695b      	ldr	r3, [r3, #20]
 80072e0:	623b      	str	r3, [r7, #32]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	623b      	str	r3, [r7, #32]
 80072ea:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072fa:	601a      	str	r2, [r3, #0]
 80072fc:	e0de      	b.n	80074bc <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80072fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007300:	2b08      	cmp	r3, #8
 8007302:	d02e      	beq.n	8007362 <I2C_Master_ADDR+0x1b2>
 8007304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007306:	2b20      	cmp	r3, #32
 8007308:	d02b      	beq.n	8007362 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800730a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800730c:	2b12      	cmp	r3, #18
 800730e:	d102      	bne.n	8007316 <I2C_Master_ADDR+0x166>
 8007310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007312:	2b01      	cmp	r3, #1
 8007314:	d125      	bne.n	8007362 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007318:	2b04      	cmp	r3, #4
 800731a:	d00e      	beq.n	800733a <I2C_Master_ADDR+0x18a>
 800731c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731e:	2b02      	cmp	r3, #2
 8007320:	d00b      	beq.n	800733a <I2C_Master_ADDR+0x18a>
 8007322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007324:	2b10      	cmp	r3, #16
 8007326:	d008      	beq.n	800733a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007336:	601a      	str	r2, [r3, #0]
 8007338:	e007      	b.n	800734a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007348:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800734a:	2300      	movs	r3, #0
 800734c:	61fb      	str	r3, [r7, #28]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	695b      	ldr	r3, [r3, #20]
 8007354:	61fb      	str	r3, [r7, #28]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	61fb      	str	r3, [r7, #28]
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	e0ac      	b.n	80074bc <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007370:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007372:	2300      	movs	r3, #0
 8007374:	61bb      	str	r3, [r7, #24]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	695b      	ldr	r3, [r3, #20]
 800737c:	61bb      	str	r3, [r7, #24]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	61bb      	str	r3, [r7, #24]
 8007386:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007396:	601a      	str	r2, [r3, #0]
 8007398:	e090      	b.n	80074bc <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800739e:	b29b      	uxth	r3, r3
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d158      	bne.n	8007456 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80073a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a6:	2b04      	cmp	r3, #4
 80073a8:	d021      	beq.n	80073ee <I2C_Master_ADDR+0x23e>
 80073aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d01e      	beq.n	80073ee <I2C_Master_ADDR+0x23e>
 80073b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b2:	2b10      	cmp	r3, #16
 80073b4:	d01b      	beq.n	80073ee <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073c4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073c6:	2300      	movs	r3, #0
 80073c8:	617b      	str	r3, [r7, #20]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	695b      	ldr	r3, [r3, #20]
 80073d0:	617b      	str	r3, [r7, #20]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	617b      	str	r3, [r7, #20]
 80073da:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073ea:	601a      	str	r2, [r3, #0]
 80073ec:	e012      	b.n	8007414 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073fc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073fe:	2300      	movs	r3, #0
 8007400:	613b      	str	r3, [r7, #16]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	695b      	ldr	r3, [r3, #20]
 8007408:	613b      	str	r3, [r7, #16]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	699b      	ldr	r3, [r3, #24]
 8007410:	613b      	str	r3, [r7, #16]
 8007412:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800741e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007422:	d14b      	bne.n	80074bc <I2C_Master_ADDR+0x30c>
 8007424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007426:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800742a:	d00b      	beq.n	8007444 <I2C_Master_ADDR+0x294>
 800742c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742e:	2b01      	cmp	r3, #1
 8007430:	d008      	beq.n	8007444 <I2C_Master_ADDR+0x294>
 8007432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007434:	2b08      	cmp	r3, #8
 8007436:	d005      	beq.n	8007444 <I2C_Master_ADDR+0x294>
 8007438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743a:	2b10      	cmp	r3, #16
 800743c:	d002      	beq.n	8007444 <I2C_Master_ADDR+0x294>
 800743e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007440:	2b20      	cmp	r3, #32
 8007442:	d13b      	bne.n	80074bc <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	685a      	ldr	r2, [r3, #4]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007452:	605a      	str	r2, [r3, #4]
 8007454:	e032      	b.n	80074bc <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007464:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007474:	d117      	bne.n	80074a6 <I2C_Master_ADDR+0x2f6>
 8007476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007478:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800747c:	d00b      	beq.n	8007496 <I2C_Master_ADDR+0x2e6>
 800747e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007480:	2b01      	cmp	r3, #1
 8007482:	d008      	beq.n	8007496 <I2C_Master_ADDR+0x2e6>
 8007484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007486:	2b08      	cmp	r3, #8
 8007488:	d005      	beq.n	8007496 <I2C_Master_ADDR+0x2e6>
 800748a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748c:	2b10      	cmp	r3, #16
 800748e:	d002      	beq.n	8007496 <I2C_Master_ADDR+0x2e6>
 8007490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007492:	2b20      	cmp	r3, #32
 8007494:	d107      	bne.n	80074a6 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	685a      	ldr	r2, [r3, #4]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80074a4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074a6:	2300      	movs	r3, #0
 80074a8:	60fb      	str	r3, [r7, #12]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	695b      	ldr	r3, [r3, #20]
 80074b0:	60fb      	str	r3, [r7, #12]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	699b      	ldr	r3, [r3, #24]
 80074b8:	60fb      	str	r3, [r7, #12]
 80074ba:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80074c2:	e00b      	b.n	80074dc <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074c4:	2300      	movs	r3, #0
 80074c6:	60bb      	str	r3, [r7, #8]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	695b      	ldr	r3, [r3, #20]
 80074ce:	60bb      	str	r3, [r7, #8]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	699b      	ldr	r3, [r3, #24]
 80074d6:	60bb      	str	r3, [r7, #8]
 80074d8:	68bb      	ldr	r3, [r7, #8]
}
 80074da:	e7ff      	b.n	80074dc <I2C_Master_ADDR+0x32c>
 80074dc:	bf00      	nop
 80074de:	3744      	adds	r7, #68	; 0x44
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bc80      	pop	{r7}
 80074e4:	4770      	bx	lr

080074e6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b084      	sub	sp, #16
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074f4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d02b      	beq.n	8007558 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007504:	781a      	ldrb	r2, [r3, #0]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007510:	1c5a      	adds	r2, r3, #1
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800751a:	b29b      	uxth	r3, r3
 800751c:	3b01      	subs	r3, #1
 800751e:	b29a      	uxth	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007528:	b29b      	uxth	r3, r3
 800752a:	2b00      	cmp	r3, #0
 800752c:	d114      	bne.n	8007558 <I2C_SlaveTransmit_TXE+0x72>
 800752e:	7bfb      	ldrb	r3, [r7, #15]
 8007530:	2b29      	cmp	r3, #41	; 0x29
 8007532:	d111      	bne.n	8007558 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	685a      	ldr	r2, [r3, #4]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007542:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2221      	movs	r2, #33	; 0x21
 8007548:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2228      	movs	r2, #40	; 0x28
 800754e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f7ff fa03 	bl	800695e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007558:	bf00      	nop
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800756c:	b29b      	uxth	r3, r3
 800756e:	2b00      	cmp	r3, #0
 8007570:	d011      	beq.n	8007596 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007576:	781a      	ldrb	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007582:	1c5a      	adds	r2, r3, #1
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800758c:	b29b      	uxth	r3, r3
 800758e:	3b01      	subs	r3, #1
 8007590:	b29a      	uxth	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007596:	bf00      	nop
 8007598:	370c      	adds	r7, #12
 800759a:	46bd      	mov	sp, r7
 800759c:	bc80      	pop	{r7}
 800759e:	4770      	bx	lr

080075a0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075ae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d02c      	beq.n	8007614 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	691a      	ldr	r2, [r3, #16]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c4:	b2d2      	uxtb	r2, r2
 80075c6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075cc:	1c5a      	adds	r2, r3, #1
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	3b01      	subs	r3, #1
 80075da:	b29a      	uxth	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d114      	bne.n	8007614 <I2C_SlaveReceive_RXNE+0x74>
 80075ea:	7bfb      	ldrb	r3, [r7, #15]
 80075ec:	2b2a      	cmp	r3, #42	; 0x2a
 80075ee:	d111      	bne.n	8007614 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	685a      	ldr	r2, [r3, #4]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075fe:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2222      	movs	r2, #34	; 0x22
 8007604:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2228      	movs	r2, #40	; 0x28
 800760a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f7ff f9ae 	bl	8006970 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007614:	bf00      	nop
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007628:	b29b      	uxth	r3, r3
 800762a:	2b00      	cmp	r3, #0
 800762c:	d012      	beq.n	8007654 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	691a      	ldr	r2, [r3, #16]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007638:	b2d2      	uxtb	r2, r2
 800763a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007640:	1c5a      	adds	r2, r3, #1
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800764a:	b29b      	uxth	r3, r3
 800764c:	3b01      	subs	r3, #1
 800764e:	b29a      	uxth	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007654:	bf00      	nop
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	bc80      	pop	{r7}
 800765c:	4770      	bx	lr

0800765e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b084      	sub	sp, #16
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
 8007666:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007668:	2300      	movs	r3, #0
 800766a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007672:	b2db      	uxtb	r3, r3
 8007674:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007678:	2b28      	cmp	r3, #40	; 0x28
 800767a:	d127      	bne.n	80076cc <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	685a      	ldr	r2, [r3, #4]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800768a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	089b      	lsrs	r3, r3, #2
 8007690:	f003 0301 	and.w	r3, r3, #1
 8007694:	2b00      	cmp	r3, #0
 8007696:	d101      	bne.n	800769c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007698:	2301      	movs	r3, #1
 800769a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	09db      	lsrs	r3, r3, #7
 80076a0:	f003 0301 	and.w	r3, r3, #1
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d103      	bne.n	80076b0 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	81bb      	strh	r3, [r7, #12]
 80076ae:	e002      	b.n	80076b6 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	699b      	ldr	r3, [r3, #24]
 80076b4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80076be:	89ba      	ldrh	r2, [r7, #12]
 80076c0:	7bfb      	ldrb	r3, [r7, #15]
 80076c2:	4619      	mov	r1, r3
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f7ff f95c 	bl	8006982 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80076ca:	e00e      	b.n	80076ea <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076cc:	2300      	movs	r3, #0
 80076ce:	60bb      	str	r3, [r7, #8]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	695b      	ldr	r3, [r3, #20]
 80076d6:	60bb      	str	r3, [r7, #8]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	699b      	ldr	r3, [r3, #24]
 80076de:	60bb      	str	r3, [r7, #8]
 80076e0:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80076ea:	bf00      	nop
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
	...

080076f4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007702:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	685a      	ldr	r2, [r3, #4]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007712:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007714:	2300      	movs	r3, #0
 8007716:	60bb      	str	r3, [r7, #8]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	695b      	ldr	r3, [r3, #20]
 800771e:	60bb      	str	r3, [r7, #8]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f042 0201 	orr.w	r2, r2, #1
 800772e:	601a      	str	r2, [r3, #0]
 8007730:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007740:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800774c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007750:	d172      	bne.n	8007838 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007752:	7bfb      	ldrb	r3, [r7, #15]
 8007754:	2b22      	cmp	r3, #34	; 0x22
 8007756:	d002      	beq.n	800775e <I2C_Slave_STOPF+0x6a>
 8007758:	7bfb      	ldrb	r3, [r7, #15]
 800775a:	2b2a      	cmp	r3, #42	; 0x2a
 800775c:	d135      	bne.n	80077ca <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	b29a      	uxth	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007770:	b29b      	uxth	r3, r3
 8007772:	2b00      	cmp	r3, #0
 8007774:	d005      	beq.n	8007782 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777a:	f043 0204 	orr.w	r2, r3, #4
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	685a      	ldr	r2, [r3, #4]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007790:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007796:	4618      	mov	r0, r3
 8007798:	f7fe f91a 	bl	80059d0 <HAL_DMA_GetState>
 800779c:	4603      	mov	r3, r0
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d049      	beq.n	8007836 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a6:	4a69      	ldr	r2, [pc, #420]	; (800794c <I2C_Slave_STOPF+0x258>)
 80077a8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7fe f806 	bl	80057c0 <HAL_DMA_Abort_IT>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d03d      	beq.n	8007836 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80077c4:	4610      	mov	r0, r2
 80077c6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80077c8:	e035      	b.n	8007836 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077dc:	b29b      	uxth	r3, r3
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d005      	beq.n	80077ee <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e6:	f043 0204 	orr.w	r2, r3, #4
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	685a      	ldr	r2, [r3, #4]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077fc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007802:	4618      	mov	r0, r3
 8007804:	f7fe f8e4 	bl	80059d0 <HAL_DMA_GetState>
 8007808:	4603      	mov	r3, r0
 800780a:	2b01      	cmp	r3, #1
 800780c:	d014      	beq.n	8007838 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007812:	4a4e      	ldr	r2, [pc, #312]	; (800794c <I2C_Slave_STOPF+0x258>)
 8007814:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800781a:	4618      	mov	r0, r3
 800781c:	f7fd ffd0 	bl	80057c0 <HAL_DMA_Abort_IT>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d008      	beq.n	8007838 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800782a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007830:	4610      	mov	r0, r2
 8007832:	4798      	blx	r3
 8007834:	e000      	b.n	8007838 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007836:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800783c:	b29b      	uxth	r3, r3
 800783e:	2b00      	cmp	r3, #0
 8007840:	d03e      	beq.n	80078c0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	695b      	ldr	r3, [r3, #20]
 8007848:	f003 0304 	and.w	r3, r3, #4
 800784c:	2b04      	cmp	r3, #4
 800784e:	d112      	bne.n	8007876 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	691a      	ldr	r2, [r3, #16]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785a:	b2d2      	uxtb	r2, r2
 800785c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007862:	1c5a      	adds	r2, r3, #1
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800786c:	b29b      	uxth	r3, r3
 800786e:	3b01      	subs	r3, #1
 8007870:	b29a      	uxth	r2, r3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	695b      	ldr	r3, [r3, #20]
 800787c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007880:	2b40      	cmp	r3, #64	; 0x40
 8007882:	d112      	bne.n	80078aa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	691a      	ldr	r2, [r3, #16]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788e:	b2d2      	uxtb	r2, r2
 8007890:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007896:	1c5a      	adds	r2, r3, #1
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	3b01      	subs	r3, #1
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d005      	beq.n	80078c0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b8:	f043 0204 	orr.w	r2, r3, #4
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d003      	beq.n	80078d0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 f8b3 	bl	8007a34 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80078ce:	e039      	b.n	8007944 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80078d0:	7bfb      	ldrb	r3, [r7, #15]
 80078d2:	2b2a      	cmp	r3, #42	; 0x2a
 80078d4:	d109      	bne.n	80078ea <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2228      	movs	r2, #40	; 0x28
 80078e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f7ff f843 	bl	8006970 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b28      	cmp	r3, #40	; 0x28
 80078f4:	d111      	bne.n	800791a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a15      	ldr	r2, [pc, #84]	; (8007950 <I2C_Slave_STOPF+0x25c>)
 80078fa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2220      	movs	r2, #32
 8007906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f7ff f842 	bl	800699c <HAL_I2C_ListenCpltCallback>
}
 8007918:	e014      	b.n	8007944 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791e:	2b22      	cmp	r3, #34	; 0x22
 8007920:	d002      	beq.n	8007928 <I2C_Slave_STOPF+0x234>
 8007922:	7bfb      	ldrb	r3, [r7, #15]
 8007924:	2b22      	cmp	r3, #34	; 0x22
 8007926:	d10d      	bne.n	8007944 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2220      	movs	r2, #32
 8007932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f7ff f816 	bl	8006970 <HAL_I2C_SlaveRxCpltCallback>
}
 8007944:	bf00      	nop
 8007946:	3710      	adds	r7, #16
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	08007c99 	.word	0x08007c99
 8007950:	ffff0000 	.word	0xffff0000

08007954 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007962:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007968:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	2b08      	cmp	r3, #8
 800796e:	d002      	beq.n	8007976 <I2C_Slave_AF+0x22>
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	2b20      	cmp	r3, #32
 8007974:	d129      	bne.n	80079ca <I2C_Slave_AF+0x76>
 8007976:	7bfb      	ldrb	r3, [r7, #15]
 8007978:	2b28      	cmp	r3, #40	; 0x28
 800797a:	d126      	bne.n	80079ca <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a2c      	ldr	r2, [pc, #176]	; (8007a30 <I2C_Slave_AF+0xdc>)
 8007980:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	685a      	ldr	r2, [r3, #4]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007990:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800799a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079aa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2220      	movs	r2, #32
 80079b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7fe ffea 	bl	800699c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80079c8:	e02e      	b.n	8007a28 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80079ca:	7bfb      	ldrb	r3, [r7, #15]
 80079cc:	2b21      	cmp	r3, #33	; 0x21
 80079ce:	d126      	bne.n	8007a1e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4a17      	ldr	r2, [pc, #92]	; (8007a30 <I2C_Slave_AF+0xdc>)
 80079d4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2221      	movs	r2, #33	; 0x21
 80079da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2220      	movs	r2, #32
 80079e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	685a      	ldr	r2, [r3, #4]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80079fa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007a04:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a14:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f7fe ffa1 	bl	800695e <HAL_I2C_SlaveTxCpltCallback>
}
 8007a1c:	e004      	b.n	8007a28 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007a26:	615a      	str	r2, [r3, #20]
}
 8007a28:	bf00      	nop
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	ffff0000 	.word	0xffff0000

08007a34 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a42:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a4a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007a4c:	7bbb      	ldrb	r3, [r7, #14]
 8007a4e:	2b10      	cmp	r3, #16
 8007a50:	d002      	beq.n	8007a58 <I2C_ITError+0x24>
 8007a52:	7bbb      	ldrb	r3, [r7, #14]
 8007a54:	2b40      	cmp	r3, #64	; 0x40
 8007a56:	d10a      	bne.n	8007a6e <I2C_ITError+0x3a>
 8007a58:	7bfb      	ldrb	r3, [r7, #15]
 8007a5a:	2b22      	cmp	r3, #34	; 0x22
 8007a5c:	d107      	bne.n	8007a6e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a6c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007a6e:	7bfb      	ldrb	r3, [r7, #15]
 8007a70:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007a74:	2b28      	cmp	r3, #40	; 0x28
 8007a76:	d107      	bne.n	8007a88 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2228      	movs	r2, #40	; 0x28
 8007a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007a86:	e015      	b.n	8007ab4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a96:	d00a      	beq.n	8007aae <I2C_ITError+0x7a>
 8007a98:	7bfb      	ldrb	r3, [r7, #15]
 8007a9a:	2b60      	cmp	r3, #96	; 0x60
 8007a9c:	d007      	beq.n	8007aae <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2220      	movs	r2, #32
 8007aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007abe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ac2:	d161      	bne.n	8007b88 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	685a      	ldr	r2, [r3, #4]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ad2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ad8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d020      	beq.n	8007b22 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ae4:	4a6a      	ldr	r2, [pc, #424]	; (8007c90 <I2C_ITError+0x25c>)
 8007ae6:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7fd fe67 	bl	80057c0 <HAL_DMA_Abort_IT>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	f000 8089 	beq.w	8007c0c <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f022 0201 	bic.w	r2, r2, #1
 8007b08:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2220      	movs	r2, #32
 8007b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	4798      	blx	r3
 8007b20:	e074      	b.n	8007c0c <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b26:	4a5a      	ldr	r2, [pc, #360]	; (8007c90 <I2C_ITError+0x25c>)
 8007b28:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7fd fe46 	bl	80057c0 <HAL_DMA_Abort_IT>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d068      	beq.n	8007c0c <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	695b      	ldr	r3, [r3, #20]
 8007b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b44:	2b40      	cmp	r3, #64	; 0x40
 8007b46:	d10b      	bne.n	8007b60 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	691a      	ldr	r2, [r3, #16]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b52:	b2d2      	uxtb	r2, r2
 8007b54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5a:	1c5a      	adds	r2, r3, #1
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f022 0201 	bic.w	r2, r2, #1
 8007b6e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2220      	movs	r2, #32
 8007b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007b82:	4610      	mov	r0, r2
 8007b84:	4798      	blx	r3
 8007b86:	e041      	b.n	8007c0c <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	2b60      	cmp	r3, #96	; 0x60
 8007b92:	d125      	bne.n	8007be0 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2220      	movs	r2, #32
 8007b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	695b      	ldr	r3, [r3, #20]
 8007ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bac:	2b40      	cmp	r3, #64	; 0x40
 8007bae:	d10b      	bne.n	8007bc8 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	691a      	ldr	r2, [r3, #16]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bba:	b2d2      	uxtb	r2, r2
 8007bbc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc2:	1c5a      	adds	r2, r3, #1
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f022 0201 	bic.w	r2, r2, #1
 8007bd6:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f7fb f8af 	bl	8002d3c <HAL_I2C_AbortCpltCallback>
 8007bde:	e015      	b.n	8007c0c <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	695b      	ldr	r3, [r3, #20]
 8007be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bea:	2b40      	cmp	r3, #64	; 0x40
 8007bec:	d10b      	bne.n	8007c06 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	691a      	ldr	r2, [r3, #16]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf8:	b2d2      	uxtb	r2, r2
 8007bfa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c00:	1c5a      	adds	r2, r3, #1
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f7fb f88c 	bl	8002d24 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c10:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	f003 0301 	and.w	r3, r3, #1
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10e      	bne.n	8007c3a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d109      	bne.n	8007c3a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d104      	bne.n	8007c3a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d007      	beq.n	8007c4a <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	685a      	ldr	r2, [r3, #4]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007c48:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c50:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c56:	f003 0304 	and.w	r3, r3, #4
 8007c5a:	2b04      	cmp	r3, #4
 8007c5c:	d113      	bne.n	8007c86 <I2C_ITError+0x252>
 8007c5e:	7bfb      	ldrb	r3, [r7, #15]
 8007c60:	2b28      	cmp	r3, #40	; 0x28
 8007c62:	d110      	bne.n	8007c86 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a0b      	ldr	r2, [pc, #44]	; (8007c94 <I2C_ITError+0x260>)
 8007c68:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2220      	movs	r2, #32
 8007c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f7fe fe8b 	bl	800699c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007c86:	bf00      	nop
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	08007c99 	.word	0x08007c99
 8007c94:	ffff0000 	.word	0xffff0000

08007c98 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cb0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007cb2:	4b4b      	ldr	r3, [pc, #300]	; (8007de0 <I2C_DMAAbort+0x148>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	08db      	lsrs	r3, r3, #3
 8007cb8:	4a4a      	ldr	r2, [pc, #296]	; (8007de4 <I2C_DMAAbort+0x14c>)
 8007cba:	fba2 2303 	umull	r2, r3, r2, r3
 8007cbe:	0a1a      	lsrs	r2, r3, #8
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4413      	add	r3, r2
 8007cc6:	00da      	lsls	r2, r3, #3
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d106      	bne.n	8007ce0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd6:	f043 0220 	orr.w	r2, r3, #32
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007cde:	e00a      	b.n	8007cf6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cf4:	d0ea      	beq.n	8007ccc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d003      	beq.n	8007d06 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d02:	2200      	movs	r2, #0
 8007d04:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d003      	beq.n	8007d16 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d12:	2200      	movs	r2, #0
 8007d14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d24:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d003      	beq.n	8007d3c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d38:	2200      	movs	r2, #0
 8007d3a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d003      	beq.n	8007d4c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d48:	2200      	movs	r2, #0
 8007d4a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f022 0201 	bic.w	r2, r2, #1
 8007d5a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	2b60      	cmp	r3, #96	; 0x60
 8007d66:	d10e      	bne.n	8007d86 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	2220      	movs	r2, #32
 8007d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007d7e:	6978      	ldr	r0, [r7, #20]
 8007d80:	f7fa ffdc 	bl	8002d3c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007d84:	e027      	b.n	8007dd6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d86:	7cfb      	ldrb	r3, [r7, #19]
 8007d88:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007d8c:	2b28      	cmp	r3, #40	; 0x28
 8007d8e:	d117      	bne.n	8007dc0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f042 0201 	orr.w	r2, r2, #1
 8007d9e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007dae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	2200      	movs	r2, #0
 8007db4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	2228      	movs	r2, #40	; 0x28
 8007dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007dbe:	e007      	b.n	8007dd0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	2220      	movs	r2, #32
 8007dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007dd0:	6978      	ldr	r0, [r7, #20]
 8007dd2:	f7fa ffa7 	bl	8002d24 <HAL_I2C_ErrorCallback>
}
 8007dd6:	bf00      	nop
 8007dd8:	3718      	adds	r7, #24
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	2000004c 	.word	0x2000004c
 8007de4:	14f8b589 	.word	0x14f8b589

08007de8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b085      	sub	sp, #20
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007df0:	2300      	movs	r3, #0
 8007df2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007df4:	4b13      	ldr	r3, [pc, #76]	; (8007e44 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	08db      	lsrs	r3, r3, #3
 8007dfa:	4a13      	ldr	r2, [pc, #76]	; (8007e48 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8007e00:	0a1a      	lsrs	r2, r3, #8
 8007e02:	4613      	mov	r3, r2
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	4413      	add	r3, r2
 8007e08:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d107      	bne.n	8007e26 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1a:	f043 0220 	orr.w	r2, r3, #32
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e008      	b.n	8007e38 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e34:	d0e9      	beq.n	8007e0a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3714      	adds	r7, #20
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bc80      	pop	{r7}
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	2000004c 	.word	0x2000004c
 8007e48:	14f8b589 	.word	0x14f8b589

08007e4c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e58:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007e5c:	d103      	bne.n	8007e66 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2201      	movs	r2, #1
 8007e62:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007e64:	e007      	b.n	8007e76 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e6a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007e6e:	d102      	bne.n	8007e76 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2208      	movs	r2, #8
 8007e74:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007e76:	bf00      	nop
 8007e78:	370c      	adds	r7, #12
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bc80      	pop	{r7}
 8007e7e:	4770      	bx	lr

08007e80 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007e80:	b480      	push	{r7}
 8007e82:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8007e84:	4b03      	ldr	r3, [pc, #12]	; (8007e94 <HAL_PWR_EnableBkUpAccess+0x14>)
 8007e86:	2201      	movs	r2, #1
 8007e88:	601a      	str	r2, [r3, #0]
}
 8007e8a:	bf00      	nop
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bc80      	pop	{r7}
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	420e0020 	.word	0x420e0020

08007e98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b086      	sub	sp, #24
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d101      	bne.n	8007eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e304      	b.n	80084b4 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f003 0301 	and.w	r3, r3, #1
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	f000 8087 	beq.w	8007fc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007eb8:	4b92      	ldr	r3, [pc, #584]	; (8008104 <HAL_RCC_OscConfig+0x26c>)
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	f003 030c 	and.w	r3, r3, #12
 8007ec0:	2b04      	cmp	r3, #4
 8007ec2:	d00c      	beq.n	8007ede <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007ec4:	4b8f      	ldr	r3, [pc, #572]	; (8008104 <HAL_RCC_OscConfig+0x26c>)
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	f003 030c 	and.w	r3, r3, #12
 8007ecc:	2b08      	cmp	r3, #8
 8007ece:	d112      	bne.n	8007ef6 <HAL_RCC_OscConfig+0x5e>
 8007ed0:	4b8c      	ldr	r3, [pc, #560]	; (8008104 <HAL_RCC_OscConfig+0x26c>)
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007edc:	d10b      	bne.n	8007ef6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ede:	4b89      	ldr	r3, [pc, #548]	; (8008104 <HAL_RCC_OscConfig+0x26c>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d06c      	beq.n	8007fc4 <HAL_RCC_OscConfig+0x12c>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d168      	bne.n	8007fc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e2de      	b.n	80084b4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007efe:	d106      	bne.n	8007f0e <HAL_RCC_OscConfig+0x76>
 8007f00:	4b80      	ldr	r3, [pc, #512]	; (8008104 <HAL_RCC_OscConfig+0x26c>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a7f      	ldr	r2, [pc, #508]	; (8008104 <HAL_RCC_OscConfig+0x26c>)
 8007f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f0a:	6013      	str	r3, [r2, #0]
 8007f0c:	e02e      	b.n	8007f6c <HAL_RCC_OscConfig+0xd4>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d10c      	bne.n	8007f30 <HAL_RCC_OscConfig+0x98>
 8007f16:	4b7b      	ldr	r3, [pc, #492]	; (8008104 <HAL_RCC_OscConfig+0x26c>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a7a      	ldr	r2, [pc, #488]	; (8008104 <HAL_RCC_OscConfig+0x26c>)
 8007f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f20:	6013      	str	r3, [r2, #0]
 8007f22:	4b78      	ldr	r3, [pc, #480]	; (8008104 <HAL_RCC_OscConfig+0x26c>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a77      	ldr	r2, [pc, #476]	; (8008104 <HAL_RCC_OscConfig+0x26c>)
 8007f28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f2c:	6013      	str	r3, [r2, #0]
 8007f2e:	e01d      	b.n	8007f6c <HAL_RCC_OscConfig+0xd4>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f38:	d10c      	bne.n	8007f54 <HAL_RCC_OscConfig+0xbc>
 8007f3a:	4b72      	ldr	r3, [pc, #456]	; (8008104 <HAL_RCC_OscConfig+0x26c>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a71      	ldr	r2, [pc, #452]	; (8008104 <HAL_RCC_OscConfig+0x26c>)
 8007f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f44:	6013      	str	r3, [r2, #0]
 8007f46:	4b6f      	ldr	r3, [pc, #444]	; (8008104 <HAL_RCC_OscConfig+0x26c>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a6e      	ldr	r2, [pc, #440]	; (8008104 <HAL_RCC_OscConfig+0x26c>)
 8007f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f50:	6013      	str	r3, [r2, #0]
 8007f52:	e00b      	b.n	8007f6c <HAL_RCC_OscConfig+0xd4>
 8007f54:	4b6b      	ldr	r3, [pc, #428]	; (8008104 <HAL_RCC_OscConfig+0x26c>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a6a      	ldr	r2, [pc, #424]	; (8008104 <HAL_RCC_OscConfig+0x26c>)
 8007f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f5e:	6013      	str	r3, [r2, #0]
 8007f60:	4b68      	ldr	r3, [pc, #416]	; (8008104 <HAL_RCC_OscConfig+0x26c>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a67      	ldr	r2, [pc, #412]	; (8008104 <HAL_RCC_OscConfig+0x26c>)
 8007f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d013      	beq.n	8007f9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f74:	f7fd face 	bl	8005514 <HAL_GetTick>
 8007f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f7a:	e008      	b.n	8007f8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f7c:	f7fd faca 	bl	8005514 <HAL_GetTick>
 8007f80:	4602      	mov	r2, r0
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	1ad3      	subs	r3, r2, r3
 8007f86:	2b64      	cmp	r3, #100	; 0x64
 8007f88:	d901      	bls.n	8007f8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	e292      	b.n	80084b4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f8e:	4b5d      	ldr	r3, [pc, #372]	; (8008104 <HAL_RCC_OscConfig+0x26c>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d0f0      	beq.n	8007f7c <HAL_RCC_OscConfig+0xe4>
 8007f9a:	e014      	b.n	8007fc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f9c:	f7fd faba 	bl	8005514 <HAL_GetTick>
 8007fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007fa2:	e008      	b.n	8007fb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007fa4:	f7fd fab6 	bl	8005514 <HAL_GetTick>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	1ad3      	subs	r3, r2, r3
 8007fae:	2b64      	cmp	r3, #100	; 0x64
 8007fb0:	d901      	bls.n	8007fb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	e27e      	b.n	80084b4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007fb6:	4b53      	ldr	r3, [pc, #332]	; (8008104 <HAL_RCC_OscConfig+0x26c>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1f0      	bne.n	8007fa4 <HAL_RCC_OscConfig+0x10c>
 8007fc2:	e000      	b.n	8007fc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 0302 	and.w	r3, r3, #2
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d063      	beq.n	800809a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007fd2:	4b4c      	ldr	r3, [pc, #304]	; (8008104 <HAL_RCC_OscConfig+0x26c>)
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	f003 030c 	and.w	r3, r3, #12
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00b      	beq.n	8007ff6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007fde:	4b49      	ldr	r3, [pc, #292]	; (8008104 <HAL_RCC_OscConfig+0x26c>)
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	f003 030c 	and.w	r3, r3, #12
 8007fe6:	2b08      	cmp	r3, #8
 8007fe8:	d11c      	bne.n	8008024 <HAL_RCC_OscConfig+0x18c>
 8007fea:	4b46      	ldr	r3, [pc, #280]	; (8008104 <HAL_RCC_OscConfig+0x26c>)
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d116      	bne.n	8008024 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ff6:	4b43      	ldr	r3, [pc, #268]	; (8008104 <HAL_RCC_OscConfig+0x26c>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 0302 	and.w	r3, r3, #2
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d005      	beq.n	800800e <HAL_RCC_OscConfig+0x176>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	695b      	ldr	r3, [r3, #20]
 8008006:	2b01      	cmp	r3, #1
 8008008:	d001      	beq.n	800800e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	e252      	b.n	80084b4 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800800e:	4b3d      	ldr	r3, [pc, #244]	; (8008104 <HAL_RCC_OscConfig+0x26c>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	699b      	ldr	r3, [r3, #24]
 800801a:	00db      	lsls	r3, r3, #3
 800801c:	4939      	ldr	r1, [pc, #228]	; (8008104 <HAL_RCC_OscConfig+0x26c>)
 800801e:	4313      	orrs	r3, r2
 8008020:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008022:	e03a      	b.n	800809a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	695b      	ldr	r3, [r3, #20]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d020      	beq.n	800806e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800802c:	4b36      	ldr	r3, [pc, #216]	; (8008108 <HAL_RCC_OscConfig+0x270>)
 800802e:	2201      	movs	r2, #1
 8008030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008032:	f7fd fa6f 	bl	8005514 <HAL_GetTick>
 8008036:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008038:	e008      	b.n	800804c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800803a:	f7fd fa6b 	bl	8005514 <HAL_GetTick>
 800803e:	4602      	mov	r2, r0
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	2b02      	cmp	r3, #2
 8008046:	d901      	bls.n	800804c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008048:	2303      	movs	r3, #3
 800804a:	e233      	b.n	80084b4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800804c:	4b2d      	ldr	r3, [pc, #180]	; (8008104 <HAL_RCC_OscConfig+0x26c>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 0302 	and.w	r3, r3, #2
 8008054:	2b00      	cmp	r3, #0
 8008056:	d0f0      	beq.n	800803a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008058:	4b2a      	ldr	r3, [pc, #168]	; (8008104 <HAL_RCC_OscConfig+0x26c>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	699b      	ldr	r3, [r3, #24]
 8008064:	00db      	lsls	r3, r3, #3
 8008066:	4927      	ldr	r1, [pc, #156]	; (8008104 <HAL_RCC_OscConfig+0x26c>)
 8008068:	4313      	orrs	r3, r2
 800806a:	600b      	str	r3, [r1, #0]
 800806c:	e015      	b.n	800809a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800806e:	4b26      	ldr	r3, [pc, #152]	; (8008108 <HAL_RCC_OscConfig+0x270>)
 8008070:	2200      	movs	r2, #0
 8008072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008074:	f7fd fa4e 	bl	8005514 <HAL_GetTick>
 8008078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800807a:	e008      	b.n	800808e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800807c:	f7fd fa4a 	bl	8005514 <HAL_GetTick>
 8008080:	4602      	mov	r2, r0
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	1ad3      	subs	r3, r2, r3
 8008086:	2b02      	cmp	r3, #2
 8008088:	d901      	bls.n	800808e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800808a:	2303      	movs	r3, #3
 800808c:	e212      	b.n	80084b4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800808e:	4b1d      	ldr	r3, [pc, #116]	; (8008104 <HAL_RCC_OscConfig+0x26c>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0302 	and.w	r3, r3, #2
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1f0      	bne.n	800807c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 0308 	and.w	r3, r3, #8
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d03a      	beq.n	800811c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	69db      	ldr	r3, [r3, #28]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d019      	beq.n	80080e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080ae:	4b17      	ldr	r3, [pc, #92]	; (800810c <HAL_RCC_OscConfig+0x274>)
 80080b0:	2201      	movs	r2, #1
 80080b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080b4:	f7fd fa2e 	bl	8005514 <HAL_GetTick>
 80080b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080ba:	e008      	b.n	80080ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080bc:	f7fd fa2a 	bl	8005514 <HAL_GetTick>
 80080c0:	4602      	mov	r2, r0
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	1ad3      	subs	r3, r2, r3
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	d901      	bls.n	80080ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80080ca:	2303      	movs	r3, #3
 80080cc:	e1f2      	b.n	80084b4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080ce:	4b0d      	ldr	r3, [pc, #52]	; (8008104 <HAL_RCC_OscConfig+0x26c>)
 80080d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d2:	f003 0302 	and.w	r3, r3, #2
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d0f0      	beq.n	80080bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80080da:	2001      	movs	r0, #1
 80080dc:	f000 fc22 	bl	8008924 <RCC_Delay>
 80080e0:	e01c      	b.n	800811c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80080e2:	4b0a      	ldr	r3, [pc, #40]	; (800810c <HAL_RCC_OscConfig+0x274>)
 80080e4:	2200      	movs	r2, #0
 80080e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080e8:	f7fd fa14 	bl	8005514 <HAL_GetTick>
 80080ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080ee:	e00f      	b.n	8008110 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080f0:	f7fd fa10 	bl	8005514 <HAL_GetTick>
 80080f4:	4602      	mov	r2, r0
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	1ad3      	subs	r3, r2, r3
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d908      	bls.n	8008110 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80080fe:	2303      	movs	r3, #3
 8008100:	e1d8      	b.n	80084b4 <HAL_RCC_OscConfig+0x61c>
 8008102:	bf00      	nop
 8008104:	40021000 	.word	0x40021000
 8008108:	42420000 	.word	0x42420000
 800810c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008110:	4b9b      	ldr	r3, [pc, #620]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 8008112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008114:	f003 0302 	and.w	r3, r3, #2
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1e9      	bne.n	80080f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 0304 	and.w	r3, r3, #4
 8008124:	2b00      	cmp	r3, #0
 8008126:	f000 80a6 	beq.w	8008276 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800812a:	2300      	movs	r3, #0
 800812c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800812e:	4b94      	ldr	r3, [pc, #592]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 8008130:	69db      	ldr	r3, [r3, #28]
 8008132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10d      	bne.n	8008156 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800813a:	4b91      	ldr	r3, [pc, #580]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 800813c:	69db      	ldr	r3, [r3, #28]
 800813e:	4a90      	ldr	r2, [pc, #576]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 8008140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008144:	61d3      	str	r3, [r2, #28]
 8008146:	4b8e      	ldr	r3, [pc, #568]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 8008148:	69db      	ldr	r3, [r3, #28]
 800814a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800814e:	60bb      	str	r3, [r7, #8]
 8008150:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008152:	2301      	movs	r3, #1
 8008154:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008156:	4b8b      	ldr	r3, [pc, #556]	; (8008384 <HAL_RCC_OscConfig+0x4ec>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800815e:	2b00      	cmp	r3, #0
 8008160:	d118      	bne.n	8008194 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008162:	4b88      	ldr	r3, [pc, #544]	; (8008384 <HAL_RCC_OscConfig+0x4ec>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a87      	ldr	r2, [pc, #540]	; (8008384 <HAL_RCC_OscConfig+0x4ec>)
 8008168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800816c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800816e:	f7fd f9d1 	bl	8005514 <HAL_GetTick>
 8008172:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008174:	e008      	b.n	8008188 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008176:	f7fd f9cd 	bl	8005514 <HAL_GetTick>
 800817a:	4602      	mov	r2, r0
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	1ad3      	subs	r3, r2, r3
 8008180:	2b64      	cmp	r3, #100	; 0x64
 8008182:	d901      	bls.n	8008188 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008184:	2303      	movs	r3, #3
 8008186:	e195      	b.n	80084b4 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008188:	4b7e      	ldr	r3, [pc, #504]	; (8008384 <HAL_RCC_OscConfig+0x4ec>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008190:	2b00      	cmp	r3, #0
 8008192:	d0f0      	beq.n	8008176 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	2b01      	cmp	r3, #1
 800819a:	d106      	bne.n	80081aa <HAL_RCC_OscConfig+0x312>
 800819c:	4b78      	ldr	r3, [pc, #480]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 800819e:	6a1b      	ldr	r3, [r3, #32]
 80081a0:	4a77      	ldr	r2, [pc, #476]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 80081a2:	f043 0301 	orr.w	r3, r3, #1
 80081a6:	6213      	str	r3, [r2, #32]
 80081a8:	e02d      	b.n	8008206 <HAL_RCC_OscConfig+0x36e>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d10c      	bne.n	80081cc <HAL_RCC_OscConfig+0x334>
 80081b2:	4b73      	ldr	r3, [pc, #460]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 80081b4:	6a1b      	ldr	r3, [r3, #32]
 80081b6:	4a72      	ldr	r2, [pc, #456]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 80081b8:	f023 0301 	bic.w	r3, r3, #1
 80081bc:	6213      	str	r3, [r2, #32]
 80081be:	4b70      	ldr	r3, [pc, #448]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 80081c0:	6a1b      	ldr	r3, [r3, #32]
 80081c2:	4a6f      	ldr	r2, [pc, #444]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 80081c4:	f023 0304 	bic.w	r3, r3, #4
 80081c8:	6213      	str	r3, [r2, #32]
 80081ca:	e01c      	b.n	8008206 <HAL_RCC_OscConfig+0x36e>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	691b      	ldr	r3, [r3, #16]
 80081d0:	2b05      	cmp	r3, #5
 80081d2:	d10c      	bne.n	80081ee <HAL_RCC_OscConfig+0x356>
 80081d4:	4b6a      	ldr	r3, [pc, #424]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 80081d6:	6a1b      	ldr	r3, [r3, #32]
 80081d8:	4a69      	ldr	r2, [pc, #420]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 80081da:	f043 0304 	orr.w	r3, r3, #4
 80081de:	6213      	str	r3, [r2, #32]
 80081e0:	4b67      	ldr	r3, [pc, #412]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 80081e2:	6a1b      	ldr	r3, [r3, #32]
 80081e4:	4a66      	ldr	r2, [pc, #408]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 80081e6:	f043 0301 	orr.w	r3, r3, #1
 80081ea:	6213      	str	r3, [r2, #32]
 80081ec:	e00b      	b.n	8008206 <HAL_RCC_OscConfig+0x36e>
 80081ee:	4b64      	ldr	r3, [pc, #400]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 80081f0:	6a1b      	ldr	r3, [r3, #32]
 80081f2:	4a63      	ldr	r2, [pc, #396]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 80081f4:	f023 0301 	bic.w	r3, r3, #1
 80081f8:	6213      	str	r3, [r2, #32]
 80081fa:	4b61      	ldr	r3, [pc, #388]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 80081fc:	6a1b      	ldr	r3, [r3, #32]
 80081fe:	4a60      	ldr	r2, [pc, #384]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 8008200:	f023 0304 	bic.w	r3, r3, #4
 8008204:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d015      	beq.n	800823a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800820e:	f7fd f981 	bl	8005514 <HAL_GetTick>
 8008212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008214:	e00a      	b.n	800822c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008216:	f7fd f97d 	bl	8005514 <HAL_GetTick>
 800821a:	4602      	mov	r2, r0
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	f241 3288 	movw	r2, #5000	; 0x1388
 8008224:	4293      	cmp	r3, r2
 8008226:	d901      	bls.n	800822c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008228:	2303      	movs	r3, #3
 800822a:	e143      	b.n	80084b4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800822c:	4b54      	ldr	r3, [pc, #336]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 800822e:	6a1b      	ldr	r3, [r3, #32]
 8008230:	f003 0302 	and.w	r3, r3, #2
 8008234:	2b00      	cmp	r3, #0
 8008236:	d0ee      	beq.n	8008216 <HAL_RCC_OscConfig+0x37e>
 8008238:	e014      	b.n	8008264 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800823a:	f7fd f96b 	bl	8005514 <HAL_GetTick>
 800823e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008240:	e00a      	b.n	8008258 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008242:	f7fd f967 	bl	8005514 <HAL_GetTick>
 8008246:	4602      	mov	r2, r0
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	1ad3      	subs	r3, r2, r3
 800824c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008250:	4293      	cmp	r3, r2
 8008252:	d901      	bls.n	8008258 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008254:	2303      	movs	r3, #3
 8008256:	e12d      	b.n	80084b4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008258:	4b49      	ldr	r3, [pc, #292]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 800825a:	6a1b      	ldr	r3, [r3, #32]
 800825c:	f003 0302 	and.w	r3, r3, #2
 8008260:	2b00      	cmp	r3, #0
 8008262:	d1ee      	bne.n	8008242 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008264:	7dfb      	ldrb	r3, [r7, #23]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d105      	bne.n	8008276 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800826a:	4b45      	ldr	r3, [pc, #276]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 800826c:	69db      	ldr	r3, [r3, #28]
 800826e:	4a44      	ldr	r2, [pc, #272]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 8008270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008274:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800827a:	2b00      	cmp	r3, #0
 800827c:	f000 808c 	beq.w	8008398 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8008280:	4b3f      	ldr	r3, [pc, #252]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800828c:	d10e      	bne.n	80082ac <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800828e:	4b3c      	ldr	r3, [pc, #240]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8008296:	2b08      	cmp	r3, #8
 8008298:	d108      	bne.n	80082ac <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800829a:	4b39      	ldr	r3, [pc, #228]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 800829c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80082a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082a6:	d101      	bne.n	80082ac <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	e103      	b.n	80084b4 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d14e      	bne.n	8008352 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80082b4:	4b32      	ldr	r3, [pc, #200]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d009      	beq.n	80082d4 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80082c0:	4b2f      	ldr	r3, [pc, #188]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 80082c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d001      	beq.n	80082d4 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	e0ef      	b.n	80084b4 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80082d4:	4b2c      	ldr	r3, [pc, #176]	; (8008388 <HAL_RCC_OscConfig+0x4f0>)
 80082d6:	2200      	movs	r2, #0
 80082d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082da:	f7fd f91b 	bl	8005514 <HAL_GetTick>
 80082de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80082e0:	e008      	b.n	80082f4 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80082e2:	f7fd f917 	bl	8005514 <HAL_GetTick>
 80082e6:	4602      	mov	r2, r0
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	1ad3      	subs	r3, r2, r3
 80082ec:	2b64      	cmp	r3, #100	; 0x64
 80082ee:	d901      	bls.n	80082f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80082f0:	2303      	movs	r3, #3
 80082f2:	e0df      	b.n	80084b4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80082f4:	4b22      	ldr	r3, [pc, #136]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d1f0      	bne.n	80082e2 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8008300:	4b1f      	ldr	r3, [pc, #124]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 8008302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800830c:	491c      	ldr	r1, [pc, #112]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 800830e:	4313      	orrs	r3, r2
 8008310:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8008312:	4b1b      	ldr	r3, [pc, #108]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 8008314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008316:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800831e:	4918      	ldr	r1, [pc, #96]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 8008320:	4313      	orrs	r3, r2
 8008322:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8008324:	4b18      	ldr	r3, [pc, #96]	; (8008388 <HAL_RCC_OscConfig+0x4f0>)
 8008326:	2201      	movs	r2, #1
 8008328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800832a:	f7fd f8f3 	bl	8005514 <HAL_GetTick>
 800832e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8008330:	e008      	b.n	8008344 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008332:	f7fd f8ef 	bl	8005514 <HAL_GetTick>
 8008336:	4602      	mov	r2, r0
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	2b64      	cmp	r3, #100	; 0x64
 800833e:	d901      	bls.n	8008344 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8008340:	2303      	movs	r3, #3
 8008342:	e0b7      	b.n	80084b4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8008344:	4b0e      	ldr	r3, [pc, #56]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800834c:	2b00      	cmp	r3, #0
 800834e:	d0f0      	beq.n	8008332 <HAL_RCC_OscConfig+0x49a>
 8008350:	e022      	b.n	8008398 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8008352:	4b0b      	ldr	r3, [pc, #44]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 8008354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008356:	4a0a      	ldr	r2, [pc, #40]	; (8008380 <HAL_RCC_OscConfig+0x4e8>)
 8008358:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800835c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800835e:	4b0a      	ldr	r3, [pc, #40]	; (8008388 <HAL_RCC_OscConfig+0x4f0>)
 8008360:	2200      	movs	r2, #0
 8008362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008364:	f7fd f8d6 	bl	8005514 <HAL_GetTick>
 8008368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800836a:	e00f      	b.n	800838c <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800836c:	f7fd f8d2 	bl	8005514 <HAL_GetTick>
 8008370:	4602      	mov	r2, r0
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	2b64      	cmp	r3, #100	; 0x64
 8008378:	d908      	bls.n	800838c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800837a:	2303      	movs	r3, #3
 800837c:	e09a      	b.n	80084b4 <HAL_RCC_OscConfig+0x61c>
 800837e:	bf00      	nop
 8008380:	40021000 	.word	0x40021000
 8008384:	40007000 	.word	0x40007000
 8008388:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800838c:	4b4b      	ldr	r3, [pc, #300]	; (80084bc <HAL_RCC_OscConfig+0x624>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008394:	2b00      	cmp	r3, #0
 8008396:	d1e9      	bne.n	800836c <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a1b      	ldr	r3, [r3, #32]
 800839c:	2b00      	cmp	r3, #0
 800839e:	f000 8088 	beq.w	80084b2 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80083a2:	4b46      	ldr	r3, [pc, #280]	; (80084bc <HAL_RCC_OscConfig+0x624>)
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	f003 030c 	and.w	r3, r3, #12
 80083aa:	2b08      	cmp	r3, #8
 80083ac:	d068      	beq.n	8008480 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a1b      	ldr	r3, [r3, #32]
 80083b2:	2b02      	cmp	r3, #2
 80083b4:	d14d      	bne.n	8008452 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083b6:	4b42      	ldr	r3, [pc, #264]	; (80084c0 <HAL_RCC_OscConfig+0x628>)
 80083b8:	2200      	movs	r2, #0
 80083ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083bc:	f7fd f8aa 	bl	8005514 <HAL_GetTick>
 80083c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80083c2:	e008      	b.n	80083d6 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083c4:	f7fd f8a6 	bl	8005514 <HAL_GetTick>
 80083c8:	4602      	mov	r2, r0
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	1ad3      	subs	r3, r2, r3
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	d901      	bls.n	80083d6 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80083d2:	2303      	movs	r3, #3
 80083d4:	e06e      	b.n	80084b4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80083d6:	4b39      	ldr	r3, [pc, #228]	; (80084bc <HAL_RCC_OscConfig+0x624>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1f0      	bne.n	80083c4 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083ea:	d10f      	bne.n	800840c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80083ec:	4b33      	ldr	r3, [pc, #204]	; (80084bc <HAL_RCC_OscConfig+0x624>)
 80083ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	4931      	ldr	r1, [pc, #196]	; (80084bc <HAL_RCC_OscConfig+0x624>)
 80083f6:	4313      	orrs	r3, r2
 80083f8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80083fa:	4b30      	ldr	r3, [pc, #192]	; (80084bc <HAL_RCC_OscConfig+0x624>)
 80083fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fe:	f023 020f 	bic.w	r2, r3, #15
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	492d      	ldr	r1, [pc, #180]	; (80084bc <HAL_RCC_OscConfig+0x624>)
 8008408:	4313      	orrs	r3, r2
 800840a:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800840c:	4b2b      	ldr	r3, [pc, #172]	; (80084bc <HAL_RCC_OscConfig+0x624>)
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800841c:	430b      	orrs	r3, r1
 800841e:	4927      	ldr	r1, [pc, #156]	; (80084bc <HAL_RCC_OscConfig+0x624>)
 8008420:	4313      	orrs	r3, r2
 8008422:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008424:	4b26      	ldr	r3, [pc, #152]	; (80084c0 <HAL_RCC_OscConfig+0x628>)
 8008426:	2201      	movs	r2, #1
 8008428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800842a:	f7fd f873 	bl	8005514 <HAL_GetTick>
 800842e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008430:	e008      	b.n	8008444 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008432:	f7fd f86f 	bl	8005514 <HAL_GetTick>
 8008436:	4602      	mov	r2, r0
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	2b02      	cmp	r3, #2
 800843e:	d901      	bls.n	8008444 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8008440:	2303      	movs	r3, #3
 8008442:	e037      	b.n	80084b4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008444:	4b1d      	ldr	r3, [pc, #116]	; (80084bc <HAL_RCC_OscConfig+0x624>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800844c:	2b00      	cmp	r3, #0
 800844e:	d0f0      	beq.n	8008432 <HAL_RCC_OscConfig+0x59a>
 8008450:	e02f      	b.n	80084b2 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008452:	4b1b      	ldr	r3, [pc, #108]	; (80084c0 <HAL_RCC_OscConfig+0x628>)
 8008454:	2200      	movs	r2, #0
 8008456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008458:	f7fd f85c 	bl	8005514 <HAL_GetTick>
 800845c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800845e:	e008      	b.n	8008472 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008460:	f7fd f858 	bl	8005514 <HAL_GetTick>
 8008464:	4602      	mov	r2, r0
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	2b02      	cmp	r3, #2
 800846c:	d901      	bls.n	8008472 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800846e:	2303      	movs	r3, #3
 8008470:	e020      	b.n	80084b4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008472:	4b12      	ldr	r3, [pc, #72]	; (80084bc <HAL_RCC_OscConfig+0x624>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1f0      	bne.n	8008460 <HAL_RCC_OscConfig+0x5c8>
 800847e:	e018      	b.n	80084b2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6a1b      	ldr	r3, [r3, #32]
 8008484:	2b01      	cmp	r3, #1
 8008486:	d101      	bne.n	800848c <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	e013      	b.n	80084b4 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800848c:	4b0b      	ldr	r3, [pc, #44]	; (80084bc <HAL_RCC_OscConfig+0x624>)
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849c:	429a      	cmp	r2, r3
 800849e:	d106      	bne.n	80084ae <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d001      	beq.n	80084b2 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	e000      	b.n	80084b4 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80084b2:	2300      	movs	r3, #0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3718      	adds	r7, #24
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	40021000 	.word	0x40021000
 80084c0:	42420060 	.word	0x42420060

080084c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d101      	bne.n	80084d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	e0d0      	b.n	800867a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80084d8:	4b6a      	ldr	r3, [pc, #424]	; (8008684 <HAL_RCC_ClockConfig+0x1c0>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f003 0307 	and.w	r3, r3, #7
 80084e0:	683a      	ldr	r2, [r7, #0]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d910      	bls.n	8008508 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084e6:	4b67      	ldr	r3, [pc, #412]	; (8008684 <HAL_RCC_ClockConfig+0x1c0>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f023 0207 	bic.w	r2, r3, #7
 80084ee:	4965      	ldr	r1, [pc, #404]	; (8008684 <HAL_RCC_ClockConfig+0x1c0>)
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80084f6:	4b63      	ldr	r3, [pc, #396]	; (8008684 <HAL_RCC_ClockConfig+0x1c0>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 0307 	and.w	r3, r3, #7
 80084fe:	683a      	ldr	r2, [r7, #0]
 8008500:	429a      	cmp	r2, r3
 8008502:	d001      	beq.n	8008508 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008504:	2301      	movs	r3, #1
 8008506:	e0b8      	b.n	800867a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 0302 	and.w	r3, r3, #2
 8008510:	2b00      	cmp	r3, #0
 8008512:	d020      	beq.n	8008556 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 0304 	and.w	r3, r3, #4
 800851c:	2b00      	cmp	r3, #0
 800851e:	d005      	beq.n	800852c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008520:	4b59      	ldr	r3, [pc, #356]	; (8008688 <HAL_RCC_ClockConfig+0x1c4>)
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	4a58      	ldr	r2, [pc, #352]	; (8008688 <HAL_RCC_ClockConfig+0x1c4>)
 8008526:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800852a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 0308 	and.w	r3, r3, #8
 8008534:	2b00      	cmp	r3, #0
 8008536:	d005      	beq.n	8008544 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008538:	4b53      	ldr	r3, [pc, #332]	; (8008688 <HAL_RCC_ClockConfig+0x1c4>)
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	4a52      	ldr	r2, [pc, #328]	; (8008688 <HAL_RCC_ClockConfig+0x1c4>)
 800853e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008542:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008544:	4b50      	ldr	r3, [pc, #320]	; (8008688 <HAL_RCC_ClockConfig+0x1c4>)
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	494d      	ldr	r1, [pc, #308]	; (8008688 <HAL_RCC_ClockConfig+0x1c4>)
 8008552:	4313      	orrs	r3, r2
 8008554:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f003 0301 	and.w	r3, r3, #1
 800855e:	2b00      	cmp	r3, #0
 8008560:	d040      	beq.n	80085e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	2b01      	cmp	r3, #1
 8008568:	d107      	bne.n	800857a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800856a:	4b47      	ldr	r3, [pc, #284]	; (8008688 <HAL_RCC_ClockConfig+0x1c4>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008572:	2b00      	cmp	r3, #0
 8008574:	d115      	bne.n	80085a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	e07f      	b.n	800867a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	2b02      	cmp	r3, #2
 8008580:	d107      	bne.n	8008592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008582:	4b41      	ldr	r3, [pc, #260]	; (8008688 <HAL_RCC_ClockConfig+0x1c4>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800858a:	2b00      	cmp	r3, #0
 800858c:	d109      	bne.n	80085a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	e073      	b.n	800867a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008592:	4b3d      	ldr	r3, [pc, #244]	; (8008688 <HAL_RCC_ClockConfig+0x1c4>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f003 0302 	and.w	r3, r3, #2
 800859a:	2b00      	cmp	r3, #0
 800859c:	d101      	bne.n	80085a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	e06b      	b.n	800867a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80085a2:	4b39      	ldr	r3, [pc, #228]	; (8008688 <HAL_RCC_ClockConfig+0x1c4>)
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	f023 0203 	bic.w	r2, r3, #3
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	4936      	ldr	r1, [pc, #216]	; (8008688 <HAL_RCC_ClockConfig+0x1c4>)
 80085b0:	4313      	orrs	r3, r2
 80085b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80085b4:	f7fc ffae 	bl	8005514 <HAL_GetTick>
 80085b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085ba:	e00a      	b.n	80085d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085bc:	f7fc ffaa 	bl	8005514 <HAL_GetTick>
 80085c0:	4602      	mov	r2, r0
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	1ad3      	subs	r3, r2, r3
 80085c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d901      	bls.n	80085d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80085ce:	2303      	movs	r3, #3
 80085d0:	e053      	b.n	800867a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085d2:	4b2d      	ldr	r3, [pc, #180]	; (8008688 <HAL_RCC_ClockConfig+0x1c4>)
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	f003 020c 	and.w	r2, r3, #12
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d1eb      	bne.n	80085bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80085e4:	4b27      	ldr	r3, [pc, #156]	; (8008684 <HAL_RCC_ClockConfig+0x1c0>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 0307 	and.w	r3, r3, #7
 80085ec:	683a      	ldr	r2, [r7, #0]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d210      	bcs.n	8008614 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085f2:	4b24      	ldr	r3, [pc, #144]	; (8008684 <HAL_RCC_ClockConfig+0x1c0>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f023 0207 	bic.w	r2, r3, #7
 80085fa:	4922      	ldr	r1, [pc, #136]	; (8008684 <HAL_RCC_ClockConfig+0x1c0>)
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	4313      	orrs	r3, r2
 8008600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008602:	4b20      	ldr	r3, [pc, #128]	; (8008684 <HAL_RCC_ClockConfig+0x1c0>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 0307 	and.w	r3, r3, #7
 800860a:	683a      	ldr	r2, [r7, #0]
 800860c:	429a      	cmp	r2, r3
 800860e:	d001      	beq.n	8008614 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	e032      	b.n	800867a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 0304 	and.w	r3, r3, #4
 800861c:	2b00      	cmp	r3, #0
 800861e:	d008      	beq.n	8008632 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008620:	4b19      	ldr	r3, [pc, #100]	; (8008688 <HAL_RCC_ClockConfig+0x1c4>)
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	4916      	ldr	r1, [pc, #88]	; (8008688 <HAL_RCC_ClockConfig+0x1c4>)
 800862e:	4313      	orrs	r3, r2
 8008630:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f003 0308 	and.w	r3, r3, #8
 800863a:	2b00      	cmp	r3, #0
 800863c:	d009      	beq.n	8008652 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800863e:	4b12      	ldr	r3, [pc, #72]	; (8008688 <HAL_RCC_ClockConfig+0x1c4>)
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	00db      	lsls	r3, r3, #3
 800864c:	490e      	ldr	r1, [pc, #56]	; (8008688 <HAL_RCC_ClockConfig+0x1c4>)
 800864e:	4313      	orrs	r3, r2
 8008650:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008652:	f000 f821 	bl	8008698 <HAL_RCC_GetSysClockFreq>
 8008656:	4602      	mov	r2, r0
 8008658:	4b0b      	ldr	r3, [pc, #44]	; (8008688 <HAL_RCC_ClockConfig+0x1c4>)
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	091b      	lsrs	r3, r3, #4
 800865e:	f003 030f 	and.w	r3, r3, #15
 8008662:	490a      	ldr	r1, [pc, #40]	; (800868c <HAL_RCC_ClockConfig+0x1c8>)
 8008664:	5ccb      	ldrb	r3, [r1, r3]
 8008666:	fa22 f303 	lsr.w	r3, r2, r3
 800866a:	4a09      	ldr	r2, [pc, #36]	; (8008690 <HAL_RCC_ClockConfig+0x1cc>)
 800866c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800866e:	4b09      	ldr	r3, [pc, #36]	; (8008694 <HAL_RCC_ClockConfig+0x1d0>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4618      	mov	r0, r3
 8008674:	f7fc fdc6 	bl	8005204 <HAL_InitTick>

  return HAL_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3710      	adds	r7, #16
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	40022000 	.word	0x40022000
 8008688:	40021000 	.word	0x40021000
 800868c:	08010198 	.word	0x08010198
 8008690:	2000004c 	.word	0x2000004c
 8008694:	20000050 	.word	0x20000050

08008698 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800869c:	b091      	sub	sp, #68	; 0x44
 800869e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80086a0:	4b6a      	ldr	r3, [pc, #424]	; (800884c <HAL_RCC_GetSysClockFreq+0x1b4>)
 80086a2:	f107 0414 	add.w	r4, r7, #20
 80086a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80086a8:	c407      	stmia	r4!, {r0, r1, r2}
 80086aa:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80086ac:	4b68      	ldr	r3, [pc, #416]	; (8008850 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80086ae:	1d3c      	adds	r4, r7, #4
 80086b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80086b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80086b6:	2300      	movs	r3, #0
 80086b8:	637b      	str	r3, [r7, #52]	; 0x34
 80086ba:	2300      	movs	r3, #0
 80086bc:	633b      	str	r3, [r7, #48]	; 0x30
 80086be:	2300      	movs	r3, #0
 80086c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086c2:	2300      	movs	r3, #0
 80086c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 80086c6:	2300      	movs	r3, #0
 80086c8:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80086ca:	2300      	movs	r3, #0
 80086cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80086ce:	2300      	movs	r3, #0
 80086d0:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80086d2:	4b60      	ldr	r3, [pc, #384]	; (8008854 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80086d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086da:	f003 030c 	and.w	r3, r3, #12
 80086de:	2b04      	cmp	r3, #4
 80086e0:	d002      	beq.n	80086e8 <HAL_RCC_GetSysClockFreq+0x50>
 80086e2:	2b08      	cmp	r3, #8
 80086e4:	d003      	beq.n	80086ee <HAL_RCC_GetSysClockFreq+0x56>
 80086e6:	e0a8      	b.n	800883a <HAL_RCC_GetSysClockFreq+0x1a2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80086e8:	4b5b      	ldr	r3, [pc, #364]	; (8008858 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80086ea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80086ec:	e0a8      	b.n	8008840 <HAL_RCC_GetSysClockFreq+0x1a8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80086ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f0:	0c9b      	lsrs	r3, r3, #18
 80086f2:	f003 030f 	and.w	r3, r3, #15
 80086f6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80086fa:	4413      	add	r3, r2
 80086fc:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8008700:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008708:	2b00      	cmp	r3, #0
 800870a:	f000 808e 	beq.w	800882a <HAL_RCC_GetSysClockFreq+0x192>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800870e:	4b51      	ldr	r3, [pc, #324]	; (8008854 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008712:	f003 030f 	and.w	r3, r3, #15
 8008716:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800871a:	4413      	add	r3, r2
 800871c:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8008720:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8008722:	4b4c      	ldr	r3, [pc, #304]	; (8008854 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800872a:	2b00      	cmp	r3, #0
 800872c:	d06b      	beq.n	8008806 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800872e:	4b49      	ldr	r3, [pc, #292]	; (8008854 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008732:	091b      	lsrs	r3, r3, #4
 8008734:	f003 030f 	and.w	r3, r3, #15
 8008738:	3301      	adds	r3, #1
 800873a:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 800873c:	4b45      	ldr	r3, [pc, #276]	; (8008854 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800873e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008740:	0a1b      	lsrs	r3, r3, #8
 8008742:	f003 030f 	and.w	r3, r3, #15
 8008746:	3302      	adds	r3, #2
 8008748:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800874a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874c:	4618      	mov	r0, r3
 800874e:	f04f 0100 	mov.w	r1, #0
 8008752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008754:	461a      	mov	r2, r3
 8008756:	f04f 0300 	mov.w	r3, #0
 800875a:	fb02 f501 	mul.w	r5, r2, r1
 800875e:	fb00 f403 	mul.w	r4, r0, r3
 8008762:	192e      	adds	r6, r5, r4
 8008764:	fba0 4502 	umull	r4, r5, r0, r2
 8008768:	1973      	adds	r3, r6, r5
 800876a:	461d      	mov	r5, r3
 800876c:	4620      	mov	r0, r4
 800876e:	4629      	mov	r1, r5
 8008770:	f04f 0200 	mov.w	r2, #0
 8008774:	f04f 0300 	mov.w	r3, #0
 8008778:	014b      	lsls	r3, r1, #5
 800877a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800877e:	0142      	lsls	r2, r0, #5
 8008780:	4610      	mov	r0, r2
 8008782:	4619      	mov	r1, r3
 8008784:	1b00      	subs	r0, r0, r4
 8008786:	eb61 0105 	sbc.w	r1, r1, r5
 800878a:	f04f 0200 	mov.w	r2, #0
 800878e:	f04f 0300 	mov.w	r3, #0
 8008792:	018b      	lsls	r3, r1, #6
 8008794:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008798:	0182      	lsls	r2, r0, #6
 800879a:	1a12      	subs	r2, r2, r0
 800879c:	eb63 0301 	sbc.w	r3, r3, r1
 80087a0:	f04f 0000 	mov.w	r0, #0
 80087a4:	f04f 0100 	mov.w	r1, #0
 80087a8:	00d9      	lsls	r1, r3, #3
 80087aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80087ae:	00d0      	lsls	r0, r2, #3
 80087b0:	4602      	mov	r2, r0
 80087b2:	460b      	mov	r3, r1
 80087b4:	1912      	adds	r2, r2, r4
 80087b6:	eb45 0303 	adc.w	r3, r5, r3
 80087ba:	f04f 0000 	mov.w	r0, #0
 80087be:	f04f 0100 	mov.w	r1, #0
 80087c2:	0259      	lsls	r1, r3, #9
 80087c4:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80087c8:	0250      	lsls	r0, r2, #9
 80087ca:	4602      	mov	r2, r0
 80087cc:	460b      	mov	r3, r1
 80087ce:	4690      	mov	r8, r2
 80087d0:	4699      	mov	r9, r3
 80087d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d4:	4618      	mov	r0, r3
 80087d6:	f04f 0100 	mov.w	r1, #0
 80087da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087dc:	461a      	mov	r2, r3
 80087de:	f04f 0300 	mov.w	r3, #0
 80087e2:	fb02 f501 	mul.w	r5, r2, r1
 80087e6:	fb00 f403 	mul.w	r4, r0, r3
 80087ea:	442c      	add	r4, r5
 80087ec:	fba0 2302 	umull	r2, r3, r0, r2
 80087f0:	18e1      	adds	r1, r4, r3
 80087f2:	460b      	mov	r3, r1
 80087f4:	4640      	mov	r0, r8
 80087f6:	4649      	mov	r1, r9
 80087f8:	f7f8 fd10 	bl	800121c <__aeabi_uldivmod>
 80087fc:	4602      	mov	r2, r0
 80087fe:	460b      	mov	r3, r1
 8008800:	4613      	mov	r3, r2
 8008802:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008804:	e007      	b.n	8008816 <HAL_RCC_GetSysClockFreq+0x17e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8008806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008808:	4a13      	ldr	r2, [pc, #76]	; (8008858 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800880a:	fb02 f203 	mul.w	r2, r2, r3
 800880e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008810:	fbb2 f3f3 	udiv	r3, r2, r3
 8008814:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8008816:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800881a:	461a      	mov	r2, r3
 800881c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881e:	4293      	cmp	r3, r2
 8008820:	d108      	bne.n	8008834 <HAL_RCC_GetSysClockFreq+0x19c>
        {
          pllclk = pllclk / 2;
 8008822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008824:	085b      	lsrs	r3, r3, #1
 8008826:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008828:	e004      	b.n	8008834 <HAL_RCC_GetSysClockFreq+0x19c>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800882a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882c:	4a0b      	ldr	r2, [pc, #44]	; (800885c <HAL_RCC_GetSysClockFreq+0x1c4>)
 800882e:	fb02 f303 	mul.w	r3, r2, r3
 8008832:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8008834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008836:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008838:	e002      	b.n	8008840 <HAL_RCC_GetSysClockFreq+0x1a8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800883a:	4b07      	ldr	r3, [pc, #28]	; (8008858 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800883c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800883e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008842:	4618      	mov	r0, r3
 8008844:	3744      	adds	r7, #68	; 0x44
 8008846:	46bd      	mov	sp, r7
 8008848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800884c:	0801013c 	.word	0x0801013c
 8008850:	0801014c 	.word	0x0801014c
 8008854:	40021000 	.word	0x40021000
 8008858:	007a1200 	.word	0x007a1200
 800885c:	003d0900 	.word	0x003d0900

08008860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008860:	b480      	push	{r7}
 8008862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008864:	4b02      	ldr	r3, [pc, #8]	; (8008870 <HAL_RCC_GetHCLKFreq+0x10>)
 8008866:	681b      	ldr	r3, [r3, #0]
}
 8008868:	4618      	mov	r0, r3
 800886a:	46bd      	mov	sp, r7
 800886c:	bc80      	pop	{r7}
 800886e:	4770      	bx	lr
 8008870:	2000004c 	.word	0x2000004c

08008874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008878:	f7ff fff2 	bl	8008860 <HAL_RCC_GetHCLKFreq>
 800887c:	4602      	mov	r2, r0
 800887e:	4b05      	ldr	r3, [pc, #20]	; (8008894 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	0a1b      	lsrs	r3, r3, #8
 8008884:	f003 0307 	and.w	r3, r3, #7
 8008888:	4903      	ldr	r1, [pc, #12]	; (8008898 <HAL_RCC_GetPCLK1Freq+0x24>)
 800888a:	5ccb      	ldrb	r3, [r1, r3]
 800888c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008890:	4618      	mov	r0, r3
 8008892:	bd80      	pop	{r7, pc}
 8008894:	40021000 	.word	0x40021000
 8008898:	080101a8 	.word	0x080101a8

0800889c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80088a0:	f7ff ffde 	bl	8008860 <HAL_RCC_GetHCLKFreq>
 80088a4:	4602      	mov	r2, r0
 80088a6:	4b05      	ldr	r3, [pc, #20]	; (80088bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	0adb      	lsrs	r3, r3, #11
 80088ac:	f003 0307 	and.w	r3, r3, #7
 80088b0:	4903      	ldr	r1, [pc, #12]	; (80088c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80088b2:	5ccb      	ldrb	r3, [r1, r3]
 80088b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	40021000 	.word	0x40021000
 80088c0:	080101a8 	.word	0x080101a8

080088c4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	220f      	movs	r2, #15
 80088d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80088d4:	4b11      	ldr	r3, [pc, #68]	; (800891c <HAL_RCC_GetClockConfig+0x58>)
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	f003 0203 	and.w	r2, r3, #3
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80088e0:	4b0e      	ldr	r3, [pc, #56]	; (800891c <HAL_RCC_GetClockConfig+0x58>)
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80088ec:	4b0b      	ldr	r3, [pc, #44]	; (800891c <HAL_RCC_GetClockConfig+0x58>)
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80088f8:	4b08      	ldr	r3, [pc, #32]	; (800891c <HAL_RCC_GetClockConfig+0x58>)
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	08db      	lsrs	r3, r3, #3
 80088fe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008906:	4b06      	ldr	r3, [pc, #24]	; (8008920 <HAL_RCC_GetClockConfig+0x5c>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 0207 	and.w	r2, r3, #7
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8008912:	bf00      	nop
 8008914:	370c      	adds	r7, #12
 8008916:	46bd      	mov	sp, r7
 8008918:	bc80      	pop	{r7}
 800891a:	4770      	bx	lr
 800891c:	40021000 	.word	0x40021000
 8008920:	40022000 	.word	0x40022000

08008924 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008924:	b480      	push	{r7}
 8008926:	b085      	sub	sp, #20
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800892c:	4b0a      	ldr	r3, [pc, #40]	; (8008958 <RCC_Delay+0x34>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a0a      	ldr	r2, [pc, #40]	; (800895c <RCC_Delay+0x38>)
 8008932:	fba2 2303 	umull	r2, r3, r2, r3
 8008936:	0a5b      	lsrs	r3, r3, #9
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	fb02 f303 	mul.w	r3, r2, r3
 800893e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008940:	bf00      	nop
  }
  while (Delay --);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	1e5a      	subs	r2, r3, #1
 8008946:	60fa      	str	r2, [r7, #12]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d1f9      	bne.n	8008940 <RCC_Delay+0x1c>
}
 800894c:	bf00      	nop
 800894e:	bf00      	nop
 8008950:	3714      	adds	r7, #20
 8008952:	46bd      	mov	sp, r7
 8008954:	bc80      	pop	{r7}
 8008956:	4770      	bx	lr
 8008958:	2000004c 	.word	0x2000004c
 800895c:	10624dd3 	.word	0x10624dd3

08008960 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b088      	sub	sp, #32
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8008968:	2300      	movs	r3, #0
 800896a:	617b      	str	r3, [r7, #20]
 800896c:	2300      	movs	r3, #0
 800896e:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8008970:	2300      	movs	r3, #0
 8008972:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 0301 	and.w	r3, r3, #1
 800897c:	2b00      	cmp	r3, #0
 800897e:	d07d      	beq.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8008980:	2300      	movs	r3, #0
 8008982:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008984:	4b8b      	ldr	r3, [pc, #556]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008986:	69db      	ldr	r3, [r3, #28]
 8008988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800898c:	2b00      	cmp	r3, #0
 800898e:	d10d      	bne.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008990:	4b88      	ldr	r3, [pc, #544]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008992:	69db      	ldr	r3, [r3, #28]
 8008994:	4a87      	ldr	r2, [pc, #540]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800899a:	61d3      	str	r3, [r2, #28]
 800899c:	4b85      	ldr	r3, [pc, #532]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800899e:	69db      	ldr	r3, [r3, #28]
 80089a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089a4:	60fb      	str	r3, [r7, #12]
 80089a6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80089a8:	2301      	movs	r3, #1
 80089aa:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089ac:	4b82      	ldr	r3, [pc, #520]	; (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d118      	bne.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80089b8:	4b7f      	ldr	r3, [pc, #508]	; (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a7e      	ldr	r2, [pc, #504]	; (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80089be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089c4:	f7fc fda6 	bl	8005514 <HAL_GetTick>
 80089c8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089ca:	e008      	b.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089cc:	f7fc fda2 	bl	8005514 <HAL_GetTick>
 80089d0:	4602      	mov	r2, r0
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	1ad3      	subs	r3, r2, r3
 80089d6:	2b64      	cmp	r3, #100	; 0x64
 80089d8:	d901      	bls.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 80089da:	2303      	movs	r3, #3
 80089dc:	e0e5      	b.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089de:	4b76      	ldr	r3, [pc, #472]	; (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d0f0      	beq.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80089ea:	4b72      	ldr	r3, [pc, #456]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80089ec:	6a1b      	ldr	r3, [r3, #32]
 80089ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089f2:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d02e      	beq.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a02:	693a      	ldr	r2, [r7, #16]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d027      	beq.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008a08:	4b6a      	ldr	r3, [pc, #424]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008a0a:	6a1b      	ldr	r3, [r3, #32]
 8008a0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a10:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008a12:	4b6a      	ldr	r3, [pc, #424]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8008a14:	2201      	movs	r2, #1
 8008a16:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008a18:	4b68      	ldr	r3, [pc, #416]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008a1e:	4a65      	ldr	r2, [pc, #404]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	f003 0301 	and.w	r3, r3, #1
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d014      	beq.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a2e:	f7fc fd71 	bl	8005514 <HAL_GetTick>
 8008a32:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a34:	e00a      	b.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a36:	f7fc fd6d 	bl	8005514 <HAL_GetTick>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	1ad3      	subs	r3, r2, r3
 8008a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d901      	bls.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8008a48:	2303      	movs	r3, #3
 8008a4a:	e0ae      	b.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a4c:	4b59      	ldr	r3, [pc, #356]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008a4e:	6a1b      	ldr	r3, [r3, #32]
 8008a50:	f003 0302 	and.w	r3, r3, #2
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d0ee      	beq.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a58:	4b56      	ldr	r3, [pc, #344]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008a5a:	6a1b      	ldr	r3, [r3, #32]
 8008a5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	4953      	ldr	r1, [pc, #332]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008a66:	4313      	orrs	r3, r2
 8008a68:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008a6a:	7efb      	ldrb	r3, [r7, #27]
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d105      	bne.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a70:	4b50      	ldr	r3, [pc, #320]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008a72:	69db      	ldr	r3, [r3, #28]
 8008a74:	4a4f      	ldr	r2, [pc, #316]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008a76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a7a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 0302 	and.w	r3, r3, #2
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d008      	beq.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008a88:	4b4a      	ldr	r3, [pc, #296]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	4947      	ldr	r1, [pc, #284]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008a96:	4313      	orrs	r3, r2
 8008a98:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f003 0304 	and.w	r3, r3, #4
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d008      	beq.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8008aa6:	4b43      	ldr	r3, [pc, #268]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aaa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	4940      	ldr	r1, [pc, #256]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 0308 	and.w	r3, r3, #8
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d008      	beq.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8008ac4:	4b3b      	ldr	r3, [pc, #236]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	4938      	ldr	r1, [pc, #224]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8008ad6:	4b37      	ldr	r3, [pc, #220]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d105      	bne.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8008ae2:	4b34      	ldr	r3, [pc, #208]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d001      	beq.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8008aee:	2301      	movs	r3, #1
 8008af0:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d148      	bne.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8008af8:	4b2e      	ldr	r3, [pc, #184]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d138      	bne.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8008b04:	4b2b      	ldr	r3, [pc, #172]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d009      	beq.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8008b10:	4b28      	ldr	r3, [pc, #160]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d001      	beq.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8008b20:	2301      	movs	r3, #1
 8008b22:	e042      	b.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8008b24:	4b23      	ldr	r3, [pc, #140]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	699b      	ldr	r3, [r3, #24]
 8008b30:	4920      	ldr	r1, [pc, #128]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008b32:	4313      	orrs	r3, r2
 8008b34:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8008b36:	4b1f      	ldr	r3, [pc, #124]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b3a:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	695b      	ldr	r3, [r3, #20]
 8008b42:	491c      	ldr	r1, [pc, #112]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008b44:	4313      	orrs	r3, r2
 8008b46:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8008b48:	4b1d      	ldr	r3, [pc, #116]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b4e:	f7fc fce1 	bl	8005514 <HAL_GetTick>
 8008b52:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008b54:	e008      	b.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008b56:	f7fc fcdd 	bl	8005514 <HAL_GetTick>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	1ad3      	subs	r3, r2, r3
 8008b60:	2b64      	cmp	r3, #100	; 0x64
 8008b62:	d901      	bls.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8008b64:	2303      	movs	r3, #3
 8008b66:	e020      	b.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008b68:	4b12      	ldr	r3, [pc, #72]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d0f0      	beq.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8008b74:	e009      	b.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8008b76:	4b0f      	ldr	r3, [pc, #60]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	695b      	ldr	r3, [r3, #20]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d001      	beq.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	e00f      	b.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f003 0310 	and.w	r3, r3, #16
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d008      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008b96:	4b07      	ldr	r3, [pc, #28]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	69db      	ldr	r3, [r3, #28]
 8008ba2:	4904      	ldr	r1, [pc, #16]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3720      	adds	r7, #32
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	40021000 	.word	0x40021000
 8008bb8:	40007000 	.word	0x40007000
 8008bbc:	42420440 	.word	0x42420440
 8008bc0:	42420070 	.word	0x42420070

08008bc4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008bc4:	b590      	push	{r4, r7, lr}
 8008bc6:	b093      	sub	sp, #76	; 0x4c
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8008bcc:	4ba9      	ldr	r3, [pc, #676]	; (8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8008bce:	f107 0418 	add.w	r4, r7, #24
 8008bd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008bd4:	c407      	stmia	r4!, {r0, r1, r2}
 8008bd6:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8008bd8:	4ba7      	ldr	r3, [pc, #668]	; (8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008bda:	f107 0408 	add.w	r4, r7, #8
 8008bde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008be0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8008be4:	2300      	movs	r3, #0
 8008be6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008be8:	2300      	movs	r3, #0
 8008bea:	647b      	str	r3, [r7, #68]	; 0x44
 8008bec:	2300      	movs	r3, #0
 8008bee:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	637b      	str	r3, [r7, #52]	; 0x34
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	633b      	str	r3, [r7, #48]	; 0x30
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[2] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c00:	2300      	movs	r3, #0
 8008c02:	643b      	str	r3, [r7, #64]	; 0x40
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	3b01      	subs	r3, #1
 8008c08:	2b0f      	cmp	r3, #15
 8008c0a:	f200 8124 	bhi.w	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 8008c0e:	a201      	add	r2, pc, #4	; (adr r2, 8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8008c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c14:	08008dd5 	.word	0x08008dd5
 8008c18:	08008e3b 	.word	0x08008e3b
 8008c1c:	08008e57 	.word	0x08008e57
 8008c20:	08008d33 	.word	0x08008d33
 8008c24:	08008e57 	.word	0x08008e57
 8008c28:	08008e57 	.word	0x08008e57
 8008c2c:	08008e57 	.word	0x08008e57
 8008c30:	08008d85 	.word	0x08008d85
 8008c34:	08008e57 	.word	0x08008e57
 8008c38:	08008e57 	.word	0x08008e57
 8008c3c:	08008e57 	.word	0x08008e57
 8008c40:	08008e57 	.word	0x08008e57
 8008c44:	08008e57 	.word	0x08008e57
 8008c48:	08008e57 	.word	0x08008e57
 8008c4c:	08008e57 	.word	0x08008e57
 8008c50:	08008c55 	.word	0x08008c55
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8008c54:	4b89      	ldr	r3, [pc, #548]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8008c5a:	4b88      	ldr	r3, [pc, #544]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	f000 80f9 	beq.w	8008e5a <HAL_RCCEx_GetPeriphCLKFreq+0x296>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6a:	0c9b      	lsrs	r3, r3, #18
 8008c6c:	f003 030f 	and.w	r3, r3, #15
 8008c70:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008c74:	4413      	add	r3, r2
 8008c76:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8008c7a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d03e      	beq.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8008c86:	4b7d      	ldr	r3, [pc, #500]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8a:	f003 030f 	and.w	r3, r3, #15
 8008c8e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008c92:	4413      	add	r3, r2
 8008c94:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8008c98:	63fb      	str	r3, [r7, #60]	; 0x3c
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8008c9a:	4b78      	ldr	r3, [pc, #480]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d01c      	beq.n	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8008ca6:	4b75      	ldr	r3, [pc, #468]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008caa:	091b      	lsrs	r3, r3, #4
 8008cac:	f003 030f 	and.w	r3, r3, #15
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8008cb4:	4b71      	ldr	r3, [pc, #452]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb8:	0a1b      	lsrs	r3, r3, #8
 8008cba:	f003 030f 	and.w	r3, r3, #15
 8008cbe:	3302      	adds	r3, #2
 8008cc0:	637b      	str	r3, [r7, #52]	; 0x34
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 8008cc2:	4a6f      	ldr	r2, [pc, #444]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ccc:	fb02 f203 	mul.w	r2, r2, r3
 8008cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cd2:	fbb2 f2f3 	udiv	r2, r2, r3
 8008cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd8:	fb02 f303 	mul.w	r3, r2, r3
 8008cdc:	647b      	str	r3, [r7, #68]	; 0x44
 8008cde:	e007      	b.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8008ce0:	4a67      	ldr	r2, [pc, #412]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ce4:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cea:	fb02 f303 	mul.w	r3, r2, r3
 8008cee:	647b      	str	r3, [r7, #68]	; 0x44
          }

          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8008cf0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d108      	bne.n	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
          {
            pllclk = pllclk / 2;
 8008cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cfe:	085b      	lsrs	r3, r3, #1
 8008d00:	647b      	str	r3, [r7, #68]	; 0x44
 8008d02:	e004      	b.n	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d06:	4a5f      	ldr	r2, [pc, #380]	; (8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008d08:	fb02 f303 	mul.w	r3, r2, r3
 8008d0c:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 8008d0e:	4b5b      	ldr	r3, [pc, #364]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d1a:	d102      	bne.n	8008d22 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        {
          /* Prescaler of 2 selected for USB */
          frequency = pllclk;
 8008d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d1e:	643b      	str	r3, [r7, #64]	; 0x40
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8008d20:	e09b      	b.n	8008e5a <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          frequency = (2 * pllclk) / 3;
 8008d22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d24:	005b      	lsls	r3, r3, #1
 8008d26:	4a58      	ldr	r2, [pc, #352]	; (8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8008d28:	fba2 2303 	umull	r2, r3, r2, r3
 8008d2c:	085b      	lsrs	r3, r3, #1
 8008d2e:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8008d30:	e093      	b.n	8008e5a <HAL_RCCEx_GetPeriphCLKFreq+0x296>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 8008d32:	4b52      	ldr	r3, [pc, #328]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d103      	bne.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        /* SYSCLK used as source clock for I2S2 */
        frequency = HAL_RCC_GetSysClockFreq();
 8008d3e:	f7ff fcab 	bl	8008698 <HAL_RCC_GetSysClockFreq>
 8008d42:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8008d44:	e08b      	b.n	8008e5e <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8008d46:	4b4d      	ldr	r3, [pc, #308]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	f000 8085 	beq.w	8008e5e <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8008d54:	4b49      	ldr	r3, [pc, #292]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d58:	091b      	lsrs	r3, r3, #4
 8008d5a:	f003 030f 	and.w	r3, r3, #15
 8008d5e:	3301      	adds	r3, #1
 8008d60:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8008d62:	4b46      	ldr	r3, [pc, #280]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d66:	0b1b      	lsrs	r3, r3, #12
 8008d68:	f003 030f 	and.w	r3, r3, #15
 8008d6c:	3302      	adds	r3, #2
 8008d6e:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8008d70:	4a43      	ldr	r2, [pc, #268]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d7a:	fb02 f303 	mul.w	r3, r2, r3
 8008d7e:	005b      	lsls	r3, r3, #1
 8008d80:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8008d82:	e06c      	b.n	8008e5e <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 8008d84:	4b3d      	ldr	r3, [pc, #244]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d103      	bne.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
      {
        /* SYSCLK used as source clock for I2S3 */
        frequency = HAL_RCC_GetSysClockFreq();
 8008d90:	f7ff fc82 	bl	8008698 <HAL_RCC_GetSysClockFreq>
 8008d94:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8008d96:	e064      	b.n	8008e62 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8008d98:	4b38      	ldr	r3, [pc, #224]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d05e      	beq.n	8008e62 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8008da4:	4b35      	ldr	r3, [pc, #212]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da8:	091b      	lsrs	r3, r3, #4
 8008daa:	f003 030f 	and.w	r3, r3, #15
 8008dae:	3301      	adds	r3, #1
 8008db0:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8008db2:	4b32      	ldr	r3, [pc, #200]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db6:	0b1b      	lsrs	r3, r3, #12
 8008db8:	f003 030f 	and.w	r3, r3, #15
 8008dbc:	3302      	adds	r3, #2
 8008dbe:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8008dc0:	4a2f      	ldr	r2, [pc, #188]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dca:	fb02 f303 	mul.w	r3, r2, r3
 8008dce:	005b      	lsls	r3, r3, #1
 8008dd0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8008dd2:	e046      	b.n	8008e62 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8008dd4:	4b29      	ldr	r3, [pc, #164]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008dd6:	6a1b      	ldr	r3, [r3, #32]
 8008dd8:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8008dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ddc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008de4:	d108      	bne.n	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 8008de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de8:	f003 0302 	and.w	r3, r3, #2
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d003      	beq.n	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
      {
        frequency = LSE_VALUE;
 8008df0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008df4:	643b      	str	r3, [r7, #64]	; 0x40
 8008df6:	e01f      	b.n	8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e02:	d109      	bne.n	8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8008e04:	4b1d      	ldr	r3, [pc, #116]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e08:	f003 0302 	and.w	r3, r3, #2
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d003      	beq.n	8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
      {
        frequency = LSI_VALUE;
 8008e10:	f649 4340 	movw	r3, #40000	; 0x9c40
 8008e14:	643b      	str	r3, [r7, #64]	; 0x40
 8008e16:	e00f      	b.n	8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8008e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e22:	d120      	bne.n	8008e66 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 8008e24:	4b15      	ldr	r3, [pc, #84]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d01a      	beq.n	8008e66 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
      {
        frequency = HSE_VALUE / 128U;
 8008e30:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008e34:	643b      	str	r3, [r7, #64]	; 0x40
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8008e36:	e016      	b.n	8008e66 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 8008e38:	e015      	b.n	8008e66 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8008e3a:	f7ff fd2f 	bl	800889c <HAL_RCC_GetPCLK2Freq>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	4b0e      	ldr	r3, [pc, #56]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	0b9b      	lsrs	r3, r3, #14
 8008e46:	f003 0303 	and.w	r3, r3, #3
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	005b      	lsls	r3, r3, #1
 8008e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e52:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8008e54:	e008      	b.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
    }
    default:
    {
      break;
 8008e56:	bf00      	nop
 8008e58:	e006      	b.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8008e5a:	bf00      	nop
 8008e5c:	e004      	b.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8008e5e:	bf00      	nop
 8008e60:	e002      	b.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8008e62:	bf00      	nop
 8008e64:	e000      	b.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8008e66:	bf00      	nop
    }
  }
  return (frequency);
 8008e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	374c      	adds	r7, #76	; 0x4c
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd90      	pop	{r4, r7, pc}
 8008e72:	bf00      	nop
 8008e74:	0801015c 	.word	0x0801015c
 8008e78:	0801016c 	.word	0x0801016c
 8008e7c:	40021000 	.word	0x40021000
 8008e80:	007a1200 	.word	0x007a1200
 8008e84:	003d0900 	.word	0x003d0900
 8008e88:	aaaaaaab 	.word	0xaaaaaaab

08008e8c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8008e94:	2300      	movs	r3, #0
 8008e96:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d101      	bne.n	8008ea2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e084      	b.n	8008fac <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	7c5b      	ldrb	r3, [r3, #17]
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d105      	bne.n	8008eb8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f7fc f8bc 	bl	8005030 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2202      	movs	r2, #2
 8008ebc:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 faa0 	bl	8009404 <HAL_RTC_WaitForSynchro>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d004      	beq.n	8008ed4 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2204      	movs	r2, #4
 8008ece:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e06b      	b.n	8008fac <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 fb59 	bl	800958c <RTC_EnterInitMode>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d004      	beq.n	8008eea <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2204      	movs	r2, #4
 8008ee4:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e060      	b.n	8008fac <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	685a      	ldr	r2, [r3, #4]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f022 0207 	bic.w	r2, r2, #7
 8008ef8:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d005      	beq.n	8008f0e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8008f02:	4b2c      	ldr	r3, [pc, #176]	; (8008fb4 <HAL_RTC_Init+0x128>)
 8008f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f06:	4a2b      	ldr	r2, [pc, #172]	; (8008fb4 <HAL_RTC_Init+0x128>)
 8008f08:	f023 0301 	bic.w	r3, r3, #1
 8008f0c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8008f0e:	4b29      	ldr	r3, [pc, #164]	; (8008fb4 <HAL_RTC_Init+0x128>)
 8008f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f12:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	4926      	ldr	r1, [pc, #152]	; (8008fb4 <HAL_RTC_Init+0x128>)
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f28:	d003      	beq.n	8008f32 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	60fb      	str	r3, [r7, #12]
 8008f30:	e00e      	b.n	8008f50 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8008f32:	2001      	movs	r0, #1
 8008f34:	f7ff fe46 	bl	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008f38:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d104      	bne.n	8008f4a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2204      	movs	r2, #4
 8008f44:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8008f46:	2301      	movs	r3, #1
 8008f48:	e030      	b.n	8008fac <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	3b01      	subs	r3, #1
 8008f4e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	f023 010f 	bic.w	r1, r3, #15
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	0c1a      	lsrs	r2, r3, #16
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	430a      	orrs	r2, r1
 8008f64:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	0c1b      	lsrs	r3, r3, #16
 8008f6e:	041b      	lsls	r3, r3, #16
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	b291      	uxth	r1, r2
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	6812      	ldr	r2, [r2, #0]
 8008f78:	430b      	orrs	r3, r1
 8008f7a:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 fb2d 	bl	80095dc <RTC_ExitInitMode>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d004      	beq.n	8008f92 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2204      	movs	r2, #4
 8008f8c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e00c      	b.n	8008fac <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8008faa:	2300      	movs	r3, #0
  }
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3710      	adds	r7, #16
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	40006c00 	.word	0x40006c00

08008fb8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008fb8:	b590      	push	{r4, r7, lr}
 8008fba:	b087      	sub	sp, #28
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	617b      	str	r3, [r7, #20]
 8008fc8:	2300      	movs	r3, #0
 8008fca:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d002      	beq.n	8008fd8 <HAL_RTC_SetTime+0x20>
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d101      	bne.n	8008fdc <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e080      	b.n	80090de <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	7c1b      	ldrb	r3, [r3, #16]
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d101      	bne.n	8008fe8 <HAL_RTC_SetTime+0x30>
 8008fe4:	2302      	movs	r3, #2
 8008fe6:	e07a      	b.n	80090de <HAL_RTC_SetTime+0x126>
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2201      	movs	r2, #1
 8008fec:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2202      	movs	r2, #2
 8008ff2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d113      	bne.n	8009022 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	461a      	mov	r2, r3
 8009000:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8009004:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	785b      	ldrb	r3, [r3, #1]
 800900c:	4619      	mov	r1, r3
 800900e:	460b      	mov	r3, r1
 8009010:	011b      	lsls	r3, r3, #4
 8009012:	1a5b      	subs	r3, r3, r1
 8009014:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8009016:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8009018:	68ba      	ldr	r2, [r7, #8]
 800901a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800901c:	4413      	add	r3, r2
 800901e:	617b      	str	r3, [r7, #20]
 8009020:	e01e      	b.n	8009060 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	4618      	mov	r0, r3
 8009028:	f000 fb1d 	bl	8009666 <RTC_Bcd2ToByte>
 800902c:	4603      	mov	r3, r0
 800902e:	461a      	mov	r2, r3
 8009030:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8009034:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	785b      	ldrb	r3, [r3, #1]
 800903c:	4618      	mov	r0, r3
 800903e:	f000 fb12 	bl	8009666 <RTC_Bcd2ToByte>
 8009042:	4603      	mov	r3, r0
 8009044:	461a      	mov	r2, r3
 8009046:	4613      	mov	r3, r2
 8009048:	011b      	lsls	r3, r3, #4
 800904a:	1a9b      	subs	r3, r3, r2
 800904c:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800904e:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	789b      	ldrb	r3, [r3, #2]
 8009054:	4618      	mov	r0, r3
 8009056:	f000 fb06 	bl	8009666 <RTC_Bcd2ToByte>
 800905a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800905c:	4423      	add	r3, r4
 800905e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8009060:	6979      	ldr	r1, [r7, #20]
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f000 fa2b 	bl	80094be <RTC_WriteTimeCounter>
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	d007      	beq.n	800907e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2204      	movs	r2, #4
 8009072:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2200      	movs	r2, #0
 8009078:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	e02f      	b.n	80090de <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	685a      	ldr	r2, [r3, #4]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f022 0205 	bic.w	r2, r2, #5
 800908c:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800908e:	68f8      	ldr	r0, [r7, #12]
 8009090:	f000 fa3c 	bl	800950c <RTC_ReadAlarmCounter>
 8009094:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800909c:	d018      	beq.n	80090d0 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800909e:	693a      	ldr	r2, [r7, #16]
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d214      	bcs.n	80090d0 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80090ac:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80090b0:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80090b2:	6939      	ldr	r1, [r7, #16]
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	f000 fa42 	bl	800953e <RTC_WriteAlarmCounter>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d007      	beq.n	80090d0 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2204      	movs	r2, #4
 80090c4:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2200      	movs	r2, #0
 80090ca:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80090cc:	2301      	movs	r3, #1
 80090ce:	e006      	b.n	80090de <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2201      	movs	r2, #1
 80090d4:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2200      	movs	r2, #0
 80090da:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80090dc:	2300      	movs	r3, #0
  }
}
 80090de:	4618      	mov	r0, r3
 80090e0:	371c      	adds	r7, #28
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd90      	pop	{r4, r7, pc}
	...

080090e8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b088      	sub	sp, #32
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80090f4:	2300      	movs	r3, #0
 80090f6:	61bb      	str	r3, [r7, #24]
 80090f8:	2300      	movs	r3, #0
 80090fa:	61fb      	str	r3, [r7, #28]
 80090fc:	2300      	movs	r3, #0
 80090fe:	617b      	str	r3, [r7, #20]
 8009100:	2300      	movs	r3, #0
 8009102:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d002      	beq.n	8009110 <HAL_RTC_GetTime+0x28>
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d101      	bne.n	8009114 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8009110:	2301      	movs	r3, #1
 8009112:	e0b5      	b.n	8009280 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	f003 0304 	and.w	r3, r3, #4
 800911e:	2b00      	cmp	r3, #0
 8009120:	d001      	beq.n	8009126 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	e0ac      	b.n	8009280 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	f000 f999 	bl	800945e <RTC_ReadTimeCounter>
 800912c:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	4a55      	ldr	r2, [pc, #340]	; (8009288 <HAL_RTC_GetTime+0x1a0>)
 8009132:	fba2 2303 	umull	r2, r3, r2, r3
 8009136:	0adb      	lsrs	r3, r3, #11
 8009138:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800913a:	69ba      	ldr	r2, [r7, #24]
 800913c:	4b52      	ldr	r3, [pc, #328]	; (8009288 <HAL_RTC_GetTime+0x1a0>)
 800913e:	fba3 1302 	umull	r1, r3, r3, r2
 8009142:	0adb      	lsrs	r3, r3, #11
 8009144:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009148:	fb01 f303 	mul.w	r3, r1, r3
 800914c:	1ad3      	subs	r3, r2, r3
 800914e:	4a4f      	ldr	r2, [pc, #316]	; (800928c <HAL_RTC_GetTime+0x1a4>)
 8009150:	fba2 2303 	umull	r2, r3, r2, r3
 8009154:	095b      	lsrs	r3, r3, #5
 8009156:	b2da      	uxtb	r2, r3
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 800915c:	69bb      	ldr	r3, [r7, #24]
 800915e:	4a4a      	ldr	r2, [pc, #296]	; (8009288 <HAL_RTC_GetTime+0x1a0>)
 8009160:	fba2 1203 	umull	r1, r2, r2, r3
 8009164:	0ad2      	lsrs	r2, r2, #11
 8009166:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800916a:	fb01 f202 	mul.w	r2, r1, r2
 800916e:	1a9a      	subs	r2, r3, r2
 8009170:	4b46      	ldr	r3, [pc, #280]	; (800928c <HAL_RTC_GetTime+0x1a4>)
 8009172:	fba3 1302 	umull	r1, r3, r3, r2
 8009176:	0959      	lsrs	r1, r3, #5
 8009178:	460b      	mov	r3, r1
 800917a:	011b      	lsls	r3, r3, #4
 800917c:	1a5b      	subs	r3, r3, r1
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	1ad1      	subs	r1, r2, r3
 8009182:	b2ca      	uxtb	r2, r1
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	2b17      	cmp	r3, #23
 800918c:	d955      	bls.n	800923a <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	4a3f      	ldr	r2, [pc, #252]	; (8009290 <HAL_RTC_GetTime+0x1a8>)
 8009192:	fba2 2303 	umull	r2, r3, r2, r3
 8009196:	091b      	lsrs	r3, r3, #4
 8009198:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800919a:	6939      	ldr	r1, [r7, #16]
 800919c:	4b3c      	ldr	r3, [pc, #240]	; (8009290 <HAL_RTC_GetTime+0x1a8>)
 800919e:	fba3 2301 	umull	r2, r3, r3, r1
 80091a2:	091a      	lsrs	r2, r3, #4
 80091a4:	4613      	mov	r3, r2
 80091a6:	005b      	lsls	r3, r3, #1
 80091a8:	4413      	add	r3, r2
 80091aa:	00db      	lsls	r3, r3, #3
 80091ac:	1aca      	subs	r2, r1, r3
 80091ae:	b2d2      	uxtb	r2, r2
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f000 f9a9 	bl	800950c <RTC_ReadAlarmCounter>
 80091ba:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c2:	d008      	beq.n	80091d6 <HAL_RTC_GetTime+0xee>
 80091c4:	69fa      	ldr	r2, [r7, #28]
 80091c6:	69bb      	ldr	r3, [r7, #24]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d904      	bls.n	80091d6 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80091cc:	69fa      	ldr	r2, [r7, #28]
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	61fb      	str	r3, [r7, #28]
 80091d4:	e002      	b.n	80091dc <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80091d6:	f04f 33ff 	mov.w	r3, #4294967295
 80091da:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	4a2d      	ldr	r2, [pc, #180]	; (8009294 <HAL_RTC_GetTime+0x1ac>)
 80091e0:	fb02 f303 	mul.w	r3, r2, r3
 80091e4:	69ba      	ldr	r2, [r7, #24]
 80091e6:	1ad3      	subs	r3, r2, r3
 80091e8:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80091ea:	69b9      	ldr	r1, [r7, #24]
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f000 f966 	bl	80094be <RTC_WriteTimeCounter>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d001      	beq.n	80091fc <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	e041      	b.n	8009280 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009202:	d00c      	beq.n	800921e <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8009204:	69fa      	ldr	r2, [r7, #28]
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	4413      	add	r3, r2
 800920a:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800920c:	69f9      	ldr	r1, [r7, #28]
 800920e:	68f8      	ldr	r0, [r7, #12]
 8009210:	f000 f995 	bl	800953e <RTC_WriteAlarmCounter>
 8009214:	4603      	mov	r3, r0
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00a      	beq.n	8009230 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	e030      	b.n	8009280 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800921e:	69f9      	ldr	r1, [r7, #28]
 8009220:	68f8      	ldr	r0, [r7, #12]
 8009222:	f000 f98c 	bl	800953e <RTC_WriteAlarmCounter>
 8009226:	4603      	mov	r3, r0
 8009228:	2b00      	cmp	r3, #0
 800922a:	d001      	beq.n	8009230 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800922c:	2301      	movs	r3, #1
 800922e:	e027      	b.n	8009280 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8009230:	6979      	ldr	r1, [r7, #20]
 8009232:	68f8      	ldr	r0, [r7, #12]
 8009234:	f000 fa34 	bl	80096a0 <RTC_DateUpdate>
 8009238:	e003      	b.n	8009242 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	b2da      	uxtb	r2, r3
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d01a      	beq.n	800927e <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	4618      	mov	r0, r3
 800924e:	f000 f9ed 	bl	800962c <RTC_ByteToBcd2>
 8009252:	4603      	mov	r3, r0
 8009254:	461a      	mov	r2, r3
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	785b      	ldrb	r3, [r3, #1]
 800925e:	4618      	mov	r0, r3
 8009260:	f000 f9e4 	bl	800962c <RTC_ByteToBcd2>
 8009264:	4603      	mov	r3, r0
 8009266:	461a      	mov	r2, r3
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	789b      	ldrb	r3, [r3, #2]
 8009270:	4618      	mov	r0, r3
 8009272:	f000 f9db 	bl	800962c <RTC_ByteToBcd2>
 8009276:	4603      	mov	r3, r0
 8009278:	461a      	mov	r2, r3
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3720      	adds	r7, #32
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	91a2b3c5 	.word	0x91a2b3c5
 800928c:	88888889 	.word	0x88888889
 8009290:	aaaaaaab 	.word	0xaaaaaaab
 8009294:	00015180 	.word	0x00015180

08009298 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b088      	sub	sp, #32
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80092a4:	2300      	movs	r3, #0
 80092a6:	61fb      	str	r3, [r7, #28]
 80092a8:	2300      	movs	r3, #0
 80092aa:	61bb      	str	r3, [r7, #24]
 80092ac:	2300      	movs	r3, #0
 80092ae:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d002      	beq.n	80092bc <HAL_RTC_SetDate+0x24>
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d101      	bne.n	80092c0 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80092bc:	2301      	movs	r3, #1
 80092be:	e097      	b.n	80093f0 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	7c1b      	ldrb	r3, [r3, #16]
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d101      	bne.n	80092cc <HAL_RTC_SetDate+0x34>
 80092c8:	2302      	movs	r3, #2
 80092ca:	e091      	b.n	80093f0 <HAL_RTC_SetDate+0x158>
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2201      	movs	r2, #1
 80092d0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2202      	movs	r2, #2
 80092d6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d10c      	bne.n	80092f8 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	78da      	ldrb	r2, [r3, #3]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	785a      	ldrb	r2, [r3, #1]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	789a      	ldrb	r2, [r3, #2]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	739a      	strb	r2, [r3, #14]
 80092f6:	e01a      	b.n	800932e <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	78db      	ldrb	r3, [r3, #3]
 80092fc:	4618      	mov	r0, r3
 80092fe:	f000 f9b2 	bl	8009666 <RTC_Bcd2ToByte>
 8009302:	4603      	mov	r3, r0
 8009304:	461a      	mov	r2, r3
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	785b      	ldrb	r3, [r3, #1]
 800930e:	4618      	mov	r0, r3
 8009310:	f000 f9a9 	bl	8009666 <RTC_Bcd2ToByte>
 8009314:	4603      	mov	r3, r0
 8009316:	461a      	mov	r2, r3
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	789b      	ldrb	r3, [r3, #2]
 8009320:	4618      	mov	r0, r3
 8009322:	f000 f9a0 	bl	8009666 <RTC_Bcd2ToByte>
 8009326:	4603      	mov	r3, r0
 8009328:	461a      	mov	r2, r3
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	7bdb      	ldrb	r3, [r3, #15]
 8009332:	4618      	mov	r0, r3
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	7b59      	ldrb	r1, [r3, #13]
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	7b9b      	ldrb	r3, [r3, #14]
 800933c:	461a      	mov	r2, r3
 800933e:	f000 fa8b 	bl	8009858 <RTC_WeekDayNum>
 8009342:	4603      	mov	r3, r0
 8009344:	461a      	mov	r2, r3
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	7b1a      	ldrb	r2, [r3, #12]
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f000 f883 	bl	800945e <RTC_ReadTimeCounter>
 8009358:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	4a26      	ldr	r2, [pc, #152]	; (80093f8 <HAL_RTC_SetDate+0x160>)
 800935e:	fba2 2303 	umull	r2, r3, r2, r3
 8009362:	0adb      	lsrs	r3, r3, #11
 8009364:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	2b18      	cmp	r3, #24
 800936a:	d93a      	bls.n	80093e2 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	4a23      	ldr	r2, [pc, #140]	; (80093fc <HAL_RTC_SetDate+0x164>)
 8009370:	fba2 2303 	umull	r2, r3, r2, r3
 8009374:	091b      	lsrs	r3, r3, #4
 8009376:	4a22      	ldr	r2, [pc, #136]	; (8009400 <HAL_RTC_SetDate+0x168>)
 8009378:	fb02 f303 	mul.w	r3, r2, r3
 800937c:	69fa      	ldr	r2, [r7, #28]
 800937e:	1ad3      	subs	r3, r2, r3
 8009380:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8009382:	69f9      	ldr	r1, [r7, #28]
 8009384:	68f8      	ldr	r0, [r7, #12]
 8009386:	f000 f89a 	bl	80094be <RTC_WriteTimeCounter>
 800938a:	4603      	mov	r3, r0
 800938c:	2b00      	cmp	r3, #0
 800938e:	d007      	beq.n	80093a0 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2204      	movs	r2, #4
 8009394:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2200      	movs	r2, #0
 800939a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800939c:	2301      	movs	r3, #1
 800939e:	e027      	b.n	80093f0 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	f000 f8b3 	bl	800950c <RTC_ReadAlarmCounter>
 80093a6:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ae:	d018      	beq.n	80093e2 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80093b0:	69ba      	ldr	r2, [r7, #24]
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d214      	bcs.n	80093e2 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80093b8:	69bb      	ldr	r3, [r7, #24]
 80093ba:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80093be:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80093c2:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80093c4:	69b9      	ldr	r1, [r7, #24]
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f000 f8b9 	bl	800953e <RTC_WriteAlarmCounter>
 80093cc:	4603      	mov	r3, r0
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d007      	beq.n	80093e2 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2204      	movs	r2, #4
 80093d6:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2200      	movs	r2, #0
 80093dc:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	e006      	b.n	80093f0 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2201      	movs	r2, #1
 80093e6:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2200      	movs	r2, #0
 80093ec:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3720      	adds	r7, #32
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	91a2b3c5 	.word	0x91a2b3c5
 80093fc:	aaaaaaab 	.word	0xaaaaaaab
 8009400:	00015180 	.word	0x00015180

08009404 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800940c:	2300      	movs	r3, #0
 800940e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d101      	bne.n	800941a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	e01d      	b.n	8009456 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	685a      	ldr	r2, [r3, #4]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f022 0208 	bic.w	r2, r2, #8
 8009428:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800942a:	f7fc f873 	bl	8005514 <HAL_GetTick>
 800942e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8009430:	e009      	b.n	8009446 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8009432:	f7fc f86f 	bl	8005514 <HAL_GetTick>
 8009436:	4602      	mov	r2, r0
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	1ad3      	subs	r3, r2, r3
 800943c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009440:	d901      	bls.n	8009446 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8009442:	2303      	movs	r3, #3
 8009444:	e007      	b.n	8009456 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	f003 0308 	and.w	r3, r3, #8
 8009450:	2b00      	cmp	r3, #0
 8009452:	d0ee      	beq.n	8009432 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3710      	adds	r7, #16
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800945e:	b480      	push	{r7}
 8009460:	b087      	sub	sp, #28
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8009466:	2300      	movs	r3, #0
 8009468:	827b      	strh	r3, [r7, #18]
 800946a:	2300      	movs	r3, #0
 800946c:	823b      	strh	r3, [r7, #16]
 800946e:	2300      	movs	r3, #0
 8009470:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8009472:	2300      	movs	r3, #0
 8009474:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	699b      	ldr	r3, [r3, #24]
 800947c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	69db      	ldr	r3, [r3, #28]
 8009484:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	699b      	ldr	r3, [r3, #24]
 800948c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800948e:	8a7a      	ldrh	r2, [r7, #18]
 8009490:	8a3b      	ldrh	r3, [r7, #16]
 8009492:	429a      	cmp	r2, r3
 8009494:	d008      	beq.n	80094a8 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8009496:	8a3b      	ldrh	r3, [r7, #16]
 8009498:	041a      	lsls	r2, r3, #16
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	69db      	ldr	r3, [r3, #28]
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	4313      	orrs	r3, r2
 80094a4:	617b      	str	r3, [r7, #20]
 80094a6:	e004      	b.n	80094b2 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80094a8:	8a7b      	ldrh	r3, [r7, #18]
 80094aa:	041a      	lsls	r2, r3, #16
 80094ac:	89fb      	ldrh	r3, [r7, #14]
 80094ae:	4313      	orrs	r3, r2
 80094b0:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80094b2:	697b      	ldr	r3, [r7, #20]
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	371c      	adds	r7, #28
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bc80      	pop	{r7}
 80094bc:	4770      	bx	lr

080094be <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80094be:	b580      	push	{r7, lr}
 80094c0:	b084      	sub	sp, #16
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
 80094c6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80094c8:	2300      	movs	r3, #0
 80094ca:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 f85d 	bl	800958c <RTC_EnterInitMode>
 80094d2:	4603      	mov	r3, r0
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d002      	beq.n	80094de <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80094d8:	2301      	movs	r3, #1
 80094da:	73fb      	strb	r3, [r7, #15]
 80094dc:	e011      	b.n	8009502 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	683a      	ldr	r2, [r7, #0]
 80094e4:	0c12      	lsrs	r2, r2, #16
 80094e6:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	683a      	ldr	r2, [r7, #0]
 80094ee:	b292      	uxth	r2, r2
 80094f0:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 f872 	bl	80095dc <RTC_ExitInitMode>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d001      	beq.n	8009502 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80094fe:	2301      	movs	r3, #1
 8009500:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009502:	7bfb      	ldrb	r3, [r7, #15]
}
 8009504:	4618      	mov	r0, r3
 8009506:	3710      	adds	r7, #16
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8009514:	2300      	movs	r3, #0
 8009516:	81fb      	strh	r3, [r7, #14]
 8009518:	2300      	movs	r3, #0
 800951a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	6a1b      	ldr	r3, [r3, #32]
 8009522:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800952c:	89fb      	ldrh	r3, [r7, #14]
 800952e:	041a      	lsls	r2, r3, #16
 8009530:	89bb      	ldrh	r3, [r7, #12]
 8009532:	4313      	orrs	r3, r2
}
 8009534:	4618      	mov	r0, r3
 8009536:	3714      	adds	r7, #20
 8009538:	46bd      	mov	sp, r7
 800953a:	bc80      	pop	{r7}
 800953c:	4770      	bx	lr

0800953e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800953e:	b580      	push	{r7, lr}
 8009540:	b084      	sub	sp, #16
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
 8009546:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009548:	2300      	movs	r3, #0
 800954a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 f81d 	bl	800958c <RTC_EnterInitMode>
 8009552:	4603      	mov	r3, r0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d002      	beq.n	800955e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8009558:	2301      	movs	r3, #1
 800955a:	73fb      	strb	r3, [r7, #15]
 800955c:	e011      	b.n	8009582 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	683a      	ldr	r2, [r7, #0]
 8009564:	0c12      	lsrs	r2, r2, #16
 8009566:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	683a      	ldr	r2, [r7, #0]
 800956e:	b292      	uxth	r2, r2
 8009570:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 f832 	bl	80095dc <RTC_ExitInitMode>
 8009578:	4603      	mov	r3, r0
 800957a:	2b00      	cmp	r3, #0
 800957c:	d001      	beq.n	8009582 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800957e:	2301      	movs	r3, #1
 8009580:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009582:	7bfb      	ldrb	r3, [r7, #15]
}
 8009584:	4618      	mov	r0, r3
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009594:	2300      	movs	r3, #0
 8009596:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8009598:	f7fb ffbc 	bl	8005514 <HAL_GetTick>
 800959c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800959e:	e009      	b.n	80095b4 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80095a0:	f7fb ffb8 	bl	8005514 <HAL_GetTick>
 80095a4:	4602      	mov	r2, r0
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	1ad3      	subs	r3, r2, r3
 80095aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095ae:	d901      	bls.n	80095b4 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80095b0:	2303      	movs	r3, #3
 80095b2:	e00f      	b.n	80095d4 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	f003 0320 	and.w	r3, r3, #32
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d0ee      	beq.n	80095a0 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	685a      	ldr	r2, [r3, #4]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f042 0210 	orr.w	r2, r2, #16
 80095d0:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80095d2:	2300      	movs	r3, #0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3710      	adds	r7, #16
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80095e4:	2300      	movs	r3, #0
 80095e6:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	685a      	ldr	r2, [r3, #4]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f022 0210 	bic.w	r2, r2, #16
 80095f6:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80095f8:	f7fb ff8c 	bl	8005514 <HAL_GetTick>
 80095fc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80095fe:	e009      	b.n	8009614 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8009600:	f7fb ff88 	bl	8005514 <HAL_GetTick>
 8009604:	4602      	mov	r2, r0
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	1ad3      	subs	r3, r2, r3
 800960a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800960e:	d901      	bls.n	8009614 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8009610:	2303      	movs	r3, #3
 8009612:	e007      	b.n	8009624 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	f003 0320 	and.w	r3, r3, #32
 800961e:	2b00      	cmp	r3, #0
 8009620:	d0ee      	beq.n	8009600 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8009622:	2300      	movs	r3, #0
}
 8009624:	4618      	mov	r0, r3
 8009626:	3710      	adds	r7, #16
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800962c:	b480      	push	{r7}
 800962e:	b085      	sub	sp, #20
 8009630:	af00      	add	r7, sp, #0
 8009632:	4603      	mov	r3, r0
 8009634:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009636:	2300      	movs	r3, #0
 8009638:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800963a:	e005      	b.n	8009648 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	3301      	adds	r3, #1
 8009640:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8009642:	79fb      	ldrb	r3, [r7, #7]
 8009644:	3b0a      	subs	r3, #10
 8009646:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8009648:	79fb      	ldrb	r3, [r7, #7]
 800964a:	2b09      	cmp	r3, #9
 800964c:	d8f6      	bhi.n	800963c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	b2db      	uxtb	r3, r3
 8009652:	011b      	lsls	r3, r3, #4
 8009654:	b2da      	uxtb	r2, r3
 8009656:	79fb      	ldrb	r3, [r7, #7]
 8009658:	4313      	orrs	r3, r2
 800965a:	b2db      	uxtb	r3, r3
}
 800965c:	4618      	mov	r0, r3
 800965e:	3714      	adds	r7, #20
 8009660:	46bd      	mov	sp, r7
 8009662:	bc80      	pop	{r7}
 8009664:	4770      	bx	lr

08009666 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009666:	b480      	push	{r7}
 8009668:	b085      	sub	sp, #20
 800966a:	af00      	add	r7, sp, #0
 800966c:	4603      	mov	r3, r0
 800966e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8009670:	2300      	movs	r3, #0
 8009672:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8009674:	79fb      	ldrb	r3, [r7, #7]
 8009676:	091b      	lsrs	r3, r3, #4
 8009678:	b2db      	uxtb	r3, r3
 800967a:	461a      	mov	r2, r3
 800967c:	4613      	mov	r3, r2
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	4413      	add	r3, r2
 8009682:	005b      	lsls	r3, r3, #1
 8009684:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8009686:	79fb      	ldrb	r3, [r7, #7]
 8009688:	f003 030f 	and.w	r3, r3, #15
 800968c:	b2da      	uxtb	r2, r3
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	b2db      	uxtb	r3, r3
 8009692:	4413      	add	r3, r2
 8009694:	b2db      	uxtb	r3, r3
}
 8009696:	4618      	mov	r0, r3
 8009698:	3714      	adds	r7, #20
 800969a:	46bd      	mov	sp, r7
 800969c:	bc80      	pop	{r7}
 800969e:	4770      	bx	lr

080096a0 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b086      	sub	sp, #24
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80096aa:	2300      	movs	r3, #0
 80096ac:	617b      	str	r3, [r7, #20]
 80096ae:	2300      	movs	r3, #0
 80096b0:	613b      	str	r3, [r7, #16]
 80096b2:	2300      	movs	r3, #0
 80096b4:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80096b6:	2300      	movs	r3, #0
 80096b8:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	7bdb      	ldrb	r3, [r3, #15]
 80096be:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	7b5b      	ldrb	r3, [r3, #13]
 80096c4:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	7b9b      	ldrb	r3, [r3, #14]
 80096ca:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80096cc:	2300      	movs	r3, #0
 80096ce:	60bb      	str	r3, [r7, #8]
 80096d0:	e06f      	b.n	80097b2 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d011      	beq.n	80096fc <RTC_DateUpdate+0x5c>
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	2b03      	cmp	r3, #3
 80096dc:	d00e      	beq.n	80096fc <RTC_DateUpdate+0x5c>
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	2b05      	cmp	r3, #5
 80096e2:	d00b      	beq.n	80096fc <RTC_DateUpdate+0x5c>
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	2b07      	cmp	r3, #7
 80096e8:	d008      	beq.n	80096fc <RTC_DateUpdate+0x5c>
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	2b08      	cmp	r3, #8
 80096ee:	d005      	beq.n	80096fc <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	2b0a      	cmp	r3, #10
 80096f4:	d002      	beq.n	80096fc <RTC_DateUpdate+0x5c>
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	2b0c      	cmp	r3, #12
 80096fa:	d117      	bne.n	800972c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2b1e      	cmp	r3, #30
 8009700:	d803      	bhi.n	800970a <RTC_DateUpdate+0x6a>
      {
        day++;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	3301      	adds	r3, #1
 8009706:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8009708:	e050      	b.n	80097ac <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	2b0c      	cmp	r3, #12
 800970e:	d005      	beq.n	800971c <RTC_DateUpdate+0x7c>
        {
          month++;
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	3301      	adds	r3, #1
 8009714:	613b      	str	r3, [r7, #16]
          day = 1U;
 8009716:	2301      	movs	r3, #1
 8009718:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800971a:	e047      	b.n	80097ac <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800971c:	2301      	movs	r3, #1
 800971e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8009720:	2301      	movs	r3, #1
 8009722:	60fb      	str	r3, [r7, #12]
          year++;
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	3301      	adds	r3, #1
 8009728:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800972a:	e03f      	b.n	80097ac <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	2b04      	cmp	r3, #4
 8009730:	d008      	beq.n	8009744 <RTC_DateUpdate+0xa4>
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	2b06      	cmp	r3, #6
 8009736:	d005      	beq.n	8009744 <RTC_DateUpdate+0xa4>
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	2b09      	cmp	r3, #9
 800973c:	d002      	beq.n	8009744 <RTC_DateUpdate+0xa4>
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	2b0b      	cmp	r3, #11
 8009742:	d10c      	bne.n	800975e <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2b1d      	cmp	r3, #29
 8009748:	d803      	bhi.n	8009752 <RTC_DateUpdate+0xb2>
      {
        day++;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	3301      	adds	r3, #1
 800974e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8009750:	e02c      	b.n	80097ac <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	3301      	adds	r3, #1
 8009756:	613b      	str	r3, [r7, #16]
        day = 1U;
 8009758:	2301      	movs	r3, #1
 800975a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800975c:	e026      	b.n	80097ac <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	2b02      	cmp	r3, #2
 8009762:	d123      	bne.n	80097ac <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2b1b      	cmp	r3, #27
 8009768:	d803      	bhi.n	8009772 <RTC_DateUpdate+0xd2>
      {
        day++;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	3301      	adds	r3, #1
 800976e:	60fb      	str	r3, [r7, #12]
 8009770:	e01c      	b.n	80097ac <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2b1c      	cmp	r3, #28
 8009776:	d111      	bne.n	800979c <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	b29b      	uxth	r3, r3
 800977c:	4618      	mov	r0, r3
 800977e:	f000 f839 	bl	80097f4 <RTC_IsLeapYear>
 8009782:	4603      	mov	r3, r0
 8009784:	2b00      	cmp	r3, #0
 8009786:	d003      	beq.n	8009790 <RTC_DateUpdate+0xf0>
        {
          day++;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	3301      	adds	r3, #1
 800978c:	60fb      	str	r3, [r7, #12]
 800978e:	e00d      	b.n	80097ac <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	3301      	adds	r3, #1
 8009794:	613b      	str	r3, [r7, #16]
          day = 1U;
 8009796:	2301      	movs	r3, #1
 8009798:	60fb      	str	r3, [r7, #12]
 800979a:	e007      	b.n	80097ac <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2b1d      	cmp	r3, #29
 80097a0:	d104      	bne.n	80097ac <RTC_DateUpdate+0x10c>
      {
        month++;
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	3301      	adds	r3, #1
 80097a6:	613b      	str	r3, [r7, #16]
        day = 1U;
 80097a8:	2301      	movs	r3, #1
 80097aa:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	3301      	adds	r3, #1
 80097b0:	60bb      	str	r3, [r7, #8]
 80097b2:	68ba      	ldr	r2, [r7, #8]
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d38b      	bcc.n	80096d2 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	b2da      	uxtb	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	b2da      	uxtb	r2, r3
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	b2da      	uxtb	r2, r3
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	68fa      	ldr	r2, [r7, #12]
 80097d8:	b2d2      	uxtb	r2, r2
 80097da:	4619      	mov	r1, r3
 80097dc:	6978      	ldr	r0, [r7, #20]
 80097de:	f000 f83b 	bl	8009858 <RTC_WeekDayNum>
 80097e2:	4603      	mov	r3, r0
 80097e4:	461a      	mov	r2, r3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	731a      	strb	r2, [r3, #12]
}
 80097ea:	bf00      	nop
 80097ec:	3718      	adds	r7, #24
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
	...

080097f4 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	4603      	mov	r3, r0
 80097fc:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80097fe:	88fb      	ldrh	r3, [r7, #6]
 8009800:	f003 0303 	and.w	r3, r3, #3
 8009804:	b29b      	uxth	r3, r3
 8009806:	2b00      	cmp	r3, #0
 8009808:	d001      	beq.n	800980e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800980a:	2300      	movs	r3, #0
 800980c:	e01d      	b.n	800984a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800980e:	88fb      	ldrh	r3, [r7, #6]
 8009810:	4a10      	ldr	r2, [pc, #64]	; (8009854 <RTC_IsLeapYear+0x60>)
 8009812:	fba2 1203 	umull	r1, r2, r2, r3
 8009816:	0952      	lsrs	r2, r2, #5
 8009818:	2164      	movs	r1, #100	; 0x64
 800981a:	fb01 f202 	mul.w	r2, r1, r2
 800981e:	1a9b      	subs	r3, r3, r2
 8009820:	b29b      	uxth	r3, r3
 8009822:	2b00      	cmp	r3, #0
 8009824:	d001      	beq.n	800982a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8009826:	2301      	movs	r3, #1
 8009828:	e00f      	b.n	800984a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800982a:	88fb      	ldrh	r3, [r7, #6]
 800982c:	4a09      	ldr	r2, [pc, #36]	; (8009854 <RTC_IsLeapYear+0x60>)
 800982e:	fba2 1203 	umull	r1, r2, r2, r3
 8009832:	09d2      	lsrs	r2, r2, #7
 8009834:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009838:	fb01 f202 	mul.w	r2, r1, r2
 800983c:	1a9b      	subs	r3, r3, r2
 800983e:	b29b      	uxth	r3, r3
 8009840:	2b00      	cmp	r3, #0
 8009842:	d101      	bne.n	8009848 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8009844:	2301      	movs	r3, #1
 8009846:	e000      	b.n	800984a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8009848:	2300      	movs	r3, #0
  }
}
 800984a:	4618      	mov	r0, r3
 800984c:	370c      	adds	r7, #12
 800984e:	46bd      	mov	sp, r7
 8009850:	bc80      	pop	{r7}
 8009852:	4770      	bx	lr
 8009854:	51eb851f 	.word	0x51eb851f

08009858 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8009858:	b480      	push	{r7}
 800985a:	b085      	sub	sp, #20
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	460b      	mov	r3, r1
 8009862:	70fb      	strb	r3, [r7, #3]
 8009864:	4613      	mov	r3, r2
 8009866:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8009868:	2300      	movs	r3, #0
 800986a:	60bb      	str	r3, [r7, #8]
 800986c:	2300      	movs	r3, #0
 800986e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8009876:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8009878:	78fb      	ldrb	r3, [r7, #3]
 800987a:	2b02      	cmp	r3, #2
 800987c:	d82d      	bhi.n	80098da <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800987e:	78fa      	ldrb	r2, [r7, #3]
 8009880:	4613      	mov	r3, r2
 8009882:	005b      	lsls	r3, r3, #1
 8009884:	4413      	add	r3, r2
 8009886:	00db      	lsls	r3, r3, #3
 8009888:	1a9b      	subs	r3, r3, r2
 800988a:	4a2c      	ldr	r2, [pc, #176]	; (800993c <RTC_WeekDayNum+0xe4>)
 800988c:	fba2 2303 	umull	r2, r3, r2, r3
 8009890:	085a      	lsrs	r2, r3, #1
 8009892:	78bb      	ldrb	r3, [r7, #2]
 8009894:	441a      	add	r2, r3
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	441a      	add	r2, r3
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	3b01      	subs	r3, #1
 800989e:	089b      	lsrs	r3, r3, #2
 80098a0:	441a      	add	r2, r3
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	3b01      	subs	r3, #1
 80098a6:	4926      	ldr	r1, [pc, #152]	; (8009940 <RTC_WeekDayNum+0xe8>)
 80098a8:	fba1 1303 	umull	r1, r3, r1, r3
 80098ac:	095b      	lsrs	r3, r3, #5
 80098ae:	1ad2      	subs	r2, r2, r3
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	3b01      	subs	r3, #1
 80098b4:	4922      	ldr	r1, [pc, #136]	; (8009940 <RTC_WeekDayNum+0xe8>)
 80098b6:	fba1 1303 	umull	r1, r3, r1, r3
 80098ba:	09db      	lsrs	r3, r3, #7
 80098bc:	4413      	add	r3, r2
 80098be:	1d1a      	adds	r2, r3, #4
 80098c0:	4b20      	ldr	r3, [pc, #128]	; (8009944 <RTC_WeekDayNum+0xec>)
 80098c2:	fba3 1302 	umull	r1, r3, r3, r2
 80098c6:	1ad1      	subs	r1, r2, r3
 80098c8:	0849      	lsrs	r1, r1, #1
 80098ca:	440b      	add	r3, r1
 80098cc:	0899      	lsrs	r1, r3, #2
 80098ce:	460b      	mov	r3, r1
 80098d0:	00db      	lsls	r3, r3, #3
 80098d2:	1a5b      	subs	r3, r3, r1
 80098d4:	1ad3      	subs	r3, r2, r3
 80098d6:	60fb      	str	r3, [r7, #12]
 80098d8:	e029      	b.n	800992e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80098da:	78fa      	ldrb	r2, [r7, #3]
 80098dc:	4613      	mov	r3, r2
 80098de:	005b      	lsls	r3, r3, #1
 80098e0:	4413      	add	r3, r2
 80098e2:	00db      	lsls	r3, r3, #3
 80098e4:	1a9b      	subs	r3, r3, r2
 80098e6:	4a15      	ldr	r2, [pc, #84]	; (800993c <RTC_WeekDayNum+0xe4>)
 80098e8:	fba2 2303 	umull	r2, r3, r2, r3
 80098ec:	085a      	lsrs	r2, r3, #1
 80098ee:	78bb      	ldrb	r3, [r7, #2]
 80098f0:	441a      	add	r2, r3
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	441a      	add	r2, r3
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	089b      	lsrs	r3, r3, #2
 80098fa:	441a      	add	r2, r3
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	4910      	ldr	r1, [pc, #64]	; (8009940 <RTC_WeekDayNum+0xe8>)
 8009900:	fba1 1303 	umull	r1, r3, r1, r3
 8009904:	095b      	lsrs	r3, r3, #5
 8009906:	1ad2      	subs	r2, r2, r3
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	490d      	ldr	r1, [pc, #52]	; (8009940 <RTC_WeekDayNum+0xe8>)
 800990c:	fba1 1303 	umull	r1, r3, r1, r3
 8009910:	09db      	lsrs	r3, r3, #7
 8009912:	4413      	add	r3, r2
 8009914:	1c9a      	adds	r2, r3, #2
 8009916:	4b0b      	ldr	r3, [pc, #44]	; (8009944 <RTC_WeekDayNum+0xec>)
 8009918:	fba3 1302 	umull	r1, r3, r3, r2
 800991c:	1ad1      	subs	r1, r2, r3
 800991e:	0849      	lsrs	r1, r1, #1
 8009920:	440b      	add	r3, r1
 8009922:	0899      	lsrs	r1, r3, #2
 8009924:	460b      	mov	r3, r1
 8009926:	00db      	lsls	r3, r3, #3
 8009928:	1a5b      	subs	r3, r3, r1
 800992a:	1ad3      	subs	r3, r2, r3
 800992c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	b2db      	uxtb	r3, r3
}
 8009932:	4618      	mov	r0, r3
 8009934:	3714      	adds	r7, #20
 8009936:	46bd      	mov	sp, r7
 8009938:	bc80      	pop	{r7}
 800993a:	4770      	bx	lr
 800993c:	38e38e39 	.word	0x38e38e39
 8009940:	51eb851f 	.word	0x51eb851f
 8009944:	24924925 	.word	0x24924925

08009948 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d101      	bne.n	800995a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	e041      	b.n	80099de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009960:	b2db      	uxtb	r3, r3
 8009962:	2b00      	cmp	r3, #0
 8009964:	d106      	bne.n	8009974 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2200      	movs	r2, #0
 800996a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 f839 	bl	80099e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2202      	movs	r2, #2
 8009978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	3304      	adds	r3, #4
 8009984:	4619      	mov	r1, r3
 8009986:	4610      	mov	r0, r2
 8009988:	f000 f9bc 	bl	8009d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2201      	movs	r2, #1
 80099a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2201      	movs	r2, #1
 80099a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2201      	movs	r2, #1
 80099b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3708      	adds	r7, #8
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80099e6:	b480      	push	{r7}
 80099e8:	b083      	sub	sp, #12
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80099ee:	bf00      	nop
 80099f0:	370c      	adds	r7, #12
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bc80      	pop	{r7}
 80099f6:	4770      	bx	lr

080099f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d001      	beq.n	8009a10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e03f      	b.n	8009a90 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2202      	movs	r2, #2
 8009a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	68da      	ldr	r2, [r3, #12]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f042 0201 	orr.w	r2, r2, #1
 8009a26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a1b      	ldr	r2, [pc, #108]	; (8009a9c <HAL_TIM_Base_Start_IT+0xa4>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d013      	beq.n	8009a5a <HAL_TIM_Base_Start_IT+0x62>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a3a:	d00e      	beq.n	8009a5a <HAL_TIM_Base_Start_IT+0x62>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a17      	ldr	r2, [pc, #92]	; (8009aa0 <HAL_TIM_Base_Start_IT+0xa8>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d009      	beq.n	8009a5a <HAL_TIM_Base_Start_IT+0x62>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a16      	ldr	r2, [pc, #88]	; (8009aa4 <HAL_TIM_Base_Start_IT+0xac>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d004      	beq.n	8009a5a <HAL_TIM_Base_Start_IT+0x62>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a14      	ldr	r2, [pc, #80]	; (8009aa8 <HAL_TIM_Base_Start_IT+0xb0>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d111      	bne.n	8009a7e <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	f003 0307 	and.w	r3, r3, #7
 8009a64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2b06      	cmp	r3, #6
 8009a6a:	d010      	beq.n	8009a8e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f042 0201 	orr.w	r2, r2, #1
 8009a7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a7c:	e007      	b.n	8009a8e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f042 0201 	orr.w	r2, r2, #1
 8009a8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009a8e:	2300      	movs	r3, #0
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3714      	adds	r7, #20
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bc80      	pop	{r7}
 8009a98:	4770      	bx	lr
 8009a9a:	bf00      	nop
 8009a9c:	40012c00 	.word	0x40012c00
 8009aa0:	40000400 	.word	0x40000400
 8009aa4:	40000800 	.word	0x40000800
 8009aa8:	40000c00 	.word	0x40000c00

08009aac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	691b      	ldr	r3, [r3, #16]
 8009aba:	f003 0302 	and.w	r3, r3, #2
 8009abe:	2b02      	cmp	r3, #2
 8009ac0:	d122      	bne.n	8009b08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	f003 0302 	and.w	r3, r3, #2
 8009acc:	2b02      	cmp	r3, #2
 8009ace:	d11b      	bne.n	8009b08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f06f 0202 	mvn.w	r2, #2
 8009ad8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2201      	movs	r2, #1
 8009ade:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	699b      	ldr	r3, [r3, #24]
 8009ae6:	f003 0303 	and.w	r3, r3, #3
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d003      	beq.n	8009af6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 f8ed 	bl	8009cce <HAL_TIM_IC_CaptureCallback>
 8009af4:	e005      	b.n	8009b02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 f8e0 	bl	8009cbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 f8ef 	bl	8009ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	691b      	ldr	r3, [r3, #16]
 8009b0e:	f003 0304 	and.w	r3, r3, #4
 8009b12:	2b04      	cmp	r3, #4
 8009b14:	d122      	bne.n	8009b5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	f003 0304 	and.w	r3, r3, #4
 8009b20:	2b04      	cmp	r3, #4
 8009b22:	d11b      	bne.n	8009b5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f06f 0204 	mvn.w	r2, #4
 8009b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2202      	movs	r2, #2
 8009b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	699b      	ldr	r3, [r3, #24]
 8009b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d003      	beq.n	8009b4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 f8c3 	bl	8009cce <HAL_TIM_IC_CaptureCallback>
 8009b48:	e005      	b.n	8009b56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 f8b6 	bl	8009cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 f8c5 	bl	8009ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	691b      	ldr	r3, [r3, #16]
 8009b62:	f003 0308 	and.w	r3, r3, #8
 8009b66:	2b08      	cmp	r3, #8
 8009b68:	d122      	bne.n	8009bb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	68db      	ldr	r3, [r3, #12]
 8009b70:	f003 0308 	and.w	r3, r3, #8
 8009b74:	2b08      	cmp	r3, #8
 8009b76:	d11b      	bne.n	8009bb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f06f 0208 	mvn.w	r2, #8
 8009b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2204      	movs	r2, #4
 8009b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	69db      	ldr	r3, [r3, #28]
 8009b8e:	f003 0303 	and.w	r3, r3, #3
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d003      	beq.n	8009b9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 f899 	bl	8009cce <HAL_TIM_IC_CaptureCallback>
 8009b9c:	e005      	b.n	8009baa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 f88c 	bl	8009cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 f89b 	bl	8009ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2200      	movs	r2, #0
 8009bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	691b      	ldr	r3, [r3, #16]
 8009bb6:	f003 0310 	and.w	r3, r3, #16
 8009bba:	2b10      	cmp	r3, #16
 8009bbc:	d122      	bne.n	8009c04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	f003 0310 	and.w	r3, r3, #16
 8009bc8:	2b10      	cmp	r3, #16
 8009bca:	d11b      	bne.n	8009c04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f06f 0210 	mvn.w	r2, #16
 8009bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2208      	movs	r2, #8
 8009bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	69db      	ldr	r3, [r3, #28]
 8009be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d003      	beq.n	8009bf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 f86f 	bl	8009cce <HAL_TIM_IC_CaptureCallback>
 8009bf0:	e005      	b.n	8009bfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 f862 	bl	8009cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 f871 	bl	8009ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	691b      	ldr	r3, [r3, #16]
 8009c0a:	f003 0301 	and.w	r3, r3, #1
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d10e      	bne.n	8009c30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	f003 0301 	and.w	r3, r3, #1
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d107      	bne.n	8009c30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f06f 0201 	mvn.w	r2, #1
 8009c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f7fa ffd6 	bl	8004bdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	691b      	ldr	r3, [r3, #16]
 8009c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c3a:	2b80      	cmp	r3, #128	; 0x80
 8009c3c:	d10e      	bne.n	8009c5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	68db      	ldr	r3, [r3, #12]
 8009c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c48:	2b80      	cmp	r3, #128	; 0x80
 8009c4a:	d107      	bne.n	8009c5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 f8c9 	bl	8009dee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	691b      	ldr	r3, [r3, #16]
 8009c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c66:	2b40      	cmp	r3, #64	; 0x40
 8009c68:	d10e      	bne.n	8009c88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c74:	2b40      	cmp	r3, #64	; 0x40
 8009c76:	d107      	bne.n	8009c88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 f835 	bl	8009cf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	691b      	ldr	r3, [r3, #16]
 8009c8e:	f003 0320 	and.w	r3, r3, #32
 8009c92:	2b20      	cmp	r3, #32
 8009c94:	d10e      	bne.n	8009cb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	f003 0320 	and.w	r3, r3, #32
 8009ca0:	2b20      	cmp	r3, #32
 8009ca2:	d107      	bne.n	8009cb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f06f 0220 	mvn.w	r2, #32
 8009cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 f894 	bl	8009ddc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009cb4:	bf00      	nop
 8009cb6:	3708      	adds	r7, #8
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b083      	sub	sp, #12
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009cc4:	bf00      	nop
 8009cc6:	370c      	adds	r7, #12
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bc80      	pop	{r7}
 8009ccc:	4770      	bx	lr

08009cce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009cce:	b480      	push	{r7}
 8009cd0:	b083      	sub	sp, #12
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009cd6:	bf00      	nop
 8009cd8:	370c      	adds	r7, #12
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bc80      	pop	{r7}
 8009cde:	4770      	bx	lr

08009ce0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b083      	sub	sp, #12
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009ce8:	bf00      	nop
 8009cea:	370c      	adds	r7, #12
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bc80      	pop	{r7}
 8009cf0:	4770      	bx	lr

08009cf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009cf2:	b480      	push	{r7}
 8009cf4:	b083      	sub	sp, #12
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009cfa:	bf00      	nop
 8009cfc:	370c      	adds	r7, #12
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bc80      	pop	{r7}
 8009d02:	4770      	bx	lr

08009d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b085      	sub	sp, #20
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4a2d      	ldr	r2, [pc, #180]	; (8009dcc <TIM_Base_SetConfig+0xc8>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d00f      	beq.n	8009d3c <TIM_Base_SetConfig+0x38>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d22:	d00b      	beq.n	8009d3c <TIM_Base_SetConfig+0x38>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a2a      	ldr	r2, [pc, #168]	; (8009dd0 <TIM_Base_SetConfig+0xcc>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d007      	beq.n	8009d3c <TIM_Base_SetConfig+0x38>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4a29      	ldr	r2, [pc, #164]	; (8009dd4 <TIM_Base_SetConfig+0xd0>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d003      	beq.n	8009d3c <TIM_Base_SetConfig+0x38>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	4a28      	ldr	r2, [pc, #160]	; (8009dd8 <TIM_Base_SetConfig+0xd4>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d108      	bne.n	8009d4e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	68fa      	ldr	r2, [r7, #12]
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4a1e      	ldr	r2, [pc, #120]	; (8009dcc <TIM_Base_SetConfig+0xc8>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d00f      	beq.n	8009d76 <TIM_Base_SetConfig+0x72>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d5c:	d00b      	beq.n	8009d76 <TIM_Base_SetConfig+0x72>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	4a1b      	ldr	r2, [pc, #108]	; (8009dd0 <TIM_Base_SetConfig+0xcc>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d007      	beq.n	8009d76 <TIM_Base_SetConfig+0x72>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4a1a      	ldr	r2, [pc, #104]	; (8009dd4 <TIM_Base_SetConfig+0xd0>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d003      	beq.n	8009d76 <TIM_Base_SetConfig+0x72>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4a19      	ldr	r2, [pc, #100]	; (8009dd8 <TIM_Base_SetConfig+0xd4>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d108      	bne.n	8009d88 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	68db      	ldr	r3, [r3, #12]
 8009d82:	68fa      	ldr	r2, [r7, #12]
 8009d84:	4313      	orrs	r3, r2
 8009d86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	695b      	ldr	r3, [r3, #20]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	689a      	ldr	r2, [r3, #8]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	4a07      	ldr	r2, [pc, #28]	; (8009dcc <TIM_Base_SetConfig+0xc8>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d103      	bne.n	8009dbc <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	691a      	ldr	r2, [r3, #16]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	615a      	str	r2, [r3, #20]
}
 8009dc2:	bf00      	nop
 8009dc4:	3714      	adds	r7, #20
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bc80      	pop	{r7}
 8009dca:	4770      	bx	lr
 8009dcc:	40012c00 	.word	0x40012c00
 8009dd0:	40000400 	.word	0x40000400
 8009dd4:	40000800 	.word	0x40000800
 8009dd8:	40000c00 	.word	0x40000c00

08009ddc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009de4:	bf00      	nop
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bc80      	pop	{r7}
 8009dec:	4770      	bx	lr

08009dee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009dee:	b480      	push	{r7}
 8009df0:	b083      	sub	sp, #12
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009df6:	bf00      	nop
 8009df8:	370c      	adds	r7, #12
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bc80      	pop	{r7}
 8009dfe:	4770      	bx	lr

08009e00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d101      	bne.n	8009e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e03f      	b.n	8009e92 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d106      	bne.n	8009e2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f7fb f926 	bl	8005078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2224      	movs	r2, #36	; 0x24
 8009e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	68da      	ldr	r2, [r3, #12]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009e42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 fe23 	bl	800aa90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	691a      	ldr	r2, [r3, #16]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009e58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	695a      	ldr	r2, [r3, #20]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009e68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	68da      	ldr	r2, [r3, #12]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009e78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2220      	movs	r2, #32
 8009e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2220      	movs	r2, #32
 8009e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009e90:	2300      	movs	r3, #0
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3708      	adds	r7, #8
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}

08009e9a <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b082      	sub	sp, #8
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d101      	bne.n	8009eac <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	e021      	b.n	8009ef0 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2224      	movs	r2, #36	; 0x24
 8009eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	68da      	ldr	r2, [r3, #12]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009ec2:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f7fb f967 	bl	8005198 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3708      	adds	r7, #8
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b08a      	sub	sp, #40	; 0x28
 8009efc:	af02      	add	r7, sp, #8
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	60b9      	str	r1, [r7, #8]
 8009f02:	603b      	str	r3, [r7, #0]
 8009f04:	4613      	mov	r3, r2
 8009f06:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	2b20      	cmp	r3, #32
 8009f16:	d17c      	bne.n	800a012 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d002      	beq.n	8009f24 <HAL_UART_Transmit+0x2c>
 8009f1e:	88fb      	ldrh	r3, [r7, #6]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d101      	bne.n	8009f28 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009f24:	2301      	movs	r3, #1
 8009f26:	e075      	b.n	800a014 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d101      	bne.n	8009f36 <HAL_UART_Transmit+0x3e>
 8009f32:	2302      	movs	r3, #2
 8009f34:	e06e      	b.n	800a014 <HAL_UART_Transmit+0x11c>
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2200      	movs	r2, #0
 8009f42:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2221      	movs	r2, #33	; 0x21
 8009f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009f4c:	f7fb fae2 	bl	8005514 <HAL_GetTick>
 8009f50:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	88fa      	ldrh	r2, [r7, #6]
 8009f56:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	88fa      	ldrh	r2, [r7, #6]
 8009f5c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f66:	d108      	bne.n	8009f7a <HAL_UART_Transmit+0x82>
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	691b      	ldr	r3, [r3, #16]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d104      	bne.n	8009f7a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009f70:	2300      	movs	r3, #0
 8009f72:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	61bb      	str	r3, [r7, #24]
 8009f78:	e003      	b.n	8009f82 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2200      	movs	r2, #0
 8009f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009f8a:	e02a      	b.n	8009fe2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	9300      	str	r3, [sp, #0]
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	2200      	movs	r2, #0
 8009f94:	2180      	movs	r1, #128	; 0x80
 8009f96:	68f8      	ldr	r0, [r7, #12]
 8009f98:	f000 fb46 	bl	800a628 <UART_WaitOnFlagUntilTimeout>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d001      	beq.n	8009fa6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009fa2:	2303      	movs	r3, #3
 8009fa4:	e036      	b.n	800a014 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009fa6:	69fb      	ldr	r3, [r7, #28]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d10b      	bne.n	8009fc4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009fac:	69bb      	ldr	r3, [r7, #24]
 8009fae:	881b      	ldrh	r3, [r3, #0]
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009fba:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009fbc:	69bb      	ldr	r3, [r7, #24]
 8009fbe:	3302      	adds	r3, #2
 8009fc0:	61bb      	str	r3, [r7, #24]
 8009fc2:	e007      	b.n	8009fd4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009fc4:	69fb      	ldr	r3, [r7, #28]
 8009fc6:	781a      	ldrb	r2, [r3, #0]
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	3b01      	subs	r3, #1
 8009fdc:	b29a      	uxth	r2, r3
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d1cf      	bne.n	8009f8c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	9300      	str	r3, [sp, #0]
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	2140      	movs	r1, #64	; 0x40
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	f000 fb16 	bl	800a628 <UART_WaitOnFlagUntilTimeout>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d001      	beq.n	800a006 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a002:	2303      	movs	r3, #3
 800a004:	e006      	b.n	800a014 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2220      	movs	r2, #32
 800a00a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a00e:	2300      	movs	r3, #0
 800a010:	e000      	b.n	800a014 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a012:	2302      	movs	r3, #2
  }
}
 800a014:	4618      	mov	r0, r3
 800a016:	3720      	adds	r7, #32
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b085      	sub	sp, #20
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	4613      	mov	r3, r2
 800a028:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a030:	b2db      	uxtb	r3, r3
 800a032:	2b20      	cmp	r3, #32
 800a034:	d130      	bne.n	800a098 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d002      	beq.n	800a042 <HAL_UART_Transmit_IT+0x26>
 800a03c:	88fb      	ldrh	r3, [r7, #6]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d101      	bne.n	800a046 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	e029      	b.n	800a09a <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d101      	bne.n	800a054 <HAL_UART_Transmit_IT+0x38>
 800a050:	2302      	movs	r3, #2
 800a052:	e022      	b.n	800a09a <HAL_UART_Transmit_IT+0x7e>
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2201      	movs	r2, #1
 800a058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	68ba      	ldr	r2, [r7, #8]
 800a060:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	88fa      	ldrh	r2, [r7, #6]
 800a066:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	88fa      	ldrh	r2, [r7, #6]
 800a06c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2200      	movs	r2, #0
 800a072:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2221      	movs	r2, #33	; 0x21
 800a078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2200      	movs	r2, #0
 800a080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	68da      	ldr	r2, [r3, #12]
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a092:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800a094:	2300      	movs	r3, #0
 800a096:	e000      	b.n	800a09a <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800a098:	2302      	movs	r3, #2
  }
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3714      	adds	r7, #20
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bc80      	pop	{r7}
 800a0a2:	4770      	bx	lr

0800a0a4 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b086      	sub	sp, #24
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a0b8:	b2db      	uxtb	r3, r3
 800a0ba:	2b20      	cmp	r3, #32
 800a0bc:	d13c      	bne.n	800a138 <HAL_UARTEx_ReceiveToIdle_IT+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d002      	beq.n	800a0ca <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800a0c4:	88fb      	ldrh	r3, [r7, #6]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d101      	bne.n	800a0ce <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e035      	b.n	800a13a <HAL_UARTEx_ReceiveToIdle_IT+0x96>
    }

    __HAL_LOCK(huart);
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d101      	bne.n	800a0dc <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 800a0d8:	2302      	movs	r3, #2
 800a0da:	e02e      	b.n	800a13a <HAL_UARTEx_ReceiveToIdle_IT+0x96>
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800a0ea:	88fb      	ldrh	r3, [r7, #6]
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	68b9      	ldr	r1, [r7, #8]
 800a0f0:	68f8      	ldr	r0, [r7, #12]
 800a0f2:	f000 fae3 	bl	800a6bc <UART_Start_Receive_IT>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a0fa:	7dfb      	ldrb	r3, [r7, #23]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d119      	bne.n	800a134 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a104:	2b01      	cmp	r3, #1
 800a106:	d113      	bne.n	800a130 <HAL_UARTEx_ReceiveToIdle_IT+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a108:	2300      	movs	r3, #0
 800a10a:	613b      	str	r3, [r7, #16]
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	613b      	str	r3, [r7, #16]
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	613b      	str	r3, [r7, #16]
 800a11c:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	68da      	ldr	r2, [r3, #12]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f042 0210 	orr.w	r2, r2, #16
 800a12c:	60da      	str	r2, [r3, #12]
 800a12e:	e001      	b.n	800a134 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 800a134:	7dfb      	ldrb	r3, [r7, #23]
 800a136:	e000      	b.n	800a13a <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  }
  else
  {
    return HAL_BUSY;
 800a138:	2302      	movs	r3, #2
  }
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3718      	adds	r7, #24
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
	...

0800a144 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 800a14c:	2301      	movs	r3, #1
 800a14e:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	68da      	ldr	r2, [r3, #12]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 800a15e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	695a      	ldr	r2, [r3, #20]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f022 0201 	bic.w	r2, r2, #1
 800a16e:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a174:	2b01      	cmp	r3, #1
 800a176:	d107      	bne.n	800a188 <HAL_UART_Abort_IT+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	68da      	ldr	r2, [r3, #12]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f022 0210 	bic.w	r2, r2, #16
 800a186:	60da      	str	r2, [r3, #12]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d00f      	beq.n	800a1b0 <HAL_UART_Abort_IT+0x6c>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	695b      	ldr	r3, [r3, #20]
 800a196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d004      	beq.n	800a1a8 <HAL_UART_Abort_IT+0x64>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1a2:	4a40      	ldr	r2, [pc, #256]	; (800a2a4 <HAL_UART_Abort_IT+0x160>)
 800a1a4:	635a      	str	r2, [r3, #52]	; 0x34
 800a1a6:	e003      	b.n	800a1b0 <HAL_UART_Abort_IT+0x6c>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d00f      	beq.n	800a1d8 <HAL_UART_Abort_IT+0x94>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	695b      	ldr	r3, [r3, #20]
 800a1be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d004      	beq.n	800a1d0 <HAL_UART_Abort_IT+0x8c>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ca:	4a37      	ldr	r2, [pc, #220]	; (800a2a8 <HAL_UART_Abort_IT+0x164>)
 800a1cc:	635a      	str	r2, [r3, #52]	; 0x34
 800a1ce:	e003      	b.n	800a1d8 <HAL_UART_Abort_IT+0x94>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	695b      	ldr	r3, [r3, #20]
 800a1de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d01a      	beq.n	800a21c <HAL_UART_Abort_IT+0xd8>
  {
    /* Disable DMA Tx at UART level */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	695a      	ldr	r2, [r3, #20]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a1f4:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d00e      	beq.n	800a21c <HAL_UART_Abort_IT+0xd8>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a202:	4618      	mov	r0, r3
 800a204:	f7fb fadc 	bl	80057c0 <HAL_DMA_Abort_IT>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d004      	beq.n	800a218 <HAL_UART_Abort_IT+0xd4>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a212:	2200      	movs	r2, #0
 800a214:	635a      	str	r2, [r3, #52]	; 0x34
 800a216:	e001      	b.n	800a21c <HAL_UART_Abort_IT+0xd8>
      }
      else
      {
        AbortCplt = 0x00U;
 800a218:	2300      	movs	r3, #0
 800a21a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	695b      	ldr	r3, [r3, #20]
 800a222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a226:	2b00      	cmp	r3, #0
 800a228:	d01c      	beq.n	800a264 <HAL_UART_Abort_IT+0x120>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	695a      	ldr	r2, [r3, #20]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a238:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d010      	beq.n	800a264 <HAL_UART_Abort_IT+0x120>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a246:	4618      	mov	r0, r3
 800a248:	f7fb faba 	bl	80057c0 <HAL_DMA_Abort_IT>
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d006      	beq.n	800a260 <HAL_UART_Abort_IT+0x11c>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a256:	2200      	movs	r2, #0
 800a258:	635a      	str	r2, [r3, #52]	; 0x34
        AbortCplt = 0x01U;
 800a25a:	2301      	movs	r3, #1
 800a25c:	60fb      	str	r3, [r7, #12]
 800a25e:	e001      	b.n	800a264 <HAL_UART_Abort_IT+0x120>
      }
      else
      {
        AbortCplt = 0x00U;
 800a260:	2300      	movs	r3, #0
 800a262:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2b01      	cmp	r3, #1
 800a268:	d116      	bne.n	800a298 <HAL_UART_Abort_IT+0x154>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2200      	movs	r2, #0
 800a26e:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2200      	movs	r2, #0
 800a27a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2220      	movs	r2, #32
 800a280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2220      	movs	r2, #32
 800a288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 f9b4 	bl	800a600 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	0800a7af 	.word	0x0800a7af
 800a2a8:	0800a80f 	.word	0x0800a80f

0800a2ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b08a      	sub	sp, #40	; 0x28
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	695b      	ldr	r3, [r3, #20]
 800a2ca:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d6:	f003 030f 	and.w	r3, r3, #15
 800a2da:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800a2dc:	69bb      	ldr	r3, [r7, #24]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d10d      	bne.n	800a2fe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e4:	f003 0320 	and.w	r3, r3, #32
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d008      	beq.n	800a2fe <HAL_UART_IRQHandler+0x52>
 800a2ec:	6a3b      	ldr	r3, [r7, #32]
 800a2ee:	f003 0320 	and.w	r3, r3, #32
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d003      	beq.n	800a2fe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 fb20 	bl	800a93c <UART_Receive_IT>
      return;
 800a2fc:	e17b      	b.n	800a5f6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a2fe:	69bb      	ldr	r3, [r7, #24]
 800a300:	2b00      	cmp	r3, #0
 800a302:	f000 80b1 	beq.w	800a468 <HAL_UART_IRQHandler+0x1bc>
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	f003 0301 	and.w	r3, r3, #1
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d105      	bne.n	800a31c <HAL_UART_IRQHandler+0x70>
 800a310:	6a3b      	ldr	r3, [r7, #32]
 800a312:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a316:	2b00      	cmp	r3, #0
 800a318:	f000 80a6 	beq.w	800a468 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31e:	f003 0301 	and.w	r3, r3, #1
 800a322:	2b00      	cmp	r3, #0
 800a324:	d00a      	beq.n	800a33c <HAL_UART_IRQHandler+0x90>
 800a326:	6a3b      	ldr	r3, [r7, #32]
 800a328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d005      	beq.n	800a33c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a334:	f043 0201 	orr.w	r2, r3, #1
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33e:	f003 0304 	and.w	r3, r3, #4
 800a342:	2b00      	cmp	r3, #0
 800a344:	d00a      	beq.n	800a35c <HAL_UART_IRQHandler+0xb0>
 800a346:	69fb      	ldr	r3, [r7, #28]
 800a348:	f003 0301 	and.w	r3, r3, #1
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d005      	beq.n	800a35c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a354:	f043 0202 	orr.w	r2, r3, #2
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35e:	f003 0302 	and.w	r3, r3, #2
 800a362:	2b00      	cmp	r3, #0
 800a364:	d00a      	beq.n	800a37c <HAL_UART_IRQHandler+0xd0>
 800a366:	69fb      	ldr	r3, [r7, #28]
 800a368:	f003 0301 	and.w	r3, r3, #1
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d005      	beq.n	800a37c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a374:	f043 0204 	orr.w	r2, r3, #4
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37e:	f003 0308 	and.w	r3, r3, #8
 800a382:	2b00      	cmp	r3, #0
 800a384:	d00f      	beq.n	800a3a6 <HAL_UART_IRQHandler+0xfa>
 800a386:	6a3b      	ldr	r3, [r7, #32]
 800a388:	f003 0320 	and.w	r3, r3, #32
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d104      	bne.n	800a39a <HAL_UART_IRQHandler+0xee>
 800a390:	69fb      	ldr	r3, [r7, #28]
 800a392:	f003 0301 	and.w	r3, r3, #1
 800a396:	2b00      	cmp	r3, #0
 800a398:	d005      	beq.n	800a3a6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a39e:	f043 0208 	orr.w	r2, r3, #8
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	f000 811e 	beq.w	800a5ec <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b2:	f003 0320 	and.w	r3, r3, #32
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d007      	beq.n	800a3ca <HAL_UART_IRQHandler+0x11e>
 800a3ba:	6a3b      	ldr	r3, [r7, #32]
 800a3bc:	f003 0320 	and.w	r3, r3, #32
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d002      	beq.n	800a3ca <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 fab9 	bl	800a93c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	695b      	ldr	r3, [r3, #20]
 800a3d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	bf14      	ite	ne
 800a3d8:	2301      	movne	r3, #1
 800a3da:	2300      	moveq	r3, #0
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e4:	f003 0308 	and.w	r3, r3, #8
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d102      	bne.n	800a3f2 <HAL_UART_IRQHandler+0x146>
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d031      	beq.n	800a456 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 f99b 	bl	800a72e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	695b      	ldr	r3, [r3, #20]
 800a3fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a402:	2b00      	cmp	r3, #0
 800a404:	d023      	beq.n	800a44e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	695a      	ldr	r2, [r3, #20]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a414:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d013      	beq.n	800a446 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a422:	4a76      	ldr	r2, [pc, #472]	; (800a5fc <HAL_UART_IRQHandler+0x350>)
 800a424:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7fb f9c8 	bl	80057c0 <HAL_DMA_Abort_IT>
 800a430:	4603      	mov	r3, r0
 800a432:	2b00      	cmp	r3, #0
 800a434:	d016      	beq.n	800a464 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a43a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a440:	4610      	mov	r0, r2
 800a442:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a444:	e00e      	b.n	800a464 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f7f8 f998 	bl	800277c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a44c:	e00a      	b.n	800a464 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f7f8 f994 	bl	800277c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a454:	e006      	b.n	800a464 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f7f8 f990 	bl	800277c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2200      	movs	r2, #0
 800a460:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a462:	e0c3      	b.n	800a5ec <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a464:	bf00      	nop
    return;
 800a466:	e0c1      	b.n	800a5ec <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	f040 80a1 	bne.w	800a5b4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800a472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a474:	f003 0310 	and.w	r3, r3, #16
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f000 809b 	beq.w	800a5b4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800a47e:	6a3b      	ldr	r3, [r7, #32]
 800a480:	f003 0310 	and.w	r3, r3, #16
 800a484:	2b00      	cmp	r3, #0
 800a486:	f000 8095 	beq.w	800a5b4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a48a:	2300      	movs	r3, #0
 800a48c:	60fb      	str	r3, [r7, #12]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	60fb      	str	r3, [r7, #12]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	60fb      	str	r3, [r7, #12]
 800a49e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	695b      	ldr	r3, [r3, #20]
 800a4a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d04e      	beq.n	800a54c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800a4b8:	8a3b      	ldrh	r3, [r7, #16]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	f000 8098 	beq.w	800a5f0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a4c4:	8a3a      	ldrh	r2, [r7, #16]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	f080 8092 	bcs.w	800a5f0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	8a3a      	ldrh	r2, [r7, #16]
 800a4d0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4d6:	699b      	ldr	r3, [r3, #24]
 800a4d8:	2b20      	cmp	r3, #32
 800a4da:	d02b      	beq.n	800a534 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	68da      	ldr	r2, [r3, #12]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a4ea:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	695a      	ldr	r2, [r3, #20]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f022 0201 	bic.w	r2, r2, #1
 800a4fa:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	695a      	ldr	r2, [r3, #20]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a50a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2220      	movs	r2, #32
 800a510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2200      	movs	r2, #0
 800a518:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	68da      	ldr	r2, [r3, #12]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f022 0210 	bic.w	r2, r2, #16
 800a528:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a52e:	4618      	mov	r0, r3
 800a530:	f7fb f90b 	bl	800574a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	1ad3      	subs	r3, r2, r3
 800a540:	b29b      	uxth	r3, r3
 800a542:	4619      	mov	r1, r3
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f000 f864 	bl	800a612 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a54a:	e051      	b.n	800a5f0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a554:	b29b      	uxth	r3, r3
 800a556:	1ad3      	subs	r3, r2, r3
 800a558:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a55e:	b29b      	uxth	r3, r3
 800a560:	2b00      	cmp	r3, #0
 800a562:	d047      	beq.n	800a5f4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800a564:	8a7b      	ldrh	r3, [r7, #18]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d044      	beq.n	800a5f4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	68da      	ldr	r2, [r3, #12]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a578:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	695a      	ldr	r2, [r3, #20]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f022 0201 	bic.w	r2, r2, #1
 800a588:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2220      	movs	r2, #32
 800a58e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2200      	movs	r2, #0
 800a596:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	68da      	ldr	r2, [r3, #12]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f022 0210 	bic.w	r2, r2, #16
 800a5a6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a5a8:	8a7b      	ldrh	r3, [r7, #18]
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 f830 	bl	800a612 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a5b2:	e01f      	b.n	800a5f4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d008      	beq.n	800a5d0 <HAL_UART_IRQHandler+0x324>
 800a5be:	6a3b      	ldr	r3, [r7, #32]
 800a5c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d003      	beq.n	800a5d0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f000 f950 	bl	800a86e <UART_Transmit_IT>
    return;
 800a5ce:	e012      	b.n	800a5f6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d00d      	beq.n	800a5f6 <HAL_UART_IRQHandler+0x34a>
 800a5da:	6a3b      	ldr	r3, [r7, #32]
 800a5dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d008      	beq.n	800a5f6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f000 f991 	bl	800a90c <UART_EndTransmit_IT>
    return;
 800a5ea:	e004      	b.n	800a5f6 <HAL_UART_IRQHandler+0x34a>
    return;
 800a5ec:	bf00      	nop
 800a5ee:	e002      	b.n	800a5f6 <HAL_UART_IRQHandler+0x34a>
      return;
 800a5f0:	bf00      	nop
 800a5f2:	e000      	b.n	800a5f6 <HAL_UART_IRQHandler+0x34a>
      return;
 800a5f4:	bf00      	nop
  }
}
 800a5f6:	3728      	adds	r7, #40	; 0x28
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}
 800a5fc:	0800a787 	.word	0x0800a787

0800a600 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a608:	bf00      	nop
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bc80      	pop	{r7}
 800a610:	4770      	bx	lr

0800a612 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a612:	b480      	push	{r7}
 800a614:	b083      	sub	sp, #12
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
 800a61a:	460b      	mov	r3, r1
 800a61c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a61e:	bf00      	nop
 800a620:	370c      	adds	r7, #12
 800a622:	46bd      	mov	sp, r7
 800a624:	bc80      	pop	{r7}
 800a626:	4770      	bx	lr

0800a628 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	603b      	str	r3, [r7, #0]
 800a634:	4613      	mov	r3, r2
 800a636:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a638:	e02c      	b.n	800a694 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a640:	d028      	beq.n	800a694 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d007      	beq.n	800a658 <UART_WaitOnFlagUntilTimeout+0x30>
 800a648:	f7fa ff64 	bl	8005514 <HAL_GetTick>
 800a64c:	4602      	mov	r2, r0
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	1ad3      	subs	r3, r2, r3
 800a652:	69ba      	ldr	r2, [r7, #24]
 800a654:	429a      	cmp	r2, r3
 800a656:	d21d      	bcs.n	800a694 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	68da      	ldr	r2, [r3, #12]
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a666:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	695a      	ldr	r2, [r3, #20]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f022 0201 	bic.w	r2, r2, #1
 800a676:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2220      	movs	r2, #32
 800a67c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2220      	movs	r2, #32
 800a684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a690:	2303      	movs	r3, #3
 800a692:	e00f      	b.n	800a6b4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	4013      	ands	r3, r2
 800a69e:	68ba      	ldr	r2, [r7, #8]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	bf0c      	ite	eq
 800a6a4:	2301      	moveq	r3, #1
 800a6a6:	2300      	movne	r3, #0
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	79fb      	ldrb	r3, [r7, #7]
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d0c3      	beq.n	800a63a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a6b2:	2300      	movs	r3, #0
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3710      	adds	r7, #16
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b085      	sub	sp, #20
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	60b9      	str	r1, [r7, #8]
 800a6c6:	4613      	mov	r3, r2
 800a6c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	68ba      	ldr	r2, [r7, #8]
 800a6ce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	88fa      	ldrh	r2, [r7, #6]
 800a6d4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	88fa      	ldrh	r2, [r7, #6]
 800a6da:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2222      	movs	r2, #34	; 0x22
 800a6e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	68da      	ldr	r2, [r3, #12]
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a700:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	695a      	ldr	r2, [r3, #20]
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f042 0201 	orr.w	r2, r2, #1
 800a710:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	68da      	ldr	r2, [r3, #12]
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f042 0220 	orr.w	r2, r2, #32
 800a720:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a722:	2300      	movs	r3, #0
}
 800a724:	4618      	mov	r0, r3
 800a726:	3714      	adds	r7, #20
 800a728:	46bd      	mov	sp, r7
 800a72a:	bc80      	pop	{r7}
 800a72c:	4770      	bx	lr

0800a72e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a72e:	b480      	push	{r7}
 800a730:	b083      	sub	sp, #12
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	68da      	ldr	r2, [r3, #12]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a744:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	695a      	ldr	r2, [r3, #20]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f022 0201 	bic.w	r2, r2, #1
 800a754:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d107      	bne.n	800a76e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	68da      	ldr	r2, [r3, #12]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f022 0210 	bic.w	r2, r2, #16
 800a76c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2220      	movs	r2, #32
 800a772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2200      	movs	r2, #0
 800a77a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a77c:	bf00      	nop
 800a77e:	370c      	adds	r7, #12
 800a780:	46bd      	mov	sp, r7
 800a782:	bc80      	pop	{r7}
 800a784:	4770      	bx	lr

0800a786 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a786:	b580      	push	{r7, lr}
 800a788:	b084      	sub	sp, #16
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a792:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2200      	movs	r2, #0
 800a798:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2200      	movs	r2, #0
 800a79e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a7a0:	68f8      	ldr	r0, [r7, #12]
 800a7a2:	f7f7 ffeb 	bl	800277c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7a6:	bf00      	nop
 800a7a8:	3710      	adds	r7, #16
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b084      	sub	sp, #16
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ba:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d004      	beq.n	800a7d6 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d117      	bne.n	800a806 <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2220      	movs	r2, #32
 800a7ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2220      	movs	r2, #32
 800a7f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800a7fe:	68f8      	ldr	r0, [r7, #12]
 800a800:	f7ff fefe 	bl	800a600 <HAL_UART_AbortCpltCallback>
 800a804:	e000      	b.n	800a808 <UART_DMATxAbortCallback+0x5a>
      return;
 800a806:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a808:	3710      	adds	r7, #16
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}

0800a80e <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800a80e:	b580      	push	{r7, lr}
 800a810:	b084      	sub	sp, #16
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81a:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a820:	2200      	movs	r2, #0
 800a822:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d004      	beq.n	800a836 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a832:	2b00      	cmp	r3, #0
 800a834:	d117      	bne.n	800a866 <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2200      	movs	r2, #0
 800a83a:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2200      	movs	r2, #0
 800a840:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2200      	movs	r2, #0
 800a846:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2220      	movs	r2, #32
 800a84c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2220      	movs	r2, #32
 800a854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2200      	movs	r2, #0
 800a85c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800a85e:	68f8      	ldr	r0, [r7, #12]
 800a860:	f7ff fece 	bl	800a600 <HAL_UART_AbortCpltCallback>
 800a864:	e000      	b.n	800a868 <UART_DMARxAbortCallback+0x5a>
      return;
 800a866:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a868:	3710      	adds	r7, #16
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}

0800a86e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a86e:	b480      	push	{r7}
 800a870:	b085      	sub	sp, #20
 800a872:	af00      	add	r7, sp, #0
 800a874:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	2b21      	cmp	r3, #33	; 0x21
 800a880:	d13e      	bne.n	800a900 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	689b      	ldr	r3, [r3, #8]
 800a886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a88a:	d114      	bne.n	800a8b6 <UART_Transmit_IT+0x48>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	691b      	ldr	r3, [r3, #16]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d110      	bne.n	800a8b6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6a1b      	ldr	r3, [r3, #32]
 800a898:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	881b      	ldrh	r3, [r3, #0]
 800a89e:	461a      	mov	r2, r3
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a8a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a1b      	ldr	r3, [r3, #32]
 800a8ae:	1c9a      	adds	r2, r3, #2
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	621a      	str	r2, [r3, #32]
 800a8b4:	e008      	b.n	800a8c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6a1b      	ldr	r3, [r3, #32]
 800a8ba:	1c59      	adds	r1, r3, #1
 800a8bc:	687a      	ldr	r2, [r7, #4]
 800a8be:	6211      	str	r1, [r2, #32]
 800a8c0:	781a      	ldrb	r2, [r3, #0]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	3b01      	subs	r3, #1
 800a8d0:	b29b      	uxth	r3, r3
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d10f      	bne.n	800a8fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	68da      	ldr	r2, [r3, #12]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a8ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	68da      	ldr	r2, [r3, #12]
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a8fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	e000      	b.n	800a902 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a900:	2302      	movs	r3, #2
  }
}
 800a902:	4618      	mov	r0, r3
 800a904:	3714      	adds	r7, #20
 800a906:	46bd      	mov	sp, r7
 800a908:	bc80      	pop	{r7}
 800a90a:	4770      	bx	lr

0800a90c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b082      	sub	sp, #8
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	68da      	ldr	r2, [r3, #12]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a922:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2220      	movs	r2, #32
 800a928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f7f7 ff0f 	bl	8002750 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a932:	2300      	movs	r3, #0
}
 800a934:	4618      	mov	r0, r3
 800a936:	3708      	adds	r7, #8
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b086      	sub	sp, #24
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a94a:	b2db      	uxtb	r3, r3
 800a94c:	2b22      	cmp	r3, #34	; 0x22
 800a94e:	f040 8099 	bne.w	800aa84 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	689b      	ldr	r3, [r3, #8]
 800a956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a95a:	d117      	bne.n	800a98c <UART_Receive_IT+0x50>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	691b      	ldr	r3, [r3, #16]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d113      	bne.n	800a98c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a964:	2300      	movs	r3, #0
 800a966:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a96c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	b29b      	uxth	r3, r3
 800a976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a97a:	b29a      	uxth	r2, r3
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a984:	1c9a      	adds	r2, r3, #2
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	629a      	str	r2, [r3, #40]	; 0x28
 800a98a:	e026      	b.n	800a9da <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a990:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800a992:	2300      	movs	r3, #0
 800a994:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	689b      	ldr	r3, [r3, #8]
 800a99a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a99e:	d007      	beq.n	800a9b0 <UART_Receive_IT+0x74>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	689b      	ldr	r3, [r3, #8]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d10a      	bne.n	800a9be <UART_Receive_IT+0x82>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	691b      	ldr	r3, [r3, #16]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d106      	bne.n	800a9be <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	b2da      	uxtb	r2, r3
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	701a      	strb	r2, [r3, #0]
 800a9bc:	e008      	b.n	800a9d0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	b2db      	uxtb	r3, r3
 800a9c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9ca:	b2da      	uxtb	r2, r3
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9d4:	1c5a      	adds	r2, r3, #1
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	3b01      	subs	r3, #1
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d148      	bne.n	800aa80 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	68da      	ldr	r2, [r3, #12]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f022 0220 	bic.w	r2, r2, #32
 800a9fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	68da      	ldr	r2, [r3, #12]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	695a      	ldr	r2, [r3, #20]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f022 0201 	bic.w	r2, r2, #1
 800aa1c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2220      	movs	r2, #32
 800aa22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d123      	bne.n	800aa76 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	68da      	ldr	r2, [r3, #12]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f022 0210 	bic.w	r2, r2, #16
 800aa42:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f003 0310 	and.w	r3, r3, #16
 800aa4e:	2b10      	cmp	r3, #16
 800aa50:	d10a      	bne.n	800aa68 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aa52:	2300      	movs	r3, #0
 800aa54:	60fb      	str	r3, [r7, #12]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	60fb      	str	r3, [r7, #12]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	60fb      	str	r3, [r7, #12]
 800aa66:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f7ff fdcf 	bl	800a612 <HAL_UARTEx_RxEventCallback>
 800aa74:	e002      	b.n	800aa7c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f7f7 fe54 	bl	8002724 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	e002      	b.n	800aa86 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800aa80:	2300      	movs	r3, #0
 800aa82:	e000      	b.n	800aa86 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800aa84:	2302      	movs	r3, #2
  }
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3718      	adds	r7, #24
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
	...

0800aa90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	691b      	ldr	r3, [r3, #16]
 800aa9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	68da      	ldr	r2, [r3, #12]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	430a      	orrs	r2, r1
 800aaac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	689a      	ldr	r2, [r3, #8]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	691b      	ldr	r3, [r3, #16]
 800aab6:	431a      	orrs	r2, r3
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	695b      	ldr	r3, [r3, #20]
 800aabc:	4313      	orrs	r3, r2
 800aabe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	68db      	ldr	r3, [r3, #12]
 800aac6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800aaca:	f023 030c 	bic.w	r3, r3, #12
 800aace:	687a      	ldr	r2, [r7, #4]
 800aad0:	6812      	ldr	r2, [r2, #0]
 800aad2:	68b9      	ldr	r1, [r7, #8]
 800aad4:	430b      	orrs	r3, r1
 800aad6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	695b      	ldr	r3, [r3, #20]
 800aade:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	699a      	ldr	r2, [r3, #24]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	430a      	orrs	r2, r1
 800aaec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4a2c      	ldr	r2, [pc, #176]	; (800aba4 <UART_SetConfig+0x114>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d103      	bne.n	800ab00 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800aaf8:	f7fd fed0 	bl	800889c <HAL_RCC_GetPCLK2Freq>
 800aafc:	60f8      	str	r0, [r7, #12]
 800aafe:	e002      	b.n	800ab06 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800ab00:	f7fd feb8 	bl	8008874 <HAL_RCC_GetPCLK1Freq>
 800ab04:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ab06:	68fa      	ldr	r2, [r7, #12]
 800ab08:	4613      	mov	r3, r2
 800ab0a:	009b      	lsls	r3, r3, #2
 800ab0c:	4413      	add	r3, r2
 800ab0e:	009a      	lsls	r2, r3, #2
 800ab10:	441a      	add	r2, r3
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	009b      	lsls	r3, r3, #2
 800ab18:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab1c:	4a22      	ldr	r2, [pc, #136]	; (800aba8 <UART_SetConfig+0x118>)
 800ab1e:	fba2 2303 	umull	r2, r3, r2, r3
 800ab22:	095b      	lsrs	r3, r3, #5
 800ab24:	0119      	lsls	r1, r3, #4
 800ab26:	68fa      	ldr	r2, [r7, #12]
 800ab28:	4613      	mov	r3, r2
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	4413      	add	r3, r2
 800ab2e:	009a      	lsls	r2, r3, #2
 800ab30:	441a      	add	r2, r3
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	009b      	lsls	r3, r3, #2
 800ab38:	fbb2 f2f3 	udiv	r2, r2, r3
 800ab3c:	4b1a      	ldr	r3, [pc, #104]	; (800aba8 <UART_SetConfig+0x118>)
 800ab3e:	fba3 0302 	umull	r0, r3, r3, r2
 800ab42:	095b      	lsrs	r3, r3, #5
 800ab44:	2064      	movs	r0, #100	; 0x64
 800ab46:	fb00 f303 	mul.w	r3, r0, r3
 800ab4a:	1ad3      	subs	r3, r2, r3
 800ab4c:	011b      	lsls	r3, r3, #4
 800ab4e:	3332      	adds	r3, #50	; 0x32
 800ab50:	4a15      	ldr	r2, [pc, #84]	; (800aba8 <UART_SetConfig+0x118>)
 800ab52:	fba2 2303 	umull	r2, r3, r2, r3
 800ab56:	095b      	lsrs	r3, r3, #5
 800ab58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab5c:	4419      	add	r1, r3
 800ab5e:	68fa      	ldr	r2, [r7, #12]
 800ab60:	4613      	mov	r3, r2
 800ab62:	009b      	lsls	r3, r3, #2
 800ab64:	4413      	add	r3, r2
 800ab66:	009a      	lsls	r2, r3, #2
 800ab68:	441a      	add	r2, r3
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	fbb2 f2f3 	udiv	r2, r2, r3
 800ab74:	4b0c      	ldr	r3, [pc, #48]	; (800aba8 <UART_SetConfig+0x118>)
 800ab76:	fba3 0302 	umull	r0, r3, r3, r2
 800ab7a:	095b      	lsrs	r3, r3, #5
 800ab7c:	2064      	movs	r0, #100	; 0x64
 800ab7e:	fb00 f303 	mul.w	r3, r0, r3
 800ab82:	1ad3      	subs	r3, r2, r3
 800ab84:	011b      	lsls	r3, r3, #4
 800ab86:	3332      	adds	r3, #50	; 0x32
 800ab88:	4a07      	ldr	r2, [pc, #28]	; (800aba8 <UART_SetConfig+0x118>)
 800ab8a:	fba2 2303 	umull	r2, r3, r2, r3
 800ab8e:	095b      	lsrs	r3, r3, #5
 800ab90:	f003 020f 	and.w	r2, r3, #15
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	440a      	add	r2, r1
 800ab9a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800ab9c:	bf00      	nop
 800ab9e:	3710      	adds	r7, #16
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}
 800aba4:	40013800 	.word	0x40013800
 800aba8:	51eb851f 	.word	0x51eb851f

0800abac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800abac:	b480      	push	{r7}
 800abae:	b085      	sub	sp, #20
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	4603      	mov	r3, r0
 800abb4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800abb6:	2300      	movs	r3, #0
 800abb8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800abba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800abbe:	2b84      	cmp	r3, #132	; 0x84
 800abc0:	d005      	beq.n	800abce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800abc2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	4413      	add	r3, r2
 800abca:	3303      	adds	r3, #3
 800abcc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800abce:	68fb      	ldr	r3, [r7, #12]
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3714      	adds	r7, #20
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bc80      	pop	{r7}
 800abd8:	4770      	bx	lr

0800abda <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800abda:	b480      	push	{r7}
 800abdc:	b083      	sub	sp, #12
 800abde:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800abe0:	f3ef 8305 	mrs	r3, IPSR
 800abe4:	607b      	str	r3, [r7, #4]
  return(result);
 800abe6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800abe8:	2b00      	cmp	r3, #0
 800abea:	bf14      	ite	ne
 800abec:	2301      	movne	r3, #1
 800abee:	2300      	moveq	r3, #0
 800abf0:	b2db      	uxtb	r3, r3
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	370c      	adds	r7, #12
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bc80      	pop	{r7}
 800abfa:	4770      	bx	lr

0800abfc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ac00:	f001 fb6a 	bl	800c2d8 <vTaskStartScheduler>
  
  return osOK;
 800ac04:	2300      	movs	r3, #0
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	bd80      	pop	{r7, pc}

0800ac0a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800ac0a:	b580      	push	{r7, lr}
 800ac0c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800ac0e:	f7ff ffe4 	bl	800abda <inHandlerMode>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d003      	beq.n	800ac20 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800ac18:	f001 fc7c 	bl	800c514 <xTaskGetTickCountFromISR>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	e002      	b.n	800ac26 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800ac20:	f001 fc6a 	bl	800c4f8 <xTaskGetTickCount>
 800ac24:	4603      	mov	r3, r0
  }
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	bd80      	pop	{r7, pc}

0800ac2a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ac2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac2c:	b089      	sub	sp, #36	; 0x24
 800ac2e:	af04      	add	r7, sp, #16
 800ac30:	6078      	str	r0, [r7, #4]
 800ac32:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	695b      	ldr	r3, [r3, #20]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d020      	beq.n	800ac7e <osThreadCreate+0x54>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	699b      	ldr	r3, [r3, #24]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d01c      	beq.n	800ac7e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	685c      	ldr	r4, [r3, #4]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681d      	ldr	r5, [r3, #0]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	691e      	ldr	r6, [r3, #16]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7ff ffa8 	bl	800abac <makeFreeRtosPriority>
 800ac5c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	695b      	ldr	r3, [r3, #20]
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ac66:	9202      	str	r2, [sp, #8]
 800ac68:	9301      	str	r3, [sp, #4]
 800ac6a:	9100      	str	r1, [sp, #0]
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	4632      	mov	r2, r6
 800ac70:	4629      	mov	r1, r5
 800ac72:	4620      	mov	r0, r4
 800ac74:	f001 f96a 	bl	800bf4c <xTaskCreateStatic>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	60fb      	str	r3, [r7, #12]
 800ac7c:	e01c      	b.n	800acb8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	685c      	ldr	r4, [r3, #4]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ac8a:	b29e      	uxth	r6, r3
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7ff ff8a 	bl	800abac <makeFreeRtosPriority>
 800ac98:	4602      	mov	r2, r0
 800ac9a:	f107 030c 	add.w	r3, r7, #12
 800ac9e:	9301      	str	r3, [sp, #4]
 800aca0:	9200      	str	r2, [sp, #0]
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	4632      	mov	r2, r6
 800aca6:	4629      	mov	r1, r5
 800aca8:	4620      	mov	r0, r4
 800acaa:	f001 f9ab 	bl	800c004 <xTaskCreate>
 800acae:	4603      	mov	r3, r0
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	d001      	beq.n	800acb8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800acb4:	2300      	movs	r3, #0
 800acb6:	e000      	b.n	800acba <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800acb8:	68fb      	ldr	r3, [r7, #12]
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3714      	adds	r7, #20
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800acc2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800acc2:	b580      	push	{r7, lr}
 800acc4:	b084      	sub	sp, #16
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d001      	beq.n	800acd8 <osDelay+0x16>
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	e000      	b.n	800acda <osDelay+0x18>
 800acd8:	2301      	movs	r3, #1
 800acda:	4618      	mov	r0, r3
 800acdc:	f001 fac8 	bl	800c270 <vTaskDelay>
  
  return osOK;
 800ace0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3710      	adds	r7, #16
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
	...

0800acec <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b086      	sub	sp, #24
 800acf0:	af02      	add	r7, sp, #8
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	460b      	mov	r3, r1
 800acf6:	607a      	str	r2, [r7, #4]
 800acf8:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d013      	beq.n	800ad2a <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800ad02:	7afb      	ldrb	r3, [r7, #11]
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d101      	bne.n	800ad0c <osTimerCreate+0x20>
 800ad08:	2101      	movs	r1, #1
 800ad0a:	e000      	b.n	800ad0e <osTimerCreate+0x22>
 800ad0c:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800ad12:	68fa      	ldr	r2, [r7, #12]
 800ad14:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800ad16:	9201      	str	r2, [sp, #4]
 800ad18:	9300      	str	r3, [sp, #0]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	460a      	mov	r2, r1
 800ad1e:	2101      	movs	r1, #1
 800ad20:	480b      	ldr	r0, [pc, #44]	; (800ad50 <osTimerCreate+0x64>)
 800ad22:	f002 f9de 	bl	800d0e2 <xTimerCreateStatic>
 800ad26:	4603      	mov	r3, r0
 800ad28:	e00e      	b.n	800ad48 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800ad2a:	7afb      	ldrb	r3, [r7, #11]
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d101      	bne.n	800ad34 <osTimerCreate+0x48>
 800ad30:	2201      	movs	r2, #1
 800ad32:	e000      	b.n	800ad36 <osTimerCreate+0x4a>
 800ad34:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800ad3a:	9300      	str	r3, [sp, #0]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2101      	movs	r1, #1
 800ad40:	4803      	ldr	r0, [pc, #12]	; (800ad50 <osTimerCreate+0x64>)
 800ad42:	f002 f9ad 	bl	800d0a0 <xTimerCreate>
 800ad46:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3710      	adds	r7, #16
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}
 800ad50:	0801017c 	.word	0x0801017c

0800ad54 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b086      	sub	sp, #24
 800ad58:	af02      	add	r7, sp, #8
 800ad5a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800ad60:	2300      	movs	r3, #0
 800ad62:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 800ad64:	f7ff ff39 	bl	800abda <inHandlerMode>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d019      	beq.n	800ada2 <osTimerStop+0x4e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 800ad6e:	f107 0308 	add.w	r3, r7, #8
 800ad72:	2200      	movs	r2, #0
 800ad74:	9200      	str	r2, [sp, #0]
 800ad76:	2200      	movs	r2, #0
 800ad78:	2108      	movs	r1, #8
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f002 fa20 	bl	800d1c0 <xTimerGenericCommand>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b01      	cmp	r3, #1
 800ad84:	d001      	beq.n	800ad8a <osTimerStop+0x36>
      return osErrorOS;
 800ad86:	23ff      	movs	r3, #255	; 0xff
 800ad88:	e019      	b.n	800adbe <osTimerStop+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d015      	beq.n	800adbc <osTimerStop+0x68>
 800ad90:	4b0d      	ldr	r3, [pc, #52]	; (800adc8 <osTimerStop+0x74>)
 800ad92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad96:	601a      	str	r2, [r3, #0]
 800ad98:	f3bf 8f4f 	dsb	sy
 800ad9c:	f3bf 8f6f 	isb	sy
 800ada0:	e00c      	b.n	800adbc <osTimerStop+0x68>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 800ada2:	2300      	movs	r3, #0
 800ada4:	9300      	str	r3, [sp, #0]
 800ada6:	2300      	movs	r3, #0
 800ada8:	2200      	movs	r2, #0
 800adaa:	2103      	movs	r1, #3
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f002 fa07 	bl	800d1c0 <xTimerGenericCommand>
 800adb2:	4603      	mov	r3, r0
 800adb4:	2b01      	cmp	r3, #1
 800adb6:	d001      	beq.n	800adbc <osTimerStop+0x68>
      result = osErrorOS;
 800adb8:	23ff      	movs	r3, #255	; 0xff
 800adba:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 800adbc:	68fb      	ldr	r3, [r7, #12]
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3710      	adds	r7, #16
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	bf00      	nop
 800adc8:	e000ed04 	.word	0xe000ed04

0800adcc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800adcc:	b580      	push	{r7, lr}
 800adce:	b086      	sub	sp, #24
 800add0:	af02      	add	r7, sp, #8
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d00f      	beq.n	800adfe <osSemaphoreCreate+0x32>
    if (count == 1) {
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	2b01      	cmp	r3, #1
 800ade2:	d10a      	bne.n	800adfa <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	2203      	movs	r2, #3
 800adea:	9200      	str	r2, [sp, #0]
 800adec:	2200      	movs	r2, #0
 800adee:	2100      	movs	r1, #0
 800adf0:	2001      	movs	r0, #1
 800adf2:	f000 f9c3 	bl	800b17c <xQueueGenericCreateStatic>
 800adf6:	4603      	mov	r3, r0
 800adf8:	e016      	b.n	800ae28 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800adfa:	2300      	movs	r3, #0
 800adfc:	e014      	b.n	800ae28 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	d110      	bne.n	800ae26 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800ae04:	2203      	movs	r2, #3
 800ae06:	2100      	movs	r1, #0
 800ae08:	2001      	movs	r0, #1
 800ae0a:	f000 fa2e 	bl	800b26a <xQueueGenericCreate>
 800ae0e:	60f8      	str	r0, [r7, #12]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d005      	beq.n	800ae22 <osSemaphoreCreate+0x56>
 800ae16:	2300      	movs	r3, #0
 800ae18:	2200      	movs	r2, #0
 800ae1a:	2100      	movs	r1, #0
 800ae1c:	68f8      	ldr	r0, [r7, #12]
 800ae1e:	f000 fa81 	bl	800b324 <xQueueGenericSend>
      return sema;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	e000      	b.n	800ae28 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800ae26:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3710      	adds	r7, #16
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d101      	bne.n	800ae48 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800ae44:	2380      	movs	r3, #128	; 0x80
 800ae46:	e03a      	b.n	800aebe <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae52:	d103      	bne.n	800ae5c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800ae54:	f04f 33ff 	mov.w	r3, #4294967295
 800ae58:	60fb      	str	r3, [r7, #12]
 800ae5a:	e009      	b.n	800ae70 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d006      	beq.n	800ae70 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d101      	bne.n	800ae70 <osSemaphoreWait+0x40>
      ticks = 1;
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ae70:	f7ff feb3 	bl	800abda <inHandlerMode>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d017      	beq.n	800aeaa <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ae7a:	f107 0308 	add.w	r3, r7, #8
 800ae7e:	461a      	mov	r2, r3
 800ae80:	2100      	movs	r1, #0
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f000 fe5e 	bl	800bb44 <xQueueReceiveFromISR>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b01      	cmp	r3, #1
 800ae8c:	d001      	beq.n	800ae92 <osSemaphoreWait+0x62>
      return osErrorOS;
 800ae8e:	23ff      	movs	r3, #255	; 0xff
 800ae90:	e015      	b.n	800aebe <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d011      	beq.n	800aebc <osSemaphoreWait+0x8c>
 800ae98:	4b0b      	ldr	r3, [pc, #44]	; (800aec8 <osSemaphoreWait+0x98>)
 800ae9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae9e:	601a      	str	r2, [r3, #0]
 800aea0:	f3bf 8f4f 	dsb	sy
 800aea4:	f3bf 8f6f 	isb	sy
 800aea8:	e008      	b.n	800aebc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800aeaa:	68f9      	ldr	r1, [r7, #12]
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 fd3d 	bl	800b92c <xQueueSemaphoreTake>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	2b01      	cmp	r3, #1
 800aeb6:	d001      	beq.n	800aebc <osSemaphoreWait+0x8c>
    return osErrorOS;
 800aeb8:	23ff      	movs	r3, #255	; 0xff
 800aeba:	e000      	b.n	800aebe <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800aebc:	2300      	movs	r3, #0
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3710      	adds	r7, #16
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop
 800aec8:	e000ed04 	.word	0xe000ed04

0800aecc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b084      	sub	sp, #16
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800aed4:	2300      	movs	r3, #0
 800aed6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800aed8:	2300      	movs	r3, #0
 800aeda:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800aedc:	f7ff fe7d 	bl	800abda <inHandlerMode>
 800aee0:	4603      	mov	r3, r0
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d016      	beq.n	800af14 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800aee6:	f107 0308 	add.w	r3, r7, #8
 800aeea:	4619      	mov	r1, r3
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f000 fbaf 	bl	800b650 <xQueueGiveFromISR>
 800aef2:	4603      	mov	r3, r0
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d001      	beq.n	800aefc <osSemaphoreRelease+0x30>
      return osErrorOS;
 800aef8:	23ff      	movs	r3, #255	; 0xff
 800aefa:	e017      	b.n	800af2c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d013      	beq.n	800af2a <osSemaphoreRelease+0x5e>
 800af02:	4b0c      	ldr	r3, [pc, #48]	; (800af34 <osSemaphoreRelease+0x68>)
 800af04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af08:	601a      	str	r2, [r3, #0]
 800af0a:	f3bf 8f4f 	dsb	sy
 800af0e:	f3bf 8f6f 	isb	sy
 800af12:	e00a      	b.n	800af2a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800af14:	2300      	movs	r3, #0
 800af16:	2200      	movs	r2, #0
 800af18:	2100      	movs	r1, #0
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 fa02 	bl	800b324 <xQueueGenericSend>
 800af20:	4603      	mov	r3, r0
 800af22:	2b01      	cmp	r3, #1
 800af24:	d001      	beq.n	800af2a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800af26:	23ff      	movs	r3, #255	; 0xff
 800af28:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800af2a:	68fb      	ldr	r3, [r7, #12]
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3710      	adds	r7, #16
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}
 800af34:	e000ed04 	.word	0xe000ed04

0800af38 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 800af38:	b480      	push	{r7}
 800af3a:	b083      	sub	sp, #12
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
  return osOK;
#else
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
 800af42:	2381      	movs	r3, #129	; 0x81
#endif
}
 800af44:	4618      	mov	r0, r3
 800af46:	370c      	adds	r7, #12
 800af48:	46bd      	mov	sp, r7
 800af4a:	bc80      	pop	{r7}
 800af4c:	4770      	bx	lr

0800af4e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800af4e:	b480      	push	{r7}
 800af50:	b083      	sub	sp, #12
 800af52:	af00      	add	r7, sp, #0
 800af54:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f103 0208 	add.w	r2, r3, #8
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f04f 32ff 	mov.w	r2, #4294967295
 800af66:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f103 0208 	add.w	r2, r3, #8
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f103 0208 	add.w	r2, r3, #8
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2200      	movs	r2, #0
 800af80:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800af82:	bf00      	nop
 800af84:	370c      	adds	r7, #12
 800af86:	46bd      	mov	sp, r7
 800af88:	bc80      	pop	{r7}
 800af8a:	4770      	bx	lr

0800af8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800af8c:	b480      	push	{r7}
 800af8e:	b083      	sub	sp, #12
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2200      	movs	r2, #0
 800af98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800af9a:	bf00      	nop
 800af9c:	370c      	adds	r7, #12
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bc80      	pop	{r7}
 800afa2:	4770      	bx	lr

0800afa4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800afa4:	b480      	push	{r7}
 800afa6:	b085      	sub	sp, #20
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	685b      	ldr	r3, [r3, #4]
 800afb2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	68fa      	ldr	r2, [r7, #12]
 800afb8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	689a      	ldr	r2, [r3, #8]
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	689b      	ldr	r3, [r3, #8]
 800afc6:	683a      	ldr	r2, [r7, #0]
 800afc8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	683a      	ldr	r2, [r7, #0]
 800afce:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	1c5a      	adds	r2, r3, #1
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	601a      	str	r2, [r3, #0]
}
 800afe0:	bf00      	nop
 800afe2:	3714      	adds	r7, #20
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bc80      	pop	{r7}
 800afe8:	4770      	bx	lr

0800afea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800afea:	b480      	push	{r7}
 800afec:	b085      	sub	sp, #20
 800afee:	af00      	add	r7, sp, #0
 800aff0:	6078      	str	r0, [r7, #4]
 800aff2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b000:	d103      	bne.n	800b00a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	691b      	ldr	r3, [r3, #16]
 800b006:	60fb      	str	r3, [r7, #12]
 800b008:	e00c      	b.n	800b024 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	3308      	adds	r3, #8
 800b00e:	60fb      	str	r3, [r7, #12]
 800b010:	e002      	b.n	800b018 <vListInsert+0x2e>
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	60fb      	str	r3, [r7, #12]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	68ba      	ldr	r2, [r7, #8]
 800b020:	429a      	cmp	r2, r3
 800b022:	d2f6      	bcs.n	800b012 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	685a      	ldr	r2, [r3, #4]
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	683a      	ldr	r2, [r7, #0]
 800b032:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	68fa      	ldr	r2, [r7, #12]
 800b038:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	683a      	ldr	r2, [r7, #0]
 800b03e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	687a      	ldr	r2, [r7, #4]
 800b044:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	1c5a      	adds	r2, r3, #1
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	601a      	str	r2, [r3, #0]
}
 800b050:	bf00      	nop
 800b052:	3714      	adds	r7, #20
 800b054:	46bd      	mov	sp, r7
 800b056:	bc80      	pop	{r7}
 800b058:	4770      	bx	lr

0800b05a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b05a:	b480      	push	{r7}
 800b05c:	b085      	sub	sp, #20
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	691b      	ldr	r3, [r3, #16]
 800b066:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	687a      	ldr	r2, [r7, #4]
 800b06e:	6892      	ldr	r2, [r2, #8]
 800b070:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	689b      	ldr	r3, [r3, #8]
 800b076:	687a      	ldr	r2, [r7, #4]
 800b078:	6852      	ldr	r2, [r2, #4]
 800b07a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	687a      	ldr	r2, [r7, #4]
 800b082:	429a      	cmp	r2, r3
 800b084:	d103      	bne.n	800b08e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	689a      	ldr	r2, [r3, #8]
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2200      	movs	r2, #0
 800b092:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	1e5a      	subs	r2, r3, #1
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3714      	adds	r7, #20
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bc80      	pop	{r7}
 800b0aa:	4770      	bx	lr

0800b0ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d10a      	bne.n	800b0d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c4:	f383 8811 	msr	BASEPRI, r3
 800b0c8:	f3bf 8f6f 	isb	sy
 800b0cc:	f3bf 8f4f 	dsb	sy
 800b0d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b0d2:	bf00      	nop
 800b0d4:	e7fe      	b.n	800b0d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b0d6:	f002 fc11 	bl	800d8fc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681a      	ldr	r2, [r3, #0]
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0e2:	68f9      	ldr	r1, [r7, #12]
 800b0e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b0e6:	fb01 f303 	mul.w	r3, r1, r3
 800b0ea:	441a      	add	r2, r3
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681a      	ldr	r2, [r3, #0]
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b106:	3b01      	subs	r3, #1
 800b108:	68f9      	ldr	r1, [r7, #12]
 800b10a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b10c:	fb01 f303 	mul.w	r3, r1, r3
 800b110:	441a      	add	r2, r3
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	22ff      	movs	r2, #255	; 0xff
 800b11a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	22ff      	movs	r2, #255	; 0xff
 800b122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d114      	bne.n	800b156 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	691b      	ldr	r3, [r3, #16]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d01a      	beq.n	800b16a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	3310      	adds	r3, #16
 800b138:	4618      	mov	r0, r3
 800b13a:	f001 fb65 	bl	800c808 <xTaskRemoveFromEventList>
 800b13e:	4603      	mov	r3, r0
 800b140:	2b00      	cmp	r3, #0
 800b142:	d012      	beq.n	800b16a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b144:	4b0c      	ldr	r3, [pc, #48]	; (800b178 <xQueueGenericReset+0xcc>)
 800b146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b14a:	601a      	str	r2, [r3, #0]
 800b14c:	f3bf 8f4f 	dsb	sy
 800b150:	f3bf 8f6f 	isb	sy
 800b154:	e009      	b.n	800b16a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	3310      	adds	r3, #16
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7ff fef7 	bl	800af4e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	3324      	adds	r3, #36	; 0x24
 800b164:	4618      	mov	r0, r3
 800b166:	f7ff fef2 	bl	800af4e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b16a:	f002 fbf7 	bl	800d95c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b16e:	2301      	movs	r3, #1
}
 800b170:	4618      	mov	r0, r3
 800b172:	3710      	adds	r7, #16
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}
 800b178:	e000ed04 	.word	0xe000ed04

0800b17c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b08e      	sub	sp, #56	; 0x38
 800b180:	af02      	add	r7, sp, #8
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	60b9      	str	r1, [r7, #8]
 800b186:	607a      	str	r2, [r7, #4]
 800b188:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d10a      	bne.n	800b1a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b194:	f383 8811 	msr	BASEPRI, r3
 800b198:	f3bf 8f6f 	isb	sy
 800b19c:	f3bf 8f4f 	dsb	sy
 800b1a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b1a2:	bf00      	nop
 800b1a4:	e7fe      	b.n	800b1a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d10a      	bne.n	800b1c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b0:	f383 8811 	msr	BASEPRI, r3
 800b1b4:	f3bf 8f6f 	isb	sy
 800b1b8:	f3bf 8f4f 	dsb	sy
 800b1bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b1be:	bf00      	nop
 800b1c0:	e7fe      	b.n	800b1c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d002      	beq.n	800b1ce <xQueueGenericCreateStatic+0x52>
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d001      	beq.n	800b1d2 <xQueueGenericCreateStatic+0x56>
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	e000      	b.n	800b1d4 <xQueueGenericCreateStatic+0x58>
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d10a      	bne.n	800b1ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1dc:	f383 8811 	msr	BASEPRI, r3
 800b1e0:	f3bf 8f6f 	isb	sy
 800b1e4:	f3bf 8f4f 	dsb	sy
 800b1e8:	623b      	str	r3, [r7, #32]
}
 800b1ea:	bf00      	nop
 800b1ec:	e7fe      	b.n	800b1ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d102      	bne.n	800b1fa <xQueueGenericCreateStatic+0x7e>
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d101      	bne.n	800b1fe <xQueueGenericCreateStatic+0x82>
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	e000      	b.n	800b200 <xQueueGenericCreateStatic+0x84>
 800b1fe:	2300      	movs	r3, #0
 800b200:	2b00      	cmp	r3, #0
 800b202:	d10a      	bne.n	800b21a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b208:	f383 8811 	msr	BASEPRI, r3
 800b20c:	f3bf 8f6f 	isb	sy
 800b210:	f3bf 8f4f 	dsb	sy
 800b214:	61fb      	str	r3, [r7, #28]
}
 800b216:	bf00      	nop
 800b218:	e7fe      	b.n	800b218 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b21a:	2348      	movs	r3, #72	; 0x48
 800b21c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	2b48      	cmp	r3, #72	; 0x48
 800b222:	d00a      	beq.n	800b23a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b228:	f383 8811 	msr	BASEPRI, r3
 800b22c:	f3bf 8f6f 	isb	sy
 800b230:	f3bf 8f4f 	dsb	sy
 800b234:	61bb      	str	r3, [r7, #24]
}
 800b236:	bf00      	nop
 800b238:	e7fe      	b.n	800b238 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b240:	2b00      	cmp	r3, #0
 800b242:	d00d      	beq.n	800b260 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b246:	2201      	movs	r2, #1
 800b248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b24c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b252:	9300      	str	r3, [sp, #0]
 800b254:	4613      	mov	r3, r2
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	68b9      	ldr	r1, [r7, #8]
 800b25a:	68f8      	ldr	r0, [r7, #12]
 800b25c:	f000 f843 	bl	800b2e6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800b260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b262:	4618      	mov	r0, r3
 800b264:	3730      	adds	r7, #48	; 0x30
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}

0800b26a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b26a:	b580      	push	{r7, lr}
 800b26c:	b08a      	sub	sp, #40	; 0x28
 800b26e:	af02      	add	r7, sp, #8
 800b270:	60f8      	str	r0, [r7, #12]
 800b272:	60b9      	str	r1, [r7, #8]
 800b274:	4613      	mov	r3, r2
 800b276:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d10a      	bne.n	800b294 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b282:	f383 8811 	msr	BASEPRI, r3
 800b286:	f3bf 8f6f 	isb	sy
 800b28a:	f3bf 8f4f 	dsb	sy
 800b28e:	613b      	str	r3, [r7, #16]
}
 800b290:	bf00      	nop
 800b292:	e7fe      	b.n	800b292 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d102      	bne.n	800b2a0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b29a:	2300      	movs	r3, #0
 800b29c:	61fb      	str	r3, [r7, #28]
 800b29e:	e004      	b.n	800b2aa <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	68ba      	ldr	r2, [r7, #8]
 800b2a4:	fb02 f303 	mul.w	r3, r2, r3
 800b2a8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800b2aa:	69fb      	ldr	r3, [r7, #28]
 800b2ac:	3348      	adds	r3, #72	; 0x48
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f002 fc24 	bl	800dafc <pvPortMalloc>
 800b2b4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b2b6:	69bb      	ldr	r3, [r7, #24]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d00f      	beq.n	800b2dc <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800b2bc:	69bb      	ldr	r3, [r7, #24]
 800b2be:	3348      	adds	r3, #72	; 0x48
 800b2c0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b2c2:	69bb      	ldr	r3, [r7, #24]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b2ca:	79fa      	ldrb	r2, [r7, #7]
 800b2cc:	69bb      	ldr	r3, [r7, #24]
 800b2ce:	9300      	str	r3, [sp, #0]
 800b2d0:	4613      	mov	r3, r2
 800b2d2:	697a      	ldr	r2, [r7, #20]
 800b2d4:	68b9      	ldr	r1, [r7, #8]
 800b2d6:	68f8      	ldr	r0, [r7, #12]
 800b2d8:	f000 f805 	bl	800b2e6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800b2dc:	69bb      	ldr	r3, [r7, #24]
	}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3720      	adds	r7, #32
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b2e6:	b580      	push	{r7, lr}
 800b2e8:	b084      	sub	sp, #16
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	60f8      	str	r0, [r7, #12]
 800b2ee:	60b9      	str	r1, [r7, #8]
 800b2f0:	607a      	str	r2, [r7, #4]
 800b2f2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d103      	bne.n	800b302 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b2fa:	69bb      	ldr	r3, [r7, #24]
 800b2fc:	69ba      	ldr	r2, [r7, #24]
 800b2fe:	601a      	str	r2, [r3, #0]
 800b300:	e002      	b.n	800b308 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	687a      	ldr	r2, [r7, #4]
 800b306:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b308:	69bb      	ldr	r3, [r7, #24]
 800b30a:	68fa      	ldr	r2, [r7, #12]
 800b30c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b30e:	69bb      	ldr	r3, [r7, #24]
 800b310:	68ba      	ldr	r2, [r7, #8]
 800b312:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b314:	2101      	movs	r1, #1
 800b316:	69b8      	ldr	r0, [r7, #24]
 800b318:	f7ff fec8 	bl	800b0ac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b31c:	bf00      	nop
 800b31e:	3710      	adds	r7, #16
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b08e      	sub	sp, #56	; 0x38
 800b328:	af00      	add	r7, sp, #0
 800b32a:	60f8      	str	r0, [r7, #12]
 800b32c:	60b9      	str	r1, [r7, #8]
 800b32e:	607a      	str	r2, [r7, #4]
 800b330:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b332:	2300      	movs	r3, #0
 800b334:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d10a      	bne.n	800b356 <xQueueGenericSend+0x32>
	__asm volatile
 800b340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b344:	f383 8811 	msr	BASEPRI, r3
 800b348:	f3bf 8f6f 	isb	sy
 800b34c:	f3bf 8f4f 	dsb	sy
 800b350:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b352:	bf00      	nop
 800b354:	e7fe      	b.n	800b354 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d103      	bne.n	800b364 <xQueueGenericSend+0x40>
 800b35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b35e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b360:	2b00      	cmp	r3, #0
 800b362:	d101      	bne.n	800b368 <xQueueGenericSend+0x44>
 800b364:	2301      	movs	r3, #1
 800b366:	e000      	b.n	800b36a <xQueueGenericSend+0x46>
 800b368:	2300      	movs	r3, #0
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d10a      	bne.n	800b384 <xQueueGenericSend+0x60>
	__asm volatile
 800b36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b372:	f383 8811 	msr	BASEPRI, r3
 800b376:	f3bf 8f6f 	isb	sy
 800b37a:	f3bf 8f4f 	dsb	sy
 800b37e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b380:	bf00      	nop
 800b382:	e7fe      	b.n	800b382 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	2b02      	cmp	r3, #2
 800b388:	d103      	bne.n	800b392 <xQueueGenericSend+0x6e>
 800b38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d101      	bne.n	800b396 <xQueueGenericSend+0x72>
 800b392:	2301      	movs	r3, #1
 800b394:	e000      	b.n	800b398 <xQueueGenericSend+0x74>
 800b396:	2300      	movs	r3, #0
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d10a      	bne.n	800b3b2 <xQueueGenericSend+0x8e>
	__asm volatile
 800b39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a0:	f383 8811 	msr	BASEPRI, r3
 800b3a4:	f3bf 8f6f 	isb	sy
 800b3a8:	f3bf 8f4f 	dsb	sy
 800b3ac:	623b      	str	r3, [r7, #32]
}
 800b3ae:	bf00      	nop
 800b3b0:	e7fe      	b.n	800b3b0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b3b2:	f001 fbe9 	bl	800cb88 <xTaskGetSchedulerState>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d102      	bne.n	800b3c2 <xQueueGenericSend+0x9e>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d101      	bne.n	800b3c6 <xQueueGenericSend+0xa2>
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	e000      	b.n	800b3c8 <xQueueGenericSend+0xa4>
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d10a      	bne.n	800b3e2 <xQueueGenericSend+0xbe>
	__asm volatile
 800b3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d0:	f383 8811 	msr	BASEPRI, r3
 800b3d4:	f3bf 8f6f 	isb	sy
 800b3d8:	f3bf 8f4f 	dsb	sy
 800b3dc:	61fb      	str	r3, [r7, #28]
}
 800b3de:	bf00      	nop
 800b3e0:	e7fe      	b.n	800b3e0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b3e2:	f002 fa8b 	bl	800d8fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d302      	bcc.n	800b3f8 <xQueueGenericSend+0xd4>
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	2b02      	cmp	r3, #2
 800b3f6:	d129      	bne.n	800b44c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b3f8:	683a      	ldr	r2, [r7, #0]
 800b3fa:	68b9      	ldr	r1, [r7, #8]
 800b3fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b3fe:	f000 fc38 	bl	800bc72 <prvCopyDataToQueue>
 800b402:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d010      	beq.n	800b42e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b40e:	3324      	adds	r3, #36	; 0x24
 800b410:	4618      	mov	r0, r3
 800b412:	f001 f9f9 	bl	800c808 <xTaskRemoveFromEventList>
 800b416:	4603      	mov	r3, r0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d013      	beq.n	800b444 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b41c:	4b3f      	ldr	r3, [pc, #252]	; (800b51c <xQueueGenericSend+0x1f8>)
 800b41e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b422:	601a      	str	r2, [r3, #0]
 800b424:	f3bf 8f4f 	dsb	sy
 800b428:	f3bf 8f6f 	isb	sy
 800b42c:	e00a      	b.n	800b444 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b430:	2b00      	cmp	r3, #0
 800b432:	d007      	beq.n	800b444 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b434:	4b39      	ldr	r3, [pc, #228]	; (800b51c <xQueueGenericSend+0x1f8>)
 800b436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b43a:	601a      	str	r2, [r3, #0]
 800b43c:	f3bf 8f4f 	dsb	sy
 800b440:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b444:	f002 fa8a 	bl	800d95c <vPortExitCritical>
				return pdPASS;
 800b448:	2301      	movs	r3, #1
 800b44a:	e063      	b.n	800b514 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d103      	bne.n	800b45a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b452:	f002 fa83 	bl	800d95c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b456:	2300      	movs	r3, #0
 800b458:	e05c      	b.n	800b514 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b45a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d106      	bne.n	800b46e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b460:	f107 0314 	add.w	r3, r7, #20
 800b464:	4618      	mov	r0, r3
 800b466:	f001 fa31 	bl	800c8cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b46a:	2301      	movs	r3, #1
 800b46c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b46e:	f002 fa75 	bl	800d95c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b472:	f000 ff97 	bl	800c3a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b476:	f002 fa41 	bl	800d8fc <vPortEnterCritical>
 800b47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b47c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b480:	b25b      	sxtb	r3, r3
 800b482:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b486:	d103      	bne.n	800b490 <xQueueGenericSend+0x16c>
 800b488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48a:	2200      	movs	r2, #0
 800b48c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b492:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b496:	b25b      	sxtb	r3, r3
 800b498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b49c:	d103      	bne.n	800b4a6 <xQueueGenericSend+0x182>
 800b49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b4a6:	f002 fa59 	bl	800d95c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b4aa:	1d3a      	adds	r2, r7, #4
 800b4ac:	f107 0314 	add.w	r3, r7, #20
 800b4b0:	4611      	mov	r1, r2
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f001 fa20 	bl	800c8f8 <xTaskCheckForTimeOut>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d124      	bne.n	800b508 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b4be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b4c0:	f000 fccf 	bl	800be62 <prvIsQueueFull>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d018      	beq.n	800b4fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4cc:	3310      	adds	r3, #16
 800b4ce:	687a      	ldr	r2, [r7, #4]
 800b4d0:	4611      	mov	r1, r2
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f001 f948 	bl	800c768 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b4d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b4da:	f000 fc5a 	bl	800bd92 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b4de:	f000 ff6f 	bl	800c3c0 <xTaskResumeAll>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	f47f af7c 	bne.w	800b3e2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b4ea:	4b0c      	ldr	r3, [pc, #48]	; (800b51c <xQueueGenericSend+0x1f8>)
 800b4ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4f0:	601a      	str	r2, [r3, #0]
 800b4f2:	f3bf 8f4f 	dsb	sy
 800b4f6:	f3bf 8f6f 	isb	sy
 800b4fa:	e772      	b.n	800b3e2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b4fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b4fe:	f000 fc48 	bl	800bd92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b502:	f000 ff5d 	bl	800c3c0 <xTaskResumeAll>
 800b506:	e76c      	b.n	800b3e2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b50a:	f000 fc42 	bl	800bd92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b50e:	f000 ff57 	bl	800c3c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b512:	2300      	movs	r3, #0
		}
	}
}
 800b514:	4618      	mov	r0, r3
 800b516:	3738      	adds	r7, #56	; 0x38
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}
 800b51c:	e000ed04 	.word	0xe000ed04

0800b520 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b08e      	sub	sp, #56	; 0x38
 800b524:	af00      	add	r7, sp, #0
 800b526:	60f8      	str	r0, [r7, #12]
 800b528:	60b9      	str	r1, [r7, #8]
 800b52a:	607a      	str	r2, [r7, #4]
 800b52c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b534:	2b00      	cmp	r3, #0
 800b536:	d10a      	bne.n	800b54e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b53c:	f383 8811 	msr	BASEPRI, r3
 800b540:	f3bf 8f6f 	isb	sy
 800b544:	f3bf 8f4f 	dsb	sy
 800b548:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b54a:	bf00      	nop
 800b54c:	e7fe      	b.n	800b54c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d103      	bne.n	800b55c <xQueueGenericSendFromISR+0x3c>
 800b554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d101      	bne.n	800b560 <xQueueGenericSendFromISR+0x40>
 800b55c:	2301      	movs	r3, #1
 800b55e:	e000      	b.n	800b562 <xQueueGenericSendFromISR+0x42>
 800b560:	2300      	movs	r3, #0
 800b562:	2b00      	cmp	r3, #0
 800b564:	d10a      	bne.n	800b57c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b56a:	f383 8811 	msr	BASEPRI, r3
 800b56e:	f3bf 8f6f 	isb	sy
 800b572:	f3bf 8f4f 	dsb	sy
 800b576:	623b      	str	r3, [r7, #32]
}
 800b578:	bf00      	nop
 800b57a:	e7fe      	b.n	800b57a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	2b02      	cmp	r3, #2
 800b580:	d103      	bne.n	800b58a <xQueueGenericSendFromISR+0x6a>
 800b582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b586:	2b01      	cmp	r3, #1
 800b588:	d101      	bne.n	800b58e <xQueueGenericSendFromISR+0x6e>
 800b58a:	2301      	movs	r3, #1
 800b58c:	e000      	b.n	800b590 <xQueueGenericSendFromISR+0x70>
 800b58e:	2300      	movs	r3, #0
 800b590:	2b00      	cmp	r3, #0
 800b592:	d10a      	bne.n	800b5aa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b598:	f383 8811 	msr	BASEPRI, r3
 800b59c:	f3bf 8f6f 	isb	sy
 800b5a0:	f3bf 8f4f 	dsb	sy
 800b5a4:	61fb      	str	r3, [r7, #28]
}
 800b5a6:	bf00      	nop
 800b5a8:	e7fe      	b.n	800b5a8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b5aa:	f002 fa69 	bl	800da80 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b5ae:	f3ef 8211 	mrs	r2, BASEPRI
 800b5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b6:	f383 8811 	msr	BASEPRI, r3
 800b5ba:	f3bf 8f6f 	isb	sy
 800b5be:	f3bf 8f4f 	dsb	sy
 800b5c2:	61ba      	str	r2, [r7, #24]
 800b5c4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b5c6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b5c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d302      	bcc.n	800b5dc <xQueueGenericSendFromISR+0xbc>
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	2b02      	cmp	r3, #2
 800b5da:	d12c      	bne.n	800b636 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b5e6:	683a      	ldr	r2, [r7, #0]
 800b5e8:	68b9      	ldr	r1, [r7, #8]
 800b5ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b5ec:	f000 fb41 	bl	800bc72 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b5f0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b5f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5f8:	d112      	bne.n	800b620 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d016      	beq.n	800b630 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b604:	3324      	adds	r3, #36	; 0x24
 800b606:	4618      	mov	r0, r3
 800b608:	f001 f8fe 	bl	800c808 <xTaskRemoveFromEventList>
 800b60c:	4603      	mov	r3, r0
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d00e      	beq.n	800b630 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d00b      	beq.n	800b630 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2201      	movs	r2, #1
 800b61c:	601a      	str	r2, [r3, #0]
 800b61e:	e007      	b.n	800b630 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b620:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b624:	3301      	adds	r3, #1
 800b626:	b2db      	uxtb	r3, r3
 800b628:	b25a      	sxtb	r2, r3
 800b62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b62c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b630:	2301      	movs	r3, #1
 800b632:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b634:	e001      	b.n	800b63a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b636:	2300      	movs	r3, #0
 800b638:	637b      	str	r3, [r7, #52]	; 0x34
 800b63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b63c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b644:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3738      	adds	r7, #56	; 0x38
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b08e      	sub	sp, #56	; 0x38
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b660:	2b00      	cmp	r3, #0
 800b662:	d10a      	bne.n	800b67a <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b668:	f383 8811 	msr	BASEPRI, r3
 800b66c:	f3bf 8f6f 	isb	sy
 800b670:	f3bf 8f4f 	dsb	sy
 800b674:	623b      	str	r3, [r7, #32]
}
 800b676:	bf00      	nop
 800b678:	e7fe      	b.n	800b678 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d00a      	beq.n	800b698 <xQueueGiveFromISR+0x48>
	__asm volatile
 800b682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b686:	f383 8811 	msr	BASEPRI, r3
 800b68a:	f3bf 8f6f 	isb	sy
 800b68e:	f3bf 8f4f 	dsb	sy
 800b692:	61fb      	str	r3, [r7, #28]
}
 800b694:	bf00      	nop
 800b696:	e7fe      	b.n	800b696 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800b698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d103      	bne.n	800b6a8 <xQueueGiveFromISR+0x58>
 800b6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d101      	bne.n	800b6ac <xQueueGiveFromISR+0x5c>
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	e000      	b.n	800b6ae <xQueueGiveFromISR+0x5e>
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d10a      	bne.n	800b6c8 <xQueueGiveFromISR+0x78>
	__asm volatile
 800b6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b6:	f383 8811 	msr	BASEPRI, r3
 800b6ba:	f3bf 8f6f 	isb	sy
 800b6be:	f3bf 8f4f 	dsb	sy
 800b6c2:	61bb      	str	r3, [r7, #24]
}
 800b6c4:	bf00      	nop
 800b6c6:	e7fe      	b.n	800b6c6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b6c8:	f002 f9da 	bl	800da80 <vPortValidateInterruptPriority>
	__asm volatile
 800b6cc:	f3ef 8211 	mrs	r2, BASEPRI
 800b6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d4:	f383 8811 	msr	BASEPRI, r3
 800b6d8:	f3bf 8f6f 	isb	sy
 800b6dc:	f3bf 8f4f 	dsb	sy
 800b6e0:	617a      	str	r2, [r7, #20]
 800b6e2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b6e4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b6e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ec:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d22b      	bcs.n	800b750 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b6fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b704:	1c5a      	adds	r2, r3, #1
 800b706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b708:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b70a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b70e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b712:	d112      	bne.n	800b73a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d016      	beq.n	800b74a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71e:	3324      	adds	r3, #36	; 0x24
 800b720:	4618      	mov	r0, r3
 800b722:	f001 f871 	bl	800c808 <xTaskRemoveFromEventList>
 800b726:	4603      	mov	r3, r0
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d00e      	beq.n	800b74a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d00b      	beq.n	800b74a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	2201      	movs	r2, #1
 800b736:	601a      	str	r2, [r3, #0]
 800b738:	e007      	b.n	800b74a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b73a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b73e:	3301      	adds	r3, #1
 800b740:	b2db      	uxtb	r3, r3
 800b742:	b25a      	sxtb	r2, r3
 800b744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b74a:	2301      	movs	r3, #1
 800b74c:	637b      	str	r3, [r7, #52]	; 0x34
 800b74e:	e001      	b.n	800b754 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b750:	2300      	movs	r3, #0
 800b752:	637b      	str	r3, [r7, #52]	; 0x34
 800b754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b756:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f383 8811 	msr	BASEPRI, r3
}
 800b75e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b762:	4618      	mov	r0, r3
 800b764:	3738      	adds	r7, #56	; 0x38
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}
	...

0800b76c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b08c      	sub	sp, #48	; 0x30
 800b770:	af00      	add	r7, sp, #0
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	60b9      	str	r1, [r7, #8]
 800b776:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b778:	2300      	movs	r3, #0
 800b77a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b782:	2b00      	cmp	r3, #0
 800b784:	d10a      	bne.n	800b79c <xQueueReceive+0x30>
	__asm volatile
 800b786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78a:	f383 8811 	msr	BASEPRI, r3
 800b78e:	f3bf 8f6f 	isb	sy
 800b792:	f3bf 8f4f 	dsb	sy
 800b796:	623b      	str	r3, [r7, #32]
}
 800b798:	bf00      	nop
 800b79a:	e7fe      	b.n	800b79a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d103      	bne.n	800b7aa <xQueueReceive+0x3e>
 800b7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d101      	bne.n	800b7ae <xQueueReceive+0x42>
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	e000      	b.n	800b7b0 <xQueueReceive+0x44>
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d10a      	bne.n	800b7ca <xQueueReceive+0x5e>
	__asm volatile
 800b7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b8:	f383 8811 	msr	BASEPRI, r3
 800b7bc:	f3bf 8f6f 	isb	sy
 800b7c0:	f3bf 8f4f 	dsb	sy
 800b7c4:	61fb      	str	r3, [r7, #28]
}
 800b7c6:	bf00      	nop
 800b7c8:	e7fe      	b.n	800b7c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b7ca:	f001 f9dd 	bl	800cb88 <xTaskGetSchedulerState>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d102      	bne.n	800b7da <xQueueReceive+0x6e>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d101      	bne.n	800b7de <xQueueReceive+0x72>
 800b7da:	2301      	movs	r3, #1
 800b7dc:	e000      	b.n	800b7e0 <xQueueReceive+0x74>
 800b7de:	2300      	movs	r3, #0
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d10a      	bne.n	800b7fa <xQueueReceive+0x8e>
	__asm volatile
 800b7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e8:	f383 8811 	msr	BASEPRI, r3
 800b7ec:	f3bf 8f6f 	isb	sy
 800b7f0:	f3bf 8f4f 	dsb	sy
 800b7f4:	61bb      	str	r3, [r7, #24]
}
 800b7f6:	bf00      	nop
 800b7f8:	e7fe      	b.n	800b7f8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800b7fa:	f002 f87f 	bl	800d8fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b802:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b806:	2b00      	cmp	r3, #0
 800b808:	d01f      	beq.n	800b84a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b80a:	68b9      	ldr	r1, [r7, #8]
 800b80c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b80e:	f000 fa9a 	bl	800bd46 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b814:	1e5a      	subs	r2, r3, #1
 800b816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b818:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b81c:	691b      	ldr	r3, [r3, #16]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d00f      	beq.n	800b842 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b824:	3310      	adds	r3, #16
 800b826:	4618      	mov	r0, r3
 800b828:	f000 ffee 	bl	800c808 <xTaskRemoveFromEventList>
 800b82c:	4603      	mov	r3, r0
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d007      	beq.n	800b842 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b832:	4b3d      	ldr	r3, [pc, #244]	; (800b928 <xQueueReceive+0x1bc>)
 800b834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b838:	601a      	str	r2, [r3, #0]
 800b83a:	f3bf 8f4f 	dsb	sy
 800b83e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b842:	f002 f88b 	bl	800d95c <vPortExitCritical>
				return pdPASS;
 800b846:	2301      	movs	r3, #1
 800b848:	e069      	b.n	800b91e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d103      	bne.n	800b858 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b850:	f002 f884 	bl	800d95c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b854:	2300      	movs	r3, #0
 800b856:	e062      	b.n	800b91e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d106      	bne.n	800b86c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b85e:	f107 0310 	add.w	r3, r7, #16
 800b862:	4618      	mov	r0, r3
 800b864:	f001 f832 	bl	800c8cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b868:	2301      	movs	r3, #1
 800b86a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b86c:	f002 f876 	bl	800d95c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b870:	f000 fd98 	bl	800c3a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b874:	f002 f842 	bl	800d8fc <vPortEnterCritical>
 800b878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b87e:	b25b      	sxtb	r3, r3
 800b880:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b884:	d103      	bne.n	800b88e <xQueueReceive+0x122>
 800b886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b888:	2200      	movs	r2, #0
 800b88a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b890:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b894:	b25b      	sxtb	r3, r3
 800b896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b89a:	d103      	bne.n	800b8a4 <xQueueReceive+0x138>
 800b89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89e:	2200      	movs	r2, #0
 800b8a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8a4:	f002 f85a 	bl	800d95c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b8a8:	1d3a      	adds	r2, r7, #4
 800b8aa:	f107 0310 	add.w	r3, r7, #16
 800b8ae:	4611      	mov	r1, r2
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f001 f821 	bl	800c8f8 <xTaskCheckForTimeOut>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d123      	bne.n	800b904 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b8bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8be:	f000 faba 	bl	800be36 <prvIsQueueEmpty>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d017      	beq.n	800b8f8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ca:	3324      	adds	r3, #36	; 0x24
 800b8cc:	687a      	ldr	r2, [r7, #4]
 800b8ce:	4611      	mov	r1, r2
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f000 ff49 	bl	800c768 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b8d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8d8:	f000 fa5b 	bl	800bd92 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b8dc:	f000 fd70 	bl	800c3c0 <xTaskResumeAll>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d189      	bne.n	800b7fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b8e6:	4b10      	ldr	r3, [pc, #64]	; (800b928 <xQueueReceive+0x1bc>)
 800b8e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8ec:	601a      	str	r2, [r3, #0]
 800b8ee:	f3bf 8f4f 	dsb	sy
 800b8f2:	f3bf 8f6f 	isb	sy
 800b8f6:	e780      	b.n	800b7fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b8f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8fa:	f000 fa4a 	bl	800bd92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b8fe:	f000 fd5f 	bl	800c3c0 <xTaskResumeAll>
 800b902:	e77a      	b.n	800b7fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b906:	f000 fa44 	bl	800bd92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b90a:	f000 fd59 	bl	800c3c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b90e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b910:	f000 fa91 	bl	800be36 <prvIsQueueEmpty>
 800b914:	4603      	mov	r3, r0
 800b916:	2b00      	cmp	r3, #0
 800b918:	f43f af6f 	beq.w	800b7fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b91c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3730      	adds	r7, #48	; 0x30
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
 800b926:	bf00      	nop
 800b928:	e000ed04 	.word	0xe000ed04

0800b92c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b08e      	sub	sp, #56	; 0x38
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b936:	2300      	movs	r3, #0
 800b938:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b93e:	2300      	movs	r3, #0
 800b940:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b944:	2b00      	cmp	r3, #0
 800b946:	d10a      	bne.n	800b95e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b94c:	f383 8811 	msr	BASEPRI, r3
 800b950:	f3bf 8f6f 	isb	sy
 800b954:	f3bf 8f4f 	dsb	sy
 800b958:	623b      	str	r3, [r7, #32]
}
 800b95a:	bf00      	nop
 800b95c:	e7fe      	b.n	800b95c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b962:	2b00      	cmp	r3, #0
 800b964:	d00a      	beq.n	800b97c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b96a:	f383 8811 	msr	BASEPRI, r3
 800b96e:	f3bf 8f6f 	isb	sy
 800b972:	f3bf 8f4f 	dsb	sy
 800b976:	61fb      	str	r3, [r7, #28]
}
 800b978:	bf00      	nop
 800b97a:	e7fe      	b.n	800b97a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b97c:	f001 f904 	bl	800cb88 <xTaskGetSchedulerState>
 800b980:	4603      	mov	r3, r0
 800b982:	2b00      	cmp	r3, #0
 800b984:	d102      	bne.n	800b98c <xQueueSemaphoreTake+0x60>
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d101      	bne.n	800b990 <xQueueSemaphoreTake+0x64>
 800b98c:	2301      	movs	r3, #1
 800b98e:	e000      	b.n	800b992 <xQueueSemaphoreTake+0x66>
 800b990:	2300      	movs	r3, #0
 800b992:	2b00      	cmp	r3, #0
 800b994:	d10a      	bne.n	800b9ac <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b99a:	f383 8811 	msr	BASEPRI, r3
 800b99e:	f3bf 8f6f 	isb	sy
 800b9a2:	f3bf 8f4f 	dsb	sy
 800b9a6:	61bb      	str	r3, [r7, #24]
}
 800b9a8:	bf00      	nop
 800b9aa:	e7fe      	b.n	800b9aa <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800b9ac:	f001 ffa6 	bl	800d8fc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9b4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d024      	beq.n	800ba06 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9be:	1e5a      	subs	r2, r3, #1
 800b9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9c2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d104      	bne.n	800b9d6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800b9cc:	f001 faa6 	bl	800cf1c <pvTaskIncrementMutexHeldCount>
 800b9d0:	4602      	mov	r2, r0
 800b9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9d4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9d8:	691b      	ldr	r3, [r3, #16]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d00f      	beq.n	800b9fe <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9e0:	3310      	adds	r3, #16
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f000 ff10 	bl	800c808 <xTaskRemoveFromEventList>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d007      	beq.n	800b9fe <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b9ee:	4b54      	ldr	r3, [pc, #336]	; (800bb40 <xQueueSemaphoreTake+0x214>)
 800b9f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9f4:	601a      	str	r2, [r3, #0]
 800b9f6:	f3bf 8f4f 	dsb	sy
 800b9fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b9fe:	f001 ffad 	bl	800d95c <vPortExitCritical>
				return pdPASS;
 800ba02:	2301      	movs	r3, #1
 800ba04:	e097      	b.n	800bb36 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d111      	bne.n	800ba30 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ba0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d00a      	beq.n	800ba28 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ba12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba16:	f383 8811 	msr	BASEPRI, r3
 800ba1a:	f3bf 8f6f 	isb	sy
 800ba1e:	f3bf 8f4f 	dsb	sy
 800ba22:	617b      	str	r3, [r7, #20]
}
 800ba24:	bf00      	nop
 800ba26:	e7fe      	b.n	800ba26 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ba28:	f001 ff98 	bl	800d95c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	e082      	b.n	800bb36 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d106      	bne.n	800ba44 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba36:	f107 030c 	add.w	r3, r7, #12
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f000 ff46 	bl	800c8cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba40:	2301      	movs	r3, #1
 800ba42:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba44:	f001 ff8a 	bl	800d95c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba48:	f000 fcac 	bl	800c3a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba4c:	f001 ff56 	bl	800d8fc <vPortEnterCritical>
 800ba50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba56:	b25b      	sxtb	r3, r3
 800ba58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba5c:	d103      	bne.n	800ba66 <xQueueSemaphoreTake+0x13a>
 800ba5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba60:	2200      	movs	r2, #0
 800ba62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba6c:	b25b      	sxtb	r3, r3
 800ba6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba72:	d103      	bne.n	800ba7c <xQueueSemaphoreTake+0x150>
 800ba74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba76:	2200      	movs	r2, #0
 800ba78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba7c:	f001 ff6e 	bl	800d95c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba80:	463a      	mov	r2, r7
 800ba82:	f107 030c 	add.w	r3, r7, #12
 800ba86:	4611      	mov	r1, r2
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f000 ff35 	bl	800c8f8 <xTaskCheckForTimeOut>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d132      	bne.n	800bafa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ba96:	f000 f9ce 	bl	800be36 <prvIsQueueEmpty>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d026      	beq.n	800baee <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800baa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d109      	bne.n	800babc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800baa8:	f001 ff28 	bl	800d8fc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800baac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baae:	685b      	ldr	r3, [r3, #4]
 800bab0:	4618      	mov	r0, r3
 800bab2:	f001 f887 	bl	800cbc4 <xTaskPriorityInherit>
 800bab6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bab8:	f001 ff50 	bl	800d95c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800babc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800babe:	3324      	adds	r3, #36	; 0x24
 800bac0:	683a      	ldr	r2, [r7, #0]
 800bac2:	4611      	mov	r1, r2
 800bac4:	4618      	mov	r0, r3
 800bac6:	f000 fe4f 	bl	800c768 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800baca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bacc:	f000 f961 	bl	800bd92 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bad0:	f000 fc76 	bl	800c3c0 <xTaskResumeAll>
 800bad4:	4603      	mov	r3, r0
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	f47f af68 	bne.w	800b9ac <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800badc:	4b18      	ldr	r3, [pc, #96]	; (800bb40 <xQueueSemaphoreTake+0x214>)
 800bade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bae2:	601a      	str	r2, [r3, #0]
 800bae4:	f3bf 8f4f 	dsb	sy
 800bae8:	f3bf 8f6f 	isb	sy
 800baec:	e75e      	b.n	800b9ac <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800baee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800baf0:	f000 f94f 	bl	800bd92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800baf4:	f000 fc64 	bl	800c3c0 <xTaskResumeAll>
 800baf8:	e758      	b.n	800b9ac <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bafa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bafc:	f000 f949 	bl	800bd92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bb00:	f000 fc5e 	bl	800c3c0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb06:	f000 f996 	bl	800be36 <prvIsQueueEmpty>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	f43f af4d 	beq.w	800b9ac <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d00d      	beq.n	800bb34 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800bb18:	f001 fef0 	bl	800d8fc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bb1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb1e:	f000 f891 	bl	800bc44 <prvGetDisinheritPriorityAfterTimeout>
 800bb22:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800bb24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb26:	685b      	ldr	r3, [r3, #4]
 800bb28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f001 f956 	bl	800cddc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bb30:	f001 ff14 	bl	800d95c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bb34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3738      	adds	r7, #56	; 0x38
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	bf00      	nop
 800bb40:	e000ed04 	.word	0xe000ed04

0800bb44 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b08e      	sub	sp, #56	; 0x38
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	60f8      	str	r0, [r7, #12]
 800bb4c:	60b9      	str	r1, [r7, #8]
 800bb4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bb54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d10a      	bne.n	800bb70 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800bb5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb5e:	f383 8811 	msr	BASEPRI, r3
 800bb62:	f3bf 8f6f 	isb	sy
 800bb66:	f3bf 8f4f 	dsb	sy
 800bb6a:	623b      	str	r3, [r7, #32]
}
 800bb6c:	bf00      	nop
 800bb6e:	e7fe      	b.n	800bb6e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d103      	bne.n	800bb7e <xQueueReceiveFromISR+0x3a>
 800bb76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d101      	bne.n	800bb82 <xQueueReceiveFromISR+0x3e>
 800bb7e:	2301      	movs	r3, #1
 800bb80:	e000      	b.n	800bb84 <xQueueReceiveFromISR+0x40>
 800bb82:	2300      	movs	r3, #0
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d10a      	bne.n	800bb9e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800bb88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb8c:	f383 8811 	msr	BASEPRI, r3
 800bb90:	f3bf 8f6f 	isb	sy
 800bb94:	f3bf 8f4f 	dsb	sy
 800bb98:	61fb      	str	r3, [r7, #28]
}
 800bb9a:	bf00      	nop
 800bb9c:	e7fe      	b.n	800bb9c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb9e:	f001 ff6f 	bl	800da80 <vPortValidateInterruptPriority>
	__asm volatile
 800bba2:	f3ef 8211 	mrs	r2, BASEPRI
 800bba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbaa:	f383 8811 	msr	BASEPRI, r3
 800bbae:	f3bf 8f6f 	isb	sy
 800bbb2:	f3bf 8f4f 	dsb	sy
 800bbb6:	61ba      	str	r2, [r7, #24]
 800bbb8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bbba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bbbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bbbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbc2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bbc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d02f      	beq.n	800bc2a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bbd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bbd4:	68b9      	ldr	r1, [r7, #8]
 800bbd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbd8:	f000 f8b5 	bl	800bd46 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bbdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbde:	1e5a      	subs	r2, r3, #1
 800bbe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bbe4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bbe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbec:	d112      	bne.n	800bc14 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf0:	691b      	ldr	r3, [r3, #16]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d016      	beq.n	800bc24 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf8:	3310      	adds	r3, #16
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f000 fe04 	bl	800c808 <xTaskRemoveFromEventList>
 800bc00:	4603      	mov	r3, r0
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d00e      	beq.n	800bc24 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d00b      	beq.n	800bc24 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2201      	movs	r2, #1
 800bc10:	601a      	str	r2, [r3, #0]
 800bc12:	e007      	b.n	800bc24 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bc14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc18:	3301      	adds	r3, #1
 800bc1a:	b2db      	uxtb	r3, r3
 800bc1c:	b25a      	sxtb	r2, r3
 800bc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800bc24:	2301      	movs	r3, #1
 800bc26:	637b      	str	r3, [r7, #52]	; 0x34
 800bc28:	e001      	b.n	800bc2e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	637b      	str	r3, [r7, #52]	; 0x34
 800bc2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc30:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	f383 8811 	msr	BASEPRI, r3
}
 800bc38:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bc3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3738      	adds	r7, #56	; 0x38
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}

0800bc44 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bc44:	b480      	push	{r7}
 800bc46:	b085      	sub	sp, #20
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d006      	beq.n	800bc62 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f1c3 0307 	rsb	r3, r3, #7
 800bc5e:	60fb      	str	r3, [r7, #12]
 800bc60:	e001      	b.n	800bc66 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bc62:	2300      	movs	r3, #0
 800bc64:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bc66:	68fb      	ldr	r3, [r7, #12]
	}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3714      	adds	r7, #20
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bc80      	pop	{r7}
 800bc70:	4770      	bx	lr

0800bc72 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bc72:	b580      	push	{r7, lr}
 800bc74:	b086      	sub	sp, #24
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	60f8      	str	r0, [r7, #12]
 800bc7a:	60b9      	str	r1, [r7, #8]
 800bc7c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc86:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d10d      	bne.n	800bcac <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d14d      	bne.n	800bd34 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	685b      	ldr	r3, [r3, #4]
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f001 f817 	bl	800ccd0 <xTaskPriorityDisinherit>
 800bca2:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	2200      	movs	r2, #0
 800bca8:	605a      	str	r2, [r3, #4]
 800bcaa:	e043      	b.n	800bd34 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d119      	bne.n	800bce6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	6898      	ldr	r0, [r3, #8]
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcba:	461a      	mov	r2, r3
 800bcbc:	68b9      	ldr	r1, [r7, #8]
 800bcbe:	f002 f91f 	bl	800df00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	689a      	ldr	r2, [r3, #8]
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcca:	441a      	add	r2, r3
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	689a      	ldr	r2, [r3, #8]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	d32b      	bcc.n	800bd34 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	681a      	ldr	r2, [r3, #0]
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	609a      	str	r2, [r3, #8]
 800bce4:	e026      	b.n	800bd34 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	68d8      	ldr	r0, [r3, #12]
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcee:	461a      	mov	r2, r3
 800bcf0:	68b9      	ldr	r1, [r7, #8]
 800bcf2:	f002 f905 	bl	800df00 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	68da      	ldr	r2, [r3, #12]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcfe:	425b      	negs	r3, r3
 800bd00:	441a      	add	r2, r3
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	68da      	ldr	r2, [r3, #12]
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d207      	bcs.n	800bd22 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	685a      	ldr	r2, [r3, #4]
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd1a:	425b      	negs	r3, r3
 800bd1c:	441a      	add	r2, r3
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2b02      	cmp	r3, #2
 800bd26:	d105      	bne.n	800bd34 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d002      	beq.n	800bd34 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	3b01      	subs	r3, #1
 800bd32:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	1c5a      	adds	r2, r3, #1
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bd3c:	697b      	ldr	r3, [r7, #20]
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3718      	adds	r7, #24
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}

0800bd46 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bd46:	b580      	push	{r7, lr}
 800bd48:	b082      	sub	sp, #8
 800bd4a:	af00      	add	r7, sp, #0
 800bd4c:	6078      	str	r0, [r7, #4]
 800bd4e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d018      	beq.n	800bd8a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	68da      	ldr	r2, [r3, #12]
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd60:	441a      	add	r2, r3
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	68da      	ldr	r2, [r3, #12]
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	685b      	ldr	r3, [r3, #4]
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	d303      	bcc.n	800bd7a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681a      	ldr	r2, [r3, #0]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	68d9      	ldr	r1, [r3, #12]
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd82:	461a      	mov	r2, r3
 800bd84:	6838      	ldr	r0, [r7, #0]
 800bd86:	f002 f8bb 	bl	800df00 <memcpy>
	}
}
 800bd8a:	bf00      	nop
 800bd8c:	3708      	adds	r7, #8
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}

0800bd92 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bd92:	b580      	push	{r7, lr}
 800bd94:	b084      	sub	sp, #16
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bd9a:	f001 fdaf 	bl	800d8fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bda4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bda6:	e011      	b.n	800bdcc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d012      	beq.n	800bdd6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	3324      	adds	r3, #36	; 0x24
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f000 fd27 	bl	800c808 <xTaskRemoveFromEventList>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d001      	beq.n	800bdc4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bdc0:	f000 fdfc 	bl	800c9bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bdc4:	7bfb      	ldrb	r3, [r7, #15]
 800bdc6:	3b01      	subs	r3, #1
 800bdc8:	b2db      	uxtb	r3, r3
 800bdca:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bdcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	dce9      	bgt.n	800bda8 <prvUnlockQueue+0x16>
 800bdd4:	e000      	b.n	800bdd8 <prvUnlockQueue+0x46>
					break;
 800bdd6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	22ff      	movs	r2, #255	; 0xff
 800bddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bde0:	f001 fdbc 	bl	800d95c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bde4:	f001 fd8a 	bl	800d8fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bdee:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bdf0:	e011      	b.n	800be16 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	691b      	ldr	r3, [r3, #16]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d012      	beq.n	800be20 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	3310      	adds	r3, #16
 800bdfe:	4618      	mov	r0, r3
 800be00:	f000 fd02 	bl	800c808 <xTaskRemoveFromEventList>
 800be04:	4603      	mov	r3, r0
 800be06:	2b00      	cmp	r3, #0
 800be08:	d001      	beq.n	800be0e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800be0a:	f000 fdd7 	bl	800c9bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800be0e:	7bbb      	ldrb	r3, [r7, #14]
 800be10:	3b01      	subs	r3, #1
 800be12:	b2db      	uxtb	r3, r3
 800be14:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800be16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	dce9      	bgt.n	800bdf2 <prvUnlockQueue+0x60>
 800be1e:	e000      	b.n	800be22 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800be20:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	22ff      	movs	r2, #255	; 0xff
 800be26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800be2a:	f001 fd97 	bl	800d95c <vPortExitCritical>
}
 800be2e:	bf00      	nop
 800be30:	3710      	adds	r7, #16
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}

0800be36 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800be36:	b580      	push	{r7, lr}
 800be38:	b084      	sub	sp, #16
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800be3e:	f001 fd5d 	bl	800d8fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be46:	2b00      	cmp	r3, #0
 800be48:	d102      	bne.n	800be50 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800be4a:	2301      	movs	r3, #1
 800be4c:	60fb      	str	r3, [r7, #12]
 800be4e:	e001      	b.n	800be54 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800be50:	2300      	movs	r3, #0
 800be52:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800be54:	f001 fd82 	bl	800d95c <vPortExitCritical>

	return xReturn;
 800be58:	68fb      	ldr	r3, [r7, #12]
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3710      	adds	r7, #16
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}

0800be62 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800be62:	b580      	push	{r7, lr}
 800be64:	b084      	sub	sp, #16
 800be66:	af00      	add	r7, sp, #0
 800be68:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800be6a:	f001 fd47 	bl	800d8fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be76:	429a      	cmp	r2, r3
 800be78:	d102      	bne.n	800be80 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800be7a:	2301      	movs	r3, #1
 800be7c:	60fb      	str	r3, [r7, #12]
 800be7e:	e001      	b.n	800be84 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800be80:	2300      	movs	r3, #0
 800be82:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800be84:	f001 fd6a 	bl	800d95c <vPortExitCritical>

	return xReturn;
 800be88:	68fb      	ldr	r3, [r7, #12]
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3710      	adds	r7, #16
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
	...

0800be94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800be94:	b480      	push	{r7}
 800be96:	b085      	sub	sp, #20
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800be9e:	2300      	movs	r3, #0
 800bea0:	60fb      	str	r3, [r7, #12]
 800bea2:	e014      	b.n	800bece <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bea4:	4a0e      	ldr	r2, [pc, #56]	; (800bee0 <vQueueAddToRegistry+0x4c>)
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d10b      	bne.n	800bec8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800beb0:	490b      	ldr	r1, [pc, #44]	; (800bee0 <vQueueAddToRegistry+0x4c>)
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	683a      	ldr	r2, [r7, #0]
 800beb6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800beba:	4a09      	ldr	r2, [pc, #36]	; (800bee0 <vQueueAddToRegistry+0x4c>)
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	00db      	lsls	r3, r3, #3
 800bec0:	4413      	add	r3, r2
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bec6:	e006      	b.n	800bed6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	3301      	adds	r3, #1
 800becc:	60fb      	str	r3, [r7, #12]
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	2b07      	cmp	r3, #7
 800bed2:	d9e7      	bls.n	800bea4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bed4:	bf00      	nop
 800bed6:	bf00      	nop
 800bed8:	3714      	adds	r7, #20
 800beda:	46bd      	mov	sp, r7
 800bedc:	bc80      	pop	{r7}
 800bede:	4770      	bx	lr
 800bee0:	200030e0 	.word	0x200030e0

0800bee4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b086      	sub	sp, #24
 800bee8:	af00      	add	r7, sp, #0
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	60b9      	str	r1, [r7, #8]
 800beee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bef4:	f001 fd02 	bl	800d8fc <vPortEnterCritical>
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800befe:	b25b      	sxtb	r3, r3
 800bf00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf04:	d103      	bne.n	800bf0e <vQueueWaitForMessageRestricted+0x2a>
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf14:	b25b      	sxtb	r3, r3
 800bf16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf1a:	d103      	bne.n	800bf24 <vQueueWaitForMessageRestricted+0x40>
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf24:	f001 fd1a 	bl	800d95c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bf28:	697b      	ldr	r3, [r7, #20]
 800bf2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d106      	bne.n	800bf3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	3324      	adds	r3, #36	; 0x24
 800bf34:	687a      	ldr	r2, [r7, #4]
 800bf36:	68b9      	ldr	r1, [r7, #8]
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f000 fc39 	bl	800c7b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bf3e:	6978      	ldr	r0, [r7, #20]
 800bf40:	f7ff ff27 	bl	800bd92 <prvUnlockQueue>
	}
 800bf44:	bf00      	nop
 800bf46:	3718      	adds	r7, #24
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}

0800bf4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b08e      	sub	sp, #56	; 0x38
 800bf50:	af04      	add	r7, sp, #16
 800bf52:	60f8      	str	r0, [r7, #12]
 800bf54:	60b9      	str	r1, [r7, #8]
 800bf56:	607a      	str	r2, [r7, #4]
 800bf58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bf5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d10a      	bne.n	800bf76 <xTaskCreateStatic+0x2a>
	__asm volatile
 800bf60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf64:	f383 8811 	msr	BASEPRI, r3
 800bf68:	f3bf 8f6f 	isb	sy
 800bf6c:	f3bf 8f4f 	dsb	sy
 800bf70:	623b      	str	r3, [r7, #32]
}
 800bf72:	bf00      	nop
 800bf74:	e7fe      	b.n	800bf74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bf76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d10a      	bne.n	800bf92 <xTaskCreateStatic+0x46>
	__asm volatile
 800bf7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf80:	f383 8811 	msr	BASEPRI, r3
 800bf84:	f3bf 8f6f 	isb	sy
 800bf88:	f3bf 8f4f 	dsb	sy
 800bf8c:	61fb      	str	r3, [r7, #28]
}
 800bf8e:	bf00      	nop
 800bf90:	e7fe      	b.n	800bf90 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bf92:	2354      	movs	r3, #84	; 0x54
 800bf94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	2b54      	cmp	r3, #84	; 0x54
 800bf9a:	d00a      	beq.n	800bfb2 <xTaskCreateStatic+0x66>
	__asm volatile
 800bf9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa0:	f383 8811 	msr	BASEPRI, r3
 800bfa4:	f3bf 8f6f 	isb	sy
 800bfa8:	f3bf 8f4f 	dsb	sy
 800bfac:	61bb      	str	r3, [r7, #24]
}
 800bfae:	bf00      	nop
 800bfb0:	e7fe      	b.n	800bfb0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bfb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d01e      	beq.n	800bff6 <xTaskCreateStatic+0xaa>
 800bfb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d01b      	beq.n	800bff6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bfbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bfc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bfc6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bfc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfca:	2202      	movs	r2, #2
 800bfcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	9303      	str	r3, [sp, #12]
 800bfd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd6:	9302      	str	r3, [sp, #8]
 800bfd8:	f107 0314 	add.w	r3, r7, #20
 800bfdc:	9301      	str	r3, [sp, #4]
 800bfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe0:	9300      	str	r3, [sp, #0]
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	687a      	ldr	r2, [r7, #4]
 800bfe6:	68b9      	ldr	r1, [r7, #8]
 800bfe8:	68f8      	ldr	r0, [r7, #12]
 800bfea:	f000 f850 	bl	800c08e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bfee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bff0:	f000 f8d4 	bl	800c19c <prvAddNewTaskToReadyList>
 800bff4:	e001      	b.n	800bffa <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800bff6:	2300      	movs	r3, #0
 800bff8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bffa:	697b      	ldr	r3, [r7, #20]
	}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3728      	adds	r7, #40	; 0x28
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}

0800c004 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c004:	b580      	push	{r7, lr}
 800c006:	b08c      	sub	sp, #48	; 0x30
 800c008:	af04      	add	r7, sp, #16
 800c00a:	60f8      	str	r0, [r7, #12]
 800c00c:	60b9      	str	r1, [r7, #8]
 800c00e:	603b      	str	r3, [r7, #0]
 800c010:	4613      	mov	r3, r2
 800c012:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c014:	88fb      	ldrh	r3, [r7, #6]
 800c016:	009b      	lsls	r3, r3, #2
 800c018:	4618      	mov	r0, r3
 800c01a:	f001 fd6f 	bl	800dafc <pvPortMalloc>
 800c01e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d00e      	beq.n	800c044 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800c026:	2054      	movs	r0, #84	; 0x54
 800c028:	f001 fd68 	bl	800dafc <pvPortMalloc>
 800c02c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c02e:	69fb      	ldr	r3, [r7, #28]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d003      	beq.n	800c03c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c034:	69fb      	ldr	r3, [r7, #28]
 800c036:	697a      	ldr	r2, [r7, #20]
 800c038:	631a      	str	r2, [r3, #48]	; 0x30
 800c03a:	e005      	b.n	800c048 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c03c:	6978      	ldr	r0, [r7, #20]
 800c03e:	f001 fe21 	bl	800dc84 <vPortFree>
 800c042:	e001      	b.n	800c048 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c044:	2300      	movs	r3, #0
 800c046:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c048:	69fb      	ldr	r3, [r7, #28]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d017      	beq.n	800c07e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c04e:	69fb      	ldr	r3, [r7, #28]
 800c050:	2200      	movs	r2, #0
 800c052:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c056:	88fa      	ldrh	r2, [r7, #6]
 800c058:	2300      	movs	r3, #0
 800c05a:	9303      	str	r3, [sp, #12]
 800c05c:	69fb      	ldr	r3, [r7, #28]
 800c05e:	9302      	str	r3, [sp, #8]
 800c060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c062:	9301      	str	r3, [sp, #4]
 800c064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c066:	9300      	str	r3, [sp, #0]
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	68b9      	ldr	r1, [r7, #8]
 800c06c:	68f8      	ldr	r0, [r7, #12]
 800c06e:	f000 f80e 	bl	800c08e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c072:	69f8      	ldr	r0, [r7, #28]
 800c074:	f000 f892 	bl	800c19c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c078:	2301      	movs	r3, #1
 800c07a:	61bb      	str	r3, [r7, #24]
 800c07c:	e002      	b.n	800c084 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c07e:	f04f 33ff 	mov.w	r3, #4294967295
 800c082:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c084:	69bb      	ldr	r3, [r7, #24]
	}
 800c086:	4618      	mov	r0, r3
 800c088:	3720      	adds	r7, #32
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}

0800c08e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c08e:	b580      	push	{r7, lr}
 800c090:	b088      	sub	sp, #32
 800c092:	af00      	add	r7, sp, #0
 800c094:	60f8      	str	r0, [r7, #12]
 800c096:	60b9      	str	r1, [r7, #8]
 800c098:	607a      	str	r2, [r7, #4]
 800c09a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	461a      	mov	r2, r3
 800c0a6:	21a5      	movs	r1, #165	; 0xa5
 800c0a8:	f001 ff38 	bl	800df1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800c0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c0b6:	3b01      	subs	r3, #1
 800c0b8:	009b      	lsls	r3, r3, #2
 800c0ba:	4413      	add	r3, r2
 800c0bc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800c0be:	69bb      	ldr	r3, [r7, #24]
 800c0c0:	f023 0307 	bic.w	r3, r3, #7
 800c0c4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c0c6:	69bb      	ldr	r3, [r7, #24]
 800c0c8:	f003 0307 	and.w	r3, r3, #7
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d00a      	beq.n	800c0e6 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d4:	f383 8811 	msr	BASEPRI, r3
 800c0d8:	f3bf 8f6f 	isb	sy
 800c0dc:	f3bf 8f4f 	dsb	sy
 800c0e0:	617b      	str	r3, [r7, #20]
}
 800c0e2:	bf00      	nop
 800c0e4:	e7fe      	b.n	800c0e4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	61fb      	str	r3, [r7, #28]
 800c0ea:	e012      	b.n	800c112 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c0ec:	68ba      	ldr	r2, [r7, #8]
 800c0ee:	69fb      	ldr	r3, [r7, #28]
 800c0f0:	4413      	add	r3, r2
 800c0f2:	7819      	ldrb	r1, [r3, #0]
 800c0f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0f6:	69fb      	ldr	r3, [r7, #28]
 800c0f8:	4413      	add	r3, r2
 800c0fa:	3334      	adds	r3, #52	; 0x34
 800c0fc:	460a      	mov	r2, r1
 800c0fe:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800c100:	68ba      	ldr	r2, [r7, #8]
 800c102:	69fb      	ldr	r3, [r7, #28]
 800c104:	4413      	add	r3, r2
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d006      	beq.n	800c11a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c10c:	69fb      	ldr	r3, [r7, #28]
 800c10e:	3301      	adds	r3, #1
 800c110:	61fb      	str	r3, [r7, #28]
 800c112:	69fb      	ldr	r3, [r7, #28]
 800c114:	2b0f      	cmp	r3, #15
 800c116:	d9e9      	bls.n	800c0ec <prvInitialiseNewTask+0x5e>
 800c118:	e000      	b.n	800c11c <prvInitialiseNewTask+0x8e>
		{
			break;
 800c11a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11e:	2200      	movs	r2, #0
 800c120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c126:	2b06      	cmp	r3, #6
 800c128:	d901      	bls.n	800c12e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c12a:	2306      	movs	r3, #6
 800c12c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c132:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c136:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c138:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c13c:	2200      	movs	r2, #0
 800c13e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c142:	3304      	adds	r3, #4
 800c144:	4618      	mov	r0, r3
 800c146:	f7fe ff21 	bl	800af8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c14c:	3318      	adds	r3, #24
 800c14e:	4618      	mov	r0, r3
 800c150:	f7fe ff1c 	bl	800af8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c158:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c15c:	f1c3 0207 	rsb	r2, r3, #7
 800c160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c162:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c168:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16c:	2200      	movs	r2, #0
 800c16e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c172:	2200      	movs	r2, #0
 800c174:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c178:	683a      	ldr	r2, [r7, #0]
 800c17a:	68f9      	ldr	r1, [r7, #12]
 800c17c:	69b8      	ldr	r0, [r7, #24]
 800c17e:	f001 facf 	bl	800d720 <pxPortInitialiseStack>
 800c182:	4602      	mov	r2, r0
 800c184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c186:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800c188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d002      	beq.n	800c194 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c192:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c194:	bf00      	nop
 800c196:	3720      	adds	r7, #32
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}

0800c19c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b082      	sub	sp, #8
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c1a4:	f001 fbaa 	bl	800d8fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c1a8:	4b2a      	ldr	r3, [pc, #168]	; (800c254 <prvAddNewTaskToReadyList+0xb8>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	3301      	adds	r3, #1
 800c1ae:	4a29      	ldr	r2, [pc, #164]	; (800c254 <prvAddNewTaskToReadyList+0xb8>)
 800c1b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c1b2:	4b29      	ldr	r3, [pc, #164]	; (800c258 <prvAddNewTaskToReadyList+0xbc>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d109      	bne.n	800c1ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c1ba:	4a27      	ldr	r2, [pc, #156]	; (800c258 <prvAddNewTaskToReadyList+0xbc>)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c1c0:	4b24      	ldr	r3, [pc, #144]	; (800c254 <prvAddNewTaskToReadyList+0xb8>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d110      	bne.n	800c1ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c1c8:	f000 fc1c 	bl	800ca04 <prvInitialiseTaskLists>
 800c1cc:	e00d      	b.n	800c1ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c1ce:	4b23      	ldr	r3, [pc, #140]	; (800c25c <prvAddNewTaskToReadyList+0xc0>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d109      	bne.n	800c1ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c1d6:	4b20      	ldr	r3, [pc, #128]	; (800c258 <prvAddNewTaskToReadyList+0xbc>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	d802      	bhi.n	800c1ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c1e4:	4a1c      	ldr	r2, [pc, #112]	; (800c258 <prvAddNewTaskToReadyList+0xbc>)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c1ea:	4b1d      	ldr	r3, [pc, #116]	; (800c260 <prvAddNewTaskToReadyList+0xc4>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	4a1b      	ldr	r2, [pc, #108]	; (800c260 <prvAddNewTaskToReadyList+0xc4>)
 800c1f2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1f8:	2201      	movs	r2, #1
 800c1fa:	409a      	lsls	r2, r3
 800c1fc:	4b19      	ldr	r3, [pc, #100]	; (800c264 <prvAddNewTaskToReadyList+0xc8>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	4313      	orrs	r3, r2
 800c202:	4a18      	ldr	r2, [pc, #96]	; (800c264 <prvAddNewTaskToReadyList+0xc8>)
 800c204:	6013      	str	r3, [r2, #0]
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c20a:	4613      	mov	r3, r2
 800c20c:	009b      	lsls	r3, r3, #2
 800c20e:	4413      	add	r3, r2
 800c210:	009b      	lsls	r3, r3, #2
 800c212:	4a15      	ldr	r2, [pc, #84]	; (800c268 <prvAddNewTaskToReadyList+0xcc>)
 800c214:	441a      	add	r2, r3
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	3304      	adds	r3, #4
 800c21a:	4619      	mov	r1, r3
 800c21c:	4610      	mov	r0, r2
 800c21e:	f7fe fec1 	bl	800afa4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c222:	f001 fb9b 	bl	800d95c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c226:	4b0d      	ldr	r3, [pc, #52]	; (800c25c <prvAddNewTaskToReadyList+0xc0>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d00e      	beq.n	800c24c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c22e:	4b0a      	ldr	r3, [pc, #40]	; (800c258 <prvAddNewTaskToReadyList+0xbc>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c238:	429a      	cmp	r2, r3
 800c23a:	d207      	bcs.n	800c24c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c23c:	4b0b      	ldr	r3, [pc, #44]	; (800c26c <prvAddNewTaskToReadyList+0xd0>)
 800c23e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c242:	601a      	str	r2, [r3, #0]
 800c244:	f3bf 8f4f 	dsb	sy
 800c248:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c24c:	bf00      	nop
 800c24e:	3708      	adds	r7, #8
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}
 800c254:	20000e20 	.word	0x20000e20
 800c258:	20000d20 	.word	0x20000d20
 800c25c:	20000e2c 	.word	0x20000e2c
 800c260:	20000e3c 	.word	0x20000e3c
 800c264:	20000e28 	.word	0x20000e28
 800c268:	20000d24 	.word	0x20000d24
 800c26c:	e000ed04 	.word	0xe000ed04

0800c270 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c270:	b580      	push	{r7, lr}
 800c272:	b084      	sub	sp, #16
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c278:	2300      	movs	r3, #0
 800c27a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d017      	beq.n	800c2b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c282:	4b13      	ldr	r3, [pc, #76]	; (800c2d0 <vTaskDelay+0x60>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d00a      	beq.n	800c2a0 <vTaskDelay+0x30>
	__asm volatile
 800c28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c28e:	f383 8811 	msr	BASEPRI, r3
 800c292:	f3bf 8f6f 	isb	sy
 800c296:	f3bf 8f4f 	dsb	sy
 800c29a:	60bb      	str	r3, [r7, #8]
}
 800c29c:	bf00      	nop
 800c29e:	e7fe      	b.n	800c29e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c2a0:	f000 f880 	bl	800c3a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c2a4:	2100      	movs	r1, #0
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f000 fe4c 	bl	800cf44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c2ac:	f000 f888 	bl	800c3c0 <xTaskResumeAll>
 800c2b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d107      	bne.n	800c2c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c2b8:	4b06      	ldr	r3, [pc, #24]	; (800c2d4 <vTaskDelay+0x64>)
 800c2ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2be:	601a      	str	r2, [r3, #0]
 800c2c0:	f3bf 8f4f 	dsb	sy
 800c2c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c2c8:	bf00      	nop
 800c2ca:	3710      	adds	r7, #16
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}
 800c2d0:	20000e48 	.word	0x20000e48
 800c2d4:	e000ed04 	.word	0xe000ed04

0800c2d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b08a      	sub	sp, #40	; 0x28
 800c2dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c2e6:	463a      	mov	r2, r7
 800c2e8:	1d39      	adds	r1, r7, #4
 800c2ea:	f107 0308 	add.w	r3, r7, #8
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7f8 f898 	bl	8004424 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c2f4:	6839      	ldr	r1, [r7, #0]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	68ba      	ldr	r2, [r7, #8]
 800c2fa:	9202      	str	r2, [sp, #8]
 800c2fc:	9301      	str	r3, [sp, #4]
 800c2fe:	2300      	movs	r3, #0
 800c300:	9300      	str	r3, [sp, #0]
 800c302:	2300      	movs	r3, #0
 800c304:	460a      	mov	r2, r1
 800c306:	4921      	ldr	r1, [pc, #132]	; (800c38c <vTaskStartScheduler+0xb4>)
 800c308:	4821      	ldr	r0, [pc, #132]	; (800c390 <vTaskStartScheduler+0xb8>)
 800c30a:	f7ff fe1f 	bl	800bf4c <xTaskCreateStatic>
 800c30e:	4603      	mov	r3, r0
 800c310:	4a20      	ldr	r2, [pc, #128]	; (800c394 <vTaskStartScheduler+0xbc>)
 800c312:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c314:	4b1f      	ldr	r3, [pc, #124]	; (800c394 <vTaskStartScheduler+0xbc>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d002      	beq.n	800c322 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c31c:	2301      	movs	r3, #1
 800c31e:	617b      	str	r3, [r7, #20]
 800c320:	e001      	b.n	800c326 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c322:	2300      	movs	r3, #0
 800c324:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	2b01      	cmp	r3, #1
 800c32a:	d102      	bne.n	800c332 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c32c:	f000 fe70 	bl	800d010 <xTimerCreateTimerTask>
 800c330:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	2b01      	cmp	r3, #1
 800c336:	d116      	bne.n	800c366 <vTaskStartScheduler+0x8e>
	__asm volatile
 800c338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c33c:	f383 8811 	msr	BASEPRI, r3
 800c340:	f3bf 8f6f 	isb	sy
 800c344:	f3bf 8f4f 	dsb	sy
 800c348:	613b      	str	r3, [r7, #16]
}
 800c34a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c34c:	4b12      	ldr	r3, [pc, #72]	; (800c398 <vTaskStartScheduler+0xc0>)
 800c34e:	f04f 32ff 	mov.w	r2, #4294967295
 800c352:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c354:	4b11      	ldr	r3, [pc, #68]	; (800c39c <vTaskStartScheduler+0xc4>)
 800c356:	2201      	movs	r2, #1
 800c358:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800c35a:	4b11      	ldr	r3, [pc, #68]	; (800c3a0 <vTaskStartScheduler+0xc8>)
 800c35c:	2200      	movs	r2, #0
 800c35e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c360:	f001 fa5a 	bl	800d818 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c364:	e00e      	b.n	800c384 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c36c:	d10a      	bne.n	800c384 <vTaskStartScheduler+0xac>
	__asm volatile
 800c36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c372:	f383 8811 	msr	BASEPRI, r3
 800c376:	f3bf 8f6f 	isb	sy
 800c37a:	f3bf 8f4f 	dsb	sy
 800c37e:	60fb      	str	r3, [r7, #12]
}
 800c380:	bf00      	nop
 800c382:	e7fe      	b.n	800c382 <vTaskStartScheduler+0xaa>
}
 800c384:	bf00      	nop
 800c386:	3718      	adds	r7, #24
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}
 800c38c:	08010180 	.word	0x08010180
 800c390:	0800c9d5 	.word	0x0800c9d5
 800c394:	20000e44 	.word	0x20000e44
 800c398:	20000e40 	.word	0x20000e40
 800c39c:	20000e2c 	.word	0x20000e2c
 800c3a0:	20000e24 	.word	0x20000e24

0800c3a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c3a8:	4b04      	ldr	r3, [pc, #16]	; (800c3bc <vTaskSuspendAll+0x18>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	3301      	adds	r3, #1
 800c3ae:	4a03      	ldr	r2, [pc, #12]	; (800c3bc <vTaskSuspendAll+0x18>)
 800c3b0:	6013      	str	r3, [r2, #0]
}
 800c3b2:	bf00      	nop
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bc80      	pop	{r7}
 800c3b8:	4770      	bx	lr
 800c3ba:	bf00      	nop
 800c3bc:	20000e48 	.word	0x20000e48

0800c3c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b084      	sub	sp, #16
 800c3c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c3ce:	4b41      	ldr	r3, [pc, #260]	; (800c4d4 <xTaskResumeAll+0x114>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d10a      	bne.n	800c3ec <xTaskResumeAll+0x2c>
	__asm volatile
 800c3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3da:	f383 8811 	msr	BASEPRI, r3
 800c3de:	f3bf 8f6f 	isb	sy
 800c3e2:	f3bf 8f4f 	dsb	sy
 800c3e6:	603b      	str	r3, [r7, #0]
}
 800c3e8:	bf00      	nop
 800c3ea:	e7fe      	b.n	800c3ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c3ec:	f001 fa86 	bl	800d8fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c3f0:	4b38      	ldr	r3, [pc, #224]	; (800c4d4 <xTaskResumeAll+0x114>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	3b01      	subs	r3, #1
 800c3f6:	4a37      	ldr	r2, [pc, #220]	; (800c4d4 <xTaskResumeAll+0x114>)
 800c3f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3fa:	4b36      	ldr	r3, [pc, #216]	; (800c4d4 <xTaskResumeAll+0x114>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d161      	bne.n	800c4c6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c402:	4b35      	ldr	r3, [pc, #212]	; (800c4d8 <xTaskResumeAll+0x118>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d05d      	beq.n	800c4c6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c40a:	e02e      	b.n	800c46a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800c40c:	4b33      	ldr	r3, [pc, #204]	; (800c4dc <xTaskResumeAll+0x11c>)
 800c40e:	68db      	ldr	r3, [r3, #12]
 800c410:	68db      	ldr	r3, [r3, #12]
 800c412:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	3318      	adds	r3, #24
 800c418:	4618      	mov	r0, r3
 800c41a:	f7fe fe1e 	bl	800b05a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	3304      	adds	r3, #4
 800c422:	4618      	mov	r0, r3
 800c424:	f7fe fe19 	bl	800b05a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c42c:	2201      	movs	r2, #1
 800c42e:	409a      	lsls	r2, r3
 800c430:	4b2b      	ldr	r3, [pc, #172]	; (800c4e0 <xTaskResumeAll+0x120>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	4313      	orrs	r3, r2
 800c436:	4a2a      	ldr	r2, [pc, #168]	; (800c4e0 <xTaskResumeAll+0x120>)
 800c438:	6013      	str	r3, [r2, #0]
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c43e:	4613      	mov	r3, r2
 800c440:	009b      	lsls	r3, r3, #2
 800c442:	4413      	add	r3, r2
 800c444:	009b      	lsls	r3, r3, #2
 800c446:	4a27      	ldr	r2, [pc, #156]	; (800c4e4 <xTaskResumeAll+0x124>)
 800c448:	441a      	add	r2, r3
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	3304      	adds	r3, #4
 800c44e:	4619      	mov	r1, r3
 800c450:	4610      	mov	r0, r2
 800c452:	f7fe fda7 	bl	800afa4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c45a:	4b23      	ldr	r3, [pc, #140]	; (800c4e8 <xTaskResumeAll+0x128>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c460:	429a      	cmp	r2, r3
 800c462:	d302      	bcc.n	800c46a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c464:	4b21      	ldr	r3, [pc, #132]	; (800c4ec <xTaskResumeAll+0x12c>)
 800c466:	2201      	movs	r2, #1
 800c468:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c46a:	4b1c      	ldr	r3, [pc, #112]	; (800c4dc <xTaskResumeAll+0x11c>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d1cc      	bne.n	800c40c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d001      	beq.n	800c47c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c478:	f000 fb62 	bl	800cb40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c47c:	4b1c      	ldr	r3, [pc, #112]	; (800c4f0 <xTaskResumeAll+0x130>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d010      	beq.n	800c4aa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c488:	f000 f856 	bl	800c538 <xTaskIncrementTick>
 800c48c:	4603      	mov	r3, r0
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d002      	beq.n	800c498 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c492:	4b16      	ldr	r3, [pc, #88]	; (800c4ec <xTaskResumeAll+0x12c>)
 800c494:	2201      	movs	r2, #1
 800c496:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	3b01      	subs	r3, #1
 800c49c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d1f1      	bne.n	800c488 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800c4a4:	4b12      	ldr	r3, [pc, #72]	; (800c4f0 <xTaskResumeAll+0x130>)
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c4aa:	4b10      	ldr	r3, [pc, #64]	; (800c4ec <xTaskResumeAll+0x12c>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d009      	beq.n	800c4c6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c4b6:	4b0f      	ldr	r3, [pc, #60]	; (800c4f4 <xTaskResumeAll+0x134>)
 800c4b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4bc:	601a      	str	r2, [r3, #0]
 800c4be:	f3bf 8f4f 	dsb	sy
 800c4c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c4c6:	f001 fa49 	bl	800d95c <vPortExitCritical>

	return xAlreadyYielded;
 800c4ca:	68bb      	ldr	r3, [r7, #8]
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3710      	adds	r7, #16
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}
 800c4d4:	20000e48 	.word	0x20000e48
 800c4d8:	20000e20 	.word	0x20000e20
 800c4dc:	20000de0 	.word	0x20000de0
 800c4e0:	20000e28 	.word	0x20000e28
 800c4e4:	20000d24 	.word	0x20000d24
 800c4e8:	20000d20 	.word	0x20000d20
 800c4ec:	20000e34 	.word	0x20000e34
 800c4f0:	20000e30 	.word	0x20000e30
 800c4f4:	e000ed04 	.word	0xe000ed04

0800c4f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b083      	sub	sp, #12
 800c4fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c4fe:	4b04      	ldr	r3, [pc, #16]	; (800c510 <xTaskGetTickCount+0x18>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c504:	687b      	ldr	r3, [r7, #4]
}
 800c506:	4618      	mov	r0, r3
 800c508:	370c      	adds	r7, #12
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bc80      	pop	{r7}
 800c50e:	4770      	bx	lr
 800c510:	20000e24 	.word	0x20000e24

0800c514 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b082      	sub	sp, #8
 800c518:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c51a:	f001 fab1 	bl	800da80 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c51e:	2300      	movs	r3, #0
 800c520:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c522:	4b04      	ldr	r3, [pc, #16]	; (800c534 <xTaskGetTickCountFromISR+0x20>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c528:	683b      	ldr	r3, [r7, #0]
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3708      	adds	r7, #8
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}
 800c532:	bf00      	nop
 800c534:	20000e24 	.word	0x20000e24

0800c538 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b086      	sub	sp, #24
 800c53c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c53e:	2300      	movs	r3, #0
 800c540:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c542:	4b51      	ldr	r3, [pc, #324]	; (800c688 <xTaskIncrementTick+0x150>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	2b00      	cmp	r3, #0
 800c548:	f040 808d 	bne.w	800c666 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c54c:	4b4f      	ldr	r3, [pc, #316]	; (800c68c <xTaskIncrementTick+0x154>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	3301      	adds	r3, #1
 800c552:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c554:	4a4d      	ldr	r2, [pc, #308]	; (800c68c <xTaskIncrementTick+0x154>)
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c55a:	693b      	ldr	r3, [r7, #16]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d120      	bne.n	800c5a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c560:	4b4b      	ldr	r3, [pc, #300]	; (800c690 <xTaskIncrementTick+0x158>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d00a      	beq.n	800c580 <xTaskIncrementTick+0x48>
	__asm volatile
 800c56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c56e:	f383 8811 	msr	BASEPRI, r3
 800c572:	f3bf 8f6f 	isb	sy
 800c576:	f3bf 8f4f 	dsb	sy
 800c57a:	603b      	str	r3, [r7, #0]
}
 800c57c:	bf00      	nop
 800c57e:	e7fe      	b.n	800c57e <xTaskIncrementTick+0x46>
 800c580:	4b43      	ldr	r3, [pc, #268]	; (800c690 <xTaskIncrementTick+0x158>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	60fb      	str	r3, [r7, #12]
 800c586:	4b43      	ldr	r3, [pc, #268]	; (800c694 <xTaskIncrementTick+0x15c>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	4a41      	ldr	r2, [pc, #260]	; (800c690 <xTaskIncrementTick+0x158>)
 800c58c:	6013      	str	r3, [r2, #0]
 800c58e:	4a41      	ldr	r2, [pc, #260]	; (800c694 <xTaskIncrementTick+0x15c>)
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	6013      	str	r3, [r2, #0]
 800c594:	4b40      	ldr	r3, [pc, #256]	; (800c698 <xTaskIncrementTick+0x160>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	3301      	adds	r3, #1
 800c59a:	4a3f      	ldr	r2, [pc, #252]	; (800c698 <xTaskIncrementTick+0x160>)
 800c59c:	6013      	str	r3, [r2, #0]
 800c59e:	f000 facf 	bl	800cb40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c5a2:	4b3e      	ldr	r3, [pc, #248]	; (800c69c <xTaskIncrementTick+0x164>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	693a      	ldr	r2, [r7, #16]
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d34d      	bcc.n	800c648 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c5ac:	4b38      	ldr	r3, [pc, #224]	; (800c690 <xTaskIncrementTick+0x158>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d101      	bne.n	800c5ba <xTaskIncrementTick+0x82>
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	e000      	b.n	800c5bc <xTaskIncrementTick+0x84>
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d004      	beq.n	800c5ca <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5c0:	4b36      	ldr	r3, [pc, #216]	; (800c69c <xTaskIncrementTick+0x164>)
 800c5c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c5c6:	601a      	str	r2, [r3, #0]
					break;
 800c5c8:	e03e      	b.n	800c648 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c5ca:	4b31      	ldr	r3, [pc, #196]	; (800c690 <xTaskIncrementTick+0x158>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	68db      	ldr	r3, [r3, #12]
 800c5d0:	68db      	ldr	r3, [r3, #12]
 800c5d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	685b      	ldr	r3, [r3, #4]
 800c5d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c5da:	693a      	ldr	r2, [r7, #16]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d203      	bcs.n	800c5ea <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c5e2:	4a2e      	ldr	r2, [pc, #184]	; (800c69c <xTaskIncrementTick+0x164>)
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6013      	str	r3, [r2, #0]
						break;
 800c5e8:	e02e      	b.n	800c648 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	3304      	adds	r3, #4
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f7fe fd33 	bl	800b05a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d004      	beq.n	800c606 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	3318      	adds	r3, #24
 800c600:	4618      	mov	r0, r3
 800c602:	f7fe fd2a 	bl	800b05a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c60a:	2201      	movs	r2, #1
 800c60c:	409a      	lsls	r2, r3
 800c60e:	4b24      	ldr	r3, [pc, #144]	; (800c6a0 <xTaskIncrementTick+0x168>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	4313      	orrs	r3, r2
 800c614:	4a22      	ldr	r2, [pc, #136]	; (800c6a0 <xTaskIncrementTick+0x168>)
 800c616:	6013      	str	r3, [r2, #0]
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c61c:	4613      	mov	r3, r2
 800c61e:	009b      	lsls	r3, r3, #2
 800c620:	4413      	add	r3, r2
 800c622:	009b      	lsls	r3, r3, #2
 800c624:	4a1f      	ldr	r2, [pc, #124]	; (800c6a4 <xTaskIncrementTick+0x16c>)
 800c626:	441a      	add	r2, r3
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	3304      	adds	r3, #4
 800c62c:	4619      	mov	r1, r3
 800c62e:	4610      	mov	r0, r2
 800c630:	f7fe fcb8 	bl	800afa4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c638:	4b1b      	ldr	r3, [pc, #108]	; (800c6a8 <xTaskIncrementTick+0x170>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c63e:	429a      	cmp	r2, r3
 800c640:	d3b4      	bcc.n	800c5ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c642:	2301      	movs	r3, #1
 800c644:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c646:	e7b1      	b.n	800c5ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c648:	4b17      	ldr	r3, [pc, #92]	; (800c6a8 <xTaskIncrementTick+0x170>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c64e:	4915      	ldr	r1, [pc, #84]	; (800c6a4 <xTaskIncrementTick+0x16c>)
 800c650:	4613      	mov	r3, r2
 800c652:	009b      	lsls	r3, r3, #2
 800c654:	4413      	add	r3, r2
 800c656:	009b      	lsls	r3, r3, #2
 800c658:	440b      	add	r3, r1
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	d907      	bls.n	800c670 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800c660:	2301      	movs	r3, #1
 800c662:	617b      	str	r3, [r7, #20]
 800c664:	e004      	b.n	800c670 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c666:	4b11      	ldr	r3, [pc, #68]	; (800c6ac <xTaskIncrementTick+0x174>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	3301      	adds	r3, #1
 800c66c:	4a0f      	ldr	r2, [pc, #60]	; (800c6ac <xTaskIncrementTick+0x174>)
 800c66e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c670:	4b0f      	ldr	r3, [pc, #60]	; (800c6b0 <xTaskIncrementTick+0x178>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d001      	beq.n	800c67c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800c678:	2301      	movs	r3, #1
 800c67a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c67c:	697b      	ldr	r3, [r7, #20]
}
 800c67e:	4618      	mov	r0, r3
 800c680:	3718      	adds	r7, #24
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}
 800c686:	bf00      	nop
 800c688:	20000e48 	.word	0x20000e48
 800c68c:	20000e24 	.word	0x20000e24
 800c690:	20000dd8 	.word	0x20000dd8
 800c694:	20000ddc 	.word	0x20000ddc
 800c698:	20000e38 	.word	0x20000e38
 800c69c:	20000e40 	.word	0x20000e40
 800c6a0:	20000e28 	.word	0x20000e28
 800c6a4:	20000d24 	.word	0x20000d24
 800c6a8:	20000d20 	.word	0x20000d20
 800c6ac:	20000e30 	.word	0x20000e30
 800c6b0:	20000e34 	.word	0x20000e34

0800c6b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	b087      	sub	sp, #28
 800c6b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c6ba:	4b26      	ldr	r3, [pc, #152]	; (800c754 <vTaskSwitchContext+0xa0>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d003      	beq.n	800c6ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c6c2:	4b25      	ldr	r3, [pc, #148]	; (800c758 <vTaskSwitchContext+0xa4>)
 800c6c4:	2201      	movs	r2, #1
 800c6c6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c6c8:	e03f      	b.n	800c74a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800c6ca:	4b23      	ldr	r3, [pc, #140]	; (800c758 <vTaskSwitchContext+0xa4>)
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800c6d0:	4b22      	ldr	r3, [pc, #136]	; (800c75c <vTaskSwitchContext+0xa8>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	fab3 f383 	clz	r3, r3
 800c6dc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c6de:	7afb      	ldrb	r3, [r7, #11]
 800c6e0:	f1c3 031f 	rsb	r3, r3, #31
 800c6e4:	617b      	str	r3, [r7, #20]
 800c6e6:	491e      	ldr	r1, [pc, #120]	; (800c760 <vTaskSwitchContext+0xac>)
 800c6e8:	697a      	ldr	r2, [r7, #20]
 800c6ea:	4613      	mov	r3, r2
 800c6ec:	009b      	lsls	r3, r3, #2
 800c6ee:	4413      	add	r3, r2
 800c6f0:	009b      	lsls	r3, r3, #2
 800c6f2:	440b      	add	r3, r1
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d10a      	bne.n	800c710 <vTaskSwitchContext+0x5c>
	__asm volatile
 800c6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6fe:	f383 8811 	msr	BASEPRI, r3
 800c702:	f3bf 8f6f 	isb	sy
 800c706:	f3bf 8f4f 	dsb	sy
 800c70a:	607b      	str	r3, [r7, #4]
}
 800c70c:	bf00      	nop
 800c70e:	e7fe      	b.n	800c70e <vTaskSwitchContext+0x5a>
 800c710:	697a      	ldr	r2, [r7, #20]
 800c712:	4613      	mov	r3, r2
 800c714:	009b      	lsls	r3, r3, #2
 800c716:	4413      	add	r3, r2
 800c718:	009b      	lsls	r3, r3, #2
 800c71a:	4a11      	ldr	r2, [pc, #68]	; (800c760 <vTaskSwitchContext+0xac>)
 800c71c:	4413      	add	r3, r2
 800c71e:	613b      	str	r3, [r7, #16]
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	685b      	ldr	r3, [r3, #4]
 800c724:	685a      	ldr	r2, [r3, #4]
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	605a      	str	r2, [r3, #4]
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	685a      	ldr	r2, [r3, #4]
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	3308      	adds	r3, #8
 800c732:	429a      	cmp	r2, r3
 800c734:	d104      	bne.n	800c740 <vTaskSwitchContext+0x8c>
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	685b      	ldr	r3, [r3, #4]
 800c73a:	685a      	ldr	r2, [r3, #4]
 800c73c:	693b      	ldr	r3, [r7, #16]
 800c73e:	605a      	str	r2, [r3, #4]
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	685b      	ldr	r3, [r3, #4]
 800c744:	68db      	ldr	r3, [r3, #12]
 800c746:	4a07      	ldr	r2, [pc, #28]	; (800c764 <vTaskSwitchContext+0xb0>)
 800c748:	6013      	str	r3, [r2, #0]
}
 800c74a:	bf00      	nop
 800c74c:	371c      	adds	r7, #28
 800c74e:	46bd      	mov	sp, r7
 800c750:	bc80      	pop	{r7}
 800c752:	4770      	bx	lr
 800c754:	20000e48 	.word	0x20000e48
 800c758:	20000e34 	.word	0x20000e34
 800c75c:	20000e28 	.word	0x20000e28
 800c760:	20000d24 	.word	0x20000d24
 800c764:	20000d20 	.word	0x20000d20

0800c768 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b084      	sub	sp, #16
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d10a      	bne.n	800c78e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77c:	f383 8811 	msr	BASEPRI, r3
 800c780:	f3bf 8f6f 	isb	sy
 800c784:	f3bf 8f4f 	dsb	sy
 800c788:	60fb      	str	r3, [r7, #12]
}
 800c78a:	bf00      	nop
 800c78c:	e7fe      	b.n	800c78c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c78e:	4b07      	ldr	r3, [pc, #28]	; (800c7ac <vTaskPlaceOnEventList+0x44>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	3318      	adds	r3, #24
 800c794:	4619      	mov	r1, r3
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f7fe fc27 	bl	800afea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c79c:	2101      	movs	r1, #1
 800c79e:	6838      	ldr	r0, [r7, #0]
 800c7a0:	f000 fbd0 	bl	800cf44 <prvAddCurrentTaskToDelayedList>
}
 800c7a4:	bf00      	nop
 800c7a6:	3710      	adds	r7, #16
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}
 800c7ac:	20000d20 	.word	0x20000d20

0800c7b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b086      	sub	sp, #24
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	60f8      	str	r0, [r7, #12]
 800c7b8:	60b9      	str	r1, [r7, #8]
 800c7ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d10a      	bne.n	800c7d8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c6:	f383 8811 	msr	BASEPRI, r3
 800c7ca:	f3bf 8f6f 	isb	sy
 800c7ce:	f3bf 8f4f 	dsb	sy
 800c7d2:	617b      	str	r3, [r7, #20]
}
 800c7d4:	bf00      	nop
 800c7d6:	e7fe      	b.n	800c7d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c7d8:	4b0a      	ldr	r3, [pc, #40]	; (800c804 <vTaskPlaceOnEventListRestricted+0x54>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	3318      	adds	r3, #24
 800c7de:	4619      	mov	r1, r3
 800c7e0:	68f8      	ldr	r0, [r7, #12]
 800c7e2:	f7fe fbdf 	bl	800afa4 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d002      	beq.n	800c7f2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c7ec:	f04f 33ff 	mov.w	r3, #4294967295
 800c7f0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c7f2:	6879      	ldr	r1, [r7, #4]
 800c7f4:	68b8      	ldr	r0, [r7, #8]
 800c7f6:	f000 fba5 	bl	800cf44 <prvAddCurrentTaskToDelayedList>
	}
 800c7fa:	bf00      	nop
 800c7fc:	3718      	adds	r7, #24
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}
 800c802:	bf00      	nop
 800c804:	20000d20 	.word	0x20000d20

0800c808 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b086      	sub	sp, #24
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	68db      	ldr	r3, [r3, #12]
 800c814:	68db      	ldr	r3, [r3, #12]
 800c816:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d10a      	bne.n	800c834 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c822:	f383 8811 	msr	BASEPRI, r3
 800c826:	f3bf 8f6f 	isb	sy
 800c82a:	f3bf 8f4f 	dsb	sy
 800c82e:	60fb      	str	r3, [r7, #12]
}
 800c830:	bf00      	nop
 800c832:	e7fe      	b.n	800c832 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	3318      	adds	r3, #24
 800c838:	4618      	mov	r0, r3
 800c83a:	f7fe fc0e 	bl	800b05a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c83e:	4b1d      	ldr	r3, [pc, #116]	; (800c8b4 <xTaskRemoveFromEventList+0xac>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d11c      	bne.n	800c880 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	3304      	adds	r3, #4
 800c84a:	4618      	mov	r0, r3
 800c84c:	f7fe fc05 	bl	800b05a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c854:	2201      	movs	r2, #1
 800c856:	409a      	lsls	r2, r3
 800c858:	4b17      	ldr	r3, [pc, #92]	; (800c8b8 <xTaskRemoveFromEventList+0xb0>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4313      	orrs	r3, r2
 800c85e:	4a16      	ldr	r2, [pc, #88]	; (800c8b8 <xTaskRemoveFromEventList+0xb0>)
 800c860:	6013      	str	r3, [r2, #0]
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c866:	4613      	mov	r3, r2
 800c868:	009b      	lsls	r3, r3, #2
 800c86a:	4413      	add	r3, r2
 800c86c:	009b      	lsls	r3, r3, #2
 800c86e:	4a13      	ldr	r2, [pc, #76]	; (800c8bc <xTaskRemoveFromEventList+0xb4>)
 800c870:	441a      	add	r2, r3
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	3304      	adds	r3, #4
 800c876:	4619      	mov	r1, r3
 800c878:	4610      	mov	r0, r2
 800c87a:	f7fe fb93 	bl	800afa4 <vListInsertEnd>
 800c87e:	e005      	b.n	800c88c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	3318      	adds	r3, #24
 800c884:	4619      	mov	r1, r3
 800c886:	480e      	ldr	r0, [pc, #56]	; (800c8c0 <xTaskRemoveFromEventList+0xb8>)
 800c888:	f7fe fb8c 	bl	800afa4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c890:	4b0c      	ldr	r3, [pc, #48]	; (800c8c4 <xTaskRemoveFromEventList+0xbc>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c896:	429a      	cmp	r2, r3
 800c898:	d905      	bls.n	800c8a6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c89a:	2301      	movs	r3, #1
 800c89c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c89e:	4b0a      	ldr	r3, [pc, #40]	; (800c8c8 <xTaskRemoveFromEventList+0xc0>)
 800c8a0:	2201      	movs	r2, #1
 800c8a2:	601a      	str	r2, [r3, #0]
 800c8a4:	e001      	b.n	800c8aa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800c8aa:	697b      	ldr	r3, [r7, #20]
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	3718      	adds	r7, #24
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}
 800c8b4:	20000e48 	.word	0x20000e48
 800c8b8:	20000e28 	.word	0x20000e28
 800c8bc:	20000d24 	.word	0x20000d24
 800c8c0:	20000de0 	.word	0x20000de0
 800c8c4:	20000d20 	.word	0x20000d20
 800c8c8:	20000e34 	.word	0x20000e34

0800c8cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b083      	sub	sp, #12
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c8d4:	4b06      	ldr	r3, [pc, #24]	; (800c8f0 <vTaskInternalSetTimeOutState+0x24>)
 800c8d6:	681a      	ldr	r2, [r3, #0]
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c8dc:	4b05      	ldr	r3, [pc, #20]	; (800c8f4 <vTaskInternalSetTimeOutState+0x28>)
 800c8de:	681a      	ldr	r2, [r3, #0]
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	605a      	str	r2, [r3, #4]
}
 800c8e4:	bf00      	nop
 800c8e6:	370c      	adds	r7, #12
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bc80      	pop	{r7}
 800c8ec:	4770      	bx	lr
 800c8ee:	bf00      	nop
 800c8f0:	20000e38 	.word	0x20000e38
 800c8f4:	20000e24 	.word	0x20000e24

0800c8f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b088      	sub	sp, #32
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d10a      	bne.n	800c91e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c90c:	f383 8811 	msr	BASEPRI, r3
 800c910:	f3bf 8f6f 	isb	sy
 800c914:	f3bf 8f4f 	dsb	sy
 800c918:	613b      	str	r3, [r7, #16]
}
 800c91a:	bf00      	nop
 800c91c:	e7fe      	b.n	800c91c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d10a      	bne.n	800c93a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c924:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c928:	f383 8811 	msr	BASEPRI, r3
 800c92c:	f3bf 8f6f 	isb	sy
 800c930:	f3bf 8f4f 	dsb	sy
 800c934:	60fb      	str	r3, [r7, #12]
}
 800c936:	bf00      	nop
 800c938:	e7fe      	b.n	800c938 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c93a:	f000 ffdf 	bl	800d8fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c93e:	4b1d      	ldr	r3, [pc, #116]	; (800c9b4 <xTaskCheckForTimeOut+0xbc>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	685b      	ldr	r3, [r3, #4]
 800c948:	69ba      	ldr	r2, [r7, #24]
 800c94a:	1ad3      	subs	r3, r2, r3
 800c94c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c956:	d102      	bne.n	800c95e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c958:	2300      	movs	r3, #0
 800c95a:	61fb      	str	r3, [r7, #28]
 800c95c:	e023      	b.n	800c9a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681a      	ldr	r2, [r3, #0]
 800c962:	4b15      	ldr	r3, [pc, #84]	; (800c9b8 <xTaskCheckForTimeOut+0xc0>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	429a      	cmp	r2, r3
 800c968:	d007      	beq.n	800c97a <xTaskCheckForTimeOut+0x82>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	69ba      	ldr	r2, [r7, #24]
 800c970:	429a      	cmp	r2, r3
 800c972:	d302      	bcc.n	800c97a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c974:	2301      	movs	r3, #1
 800c976:	61fb      	str	r3, [r7, #28]
 800c978:	e015      	b.n	800c9a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	697a      	ldr	r2, [r7, #20]
 800c980:	429a      	cmp	r2, r3
 800c982:	d20b      	bcs.n	800c99c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	681a      	ldr	r2, [r3, #0]
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	1ad2      	subs	r2, r2, r3
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f7ff ff9b 	bl	800c8cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c996:	2300      	movs	r3, #0
 800c998:	61fb      	str	r3, [r7, #28]
 800c99a:	e004      	b.n	800c9a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c9a6:	f000 ffd9 	bl	800d95c <vPortExitCritical>

	return xReturn;
 800c9aa:	69fb      	ldr	r3, [r7, #28]
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3720      	adds	r7, #32
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}
 800c9b4:	20000e24 	.word	0x20000e24
 800c9b8:	20000e38 	.word	0x20000e38

0800c9bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c9bc:	b480      	push	{r7}
 800c9be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c9c0:	4b03      	ldr	r3, [pc, #12]	; (800c9d0 <vTaskMissedYield+0x14>)
 800c9c2:	2201      	movs	r2, #1
 800c9c4:	601a      	str	r2, [r3, #0]
}
 800c9c6:	bf00      	nop
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bc80      	pop	{r7}
 800c9cc:	4770      	bx	lr
 800c9ce:	bf00      	nop
 800c9d0:	20000e34 	.word	0x20000e34

0800c9d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b082      	sub	sp, #8
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c9dc:	f000 f852 	bl	800ca84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c9e0:	4b06      	ldr	r3, [pc, #24]	; (800c9fc <prvIdleTask+0x28>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	2b01      	cmp	r3, #1
 800c9e6:	d9f9      	bls.n	800c9dc <prvIdleTask+0x8>
			{
				taskYIELD();
 800c9e8:	4b05      	ldr	r3, [pc, #20]	; (800ca00 <prvIdleTask+0x2c>)
 800c9ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9ee:	601a      	str	r2, [r3, #0]
 800c9f0:	f3bf 8f4f 	dsb	sy
 800c9f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c9f8:	e7f0      	b.n	800c9dc <prvIdleTask+0x8>
 800c9fa:	bf00      	nop
 800c9fc:	20000d24 	.word	0x20000d24
 800ca00:	e000ed04 	.word	0xe000ed04

0800ca04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b082      	sub	sp, #8
 800ca08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	607b      	str	r3, [r7, #4]
 800ca0e:	e00c      	b.n	800ca2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ca10:	687a      	ldr	r2, [r7, #4]
 800ca12:	4613      	mov	r3, r2
 800ca14:	009b      	lsls	r3, r3, #2
 800ca16:	4413      	add	r3, r2
 800ca18:	009b      	lsls	r3, r3, #2
 800ca1a:	4a12      	ldr	r2, [pc, #72]	; (800ca64 <prvInitialiseTaskLists+0x60>)
 800ca1c:	4413      	add	r3, r2
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f7fe fa95 	bl	800af4e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	3301      	adds	r3, #1
 800ca28:	607b      	str	r3, [r7, #4]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2b06      	cmp	r3, #6
 800ca2e:	d9ef      	bls.n	800ca10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ca30:	480d      	ldr	r0, [pc, #52]	; (800ca68 <prvInitialiseTaskLists+0x64>)
 800ca32:	f7fe fa8c 	bl	800af4e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ca36:	480d      	ldr	r0, [pc, #52]	; (800ca6c <prvInitialiseTaskLists+0x68>)
 800ca38:	f7fe fa89 	bl	800af4e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ca3c:	480c      	ldr	r0, [pc, #48]	; (800ca70 <prvInitialiseTaskLists+0x6c>)
 800ca3e:	f7fe fa86 	bl	800af4e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ca42:	480c      	ldr	r0, [pc, #48]	; (800ca74 <prvInitialiseTaskLists+0x70>)
 800ca44:	f7fe fa83 	bl	800af4e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ca48:	480b      	ldr	r0, [pc, #44]	; (800ca78 <prvInitialiseTaskLists+0x74>)
 800ca4a:	f7fe fa80 	bl	800af4e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ca4e:	4b0b      	ldr	r3, [pc, #44]	; (800ca7c <prvInitialiseTaskLists+0x78>)
 800ca50:	4a05      	ldr	r2, [pc, #20]	; (800ca68 <prvInitialiseTaskLists+0x64>)
 800ca52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ca54:	4b0a      	ldr	r3, [pc, #40]	; (800ca80 <prvInitialiseTaskLists+0x7c>)
 800ca56:	4a05      	ldr	r2, [pc, #20]	; (800ca6c <prvInitialiseTaskLists+0x68>)
 800ca58:	601a      	str	r2, [r3, #0]
}
 800ca5a:	bf00      	nop
 800ca5c:	3708      	adds	r7, #8
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
 800ca62:	bf00      	nop
 800ca64:	20000d24 	.word	0x20000d24
 800ca68:	20000db0 	.word	0x20000db0
 800ca6c:	20000dc4 	.word	0x20000dc4
 800ca70:	20000de0 	.word	0x20000de0
 800ca74:	20000df4 	.word	0x20000df4
 800ca78:	20000e0c 	.word	0x20000e0c
 800ca7c:	20000dd8 	.word	0x20000dd8
 800ca80:	20000ddc 	.word	0x20000ddc

0800ca84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b082      	sub	sp, #8
 800ca88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ca8a:	e019      	b.n	800cac0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ca8c:	f000 ff36 	bl	800d8fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800ca90:	4b10      	ldr	r3, [pc, #64]	; (800cad4 <prvCheckTasksWaitingTermination+0x50>)
 800ca92:	68db      	ldr	r3, [r3, #12]
 800ca94:	68db      	ldr	r3, [r3, #12]
 800ca96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	3304      	adds	r3, #4
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7fe fadc 	bl	800b05a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800caa2:	4b0d      	ldr	r3, [pc, #52]	; (800cad8 <prvCheckTasksWaitingTermination+0x54>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	3b01      	subs	r3, #1
 800caa8:	4a0b      	ldr	r2, [pc, #44]	; (800cad8 <prvCheckTasksWaitingTermination+0x54>)
 800caaa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800caac:	4b0b      	ldr	r3, [pc, #44]	; (800cadc <prvCheckTasksWaitingTermination+0x58>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	3b01      	subs	r3, #1
 800cab2:	4a0a      	ldr	r2, [pc, #40]	; (800cadc <prvCheckTasksWaitingTermination+0x58>)
 800cab4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cab6:	f000 ff51 	bl	800d95c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f000 f810 	bl	800cae0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cac0:	4b06      	ldr	r3, [pc, #24]	; (800cadc <prvCheckTasksWaitingTermination+0x58>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d1e1      	bne.n	800ca8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cac8:	bf00      	nop
 800caca:	bf00      	nop
 800cacc:	3708      	adds	r7, #8
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}
 800cad2:	bf00      	nop
 800cad4:	20000df4 	.word	0x20000df4
 800cad8:	20000e20 	.word	0x20000e20
 800cadc:	20000e08 	.word	0x20000e08

0800cae0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b084      	sub	sp, #16
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d108      	bne.n	800cb04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caf6:	4618      	mov	r0, r3
 800caf8:	f001 f8c4 	bl	800dc84 <vPortFree>
				vPortFree( pxTCB );
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f001 f8c1 	bl	800dc84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cb02:	e018      	b.n	800cb36 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cb0a:	2b01      	cmp	r3, #1
 800cb0c:	d103      	bne.n	800cb16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f001 f8b8 	bl	800dc84 <vPortFree>
	}
 800cb14:	e00f      	b.n	800cb36 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cb1c:	2b02      	cmp	r3, #2
 800cb1e:	d00a      	beq.n	800cb36 <prvDeleteTCB+0x56>
	__asm volatile
 800cb20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb24:	f383 8811 	msr	BASEPRI, r3
 800cb28:	f3bf 8f6f 	isb	sy
 800cb2c:	f3bf 8f4f 	dsb	sy
 800cb30:	60fb      	str	r3, [r7, #12]
}
 800cb32:	bf00      	nop
 800cb34:	e7fe      	b.n	800cb34 <prvDeleteTCB+0x54>
	}
 800cb36:	bf00      	nop
 800cb38:	3710      	adds	r7, #16
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}
	...

0800cb40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cb40:	b480      	push	{r7}
 800cb42:	b083      	sub	sp, #12
 800cb44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb46:	4b0e      	ldr	r3, [pc, #56]	; (800cb80 <prvResetNextTaskUnblockTime+0x40>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d101      	bne.n	800cb54 <prvResetNextTaskUnblockTime+0x14>
 800cb50:	2301      	movs	r3, #1
 800cb52:	e000      	b.n	800cb56 <prvResetNextTaskUnblockTime+0x16>
 800cb54:	2300      	movs	r3, #0
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d004      	beq.n	800cb64 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cb5a:	4b0a      	ldr	r3, [pc, #40]	; (800cb84 <prvResetNextTaskUnblockTime+0x44>)
 800cb5c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb60:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cb62:	e008      	b.n	800cb76 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800cb64:	4b06      	ldr	r3, [pc, #24]	; (800cb80 <prvResetNextTaskUnblockTime+0x40>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	68db      	ldr	r3, [r3, #12]
 800cb6a:	68db      	ldr	r3, [r3, #12]
 800cb6c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	685b      	ldr	r3, [r3, #4]
 800cb72:	4a04      	ldr	r2, [pc, #16]	; (800cb84 <prvResetNextTaskUnblockTime+0x44>)
 800cb74:	6013      	str	r3, [r2, #0]
}
 800cb76:	bf00      	nop
 800cb78:	370c      	adds	r7, #12
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bc80      	pop	{r7}
 800cb7e:	4770      	bx	lr
 800cb80:	20000dd8 	.word	0x20000dd8
 800cb84:	20000e40 	.word	0x20000e40

0800cb88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cb88:	b480      	push	{r7}
 800cb8a:	b083      	sub	sp, #12
 800cb8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cb8e:	4b0b      	ldr	r3, [pc, #44]	; (800cbbc <xTaskGetSchedulerState+0x34>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d102      	bne.n	800cb9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cb96:	2301      	movs	r3, #1
 800cb98:	607b      	str	r3, [r7, #4]
 800cb9a:	e008      	b.n	800cbae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb9c:	4b08      	ldr	r3, [pc, #32]	; (800cbc0 <xTaskGetSchedulerState+0x38>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d102      	bne.n	800cbaa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cba4:	2302      	movs	r3, #2
 800cba6:	607b      	str	r3, [r7, #4]
 800cba8:	e001      	b.n	800cbae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cbae:	687b      	ldr	r3, [r7, #4]
	}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	370c      	adds	r7, #12
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bc80      	pop	{r7}
 800cbb8:	4770      	bx	lr
 800cbba:	bf00      	nop
 800cbbc:	20000e2c 	.word	0x20000e2c
 800cbc0:	20000e48 	.word	0x20000e48

0800cbc4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b084      	sub	sp, #16
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d06e      	beq.n	800ccb8 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbde:	4b39      	ldr	r3, [pc, #228]	; (800ccc4 <xTaskPriorityInherit+0x100>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	d25e      	bcs.n	800cca6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	699b      	ldr	r3, [r3, #24]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	db06      	blt.n	800cbfe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbf0:	4b34      	ldr	r3, [pc, #208]	; (800ccc4 <xTaskPriorityInherit+0x100>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbf6:	f1c3 0207 	rsb	r2, r3, #7
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	6959      	ldr	r1, [r3, #20]
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc06:	4613      	mov	r3, r2
 800cc08:	009b      	lsls	r3, r3, #2
 800cc0a:	4413      	add	r3, r2
 800cc0c:	009b      	lsls	r3, r3, #2
 800cc0e:	4a2e      	ldr	r2, [pc, #184]	; (800ccc8 <xTaskPriorityInherit+0x104>)
 800cc10:	4413      	add	r3, r2
 800cc12:	4299      	cmp	r1, r3
 800cc14:	d101      	bne.n	800cc1a <xTaskPriorityInherit+0x56>
 800cc16:	2301      	movs	r3, #1
 800cc18:	e000      	b.n	800cc1c <xTaskPriorityInherit+0x58>
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d03a      	beq.n	800cc96 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	3304      	adds	r3, #4
 800cc24:	4618      	mov	r0, r3
 800cc26:	f7fe fa18 	bl	800b05a <uxListRemove>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d115      	bne.n	800cc5c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc34:	4924      	ldr	r1, [pc, #144]	; (800ccc8 <xTaskPriorityInherit+0x104>)
 800cc36:	4613      	mov	r3, r2
 800cc38:	009b      	lsls	r3, r3, #2
 800cc3a:	4413      	add	r3, r2
 800cc3c:	009b      	lsls	r3, r3, #2
 800cc3e:	440b      	add	r3, r1
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d10a      	bne.n	800cc5c <xTaskPriorityInherit+0x98>
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc4a:	2201      	movs	r2, #1
 800cc4c:	fa02 f303 	lsl.w	r3, r2, r3
 800cc50:	43da      	mvns	r2, r3
 800cc52:	4b1e      	ldr	r3, [pc, #120]	; (800cccc <xTaskPriorityInherit+0x108>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	4013      	ands	r3, r2
 800cc58:	4a1c      	ldr	r2, [pc, #112]	; (800cccc <xTaskPriorityInherit+0x108>)
 800cc5a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cc5c:	4b19      	ldr	r3, [pc, #100]	; (800ccc4 <xTaskPriorityInherit+0x100>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc6a:	2201      	movs	r2, #1
 800cc6c:	409a      	lsls	r2, r3
 800cc6e:	4b17      	ldr	r3, [pc, #92]	; (800cccc <xTaskPriorityInherit+0x108>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	4313      	orrs	r3, r2
 800cc74:	4a15      	ldr	r2, [pc, #84]	; (800cccc <xTaskPriorityInherit+0x108>)
 800cc76:	6013      	str	r3, [r2, #0]
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc7c:	4613      	mov	r3, r2
 800cc7e:	009b      	lsls	r3, r3, #2
 800cc80:	4413      	add	r3, r2
 800cc82:	009b      	lsls	r3, r3, #2
 800cc84:	4a10      	ldr	r2, [pc, #64]	; (800ccc8 <xTaskPriorityInherit+0x104>)
 800cc86:	441a      	add	r2, r3
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	3304      	adds	r3, #4
 800cc8c:	4619      	mov	r1, r3
 800cc8e:	4610      	mov	r0, r2
 800cc90:	f7fe f988 	bl	800afa4 <vListInsertEnd>
 800cc94:	e004      	b.n	800cca0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cc96:	4b0b      	ldr	r3, [pc, #44]	; (800ccc4 <xTaskPriorityInherit+0x100>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cca0:	2301      	movs	r3, #1
 800cca2:	60fb      	str	r3, [r7, #12]
 800cca4:	e008      	b.n	800ccb8 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ccaa:	4b06      	ldr	r3, [pc, #24]	; (800ccc4 <xTaskPriorityInherit+0x100>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccb0:	429a      	cmp	r2, r3
 800ccb2:	d201      	bcs.n	800ccb8 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
	}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3710      	adds	r7, #16
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}
 800ccc2:	bf00      	nop
 800ccc4:	20000d20 	.word	0x20000d20
 800ccc8:	20000d24 	.word	0x20000d24
 800cccc:	20000e28 	.word	0x20000e28

0800ccd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b086      	sub	sp, #24
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d06e      	beq.n	800cdc4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cce6:	4b3a      	ldr	r3, [pc, #232]	; (800cdd0 <xTaskPriorityDisinherit+0x100>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	693a      	ldr	r2, [r7, #16]
 800ccec:	429a      	cmp	r2, r3
 800ccee:	d00a      	beq.n	800cd06 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ccf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf4:	f383 8811 	msr	BASEPRI, r3
 800ccf8:	f3bf 8f6f 	isb	sy
 800ccfc:	f3bf 8f4f 	dsb	sy
 800cd00:	60fb      	str	r3, [r7, #12]
}
 800cd02:	bf00      	nop
 800cd04:	e7fe      	b.n	800cd04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d10a      	bne.n	800cd24 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd12:	f383 8811 	msr	BASEPRI, r3
 800cd16:	f3bf 8f6f 	isb	sy
 800cd1a:	f3bf 8f4f 	dsb	sy
 800cd1e:	60bb      	str	r3, [r7, #8]
}
 800cd20:	bf00      	nop
 800cd22:	e7fe      	b.n	800cd22 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd28:	1e5a      	subs	r2, r3, #1
 800cd2a:	693b      	ldr	r3, [r7, #16]
 800cd2c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cd2e:	693b      	ldr	r3, [r7, #16]
 800cd30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d044      	beq.n	800cdc4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d140      	bne.n	800cdc4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd42:	693b      	ldr	r3, [r7, #16]
 800cd44:	3304      	adds	r3, #4
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7fe f987 	bl	800b05a <uxListRemove>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d115      	bne.n	800cd7e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd56:	491f      	ldr	r1, [pc, #124]	; (800cdd4 <xTaskPriorityDisinherit+0x104>)
 800cd58:	4613      	mov	r3, r2
 800cd5a:	009b      	lsls	r3, r3, #2
 800cd5c:	4413      	add	r3, r2
 800cd5e:	009b      	lsls	r3, r3, #2
 800cd60:	440b      	add	r3, r1
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d10a      	bne.n	800cd7e <xTaskPriorityDisinherit+0xae>
 800cd68:	693b      	ldr	r3, [r7, #16]
 800cd6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd6c:	2201      	movs	r2, #1
 800cd6e:	fa02 f303 	lsl.w	r3, r2, r3
 800cd72:	43da      	mvns	r2, r3
 800cd74:	4b18      	ldr	r3, [pc, #96]	; (800cdd8 <xTaskPriorityDisinherit+0x108>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	4013      	ands	r3, r2
 800cd7a:	4a17      	ldr	r2, [pc, #92]	; (800cdd8 <xTaskPriorityDisinherit+0x108>)
 800cd7c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cd7e:	693b      	ldr	r3, [r7, #16]
 800cd80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd82:	693b      	ldr	r3, [r7, #16]
 800cd84:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd8a:	f1c3 0207 	rsb	r2, r3, #7
 800cd8e:	693b      	ldr	r3, [r7, #16]
 800cd90:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cd92:	693b      	ldr	r3, [r7, #16]
 800cd94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd96:	2201      	movs	r2, #1
 800cd98:	409a      	lsls	r2, r3
 800cd9a:	4b0f      	ldr	r3, [pc, #60]	; (800cdd8 <xTaskPriorityDisinherit+0x108>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	4313      	orrs	r3, r2
 800cda0:	4a0d      	ldr	r2, [pc, #52]	; (800cdd8 <xTaskPriorityDisinherit+0x108>)
 800cda2:	6013      	str	r3, [r2, #0]
 800cda4:	693b      	ldr	r3, [r7, #16]
 800cda6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cda8:	4613      	mov	r3, r2
 800cdaa:	009b      	lsls	r3, r3, #2
 800cdac:	4413      	add	r3, r2
 800cdae:	009b      	lsls	r3, r3, #2
 800cdb0:	4a08      	ldr	r2, [pc, #32]	; (800cdd4 <xTaskPriorityDisinherit+0x104>)
 800cdb2:	441a      	add	r2, r3
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	3304      	adds	r3, #4
 800cdb8:	4619      	mov	r1, r3
 800cdba:	4610      	mov	r0, r2
 800cdbc:	f7fe f8f2 	bl	800afa4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cdc4:	697b      	ldr	r3, [r7, #20]
	}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3718      	adds	r7, #24
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}
 800cdce:	bf00      	nop
 800cdd0:	20000d20 	.word	0x20000d20
 800cdd4:	20000d24 	.word	0x20000d24
 800cdd8:	20000e28 	.word	0x20000e28

0800cddc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b088      	sub	sp, #32
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
 800cde4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cdea:	2301      	movs	r3, #1
 800cdec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	f000 8088 	beq.w	800cf06 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cdf6:	69bb      	ldr	r3, [r7, #24]
 800cdf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d10a      	bne.n	800ce14 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800cdfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce02:	f383 8811 	msr	BASEPRI, r3
 800ce06:	f3bf 8f6f 	isb	sy
 800ce0a:	f3bf 8f4f 	dsb	sy
 800ce0e:	60fb      	str	r3, [r7, #12]
}
 800ce10:	bf00      	nop
 800ce12:	e7fe      	b.n	800ce12 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ce14:	69bb      	ldr	r3, [r7, #24]
 800ce16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce18:	683a      	ldr	r2, [r7, #0]
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d902      	bls.n	800ce24 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	61fb      	str	r3, [r7, #28]
 800ce22:	e002      	b.n	800ce2a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ce24:	69bb      	ldr	r3, [r7, #24]
 800ce26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce28:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ce2a:	69bb      	ldr	r3, [r7, #24]
 800ce2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce2e:	69fa      	ldr	r2, [r7, #28]
 800ce30:	429a      	cmp	r2, r3
 800ce32:	d068      	beq.n	800cf06 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ce34:	69bb      	ldr	r3, [r7, #24]
 800ce36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce38:	697a      	ldr	r2, [r7, #20]
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d163      	bne.n	800cf06 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ce3e:	4b34      	ldr	r3, [pc, #208]	; (800cf10 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	69ba      	ldr	r2, [r7, #24]
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d10a      	bne.n	800ce5e <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800ce48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce4c:	f383 8811 	msr	BASEPRI, r3
 800ce50:	f3bf 8f6f 	isb	sy
 800ce54:	f3bf 8f4f 	dsb	sy
 800ce58:	60bb      	str	r3, [r7, #8]
}
 800ce5a:	bf00      	nop
 800ce5c:	e7fe      	b.n	800ce5c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ce5e:	69bb      	ldr	r3, [r7, #24]
 800ce60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce62:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ce64:	69bb      	ldr	r3, [r7, #24]
 800ce66:	69fa      	ldr	r2, [r7, #28]
 800ce68:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ce6a:	69bb      	ldr	r3, [r7, #24]
 800ce6c:	699b      	ldr	r3, [r3, #24]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	db04      	blt.n	800ce7c <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce72:	69fb      	ldr	r3, [r7, #28]
 800ce74:	f1c3 0207 	rsb	r2, r3, #7
 800ce78:	69bb      	ldr	r3, [r7, #24]
 800ce7a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ce7c:	69bb      	ldr	r3, [r7, #24]
 800ce7e:	6959      	ldr	r1, [r3, #20]
 800ce80:	693a      	ldr	r2, [r7, #16]
 800ce82:	4613      	mov	r3, r2
 800ce84:	009b      	lsls	r3, r3, #2
 800ce86:	4413      	add	r3, r2
 800ce88:	009b      	lsls	r3, r3, #2
 800ce8a:	4a22      	ldr	r2, [pc, #136]	; (800cf14 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ce8c:	4413      	add	r3, r2
 800ce8e:	4299      	cmp	r1, r3
 800ce90:	d101      	bne.n	800ce96 <vTaskPriorityDisinheritAfterTimeout+0xba>
 800ce92:	2301      	movs	r3, #1
 800ce94:	e000      	b.n	800ce98 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800ce96:	2300      	movs	r3, #0
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d034      	beq.n	800cf06 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce9c:	69bb      	ldr	r3, [r7, #24]
 800ce9e:	3304      	adds	r3, #4
 800cea0:	4618      	mov	r0, r3
 800cea2:	f7fe f8da 	bl	800b05a <uxListRemove>
 800cea6:	4603      	mov	r3, r0
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d115      	bne.n	800ced8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ceac:	69bb      	ldr	r3, [r7, #24]
 800ceae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceb0:	4918      	ldr	r1, [pc, #96]	; (800cf14 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ceb2:	4613      	mov	r3, r2
 800ceb4:	009b      	lsls	r3, r3, #2
 800ceb6:	4413      	add	r3, r2
 800ceb8:	009b      	lsls	r3, r3, #2
 800ceba:	440b      	add	r3, r1
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d10a      	bne.n	800ced8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800cec2:	69bb      	ldr	r3, [r7, #24]
 800cec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cec6:	2201      	movs	r2, #1
 800cec8:	fa02 f303 	lsl.w	r3, r2, r3
 800cecc:	43da      	mvns	r2, r3
 800cece:	4b12      	ldr	r3, [pc, #72]	; (800cf18 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	4013      	ands	r3, r2
 800ced4:	4a10      	ldr	r2, [pc, #64]	; (800cf18 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800ced6:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ced8:	69bb      	ldr	r3, [r7, #24]
 800ceda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cedc:	2201      	movs	r2, #1
 800cede:	409a      	lsls	r2, r3
 800cee0:	4b0d      	ldr	r3, [pc, #52]	; (800cf18 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	4313      	orrs	r3, r2
 800cee6:	4a0c      	ldr	r2, [pc, #48]	; (800cf18 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800cee8:	6013      	str	r3, [r2, #0]
 800ceea:	69bb      	ldr	r3, [r7, #24]
 800ceec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceee:	4613      	mov	r3, r2
 800cef0:	009b      	lsls	r3, r3, #2
 800cef2:	4413      	add	r3, r2
 800cef4:	009b      	lsls	r3, r3, #2
 800cef6:	4a07      	ldr	r2, [pc, #28]	; (800cf14 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800cef8:	441a      	add	r2, r3
 800cefa:	69bb      	ldr	r3, [r7, #24]
 800cefc:	3304      	adds	r3, #4
 800cefe:	4619      	mov	r1, r3
 800cf00:	4610      	mov	r0, r2
 800cf02:	f7fe f84f 	bl	800afa4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cf06:	bf00      	nop
 800cf08:	3720      	adds	r7, #32
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
 800cf0e:	bf00      	nop
 800cf10:	20000d20 	.word	0x20000d20
 800cf14:	20000d24 	.word	0x20000d24
 800cf18:	20000e28 	.word	0x20000e28

0800cf1c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800cf1c:	b480      	push	{r7}
 800cf1e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cf20:	4b07      	ldr	r3, [pc, #28]	; (800cf40 <pvTaskIncrementMutexHeldCount+0x24>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d004      	beq.n	800cf32 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800cf28:	4b05      	ldr	r3, [pc, #20]	; (800cf40 <pvTaskIncrementMutexHeldCount+0x24>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cf2e:	3201      	adds	r2, #1
 800cf30:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800cf32:	4b03      	ldr	r3, [pc, #12]	; (800cf40 <pvTaskIncrementMutexHeldCount+0x24>)
 800cf34:	681b      	ldr	r3, [r3, #0]
	}
 800cf36:	4618      	mov	r0, r3
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bc80      	pop	{r7}
 800cf3c:	4770      	bx	lr
 800cf3e:	bf00      	nop
 800cf40:	20000d20 	.word	0x20000d20

0800cf44 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b084      	sub	sp, #16
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
 800cf4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cf4e:	4b29      	ldr	r3, [pc, #164]	; (800cff4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf54:	4b28      	ldr	r3, [pc, #160]	; (800cff8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	3304      	adds	r3, #4
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f7fe f87d 	bl	800b05a <uxListRemove>
 800cf60:	4603      	mov	r3, r0
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d10b      	bne.n	800cf7e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800cf66:	4b24      	ldr	r3, [pc, #144]	; (800cff8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf6c:	2201      	movs	r2, #1
 800cf6e:	fa02 f303 	lsl.w	r3, r2, r3
 800cf72:	43da      	mvns	r2, r3
 800cf74:	4b21      	ldr	r3, [pc, #132]	; (800cffc <prvAddCurrentTaskToDelayedList+0xb8>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	4013      	ands	r3, r2
 800cf7a:	4a20      	ldr	r2, [pc, #128]	; (800cffc <prvAddCurrentTaskToDelayedList+0xb8>)
 800cf7c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf84:	d10a      	bne.n	800cf9c <prvAddCurrentTaskToDelayedList+0x58>
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d007      	beq.n	800cf9c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cf8c:	4b1a      	ldr	r3, [pc, #104]	; (800cff8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	3304      	adds	r3, #4
 800cf92:	4619      	mov	r1, r3
 800cf94:	481a      	ldr	r0, [pc, #104]	; (800d000 <prvAddCurrentTaskToDelayedList+0xbc>)
 800cf96:	f7fe f805 	bl	800afa4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cf9a:	e026      	b.n	800cfea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cf9c:	68fa      	ldr	r2, [r7, #12]
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	4413      	add	r3, r2
 800cfa2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cfa4:	4b14      	ldr	r3, [pc, #80]	; (800cff8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	68ba      	ldr	r2, [r7, #8]
 800cfaa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cfac:	68ba      	ldr	r2, [r7, #8]
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d209      	bcs.n	800cfc8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cfb4:	4b13      	ldr	r3, [pc, #76]	; (800d004 <prvAddCurrentTaskToDelayedList+0xc0>)
 800cfb6:	681a      	ldr	r2, [r3, #0]
 800cfb8:	4b0f      	ldr	r3, [pc, #60]	; (800cff8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	3304      	adds	r3, #4
 800cfbe:	4619      	mov	r1, r3
 800cfc0:	4610      	mov	r0, r2
 800cfc2:	f7fe f812 	bl	800afea <vListInsert>
}
 800cfc6:	e010      	b.n	800cfea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cfc8:	4b0f      	ldr	r3, [pc, #60]	; (800d008 <prvAddCurrentTaskToDelayedList+0xc4>)
 800cfca:	681a      	ldr	r2, [r3, #0]
 800cfcc:	4b0a      	ldr	r3, [pc, #40]	; (800cff8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	3304      	adds	r3, #4
 800cfd2:	4619      	mov	r1, r3
 800cfd4:	4610      	mov	r0, r2
 800cfd6:	f7fe f808 	bl	800afea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cfda:	4b0c      	ldr	r3, [pc, #48]	; (800d00c <prvAddCurrentTaskToDelayedList+0xc8>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	68ba      	ldr	r2, [r7, #8]
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d202      	bcs.n	800cfea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800cfe4:	4a09      	ldr	r2, [pc, #36]	; (800d00c <prvAddCurrentTaskToDelayedList+0xc8>)
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	6013      	str	r3, [r2, #0]
}
 800cfea:	bf00      	nop
 800cfec:	3710      	adds	r7, #16
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
 800cff2:	bf00      	nop
 800cff4:	20000e24 	.word	0x20000e24
 800cff8:	20000d20 	.word	0x20000d20
 800cffc:	20000e28 	.word	0x20000e28
 800d000:	20000e0c 	.word	0x20000e0c
 800d004:	20000ddc 	.word	0x20000ddc
 800d008:	20000dd8 	.word	0x20000dd8
 800d00c:	20000e40 	.word	0x20000e40

0800d010 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b08a      	sub	sp, #40	; 0x28
 800d014:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d016:	2300      	movs	r3, #0
 800d018:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d01a:	f000 fb41 	bl	800d6a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d01e:	4b1c      	ldr	r3, [pc, #112]	; (800d090 <xTimerCreateTimerTask+0x80>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d021      	beq.n	800d06a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d026:	2300      	movs	r3, #0
 800d028:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d02a:	2300      	movs	r3, #0
 800d02c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d02e:	1d3a      	adds	r2, r7, #4
 800d030:	f107 0108 	add.w	r1, r7, #8
 800d034:	f107 030c 	add.w	r3, r7, #12
 800d038:	4618      	mov	r0, r3
 800d03a:	f7f7 fa0b 	bl	8004454 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d03e:	6879      	ldr	r1, [r7, #4]
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	68fa      	ldr	r2, [r7, #12]
 800d044:	9202      	str	r2, [sp, #8]
 800d046:	9301      	str	r3, [sp, #4]
 800d048:	2302      	movs	r3, #2
 800d04a:	9300      	str	r3, [sp, #0]
 800d04c:	2300      	movs	r3, #0
 800d04e:	460a      	mov	r2, r1
 800d050:	4910      	ldr	r1, [pc, #64]	; (800d094 <xTimerCreateTimerTask+0x84>)
 800d052:	4811      	ldr	r0, [pc, #68]	; (800d098 <xTimerCreateTimerTask+0x88>)
 800d054:	f7fe ff7a 	bl	800bf4c <xTaskCreateStatic>
 800d058:	4603      	mov	r3, r0
 800d05a:	4a10      	ldr	r2, [pc, #64]	; (800d09c <xTimerCreateTimerTask+0x8c>)
 800d05c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d05e:	4b0f      	ldr	r3, [pc, #60]	; (800d09c <xTimerCreateTimerTask+0x8c>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d001      	beq.n	800d06a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d066:	2301      	movs	r3, #1
 800d068:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d10a      	bne.n	800d086 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d074:	f383 8811 	msr	BASEPRI, r3
 800d078:	f3bf 8f6f 	isb	sy
 800d07c:	f3bf 8f4f 	dsb	sy
 800d080:	613b      	str	r3, [r7, #16]
}
 800d082:	bf00      	nop
 800d084:	e7fe      	b.n	800d084 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d086:	697b      	ldr	r3, [r7, #20]
}
 800d088:	4618      	mov	r0, r3
 800d08a:	3718      	adds	r7, #24
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}
 800d090:	20000e7c 	.word	0x20000e7c
 800d094:	08010188 	.word	0x08010188
 800d098:	0800d2dd 	.word	0x0800d2dd
 800d09c:	20000e80 	.word	0x20000e80

0800d0a0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b088      	sub	sp, #32
 800d0a4:	af02      	add	r7, sp, #8
 800d0a6:	60f8      	str	r0, [r7, #12]
 800d0a8:	60b9      	str	r1, [r7, #8]
 800d0aa:	607a      	str	r2, [r7, #4]
 800d0ac:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800d0ae:	202c      	movs	r0, #44	; 0x2c
 800d0b0:	f000 fd24 	bl	800dafc <pvPortMalloc>
 800d0b4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d00d      	beq.n	800d0d8 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d0bc:	697b      	ldr	r3, [r7, #20]
 800d0be:	9301      	str	r3, [sp, #4]
 800d0c0:	6a3b      	ldr	r3, [r7, #32]
 800d0c2:	9300      	str	r3, [sp, #0]
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	687a      	ldr	r2, [r7, #4]
 800d0c8:	68b9      	ldr	r1, [r7, #8]
 800d0ca:	68f8      	ldr	r0, [r7, #12]
 800d0cc:	f000 f846 	bl	800d15c <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800d0d8:	697b      	ldr	r3, [r7, #20]
	}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3718      	adds	r7, #24
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}

0800d0e2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800d0e2:	b580      	push	{r7, lr}
 800d0e4:	b08a      	sub	sp, #40	; 0x28
 800d0e6:	af02      	add	r7, sp, #8
 800d0e8:	60f8      	str	r0, [r7, #12]
 800d0ea:	60b9      	str	r1, [r7, #8]
 800d0ec:	607a      	str	r2, [r7, #4]
 800d0ee:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800d0f0:	232c      	movs	r3, #44	; 0x2c
 800d0f2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800d0f4:	693b      	ldr	r3, [r7, #16]
 800d0f6:	2b2c      	cmp	r3, #44	; 0x2c
 800d0f8:	d00a      	beq.n	800d110 <xTimerCreateStatic+0x2e>
	__asm volatile
 800d0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0fe:	f383 8811 	msr	BASEPRI, r3
 800d102:	f3bf 8f6f 	isb	sy
 800d106:	f3bf 8f4f 	dsb	sy
 800d10a:	61bb      	str	r3, [r7, #24]
}
 800d10c:	bf00      	nop
 800d10e:	e7fe      	b.n	800d10e <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800d110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d112:	2b00      	cmp	r3, #0
 800d114:	d10a      	bne.n	800d12c <xTimerCreateStatic+0x4a>
	__asm volatile
 800d116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d11a:	f383 8811 	msr	BASEPRI, r3
 800d11e:	f3bf 8f6f 	isb	sy
 800d122:	f3bf 8f4f 	dsb	sy
 800d126:	617b      	str	r3, [r7, #20]
}
 800d128:	bf00      	nop
 800d12a:	e7fe      	b.n	800d12a <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d12e:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800d130:	69fb      	ldr	r3, [r7, #28]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d00d      	beq.n	800d152 <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d136:	69fb      	ldr	r3, [r7, #28]
 800d138:	9301      	str	r3, [sp, #4]
 800d13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d13c:	9300      	str	r3, [sp, #0]
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	687a      	ldr	r2, [r7, #4]
 800d142:	68b9      	ldr	r1, [r7, #8]
 800d144:	68f8      	ldr	r0, [r7, #12]
 800d146:	f000 f809 	bl	800d15c <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800d14a:	69fb      	ldr	r3, [r7, #28]
 800d14c:	2201      	movs	r2, #1
 800d14e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800d152:	69fb      	ldr	r3, [r7, #28]
	}
 800d154:	4618      	mov	r0, r3
 800d156:	3720      	adds	r7, #32
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}

0800d15c <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b086      	sub	sp, #24
 800d160:	af00      	add	r7, sp, #0
 800d162:	60f8      	str	r0, [r7, #12]
 800d164:	60b9      	str	r1, [r7, #8]
 800d166:	607a      	str	r2, [r7, #4]
 800d168:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d10a      	bne.n	800d186 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800d170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d174:	f383 8811 	msr	BASEPRI, r3
 800d178:	f3bf 8f6f 	isb	sy
 800d17c:	f3bf 8f4f 	dsb	sy
 800d180:	617b      	str	r3, [r7, #20]
}
 800d182:	bf00      	nop
 800d184:	e7fe      	b.n	800d184 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800d186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d015      	beq.n	800d1b8 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800d18c:	f000 fa88 	bl	800d6a0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800d190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d192:	68fa      	ldr	r2, [r7, #12]
 800d194:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800d196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d198:	68ba      	ldr	r2, [r7, #8]
 800d19a:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800d19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d19e:	687a      	ldr	r2, [r7, #4]
 800d1a0:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800d1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a4:	683a      	ldr	r2, [r7, #0]
 800d1a6:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800d1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1aa:	6a3a      	ldr	r2, [r7, #32]
 800d1ac:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800d1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b0:	3304      	adds	r3, #4
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f7fd feea 	bl	800af8c <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800d1b8:	bf00      	nop
 800d1ba:	3718      	adds	r7, #24
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}

0800d1c0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b08a      	sub	sp, #40	; 0x28
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	60f8      	str	r0, [r7, #12]
 800d1c8:	60b9      	str	r1, [r7, #8]
 800d1ca:	607a      	str	r2, [r7, #4]
 800d1cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d10a      	bne.n	800d1ee <xTimerGenericCommand+0x2e>
	__asm volatile
 800d1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1dc:	f383 8811 	msr	BASEPRI, r3
 800d1e0:	f3bf 8f6f 	isb	sy
 800d1e4:	f3bf 8f4f 	dsb	sy
 800d1e8:	623b      	str	r3, [r7, #32]
}
 800d1ea:	bf00      	nop
 800d1ec:	e7fe      	b.n	800d1ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d1ee:	4b1a      	ldr	r3, [pc, #104]	; (800d258 <xTimerGenericCommand+0x98>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d02a      	beq.n	800d24c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	2b05      	cmp	r3, #5
 800d206:	dc18      	bgt.n	800d23a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d208:	f7ff fcbe 	bl	800cb88 <xTaskGetSchedulerState>
 800d20c:	4603      	mov	r3, r0
 800d20e:	2b02      	cmp	r3, #2
 800d210:	d109      	bne.n	800d226 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d212:	4b11      	ldr	r3, [pc, #68]	; (800d258 <xTimerGenericCommand+0x98>)
 800d214:	6818      	ldr	r0, [r3, #0]
 800d216:	f107 0114 	add.w	r1, r7, #20
 800d21a:	2300      	movs	r3, #0
 800d21c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d21e:	f7fe f881 	bl	800b324 <xQueueGenericSend>
 800d222:	6278      	str	r0, [r7, #36]	; 0x24
 800d224:	e012      	b.n	800d24c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d226:	4b0c      	ldr	r3, [pc, #48]	; (800d258 <xTimerGenericCommand+0x98>)
 800d228:	6818      	ldr	r0, [r3, #0]
 800d22a:	f107 0114 	add.w	r1, r7, #20
 800d22e:	2300      	movs	r3, #0
 800d230:	2200      	movs	r2, #0
 800d232:	f7fe f877 	bl	800b324 <xQueueGenericSend>
 800d236:	6278      	str	r0, [r7, #36]	; 0x24
 800d238:	e008      	b.n	800d24c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d23a:	4b07      	ldr	r3, [pc, #28]	; (800d258 <xTimerGenericCommand+0x98>)
 800d23c:	6818      	ldr	r0, [r3, #0]
 800d23e:	f107 0114 	add.w	r1, r7, #20
 800d242:	2300      	movs	r3, #0
 800d244:	683a      	ldr	r2, [r7, #0]
 800d246:	f7fe f96b 	bl	800b520 <xQueueGenericSendFromISR>
 800d24a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d24e:	4618      	mov	r0, r3
 800d250:	3728      	adds	r7, #40	; 0x28
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}
 800d256:	bf00      	nop
 800d258:	20000e7c 	.word	0x20000e7c

0800d25c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b088      	sub	sp, #32
 800d260:	af02      	add	r7, sp, #8
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d266:	4b1c      	ldr	r3, [pc, #112]	; (800d2d8 <prvProcessExpiredTimer+0x7c>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	68db      	ldr	r3, [r3, #12]
 800d26c:	68db      	ldr	r3, [r3, #12]
 800d26e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	3304      	adds	r3, #4
 800d274:	4618      	mov	r0, r3
 800d276:	f7fd fef0 	bl	800b05a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	69db      	ldr	r3, [r3, #28]
 800d27e:	2b01      	cmp	r3, #1
 800d280:	d122      	bne.n	800d2c8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	699a      	ldr	r2, [r3, #24]
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	18d1      	adds	r1, r2, r3
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	683a      	ldr	r2, [r7, #0]
 800d28e:	6978      	ldr	r0, [r7, #20]
 800d290:	f000 f8c8 	bl	800d424 <prvInsertTimerInActiveList>
 800d294:	4603      	mov	r3, r0
 800d296:	2b00      	cmp	r3, #0
 800d298:	d016      	beq.n	800d2c8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d29a:	2300      	movs	r3, #0
 800d29c:	9300      	str	r3, [sp, #0]
 800d29e:	2300      	movs	r3, #0
 800d2a0:	687a      	ldr	r2, [r7, #4]
 800d2a2:	2100      	movs	r1, #0
 800d2a4:	6978      	ldr	r0, [r7, #20]
 800d2a6:	f7ff ff8b 	bl	800d1c0 <xTimerGenericCommand>
 800d2aa:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d2ac:	693b      	ldr	r3, [r7, #16]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d10a      	bne.n	800d2c8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800d2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b6:	f383 8811 	msr	BASEPRI, r3
 800d2ba:	f3bf 8f6f 	isb	sy
 800d2be:	f3bf 8f4f 	dsb	sy
 800d2c2:	60fb      	str	r3, [r7, #12]
}
 800d2c4:	bf00      	nop
 800d2c6:	e7fe      	b.n	800d2c6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2cc:	6978      	ldr	r0, [r7, #20]
 800d2ce:	4798      	blx	r3
}
 800d2d0:	bf00      	nop
 800d2d2:	3718      	adds	r7, #24
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}
 800d2d8:	20000e74 	.word	0x20000e74

0800d2dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b084      	sub	sp, #16
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d2e4:	f107 0308 	add.w	r3, r7, #8
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f000 f857 	bl	800d39c <prvGetNextExpireTime>
 800d2ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	4619      	mov	r1, r3
 800d2f4:	68f8      	ldr	r0, [r7, #12]
 800d2f6:	f000 f803 	bl	800d300 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d2fa:	f000 f8d5 	bl	800d4a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d2fe:	e7f1      	b.n	800d2e4 <prvTimerTask+0x8>

0800d300 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b084      	sub	sp, #16
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
 800d308:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d30a:	f7ff f84b 	bl	800c3a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d30e:	f107 0308 	add.w	r3, r7, #8
 800d312:	4618      	mov	r0, r3
 800d314:	f000 f866 	bl	800d3e4 <prvSampleTimeNow>
 800d318:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d130      	bne.n	800d382 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d10a      	bne.n	800d33c <prvProcessTimerOrBlockTask+0x3c>
 800d326:	687a      	ldr	r2, [r7, #4]
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	429a      	cmp	r2, r3
 800d32c:	d806      	bhi.n	800d33c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d32e:	f7ff f847 	bl	800c3c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d332:	68f9      	ldr	r1, [r7, #12]
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f7ff ff91 	bl	800d25c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d33a:	e024      	b.n	800d386 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d008      	beq.n	800d354 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d342:	4b13      	ldr	r3, [pc, #76]	; (800d390 <prvProcessTimerOrBlockTask+0x90>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	bf0c      	ite	eq
 800d34c:	2301      	moveq	r3, #1
 800d34e:	2300      	movne	r3, #0
 800d350:	b2db      	uxtb	r3, r3
 800d352:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d354:	4b0f      	ldr	r3, [pc, #60]	; (800d394 <prvProcessTimerOrBlockTask+0x94>)
 800d356:	6818      	ldr	r0, [r3, #0]
 800d358:	687a      	ldr	r2, [r7, #4]
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	1ad3      	subs	r3, r2, r3
 800d35e:	683a      	ldr	r2, [r7, #0]
 800d360:	4619      	mov	r1, r3
 800d362:	f7fe fdbf 	bl	800bee4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d366:	f7ff f82b 	bl	800c3c0 <xTaskResumeAll>
 800d36a:	4603      	mov	r3, r0
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d10a      	bne.n	800d386 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d370:	4b09      	ldr	r3, [pc, #36]	; (800d398 <prvProcessTimerOrBlockTask+0x98>)
 800d372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d376:	601a      	str	r2, [r3, #0]
 800d378:	f3bf 8f4f 	dsb	sy
 800d37c:	f3bf 8f6f 	isb	sy
}
 800d380:	e001      	b.n	800d386 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d382:	f7ff f81d 	bl	800c3c0 <xTaskResumeAll>
}
 800d386:	bf00      	nop
 800d388:	3710      	adds	r7, #16
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}
 800d38e:	bf00      	nop
 800d390:	20000e78 	.word	0x20000e78
 800d394:	20000e7c 	.word	0x20000e7c
 800d398:	e000ed04 	.word	0xe000ed04

0800d39c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d39c:	b480      	push	{r7}
 800d39e:	b085      	sub	sp, #20
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d3a4:	4b0e      	ldr	r3, [pc, #56]	; (800d3e0 <prvGetNextExpireTime+0x44>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	bf0c      	ite	eq
 800d3ae:	2301      	moveq	r3, #1
 800d3b0:	2300      	movne	r3, #0
 800d3b2:	b2db      	uxtb	r3, r3
 800d3b4:	461a      	mov	r2, r3
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d105      	bne.n	800d3ce <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d3c2:	4b07      	ldr	r3, [pc, #28]	; (800d3e0 <prvGetNextExpireTime+0x44>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	68db      	ldr	r3, [r3, #12]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	60fb      	str	r3, [r7, #12]
 800d3cc:	e001      	b.n	800d3d2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3714      	adds	r7, #20
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bc80      	pop	{r7}
 800d3dc:	4770      	bx	lr
 800d3de:	bf00      	nop
 800d3e0:	20000e74 	.word	0x20000e74

0800d3e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b084      	sub	sp, #16
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d3ec:	f7ff f884 	bl	800c4f8 <xTaskGetTickCount>
 800d3f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d3f2:	4b0b      	ldr	r3, [pc, #44]	; (800d420 <prvSampleTimeNow+0x3c>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	68fa      	ldr	r2, [r7, #12]
 800d3f8:	429a      	cmp	r2, r3
 800d3fa:	d205      	bcs.n	800d408 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d3fc:	f000 f8ee 	bl	800d5dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2201      	movs	r2, #1
 800d404:	601a      	str	r2, [r3, #0]
 800d406:	e002      	b.n	800d40e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2200      	movs	r2, #0
 800d40c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d40e:	4a04      	ldr	r2, [pc, #16]	; (800d420 <prvSampleTimeNow+0x3c>)
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d414:	68fb      	ldr	r3, [r7, #12]
}
 800d416:	4618      	mov	r0, r3
 800d418:	3710      	adds	r7, #16
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
 800d41e:	bf00      	nop
 800d420:	20000e84 	.word	0x20000e84

0800d424 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b086      	sub	sp, #24
 800d428:	af00      	add	r7, sp, #0
 800d42a:	60f8      	str	r0, [r7, #12]
 800d42c:	60b9      	str	r1, [r7, #8]
 800d42e:	607a      	str	r2, [r7, #4]
 800d430:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d432:	2300      	movs	r3, #0
 800d434:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	68ba      	ldr	r2, [r7, #8]
 800d43a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	68fa      	ldr	r2, [r7, #12]
 800d440:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d442:	68ba      	ldr	r2, [r7, #8]
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	429a      	cmp	r2, r3
 800d448:	d812      	bhi.n	800d470 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d44a:	687a      	ldr	r2, [r7, #4]
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	1ad2      	subs	r2, r2, r3
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	699b      	ldr	r3, [r3, #24]
 800d454:	429a      	cmp	r2, r3
 800d456:	d302      	bcc.n	800d45e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d458:	2301      	movs	r3, #1
 800d45a:	617b      	str	r3, [r7, #20]
 800d45c:	e01b      	b.n	800d496 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d45e:	4b10      	ldr	r3, [pc, #64]	; (800d4a0 <prvInsertTimerInActiveList+0x7c>)
 800d460:	681a      	ldr	r2, [r3, #0]
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	3304      	adds	r3, #4
 800d466:	4619      	mov	r1, r3
 800d468:	4610      	mov	r0, r2
 800d46a:	f7fd fdbe 	bl	800afea <vListInsert>
 800d46e:	e012      	b.n	800d496 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d470:	687a      	ldr	r2, [r7, #4]
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	429a      	cmp	r2, r3
 800d476:	d206      	bcs.n	800d486 <prvInsertTimerInActiveList+0x62>
 800d478:	68ba      	ldr	r2, [r7, #8]
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	429a      	cmp	r2, r3
 800d47e:	d302      	bcc.n	800d486 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d480:	2301      	movs	r3, #1
 800d482:	617b      	str	r3, [r7, #20]
 800d484:	e007      	b.n	800d496 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d486:	4b07      	ldr	r3, [pc, #28]	; (800d4a4 <prvInsertTimerInActiveList+0x80>)
 800d488:	681a      	ldr	r2, [r3, #0]
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	3304      	adds	r3, #4
 800d48e:	4619      	mov	r1, r3
 800d490:	4610      	mov	r0, r2
 800d492:	f7fd fdaa 	bl	800afea <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d496:	697b      	ldr	r3, [r7, #20]
}
 800d498:	4618      	mov	r0, r3
 800d49a:	3718      	adds	r7, #24
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}
 800d4a0:	20000e78 	.word	0x20000e78
 800d4a4:	20000e74 	.word	0x20000e74

0800d4a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b08c      	sub	sp, #48	; 0x30
 800d4ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d4ae:	e081      	b.n	800d5b4 <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	db7d      	blt.n	800d5b2 <prvProcessReceivedCommands+0x10a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d4b6:	693b      	ldr	r3, [r7, #16]
 800d4b8:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4bc:	695b      	ldr	r3, [r3, #20]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d004      	beq.n	800d4cc <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c4:	3304      	adds	r3, #4
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	f7fd fdc7 	bl	800b05a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d4cc:	1d3b      	adds	r3, r7, #4
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	f7ff ff88 	bl	800d3e4 <prvSampleTimeNow>
 800d4d4:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	2b09      	cmp	r3, #9
 800d4da:	d86b      	bhi.n	800d5b4 <prvProcessReceivedCommands+0x10c>
 800d4dc:	a201      	add	r2, pc, #4	; (adr r2, 800d4e4 <prvProcessReceivedCommands+0x3c>)
 800d4de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4e2:	bf00      	nop
 800d4e4:	0800d50d 	.word	0x0800d50d
 800d4e8:	0800d50d 	.word	0x0800d50d
 800d4ec:	0800d50d 	.word	0x0800d50d
 800d4f0:	0800d5b5 	.word	0x0800d5b5
 800d4f4:	0800d569 	.word	0x0800d569
 800d4f8:	0800d5a1 	.word	0x0800d5a1
 800d4fc:	0800d50d 	.word	0x0800d50d
 800d500:	0800d50d 	.word	0x0800d50d
 800d504:	0800d5b5 	.word	0x0800d5b5
 800d508:	0800d569 	.word	0x0800d569
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d50c:	68fa      	ldr	r2, [r7, #12]
 800d50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d510:	699b      	ldr	r3, [r3, #24]
 800d512:	18d1      	adds	r1, r2, r3
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	6a3a      	ldr	r2, [r7, #32]
 800d518:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d51a:	f7ff ff83 	bl	800d424 <prvInsertTimerInActiveList>
 800d51e:	4603      	mov	r3, r0
 800d520:	2b00      	cmp	r3, #0
 800d522:	d047      	beq.n	800d5b4 <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d528:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d52a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800d52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d52e:	69db      	ldr	r3, [r3, #28]
 800d530:	2b01      	cmp	r3, #1
 800d532:	d13f      	bne.n	800d5b4 <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d534:	68fa      	ldr	r2, [r7, #12]
 800d536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d538:	699b      	ldr	r3, [r3, #24]
 800d53a:	441a      	add	r2, r3
 800d53c:	2300      	movs	r3, #0
 800d53e:	9300      	str	r3, [sp, #0]
 800d540:	2300      	movs	r3, #0
 800d542:	2100      	movs	r1, #0
 800d544:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d546:	f7ff fe3b 	bl	800d1c0 <xTimerGenericCommand>
 800d54a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800d54c:	69fb      	ldr	r3, [r7, #28]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d130      	bne.n	800d5b4 <prvProcessReceivedCommands+0x10c>
	__asm volatile
 800d552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d556:	f383 8811 	msr	BASEPRI, r3
 800d55a:	f3bf 8f6f 	isb	sy
 800d55e:	f3bf 8f4f 	dsb	sy
 800d562:	61bb      	str	r3, [r7, #24]
}
 800d564:	bf00      	nop
 800d566:	e7fe      	b.n	800d566 <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d568:	68fa      	ldr	r2, [r7, #12]
 800d56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d56c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d570:	699b      	ldr	r3, [r3, #24]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d10a      	bne.n	800d58c <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800d576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d57a:	f383 8811 	msr	BASEPRI, r3
 800d57e:	f3bf 8f6f 	isb	sy
 800d582:	f3bf 8f4f 	dsb	sy
 800d586:	617b      	str	r3, [r7, #20]
}
 800d588:	bf00      	nop
 800d58a:	e7fe      	b.n	800d58a <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d58e:	699a      	ldr	r2, [r3, #24]
 800d590:	6a3b      	ldr	r3, [r7, #32]
 800d592:	18d1      	adds	r1, r2, r3
 800d594:	6a3b      	ldr	r3, [r7, #32]
 800d596:	6a3a      	ldr	r2, [r7, #32]
 800d598:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d59a:	f7ff ff43 	bl	800d424 <prvInsertTimerInActiveList>
					break;
 800d59e:	e009      	b.n	800d5b4 <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d104      	bne.n	800d5b4 <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 800d5aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d5ac:	f000 fb6a 	bl	800dc84 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d5b0:	e000      	b.n	800d5b4 <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d5b2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d5b4:	4b08      	ldr	r3, [pc, #32]	; (800d5d8 <prvProcessReceivedCommands+0x130>)
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	f107 0108 	add.w	r1, r7, #8
 800d5bc:	2200      	movs	r2, #0
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f7fe f8d4 	bl	800b76c <xQueueReceive>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	f47f af72 	bne.w	800d4b0 <prvProcessReceivedCommands+0x8>
	}
}
 800d5cc:	bf00      	nop
 800d5ce:	bf00      	nop
 800d5d0:	3728      	adds	r7, #40	; 0x28
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}
 800d5d6:	bf00      	nop
 800d5d8:	20000e7c 	.word	0x20000e7c

0800d5dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b088      	sub	sp, #32
 800d5e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d5e2:	e045      	b.n	800d670 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d5e4:	4b2c      	ldr	r3, [pc, #176]	; (800d698 <prvSwitchTimerLists+0xbc>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	68db      	ldr	r3, [r3, #12]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d5ee:	4b2a      	ldr	r3, [pc, #168]	; (800d698 <prvSwitchTimerLists+0xbc>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	68db      	ldr	r3, [r3, #12]
 800d5f4:	68db      	ldr	r3, [r3, #12]
 800d5f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	3304      	adds	r3, #4
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f7fd fd2c 	bl	800b05a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d606:	68f8      	ldr	r0, [r7, #12]
 800d608:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	69db      	ldr	r3, [r3, #28]
 800d60e:	2b01      	cmp	r3, #1
 800d610:	d12e      	bne.n	800d670 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	699b      	ldr	r3, [r3, #24]
 800d616:	693a      	ldr	r2, [r7, #16]
 800d618:	4413      	add	r3, r2
 800d61a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d61c:	68ba      	ldr	r2, [r7, #8]
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	429a      	cmp	r2, r3
 800d622:	d90e      	bls.n	800d642 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	68ba      	ldr	r2, [r7, #8]
 800d628:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	68fa      	ldr	r2, [r7, #12]
 800d62e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d630:	4b19      	ldr	r3, [pc, #100]	; (800d698 <prvSwitchTimerLists+0xbc>)
 800d632:	681a      	ldr	r2, [r3, #0]
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	3304      	adds	r3, #4
 800d638:	4619      	mov	r1, r3
 800d63a:	4610      	mov	r0, r2
 800d63c:	f7fd fcd5 	bl	800afea <vListInsert>
 800d640:	e016      	b.n	800d670 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d642:	2300      	movs	r3, #0
 800d644:	9300      	str	r3, [sp, #0]
 800d646:	2300      	movs	r3, #0
 800d648:	693a      	ldr	r2, [r7, #16]
 800d64a:	2100      	movs	r1, #0
 800d64c:	68f8      	ldr	r0, [r7, #12]
 800d64e:	f7ff fdb7 	bl	800d1c0 <xTimerGenericCommand>
 800d652:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d10a      	bne.n	800d670 <prvSwitchTimerLists+0x94>
	__asm volatile
 800d65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d65e:	f383 8811 	msr	BASEPRI, r3
 800d662:	f3bf 8f6f 	isb	sy
 800d666:	f3bf 8f4f 	dsb	sy
 800d66a:	603b      	str	r3, [r7, #0]
}
 800d66c:	bf00      	nop
 800d66e:	e7fe      	b.n	800d66e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d670:	4b09      	ldr	r3, [pc, #36]	; (800d698 <prvSwitchTimerLists+0xbc>)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d1b4      	bne.n	800d5e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d67a:	4b07      	ldr	r3, [pc, #28]	; (800d698 <prvSwitchTimerLists+0xbc>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d680:	4b06      	ldr	r3, [pc, #24]	; (800d69c <prvSwitchTimerLists+0xc0>)
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	4a04      	ldr	r2, [pc, #16]	; (800d698 <prvSwitchTimerLists+0xbc>)
 800d686:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d688:	4a04      	ldr	r2, [pc, #16]	; (800d69c <prvSwitchTimerLists+0xc0>)
 800d68a:	697b      	ldr	r3, [r7, #20]
 800d68c:	6013      	str	r3, [r2, #0]
}
 800d68e:	bf00      	nop
 800d690:	3718      	adds	r7, #24
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop
 800d698:	20000e74 	.word	0x20000e74
 800d69c:	20000e78 	.word	0x20000e78

0800d6a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b082      	sub	sp, #8
 800d6a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d6a6:	f000 f929 	bl	800d8fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d6aa:	4b15      	ldr	r3, [pc, #84]	; (800d700 <prvCheckForValidListAndQueue+0x60>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d120      	bne.n	800d6f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d6b2:	4814      	ldr	r0, [pc, #80]	; (800d704 <prvCheckForValidListAndQueue+0x64>)
 800d6b4:	f7fd fc4b 	bl	800af4e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d6b8:	4813      	ldr	r0, [pc, #76]	; (800d708 <prvCheckForValidListAndQueue+0x68>)
 800d6ba:	f7fd fc48 	bl	800af4e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d6be:	4b13      	ldr	r3, [pc, #76]	; (800d70c <prvCheckForValidListAndQueue+0x6c>)
 800d6c0:	4a10      	ldr	r2, [pc, #64]	; (800d704 <prvCheckForValidListAndQueue+0x64>)
 800d6c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d6c4:	4b12      	ldr	r3, [pc, #72]	; (800d710 <prvCheckForValidListAndQueue+0x70>)
 800d6c6:	4a10      	ldr	r2, [pc, #64]	; (800d708 <prvCheckForValidListAndQueue+0x68>)
 800d6c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	9300      	str	r3, [sp, #0]
 800d6ce:	4b11      	ldr	r3, [pc, #68]	; (800d714 <prvCheckForValidListAndQueue+0x74>)
 800d6d0:	4a11      	ldr	r2, [pc, #68]	; (800d718 <prvCheckForValidListAndQueue+0x78>)
 800d6d2:	210c      	movs	r1, #12
 800d6d4:	200a      	movs	r0, #10
 800d6d6:	f7fd fd51 	bl	800b17c <xQueueGenericCreateStatic>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	4a08      	ldr	r2, [pc, #32]	; (800d700 <prvCheckForValidListAndQueue+0x60>)
 800d6de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d6e0:	4b07      	ldr	r3, [pc, #28]	; (800d700 <prvCheckForValidListAndQueue+0x60>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d005      	beq.n	800d6f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d6e8:	4b05      	ldr	r3, [pc, #20]	; (800d700 <prvCheckForValidListAndQueue+0x60>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	490b      	ldr	r1, [pc, #44]	; (800d71c <prvCheckForValidListAndQueue+0x7c>)
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f7fe fbd0 	bl	800be94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d6f4:	f000 f932 	bl	800d95c <vPortExitCritical>
}
 800d6f8:	bf00      	nop
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}
 800d6fe:	bf00      	nop
 800d700:	20000e7c 	.word	0x20000e7c
 800d704:	20000e4c 	.word	0x20000e4c
 800d708:	20000e60 	.word	0x20000e60
 800d70c:	20000e74 	.word	0x20000e74
 800d710:	20000e78 	.word	0x20000e78
 800d714:	20000f00 	.word	0x20000f00
 800d718:	20000e88 	.word	0x20000e88
 800d71c:	08010190 	.word	0x08010190

0800d720 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d720:	b480      	push	{r7}
 800d722:	b085      	sub	sp, #20
 800d724:	af00      	add	r7, sp, #0
 800d726:	60f8      	str	r0, [r7, #12]
 800d728:	60b9      	str	r1, [r7, #8]
 800d72a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	3b04      	subs	r3, #4
 800d730:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d738:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	3b04      	subs	r3, #4
 800d73e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	f023 0201 	bic.w	r2, r3, #1
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	3b04      	subs	r3, #4
 800d74e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d750:	4a08      	ldr	r2, [pc, #32]	; (800d774 <pxPortInitialiseStack+0x54>)
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	3b14      	subs	r3, #20
 800d75a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d75c:	687a      	ldr	r2, [r7, #4]
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	3b20      	subs	r3, #32
 800d766:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d768:	68fb      	ldr	r3, [r7, #12]
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3714      	adds	r7, #20
 800d76e:	46bd      	mov	sp, r7
 800d770:	bc80      	pop	{r7}
 800d772:	4770      	bx	lr
 800d774:	0800d779 	.word	0x0800d779

0800d778 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d778:	b480      	push	{r7}
 800d77a:	b085      	sub	sp, #20
 800d77c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800d77e:	2300      	movs	r3, #0
 800d780:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d782:	4b12      	ldr	r3, [pc, #72]	; (800d7cc <prvTaskExitError+0x54>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d78a:	d00a      	beq.n	800d7a2 <prvTaskExitError+0x2a>
	__asm volatile
 800d78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d790:	f383 8811 	msr	BASEPRI, r3
 800d794:	f3bf 8f6f 	isb	sy
 800d798:	f3bf 8f4f 	dsb	sy
 800d79c:	60fb      	str	r3, [r7, #12]
}
 800d79e:	bf00      	nop
 800d7a0:	e7fe      	b.n	800d7a0 <prvTaskExitError+0x28>
	__asm volatile
 800d7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a6:	f383 8811 	msr	BASEPRI, r3
 800d7aa:	f3bf 8f6f 	isb	sy
 800d7ae:	f3bf 8f4f 	dsb	sy
 800d7b2:	60bb      	str	r3, [r7, #8]
}
 800d7b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d7b6:	bf00      	nop
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d0fc      	beq.n	800d7b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d7be:	bf00      	nop
 800d7c0:	bf00      	nop
 800d7c2:	3714      	adds	r7, #20
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bc80      	pop	{r7}
 800d7c8:	4770      	bx	lr
 800d7ca:	bf00      	nop
 800d7cc:	20000058 	.word	0x20000058

0800d7d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d7d0:	4b07      	ldr	r3, [pc, #28]	; (800d7f0 <pxCurrentTCBConst2>)
 800d7d2:	6819      	ldr	r1, [r3, #0]
 800d7d4:	6808      	ldr	r0, [r1, #0]
 800d7d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d7da:	f380 8809 	msr	PSP, r0
 800d7de:	f3bf 8f6f 	isb	sy
 800d7e2:	f04f 0000 	mov.w	r0, #0
 800d7e6:	f380 8811 	msr	BASEPRI, r0
 800d7ea:	f04e 0e0d 	orr.w	lr, lr, #13
 800d7ee:	4770      	bx	lr

0800d7f0 <pxCurrentTCBConst2>:
 800d7f0:	20000d20 	.word	0x20000d20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d7f4:	bf00      	nop
 800d7f6:	bf00      	nop

0800d7f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800d7f8:	4806      	ldr	r0, [pc, #24]	; (800d814 <prvPortStartFirstTask+0x1c>)
 800d7fa:	6800      	ldr	r0, [r0, #0]
 800d7fc:	6800      	ldr	r0, [r0, #0]
 800d7fe:	f380 8808 	msr	MSP, r0
 800d802:	b662      	cpsie	i
 800d804:	b661      	cpsie	f
 800d806:	f3bf 8f4f 	dsb	sy
 800d80a:	f3bf 8f6f 	isb	sy
 800d80e:	df00      	svc	0
 800d810:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d812:	bf00      	nop
 800d814:	e000ed08 	.word	0xe000ed08

0800d818 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b084      	sub	sp, #16
 800d81c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d81e:	4b32      	ldr	r3, [pc, #200]	; (800d8e8 <xPortStartScheduler+0xd0>)
 800d820:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	781b      	ldrb	r3, [r3, #0]
 800d826:	b2db      	uxtb	r3, r3
 800d828:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	22ff      	movs	r2, #255	; 0xff
 800d82e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	781b      	ldrb	r3, [r3, #0]
 800d834:	b2db      	uxtb	r3, r3
 800d836:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d838:	78fb      	ldrb	r3, [r7, #3]
 800d83a:	b2db      	uxtb	r3, r3
 800d83c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d840:	b2da      	uxtb	r2, r3
 800d842:	4b2a      	ldr	r3, [pc, #168]	; (800d8ec <xPortStartScheduler+0xd4>)
 800d844:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d846:	4b2a      	ldr	r3, [pc, #168]	; (800d8f0 <xPortStartScheduler+0xd8>)
 800d848:	2207      	movs	r2, #7
 800d84a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d84c:	e009      	b.n	800d862 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d84e:	4b28      	ldr	r3, [pc, #160]	; (800d8f0 <xPortStartScheduler+0xd8>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	3b01      	subs	r3, #1
 800d854:	4a26      	ldr	r2, [pc, #152]	; (800d8f0 <xPortStartScheduler+0xd8>)
 800d856:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d858:	78fb      	ldrb	r3, [r7, #3]
 800d85a:	b2db      	uxtb	r3, r3
 800d85c:	005b      	lsls	r3, r3, #1
 800d85e:	b2db      	uxtb	r3, r3
 800d860:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d862:	78fb      	ldrb	r3, [r7, #3]
 800d864:	b2db      	uxtb	r3, r3
 800d866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d86a:	2b80      	cmp	r3, #128	; 0x80
 800d86c:	d0ef      	beq.n	800d84e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d86e:	4b20      	ldr	r3, [pc, #128]	; (800d8f0 <xPortStartScheduler+0xd8>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	f1c3 0307 	rsb	r3, r3, #7
 800d876:	2b04      	cmp	r3, #4
 800d878:	d00a      	beq.n	800d890 <xPortStartScheduler+0x78>
	__asm volatile
 800d87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d87e:	f383 8811 	msr	BASEPRI, r3
 800d882:	f3bf 8f6f 	isb	sy
 800d886:	f3bf 8f4f 	dsb	sy
 800d88a:	60bb      	str	r3, [r7, #8]
}
 800d88c:	bf00      	nop
 800d88e:	e7fe      	b.n	800d88e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d890:	4b17      	ldr	r3, [pc, #92]	; (800d8f0 <xPortStartScheduler+0xd8>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	021b      	lsls	r3, r3, #8
 800d896:	4a16      	ldr	r2, [pc, #88]	; (800d8f0 <xPortStartScheduler+0xd8>)
 800d898:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d89a:	4b15      	ldr	r3, [pc, #84]	; (800d8f0 <xPortStartScheduler+0xd8>)
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d8a2:	4a13      	ldr	r2, [pc, #76]	; (800d8f0 <xPortStartScheduler+0xd8>)
 800d8a4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	b2da      	uxtb	r2, r3
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d8ae:	4b11      	ldr	r3, [pc, #68]	; (800d8f4 <xPortStartScheduler+0xdc>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	4a10      	ldr	r2, [pc, #64]	; (800d8f4 <xPortStartScheduler+0xdc>)
 800d8b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d8b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d8ba:	4b0e      	ldr	r3, [pc, #56]	; (800d8f4 <xPortStartScheduler+0xdc>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	4a0d      	ldr	r2, [pc, #52]	; (800d8f4 <xPortStartScheduler+0xdc>)
 800d8c0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d8c4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d8c6:	f000 f8b9 	bl	800da3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d8ca:	4b0b      	ldr	r3, [pc, #44]	; (800d8f8 <xPortStartScheduler+0xe0>)
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d8d0:	f7ff ff92 	bl	800d7f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d8d4:	f7fe feee 	bl	800c6b4 <vTaskSwitchContext>
	prvTaskExitError();
 800d8d8:	f7ff ff4e 	bl	800d778 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d8dc:	2300      	movs	r3, #0
}
 800d8de:	4618      	mov	r0, r3
 800d8e0:	3710      	adds	r7, #16
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}
 800d8e6:	bf00      	nop
 800d8e8:	e000e400 	.word	0xe000e400
 800d8ec:	20000f48 	.word	0x20000f48
 800d8f0:	20000f4c 	.word	0x20000f4c
 800d8f4:	e000ed20 	.word	0xe000ed20
 800d8f8:	20000058 	.word	0x20000058

0800d8fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b083      	sub	sp, #12
 800d900:	af00      	add	r7, sp, #0
	__asm volatile
 800d902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d906:	f383 8811 	msr	BASEPRI, r3
 800d90a:	f3bf 8f6f 	isb	sy
 800d90e:	f3bf 8f4f 	dsb	sy
 800d912:	607b      	str	r3, [r7, #4]
}
 800d914:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d916:	4b0f      	ldr	r3, [pc, #60]	; (800d954 <vPortEnterCritical+0x58>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	3301      	adds	r3, #1
 800d91c:	4a0d      	ldr	r2, [pc, #52]	; (800d954 <vPortEnterCritical+0x58>)
 800d91e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d920:	4b0c      	ldr	r3, [pc, #48]	; (800d954 <vPortEnterCritical+0x58>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	2b01      	cmp	r3, #1
 800d926:	d10f      	bne.n	800d948 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d928:	4b0b      	ldr	r3, [pc, #44]	; (800d958 <vPortEnterCritical+0x5c>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	b2db      	uxtb	r3, r3
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d00a      	beq.n	800d948 <vPortEnterCritical+0x4c>
	__asm volatile
 800d932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d936:	f383 8811 	msr	BASEPRI, r3
 800d93a:	f3bf 8f6f 	isb	sy
 800d93e:	f3bf 8f4f 	dsb	sy
 800d942:	603b      	str	r3, [r7, #0]
}
 800d944:	bf00      	nop
 800d946:	e7fe      	b.n	800d946 <vPortEnterCritical+0x4a>
	}
}
 800d948:	bf00      	nop
 800d94a:	370c      	adds	r7, #12
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bc80      	pop	{r7}
 800d950:	4770      	bx	lr
 800d952:	bf00      	nop
 800d954:	20000058 	.word	0x20000058
 800d958:	e000ed04 	.word	0xe000ed04

0800d95c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d95c:	b480      	push	{r7}
 800d95e:	b083      	sub	sp, #12
 800d960:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d962:	4b11      	ldr	r3, [pc, #68]	; (800d9a8 <vPortExitCritical+0x4c>)
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d10a      	bne.n	800d980 <vPortExitCritical+0x24>
	__asm volatile
 800d96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d96e:	f383 8811 	msr	BASEPRI, r3
 800d972:	f3bf 8f6f 	isb	sy
 800d976:	f3bf 8f4f 	dsb	sy
 800d97a:	607b      	str	r3, [r7, #4]
}
 800d97c:	bf00      	nop
 800d97e:	e7fe      	b.n	800d97e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d980:	4b09      	ldr	r3, [pc, #36]	; (800d9a8 <vPortExitCritical+0x4c>)
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	3b01      	subs	r3, #1
 800d986:	4a08      	ldr	r2, [pc, #32]	; (800d9a8 <vPortExitCritical+0x4c>)
 800d988:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d98a:	4b07      	ldr	r3, [pc, #28]	; (800d9a8 <vPortExitCritical+0x4c>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d105      	bne.n	800d99e <vPortExitCritical+0x42>
 800d992:	2300      	movs	r3, #0
 800d994:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	f383 8811 	msr	BASEPRI, r3
}
 800d99c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d99e:	bf00      	nop
 800d9a0:	370c      	adds	r7, #12
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bc80      	pop	{r7}
 800d9a6:	4770      	bx	lr
 800d9a8:	20000058 	.word	0x20000058
 800d9ac:	00000000 	.word	0x00000000

0800d9b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d9b0:	f3ef 8009 	mrs	r0, PSP
 800d9b4:	f3bf 8f6f 	isb	sy
 800d9b8:	4b0d      	ldr	r3, [pc, #52]	; (800d9f0 <pxCurrentTCBConst>)
 800d9ba:	681a      	ldr	r2, [r3, #0]
 800d9bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d9c0:	6010      	str	r0, [r2, #0]
 800d9c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800d9c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d9ca:	f380 8811 	msr	BASEPRI, r0
 800d9ce:	f7fe fe71 	bl	800c6b4 <vTaskSwitchContext>
 800d9d2:	f04f 0000 	mov.w	r0, #0
 800d9d6:	f380 8811 	msr	BASEPRI, r0
 800d9da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d9de:	6819      	ldr	r1, [r3, #0]
 800d9e0:	6808      	ldr	r0, [r1, #0]
 800d9e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d9e6:	f380 8809 	msr	PSP, r0
 800d9ea:	f3bf 8f6f 	isb	sy
 800d9ee:	4770      	bx	lr

0800d9f0 <pxCurrentTCBConst>:
 800d9f0:	20000d20 	.word	0x20000d20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d9f4:	bf00      	nop
 800d9f6:	bf00      	nop

0800d9f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b082      	sub	sp, #8
 800d9fc:	af00      	add	r7, sp, #0
	__asm volatile
 800d9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da02:	f383 8811 	msr	BASEPRI, r3
 800da06:	f3bf 8f6f 	isb	sy
 800da0a:	f3bf 8f4f 	dsb	sy
 800da0e:	607b      	str	r3, [r7, #4]
}
 800da10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800da12:	f7fe fd91 	bl	800c538 <xTaskIncrementTick>
 800da16:	4603      	mov	r3, r0
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d003      	beq.n	800da24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800da1c:	4b06      	ldr	r3, [pc, #24]	; (800da38 <SysTick_Handler+0x40>)
 800da1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da22:	601a      	str	r2, [r3, #0]
 800da24:	2300      	movs	r3, #0
 800da26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	f383 8811 	msr	BASEPRI, r3
}
 800da2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800da30:	bf00      	nop
 800da32:	3708      	adds	r7, #8
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}
 800da38:	e000ed04 	.word	0xe000ed04

0800da3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800da3c:	b480      	push	{r7}
 800da3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800da40:	4b0a      	ldr	r3, [pc, #40]	; (800da6c <vPortSetupTimerInterrupt+0x30>)
 800da42:	2200      	movs	r2, #0
 800da44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800da46:	4b0a      	ldr	r3, [pc, #40]	; (800da70 <vPortSetupTimerInterrupt+0x34>)
 800da48:	2200      	movs	r2, #0
 800da4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800da4c:	4b09      	ldr	r3, [pc, #36]	; (800da74 <vPortSetupTimerInterrupt+0x38>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	4a09      	ldr	r2, [pc, #36]	; (800da78 <vPortSetupTimerInterrupt+0x3c>)
 800da52:	fba2 2303 	umull	r2, r3, r2, r3
 800da56:	099b      	lsrs	r3, r3, #6
 800da58:	4a08      	ldr	r2, [pc, #32]	; (800da7c <vPortSetupTimerInterrupt+0x40>)
 800da5a:	3b01      	subs	r3, #1
 800da5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800da5e:	4b03      	ldr	r3, [pc, #12]	; (800da6c <vPortSetupTimerInterrupt+0x30>)
 800da60:	2207      	movs	r2, #7
 800da62:	601a      	str	r2, [r3, #0]
}
 800da64:	bf00      	nop
 800da66:	46bd      	mov	sp, r7
 800da68:	bc80      	pop	{r7}
 800da6a:	4770      	bx	lr
 800da6c:	e000e010 	.word	0xe000e010
 800da70:	e000e018 	.word	0xe000e018
 800da74:	2000004c 	.word	0x2000004c
 800da78:	10624dd3 	.word	0x10624dd3
 800da7c:	e000e014 	.word	0xe000e014

0800da80 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800da80:	b480      	push	{r7}
 800da82:	b085      	sub	sp, #20
 800da84:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800da86:	f3ef 8305 	mrs	r3, IPSR
 800da8a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	2b0f      	cmp	r3, #15
 800da90:	d914      	bls.n	800dabc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800da92:	4a16      	ldr	r2, [pc, #88]	; (800daec <vPortValidateInterruptPriority+0x6c>)
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	4413      	add	r3, r2
 800da98:	781b      	ldrb	r3, [r3, #0]
 800da9a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800da9c:	4b14      	ldr	r3, [pc, #80]	; (800daf0 <vPortValidateInterruptPriority+0x70>)
 800da9e:	781b      	ldrb	r3, [r3, #0]
 800daa0:	7afa      	ldrb	r2, [r7, #11]
 800daa2:	429a      	cmp	r2, r3
 800daa4:	d20a      	bcs.n	800dabc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800daa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daaa:	f383 8811 	msr	BASEPRI, r3
 800daae:	f3bf 8f6f 	isb	sy
 800dab2:	f3bf 8f4f 	dsb	sy
 800dab6:	607b      	str	r3, [r7, #4]
}
 800dab8:	bf00      	nop
 800daba:	e7fe      	b.n	800daba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dabc:	4b0d      	ldr	r3, [pc, #52]	; (800daf4 <vPortValidateInterruptPriority+0x74>)
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dac4:	4b0c      	ldr	r3, [pc, #48]	; (800daf8 <vPortValidateInterruptPriority+0x78>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	429a      	cmp	r2, r3
 800daca:	d90a      	bls.n	800dae2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800dacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dad0:	f383 8811 	msr	BASEPRI, r3
 800dad4:	f3bf 8f6f 	isb	sy
 800dad8:	f3bf 8f4f 	dsb	sy
 800dadc:	603b      	str	r3, [r7, #0]
}
 800dade:	bf00      	nop
 800dae0:	e7fe      	b.n	800dae0 <vPortValidateInterruptPriority+0x60>
	}
 800dae2:	bf00      	nop
 800dae4:	3714      	adds	r7, #20
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bc80      	pop	{r7}
 800daea:	4770      	bx	lr
 800daec:	e000e3f0 	.word	0xe000e3f0
 800daf0:	20000f48 	.word	0x20000f48
 800daf4:	e000ed0c 	.word	0xe000ed0c
 800daf8:	20000f4c 	.word	0x20000f4c

0800dafc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b08a      	sub	sp, #40	; 0x28
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800db04:	2300      	movs	r3, #0
 800db06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800db08:	f7fe fc4c 	bl	800c3a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800db0c:	4b58      	ldr	r3, [pc, #352]	; (800dc70 <pvPortMalloc+0x174>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d101      	bne.n	800db18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800db14:	f000 f910 	bl	800dd38 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800db18:	4b56      	ldr	r3, [pc, #344]	; (800dc74 <pvPortMalloc+0x178>)
 800db1a:	681a      	ldr	r2, [r3, #0]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	4013      	ands	r3, r2
 800db20:	2b00      	cmp	r3, #0
 800db22:	f040 808e 	bne.w	800dc42 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d01d      	beq.n	800db68 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800db2c:	2208      	movs	r2, #8
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	4413      	add	r3, r2
 800db32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f003 0307 	and.w	r3, r3, #7
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d014      	beq.n	800db68 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f023 0307 	bic.w	r3, r3, #7
 800db44:	3308      	adds	r3, #8
 800db46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	f003 0307 	and.w	r3, r3, #7
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d00a      	beq.n	800db68 <pvPortMalloc+0x6c>
	__asm volatile
 800db52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db56:	f383 8811 	msr	BASEPRI, r3
 800db5a:	f3bf 8f6f 	isb	sy
 800db5e:	f3bf 8f4f 	dsb	sy
 800db62:	617b      	str	r3, [r7, #20]
}
 800db64:	bf00      	nop
 800db66:	e7fe      	b.n	800db66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d069      	beq.n	800dc42 <pvPortMalloc+0x146>
 800db6e:	4b42      	ldr	r3, [pc, #264]	; (800dc78 <pvPortMalloc+0x17c>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	687a      	ldr	r2, [r7, #4]
 800db74:	429a      	cmp	r2, r3
 800db76:	d864      	bhi.n	800dc42 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800db78:	4b40      	ldr	r3, [pc, #256]	; (800dc7c <pvPortMalloc+0x180>)
 800db7a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800db7c:	4b3f      	ldr	r3, [pc, #252]	; (800dc7c <pvPortMalloc+0x180>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800db82:	e004      	b.n	800db8e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800db84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db86:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800db88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800db8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db90:	685b      	ldr	r3, [r3, #4]
 800db92:	687a      	ldr	r2, [r7, #4]
 800db94:	429a      	cmp	r2, r3
 800db96:	d903      	bls.n	800dba0 <pvPortMalloc+0xa4>
 800db98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d1f1      	bne.n	800db84 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dba0:	4b33      	ldr	r3, [pc, #204]	; (800dc70 <pvPortMalloc+0x174>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d04b      	beq.n	800dc42 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dbaa:	6a3b      	ldr	r3, [r7, #32]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	2208      	movs	r2, #8
 800dbb0:	4413      	add	r3, r2
 800dbb2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb6:	681a      	ldr	r2, [r3, #0]
 800dbb8:	6a3b      	ldr	r3, [r7, #32]
 800dbba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dbbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbbe:	685a      	ldr	r2, [r3, #4]
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	1ad2      	subs	r2, r2, r3
 800dbc4:	2308      	movs	r3, #8
 800dbc6:	005b      	lsls	r3, r3, #1
 800dbc8:	429a      	cmp	r2, r3
 800dbca:	d91f      	bls.n	800dc0c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dbcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	4413      	add	r3, r2
 800dbd2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dbd4:	69bb      	ldr	r3, [r7, #24]
 800dbd6:	f003 0307 	and.w	r3, r3, #7
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d00a      	beq.n	800dbf4 <pvPortMalloc+0xf8>
	__asm volatile
 800dbde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe2:	f383 8811 	msr	BASEPRI, r3
 800dbe6:	f3bf 8f6f 	isb	sy
 800dbea:	f3bf 8f4f 	dsb	sy
 800dbee:	613b      	str	r3, [r7, #16]
}
 800dbf0:	bf00      	nop
 800dbf2:	e7fe      	b.n	800dbf2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf6:	685a      	ldr	r2, [r3, #4]
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	1ad2      	subs	r2, r2, r3
 800dbfc:	69bb      	ldr	r3, [r7, #24]
 800dbfe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc02:	687a      	ldr	r2, [r7, #4]
 800dc04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dc06:	69b8      	ldr	r0, [r7, #24]
 800dc08:	f000 f8f8 	bl	800ddfc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dc0c:	4b1a      	ldr	r3, [pc, #104]	; (800dc78 <pvPortMalloc+0x17c>)
 800dc0e:	681a      	ldr	r2, [r3, #0]
 800dc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc12:	685b      	ldr	r3, [r3, #4]
 800dc14:	1ad3      	subs	r3, r2, r3
 800dc16:	4a18      	ldr	r2, [pc, #96]	; (800dc78 <pvPortMalloc+0x17c>)
 800dc18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dc1a:	4b17      	ldr	r3, [pc, #92]	; (800dc78 <pvPortMalloc+0x17c>)
 800dc1c:	681a      	ldr	r2, [r3, #0]
 800dc1e:	4b18      	ldr	r3, [pc, #96]	; (800dc80 <pvPortMalloc+0x184>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d203      	bcs.n	800dc2e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dc26:	4b14      	ldr	r3, [pc, #80]	; (800dc78 <pvPortMalloc+0x17c>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	4a15      	ldr	r2, [pc, #84]	; (800dc80 <pvPortMalloc+0x184>)
 800dc2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dc2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc30:	685a      	ldr	r2, [r3, #4]
 800dc32:	4b10      	ldr	r3, [pc, #64]	; (800dc74 <pvPortMalloc+0x178>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	431a      	orrs	r2, r3
 800dc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3e:	2200      	movs	r2, #0
 800dc40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dc42:	f7fe fbbd 	bl	800c3c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc46:	69fb      	ldr	r3, [r7, #28]
 800dc48:	f003 0307 	and.w	r3, r3, #7
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d00a      	beq.n	800dc66 <pvPortMalloc+0x16a>
	__asm volatile
 800dc50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc54:	f383 8811 	msr	BASEPRI, r3
 800dc58:	f3bf 8f6f 	isb	sy
 800dc5c:	f3bf 8f4f 	dsb	sy
 800dc60:	60fb      	str	r3, [r7, #12]
}
 800dc62:	bf00      	nop
 800dc64:	e7fe      	b.n	800dc64 <pvPortMalloc+0x168>
	return pvReturn;
 800dc66:	69fb      	ldr	r3, [r7, #28]
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3728      	adds	r7, #40	; 0x28
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}
 800dc70:	20002f58 	.word	0x20002f58
 800dc74:	20002f64 	.word	0x20002f64
 800dc78:	20002f5c 	.word	0x20002f5c
 800dc7c:	20002f50 	.word	0x20002f50
 800dc80:	20002f60 	.word	0x20002f60

0800dc84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b086      	sub	sp, #24
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d048      	beq.n	800dd28 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dc96:	2308      	movs	r3, #8
 800dc98:	425b      	negs	r3, r3
 800dc9a:	697a      	ldr	r2, [r7, #20]
 800dc9c:	4413      	add	r3, r2
 800dc9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dca0:	697b      	ldr	r3, [r7, #20]
 800dca2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	685a      	ldr	r2, [r3, #4]
 800dca8:	4b21      	ldr	r3, [pc, #132]	; (800dd30 <vPortFree+0xac>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	4013      	ands	r3, r2
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d10a      	bne.n	800dcc8 <vPortFree+0x44>
	__asm volatile
 800dcb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcb6:	f383 8811 	msr	BASEPRI, r3
 800dcba:	f3bf 8f6f 	isb	sy
 800dcbe:	f3bf 8f4f 	dsb	sy
 800dcc2:	60fb      	str	r3, [r7, #12]
}
 800dcc4:	bf00      	nop
 800dcc6:	e7fe      	b.n	800dcc6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dcc8:	693b      	ldr	r3, [r7, #16]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d00a      	beq.n	800dce6 <vPortFree+0x62>
	__asm volatile
 800dcd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcd4:	f383 8811 	msr	BASEPRI, r3
 800dcd8:	f3bf 8f6f 	isb	sy
 800dcdc:	f3bf 8f4f 	dsb	sy
 800dce0:	60bb      	str	r3, [r7, #8]
}
 800dce2:	bf00      	nop
 800dce4:	e7fe      	b.n	800dce4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dce6:	693b      	ldr	r3, [r7, #16]
 800dce8:	685a      	ldr	r2, [r3, #4]
 800dcea:	4b11      	ldr	r3, [pc, #68]	; (800dd30 <vPortFree+0xac>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	4013      	ands	r3, r2
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d019      	beq.n	800dd28 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dcf4:	693b      	ldr	r3, [r7, #16]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d115      	bne.n	800dd28 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dcfc:	693b      	ldr	r3, [r7, #16]
 800dcfe:	685a      	ldr	r2, [r3, #4]
 800dd00:	4b0b      	ldr	r3, [pc, #44]	; (800dd30 <vPortFree+0xac>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	43db      	mvns	r3, r3
 800dd06:	401a      	ands	r2, r3
 800dd08:	693b      	ldr	r3, [r7, #16]
 800dd0a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dd0c:	f7fe fb4a 	bl	800c3a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dd10:	693b      	ldr	r3, [r7, #16]
 800dd12:	685a      	ldr	r2, [r3, #4]
 800dd14:	4b07      	ldr	r3, [pc, #28]	; (800dd34 <vPortFree+0xb0>)
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	4413      	add	r3, r2
 800dd1a:	4a06      	ldr	r2, [pc, #24]	; (800dd34 <vPortFree+0xb0>)
 800dd1c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dd1e:	6938      	ldr	r0, [r7, #16]
 800dd20:	f000 f86c 	bl	800ddfc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800dd24:	f7fe fb4c 	bl	800c3c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dd28:	bf00      	nop
 800dd2a:	3718      	adds	r7, #24
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}
 800dd30:	20002f64 	.word	0x20002f64
 800dd34:	20002f5c 	.word	0x20002f5c

0800dd38 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dd38:	b480      	push	{r7}
 800dd3a:	b085      	sub	sp, #20
 800dd3c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dd3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dd42:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dd44:	4b27      	ldr	r3, [pc, #156]	; (800dde4 <prvHeapInit+0xac>)
 800dd46:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	f003 0307 	and.w	r3, r3, #7
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d00c      	beq.n	800dd6c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	3307      	adds	r3, #7
 800dd56:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	f023 0307 	bic.w	r3, r3, #7
 800dd5e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dd60:	68ba      	ldr	r2, [r7, #8]
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	1ad3      	subs	r3, r2, r3
 800dd66:	4a1f      	ldr	r2, [pc, #124]	; (800dde4 <prvHeapInit+0xac>)
 800dd68:	4413      	add	r3, r2
 800dd6a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dd70:	4a1d      	ldr	r2, [pc, #116]	; (800dde8 <prvHeapInit+0xb0>)
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dd76:	4b1c      	ldr	r3, [pc, #112]	; (800dde8 <prvHeapInit+0xb0>)
 800dd78:	2200      	movs	r2, #0
 800dd7a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	68ba      	ldr	r2, [r7, #8]
 800dd80:	4413      	add	r3, r2
 800dd82:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dd84:	2208      	movs	r2, #8
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	1a9b      	subs	r3, r3, r2
 800dd8a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	f023 0307 	bic.w	r3, r3, #7
 800dd92:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	4a15      	ldr	r2, [pc, #84]	; (800ddec <prvHeapInit+0xb4>)
 800dd98:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dd9a:	4b14      	ldr	r3, [pc, #80]	; (800ddec <prvHeapInit+0xb4>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dda2:	4b12      	ldr	r3, [pc, #72]	; (800ddec <prvHeapInit+0xb4>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	2200      	movs	r2, #0
 800dda8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	68fa      	ldr	r2, [r7, #12]
 800ddb2:	1ad2      	subs	r2, r2, r3
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ddb8:	4b0c      	ldr	r3, [pc, #48]	; (800ddec <prvHeapInit+0xb4>)
 800ddba:	681a      	ldr	r2, [r3, #0]
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	685b      	ldr	r3, [r3, #4]
 800ddc4:	4a0a      	ldr	r2, [pc, #40]	; (800ddf0 <prvHeapInit+0xb8>)
 800ddc6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	685b      	ldr	r3, [r3, #4]
 800ddcc:	4a09      	ldr	r2, [pc, #36]	; (800ddf4 <prvHeapInit+0xbc>)
 800ddce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ddd0:	4b09      	ldr	r3, [pc, #36]	; (800ddf8 <prvHeapInit+0xc0>)
 800ddd2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ddd6:	601a      	str	r2, [r3, #0]
}
 800ddd8:	bf00      	nop
 800ddda:	3714      	adds	r7, #20
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bc80      	pop	{r7}
 800dde0:	4770      	bx	lr
 800dde2:	bf00      	nop
 800dde4:	20000f50 	.word	0x20000f50
 800dde8:	20002f50 	.word	0x20002f50
 800ddec:	20002f58 	.word	0x20002f58
 800ddf0:	20002f60 	.word	0x20002f60
 800ddf4:	20002f5c 	.word	0x20002f5c
 800ddf8:	20002f64 	.word	0x20002f64

0800ddfc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ddfc:	b480      	push	{r7}
 800ddfe:	b085      	sub	sp, #20
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800de04:	4b27      	ldr	r3, [pc, #156]	; (800dea4 <prvInsertBlockIntoFreeList+0xa8>)
 800de06:	60fb      	str	r3, [r7, #12]
 800de08:	e002      	b.n	800de10 <prvInsertBlockIntoFreeList+0x14>
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	60fb      	str	r3, [r7, #12]
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	687a      	ldr	r2, [r7, #4]
 800de16:	429a      	cmp	r2, r3
 800de18:	d8f7      	bhi.n	800de0a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	685b      	ldr	r3, [r3, #4]
 800de22:	68ba      	ldr	r2, [r7, #8]
 800de24:	4413      	add	r3, r2
 800de26:	687a      	ldr	r2, [r7, #4]
 800de28:	429a      	cmp	r2, r3
 800de2a:	d108      	bne.n	800de3e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	685a      	ldr	r2, [r3, #4]
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	685b      	ldr	r3, [r3, #4]
 800de34:	441a      	add	r2, r3
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	685b      	ldr	r3, [r3, #4]
 800de46:	68ba      	ldr	r2, [r7, #8]
 800de48:	441a      	add	r2, r3
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	429a      	cmp	r2, r3
 800de50:	d118      	bne.n	800de84 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	681a      	ldr	r2, [r3, #0]
 800de56:	4b14      	ldr	r3, [pc, #80]	; (800dea8 <prvInsertBlockIntoFreeList+0xac>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	429a      	cmp	r2, r3
 800de5c:	d00d      	beq.n	800de7a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	685a      	ldr	r2, [r3, #4]
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	685b      	ldr	r3, [r3, #4]
 800de68:	441a      	add	r2, r3
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	681a      	ldr	r2, [r3, #0]
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	601a      	str	r2, [r3, #0]
 800de78:	e008      	b.n	800de8c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800de7a:	4b0b      	ldr	r3, [pc, #44]	; (800dea8 <prvInsertBlockIntoFreeList+0xac>)
 800de7c:	681a      	ldr	r2, [r3, #0]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	601a      	str	r2, [r3, #0]
 800de82:	e003      	b.n	800de8c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	681a      	ldr	r2, [r3, #0]
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800de8c:	68fa      	ldr	r2, [r7, #12]
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	429a      	cmp	r2, r3
 800de92:	d002      	beq.n	800de9a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	687a      	ldr	r2, [r7, #4]
 800de98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800de9a:	bf00      	nop
 800de9c:	3714      	adds	r7, #20
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bc80      	pop	{r7}
 800dea2:	4770      	bx	lr
 800dea4:	20002f50 	.word	0x20002f50
 800dea8:	20002f58 	.word	0x20002f58

0800deac <__errno>:
 800deac:	4b01      	ldr	r3, [pc, #4]	; (800deb4 <__errno+0x8>)
 800deae:	6818      	ldr	r0, [r3, #0]
 800deb0:	4770      	bx	lr
 800deb2:	bf00      	nop
 800deb4:	2000005c 	.word	0x2000005c

0800deb8 <__libc_init_array>:
 800deb8:	b570      	push	{r4, r5, r6, lr}
 800deba:	2600      	movs	r6, #0
 800debc:	4d0c      	ldr	r5, [pc, #48]	; (800def0 <__libc_init_array+0x38>)
 800debe:	4c0d      	ldr	r4, [pc, #52]	; (800def4 <__libc_init_array+0x3c>)
 800dec0:	1b64      	subs	r4, r4, r5
 800dec2:	10a4      	asrs	r4, r4, #2
 800dec4:	42a6      	cmp	r6, r4
 800dec6:	d109      	bne.n	800dedc <__libc_init_array+0x24>
 800dec8:	f001 ff7c 	bl	800fdc4 <_init>
 800decc:	2600      	movs	r6, #0
 800dece:	4d0a      	ldr	r5, [pc, #40]	; (800def8 <__libc_init_array+0x40>)
 800ded0:	4c0a      	ldr	r4, [pc, #40]	; (800defc <__libc_init_array+0x44>)
 800ded2:	1b64      	subs	r4, r4, r5
 800ded4:	10a4      	asrs	r4, r4, #2
 800ded6:	42a6      	cmp	r6, r4
 800ded8:	d105      	bne.n	800dee6 <__libc_init_array+0x2e>
 800deda:	bd70      	pop	{r4, r5, r6, pc}
 800dedc:	f855 3b04 	ldr.w	r3, [r5], #4
 800dee0:	4798      	blx	r3
 800dee2:	3601      	adds	r6, #1
 800dee4:	e7ee      	b.n	800dec4 <__libc_init_array+0xc>
 800dee6:	f855 3b04 	ldr.w	r3, [r5], #4
 800deea:	4798      	blx	r3
 800deec:	3601      	adds	r6, #1
 800deee:	e7f2      	b.n	800ded6 <__libc_init_array+0x1e>
 800def0:	08010290 	.word	0x08010290
 800def4:	08010290 	.word	0x08010290
 800def8:	08010290 	.word	0x08010290
 800defc:	08010294 	.word	0x08010294

0800df00 <memcpy>:
 800df00:	440a      	add	r2, r1
 800df02:	4291      	cmp	r1, r2
 800df04:	f100 33ff 	add.w	r3, r0, #4294967295
 800df08:	d100      	bne.n	800df0c <memcpy+0xc>
 800df0a:	4770      	bx	lr
 800df0c:	b510      	push	{r4, lr}
 800df0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df12:	4291      	cmp	r1, r2
 800df14:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df18:	d1f9      	bne.n	800df0e <memcpy+0xe>
 800df1a:	bd10      	pop	{r4, pc}

0800df1c <memset>:
 800df1c:	4603      	mov	r3, r0
 800df1e:	4402      	add	r2, r0
 800df20:	4293      	cmp	r3, r2
 800df22:	d100      	bne.n	800df26 <memset+0xa>
 800df24:	4770      	bx	lr
 800df26:	f803 1b01 	strb.w	r1, [r3], #1
 800df2a:	e7f9      	b.n	800df20 <memset+0x4>

0800df2c <iprintf>:
 800df2c:	b40f      	push	{r0, r1, r2, r3}
 800df2e:	4b0a      	ldr	r3, [pc, #40]	; (800df58 <iprintf+0x2c>)
 800df30:	b513      	push	{r0, r1, r4, lr}
 800df32:	681c      	ldr	r4, [r3, #0]
 800df34:	b124      	cbz	r4, 800df40 <iprintf+0x14>
 800df36:	69a3      	ldr	r3, [r4, #24]
 800df38:	b913      	cbnz	r3, 800df40 <iprintf+0x14>
 800df3a:	4620      	mov	r0, r4
 800df3c:	f000 f87a 	bl	800e034 <__sinit>
 800df40:	ab05      	add	r3, sp, #20
 800df42:	4620      	mov	r0, r4
 800df44:	9a04      	ldr	r2, [sp, #16]
 800df46:	68a1      	ldr	r1, [r4, #8]
 800df48:	9301      	str	r3, [sp, #4]
 800df4a:	f000 f995 	bl	800e278 <_vfiprintf_r>
 800df4e:	b002      	add	sp, #8
 800df50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df54:	b004      	add	sp, #16
 800df56:	4770      	bx	lr
 800df58:	2000005c 	.word	0x2000005c

0800df5c <putchar>:
 800df5c:	b538      	push	{r3, r4, r5, lr}
 800df5e:	4b08      	ldr	r3, [pc, #32]	; (800df80 <putchar+0x24>)
 800df60:	4605      	mov	r5, r0
 800df62:	681c      	ldr	r4, [r3, #0]
 800df64:	b124      	cbz	r4, 800df70 <putchar+0x14>
 800df66:	69a3      	ldr	r3, [r4, #24]
 800df68:	b913      	cbnz	r3, 800df70 <putchar+0x14>
 800df6a:	4620      	mov	r0, r4
 800df6c:	f000 f862 	bl	800e034 <__sinit>
 800df70:	4629      	mov	r1, r5
 800df72:	4620      	mov	r0, r4
 800df74:	68a2      	ldr	r2, [r4, #8]
 800df76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df7a:	f000 bc43 	b.w	800e804 <_putc_r>
 800df7e:	bf00      	nop
 800df80:	2000005c 	.word	0x2000005c

0800df84 <std>:
 800df84:	2300      	movs	r3, #0
 800df86:	b510      	push	{r4, lr}
 800df88:	4604      	mov	r4, r0
 800df8a:	e9c0 3300 	strd	r3, r3, [r0]
 800df8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800df92:	6083      	str	r3, [r0, #8]
 800df94:	8181      	strh	r1, [r0, #12]
 800df96:	6643      	str	r3, [r0, #100]	; 0x64
 800df98:	81c2      	strh	r2, [r0, #14]
 800df9a:	6183      	str	r3, [r0, #24]
 800df9c:	4619      	mov	r1, r3
 800df9e:	2208      	movs	r2, #8
 800dfa0:	305c      	adds	r0, #92	; 0x5c
 800dfa2:	f7ff ffbb 	bl	800df1c <memset>
 800dfa6:	4b05      	ldr	r3, [pc, #20]	; (800dfbc <std+0x38>)
 800dfa8:	6224      	str	r4, [r4, #32]
 800dfaa:	6263      	str	r3, [r4, #36]	; 0x24
 800dfac:	4b04      	ldr	r3, [pc, #16]	; (800dfc0 <std+0x3c>)
 800dfae:	62a3      	str	r3, [r4, #40]	; 0x28
 800dfb0:	4b04      	ldr	r3, [pc, #16]	; (800dfc4 <std+0x40>)
 800dfb2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dfb4:	4b04      	ldr	r3, [pc, #16]	; (800dfc8 <std+0x44>)
 800dfb6:	6323      	str	r3, [r4, #48]	; 0x30
 800dfb8:	bd10      	pop	{r4, pc}
 800dfba:	bf00      	nop
 800dfbc:	0800e8b5 	.word	0x0800e8b5
 800dfc0:	0800e8d7 	.word	0x0800e8d7
 800dfc4:	0800e90f 	.word	0x0800e90f
 800dfc8:	0800e933 	.word	0x0800e933

0800dfcc <_cleanup_r>:
 800dfcc:	4901      	ldr	r1, [pc, #4]	; (800dfd4 <_cleanup_r+0x8>)
 800dfce:	f000 b8af 	b.w	800e130 <_fwalk_reent>
 800dfd2:	bf00      	nop
 800dfd4:	0800ec0d 	.word	0x0800ec0d

0800dfd8 <__sfmoreglue>:
 800dfd8:	b570      	push	{r4, r5, r6, lr}
 800dfda:	2568      	movs	r5, #104	; 0x68
 800dfdc:	1e4a      	subs	r2, r1, #1
 800dfde:	4355      	muls	r5, r2
 800dfe0:	460e      	mov	r6, r1
 800dfe2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dfe6:	f000 f8c5 	bl	800e174 <_malloc_r>
 800dfea:	4604      	mov	r4, r0
 800dfec:	b140      	cbz	r0, 800e000 <__sfmoreglue+0x28>
 800dfee:	2100      	movs	r1, #0
 800dff0:	e9c0 1600 	strd	r1, r6, [r0]
 800dff4:	300c      	adds	r0, #12
 800dff6:	60a0      	str	r0, [r4, #8]
 800dff8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dffc:	f7ff ff8e 	bl	800df1c <memset>
 800e000:	4620      	mov	r0, r4
 800e002:	bd70      	pop	{r4, r5, r6, pc}

0800e004 <__sfp_lock_acquire>:
 800e004:	4801      	ldr	r0, [pc, #4]	; (800e00c <__sfp_lock_acquire+0x8>)
 800e006:	f000 b8b3 	b.w	800e170 <__retarget_lock_acquire_recursive>
 800e00a:	bf00      	nop
 800e00c:	20003128 	.word	0x20003128

0800e010 <__sfp_lock_release>:
 800e010:	4801      	ldr	r0, [pc, #4]	; (800e018 <__sfp_lock_release+0x8>)
 800e012:	f000 b8ae 	b.w	800e172 <__retarget_lock_release_recursive>
 800e016:	bf00      	nop
 800e018:	20003128 	.word	0x20003128

0800e01c <__sinit_lock_acquire>:
 800e01c:	4801      	ldr	r0, [pc, #4]	; (800e024 <__sinit_lock_acquire+0x8>)
 800e01e:	f000 b8a7 	b.w	800e170 <__retarget_lock_acquire_recursive>
 800e022:	bf00      	nop
 800e024:	20003123 	.word	0x20003123

0800e028 <__sinit_lock_release>:
 800e028:	4801      	ldr	r0, [pc, #4]	; (800e030 <__sinit_lock_release+0x8>)
 800e02a:	f000 b8a2 	b.w	800e172 <__retarget_lock_release_recursive>
 800e02e:	bf00      	nop
 800e030:	20003123 	.word	0x20003123

0800e034 <__sinit>:
 800e034:	b510      	push	{r4, lr}
 800e036:	4604      	mov	r4, r0
 800e038:	f7ff fff0 	bl	800e01c <__sinit_lock_acquire>
 800e03c:	69a3      	ldr	r3, [r4, #24]
 800e03e:	b11b      	cbz	r3, 800e048 <__sinit+0x14>
 800e040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e044:	f7ff bff0 	b.w	800e028 <__sinit_lock_release>
 800e048:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e04c:	6523      	str	r3, [r4, #80]	; 0x50
 800e04e:	4b13      	ldr	r3, [pc, #76]	; (800e09c <__sinit+0x68>)
 800e050:	4a13      	ldr	r2, [pc, #76]	; (800e0a0 <__sinit+0x6c>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	62a2      	str	r2, [r4, #40]	; 0x28
 800e056:	42a3      	cmp	r3, r4
 800e058:	bf08      	it	eq
 800e05a:	2301      	moveq	r3, #1
 800e05c:	4620      	mov	r0, r4
 800e05e:	bf08      	it	eq
 800e060:	61a3      	streq	r3, [r4, #24]
 800e062:	f000 f81f 	bl	800e0a4 <__sfp>
 800e066:	6060      	str	r0, [r4, #4]
 800e068:	4620      	mov	r0, r4
 800e06a:	f000 f81b 	bl	800e0a4 <__sfp>
 800e06e:	60a0      	str	r0, [r4, #8]
 800e070:	4620      	mov	r0, r4
 800e072:	f000 f817 	bl	800e0a4 <__sfp>
 800e076:	2200      	movs	r2, #0
 800e078:	2104      	movs	r1, #4
 800e07a:	60e0      	str	r0, [r4, #12]
 800e07c:	6860      	ldr	r0, [r4, #4]
 800e07e:	f7ff ff81 	bl	800df84 <std>
 800e082:	2201      	movs	r2, #1
 800e084:	2109      	movs	r1, #9
 800e086:	68a0      	ldr	r0, [r4, #8]
 800e088:	f7ff ff7c 	bl	800df84 <std>
 800e08c:	2202      	movs	r2, #2
 800e08e:	2112      	movs	r1, #18
 800e090:	68e0      	ldr	r0, [r4, #12]
 800e092:	f7ff ff77 	bl	800df84 <std>
 800e096:	2301      	movs	r3, #1
 800e098:	61a3      	str	r3, [r4, #24]
 800e09a:	e7d1      	b.n	800e040 <__sinit+0xc>
 800e09c:	080101b0 	.word	0x080101b0
 800e0a0:	0800dfcd 	.word	0x0800dfcd

0800e0a4 <__sfp>:
 800e0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0a6:	4607      	mov	r7, r0
 800e0a8:	f7ff ffac 	bl	800e004 <__sfp_lock_acquire>
 800e0ac:	4b1e      	ldr	r3, [pc, #120]	; (800e128 <__sfp+0x84>)
 800e0ae:	681e      	ldr	r6, [r3, #0]
 800e0b0:	69b3      	ldr	r3, [r6, #24]
 800e0b2:	b913      	cbnz	r3, 800e0ba <__sfp+0x16>
 800e0b4:	4630      	mov	r0, r6
 800e0b6:	f7ff ffbd 	bl	800e034 <__sinit>
 800e0ba:	3648      	adds	r6, #72	; 0x48
 800e0bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e0c0:	3b01      	subs	r3, #1
 800e0c2:	d503      	bpl.n	800e0cc <__sfp+0x28>
 800e0c4:	6833      	ldr	r3, [r6, #0]
 800e0c6:	b30b      	cbz	r3, 800e10c <__sfp+0x68>
 800e0c8:	6836      	ldr	r6, [r6, #0]
 800e0ca:	e7f7      	b.n	800e0bc <__sfp+0x18>
 800e0cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e0d0:	b9d5      	cbnz	r5, 800e108 <__sfp+0x64>
 800e0d2:	4b16      	ldr	r3, [pc, #88]	; (800e12c <__sfp+0x88>)
 800e0d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e0d8:	60e3      	str	r3, [r4, #12]
 800e0da:	6665      	str	r5, [r4, #100]	; 0x64
 800e0dc:	f000 f847 	bl	800e16e <__retarget_lock_init_recursive>
 800e0e0:	f7ff ff96 	bl	800e010 <__sfp_lock_release>
 800e0e4:	2208      	movs	r2, #8
 800e0e6:	4629      	mov	r1, r5
 800e0e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e0ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e0f0:	6025      	str	r5, [r4, #0]
 800e0f2:	61a5      	str	r5, [r4, #24]
 800e0f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e0f8:	f7ff ff10 	bl	800df1c <memset>
 800e0fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e100:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e104:	4620      	mov	r0, r4
 800e106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e108:	3468      	adds	r4, #104	; 0x68
 800e10a:	e7d9      	b.n	800e0c0 <__sfp+0x1c>
 800e10c:	2104      	movs	r1, #4
 800e10e:	4638      	mov	r0, r7
 800e110:	f7ff ff62 	bl	800dfd8 <__sfmoreglue>
 800e114:	4604      	mov	r4, r0
 800e116:	6030      	str	r0, [r6, #0]
 800e118:	2800      	cmp	r0, #0
 800e11a:	d1d5      	bne.n	800e0c8 <__sfp+0x24>
 800e11c:	f7ff ff78 	bl	800e010 <__sfp_lock_release>
 800e120:	230c      	movs	r3, #12
 800e122:	603b      	str	r3, [r7, #0]
 800e124:	e7ee      	b.n	800e104 <__sfp+0x60>
 800e126:	bf00      	nop
 800e128:	080101b0 	.word	0x080101b0
 800e12c:	ffff0001 	.word	0xffff0001

0800e130 <_fwalk_reent>:
 800e130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e134:	4606      	mov	r6, r0
 800e136:	4688      	mov	r8, r1
 800e138:	2700      	movs	r7, #0
 800e13a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e13e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e142:	f1b9 0901 	subs.w	r9, r9, #1
 800e146:	d505      	bpl.n	800e154 <_fwalk_reent+0x24>
 800e148:	6824      	ldr	r4, [r4, #0]
 800e14a:	2c00      	cmp	r4, #0
 800e14c:	d1f7      	bne.n	800e13e <_fwalk_reent+0xe>
 800e14e:	4638      	mov	r0, r7
 800e150:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e154:	89ab      	ldrh	r3, [r5, #12]
 800e156:	2b01      	cmp	r3, #1
 800e158:	d907      	bls.n	800e16a <_fwalk_reent+0x3a>
 800e15a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e15e:	3301      	adds	r3, #1
 800e160:	d003      	beq.n	800e16a <_fwalk_reent+0x3a>
 800e162:	4629      	mov	r1, r5
 800e164:	4630      	mov	r0, r6
 800e166:	47c0      	blx	r8
 800e168:	4307      	orrs	r7, r0
 800e16a:	3568      	adds	r5, #104	; 0x68
 800e16c:	e7e9      	b.n	800e142 <_fwalk_reent+0x12>

0800e16e <__retarget_lock_init_recursive>:
 800e16e:	4770      	bx	lr

0800e170 <__retarget_lock_acquire_recursive>:
 800e170:	4770      	bx	lr

0800e172 <__retarget_lock_release_recursive>:
 800e172:	4770      	bx	lr

0800e174 <_malloc_r>:
 800e174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e176:	1ccd      	adds	r5, r1, #3
 800e178:	f025 0503 	bic.w	r5, r5, #3
 800e17c:	3508      	adds	r5, #8
 800e17e:	2d0c      	cmp	r5, #12
 800e180:	bf38      	it	cc
 800e182:	250c      	movcc	r5, #12
 800e184:	2d00      	cmp	r5, #0
 800e186:	4606      	mov	r6, r0
 800e188:	db01      	blt.n	800e18e <_malloc_r+0x1a>
 800e18a:	42a9      	cmp	r1, r5
 800e18c:	d903      	bls.n	800e196 <_malloc_r+0x22>
 800e18e:	230c      	movs	r3, #12
 800e190:	6033      	str	r3, [r6, #0]
 800e192:	2000      	movs	r0, #0
 800e194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e196:	f000 fdf9 	bl	800ed8c <__malloc_lock>
 800e19a:	4921      	ldr	r1, [pc, #132]	; (800e220 <_malloc_r+0xac>)
 800e19c:	680a      	ldr	r2, [r1, #0]
 800e19e:	4614      	mov	r4, r2
 800e1a0:	b99c      	cbnz	r4, 800e1ca <_malloc_r+0x56>
 800e1a2:	4f20      	ldr	r7, [pc, #128]	; (800e224 <_malloc_r+0xb0>)
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	b923      	cbnz	r3, 800e1b2 <_malloc_r+0x3e>
 800e1a8:	4621      	mov	r1, r4
 800e1aa:	4630      	mov	r0, r6
 800e1ac:	f000 fb72 	bl	800e894 <_sbrk_r>
 800e1b0:	6038      	str	r0, [r7, #0]
 800e1b2:	4629      	mov	r1, r5
 800e1b4:	4630      	mov	r0, r6
 800e1b6:	f000 fb6d 	bl	800e894 <_sbrk_r>
 800e1ba:	1c43      	adds	r3, r0, #1
 800e1bc:	d123      	bne.n	800e206 <_malloc_r+0x92>
 800e1be:	230c      	movs	r3, #12
 800e1c0:	4630      	mov	r0, r6
 800e1c2:	6033      	str	r3, [r6, #0]
 800e1c4:	f000 fde8 	bl	800ed98 <__malloc_unlock>
 800e1c8:	e7e3      	b.n	800e192 <_malloc_r+0x1e>
 800e1ca:	6823      	ldr	r3, [r4, #0]
 800e1cc:	1b5b      	subs	r3, r3, r5
 800e1ce:	d417      	bmi.n	800e200 <_malloc_r+0x8c>
 800e1d0:	2b0b      	cmp	r3, #11
 800e1d2:	d903      	bls.n	800e1dc <_malloc_r+0x68>
 800e1d4:	6023      	str	r3, [r4, #0]
 800e1d6:	441c      	add	r4, r3
 800e1d8:	6025      	str	r5, [r4, #0]
 800e1da:	e004      	b.n	800e1e6 <_malloc_r+0x72>
 800e1dc:	6863      	ldr	r3, [r4, #4]
 800e1de:	42a2      	cmp	r2, r4
 800e1e0:	bf0c      	ite	eq
 800e1e2:	600b      	streq	r3, [r1, #0]
 800e1e4:	6053      	strne	r3, [r2, #4]
 800e1e6:	4630      	mov	r0, r6
 800e1e8:	f000 fdd6 	bl	800ed98 <__malloc_unlock>
 800e1ec:	f104 000b 	add.w	r0, r4, #11
 800e1f0:	1d23      	adds	r3, r4, #4
 800e1f2:	f020 0007 	bic.w	r0, r0, #7
 800e1f6:	1ac2      	subs	r2, r0, r3
 800e1f8:	d0cc      	beq.n	800e194 <_malloc_r+0x20>
 800e1fa:	1a1b      	subs	r3, r3, r0
 800e1fc:	50a3      	str	r3, [r4, r2]
 800e1fe:	e7c9      	b.n	800e194 <_malloc_r+0x20>
 800e200:	4622      	mov	r2, r4
 800e202:	6864      	ldr	r4, [r4, #4]
 800e204:	e7cc      	b.n	800e1a0 <_malloc_r+0x2c>
 800e206:	1cc4      	adds	r4, r0, #3
 800e208:	f024 0403 	bic.w	r4, r4, #3
 800e20c:	42a0      	cmp	r0, r4
 800e20e:	d0e3      	beq.n	800e1d8 <_malloc_r+0x64>
 800e210:	1a21      	subs	r1, r4, r0
 800e212:	4630      	mov	r0, r6
 800e214:	f000 fb3e 	bl	800e894 <_sbrk_r>
 800e218:	3001      	adds	r0, #1
 800e21a:	d1dd      	bne.n	800e1d8 <_malloc_r+0x64>
 800e21c:	e7cf      	b.n	800e1be <_malloc_r+0x4a>
 800e21e:	bf00      	nop
 800e220:	20002f68 	.word	0x20002f68
 800e224:	20002f6c 	.word	0x20002f6c

0800e228 <__sfputc_r>:
 800e228:	6893      	ldr	r3, [r2, #8]
 800e22a:	b410      	push	{r4}
 800e22c:	3b01      	subs	r3, #1
 800e22e:	2b00      	cmp	r3, #0
 800e230:	6093      	str	r3, [r2, #8]
 800e232:	da07      	bge.n	800e244 <__sfputc_r+0x1c>
 800e234:	6994      	ldr	r4, [r2, #24]
 800e236:	42a3      	cmp	r3, r4
 800e238:	db01      	blt.n	800e23e <__sfputc_r+0x16>
 800e23a:	290a      	cmp	r1, #10
 800e23c:	d102      	bne.n	800e244 <__sfputc_r+0x1c>
 800e23e:	bc10      	pop	{r4}
 800e240:	f000 bb7c 	b.w	800e93c <__swbuf_r>
 800e244:	6813      	ldr	r3, [r2, #0]
 800e246:	1c58      	adds	r0, r3, #1
 800e248:	6010      	str	r0, [r2, #0]
 800e24a:	7019      	strb	r1, [r3, #0]
 800e24c:	4608      	mov	r0, r1
 800e24e:	bc10      	pop	{r4}
 800e250:	4770      	bx	lr

0800e252 <__sfputs_r>:
 800e252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e254:	4606      	mov	r6, r0
 800e256:	460f      	mov	r7, r1
 800e258:	4614      	mov	r4, r2
 800e25a:	18d5      	adds	r5, r2, r3
 800e25c:	42ac      	cmp	r4, r5
 800e25e:	d101      	bne.n	800e264 <__sfputs_r+0x12>
 800e260:	2000      	movs	r0, #0
 800e262:	e007      	b.n	800e274 <__sfputs_r+0x22>
 800e264:	463a      	mov	r2, r7
 800e266:	4630      	mov	r0, r6
 800e268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e26c:	f7ff ffdc 	bl	800e228 <__sfputc_r>
 800e270:	1c43      	adds	r3, r0, #1
 800e272:	d1f3      	bne.n	800e25c <__sfputs_r+0xa>
 800e274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e278 <_vfiprintf_r>:
 800e278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e27c:	460d      	mov	r5, r1
 800e27e:	4614      	mov	r4, r2
 800e280:	4698      	mov	r8, r3
 800e282:	4606      	mov	r6, r0
 800e284:	b09d      	sub	sp, #116	; 0x74
 800e286:	b118      	cbz	r0, 800e290 <_vfiprintf_r+0x18>
 800e288:	6983      	ldr	r3, [r0, #24]
 800e28a:	b90b      	cbnz	r3, 800e290 <_vfiprintf_r+0x18>
 800e28c:	f7ff fed2 	bl	800e034 <__sinit>
 800e290:	4b89      	ldr	r3, [pc, #548]	; (800e4b8 <_vfiprintf_r+0x240>)
 800e292:	429d      	cmp	r5, r3
 800e294:	d11b      	bne.n	800e2ce <_vfiprintf_r+0x56>
 800e296:	6875      	ldr	r5, [r6, #4]
 800e298:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e29a:	07d9      	lsls	r1, r3, #31
 800e29c:	d405      	bmi.n	800e2aa <_vfiprintf_r+0x32>
 800e29e:	89ab      	ldrh	r3, [r5, #12]
 800e2a0:	059a      	lsls	r2, r3, #22
 800e2a2:	d402      	bmi.n	800e2aa <_vfiprintf_r+0x32>
 800e2a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e2a6:	f7ff ff63 	bl	800e170 <__retarget_lock_acquire_recursive>
 800e2aa:	89ab      	ldrh	r3, [r5, #12]
 800e2ac:	071b      	lsls	r3, r3, #28
 800e2ae:	d501      	bpl.n	800e2b4 <_vfiprintf_r+0x3c>
 800e2b0:	692b      	ldr	r3, [r5, #16]
 800e2b2:	b9eb      	cbnz	r3, 800e2f0 <_vfiprintf_r+0x78>
 800e2b4:	4629      	mov	r1, r5
 800e2b6:	4630      	mov	r0, r6
 800e2b8:	f000 fba4 	bl	800ea04 <__swsetup_r>
 800e2bc:	b1c0      	cbz	r0, 800e2f0 <_vfiprintf_r+0x78>
 800e2be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e2c0:	07dc      	lsls	r4, r3, #31
 800e2c2:	d50e      	bpl.n	800e2e2 <_vfiprintf_r+0x6a>
 800e2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2c8:	b01d      	add	sp, #116	; 0x74
 800e2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2ce:	4b7b      	ldr	r3, [pc, #492]	; (800e4bc <_vfiprintf_r+0x244>)
 800e2d0:	429d      	cmp	r5, r3
 800e2d2:	d101      	bne.n	800e2d8 <_vfiprintf_r+0x60>
 800e2d4:	68b5      	ldr	r5, [r6, #8]
 800e2d6:	e7df      	b.n	800e298 <_vfiprintf_r+0x20>
 800e2d8:	4b79      	ldr	r3, [pc, #484]	; (800e4c0 <_vfiprintf_r+0x248>)
 800e2da:	429d      	cmp	r5, r3
 800e2dc:	bf08      	it	eq
 800e2de:	68f5      	ldreq	r5, [r6, #12]
 800e2e0:	e7da      	b.n	800e298 <_vfiprintf_r+0x20>
 800e2e2:	89ab      	ldrh	r3, [r5, #12]
 800e2e4:	0598      	lsls	r0, r3, #22
 800e2e6:	d4ed      	bmi.n	800e2c4 <_vfiprintf_r+0x4c>
 800e2e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e2ea:	f7ff ff42 	bl	800e172 <__retarget_lock_release_recursive>
 800e2ee:	e7e9      	b.n	800e2c4 <_vfiprintf_r+0x4c>
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	9309      	str	r3, [sp, #36]	; 0x24
 800e2f4:	2320      	movs	r3, #32
 800e2f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e2fa:	2330      	movs	r3, #48	; 0x30
 800e2fc:	f04f 0901 	mov.w	r9, #1
 800e300:	f8cd 800c 	str.w	r8, [sp, #12]
 800e304:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800e4c4 <_vfiprintf_r+0x24c>
 800e308:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e30c:	4623      	mov	r3, r4
 800e30e:	469a      	mov	sl, r3
 800e310:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e314:	b10a      	cbz	r2, 800e31a <_vfiprintf_r+0xa2>
 800e316:	2a25      	cmp	r2, #37	; 0x25
 800e318:	d1f9      	bne.n	800e30e <_vfiprintf_r+0x96>
 800e31a:	ebba 0b04 	subs.w	fp, sl, r4
 800e31e:	d00b      	beq.n	800e338 <_vfiprintf_r+0xc0>
 800e320:	465b      	mov	r3, fp
 800e322:	4622      	mov	r2, r4
 800e324:	4629      	mov	r1, r5
 800e326:	4630      	mov	r0, r6
 800e328:	f7ff ff93 	bl	800e252 <__sfputs_r>
 800e32c:	3001      	adds	r0, #1
 800e32e:	f000 80aa 	beq.w	800e486 <_vfiprintf_r+0x20e>
 800e332:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e334:	445a      	add	r2, fp
 800e336:	9209      	str	r2, [sp, #36]	; 0x24
 800e338:	f89a 3000 	ldrb.w	r3, [sl]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	f000 80a2 	beq.w	800e486 <_vfiprintf_r+0x20e>
 800e342:	2300      	movs	r3, #0
 800e344:	f04f 32ff 	mov.w	r2, #4294967295
 800e348:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e34c:	f10a 0a01 	add.w	sl, sl, #1
 800e350:	9304      	str	r3, [sp, #16]
 800e352:	9307      	str	r3, [sp, #28]
 800e354:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e358:	931a      	str	r3, [sp, #104]	; 0x68
 800e35a:	4654      	mov	r4, sl
 800e35c:	2205      	movs	r2, #5
 800e35e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e362:	4858      	ldr	r0, [pc, #352]	; (800e4c4 <_vfiprintf_r+0x24c>)
 800e364:	f000 fd04 	bl	800ed70 <memchr>
 800e368:	9a04      	ldr	r2, [sp, #16]
 800e36a:	b9d8      	cbnz	r0, 800e3a4 <_vfiprintf_r+0x12c>
 800e36c:	06d1      	lsls	r1, r2, #27
 800e36e:	bf44      	itt	mi
 800e370:	2320      	movmi	r3, #32
 800e372:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e376:	0713      	lsls	r3, r2, #28
 800e378:	bf44      	itt	mi
 800e37a:	232b      	movmi	r3, #43	; 0x2b
 800e37c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e380:	f89a 3000 	ldrb.w	r3, [sl]
 800e384:	2b2a      	cmp	r3, #42	; 0x2a
 800e386:	d015      	beq.n	800e3b4 <_vfiprintf_r+0x13c>
 800e388:	4654      	mov	r4, sl
 800e38a:	2000      	movs	r0, #0
 800e38c:	f04f 0c0a 	mov.w	ip, #10
 800e390:	9a07      	ldr	r2, [sp, #28]
 800e392:	4621      	mov	r1, r4
 800e394:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e398:	3b30      	subs	r3, #48	; 0x30
 800e39a:	2b09      	cmp	r3, #9
 800e39c:	d94e      	bls.n	800e43c <_vfiprintf_r+0x1c4>
 800e39e:	b1b0      	cbz	r0, 800e3ce <_vfiprintf_r+0x156>
 800e3a0:	9207      	str	r2, [sp, #28]
 800e3a2:	e014      	b.n	800e3ce <_vfiprintf_r+0x156>
 800e3a4:	eba0 0308 	sub.w	r3, r0, r8
 800e3a8:	fa09 f303 	lsl.w	r3, r9, r3
 800e3ac:	4313      	orrs	r3, r2
 800e3ae:	46a2      	mov	sl, r4
 800e3b0:	9304      	str	r3, [sp, #16]
 800e3b2:	e7d2      	b.n	800e35a <_vfiprintf_r+0xe2>
 800e3b4:	9b03      	ldr	r3, [sp, #12]
 800e3b6:	1d19      	adds	r1, r3, #4
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	9103      	str	r1, [sp, #12]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	bfbb      	ittet	lt
 800e3c0:	425b      	neglt	r3, r3
 800e3c2:	f042 0202 	orrlt.w	r2, r2, #2
 800e3c6:	9307      	strge	r3, [sp, #28]
 800e3c8:	9307      	strlt	r3, [sp, #28]
 800e3ca:	bfb8      	it	lt
 800e3cc:	9204      	strlt	r2, [sp, #16]
 800e3ce:	7823      	ldrb	r3, [r4, #0]
 800e3d0:	2b2e      	cmp	r3, #46	; 0x2e
 800e3d2:	d10c      	bne.n	800e3ee <_vfiprintf_r+0x176>
 800e3d4:	7863      	ldrb	r3, [r4, #1]
 800e3d6:	2b2a      	cmp	r3, #42	; 0x2a
 800e3d8:	d135      	bne.n	800e446 <_vfiprintf_r+0x1ce>
 800e3da:	9b03      	ldr	r3, [sp, #12]
 800e3dc:	3402      	adds	r4, #2
 800e3de:	1d1a      	adds	r2, r3, #4
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	9203      	str	r2, [sp, #12]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	bfb8      	it	lt
 800e3e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800e3ec:	9305      	str	r3, [sp, #20]
 800e3ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e4d4 <_vfiprintf_r+0x25c>
 800e3f2:	2203      	movs	r2, #3
 800e3f4:	4650      	mov	r0, sl
 800e3f6:	7821      	ldrb	r1, [r4, #0]
 800e3f8:	f000 fcba 	bl	800ed70 <memchr>
 800e3fc:	b140      	cbz	r0, 800e410 <_vfiprintf_r+0x198>
 800e3fe:	2340      	movs	r3, #64	; 0x40
 800e400:	eba0 000a 	sub.w	r0, r0, sl
 800e404:	fa03 f000 	lsl.w	r0, r3, r0
 800e408:	9b04      	ldr	r3, [sp, #16]
 800e40a:	3401      	adds	r4, #1
 800e40c:	4303      	orrs	r3, r0
 800e40e:	9304      	str	r3, [sp, #16]
 800e410:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e414:	2206      	movs	r2, #6
 800e416:	482c      	ldr	r0, [pc, #176]	; (800e4c8 <_vfiprintf_r+0x250>)
 800e418:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e41c:	f000 fca8 	bl	800ed70 <memchr>
 800e420:	2800      	cmp	r0, #0
 800e422:	d03f      	beq.n	800e4a4 <_vfiprintf_r+0x22c>
 800e424:	4b29      	ldr	r3, [pc, #164]	; (800e4cc <_vfiprintf_r+0x254>)
 800e426:	bb1b      	cbnz	r3, 800e470 <_vfiprintf_r+0x1f8>
 800e428:	9b03      	ldr	r3, [sp, #12]
 800e42a:	3307      	adds	r3, #7
 800e42c:	f023 0307 	bic.w	r3, r3, #7
 800e430:	3308      	adds	r3, #8
 800e432:	9303      	str	r3, [sp, #12]
 800e434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e436:	443b      	add	r3, r7
 800e438:	9309      	str	r3, [sp, #36]	; 0x24
 800e43a:	e767      	b.n	800e30c <_vfiprintf_r+0x94>
 800e43c:	460c      	mov	r4, r1
 800e43e:	2001      	movs	r0, #1
 800e440:	fb0c 3202 	mla	r2, ip, r2, r3
 800e444:	e7a5      	b.n	800e392 <_vfiprintf_r+0x11a>
 800e446:	2300      	movs	r3, #0
 800e448:	f04f 0c0a 	mov.w	ip, #10
 800e44c:	4619      	mov	r1, r3
 800e44e:	3401      	adds	r4, #1
 800e450:	9305      	str	r3, [sp, #20]
 800e452:	4620      	mov	r0, r4
 800e454:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e458:	3a30      	subs	r2, #48	; 0x30
 800e45a:	2a09      	cmp	r2, #9
 800e45c:	d903      	bls.n	800e466 <_vfiprintf_r+0x1ee>
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d0c5      	beq.n	800e3ee <_vfiprintf_r+0x176>
 800e462:	9105      	str	r1, [sp, #20]
 800e464:	e7c3      	b.n	800e3ee <_vfiprintf_r+0x176>
 800e466:	4604      	mov	r4, r0
 800e468:	2301      	movs	r3, #1
 800e46a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e46e:	e7f0      	b.n	800e452 <_vfiprintf_r+0x1da>
 800e470:	ab03      	add	r3, sp, #12
 800e472:	9300      	str	r3, [sp, #0]
 800e474:	462a      	mov	r2, r5
 800e476:	4630      	mov	r0, r6
 800e478:	4b15      	ldr	r3, [pc, #84]	; (800e4d0 <_vfiprintf_r+0x258>)
 800e47a:	a904      	add	r1, sp, #16
 800e47c:	f3af 8000 	nop.w
 800e480:	4607      	mov	r7, r0
 800e482:	1c78      	adds	r0, r7, #1
 800e484:	d1d6      	bne.n	800e434 <_vfiprintf_r+0x1bc>
 800e486:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e488:	07d9      	lsls	r1, r3, #31
 800e48a:	d405      	bmi.n	800e498 <_vfiprintf_r+0x220>
 800e48c:	89ab      	ldrh	r3, [r5, #12]
 800e48e:	059a      	lsls	r2, r3, #22
 800e490:	d402      	bmi.n	800e498 <_vfiprintf_r+0x220>
 800e492:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e494:	f7ff fe6d 	bl	800e172 <__retarget_lock_release_recursive>
 800e498:	89ab      	ldrh	r3, [r5, #12]
 800e49a:	065b      	lsls	r3, r3, #25
 800e49c:	f53f af12 	bmi.w	800e2c4 <_vfiprintf_r+0x4c>
 800e4a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e4a2:	e711      	b.n	800e2c8 <_vfiprintf_r+0x50>
 800e4a4:	ab03      	add	r3, sp, #12
 800e4a6:	9300      	str	r3, [sp, #0]
 800e4a8:	462a      	mov	r2, r5
 800e4aa:	4630      	mov	r0, r6
 800e4ac:	4b08      	ldr	r3, [pc, #32]	; (800e4d0 <_vfiprintf_r+0x258>)
 800e4ae:	a904      	add	r1, sp, #16
 800e4b0:	f000 f882 	bl	800e5b8 <_printf_i>
 800e4b4:	e7e4      	b.n	800e480 <_vfiprintf_r+0x208>
 800e4b6:	bf00      	nop
 800e4b8:	080101d4 	.word	0x080101d4
 800e4bc:	080101f4 	.word	0x080101f4
 800e4c0:	080101b4 	.word	0x080101b4
 800e4c4:	08010214 	.word	0x08010214
 800e4c8:	0801021e 	.word	0x0801021e
 800e4cc:	00000000 	.word	0x00000000
 800e4d0:	0800e253 	.word	0x0800e253
 800e4d4:	0801021a 	.word	0x0801021a

0800e4d8 <_printf_common>:
 800e4d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4dc:	4616      	mov	r6, r2
 800e4de:	4699      	mov	r9, r3
 800e4e0:	688a      	ldr	r2, [r1, #8]
 800e4e2:	690b      	ldr	r3, [r1, #16]
 800e4e4:	4607      	mov	r7, r0
 800e4e6:	4293      	cmp	r3, r2
 800e4e8:	bfb8      	it	lt
 800e4ea:	4613      	movlt	r3, r2
 800e4ec:	6033      	str	r3, [r6, #0]
 800e4ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e4f2:	460c      	mov	r4, r1
 800e4f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e4f8:	b10a      	cbz	r2, 800e4fe <_printf_common+0x26>
 800e4fa:	3301      	adds	r3, #1
 800e4fc:	6033      	str	r3, [r6, #0]
 800e4fe:	6823      	ldr	r3, [r4, #0]
 800e500:	0699      	lsls	r1, r3, #26
 800e502:	bf42      	ittt	mi
 800e504:	6833      	ldrmi	r3, [r6, #0]
 800e506:	3302      	addmi	r3, #2
 800e508:	6033      	strmi	r3, [r6, #0]
 800e50a:	6825      	ldr	r5, [r4, #0]
 800e50c:	f015 0506 	ands.w	r5, r5, #6
 800e510:	d106      	bne.n	800e520 <_printf_common+0x48>
 800e512:	f104 0a19 	add.w	sl, r4, #25
 800e516:	68e3      	ldr	r3, [r4, #12]
 800e518:	6832      	ldr	r2, [r6, #0]
 800e51a:	1a9b      	subs	r3, r3, r2
 800e51c:	42ab      	cmp	r3, r5
 800e51e:	dc28      	bgt.n	800e572 <_printf_common+0x9a>
 800e520:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e524:	1e13      	subs	r3, r2, #0
 800e526:	6822      	ldr	r2, [r4, #0]
 800e528:	bf18      	it	ne
 800e52a:	2301      	movne	r3, #1
 800e52c:	0692      	lsls	r2, r2, #26
 800e52e:	d42d      	bmi.n	800e58c <_printf_common+0xb4>
 800e530:	4649      	mov	r1, r9
 800e532:	4638      	mov	r0, r7
 800e534:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e538:	47c0      	blx	r8
 800e53a:	3001      	adds	r0, #1
 800e53c:	d020      	beq.n	800e580 <_printf_common+0xa8>
 800e53e:	6823      	ldr	r3, [r4, #0]
 800e540:	68e5      	ldr	r5, [r4, #12]
 800e542:	f003 0306 	and.w	r3, r3, #6
 800e546:	2b04      	cmp	r3, #4
 800e548:	bf18      	it	ne
 800e54a:	2500      	movne	r5, #0
 800e54c:	6832      	ldr	r2, [r6, #0]
 800e54e:	f04f 0600 	mov.w	r6, #0
 800e552:	68a3      	ldr	r3, [r4, #8]
 800e554:	bf08      	it	eq
 800e556:	1aad      	subeq	r5, r5, r2
 800e558:	6922      	ldr	r2, [r4, #16]
 800e55a:	bf08      	it	eq
 800e55c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e560:	4293      	cmp	r3, r2
 800e562:	bfc4      	itt	gt
 800e564:	1a9b      	subgt	r3, r3, r2
 800e566:	18ed      	addgt	r5, r5, r3
 800e568:	341a      	adds	r4, #26
 800e56a:	42b5      	cmp	r5, r6
 800e56c:	d11a      	bne.n	800e5a4 <_printf_common+0xcc>
 800e56e:	2000      	movs	r0, #0
 800e570:	e008      	b.n	800e584 <_printf_common+0xac>
 800e572:	2301      	movs	r3, #1
 800e574:	4652      	mov	r2, sl
 800e576:	4649      	mov	r1, r9
 800e578:	4638      	mov	r0, r7
 800e57a:	47c0      	blx	r8
 800e57c:	3001      	adds	r0, #1
 800e57e:	d103      	bne.n	800e588 <_printf_common+0xb0>
 800e580:	f04f 30ff 	mov.w	r0, #4294967295
 800e584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e588:	3501      	adds	r5, #1
 800e58a:	e7c4      	b.n	800e516 <_printf_common+0x3e>
 800e58c:	2030      	movs	r0, #48	; 0x30
 800e58e:	18e1      	adds	r1, r4, r3
 800e590:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e594:	1c5a      	adds	r2, r3, #1
 800e596:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e59a:	4422      	add	r2, r4
 800e59c:	3302      	adds	r3, #2
 800e59e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e5a2:	e7c5      	b.n	800e530 <_printf_common+0x58>
 800e5a4:	2301      	movs	r3, #1
 800e5a6:	4622      	mov	r2, r4
 800e5a8:	4649      	mov	r1, r9
 800e5aa:	4638      	mov	r0, r7
 800e5ac:	47c0      	blx	r8
 800e5ae:	3001      	adds	r0, #1
 800e5b0:	d0e6      	beq.n	800e580 <_printf_common+0xa8>
 800e5b2:	3601      	adds	r6, #1
 800e5b4:	e7d9      	b.n	800e56a <_printf_common+0x92>
	...

0800e5b8 <_printf_i>:
 800e5b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e5bc:	460c      	mov	r4, r1
 800e5be:	7e27      	ldrb	r7, [r4, #24]
 800e5c0:	4691      	mov	r9, r2
 800e5c2:	2f78      	cmp	r7, #120	; 0x78
 800e5c4:	4680      	mov	r8, r0
 800e5c6:	469a      	mov	sl, r3
 800e5c8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e5ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e5ce:	d807      	bhi.n	800e5e0 <_printf_i+0x28>
 800e5d0:	2f62      	cmp	r7, #98	; 0x62
 800e5d2:	d80a      	bhi.n	800e5ea <_printf_i+0x32>
 800e5d4:	2f00      	cmp	r7, #0
 800e5d6:	f000 80d9 	beq.w	800e78c <_printf_i+0x1d4>
 800e5da:	2f58      	cmp	r7, #88	; 0x58
 800e5dc:	f000 80a4 	beq.w	800e728 <_printf_i+0x170>
 800e5e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e5e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e5e8:	e03a      	b.n	800e660 <_printf_i+0xa8>
 800e5ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e5ee:	2b15      	cmp	r3, #21
 800e5f0:	d8f6      	bhi.n	800e5e0 <_printf_i+0x28>
 800e5f2:	a001      	add	r0, pc, #4	; (adr r0, 800e5f8 <_printf_i+0x40>)
 800e5f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e5f8:	0800e651 	.word	0x0800e651
 800e5fc:	0800e665 	.word	0x0800e665
 800e600:	0800e5e1 	.word	0x0800e5e1
 800e604:	0800e5e1 	.word	0x0800e5e1
 800e608:	0800e5e1 	.word	0x0800e5e1
 800e60c:	0800e5e1 	.word	0x0800e5e1
 800e610:	0800e665 	.word	0x0800e665
 800e614:	0800e5e1 	.word	0x0800e5e1
 800e618:	0800e5e1 	.word	0x0800e5e1
 800e61c:	0800e5e1 	.word	0x0800e5e1
 800e620:	0800e5e1 	.word	0x0800e5e1
 800e624:	0800e773 	.word	0x0800e773
 800e628:	0800e695 	.word	0x0800e695
 800e62c:	0800e755 	.word	0x0800e755
 800e630:	0800e5e1 	.word	0x0800e5e1
 800e634:	0800e5e1 	.word	0x0800e5e1
 800e638:	0800e795 	.word	0x0800e795
 800e63c:	0800e5e1 	.word	0x0800e5e1
 800e640:	0800e695 	.word	0x0800e695
 800e644:	0800e5e1 	.word	0x0800e5e1
 800e648:	0800e5e1 	.word	0x0800e5e1
 800e64c:	0800e75d 	.word	0x0800e75d
 800e650:	680b      	ldr	r3, [r1, #0]
 800e652:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e656:	1d1a      	adds	r2, r3, #4
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	600a      	str	r2, [r1, #0]
 800e65c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e660:	2301      	movs	r3, #1
 800e662:	e0a4      	b.n	800e7ae <_printf_i+0x1f6>
 800e664:	6825      	ldr	r5, [r4, #0]
 800e666:	6808      	ldr	r0, [r1, #0]
 800e668:	062e      	lsls	r6, r5, #24
 800e66a:	f100 0304 	add.w	r3, r0, #4
 800e66e:	d50a      	bpl.n	800e686 <_printf_i+0xce>
 800e670:	6805      	ldr	r5, [r0, #0]
 800e672:	600b      	str	r3, [r1, #0]
 800e674:	2d00      	cmp	r5, #0
 800e676:	da03      	bge.n	800e680 <_printf_i+0xc8>
 800e678:	232d      	movs	r3, #45	; 0x2d
 800e67a:	426d      	negs	r5, r5
 800e67c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e680:	230a      	movs	r3, #10
 800e682:	485e      	ldr	r0, [pc, #376]	; (800e7fc <_printf_i+0x244>)
 800e684:	e019      	b.n	800e6ba <_printf_i+0x102>
 800e686:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e68a:	6805      	ldr	r5, [r0, #0]
 800e68c:	600b      	str	r3, [r1, #0]
 800e68e:	bf18      	it	ne
 800e690:	b22d      	sxthne	r5, r5
 800e692:	e7ef      	b.n	800e674 <_printf_i+0xbc>
 800e694:	680b      	ldr	r3, [r1, #0]
 800e696:	6825      	ldr	r5, [r4, #0]
 800e698:	1d18      	adds	r0, r3, #4
 800e69a:	6008      	str	r0, [r1, #0]
 800e69c:	0628      	lsls	r0, r5, #24
 800e69e:	d501      	bpl.n	800e6a4 <_printf_i+0xec>
 800e6a0:	681d      	ldr	r5, [r3, #0]
 800e6a2:	e002      	b.n	800e6aa <_printf_i+0xf2>
 800e6a4:	0669      	lsls	r1, r5, #25
 800e6a6:	d5fb      	bpl.n	800e6a0 <_printf_i+0xe8>
 800e6a8:	881d      	ldrh	r5, [r3, #0]
 800e6aa:	2f6f      	cmp	r7, #111	; 0x6f
 800e6ac:	bf0c      	ite	eq
 800e6ae:	2308      	moveq	r3, #8
 800e6b0:	230a      	movne	r3, #10
 800e6b2:	4852      	ldr	r0, [pc, #328]	; (800e7fc <_printf_i+0x244>)
 800e6b4:	2100      	movs	r1, #0
 800e6b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e6ba:	6866      	ldr	r6, [r4, #4]
 800e6bc:	2e00      	cmp	r6, #0
 800e6be:	bfa8      	it	ge
 800e6c0:	6821      	ldrge	r1, [r4, #0]
 800e6c2:	60a6      	str	r6, [r4, #8]
 800e6c4:	bfa4      	itt	ge
 800e6c6:	f021 0104 	bicge.w	r1, r1, #4
 800e6ca:	6021      	strge	r1, [r4, #0]
 800e6cc:	b90d      	cbnz	r5, 800e6d2 <_printf_i+0x11a>
 800e6ce:	2e00      	cmp	r6, #0
 800e6d0:	d04d      	beq.n	800e76e <_printf_i+0x1b6>
 800e6d2:	4616      	mov	r6, r2
 800e6d4:	fbb5 f1f3 	udiv	r1, r5, r3
 800e6d8:	fb03 5711 	mls	r7, r3, r1, r5
 800e6dc:	5dc7      	ldrb	r7, [r0, r7]
 800e6de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e6e2:	462f      	mov	r7, r5
 800e6e4:	42bb      	cmp	r3, r7
 800e6e6:	460d      	mov	r5, r1
 800e6e8:	d9f4      	bls.n	800e6d4 <_printf_i+0x11c>
 800e6ea:	2b08      	cmp	r3, #8
 800e6ec:	d10b      	bne.n	800e706 <_printf_i+0x14e>
 800e6ee:	6823      	ldr	r3, [r4, #0]
 800e6f0:	07df      	lsls	r7, r3, #31
 800e6f2:	d508      	bpl.n	800e706 <_printf_i+0x14e>
 800e6f4:	6923      	ldr	r3, [r4, #16]
 800e6f6:	6861      	ldr	r1, [r4, #4]
 800e6f8:	4299      	cmp	r1, r3
 800e6fa:	bfde      	ittt	le
 800e6fc:	2330      	movle	r3, #48	; 0x30
 800e6fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e702:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e706:	1b92      	subs	r2, r2, r6
 800e708:	6122      	str	r2, [r4, #16]
 800e70a:	464b      	mov	r3, r9
 800e70c:	4621      	mov	r1, r4
 800e70e:	4640      	mov	r0, r8
 800e710:	f8cd a000 	str.w	sl, [sp]
 800e714:	aa03      	add	r2, sp, #12
 800e716:	f7ff fedf 	bl	800e4d8 <_printf_common>
 800e71a:	3001      	adds	r0, #1
 800e71c:	d14c      	bne.n	800e7b8 <_printf_i+0x200>
 800e71e:	f04f 30ff 	mov.w	r0, #4294967295
 800e722:	b004      	add	sp, #16
 800e724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e728:	4834      	ldr	r0, [pc, #208]	; (800e7fc <_printf_i+0x244>)
 800e72a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e72e:	680e      	ldr	r6, [r1, #0]
 800e730:	6823      	ldr	r3, [r4, #0]
 800e732:	f856 5b04 	ldr.w	r5, [r6], #4
 800e736:	061f      	lsls	r7, r3, #24
 800e738:	600e      	str	r6, [r1, #0]
 800e73a:	d514      	bpl.n	800e766 <_printf_i+0x1ae>
 800e73c:	07d9      	lsls	r1, r3, #31
 800e73e:	bf44      	itt	mi
 800e740:	f043 0320 	orrmi.w	r3, r3, #32
 800e744:	6023      	strmi	r3, [r4, #0]
 800e746:	b91d      	cbnz	r5, 800e750 <_printf_i+0x198>
 800e748:	6823      	ldr	r3, [r4, #0]
 800e74a:	f023 0320 	bic.w	r3, r3, #32
 800e74e:	6023      	str	r3, [r4, #0]
 800e750:	2310      	movs	r3, #16
 800e752:	e7af      	b.n	800e6b4 <_printf_i+0xfc>
 800e754:	6823      	ldr	r3, [r4, #0]
 800e756:	f043 0320 	orr.w	r3, r3, #32
 800e75a:	6023      	str	r3, [r4, #0]
 800e75c:	2378      	movs	r3, #120	; 0x78
 800e75e:	4828      	ldr	r0, [pc, #160]	; (800e800 <_printf_i+0x248>)
 800e760:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e764:	e7e3      	b.n	800e72e <_printf_i+0x176>
 800e766:	065e      	lsls	r6, r3, #25
 800e768:	bf48      	it	mi
 800e76a:	b2ad      	uxthmi	r5, r5
 800e76c:	e7e6      	b.n	800e73c <_printf_i+0x184>
 800e76e:	4616      	mov	r6, r2
 800e770:	e7bb      	b.n	800e6ea <_printf_i+0x132>
 800e772:	680b      	ldr	r3, [r1, #0]
 800e774:	6826      	ldr	r6, [r4, #0]
 800e776:	1d1d      	adds	r5, r3, #4
 800e778:	6960      	ldr	r0, [r4, #20]
 800e77a:	600d      	str	r5, [r1, #0]
 800e77c:	0635      	lsls	r5, r6, #24
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	d501      	bpl.n	800e786 <_printf_i+0x1ce>
 800e782:	6018      	str	r0, [r3, #0]
 800e784:	e002      	b.n	800e78c <_printf_i+0x1d4>
 800e786:	0671      	lsls	r1, r6, #25
 800e788:	d5fb      	bpl.n	800e782 <_printf_i+0x1ca>
 800e78a:	8018      	strh	r0, [r3, #0]
 800e78c:	2300      	movs	r3, #0
 800e78e:	4616      	mov	r6, r2
 800e790:	6123      	str	r3, [r4, #16]
 800e792:	e7ba      	b.n	800e70a <_printf_i+0x152>
 800e794:	680b      	ldr	r3, [r1, #0]
 800e796:	1d1a      	adds	r2, r3, #4
 800e798:	600a      	str	r2, [r1, #0]
 800e79a:	681e      	ldr	r6, [r3, #0]
 800e79c:	2100      	movs	r1, #0
 800e79e:	4630      	mov	r0, r6
 800e7a0:	6862      	ldr	r2, [r4, #4]
 800e7a2:	f000 fae5 	bl	800ed70 <memchr>
 800e7a6:	b108      	cbz	r0, 800e7ac <_printf_i+0x1f4>
 800e7a8:	1b80      	subs	r0, r0, r6
 800e7aa:	6060      	str	r0, [r4, #4]
 800e7ac:	6863      	ldr	r3, [r4, #4]
 800e7ae:	6123      	str	r3, [r4, #16]
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7b6:	e7a8      	b.n	800e70a <_printf_i+0x152>
 800e7b8:	4632      	mov	r2, r6
 800e7ba:	4649      	mov	r1, r9
 800e7bc:	4640      	mov	r0, r8
 800e7be:	6923      	ldr	r3, [r4, #16]
 800e7c0:	47d0      	blx	sl
 800e7c2:	3001      	adds	r0, #1
 800e7c4:	d0ab      	beq.n	800e71e <_printf_i+0x166>
 800e7c6:	6823      	ldr	r3, [r4, #0]
 800e7c8:	079b      	lsls	r3, r3, #30
 800e7ca:	d413      	bmi.n	800e7f4 <_printf_i+0x23c>
 800e7cc:	68e0      	ldr	r0, [r4, #12]
 800e7ce:	9b03      	ldr	r3, [sp, #12]
 800e7d0:	4298      	cmp	r0, r3
 800e7d2:	bfb8      	it	lt
 800e7d4:	4618      	movlt	r0, r3
 800e7d6:	e7a4      	b.n	800e722 <_printf_i+0x16a>
 800e7d8:	2301      	movs	r3, #1
 800e7da:	4632      	mov	r2, r6
 800e7dc:	4649      	mov	r1, r9
 800e7de:	4640      	mov	r0, r8
 800e7e0:	47d0      	blx	sl
 800e7e2:	3001      	adds	r0, #1
 800e7e4:	d09b      	beq.n	800e71e <_printf_i+0x166>
 800e7e6:	3501      	adds	r5, #1
 800e7e8:	68e3      	ldr	r3, [r4, #12]
 800e7ea:	9903      	ldr	r1, [sp, #12]
 800e7ec:	1a5b      	subs	r3, r3, r1
 800e7ee:	42ab      	cmp	r3, r5
 800e7f0:	dcf2      	bgt.n	800e7d8 <_printf_i+0x220>
 800e7f2:	e7eb      	b.n	800e7cc <_printf_i+0x214>
 800e7f4:	2500      	movs	r5, #0
 800e7f6:	f104 0619 	add.w	r6, r4, #25
 800e7fa:	e7f5      	b.n	800e7e8 <_printf_i+0x230>
 800e7fc:	08010225 	.word	0x08010225
 800e800:	08010236 	.word	0x08010236

0800e804 <_putc_r>:
 800e804:	b570      	push	{r4, r5, r6, lr}
 800e806:	460d      	mov	r5, r1
 800e808:	4614      	mov	r4, r2
 800e80a:	4606      	mov	r6, r0
 800e80c:	b118      	cbz	r0, 800e816 <_putc_r+0x12>
 800e80e:	6983      	ldr	r3, [r0, #24]
 800e810:	b90b      	cbnz	r3, 800e816 <_putc_r+0x12>
 800e812:	f7ff fc0f 	bl	800e034 <__sinit>
 800e816:	4b1c      	ldr	r3, [pc, #112]	; (800e888 <_putc_r+0x84>)
 800e818:	429c      	cmp	r4, r3
 800e81a:	d124      	bne.n	800e866 <_putc_r+0x62>
 800e81c:	6874      	ldr	r4, [r6, #4]
 800e81e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e820:	07d8      	lsls	r0, r3, #31
 800e822:	d405      	bmi.n	800e830 <_putc_r+0x2c>
 800e824:	89a3      	ldrh	r3, [r4, #12]
 800e826:	0599      	lsls	r1, r3, #22
 800e828:	d402      	bmi.n	800e830 <_putc_r+0x2c>
 800e82a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e82c:	f7ff fca0 	bl	800e170 <__retarget_lock_acquire_recursive>
 800e830:	68a3      	ldr	r3, [r4, #8]
 800e832:	3b01      	subs	r3, #1
 800e834:	2b00      	cmp	r3, #0
 800e836:	60a3      	str	r3, [r4, #8]
 800e838:	da05      	bge.n	800e846 <_putc_r+0x42>
 800e83a:	69a2      	ldr	r2, [r4, #24]
 800e83c:	4293      	cmp	r3, r2
 800e83e:	db1c      	blt.n	800e87a <_putc_r+0x76>
 800e840:	b2eb      	uxtb	r3, r5
 800e842:	2b0a      	cmp	r3, #10
 800e844:	d019      	beq.n	800e87a <_putc_r+0x76>
 800e846:	6823      	ldr	r3, [r4, #0]
 800e848:	1c5a      	adds	r2, r3, #1
 800e84a:	6022      	str	r2, [r4, #0]
 800e84c:	701d      	strb	r5, [r3, #0]
 800e84e:	b2ed      	uxtb	r5, r5
 800e850:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e852:	07da      	lsls	r2, r3, #31
 800e854:	d405      	bmi.n	800e862 <_putc_r+0x5e>
 800e856:	89a3      	ldrh	r3, [r4, #12]
 800e858:	059b      	lsls	r3, r3, #22
 800e85a:	d402      	bmi.n	800e862 <_putc_r+0x5e>
 800e85c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e85e:	f7ff fc88 	bl	800e172 <__retarget_lock_release_recursive>
 800e862:	4628      	mov	r0, r5
 800e864:	bd70      	pop	{r4, r5, r6, pc}
 800e866:	4b09      	ldr	r3, [pc, #36]	; (800e88c <_putc_r+0x88>)
 800e868:	429c      	cmp	r4, r3
 800e86a:	d101      	bne.n	800e870 <_putc_r+0x6c>
 800e86c:	68b4      	ldr	r4, [r6, #8]
 800e86e:	e7d6      	b.n	800e81e <_putc_r+0x1a>
 800e870:	4b07      	ldr	r3, [pc, #28]	; (800e890 <_putc_r+0x8c>)
 800e872:	429c      	cmp	r4, r3
 800e874:	bf08      	it	eq
 800e876:	68f4      	ldreq	r4, [r6, #12]
 800e878:	e7d1      	b.n	800e81e <_putc_r+0x1a>
 800e87a:	4629      	mov	r1, r5
 800e87c:	4622      	mov	r2, r4
 800e87e:	4630      	mov	r0, r6
 800e880:	f000 f85c 	bl	800e93c <__swbuf_r>
 800e884:	4605      	mov	r5, r0
 800e886:	e7e3      	b.n	800e850 <_putc_r+0x4c>
 800e888:	080101d4 	.word	0x080101d4
 800e88c:	080101f4 	.word	0x080101f4
 800e890:	080101b4 	.word	0x080101b4

0800e894 <_sbrk_r>:
 800e894:	b538      	push	{r3, r4, r5, lr}
 800e896:	2300      	movs	r3, #0
 800e898:	4d05      	ldr	r5, [pc, #20]	; (800e8b0 <_sbrk_r+0x1c>)
 800e89a:	4604      	mov	r4, r0
 800e89c:	4608      	mov	r0, r1
 800e89e:	602b      	str	r3, [r5, #0]
 800e8a0:	f7f6 fdae 	bl	8005400 <_sbrk>
 800e8a4:	1c43      	adds	r3, r0, #1
 800e8a6:	d102      	bne.n	800e8ae <_sbrk_r+0x1a>
 800e8a8:	682b      	ldr	r3, [r5, #0]
 800e8aa:	b103      	cbz	r3, 800e8ae <_sbrk_r+0x1a>
 800e8ac:	6023      	str	r3, [r4, #0]
 800e8ae:	bd38      	pop	{r3, r4, r5, pc}
 800e8b0:	2000312c 	.word	0x2000312c

0800e8b4 <__sread>:
 800e8b4:	b510      	push	{r4, lr}
 800e8b6:	460c      	mov	r4, r1
 800e8b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8bc:	f000 fabe 	bl	800ee3c <_read_r>
 800e8c0:	2800      	cmp	r0, #0
 800e8c2:	bfab      	itete	ge
 800e8c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e8c6:	89a3      	ldrhlt	r3, [r4, #12]
 800e8c8:	181b      	addge	r3, r3, r0
 800e8ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e8ce:	bfac      	ite	ge
 800e8d0:	6563      	strge	r3, [r4, #84]	; 0x54
 800e8d2:	81a3      	strhlt	r3, [r4, #12]
 800e8d4:	bd10      	pop	{r4, pc}

0800e8d6 <__swrite>:
 800e8d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8da:	461f      	mov	r7, r3
 800e8dc:	898b      	ldrh	r3, [r1, #12]
 800e8de:	4605      	mov	r5, r0
 800e8e0:	05db      	lsls	r3, r3, #23
 800e8e2:	460c      	mov	r4, r1
 800e8e4:	4616      	mov	r6, r2
 800e8e6:	d505      	bpl.n	800e8f4 <__swrite+0x1e>
 800e8e8:	2302      	movs	r3, #2
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8f0:	f000 f9c8 	bl	800ec84 <_lseek_r>
 800e8f4:	89a3      	ldrh	r3, [r4, #12]
 800e8f6:	4632      	mov	r2, r6
 800e8f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e8fc:	81a3      	strh	r3, [r4, #12]
 800e8fe:	4628      	mov	r0, r5
 800e900:	463b      	mov	r3, r7
 800e902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e90a:	f000 b869 	b.w	800e9e0 <_write_r>

0800e90e <__sseek>:
 800e90e:	b510      	push	{r4, lr}
 800e910:	460c      	mov	r4, r1
 800e912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e916:	f000 f9b5 	bl	800ec84 <_lseek_r>
 800e91a:	1c43      	adds	r3, r0, #1
 800e91c:	89a3      	ldrh	r3, [r4, #12]
 800e91e:	bf15      	itete	ne
 800e920:	6560      	strne	r0, [r4, #84]	; 0x54
 800e922:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e926:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e92a:	81a3      	strheq	r3, [r4, #12]
 800e92c:	bf18      	it	ne
 800e92e:	81a3      	strhne	r3, [r4, #12]
 800e930:	bd10      	pop	{r4, pc}

0800e932 <__sclose>:
 800e932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e936:	f000 b8d3 	b.w	800eae0 <_close_r>
	...

0800e93c <__swbuf_r>:
 800e93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e93e:	460e      	mov	r6, r1
 800e940:	4614      	mov	r4, r2
 800e942:	4605      	mov	r5, r0
 800e944:	b118      	cbz	r0, 800e94e <__swbuf_r+0x12>
 800e946:	6983      	ldr	r3, [r0, #24]
 800e948:	b90b      	cbnz	r3, 800e94e <__swbuf_r+0x12>
 800e94a:	f7ff fb73 	bl	800e034 <__sinit>
 800e94e:	4b21      	ldr	r3, [pc, #132]	; (800e9d4 <__swbuf_r+0x98>)
 800e950:	429c      	cmp	r4, r3
 800e952:	d12b      	bne.n	800e9ac <__swbuf_r+0x70>
 800e954:	686c      	ldr	r4, [r5, #4]
 800e956:	69a3      	ldr	r3, [r4, #24]
 800e958:	60a3      	str	r3, [r4, #8]
 800e95a:	89a3      	ldrh	r3, [r4, #12]
 800e95c:	071a      	lsls	r2, r3, #28
 800e95e:	d52f      	bpl.n	800e9c0 <__swbuf_r+0x84>
 800e960:	6923      	ldr	r3, [r4, #16]
 800e962:	b36b      	cbz	r3, 800e9c0 <__swbuf_r+0x84>
 800e964:	6923      	ldr	r3, [r4, #16]
 800e966:	6820      	ldr	r0, [r4, #0]
 800e968:	b2f6      	uxtb	r6, r6
 800e96a:	1ac0      	subs	r0, r0, r3
 800e96c:	6963      	ldr	r3, [r4, #20]
 800e96e:	4637      	mov	r7, r6
 800e970:	4283      	cmp	r3, r0
 800e972:	dc04      	bgt.n	800e97e <__swbuf_r+0x42>
 800e974:	4621      	mov	r1, r4
 800e976:	4628      	mov	r0, r5
 800e978:	f000 f948 	bl	800ec0c <_fflush_r>
 800e97c:	bb30      	cbnz	r0, 800e9cc <__swbuf_r+0x90>
 800e97e:	68a3      	ldr	r3, [r4, #8]
 800e980:	3001      	adds	r0, #1
 800e982:	3b01      	subs	r3, #1
 800e984:	60a3      	str	r3, [r4, #8]
 800e986:	6823      	ldr	r3, [r4, #0]
 800e988:	1c5a      	adds	r2, r3, #1
 800e98a:	6022      	str	r2, [r4, #0]
 800e98c:	701e      	strb	r6, [r3, #0]
 800e98e:	6963      	ldr	r3, [r4, #20]
 800e990:	4283      	cmp	r3, r0
 800e992:	d004      	beq.n	800e99e <__swbuf_r+0x62>
 800e994:	89a3      	ldrh	r3, [r4, #12]
 800e996:	07db      	lsls	r3, r3, #31
 800e998:	d506      	bpl.n	800e9a8 <__swbuf_r+0x6c>
 800e99a:	2e0a      	cmp	r6, #10
 800e99c:	d104      	bne.n	800e9a8 <__swbuf_r+0x6c>
 800e99e:	4621      	mov	r1, r4
 800e9a0:	4628      	mov	r0, r5
 800e9a2:	f000 f933 	bl	800ec0c <_fflush_r>
 800e9a6:	b988      	cbnz	r0, 800e9cc <__swbuf_r+0x90>
 800e9a8:	4638      	mov	r0, r7
 800e9aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9ac:	4b0a      	ldr	r3, [pc, #40]	; (800e9d8 <__swbuf_r+0x9c>)
 800e9ae:	429c      	cmp	r4, r3
 800e9b0:	d101      	bne.n	800e9b6 <__swbuf_r+0x7a>
 800e9b2:	68ac      	ldr	r4, [r5, #8]
 800e9b4:	e7cf      	b.n	800e956 <__swbuf_r+0x1a>
 800e9b6:	4b09      	ldr	r3, [pc, #36]	; (800e9dc <__swbuf_r+0xa0>)
 800e9b8:	429c      	cmp	r4, r3
 800e9ba:	bf08      	it	eq
 800e9bc:	68ec      	ldreq	r4, [r5, #12]
 800e9be:	e7ca      	b.n	800e956 <__swbuf_r+0x1a>
 800e9c0:	4621      	mov	r1, r4
 800e9c2:	4628      	mov	r0, r5
 800e9c4:	f000 f81e 	bl	800ea04 <__swsetup_r>
 800e9c8:	2800      	cmp	r0, #0
 800e9ca:	d0cb      	beq.n	800e964 <__swbuf_r+0x28>
 800e9cc:	f04f 37ff 	mov.w	r7, #4294967295
 800e9d0:	e7ea      	b.n	800e9a8 <__swbuf_r+0x6c>
 800e9d2:	bf00      	nop
 800e9d4:	080101d4 	.word	0x080101d4
 800e9d8:	080101f4 	.word	0x080101f4
 800e9dc:	080101b4 	.word	0x080101b4

0800e9e0 <_write_r>:
 800e9e0:	b538      	push	{r3, r4, r5, lr}
 800e9e2:	4604      	mov	r4, r0
 800e9e4:	4608      	mov	r0, r1
 800e9e6:	4611      	mov	r1, r2
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	4d05      	ldr	r5, [pc, #20]	; (800ea00 <_write_r+0x20>)
 800e9ec:	602a      	str	r2, [r5, #0]
 800e9ee:	461a      	mov	r2, r3
 800e9f0:	f7f6 fcb9 	bl	8005366 <_write>
 800e9f4:	1c43      	adds	r3, r0, #1
 800e9f6:	d102      	bne.n	800e9fe <_write_r+0x1e>
 800e9f8:	682b      	ldr	r3, [r5, #0]
 800e9fa:	b103      	cbz	r3, 800e9fe <_write_r+0x1e>
 800e9fc:	6023      	str	r3, [r4, #0]
 800e9fe:	bd38      	pop	{r3, r4, r5, pc}
 800ea00:	2000312c 	.word	0x2000312c

0800ea04 <__swsetup_r>:
 800ea04:	4b32      	ldr	r3, [pc, #200]	; (800ead0 <__swsetup_r+0xcc>)
 800ea06:	b570      	push	{r4, r5, r6, lr}
 800ea08:	681d      	ldr	r5, [r3, #0]
 800ea0a:	4606      	mov	r6, r0
 800ea0c:	460c      	mov	r4, r1
 800ea0e:	b125      	cbz	r5, 800ea1a <__swsetup_r+0x16>
 800ea10:	69ab      	ldr	r3, [r5, #24]
 800ea12:	b913      	cbnz	r3, 800ea1a <__swsetup_r+0x16>
 800ea14:	4628      	mov	r0, r5
 800ea16:	f7ff fb0d 	bl	800e034 <__sinit>
 800ea1a:	4b2e      	ldr	r3, [pc, #184]	; (800ead4 <__swsetup_r+0xd0>)
 800ea1c:	429c      	cmp	r4, r3
 800ea1e:	d10f      	bne.n	800ea40 <__swsetup_r+0x3c>
 800ea20:	686c      	ldr	r4, [r5, #4]
 800ea22:	89a3      	ldrh	r3, [r4, #12]
 800ea24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ea28:	0719      	lsls	r1, r3, #28
 800ea2a:	d42c      	bmi.n	800ea86 <__swsetup_r+0x82>
 800ea2c:	06dd      	lsls	r5, r3, #27
 800ea2e:	d411      	bmi.n	800ea54 <__swsetup_r+0x50>
 800ea30:	2309      	movs	r3, #9
 800ea32:	6033      	str	r3, [r6, #0]
 800ea34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ea38:	f04f 30ff 	mov.w	r0, #4294967295
 800ea3c:	81a3      	strh	r3, [r4, #12]
 800ea3e:	e03e      	b.n	800eabe <__swsetup_r+0xba>
 800ea40:	4b25      	ldr	r3, [pc, #148]	; (800ead8 <__swsetup_r+0xd4>)
 800ea42:	429c      	cmp	r4, r3
 800ea44:	d101      	bne.n	800ea4a <__swsetup_r+0x46>
 800ea46:	68ac      	ldr	r4, [r5, #8]
 800ea48:	e7eb      	b.n	800ea22 <__swsetup_r+0x1e>
 800ea4a:	4b24      	ldr	r3, [pc, #144]	; (800eadc <__swsetup_r+0xd8>)
 800ea4c:	429c      	cmp	r4, r3
 800ea4e:	bf08      	it	eq
 800ea50:	68ec      	ldreq	r4, [r5, #12]
 800ea52:	e7e6      	b.n	800ea22 <__swsetup_r+0x1e>
 800ea54:	0758      	lsls	r0, r3, #29
 800ea56:	d512      	bpl.n	800ea7e <__swsetup_r+0x7a>
 800ea58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea5a:	b141      	cbz	r1, 800ea6e <__swsetup_r+0x6a>
 800ea5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea60:	4299      	cmp	r1, r3
 800ea62:	d002      	beq.n	800ea6a <__swsetup_r+0x66>
 800ea64:	4630      	mov	r0, r6
 800ea66:	f000 f99d 	bl	800eda4 <_free_r>
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	6363      	str	r3, [r4, #52]	; 0x34
 800ea6e:	89a3      	ldrh	r3, [r4, #12]
 800ea70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ea74:	81a3      	strh	r3, [r4, #12]
 800ea76:	2300      	movs	r3, #0
 800ea78:	6063      	str	r3, [r4, #4]
 800ea7a:	6923      	ldr	r3, [r4, #16]
 800ea7c:	6023      	str	r3, [r4, #0]
 800ea7e:	89a3      	ldrh	r3, [r4, #12]
 800ea80:	f043 0308 	orr.w	r3, r3, #8
 800ea84:	81a3      	strh	r3, [r4, #12]
 800ea86:	6923      	ldr	r3, [r4, #16]
 800ea88:	b94b      	cbnz	r3, 800ea9e <__swsetup_r+0x9a>
 800ea8a:	89a3      	ldrh	r3, [r4, #12]
 800ea8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ea90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea94:	d003      	beq.n	800ea9e <__swsetup_r+0x9a>
 800ea96:	4621      	mov	r1, r4
 800ea98:	4630      	mov	r0, r6
 800ea9a:	f000 f929 	bl	800ecf0 <__smakebuf_r>
 800ea9e:	89a0      	ldrh	r0, [r4, #12]
 800eaa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eaa4:	f010 0301 	ands.w	r3, r0, #1
 800eaa8:	d00a      	beq.n	800eac0 <__swsetup_r+0xbc>
 800eaaa:	2300      	movs	r3, #0
 800eaac:	60a3      	str	r3, [r4, #8]
 800eaae:	6963      	ldr	r3, [r4, #20]
 800eab0:	425b      	negs	r3, r3
 800eab2:	61a3      	str	r3, [r4, #24]
 800eab4:	6923      	ldr	r3, [r4, #16]
 800eab6:	b943      	cbnz	r3, 800eaca <__swsetup_r+0xc6>
 800eab8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800eabc:	d1ba      	bne.n	800ea34 <__swsetup_r+0x30>
 800eabe:	bd70      	pop	{r4, r5, r6, pc}
 800eac0:	0781      	lsls	r1, r0, #30
 800eac2:	bf58      	it	pl
 800eac4:	6963      	ldrpl	r3, [r4, #20]
 800eac6:	60a3      	str	r3, [r4, #8]
 800eac8:	e7f4      	b.n	800eab4 <__swsetup_r+0xb0>
 800eaca:	2000      	movs	r0, #0
 800eacc:	e7f7      	b.n	800eabe <__swsetup_r+0xba>
 800eace:	bf00      	nop
 800ead0:	2000005c 	.word	0x2000005c
 800ead4:	080101d4 	.word	0x080101d4
 800ead8:	080101f4 	.word	0x080101f4
 800eadc:	080101b4 	.word	0x080101b4

0800eae0 <_close_r>:
 800eae0:	b538      	push	{r3, r4, r5, lr}
 800eae2:	2300      	movs	r3, #0
 800eae4:	4d05      	ldr	r5, [pc, #20]	; (800eafc <_close_r+0x1c>)
 800eae6:	4604      	mov	r4, r0
 800eae8:	4608      	mov	r0, r1
 800eaea:	602b      	str	r3, [r5, #0]
 800eaec:	f7f6 fc57 	bl	800539e <_close>
 800eaf0:	1c43      	adds	r3, r0, #1
 800eaf2:	d102      	bne.n	800eafa <_close_r+0x1a>
 800eaf4:	682b      	ldr	r3, [r5, #0]
 800eaf6:	b103      	cbz	r3, 800eafa <_close_r+0x1a>
 800eaf8:	6023      	str	r3, [r4, #0]
 800eafa:	bd38      	pop	{r3, r4, r5, pc}
 800eafc:	2000312c 	.word	0x2000312c

0800eb00 <__sflush_r>:
 800eb00:	898a      	ldrh	r2, [r1, #12]
 800eb02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb06:	4605      	mov	r5, r0
 800eb08:	0710      	lsls	r0, r2, #28
 800eb0a:	460c      	mov	r4, r1
 800eb0c:	d458      	bmi.n	800ebc0 <__sflush_r+0xc0>
 800eb0e:	684b      	ldr	r3, [r1, #4]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	dc05      	bgt.n	800eb20 <__sflush_r+0x20>
 800eb14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	dc02      	bgt.n	800eb20 <__sflush_r+0x20>
 800eb1a:	2000      	movs	r0, #0
 800eb1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb22:	2e00      	cmp	r6, #0
 800eb24:	d0f9      	beq.n	800eb1a <__sflush_r+0x1a>
 800eb26:	2300      	movs	r3, #0
 800eb28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eb2c:	682f      	ldr	r7, [r5, #0]
 800eb2e:	602b      	str	r3, [r5, #0]
 800eb30:	d032      	beq.n	800eb98 <__sflush_r+0x98>
 800eb32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eb34:	89a3      	ldrh	r3, [r4, #12]
 800eb36:	075a      	lsls	r2, r3, #29
 800eb38:	d505      	bpl.n	800eb46 <__sflush_r+0x46>
 800eb3a:	6863      	ldr	r3, [r4, #4]
 800eb3c:	1ac0      	subs	r0, r0, r3
 800eb3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eb40:	b10b      	cbz	r3, 800eb46 <__sflush_r+0x46>
 800eb42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eb44:	1ac0      	subs	r0, r0, r3
 800eb46:	2300      	movs	r3, #0
 800eb48:	4602      	mov	r2, r0
 800eb4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb4c:	4628      	mov	r0, r5
 800eb4e:	6a21      	ldr	r1, [r4, #32]
 800eb50:	47b0      	blx	r6
 800eb52:	1c43      	adds	r3, r0, #1
 800eb54:	89a3      	ldrh	r3, [r4, #12]
 800eb56:	d106      	bne.n	800eb66 <__sflush_r+0x66>
 800eb58:	6829      	ldr	r1, [r5, #0]
 800eb5a:	291d      	cmp	r1, #29
 800eb5c:	d82c      	bhi.n	800ebb8 <__sflush_r+0xb8>
 800eb5e:	4a2a      	ldr	r2, [pc, #168]	; (800ec08 <__sflush_r+0x108>)
 800eb60:	40ca      	lsrs	r2, r1
 800eb62:	07d6      	lsls	r6, r2, #31
 800eb64:	d528      	bpl.n	800ebb8 <__sflush_r+0xb8>
 800eb66:	2200      	movs	r2, #0
 800eb68:	6062      	str	r2, [r4, #4]
 800eb6a:	6922      	ldr	r2, [r4, #16]
 800eb6c:	04d9      	lsls	r1, r3, #19
 800eb6e:	6022      	str	r2, [r4, #0]
 800eb70:	d504      	bpl.n	800eb7c <__sflush_r+0x7c>
 800eb72:	1c42      	adds	r2, r0, #1
 800eb74:	d101      	bne.n	800eb7a <__sflush_r+0x7a>
 800eb76:	682b      	ldr	r3, [r5, #0]
 800eb78:	b903      	cbnz	r3, 800eb7c <__sflush_r+0x7c>
 800eb7a:	6560      	str	r0, [r4, #84]	; 0x54
 800eb7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb7e:	602f      	str	r7, [r5, #0]
 800eb80:	2900      	cmp	r1, #0
 800eb82:	d0ca      	beq.n	800eb1a <__sflush_r+0x1a>
 800eb84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb88:	4299      	cmp	r1, r3
 800eb8a:	d002      	beq.n	800eb92 <__sflush_r+0x92>
 800eb8c:	4628      	mov	r0, r5
 800eb8e:	f000 f909 	bl	800eda4 <_free_r>
 800eb92:	2000      	movs	r0, #0
 800eb94:	6360      	str	r0, [r4, #52]	; 0x34
 800eb96:	e7c1      	b.n	800eb1c <__sflush_r+0x1c>
 800eb98:	6a21      	ldr	r1, [r4, #32]
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	4628      	mov	r0, r5
 800eb9e:	47b0      	blx	r6
 800eba0:	1c41      	adds	r1, r0, #1
 800eba2:	d1c7      	bne.n	800eb34 <__sflush_r+0x34>
 800eba4:	682b      	ldr	r3, [r5, #0]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d0c4      	beq.n	800eb34 <__sflush_r+0x34>
 800ebaa:	2b1d      	cmp	r3, #29
 800ebac:	d001      	beq.n	800ebb2 <__sflush_r+0xb2>
 800ebae:	2b16      	cmp	r3, #22
 800ebb0:	d101      	bne.n	800ebb6 <__sflush_r+0xb6>
 800ebb2:	602f      	str	r7, [r5, #0]
 800ebb4:	e7b1      	b.n	800eb1a <__sflush_r+0x1a>
 800ebb6:	89a3      	ldrh	r3, [r4, #12]
 800ebb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebbc:	81a3      	strh	r3, [r4, #12]
 800ebbe:	e7ad      	b.n	800eb1c <__sflush_r+0x1c>
 800ebc0:	690f      	ldr	r7, [r1, #16]
 800ebc2:	2f00      	cmp	r7, #0
 800ebc4:	d0a9      	beq.n	800eb1a <__sflush_r+0x1a>
 800ebc6:	0793      	lsls	r3, r2, #30
 800ebc8:	bf18      	it	ne
 800ebca:	2300      	movne	r3, #0
 800ebcc:	680e      	ldr	r6, [r1, #0]
 800ebce:	bf08      	it	eq
 800ebd0:	694b      	ldreq	r3, [r1, #20]
 800ebd2:	eba6 0807 	sub.w	r8, r6, r7
 800ebd6:	600f      	str	r7, [r1, #0]
 800ebd8:	608b      	str	r3, [r1, #8]
 800ebda:	f1b8 0f00 	cmp.w	r8, #0
 800ebde:	dd9c      	ble.n	800eb1a <__sflush_r+0x1a>
 800ebe0:	4643      	mov	r3, r8
 800ebe2:	463a      	mov	r2, r7
 800ebe4:	4628      	mov	r0, r5
 800ebe6:	6a21      	ldr	r1, [r4, #32]
 800ebe8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ebea:	47b0      	blx	r6
 800ebec:	2800      	cmp	r0, #0
 800ebee:	dc06      	bgt.n	800ebfe <__sflush_r+0xfe>
 800ebf0:	89a3      	ldrh	r3, [r4, #12]
 800ebf2:	f04f 30ff 	mov.w	r0, #4294967295
 800ebf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebfa:	81a3      	strh	r3, [r4, #12]
 800ebfc:	e78e      	b.n	800eb1c <__sflush_r+0x1c>
 800ebfe:	4407      	add	r7, r0
 800ec00:	eba8 0800 	sub.w	r8, r8, r0
 800ec04:	e7e9      	b.n	800ebda <__sflush_r+0xda>
 800ec06:	bf00      	nop
 800ec08:	20400001 	.word	0x20400001

0800ec0c <_fflush_r>:
 800ec0c:	b538      	push	{r3, r4, r5, lr}
 800ec0e:	690b      	ldr	r3, [r1, #16]
 800ec10:	4605      	mov	r5, r0
 800ec12:	460c      	mov	r4, r1
 800ec14:	b913      	cbnz	r3, 800ec1c <_fflush_r+0x10>
 800ec16:	2500      	movs	r5, #0
 800ec18:	4628      	mov	r0, r5
 800ec1a:	bd38      	pop	{r3, r4, r5, pc}
 800ec1c:	b118      	cbz	r0, 800ec26 <_fflush_r+0x1a>
 800ec1e:	6983      	ldr	r3, [r0, #24]
 800ec20:	b90b      	cbnz	r3, 800ec26 <_fflush_r+0x1a>
 800ec22:	f7ff fa07 	bl	800e034 <__sinit>
 800ec26:	4b14      	ldr	r3, [pc, #80]	; (800ec78 <_fflush_r+0x6c>)
 800ec28:	429c      	cmp	r4, r3
 800ec2a:	d11b      	bne.n	800ec64 <_fflush_r+0x58>
 800ec2c:	686c      	ldr	r4, [r5, #4]
 800ec2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d0ef      	beq.n	800ec16 <_fflush_r+0xa>
 800ec36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ec38:	07d0      	lsls	r0, r2, #31
 800ec3a:	d404      	bmi.n	800ec46 <_fflush_r+0x3a>
 800ec3c:	0599      	lsls	r1, r3, #22
 800ec3e:	d402      	bmi.n	800ec46 <_fflush_r+0x3a>
 800ec40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec42:	f7ff fa95 	bl	800e170 <__retarget_lock_acquire_recursive>
 800ec46:	4628      	mov	r0, r5
 800ec48:	4621      	mov	r1, r4
 800ec4a:	f7ff ff59 	bl	800eb00 <__sflush_r>
 800ec4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec50:	4605      	mov	r5, r0
 800ec52:	07da      	lsls	r2, r3, #31
 800ec54:	d4e0      	bmi.n	800ec18 <_fflush_r+0xc>
 800ec56:	89a3      	ldrh	r3, [r4, #12]
 800ec58:	059b      	lsls	r3, r3, #22
 800ec5a:	d4dd      	bmi.n	800ec18 <_fflush_r+0xc>
 800ec5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec5e:	f7ff fa88 	bl	800e172 <__retarget_lock_release_recursive>
 800ec62:	e7d9      	b.n	800ec18 <_fflush_r+0xc>
 800ec64:	4b05      	ldr	r3, [pc, #20]	; (800ec7c <_fflush_r+0x70>)
 800ec66:	429c      	cmp	r4, r3
 800ec68:	d101      	bne.n	800ec6e <_fflush_r+0x62>
 800ec6a:	68ac      	ldr	r4, [r5, #8]
 800ec6c:	e7df      	b.n	800ec2e <_fflush_r+0x22>
 800ec6e:	4b04      	ldr	r3, [pc, #16]	; (800ec80 <_fflush_r+0x74>)
 800ec70:	429c      	cmp	r4, r3
 800ec72:	bf08      	it	eq
 800ec74:	68ec      	ldreq	r4, [r5, #12]
 800ec76:	e7da      	b.n	800ec2e <_fflush_r+0x22>
 800ec78:	080101d4 	.word	0x080101d4
 800ec7c:	080101f4 	.word	0x080101f4
 800ec80:	080101b4 	.word	0x080101b4

0800ec84 <_lseek_r>:
 800ec84:	b538      	push	{r3, r4, r5, lr}
 800ec86:	4604      	mov	r4, r0
 800ec88:	4608      	mov	r0, r1
 800ec8a:	4611      	mov	r1, r2
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	4d05      	ldr	r5, [pc, #20]	; (800eca4 <_lseek_r+0x20>)
 800ec90:	602a      	str	r2, [r5, #0]
 800ec92:	461a      	mov	r2, r3
 800ec94:	f7f6 fba7 	bl	80053e6 <_lseek>
 800ec98:	1c43      	adds	r3, r0, #1
 800ec9a:	d102      	bne.n	800eca2 <_lseek_r+0x1e>
 800ec9c:	682b      	ldr	r3, [r5, #0]
 800ec9e:	b103      	cbz	r3, 800eca2 <_lseek_r+0x1e>
 800eca0:	6023      	str	r3, [r4, #0]
 800eca2:	bd38      	pop	{r3, r4, r5, pc}
 800eca4:	2000312c 	.word	0x2000312c

0800eca8 <__swhatbuf_r>:
 800eca8:	b570      	push	{r4, r5, r6, lr}
 800ecaa:	460e      	mov	r6, r1
 800ecac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecb0:	4614      	mov	r4, r2
 800ecb2:	2900      	cmp	r1, #0
 800ecb4:	461d      	mov	r5, r3
 800ecb6:	b096      	sub	sp, #88	; 0x58
 800ecb8:	da07      	bge.n	800ecca <__swhatbuf_r+0x22>
 800ecba:	2300      	movs	r3, #0
 800ecbc:	602b      	str	r3, [r5, #0]
 800ecbe:	89b3      	ldrh	r3, [r6, #12]
 800ecc0:	061a      	lsls	r2, r3, #24
 800ecc2:	d410      	bmi.n	800ece6 <__swhatbuf_r+0x3e>
 800ecc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ecc8:	e00e      	b.n	800ece8 <__swhatbuf_r+0x40>
 800ecca:	466a      	mov	r2, sp
 800eccc:	f000 f8c8 	bl	800ee60 <_fstat_r>
 800ecd0:	2800      	cmp	r0, #0
 800ecd2:	dbf2      	blt.n	800ecba <__swhatbuf_r+0x12>
 800ecd4:	9a01      	ldr	r2, [sp, #4]
 800ecd6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ecda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ecde:	425a      	negs	r2, r3
 800ece0:	415a      	adcs	r2, r3
 800ece2:	602a      	str	r2, [r5, #0]
 800ece4:	e7ee      	b.n	800ecc4 <__swhatbuf_r+0x1c>
 800ece6:	2340      	movs	r3, #64	; 0x40
 800ece8:	2000      	movs	r0, #0
 800ecea:	6023      	str	r3, [r4, #0]
 800ecec:	b016      	add	sp, #88	; 0x58
 800ecee:	bd70      	pop	{r4, r5, r6, pc}

0800ecf0 <__smakebuf_r>:
 800ecf0:	898b      	ldrh	r3, [r1, #12]
 800ecf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ecf4:	079d      	lsls	r5, r3, #30
 800ecf6:	4606      	mov	r6, r0
 800ecf8:	460c      	mov	r4, r1
 800ecfa:	d507      	bpl.n	800ed0c <__smakebuf_r+0x1c>
 800ecfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ed00:	6023      	str	r3, [r4, #0]
 800ed02:	6123      	str	r3, [r4, #16]
 800ed04:	2301      	movs	r3, #1
 800ed06:	6163      	str	r3, [r4, #20]
 800ed08:	b002      	add	sp, #8
 800ed0a:	bd70      	pop	{r4, r5, r6, pc}
 800ed0c:	466a      	mov	r2, sp
 800ed0e:	ab01      	add	r3, sp, #4
 800ed10:	f7ff ffca 	bl	800eca8 <__swhatbuf_r>
 800ed14:	9900      	ldr	r1, [sp, #0]
 800ed16:	4605      	mov	r5, r0
 800ed18:	4630      	mov	r0, r6
 800ed1a:	f7ff fa2b 	bl	800e174 <_malloc_r>
 800ed1e:	b948      	cbnz	r0, 800ed34 <__smakebuf_r+0x44>
 800ed20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed24:	059a      	lsls	r2, r3, #22
 800ed26:	d4ef      	bmi.n	800ed08 <__smakebuf_r+0x18>
 800ed28:	f023 0303 	bic.w	r3, r3, #3
 800ed2c:	f043 0302 	orr.w	r3, r3, #2
 800ed30:	81a3      	strh	r3, [r4, #12]
 800ed32:	e7e3      	b.n	800ecfc <__smakebuf_r+0xc>
 800ed34:	4b0d      	ldr	r3, [pc, #52]	; (800ed6c <__smakebuf_r+0x7c>)
 800ed36:	62b3      	str	r3, [r6, #40]	; 0x28
 800ed38:	89a3      	ldrh	r3, [r4, #12]
 800ed3a:	6020      	str	r0, [r4, #0]
 800ed3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed40:	81a3      	strh	r3, [r4, #12]
 800ed42:	9b00      	ldr	r3, [sp, #0]
 800ed44:	6120      	str	r0, [r4, #16]
 800ed46:	6163      	str	r3, [r4, #20]
 800ed48:	9b01      	ldr	r3, [sp, #4]
 800ed4a:	b15b      	cbz	r3, 800ed64 <__smakebuf_r+0x74>
 800ed4c:	4630      	mov	r0, r6
 800ed4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed52:	f000 f897 	bl	800ee84 <_isatty_r>
 800ed56:	b128      	cbz	r0, 800ed64 <__smakebuf_r+0x74>
 800ed58:	89a3      	ldrh	r3, [r4, #12]
 800ed5a:	f023 0303 	bic.w	r3, r3, #3
 800ed5e:	f043 0301 	orr.w	r3, r3, #1
 800ed62:	81a3      	strh	r3, [r4, #12]
 800ed64:	89a0      	ldrh	r0, [r4, #12]
 800ed66:	4305      	orrs	r5, r0
 800ed68:	81a5      	strh	r5, [r4, #12]
 800ed6a:	e7cd      	b.n	800ed08 <__smakebuf_r+0x18>
 800ed6c:	0800dfcd 	.word	0x0800dfcd

0800ed70 <memchr>:
 800ed70:	4603      	mov	r3, r0
 800ed72:	b510      	push	{r4, lr}
 800ed74:	b2c9      	uxtb	r1, r1
 800ed76:	4402      	add	r2, r0
 800ed78:	4293      	cmp	r3, r2
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	d101      	bne.n	800ed82 <memchr+0x12>
 800ed7e:	2000      	movs	r0, #0
 800ed80:	e003      	b.n	800ed8a <memchr+0x1a>
 800ed82:	7804      	ldrb	r4, [r0, #0]
 800ed84:	3301      	adds	r3, #1
 800ed86:	428c      	cmp	r4, r1
 800ed88:	d1f6      	bne.n	800ed78 <memchr+0x8>
 800ed8a:	bd10      	pop	{r4, pc}

0800ed8c <__malloc_lock>:
 800ed8c:	4801      	ldr	r0, [pc, #4]	; (800ed94 <__malloc_lock+0x8>)
 800ed8e:	f7ff b9ef 	b.w	800e170 <__retarget_lock_acquire_recursive>
 800ed92:	bf00      	nop
 800ed94:	20003124 	.word	0x20003124

0800ed98 <__malloc_unlock>:
 800ed98:	4801      	ldr	r0, [pc, #4]	; (800eda0 <__malloc_unlock+0x8>)
 800ed9a:	f7ff b9ea 	b.w	800e172 <__retarget_lock_release_recursive>
 800ed9e:	bf00      	nop
 800eda0:	20003124 	.word	0x20003124

0800eda4 <_free_r>:
 800eda4:	b538      	push	{r3, r4, r5, lr}
 800eda6:	4605      	mov	r5, r0
 800eda8:	2900      	cmp	r1, #0
 800edaa:	d043      	beq.n	800ee34 <_free_r+0x90>
 800edac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800edb0:	1f0c      	subs	r4, r1, #4
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	bfb8      	it	lt
 800edb6:	18e4      	addlt	r4, r4, r3
 800edb8:	f7ff ffe8 	bl	800ed8c <__malloc_lock>
 800edbc:	4a1e      	ldr	r2, [pc, #120]	; (800ee38 <_free_r+0x94>)
 800edbe:	6813      	ldr	r3, [r2, #0]
 800edc0:	4610      	mov	r0, r2
 800edc2:	b933      	cbnz	r3, 800edd2 <_free_r+0x2e>
 800edc4:	6063      	str	r3, [r4, #4]
 800edc6:	6014      	str	r4, [r2, #0]
 800edc8:	4628      	mov	r0, r5
 800edca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800edce:	f7ff bfe3 	b.w	800ed98 <__malloc_unlock>
 800edd2:	42a3      	cmp	r3, r4
 800edd4:	d90a      	bls.n	800edec <_free_r+0x48>
 800edd6:	6821      	ldr	r1, [r4, #0]
 800edd8:	1862      	adds	r2, r4, r1
 800edda:	4293      	cmp	r3, r2
 800eddc:	bf01      	itttt	eq
 800edde:	681a      	ldreq	r2, [r3, #0]
 800ede0:	685b      	ldreq	r3, [r3, #4]
 800ede2:	1852      	addeq	r2, r2, r1
 800ede4:	6022      	streq	r2, [r4, #0]
 800ede6:	6063      	str	r3, [r4, #4]
 800ede8:	6004      	str	r4, [r0, #0]
 800edea:	e7ed      	b.n	800edc8 <_free_r+0x24>
 800edec:	461a      	mov	r2, r3
 800edee:	685b      	ldr	r3, [r3, #4]
 800edf0:	b10b      	cbz	r3, 800edf6 <_free_r+0x52>
 800edf2:	42a3      	cmp	r3, r4
 800edf4:	d9fa      	bls.n	800edec <_free_r+0x48>
 800edf6:	6811      	ldr	r1, [r2, #0]
 800edf8:	1850      	adds	r0, r2, r1
 800edfa:	42a0      	cmp	r0, r4
 800edfc:	d10b      	bne.n	800ee16 <_free_r+0x72>
 800edfe:	6820      	ldr	r0, [r4, #0]
 800ee00:	4401      	add	r1, r0
 800ee02:	1850      	adds	r0, r2, r1
 800ee04:	4283      	cmp	r3, r0
 800ee06:	6011      	str	r1, [r2, #0]
 800ee08:	d1de      	bne.n	800edc8 <_free_r+0x24>
 800ee0a:	6818      	ldr	r0, [r3, #0]
 800ee0c:	685b      	ldr	r3, [r3, #4]
 800ee0e:	4401      	add	r1, r0
 800ee10:	6011      	str	r1, [r2, #0]
 800ee12:	6053      	str	r3, [r2, #4]
 800ee14:	e7d8      	b.n	800edc8 <_free_r+0x24>
 800ee16:	d902      	bls.n	800ee1e <_free_r+0x7a>
 800ee18:	230c      	movs	r3, #12
 800ee1a:	602b      	str	r3, [r5, #0]
 800ee1c:	e7d4      	b.n	800edc8 <_free_r+0x24>
 800ee1e:	6820      	ldr	r0, [r4, #0]
 800ee20:	1821      	adds	r1, r4, r0
 800ee22:	428b      	cmp	r3, r1
 800ee24:	bf01      	itttt	eq
 800ee26:	6819      	ldreq	r1, [r3, #0]
 800ee28:	685b      	ldreq	r3, [r3, #4]
 800ee2a:	1809      	addeq	r1, r1, r0
 800ee2c:	6021      	streq	r1, [r4, #0]
 800ee2e:	6063      	str	r3, [r4, #4]
 800ee30:	6054      	str	r4, [r2, #4]
 800ee32:	e7c9      	b.n	800edc8 <_free_r+0x24>
 800ee34:	bd38      	pop	{r3, r4, r5, pc}
 800ee36:	bf00      	nop
 800ee38:	20002f68 	.word	0x20002f68

0800ee3c <_read_r>:
 800ee3c:	b538      	push	{r3, r4, r5, lr}
 800ee3e:	4604      	mov	r4, r0
 800ee40:	4608      	mov	r0, r1
 800ee42:	4611      	mov	r1, r2
 800ee44:	2200      	movs	r2, #0
 800ee46:	4d05      	ldr	r5, [pc, #20]	; (800ee5c <_read_r+0x20>)
 800ee48:	602a      	str	r2, [r5, #0]
 800ee4a:	461a      	mov	r2, r3
 800ee4c:	f7f6 fa6e 	bl	800532c <_read>
 800ee50:	1c43      	adds	r3, r0, #1
 800ee52:	d102      	bne.n	800ee5a <_read_r+0x1e>
 800ee54:	682b      	ldr	r3, [r5, #0]
 800ee56:	b103      	cbz	r3, 800ee5a <_read_r+0x1e>
 800ee58:	6023      	str	r3, [r4, #0]
 800ee5a:	bd38      	pop	{r3, r4, r5, pc}
 800ee5c:	2000312c 	.word	0x2000312c

0800ee60 <_fstat_r>:
 800ee60:	b538      	push	{r3, r4, r5, lr}
 800ee62:	2300      	movs	r3, #0
 800ee64:	4d06      	ldr	r5, [pc, #24]	; (800ee80 <_fstat_r+0x20>)
 800ee66:	4604      	mov	r4, r0
 800ee68:	4608      	mov	r0, r1
 800ee6a:	4611      	mov	r1, r2
 800ee6c:	602b      	str	r3, [r5, #0]
 800ee6e:	f7f6 faa1 	bl	80053b4 <_fstat>
 800ee72:	1c43      	adds	r3, r0, #1
 800ee74:	d102      	bne.n	800ee7c <_fstat_r+0x1c>
 800ee76:	682b      	ldr	r3, [r5, #0]
 800ee78:	b103      	cbz	r3, 800ee7c <_fstat_r+0x1c>
 800ee7a:	6023      	str	r3, [r4, #0]
 800ee7c:	bd38      	pop	{r3, r4, r5, pc}
 800ee7e:	bf00      	nop
 800ee80:	2000312c 	.word	0x2000312c

0800ee84 <_isatty_r>:
 800ee84:	b538      	push	{r3, r4, r5, lr}
 800ee86:	2300      	movs	r3, #0
 800ee88:	4d05      	ldr	r5, [pc, #20]	; (800eea0 <_isatty_r+0x1c>)
 800ee8a:	4604      	mov	r4, r0
 800ee8c:	4608      	mov	r0, r1
 800ee8e:	602b      	str	r3, [r5, #0]
 800ee90:	f7f6 fa9f 	bl	80053d2 <_isatty>
 800ee94:	1c43      	adds	r3, r0, #1
 800ee96:	d102      	bne.n	800ee9e <_isatty_r+0x1a>
 800ee98:	682b      	ldr	r3, [r5, #0]
 800ee9a:	b103      	cbz	r3, 800ee9e <_isatty_r+0x1a>
 800ee9c:	6023      	str	r3, [r4, #0]
 800ee9e:	bd38      	pop	{r3, r4, r5, pc}
 800eea0:	2000312c 	.word	0x2000312c

0800eea4 <pow>:
 800eea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eea8:	461f      	mov	r7, r3
 800eeaa:	4680      	mov	r8, r0
 800eeac:	4689      	mov	r9, r1
 800eeae:	4616      	mov	r6, r2
 800eeb0:	f000 f8a6 	bl	800f000 <__ieee754_pow>
 800eeb4:	4b4d      	ldr	r3, [pc, #308]	; (800efec <pow+0x148>)
 800eeb6:	4604      	mov	r4, r0
 800eeb8:	f993 3000 	ldrsb.w	r3, [r3]
 800eebc:	460d      	mov	r5, r1
 800eebe:	3301      	adds	r3, #1
 800eec0:	d015      	beq.n	800eeee <pow+0x4a>
 800eec2:	4632      	mov	r2, r6
 800eec4:	463b      	mov	r3, r7
 800eec6:	4630      	mov	r0, r6
 800eec8:	4639      	mov	r1, r7
 800eeca:	f7f1 fe07 	bl	8000adc <__aeabi_dcmpun>
 800eece:	b970      	cbnz	r0, 800eeee <pow+0x4a>
 800eed0:	4642      	mov	r2, r8
 800eed2:	464b      	mov	r3, r9
 800eed4:	4640      	mov	r0, r8
 800eed6:	4649      	mov	r1, r9
 800eed8:	f7f1 fe00 	bl	8000adc <__aeabi_dcmpun>
 800eedc:	2200      	movs	r2, #0
 800eede:	2300      	movs	r3, #0
 800eee0:	b148      	cbz	r0, 800eef6 <pow+0x52>
 800eee2:	4630      	mov	r0, r6
 800eee4:	4639      	mov	r1, r7
 800eee6:	f7f1 fdc7 	bl	8000a78 <__aeabi_dcmpeq>
 800eeea:	2800      	cmp	r0, #0
 800eeec:	d17b      	bne.n	800efe6 <pow+0x142>
 800eeee:	4620      	mov	r0, r4
 800eef0:	4629      	mov	r1, r5
 800eef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eef6:	4640      	mov	r0, r8
 800eef8:	4649      	mov	r1, r9
 800eefa:	f7f1 fdbd 	bl	8000a78 <__aeabi_dcmpeq>
 800eefe:	b1e0      	cbz	r0, 800ef3a <pow+0x96>
 800ef00:	2200      	movs	r2, #0
 800ef02:	2300      	movs	r3, #0
 800ef04:	4630      	mov	r0, r6
 800ef06:	4639      	mov	r1, r7
 800ef08:	f7f1 fdb6 	bl	8000a78 <__aeabi_dcmpeq>
 800ef0c:	2800      	cmp	r0, #0
 800ef0e:	d16a      	bne.n	800efe6 <pow+0x142>
 800ef10:	4630      	mov	r0, r6
 800ef12:	4639      	mov	r1, r7
 800ef14:	f000 fe39 	bl	800fb8a <finite>
 800ef18:	2800      	cmp	r0, #0
 800ef1a:	d0e8      	beq.n	800eeee <pow+0x4a>
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	2300      	movs	r3, #0
 800ef20:	4630      	mov	r0, r6
 800ef22:	4639      	mov	r1, r7
 800ef24:	f7f1 fdb2 	bl	8000a8c <__aeabi_dcmplt>
 800ef28:	2800      	cmp	r0, #0
 800ef2a:	d0e0      	beq.n	800eeee <pow+0x4a>
 800ef2c:	f7fe ffbe 	bl	800deac <__errno>
 800ef30:	2321      	movs	r3, #33	; 0x21
 800ef32:	2400      	movs	r4, #0
 800ef34:	6003      	str	r3, [r0, #0]
 800ef36:	4d2e      	ldr	r5, [pc, #184]	; (800eff0 <pow+0x14c>)
 800ef38:	e7d9      	b.n	800eeee <pow+0x4a>
 800ef3a:	4620      	mov	r0, r4
 800ef3c:	4629      	mov	r1, r5
 800ef3e:	f000 fe24 	bl	800fb8a <finite>
 800ef42:	bba8      	cbnz	r0, 800efb0 <pow+0x10c>
 800ef44:	4640      	mov	r0, r8
 800ef46:	4649      	mov	r1, r9
 800ef48:	f000 fe1f 	bl	800fb8a <finite>
 800ef4c:	b380      	cbz	r0, 800efb0 <pow+0x10c>
 800ef4e:	4630      	mov	r0, r6
 800ef50:	4639      	mov	r1, r7
 800ef52:	f000 fe1a 	bl	800fb8a <finite>
 800ef56:	b358      	cbz	r0, 800efb0 <pow+0x10c>
 800ef58:	4622      	mov	r2, r4
 800ef5a:	462b      	mov	r3, r5
 800ef5c:	4620      	mov	r0, r4
 800ef5e:	4629      	mov	r1, r5
 800ef60:	f7f1 fdbc 	bl	8000adc <__aeabi_dcmpun>
 800ef64:	b160      	cbz	r0, 800ef80 <pow+0xdc>
 800ef66:	f7fe ffa1 	bl	800deac <__errno>
 800ef6a:	2321      	movs	r3, #33	; 0x21
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	6003      	str	r3, [r0, #0]
 800ef70:	2300      	movs	r3, #0
 800ef72:	4610      	mov	r0, r2
 800ef74:	4619      	mov	r1, r3
 800ef76:	f7f1 fc41 	bl	80007fc <__aeabi_ddiv>
 800ef7a:	4604      	mov	r4, r0
 800ef7c:	460d      	mov	r5, r1
 800ef7e:	e7b6      	b.n	800eeee <pow+0x4a>
 800ef80:	f7fe ff94 	bl	800deac <__errno>
 800ef84:	2322      	movs	r3, #34	; 0x22
 800ef86:	2200      	movs	r2, #0
 800ef88:	6003      	str	r3, [r0, #0]
 800ef8a:	4649      	mov	r1, r9
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	4640      	mov	r0, r8
 800ef90:	f7f1 fd7c 	bl	8000a8c <__aeabi_dcmplt>
 800ef94:	2400      	movs	r4, #0
 800ef96:	b148      	cbz	r0, 800efac <pow+0x108>
 800ef98:	4630      	mov	r0, r6
 800ef9a:	4639      	mov	r1, r7
 800ef9c:	f000 fe02 	bl	800fba4 <rint>
 800efa0:	4632      	mov	r2, r6
 800efa2:	463b      	mov	r3, r7
 800efa4:	f7f1 fd68 	bl	8000a78 <__aeabi_dcmpeq>
 800efa8:	2800      	cmp	r0, #0
 800efaa:	d0c4      	beq.n	800ef36 <pow+0x92>
 800efac:	4d11      	ldr	r5, [pc, #68]	; (800eff4 <pow+0x150>)
 800efae:	e79e      	b.n	800eeee <pow+0x4a>
 800efb0:	2200      	movs	r2, #0
 800efb2:	2300      	movs	r3, #0
 800efb4:	4620      	mov	r0, r4
 800efb6:	4629      	mov	r1, r5
 800efb8:	f7f1 fd5e 	bl	8000a78 <__aeabi_dcmpeq>
 800efbc:	2800      	cmp	r0, #0
 800efbe:	d096      	beq.n	800eeee <pow+0x4a>
 800efc0:	4640      	mov	r0, r8
 800efc2:	4649      	mov	r1, r9
 800efc4:	f000 fde1 	bl	800fb8a <finite>
 800efc8:	2800      	cmp	r0, #0
 800efca:	d090      	beq.n	800eeee <pow+0x4a>
 800efcc:	4630      	mov	r0, r6
 800efce:	4639      	mov	r1, r7
 800efd0:	f000 fddb 	bl	800fb8a <finite>
 800efd4:	2800      	cmp	r0, #0
 800efd6:	d08a      	beq.n	800eeee <pow+0x4a>
 800efd8:	f7fe ff68 	bl	800deac <__errno>
 800efdc:	2322      	movs	r3, #34	; 0x22
 800efde:	2400      	movs	r4, #0
 800efe0:	2500      	movs	r5, #0
 800efe2:	6003      	str	r3, [r0, #0]
 800efe4:	e783      	b.n	800eeee <pow+0x4a>
 800efe6:	2400      	movs	r4, #0
 800efe8:	4d03      	ldr	r5, [pc, #12]	; (800eff8 <pow+0x154>)
 800efea:	e780      	b.n	800eeee <pow+0x4a>
 800efec:	200000c0 	.word	0x200000c0
 800eff0:	fff00000 	.word	0xfff00000
 800eff4:	7ff00000 	.word	0x7ff00000
 800eff8:	3ff00000 	.word	0x3ff00000
 800effc:	00000000 	.word	0x00000000

0800f000 <__ieee754_pow>:
 800f000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f004:	b093      	sub	sp, #76	; 0x4c
 800f006:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f00a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800f00e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800f012:	ea55 0302 	orrs.w	r3, r5, r2
 800f016:	4607      	mov	r7, r0
 800f018:	4688      	mov	r8, r1
 800f01a:	f000 84bf 	beq.w	800f99c <__ieee754_pow+0x99c>
 800f01e:	4b7e      	ldr	r3, [pc, #504]	; (800f218 <__ieee754_pow+0x218>)
 800f020:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800f024:	429c      	cmp	r4, r3
 800f026:	4689      	mov	r9, r1
 800f028:	4682      	mov	sl, r0
 800f02a:	dc09      	bgt.n	800f040 <__ieee754_pow+0x40>
 800f02c:	d103      	bne.n	800f036 <__ieee754_pow+0x36>
 800f02e:	b978      	cbnz	r0, 800f050 <__ieee754_pow+0x50>
 800f030:	42a5      	cmp	r5, r4
 800f032:	dd02      	ble.n	800f03a <__ieee754_pow+0x3a>
 800f034:	e00c      	b.n	800f050 <__ieee754_pow+0x50>
 800f036:	429d      	cmp	r5, r3
 800f038:	dc02      	bgt.n	800f040 <__ieee754_pow+0x40>
 800f03a:	429d      	cmp	r5, r3
 800f03c:	d10e      	bne.n	800f05c <__ieee754_pow+0x5c>
 800f03e:	b16a      	cbz	r2, 800f05c <__ieee754_pow+0x5c>
 800f040:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f044:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f048:	ea54 030a 	orrs.w	r3, r4, sl
 800f04c:	f000 84a6 	beq.w	800f99c <__ieee754_pow+0x99c>
 800f050:	4872      	ldr	r0, [pc, #456]	; (800f21c <__ieee754_pow+0x21c>)
 800f052:	b013      	add	sp, #76	; 0x4c
 800f054:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f058:	f000 bd9e 	b.w	800fb98 <nan>
 800f05c:	f1b9 0f00 	cmp.w	r9, #0
 800f060:	da39      	bge.n	800f0d6 <__ieee754_pow+0xd6>
 800f062:	4b6f      	ldr	r3, [pc, #444]	; (800f220 <__ieee754_pow+0x220>)
 800f064:	429d      	cmp	r5, r3
 800f066:	dc54      	bgt.n	800f112 <__ieee754_pow+0x112>
 800f068:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800f06c:	429d      	cmp	r5, r3
 800f06e:	f340 84a6 	ble.w	800f9be <__ieee754_pow+0x9be>
 800f072:	152b      	asrs	r3, r5, #20
 800f074:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f078:	2b14      	cmp	r3, #20
 800f07a:	dd0f      	ble.n	800f09c <__ieee754_pow+0x9c>
 800f07c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f080:	fa22 f103 	lsr.w	r1, r2, r3
 800f084:	fa01 f303 	lsl.w	r3, r1, r3
 800f088:	4293      	cmp	r3, r2
 800f08a:	f040 8498 	bne.w	800f9be <__ieee754_pow+0x9be>
 800f08e:	f001 0101 	and.w	r1, r1, #1
 800f092:	f1c1 0302 	rsb	r3, r1, #2
 800f096:	9300      	str	r3, [sp, #0]
 800f098:	b182      	cbz	r2, 800f0bc <__ieee754_pow+0xbc>
 800f09a:	e05e      	b.n	800f15a <__ieee754_pow+0x15a>
 800f09c:	2a00      	cmp	r2, #0
 800f09e:	d15a      	bne.n	800f156 <__ieee754_pow+0x156>
 800f0a0:	f1c3 0314 	rsb	r3, r3, #20
 800f0a4:	fa45 f103 	asr.w	r1, r5, r3
 800f0a8:	fa01 f303 	lsl.w	r3, r1, r3
 800f0ac:	42ab      	cmp	r3, r5
 800f0ae:	f040 8483 	bne.w	800f9b8 <__ieee754_pow+0x9b8>
 800f0b2:	f001 0101 	and.w	r1, r1, #1
 800f0b6:	f1c1 0302 	rsb	r3, r1, #2
 800f0ba:	9300      	str	r3, [sp, #0]
 800f0bc:	4b59      	ldr	r3, [pc, #356]	; (800f224 <__ieee754_pow+0x224>)
 800f0be:	429d      	cmp	r5, r3
 800f0c0:	d130      	bne.n	800f124 <__ieee754_pow+0x124>
 800f0c2:	2e00      	cmp	r6, #0
 800f0c4:	f280 8474 	bge.w	800f9b0 <__ieee754_pow+0x9b0>
 800f0c8:	463a      	mov	r2, r7
 800f0ca:	4643      	mov	r3, r8
 800f0cc:	2000      	movs	r0, #0
 800f0ce:	4955      	ldr	r1, [pc, #340]	; (800f224 <__ieee754_pow+0x224>)
 800f0d0:	f7f1 fb94 	bl	80007fc <__aeabi_ddiv>
 800f0d4:	e02f      	b.n	800f136 <__ieee754_pow+0x136>
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	9300      	str	r3, [sp, #0]
 800f0da:	2a00      	cmp	r2, #0
 800f0dc:	d13d      	bne.n	800f15a <__ieee754_pow+0x15a>
 800f0de:	4b4e      	ldr	r3, [pc, #312]	; (800f218 <__ieee754_pow+0x218>)
 800f0e0:	429d      	cmp	r5, r3
 800f0e2:	d1eb      	bne.n	800f0bc <__ieee754_pow+0xbc>
 800f0e4:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800f0e8:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f0ec:	ea53 030a 	orrs.w	r3, r3, sl
 800f0f0:	f000 8454 	beq.w	800f99c <__ieee754_pow+0x99c>
 800f0f4:	4b4c      	ldr	r3, [pc, #304]	; (800f228 <__ieee754_pow+0x228>)
 800f0f6:	429c      	cmp	r4, r3
 800f0f8:	dd0d      	ble.n	800f116 <__ieee754_pow+0x116>
 800f0fa:	2e00      	cmp	r6, #0
 800f0fc:	f280 8454 	bge.w	800f9a8 <__ieee754_pow+0x9a8>
 800f100:	f04f 0b00 	mov.w	fp, #0
 800f104:	f04f 0c00 	mov.w	ip, #0
 800f108:	4658      	mov	r0, fp
 800f10a:	4661      	mov	r1, ip
 800f10c:	b013      	add	sp, #76	; 0x4c
 800f10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f112:	2302      	movs	r3, #2
 800f114:	e7e0      	b.n	800f0d8 <__ieee754_pow+0xd8>
 800f116:	2e00      	cmp	r6, #0
 800f118:	daf2      	bge.n	800f100 <__ieee754_pow+0x100>
 800f11a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800f11e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800f122:	e7f1      	b.n	800f108 <__ieee754_pow+0x108>
 800f124:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800f128:	d108      	bne.n	800f13c <__ieee754_pow+0x13c>
 800f12a:	463a      	mov	r2, r7
 800f12c:	4643      	mov	r3, r8
 800f12e:	4638      	mov	r0, r7
 800f130:	4641      	mov	r1, r8
 800f132:	f7f1 fa39 	bl	80005a8 <__aeabi_dmul>
 800f136:	4683      	mov	fp, r0
 800f138:	468c      	mov	ip, r1
 800f13a:	e7e5      	b.n	800f108 <__ieee754_pow+0x108>
 800f13c:	4b3b      	ldr	r3, [pc, #236]	; (800f22c <__ieee754_pow+0x22c>)
 800f13e:	429e      	cmp	r6, r3
 800f140:	d10b      	bne.n	800f15a <__ieee754_pow+0x15a>
 800f142:	f1b9 0f00 	cmp.w	r9, #0
 800f146:	db08      	blt.n	800f15a <__ieee754_pow+0x15a>
 800f148:	4638      	mov	r0, r7
 800f14a:	4641      	mov	r1, r8
 800f14c:	b013      	add	sp, #76	; 0x4c
 800f14e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f152:	f000 bc6b 	b.w	800fa2c <__ieee754_sqrt>
 800f156:	2300      	movs	r3, #0
 800f158:	9300      	str	r3, [sp, #0]
 800f15a:	4638      	mov	r0, r7
 800f15c:	4641      	mov	r1, r8
 800f15e:	f000 fd11 	bl	800fb84 <fabs>
 800f162:	4683      	mov	fp, r0
 800f164:	468c      	mov	ip, r1
 800f166:	f1ba 0f00 	cmp.w	sl, #0
 800f16a:	d129      	bne.n	800f1c0 <__ieee754_pow+0x1c0>
 800f16c:	b124      	cbz	r4, 800f178 <__ieee754_pow+0x178>
 800f16e:	4b2d      	ldr	r3, [pc, #180]	; (800f224 <__ieee754_pow+0x224>)
 800f170:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800f174:	429a      	cmp	r2, r3
 800f176:	d123      	bne.n	800f1c0 <__ieee754_pow+0x1c0>
 800f178:	2e00      	cmp	r6, #0
 800f17a:	da07      	bge.n	800f18c <__ieee754_pow+0x18c>
 800f17c:	465a      	mov	r2, fp
 800f17e:	4663      	mov	r3, ip
 800f180:	2000      	movs	r0, #0
 800f182:	4928      	ldr	r1, [pc, #160]	; (800f224 <__ieee754_pow+0x224>)
 800f184:	f7f1 fb3a 	bl	80007fc <__aeabi_ddiv>
 800f188:	4683      	mov	fp, r0
 800f18a:	468c      	mov	ip, r1
 800f18c:	f1b9 0f00 	cmp.w	r9, #0
 800f190:	daba      	bge.n	800f108 <__ieee754_pow+0x108>
 800f192:	9b00      	ldr	r3, [sp, #0]
 800f194:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f198:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f19c:	4323      	orrs	r3, r4
 800f19e:	d108      	bne.n	800f1b2 <__ieee754_pow+0x1b2>
 800f1a0:	465a      	mov	r2, fp
 800f1a2:	4663      	mov	r3, ip
 800f1a4:	4658      	mov	r0, fp
 800f1a6:	4661      	mov	r1, ip
 800f1a8:	f7f1 f846 	bl	8000238 <__aeabi_dsub>
 800f1ac:	4602      	mov	r2, r0
 800f1ae:	460b      	mov	r3, r1
 800f1b0:	e78e      	b.n	800f0d0 <__ieee754_pow+0xd0>
 800f1b2:	9b00      	ldr	r3, [sp, #0]
 800f1b4:	2b01      	cmp	r3, #1
 800f1b6:	d1a7      	bne.n	800f108 <__ieee754_pow+0x108>
 800f1b8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800f1bc:	469c      	mov	ip, r3
 800f1be:	e7a3      	b.n	800f108 <__ieee754_pow+0x108>
 800f1c0:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800f1c4:	3b01      	subs	r3, #1
 800f1c6:	930c      	str	r3, [sp, #48]	; 0x30
 800f1c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f1ca:	9b00      	ldr	r3, [sp, #0]
 800f1cc:	4313      	orrs	r3, r2
 800f1ce:	d104      	bne.n	800f1da <__ieee754_pow+0x1da>
 800f1d0:	463a      	mov	r2, r7
 800f1d2:	4643      	mov	r3, r8
 800f1d4:	4638      	mov	r0, r7
 800f1d6:	4641      	mov	r1, r8
 800f1d8:	e7e6      	b.n	800f1a8 <__ieee754_pow+0x1a8>
 800f1da:	4b15      	ldr	r3, [pc, #84]	; (800f230 <__ieee754_pow+0x230>)
 800f1dc:	429d      	cmp	r5, r3
 800f1de:	f340 80f9 	ble.w	800f3d4 <__ieee754_pow+0x3d4>
 800f1e2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800f1e6:	429d      	cmp	r5, r3
 800f1e8:	4b0f      	ldr	r3, [pc, #60]	; (800f228 <__ieee754_pow+0x228>)
 800f1ea:	dd09      	ble.n	800f200 <__ieee754_pow+0x200>
 800f1ec:	429c      	cmp	r4, r3
 800f1ee:	dc0c      	bgt.n	800f20a <__ieee754_pow+0x20a>
 800f1f0:	2e00      	cmp	r6, #0
 800f1f2:	da85      	bge.n	800f100 <__ieee754_pow+0x100>
 800f1f4:	a306      	add	r3, pc, #24	; (adr r3, 800f210 <__ieee754_pow+0x210>)
 800f1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1fa:	4610      	mov	r0, r2
 800f1fc:	4619      	mov	r1, r3
 800f1fe:	e798      	b.n	800f132 <__ieee754_pow+0x132>
 800f200:	429c      	cmp	r4, r3
 800f202:	dbf5      	blt.n	800f1f0 <__ieee754_pow+0x1f0>
 800f204:	4b07      	ldr	r3, [pc, #28]	; (800f224 <__ieee754_pow+0x224>)
 800f206:	429c      	cmp	r4, r3
 800f208:	dd14      	ble.n	800f234 <__ieee754_pow+0x234>
 800f20a:	2e00      	cmp	r6, #0
 800f20c:	dcf2      	bgt.n	800f1f4 <__ieee754_pow+0x1f4>
 800f20e:	e777      	b.n	800f100 <__ieee754_pow+0x100>
 800f210:	8800759c 	.word	0x8800759c
 800f214:	7e37e43c 	.word	0x7e37e43c
 800f218:	7ff00000 	.word	0x7ff00000
 800f21c:	08010219 	.word	0x08010219
 800f220:	433fffff 	.word	0x433fffff
 800f224:	3ff00000 	.word	0x3ff00000
 800f228:	3fefffff 	.word	0x3fefffff
 800f22c:	3fe00000 	.word	0x3fe00000
 800f230:	41e00000 	.word	0x41e00000
 800f234:	4661      	mov	r1, ip
 800f236:	2200      	movs	r2, #0
 800f238:	4658      	mov	r0, fp
 800f23a:	4b61      	ldr	r3, [pc, #388]	; (800f3c0 <__ieee754_pow+0x3c0>)
 800f23c:	f7f0 fffc 	bl	8000238 <__aeabi_dsub>
 800f240:	a355      	add	r3, pc, #340	; (adr r3, 800f398 <__ieee754_pow+0x398>)
 800f242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f246:	4604      	mov	r4, r0
 800f248:	460d      	mov	r5, r1
 800f24a:	f7f1 f9ad 	bl	80005a8 <__aeabi_dmul>
 800f24e:	a354      	add	r3, pc, #336	; (adr r3, 800f3a0 <__ieee754_pow+0x3a0>)
 800f250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f254:	4606      	mov	r6, r0
 800f256:	460f      	mov	r7, r1
 800f258:	4620      	mov	r0, r4
 800f25a:	4629      	mov	r1, r5
 800f25c:	f7f1 f9a4 	bl	80005a8 <__aeabi_dmul>
 800f260:	2200      	movs	r2, #0
 800f262:	4682      	mov	sl, r0
 800f264:	468b      	mov	fp, r1
 800f266:	4620      	mov	r0, r4
 800f268:	4629      	mov	r1, r5
 800f26a:	4b56      	ldr	r3, [pc, #344]	; (800f3c4 <__ieee754_pow+0x3c4>)
 800f26c:	f7f1 f99c 	bl	80005a8 <__aeabi_dmul>
 800f270:	4602      	mov	r2, r0
 800f272:	460b      	mov	r3, r1
 800f274:	a14c      	add	r1, pc, #304	; (adr r1, 800f3a8 <__ieee754_pow+0x3a8>)
 800f276:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f27a:	f7f0 ffdd 	bl	8000238 <__aeabi_dsub>
 800f27e:	4622      	mov	r2, r4
 800f280:	462b      	mov	r3, r5
 800f282:	f7f1 f991 	bl	80005a8 <__aeabi_dmul>
 800f286:	4602      	mov	r2, r0
 800f288:	460b      	mov	r3, r1
 800f28a:	2000      	movs	r0, #0
 800f28c:	494e      	ldr	r1, [pc, #312]	; (800f3c8 <__ieee754_pow+0x3c8>)
 800f28e:	f7f0 ffd3 	bl	8000238 <__aeabi_dsub>
 800f292:	4622      	mov	r2, r4
 800f294:	462b      	mov	r3, r5
 800f296:	4680      	mov	r8, r0
 800f298:	4689      	mov	r9, r1
 800f29a:	4620      	mov	r0, r4
 800f29c:	4629      	mov	r1, r5
 800f29e:	f7f1 f983 	bl	80005a8 <__aeabi_dmul>
 800f2a2:	4602      	mov	r2, r0
 800f2a4:	460b      	mov	r3, r1
 800f2a6:	4640      	mov	r0, r8
 800f2a8:	4649      	mov	r1, r9
 800f2aa:	f7f1 f97d 	bl	80005a8 <__aeabi_dmul>
 800f2ae:	a340      	add	r3, pc, #256	; (adr r3, 800f3b0 <__ieee754_pow+0x3b0>)
 800f2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2b4:	f7f1 f978 	bl	80005a8 <__aeabi_dmul>
 800f2b8:	4602      	mov	r2, r0
 800f2ba:	460b      	mov	r3, r1
 800f2bc:	4650      	mov	r0, sl
 800f2be:	4659      	mov	r1, fp
 800f2c0:	f7f0 ffba 	bl	8000238 <__aeabi_dsub>
 800f2c4:	f04f 0a00 	mov.w	sl, #0
 800f2c8:	4602      	mov	r2, r0
 800f2ca:	460b      	mov	r3, r1
 800f2cc:	4604      	mov	r4, r0
 800f2ce:	460d      	mov	r5, r1
 800f2d0:	4630      	mov	r0, r6
 800f2d2:	4639      	mov	r1, r7
 800f2d4:	f7f0 ffb2 	bl	800023c <__adddf3>
 800f2d8:	4632      	mov	r2, r6
 800f2da:	463b      	mov	r3, r7
 800f2dc:	4650      	mov	r0, sl
 800f2de:	468b      	mov	fp, r1
 800f2e0:	f7f0 ffaa 	bl	8000238 <__aeabi_dsub>
 800f2e4:	4602      	mov	r2, r0
 800f2e6:	460b      	mov	r3, r1
 800f2e8:	4620      	mov	r0, r4
 800f2ea:	4629      	mov	r1, r5
 800f2ec:	f7f0 ffa4 	bl	8000238 <__aeabi_dsub>
 800f2f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f2f4:	9b00      	ldr	r3, [sp, #0]
 800f2f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f2f8:	3b01      	subs	r3, #1
 800f2fa:	4313      	orrs	r3, r2
 800f2fc:	f04f 0600 	mov.w	r6, #0
 800f300:	f04f 0200 	mov.w	r2, #0
 800f304:	bf0c      	ite	eq
 800f306:	4b31      	ldreq	r3, [pc, #196]	; (800f3cc <__ieee754_pow+0x3cc>)
 800f308:	4b2d      	ldrne	r3, [pc, #180]	; (800f3c0 <__ieee754_pow+0x3c0>)
 800f30a:	4604      	mov	r4, r0
 800f30c:	460d      	mov	r5, r1
 800f30e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f312:	e9cd 2300 	strd	r2, r3, [sp]
 800f316:	4632      	mov	r2, r6
 800f318:	463b      	mov	r3, r7
 800f31a:	f7f0 ff8d 	bl	8000238 <__aeabi_dsub>
 800f31e:	4652      	mov	r2, sl
 800f320:	465b      	mov	r3, fp
 800f322:	f7f1 f941 	bl	80005a8 <__aeabi_dmul>
 800f326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f32a:	4680      	mov	r8, r0
 800f32c:	4689      	mov	r9, r1
 800f32e:	4620      	mov	r0, r4
 800f330:	4629      	mov	r1, r5
 800f332:	f7f1 f939 	bl	80005a8 <__aeabi_dmul>
 800f336:	4602      	mov	r2, r0
 800f338:	460b      	mov	r3, r1
 800f33a:	4640      	mov	r0, r8
 800f33c:	4649      	mov	r1, r9
 800f33e:	f7f0 ff7d 	bl	800023c <__adddf3>
 800f342:	4632      	mov	r2, r6
 800f344:	463b      	mov	r3, r7
 800f346:	4680      	mov	r8, r0
 800f348:	4689      	mov	r9, r1
 800f34a:	4650      	mov	r0, sl
 800f34c:	4659      	mov	r1, fp
 800f34e:	f7f1 f92b 	bl	80005a8 <__aeabi_dmul>
 800f352:	4604      	mov	r4, r0
 800f354:	460d      	mov	r5, r1
 800f356:	460b      	mov	r3, r1
 800f358:	4602      	mov	r2, r0
 800f35a:	4649      	mov	r1, r9
 800f35c:	4640      	mov	r0, r8
 800f35e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800f362:	f7f0 ff6b 	bl	800023c <__adddf3>
 800f366:	4b1a      	ldr	r3, [pc, #104]	; (800f3d0 <__ieee754_pow+0x3d0>)
 800f368:	4682      	mov	sl, r0
 800f36a:	4299      	cmp	r1, r3
 800f36c:	460f      	mov	r7, r1
 800f36e:	460e      	mov	r6, r1
 800f370:	f340 82ed 	ble.w	800f94e <__ieee754_pow+0x94e>
 800f374:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800f378:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800f37c:	4303      	orrs	r3, r0
 800f37e:	f000 81e7 	beq.w	800f750 <__ieee754_pow+0x750>
 800f382:	a30d      	add	r3, pc, #52	; (adr r3, 800f3b8 <__ieee754_pow+0x3b8>)
 800f384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f388:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f38c:	f7f1 f90c 	bl	80005a8 <__aeabi_dmul>
 800f390:	a309      	add	r3, pc, #36	; (adr r3, 800f3b8 <__ieee754_pow+0x3b8>)
 800f392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f396:	e6cc      	b.n	800f132 <__ieee754_pow+0x132>
 800f398:	60000000 	.word	0x60000000
 800f39c:	3ff71547 	.word	0x3ff71547
 800f3a0:	f85ddf44 	.word	0xf85ddf44
 800f3a4:	3e54ae0b 	.word	0x3e54ae0b
 800f3a8:	55555555 	.word	0x55555555
 800f3ac:	3fd55555 	.word	0x3fd55555
 800f3b0:	652b82fe 	.word	0x652b82fe
 800f3b4:	3ff71547 	.word	0x3ff71547
 800f3b8:	8800759c 	.word	0x8800759c
 800f3bc:	7e37e43c 	.word	0x7e37e43c
 800f3c0:	3ff00000 	.word	0x3ff00000
 800f3c4:	3fd00000 	.word	0x3fd00000
 800f3c8:	3fe00000 	.word	0x3fe00000
 800f3cc:	bff00000 	.word	0xbff00000
 800f3d0:	408fffff 	.word	0x408fffff
 800f3d4:	4bd4      	ldr	r3, [pc, #848]	; (800f728 <__ieee754_pow+0x728>)
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	ea09 0303 	and.w	r3, r9, r3
 800f3dc:	b943      	cbnz	r3, 800f3f0 <__ieee754_pow+0x3f0>
 800f3de:	4658      	mov	r0, fp
 800f3e0:	4661      	mov	r1, ip
 800f3e2:	4bd2      	ldr	r3, [pc, #840]	; (800f72c <__ieee754_pow+0x72c>)
 800f3e4:	f7f1 f8e0 	bl	80005a8 <__aeabi_dmul>
 800f3e8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800f3ec:	4683      	mov	fp, r0
 800f3ee:	460c      	mov	r4, r1
 800f3f0:	1523      	asrs	r3, r4, #20
 800f3f2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f3f6:	4413      	add	r3, r2
 800f3f8:	930b      	str	r3, [sp, #44]	; 0x2c
 800f3fa:	4bcd      	ldr	r3, [pc, #820]	; (800f730 <__ieee754_pow+0x730>)
 800f3fc:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f400:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800f404:	429c      	cmp	r4, r3
 800f406:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f40a:	dd08      	ble.n	800f41e <__ieee754_pow+0x41e>
 800f40c:	4bc9      	ldr	r3, [pc, #804]	; (800f734 <__ieee754_pow+0x734>)
 800f40e:	429c      	cmp	r4, r3
 800f410:	f340 819c 	ble.w	800f74c <__ieee754_pow+0x74c>
 800f414:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f416:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800f41a:	3301      	adds	r3, #1
 800f41c:	930b      	str	r3, [sp, #44]	; 0x2c
 800f41e:	2600      	movs	r6, #0
 800f420:	00f3      	lsls	r3, r6, #3
 800f422:	930d      	str	r3, [sp, #52]	; 0x34
 800f424:	4bc4      	ldr	r3, [pc, #784]	; (800f738 <__ieee754_pow+0x738>)
 800f426:	4658      	mov	r0, fp
 800f428:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f42c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f430:	4629      	mov	r1, r5
 800f432:	461a      	mov	r2, r3
 800f434:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800f438:	4623      	mov	r3, r4
 800f43a:	f7f0 fefd 	bl	8000238 <__aeabi_dsub>
 800f43e:	46da      	mov	sl, fp
 800f440:	462b      	mov	r3, r5
 800f442:	4652      	mov	r2, sl
 800f444:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800f448:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f44c:	f7f0 fef6 	bl	800023c <__adddf3>
 800f450:	4602      	mov	r2, r0
 800f452:	460b      	mov	r3, r1
 800f454:	2000      	movs	r0, #0
 800f456:	49b9      	ldr	r1, [pc, #740]	; (800f73c <__ieee754_pow+0x73c>)
 800f458:	f7f1 f9d0 	bl	80007fc <__aeabi_ddiv>
 800f45c:	4602      	mov	r2, r0
 800f45e:	460b      	mov	r3, r1
 800f460:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f464:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800f468:	f7f1 f89e 	bl	80005a8 <__aeabi_dmul>
 800f46c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f470:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800f474:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f478:	2300      	movs	r3, #0
 800f47a:	2200      	movs	r2, #0
 800f47c:	46ab      	mov	fp, r5
 800f47e:	106d      	asrs	r5, r5, #1
 800f480:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800f484:	9304      	str	r3, [sp, #16]
 800f486:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800f48a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800f48e:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800f492:	4640      	mov	r0, r8
 800f494:	4649      	mov	r1, r9
 800f496:	4614      	mov	r4, r2
 800f498:	461d      	mov	r5, r3
 800f49a:	f7f1 f885 	bl	80005a8 <__aeabi_dmul>
 800f49e:	4602      	mov	r2, r0
 800f4a0:	460b      	mov	r3, r1
 800f4a2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800f4a6:	f7f0 fec7 	bl	8000238 <__aeabi_dsub>
 800f4aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f4ae:	4606      	mov	r6, r0
 800f4b0:	460f      	mov	r7, r1
 800f4b2:	4620      	mov	r0, r4
 800f4b4:	4629      	mov	r1, r5
 800f4b6:	f7f0 febf 	bl	8000238 <__aeabi_dsub>
 800f4ba:	4602      	mov	r2, r0
 800f4bc:	460b      	mov	r3, r1
 800f4be:	4650      	mov	r0, sl
 800f4c0:	4659      	mov	r1, fp
 800f4c2:	f7f0 feb9 	bl	8000238 <__aeabi_dsub>
 800f4c6:	4642      	mov	r2, r8
 800f4c8:	464b      	mov	r3, r9
 800f4ca:	f7f1 f86d 	bl	80005a8 <__aeabi_dmul>
 800f4ce:	4602      	mov	r2, r0
 800f4d0:	460b      	mov	r3, r1
 800f4d2:	4630      	mov	r0, r6
 800f4d4:	4639      	mov	r1, r7
 800f4d6:	f7f0 feaf 	bl	8000238 <__aeabi_dsub>
 800f4da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f4de:	f7f1 f863 	bl	80005a8 <__aeabi_dmul>
 800f4e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f4e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f4ea:	4610      	mov	r0, r2
 800f4ec:	4619      	mov	r1, r3
 800f4ee:	f7f1 f85b 	bl	80005a8 <__aeabi_dmul>
 800f4f2:	a37b      	add	r3, pc, #492	; (adr r3, 800f6e0 <__ieee754_pow+0x6e0>)
 800f4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4f8:	4604      	mov	r4, r0
 800f4fa:	460d      	mov	r5, r1
 800f4fc:	f7f1 f854 	bl	80005a8 <__aeabi_dmul>
 800f500:	a379      	add	r3, pc, #484	; (adr r3, 800f6e8 <__ieee754_pow+0x6e8>)
 800f502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f506:	f7f0 fe99 	bl	800023c <__adddf3>
 800f50a:	4622      	mov	r2, r4
 800f50c:	462b      	mov	r3, r5
 800f50e:	f7f1 f84b 	bl	80005a8 <__aeabi_dmul>
 800f512:	a377      	add	r3, pc, #476	; (adr r3, 800f6f0 <__ieee754_pow+0x6f0>)
 800f514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f518:	f7f0 fe90 	bl	800023c <__adddf3>
 800f51c:	4622      	mov	r2, r4
 800f51e:	462b      	mov	r3, r5
 800f520:	f7f1 f842 	bl	80005a8 <__aeabi_dmul>
 800f524:	a374      	add	r3, pc, #464	; (adr r3, 800f6f8 <__ieee754_pow+0x6f8>)
 800f526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f52a:	f7f0 fe87 	bl	800023c <__adddf3>
 800f52e:	4622      	mov	r2, r4
 800f530:	462b      	mov	r3, r5
 800f532:	f7f1 f839 	bl	80005a8 <__aeabi_dmul>
 800f536:	a372      	add	r3, pc, #456	; (adr r3, 800f700 <__ieee754_pow+0x700>)
 800f538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f53c:	f7f0 fe7e 	bl	800023c <__adddf3>
 800f540:	4622      	mov	r2, r4
 800f542:	462b      	mov	r3, r5
 800f544:	f7f1 f830 	bl	80005a8 <__aeabi_dmul>
 800f548:	a36f      	add	r3, pc, #444	; (adr r3, 800f708 <__ieee754_pow+0x708>)
 800f54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f54e:	f7f0 fe75 	bl	800023c <__adddf3>
 800f552:	4622      	mov	r2, r4
 800f554:	4606      	mov	r6, r0
 800f556:	460f      	mov	r7, r1
 800f558:	462b      	mov	r3, r5
 800f55a:	4620      	mov	r0, r4
 800f55c:	4629      	mov	r1, r5
 800f55e:	f7f1 f823 	bl	80005a8 <__aeabi_dmul>
 800f562:	4602      	mov	r2, r0
 800f564:	460b      	mov	r3, r1
 800f566:	4630      	mov	r0, r6
 800f568:	4639      	mov	r1, r7
 800f56a:	f7f1 f81d 	bl	80005a8 <__aeabi_dmul>
 800f56e:	4604      	mov	r4, r0
 800f570:	460d      	mov	r5, r1
 800f572:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f576:	4642      	mov	r2, r8
 800f578:	464b      	mov	r3, r9
 800f57a:	f7f0 fe5f 	bl	800023c <__adddf3>
 800f57e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f582:	f7f1 f811 	bl	80005a8 <__aeabi_dmul>
 800f586:	4622      	mov	r2, r4
 800f588:	462b      	mov	r3, r5
 800f58a:	f7f0 fe57 	bl	800023c <__adddf3>
 800f58e:	4642      	mov	r2, r8
 800f590:	4606      	mov	r6, r0
 800f592:	460f      	mov	r7, r1
 800f594:	464b      	mov	r3, r9
 800f596:	4640      	mov	r0, r8
 800f598:	4649      	mov	r1, r9
 800f59a:	f7f1 f805 	bl	80005a8 <__aeabi_dmul>
 800f59e:	2200      	movs	r2, #0
 800f5a0:	4b67      	ldr	r3, [pc, #412]	; (800f740 <__ieee754_pow+0x740>)
 800f5a2:	4682      	mov	sl, r0
 800f5a4:	468b      	mov	fp, r1
 800f5a6:	f7f0 fe49 	bl	800023c <__adddf3>
 800f5aa:	4632      	mov	r2, r6
 800f5ac:	463b      	mov	r3, r7
 800f5ae:	f7f0 fe45 	bl	800023c <__adddf3>
 800f5b2:	9c04      	ldr	r4, [sp, #16]
 800f5b4:	460d      	mov	r5, r1
 800f5b6:	4622      	mov	r2, r4
 800f5b8:	460b      	mov	r3, r1
 800f5ba:	4640      	mov	r0, r8
 800f5bc:	4649      	mov	r1, r9
 800f5be:	f7f0 fff3 	bl	80005a8 <__aeabi_dmul>
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	4680      	mov	r8, r0
 800f5c6:	4689      	mov	r9, r1
 800f5c8:	4620      	mov	r0, r4
 800f5ca:	4629      	mov	r1, r5
 800f5cc:	4b5c      	ldr	r3, [pc, #368]	; (800f740 <__ieee754_pow+0x740>)
 800f5ce:	f7f0 fe33 	bl	8000238 <__aeabi_dsub>
 800f5d2:	4652      	mov	r2, sl
 800f5d4:	465b      	mov	r3, fp
 800f5d6:	f7f0 fe2f 	bl	8000238 <__aeabi_dsub>
 800f5da:	4602      	mov	r2, r0
 800f5dc:	460b      	mov	r3, r1
 800f5de:	4630      	mov	r0, r6
 800f5e0:	4639      	mov	r1, r7
 800f5e2:	f7f0 fe29 	bl	8000238 <__aeabi_dsub>
 800f5e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f5ea:	f7f0 ffdd 	bl	80005a8 <__aeabi_dmul>
 800f5ee:	4622      	mov	r2, r4
 800f5f0:	4606      	mov	r6, r0
 800f5f2:	460f      	mov	r7, r1
 800f5f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f5f8:	462b      	mov	r3, r5
 800f5fa:	f7f0 ffd5 	bl	80005a8 <__aeabi_dmul>
 800f5fe:	4602      	mov	r2, r0
 800f600:	460b      	mov	r3, r1
 800f602:	4630      	mov	r0, r6
 800f604:	4639      	mov	r1, r7
 800f606:	f7f0 fe19 	bl	800023c <__adddf3>
 800f60a:	4606      	mov	r6, r0
 800f60c:	460f      	mov	r7, r1
 800f60e:	4602      	mov	r2, r0
 800f610:	460b      	mov	r3, r1
 800f612:	4640      	mov	r0, r8
 800f614:	4649      	mov	r1, r9
 800f616:	f7f0 fe11 	bl	800023c <__adddf3>
 800f61a:	a33d      	add	r3, pc, #244	; (adr r3, 800f710 <__ieee754_pow+0x710>)
 800f61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f620:	9c04      	ldr	r4, [sp, #16]
 800f622:	460d      	mov	r5, r1
 800f624:	4620      	mov	r0, r4
 800f626:	f7f0 ffbf 	bl	80005a8 <__aeabi_dmul>
 800f62a:	4642      	mov	r2, r8
 800f62c:	464b      	mov	r3, r9
 800f62e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f632:	4620      	mov	r0, r4
 800f634:	4629      	mov	r1, r5
 800f636:	f7f0 fdff 	bl	8000238 <__aeabi_dsub>
 800f63a:	4602      	mov	r2, r0
 800f63c:	460b      	mov	r3, r1
 800f63e:	4630      	mov	r0, r6
 800f640:	4639      	mov	r1, r7
 800f642:	f7f0 fdf9 	bl	8000238 <__aeabi_dsub>
 800f646:	a334      	add	r3, pc, #208	; (adr r3, 800f718 <__ieee754_pow+0x718>)
 800f648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f64c:	f7f0 ffac 	bl	80005a8 <__aeabi_dmul>
 800f650:	a333      	add	r3, pc, #204	; (adr r3, 800f720 <__ieee754_pow+0x720>)
 800f652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f656:	4606      	mov	r6, r0
 800f658:	460f      	mov	r7, r1
 800f65a:	4620      	mov	r0, r4
 800f65c:	4629      	mov	r1, r5
 800f65e:	f7f0 ffa3 	bl	80005a8 <__aeabi_dmul>
 800f662:	4602      	mov	r2, r0
 800f664:	460b      	mov	r3, r1
 800f666:	4630      	mov	r0, r6
 800f668:	4639      	mov	r1, r7
 800f66a:	f7f0 fde7 	bl	800023c <__adddf3>
 800f66e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f670:	4b34      	ldr	r3, [pc, #208]	; (800f744 <__ieee754_pow+0x744>)
 800f672:	4413      	add	r3, r2
 800f674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f678:	f7f0 fde0 	bl	800023c <__adddf3>
 800f67c:	4680      	mov	r8, r0
 800f67e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f680:	4689      	mov	r9, r1
 800f682:	f7f0 ff27 	bl	80004d4 <__aeabi_i2d>
 800f686:	4604      	mov	r4, r0
 800f688:	460d      	mov	r5, r1
 800f68a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f68c:	4b2e      	ldr	r3, [pc, #184]	; (800f748 <__ieee754_pow+0x748>)
 800f68e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f692:	4413      	add	r3, r2
 800f694:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f698:	4642      	mov	r2, r8
 800f69a:	464b      	mov	r3, r9
 800f69c:	f7f0 fdce 	bl	800023c <__adddf3>
 800f6a0:	4632      	mov	r2, r6
 800f6a2:	463b      	mov	r3, r7
 800f6a4:	f7f0 fdca 	bl	800023c <__adddf3>
 800f6a8:	4622      	mov	r2, r4
 800f6aa:	462b      	mov	r3, r5
 800f6ac:	f7f0 fdc6 	bl	800023c <__adddf3>
 800f6b0:	f8dd a010 	ldr.w	sl, [sp, #16]
 800f6b4:	4622      	mov	r2, r4
 800f6b6:	462b      	mov	r3, r5
 800f6b8:	4650      	mov	r0, sl
 800f6ba:	468b      	mov	fp, r1
 800f6bc:	f7f0 fdbc 	bl	8000238 <__aeabi_dsub>
 800f6c0:	4632      	mov	r2, r6
 800f6c2:	463b      	mov	r3, r7
 800f6c4:	f7f0 fdb8 	bl	8000238 <__aeabi_dsub>
 800f6c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f6cc:	f7f0 fdb4 	bl	8000238 <__aeabi_dsub>
 800f6d0:	4602      	mov	r2, r0
 800f6d2:	460b      	mov	r3, r1
 800f6d4:	4640      	mov	r0, r8
 800f6d6:	4649      	mov	r1, r9
 800f6d8:	e608      	b.n	800f2ec <__ieee754_pow+0x2ec>
 800f6da:	bf00      	nop
 800f6dc:	f3af 8000 	nop.w
 800f6e0:	4a454eef 	.word	0x4a454eef
 800f6e4:	3fca7e28 	.word	0x3fca7e28
 800f6e8:	93c9db65 	.word	0x93c9db65
 800f6ec:	3fcd864a 	.word	0x3fcd864a
 800f6f0:	a91d4101 	.word	0xa91d4101
 800f6f4:	3fd17460 	.word	0x3fd17460
 800f6f8:	518f264d 	.word	0x518f264d
 800f6fc:	3fd55555 	.word	0x3fd55555
 800f700:	db6fabff 	.word	0xdb6fabff
 800f704:	3fdb6db6 	.word	0x3fdb6db6
 800f708:	33333303 	.word	0x33333303
 800f70c:	3fe33333 	.word	0x3fe33333
 800f710:	e0000000 	.word	0xe0000000
 800f714:	3feec709 	.word	0x3feec709
 800f718:	dc3a03fd 	.word	0xdc3a03fd
 800f71c:	3feec709 	.word	0x3feec709
 800f720:	145b01f5 	.word	0x145b01f5
 800f724:	be3e2fe0 	.word	0xbe3e2fe0
 800f728:	7ff00000 	.word	0x7ff00000
 800f72c:	43400000 	.word	0x43400000
 800f730:	0003988e 	.word	0x0003988e
 800f734:	000bb679 	.word	0x000bb679
 800f738:	08010248 	.word	0x08010248
 800f73c:	3ff00000 	.word	0x3ff00000
 800f740:	40080000 	.word	0x40080000
 800f744:	08010268 	.word	0x08010268
 800f748:	08010258 	.word	0x08010258
 800f74c:	2601      	movs	r6, #1
 800f74e:	e667      	b.n	800f420 <__ieee754_pow+0x420>
 800f750:	a39d      	add	r3, pc, #628	; (adr r3, 800f9c8 <__ieee754_pow+0x9c8>)
 800f752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f756:	4640      	mov	r0, r8
 800f758:	4649      	mov	r1, r9
 800f75a:	f7f0 fd6f 	bl	800023c <__adddf3>
 800f75e:	4622      	mov	r2, r4
 800f760:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f764:	462b      	mov	r3, r5
 800f766:	4650      	mov	r0, sl
 800f768:	4639      	mov	r1, r7
 800f76a:	f7f0 fd65 	bl	8000238 <__aeabi_dsub>
 800f76e:	4602      	mov	r2, r0
 800f770:	460b      	mov	r3, r1
 800f772:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f776:	f7f1 f9a7 	bl	8000ac8 <__aeabi_dcmpgt>
 800f77a:	2800      	cmp	r0, #0
 800f77c:	f47f ae01 	bne.w	800f382 <__ieee754_pow+0x382>
 800f780:	4aa5      	ldr	r2, [pc, #660]	; (800fa18 <__ieee754_pow+0xa18>)
 800f782:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800f786:	4293      	cmp	r3, r2
 800f788:	f340 8103 	ble.w	800f992 <__ieee754_pow+0x992>
 800f78c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800f790:	2000      	movs	r0, #0
 800f792:	151b      	asrs	r3, r3, #20
 800f794:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800f798:	fa4a f303 	asr.w	r3, sl, r3
 800f79c:	4433      	add	r3, r6
 800f79e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f7a2:	4f9e      	ldr	r7, [pc, #632]	; (800fa1c <__ieee754_pow+0xa1c>)
 800f7a4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800f7a8:	4117      	asrs	r7, r2
 800f7aa:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800f7ae:	ea23 0107 	bic.w	r1, r3, r7
 800f7b2:	f1c2 0214 	rsb	r2, r2, #20
 800f7b6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800f7ba:	460b      	mov	r3, r1
 800f7bc:	fa4a fa02 	asr.w	sl, sl, r2
 800f7c0:	2e00      	cmp	r6, #0
 800f7c2:	4602      	mov	r2, r0
 800f7c4:	4629      	mov	r1, r5
 800f7c6:	4620      	mov	r0, r4
 800f7c8:	bfb8      	it	lt
 800f7ca:	f1ca 0a00 	rsblt	sl, sl, #0
 800f7ce:	f7f0 fd33 	bl	8000238 <__aeabi_dsub>
 800f7d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f7d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f7da:	2400      	movs	r4, #0
 800f7dc:	4642      	mov	r2, r8
 800f7de:	464b      	mov	r3, r9
 800f7e0:	f7f0 fd2c 	bl	800023c <__adddf3>
 800f7e4:	a37a      	add	r3, pc, #488	; (adr r3, 800f9d0 <__ieee754_pow+0x9d0>)
 800f7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ea:	4620      	mov	r0, r4
 800f7ec:	460d      	mov	r5, r1
 800f7ee:	f7f0 fedb 	bl	80005a8 <__aeabi_dmul>
 800f7f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f7f6:	4606      	mov	r6, r0
 800f7f8:	460f      	mov	r7, r1
 800f7fa:	4620      	mov	r0, r4
 800f7fc:	4629      	mov	r1, r5
 800f7fe:	f7f0 fd1b 	bl	8000238 <__aeabi_dsub>
 800f802:	4602      	mov	r2, r0
 800f804:	460b      	mov	r3, r1
 800f806:	4640      	mov	r0, r8
 800f808:	4649      	mov	r1, r9
 800f80a:	f7f0 fd15 	bl	8000238 <__aeabi_dsub>
 800f80e:	a372      	add	r3, pc, #456	; (adr r3, 800f9d8 <__ieee754_pow+0x9d8>)
 800f810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f814:	f7f0 fec8 	bl	80005a8 <__aeabi_dmul>
 800f818:	a371      	add	r3, pc, #452	; (adr r3, 800f9e0 <__ieee754_pow+0x9e0>)
 800f81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f81e:	4680      	mov	r8, r0
 800f820:	4689      	mov	r9, r1
 800f822:	4620      	mov	r0, r4
 800f824:	4629      	mov	r1, r5
 800f826:	f7f0 febf 	bl	80005a8 <__aeabi_dmul>
 800f82a:	4602      	mov	r2, r0
 800f82c:	460b      	mov	r3, r1
 800f82e:	4640      	mov	r0, r8
 800f830:	4649      	mov	r1, r9
 800f832:	f7f0 fd03 	bl	800023c <__adddf3>
 800f836:	4604      	mov	r4, r0
 800f838:	460d      	mov	r5, r1
 800f83a:	4602      	mov	r2, r0
 800f83c:	460b      	mov	r3, r1
 800f83e:	4630      	mov	r0, r6
 800f840:	4639      	mov	r1, r7
 800f842:	f7f0 fcfb 	bl	800023c <__adddf3>
 800f846:	4632      	mov	r2, r6
 800f848:	463b      	mov	r3, r7
 800f84a:	4680      	mov	r8, r0
 800f84c:	4689      	mov	r9, r1
 800f84e:	f7f0 fcf3 	bl	8000238 <__aeabi_dsub>
 800f852:	4602      	mov	r2, r0
 800f854:	460b      	mov	r3, r1
 800f856:	4620      	mov	r0, r4
 800f858:	4629      	mov	r1, r5
 800f85a:	f7f0 fced 	bl	8000238 <__aeabi_dsub>
 800f85e:	4642      	mov	r2, r8
 800f860:	4606      	mov	r6, r0
 800f862:	460f      	mov	r7, r1
 800f864:	464b      	mov	r3, r9
 800f866:	4640      	mov	r0, r8
 800f868:	4649      	mov	r1, r9
 800f86a:	f7f0 fe9d 	bl	80005a8 <__aeabi_dmul>
 800f86e:	a35e      	add	r3, pc, #376	; (adr r3, 800f9e8 <__ieee754_pow+0x9e8>)
 800f870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f874:	4604      	mov	r4, r0
 800f876:	460d      	mov	r5, r1
 800f878:	f7f0 fe96 	bl	80005a8 <__aeabi_dmul>
 800f87c:	a35c      	add	r3, pc, #368	; (adr r3, 800f9f0 <__ieee754_pow+0x9f0>)
 800f87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f882:	f7f0 fcd9 	bl	8000238 <__aeabi_dsub>
 800f886:	4622      	mov	r2, r4
 800f888:	462b      	mov	r3, r5
 800f88a:	f7f0 fe8d 	bl	80005a8 <__aeabi_dmul>
 800f88e:	a35a      	add	r3, pc, #360	; (adr r3, 800f9f8 <__ieee754_pow+0x9f8>)
 800f890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f894:	f7f0 fcd2 	bl	800023c <__adddf3>
 800f898:	4622      	mov	r2, r4
 800f89a:	462b      	mov	r3, r5
 800f89c:	f7f0 fe84 	bl	80005a8 <__aeabi_dmul>
 800f8a0:	a357      	add	r3, pc, #348	; (adr r3, 800fa00 <__ieee754_pow+0xa00>)
 800f8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8a6:	f7f0 fcc7 	bl	8000238 <__aeabi_dsub>
 800f8aa:	4622      	mov	r2, r4
 800f8ac:	462b      	mov	r3, r5
 800f8ae:	f7f0 fe7b 	bl	80005a8 <__aeabi_dmul>
 800f8b2:	a355      	add	r3, pc, #340	; (adr r3, 800fa08 <__ieee754_pow+0xa08>)
 800f8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8b8:	f7f0 fcc0 	bl	800023c <__adddf3>
 800f8bc:	4622      	mov	r2, r4
 800f8be:	462b      	mov	r3, r5
 800f8c0:	f7f0 fe72 	bl	80005a8 <__aeabi_dmul>
 800f8c4:	4602      	mov	r2, r0
 800f8c6:	460b      	mov	r3, r1
 800f8c8:	4640      	mov	r0, r8
 800f8ca:	4649      	mov	r1, r9
 800f8cc:	f7f0 fcb4 	bl	8000238 <__aeabi_dsub>
 800f8d0:	4604      	mov	r4, r0
 800f8d2:	460d      	mov	r5, r1
 800f8d4:	4602      	mov	r2, r0
 800f8d6:	460b      	mov	r3, r1
 800f8d8:	4640      	mov	r0, r8
 800f8da:	4649      	mov	r1, r9
 800f8dc:	f7f0 fe64 	bl	80005a8 <__aeabi_dmul>
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f8e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f8ea:	4620      	mov	r0, r4
 800f8ec:	4629      	mov	r1, r5
 800f8ee:	f7f0 fca3 	bl	8000238 <__aeabi_dsub>
 800f8f2:	4602      	mov	r2, r0
 800f8f4:	460b      	mov	r3, r1
 800f8f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f8fa:	f7f0 ff7f 	bl	80007fc <__aeabi_ddiv>
 800f8fe:	4632      	mov	r2, r6
 800f900:	4604      	mov	r4, r0
 800f902:	460d      	mov	r5, r1
 800f904:	463b      	mov	r3, r7
 800f906:	4640      	mov	r0, r8
 800f908:	4649      	mov	r1, r9
 800f90a:	f7f0 fe4d 	bl	80005a8 <__aeabi_dmul>
 800f90e:	4632      	mov	r2, r6
 800f910:	463b      	mov	r3, r7
 800f912:	f7f0 fc93 	bl	800023c <__adddf3>
 800f916:	4602      	mov	r2, r0
 800f918:	460b      	mov	r3, r1
 800f91a:	4620      	mov	r0, r4
 800f91c:	4629      	mov	r1, r5
 800f91e:	f7f0 fc8b 	bl	8000238 <__aeabi_dsub>
 800f922:	4642      	mov	r2, r8
 800f924:	464b      	mov	r3, r9
 800f926:	f7f0 fc87 	bl	8000238 <__aeabi_dsub>
 800f92a:	4602      	mov	r2, r0
 800f92c:	460b      	mov	r3, r1
 800f92e:	2000      	movs	r0, #0
 800f930:	493b      	ldr	r1, [pc, #236]	; (800fa20 <__ieee754_pow+0xa20>)
 800f932:	f7f0 fc81 	bl	8000238 <__aeabi_dsub>
 800f936:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800f93a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800f93e:	da2b      	bge.n	800f998 <__ieee754_pow+0x998>
 800f940:	4652      	mov	r2, sl
 800f942:	f000 f9b9 	bl	800fcb8 <scalbn>
 800f946:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f94a:	f7ff bbf2 	b.w	800f132 <__ieee754_pow+0x132>
 800f94e:	4b35      	ldr	r3, [pc, #212]	; (800fa24 <__ieee754_pow+0xa24>)
 800f950:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800f954:	429f      	cmp	r7, r3
 800f956:	f77f af13 	ble.w	800f780 <__ieee754_pow+0x780>
 800f95a:	4b33      	ldr	r3, [pc, #204]	; (800fa28 <__ieee754_pow+0xa28>)
 800f95c:	440b      	add	r3, r1
 800f95e:	4303      	orrs	r3, r0
 800f960:	d00b      	beq.n	800f97a <__ieee754_pow+0x97a>
 800f962:	a32b      	add	r3, pc, #172	; (adr r3, 800fa10 <__ieee754_pow+0xa10>)
 800f964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f968:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f96c:	f7f0 fe1c 	bl	80005a8 <__aeabi_dmul>
 800f970:	a327      	add	r3, pc, #156	; (adr r3, 800fa10 <__ieee754_pow+0xa10>)
 800f972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f976:	f7ff bbdc 	b.w	800f132 <__ieee754_pow+0x132>
 800f97a:	4622      	mov	r2, r4
 800f97c:	462b      	mov	r3, r5
 800f97e:	f7f0 fc5b 	bl	8000238 <__aeabi_dsub>
 800f982:	4642      	mov	r2, r8
 800f984:	464b      	mov	r3, r9
 800f986:	f7f1 f895 	bl	8000ab4 <__aeabi_dcmpge>
 800f98a:	2800      	cmp	r0, #0
 800f98c:	f43f aef8 	beq.w	800f780 <__ieee754_pow+0x780>
 800f990:	e7e7      	b.n	800f962 <__ieee754_pow+0x962>
 800f992:	f04f 0a00 	mov.w	sl, #0
 800f996:	e71e      	b.n	800f7d6 <__ieee754_pow+0x7d6>
 800f998:	4621      	mov	r1, r4
 800f99a:	e7d4      	b.n	800f946 <__ieee754_pow+0x946>
 800f99c:	f04f 0b00 	mov.w	fp, #0
 800f9a0:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800fa20 <__ieee754_pow+0xa20>
 800f9a4:	f7ff bbb0 	b.w	800f108 <__ieee754_pow+0x108>
 800f9a8:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800f9ac:	f7ff bbac 	b.w	800f108 <__ieee754_pow+0x108>
 800f9b0:	4638      	mov	r0, r7
 800f9b2:	4641      	mov	r1, r8
 800f9b4:	f7ff bbbf 	b.w	800f136 <__ieee754_pow+0x136>
 800f9b8:	9200      	str	r2, [sp, #0]
 800f9ba:	f7ff bb7f 	b.w	800f0bc <__ieee754_pow+0xbc>
 800f9be:	2300      	movs	r3, #0
 800f9c0:	f7ff bb69 	b.w	800f096 <__ieee754_pow+0x96>
 800f9c4:	f3af 8000 	nop.w
 800f9c8:	652b82fe 	.word	0x652b82fe
 800f9cc:	3c971547 	.word	0x3c971547
 800f9d0:	00000000 	.word	0x00000000
 800f9d4:	3fe62e43 	.word	0x3fe62e43
 800f9d8:	fefa39ef 	.word	0xfefa39ef
 800f9dc:	3fe62e42 	.word	0x3fe62e42
 800f9e0:	0ca86c39 	.word	0x0ca86c39
 800f9e4:	be205c61 	.word	0xbe205c61
 800f9e8:	72bea4d0 	.word	0x72bea4d0
 800f9ec:	3e663769 	.word	0x3e663769
 800f9f0:	c5d26bf1 	.word	0xc5d26bf1
 800f9f4:	3ebbbd41 	.word	0x3ebbbd41
 800f9f8:	af25de2c 	.word	0xaf25de2c
 800f9fc:	3f11566a 	.word	0x3f11566a
 800fa00:	16bebd93 	.word	0x16bebd93
 800fa04:	3f66c16c 	.word	0x3f66c16c
 800fa08:	5555553e 	.word	0x5555553e
 800fa0c:	3fc55555 	.word	0x3fc55555
 800fa10:	c2f8f359 	.word	0xc2f8f359
 800fa14:	01a56e1f 	.word	0x01a56e1f
 800fa18:	3fe00000 	.word	0x3fe00000
 800fa1c:	000fffff 	.word	0x000fffff
 800fa20:	3ff00000 	.word	0x3ff00000
 800fa24:	4090cbff 	.word	0x4090cbff
 800fa28:	3f6f3400 	.word	0x3f6f3400

0800fa2c <__ieee754_sqrt>:
 800fa2c:	f8df c150 	ldr.w	ip, [pc, #336]	; 800fb80 <__ieee754_sqrt+0x154>
 800fa30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa34:	ea3c 0c01 	bics.w	ip, ip, r1
 800fa38:	460b      	mov	r3, r1
 800fa3a:	4606      	mov	r6, r0
 800fa3c:	460d      	mov	r5, r1
 800fa3e:	460a      	mov	r2, r1
 800fa40:	4607      	mov	r7, r0
 800fa42:	4604      	mov	r4, r0
 800fa44:	d10e      	bne.n	800fa64 <__ieee754_sqrt+0x38>
 800fa46:	4602      	mov	r2, r0
 800fa48:	f7f0 fdae 	bl	80005a8 <__aeabi_dmul>
 800fa4c:	4602      	mov	r2, r0
 800fa4e:	460b      	mov	r3, r1
 800fa50:	4630      	mov	r0, r6
 800fa52:	4629      	mov	r1, r5
 800fa54:	f7f0 fbf2 	bl	800023c <__adddf3>
 800fa58:	4606      	mov	r6, r0
 800fa5a:	460d      	mov	r5, r1
 800fa5c:	4630      	mov	r0, r6
 800fa5e:	4629      	mov	r1, r5
 800fa60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa64:	2900      	cmp	r1, #0
 800fa66:	dc0d      	bgt.n	800fa84 <__ieee754_sqrt+0x58>
 800fa68:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800fa6c:	ea5c 0707 	orrs.w	r7, ip, r7
 800fa70:	d0f4      	beq.n	800fa5c <__ieee754_sqrt+0x30>
 800fa72:	b139      	cbz	r1, 800fa84 <__ieee754_sqrt+0x58>
 800fa74:	4602      	mov	r2, r0
 800fa76:	f7f0 fbdf 	bl	8000238 <__aeabi_dsub>
 800fa7a:	4602      	mov	r2, r0
 800fa7c:	460b      	mov	r3, r1
 800fa7e:	f7f0 febd 	bl	80007fc <__aeabi_ddiv>
 800fa82:	e7e9      	b.n	800fa58 <__ieee754_sqrt+0x2c>
 800fa84:	1512      	asrs	r2, r2, #20
 800fa86:	d074      	beq.n	800fb72 <__ieee754_sqrt+0x146>
 800fa88:	2000      	movs	r0, #0
 800fa8a:	07d5      	lsls	r5, r2, #31
 800fa8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fa90:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800fa94:	bf5e      	ittt	pl
 800fa96:	0fe3      	lsrpl	r3, r4, #31
 800fa98:	0064      	lslpl	r4, r4, #1
 800fa9a:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800fa9e:	0fe3      	lsrs	r3, r4, #31
 800faa0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800faa4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800faa8:	2516      	movs	r5, #22
 800faaa:	4601      	mov	r1, r0
 800faac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800fab0:	1076      	asrs	r6, r6, #1
 800fab2:	0064      	lsls	r4, r4, #1
 800fab4:	188f      	adds	r7, r1, r2
 800fab6:	429f      	cmp	r7, r3
 800fab8:	bfde      	ittt	le
 800faba:	1bdb      	suble	r3, r3, r7
 800fabc:	18b9      	addle	r1, r7, r2
 800fabe:	1880      	addle	r0, r0, r2
 800fac0:	005b      	lsls	r3, r3, #1
 800fac2:	3d01      	subs	r5, #1
 800fac4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800fac8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800facc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800fad0:	d1f0      	bne.n	800fab4 <__ieee754_sqrt+0x88>
 800fad2:	462a      	mov	r2, r5
 800fad4:	f04f 0e20 	mov.w	lr, #32
 800fad8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800fadc:	428b      	cmp	r3, r1
 800fade:	eb07 0c05 	add.w	ip, r7, r5
 800fae2:	dc02      	bgt.n	800faea <__ieee754_sqrt+0xbe>
 800fae4:	d113      	bne.n	800fb0e <__ieee754_sqrt+0xe2>
 800fae6:	45a4      	cmp	ip, r4
 800fae8:	d811      	bhi.n	800fb0e <__ieee754_sqrt+0xe2>
 800faea:	f1bc 0f00 	cmp.w	ip, #0
 800faee:	eb0c 0507 	add.w	r5, ip, r7
 800faf2:	da43      	bge.n	800fb7c <__ieee754_sqrt+0x150>
 800faf4:	2d00      	cmp	r5, #0
 800faf6:	db41      	blt.n	800fb7c <__ieee754_sqrt+0x150>
 800faf8:	f101 0801 	add.w	r8, r1, #1
 800fafc:	1a5b      	subs	r3, r3, r1
 800fafe:	4641      	mov	r1, r8
 800fb00:	45a4      	cmp	ip, r4
 800fb02:	bf88      	it	hi
 800fb04:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800fb08:	eba4 040c 	sub.w	r4, r4, ip
 800fb0c:	443a      	add	r2, r7
 800fb0e:	005b      	lsls	r3, r3, #1
 800fb10:	f1be 0e01 	subs.w	lr, lr, #1
 800fb14:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800fb18:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800fb1c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800fb20:	d1dc      	bne.n	800fadc <__ieee754_sqrt+0xb0>
 800fb22:	4323      	orrs	r3, r4
 800fb24:	d006      	beq.n	800fb34 <__ieee754_sqrt+0x108>
 800fb26:	1c54      	adds	r4, r2, #1
 800fb28:	bf0b      	itete	eq
 800fb2a:	4672      	moveq	r2, lr
 800fb2c:	3201      	addne	r2, #1
 800fb2e:	3001      	addeq	r0, #1
 800fb30:	f022 0201 	bicne.w	r2, r2, #1
 800fb34:	1043      	asrs	r3, r0, #1
 800fb36:	07c1      	lsls	r1, r0, #31
 800fb38:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800fb3c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800fb40:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800fb44:	bf48      	it	mi
 800fb46:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800fb4a:	4610      	mov	r0, r2
 800fb4c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800fb50:	e782      	b.n	800fa58 <__ieee754_sqrt+0x2c>
 800fb52:	0ae3      	lsrs	r3, r4, #11
 800fb54:	3915      	subs	r1, #21
 800fb56:	0564      	lsls	r4, r4, #21
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d0fa      	beq.n	800fb52 <__ieee754_sqrt+0x126>
 800fb5c:	02de      	lsls	r6, r3, #11
 800fb5e:	d50a      	bpl.n	800fb76 <__ieee754_sqrt+0x14a>
 800fb60:	f1c2 0020 	rsb	r0, r2, #32
 800fb64:	fa24 f000 	lsr.w	r0, r4, r0
 800fb68:	1e55      	subs	r5, r2, #1
 800fb6a:	4094      	lsls	r4, r2
 800fb6c:	4303      	orrs	r3, r0
 800fb6e:	1b4a      	subs	r2, r1, r5
 800fb70:	e78a      	b.n	800fa88 <__ieee754_sqrt+0x5c>
 800fb72:	4611      	mov	r1, r2
 800fb74:	e7f0      	b.n	800fb58 <__ieee754_sqrt+0x12c>
 800fb76:	005b      	lsls	r3, r3, #1
 800fb78:	3201      	adds	r2, #1
 800fb7a:	e7ef      	b.n	800fb5c <__ieee754_sqrt+0x130>
 800fb7c:	4688      	mov	r8, r1
 800fb7e:	e7bd      	b.n	800fafc <__ieee754_sqrt+0xd0>
 800fb80:	7ff00000 	.word	0x7ff00000

0800fb84 <fabs>:
 800fb84:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800fb88:	4770      	bx	lr

0800fb8a <finite>:
 800fb8a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800fb8e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800fb92:	0fc0      	lsrs	r0, r0, #31
 800fb94:	4770      	bx	lr
	...

0800fb98 <nan>:
 800fb98:	2000      	movs	r0, #0
 800fb9a:	4901      	ldr	r1, [pc, #4]	; (800fba0 <nan+0x8>)
 800fb9c:	4770      	bx	lr
 800fb9e:	bf00      	nop
 800fba0:	7ff80000 	.word	0x7ff80000

0800fba4 <rint>:
 800fba4:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800fba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fbaa:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800fbae:	2f13      	cmp	r7, #19
 800fbb0:	4602      	mov	r2, r0
 800fbb2:	460b      	mov	r3, r1
 800fbb4:	460c      	mov	r4, r1
 800fbb6:	4605      	mov	r5, r0
 800fbb8:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800fbbc:	dc59      	bgt.n	800fc72 <rint+0xce>
 800fbbe:	2f00      	cmp	r7, #0
 800fbc0:	da2a      	bge.n	800fc18 <rint+0x74>
 800fbc2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800fbc6:	4301      	orrs	r1, r0
 800fbc8:	d022      	beq.n	800fc10 <rint+0x6c>
 800fbca:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800fbce:	4301      	orrs	r1, r0
 800fbd0:	424d      	negs	r5, r1
 800fbd2:	430d      	orrs	r5, r1
 800fbd4:	4936      	ldr	r1, [pc, #216]	; (800fcb0 <rint+0x10c>)
 800fbd6:	0c5c      	lsrs	r4, r3, #17
 800fbd8:	0b2d      	lsrs	r5, r5, #12
 800fbda:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800fbde:	0464      	lsls	r4, r4, #17
 800fbe0:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800fbe4:	ea45 0304 	orr.w	r3, r5, r4
 800fbe8:	e9d1 4500 	ldrd	r4, r5, [r1]
 800fbec:	4620      	mov	r0, r4
 800fbee:	4629      	mov	r1, r5
 800fbf0:	f7f0 fb24 	bl	800023c <__adddf3>
 800fbf4:	e9cd 0100 	strd	r0, r1, [sp]
 800fbf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fbfc:	462b      	mov	r3, r5
 800fbfe:	4622      	mov	r2, r4
 800fc00:	f7f0 fb1a 	bl	8000238 <__aeabi_dsub>
 800fc04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fc08:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800fc0c:	4602      	mov	r2, r0
 800fc0e:	460b      	mov	r3, r1
 800fc10:	4610      	mov	r0, r2
 800fc12:	4619      	mov	r1, r3
 800fc14:	b003      	add	sp, #12
 800fc16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc18:	4926      	ldr	r1, [pc, #152]	; (800fcb4 <rint+0x110>)
 800fc1a:	4139      	asrs	r1, r7
 800fc1c:	ea03 0001 	and.w	r0, r3, r1
 800fc20:	4310      	orrs	r0, r2
 800fc22:	d0f5      	beq.n	800fc10 <rint+0x6c>
 800fc24:	084b      	lsrs	r3, r1, #1
 800fc26:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800fc2a:	ea52 0501 	orrs.w	r5, r2, r1
 800fc2e:	d00c      	beq.n	800fc4a <rint+0xa6>
 800fc30:	ea24 0303 	bic.w	r3, r4, r3
 800fc34:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800fc38:	2f13      	cmp	r7, #19
 800fc3a:	bf0c      	ite	eq
 800fc3c:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800fc40:	2500      	movne	r5, #0
 800fc42:	fa44 f707 	asr.w	r7, r4, r7
 800fc46:	ea43 0407 	orr.w	r4, r3, r7
 800fc4a:	4919      	ldr	r1, [pc, #100]	; (800fcb0 <rint+0x10c>)
 800fc4c:	4623      	mov	r3, r4
 800fc4e:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800fc52:	462a      	mov	r2, r5
 800fc54:	e9d6 4500 	ldrd	r4, r5, [r6]
 800fc58:	4620      	mov	r0, r4
 800fc5a:	4629      	mov	r1, r5
 800fc5c:	f7f0 faee 	bl	800023c <__adddf3>
 800fc60:	e9cd 0100 	strd	r0, r1, [sp]
 800fc64:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc68:	4622      	mov	r2, r4
 800fc6a:	462b      	mov	r3, r5
 800fc6c:	f7f0 fae4 	bl	8000238 <__aeabi_dsub>
 800fc70:	e7cc      	b.n	800fc0c <rint+0x68>
 800fc72:	2f33      	cmp	r7, #51	; 0x33
 800fc74:	dd05      	ble.n	800fc82 <rint+0xde>
 800fc76:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800fc7a:	d1c9      	bne.n	800fc10 <rint+0x6c>
 800fc7c:	f7f0 fade 	bl	800023c <__adddf3>
 800fc80:	e7c4      	b.n	800fc0c <rint+0x68>
 800fc82:	f04f 31ff 	mov.w	r1, #4294967295
 800fc86:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800fc8a:	fa21 f10c 	lsr.w	r1, r1, ip
 800fc8e:	4208      	tst	r0, r1
 800fc90:	d0be      	beq.n	800fc10 <rint+0x6c>
 800fc92:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800fc96:	bf18      	it	ne
 800fc98:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800fc9c:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800fca0:	bf1e      	ittt	ne
 800fca2:	ea20 0303 	bicne.w	r3, r0, r3
 800fca6:	fa45 fc0c 	asrne.w	ip, r5, ip
 800fcaa:	ea43 050c 	orrne.w	r5, r3, ip
 800fcae:	e7cc      	b.n	800fc4a <rint+0xa6>
 800fcb0:	08010278 	.word	0x08010278
 800fcb4:	000fffff 	.word	0x000fffff

0800fcb8 <scalbn>:
 800fcb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcba:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800fcbe:	4604      	mov	r4, r0
 800fcc0:	460d      	mov	r5, r1
 800fcc2:	4617      	mov	r7, r2
 800fcc4:	460b      	mov	r3, r1
 800fcc6:	b996      	cbnz	r6, 800fcee <scalbn+0x36>
 800fcc8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fccc:	4303      	orrs	r3, r0
 800fcce:	d039      	beq.n	800fd44 <scalbn+0x8c>
 800fcd0:	4b35      	ldr	r3, [pc, #212]	; (800fda8 <scalbn+0xf0>)
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	f7f0 fc68 	bl	80005a8 <__aeabi_dmul>
 800fcd8:	4b34      	ldr	r3, [pc, #208]	; (800fdac <scalbn+0xf4>)
 800fcda:	4604      	mov	r4, r0
 800fcdc:	429f      	cmp	r7, r3
 800fcde:	460d      	mov	r5, r1
 800fce0:	da0f      	bge.n	800fd02 <scalbn+0x4a>
 800fce2:	a32d      	add	r3, pc, #180	; (adr r3, 800fd98 <scalbn+0xe0>)
 800fce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fce8:	f7f0 fc5e 	bl	80005a8 <__aeabi_dmul>
 800fcec:	e006      	b.n	800fcfc <scalbn+0x44>
 800fcee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800fcf2:	4296      	cmp	r6, r2
 800fcf4:	d10a      	bne.n	800fd0c <scalbn+0x54>
 800fcf6:	4602      	mov	r2, r0
 800fcf8:	f7f0 faa0 	bl	800023c <__adddf3>
 800fcfc:	4604      	mov	r4, r0
 800fcfe:	460d      	mov	r5, r1
 800fd00:	e020      	b.n	800fd44 <scalbn+0x8c>
 800fd02:	460b      	mov	r3, r1
 800fd04:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800fd08:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800fd0c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800fd10:	19b9      	adds	r1, r7, r6
 800fd12:	4291      	cmp	r1, r2
 800fd14:	dd0e      	ble.n	800fd34 <scalbn+0x7c>
 800fd16:	a322      	add	r3, pc, #136	; (adr r3, 800fda0 <scalbn+0xe8>)
 800fd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd1c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800fd20:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800fd24:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800fd28:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800fd2c:	4820      	ldr	r0, [pc, #128]	; (800fdb0 <scalbn+0xf8>)
 800fd2e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800fd32:	e7d9      	b.n	800fce8 <scalbn+0x30>
 800fd34:	2900      	cmp	r1, #0
 800fd36:	dd08      	ble.n	800fd4a <scalbn+0x92>
 800fd38:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fd3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fd40:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800fd44:	4620      	mov	r0, r4
 800fd46:	4629      	mov	r1, r5
 800fd48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd4a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800fd4e:	da16      	bge.n	800fd7e <scalbn+0xc6>
 800fd50:	f24c 3350 	movw	r3, #50000	; 0xc350
 800fd54:	429f      	cmp	r7, r3
 800fd56:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800fd5a:	dd08      	ble.n	800fd6e <scalbn+0xb6>
 800fd5c:	4c15      	ldr	r4, [pc, #84]	; (800fdb4 <scalbn+0xfc>)
 800fd5e:	4814      	ldr	r0, [pc, #80]	; (800fdb0 <scalbn+0xf8>)
 800fd60:	f363 74df 	bfi	r4, r3, #31, #1
 800fd64:	a30e      	add	r3, pc, #56	; (adr r3, 800fda0 <scalbn+0xe8>)
 800fd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd6a:	4621      	mov	r1, r4
 800fd6c:	e7bc      	b.n	800fce8 <scalbn+0x30>
 800fd6e:	4c12      	ldr	r4, [pc, #72]	; (800fdb8 <scalbn+0x100>)
 800fd70:	4812      	ldr	r0, [pc, #72]	; (800fdbc <scalbn+0x104>)
 800fd72:	f363 74df 	bfi	r4, r3, #31, #1
 800fd76:	a308      	add	r3, pc, #32	; (adr r3, 800fd98 <scalbn+0xe0>)
 800fd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd7c:	e7f5      	b.n	800fd6a <scalbn+0xb2>
 800fd7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fd82:	3136      	adds	r1, #54	; 0x36
 800fd84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fd88:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800fd8c:	4620      	mov	r0, r4
 800fd8e:	4629      	mov	r1, r5
 800fd90:	2200      	movs	r2, #0
 800fd92:	4b0b      	ldr	r3, [pc, #44]	; (800fdc0 <scalbn+0x108>)
 800fd94:	e7a8      	b.n	800fce8 <scalbn+0x30>
 800fd96:	bf00      	nop
 800fd98:	c2f8f359 	.word	0xc2f8f359
 800fd9c:	01a56e1f 	.word	0x01a56e1f
 800fda0:	8800759c 	.word	0x8800759c
 800fda4:	7e37e43c 	.word	0x7e37e43c
 800fda8:	43500000 	.word	0x43500000
 800fdac:	ffff3cb0 	.word	0xffff3cb0
 800fdb0:	8800759c 	.word	0x8800759c
 800fdb4:	7e37e43c 	.word	0x7e37e43c
 800fdb8:	01a56e1f 	.word	0x01a56e1f
 800fdbc:	c2f8f359 	.word	0xc2f8f359
 800fdc0:	3c900000 	.word	0x3c900000

0800fdc4 <_init>:
 800fdc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdc6:	bf00      	nop
 800fdc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdca:	bc08      	pop	{r3}
 800fdcc:	469e      	mov	lr, r3
 800fdce:	4770      	bx	lr

0800fdd0 <_fini>:
 800fdd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdd2:	bf00      	nop
 800fdd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdd6:	bc08      	pop	{r3}
 800fdd8:	469e      	mov	lr, r3
 800fdda:	4770      	bx	lr
