
Fournaise2020.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f914  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  0800fb08  0800fb08  0001fb08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800ffb8  0800ffb8  0001ffb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800ffbc  0800ffbc  0001ffbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000a8  20000000  0800ffc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000031ac  200000a8  08010068  000200a8  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20003254  08010068  00023254  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
  9 .debug_info   000265a2  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00005534  00000000  00000000  00046673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001c80  00000000  00000000  0004bba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001a38  00000000  00000000  0004d828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0001d48f  00000000  00000000  0004f260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00020de4  00000000  00000000  0006c6ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000996f6  00000000  00000000  0008d4d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  00126bc9  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000082b0  00000000  00000000  00126c1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200000a8 	.word	0x200000a8
 800020c:	00000000 	.word	0x00000000
 8000210:	0800faec 	.word	0x0800faec

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200000ac 	.word	0x200000ac
 800022c:	0800faec 	.word	0x0800faec

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2f>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b10:	bf24      	itt	cs
 8000b12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1a:	d90d      	bls.n	8000b38 <__aeabi_d2f+0x30>
 8000b1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b3c:	d121      	bne.n	8000b82 <__aeabi_d2f+0x7a>
 8000b3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b42:	bfbc      	itt	lt
 8000b44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	4770      	bxlt	lr
 8000b4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b52:	f1c2 0218 	rsb	r2, r2, #24
 8000b56:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b62:	bf18      	it	ne
 8000b64:	f040 0001 	orrne.w	r0, r0, #1
 8000b68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b74:	ea40 000c 	orr.w	r0, r0, ip
 8000b78:	fa23 f302 	lsr.w	r3, r3, r2
 8000b7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b80:	e7cc      	b.n	8000b1c <__aeabi_d2f+0x14>
 8000b82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b86:	d107      	bne.n	8000b98 <__aeabi_d2f+0x90>
 8000b88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b8c:	bf1e      	ittt	ne
 8000b8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b96:	4770      	bxne	lr
 8000b98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_frsub>:
 8000ba8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bac:	e002      	b.n	8000bb4 <__addsf3>
 8000bae:	bf00      	nop

08000bb0 <__aeabi_fsub>:
 8000bb0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bb4 <__addsf3>:
 8000bb4:	0042      	lsls	r2, r0, #1
 8000bb6:	bf1f      	itttt	ne
 8000bb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bbc:	ea92 0f03 	teqne	r2, r3
 8000bc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc8:	d06a      	beq.n	8000ca0 <__addsf3+0xec>
 8000bca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bd2:	bfc1      	itttt	gt
 8000bd4:	18d2      	addgt	r2, r2, r3
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	4048      	eorgt	r0, r1
 8000bda:	4041      	eorgt	r1, r0
 8000bdc:	bfb8      	it	lt
 8000bde:	425b      	neglt	r3, r3
 8000be0:	2b19      	cmp	r3, #25
 8000be2:	bf88      	it	hi
 8000be4:	4770      	bxhi	lr
 8000be6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bfa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bfe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c02:	bf18      	it	ne
 8000c04:	4249      	negne	r1, r1
 8000c06:	ea92 0f03 	teq	r2, r3
 8000c0a:	d03f      	beq.n	8000c8c <__addsf3+0xd8>
 8000c0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c10:	fa41 fc03 	asr.w	ip, r1, r3
 8000c14:	eb10 000c 	adds.w	r0, r0, ip
 8000c18:	f1c3 0320 	rsb	r3, r3, #32
 8000c1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c24:	d502      	bpl.n	8000c2c <__addsf3+0x78>
 8000c26:	4249      	negs	r1, r1
 8000c28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c30:	d313      	bcc.n	8000c5a <__addsf3+0xa6>
 8000c32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c36:	d306      	bcc.n	8000c46 <__addsf3+0x92>
 8000c38:	0840      	lsrs	r0, r0, #1
 8000c3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3e:	f102 0201 	add.w	r2, r2, #1
 8000c42:	2afe      	cmp	r2, #254	; 0xfe
 8000c44:	d251      	bcs.n	8000cea <__addsf3+0x136>
 8000c46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4e:	bf08      	it	eq
 8000c50:	f020 0001 	biceq.w	r0, r0, #1
 8000c54:	ea40 0003 	orr.w	r0, r0, r3
 8000c58:	4770      	bx	lr
 8000c5a:	0049      	lsls	r1, r1, #1
 8000c5c:	eb40 0000 	adc.w	r0, r0, r0
 8000c60:	3a01      	subs	r2, #1
 8000c62:	bf28      	it	cs
 8000c64:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c68:	d2ed      	bcs.n	8000c46 <__addsf3+0x92>
 8000c6a:	fab0 fc80 	clz	ip, r0
 8000c6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c72:	ebb2 020c 	subs.w	r2, r2, ip
 8000c76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c7a:	bfaa      	itet	ge
 8000c7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c80:	4252      	neglt	r2, r2
 8000c82:	4318      	orrge	r0, r3
 8000c84:	bfbc      	itt	lt
 8000c86:	40d0      	lsrlt	r0, r2
 8000c88:	4318      	orrlt	r0, r3
 8000c8a:	4770      	bx	lr
 8000c8c:	f092 0f00 	teq	r2, #0
 8000c90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c94:	bf06      	itte	eq
 8000c96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c9a:	3201      	addeq	r2, #1
 8000c9c:	3b01      	subne	r3, #1
 8000c9e:	e7b5      	b.n	8000c0c <__addsf3+0x58>
 8000ca0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca8:	bf18      	it	ne
 8000caa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cae:	d021      	beq.n	8000cf4 <__addsf3+0x140>
 8000cb0:	ea92 0f03 	teq	r2, r3
 8000cb4:	d004      	beq.n	8000cc0 <__addsf3+0x10c>
 8000cb6:	f092 0f00 	teq	r2, #0
 8000cba:	bf08      	it	eq
 8000cbc:	4608      	moveq	r0, r1
 8000cbe:	4770      	bx	lr
 8000cc0:	ea90 0f01 	teq	r0, r1
 8000cc4:	bf1c      	itt	ne
 8000cc6:	2000      	movne	r0, #0
 8000cc8:	4770      	bxne	lr
 8000cca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cce:	d104      	bne.n	8000cda <__addsf3+0x126>
 8000cd0:	0040      	lsls	r0, r0, #1
 8000cd2:	bf28      	it	cs
 8000cd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd8:	4770      	bx	lr
 8000cda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cde:	bf3c      	itt	cc
 8000ce0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bxcc	lr
 8000ce6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf2:	4770      	bx	lr
 8000cf4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf8:	bf16      	itet	ne
 8000cfa:	4608      	movne	r0, r1
 8000cfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d00:	4601      	movne	r1, r0
 8000d02:	0242      	lsls	r2, r0, #9
 8000d04:	bf06      	itte	eq
 8000d06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d0a:	ea90 0f01 	teqeq	r0, r1
 8000d0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d12:	4770      	bx	lr

08000d14 <__aeabi_ui2f>:
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e004      	b.n	8000d24 <__aeabi_i2f+0x8>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_i2f>:
 8000d1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d20:	bf48      	it	mi
 8000d22:	4240      	negmi	r0, r0
 8000d24:	ea5f 0c00 	movs.w	ip, r0
 8000d28:	bf08      	it	eq
 8000d2a:	4770      	bxeq	lr
 8000d2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d30:	4601      	mov	r1, r0
 8000d32:	f04f 0000 	mov.w	r0, #0
 8000d36:	e01c      	b.n	8000d72 <__aeabi_l2f+0x2a>

08000d38 <__aeabi_ul2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e00a      	b.n	8000d5c <__aeabi_l2f+0x14>
 8000d46:	bf00      	nop

08000d48 <__aeabi_l2f>:
 8000d48:	ea50 0201 	orrs.w	r2, r0, r1
 8000d4c:	bf08      	it	eq
 8000d4e:	4770      	bxeq	lr
 8000d50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d54:	d502      	bpl.n	8000d5c <__aeabi_l2f+0x14>
 8000d56:	4240      	negs	r0, r0
 8000d58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5c:	ea5f 0c01 	movs.w	ip, r1
 8000d60:	bf02      	ittt	eq
 8000d62:	4684      	moveq	ip, r0
 8000d64:	4601      	moveq	r1, r0
 8000d66:	2000      	moveq	r0, #0
 8000d68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d6c:	bf08      	it	eq
 8000d6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d76:	fabc f28c 	clz	r2, ip
 8000d7a:	3a08      	subs	r2, #8
 8000d7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d80:	db10      	blt.n	8000da4 <__aeabi_l2f+0x5c>
 8000d82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d86:	4463      	add	r3, ip
 8000d88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d94:	fa20 f202 	lsr.w	r2, r0, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f102 0220 	add.w	r2, r2, #32
 8000da8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dac:	f1c2 0220 	rsb	r2, r2, #32
 8000db0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db4:	fa21 f202 	lsr.w	r2, r1, r2
 8000db8:	eb43 0002 	adc.w	r0, r3, r2
 8000dbc:	bf08      	it	eq
 8000dbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc2:	4770      	bx	lr

08000dc4 <__aeabi_fmul>:
 8000dc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dcc:	bf1e      	ittt	ne
 8000dce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dd2:	ea92 0f0c 	teqne	r2, ip
 8000dd6:	ea93 0f0c 	teqne	r3, ip
 8000dda:	d06f      	beq.n	8000ebc <__aeabi_fmul+0xf8>
 8000ddc:	441a      	add	r2, r3
 8000dde:	ea80 0c01 	eor.w	ip, r0, r1
 8000de2:	0240      	lsls	r0, r0, #9
 8000de4:	bf18      	it	ne
 8000de6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dea:	d01e      	beq.n	8000e2a <__aeabi_fmul+0x66>
 8000dec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000df0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000df4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dfc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e00:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e04:	bf3e      	ittt	cc
 8000e06:	0049      	lslcc	r1, r1, #1
 8000e08:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e0c:	005b      	lslcc	r3, r3, #1
 8000e0e:	ea40 0001 	orr.w	r0, r0, r1
 8000e12:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e16:	2afd      	cmp	r2, #253	; 0xfd
 8000e18:	d81d      	bhi.n	8000e56 <__aeabi_fmul+0x92>
 8000e1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e22:	bf08      	it	eq
 8000e24:	f020 0001 	biceq.w	r0, r0, #1
 8000e28:	4770      	bx	lr
 8000e2a:	f090 0f00 	teq	r0, #0
 8000e2e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e32:	bf08      	it	eq
 8000e34:	0249      	lsleq	r1, r1, #9
 8000e36:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e3a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e3e:	3a7f      	subs	r2, #127	; 0x7f
 8000e40:	bfc2      	ittt	gt
 8000e42:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e46:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e4a:	4770      	bxgt	lr
 8000e4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	3a01      	subs	r2, #1
 8000e56:	dc5d      	bgt.n	8000f14 <__aeabi_fmul+0x150>
 8000e58:	f112 0f19 	cmn.w	r2, #25
 8000e5c:	bfdc      	itt	le
 8000e5e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e62:	4770      	bxle	lr
 8000e64:	f1c2 0200 	rsb	r2, r2, #0
 8000e68:	0041      	lsls	r1, r0, #1
 8000e6a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e6e:	f1c2 0220 	rsb	r2, r2, #32
 8000e72:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e76:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e7a:	f140 0000 	adc.w	r0, r0, #0
 8000e7e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e82:	bf08      	it	eq
 8000e84:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e88:	4770      	bx	lr
 8000e8a:	f092 0f00 	teq	r2, #0
 8000e8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e92:	bf02      	ittt	eq
 8000e94:	0040      	lsleq	r0, r0, #1
 8000e96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e9a:	3a01      	subeq	r2, #1
 8000e9c:	d0f9      	beq.n	8000e92 <__aeabi_fmul+0xce>
 8000e9e:	ea40 000c 	orr.w	r0, r0, ip
 8000ea2:	f093 0f00 	teq	r3, #0
 8000ea6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	bf02      	ittt	eq
 8000eac:	0049      	lsleq	r1, r1, #1
 8000eae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eb2:	3b01      	subeq	r3, #1
 8000eb4:	d0f9      	beq.n	8000eaa <__aeabi_fmul+0xe6>
 8000eb6:	ea41 010c 	orr.w	r1, r1, ip
 8000eba:	e78f      	b.n	8000ddc <__aeabi_fmul+0x18>
 8000ebc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ec0:	ea92 0f0c 	teq	r2, ip
 8000ec4:	bf18      	it	ne
 8000ec6:	ea93 0f0c 	teqne	r3, ip
 8000eca:	d00a      	beq.n	8000ee2 <__aeabi_fmul+0x11e>
 8000ecc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ed0:	bf18      	it	ne
 8000ed2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ed6:	d1d8      	bne.n	8000e8a <__aeabi_fmul+0xc6>
 8000ed8:	ea80 0001 	eor.w	r0, r0, r1
 8000edc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ee0:	4770      	bx	lr
 8000ee2:	f090 0f00 	teq	r0, #0
 8000ee6:	bf17      	itett	ne
 8000ee8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eec:	4608      	moveq	r0, r1
 8000eee:	f091 0f00 	teqne	r1, #0
 8000ef2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ef6:	d014      	beq.n	8000f22 <__aeabi_fmul+0x15e>
 8000ef8:	ea92 0f0c 	teq	r2, ip
 8000efc:	d101      	bne.n	8000f02 <__aeabi_fmul+0x13e>
 8000efe:	0242      	lsls	r2, r0, #9
 8000f00:	d10f      	bne.n	8000f22 <__aeabi_fmul+0x15e>
 8000f02:	ea93 0f0c 	teq	r3, ip
 8000f06:	d103      	bne.n	8000f10 <__aeabi_fmul+0x14c>
 8000f08:	024b      	lsls	r3, r1, #9
 8000f0a:	bf18      	it	ne
 8000f0c:	4608      	movne	r0, r1
 8000f0e:	d108      	bne.n	8000f22 <__aeabi_fmul+0x15e>
 8000f10:	ea80 0001 	eor.w	r0, r0, r1
 8000f14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f20:	4770      	bx	lr
 8000f22:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f26:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f2a:	4770      	bx	lr

08000f2c <__aeabi_fdiv>:
 8000f2c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f30:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f34:	bf1e      	ittt	ne
 8000f36:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f3a:	ea92 0f0c 	teqne	r2, ip
 8000f3e:	ea93 0f0c 	teqne	r3, ip
 8000f42:	d069      	beq.n	8001018 <__aeabi_fdiv+0xec>
 8000f44:	eba2 0203 	sub.w	r2, r2, r3
 8000f48:	ea80 0c01 	eor.w	ip, r0, r1
 8000f4c:	0249      	lsls	r1, r1, #9
 8000f4e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f52:	d037      	beq.n	8000fc4 <__aeabi_fdiv+0x98>
 8000f54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f58:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f5c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f60:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f64:	428b      	cmp	r3, r1
 8000f66:	bf38      	it	cc
 8000f68:	005b      	lslcc	r3, r3, #1
 8000f6a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f6e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f72:	428b      	cmp	r3, r1
 8000f74:	bf24      	itt	cs
 8000f76:	1a5b      	subcs	r3, r3, r1
 8000f78:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f7c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f80:	bf24      	itt	cs
 8000f82:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f86:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f8a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f8e:	bf24      	itt	cs
 8000f90:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f94:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f98:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f9c:	bf24      	itt	cs
 8000f9e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fa2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fa6:	011b      	lsls	r3, r3, #4
 8000fa8:	bf18      	it	ne
 8000faa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fae:	d1e0      	bne.n	8000f72 <__aeabi_fdiv+0x46>
 8000fb0:	2afd      	cmp	r2, #253	; 0xfd
 8000fb2:	f63f af50 	bhi.w	8000e56 <__aeabi_fmul+0x92>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fbc:	bf08      	it	eq
 8000fbe:	f020 0001 	biceq.w	r0, r0, #1
 8000fc2:	4770      	bx	lr
 8000fc4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fc8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fcc:	327f      	adds	r2, #127	; 0x7f
 8000fce:	bfc2      	ittt	gt
 8000fd0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fd4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd8:	4770      	bxgt	lr
 8000fda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fde:	f04f 0300 	mov.w	r3, #0
 8000fe2:	3a01      	subs	r2, #1
 8000fe4:	e737      	b.n	8000e56 <__aeabi_fmul+0x92>
 8000fe6:	f092 0f00 	teq	r2, #0
 8000fea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fee:	bf02      	ittt	eq
 8000ff0:	0040      	lsleq	r0, r0, #1
 8000ff2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ff6:	3a01      	subeq	r2, #1
 8000ff8:	d0f9      	beq.n	8000fee <__aeabi_fdiv+0xc2>
 8000ffa:	ea40 000c 	orr.w	r0, r0, ip
 8000ffe:	f093 0f00 	teq	r3, #0
 8001002:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001006:	bf02      	ittt	eq
 8001008:	0049      	lsleq	r1, r1, #1
 800100a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800100e:	3b01      	subeq	r3, #1
 8001010:	d0f9      	beq.n	8001006 <__aeabi_fdiv+0xda>
 8001012:	ea41 010c 	orr.w	r1, r1, ip
 8001016:	e795      	b.n	8000f44 <__aeabi_fdiv+0x18>
 8001018:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800101c:	ea92 0f0c 	teq	r2, ip
 8001020:	d108      	bne.n	8001034 <__aeabi_fdiv+0x108>
 8001022:	0242      	lsls	r2, r0, #9
 8001024:	f47f af7d 	bne.w	8000f22 <__aeabi_fmul+0x15e>
 8001028:	ea93 0f0c 	teq	r3, ip
 800102c:	f47f af70 	bne.w	8000f10 <__aeabi_fmul+0x14c>
 8001030:	4608      	mov	r0, r1
 8001032:	e776      	b.n	8000f22 <__aeabi_fmul+0x15e>
 8001034:	ea93 0f0c 	teq	r3, ip
 8001038:	d104      	bne.n	8001044 <__aeabi_fdiv+0x118>
 800103a:	024b      	lsls	r3, r1, #9
 800103c:	f43f af4c 	beq.w	8000ed8 <__aeabi_fmul+0x114>
 8001040:	4608      	mov	r0, r1
 8001042:	e76e      	b.n	8000f22 <__aeabi_fmul+0x15e>
 8001044:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001048:	bf18      	it	ne
 800104a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800104e:	d1ca      	bne.n	8000fe6 <__aeabi_fdiv+0xba>
 8001050:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001054:	f47f af5c 	bne.w	8000f10 <__aeabi_fmul+0x14c>
 8001058:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800105c:	f47f af3c 	bne.w	8000ed8 <__aeabi_fmul+0x114>
 8001060:	e75f      	b.n	8000f22 <__aeabi_fmul+0x15e>
 8001062:	bf00      	nop

08001064 <__gesf2>:
 8001064:	f04f 3cff 	mov.w	ip, #4294967295
 8001068:	e006      	b.n	8001078 <__cmpsf2+0x4>
 800106a:	bf00      	nop

0800106c <__lesf2>:
 800106c:	f04f 0c01 	mov.w	ip, #1
 8001070:	e002      	b.n	8001078 <__cmpsf2+0x4>
 8001072:	bf00      	nop

08001074 <__cmpsf2>:
 8001074:	f04f 0c01 	mov.w	ip, #1
 8001078:	f84d cd04 	str.w	ip, [sp, #-4]!
 800107c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001080:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001084:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001088:	bf18      	it	ne
 800108a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800108e:	d011      	beq.n	80010b4 <__cmpsf2+0x40>
 8001090:	b001      	add	sp, #4
 8001092:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001096:	bf18      	it	ne
 8001098:	ea90 0f01 	teqne	r0, r1
 800109c:	bf58      	it	pl
 800109e:	ebb2 0003 	subspl.w	r0, r2, r3
 80010a2:	bf88      	it	hi
 80010a4:	17c8      	asrhi	r0, r1, #31
 80010a6:	bf38      	it	cc
 80010a8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010ac:	bf18      	it	ne
 80010ae:	f040 0001 	orrne.w	r0, r0, #1
 80010b2:	4770      	bx	lr
 80010b4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010b8:	d102      	bne.n	80010c0 <__cmpsf2+0x4c>
 80010ba:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010be:	d105      	bne.n	80010cc <__cmpsf2+0x58>
 80010c0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010c4:	d1e4      	bne.n	8001090 <__cmpsf2+0x1c>
 80010c6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ca:	d0e1      	beq.n	8001090 <__cmpsf2+0x1c>
 80010cc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop

080010d4 <__aeabi_cfrcmple>:
 80010d4:	4684      	mov	ip, r0
 80010d6:	4608      	mov	r0, r1
 80010d8:	4661      	mov	r1, ip
 80010da:	e7ff      	b.n	80010dc <__aeabi_cfcmpeq>

080010dc <__aeabi_cfcmpeq>:
 80010dc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010de:	f7ff ffc9 	bl	8001074 <__cmpsf2>
 80010e2:	2800      	cmp	r0, #0
 80010e4:	bf48      	it	mi
 80010e6:	f110 0f00 	cmnmi.w	r0, #0
 80010ea:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ec <__aeabi_fcmpeq>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff fff4 	bl	80010dc <__aeabi_cfcmpeq>
 80010f4:	bf0c      	ite	eq
 80010f6:	2001      	moveq	r0, #1
 80010f8:	2000      	movne	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_fcmplt>:
 8001100:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001104:	f7ff ffea 	bl	80010dc <__aeabi_cfcmpeq>
 8001108:	bf34      	ite	cc
 800110a:	2001      	movcc	r0, #1
 800110c:	2000      	movcs	r0, #0
 800110e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001112:	bf00      	nop

08001114 <__aeabi_fcmple>:
 8001114:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001118:	f7ff ffe0 	bl	80010dc <__aeabi_cfcmpeq>
 800111c:	bf94      	ite	ls
 800111e:	2001      	movls	r0, #1
 8001120:	2000      	movhi	r0, #0
 8001122:	f85d fb08 	ldr.w	pc, [sp], #8
 8001126:	bf00      	nop

08001128 <__aeabi_fcmpge>:
 8001128:	f84d ed08 	str.w	lr, [sp, #-8]!
 800112c:	f7ff ffd2 	bl	80010d4 <__aeabi_cfrcmple>
 8001130:	bf94      	ite	ls
 8001132:	2001      	movls	r0, #1
 8001134:	2000      	movhi	r0, #0
 8001136:	f85d fb08 	ldr.w	pc, [sp], #8
 800113a:	bf00      	nop

0800113c <__aeabi_fcmpgt>:
 800113c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001140:	f7ff ffc8 	bl	80010d4 <__aeabi_cfrcmple>
 8001144:	bf34      	ite	cc
 8001146:	2001      	movcc	r0, #1
 8001148:	2000      	movcs	r0, #0
 800114a:	f85d fb08 	ldr.w	pc, [sp], #8
 800114e:	bf00      	nop

08001150 <__aeabi_f2iz>:
 8001150:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001154:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001158:	d30f      	bcc.n	800117a <__aeabi_f2iz+0x2a>
 800115a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800115e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001162:	d90d      	bls.n	8001180 <__aeabi_f2iz+0x30>
 8001164:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001168:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800116c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001170:	fa23 f002 	lsr.w	r0, r3, r2
 8001174:	bf18      	it	ne
 8001176:	4240      	negne	r0, r0
 8001178:	4770      	bx	lr
 800117a:	f04f 0000 	mov.w	r0, #0
 800117e:	4770      	bx	lr
 8001180:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001184:	d101      	bne.n	800118a <__aeabi_f2iz+0x3a>
 8001186:	0242      	lsls	r2, r0, #9
 8001188:	d105      	bne.n	8001196 <__aeabi_f2iz+0x46>
 800118a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800118e:	bf08      	it	eq
 8001190:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001194:	4770      	bx	lr
 8001196:	f04f 0000 	mov.w	r0, #0
 800119a:	4770      	bx	lr

0800119c <__aeabi_f2uiz>:
 800119c:	0042      	lsls	r2, r0, #1
 800119e:	d20e      	bcs.n	80011be <__aeabi_f2uiz+0x22>
 80011a0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011a4:	d30b      	bcc.n	80011be <__aeabi_f2uiz+0x22>
 80011a6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011aa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011ae:	d409      	bmi.n	80011c4 <__aeabi_f2uiz+0x28>
 80011b0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011b8:	fa23 f002 	lsr.w	r0, r3, r2
 80011bc:	4770      	bx	lr
 80011be:	f04f 0000 	mov.w	r0, #0
 80011c2:	4770      	bx	lr
 80011c4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011c8:	d101      	bne.n	80011ce <__aeabi_f2uiz+0x32>
 80011ca:	0242      	lsls	r2, r0, #9
 80011cc:	d102      	bne.n	80011d4 <__aeabi_f2uiz+0x38>
 80011ce:	f04f 30ff 	mov.w	r0, #4294967295
 80011d2:	4770      	bx	lr
 80011d4:	f04f 0000 	mov.w	r0, #0
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop

080011dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <HAL_Init+0x28>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a07      	ldr	r2, [pc, #28]	; (8001204 <HAL_Init+0x28>)
 80011e6:	f043 0310 	orr.w	r3, r3, #16
 80011ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ec:	2003      	movs	r0, #3
 80011ee:	f000 fd55 	bl	8001c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011f2:	2000      	movs	r0, #0
 80011f4:	f00c fb68 	bl	800d8c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f8:	f00c f9e4 	bl	800d5c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40022000 	.word	0x40022000

08001208 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <HAL_IncTick+0x1c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	4b05      	ldr	r3, [pc, #20]	; (8001228 <HAL_IncTick+0x20>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4413      	add	r3, r2
 8001218:	4a03      	ldr	r2, [pc, #12]	; (8001228 <HAL_IncTick+0x20>)
 800121a:	6013      	str	r3, [r2, #0]
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr
 8001224:	20000004 	.word	0x20000004
 8001228:	20003028 	.word	0x20003028

0800122c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return uwTick;
 8001230:	4b02      	ldr	r3, [pc, #8]	; (800123c <HAL_GetTick+0x10>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	20003028 	.word	0x20003028

08001240 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001248:	2300      	movs	r3, #0
 800124a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800124c:	2300      	movs	r3, #0
 800124e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001250:	2300      	movs	r3, #0
 8001252:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e0ce      	b.n	8001400 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126c:	2b00      	cmp	r3, #0
 800126e:	d109      	bne.n	8001284 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f00c f9d8 	bl	800d634 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f000 faff 	bl	8001888 <ADC_ConversionStop_Disable>
 800128a:	4603      	mov	r3, r0
 800128c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001292:	f003 0310 	and.w	r3, r3, #16
 8001296:	2b00      	cmp	r3, #0
 8001298:	f040 80a9 	bne.w	80013ee <HAL_ADC_Init+0x1ae>
 800129c:	7dfb      	ldrb	r3, [r7, #23]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f040 80a5 	bne.w	80013ee <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012ac:	f023 0302 	bic.w	r3, r3, #2
 80012b0:	f043 0202 	orr.w	r2, r3, #2
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4951      	ldr	r1, [pc, #324]	; (8001408 <HAL_ADC_Init+0x1c8>)
 80012c2:	428b      	cmp	r3, r1
 80012c4:	d10a      	bne.n	80012dc <HAL_ADC_Init+0x9c>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80012ce:	d002      	beq.n	80012d6 <HAL_ADC_Init+0x96>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69db      	ldr	r3, [r3, #28]
 80012d4:	e004      	b.n	80012e0 <HAL_ADC_Init+0xa0>
 80012d6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80012da:	e001      	b.n	80012e0 <HAL_ADC_Init+0xa0>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012e0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	7b1b      	ldrb	r3, [r3, #12]
 80012e6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012e8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012f8:	d003      	beq.n	8001302 <HAL_ADC_Init+0xc2>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d102      	bne.n	8001308 <HAL_ADC_Init+0xc8>
 8001302:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001306:	e000      	b.n	800130a <HAL_ADC_Init+0xca>
 8001308:	2300      	movs	r3, #0
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	7d1b      	ldrb	r3, [r3, #20]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d119      	bne.n	800134c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	7b1b      	ldrb	r3, [r3, #12]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d109      	bne.n	8001334 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	3b01      	subs	r3, #1
 8001326:	035a      	lsls	r2, r3, #13
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	e00b      	b.n	800134c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001338:	f043 0220 	orr.w	r2, r3, #32
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001344:	f043 0201 	orr.w	r2, r3, #1
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	430a      	orrs	r2, r1
 800135e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	689a      	ldr	r2, [r3, #8]
 8001366:	4b29      	ldr	r3, [pc, #164]	; (800140c <HAL_ADC_Init+0x1cc>)
 8001368:	4013      	ands	r3, r2
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	6812      	ldr	r2, [r2, #0]
 800136e:	68b9      	ldr	r1, [r7, #8]
 8001370:	430b      	orrs	r3, r1
 8001372:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800137c:	d003      	beq.n	8001386 <HAL_ADC_Init+0x146>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d104      	bne.n	8001390 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	3b01      	subs	r3, #1
 800138c:	051b      	lsls	r3, r3, #20
 800138e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001396:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	430a      	orrs	r2, r1
 80013a2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	4b19      	ldr	r3, [pc, #100]	; (8001410 <HAL_ADC_Init+0x1d0>)
 80013ac:	4013      	ands	r3, r2
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d10b      	bne.n	80013cc <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013be:	f023 0303 	bic.w	r3, r3, #3
 80013c2:	f043 0201 	orr.w	r2, r3, #1
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013ca:	e018      	b.n	80013fe <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d0:	f023 0312 	bic.w	r3, r3, #18
 80013d4:	f043 0210 	orr.w	r2, r3, #16
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e0:	f043 0201 	orr.w	r2, r3, #1
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013ec:	e007      	b.n	80013fe <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f2:	f043 0210 	orr.w	r2, r3, #16
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40013c00 	.word	0x40013c00
 800140c:	ffe1f7fd 	.word	0xffe1f7fd
 8001410:	ff1f0efe 	.word	0xff1f0efe

08001414 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001420:	2300      	movs	r3, #0
 8001422:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a64      	ldr	r2, [pc, #400]	; (80015bc <HAL_ADC_Start_DMA+0x1a8>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d004      	beq.n	8001438 <HAL_ADC_Start_DMA+0x24>
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a63      	ldr	r2, [pc, #396]	; (80015c0 <HAL_ADC_Start_DMA+0x1ac>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d106      	bne.n	8001446 <HAL_ADC_Start_DMA+0x32>
 8001438:	4b60      	ldr	r3, [pc, #384]	; (80015bc <HAL_ADC_Start_DMA+0x1a8>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001440:	2b00      	cmp	r3, #0
 8001442:	f040 80b3 	bne.w	80015ac <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800144c:	2b01      	cmp	r3, #1
 800144e:	d101      	bne.n	8001454 <HAL_ADC_Start_DMA+0x40>
 8001450:	2302      	movs	r3, #2
 8001452:	e0ae      	b.n	80015b2 <HAL_ADC_Start_DMA+0x19e>
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800145c:	68f8      	ldr	r0, [r7, #12]
 800145e:	f000 f9c1 	bl	80017e4 <ADC_Enable>
 8001462:	4603      	mov	r3, r0
 8001464:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001466:	7dfb      	ldrb	r3, [r7, #23]
 8001468:	2b00      	cmp	r3, #0
 800146a:	f040 809a 	bne.w	80015a2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001472:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001476:	f023 0301 	bic.w	r3, r3, #1
 800147a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a4e      	ldr	r2, [pc, #312]	; (80015c0 <HAL_ADC_Start_DMA+0x1ac>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d105      	bne.n	8001498 <HAL_ADC_Start_DMA+0x84>
 800148c:	4b4b      	ldr	r3, [pc, #300]	; (80015bc <HAL_ADC_Start_DMA+0x1a8>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d115      	bne.n	80014c4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d026      	beq.n	8001500 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014c2:	e01d      	b.n	8001500 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a39      	ldr	r2, [pc, #228]	; (80015bc <HAL_ADC_Start_DMA+0x1a8>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d004      	beq.n	80014e4 <HAL_ADC_Start_DMA+0xd0>
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a38      	ldr	r2, [pc, #224]	; (80015c0 <HAL_ADC_Start_DMA+0x1ac>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d10d      	bne.n	8001500 <HAL_ADC_Start_DMA+0xec>
 80014e4:	4b35      	ldr	r3, [pc, #212]	; (80015bc <HAL_ADC_Start_DMA+0x1a8>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d007      	beq.n	8001500 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001504:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d006      	beq.n	800151a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001510:	f023 0206 	bic.w	r2, r3, #6
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	62da      	str	r2, [r3, #44]	; 0x2c
 8001518:	e002      	b.n	8001520 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2200      	movs	r2, #0
 800151e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	4a25      	ldr	r2, [pc, #148]	; (80015c4 <HAL_ADC_Start_DMA+0x1b0>)
 800152e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	4a24      	ldr	r2, [pc, #144]	; (80015c8 <HAL_ADC_Start_DMA+0x1b4>)
 8001536:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	4a23      	ldr	r2, [pc, #140]	; (80015cc <HAL_ADC_Start_DMA+0x1b8>)
 800153e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f06f 0202 	mvn.w	r2, #2
 8001548:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001558:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6a18      	ldr	r0, [r3, #32]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	334c      	adds	r3, #76	; 0x4c
 8001564:	4619      	mov	r1, r3
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f000 fc51 	bl	8001e10 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001578:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800157c:	d108      	bne.n	8001590 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800158c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800158e:	e00f      	b.n	80015b0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800159e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80015a0:	e006      	b.n	80015b0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80015aa:	e001      	b.n	80015b0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40012400 	.word	0x40012400
 80015c0:	40012800 	.word	0x40012800
 80015c4:	080018fd 	.word	0x080018fd
 80015c8:	08001979 	.word	0x08001979
 80015cc:	08001995 	.word	0x08001995

080015d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr

080015e2 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr

080015f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800160c:	2b01      	cmp	r3, #1
 800160e:	d101      	bne.n	8001614 <HAL_ADC_ConfigChannel+0x20>
 8001610:	2302      	movs	r3, #2
 8001612:	e0dc      	b.n	80017ce <HAL_ADC_ConfigChannel+0x1da>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b06      	cmp	r3, #6
 8001622:	d81c      	bhi.n	800165e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	4613      	mov	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	3b05      	subs	r3, #5
 8001636:	221f      	movs	r2, #31
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	4019      	ands	r1, r3
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	6818      	ldr	r0, [r3, #0]
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	4613      	mov	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	3b05      	subs	r3, #5
 8001650:	fa00 f203 	lsl.w	r2, r0, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	635a      	str	r2, [r3, #52]	; 0x34
 800165c:	e03c      	b.n	80016d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b0c      	cmp	r3, #12
 8001664:	d81c      	bhi.n	80016a0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	3b23      	subs	r3, #35	; 0x23
 8001678:	221f      	movs	r2, #31
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	4019      	ands	r1, r3
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	6818      	ldr	r0, [r3, #0]
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	4613      	mov	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	3b23      	subs	r3, #35	; 0x23
 8001692:	fa00 f203 	lsl.w	r2, r0, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	631a      	str	r2, [r3, #48]	; 0x30
 800169e:	e01b      	b.n	80016d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	3b41      	subs	r3, #65	; 0x41
 80016b2:	221f      	movs	r2, #31
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	4019      	ands	r1, r3
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	4613      	mov	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	3b41      	subs	r3, #65	; 0x41
 80016cc:	fa00 f203 	lsl.w	r2, r0, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b09      	cmp	r3, #9
 80016de:	d91c      	bls.n	800171a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	68d9      	ldr	r1, [r3, #12]
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	4613      	mov	r3, r2
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	4413      	add	r3, r2
 80016f0:	3b1e      	subs	r3, #30
 80016f2:	2207      	movs	r2, #7
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	4019      	ands	r1, r3
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	6898      	ldr	r0, [r3, #8]
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	4613      	mov	r3, r2
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	4413      	add	r3, r2
 800170a:	3b1e      	subs	r3, #30
 800170c:	fa00 f203 	lsl.w	r2, r0, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	60da      	str	r2, [r3, #12]
 8001718:	e019      	b.n	800174e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6919      	ldr	r1, [r3, #16]
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4613      	mov	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	4413      	add	r3, r2
 800172a:	2207      	movs	r2, #7
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	4019      	ands	r1, r3
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	6898      	ldr	r0, [r3, #8]
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4613      	mov	r3, r2
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	4413      	add	r3, r2
 8001742:	fa00 f203 	lsl.w	r2, r0, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	430a      	orrs	r2, r1
 800174c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2b10      	cmp	r3, #16
 8001754:	d003      	beq.n	800175e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800175a:	2b11      	cmp	r3, #17
 800175c:	d132      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a1d      	ldr	r2, [pc, #116]	; (80017d8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d125      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d126      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001784:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b10      	cmp	r3, #16
 800178c:	d11a      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800178e:	4b13      	ldr	r3, [pc, #76]	; (80017dc <HAL_ADC_ConfigChannel+0x1e8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a13      	ldr	r2, [pc, #76]	; (80017e0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001794:	fba2 2303 	umull	r2, r3, r2, r3
 8001798:	0c9a      	lsrs	r2, r3, #18
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017a4:	e002      	b.n	80017ac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	3b01      	subs	r3, #1
 80017aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f9      	bne.n	80017a6 <HAL_ADC_ConfigChannel+0x1b2>
 80017b2:	e007      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b8:	f043 0220 	orr.w	r2, r3, #32
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr
 80017d8:	40012400 	.word	0x40012400
 80017dc:	2000003c 	.word	0x2000003c
 80017e0:	431bde83 	.word	0x431bde83

080017e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d039      	beq.n	8001876 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f042 0201 	orr.w	r2, r2, #1
 8001810:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001812:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <ADC_Enable+0x9c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a1b      	ldr	r2, [pc, #108]	; (8001884 <ADC_Enable+0xa0>)
 8001818:	fba2 2303 	umull	r2, r3, r2, r3
 800181c:	0c9b      	lsrs	r3, r3, #18
 800181e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001820:	e002      	b.n	8001828 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	3b01      	subs	r3, #1
 8001826:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f9      	bne.n	8001822 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800182e:	f7ff fcfd 	bl	800122c <HAL_GetTick>
 8001832:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001834:	e018      	b.n	8001868 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001836:	f7ff fcf9 	bl	800122c <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d911      	bls.n	8001868 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001848:	f043 0210 	orr.w	r2, r3, #16
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001854:	f043 0201 	orr.w	r2, r3, #1
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e007      	b.n	8001878 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b01      	cmp	r3, #1
 8001874:	d1df      	bne.n	8001836 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	2000003c 	.word	0x2000003c
 8001884:	431bde83 	.word	0x431bde83

08001888 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d127      	bne.n	80018f2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 0201 	bic.w	r2, r2, #1
 80018b0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018b2:	f7ff fcbb 	bl	800122c <HAL_GetTick>
 80018b6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018b8:	e014      	b.n	80018e4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018ba:	f7ff fcb7 	bl	800122c <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d90d      	bls.n	80018e4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018cc:	f043 0210 	orr.w	r2, r3, #16
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d8:	f043 0201 	orr.w	r2, r3, #1
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e007      	b.n	80018f4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d0e3      	beq.n	80018ba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001912:	2b00      	cmp	r3, #0
 8001914:	d127      	bne.n	8001966 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800192c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001930:	d115      	bne.n	800195e <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001936:	2b00      	cmp	r3, #0
 8001938:	d111      	bne.n	800195e <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d105      	bne.n	800195e <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001956:	f043 0201 	orr.w	r2, r3, #1
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f00b fa08 	bl	800cd74 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001964:	e004      	b.n	8001970 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	4798      	blx	r3
}
 8001970:	bf00      	nop
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	f7ff fe22 	bl	80015d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800198c:	bf00      	nop
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a0:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b2:	f043 0204 	orr.w	r2, r3, #4
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f7ff fe11 	bl	80015e2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019c0:	bf00      	nop
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b087      	sub	sp, #28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d101      	bne.n	80019e6 <HAL_ADCEx_Calibration_Start+0x1e>
 80019e2:	2302      	movs	r3, #2
 80019e4:	e086      	b.n	8001af4 <HAL_ADCEx_Calibration_Start+0x12c>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff ff4a 	bl	8001888 <ADC_ConversionStop_Disable>
 80019f4:	4603      	mov	r3, r0
 80019f6:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80019f8:	7dfb      	ldrb	r3, [r7, #23]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d175      	bne.n	8001aea <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a02:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a06:	f023 0302 	bic.w	r3, r3, #2
 8001a0a:	f043 0202 	orr.w	r2, r3, #2
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001a12:	4b3a      	ldr	r3, [pc, #232]	; (8001afc <HAL_ADCEx_Calibration_Start+0x134>)
 8001a14:	681c      	ldr	r4, [r3, #0]
 8001a16:	2002      	movs	r0, #2
 8001a18:	f003 fc66 	bl	80052e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001a22:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001a24:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001a26:	e002      	b.n	8001a2e <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1f9      	bne.n	8001a28 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff fed5 	bl	80017e4 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f042 0208 	orr.w	r2, r2, #8
 8001a48:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001a4a:	f7ff fbef 	bl	800122c <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001a50:	e014      	b.n	8001a7c <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001a52:	f7ff fbeb 	bl	800122c <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b0a      	cmp	r3, #10
 8001a5e:	d90d      	bls.n	8001a7c <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a64:	f023 0312 	bic.w	r3, r3, #18
 8001a68:	f043 0210 	orr.w	r2, r3, #16
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e03b      	b.n	8001af4 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1e3      	bne.n	8001a52 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f042 0204 	orr.w	r2, r2, #4
 8001a98:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001a9a:	f7ff fbc7 	bl	800122c <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001aa0:	e014      	b.n	8001acc <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001aa2:	f7ff fbc3 	bl	800122c <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b0a      	cmp	r3, #10
 8001aae:	d90d      	bls.n	8001acc <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab4:	f023 0312 	bic.w	r3, r3, #18
 8001ab8:	f043 0210 	orr.w	r2, r3, #16
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e013      	b.n	8001af4 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 0304 	and.w	r3, r3, #4
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1e3      	bne.n	8001aa2 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ade:	f023 0303 	bic.w	r3, r3, #3
 8001ae2:	f043 0201 	orr.w	r2, r3, #1
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	371c      	adds	r7, #28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd90      	pop	{r4, r7, pc}
 8001afc:	2000003c 	.word	0x2000003c

08001b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <__NVIC_SetPriorityGrouping+0x44>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b32:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <__NVIC_SetPriorityGrouping+0x44>)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	60d3      	str	r3, [r2, #12]
}
 8001b38:	bf00      	nop
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b4c:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <__NVIC_GetPriorityGrouping+0x18>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	0a1b      	lsrs	r3, r3, #8
 8001b52:	f003 0307 	and.w	r3, r3, #7
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	db0b      	blt.n	8001b8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	f003 021f 	and.w	r2, r3, #31
 8001b7c:	4906      	ldr	r1, [pc, #24]	; (8001b98 <__NVIC_EnableIRQ+0x34>)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	095b      	lsrs	r3, r3, #5
 8001b84:	2001      	movs	r0, #1
 8001b86:	fa00 f202 	lsl.w	r2, r0, r2
 8001b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	e000e100 	.word	0xe000e100

08001b9c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	db12      	blt.n	8001bd4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	f003 021f 	and.w	r2, r3, #31
 8001bb4:	490a      	ldr	r1, [pc, #40]	; (8001be0 <__NVIC_DisableIRQ+0x44>)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	095b      	lsrs	r3, r3, #5
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001bc2:	3320      	adds	r3, #32
 8001bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001bc8:	f3bf 8f4f 	dsb	sy
}
 8001bcc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bce:	f3bf 8f6f 	isb	sy
}
 8001bd2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	e000e100 	.word	0xe000e100

08001be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	6039      	str	r1, [r7, #0]
 8001bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	db0a      	blt.n	8001c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	490c      	ldr	r1, [pc, #48]	; (8001c30 <__NVIC_SetPriority+0x4c>)
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	0112      	lsls	r2, r2, #4
 8001c04:	b2d2      	uxtb	r2, r2
 8001c06:	440b      	add	r3, r1
 8001c08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c0c:	e00a      	b.n	8001c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	4908      	ldr	r1, [pc, #32]	; (8001c34 <__NVIC_SetPriority+0x50>)
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	3b04      	subs	r3, #4
 8001c1c:	0112      	lsls	r2, r2, #4
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	440b      	add	r3, r1
 8001c22:	761a      	strb	r2, [r3, #24]
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000e100 	.word	0xe000e100
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b089      	sub	sp, #36	; 0x24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	f1c3 0307 	rsb	r3, r3, #7
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	bf28      	it	cs
 8001c56:	2304      	movcs	r3, #4
 8001c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	2b06      	cmp	r3, #6
 8001c60:	d902      	bls.n	8001c68 <NVIC_EncodePriority+0x30>
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	3b03      	subs	r3, #3
 8001c66:	e000      	b.n	8001c6a <NVIC_EncodePriority+0x32>
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43da      	mvns	r2, r3
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	401a      	ands	r2, r3
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c80:	f04f 31ff 	mov.w	r1, #4294967295
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8a:	43d9      	mvns	r1, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c90:	4313      	orrs	r3, r2
         );
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3724      	adds	r7, #36	; 0x24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr

08001c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff ff2b 	bl	8001b00 <__NVIC_SetPriorityGrouping>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b086      	sub	sp, #24
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	4603      	mov	r3, r0
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
 8001cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc4:	f7ff ff40 	bl	8001b48 <__NVIC_GetPriorityGrouping>
 8001cc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	68b9      	ldr	r1, [r7, #8]
 8001cce:	6978      	ldr	r0, [r7, #20]
 8001cd0:	f7ff ffb2 	bl	8001c38 <NVIC_EncodePriority>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cda:	4611      	mov	r1, r2
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff81 	bl	8001be4 <__NVIC_SetPriority>
}
 8001ce2:	bf00      	nop
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff33 	bl	8001b64 <__NVIC_EnableIRQ>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff41 	bl	8001b9c <__NVIC_DisableIRQ>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e059      	b.n	8001dee <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	4b2d      	ldr	r3, [pc, #180]	; (8001df8 <HAL_DMA_Init+0xd4>)
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d80f      	bhi.n	8001d66 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	4b2b      	ldr	r3, [pc, #172]	; (8001dfc <HAL_DMA_Init+0xd8>)
 8001d4e:	4413      	add	r3, r2
 8001d50:	4a2b      	ldr	r2, [pc, #172]	; (8001e00 <HAL_DMA_Init+0xdc>)
 8001d52:	fba2 2303 	umull	r2, r3, r2, r3
 8001d56:	091b      	lsrs	r3, r3, #4
 8001d58:	009a      	lsls	r2, r3, #2
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a28      	ldr	r2, [pc, #160]	; (8001e04 <HAL_DMA_Init+0xe0>)
 8001d62:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d64:	e00e      	b.n	8001d84 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4b26      	ldr	r3, [pc, #152]	; (8001e08 <HAL_DMA_Init+0xe4>)
 8001d6e:	4413      	add	r3, r2
 8001d70:	4a23      	ldr	r2, [pc, #140]	; (8001e00 <HAL_DMA_Init+0xdc>)
 8001d72:	fba2 2303 	umull	r2, r3, r2, r3
 8001d76:	091b      	lsrs	r3, r3, #4
 8001d78:	009a      	lsls	r2, r3, #2
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a22      	ldr	r2, [pc, #136]	; (8001e0c <HAL_DMA_Init+0xe8>)
 8001d82:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2202      	movs	r2, #2
 8001d88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d9a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001d9e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001da8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr
 8001df8:	40020407 	.word	0x40020407
 8001dfc:	bffdfff8 	.word	0xbffdfff8
 8001e00:	cccccccd 	.word	0xcccccccd
 8001e04:	40020000 	.word	0x40020000
 8001e08:	bffdfbf8 	.word	0xbffdfbf8
 8001e0c:	40020400 	.word	0x40020400

08001e10 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
 8001e1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d101      	bne.n	8001e30 <HAL_DMA_Start_IT+0x20>
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	e04a      	b.n	8001ec6 <HAL_DMA_Start_IT+0xb6>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d13a      	bne.n	8001eb8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2202      	movs	r2, #2
 8001e46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 0201 	bic.w	r2, r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 fb82 	bl	8002570 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d008      	beq.n	8001e86 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 020e 	orr.w	r2, r2, #14
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	e00f      	b.n	8001ea6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0204 	bic.w	r2, r2, #4
 8001e94:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f042 020a 	orr.w	r2, r2, #10
 8001ea4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f042 0201 	orr.w	r2, r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	e005      	b.n	8001ec4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d005      	beq.n	8001ef2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2204      	movs	r2, #4
 8001eea:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	73fb      	strb	r3, [r7, #15]
 8001ef0:	e0d6      	b.n	80020a0 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 020e 	bic.w	r2, r2, #14
 8001f00:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0201 	bic.w	r2, r2, #1
 8001f10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	4b64      	ldr	r3, [pc, #400]	; (80020ac <HAL_DMA_Abort_IT+0x1dc>)
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d958      	bls.n	8001fd0 <HAL_DMA_Abort_IT+0x100>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a63      	ldr	r2, [pc, #396]	; (80020b0 <HAL_DMA_Abort_IT+0x1e0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d04f      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0xf8>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a61      	ldr	r2, [pc, #388]	; (80020b4 <HAL_DMA_Abort_IT+0x1e4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d048      	beq.n	8001fc4 <HAL_DMA_Abort_IT+0xf4>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a60      	ldr	r2, [pc, #384]	; (80020b8 <HAL_DMA_Abort_IT+0x1e8>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d040      	beq.n	8001fbe <HAL_DMA_Abort_IT+0xee>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a5e      	ldr	r2, [pc, #376]	; (80020bc <HAL_DMA_Abort_IT+0x1ec>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d038      	beq.n	8001fb8 <HAL_DMA_Abort_IT+0xe8>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a5d      	ldr	r2, [pc, #372]	; (80020c0 <HAL_DMA_Abort_IT+0x1f0>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d030      	beq.n	8001fb2 <HAL_DMA_Abort_IT+0xe2>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a5b      	ldr	r2, [pc, #364]	; (80020c4 <HAL_DMA_Abort_IT+0x1f4>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d028      	beq.n	8001fac <HAL_DMA_Abort_IT+0xdc>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a53      	ldr	r2, [pc, #332]	; (80020ac <HAL_DMA_Abort_IT+0x1dc>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d020      	beq.n	8001fa6 <HAL_DMA_Abort_IT+0xd6>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a57      	ldr	r2, [pc, #348]	; (80020c8 <HAL_DMA_Abort_IT+0x1f8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d019      	beq.n	8001fa2 <HAL_DMA_Abort_IT+0xd2>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a56      	ldr	r2, [pc, #344]	; (80020cc <HAL_DMA_Abort_IT+0x1fc>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d012      	beq.n	8001f9e <HAL_DMA_Abort_IT+0xce>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a54      	ldr	r2, [pc, #336]	; (80020d0 <HAL_DMA_Abort_IT+0x200>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d00a      	beq.n	8001f98 <HAL_DMA_Abort_IT+0xc8>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a53      	ldr	r2, [pc, #332]	; (80020d4 <HAL_DMA_Abort_IT+0x204>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d102      	bne.n	8001f92 <HAL_DMA_Abort_IT+0xc2>
 8001f8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f90:	e01b      	b.n	8001fca <HAL_DMA_Abort_IT+0xfa>
 8001f92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f96:	e018      	b.n	8001fca <HAL_DMA_Abort_IT+0xfa>
 8001f98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f9c:	e015      	b.n	8001fca <HAL_DMA_Abort_IT+0xfa>
 8001f9e:	2310      	movs	r3, #16
 8001fa0:	e013      	b.n	8001fca <HAL_DMA_Abort_IT+0xfa>
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e011      	b.n	8001fca <HAL_DMA_Abort_IT+0xfa>
 8001fa6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001faa:	e00e      	b.n	8001fca <HAL_DMA_Abort_IT+0xfa>
 8001fac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fb0:	e00b      	b.n	8001fca <HAL_DMA_Abort_IT+0xfa>
 8001fb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fb6:	e008      	b.n	8001fca <HAL_DMA_Abort_IT+0xfa>
 8001fb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fbc:	e005      	b.n	8001fca <HAL_DMA_Abort_IT+0xfa>
 8001fbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fc2:	e002      	b.n	8001fca <HAL_DMA_Abort_IT+0xfa>
 8001fc4:	2310      	movs	r3, #16
 8001fc6:	e000      	b.n	8001fca <HAL_DMA_Abort_IT+0xfa>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	4a43      	ldr	r2, [pc, #268]	; (80020d8 <HAL_DMA_Abort_IT+0x208>)
 8001fcc:	6053      	str	r3, [r2, #4]
 8001fce:	e057      	b.n	8002080 <HAL_DMA_Abort_IT+0x1b0>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a36      	ldr	r2, [pc, #216]	; (80020b0 <HAL_DMA_Abort_IT+0x1e0>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d04f      	beq.n	800207a <HAL_DMA_Abort_IT+0x1aa>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a35      	ldr	r2, [pc, #212]	; (80020b4 <HAL_DMA_Abort_IT+0x1e4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d048      	beq.n	8002076 <HAL_DMA_Abort_IT+0x1a6>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a33      	ldr	r2, [pc, #204]	; (80020b8 <HAL_DMA_Abort_IT+0x1e8>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d040      	beq.n	8002070 <HAL_DMA_Abort_IT+0x1a0>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a32      	ldr	r2, [pc, #200]	; (80020bc <HAL_DMA_Abort_IT+0x1ec>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d038      	beq.n	800206a <HAL_DMA_Abort_IT+0x19a>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a30      	ldr	r2, [pc, #192]	; (80020c0 <HAL_DMA_Abort_IT+0x1f0>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d030      	beq.n	8002064 <HAL_DMA_Abort_IT+0x194>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a2f      	ldr	r2, [pc, #188]	; (80020c4 <HAL_DMA_Abort_IT+0x1f4>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d028      	beq.n	800205e <HAL_DMA_Abort_IT+0x18e>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a26      	ldr	r2, [pc, #152]	; (80020ac <HAL_DMA_Abort_IT+0x1dc>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d020      	beq.n	8002058 <HAL_DMA_Abort_IT+0x188>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a2b      	ldr	r2, [pc, #172]	; (80020c8 <HAL_DMA_Abort_IT+0x1f8>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d019      	beq.n	8002054 <HAL_DMA_Abort_IT+0x184>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a29      	ldr	r2, [pc, #164]	; (80020cc <HAL_DMA_Abort_IT+0x1fc>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d012      	beq.n	8002050 <HAL_DMA_Abort_IT+0x180>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a28      	ldr	r2, [pc, #160]	; (80020d0 <HAL_DMA_Abort_IT+0x200>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d00a      	beq.n	800204a <HAL_DMA_Abort_IT+0x17a>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a26      	ldr	r2, [pc, #152]	; (80020d4 <HAL_DMA_Abort_IT+0x204>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d102      	bne.n	8002044 <HAL_DMA_Abort_IT+0x174>
 800203e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002042:	e01b      	b.n	800207c <HAL_DMA_Abort_IT+0x1ac>
 8002044:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002048:	e018      	b.n	800207c <HAL_DMA_Abort_IT+0x1ac>
 800204a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800204e:	e015      	b.n	800207c <HAL_DMA_Abort_IT+0x1ac>
 8002050:	2310      	movs	r3, #16
 8002052:	e013      	b.n	800207c <HAL_DMA_Abort_IT+0x1ac>
 8002054:	2301      	movs	r3, #1
 8002056:	e011      	b.n	800207c <HAL_DMA_Abort_IT+0x1ac>
 8002058:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800205c:	e00e      	b.n	800207c <HAL_DMA_Abort_IT+0x1ac>
 800205e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002062:	e00b      	b.n	800207c <HAL_DMA_Abort_IT+0x1ac>
 8002064:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002068:	e008      	b.n	800207c <HAL_DMA_Abort_IT+0x1ac>
 800206a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800206e:	e005      	b.n	800207c <HAL_DMA_Abort_IT+0x1ac>
 8002070:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002074:	e002      	b.n	800207c <HAL_DMA_Abort_IT+0x1ac>
 8002076:	2310      	movs	r3, #16
 8002078:	e000      	b.n	800207c <HAL_DMA_Abort_IT+0x1ac>
 800207a:	2301      	movs	r3, #1
 800207c:	4a17      	ldr	r2, [pc, #92]	; (80020dc <HAL_DMA_Abort_IT+0x20c>)
 800207e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	4798      	blx	r3
    } 
  }
  return status;
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40020080 	.word	0x40020080
 80020b0:	40020008 	.word	0x40020008
 80020b4:	4002001c 	.word	0x4002001c
 80020b8:	40020030 	.word	0x40020030
 80020bc:	40020044 	.word	0x40020044
 80020c0:	40020058 	.word	0x40020058
 80020c4:	4002006c 	.word	0x4002006c
 80020c8:	40020408 	.word	0x40020408
 80020cc:	4002041c 	.word	0x4002041c
 80020d0:	40020430 	.word	0x40020430
 80020d4:	40020444 	.word	0x40020444
 80020d8:	40020400 	.word	0x40020400
 80020dc:	40020000 	.word	0x40020000

080020e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	2204      	movs	r2, #4
 80020fe:	409a      	lsls	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4013      	ands	r3, r2
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 80d6 	beq.w	80022b6 <HAL_DMA_IRQHandler+0x1d6>
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 80d0 	beq.w	80022b6 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0320 	and.w	r3, r3, #32
 8002120:	2b00      	cmp	r3, #0
 8002122:	d107      	bne.n	8002134 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0204 	bic.w	r2, r2, #4
 8002132:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	4b9b      	ldr	r3, [pc, #620]	; (80023a8 <HAL_DMA_IRQHandler+0x2c8>)
 800213c:	429a      	cmp	r2, r3
 800213e:	d958      	bls.n	80021f2 <HAL_DMA_IRQHandler+0x112>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a99      	ldr	r2, [pc, #612]	; (80023ac <HAL_DMA_IRQHandler+0x2cc>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d04f      	beq.n	80021ea <HAL_DMA_IRQHandler+0x10a>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a98      	ldr	r2, [pc, #608]	; (80023b0 <HAL_DMA_IRQHandler+0x2d0>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d048      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x106>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a96      	ldr	r2, [pc, #600]	; (80023b4 <HAL_DMA_IRQHandler+0x2d4>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d040      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x100>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a95      	ldr	r2, [pc, #596]	; (80023b8 <HAL_DMA_IRQHandler+0x2d8>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d038      	beq.n	80021da <HAL_DMA_IRQHandler+0xfa>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a93      	ldr	r2, [pc, #588]	; (80023bc <HAL_DMA_IRQHandler+0x2dc>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d030      	beq.n	80021d4 <HAL_DMA_IRQHandler+0xf4>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a92      	ldr	r2, [pc, #584]	; (80023c0 <HAL_DMA_IRQHandler+0x2e0>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d028      	beq.n	80021ce <HAL_DMA_IRQHandler+0xee>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a89      	ldr	r2, [pc, #548]	; (80023a8 <HAL_DMA_IRQHandler+0x2c8>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d020      	beq.n	80021c8 <HAL_DMA_IRQHandler+0xe8>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a8e      	ldr	r2, [pc, #568]	; (80023c4 <HAL_DMA_IRQHandler+0x2e4>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d019      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xe4>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a8c      	ldr	r2, [pc, #560]	; (80023c8 <HAL_DMA_IRQHandler+0x2e8>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d012      	beq.n	80021c0 <HAL_DMA_IRQHandler+0xe0>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a8b      	ldr	r2, [pc, #556]	; (80023cc <HAL_DMA_IRQHandler+0x2ec>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d00a      	beq.n	80021ba <HAL_DMA_IRQHandler+0xda>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a89      	ldr	r2, [pc, #548]	; (80023d0 <HAL_DMA_IRQHandler+0x2f0>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d102      	bne.n	80021b4 <HAL_DMA_IRQHandler+0xd4>
 80021ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021b2:	e01b      	b.n	80021ec <HAL_DMA_IRQHandler+0x10c>
 80021b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021b8:	e018      	b.n	80021ec <HAL_DMA_IRQHandler+0x10c>
 80021ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021be:	e015      	b.n	80021ec <HAL_DMA_IRQHandler+0x10c>
 80021c0:	2340      	movs	r3, #64	; 0x40
 80021c2:	e013      	b.n	80021ec <HAL_DMA_IRQHandler+0x10c>
 80021c4:	2304      	movs	r3, #4
 80021c6:	e011      	b.n	80021ec <HAL_DMA_IRQHandler+0x10c>
 80021c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80021cc:	e00e      	b.n	80021ec <HAL_DMA_IRQHandler+0x10c>
 80021ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021d2:	e00b      	b.n	80021ec <HAL_DMA_IRQHandler+0x10c>
 80021d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021d8:	e008      	b.n	80021ec <HAL_DMA_IRQHandler+0x10c>
 80021da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021de:	e005      	b.n	80021ec <HAL_DMA_IRQHandler+0x10c>
 80021e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021e4:	e002      	b.n	80021ec <HAL_DMA_IRQHandler+0x10c>
 80021e6:	2340      	movs	r3, #64	; 0x40
 80021e8:	e000      	b.n	80021ec <HAL_DMA_IRQHandler+0x10c>
 80021ea:	2304      	movs	r3, #4
 80021ec:	4a79      	ldr	r2, [pc, #484]	; (80023d4 <HAL_DMA_IRQHandler+0x2f4>)
 80021ee:	6053      	str	r3, [r2, #4]
 80021f0:	e057      	b.n	80022a2 <HAL_DMA_IRQHandler+0x1c2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a6d      	ldr	r2, [pc, #436]	; (80023ac <HAL_DMA_IRQHandler+0x2cc>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d04f      	beq.n	800229c <HAL_DMA_IRQHandler+0x1bc>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a6b      	ldr	r2, [pc, #428]	; (80023b0 <HAL_DMA_IRQHandler+0x2d0>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d048      	beq.n	8002298 <HAL_DMA_IRQHandler+0x1b8>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a6a      	ldr	r2, [pc, #424]	; (80023b4 <HAL_DMA_IRQHandler+0x2d4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d040      	beq.n	8002292 <HAL_DMA_IRQHandler+0x1b2>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a68      	ldr	r2, [pc, #416]	; (80023b8 <HAL_DMA_IRQHandler+0x2d8>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d038      	beq.n	800228c <HAL_DMA_IRQHandler+0x1ac>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a67      	ldr	r2, [pc, #412]	; (80023bc <HAL_DMA_IRQHandler+0x2dc>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d030      	beq.n	8002286 <HAL_DMA_IRQHandler+0x1a6>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a65      	ldr	r2, [pc, #404]	; (80023c0 <HAL_DMA_IRQHandler+0x2e0>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d028      	beq.n	8002280 <HAL_DMA_IRQHandler+0x1a0>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a5d      	ldr	r2, [pc, #372]	; (80023a8 <HAL_DMA_IRQHandler+0x2c8>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d020      	beq.n	800227a <HAL_DMA_IRQHandler+0x19a>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a61      	ldr	r2, [pc, #388]	; (80023c4 <HAL_DMA_IRQHandler+0x2e4>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d019      	beq.n	8002276 <HAL_DMA_IRQHandler+0x196>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a60      	ldr	r2, [pc, #384]	; (80023c8 <HAL_DMA_IRQHandler+0x2e8>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d012      	beq.n	8002272 <HAL_DMA_IRQHandler+0x192>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a5e      	ldr	r2, [pc, #376]	; (80023cc <HAL_DMA_IRQHandler+0x2ec>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d00a      	beq.n	800226c <HAL_DMA_IRQHandler+0x18c>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a5d      	ldr	r2, [pc, #372]	; (80023d0 <HAL_DMA_IRQHandler+0x2f0>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d102      	bne.n	8002266 <HAL_DMA_IRQHandler+0x186>
 8002260:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002264:	e01b      	b.n	800229e <HAL_DMA_IRQHandler+0x1be>
 8002266:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800226a:	e018      	b.n	800229e <HAL_DMA_IRQHandler+0x1be>
 800226c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002270:	e015      	b.n	800229e <HAL_DMA_IRQHandler+0x1be>
 8002272:	2340      	movs	r3, #64	; 0x40
 8002274:	e013      	b.n	800229e <HAL_DMA_IRQHandler+0x1be>
 8002276:	2304      	movs	r3, #4
 8002278:	e011      	b.n	800229e <HAL_DMA_IRQHandler+0x1be>
 800227a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800227e:	e00e      	b.n	800229e <HAL_DMA_IRQHandler+0x1be>
 8002280:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002284:	e00b      	b.n	800229e <HAL_DMA_IRQHandler+0x1be>
 8002286:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800228a:	e008      	b.n	800229e <HAL_DMA_IRQHandler+0x1be>
 800228c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002290:	e005      	b.n	800229e <HAL_DMA_IRQHandler+0x1be>
 8002292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002296:	e002      	b.n	800229e <HAL_DMA_IRQHandler+0x1be>
 8002298:	2340      	movs	r3, #64	; 0x40
 800229a:	e000      	b.n	800229e <HAL_DMA_IRQHandler+0x1be>
 800229c:	2304      	movs	r3, #4
 800229e:	4a4e      	ldr	r2, [pc, #312]	; (80023d8 <HAL_DMA_IRQHandler+0x2f8>)
 80022a0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 8136 	beq.w	8002518 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80022b4:	e130      	b.n	8002518 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	2202      	movs	r2, #2
 80022bc:	409a      	lsls	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	4013      	ands	r3, r2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 80f8 	beq.w	80024b8 <HAL_DMA_IRQHandler+0x3d8>
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 80f2 	beq.w	80024b8 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0320 	and.w	r3, r3, #32
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10b      	bne.n	80022fa <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 020a 	bic.w	r2, r2, #10
 80022f0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	4b29      	ldr	r3, [pc, #164]	; (80023a8 <HAL_DMA_IRQHandler+0x2c8>)
 8002302:	429a      	cmp	r2, r3
 8002304:	d973      	bls.n	80023ee <HAL_DMA_IRQHandler+0x30e>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a28      	ldr	r2, [pc, #160]	; (80023ac <HAL_DMA_IRQHandler+0x2cc>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d06a      	beq.n	80023e6 <HAL_DMA_IRQHandler+0x306>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a26      	ldr	r2, [pc, #152]	; (80023b0 <HAL_DMA_IRQHandler+0x2d0>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d063      	beq.n	80023e2 <HAL_DMA_IRQHandler+0x302>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a25      	ldr	r2, [pc, #148]	; (80023b4 <HAL_DMA_IRQHandler+0x2d4>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d05b      	beq.n	80023dc <HAL_DMA_IRQHandler+0x2fc>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a23      	ldr	r2, [pc, #140]	; (80023b8 <HAL_DMA_IRQHandler+0x2d8>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d038      	beq.n	80023a0 <HAL_DMA_IRQHandler+0x2c0>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a22      	ldr	r2, [pc, #136]	; (80023bc <HAL_DMA_IRQHandler+0x2dc>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d030      	beq.n	800239a <HAL_DMA_IRQHandler+0x2ba>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a20      	ldr	r2, [pc, #128]	; (80023c0 <HAL_DMA_IRQHandler+0x2e0>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d028      	beq.n	8002394 <HAL_DMA_IRQHandler+0x2b4>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a18      	ldr	r2, [pc, #96]	; (80023a8 <HAL_DMA_IRQHandler+0x2c8>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d020      	beq.n	800238e <HAL_DMA_IRQHandler+0x2ae>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a1c      	ldr	r2, [pc, #112]	; (80023c4 <HAL_DMA_IRQHandler+0x2e4>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d019      	beq.n	800238a <HAL_DMA_IRQHandler+0x2aa>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a1b      	ldr	r2, [pc, #108]	; (80023c8 <HAL_DMA_IRQHandler+0x2e8>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d012      	beq.n	8002386 <HAL_DMA_IRQHandler+0x2a6>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a19      	ldr	r2, [pc, #100]	; (80023cc <HAL_DMA_IRQHandler+0x2ec>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d00a      	beq.n	8002380 <HAL_DMA_IRQHandler+0x2a0>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a18      	ldr	r2, [pc, #96]	; (80023d0 <HAL_DMA_IRQHandler+0x2f0>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d102      	bne.n	800237a <HAL_DMA_IRQHandler+0x29a>
 8002374:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002378:	e036      	b.n	80023e8 <HAL_DMA_IRQHandler+0x308>
 800237a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800237e:	e033      	b.n	80023e8 <HAL_DMA_IRQHandler+0x308>
 8002380:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002384:	e030      	b.n	80023e8 <HAL_DMA_IRQHandler+0x308>
 8002386:	2320      	movs	r3, #32
 8002388:	e02e      	b.n	80023e8 <HAL_DMA_IRQHandler+0x308>
 800238a:	2302      	movs	r3, #2
 800238c:	e02c      	b.n	80023e8 <HAL_DMA_IRQHandler+0x308>
 800238e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002392:	e029      	b.n	80023e8 <HAL_DMA_IRQHandler+0x308>
 8002394:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002398:	e026      	b.n	80023e8 <HAL_DMA_IRQHandler+0x308>
 800239a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800239e:	e023      	b.n	80023e8 <HAL_DMA_IRQHandler+0x308>
 80023a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023a4:	e020      	b.n	80023e8 <HAL_DMA_IRQHandler+0x308>
 80023a6:	bf00      	nop
 80023a8:	40020080 	.word	0x40020080
 80023ac:	40020008 	.word	0x40020008
 80023b0:	4002001c 	.word	0x4002001c
 80023b4:	40020030 	.word	0x40020030
 80023b8:	40020044 	.word	0x40020044
 80023bc:	40020058 	.word	0x40020058
 80023c0:	4002006c 	.word	0x4002006c
 80023c4:	40020408 	.word	0x40020408
 80023c8:	4002041c 	.word	0x4002041c
 80023cc:	40020430 	.word	0x40020430
 80023d0:	40020444 	.word	0x40020444
 80023d4:	40020400 	.word	0x40020400
 80023d8:	40020000 	.word	0x40020000
 80023dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023e0:	e002      	b.n	80023e8 <HAL_DMA_IRQHandler+0x308>
 80023e2:	2320      	movs	r3, #32
 80023e4:	e000      	b.n	80023e8 <HAL_DMA_IRQHandler+0x308>
 80023e6:	2302      	movs	r3, #2
 80023e8:	4a4e      	ldr	r2, [pc, #312]	; (8002524 <HAL_DMA_IRQHandler+0x444>)
 80023ea:	6053      	str	r3, [r2, #4]
 80023ec:	e057      	b.n	800249e <HAL_DMA_IRQHandler+0x3be>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a4d      	ldr	r2, [pc, #308]	; (8002528 <HAL_DMA_IRQHandler+0x448>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d04f      	beq.n	8002498 <HAL_DMA_IRQHandler+0x3b8>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a4b      	ldr	r2, [pc, #300]	; (800252c <HAL_DMA_IRQHandler+0x44c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d048      	beq.n	8002494 <HAL_DMA_IRQHandler+0x3b4>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a4a      	ldr	r2, [pc, #296]	; (8002530 <HAL_DMA_IRQHandler+0x450>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d040      	beq.n	800248e <HAL_DMA_IRQHandler+0x3ae>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a48      	ldr	r2, [pc, #288]	; (8002534 <HAL_DMA_IRQHandler+0x454>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d038      	beq.n	8002488 <HAL_DMA_IRQHandler+0x3a8>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a47      	ldr	r2, [pc, #284]	; (8002538 <HAL_DMA_IRQHandler+0x458>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d030      	beq.n	8002482 <HAL_DMA_IRQHandler+0x3a2>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a45      	ldr	r2, [pc, #276]	; (800253c <HAL_DMA_IRQHandler+0x45c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d028      	beq.n	800247c <HAL_DMA_IRQHandler+0x39c>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a44      	ldr	r2, [pc, #272]	; (8002540 <HAL_DMA_IRQHandler+0x460>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d020      	beq.n	8002476 <HAL_DMA_IRQHandler+0x396>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a42      	ldr	r2, [pc, #264]	; (8002544 <HAL_DMA_IRQHandler+0x464>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d019      	beq.n	8002472 <HAL_DMA_IRQHandler+0x392>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a41      	ldr	r2, [pc, #260]	; (8002548 <HAL_DMA_IRQHandler+0x468>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d012      	beq.n	800246e <HAL_DMA_IRQHandler+0x38e>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a3f      	ldr	r2, [pc, #252]	; (800254c <HAL_DMA_IRQHandler+0x46c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d00a      	beq.n	8002468 <HAL_DMA_IRQHandler+0x388>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a3e      	ldr	r2, [pc, #248]	; (8002550 <HAL_DMA_IRQHandler+0x470>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d102      	bne.n	8002462 <HAL_DMA_IRQHandler+0x382>
 800245c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002460:	e01b      	b.n	800249a <HAL_DMA_IRQHandler+0x3ba>
 8002462:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002466:	e018      	b.n	800249a <HAL_DMA_IRQHandler+0x3ba>
 8002468:	f44f 7300 	mov.w	r3, #512	; 0x200
 800246c:	e015      	b.n	800249a <HAL_DMA_IRQHandler+0x3ba>
 800246e:	2320      	movs	r3, #32
 8002470:	e013      	b.n	800249a <HAL_DMA_IRQHandler+0x3ba>
 8002472:	2302      	movs	r3, #2
 8002474:	e011      	b.n	800249a <HAL_DMA_IRQHandler+0x3ba>
 8002476:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800247a:	e00e      	b.n	800249a <HAL_DMA_IRQHandler+0x3ba>
 800247c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002480:	e00b      	b.n	800249a <HAL_DMA_IRQHandler+0x3ba>
 8002482:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002486:	e008      	b.n	800249a <HAL_DMA_IRQHandler+0x3ba>
 8002488:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800248c:	e005      	b.n	800249a <HAL_DMA_IRQHandler+0x3ba>
 800248e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002492:	e002      	b.n	800249a <HAL_DMA_IRQHandler+0x3ba>
 8002494:	2320      	movs	r3, #32
 8002496:	e000      	b.n	800249a <HAL_DMA_IRQHandler+0x3ba>
 8002498:	2302      	movs	r3, #2
 800249a:	4a2e      	ldr	r2, [pc, #184]	; (8002554 <HAL_DMA_IRQHandler+0x474>)
 800249c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d034      	beq.n	8002518 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80024b6:	e02f      	b.n	8002518 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	2208      	movs	r2, #8
 80024be:	409a      	lsls	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d028      	beq.n	800251a <HAL_DMA_IRQHandler+0x43a>
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d023      	beq.n	800251a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 020e 	bic.w	r2, r2, #14
 80024e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ea:	2101      	movs	r1, #1
 80024ec:	fa01 f202 	lsl.w	r2, r1, r2
 80024f0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250c:	2b00      	cmp	r3, #0
 800250e:	d004      	beq.n	800251a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	4798      	blx	r3
    }
  }
  return;
 8002518:	bf00      	nop
 800251a:	bf00      	nop
}
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40020400 	.word	0x40020400
 8002528:	40020008 	.word	0x40020008
 800252c:	4002001c 	.word	0x4002001c
 8002530:	40020030 	.word	0x40020030
 8002534:	40020044 	.word	0x40020044
 8002538:	40020058 	.word	0x40020058
 800253c:	4002006c 	.word	0x4002006c
 8002540:	40020080 	.word	0x40020080
 8002544:	40020408 	.word	0x40020408
 8002548:	4002041c 	.word	0x4002041c
 800254c:	40020430 	.word	0x40020430
 8002550:	40020444 	.word	0x40020444
 8002554:	40020000 	.word	0x40020000

08002558 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8002566:	4618      	mov	r0, r3
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr

08002570 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
 800257c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002586:	2101      	movs	r1, #1
 8002588:	fa01 f202 	lsl.w	r2, r1, r2
 800258c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b10      	cmp	r3, #16
 800259c:	d108      	bne.n	80025b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80025ae:	e007      	b.n	80025c0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	60da      	str	r2, [r3, #12]
}
 80025c0:	bf00      	nop
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr
	...

080025cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b08b      	sub	sp, #44	; 0x2c
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025d6:	2300      	movs	r3, #0
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025da:	2300      	movs	r3, #0
 80025dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025de:	e179      	b.n	80028d4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025e0:	2201      	movs	r2, #1
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	69fa      	ldr	r2, [r7, #28]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	f040 8168 	bne.w	80028ce <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	4aa0      	ldr	r2, [pc, #640]	; (8002884 <HAL_GPIO_Init+0x2b8>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d05e      	beq.n	80026c6 <HAL_GPIO_Init+0xfa>
 8002608:	4a9e      	ldr	r2, [pc, #632]	; (8002884 <HAL_GPIO_Init+0x2b8>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d875      	bhi.n	80026fa <HAL_GPIO_Init+0x12e>
 800260e:	4a9e      	ldr	r2, [pc, #632]	; (8002888 <HAL_GPIO_Init+0x2bc>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d058      	beq.n	80026c6 <HAL_GPIO_Init+0xfa>
 8002614:	4a9c      	ldr	r2, [pc, #624]	; (8002888 <HAL_GPIO_Init+0x2bc>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d86f      	bhi.n	80026fa <HAL_GPIO_Init+0x12e>
 800261a:	4a9c      	ldr	r2, [pc, #624]	; (800288c <HAL_GPIO_Init+0x2c0>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d052      	beq.n	80026c6 <HAL_GPIO_Init+0xfa>
 8002620:	4a9a      	ldr	r2, [pc, #616]	; (800288c <HAL_GPIO_Init+0x2c0>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d869      	bhi.n	80026fa <HAL_GPIO_Init+0x12e>
 8002626:	4a9a      	ldr	r2, [pc, #616]	; (8002890 <HAL_GPIO_Init+0x2c4>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d04c      	beq.n	80026c6 <HAL_GPIO_Init+0xfa>
 800262c:	4a98      	ldr	r2, [pc, #608]	; (8002890 <HAL_GPIO_Init+0x2c4>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d863      	bhi.n	80026fa <HAL_GPIO_Init+0x12e>
 8002632:	4a98      	ldr	r2, [pc, #608]	; (8002894 <HAL_GPIO_Init+0x2c8>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d046      	beq.n	80026c6 <HAL_GPIO_Init+0xfa>
 8002638:	4a96      	ldr	r2, [pc, #600]	; (8002894 <HAL_GPIO_Init+0x2c8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d85d      	bhi.n	80026fa <HAL_GPIO_Init+0x12e>
 800263e:	2b12      	cmp	r3, #18
 8002640:	d82a      	bhi.n	8002698 <HAL_GPIO_Init+0xcc>
 8002642:	2b12      	cmp	r3, #18
 8002644:	d859      	bhi.n	80026fa <HAL_GPIO_Init+0x12e>
 8002646:	a201      	add	r2, pc, #4	; (adr r2, 800264c <HAL_GPIO_Init+0x80>)
 8002648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800264c:	080026c7 	.word	0x080026c7
 8002650:	080026a1 	.word	0x080026a1
 8002654:	080026b3 	.word	0x080026b3
 8002658:	080026f5 	.word	0x080026f5
 800265c:	080026fb 	.word	0x080026fb
 8002660:	080026fb 	.word	0x080026fb
 8002664:	080026fb 	.word	0x080026fb
 8002668:	080026fb 	.word	0x080026fb
 800266c:	080026fb 	.word	0x080026fb
 8002670:	080026fb 	.word	0x080026fb
 8002674:	080026fb 	.word	0x080026fb
 8002678:	080026fb 	.word	0x080026fb
 800267c:	080026fb 	.word	0x080026fb
 8002680:	080026fb 	.word	0x080026fb
 8002684:	080026fb 	.word	0x080026fb
 8002688:	080026fb 	.word	0x080026fb
 800268c:	080026fb 	.word	0x080026fb
 8002690:	080026a9 	.word	0x080026a9
 8002694:	080026bd 	.word	0x080026bd
 8002698:	4a7f      	ldr	r2, [pc, #508]	; (8002898 <HAL_GPIO_Init+0x2cc>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d013      	beq.n	80026c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800269e:	e02c      	b.n	80026fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	623b      	str	r3, [r7, #32]
          break;
 80026a6:	e029      	b.n	80026fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	3304      	adds	r3, #4
 80026ae:	623b      	str	r3, [r7, #32]
          break;
 80026b0:	e024      	b.n	80026fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	3308      	adds	r3, #8
 80026b8:	623b      	str	r3, [r7, #32]
          break;
 80026ba:	e01f      	b.n	80026fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	330c      	adds	r3, #12
 80026c2:	623b      	str	r3, [r7, #32]
          break;
 80026c4:	e01a      	b.n	80026fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d102      	bne.n	80026d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026ce:	2304      	movs	r3, #4
 80026d0:	623b      	str	r3, [r7, #32]
          break;
 80026d2:	e013      	b.n	80026fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d105      	bne.n	80026e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026dc:	2308      	movs	r3, #8
 80026de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69fa      	ldr	r2, [r7, #28]
 80026e4:	611a      	str	r2, [r3, #16]
          break;
 80026e6:	e009      	b.n	80026fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026e8:	2308      	movs	r3, #8
 80026ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69fa      	ldr	r2, [r7, #28]
 80026f0:	615a      	str	r2, [r3, #20]
          break;
 80026f2:	e003      	b.n	80026fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026f4:	2300      	movs	r3, #0
 80026f6:	623b      	str	r3, [r7, #32]
          break;
 80026f8:	e000      	b.n	80026fc <HAL_GPIO_Init+0x130>
          break;
 80026fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	2bff      	cmp	r3, #255	; 0xff
 8002700:	d801      	bhi.n	8002706 <HAL_GPIO_Init+0x13a>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	e001      	b.n	800270a <HAL_GPIO_Init+0x13e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3304      	adds	r3, #4
 800270a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	2bff      	cmp	r3, #255	; 0xff
 8002710:	d802      	bhi.n	8002718 <HAL_GPIO_Init+0x14c>
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	e002      	b.n	800271e <HAL_GPIO_Init+0x152>
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	3b08      	subs	r3, #8
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	210f      	movs	r1, #15
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	fa01 f303 	lsl.w	r3, r1, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	401a      	ands	r2, r3
 8002730:	6a39      	ldr	r1, [r7, #32]
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	fa01 f303 	lsl.w	r3, r1, r3
 8002738:	431a      	orrs	r2, r3
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 80c1 	beq.w	80028ce <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800274c:	4b53      	ldr	r3, [pc, #332]	; (800289c <HAL_GPIO_Init+0x2d0>)
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	4a52      	ldr	r2, [pc, #328]	; (800289c <HAL_GPIO_Init+0x2d0>)
 8002752:	f043 0301 	orr.w	r3, r3, #1
 8002756:	6193      	str	r3, [r2, #24]
 8002758:	4b50      	ldr	r3, [pc, #320]	; (800289c <HAL_GPIO_Init+0x2d0>)
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002764:	4a4e      	ldr	r2, [pc, #312]	; (80028a0 <HAL_GPIO_Init+0x2d4>)
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	089b      	lsrs	r3, r3, #2
 800276a:	3302      	adds	r3, #2
 800276c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002770:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	f003 0303 	and.w	r3, r3, #3
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	220f      	movs	r2, #15
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	4013      	ands	r3, r2
 8002786:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a46      	ldr	r2, [pc, #280]	; (80028a4 <HAL_GPIO_Init+0x2d8>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d01f      	beq.n	80027d0 <HAL_GPIO_Init+0x204>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a45      	ldr	r2, [pc, #276]	; (80028a8 <HAL_GPIO_Init+0x2dc>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d019      	beq.n	80027cc <HAL_GPIO_Init+0x200>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a44      	ldr	r2, [pc, #272]	; (80028ac <HAL_GPIO_Init+0x2e0>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d013      	beq.n	80027c8 <HAL_GPIO_Init+0x1fc>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a43      	ldr	r2, [pc, #268]	; (80028b0 <HAL_GPIO_Init+0x2e4>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d00d      	beq.n	80027c4 <HAL_GPIO_Init+0x1f8>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a42      	ldr	r2, [pc, #264]	; (80028b4 <HAL_GPIO_Init+0x2e8>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d007      	beq.n	80027c0 <HAL_GPIO_Init+0x1f4>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a41      	ldr	r2, [pc, #260]	; (80028b8 <HAL_GPIO_Init+0x2ec>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d101      	bne.n	80027bc <HAL_GPIO_Init+0x1f0>
 80027b8:	2305      	movs	r3, #5
 80027ba:	e00a      	b.n	80027d2 <HAL_GPIO_Init+0x206>
 80027bc:	2306      	movs	r3, #6
 80027be:	e008      	b.n	80027d2 <HAL_GPIO_Init+0x206>
 80027c0:	2304      	movs	r3, #4
 80027c2:	e006      	b.n	80027d2 <HAL_GPIO_Init+0x206>
 80027c4:	2303      	movs	r3, #3
 80027c6:	e004      	b.n	80027d2 <HAL_GPIO_Init+0x206>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e002      	b.n	80027d2 <HAL_GPIO_Init+0x206>
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <HAL_GPIO_Init+0x206>
 80027d0:	2300      	movs	r3, #0
 80027d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d4:	f002 0203 	and.w	r2, r2, #3
 80027d8:	0092      	lsls	r2, r2, #2
 80027da:	4093      	lsls	r3, r2
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	4313      	orrs	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027e2:	492f      	ldr	r1, [pc, #188]	; (80028a0 <HAL_GPIO_Init+0x2d4>)
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	089b      	lsrs	r3, r3, #2
 80027e8:	3302      	adds	r3, #2
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d006      	beq.n	800280a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027fc:	4b2f      	ldr	r3, [pc, #188]	; (80028bc <HAL_GPIO_Init+0x2f0>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	492e      	ldr	r1, [pc, #184]	; (80028bc <HAL_GPIO_Init+0x2f0>)
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	4313      	orrs	r3, r2
 8002806:	600b      	str	r3, [r1, #0]
 8002808:	e006      	b.n	8002818 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800280a:	4b2c      	ldr	r3, [pc, #176]	; (80028bc <HAL_GPIO_Init+0x2f0>)
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	43db      	mvns	r3, r3
 8002812:	492a      	ldr	r1, [pc, #168]	; (80028bc <HAL_GPIO_Init+0x2f0>)
 8002814:	4013      	ands	r3, r2
 8002816:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d006      	beq.n	8002832 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002824:	4b25      	ldr	r3, [pc, #148]	; (80028bc <HAL_GPIO_Init+0x2f0>)
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	4924      	ldr	r1, [pc, #144]	; (80028bc <HAL_GPIO_Init+0x2f0>)
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	4313      	orrs	r3, r2
 800282e:	604b      	str	r3, [r1, #4]
 8002830:	e006      	b.n	8002840 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002832:	4b22      	ldr	r3, [pc, #136]	; (80028bc <HAL_GPIO_Init+0x2f0>)
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	43db      	mvns	r3, r3
 800283a:	4920      	ldr	r1, [pc, #128]	; (80028bc <HAL_GPIO_Init+0x2f0>)
 800283c:	4013      	ands	r3, r2
 800283e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d006      	beq.n	800285a <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800284c:	4b1b      	ldr	r3, [pc, #108]	; (80028bc <HAL_GPIO_Init+0x2f0>)
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	491a      	ldr	r1, [pc, #104]	; (80028bc <HAL_GPIO_Init+0x2f0>)
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	4313      	orrs	r3, r2
 8002856:	608b      	str	r3, [r1, #8]
 8002858:	e006      	b.n	8002868 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800285a:	4b18      	ldr	r3, [pc, #96]	; (80028bc <HAL_GPIO_Init+0x2f0>)
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	43db      	mvns	r3, r3
 8002862:	4916      	ldr	r1, [pc, #88]	; (80028bc <HAL_GPIO_Init+0x2f0>)
 8002864:	4013      	ands	r3, r2
 8002866:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d025      	beq.n	80028c0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002874:	4b11      	ldr	r3, [pc, #68]	; (80028bc <HAL_GPIO_Init+0x2f0>)
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	4910      	ldr	r1, [pc, #64]	; (80028bc <HAL_GPIO_Init+0x2f0>)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	60cb      	str	r3, [r1, #12]
 8002880:	e025      	b.n	80028ce <HAL_GPIO_Init+0x302>
 8002882:	bf00      	nop
 8002884:	10320000 	.word	0x10320000
 8002888:	10310000 	.word	0x10310000
 800288c:	10220000 	.word	0x10220000
 8002890:	10210000 	.word	0x10210000
 8002894:	10120000 	.word	0x10120000
 8002898:	10110000 	.word	0x10110000
 800289c:	40021000 	.word	0x40021000
 80028a0:	40010000 	.word	0x40010000
 80028a4:	40010800 	.word	0x40010800
 80028a8:	40010c00 	.word	0x40010c00
 80028ac:	40011000 	.word	0x40011000
 80028b0:	40011400 	.word	0x40011400
 80028b4:	40011800 	.word	0x40011800
 80028b8:	40011c00 	.word	0x40011c00
 80028bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_GPIO_Init+0x324>)
 80028c2:	68da      	ldr	r2, [r3, #12]
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	43db      	mvns	r3, r3
 80028c8:	4909      	ldr	r1, [pc, #36]	; (80028f0 <HAL_GPIO_Init+0x324>)
 80028ca:	4013      	ands	r3, r2
 80028cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	3301      	adds	r3, #1
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	fa22 f303 	lsr.w	r3, r2, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f47f ae7e 	bne.w	80025e0 <HAL_GPIO_Init+0x14>
  }
}
 80028e4:	bf00      	nop
 80028e6:	bf00      	nop
 80028e8:	372c      	adds	r7, #44	; 0x2c
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr
 80028f0:	40010400 	.word	0x40010400

080028f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b089      	sub	sp, #36	; 0x24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028fe:	2300      	movs	r3, #0
 8002900:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8002902:	e0a6      	b.n	8002a52 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002904:	2201      	movs	r2, #1
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	4013      	ands	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 8099 	beq.w	8002a4c <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800291a:	4a54      	ldr	r2, [pc, #336]	; (8002a6c <HAL_GPIO_DeInit+0x178>)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	089b      	lsrs	r3, r3, #2
 8002920:	3302      	adds	r3, #2
 8002922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002926:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	220f      	movs	r2, #15
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	4013      	ands	r3, r2
 800293a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a4c      	ldr	r2, [pc, #304]	; (8002a70 <HAL_GPIO_DeInit+0x17c>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d01f      	beq.n	8002984 <HAL_GPIO_DeInit+0x90>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a4b      	ldr	r2, [pc, #300]	; (8002a74 <HAL_GPIO_DeInit+0x180>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d019      	beq.n	8002980 <HAL_GPIO_DeInit+0x8c>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a4a      	ldr	r2, [pc, #296]	; (8002a78 <HAL_GPIO_DeInit+0x184>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d013      	beq.n	800297c <HAL_GPIO_DeInit+0x88>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a49      	ldr	r2, [pc, #292]	; (8002a7c <HAL_GPIO_DeInit+0x188>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d00d      	beq.n	8002978 <HAL_GPIO_DeInit+0x84>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a48      	ldr	r2, [pc, #288]	; (8002a80 <HAL_GPIO_DeInit+0x18c>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d007      	beq.n	8002974 <HAL_GPIO_DeInit+0x80>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a47      	ldr	r2, [pc, #284]	; (8002a84 <HAL_GPIO_DeInit+0x190>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d101      	bne.n	8002970 <HAL_GPIO_DeInit+0x7c>
 800296c:	2305      	movs	r3, #5
 800296e:	e00a      	b.n	8002986 <HAL_GPIO_DeInit+0x92>
 8002970:	2306      	movs	r3, #6
 8002972:	e008      	b.n	8002986 <HAL_GPIO_DeInit+0x92>
 8002974:	2304      	movs	r3, #4
 8002976:	e006      	b.n	8002986 <HAL_GPIO_DeInit+0x92>
 8002978:	2303      	movs	r3, #3
 800297a:	e004      	b.n	8002986 <HAL_GPIO_DeInit+0x92>
 800297c:	2302      	movs	r3, #2
 800297e:	e002      	b.n	8002986 <HAL_GPIO_DeInit+0x92>
 8002980:	2301      	movs	r3, #1
 8002982:	e000      	b.n	8002986 <HAL_GPIO_DeInit+0x92>
 8002984:	2300      	movs	r3, #0
 8002986:	69fa      	ldr	r2, [r7, #28]
 8002988:	f002 0203 	and.w	r2, r2, #3
 800298c:	0092      	lsls	r2, r2, #2
 800298e:	4093      	lsls	r3, r2
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	429a      	cmp	r2, r3
 8002994:	d132      	bne.n	80029fc <HAL_GPIO_DeInit+0x108>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	220f      	movs	r2, #15
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80029a6:	4a31      	ldr	r2, [pc, #196]	; (8002a6c <HAL_GPIO_DeInit+0x178>)
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	089b      	lsrs	r3, r3, #2
 80029ac:	3302      	adds	r3, #2
 80029ae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	43da      	mvns	r2, r3
 80029b6:	482d      	ldr	r0, [pc, #180]	; (8002a6c <HAL_GPIO_DeInit+0x178>)
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	089b      	lsrs	r3, r3, #2
 80029bc:	400a      	ands	r2, r1
 80029be:	3302      	adds	r3, #2
 80029c0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80029c4:	4b30      	ldr	r3, [pc, #192]	; (8002a88 <HAL_GPIO_DeInit+0x194>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	43db      	mvns	r3, r3
 80029cc:	492e      	ldr	r1, [pc, #184]	; (8002a88 <HAL_GPIO_DeInit+0x194>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80029d2:	4b2d      	ldr	r3, [pc, #180]	; (8002a88 <HAL_GPIO_DeInit+0x194>)
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	43db      	mvns	r3, r3
 80029da:	492b      	ldr	r1, [pc, #172]	; (8002a88 <HAL_GPIO_DeInit+0x194>)
 80029dc:	4013      	ands	r3, r2
 80029de:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80029e0:	4b29      	ldr	r3, [pc, #164]	; (8002a88 <HAL_GPIO_DeInit+0x194>)
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	4927      	ldr	r1, [pc, #156]	; (8002a88 <HAL_GPIO_DeInit+0x194>)
 80029ea:	4013      	ands	r3, r2
 80029ec:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80029ee:	4b26      	ldr	r3, [pc, #152]	; (8002a88 <HAL_GPIO_DeInit+0x194>)
 80029f0:	68da      	ldr	r2, [r3, #12]
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	43db      	mvns	r3, r3
 80029f6:	4924      	ldr	r1, [pc, #144]	; (8002a88 <HAL_GPIO_DeInit+0x194>)
 80029f8:	4013      	ands	r3, r2
 80029fa:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	2bff      	cmp	r3, #255	; 0xff
 8002a00:	d801      	bhi.n	8002a06 <HAL_GPIO_DeInit+0x112>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	e001      	b.n	8002a0a <HAL_GPIO_DeInit+0x116>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3304      	adds	r3, #4
 8002a0a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	2bff      	cmp	r3, #255	; 0xff
 8002a10:	d802      	bhi.n	8002a18 <HAL_GPIO_DeInit+0x124>
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	e002      	b.n	8002a1e <HAL_GPIO_DeInit+0x12a>
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	3b08      	subs	r3, #8
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	210f      	movs	r1, #15
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	401a      	ands	r2, r3
 8002a30:	2104      	movs	r1, #4
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	fa01 f303 	lsl.w	r3, r1, r3
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	43db      	mvns	r3, r3
 8002a46:	401a      	ands	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	fa22 f303 	lsr.w	r3, r2, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f47f af52 	bne.w	8002904 <HAL_GPIO_DeInit+0x10>
  }
}
 8002a60:	bf00      	nop
 8002a62:	bf00      	nop
 8002a64:	3724      	adds	r7, #36	; 0x24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr
 8002a6c:	40010000 	.word	0x40010000
 8002a70:	40010800 	.word	0x40010800
 8002a74:	40010c00 	.word	0x40010c00
 8002a78:	40011000 	.word	0x40011000
 8002a7c:	40011400 	.word	0x40011400
 8002a80:	40011800 	.word	0x40011800
 8002a84:	40011c00 	.word	0x40011c00
 8002a88:	40010400 	.word	0x40010400

08002a8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	887b      	ldrh	r3, [r7, #2]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d002      	beq.n	8002aaa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	73fb      	strb	r3, [r7, #15]
 8002aa8:	e001      	b.n	8002aae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr

08002aba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	807b      	strh	r3, [r7, #2]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002aca:	787b      	ldrb	r3, [r7, #1]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ad0:	887a      	ldrh	r2, [r7, #2]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ad6:	e003      	b.n	8002ae0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ad8:	887b      	ldrh	r3, [r7, #2]
 8002ada:	041a      	lsls	r2, r3, #16
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	611a      	str	r2, [r3, #16]
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr

08002aea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
 8002af2:	460b      	mov	r3, r1
 8002af4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	887b      	ldrh	r3, [r7, #2]
 8002afc:	4013      	ands	r3, r2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b02:	887a      	ldrh	r2, [r7, #2]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002b08:	e002      	b.n	8002b10 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b0a:	887a      	ldrh	r2, [r7, #2]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	611a      	str	r2, [r3, #16]
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr
	...

08002b1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e123      	b.n	8002d76 <HAL_I2C_Init+0x25a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d106      	bne.n	8002b48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f00a fdde 	bl	800d704 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2224      	movs	r2, #36	; 0x24
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0201 	bic.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b60:	f002 fa96 	bl	8005090 <HAL_RCC_GetPCLK1Freq>
 8002b64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	4a85      	ldr	r2, [pc, #532]	; (8002d80 <HAL_I2C_Init+0x264>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d807      	bhi.n	8002b80 <HAL_I2C_Init+0x64>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4a84      	ldr	r2, [pc, #528]	; (8002d84 <HAL_I2C_Init+0x268>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	bf94      	ite	ls
 8002b78:	2301      	movls	r3, #1
 8002b7a:	2300      	movhi	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	e006      	b.n	8002b8e <HAL_I2C_Init+0x72>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4a81      	ldr	r2, [pc, #516]	; (8002d88 <HAL_I2C_Init+0x26c>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	bf94      	ite	ls
 8002b88:	2301      	movls	r3, #1
 8002b8a:	2300      	movhi	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e0ef      	b.n	8002d76 <HAL_I2C_Init+0x25a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	4a7c      	ldr	r2, [pc, #496]	; (8002d8c <HAL_I2C_Init+0x270>)
 8002b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9e:	0c9b      	lsrs	r3, r3, #18
 8002ba0:	60bb      	str	r3, [r7, #8]
  /*-------------before starting the configuration make sure the engine is not under swrst------------*/
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bb0:	601a      	str	r2, [r3, #0]
  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	4a6a      	ldr	r2, [pc, #424]	; (8002d80 <HAL_I2C_Init+0x264>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d802      	bhi.n	8002be0 <HAL_I2C_Init+0xc4>
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	e009      	b.n	8002bf4 <HAL_I2C_Init+0xd8>
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002be6:	fb02 f303 	mul.w	r3, r2, r3
 8002bea:	4a69      	ldr	r2, [pc, #420]	; (8002d90 <HAL_I2C_Init+0x274>)
 8002bec:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf0:	099b      	lsrs	r3, r3, #6
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6812      	ldr	r2, [r2, #0]
 8002bf8:	430b      	orrs	r3, r1
 8002bfa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	495c      	ldr	r1, [pc, #368]	; (8002d80 <HAL_I2C_Init+0x264>)
 8002c10:	428b      	cmp	r3, r1
 8002c12:	d819      	bhi.n	8002c48 <HAL_I2C_Init+0x12c>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	1e59      	subs	r1, r3, #1
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c22:	1c59      	adds	r1, r3, #1
 8002c24:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c28:	400b      	ands	r3, r1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00a      	beq.n	8002c44 <HAL_I2C_Init+0x128>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	1e59      	subs	r1, r3, #1
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c42:	e051      	b.n	8002ce8 <HAL_I2C_Init+0x1cc>
 8002c44:	2304      	movs	r3, #4
 8002c46:	e04f      	b.n	8002ce8 <HAL_I2C_Init+0x1cc>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d111      	bne.n	8002c74 <HAL_I2C_Init+0x158>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	1e58      	subs	r0, r3, #1
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6859      	ldr	r1, [r3, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	440b      	add	r3, r1
 8002c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c62:	3301      	adds	r3, #1
 8002c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	bf0c      	ite	eq
 8002c6c:	2301      	moveq	r3, #1
 8002c6e:	2300      	movne	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	e012      	b.n	8002c9a <HAL_I2C_Init+0x17e>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	1e58      	subs	r0, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6859      	ldr	r1, [r3, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	0099      	lsls	r1, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	bf0c      	ite	eq
 8002c94:	2301      	moveq	r3, #1
 8002c96:	2300      	movne	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_I2C_Init+0x186>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e022      	b.n	8002ce8 <HAL_I2C_Init+0x1cc>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10e      	bne.n	8002cc8 <HAL_I2C_Init+0x1ac>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	1e58      	subs	r0, r3, #1
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6859      	ldr	r1, [r3, #4]
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	440b      	add	r3, r1
 8002cb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cc6:	e00f      	b.n	8002ce8 <HAL_I2C_Init+0x1cc>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	1e58      	subs	r0, r3, #1
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6859      	ldr	r1, [r3, #4]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	0099      	lsls	r1, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cde:	3301      	adds	r3, #1
 8002ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	6809      	ldr	r1, [r1, #0]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69da      	ldr	r2, [r3, #28]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6911      	ldr	r1, [r2, #16]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	68d2      	ldr	r2, [r2, #12]
 8002d22:	4311      	orrs	r1, r2
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6812      	ldr	r2, [r2, #0]
 8002d28:	430b      	orrs	r3, r1
 8002d2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	695a      	ldr	r2, [r3, #20]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f042 0201 	orr.w	r2, r2, #1
 8002d56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2220      	movs	r2, #32
 8002d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	000186a0 	.word	0x000186a0
 8002d84:	001e847f 	.word	0x001e847f
 8002d88:	003d08ff 	.word	0x003d08ff
 8002d8c:	431bde83 	.word	0x431bde83
 8002d90:	10624dd3 	.word	0x10624dd3

08002d94 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e021      	b.n	8002dea <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2224      	movs	r2, #36	; 0x24
 8002daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0201 	bic.w	r2, r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f00a fcee 	bl	800d7a0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
	...

08002df4 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b087      	sub	sp, #28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	607a      	str	r2, [r7, #4]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	460b      	mov	r3, r1
 8002e02:	817b      	strh	r3, [r7, #10]
 8002e04:	4613      	mov	r3, r2
 8002e06:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b20      	cmp	r3, #32
 8002e16:	f040 8085 	bne.w	8002f24 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e1a:	4b45      	ldr	r3, [pc, #276]	; (8002f30 <HAL_I2C_Master_Transmit_IT+0x13c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	08db      	lsrs	r3, r3, #3
 8002e20:	4a44      	ldr	r2, [pc, #272]	; (8002f34 <HAL_I2C_Master_Transmit_IT+0x140>)
 8002e22:	fba2 2303 	umull	r2, r3, r2, r3
 8002e26:	0a1a      	lsrs	r2, r3, #8
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009a      	lsls	r2, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d116      	bne.n	8002e6e <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f043 0220 	orr.w	r2, r3, #32
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e05b      	b.n	8002f26 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d0db      	beq.n	8002e34 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <HAL_I2C_Master_Transmit_IT+0x96>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e04d      	b.n	8002f26 <HAL_I2C_Master_Transmit_IT+0x132>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d007      	beq.n	8002eb0 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0201 	orr.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ebe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2221      	movs	r2, #33	; 0x21
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2210      	movs	r2, #16
 8002ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	893a      	ldrh	r2, [r7, #8]
 8002ee0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4a12      	ldr	r2, [pc, #72]	; (8002f38 <HAL_I2C_Master_Transmit_IT+0x144>)
 8002ef0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002ef2:	897a      	ldrh	r2, [r7, #10]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f06:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002f1e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	e000      	b.n	8002f26 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8002f24:	2302      	movs	r3, #2
  }
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	371c      	adds	r7, #28
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr
 8002f30:	2000003c 	.word	0x2000003c
 8002f34:	14f8b589 	.word	0x14f8b589
 8002f38:	ffff0000 	.word	0xffff0000

08002f3c <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b087      	sub	sp, #28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	607a      	str	r2, [r7, #4]
 8002f46:	461a      	mov	r2, r3
 8002f48:	460b      	mov	r3, r1
 8002f4a:	817b      	strh	r3, [r7, #10]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b20      	cmp	r3, #32
 8002f5e:	f040 808d 	bne.w	800307c <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002f62:	4b49      	ldr	r3, [pc, #292]	; (8003088 <HAL_I2C_Master_Receive_IT+0x14c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	08db      	lsrs	r3, r3, #3
 8002f68:	4a48      	ldr	r2, [pc, #288]	; (800308c <HAL_I2C_Master_Receive_IT+0x150>)
 8002f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6e:	0a1a      	lsrs	r2, r3, #8
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	009a      	lsls	r2, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d116      	bne.n	8002fb6 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	f043 0220 	orr.w	r2, r3, #32
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e063      	b.n	800307e <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d0db      	beq.n	8002f7c <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_I2C_Master_Receive_IT+0x96>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e055      	b.n	800307e <HAL_I2C_Master_Receive_IT+0x142>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d007      	beq.n	8002ff8 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0201 	orr.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003006:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2222      	movs	r2, #34	; 0x22
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2210      	movs	r2, #16
 8003014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	893a      	ldrh	r2, [r7, #8]
 8003028:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302e:	b29a      	uxth	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4a16      	ldr	r2, [pc, #88]	; (8003090 <HAL_I2C_Master_Receive_IT+0x154>)
 8003038:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800303a:	897a      	ldrh	r2, [r7, #10]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800304e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800305e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003076:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003078:	2300      	movs	r3, #0
 800307a:	e000      	b.n	800307e <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 800307c:	2302      	movs	r3, #2
  }
}
 800307e:	4618      	mov	r0, r3
 8003080:	371c      	adds	r7, #28
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr
 8003088:	2000003c 	.word	0x2000003c
 800308c:	14f8b589 	.word	0x14f8b589
 8003090:	ffff0000 	.word	0xffff0000

08003094 <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	460b      	mov	r3, r1
 800309e:	807b      	strh	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(DevAddress);

  /* Abort Master transfer during Receive or Transmit process    */
  if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b10      	cmp	r3, #16
 80030aa:	d135      	bne.n	8003118 <HAL_I2C_Master_Abort_IT+0x84>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d101      	bne.n	80030ba <HAL_I2C_Master_Abort_IT+0x26>
 80030b6:	2302      	movs	r3, #2
 80030b8:	e02f      	b.n	800311a <HAL_I2C_Master_Abort_IT+0x86>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hi2c->PreviousState = I2C_STATE_NONE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_ABORT;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2260      	movs	r2, #96	; 0x60
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030de:	601a      	str	r2, [r3, #0]

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ee:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003104:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f001 fa3e 	bl	8004590 <I2C_ITError>

    return HAL_OK;
 8003114:	2300      	movs	r3, #0
 8003116:	e000      	b.n	800311a <HAL_I2C_Master_Abort_IT+0x86>
  }
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
  }
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
	...

08003124 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b088      	sub	sp, #32
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800312c:	2300      	movs	r3, #0
 800312e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003144:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800314c:	73bb      	strb	r3, [r7, #14]
  static uint8_t doNothingCounter = 0;

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	2b10      	cmp	r3, #16
 8003152:	d003      	beq.n	800315c <HAL_I2C_EV_IRQHandler+0x38>
 8003154:	7bfb      	ldrb	r3, [r7, #15]
 8003156:	2b40      	cmp	r3, #64	; 0x40
 8003158:	f040 80da 	bne.w	8003310 <HAL_I2C_EV_IRQHandler+0x1ec>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10d      	bne.n	8003192 <HAL_I2C_EV_IRQHandler+0x6e>
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800317c:	d003      	beq.n	8003186 <HAL_I2C_EV_IRQHandler+0x62>
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003184:	d101      	bne.n	800318a <HAL_I2C_EV_IRQHandler+0x66>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <HAL_I2C_EV_IRQHandler+0x68>
 800318a:	2300      	movs	r3, #0
 800318c:	2b01      	cmp	r3, #1
 800318e:	f000 814b 	beq.w	8003428 <HAL_I2C_EV_IRQHandler+0x304>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00c      	beq.n	80031b6 <HAL_I2C_EV_IRQHandler+0x92>
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	0a5b      	lsrs	r3, r3, #9
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d006      	beq.n	80031b6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f001 fb76 	bl	800489a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 fd05 	bl	8003bbe <I2C_Master_SB>
 80031b4:	e0ab      	b.n	800330e <HAL_I2C_EV_IRQHandler+0x1ea>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	08db      	lsrs	r3, r3, #3
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d009      	beq.n	80031d6 <HAL_I2C_EV_IRQHandler+0xb2>
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	0a5b      	lsrs	r3, r3, #9
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 fd7a 	bl	8003cc8 <I2C_Master_ADD10>
 80031d4:	e09b      	b.n	800330e <HAL_I2C_EV_IRQHandler+0x1ea>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	085b      	lsrs	r3, r3, #1
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d009      	beq.n	80031f6 <HAL_I2C_EV_IRQHandler+0xd2>
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	0a5b      	lsrs	r3, r3, #9
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 fd93 	bl	8003d1a <I2C_Master_ADDR>
 80031f4:	e08b      	b.n	800330e <HAL_I2C_EV_IRQHandler+0x1ea>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	089b      	lsrs	r3, r3, #2
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d030      	beq.n	8003264 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800320c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003210:	f000 810c 	beq.w	800342c <HAL_I2C_EV_IRQHandler+0x308>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	09db      	lsrs	r3, r3, #7
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00f      	beq.n	8003240 <HAL_I2C_EV_IRQHandler+0x11c>
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	0a9b      	lsrs	r3, r3, #10
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d009      	beq.n	8003240 <HAL_I2C_EV_IRQHandler+0x11c>
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	089b      	lsrs	r3, r3, #2
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b00      	cmp	r3, #0
 8003236:	d103      	bne.n	8003240 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f9e6 	bl	800360a <I2C_MasterTransmit_TXE>
 800323e:	e066      	b.n	800330e <HAL_I2C_EV_IRQHandler+0x1ea>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	089b      	lsrs	r3, r3, #2
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 80ef 	beq.w	800342c <HAL_I2C_EV_IRQHandler+0x308>
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	0a5b      	lsrs	r3, r3, #9
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 80e8 	beq.w	800342c <HAL_I2C_EV_IRQHandler+0x308>
        {
          I2C_MasterTransmit_BTF(hi2c);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 facc 	bl	80037fa <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003262:	e0e3      	b.n	800342c <HAL_I2C_EV_IRQHandler+0x308>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800326e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003272:	f000 80db 	beq.w	800342c <HAL_I2C_EV_IRQHandler+0x308>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	099b      	lsrs	r3, r3, #6
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00f      	beq.n	80032a2 <HAL_I2C_EV_IRQHandler+0x17e>
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	0a9b      	lsrs	r3, r3, #10
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d009      	beq.n	80032a2 <HAL_I2C_EV_IRQHandler+0x17e>
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	089b      	lsrs	r3, r3, #2
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	d103      	bne.n	80032a2 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 fb23 	bl	80038e6 <I2C_MasterReceive_RXNE>
 80032a0:	e035      	b.n	800330e <HAL_I2C_EV_IRQHandler+0x1ea>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	089b      	lsrs	r3, r3, #2
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d009      	beq.n	80032c2 <HAL_I2C_EV_IRQHandler+0x19e>
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	0a5b      	lsrs	r3, r3, #9
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_I2C_EV_IRQHandler+0x19e>
        {
          I2C_MasterReceive_BTF(hi2c);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 fb95 	bl	80039ea <I2C_MasterReceive_BTF>
 80032c0:	e025      	b.n	800330e <HAL_I2C_EV_IRQHandler+0x1ea>
        }
        else
        {
          /* Do nothing */
        	doNothingCounter++;
 80032c2:	4b5d      	ldr	r3, [pc, #372]	; (8003438 <HAL_I2C_EV_IRQHandler+0x314>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	3301      	adds	r3, #1
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	4b5b      	ldr	r3, [pc, #364]	; (8003438 <HAL_I2C_EV_IRQHandler+0x314>)
 80032cc:	701a      	strb	r2, [r3, #0]
        	if (doNothingCounter > 20)
 80032ce:	4b5a      	ldr	r3, [pc, #360]	; (8003438 <HAL_I2C_EV_IRQHandler+0x314>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b14      	cmp	r3, #20
 80032d4:	d90a      	bls.n	80032ec <HAL_I2C_EV_IRQHandler+0x1c8>
        	{
        		SET_BIT(hi2c->Instance->CR1,I2C_CR1_SWRST);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032e4:	601a      	str	r2, [r3, #0]
        		doNothingCounter = 0;
 80032e6:	4b54      	ldr	r3, [pc, #336]	; (8003438 <HAL_I2C_EV_IRQHandler+0x314>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	701a      	strb	r2, [r3, #0]
        	}
        	if(READ_BIT(hi2c->Instance->CR1,I2C_CR1_SWRST) !=RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 8098 	beq.w	800342c <HAL_I2C_EV_IRQHandler+0x308>
        	{
        		CLEAR_BIT(hi2c->Instance->CR1,I2C_CR1_SWRST);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800330a:	601a      	str	r2, [r3, #0]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800330c:	e08e      	b.n	800342c <HAL_I2C_EV_IRQHandler+0x308>
 800330e:	e08d      	b.n	800342c <HAL_I2C_EV_IRQHandler+0x308>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	2b00      	cmp	r3, #0
 8003316:	d004      	beq.n	8003322 <HAL_I2C_EV_IRQHandler+0x1fe>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	61fb      	str	r3, [r7, #28]
 8003320:	e007      	b.n	8003332 <HAL_I2C_EV_IRQHandler+0x20e>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	085b      	lsrs	r3, r3, #1
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d012      	beq.n	8003364 <HAL_I2C_EV_IRQHandler+0x240>
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	0a5b      	lsrs	r3, r3, #9
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00c      	beq.n	8003364 <HAL_I2C_EV_IRQHandler+0x240>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_I2C_EV_IRQHandler+0x236>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800335a:	69b9      	ldr	r1, [r7, #24]
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 ff33 	bl	80041c8 <I2C_Slave_ADDR>
 8003362:	e066      	b.n	8003432 <HAL_I2C_EV_IRQHandler+0x30e>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	091b      	lsrs	r3, r3, #4
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b00      	cmp	r3, #0
 800336e:	d009      	beq.n	8003384 <HAL_I2C_EV_IRQHandler+0x260>
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	0a5b      	lsrs	r3, r3, #9
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b00      	cmp	r3, #0
 800337a:	d003      	beq.n	8003384 <HAL_I2C_EV_IRQHandler+0x260>
    {
      I2C_Slave_STOPF(hi2c);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 ff67 	bl	8004250 <I2C_Slave_STOPF>
 8003382:	e056      	b.n	8003432 <HAL_I2C_EV_IRQHandler+0x30e>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003384:	7bbb      	ldrb	r3, [r7, #14]
 8003386:	2b21      	cmp	r3, #33	; 0x21
 8003388:	d002      	beq.n	8003390 <HAL_I2C_EV_IRQHandler+0x26c>
 800338a:	7bbb      	ldrb	r3, [r7, #14]
 800338c:	2b29      	cmp	r3, #41	; 0x29
 800338e:	d125      	bne.n	80033dc <HAL_I2C_EV_IRQHandler+0x2b8>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	09db      	lsrs	r3, r3, #7
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00f      	beq.n	80033bc <HAL_I2C_EV_IRQHandler+0x298>
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	0a9b      	lsrs	r3, r3, #10
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d009      	beq.n	80033bc <HAL_I2C_EV_IRQHandler+0x298>
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	089b      	lsrs	r3, r3, #2
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d103      	bne.n	80033bc <HAL_I2C_EV_IRQHandler+0x298>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 fe4b 	bl	8004050 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033ba:	e039      	b.n	8003430 <HAL_I2C_EV_IRQHandler+0x30c>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	089b      	lsrs	r3, r3, #2
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d033      	beq.n	8003430 <HAL_I2C_EV_IRQHandler+0x30c>
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	0a5b      	lsrs	r3, r3, #9
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d02d      	beq.n	8003430 <HAL_I2C_EV_IRQHandler+0x30c>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 fe78 	bl	80040ca <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033da:	e029      	b.n	8003430 <HAL_I2C_EV_IRQHandler+0x30c>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	099b      	lsrs	r3, r3, #6
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00f      	beq.n	8003408 <HAL_I2C_EV_IRQHandler+0x2e4>
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	0a9b      	lsrs	r3, r3, #10
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d009      	beq.n	8003408 <HAL_I2C_EV_IRQHandler+0x2e4>
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	089b      	lsrs	r3, r3, #2
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d103      	bne.n	8003408 <HAL_I2C_EV_IRQHandler+0x2e4>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 fe82 	bl	800410a <I2C_SlaveReceive_RXNE>
 8003406:	e014      	b.n	8003432 <HAL_I2C_EV_IRQHandler+0x30e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	089b      	lsrs	r3, r3, #2
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00e      	beq.n	8003432 <HAL_I2C_EV_IRQHandler+0x30e>
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	0a5b      	lsrs	r3, r3, #9
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b00      	cmp	r3, #0
 800341e:	d008      	beq.n	8003432 <HAL_I2C_EV_IRQHandler+0x30e>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 feb0 	bl	8004186 <I2C_SlaveReceive_BTF>
 8003426:	e004      	b.n	8003432 <HAL_I2C_EV_IRQHandler+0x30e>
      return;
 8003428:	bf00      	nop
 800342a:	e002      	b.n	8003432 <HAL_I2C_EV_IRQHandler+0x30e>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800342c:	bf00      	nop
 800342e:	e000      	b.n	8003432 <HAL_I2C_EV_IRQHandler+0x30e>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003430:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003432:	3720      	adds	r7, #32
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	200000c4 	.word	0x200000c4

0800343c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b08a      	sub	sp, #40	; 0x28
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003454:	2300      	movs	r3, #0
 8003456:	627b      	str	r3, [r7, #36]	; 0x24

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003458:	6a3b      	ldr	r3, [r7, #32]
 800345a:	0a1b      	lsrs	r3, r3, #8
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	d016      	beq.n	8003492 <HAL_I2C_ER_IRQHandler+0x56>
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	0a1b      	lsrs	r3, r3, #8
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	d010      	beq.n	8003492 <HAL_I2C_ER_IRQHandler+0x56>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	f043 0301 	orr.w	r3, r3, #1
 8003476:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003480:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003490:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003492:	6a3b      	ldr	r3, [r7, #32]
 8003494:	0a5b      	lsrs	r3, r3, #9
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00e      	beq.n	80034bc <HAL_I2C_ER_IRQHandler+0x80>
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	0a1b      	lsrs	r3, r3, #8
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d008      	beq.n	80034bc <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	f043 0302 	orr.w	r3, r3, #2
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80034ba:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	0a9b      	lsrs	r3, r3, #10
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d041      	beq.n	800354c <HAL_I2C_ER_IRQHandler+0x110>
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	0a1b      	lsrs	r3, r3, #8
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d03b      	beq.n	800354c <HAL_I2C_ER_IRQHandler+0x110>
  {
    tmp1 = hi2c->Mode;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034da:	76fb      	strb	r3, [r7, #27]
    tmp2 = hi2c->XferCount;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ea:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f0:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80034f2:	7efb      	ldrb	r3, [r7, #27]
 80034f4:	2b20      	cmp	r3, #32
 80034f6:	d112      	bne.n	800351e <HAL_I2C_ER_IRQHandler+0xe2>
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10f      	bne.n	800351e <HAL_I2C_ER_IRQHandler+0xe2>
 80034fe:	7cfb      	ldrb	r3, [r7, #19]
 8003500:	2b21      	cmp	r3, #33	; 0x21
 8003502:	d008      	beq.n	8003516 <HAL_I2C_ER_IRQHandler+0xda>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003504:	7cfb      	ldrb	r3, [r7, #19]
 8003506:	2b29      	cmp	r3, #41	; 0x29
 8003508:	d005      	beq.n	8003516 <HAL_I2C_ER_IRQHandler+0xda>
 800350a:	7cfb      	ldrb	r3, [r7, #19]
 800350c:	2b28      	cmp	r3, #40	; 0x28
 800350e:	d106      	bne.n	800351e <HAL_I2C_ER_IRQHandler+0xe2>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2b21      	cmp	r3, #33	; 0x21
 8003514:	d103      	bne.n	800351e <HAL_I2C_ER_IRQHandler+0xe2>
    {
      I2C_Slave_AF(hi2c);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 ffca 	bl	80044b0 <I2C_Slave_AF>
 800351c:	e016      	b.n	800354c <HAL_I2C_ER_IRQHandler+0x110>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003526:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	f043 0304 	orr.w	r3, r3, #4
 800352e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b10      	cmp	r3, #16
 800353a:	d107      	bne.n	800354c <HAL_I2C_ER_IRQHandler+0x110>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800354a:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	0adb      	lsrs	r3, r3, #11
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00e      	beq.n	8003576 <HAL_I2C_ER_IRQHandler+0x13a>
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	0a1b      	lsrs	r3, r3, #8
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b00      	cmp	r3, #0
 8003562:	d008      	beq.n	8003576 <HAL_I2C_ER_IRQHandler+0x13a>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	f043 0308 	orr.w	r3, r3, #8
 800356a:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003574:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	2b00      	cmp	r3, #0
 800357a:	d008      	beq.n	800358e <HAL_I2C_ER_IRQHandler+0x152>
  {
    hi2c->ErrorCode |= error;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f001 f801 	bl	8004590 <I2C_ITError>
  }
}
 800358e:	bf00      	nop
 8003590:	3728      	adds	r7, #40	; 0x28
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003596:	b480      	push	{r7}
 8003598:	b083      	sub	sp, #12
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bc80      	pop	{r7}
 80035a6:	4770      	bx	lr

080035a8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr

080035ba <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
 80035c2:	460b      	mov	r3, r1
 80035c4:	70fb      	strb	r3, [r7, #3]
 80035c6:	4613      	mov	r3, r2
 80035c8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr

080035d4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bc80      	pop	{r7}
 80035e4:	4770      	bx	lr

080035e6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr

080035f8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr

0800360a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b084      	sub	sp, #16
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003618:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003620:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003626:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362c:	2b00      	cmp	r3, #0
 800362e:	d150      	bne.n	80036d2 <I2C_MasterTransmit_TXE+0xc8>
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	2b21      	cmp	r3, #33	; 0x21
 8003634:	d14d      	bne.n	80036d2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	2b08      	cmp	r3, #8
 800363a:	d01d      	beq.n	8003678 <I2C_MasterTransmit_TXE+0x6e>
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2b20      	cmp	r3, #32
 8003640:	d01a      	beq.n	8003678 <I2C_MasterTransmit_TXE+0x6e>
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003648:	d016      	beq.n	8003678 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003658:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2211      	movs	r2, #17
 800365e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2220      	movs	r2, #32
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f007 fbe3 	bl	800ae3c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003676:	e0bc      	b.n	80037f2 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003686:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003696:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2220      	movs	r2, #32
 80036a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b40      	cmp	r3, #64	; 0x40
 80036b0:	d107      	bne.n	80036c2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7ff ff93 	bl	80035e6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036c0:	e097      	b.n	80037f2 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f007 fbb6 	bl	800ae3c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036d0:	e08f      	b.n	80037f2 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
 80036d4:	2b21      	cmp	r3, #33	; 0x21
 80036d6:	d007      	beq.n	80036e8 <I2C_MasterTransmit_TXE+0xde>
 80036d8:	7bbb      	ldrb	r3, [r7, #14]
 80036da:	2b40      	cmp	r3, #64	; 0x40
 80036dc:	f040 8089 	bne.w	80037f2 <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80036e0:	7bfb      	ldrb	r3, [r7, #15]
 80036e2:	2b22      	cmp	r3, #34	; 0x22
 80036e4:	f040 8085 	bne.w	80037f2 <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d108      	bne.n	8003704 <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003700:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003702:	e076      	b.n	80037f2 <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b40      	cmp	r3, #64	; 0x40
 800370e:	d15d      	bne.n	80037cc <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003714:	2b00      	cmp	r3, #0
 8003716:	d11d      	bne.n	8003754 <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371c:	2b01      	cmp	r3, #1
 800371e:	d10b      	bne.n	8003738 <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003724:	b2da      	uxtb	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003730:	1c9a      	adds	r2, r3, #2
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003736:	e05c      	b.n	80037f2 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800373c:	b29b      	uxth	r3, r3
 800373e:	121b      	asrs	r3, r3, #8
 8003740:	b2da      	uxtb	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003752:	e04e      	b.n	80037f2 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003758:	2b01      	cmp	r3, #1
 800375a:	d10b      	bne.n	8003774 <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003760:	b2da      	uxtb	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003772:	e03e      	b.n	80037f2 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003778:	2b02      	cmp	r3, #2
 800377a:	d13a      	bne.n	80037f2 <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b22      	cmp	r3, #34	; 0x22
 8003786:	d108      	bne.n	800379a <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003796:	601a      	str	r2, [r3, #0]
}
 8003798:	e02b      	b.n	80037f2 <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b21      	cmp	r3, #33	; 0x21
 80037a4:	d125      	bne.n	80037f2 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	781a      	ldrb	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	1c5a      	adds	r2, r3, #1
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	3b01      	subs	r3, #1
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80037ca:	e012      	b.n	80037f2 <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	781a      	ldrb	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80037f0:	e7ff      	b.n	80037f2 <I2C_MasterTransmit_TXE+0x1e8>
 80037f2:	bf00      	nop
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b084      	sub	sp, #16
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003806:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b21      	cmp	r3, #33	; 0x21
 8003812:	d164      	bne.n	80038de <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003818:	b29b      	uxth	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d012      	beq.n	8003844 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	781a      	ldrb	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003838:	b29b      	uxth	r3, r3
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 8003842:	e04c      	b.n	80038de <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2b08      	cmp	r3, #8
 8003848:	d01d      	beq.n	8003886 <I2C_MasterTransmit_BTF+0x8c>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2b20      	cmp	r3, #32
 800384e:	d01a      	beq.n	8003886 <I2C_MasterTransmit_BTF+0x8c>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003856:	d016      	beq.n	8003886 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003866:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2211      	movs	r2, #17
 800386c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2220      	movs	r2, #32
 800387a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f007 fadc 	bl	800ae3c <HAL_I2C_MasterTxCpltCallback>
}
 8003884:	e02b      	b.n	80038de <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003894:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b40      	cmp	r3, #64	; 0x40
 80038be:	d107      	bne.n	80038d0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff fe8c 	bl	80035e6 <HAL_I2C_MemTxCpltCallback>
}
 80038ce:	e006      	b.n	80038de <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f007 faaf 	bl	800ae3c <HAL_I2C_MasterTxCpltCallback>
}
 80038de:	bf00      	nop
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b084      	sub	sp, #16
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b22      	cmp	r3, #34	; 0x22
 80038f8:	d173      	bne.n	80039e2 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fe:	b29b      	uxth	r3, r3
 8003900:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2b03      	cmp	r3, #3
 8003906:	d920      	bls.n	800394a <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	691a      	ldr	r2, [r3, #16]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003924:	b29b      	uxth	r3, r3
 8003926:	3b01      	subs	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003932:	b29b      	uxth	r3, r3
 8003934:	2b03      	cmp	r3, #3
 8003936:	d154      	bne.n	80039e2 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003946:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003948:	e04b      	b.n	80039e2 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394e:	2b02      	cmp	r3, #2
 8003950:	d047      	beq.n	80039e2 <I2C_MasterReceive_RXNE+0xfc>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d002      	beq.n	800395e <I2C_MasterReceive_RXNE+0x78>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d141      	bne.n	80039e2 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800396c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800397c:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	691a      	ldr	r2, [r3, #16]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399a:	b29b      	uxth	r3, r3
 800399c:	3b01      	subs	r3, #1
 800399e:	b29a      	uxth	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b40      	cmp	r3, #64	; 0x40
 80039b6:	d10a      	bne.n	80039ce <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7ff fe16 	bl	80035f8 <HAL_I2C_MemRxCpltCallback>
}
 80039cc:	e009      	b.n	80039e2 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2212      	movs	r2, #18
 80039da:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f007 fa3d 	bl	800ae5c <HAL_I2C_MasterRxCpltCallback>
}
 80039e2:	bf00      	nop
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b084      	sub	sp, #16
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d11b      	bne.n	8003a3a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a10:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	691a      	ldr	r2, [r3, #16]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	b2d2      	uxtb	r2, r2
 8003a1e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003a38:	e0bd      	b.n	8003bb6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	d129      	bne.n	8003a98 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a52:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d00a      	beq.n	8003a70 <I2C_MasterReceive_BTF+0x86>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d007      	beq.n	8003a70 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a6e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	691a      	ldr	r2, [r3, #16]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a96:	e08e      	b.n	8003bb6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d176      	bne.n	8003b90 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d002      	beq.n	8003aae <I2C_MasterReceive_BTF+0xc4>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b10      	cmp	r3, #16
 8003aac:	d108      	bne.n	8003ac0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	e019      	b.n	8003af4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d002      	beq.n	8003acc <I2C_MasterReceive_BTF+0xe2>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d108      	bne.n	8003ade <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	e00a      	b.n	8003af4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2b10      	cmp	r3, #16
 8003ae2:	d007      	beq.n	8003af4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	691a      	ldr	r2, [r3, #16]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	691a      	ldr	r2, [r3, #16]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	1c5a      	adds	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003b4e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b40      	cmp	r3, #64	; 0x40
 8003b62:	d10a      	bne.n	8003b7a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7ff fd40 	bl	80035f8 <HAL_I2C_MemRxCpltCallback>
}
 8003b78:	e01d      	b.n	8003bb6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2212      	movs	r2, #18
 8003b86:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f007 f967 	bl	800ae5c <HAL_I2C_MasterRxCpltCallback>
}
 8003b8e:	e012      	b.n	8003bb6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691a      	ldr	r2, [r3, #16]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003bb6:	bf00      	nop
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b40      	cmp	r3, #64	; 0x40
 8003bd0:	d117      	bne.n	8003c02 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d109      	bne.n	8003bee <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	461a      	mov	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bea:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003bec:	e067      	b.n	8003cbe <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	f043 0301 	orr.w	r3, r3, #1
 8003bf8:	b2da      	uxtb	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	611a      	str	r2, [r3, #16]
}
 8003c00:	e05d      	b.n	8003cbe <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c0a:	d133      	bne.n	8003c74 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b21      	cmp	r3, #33	; 0x21
 8003c16:	d109      	bne.n	8003c2c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	461a      	mov	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c28:	611a      	str	r2, [r3, #16]
 8003c2a:	e008      	b.n	8003c3e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	f043 0301 	orr.w	r3, r3, #1
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d103      	bne.n	8003c4e <I2C_Master_SB+0x90>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d037      	beq.n	8003cbe <I2C_Master_SB+0x100>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d104      	bne.n	8003c62 <I2C_Master_SB+0xa4>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d02d      	beq.n	8003cbe <I2C_Master_SB+0x100>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c70:	605a      	str	r2, [r3, #4]
}
 8003c72:	e024      	b.n	8003cbe <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10e      	bne.n	8003c9a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	11db      	asrs	r3, r3, #7
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	f003 0306 	and.w	r3, r3, #6
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	f063 030f 	orn	r3, r3, #15
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	611a      	str	r2, [r3, #16]
}
 8003c98:	e011      	b.n	8003cbe <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d10d      	bne.n	8003cbe <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	11db      	asrs	r3, r3, #7
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	f003 0306 	and.w	r3, r3, #6
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	f063 030e 	orn	r3, r3, #14
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	611a      	str	r2, [r3, #16]
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr

08003cc8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d103      	bne.n	8003cec <I2C_Master_ADD10+0x24>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d011      	beq.n	8003d10 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d104      	bne.n	8003d00 <I2C_Master_ADD10+0x38>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d007      	beq.n	8003d10 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d0e:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bc80      	pop	{r7}
 8003d18:	4770      	bx	lr

08003d1a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b091      	sub	sp, #68	; 0x44
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b22      	cmp	r3, #34	; 0x22
 8003d42:	f040 8174 	bne.w	800402e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10f      	bne.n	8003d6e <I2C_Master_ADDR+0x54>
 8003d4e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003d52:	2b40      	cmp	r3, #64	; 0x40
 8003d54:	d10b      	bne.n	8003d6e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d56:	2300      	movs	r3, #0
 8003d58:	633b      	str	r3, [r7, #48]	; 0x30
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	633b      	str	r3, [r7, #48]	; 0x30
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	633b      	str	r3, [r7, #48]	; 0x30
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6c:	e16b      	b.n	8004046 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d11d      	bne.n	8003db2 <I2C_Master_ADDR+0x98>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d7e:	d118      	bne.n	8003db2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d80:	2300      	movs	r3, #0
 8003d82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003da4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003daa:	1c5a      	adds	r2, r3, #1
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	651a      	str	r2, [r3, #80]	; 0x50
 8003db0:	e149      	b.n	8004046 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d113      	bne.n	8003de4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	e120      	b.n	8004026 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	f040 808a 	bne.w	8003f04 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003df6:	d137      	bne.n	8003e68 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e06:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e16:	d113      	bne.n	8003e40 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e26:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e28:	2300      	movs	r3, #0
 8003e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	e0f2      	b.n	8004026 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e40:	2300      	movs	r3, #0
 8003e42:	623b      	str	r3, [r7, #32]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	623b      	str	r3, [r7, #32]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	623b      	str	r3, [r7, #32]
 8003e54:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	e0de      	b.n	8004026 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6a:	2b08      	cmp	r3, #8
 8003e6c:	d02e      	beq.n	8003ecc <I2C_Master_ADDR+0x1b2>
 8003e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e70:	2b20      	cmp	r3, #32
 8003e72:	d02b      	beq.n	8003ecc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e76:	2b12      	cmp	r3, #18
 8003e78:	d102      	bne.n	8003e80 <I2C_Master_ADDR+0x166>
 8003e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d125      	bne.n	8003ecc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d00e      	beq.n	8003ea4 <I2C_Master_ADDR+0x18a>
 8003e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d00b      	beq.n	8003ea4 <I2C_Master_ADDR+0x18a>
 8003e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8e:	2b10      	cmp	r3, #16
 8003e90:	d008      	beq.n	8003ea4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	e007      	b.n	8003eb4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003eb2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	61fb      	str	r3, [r7, #28]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	61fb      	str	r3, [r7, #28]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	61fb      	str	r3, [r7, #28]
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	e0ac      	b.n	8004026 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eda:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003edc:	2300      	movs	r3, #0
 8003ede:	61bb      	str	r3, [r7, #24]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	61bb      	str	r3, [r7, #24]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	61bb      	str	r3, [r7, #24]
 8003ef0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	e090      	b.n	8004026 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d158      	bne.n	8003fc0 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f10:	2b04      	cmp	r3, #4
 8003f12:	d021      	beq.n	8003f58 <I2C_Master_ADDR+0x23e>
 8003f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d01e      	beq.n	8003f58 <I2C_Master_ADDR+0x23e>
 8003f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f1c:	2b10      	cmp	r3, #16
 8003f1e:	d01b      	beq.n	8003f58 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f2e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	617b      	str	r3, [r7, #20]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	e012      	b.n	8003f7e <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f66:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f68:	2300      	movs	r3, #0
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	613b      	str	r3, [r7, #16]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	613b      	str	r3, [r7, #16]
 8003f7c:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f8c:	d14b      	bne.n	8004026 <I2C_Master_ADDR+0x30c>
 8003f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f94:	d00b      	beq.n	8003fae <I2C_Master_ADDR+0x294>
 8003f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d008      	beq.n	8003fae <I2C_Master_ADDR+0x294>
 8003f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9e:	2b08      	cmp	r3, #8
 8003fa0:	d005      	beq.n	8003fae <I2C_Master_ADDR+0x294>
 8003fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa4:	2b10      	cmp	r3, #16
 8003fa6:	d002      	beq.n	8003fae <I2C_Master_ADDR+0x294>
 8003fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003faa:	2b20      	cmp	r3, #32
 8003fac:	d13b      	bne.n	8004026 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003fbc:	605a      	str	r2, [r3, #4]
 8003fbe:	e032      	b.n	8004026 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fce:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fde:	d117      	bne.n	8004010 <I2C_Master_ADDR+0x2f6>
 8003fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fe6:	d00b      	beq.n	8004000 <I2C_Master_ADDR+0x2e6>
 8003fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d008      	beq.n	8004000 <I2C_Master_ADDR+0x2e6>
 8003fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	d005      	beq.n	8004000 <I2C_Master_ADDR+0x2e6>
 8003ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff6:	2b10      	cmp	r3, #16
 8003ff8:	d002      	beq.n	8004000 <I2C_Master_ADDR+0x2e6>
 8003ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffc:	2b20      	cmp	r3, #32
 8003ffe:	d107      	bne.n	8004010 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800400e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004010:	2300      	movs	r3, #0
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800402c:	e00b      	b.n	8004046 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800402e:	2300      	movs	r3, #0
 8004030:	60bb      	str	r3, [r7, #8]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	60bb      	str	r3, [r7, #8]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	60bb      	str	r3, [r7, #8]
 8004042:	68bb      	ldr	r3, [r7, #8]
}
 8004044:	e7ff      	b.n	8004046 <I2C_Master_ADDR+0x32c>
 8004046:	bf00      	nop
 8004048:	3744      	adds	r7, #68	; 0x44
 800404a:	46bd      	mov	sp, r7
 800404c:	bc80      	pop	{r7}
 800404e:	4770      	bx	lr

08004050 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800405e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004064:	b29b      	uxth	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d02b      	beq.n	80040c2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	781a      	ldrb	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004084:	b29b      	uxth	r3, r3
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004092:	b29b      	uxth	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	d114      	bne.n	80040c2 <I2C_SlaveTransmit_TXE+0x72>
 8004098:	7bfb      	ldrb	r3, [r7, #15]
 800409a:	2b29      	cmp	r3, #41	; 0x29
 800409c:	d111      	bne.n	80040c2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ac:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2221      	movs	r2, #33	; 0x21
 80040b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2228      	movs	r2, #40	; 0x28
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7ff fa6a 	bl	8003596 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80040c2:	bf00      	nop
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d011      	beq.n	8004100 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	781a      	ldrb	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	3b01      	subs	r3, #1
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	bc80      	pop	{r7}
 8004108:	4770      	bx	lr

0800410a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b084      	sub	sp, #16
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004118:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411e:	b29b      	uxth	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d02c      	beq.n	800417e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	691a      	ldr	r2, [r3, #16]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004140:	b29b      	uxth	r3, r3
 8004142:	3b01      	subs	r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414e:	b29b      	uxth	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	d114      	bne.n	800417e <I2C_SlaveReceive_RXNE+0x74>
 8004154:	7bfb      	ldrb	r3, [r7, #15]
 8004156:	2b2a      	cmp	r3, #42	; 0x2a
 8004158:	d111      	bne.n	800417e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004168:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2222      	movs	r2, #34	; 0x22
 800416e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2228      	movs	r2, #40	; 0x28
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7ff fa15 	bl	80035a8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800417e:	bf00      	nop
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004192:	b29b      	uxth	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d012      	beq.n	80041be <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	691a      	ldr	r2, [r3, #16]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bc80      	pop	{r7}
 80041c6:	4770      	bx	lr

080041c8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80041d2:	2300      	movs	r3, #0
 80041d4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80041e2:	2b28      	cmp	r3, #40	; 0x28
 80041e4:	d127      	bne.n	8004236 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041f4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	089b      	lsrs	r3, r3, #2
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004202:	2301      	movs	r3, #1
 8004204:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	09db      	lsrs	r3, r3, #7
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	d103      	bne.n	800421a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	81bb      	strh	r3, [r7, #12]
 8004218:	e002      	b.n	8004220 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004228:	89ba      	ldrh	r2, [r7, #12]
 800422a:	7bfb      	ldrb	r3, [r7, #15]
 800422c:	4619      	mov	r1, r3
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7ff f9c3 	bl	80035ba <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004234:	e008      	b.n	8004248 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f06f 0202 	mvn.w	r2, #2
 800423e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004248:	bf00      	nop
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800425e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800426e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004270:	2300      	movs	r3, #0
 8004272:	60bb      	str	r3, [r7, #8]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	60bb      	str	r3, [r7, #8]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0201 	orr.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800429c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ac:	d172      	bne.n	8004394 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80042ae:	7bfb      	ldrb	r3, [r7, #15]
 80042b0:	2b22      	cmp	r3, #34	; 0x22
 80042b2:	d002      	beq.n	80042ba <I2C_Slave_STOPF+0x6a>
 80042b4:	7bfb      	ldrb	r3, [r7, #15]
 80042b6:	2b2a      	cmp	r3, #42	; 0x2a
 80042b8:	d135      	bne.n	8004326 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d005      	beq.n	80042de <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	f043 0204 	orr.w	r2, r3, #4
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042ec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fe f930 	bl	8002558 <HAL_DMA_GetState>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d049      	beq.n	8004392 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004302:	4a69      	ldr	r2, [pc, #420]	; (80044a8 <I2C_Slave_STOPF+0x258>)
 8004304:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430a:	4618      	mov	r0, r3
 800430c:	f7fd fde0 	bl	8001ed0 <HAL_DMA_Abort_IT>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d03d      	beq.n	8004392 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004320:	4610      	mov	r0, r2
 8004322:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004324:	e035      	b.n	8004392 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	b29a      	uxth	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004338:	b29b      	uxth	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d005      	beq.n	800434a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	f043 0204 	orr.w	r2, r3, #4
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004358:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800435e:	4618      	mov	r0, r3
 8004360:	f7fe f8fa 	bl	8002558 <HAL_DMA_GetState>
 8004364:	4603      	mov	r3, r0
 8004366:	2b01      	cmp	r3, #1
 8004368:	d014      	beq.n	8004394 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436e:	4a4e      	ldr	r2, [pc, #312]	; (80044a8 <I2C_Slave_STOPF+0x258>)
 8004370:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004376:	4618      	mov	r0, r3
 8004378:	f7fd fdaa 	bl	8001ed0 <HAL_DMA_Abort_IT>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d008      	beq.n	8004394 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800438c:	4610      	mov	r0, r2
 800438e:	4798      	blx	r3
 8004390:	e000      	b.n	8004394 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004392:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d03e      	beq.n	800441c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	f003 0304 	and.w	r3, r3, #4
 80043a8:	2b04      	cmp	r3, #4
 80043aa:	d112      	bne.n	80043d2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	691a      	ldr	r2, [r3, #16]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	b2d2      	uxtb	r2, r2
 80043b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	3b01      	subs	r3, #1
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043dc:	2b40      	cmp	r3, #64	; 0x40
 80043de:	d112      	bne.n	8004406 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	691a      	ldr	r2, [r3, #16]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	b2d2      	uxtb	r2, r2
 80043ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	1c5a      	adds	r2, r3, #1
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	3b01      	subs	r3, #1
 8004400:	b29a      	uxth	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440a:	b29b      	uxth	r3, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	d005      	beq.n	800441c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	f043 0204 	orr.w	r2, r3, #4
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f8b3 	bl	8004590 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800442a:	e039      	b.n	80044a0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800442c:	7bfb      	ldrb	r3, [r7, #15]
 800442e:	2b2a      	cmp	r3, #42	; 0x2a
 8004430:	d109      	bne.n	8004446 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2228      	movs	r2, #40	; 0x28
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f7ff f8b1 	bl	80035a8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b28      	cmp	r3, #40	; 0x28
 8004450:	d111      	bne.n	8004476 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a15      	ldr	r2, [pc, #84]	; (80044ac <I2C_Slave_STOPF+0x25c>)
 8004456:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2220      	movs	r2, #32
 8004462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7ff f8b0 	bl	80035d4 <HAL_I2C_ListenCpltCallback>
}
 8004474:	e014      	b.n	80044a0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447a:	2b22      	cmp	r3, #34	; 0x22
 800447c:	d002      	beq.n	8004484 <I2C_Slave_STOPF+0x234>
 800447e:	7bfb      	ldrb	r3, [r7, #15]
 8004480:	2b22      	cmp	r3, #34	; 0x22
 8004482:	d10d      	bne.n	80044a0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2220      	movs	r2, #32
 800448e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7ff f884 	bl	80035a8 <HAL_I2C_SlaveRxCpltCallback>
}
 80044a0:	bf00      	nop
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	080047bd 	.word	0x080047bd
 80044ac:	ffff0000 	.word	0xffff0000

080044b0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044be:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d002      	beq.n	80044d2 <I2C_Slave_AF+0x22>
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2b20      	cmp	r3, #32
 80044d0:	d129      	bne.n	8004526 <I2C_Slave_AF+0x76>
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
 80044d4:	2b28      	cmp	r3, #40	; 0x28
 80044d6:	d126      	bne.n	8004526 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a2c      	ldr	r2, [pc, #176]	; (800458c <I2C_Slave_AF+0xdc>)
 80044dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044ec:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044f6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004506:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2220      	movs	r2, #32
 8004512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7ff f858 	bl	80035d4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004524:	e02e      	b.n	8004584 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004526:	7bfb      	ldrb	r3, [r7, #15]
 8004528:	2b21      	cmp	r3, #33	; 0x21
 800452a:	d126      	bne.n	800457a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a17      	ldr	r2, [pc, #92]	; (800458c <I2C_Slave_AF+0xdc>)
 8004530:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2221      	movs	r2, #33	; 0x21
 8004536:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2220      	movs	r2, #32
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004556:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004560:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004570:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7ff f80f 	bl	8003596 <HAL_I2C_SlaveTxCpltCallback>
}
 8004578:	e004      	b.n	8004584 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004582:	615a      	str	r2, [r3, #20]
}
 8004584:	bf00      	nop
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	ffff0000 	.word	0xffff0000

08004590 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800459e:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b10      	cmp	r3, #16
 80045aa:	d10a      	bne.n	80045c2 <I2C_ITError+0x32>
 80045ac:	7bfb      	ldrb	r3, [r7, #15]
 80045ae:	2b22      	cmp	r3, #34	; 0x22
 80045b0:	d107      	bne.n	80045c2 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045c0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
 80045c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045c8:	2b28      	cmp	r3, #40	; 0x28
 80045ca:	d107      	bne.n	80045dc <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2228      	movs	r2, #40	; 0x28
 80045d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80045da:	e015      	b.n	8004608 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045ea:	d006      	beq.n	80045fa <I2C_ITError+0x6a>
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
 80045ee:	2b60      	cmp	r3, #96	; 0x60
 80045f0:	d003      	beq.n	80045fa <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2220      	movs	r2, #32
 80045f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004612:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004616:	d161      	bne.n	80046dc <I2C_ITError+0x14c>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685a      	ldr	r2, [r3, #4]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004626:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800462c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004630:	2b01      	cmp	r3, #1
 8004632:	d020      	beq.n	8004676 <I2C_ITError+0xe6>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004638:	4a5e      	ldr	r2, [pc, #376]	; (80047b4 <I2C_ITError+0x224>)
 800463a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004640:	4618      	mov	r0, r3
 8004642:	f7fd fc45 	bl	8001ed0 <HAL_DMA_Abort_IT>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 8089 	beq.w	8004760 <I2C_ITError+0x1d0>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0201 	bic.w	r2, r2, #1
 800465c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2220      	movs	r2, #32
 8004662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800466a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004670:	4610      	mov	r0, r2
 8004672:	4798      	blx	r3
 8004674:	e074      	b.n	8004760 <I2C_ITError+0x1d0>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467a:	4a4e      	ldr	r2, [pc, #312]	; (80047b4 <I2C_ITError+0x224>)
 800467c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004682:	4618      	mov	r0, r3
 8004684:	f7fd fc24 	bl	8001ed0 <HAL_DMA_Abort_IT>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d068      	beq.n	8004760 <I2C_ITError+0x1d0>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004698:	2b40      	cmp	r3, #64	; 0x40
 800469a:	d10b      	bne.n	80046b4 <I2C_ITError+0x124>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	691a      	ldr	r2, [r3, #16]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ae:	1c5a      	adds	r2, r3, #1
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0201 	bic.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046d6:	4610      	mov	r0, r2
 80046d8:	4798      	blx	r3
 80046da:	e041      	b.n	8004760 <I2C_ITError+0x1d0>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b60      	cmp	r3, #96	; 0x60
 80046e6:	d125      	bne.n	8004734 <I2C_ITError+0x1a4>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2220      	movs	r2, #32
 80046ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004700:	2b40      	cmp	r3, #64	; 0x40
 8004702:	d10b      	bne.n	800471c <I2C_ITError+0x18c>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691a      	ldr	r2, [r3, #16]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0201 	bic.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f006 fbb1 	bl	800ae94 <HAL_I2C_AbortCpltCallback>
 8004732:	e015      	b.n	8004760 <I2C_ITError+0x1d0>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473e:	2b40      	cmp	r3, #64	; 0x40
 8004740:	d10b      	bne.n	800475a <I2C_ITError+0x1ca>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	691a      	ldr	r2, [r3, #16]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	b2d2      	uxtb	r2, r2
 800474e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f006 fb8e 	bl	800ae7c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004766:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b04      	cmp	r3, #4
 8004772:	d11b      	bne.n	80047ac <I2C_ITError+0x21c>
 8004774:	7bfb      	ldrb	r3, [r7, #15]
 8004776:	2b28      	cmp	r3, #40	; 0x28
 8004778:	d118      	bne.n	80047ac <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004788:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a0a      	ldr	r2, [pc, #40]	; (80047b8 <I2C_ITError+0x228>)
 800478e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2220      	movs	r2, #32
 800479a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7fe ff14 	bl	80035d4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047ac:	bf00      	nop
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	080047bd 	.word	0x080047bd
 80047b8:	ffff0000 	.word	0xffff0000

080047bc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d0:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d6:	2200      	movs	r2, #0
 80047d8:	629a      	str	r2, [r3, #40]	; 0x28
  hi2c->hdmarx->XferCpltCallback = NULL;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047de:	2200      	movs	r2, #0
 80047e0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047f0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fc:	2200      	movs	r2, #0
 80047fe:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004804:	2200      	movs	r2, #0
 8004806:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0201 	bic.w	r2, r2, #1
 8004816:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b60      	cmp	r3, #96	; 0x60
 8004822:	d10e      	bne.n	8004842 <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2220      	movs	r2, #32
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f006 fb2a 	bl	800ae94 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004840:	e027      	b.n	8004892 <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004842:	7afb      	ldrb	r3, [r7, #11]
 8004844:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004848:	2b28      	cmp	r3, #40	; 0x28
 800484a:	d117      	bne.n	800487c <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0201 	orr.w	r2, r2, #1
 800485a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800486a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2228      	movs	r2, #40	; 0x28
 8004876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800487a:	e007      	b.n	800488c <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2220      	movs	r2, #32
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f006 faf5 	bl	800ae7c <HAL_I2C_ErrorCallback>
}
 8004892:	bf00      	nop
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800489a:	b480      	push	{r7}
 800489c:	b083      	sub	sp, #12
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80048aa:	d103      	bne.n	80048b4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80048b2:	e007      	b.n	80048c4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80048bc:	d102      	bne.n	80048c4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2208      	movs	r2, #8
 80048c2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bc80      	pop	{r7}
 80048cc:	4770      	bx	lr
	...

080048d0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80048d0:	b480      	push	{r7}
 80048d2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80048d4:	4b03      	ldr	r3, [pc, #12]	; (80048e4 <HAL_PWR_EnableBkUpAccess+0x14>)
 80048d6:	2201      	movs	r2, #1
 80048d8:	601a      	str	r2, [r3, #0]
}
 80048da:	bf00      	nop
 80048dc:	46bd      	mov	sp, r7
 80048de:	bc80      	pop	{r7}
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	420e0020 	.word	0x420e0020

080048e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e26c      	b.n	8004dd4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	f000 8087 	beq.w	8004a16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004908:	4b92      	ldr	r3, [pc, #584]	; (8004b54 <HAL_RCC_OscConfig+0x26c>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f003 030c 	and.w	r3, r3, #12
 8004910:	2b04      	cmp	r3, #4
 8004912:	d00c      	beq.n	800492e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004914:	4b8f      	ldr	r3, [pc, #572]	; (8004b54 <HAL_RCC_OscConfig+0x26c>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f003 030c 	and.w	r3, r3, #12
 800491c:	2b08      	cmp	r3, #8
 800491e:	d112      	bne.n	8004946 <HAL_RCC_OscConfig+0x5e>
 8004920:	4b8c      	ldr	r3, [pc, #560]	; (8004b54 <HAL_RCC_OscConfig+0x26c>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800492c:	d10b      	bne.n	8004946 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800492e:	4b89      	ldr	r3, [pc, #548]	; (8004b54 <HAL_RCC_OscConfig+0x26c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d06c      	beq.n	8004a14 <HAL_RCC_OscConfig+0x12c>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d168      	bne.n	8004a14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e246      	b.n	8004dd4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800494e:	d106      	bne.n	800495e <HAL_RCC_OscConfig+0x76>
 8004950:	4b80      	ldr	r3, [pc, #512]	; (8004b54 <HAL_RCC_OscConfig+0x26c>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a7f      	ldr	r2, [pc, #508]	; (8004b54 <HAL_RCC_OscConfig+0x26c>)
 8004956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800495a:	6013      	str	r3, [r2, #0]
 800495c:	e02e      	b.n	80049bc <HAL_RCC_OscConfig+0xd4>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10c      	bne.n	8004980 <HAL_RCC_OscConfig+0x98>
 8004966:	4b7b      	ldr	r3, [pc, #492]	; (8004b54 <HAL_RCC_OscConfig+0x26c>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a7a      	ldr	r2, [pc, #488]	; (8004b54 <HAL_RCC_OscConfig+0x26c>)
 800496c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004970:	6013      	str	r3, [r2, #0]
 8004972:	4b78      	ldr	r3, [pc, #480]	; (8004b54 <HAL_RCC_OscConfig+0x26c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a77      	ldr	r2, [pc, #476]	; (8004b54 <HAL_RCC_OscConfig+0x26c>)
 8004978:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	e01d      	b.n	80049bc <HAL_RCC_OscConfig+0xd4>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004988:	d10c      	bne.n	80049a4 <HAL_RCC_OscConfig+0xbc>
 800498a:	4b72      	ldr	r3, [pc, #456]	; (8004b54 <HAL_RCC_OscConfig+0x26c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a71      	ldr	r2, [pc, #452]	; (8004b54 <HAL_RCC_OscConfig+0x26c>)
 8004990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	4b6f      	ldr	r3, [pc, #444]	; (8004b54 <HAL_RCC_OscConfig+0x26c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a6e      	ldr	r2, [pc, #440]	; (8004b54 <HAL_RCC_OscConfig+0x26c>)
 800499c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	e00b      	b.n	80049bc <HAL_RCC_OscConfig+0xd4>
 80049a4:	4b6b      	ldr	r3, [pc, #428]	; (8004b54 <HAL_RCC_OscConfig+0x26c>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a6a      	ldr	r2, [pc, #424]	; (8004b54 <HAL_RCC_OscConfig+0x26c>)
 80049aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ae:	6013      	str	r3, [r2, #0]
 80049b0:	4b68      	ldr	r3, [pc, #416]	; (8004b54 <HAL_RCC_OscConfig+0x26c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a67      	ldr	r2, [pc, #412]	; (8004b54 <HAL_RCC_OscConfig+0x26c>)
 80049b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d013      	beq.n	80049ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c4:	f7fc fc32 	bl	800122c <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049cc:	f7fc fc2e 	bl	800122c <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b64      	cmp	r3, #100	; 0x64
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e1fa      	b.n	8004dd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049de:	4b5d      	ldr	r3, [pc, #372]	; (8004b54 <HAL_RCC_OscConfig+0x26c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0f0      	beq.n	80049cc <HAL_RCC_OscConfig+0xe4>
 80049ea:	e014      	b.n	8004a16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ec:	f7fc fc1e 	bl	800122c <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049f4:	f7fc fc1a 	bl	800122c <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b64      	cmp	r3, #100	; 0x64
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e1e6      	b.n	8004dd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a06:	4b53      	ldr	r3, [pc, #332]	; (8004b54 <HAL_RCC_OscConfig+0x26c>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1f0      	bne.n	80049f4 <HAL_RCC_OscConfig+0x10c>
 8004a12:	e000      	b.n	8004a16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d063      	beq.n	8004aea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a22:	4b4c      	ldr	r3, [pc, #304]	; (8004b54 <HAL_RCC_OscConfig+0x26c>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f003 030c 	and.w	r3, r3, #12
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00b      	beq.n	8004a46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004a2e:	4b49      	ldr	r3, [pc, #292]	; (8004b54 <HAL_RCC_OscConfig+0x26c>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f003 030c 	and.w	r3, r3, #12
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d11c      	bne.n	8004a74 <HAL_RCC_OscConfig+0x18c>
 8004a3a:	4b46      	ldr	r3, [pc, #280]	; (8004b54 <HAL_RCC_OscConfig+0x26c>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d116      	bne.n	8004a74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a46:	4b43      	ldr	r3, [pc, #268]	; (8004b54 <HAL_RCC_OscConfig+0x26c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d005      	beq.n	8004a5e <HAL_RCC_OscConfig+0x176>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d001      	beq.n	8004a5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e1ba      	b.n	8004dd4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a5e:	4b3d      	ldr	r3, [pc, #244]	; (8004b54 <HAL_RCC_OscConfig+0x26c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	4939      	ldr	r1, [pc, #228]	; (8004b54 <HAL_RCC_OscConfig+0x26c>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a72:	e03a      	b.n	8004aea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d020      	beq.n	8004abe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a7c:	4b36      	ldr	r3, [pc, #216]	; (8004b58 <HAL_RCC_OscConfig+0x270>)
 8004a7e:	2201      	movs	r2, #1
 8004a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a82:	f7fc fbd3 	bl	800122c <HAL_GetTick>
 8004a86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a88:	e008      	b.n	8004a9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a8a:	f7fc fbcf 	bl	800122c <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d901      	bls.n	8004a9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e19b      	b.n	8004dd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a9c:	4b2d      	ldr	r3, [pc, #180]	; (8004b54 <HAL_RCC_OscConfig+0x26c>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d0f0      	beq.n	8004a8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa8:	4b2a      	ldr	r3, [pc, #168]	; (8004b54 <HAL_RCC_OscConfig+0x26c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	4927      	ldr	r1, [pc, #156]	; (8004b54 <HAL_RCC_OscConfig+0x26c>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	600b      	str	r3, [r1, #0]
 8004abc:	e015      	b.n	8004aea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004abe:	4b26      	ldr	r3, [pc, #152]	; (8004b58 <HAL_RCC_OscConfig+0x270>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac4:	f7fc fbb2 	bl	800122c <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004acc:	f7fc fbae 	bl	800122c <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e17a      	b.n	8004dd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ade:	4b1d      	ldr	r3, [pc, #116]	; (8004b54 <HAL_RCC_OscConfig+0x26c>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1f0      	bne.n	8004acc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d03a      	beq.n	8004b6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d019      	beq.n	8004b32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004afe:	4b17      	ldr	r3, [pc, #92]	; (8004b5c <HAL_RCC_OscConfig+0x274>)
 8004b00:	2201      	movs	r2, #1
 8004b02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b04:	f7fc fb92 	bl	800122c <HAL_GetTick>
 8004b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b0c:	f7fc fb8e 	bl	800122c <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e15a      	b.n	8004dd4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b1e:	4b0d      	ldr	r3, [pc, #52]	; (8004b54 <HAL_RCC_OscConfig+0x26c>)
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0f0      	beq.n	8004b0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004b2a:	2001      	movs	r0, #1
 8004b2c:	f000 fb08 	bl	8005140 <RCC_Delay>
 8004b30:	e01c      	b.n	8004b6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b32:	4b0a      	ldr	r3, [pc, #40]	; (8004b5c <HAL_RCC_OscConfig+0x274>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b38:	f7fc fb78 	bl	800122c <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b3e:	e00f      	b.n	8004b60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b40:	f7fc fb74 	bl	800122c <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d908      	bls.n	8004b60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e140      	b.n	8004dd4 <HAL_RCC_OscConfig+0x4ec>
 8004b52:	bf00      	nop
 8004b54:	40021000 	.word	0x40021000
 8004b58:	42420000 	.word	0x42420000
 8004b5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b60:	4b9e      	ldr	r3, [pc, #632]	; (8004ddc <HAL_RCC_OscConfig+0x4f4>)
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1e9      	bne.n	8004b40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 80a6 	beq.w	8004cc6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b7e:	4b97      	ldr	r3, [pc, #604]	; (8004ddc <HAL_RCC_OscConfig+0x4f4>)
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10d      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b8a:	4b94      	ldr	r3, [pc, #592]	; (8004ddc <HAL_RCC_OscConfig+0x4f4>)
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	4a93      	ldr	r2, [pc, #588]	; (8004ddc <HAL_RCC_OscConfig+0x4f4>)
 8004b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b94:	61d3      	str	r3, [r2, #28]
 8004b96:	4b91      	ldr	r3, [pc, #580]	; (8004ddc <HAL_RCC_OscConfig+0x4f4>)
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b9e:	60bb      	str	r3, [r7, #8]
 8004ba0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ba6:	4b8e      	ldr	r3, [pc, #568]	; (8004de0 <HAL_RCC_OscConfig+0x4f8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d118      	bne.n	8004be4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bb2:	4b8b      	ldr	r3, [pc, #556]	; (8004de0 <HAL_RCC_OscConfig+0x4f8>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a8a      	ldr	r2, [pc, #552]	; (8004de0 <HAL_RCC_OscConfig+0x4f8>)
 8004bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bbe:	f7fc fb35 	bl	800122c <HAL_GetTick>
 8004bc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc4:	e008      	b.n	8004bd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bc6:	f7fc fb31 	bl	800122c <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b64      	cmp	r3, #100	; 0x64
 8004bd2:	d901      	bls.n	8004bd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e0fd      	b.n	8004dd4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd8:	4b81      	ldr	r3, [pc, #516]	; (8004de0 <HAL_RCC_OscConfig+0x4f8>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d0f0      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d106      	bne.n	8004bfa <HAL_RCC_OscConfig+0x312>
 8004bec:	4b7b      	ldr	r3, [pc, #492]	; (8004ddc <HAL_RCC_OscConfig+0x4f4>)
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	4a7a      	ldr	r2, [pc, #488]	; (8004ddc <HAL_RCC_OscConfig+0x4f4>)
 8004bf2:	f043 0301 	orr.w	r3, r3, #1
 8004bf6:	6213      	str	r3, [r2, #32]
 8004bf8:	e02d      	b.n	8004c56 <HAL_RCC_OscConfig+0x36e>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10c      	bne.n	8004c1c <HAL_RCC_OscConfig+0x334>
 8004c02:	4b76      	ldr	r3, [pc, #472]	; (8004ddc <HAL_RCC_OscConfig+0x4f4>)
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	4a75      	ldr	r2, [pc, #468]	; (8004ddc <HAL_RCC_OscConfig+0x4f4>)
 8004c08:	f023 0301 	bic.w	r3, r3, #1
 8004c0c:	6213      	str	r3, [r2, #32]
 8004c0e:	4b73      	ldr	r3, [pc, #460]	; (8004ddc <HAL_RCC_OscConfig+0x4f4>)
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	4a72      	ldr	r2, [pc, #456]	; (8004ddc <HAL_RCC_OscConfig+0x4f4>)
 8004c14:	f023 0304 	bic.w	r3, r3, #4
 8004c18:	6213      	str	r3, [r2, #32]
 8004c1a:	e01c      	b.n	8004c56 <HAL_RCC_OscConfig+0x36e>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	2b05      	cmp	r3, #5
 8004c22:	d10c      	bne.n	8004c3e <HAL_RCC_OscConfig+0x356>
 8004c24:	4b6d      	ldr	r3, [pc, #436]	; (8004ddc <HAL_RCC_OscConfig+0x4f4>)
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	4a6c      	ldr	r2, [pc, #432]	; (8004ddc <HAL_RCC_OscConfig+0x4f4>)
 8004c2a:	f043 0304 	orr.w	r3, r3, #4
 8004c2e:	6213      	str	r3, [r2, #32]
 8004c30:	4b6a      	ldr	r3, [pc, #424]	; (8004ddc <HAL_RCC_OscConfig+0x4f4>)
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	4a69      	ldr	r2, [pc, #420]	; (8004ddc <HAL_RCC_OscConfig+0x4f4>)
 8004c36:	f043 0301 	orr.w	r3, r3, #1
 8004c3a:	6213      	str	r3, [r2, #32]
 8004c3c:	e00b      	b.n	8004c56 <HAL_RCC_OscConfig+0x36e>
 8004c3e:	4b67      	ldr	r3, [pc, #412]	; (8004ddc <HAL_RCC_OscConfig+0x4f4>)
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	4a66      	ldr	r2, [pc, #408]	; (8004ddc <HAL_RCC_OscConfig+0x4f4>)
 8004c44:	f023 0301 	bic.w	r3, r3, #1
 8004c48:	6213      	str	r3, [r2, #32]
 8004c4a:	4b64      	ldr	r3, [pc, #400]	; (8004ddc <HAL_RCC_OscConfig+0x4f4>)
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	4a63      	ldr	r2, [pc, #396]	; (8004ddc <HAL_RCC_OscConfig+0x4f4>)
 8004c50:	f023 0304 	bic.w	r3, r3, #4
 8004c54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d015      	beq.n	8004c8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c5e:	f7fc fae5 	bl	800122c <HAL_GetTick>
 8004c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c64:	e00a      	b.n	8004c7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c66:	f7fc fae1 	bl	800122c <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d901      	bls.n	8004c7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e0ab      	b.n	8004dd4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c7c:	4b57      	ldr	r3, [pc, #348]	; (8004ddc <HAL_RCC_OscConfig+0x4f4>)
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d0ee      	beq.n	8004c66 <HAL_RCC_OscConfig+0x37e>
 8004c88:	e014      	b.n	8004cb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c8a:	f7fc facf 	bl	800122c <HAL_GetTick>
 8004c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c90:	e00a      	b.n	8004ca8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c92:	f7fc facb 	bl	800122c <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e095      	b.n	8004dd4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ca8:	4b4c      	ldr	r3, [pc, #304]	; (8004ddc <HAL_RCC_OscConfig+0x4f4>)
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1ee      	bne.n	8004c92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004cb4:	7dfb      	ldrb	r3, [r7, #23]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d105      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cba:	4b48      	ldr	r3, [pc, #288]	; (8004ddc <HAL_RCC_OscConfig+0x4f4>)
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	4a47      	ldr	r2, [pc, #284]	; (8004ddc <HAL_RCC_OscConfig+0x4f4>)
 8004cc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cc4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f000 8081 	beq.w	8004dd2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cd0:	4b42      	ldr	r3, [pc, #264]	; (8004ddc <HAL_RCC_OscConfig+0x4f4>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f003 030c 	and.w	r3, r3, #12
 8004cd8:	2b08      	cmp	r3, #8
 8004cda:	d061      	beq.n	8004da0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d146      	bne.n	8004d72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ce4:	4b3f      	ldr	r3, [pc, #252]	; (8004de4 <HAL_RCC_OscConfig+0x4fc>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cea:	f7fc fa9f 	bl	800122c <HAL_GetTick>
 8004cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cf0:	e008      	b.n	8004d04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cf2:	f7fc fa9b 	bl	800122c <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e067      	b.n	8004dd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d04:	4b35      	ldr	r3, [pc, #212]	; (8004ddc <HAL_RCC_OscConfig+0x4f4>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1f0      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d18:	d108      	bne.n	8004d2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004d1a:	4b30      	ldr	r3, [pc, #192]	; (8004ddc <HAL_RCC_OscConfig+0x4f4>)
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	492d      	ldr	r1, [pc, #180]	; (8004ddc <HAL_RCC_OscConfig+0x4f4>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d2c:	4b2b      	ldr	r3, [pc, #172]	; (8004ddc <HAL_RCC_OscConfig+0x4f4>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a19      	ldr	r1, [r3, #32]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3c:	430b      	orrs	r3, r1
 8004d3e:	4927      	ldr	r1, [pc, #156]	; (8004ddc <HAL_RCC_OscConfig+0x4f4>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d44:	4b27      	ldr	r3, [pc, #156]	; (8004de4 <HAL_RCC_OscConfig+0x4fc>)
 8004d46:	2201      	movs	r2, #1
 8004d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d4a:	f7fc fa6f 	bl	800122c <HAL_GetTick>
 8004d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d50:	e008      	b.n	8004d64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d52:	f7fc fa6b 	bl	800122c <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e037      	b.n	8004dd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d64:	4b1d      	ldr	r3, [pc, #116]	; (8004ddc <HAL_RCC_OscConfig+0x4f4>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0f0      	beq.n	8004d52 <HAL_RCC_OscConfig+0x46a>
 8004d70:	e02f      	b.n	8004dd2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d72:	4b1c      	ldr	r3, [pc, #112]	; (8004de4 <HAL_RCC_OscConfig+0x4fc>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d78:	f7fc fa58 	bl	800122c <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d80:	f7fc fa54 	bl	800122c <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e020      	b.n	8004dd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d92:	4b12      	ldr	r3, [pc, #72]	; (8004ddc <HAL_RCC_OscConfig+0x4f4>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1f0      	bne.n	8004d80 <HAL_RCC_OscConfig+0x498>
 8004d9e:	e018      	b.n	8004dd2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d101      	bne.n	8004dac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e013      	b.n	8004dd4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004dac:	4b0b      	ldr	r3, [pc, #44]	; (8004ddc <HAL_RCC_OscConfig+0x4f4>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d106      	bne.n	8004dce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d001      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e000      	b.n	8004dd4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	40021000 	.word	0x40021000
 8004de0:	40007000 	.word	0x40007000
 8004de4:	42420060 	.word	0x42420060

08004de8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d101      	bne.n	8004dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e0d0      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004dfc:	4b6a      	ldr	r3, [pc, #424]	; (8004fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0307 	and.w	r3, r3, #7
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d910      	bls.n	8004e2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e0a:	4b67      	ldr	r3, [pc, #412]	; (8004fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f023 0207 	bic.w	r2, r3, #7
 8004e12:	4965      	ldr	r1, [pc, #404]	; (8004fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e1a:	4b63      	ldr	r3, [pc, #396]	; (8004fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0307 	and.w	r3, r3, #7
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d001      	beq.n	8004e2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e0b8      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d020      	beq.n	8004e7a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0304 	and.w	r3, r3, #4
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d005      	beq.n	8004e50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e44:	4b59      	ldr	r3, [pc, #356]	; (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	4a58      	ldr	r2, [pc, #352]	; (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004e4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004e4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0308 	and.w	r3, r3, #8
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d005      	beq.n	8004e68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e5c:	4b53      	ldr	r3, [pc, #332]	; (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	4a52      	ldr	r2, [pc, #328]	; (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004e62:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004e66:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e68:	4b50      	ldr	r3, [pc, #320]	; (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	494d      	ldr	r1, [pc, #308]	; (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d040      	beq.n	8004f08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d107      	bne.n	8004e9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e8e:	4b47      	ldr	r3, [pc, #284]	; (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d115      	bne.n	8004ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e07f      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d107      	bne.n	8004eb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ea6:	4b41      	ldr	r3, [pc, #260]	; (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d109      	bne.n	8004ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e073      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eb6:	4b3d      	ldr	r3, [pc, #244]	; (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e06b      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ec6:	4b39      	ldr	r3, [pc, #228]	; (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f023 0203 	bic.w	r2, r3, #3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	4936      	ldr	r1, [pc, #216]	; (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ed8:	f7fc f9a8 	bl	800122c <HAL_GetTick>
 8004edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ede:	e00a      	b.n	8004ef6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ee0:	f7fc f9a4 	bl	800122c <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d901      	bls.n	8004ef6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e053      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ef6:	4b2d      	ldr	r3, [pc, #180]	; (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f003 020c 	and.w	r2, r3, #12
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d1eb      	bne.n	8004ee0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f08:	4b27      	ldr	r3, [pc, #156]	; (8004fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0307 	and.w	r3, r3, #7
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d210      	bcs.n	8004f38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f16:	4b24      	ldr	r3, [pc, #144]	; (8004fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f023 0207 	bic.w	r2, r3, #7
 8004f1e:	4922      	ldr	r1, [pc, #136]	; (8004fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f26:	4b20      	ldr	r3, [pc, #128]	; (8004fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0307 	and.w	r3, r3, #7
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d001      	beq.n	8004f38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e032      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d008      	beq.n	8004f56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f44:	4b19      	ldr	r3, [pc, #100]	; (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	4916      	ldr	r1, [pc, #88]	; (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0308 	and.w	r3, r3, #8
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d009      	beq.n	8004f76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f62:	4b12      	ldr	r3, [pc, #72]	; (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	490e      	ldr	r1, [pc, #56]	; (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f76:	f000 f821 	bl	8004fbc <HAL_RCC_GetSysClockFreq>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	4b0b      	ldr	r3, [pc, #44]	; (8004fac <HAL_RCC_ClockConfig+0x1c4>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	091b      	lsrs	r3, r3, #4
 8004f82:	f003 030f 	and.w	r3, r3, #15
 8004f86:	490a      	ldr	r1, [pc, #40]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004f88:	5ccb      	ldrb	r3, [r1, r3]
 8004f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f8e:	4a09      	ldr	r2, [pc, #36]	; (8004fb4 <HAL_RCC_ClockConfig+0x1cc>)
 8004f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f92:	4b09      	ldr	r3, [pc, #36]	; (8004fb8 <HAL_RCC_ClockConfig+0x1d0>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f008 fc96 	bl	800d8c8 <HAL_InitTick>

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	40022000 	.word	0x40022000
 8004fac:	40021000 	.word	0x40021000
 8004fb0:	0800fec8 	.word	0x0800fec8
 8004fb4:	2000003c 	.word	0x2000003c
 8004fb8:	20000000 	.word	0x20000000

08004fbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fbc:	b490      	push	{r4, r7}
 8004fbe:	b08a      	sub	sp, #40	; 0x28
 8004fc0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004fc2:	4b2a      	ldr	r3, [pc, #168]	; (800506c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004fc4:	1d3c      	adds	r4, r7, #4
 8004fc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004fc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004fcc:	f240 2301 	movw	r3, #513	; 0x201
 8004fd0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	61fb      	str	r3, [r7, #28]
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	61bb      	str	r3, [r7, #24]
 8004fda:	2300      	movs	r3, #0
 8004fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8004fde:	2300      	movs	r3, #0
 8004fe0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004fe6:	4b22      	ldr	r3, [pc, #136]	; (8005070 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	f003 030c 	and.w	r3, r3, #12
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	d002      	beq.n	8004ffc <HAL_RCC_GetSysClockFreq+0x40>
 8004ff6:	2b08      	cmp	r3, #8
 8004ff8:	d003      	beq.n	8005002 <HAL_RCC_GetSysClockFreq+0x46>
 8004ffa:	e02d      	b.n	8005058 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ffc:	4b1d      	ldr	r3, [pc, #116]	; (8005074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ffe:	623b      	str	r3, [r7, #32]
      break;
 8005000:	e02d      	b.n	800505e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	0c9b      	lsrs	r3, r3, #18
 8005006:	f003 030f 	and.w	r3, r3, #15
 800500a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800500e:	4413      	add	r3, r2
 8005010:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005014:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d013      	beq.n	8005048 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005020:	4b13      	ldr	r3, [pc, #76]	; (8005070 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	0c5b      	lsrs	r3, r3, #17
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800502e:	4413      	add	r3, r2
 8005030:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005034:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	4a0e      	ldr	r2, [pc, #56]	; (8005074 <HAL_RCC_GetSysClockFreq+0xb8>)
 800503a:	fb02 f203 	mul.w	r2, r2, r3
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	fbb2 f3f3 	udiv	r3, r2, r3
 8005044:	627b      	str	r3, [r7, #36]	; 0x24
 8005046:	e004      	b.n	8005052 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	4a0b      	ldr	r2, [pc, #44]	; (8005078 <HAL_RCC_GetSysClockFreq+0xbc>)
 800504c:	fb02 f303 	mul.w	r3, r2, r3
 8005050:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005054:	623b      	str	r3, [r7, #32]
      break;
 8005056:	e002      	b.n	800505e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005058:	4b06      	ldr	r3, [pc, #24]	; (8005074 <HAL_RCC_GetSysClockFreq+0xb8>)
 800505a:	623b      	str	r3, [r7, #32]
      break;
 800505c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800505e:	6a3b      	ldr	r3, [r7, #32]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3728      	adds	r7, #40	; 0x28
 8005064:	46bd      	mov	sp, r7
 8005066:	bc90      	pop	{r4, r7}
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	0800fb08 	.word	0x0800fb08
 8005070:	40021000 	.word	0x40021000
 8005074:	007a1200 	.word	0x007a1200
 8005078:	003d0900 	.word	0x003d0900

0800507c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005080:	4b02      	ldr	r3, [pc, #8]	; (800508c <HAL_RCC_GetHCLKFreq+0x10>)
 8005082:	681b      	ldr	r3, [r3, #0]
}
 8005084:	4618      	mov	r0, r3
 8005086:	46bd      	mov	sp, r7
 8005088:	bc80      	pop	{r7}
 800508a:	4770      	bx	lr
 800508c:	2000003c 	.word	0x2000003c

08005090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005094:	f7ff fff2 	bl	800507c <HAL_RCC_GetHCLKFreq>
 8005098:	4602      	mov	r2, r0
 800509a:	4b05      	ldr	r3, [pc, #20]	; (80050b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	0a1b      	lsrs	r3, r3, #8
 80050a0:	f003 0307 	and.w	r3, r3, #7
 80050a4:	4903      	ldr	r1, [pc, #12]	; (80050b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050a6:	5ccb      	ldrb	r3, [r1, r3]
 80050a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	40021000 	.word	0x40021000
 80050b4:	0800fed8 	.word	0x0800fed8

080050b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80050bc:	f7ff ffde 	bl	800507c <HAL_RCC_GetHCLKFreq>
 80050c0:	4602      	mov	r2, r0
 80050c2:	4b05      	ldr	r3, [pc, #20]	; (80050d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	0adb      	lsrs	r3, r3, #11
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	4903      	ldr	r1, [pc, #12]	; (80050dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80050ce:	5ccb      	ldrb	r3, [r1, r3]
 80050d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	40021000 	.word	0x40021000
 80050dc:	0800fed8 	.word	0x0800fed8

080050e0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	220f      	movs	r2, #15
 80050ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80050f0:	4b11      	ldr	r3, [pc, #68]	; (8005138 <HAL_RCC_GetClockConfig+0x58>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f003 0203 	and.w	r2, r3, #3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80050fc:	4b0e      	ldr	r3, [pc, #56]	; (8005138 <HAL_RCC_GetClockConfig+0x58>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005108:	4b0b      	ldr	r3, [pc, #44]	; (8005138 <HAL_RCC_GetClockConfig+0x58>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005114:	4b08      	ldr	r3, [pc, #32]	; (8005138 <HAL_RCC_GetClockConfig+0x58>)
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	08db      	lsrs	r3, r3, #3
 800511a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005122:	4b06      	ldr	r3, [pc, #24]	; (800513c <HAL_RCC_GetClockConfig+0x5c>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0207 	and.w	r2, r3, #7
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800512e:	bf00      	nop
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	bc80      	pop	{r7}
 8005136:	4770      	bx	lr
 8005138:	40021000 	.word	0x40021000
 800513c:	40022000 	.word	0x40022000

08005140 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005148:	4b0a      	ldr	r3, [pc, #40]	; (8005174 <RCC_Delay+0x34>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a0a      	ldr	r2, [pc, #40]	; (8005178 <RCC_Delay+0x38>)
 800514e:	fba2 2303 	umull	r2, r3, r2, r3
 8005152:	0a5b      	lsrs	r3, r3, #9
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	fb02 f303 	mul.w	r3, r2, r3
 800515a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800515c:	bf00      	nop
  }
  while (Delay --);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	1e5a      	subs	r2, r3, #1
 8005162:	60fa      	str	r2, [r7, #12]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1f9      	bne.n	800515c <RCC_Delay+0x1c>
}
 8005168:	bf00      	nop
 800516a:	bf00      	nop
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	bc80      	pop	{r7}
 8005172:	4770      	bx	lr
 8005174:	2000003c 	.word	0x2000003c
 8005178:	10624dd3 	.word	0x10624dd3

0800517c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	613b      	str	r3, [r7, #16]
 8005188:	2300      	movs	r3, #0
 800518a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	2b00      	cmp	r3, #0
 8005196:	d07d      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005198:	2300      	movs	r3, #0
 800519a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800519c:	4b4f      	ldr	r3, [pc, #316]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10d      	bne.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051a8:	4b4c      	ldr	r3, [pc, #304]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051aa:	69db      	ldr	r3, [r3, #28]
 80051ac:	4a4b      	ldr	r2, [pc, #300]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051b2:	61d3      	str	r3, [r2, #28]
 80051b4:	4b49      	ldr	r3, [pc, #292]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051b6:	69db      	ldr	r3, [r3, #28]
 80051b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051bc:	60bb      	str	r3, [r7, #8]
 80051be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051c0:	2301      	movs	r3, #1
 80051c2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051c4:	4b46      	ldr	r3, [pc, #280]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d118      	bne.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051d0:	4b43      	ldr	r3, [pc, #268]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a42      	ldr	r2, [pc, #264]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051dc:	f7fc f826 	bl	800122c <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e2:	e008      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051e4:	f7fc f822 	bl	800122c <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b64      	cmp	r3, #100	; 0x64
 80051f0:	d901      	bls.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e06d      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f6:	4b3a      	ldr	r3, [pc, #232]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0f0      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005202:	4b36      	ldr	r3, [pc, #216]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800520a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d02e      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	429a      	cmp	r2, r3
 800521e:	d027      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005220:	4b2e      	ldr	r3, [pc, #184]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005228:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800522a:	4b2e      	ldr	r3, [pc, #184]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800522c:	2201      	movs	r2, #1
 800522e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005230:	4b2c      	ldr	r3, [pc, #176]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005236:	4a29      	ldr	r2, [pc, #164]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b00      	cmp	r3, #0
 8005244:	d014      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005246:	f7fb fff1 	bl	800122c <HAL_GetTick>
 800524a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800524c:	e00a      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800524e:	f7fb ffed 	bl	800122c <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	f241 3288 	movw	r2, #5000	; 0x1388
 800525c:	4293      	cmp	r3, r2
 800525e:	d901      	bls.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e036      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005264:	4b1d      	ldr	r3, [pc, #116]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d0ee      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005270:	4b1a      	ldr	r3, [pc, #104]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005272:	6a1b      	ldr	r3, [r3, #32]
 8005274:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	4917      	ldr	r1, [pc, #92]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800527e:	4313      	orrs	r3, r2
 8005280:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005282:	7dfb      	ldrb	r3, [r7, #23]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d105      	bne.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005288:	4b14      	ldr	r3, [pc, #80]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800528a:	69db      	ldr	r3, [r3, #28]
 800528c:	4a13      	ldr	r2, [pc, #76]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800528e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005292:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b00      	cmp	r3, #0
 800529e:	d008      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052a0:	4b0e      	ldr	r3, [pc, #56]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	490b      	ldr	r1, [pc, #44]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0310 	and.w	r3, r3, #16
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d008      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052be:	4b07      	ldr	r3, [pc, #28]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	4904      	ldr	r1, [pc, #16]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3718      	adds	r7, #24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	40021000 	.word	0x40021000
 80052e0:	40007000 	.word	0x40007000
 80052e4:	42420440 	.word	0x42420440

080052e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80052e8:	b590      	push	{r4, r7, lr}
 80052ea:	b08d      	sub	sp, #52	; 0x34
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80052f0:	4b6b      	ldr	r3, [pc, #428]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80052f2:	f107 040c 	add.w	r4, r7, #12
 80052f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80052f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80052fc:	f240 2301 	movw	r3, #513	; 0x201
 8005300:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005302:	2300      	movs	r3, #0
 8005304:	627b      	str	r3, [r7, #36]	; 0x24
 8005306:	2300      	movs	r3, #0
 8005308:	62fb      	str	r3, [r7, #44]	; 0x2c
 800530a:	2300      	movs	r3, #0
 800530c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	61fb      	str	r3, [r7, #28]
 8005312:	2300      	movs	r3, #0
 8005314:	62bb      	str	r3, [r7, #40]	; 0x28
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	3b01      	subs	r3, #1
 800531a:	2b0f      	cmp	r3, #15
 800531c:	f200 80b6 	bhi.w	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8005320:	a201      	add	r2, pc, #4	; (adr r2, 8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8005322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005326:	bf00      	nop
 8005328:	0800540b 	.word	0x0800540b
 800532c:	08005471 	.word	0x08005471
 8005330:	0800548d 	.word	0x0800548d
 8005334:	080053fb 	.word	0x080053fb
 8005338:	0800548d 	.word	0x0800548d
 800533c:	0800548d 	.word	0x0800548d
 8005340:	0800548d 	.word	0x0800548d
 8005344:	08005403 	.word	0x08005403
 8005348:	0800548d 	.word	0x0800548d
 800534c:	0800548d 	.word	0x0800548d
 8005350:	0800548d 	.word	0x0800548d
 8005354:	0800548d 	.word	0x0800548d
 8005358:	0800548d 	.word	0x0800548d
 800535c:	0800548d 	.word	0x0800548d
 8005360:	0800548d 	.word	0x0800548d
 8005364:	08005369 	.word	0x08005369
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8005368:	4b4e      	ldr	r3, [pc, #312]	; (80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800536e:	4b4d      	ldr	r3, [pc, #308]	; (80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005376:	2b00      	cmp	r3, #0
 8005378:	f000 808a 	beq.w	8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	0c9b      	lsrs	r3, r3, #18
 8005380:	f003 030f 	and.w	r3, r3, #15
 8005384:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005388:	4413      	add	r3, r2
 800538a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800538e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d018      	beq.n	80053cc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800539a:	4b42      	ldr	r3, [pc, #264]	; (80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	0c5b      	lsrs	r3, r3, #17
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80053a8:	4413      	add	r3, r2
 80053aa:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80053ae:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00d      	beq.n	80053d6 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80053ba:	4a3b      	ldr	r2, [pc, #236]	; (80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	fbb2 f2f3 	udiv	r2, r2, r3
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	fb02 f303 	mul.w	r3, r2, r3
 80053c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053ca:	e004      	b.n	80053d6 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80053cc:	6a3b      	ldr	r3, [r7, #32]
 80053ce:	4a37      	ldr	r2, [pc, #220]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 80053d0:	fb02 f303 	mul.w	r3, r2, r3
 80053d4:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80053d6:	4b33      	ldr	r3, [pc, #204]	; (80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053e2:	d102      	bne.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 80053e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e6:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80053e8:	e052      	b.n	8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          frequency = (pllclk * 2) / 3;
 80053ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	4a30      	ldr	r2, [pc, #192]	; (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 80053f0:	fba2 2303 	umull	r2, r3, r2, r3
 80053f4:	085b      	lsrs	r3, r3, #1
 80053f6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80053f8:	e04a      	b.n	8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80053fa:	f7ff fddf 	bl	8004fbc <HAL_RCC_GetSysClockFreq>
 80053fe:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8005400:	e049      	b.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8005402:	f7ff fddb 	bl	8004fbc <HAL_RCC_GetSysClockFreq>
 8005406:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8005408:	e045      	b.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800540a:	4b26      	ldr	r3, [pc, #152]	; (80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800541a:	d108      	bne.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 8005426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800542a:	62bb      	str	r3, [r7, #40]	; 0x28
 800542c:	e01f      	b.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005438:	d109      	bne.n	800544e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800543a:	4b1a      	ldr	r3, [pc, #104]	; (80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 8005446:	f649 4340 	movw	r3, #40000	; 0x9c40
 800544a:	62bb      	str	r3, [r7, #40]	; 0x28
 800544c:	e00f      	b.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005454:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005458:	d11c      	bne.n	8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800545a:	4b12      	ldr	r3, [pc, #72]	; (80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d016      	beq.n	8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      {
        frequency = HSE_VALUE / 128U;
 8005466:	f24f 4324 	movw	r3, #62500	; 0xf424
 800546a:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 800546c:	e012      	b.n	8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800546e:	e011      	b.n	8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005470:	f7ff fe22 	bl	80050b8 <HAL_RCC_GetPCLK2Freq>
 8005474:	4602      	mov	r2, r0
 8005476:	4b0b      	ldr	r3, [pc, #44]	; (80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	0b9b      	lsrs	r3, r3, #14
 800547c:	f003 0303 	and.w	r3, r3, #3
 8005480:	3301      	adds	r3, #1
 8005482:	005b      	lsls	r3, r3, #1
 8005484:	fbb2 f3f3 	udiv	r3, r2, r3
 8005488:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800548a:	e004      	b.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    default:
    {
      break;
 800548c:	bf00      	nop
 800548e:	e002      	b.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8005490:	bf00      	nop
 8005492:	e000      	b.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8005494:	bf00      	nop
    }
  }
  return (frequency);
 8005496:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005498:	4618      	mov	r0, r3
 800549a:	3734      	adds	r7, #52	; 0x34
 800549c:	46bd      	mov	sp, r7
 800549e:	bd90      	pop	{r4, r7, pc}
 80054a0:	0800fb18 	.word	0x0800fb18
 80054a4:	40021000 	.word	0x40021000
 80054a8:	007a1200 	.word	0x007a1200
 80054ac:	003d0900 	.word	0x003d0900
 80054b0:	aaaaaaab 	.word	0xaaaaaaab

080054b4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80054bc:	2300      	movs	r3, #0
 80054be:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e084      	b.n	80055d4 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	7c5b      	ldrb	r3, [r3, #17]
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d105      	bne.n	80054e0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f008 f984 	bl	800d7e8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 faa0 	bl	8005a2c <HAL_RTC_WaitForSynchro>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d004      	beq.n	80054fc <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2204      	movs	r2, #4
 80054f6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e06b      	b.n	80055d4 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 fb59 	bl	8005bb4 <RTC_EnterInitMode>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d004      	beq.n	8005512 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2204      	movs	r2, #4
 800550c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e060      	b.n	80055d4 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f022 0207 	bic.w	r2, r2, #7
 8005520:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d005      	beq.n	8005536 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800552a:	4b2c      	ldr	r3, [pc, #176]	; (80055dc <HAL_RTC_Init+0x128>)
 800552c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552e:	4a2b      	ldr	r2, [pc, #172]	; (80055dc <HAL_RTC_Init+0x128>)
 8005530:	f023 0301 	bic.w	r3, r3, #1
 8005534:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8005536:	4b29      	ldr	r3, [pc, #164]	; (80055dc <HAL_RTC_Init+0x128>)
 8005538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	4926      	ldr	r1, [pc, #152]	; (80055dc <HAL_RTC_Init+0x128>)
 8005544:	4313      	orrs	r3, r2
 8005546:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005550:	d003      	beq.n	800555a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	e00e      	b.n	8005578 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800555a:	2001      	movs	r0, #1
 800555c:	f7ff fec4 	bl	80052e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005560:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d104      	bne.n	8005572 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2204      	movs	r2, #4
 800556c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e030      	b.n	80055d4 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	3b01      	subs	r3, #1
 8005576:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f023 010f 	bic.w	r1, r3, #15
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	0c1a      	lsrs	r2, r3, #16
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	430a      	orrs	r2, r1
 800558c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	0c1b      	lsrs	r3, r3, #16
 8005596:	041b      	lsls	r3, r3, #16
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	b291      	uxth	r1, r2
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	6812      	ldr	r2, [r2, #0]
 80055a0:	430b      	orrs	r3, r1
 80055a2:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 fb2d 	bl	8005c04 <RTC_ExitInitMode>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d004      	beq.n	80055ba <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2204      	movs	r2, #4
 80055b4:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e00c      	b.n	80055d4 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80055d2:	2300      	movs	r3, #0
  }
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	40006c00 	.word	0x40006c00

080055e0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80055e0:	b590      	push	{r4, r7, lr}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80055ec:	2300      	movs	r3, #0
 80055ee:	617b      	str	r3, [r7, #20]
 80055f0:	2300      	movs	r3, #0
 80055f2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d002      	beq.n	8005600 <HAL_RTC_SetTime+0x20>
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d101      	bne.n	8005604 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e080      	b.n	8005706 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	7c1b      	ldrb	r3, [r3, #16]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d101      	bne.n	8005610 <HAL_RTC_SetTime+0x30>
 800560c:	2302      	movs	r3, #2
 800560e:	e07a      	b.n	8005706 <HAL_RTC_SetTime+0x126>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2201      	movs	r2, #1
 8005614:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2202      	movs	r2, #2
 800561a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d113      	bne.n	800564a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	461a      	mov	r2, r3
 8005628:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800562c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	785b      	ldrb	r3, [r3, #1]
 8005634:	4619      	mov	r1, r3
 8005636:	460b      	mov	r3, r1
 8005638:	011b      	lsls	r3, r3, #4
 800563a:	1a5b      	subs	r3, r3, r1
 800563c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800563e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005644:	4413      	add	r3, r2
 8005646:	617b      	str	r3, [r7, #20]
 8005648:	e01e      	b.n	8005688 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	4618      	mov	r0, r3
 8005650:	f000 fb1d 	bl	8005c8e <RTC_Bcd2ToByte>
 8005654:	4603      	mov	r3, r0
 8005656:	461a      	mov	r2, r3
 8005658:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800565c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	785b      	ldrb	r3, [r3, #1]
 8005664:	4618      	mov	r0, r3
 8005666:	f000 fb12 	bl	8005c8e <RTC_Bcd2ToByte>
 800566a:	4603      	mov	r3, r0
 800566c:	461a      	mov	r2, r3
 800566e:	4613      	mov	r3, r2
 8005670:	011b      	lsls	r3, r3, #4
 8005672:	1a9b      	subs	r3, r3, r2
 8005674:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005676:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	789b      	ldrb	r3, [r3, #2]
 800567c:	4618      	mov	r0, r3
 800567e:	f000 fb06 	bl	8005c8e <RTC_Bcd2ToByte>
 8005682:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005684:	4423      	add	r3, r4
 8005686:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005688:	6979      	ldr	r1, [r7, #20]
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f000 fa2b 	bl	8005ae6 <RTC_WriteTimeCounter>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d007      	beq.n	80056a6 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2204      	movs	r2, #4
 800569a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e02f      	b.n	8005706 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 0205 	bic.w	r2, r2, #5
 80056b4:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f000 fa3c 	bl	8005b34 <RTC_ReadAlarmCounter>
 80056bc:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c4:	d018      	beq.n	80056f8 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d214      	bcs.n	80056f8 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80056d4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80056d8:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80056da:	6939      	ldr	r1, [r7, #16]
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f000 fa42 	bl	8005b66 <RTC_WriteAlarmCounter>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d007      	beq.n	80056f8 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2204      	movs	r2, #4
 80056ec:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e006      	b.n	8005706 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2201      	movs	r2, #1
 80056fc:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8005704:	2300      	movs	r3, #0
  }
}
 8005706:	4618      	mov	r0, r3
 8005708:	371c      	adds	r7, #28
 800570a:	46bd      	mov	sp, r7
 800570c:	bd90      	pop	{r4, r7, pc}
	...

08005710 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b088      	sub	sp, #32
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 800571c:	2300      	movs	r3, #0
 800571e:	61bb      	str	r3, [r7, #24]
 8005720:	2300      	movs	r3, #0
 8005722:	61fb      	str	r3, [r7, #28]
 8005724:	2300      	movs	r3, #0
 8005726:	617b      	str	r3, [r7, #20]
 8005728:	2300      	movs	r3, #0
 800572a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d002      	beq.n	8005738 <HAL_RTC_GetTime+0x28>
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e0b5      	b.n	80058a8 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f003 0304 	and.w	r3, r3, #4
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e0ac      	b.n	80058a8 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 f999 	bl	8005a86 <RTC_ReadTimeCounter>
 8005754:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	4a55      	ldr	r2, [pc, #340]	; (80058b0 <HAL_RTC_GetTime+0x1a0>)
 800575a:	fba2 2303 	umull	r2, r3, r2, r3
 800575e:	0adb      	lsrs	r3, r3, #11
 8005760:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	4b52      	ldr	r3, [pc, #328]	; (80058b0 <HAL_RTC_GetTime+0x1a0>)
 8005766:	fba3 1302 	umull	r1, r3, r3, r2
 800576a:	0adb      	lsrs	r3, r3, #11
 800576c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005770:	fb01 f303 	mul.w	r3, r1, r3
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	4a4f      	ldr	r2, [pc, #316]	; (80058b4 <HAL_RTC_GetTime+0x1a4>)
 8005778:	fba2 2303 	umull	r2, r3, r2, r3
 800577c:	095b      	lsrs	r3, r3, #5
 800577e:	b2da      	uxtb	r2, r3
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	4a4a      	ldr	r2, [pc, #296]	; (80058b0 <HAL_RTC_GetTime+0x1a0>)
 8005788:	fba2 1203 	umull	r1, r2, r2, r3
 800578c:	0ad2      	lsrs	r2, r2, #11
 800578e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005792:	fb01 f202 	mul.w	r2, r1, r2
 8005796:	1a9a      	subs	r2, r3, r2
 8005798:	4b46      	ldr	r3, [pc, #280]	; (80058b4 <HAL_RTC_GetTime+0x1a4>)
 800579a:	fba3 1302 	umull	r1, r3, r3, r2
 800579e:	0959      	lsrs	r1, r3, #5
 80057a0:	460b      	mov	r3, r1
 80057a2:	011b      	lsls	r3, r3, #4
 80057a4:	1a5b      	subs	r3, r3, r1
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	1ad1      	subs	r1, r2, r3
 80057aa:	b2ca      	uxtb	r2, r1
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	2b17      	cmp	r3, #23
 80057b4:	d955      	bls.n	8005862 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	4a3f      	ldr	r2, [pc, #252]	; (80058b8 <HAL_RTC_GetTime+0x1a8>)
 80057ba:	fba2 2303 	umull	r2, r3, r2, r3
 80057be:	091b      	lsrs	r3, r3, #4
 80057c0:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80057c2:	6939      	ldr	r1, [r7, #16]
 80057c4:	4b3c      	ldr	r3, [pc, #240]	; (80058b8 <HAL_RTC_GetTime+0x1a8>)
 80057c6:	fba3 2301 	umull	r2, r3, r3, r1
 80057ca:	091a      	lsrs	r2, r3, #4
 80057cc:	4613      	mov	r3, r2
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	4413      	add	r3, r2
 80057d2:	00db      	lsls	r3, r3, #3
 80057d4:	1aca      	subs	r2, r1, r3
 80057d6:	b2d2      	uxtb	r2, r2
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 f9a9 	bl	8005b34 <RTC_ReadAlarmCounter>
 80057e2:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ea:	d008      	beq.n	80057fe <HAL_RTC_GetTime+0xee>
 80057ec:	69fa      	ldr	r2, [r7, #28]
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d904      	bls.n	80057fe <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80057f4:	69fa      	ldr	r2, [r7, #28]
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	61fb      	str	r3, [r7, #28]
 80057fc:	e002      	b.n	8005804 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80057fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005802:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	4a2d      	ldr	r2, [pc, #180]	; (80058bc <HAL_RTC_GetTime+0x1ac>)
 8005808:	fb02 f303 	mul.w	r3, r2, r3
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005812:	69b9      	ldr	r1, [r7, #24]
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f000 f966 	bl	8005ae6 <RTC_WriteTimeCounter>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d001      	beq.n	8005824 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e041      	b.n	80058a8 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800582a:	d00c      	beq.n	8005846 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 800582c:	69fa      	ldr	r2, [r7, #28]
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	4413      	add	r3, r2
 8005832:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005834:	69f9      	ldr	r1, [r7, #28]
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f000 f995 	bl	8005b66 <RTC_WriteAlarmCounter>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00a      	beq.n	8005858 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e030      	b.n	80058a8 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005846:	69f9      	ldr	r1, [r7, #28]
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 f98c 	bl	8005b66 <RTC_WriteAlarmCounter>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e027      	b.n	80058a8 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8005858:	6979      	ldr	r1, [r7, #20]
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f000 fa34 	bl	8005cc8 <RTC_DateUpdate>
 8005860:	e003      	b.n	800586a <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	b2da      	uxtb	r2, r3
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d01a      	beq.n	80058a6 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	4618      	mov	r0, r3
 8005876:	f000 f9ed 	bl	8005c54 <RTC_ByteToBcd2>
 800587a:	4603      	mov	r3, r0
 800587c:	461a      	mov	r2, r3
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	785b      	ldrb	r3, [r3, #1]
 8005886:	4618      	mov	r0, r3
 8005888:	f000 f9e4 	bl	8005c54 <RTC_ByteToBcd2>
 800588c:	4603      	mov	r3, r0
 800588e:	461a      	mov	r2, r3
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	789b      	ldrb	r3, [r3, #2]
 8005898:	4618      	mov	r0, r3
 800589a:	f000 f9db 	bl	8005c54 <RTC_ByteToBcd2>
 800589e:	4603      	mov	r3, r0
 80058a0:	461a      	mov	r2, r3
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3720      	adds	r7, #32
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	91a2b3c5 	.word	0x91a2b3c5
 80058b4:	88888889 	.word	0x88888889
 80058b8:	aaaaaaab 	.word	0xaaaaaaab
 80058bc:	00015180 	.word	0x00015180

080058c0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b088      	sub	sp, #32
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	61fb      	str	r3, [r7, #28]
 80058d0:	2300      	movs	r3, #0
 80058d2:	61bb      	str	r3, [r7, #24]
 80058d4:	2300      	movs	r3, #0
 80058d6:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d002      	beq.n	80058e4 <HAL_RTC_SetDate+0x24>
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e097      	b.n	8005a18 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	7c1b      	ldrb	r3, [r3, #16]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d101      	bne.n	80058f4 <HAL_RTC_SetDate+0x34>
 80058f0:	2302      	movs	r3, #2
 80058f2:	e091      	b.n	8005a18 <HAL_RTC_SetDate+0x158>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2201      	movs	r2, #1
 80058f8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2202      	movs	r2, #2
 80058fe:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10c      	bne.n	8005920 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	78da      	ldrb	r2, [r3, #3]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	785a      	ldrb	r2, [r3, #1]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	789a      	ldrb	r2, [r3, #2]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	739a      	strb	r2, [r3, #14]
 800591e:	e01a      	b.n	8005956 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	78db      	ldrb	r3, [r3, #3]
 8005924:	4618      	mov	r0, r3
 8005926:	f000 f9b2 	bl	8005c8e <RTC_Bcd2ToByte>
 800592a:	4603      	mov	r3, r0
 800592c:	461a      	mov	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	785b      	ldrb	r3, [r3, #1]
 8005936:	4618      	mov	r0, r3
 8005938:	f000 f9a9 	bl	8005c8e <RTC_Bcd2ToByte>
 800593c:	4603      	mov	r3, r0
 800593e:	461a      	mov	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	789b      	ldrb	r3, [r3, #2]
 8005948:	4618      	mov	r0, r3
 800594a:	f000 f9a0 	bl	8005c8e <RTC_Bcd2ToByte>
 800594e:	4603      	mov	r3, r0
 8005950:	461a      	mov	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	7bdb      	ldrb	r3, [r3, #15]
 800595a:	4618      	mov	r0, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	7b59      	ldrb	r1, [r3, #13]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	7b9b      	ldrb	r3, [r3, #14]
 8005964:	461a      	mov	r2, r3
 8005966:	f000 fa8b 	bl	8005e80 <RTC_WeekDayNum>
 800596a:	4603      	mov	r3, r0
 800596c:	461a      	mov	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	7b1a      	ldrb	r2, [r3, #12]
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f000 f883 	bl	8005a86 <RTC_ReadTimeCounter>
 8005980:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	4a26      	ldr	r2, [pc, #152]	; (8005a20 <HAL_RTC_SetDate+0x160>)
 8005986:	fba2 2303 	umull	r2, r3, r2, r3
 800598a:	0adb      	lsrs	r3, r3, #11
 800598c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	2b18      	cmp	r3, #24
 8005992:	d93a      	bls.n	8005a0a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	4a23      	ldr	r2, [pc, #140]	; (8005a24 <HAL_RTC_SetDate+0x164>)
 8005998:	fba2 2303 	umull	r2, r3, r2, r3
 800599c:	091b      	lsrs	r3, r3, #4
 800599e:	4a22      	ldr	r2, [pc, #136]	; (8005a28 <HAL_RTC_SetDate+0x168>)
 80059a0:	fb02 f303 	mul.w	r3, r2, r3
 80059a4:	69fa      	ldr	r2, [r7, #28]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80059aa:	69f9      	ldr	r1, [r7, #28]
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f000 f89a 	bl	8005ae6 <RTC_WriteTimeCounter>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d007      	beq.n	80059c8 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2204      	movs	r2, #4
 80059bc:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e027      	b.n	8005a18 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f000 f8b3 	bl	8005b34 <RTC_ReadAlarmCounter>
 80059ce:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d6:	d018      	beq.n	8005a0a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d214      	bcs.n	8005a0a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80059e6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80059ea:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80059ec:	69b9      	ldr	r1, [r7, #24]
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f000 f8b9 	bl	8005b66 <RTC_WriteAlarmCounter>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d007      	beq.n	8005a0a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2204      	movs	r2, #4
 80059fe:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e006      	b.n	8005a18 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3720      	adds	r7, #32
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	91a2b3c5 	.word	0x91a2b3c5
 8005a24:	aaaaaaab 	.word	0xaaaaaaab
 8005a28:	00015180 	.word	0x00015180

08005a2c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e01d      	b.n	8005a7e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f022 0208 	bic.w	r2, r2, #8
 8005a50:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005a52:	f7fb fbeb 	bl	800122c <HAL_GetTick>
 8005a56:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005a58:	e009      	b.n	8005a6e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005a5a:	f7fb fbe7 	bl	800122c <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a68:	d901      	bls.n	8005a6e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e007      	b.n	8005a7e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f003 0308 	and.w	r3, r3, #8
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d0ee      	beq.n	8005a5a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b087      	sub	sp, #28
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	827b      	strh	r3, [r7, #18]
 8005a92:	2300      	movs	r3, #0
 8005a94:	823b      	strh	r3, [r7, #16]
 8005a96:	2300      	movs	r3, #0
 8005a98:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	69db      	ldr	r3, [r3, #28]
 8005aac:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8005ab6:	8a7a      	ldrh	r2, [r7, #18]
 8005ab8:	8a3b      	ldrh	r3, [r7, #16]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d008      	beq.n	8005ad0 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8005abe:	8a3b      	ldrh	r3, [r7, #16]
 8005ac0:	041a      	lsls	r2, r3, #16
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	69db      	ldr	r3, [r3, #28]
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	4313      	orrs	r3, r2
 8005acc:	617b      	str	r3, [r7, #20]
 8005ace:	e004      	b.n	8005ada <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005ad0:	8a7b      	ldrh	r3, [r7, #18]
 8005ad2:	041a      	lsls	r2, r3, #16
 8005ad4:	89fb      	ldrh	r3, [r7, #14]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8005ada:	697b      	ldr	r3, [r7, #20]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	371c      	adds	r7, #28
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bc80      	pop	{r7}
 8005ae4:	4770      	bx	lr

08005ae6 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b084      	sub	sp, #16
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
 8005aee:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005af0:	2300      	movs	r3, #0
 8005af2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 f85d 	bl	8005bb4 <RTC_EnterInitMode>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	73fb      	strb	r3, [r7, #15]
 8005b04:	e011      	b.n	8005b2a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	0c12      	lsrs	r2, r2, #16
 8005b0e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	b292      	uxth	r2, r2
 8005b18:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f872 	bl	8005c04 <RTC_ExitInitMode>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	81fb      	strh	r3, [r7, #14]
 8005b40:	2300      	movs	r3, #0
 8005b42:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005b54:	89fb      	ldrh	r3, [r7, #14]
 8005b56:	041a      	lsls	r2, r3, #16
 8005b58:	89bb      	ldrh	r3, [r7, #12]
 8005b5a:	4313      	orrs	r3, r2
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3714      	adds	r7, #20
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bc80      	pop	{r7}
 8005b64:	4770      	bx	lr

08005b66 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b084      	sub	sp, #16
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
 8005b6e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b70:	2300      	movs	r3, #0
 8005b72:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f81d 	bl	8005bb4 <RTC_EnterInitMode>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d002      	beq.n	8005b86 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	73fb      	strb	r3, [r7, #15]
 8005b84:	e011      	b.n	8005baa <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	0c12      	lsrs	r2, r2, #16
 8005b8e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	683a      	ldr	r2, [r7, #0]
 8005b96:	b292      	uxth	r2, r2
 8005b98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f832 	bl	8005c04 <RTC_ExitInitMode>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005bc0:	f7fb fb34 	bl	800122c <HAL_GetTick>
 8005bc4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005bc6:	e009      	b.n	8005bdc <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005bc8:	f7fb fb30 	bl	800122c <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bd6:	d901      	bls.n	8005bdc <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e00f      	b.n	8005bfc <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f003 0320 	and.w	r3, r3, #32
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d0ee      	beq.n	8005bc8 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f042 0210 	orr.w	r2, r2, #16
 8005bf8:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f022 0210 	bic.w	r2, r2, #16
 8005c1e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005c20:	f7fb fb04 	bl	800122c <HAL_GetTick>
 8005c24:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005c26:	e009      	b.n	8005c3c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005c28:	f7fb fb00 	bl	800122c <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c36:	d901      	bls.n	8005c3c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e007      	b.n	8005c4c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f003 0320 	and.w	r3, r3, #32
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d0ee      	beq.n	8005c28 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005c62:	e005      	b.n	8005c70 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	3301      	adds	r3, #1
 8005c68:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005c6a:	79fb      	ldrb	r3, [r7, #7]
 8005c6c:	3b0a      	subs	r3, #10
 8005c6e:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005c70:	79fb      	ldrb	r3, [r7, #7]
 8005c72:	2b09      	cmp	r3, #9
 8005c74:	d8f6      	bhi.n	8005c64 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	011b      	lsls	r3, r3, #4
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	79fb      	ldrb	r3, [r7, #7]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	b2db      	uxtb	r3, r3
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3714      	adds	r7, #20
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bc80      	pop	{r7}
 8005c8c:	4770      	bx	lr

08005c8e <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b085      	sub	sp, #20
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	4603      	mov	r3, r0
 8005c96:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005c9c:	79fb      	ldrb	r3, [r7, #7]
 8005c9e:	091b      	lsrs	r3, r3, #4
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	005b      	lsls	r3, r3, #1
 8005cac:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005cae:	79fb      	ldrb	r3, [r7, #7]
 8005cb0:	f003 030f 	and.w	r3, r3, #15
 8005cb4:	b2da      	uxtb	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	4413      	add	r3, r2
 8005cbc:	b2db      	uxtb	r3, r3
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3714      	adds	r7, #20
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bc80      	pop	{r7}
 8005cc6:	4770      	bx	lr

08005cc8 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	617b      	str	r3, [r7, #20]
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	613b      	str	r3, [r7, #16]
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	7bdb      	ldrb	r3, [r3, #15]
 8005ce6:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	7b5b      	ldrb	r3, [r3, #13]
 8005cec:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	7b9b      	ldrb	r3, [r3, #14]
 8005cf2:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	60bb      	str	r3, [r7, #8]
 8005cf8:	e06f      	b.n	8005dda <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d011      	beq.n	8005d24 <RTC_DateUpdate+0x5c>
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	2b03      	cmp	r3, #3
 8005d04:	d00e      	beq.n	8005d24 <RTC_DateUpdate+0x5c>
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	2b05      	cmp	r3, #5
 8005d0a:	d00b      	beq.n	8005d24 <RTC_DateUpdate+0x5c>
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	2b07      	cmp	r3, #7
 8005d10:	d008      	beq.n	8005d24 <RTC_DateUpdate+0x5c>
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	2b08      	cmp	r3, #8
 8005d16:	d005      	beq.n	8005d24 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	2b0a      	cmp	r3, #10
 8005d1c:	d002      	beq.n	8005d24 <RTC_DateUpdate+0x5c>
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	2b0c      	cmp	r3, #12
 8005d22:	d117      	bne.n	8005d54 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2b1e      	cmp	r3, #30
 8005d28:	d803      	bhi.n	8005d32 <RTC_DateUpdate+0x6a>
      {
        day++;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005d30:	e050      	b.n	8005dd4 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	2b0c      	cmp	r3, #12
 8005d36:	d005      	beq.n	8005d44 <RTC_DateUpdate+0x7c>
        {
          month++;
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005d42:	e047      	b.n	8005dd4 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8005d44:	2301      	movs	r3, #1
 8005d46:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	60fb      	str	r3, [r7, #12]
          year++;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8005d52:	e03f      	b.n	8005dd4 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	d008      	beq.n	8005d6c <RTC_DateUpdate+0xa4>
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	2b06      	cmp	r3, #6
 8005d5e:	d005      	beq.n	8005d6c <RTC_DateUpdate+0xa4>
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	2b09      	cmp	r3, #9
 8005d64:	d002      	beq.n	8005d6c <RTC_DateUpdate+0xa4>
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	2b0b      	cmp	r3, #11
 8005d6a:	d10c      	bne.n	8005d86 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2b1d      	cmp	r3, #29
 8005d70:	d803      	bhi.n	8005d7a <RTC_DateUpdate+0xb2>
      {
        day++;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	3301      	adds	r3, #1
 8005d76:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005d78:	e02c      	b.n	8005dd4 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005d80:	2301      	movs	r3, #1
 8005d82:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005d84:	e026      	b.n	8005dd4 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d123      	bne.n	8005dd4 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2b1b      	cmp	r3, #27
 8005d90:	d803      	bhi.n	8005d9a <RTC_DateUpdate+0xd2>
      {
        day++;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	3301      	adds	r3, #1
 8005d96:	60fb      	str	r3, [r7, #12]
 8005d98:	e01c      	b.n	8005dd4 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2b1c      	cmp	r3, #28
 8005d9e:	d111      	bne.n	8005dc4 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	4618      	mov	r0, r3
 8005da6:	f000 f839 	bl	8005e1c <RTC_IsLeapYear>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d003      	beq.n	8005db8 <RTC_DateUpdate+0xf0>
        {
          day++;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	3301      	adds	r3, #1
 8005db4:	60fb      	str	r3, [r7, #12]
 8005db6:	e00d      	b.n	8005dd4 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	60fb      	str	r3, [r7, #12]
 8005dc2:	e007      	b.n	8005dd4 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2b1d      	cmp	r3, #29
 8005dc8:	d104      	bne.n	8005dd4 <RTC_DateUpdate+0x10c>
      {
        month++;
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	60bb      	str	r3, [r7, #8]
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d38b      	bcc.n	8005cfa <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	b2d2      	uxtb	r2, r2
 8005e02:	4619      	mov	r1, r3
 8005e04:	6978      	ldr	r0, [r7, #20]
 8005e06:	f000 f83b 	bl	8005e80 <RTC_WeekDayNum>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	731a      	strb	r2, [r3, #12]
}
 8005e12:	bf00      	nop
 8005e14:	3718      	adds	r7, #24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
	...

08005e1c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	4603      	mov	r3, r0
 8005e24:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8005e26:	88fb      	ldrh	r3, [r7, #6]
 8005e28:	f003 0303 	and.w	r3, r3, #3
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8005e32:	2300      	movs	r3, #0
 8005e34:	e01d      	b.n	8005e72 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8005e36:	88fb      	ldrh	r3, [r7, #6]
 8005e38:	4a10      	ldr	r2, [pc, #64]	; (8005e7c <RTC_IsLeapYear+0x60>)
 8005e3a:	fba2 1203 	umull	r1, r2, r2, r3
 8005e3e:	0952      	lsrs	r2, r2, #5
 8005e40:	2164      	movs	r1, #100	; 0x64
 8005e42:	fb01 f202 	mul.w	r2, r1, r2
 8005e46:	1a9b      	subs	r3, r3, r2
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d001      	beq.n	8005e52 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e00f      	b.n	8005e72 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8005e52:	88fb      	ldrh	r3, [r7, #6]
 8005e54:	4a09      	ldr	r2, [pc, #36]	; (8005e7c <RTC_IsLeapYear+0x60>)
 8005e56:	fba2 1203 	umull	r1, r2, r2, r3
 8005e5a:	09d2      	lsrs	r2, r2, #7
 8005e5c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005e60:	fb01 f202 	mul.w	r2, r1, r2
 8005e64:	1a9b      	subs	r3, r3, r2
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e000      	b.n	8005e72 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8005e70:	2300      	movs	r3, #0
  }
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bc80      	pop	{r7}
 8005e7a:	4770      	bx	lr
 8005e7c:	51eb851f 	.word	0x51eb851f

08005e80 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	460b      	mov	r3, r1
 8005e8a:	70fb      	strb	r3, [r7, #3]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005e90:	2300      	movs	r3, #0
 8005e92:	60bb      	str	r3, [r7, #8]
 8005e94:	2300      	movs	r3, #0
 8005e96:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005e9e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005ea0:	78fb      	ldrb	r3, [r7, #3]
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d82d      	bhi.n	8005f02 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8005ea6:	78fa      	ldrb	r2, [r7, #3]
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	005b      	lsls	r3, r3, #1
 8005eac:	4413      	add	r3, r2
 8005eae:	00db      	lsls	r3, r3, #3
 8005eb0:	1a9b      	subs	r3, r3, r2
 8005eb2:	4a2c      	ldr	r2, [pc, #176]	; (8005f64 <RTC_WeekDayNum+0xe4>)
 8005eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb8:	085a      	lsrs	r2, r3, #1
 8005eba:	78bb      	ldrb	r3, [r7, #2]
 8005ebc:	441a      	add	r2, r3
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	441a      	add	r2, r3
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	089b      	lsrs	r3, r3, #2
 8005ec8:	441a      	add	r2, r3
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	4926      	ldr	r1, [pc, #152]	; (8005f68 <RTC_WeekDayNum+0xe8>)
 8005ed0:	fba1 1303 	umull	r1, r3, r1, r3
 8005ed4:	095b      	lsrs	r3, r3, #5
 8005ed6:	1ad2      	subs	r2, r2, r3
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	3b01      	subs	r3, #1
 8005edc:	4922      	ldr	r1, [pc, #136]	; (8005f68 <RTC_WeekDayNum+0xe8>)
 8005ede:	fba1 1303 	umull	r1, r3, r1, r3
 8005ee2:	09db      	lsrs	r3, r3, #7
 8005ee4:	4413      	add	r3, r2
 8005ee6:	1d1a      	adds	r2, r3, #4
 8005ee8:	4b20      	ldr	r3, [pc, #128]	; (8005f6c <RTC_WeekDayNum+0xec>)
 8005eea:	fba3 1302 	umull	r1, r3, r3, r2
 8005eee:	1ad1      	subs	r1, r2, r3
 8005ef0:	0849      	lsrs	r1, r1, #1
 8005ef2:	440b      	add	r3, r1
 8005ef4:	0899      	lsrs	r1, r3, #2
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	00db      	lsls	r3, r3, #3
 8005efa:	1a5b      	subs	r3, r3, r1
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	60fb      	str	r3, [r7, #12]
 8005f00:	e029      	b.n	8005f56 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8005f02:	78fa      	ldrb	r2, [r7, #3]
 8005f04:	4613      	mov	r3, r2
 8005f06:	005b      	lsls	r3, r3, #1
 8005f08:	4413      	add	r3, r2
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	1a9b      	subs	r3, r3, r2
 8005f0e:	4a15      	ldr	r2, [pc, #84]	; (8005f64 <RTC_WeekDayNum+0xe4>)
 8005f10:	fba2 2303 	umull	r2, r3, r2, r3
 8005f14:	085a      	lsrs	r2, r3, #1
 8005f16:	78bb      	ldrb	r3, [r7, #2]
 8005f18:	441a      	add	r2, r3
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	441a      	add	r2, r3
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	089b      	lsrs	r3, r3, #2
 8005f22:	441a      	add	r2, r3
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	4910      	ldr	r1, [pc, #64]	; (8005f68 <RTC_WeekDayNum+0xe8>)
 8005f28:	fba1 1303 	umull	r1, r3, r1, r3
 8005f2c:	095b      	lsrs	r3, r3, #5
 8005f2e:	1ad2      	subs	r2, r2, r3
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	490d      	ldr	r1, [pc, #52]	; (8005f68 <RTC_WeekDayNum+0xe8>)
 8005f34:	fba1 1303 	umull	r1, r3, r1, r3
 8005f38:	09db      	lsrs	r3, r3, #7
 8005f3a:	4413      	add	r3, r2
 8005f3c:	1c9a      	adds	r2, r3, #2
 8005f3e:	4b0b      	ldr	r3, [pc, #44]	; (8005f6c <RTC_WeekDayNum+0xec>)
 8005f40:	fba3 1302 	umull	r1, r3, r3, r2
 8005f44:	1ad1      	subs	r1, r2, r3
 8005f46:	0849      	lsrs	r1, r1, #1
 8005f48:	440b      	add	r3, r1
 8005f4a:	0899      	lsrs	r1, r3, #2
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	00db      	lsls	r3, r3, #3
 8005f50:	1a5b      	subs	r3, r3, r1
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	b2db      	uxtb	r3, r3
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3714      	adds	r7, #20
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bc80      	pop	{r7}
 8005f62:	4770      	bx	lr
 8005f64:	38e38e39 	.word	0x38e38e39
 8005f68:	51eb851f 	.word	0x51eb851f
 8005f6c:	24924925 	.word	0x24924925

08005f70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e01d      	b.n	8005fbe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d106      	bne.n	8005f9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f815 	bl	8005fc6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	3304      	adds	r3, #4
 8005fac:	4619      	mov	r1, r3
 8005fae:	4610      	mov	r0, r2
 8005fb0:	f000 f962 	bl	8006278 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3708      	adds	r7, #8
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b083      	sub	sp, #12
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005fce:	bf00      	nop
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bc80      	pop	{r7}
 8005fd6:	4770      	bx	lr

08005fd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68da      	ldr	r2, [r3, #12]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f042 0201 	orr.w	r2, r2, #1
 8005fee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f003 0307 	and.w	r3, r3, #7
 8005ffa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2b06      	cmp	r3, #6
 8006000:	d007      	beq.n	8006012 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f042 0201 	orr.w	r2, r2, #1
 8006010:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	bc80      	pop	{r7}
 800601c:	4770      	bx	lr

0800601e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b082      	sub	sp, #8
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	2b02      	cmp	r3, #2
 8006032:	d122      	bne.n	800607a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	2b02      	cmp	r3, #2
 8006040:	d11b      	bne.n	800607a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f06f 0202 	mvn.w	r2, #2
 800604a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	f003 0303 	and.w	r3, r3, #3
 800605c:	2b00      	cmp	r3, #0
 800605e:	d003      	beq.n	8006068 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 f8ed 	bl	8006240 <HAL_TIM_IC_CaptureCallback>
 8006066:	e005      	b.n	8006074 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f8e0 	bl	800622e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f8ef 	bl	8006252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	f003 0304 	and.w	r3, r3, #4
 8006084:	2b04      	cmp	r3, #4
 8006086:	d122      	bne.n	80060ce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f003 0304 	and.w	r3, r3, #4
 8006092:	2b04      	cmp	r3, #4
 8006094:	d11b      	bne.n	80060ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f06f 0204 	mvn.w	r2, #4
 800609e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2202      	movs	r2, #2
 80060a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d003      	beq.n	80060bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 f8c3 	bl	8006240 <HAL_TIM_IC_CaptureCallback>
 80060ba:	e005      	b.n	80060c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f8b6 	bl	800622e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f8c5 	bl	8006252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	f003 0308 	and.w	r3, r3, #8
 80060d8:	2b08      	cmp	r3, #8
 80060da:	d122      	bne.n	8006122 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f003 0308 	and.w	r3, r3, #8
 80060e6:	2b08      	cmp	r3, #8
 80060e8:	d11b      	bne.n	8006122 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f06f 0208 	mvn.w	r2, #8
 80060f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2204      	movs	r2, #4
 80060f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	69db      	ldr	r3, [r3, #28]
 8006100:	f003 0303 	and.w	r3, r3, #3
 8006104:	2b00      	cmp	r3, #0
 8006106:	d003      	beq.n	8006110 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 f899 	bl	8006240 <HAL_TIM_IC_CaptureCallback>
 800610e:	e005      	b.n	800611c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f88c 	bl	800622e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f89b 	bl	8006252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	f003 0310 	and.w	r3, r3, #16
 800612c:	2b10      	cmp	r3, #16
 800612e:	d122      	bne.n	8006176 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	f003 0310 	and.w	r3, r3, #16
 800613a:	2b10      	cmp	r3, #16
 800613c:	d11b      	bne.n	8006176 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f06f 0210 	mvn.w	r2, #16
 8006146:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2208      	movs	r2, #8
 800614c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	69db      	ldr	r3, [r3, #28]
 8006154:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006158:	2b00      	cmp	r3, #0
 800615a:	d003      	beq.n	8006164 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f86f 	bl	8006240 <HAL_TIM_IC_CaptureCallback>
 8006162:	e005      	b.n	8006170 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 f862 	bl	800622e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f871 	bl	8006252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	f003 0301 	and.w	r3, r3, #1
 8006180:	2b01      	cmp	r3, #1
 8006182:	d10e      	bne.n	80061a2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	2b01      	cmp	r3, #1
 8006190:	d107      	bne.n	80061a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f06f 0201 	mvn.w	r2, #1
 800619a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f007 f899 	bl	800d2d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ac:	2b80      	cmp	r3, #128	; 0x80
 80061ae:	d10e      	bne.n	80061ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ba:	2b80      	cmp	r3, #128	; 0x80
 80061bc:	d107      	bne.n	80061ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80061c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 f8d8 	bl	800637e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d8:	2b40      	cmp	r3, #64	; 0x40
 80061da:	d10e      	bne.n	80061fa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e6:	2b40      	cmp	r3, #64	; 0x40
 80061e8:	d107      	bne.n	80061fa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f835 	bl	8006264 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	f003 0320 	and.w	r3, r3, #32
 8006204:	2b20      	cmp	r3, #32
 8006206:	d10e      	bne.n	8006226 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	f003 0320 	and.w	r3, r3, #32
 8006212:	2b20      	cmp	r3, #32
 8006214:	d107      	bne.n	8006226 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f06f 0220 	mvn.w	r2, #32
 800621e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f8a3 	bl	800636c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006226:	bf00      	nop
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800622e:	b480      	push	{r7}
 8006230:	b083      	sub	sp, #12
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006236:	bf00      	nop
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	bc80      	pop	{r7}
 800623e:	4770      	bx	lr

08006240 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	bc80      	pop	{r7}
 8006250:	4770      	bx	lr

08006252 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800625a:	bf00      	nop
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	bc80      	pop	{r7}
 8006262:	4770      	bx	lr

08006264 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	bc80      	pop	{r7}
 8006274:	4770      	bx	lr
	...

08006278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a33      	ldr	r2, [pc, #204]	; (8006358 <TIM_Base_SetConfig+0xe0>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d013      	beq.n	80062b8 <TIM_Base_SetConfig+0x40>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a32      	ldr	r2, [pc, #200]	; (800635c <TIM_Base_SetConfig+0xe4>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d00f      	beq.n	80062b8 <TIM_Base_SetConfig+0x40>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800629e:	d00b      	beq.n	80062b8 <TIM_Base_SetConfig+0x40>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a2f      	ldr	r2, [pc, #188]	; (8006360 <TIM_Base_SetConfig+0xe8>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d007      	beq.n	80062b8 <TIM_Base_SetConfig+0x40>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a2e      	ldr	r2, [pc, #184]	; (8006364 <TIM_Base_SetConfig+0xec>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d003      	beq.n	80062b8 <TIM_Base_SetConfig+0x40>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a2d      	ldr	r2, [pc, #180]	; (8006368 <TIM_Base_SetConfig+0xf0>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d108      	bne.n	80062ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a22      	ldr	r2, [pc, #136]	; (8006358 <TIM_Base_SetConfig+0xe0>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d013      	beq.n	80062fa <TIM_Base_SetConfig+0x82>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a21      	ldr	r2, [pc, #132]	; (800635c <TIM_Base_SetConfig+0xe4>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d00f      	beq.n	80062fa <TIM_Base_SetConfig+0x82>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062e0:	d00b      	beq.n	80062fa <TIM_Base_SetConfig+0x82>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a1e      	ldr	r2, [pc, #120]	; (8006360 <TIM_Base_SetConfig+0xe8>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d007      	beq.n	80062fa <TIM_Base_SetConfig+0x82>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a1d      	ldr	r2, [pc, #116]	; (8006364 <TIM_Base_SetConfig+0xec>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d003      	beq.n	80062fa <TIM_Base_SetConfig+0x82>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a1c      	ldr	r2, [pc, #112]	; (8006368 <TIM_Base_SetConfig+0xf0>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d108      	bne.n	800630c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	4313      	orrs	r3, r2
 800630a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	4313      	orrs	r3, r2
 8006318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a09      	ldr	r2, [pc, #36]	; (8006358 <TIM_Base_SetConfig+0xe0>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d003      	beq.n	8006340 <TIM_Base_SetConfig+0xc8>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a08      	ldr	r2, [pc, #32]	; (800635c <TIM_Base_SetConfig+0xe4>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d103      	bne.n	8006348 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	691a      	ldr	r2, [r3, #16]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	615a      	str	r2, [r3, #20]
}
 800634e:	bf00      	nop
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	bc80      	pop	{r7}
 8006356:	4770      	bx	lr
 8006358:	40012c00 	.word	0x40012c00
 800635c:	40013400 	.word	0x40013400
 8006360:	40000400 	.word	0x40000400
 8006364:	40000800 	.word	0x40000800
 8006368:	40000c00 	.word	0x40000c00

0800636c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	bc80      	pop	{r7}
 800637c:	4770      	bx	lr

0800637e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800637e:	b480      	push	{r7}
 8006380:	b083      	sub	sp, #12
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006386:	bf00      	nop
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	bc80      	pop	{r7}
 800638e:	4770      	bx	lr

08006390 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e03f      	b.n	8006422 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d106      	bne.n	80063bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f007 fa3a 	bl	800d830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2224      	movs	r2, #36	; 0x24
 80063c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68da      	ldr	r2, [r3, #12]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 f90b 	bl	80065f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	691a      	ldr	r2, [r3, #16]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	695a      	ldr	r2, [r3, #20]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68da      	ldr	r2, [r3, #12]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006408:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2220      	movs	r2, #32
 8006414:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2220      	movs	r2, #32
 800641c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3708      	adds	r7, #8
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b088      	sub	sp, #32
 800642e:	af02      	add	r7, sp, #8
 8006430:	60f8      	str	r0, [r7, #12]
 8006432:	60b9      	str	r1, [r7, #8]
 8006434:	603b      	str	r3, [r7, #0]
 8006436:	4613      	mov	r3, r2
 8006438:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800643a:	2300      	movs	r3, #0
 800643c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b20      	cmp	r3, #32
 8006448:	f040 8083 	bne.w	8006552 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d002      	beq.n	8006458 <HAL_UART_Transmit+0x2e>
 8006452:	88fb      	ldrh	r3, [r7, #6]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e07b      	b.n	8006554 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006462:	2b01      	cmp	r3, #1
 8006464:	d101      	bne.n	800646a <HAL_UART_Transmit+0x40>
 8006466:	2302      	movs	r3, #2
 8006468:	e074      	b.n	8006554 <HAL_UART_Transmit+0x12a>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2221      	movs	r2, #33	; 0x21
 800647c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006480:	f7fa fed4 	bl	800122c <HAL_GetTick>
 8006484:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	88fa      	ldrh	r2, [r7, #6]
 800648a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	88fa      	ldrh	r2, [r7, #6]
 8006490:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006492:	e042      	b.n	800651a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006498:	b29b      	uxth	r3, r3
 800649a:	3b01      	subs	r3, #1
 800649c:	b29a      	uxth	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064aa:	d122      	bne.n	80064f2 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	2200      	movs	r2, #0
 80064b4:	2180      	movs	r1, #128	; 0x80
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f000 f850 	bl	800655c <UART_WaitOnFlagUntilTimeout>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d001      	beq.n	80064c6 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e046      	b.n	8006554 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	461a      	mov	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064d8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d103      	bne.n	80064ea <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	3302      	adds	r3, #2
 80064e6:	60bb      	str	r3, [r7, #8]
 80064e8:	e017      	b.n	800651a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	3301      	adds	r3, #1
 80064ee:	60bb      	str	r3, [r7, #8]
 80064f0:	e013      	b.n	800651a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	2200      	movs	r2, #0
 80064fa:	2180      	movs	r1, #128	; 0x80
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f000 f82d 	bl	800655c <UART_WaitOnFlagUntilTimeout>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d001      	beq.n	800650c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e023      	b.n	8006554 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	1c5a      	adds	r2, r3, #1
 8006510:	60ba      	str	r2, [r7, #8]
 8006512:	781a      	ldrb	r2, [r3, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800651e:	b29b      	uxth	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1b7      	bne.n	8006494 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	2200      	movs	r2, #0
 800652c:	2140      	movs	r1, #64	; 0x40
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f000 f814 	bl	800655c <UART_WaitOnFlagUntilTimeout>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d001      	beq.n	800653e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e00a      	b.n	8006554 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2220      	movs	r2, #32
 8006542:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800654e:	2300      	movs	r3, #0
 8006550:	e000      	b.n	8006554 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006552:	2302      	movs	r3, #2
  }
}
 8006554:	4618      	mov	r0, r3
 8006556:	3718      	adds	r7, #24
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	603b      	str	r3, [r7, #0]
 8006568:	4613      	mov	r3, r2
 800656a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800656c:	e02c      	b.n	80065c8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006574:	d028      	beq.n	80065c8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d007      	beq.n	800658c <UART_WaitOnFlagUntilTimeout+0x30>
 800657c:	f7fa fe56 	bl	800122c <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	69ba      	ldr	r2, [r7, #24]
 8006588:	429a      	cmp	r2, r3
 800658a:	d21d      	bcs.n	80065c8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68da      	ldr	r2, [r3, #12]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800659a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	695a      	ldr	r2, [r3, #20]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f022 0201 	bic.w	r2, r2, #1
 80065aa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2220      	movs	r2, #32
 80065b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2220      	movs	r2, #32
 80065b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e00f      	b.n	80065e8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	4013      	ands	r3, r2
 80065d2:	68ba      	ldr	r2, [r7, #8]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	bf0c      	ite	eq
 80065d8:	2301      	moveq	r3, #1
 80065da:	2300      	movne	r3, #0
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	461a      	mov	r2, r3
 80065e0:	79fb      	ldrb	r3, [r7, #7]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d0c3      	beq.n	800656e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	68da      	ldr	r2, [r3, #12]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	430a      	orrs	r2, r1
 800660c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	689a      	ldr	r2, [r3, #8]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	431a      	orrs	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	4313      	orrs	r3, r2
 800661e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800662a:	f023 030c 	bic.w	r3, r3, #12
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	6812      	ldr	r2, [r2, #0]
 8006632:	68f9      	ldr	r1, [r7, #12]
 8006634:	430b      	orrs	r3, r1
 8006636:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	699a      	ldr	r2, [r3, #24]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	430a      	orrs	r2, r1
 800664c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a52      	ldr	r2, [pc, #328]	; (800679c <UART_SetConfig+0x1ac>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d14e      	bne.n	80066f6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006658:	f7fe fd2e 	bl	80050b8 <HAL_RCC_GetPCLK2Freq>
 800665c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	4613      	mov	r3, r2
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	4413      	add	r3, r2
 8006666:	009a      	lsls	r2, r3, #2
 8006668:	441a      	add	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	fbb2 f3f3 	udiv	r3, r2, r3
 8006674:	4a4a      	ldr	r2, [pc, #296]	; (80067a0 <UART_SetConfig+0x1b0>)
 8006676:	fba2 2303 	umull	r2, r3, r2, r3
 800667a:	095b      	lsrs	r3, r3, #5
 800667c:	0119      	lsls	r1, r3, #4
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	4613      	mov	r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4413      	add	r3, r2
 8006686:	009a      	lsls	r2, r3, #2
 8006688:	441a      	add	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	fbb2 f2f3 	udiv	r2, r2, r3
 8006694:	4b42      	ldr	r3, [pc, #264]	; (80067a0 <UART_SetConfig+0x1b0>)
 8006696:	fba3 0302 	umull	r0, r3, r3, r2
 800669a:	095b      	lsrs	r3, r3, #5
 800669c:	2064      	movs	r0, #100	; 0x64
 800669e:	fb00 f303 	mul.w	r3, r0, r3
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	011b      	lsls	r3, r3, #4
 80066a6:	3332      	adds	r3, #50	; 0x32
 80066a8:	4a3d      	ldr	r2, [pc, #244]	; (80067a0 <UART_SetConfig+0x1b0>)
 80066aa:	fba2 2303 	umull	r2, r3, r2, r3
 80066ae:	095b      	lsrs	r3, r3, #5
 80066b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066b4:	4419      	add	r1, r3
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	4613      	mov	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4413      	add	r3, r2
 80066be:	009a      	lsls	r2, r3, #2
 80066c0:	441a      	add	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80066cc:	4b34      	ldr	r3, [pc, #208]	; (80067a0 <UART_SetConfig+0x1b0>)
 80066ce:	fba3 0302 	umull	r0, r3, r3, r2
 80066d2:	095b      	lsrs	r3, r3, #5
 80066d4:	2064      	movs	r0, #100	; 0x64
 80066d6:	fb00 f303 	mul.w	r3, r0, r3
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	011b      	lsls	r3, r3, #4
 80066de:	3332      	adds	r3, #50	; 0x32
 80066e0:	4a2f      	ldr	r2, [pc, #188]	; (80067a0 <UART_SetConfig+0x1b0>)
 80066e2:	fba2 2303 	umull	r2, r3, r2, r3
 80066e6:	095b      	lsrs	r3, r3, #5
 80066e8:	f003 020f 	and.w	r2, r3, #15
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	440a      	add	r2, r1
 80066f2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80066f4:	e04d      	b.n	8006792 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80066f6:	f7fe fccb 	bl	8005090 <HAL_RCC_GetPCLK1Freq>
 80066fa:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066fc:	68ba      	ldr	r2, [r7, #8]
 80066fe:	4613      	mov	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	009a      	lsls	r2, r3, #2
 8006706:	441a      	add	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006712:	4a23      	ldr	r2, [pc, #140]	; (80067a0 <UART_SetConfig+0x1b0>)
 8006714:	fba2 2303 	umull	r2, r3, r2, r3
 8006718:	095b      	lsrs	r3, r3, #5
 800671a:	0119      	lsls	r1, r3, #4
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	4613      	mov	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4413      	add	r3, r2
 8006724:	009a      	lsls	r2, r3, #2
 8006726:	441a      	add	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006732:	4b1b      	ldr	r3, [pc, #108]	; (80067a0 <UART_SetConfig+0x1b0>)
 8006734:	fba3 0302 	umull	r0, r3, r3, r2
 8006738:	095b      	lsrs	r3, r3, #5
 800673a:	2064      	movs	r0, #100	; 0x64
 800673c:	fb00 f303 	mul.w	r3, r0, r3
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	011b      	lsls	r3, r3, #4
 8006744:	3332      	adds	r3, #50	; 0x32
 8006746:	4a16      	ldr	r2, [pc, #88]	; (80067a0 <UART_SetConfig+0x1b0>)
 8006748:	fba2 2303 	umull	r2, r3, r2, r3
 800674c:	095b      	lsrs	r3, r3, #5
 800674e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006752:	4419      	add	r1, r3
 8006754:	68ba      	ldr	r2, [r7, #8]
 8006756:	4613      	mov	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4413      	add	r3, r2
 800675c:	009a      	lsls	r2, r3, #2
 800675e:	441a      	add	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	fbb2 f2f3 	udiv	r2, r2, r3
 800676a:	4b0d      	ldr	r3, [pc, #52]	; (80067a0 <UART_SetConfig+0x1b0>)
 800676c:	fba3 0302 	umull	r0, r3, r3, r2
 8006770:	095b      	lsrs	r3, r3, #5
 8006772:	2064      	movs	r0, #100	; 0x64
 8006774:	fb00 f303 	mul.w	r3, r0, r3
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	011b      	lsls	r3, r3, #4
 800677c:	3332      	adds	r3, #50	; 0x32
 800677e:	4a08      	ldr	r2, [pc, #32]	; (80067a0 <UART_SetConfig+0x1b0>)
 8006780:	fba2 2303 	umull	r2, r3, r2, r3
 8006784:	095b      	lsrs	r3, r3, #5
 8006786:	f003 020f 	and.w	r2, r3, #15
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	440a      	add	r2, r1
 8006790:	609a      	str	r2, [r3, #8]
}
 8006792:	bf00      	nop
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	40013800 	.word	0x40013800
 80067a0:	51eb851f 	.word	0x51eb851f

080067a4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	4603      	mov	r3, r0
 80067ac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80067ae:	2300      	movs	r3, #0
 80067b0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80067b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067b6:	2b84      	cmp	r3, #132	; 0x84
 80067b8:	d005      	beq.n	80067c6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80067ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	4413      	add	r3, r2
 80067c2:	3303      	adds	r3, #3
 80067c4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80067c6:	68fb      	ldr	r3, [r7, #12]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3714      	adds	r7, #20
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bc80      	pop	{r7}
 80067d0:	4770      	bx	lr

080067d2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80067d2:	b480      	push	{r7}
 80067d4:	b083      	sub	sp, #12
 80067d6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067d8:	f3ef 8305 	mrs	r3, IPSR
 80067dc:	607b      	str	r3, [r7, #4]
  return(result);
 80067de:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	bf14      	ite	ne
 80067e4:	2301      	movne	r3, #1
 80067e6:	2300      	moveq	r3, #0
 80067e8:	b2db      	uxtb	r3, r3
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	370c      	adds	r7, #12
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bc80      	pop	{r7}
 80067f2:	4770      	bx	lr

080067f4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80067f8:	f001 fc00 	bl	8007ffc <vTaskStartScheduler>
  
  return osOK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	bd80      	pop	{r7, pc}

08006802 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8006806:	f7ff ffe4 	bl	80067d2 <inHandlerMode>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d003      	beq.n	8006818 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8006810:	f001 fd12 	bl	8008238 <xTaskGetTickCountFromISR>
 8006814:	4603      	mov	r3, r0
 8006816:	e002      	b.n	800681e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8006818:	f001 fd00 	bl	800821c <xTaskGetTickCount>
 800681c:	4603      	mov	r3, r0
  }
}
 800681e:	4618      	mov	r0, r3
 8006820:	bd80      	pop	{r7, pc}

08006822 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006822:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006824:	b089      	sub	sp, #36	; 0x24
 8006826:	af04      	add	r7, sp, #16
 8006828:	6078      	str	r0, [r7, #4]
 800682a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d020      	beq.n	8006876 <osThreadCreate+0x54>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d01c      	beq.n	8006876 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685c      	ldr	r4, [r3, #4]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681d      	ldr	r5, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	691e      	ldr	r6, [r3, #16]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800684e:	4618      	mov	r0, r3
 8006850:	f7ff ffa8 	bl	80067a4 <makeFreeRtosPriority>
 8006854:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800685e:	9202      	str	r2, [sp, #8]
 8006860:	9301      	str	r3, [sp, #4]
 8006862:	9100      	str	r1, [sp, #0]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	4632      	mov	r2, r6
 8006868:	4629      	mov	r1, r5
 800686a:	4620      	mov	r0, r4
 800686c:	f001 f97a 	bl	8007b64 <xTaskCreateStatic>
 8006870:	4603      	mov	r3, r0
 8006872:	60fb      	str	r3, [r7, #12]
 8006874:	e01c      	b.n	80068b0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685c      	ldr	r4, [r3, #4]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006882:	b29e      	uxth	r6, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800688a:	4618      	mov	r0, r3
 800688c:	f7ff ff8a 	bl	80067a4 <makeFreeRtosPriority>
 8006890:	4602      	mov	r2, r0
 8006892:	f107 030c 	add.w	r3, r7, #12
 8006896:	9301      	str	r3, [sp, #4]
 8006898:	9200      	str	r2, [sp, #0]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	4632      	mov	r2, r6
 800689e:	4629      	mov	r1, r5
 80068a0:	4620      	mov	r0, r4
 80068a2:	f001 f9bb 	bl	8007c1c <xTaskCreate>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d001      	beq.n	80068b0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80068ac:	2300      	movs	r3, #0
 80068ae:	e000      	b.n	80068b2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80068b0:	68fb      	ldr	r3, [r7, #12]
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080068ba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b084      	sub	sp, #16
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d001      	beq.n	80068d0 <osDelay+0x16>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	e000      	b.n	80068d2 <osDelay+0x18>
 80068d0:	2301      	movs	r3, #1
 80068d2:	4618      	mov	r0, r3
 80068d4:	f001 fb5e 	bl	8007f94 <vTaskDelay>
  
  return osOK;
 80068d8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
	...

080068e4 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b086      	sub	sp, #24
 80068e8:	af02      	add	r7, sp, #8
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	460b      	mov	r3, r1
 80068ee:	607a      	str	r2, [r7, #4]
 80068f0:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d013      	beq.n	8006922 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 80068fa:	7afb      	ldrb	r3, [r7, #11]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d101      	bne.n	8006904 <osTimerCreate+0x20>
 8006900:	2101      	movs	r1, #1
 8006902:	e000      	b.n	8006906 <osTimerCreate+0x22>
 8006904:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800690e:	9201      	str	r2, [sp, #4]
 8006910:	9300      	str	r3, [sp, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	460a      	mov	r2, r1
 8006916:	2101      	movs	r1, #1
 8006918:	480b      	ldr	r0, [pc, #44]	; (8006948 <osTimerCreate+0x64>)
 800691a:	f002 fa92 	bl	8008e42 <xTimerCreateStatic>
 800691e:	4603      	mov	r3, r0
 8006920:	e00e      	b.n	8006940 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8006922:	7afb      	ldrb	r3, [r7, #11]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d101      	bne.n	800692c <osTimerCreate+0x48>
 8006928:	2201      	movs	r2, #1
 800692a:	e000      	b.n	800692e <osTimerCreate+0x4a>
 800692c:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2101      	movs	r1, #1
 8006938:	4803      	ldr	r0, [pc, #12]	; (8006948 <osTimerCreate+0x64>)
 800693a:	f002 fa61 	bl	8008e00 <xTimerCreate>
 800693e:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8006940:	4618      	mov	r0, r3
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	0800fb28 	.word	0x0800fb28

0800694c <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af02      	add	r7, sp, #8
 8006952:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006954:	2300      	movs	r3, #0
 8006956:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8006958:	2300      	movs	r3, #0
 800695a:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 800695c:	f7ff ff39 	bl	80067d2 <inHandlerMode>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d019      	beq.n	800699a <osTimerStop+0x4e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 8006966:	f107 0308 	add.w	r3, r7, #8
 800696a:	2200      	movs	r2, #0
 800696c:	9200      	str	r2, [sp, #0]
 800696e:	2200      	movs	r2, #0
 8006970:	2108      	movs	r1, #8
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f002 fad4 	bl	8008f20 <xTimerGenericCommand>
 8006978:	4603      	mov	r3, r0
 800697a:	2b01      	cmp	r3, #1
 800697c:	d001      	beq.n	8006982 <osTimerStop+0x36>
      return osErrorOS;
 800697e:	23ff      	movs	r3, #255	; 0xff
 8006980:	e019      	b.n	80069b6 <osTimerStop+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d015      	beq.n	80069b4 <osTimerStop+0x68>
 8006988:	4b0d      	ldr	r3, [pc, #52]	; (80069c0 <osTimerStop+0x74>)
 800698a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800698e:	601a      	str	r2, [r3, #0]
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	e00c      	b.n	80069b4 <osTimerStop+0x68>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 800699a:	2300      	movs	r3, #0
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	2300      	movs	r3, #0
 80069a0:	2200      	movs	r2, #0
 80069a2:	2103      	movs	r1, #3
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f002 fabb 	bl	8008f20 <xTimerGenericCommand>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d001      	beq.n	80069b4 <osTimerStop+0x68>
      result = osErrorOS;
 80069b0:	23ff      	movs	r3, #255	; 0xff
 80069b2:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 80069b4:	68fb      	ldr	r3, [r7, #12]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	e000ed04 	.word	0xe000ed04

080069c4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af02      	add	r7, sp, #8
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00f      	beq.n	80069f6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d10a      	bne.n	80069f2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	2203      	movs	r2, #3
 80069e2:	9200      	str	r2, [sp, #0]
 80069e4:	2200      	movs	r2, #0
 80069e6:	2100      	movs	r1, #0
 80069e8:	2001      	movs	r0, #1
 80069ea:	f000 f9cf 	bl	8006d8c <xQueueGenericCreateStatic>
 80069ee:	4603      	mov	r3, r0
 80069f0:	e016      	b.n	8006a20 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80069f2:	2300      	movs	r3, #0
 80069f4:	e014      	b.n	8006a20 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d110      	bne.n	8006a1e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80069fc:	2203      	movs	r2, #3
 80069fe:	2100      	movs	r1, #0
 8006a00:	2001      	movs	r0, #1
 8006a02:	f000 fa3a 	bl	8006e7a <xQueueGenericCreate>
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d005      	beq.n	8006a1a <osSemaphoreCreate+0x56>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	2200      	movs	r2, #0
 8006a12:	2100      	movs	r1, #0
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f000 fa91 	bl	8006f3c <xQueueGenericSend>
      return sema;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	e000      	b.n	8006a20 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006a1e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006a32:	2300      	movs	r3, #0
 8006a34:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d101      	bne.n	8006a40 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006a3c:	2380      	movs	r3, #128	; 0x80
 8006a3e:	e03a      	b.n	8006ab6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006a40:	2300      	movs	r3, #0
 8006a42:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4a:	d103      	bne.n	8006a54 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a50:	60fb      	str	r3, [r7, #12]
 8006a52:	e009      	b.n	8006a68 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d006      	beq.n	8006a68 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d101      	bne.n	8006a68 <osSemaphoreWait+0x40>
      ticks = 1;
 8006a64:	2301      	movs	r3, #1
 8006a66:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006a68:	f7ff feb3 	bl	80067d2 <inHandlerMode>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d017      	beq.n	8006aa2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006a72:	f107 0308 	add.w	r3, r7, #8
 8006a76:	461a      	mov	r2, r3
 8006a78:	2100      	movs	r1, #0
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 fe6e 	bl	800775c <xQueueReceiveFromISR>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d001      	beq.n	8006a8a <osSemaphoreWait+0x62>
      return osErrorOS;
 8006a86:	23ff      	movs	r3, #255	; 0xff
 8006a88:	e015      	b.n	8006ab6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d011      	beq.n	8006ab4 <osSemaphoreWait+0x8c>
 8006a90:	4b0b      	ldr	r3, [pc, #44]	; (8006ac0 <osSemaphoreWait+0x98>)
 8006a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a96:	601a      	str	r2, [r3, #0]
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	f3bf 8f6f 	isb	sy
 8006aa0:	e008      	b.n	8006ab4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006aa2:	68f9      	ldr	r1, [r7, #12]
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 fd4d 	bl	8007544 <xQueueSemaphoreTake>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d001      	beq.n	8006ab4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006ab0:	23ff      	movs	r3, #255	; 0xff
 8006ab2:	e000      	b.n	8006ab6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	e000ed04 	.word	0xe000ed04

08006ac4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006acc:	2300      	movs	r3, #0
 8006ace:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006ad4:	f7ff fe7d 	bl	80067d2 <inHandlerMode>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d016      	beq.n	8006b0c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006ade:	f107 0308 	add.w	r3, r7, #8
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fbbf 	bl	8007268 <xQueueGiveFromISR>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d001      	beq.n	8006af4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006af0:	23ff      	movs	r3, #255	; 0xff
 8006af2:	e017      	b.n	8006b24 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d013      	beq.n	8006b22 <osSemaphoreRelease+0x5e>
 8006afa:	4b0c      	ldr	r3, [pc, #48]	; (8006b2c <osSemaphoreRelease+0x68>)
 8006afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b00:	601a      	str	r2, [r3, #0]
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	e00a      	b.n	8006b22 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	2200      	movs	r2, #0
 8006b10:	2100      	movs	r1, #0
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 fa12 	bl	8006f3c <xQueueGenericSend>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d001      	beq.n	8006b22 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8006b1e:	23ff      	movs	r3, #255	; 0xff
 8006b20:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006b22:	68fb      	ldr	r3, [r7, #12]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	e000ed04 	.word	0xe000ed04

08006b30 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d001      	beq.n	8006b48 <osDelayUntil+0x18>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	e000      	b.n	8006b4a <osDelayUntil+0x1a>
 8006b48:	2301      	movs	r3, #1
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f001 f9a3 	bl	8007e98 <vTaskDelayUntil>
  
  return osOK;
 8006b52:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f103 0208 	add.w	r2, r3, #8
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f04f 32ff 	mov.w	r2, #4294967295
 8006b74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f103 0208 	add.w	r2, r3, #8
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f103 0208 	add.w	r2, r3, #8
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bc80      	pop	{r7}
 8006b98:	4770      	bx	lr

08006b9a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b083      	sub	sp, #12
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bc80      	pop	{r7}
 8006bb0:	4770      	bx	lr

08006bb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006bb2:	b480      	push	{r7}
 8006bb4:	b085      	sub	sp, #20
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
 8006bba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	689a      	ldr	r2, [r3, #8]
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	1c5a      	adds	r2, r3, #1
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	601a      	str	r2, [r3, #0]
}
 8006bee:	bf00      	nop
 8006bf0:	3714      	adds	r7, #20
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bc80      	pop	{r7}
 8006bf6:	4770      	bx	lr

08006bf8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c0e:	d103      	bne.n	8006c18 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	60fb      	str	r3, [r7, #12]
 8006c16:	e00c      	b.n	8006c32 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	3308      	adds	r3, #8
 8006c1c:	60fb      	str	r3, [r7, #12]
 8006c1e:	e002      	b.n	8006c26 <vListInsert+0x2e>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	60fb      	str	r3, [r7, #12]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d2f6      	bcs.n	8006c20 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	685a      	ldr	r2, [r3, #4]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	683a      	ldr	r2, [r7, #0]
 8006c40:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	683a      	ldr	r2, [r7, #0]
 8006c4c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	1c5a      	adds	r2, r3, #1
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	601a      	str	r2, [r3, #0]
}
 8006c5e:	bf00      	nop
 8006c60:	3714      	adds	r7, #20
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bc80      	pop	{r7}
 8006c66:	4770      	bx	lr

08006c68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	6892      	ldr	r2, [r2, #8]
 8006c7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	6852      	ldr	r2, [r2, #4]
 8006c88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d103      	bne.n	8006c9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689a      	ldr	r2, [r3, #8]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	1e5a      	subs	r2, r3, #1
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3714      	adds	r7, #20
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bc80      	pop	{r7}
 8006cb8:	4770      	bx	lr
	...

08006cbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10a      	bne.n	8006ce6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd4:	f383 8811 	msr	BASEPRI, r3
 8006cd8:	f3bf 8f6f 	isb	sy
 8006cdc:	f3bf 8f4f 	dsb	sy
 8006ce0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006ce2:	bf00      	nop
 8006ce4:	e7fe      	b.n	8006ce4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006ce6:	f002 fcb9 	bl	800965c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cf2:	68f9      	ldr	r1, [r7, #12]
 8006cf4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006cf6:	fb01 f303 	mul.w	r3, r1, r3
 8006cfa:	441a      	add	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d16:	3b01      	subs	r3, #1
 8006d18:	68f9      	ldr	r1, [r7, #12]
 8006d1a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006d1c:	fb01 f303 	mul.w	r3, r1, r3
 8006d20:	441a      	add	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	22ff      	movs	r2, #255	; 0xff
 8006d2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	22ff      	movs	r2, #255	; 0xff
 8006d32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d114      	bne.n	8006d66 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d01a      	beq.n	8006d7a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	3310      	adds	r3, #16
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f001 fc0d 	bl	8008568 <xTaskRemoveFromEventList>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d012      	beq.n	8006d7a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006d54:	4b0c      	ldr	r3, [pc, #48]	; (8006d88 <xQueueGenericReset+0xcc>)
 8006d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d5a:	601a      	str	r2, [r3, #0]
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	f3bf 8f6f 	isb	sy
 8006d64:	e009      	b.n	8006d7a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	3310      	adds	r3, #16
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7ff fef6 	bl	8006b5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	3324      	adds	r3, #36	; 0x24
 8006d74:	4618      	mov	r0, r3
 8006d76:	f7ff fef1 	bl	8006b5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006d7a:	f002 fc9f 	bl	80096bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006d7e:	2301      	movs	r3, #1
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	e000ed04 	.word	0xe000ed04

08006d8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b08e      	sub	sp, #56	; 0x38
 8006d90:	af02      	add	r7, sp, #8
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	607a      	str	r2, [r7, #4]
 8006d98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d10a      	bne.n	8006db6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da4:	f383 8811 	msr	BASEPRI, r3
 8006da8:	f3bf 8f6f 	isb	sy
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006db2:	bf00      	nop
 8006db4:	e7fe      	b.n	8006db4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10a      	bne.n	8006dd2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006dce:	bf00      	nop
 8006dd0:	e7fe      	b.n	8006dd0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d002      	beq.n	8006dde <xQueueGenericCreateStatic+0x52>
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d001      	beq.n	8006de2 <xQueueGenericCreateStatic+0x56>
 8006dde:	2301      	movs	r3, #1
 8006de0:	e000      	b.n	8006de4 <xQueueGenericCreateStatic+0x58>
 8006de2:	2300      	movs	r3, #0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10a      	bne.n	8006dfe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dec:	f383 8811 	msr	BASEPRI, r3
 8006df0:	f3bf 8f6f 	isb	sy
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	623b      	str	r3, [r7, #32]
}
 8006dfa:	bf00      	nop
 8006dfc:	e7fe      	b.n	8006dfc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d102      	bne.n	8006e0a <xQueueGenericCreateStatic+0x7e>
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d101      	bne.n	8006e0e <xQueueGenericCreateStatic+0x82>
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e000      	b.n	8006e10 <xQueueGenericCreateStatic+0x84>
 8006e0e:	2300      	movs	r3, #0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d10a      	bne.n	8006e2a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e18:	f383 8811 	msr	BASEPRI, r3
 8006e1c:	f3bf 8f6f 	isb	sy
 8006e20:	f3bf 8f4f 	dsb	sy
 8006e24:	61fb      	str	r3, [r7, #28]
}
 8006e26:	bf00      	nop
 8006e28:	e7fe      	b.n	8006e28 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006e2a:	2350      	movs	r3, #80	; 0x50
 8006e2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	2b50      	cmp	r3, #80	; 0x50
 8006e32:	d00a      	beq.n	8006e4a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e38:	f383 8811 	msr	BASEPRI, r3
 8006e3c:	f3bf 8f6f 	isb	sy
 8006e40:	f3bf 8f4f 	dsb	sy
 8006e44:	61bb      	str	r3, [r7, #24]
}
 8006e46:	bf00      	nop
 8006e48:	e7fe      	b.n	8006e48 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00d      	beq.n	8006e70 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006e5c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	4613      	mov	r3, r2
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	68b9      	ldr	r1, [r7, #8]
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f000 f843 	bl	8006ef6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3730      	adds	r7, #48	; 0x30
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b08a      	sub	sp, #40	; 0x28
 8006e7e:	af02      	add	r7, sp, #8
 8006e80:	60f8      	str	r0, [r7, #12]
 8006e82:	60b9      	str	r1, [r7, #8]
 8006e84:	4613      	mov	r3, r2
 8006e86:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10a      	bne.n	8006ea4 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	613b      	str	r3, [r7, #16]
}
 8006ea0:	bf00      	nop
 8006ea2:	e7fe      	b.n	8006ea2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d102      	bne.n	8006eb0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	61fb      	str	r3, [r7, #28]
 8006eae:	e004      	b.n	8006eba <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	fb02 f303 	mul.w	r3, r2, r3
 8006eb8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	3350      	adds	r3, #80	; 0x50
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f002 fccc 	bl	800985c <pvPortMalloc>
 8006ec4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00f      	beq.n	8006eec <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	3350      	adds	r3, #80	; 0x50
 8006ed0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006eda:	79fa      	ldrb	r2, [r7, #7]
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	68b9      	ldr	r1, [r7, #8]
 8006ee6:	68f8      	ldr	r0, [r7, #12]
 8006ee8:	f000 f805 	bl	8006ef6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006eec:	69bb      	ldr	r3, [r7, #24]
	}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3720      	adds	r7, #32
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b084      	sub	sp, #16
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	60f8      	str	r0, [r7, #12]
 8006efe:	60b9      	str	r1, [r7, #8]
 8006f00:	607a      	str	r2, [r7, #4]
 8006f02:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d103      	bne.n	8006f12 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	69ba      	ldr	r2, [r7, #24]
 8006f0e:	601a      	str	r2, [r3, #0]
 8006f10:	e002      	b.n	8006f18 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006f24:	2101      	movs	r1, #1
 8006f26:	69b8      	ldr	r0, [r7, #24]
 8006f28:	f7ff fec8 	bl	8006cbc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	78fa      	ldrb	r2, [r7, #3]
 8006f30:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006f34:	bf00      	nop
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b08e      	sub	sp, #56	; 0x38
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	607a      	str	r2, [r7, #4]
 8006f48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d10a      	bne.n	8006f6e <xQueueGenericSend+0x32>
	__asm volatile
 8006f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5c:	f383 8811 	msr	BASEPRI, r3
 8006f60:	f3bf 8f6f 	isb	sy
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f6a:	bf00      	nop
 8006f6c:	e7fe      	b.n	8006f6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d103      	bne.n	8006f7c <xQueueGenericSend+0x40>
 8006f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d101      	bne.n	8006f80 <xQueueGenericSend+0x44>
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e000      	b.n	8006f82 <xQueueGenericSend+0x46>
 8006f80:	2300      	movs	r3, #0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10a      	bne.n	8006f9c <xQueueGenericSend+0x60>
	__asm volatile
 8006f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8a:	f383 8811 	msr	BASEPRI, r3
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f3bf 8f4f 	dsb	sy
 8006f96:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f98:	bf00      	nop
 8006f9a:	e7fe      	b.n	8006f9a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d103      	bne.n	8006faa <xQueueGenericSend+0x6e>
 8006fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d101      	bne.n	8006fae <xQueueGenericSend+0x72>
 8006faa:	2301      	movs	r3, #1
 8006fac:	e000      	b.n	8006fb0 <xQueueGenericSend+0x74>
 8006fae:	2300      	movs	r3, #0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10a      	bne.n	8006fca <xQueueGenericSend+0x8e>
	__asm volatile
 8006fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb8:	f383 8811 	msr	BASEPRI, r3
 8006fbc:	f3bf 8f6f 	isb	sy
 8006fc0:	f3bf 8f4f 	dsb	sy
 8006fc4:	623b      	str	r3, [r7, #32]
}
 8006fc6:	bf00      	nop
 8006fc8:	e7fe      	b.n	8006fc8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fca:	f001 fc8d 	bl	80088e8 <xTaskGetSchedulerState>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d102      	bne.n	8006fda <xQueueGenericSend+0x9e>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <xQueueGenericSend+0xa2>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e000      	b.n	8006fe0 <xQueueGenericSend+0xa4>
 8006fde:	2300      	movs	r3, #0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d10a      	bne.n	8006ffa <xQueueGenericSend+0xbe>
	__asm volatile
 8006fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe8:	f383 8811 	msr	BASEPRI, r3
 8006fec:	f3bf 8f6f 	isb	sy
 8006ff0:	f3bf 8f4f 	dsb	sy
 8006ff4:	61fb      	str	r3, [r7, #28]
}
 8006ff6:	bf00      	nop
 8006ff8:	e7fe      	b.n	8006ff8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ffa:	f002 fb2f 	bl	800965c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007006:	429a      	cmp	r2, r3
 8007008:	d302      	bcc.n	8007010 <xQueueGenericSend+0xd4>
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b02      	cmp	r3, #2
 800700e:	d129      	bne.n	8007064 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007010:	683a      	ldr	r2, [r7, #0]
 8007012:	68b9      	ldr	r1, [r7, #8]
 8007014:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007016:	f000 fc38 	bl	800788a <prvCopyDataToQueue>
 800701a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800701c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007020:	2b00      	cmp	r3, #0
 8007022:	d010      	beq.n	8007046 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007026:	3324      	adds	r3, #36	; 0x24
 8007028:	4618      	mov	r0, r3
 800702a:	f001 fa9d 	bl	8008568 <xTaskRemoveFromEventList>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d013      	beq.n	800705c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007034:	4b3f      	ldr	r3, [pc, #252]	; (8007134 <xQueueGenericSend+0x1f8>)
 8007036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800703a:	601a      	str	r2, [r3, #0]
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	f3bf 8f6f 	isb	sy
 8007044:	e00a      	b.n	800705c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007048:	2b00      	cmp	r3, #0
 800704a:	d007      	beq.n	800705c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800704c:	4b39      	ldr	r3, [pc, #228]	; (8007134 <xQueueGenericSend+0x1f8>)
 800704e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007052:	601a      	str	r2, [r3, #0]
 8007054:	f3bf 8f4f 	dsb	sy
 8007058:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800705c:	f002 fb2e 	bl	80096bc <vPortExitCritical>
				return pdPASS;
 8007060:	2301      	movs	r3, #1
 8007062:	e063      	b.n	800712c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d103      	bne.n	8007072 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800706a:	f002 fb27 	bl	80096bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800706e:	2300      	movs	r3, #0
 8007070:	e05c      	b.n	800712c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007074:	2b00      	cmp	r3, #0
 8007076:	d106      	bne.n	8007086 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007078:	f107 0314 	add.w	r3, r7, #20
 800707c:	4618      	mov	r0, r3
 800707e:	f001 fad5 	bl	800862c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007082:	2301      	movs	r3, #1
 8007084:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007086:	f002 fb19 	bl	80096bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800708a:	f001 f81d 	bl	80080c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800708e:	f002 fae5 	bl	800965c <vPortEnterCritical>
 8007092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007094:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007098:	b25b      	sxtb	r3, r3
 800709a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800709e:	d103      	bne.n	80070a8 <xQueueGenericSend+0x16c>
 80070a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070ae:	b25b      	sxtb	r3, r3
 80070b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b4:	d103      	bne.n	80070be <xQueueGenericSend+0x182>
 80070b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070be:	f002 fafd 	bl	80096bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070c2:	1d3a      	adds	r2, r7, #4
 80070c4:	f107 0314 	add.w	r3, r7, #20
 80070c8:	4611      	mov	r1, r2
 80070ca:	4618      	mov	r0, r3
 80070cc:	f001 fac4 	bl	8008658 <xTaskCheckForTimeOut>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d124      	bne.n	8007120 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80070d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070d8:	f000 fccf 	bl	8007a7a <prvIsQueueFull>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d018      	beq.n	8007114 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80070e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e4:	3310      	adds	r3, #16
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	4611      	mov	r1, r2
 80070ea:	4618      	mov	r0, r3
 80070ec:	f001 f9ec 	bl	80084c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80070f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070f2:	f000 fc5a 	bl	80079aa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80070f6:	f000 fff5 	bl	80080e4 <xTaskResumeAll>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f47f af7c 	bne.w	8006ffa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007102:	4b0c      	ldr	r3, [pc, #48]	; (8007134 <xQueueGenericSend+0x1f8>)
 8007104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007108:	601a      	str	r2, [r3, #0]
 800710a:	f3bf 8f4f 	dsb	sy
 800710e:	f3bf 8f6f 	isb	sy
 8007112:	e772      	b.n	8006ffa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007114:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007116:	f000 fc48 	bl	80079aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800711a:	f000 ffe3 	bl	80080e4 <xTaskResumeAll>
 800711e:	e76c      	b.n	8006ffa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007120:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007122:	f000 fc42 	bl	80079aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007126:	f000 ffdd 	bl	80080e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800712a:	2300      	movs	r3, #0
		}
	}
}
 800712c:	4618      	mov	r0, r3
 800712e:	3738      	adds	r7, #56	; 0x38
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	e000ed04 	.word	0xe000ed04

08007138 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b08e      	sub	sp, #56	; 0x38
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
 8007144:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800714a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10a      	bne.n	8007166 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007154:	f383 8811 	msr	BASEPRI, r3
 8007158:	f3bf 8f6f 	isb	sy
 800715c:	f3bf 8f4f 	dsb	sy
 8007160:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007162:	bf00      	nop
 8007164:	e7fe      	b.n	8007164 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d103      	bne.n	8007174 <xQueueGenericSendFromISR+0x3c>
 800716c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007170:	2b00      	cmp	r3, #0
 8007172:	d101      	bne.n	8007178 <xQueueGenericSendFromISR+0x40>
 8007174:	2301      	movs	r3, #1
 8007176:	e000      	b.n	800717a <xQueueGenericSendFromISR+0x42>
 8007178:	2300      	movs	r3, #0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d10a      	bne.n	8007194 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800717e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007182:	f383 8811 	msr	BASEPRI, r3
 8007186:	f3bf 8f6f 	isb	sy
 800718a:	f3bf 8f4f 	dsb	sy
 800718e:	623b      	str	r3, [r7, #32]
}
 8007190:	bf00      	nop
 8007192:	e7fe      	b.n	8007192 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	2b02      	cmp	r3, #2
 8007198:	d103      	bne.n	80071a2 <xQueueGenericSendFromISR+0x6a>
 800719a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d101      	bne.n	80071a6 <xQueueGenericSendFromISR+0x6e>
 80071a2:	2301      	movs	r3, #1
 80071a4:	e000      	b.n	80071a8 <xQueueGenericSendFromISR+0x70>
 80071a6:	2300      	movs	r3, #0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d10a      	bne.n	80071c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80071ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b0:	f383 8811 	msr	BASEPRI, r3
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	61fb      	str	r3, [r7, #28]
}
 80071be:	bf00      	nop
 80071c0:	e7fe      	b.n	80071c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071c2:	f002 fb0d 	bl	80097e0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80071c6:	f3ef 8211 	mrs	r2, BASEPRI
 80071ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ce:	f383 8811 	msr	BASEPRI, r3
 80071d2:	f3bf 8f6f 	isb	sy
 80071d6:	f3bf 8f4f 	dsb	sy
 80071da:	61ba      	str	r2, [r7, #24]
 80071dc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80071de:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80071e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80071e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d302      	bcc.n	80071f4 <xQueueGenericSendFromISR+0xbc>
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d12c      	bne.n	800724e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80071f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	68b9      	ldr	r1, [r7, #8]
 8007202:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007204:	f000 fb41 	bl	800788a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007208:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800720c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007210:	d112      	bne.n	8007238 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007216:	2b00      	cmp	r3, #0
 8007218:	d016      	beq.n	8007248 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800721a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721c:	3324      	adds	r3, #36	; 0x24
 800721e:	4618      	mov	r0, r3
 8007220:	f001 f9a2 	bl	8008568 <xTaskRemoveFromEventList>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00e      	beq.n	8007248 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00b      	beq.n	8007248 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	601a      	str	r2, [r3, #0]
 8007236:	e007      	b.n	8007248 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007238:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800723c:	3301      	adds	r3, #1
 800723e:	b2db      	uxtb	r3, r3
 8007240:	b25a      	sxtb	r2, r3
 8007242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007248:	2301      	movs	r3, #1
 800724a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800724c:	e001      	b.n	8007252 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800724e:	2300      	movs	r3, #0
 8007250:	637b      	str	r3, [r7, #52]	; 0x34
 8007252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007254:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800725c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800725e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007260:	4618      	mov	r0, r3
 8007262:	3738      	adds	r7, #56	; 0x38
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b08e      	sub	sp, #56	; 0x38
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10a      	bne.n	8007292 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800727c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007280:	f383 8811 	msr	BASEPRI, r3
 8007284:	f3bf 8f6f 	isb	sy
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	623b      	str	r3, [r7, #32]
}
 800728e:	bf00      	nop
 8007290:	e7fe      	b.n	8007290 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00a      	beq.n	80072b0 <xQueueGiveFromISR+0x48>
	__asm volatile
 800729a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800729e:	f383 8811 	msr	BASEPRI, r3
 80072a2:	f3bf 8f6f 	isb	sy
 80072a6:	f3bf 8f4f 	dsb	sy
 80072aa:	61fb      	str	r3, [r7, #28]
}
 80072ac:	bf00      	nop
 80072ae:	e7fe      	b.n	80072ae <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80072b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d103      	bne.n	80072c0 <xQueueGiveFromISR+0x58>
 80072b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d101      	bne.n	80072c4 <xQueueGiveFromISR+0x5c>
 80072c0:	2301      	movs	r3, #1
 80072c2:	e000      	b.n	80072c6 <xQueueGiveFromISR+0x5e>
 80072c4:	2300      	movs	r3, #0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10a      	bne.n	80072e0 <xQueueGiveFromISR+0x78>
	__asm volatile
 80072ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ce:	f383 8811 	msr	BASEPRI, r3
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	61bb      	str	r3, [r7, #24]
}
 80072dc:	bf00      	nop
 80072de:	e7fe      	b.n	80072de <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80072e0:	f002 fa7e 	bl	80097e0 <vPortValidateInterruptPriority>
	__asm volatile
 80072e4:	f3ef 8211 	mrs	r2, BASEPRI
 80072e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ec:	f383 8811 	msr	BASEPRI, r3
 80072f0:	f3bf 8f6f 	isb	sy
 80072f4:	f3bf 8f4f 	dsb	sy
 80072f8:	617a      	str	r2, [r7, #20]
 80072fa:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80072fc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80072fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007304:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800730a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800730c:	429a      	cmp	r2, r3
 800730e:	d22b      	bcs.n	8007368 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007312:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007316:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800731a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731c:	1c5a      	adds	r2, r3, #1
 800731e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007320:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007322:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800732a:	d112      	bne.n	8007352 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800732c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007330:	2b00      	cmp	r3, #0
 8007332:	d016      	beq.n	8007362 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007336:	3324      	adds	r3, #36	; 0x24
 8007338:	4618      	mov	r0, r3
 800733a:	f001 f915 	bl	8008568 <xTaskRemoveFromEventList>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00e      	beq.n	8007362 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00b      	beq.n	8007362 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	2201      	movs	r2, #1
 800734e:	601a      	str	r2, [r3, #0]
 8007350:	e007      	b.n	8007362 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007352:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007356:	3301      	adds	r3, #1
 8007358:	b2db      	uxtb	r3, r3
 800735a:	b25a      	sxtb	r2, r3
 800735c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007362:	2301      	movs	r3, #1
 8007364:	637b      	str	r3, [r7, #52]	; 0x34
 8007366:	e001      	b.n	800736c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007368:	2300      	movs	r3, #0
 800736a:	637b      	str	r3, [r7, #52]	; 0x34
 800736c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f383 8811 	msr	BASEPRI, r3
}
 8007376:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800737a:	4618      	mov	r0, r3
 800737c:	3738      	adds	r7, #56	; 0x38
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
	...

08007384 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b08c      	sub	sp, #48	; 0x30
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007390:	2300      	movs	r3, #0
 8007392:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10a      	bne.n	80073b4 <xQueueReceive+0x30>
	__asm volatile
 800739e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a2:	f383 8811 	msr	BASEPRI, r3
 80073a6:	f3bf 8f6f 	isb	sy
 80073aa:	f3bf 8f4f 	dsb	sy
 80073ae:	623b      	str	r3, [r7, #32]
}
 80073b0:	bf00      	nop
 80073b2:	e7fe      	b.n	80073b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d103      	bne.n	80073c2 <xQueueReceive+0x3e>
 80073ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <xQueueReceive+0x42>
 80073c2:	2301      	movs	r3, #1
 80073c4:	e000      	b.n	80073c8 <xQueueReceive+0x44>
 80073c6:	2300      	movs	r3, #0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10a      	bne.n	80073e2 <xQueueReceive+0x5e>
	__asm volatile
 80073cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d0:	f383 8811 	msr	BASEPRI, r3
 80073d4:	f3bf 8f6f 	isb	sy
 80073d8:	f3bf 8f4f 	dsb	sy
 80073dc:	61fb      	str	r3, [r7, #28]
}
 80073de:	bf00      	nop
 80073e0:	e7fe      	b.n	80073e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073e2:	f001 fa81 	bl	80088e8 <xTaskGetSchedulerState>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d102      	bne.n	80073f2 <xQueueReceive+0x6e>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d101      	bne.n	80073f6 <xQueueReceive+0x72>
 80073f2:	2301      	movs	r3, #1
 80073f4:	e000      	b.n	80073f8 <xQueueReceive+0x74>
 80073f6:	2300      	movs	r3, #0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10a      	bne.n	8007412 <xQueueReceive+0x8e>
	__asm volatile
 80073fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007400:	f383 8811 	msr	BASEPRI, r3
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	61bb      	str	r3, [r7, #24]
}
 800740e:	bf00      	nop
 8007410:	e7fe      	b.n	8007410 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007412:	f002 f923 	bl	800965c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800741a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800741c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741e:	2b00      	cmp	r3, #0
 8007420:	d01f      	beq.n	8007462 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007422:	68b9      	ldr	r1, [r7, #8]
 8007424:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007426:	f000 fa9a 	bl	800795e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800742a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742c:	1e5a      	subs	r2, r3, #1
 800742e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007430:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00f      	beq.n	800745a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800743a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743c:	3310      	adds	r3, #16
 800743e:	4618      	mov	r0, r3
 8007440:	f001 f892 	bl	8008568 <xTaskRemoveFromEventList>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d007      	beq.n	800745a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800744a:	4b3d      	ldr	r3, [pc, #244]	; (8007540 <xQueueReceive+0x1bc>)
 800744c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007450:	601a      	str	r2, [r3, #0]
 8007452:	f3bf 8f4f 	dsb	sy
 8007456:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800745a:	f002 f92f 	bl	80096bc <vPortExitCritical>
				return pdPASS;
 800745e:	2301      	movs	r3, #1
 8007460:	e069      	b.n	8007536 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d103      	bne.n	8007470 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007468:	f002 f928 	bl	80096bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800746c:	2300      	movs	r3, #0
 800746e:	e062      	b.n	8007536 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007472:	2b00      	cmp	r3, #0
 8007474:	d106      	bne.n	8007484 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007476:	f107 0310 	add.w	r3, r7, #16
 800747a:	4618      	mov	r0, r3
 800747c:	f001 f8d6 	bl	800862c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007480:	2301      	movs	r3, #1
 8007482:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007484:	f002 f91a 	bl	80096bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007488:	f000 fe1e 	bl	80080c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800748c:	f002 f8e6 	bl	800965c <vPortEnterCritical>
 8007490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007492:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007496:	b25b      	sxtb	r3, r3
 8007498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800749c:	d103      	bne.n	80074a6 <xQueueReceive+0x122>
 800749e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074ac:	b25b      	sxtb	r3, r3
 80074ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b2:	d103      	bne.n	80074bc <xQueueReceive+0x138>
 80074b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b6:	2200      	movs	r2, #0
 80074b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074bc:	f002 f8fe 	bl	80096bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074c0:	1d3a      	adds	r2, r7, #4
 80074c2:	f107 0310 	add.w	r3, r7, #16
 80074c6:	4611      	mov	r1, r2
 80074c8:	4618      	mov	r0, r3
 80074ca:	f001 f8c5 	bl	8008658 <xTaskCheckForTimeOut>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d123      	bne.n	800751c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074d6:	f000 faba 	bl	8007a4e <prvIsQueueEmpty>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d017      	beq.n	8007510 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80074e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e2:	3324      	adds	r3, #36	; 0x24
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	4611      	mov	r1, r2
 80074e8:	4618      	mov	r0, r3
 80074ea:	f000 ffed 	bl	80084c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80074ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074f0:	f000 fa5b 	bl	80079aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80074f4:	f000 fdf6 	bl	80080e4 <xTaskResumeAll>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d189      	bne.n	8007412 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80074fe:	4b10      	ldr	r3, [pc, #64]	; (8007540 <xQueueReceive+0x1bc>)
 8007500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007504:	601a      	str	r2, [r3, #0]
 8007506:	f3bf 8f4f 	dsb	sy
 800750a:	f3bf 8f6f 	isb	sy
 800750e:	e780      	b.n	8007412 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007510:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007512:	f000 fa4a 	bl	80079aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007516:	f000 fde5 	bl	80080e4 <xTaskResumeAll>
 800751a:	e77a      	b.n	8007412 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800751c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800751e:	f000 fa44 	bl	80079aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007522:	f000 fddf 	bl	80080e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007528:	f000 fa91 	bl	8007a4e <prvIsQueueEmpty>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	f43f af6f 	beq.w	8007412 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007534:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007536:	4618      	mov	r0, r3
 8007538:	3730      	adds	r7, #48	; 0x30
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	e000ed04 	.word	0xe000ed04

08007544 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b08e      	sub	sp, #56	; 0x38
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800754e:	2300      	movs	r3, #0
 8007550:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007556:	2300      	movs	r3, #0
 8007558:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800755a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10a      	bne.n	8007576 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007564:	f383 8811 	msr	BASEPRI, r3
 8007568:	f3bf 8f6f 	isb	sy
 800756c:	f3bf 8f4f 	dsb	sy
 8007570:	623b      	str	r3, [r7, #32]
}
 8007572:	bf00      	nop
 8007574:	e7fe      	b.n	8007574 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00a      	beq.n	8007594 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800757e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	61fb      	str	r3, [r7, #28]
}
 8007590:	bf00      	nop
 8007592:	e7fe      	b.n	8007592 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007594:	f001 f9a8 	bl	80088e8 <xTaskGetSchedulerState>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d102      	bne.n	80075a4 <xQueueSemaphoreTake+0x60>
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d101      	bne.n	80075a8 <xQueueSemaphoreTake+0x64>
 80075a4:	2301      	movs	r3, #1
 80075a6:	e000      	b.n	80075aa <xQueueSemaphoreTake+0x66>
 80075a8:	2300      	movs	r3, #0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10a      	bne.n	80075c4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	61bb      	str	r3, [r7, #24]
}
 80075c0:	bf00      	nop
 80075c2:	e7fe      	b.n	80075c2 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80075c4:	f002 f84a 	bl	800965c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80075c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075cc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80075ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d024      	beq.n	800761e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80075d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d6:	1e5a      	subs	r2, r3, #1
 80075d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075da:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d104      	bne.n	80075ee <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80075e4:	f001 fb4a 	bl	8008c7c <pvTaskIncrementMutexHeldCount>
 80075e8:	4602      	mov	r2, r0
 80075ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ec:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00f      	beq.n	8007616 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f8:	3310      	adds	r3, #16
 80075fa:	4618      	mov	r0, r3
 80075fc:	f000 ffb4 	bl	8008568 <xTaskRemoveFromEventList>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d007      	beq.n	8007616 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007606:	4b54      	ldr	r3, [pc, #336]	; (8007758 <xQueueSemaphoreTake+0x214>)
 8007608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800760c:	601a      	str	r2, [r3, #0]
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007616:	f002 f851 	bl	80096bc <vPortExitCritical>
				return pdPASS;
 800761a:	2301      	movs	r3, #1
 800761c:	e097      	b.n	800774e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d111      	bne.n	8007648 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00a      	beq.n	8007640 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800762a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762e:	f383 8811 	msr	BASEPRI, r3
 8007632:	f3bf 8f6f 	isb	sy
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	617b      	str	r3, [r7, #20]
}
 800763c:	bf00      	nop
 800763e:	e7fe      	b.n	800763e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007640:	f002 f83c 	bl	80096bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007644:	2300      	movs	r3, #0
 8007646:	e082      	b.n	800774e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800764a:	2b00      	cmp	r3, #0
 800764c:	d106      	bne.n	800765c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800764e:	f107 030c 	add.w	r3, r7, #12
 8007652:	4618      	mov	r0, r3
 8007654:	f000 ffea 	bl	800862c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007658:	2301      	movs	r3, #1
 800765a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800765c:	f002 f82e 	bl	80096bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007660:	f000 fd32 	bl	80080c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007664:	f001 fffa 	bl	800965c <vPortEnterCritical>
 8007668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800766e:	b25b      	sxtb	r3, r3
 8007670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007674:	d103      	bne.n	800767e <xQueueSemaphoreTake+0x13a>
 8007676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007678:	2200      	movs	r2, #0
 800767a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800767e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007680:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007684:	b25b      	sxtb	r3, r3
 8007686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800768a:	d103      	bne.n	8007694 <xQueueSemaphoreTake+0x150>
 800768c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800768e:	2200      	movs	r2, #0
 8007690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007694:	f002 f812 	bl	80096bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007698:	463a      	mov	r2, r7
 800769a:	f107 030c 	add.w	r3, r7, #12
 800769e:	4611      	mov	r1, r2
 80076a0:	4618      	mov	r0, r3
 80076a2:	f000 ffd9 	bl	8008658 <xTaskCheckForTimeOut>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d132      	bne.n	8007712 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80076ae:	f000 f9ce 	bl	8007a4e <prvIsQueueEmpty>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d026      	beq.n	8007706 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80076b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d109      	bne.n	80076d4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80076c0:	f001 ffcc 	bl	800965c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80076c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	4618      	mov	r0, r3
 80076ca:	f001 f92b 	bl	8008924 <xTaskPriorityInherit>
 80076ce:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80076d0:	f001 fff4 	bl	80096bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80076d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d6:	3324      	adds	r3, #36	; 0x24
 80076d8:	683a      	ldr	r2, [r7, #0]
 80076da:	4611      	mov	r1, r2
 80076dc:	4618      	mov	r0, r3
 80076de:	f000 fef3 	bl	80084c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80076e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80076e4:	f000 f961 	bl	80079aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80076e8:	f000 fcfc 	bl	80080e4 <xTaskResumeAll>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f47f af68 	bne.w	80075c4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80076f4:	4b18      	ldr	r3, [pc, #96]	; (8007758 <xQueueSemaphoreTake+0x214>)
 80076f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076fa:	601a      	str	r2, [r3, #0]
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	f3bf 8f6f 	isb	sy
 8007704:	e75e      	b.n	80075c4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007706:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007708:	f000 f94f 	bl	80079aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800770c:	f000 fcea 	bl	80080e4 <xTaskResumeAll>
 8007710:	e758      	b.n	80075c4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007712:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007714:	f000 f949 	bl	80079aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007718:	f000 fce4 	bl	80080e4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800771c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800771e:	f000 f996 	bl	8007a4e <prvIsQueueEmpty>
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	f43f af4d 	beq.w	80075c4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800772a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00d      	beq.n	800774c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007730:	f001 ff94 	bl	800965c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007734:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007736:	f000 f891 	bl	800785c <prvGetDisinheritPriorityAfterTimeout>
 800773a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800773c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007742:	4618      	mov	r0, r3
 8007744:	f001 f9fa 	bl	8008b3c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007748:	f001 ffb8 	bl	80096bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800774c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800774e:	4618      	mov	r0, r3
 8007750:	3738      	adds	r7, #56	; 0x38
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	e000ed04 	.word	0xe000ed04

0800775c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b08e      	sub	sp, #56	; 0x38
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800776c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776e:	2b00      	cmp	r3, #0
 8007770:	d10a      	bne.n	8007788 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007776:	f383 8811 	msr	BASEPRI, r3
 800777a:	f3bf 8f6f 	isb	sy
 800777e:	f3bf 8f4f 	dsb	sy
 8007782:	623b      	str	r3, [r7, #32]
}
 8007784:	bf00      	nop
 8007786:	e7fe      	b.n	8007786 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d103      	bne.n	8007796 <xQueueReceiveFromISR+0x3a>
 800778e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007792:	2b00      	cmp	r3, #0
 8007794:	d101      	bne.n	800779a <xQueueReceiveFromISR+0x3e>
 8007796:	2301      	movs	r3, #1
 8007798:	e000      	b.n	800779c <xQueueReceiveFromISR+0x40>
 800779a:	2300      	movs	r3, #0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10a      	bne.n	80077b6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80077a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a4:	f383 8811 	msr	BASEPRI, r3
 80077a8:	f3bf 8f6f 	isb	sy
 80077ac:	f3bf 8f4f 	dsb	sy
 80077b0:	61fb      	str	r3, [r7, #28]
}
 80077b2:	bf00      	nop
 80077b4:	e7fe      	b.n	80077b4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077b6:	f002 f813 	bl	80097e0 <vPortValidateInterruptPriority>
	__asm volatile
 80077ba:	f3ef 8211 	mrs	r2, BASEPRI
 80077be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c2:	f383 8811 	msr	BASEPRI, r3
 80077c6:	f3bf 8f6f 	isb	sy
 80077ca:	f3bf 8f4f 	dsb	sy
 80077ce:	61ba      	str	r2, [r7, #24]
 80077d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80077d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80077d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80077dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d02f      	beq.n	8007842 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80077e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80077ec:	68b9      	ldr	r1, [r7, #8]
 80077ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077f0:	f000 f8b5 	bl	800795e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80077f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f6:	1e5a      	subs	r2, r3, #1
 80077f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80077fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007804:	d112      	bne.n	800782c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d016      	beq.n	800783c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800780e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007810:	3310      	adds	r3, #16
 8007812:	4618      	mov	r0, r3
 8007814:	f000 fea8 	bl	8008568 <xTaskRemoveFromEventList>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00e      	beq.n	800783c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d00b      	beq.n	800783c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	601a      	str	r2, [r3, #0]
 800782a:	e007      	b.n	800783c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800782c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007830:	3301      	adds	r3, #1
 8007832:	b2db      	uxtb	r3, r3
 8007834:	b25a      	sxtb	r2, r3
 8007836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800783c:	2301      	movs	r3, #1
 800783e:	637b      	str	r3, [r7, #52]	; 0x34
 8007840:	e001      	b.n	8007846 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007842:	2300      	movs	r3, #0
 8007844:	637b      	str	r3, [r7, #52]	; 0x34
 8007846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007848:	613b      	str	r3, [r7, #16]
	__asm volatile
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	f383 8811 	msr	BASEPRI, r3
}
 8007850:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007854:	4618      	mov	r0, r3
 8007856:	3738      	adds	r7, #56	; 0x38
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007868:	2b00      	cmp	r3, #0
 800786a:	d006      	beq.n	800787a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f1c3 0307 	rsb	r3, r3, #7
 8007876:	60fb      	str	r3, [r7, #12]
 8007878:	e001      	b.n	800787e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800787a:	2300      	movs	r3, #0
 800787c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800787e:	68fb      	ldr	r3, [r7, #12]
	}
 8007880:	4618      	mov	r0, r3
 8007882:	3714      	adds	r7, #20
 8007884:	46bd      	mov	sp, r7
 8007886:	bc80      	pop	{r7}
 8007888:	4770      	bx	lr

0800788a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b086      	sub	sp, #24
 800788e:	af00      	add	r7, sp, #0
 8007890:	60f8      	str	r0, [r7, #12]
 8007892:	60b9      	str	r1, [r7, #8]
 8007894:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007896:	2300      	movs	r3, #0
 8007898:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d10d      	bne.n	80078c4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d14d      	bne.n	800794c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	4618      	mov	r0, r3
 80078b6:	f001 f8bb 	bl	8008a30 <xTaskPriorityDisinherit>
 80078ba:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	605a      	str	r2, [r3, #4]
 80078c2:	e043      	b.n	800794c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d119      	bne.n	80078fe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6898      	ldr	r0, [r3, #8]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d2:	461a      	mov	r2, r3
 80078d4:	68b9      	ldr	r1, [r7, #8]
 80078d6:	f006 f9a9 	bl	800dc2c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	689a      	ldr	r2, [r3, #8]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e2:	441a      	add	r2, r3
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	689a      	ldr	r2, [r3, #8]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d32b      	bcc.n	800794c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	609a      	str	r2, [r3, #8]
 80078fc:	e026      	b.n	800794c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	68d8      	ldr	r0, [r3, #12]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007906:	461a      	mov	r2, r3
 8007908:	68b9      	ldr	r1, [r7, #8]
 800790a:	f006 f98f 	bl	800dc2c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	68da      	ldr	r2, [r3, #12]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007916:	425b      	negs	r3, r3
 8007918:	441a      	add	r2, r3
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	68da      	ldr	r2, [r3, #12]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	429a      	cmp	r2, r3
 8007928:	d207      	bcs.n	800793a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	685a      	ldr	r2, [r3, #4]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007932:	425b      	negs	r3, r3
 8007934:	441a      	add	r2, r3
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2b02      	cmp	r3, #2
 800793e:	d105      	bne.n	800794c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d002      	beq.n	800794c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	3b01      	subs	r3, #1
 800794a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	1c5a      	adds	r2, r3, #1
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007954:	697b      	ldr	r3, [r7, #20]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3718      	adds	r7, #24
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b082      	sub	sp, #8
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
 8007966:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796c:	2b00      	cmp	r3, #0
 800796e:	d018      	beq.n	80079a2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	68da      	ldr	r2, [r3, #12]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007978:	441a      	add	r2, r3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	68da      	ldr	r2, [r3, #12]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	429a      	cmp	r2, r3
 8007988:	d303      	bcc.n	8007992 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	68d9      	ldr	r1, [r3, #12]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799a:	461a      	mov	r2, r3
 800799c:	6838      	ldr	r0, [r7, #0]
 800799e:	f006 f945 	bl	800dc2c <memcpy>
	}
}
 80079a2:	bf00      	nop
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b084      	sub	sp, #16
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80079b2:	f001 fe53 	bl	800965c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079bc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079be:	e011      	b.n	80079e4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d012      	beq.n	80079ee <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	3324      	adds	r3, #36	; 0x24
 80079cc:	4618      	mov	r0, r3
 80079ce:	f000 fdcb 	bl	8008568 <xTaskRemoveFromEventList>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d001      	beq.n	80079dc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80079d8:	f000 fea0 	bl	800871c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80079dc:	7bfb      	ldrb	r3, [r7, #15]
 80079de:	3b01      	subs	r3, #1
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	dce9      	bgt.n	80079c0 <prvUnlockQueue+0x16>
 80079ec:	e000      	b.n	80079f0 <prvUnlockQueue+0x46>
					break;
 80079ee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	22ff      	movs	r2, #255	; 0xff
 80079f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80079f8:	f001 fe60 	bl	80096bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80079fc:	f001 fe2e 	bl	800965c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a06:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a08:	e011      	b.n	8007a2e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d012      	beq.n	8007a38 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	3310      	adds	r3, #16
 8007a16:	4618      	mov	r0, r3
 8007a18:	f000 fda6 	bl	8008568 <xTaskRemoveFromEventList>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d001      	beq.n	8007a26 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007a22:	f000 fe7b 	bl	800871c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007a26:	7bbb      	ldrb	r3, [r7, #14]
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	dce9      	bgt.n	8007a0a <prvUnlockQueue+0x60>
 8007a36:	e000      	b.n	8007a3a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007a38:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	22ff      	movs	r2, #255	; 0xff
 8007a3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007a42:	f001 fe3b 	bl	80096bc <vPortExitCritical>
}
 8007a46:	bf00      	nop
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b084      	sub	sp, #16
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a56:	f001 fe01 	bl	800965c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d102      	bne.n	8007a68 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007a62:	2301      	movs	r3, #1
 8007a64:	60fb      	str	r3, [r7, #12]
 8007a66:	e001      	b.n	8007a6c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a6c:	f001 fe26 	bl	80096bc <vPortExitCritical>

	return xReturn;
 8007a70:	68fb      	ldr	r3, [r7, #12]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b084      	sub	sp, #16
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a82:	f001 fdeb 	bl	800965c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d102      	bne.n	8007a98 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007a92:	2301      	movs	r3, #1
 8007a94:	60fb      	str	r3, [r7, #12]
 8007a96:	e001      	b.n	8007a9c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a9c:	f001 fe0e 	bl	80096bc <vPortExitCritical>

	return xReturn;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
	...

08007aac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	60fb      	str	r3, [r7, #12]
 8007aba:	e014      	b.n	8007ae6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007abc:	4a0e      	ldr	r2, [pc, #56]	; (8007af8 <vQueueAddToRegistry+0x4c>)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10b      	bne.n	8007ae0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007ac8:	490b      	ldr	r1, [pc, #44]	; (8007af8 <vQueueAddToRegistry+0x4c>)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	683a      	ldr	r2, [r7, #0]
 8007ace:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007ad2:	4a09      	ldr	r2, [pc, #36]	; (8007af8 <vQueueAddToRegistry+0x4c>)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	00db      	lsls	r3, r3, #3
 8007ad8:	4413      	add	r3, r2
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007ade:	e006      	b.n	8007aee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	60fb      	str	r3, [r7, #12]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2b07      	cmp	r3, #7
 8007aea:	d9e7      	bls.n	8007abc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007aec:	bf00      	nop
 8007aee:	bf00      	nop
 8007af0:	3714      	adds	r7, #20
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bc80      	pop	{r7}
 8007af6:	4770      	bx	lr
 8007af8:	2000302c 	.word	0x2000302c

08007afc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b086      	sub	sp, #24
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007b0c:	f001 fda6 	bl	800965c <vPortEnterCritical>
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b16:	b25b      	sxtb	r3, r3
 8007b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b1c:	d103      	bne.n	8007b26 <vQueueWaitForMessageRestricted+0x2a>
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b2c:	b25b      	sxtb	r3, r3
 8007b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b32:	d103      	bne.n	8007b3c <vQueueWaitForMessageRestricted+0x40>
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b3c:	f001 fdbe 	bl	80096bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d106      	bne.n	8007b56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	3324      	adds	r3, #36	; 0x24
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	68b9      	ldr	r1, [r7, #8]
 8007b50:	4618      	mov	r0, r3
 8007b52:	f000 fcdd 	bl	8008510 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007b56:	6978      	ldr	r0, [r7, #20]
 8007b58:	f7ff ff27 	bl	80079aa <prvUnlockQueue>
	}
 8007b5c:	bf00      	nop
 8007b5e:	3718      	adds	r7, #24
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b08e      	sub	sp, #56	; 0x38
 8007b68:	af04      	add	r7, sp, #16
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
 8007b70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d10a      	bne.n	8007b8e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7c:	f383 8811 	msr	BASEPRI, r3
 8007b80:	f3bf 8f6f 	isb	sy
 8007b84:	f3bf 8f4f 	dsb	sy
 8007b88:	623b      	str	r3, [r7, #32]
}
 8007b8a:	bf00      	nop
 8007b8c:	e7fe      	b.n	8007b8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10a      	bne.n	8007baa <xTaskCreateStatic+0x46>
	__asm volatile
 8007b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b98:	f383 8811 	msr	BASEPRI, r3
 8007b9c:	f3bf 8f6f 	isb	sy
 8007ba0:	f3bf 8f4f 	dsb	sy
 8007ba4:	61fb      	str	r3, [r7, #28]
}
 8007ba6:	bf00      	nop
 8007ba8:	e7fe      	b.n	8007ba8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007baa:	2360      	movs	r3, #96	; 0x60
 8007bac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	2b60      	cmp	r3, #96	; 0x60
 8007bb2:	d00a      	beq.n	8007bca <xTaskCreateStatic+0x66>
	__asm volatile
 8007bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb8:	f383 8811 	msr	BASEPRI, r3
 8007bbc:	f3bf 8f6f 	isb	sy
 8007bc0:	f3bf 8f4f 	dsb	sy
 8007bc4:	61bb      	str	r3, [r7, #24]
}
 8007bc6:	bf00      	nop
 8007bc8:	e7fe      	b.n	8007bc8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d01e      	beq.n	8007c0e <xTaskCreateStatic+0xaa>
 8007bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d01b      	beq.n	8007c0e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bde:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be2:	2202      	movs	r2, #2
 8007be4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007be8:	2300      	movs	r3, #0
 8007bea:	9303      	str	r3, [sp, #12]
 8007bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bee:	9302      	str	r3, [sp, #8]
 8007bf0:	f107 0314 	add.w	r3, r7, #20
 8007bf4:	9301      	str	r3, [sp, #4]
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf8:	9300      	str	r3, [sp, #0]
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	68b9      	ldr	r1, [r7, #8]
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	f000 f850 	bl	8007ca6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c08:	f000 f8d8 	bl	8007dbc <prvAddNewTaskToReadyList>
 8007c0c:	e001      	b.n	8007c12 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007c12:	697b      	ldr	r3, [r7, #20]
	}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3728      	adds	r7, #40	; 0x28
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b08c      	sub	sp, #48	; 0x30
 8007c20:	af04      	add	r7, sp, #16
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	603b      	str	r3, [r7, #0]
 8007c28:	4613      	mov	r3, r2
 8007c2a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c2c:	88fb      	ldrh	r3, [r7, #6]
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	4618      	mov	r0, r3
 8007c32:	f001 fe13 	bl	800985c <pvPortMalloc>
 8007c36:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00e      	beq.n	8007c5c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007c3e:	2060      	movs	r0, #96	; 0x60
 8007c40:	f001 fe0c 	bl	800985c <pvPortMalloc>
 8007c44:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d003      	beq.n	8007c54 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	631a      	str	r2, [r3, #48]	; 0x30
 8007c52:	e005      	b.n	8007c60 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007c54:	6978      	ldr	r0, [r7, #20]
 8007c56:	f001 fec5 	bl	80099e4 <vPortFree>
 8007c5a:	e001      	b.n	8007c60 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d017      	beq.n	8007c96 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c6e:	88fa      	ldrh	r2, [r7, #6]
 8007c70:	2300      	movs	r3, #0
 8007c72:	9303      	str	r3, [sp, #12]
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	9302      	str	r3, [sp, #8]
 8007c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7a:	9301      	str	r3, [sp, #4]
 8007c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	68b9      	ldr	r1, [r7, #8]
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	f000 f80e 	bl	8007ca6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c8a:	69f8      	ldr	r0, [r7, #28]
 8007c8c:	f000 f896 	bl	8007dbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c90:	2301      	movs	r3, #1
 8007c92:	61bb      	str	r3, [r7, #24]
 8007c94:	e002      	b.n	8007c9c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c96:	f04f 33ff 	mov.w	r3, #4294967295
 8007c9a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007c9c:	69bb      	ldr	r3, [r7, #24]
	}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3720      	adds	r7, #32
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b088      	sub	sp, #32
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	60f8      	str	r0, [r7, #12]
 8007cae:	60b9      	str	r1, [r7, #8]
 8007cb0:	607a      	str	r2, [r7, #4]
 8007cb2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	21a5      	movs	r1, #165	; 0xa5
 8007cc0:	f005 ffc2 	bl	800dc48 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	4413      	add	r3, r2
 8007cd4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	f023 0307 	bic.w	r3, r3, #7
 8007cdc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	f003 0307 	and.w	r3, r3, #7
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00a      	beq.n	8007cfe <prvInitialiseNewTask+0x58>
	__asm volatile
 8007ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cec:	f383 8811 	msr	BASEPRI, r3
 8007cf0:	f3bf 8f6f 	isb	sy
 8007cf4:	f3bf 8f4f 	dsb	sy
 8007cf8:	617b      	str	r3, [r7, #20]
}
 8007cfa:	bf00      	nop
 8007cfc:	e7fe      	b.n	8007cfc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cfe:	2300      	movs	r3, #0
 8007d00:	61fb      	str	r3, [r7, #28]
 8007d02:	e012      	b.n	8007d2a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	4413      	add	r3, r2
 8007d0a:	7819      	ldrb	r1, [r3, #0]
 8007d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	4413      	add	r3, r2
 8007d12:	3334      	adds	r3, #52	; 0x34
 8007d14:	460a      	mov	r2, r1
 8007d16:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007d18:	68ba      	ldr	r2, [r7, #8]
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d006      	beq.n	8007d32 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	3301      	adds	r3, #1
 8007d28:	61fb      	str	r3, [r7, #28]
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	2b0f      	cmp	r3, #15
 8007d2e:	d9e9      	bls.n	8007d04 <prvInitialiseNewTask+0x5e>
 8007d30:	e000      	b.n	8007d34 <prvInitialiseNewTask+0x8e>
		{
			break;
 8007d32:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d36:	2200      	movs	r2, #0
 8007d38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3e:	2b06      	cmp	r3, #6
 8007d40:	d901      	bls.n	8007d46 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007d42:	2306      	movs	r3, #6
 8007d44:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d4a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d50:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d54:	2200      	movs	r2, #0
 8007d56:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5a:	3304      	adds	r3, #4
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7fe ff1c 	bl	8006b9a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d64:	3318      	adds	r3, #24
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7fe ff17 	bl	8006b9a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d70:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d74:	f1c3 0207 	rsb	r2, r3, #7
 8007d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d80:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8007d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d84:	2200      	movs	r2, #0
 8007d86:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d96:	683a      	ldr	r2, [r7, #0]
 8007d98:	68f9      	ldr	r1, [r7, #12]
 8007d9a:	69b8      	ldr	r0, [r7, #24]
 8007d9c:	f001 fb70 	bl	8009480 <pxPortInitialiseStack>
 8007da0:	4602      	mov	r2, r0
 8007da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d002      	beq.n	8007db2 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007db0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007db2:	bf00      	nop
 8007db4:	3720      	adds	r7, #32
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
	...

08007dbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007dc4:	f001 fc4a 	bl	800965c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007dc8:	4b2c      	ldr	r3, [pc, #176]	; (8007e7c <prvAddNewTaskToReadyList+0xc0>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	3301      	adds	r3, #1
 8007dce:	4a2b      	ldr	r2, [pc, #172]	; (8007e7c <prvAddNewTaskToReadyList+0xc0>)
 8007dd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007dd2:	4b2b      	ldr	r3, [pc, #172]	; (8007e80 <prvAddNewTaskToReadyList+0xc4>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d109      	bne.n	8007dee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007dda:	4a29      	ldr	r2, [pc, #164]	; (8007e80 <prvAddNewTaskToReadyList+0xc4>)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007de0:	4b26      	ldr	r3, [pc, #152]	; (8007e7c <prvAddNewTaskToReadyList+0xc0>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d110      	bne.n	8007e0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007de8:	f000 fcbc 	bl	8008764 <prvInitialiseTaskLists>
 8007dec:	e00d      	b.n	8007e0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007dee:	4b25      	ldr	r3, [pc, #148]	; (8007e84 <prvAddNewTaskToReadyList+0xc8>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d109      	bne.n	8007e0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007df6:	4b22      	ldr	r3, [pc, #136]	; (8007e80 <prvAddNewTaskToReadyList+0xc4>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d802      	bhi.n	8007e0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007e04:	4a1e      	ldr	r2, [pc, #120]	; (8007e80 <prvAddNewTaskToReadyList+0xc4>)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007e0a:	4b1f      	ldr	r3, [pc, #124]	; (8007e88 <prvAddNewTaskToReadyList+0xcc>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	4a1d      	ldr	r2, [pc, #116]	; (8007e88 <prvAddNewTaskToReadyList+0xcc>)
 8007e12:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007e14:	4b1c      	ldr	r3, [pc, #112]	; (8007e88 <prvAddNewTaskToReadyList+0xcc>)
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e20:	2201      	movs	r2, #1
 8007e22:	409a      	lsls	r2, r3
 8007e24:	4b19      	ldr	r3, [pc, #100]	; (8007e8c <prvAddNewTaskToReadyList+0xd0>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	4a18      	ldr	r2, [pc, #96]	; (8007e8c <prvAddNewTaskToReadyList+0xd0>)
 8007e2c:	6013      	str	r3, [r2, #0]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e32:	4613      	mov	r3, r2
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	4413      	add	r3, r2
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	4a15      	ldr	r2, [pc, #84]	; (8007e90 <prvAddNewTaskToReadyList+0xd4>)
 8007e3c:	441a      	add	r2, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	3304      	adds	r3, #4
 8007e42:	4619      	mov	r1, r3
 8007e44:	4610      	mov	r0, r2
 8007e46:	f7fe feb4 	bl	8006bb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007e4a:	f001 fc37 	bl	80096bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007e4e:	4b0d      	ldr	r3, [pc, #52]	; (8007e84 <prvAddNewTaskToReadyList+0xc8>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00e      	beq.n	8007e74 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e56:	4b0a      	ldr	r3, [pc, #40]	; (8007e80 <prvAddNewTaskToReadyList+0xc4>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d207      	bcs.n	8007e74 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e64:	4b0b      	ldr	r3, [pc, #44]	; (8007e94 <prvAddNewTaskToReadyList+0xd8>)
 8007e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e6a:	601a      	str	r2, [r3, #0]
 8007e6c:	f3bf 8f4f 	dsb	sy
 8007e70:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e74:	bf00      	nop
 8007e76:	3708      	adds	r7, #8
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	200001c8 	.word	0x200001c8
 8007e80:	200000c8 	.word	0x200000c8
 8007e84:	200001d4 	.word	0x200001d4
 8007e88:	200001e4 	.word	0x200001e4
 8007e8c:	200001d0 	.word	0x200001d0
 8007e90:	200000cc 	.word	0x200000cc
 8007e94:	e000ed04 	.word	0xe000ed04

08007e98 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b08a      	sub	sp, #40	; 0x28
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d10a      	bne.n	8007ec2 <vTaskDelayUntil+0x2a>
	__asm volatile
 8007eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb0:	f383 8811 	msr	BASEPRI, r3
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	617b      	str	r3, [r7, #20]
}
 8007ebe:	bf00      	nop
 8007ec0:	e7fe      	b.n	8007ec0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d10a      	bne.n	8007ede <vTaskDelayUntil+0x46>
	__asm volatile
 8007ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ecc:	f383 8811 	msr	BASEPRI, r3
 8007ed0:	f3bf 8f6f 	isb	sy
 8007ed4:	f3bf 8f4f 	dsb	sy
 8007ed8:	613b      	str	r3, [r7, #16]
}
 8007eda:	bf00      	nop
 8007edc:	e7fe      	b.n	8007edc <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8007ede:	4b2a      	ldr	r3, [pc, #168]	; (8007f88 <vTaskDelayUntil+0xf0>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00a      	beq.n	8007efc <vTaskDelayUntil+0x64>
	__asm volatile
 8007ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eea:	f383 8811 	msr	BASEPRI, r3
 8007eee:	f3bf 8f6f 	isb	sy
 8007ef2:	f3bf 8f4f 	dsb	sy
 8007ef6:	60fb      	str	r3, [r7, #12]
}
 8007ef8:	bf00      	nop
 8007efa:	e7fe      	b.n	8007efa <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8007efc:	f000 f8e4 	bl	80080c8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007f00:	4b22      	ldr	r3, [pc, #136]	; (8007f8c <vTaskDelayUntil+0xf4>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	683a      	ldr	r2, [r7, #0]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	6a3a      	ldr	r2, [r7, #32]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d20b      	bcs.n	8007f32 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	69fa      	ldr	r2, [r7, #28]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d211      	bcs.n	8007f48 <vTaskDelayUntil+0xb0>
 8007f24:	69fa      	ldr	r2, [r7, #28]
 8007f26:	6a3b      	ldr	r3, [r7, #32]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d90d      	bls.n	8007f48 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f30:	e00a      	b.n	8007f48 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	69fa      	ldr	r2, [r7, #28]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d303      	bcc.n	8007f44 <vTaskDelayUntil+0xac>
 8007f3c:	69fa      	ldr	r2, [r7, #28]
 8007f3e:	6a3b      	ldr	r3, [r7, #32]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d901      	bls.n	8007f48 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007f44:	2301      	movs	r3, #1
 8007f46:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	69fa      	ldr	r2, [r7, #28]
 8007f4c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d006      	beq.n	8007f62 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007f54:	69fa      	ldr	r2, [r7, #28]
 8007f56:	6a3b      	ldr	r3, [r7, #32]
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f000 fea1 	bl	8008ca4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007f62:	f000 f8bf 	bl	80080e4 <xTaskResumeAll>
 8007f66:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d107      	bne.n	8007f7e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8007f6e:	4b08      	ldr	r3, [pc, #32]	; (8007f90 <vTaskDelayUntil+0xf8>)
 8007f70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f74:	601a      	str	r2, [r3, #0]
 8007f76:	f3bf 8f4f 	dsb	sy
 8007f7a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f7e:	bf00      	nop
 8007f80:	3728      	adds	r7, #40	; 0x28
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	200001f0 	.word	0x200001f0
 8007f8c:	200001cc 	.word	0x200001cc
 8007f90:	e000ed04 	.word	0xe000ed04

08007f94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d017      	beq.n	8007fd6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007fa6:	4b13      	ldr	r3, [pc, #76]	; (8007ff4 <vTaskDelay+0x60>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00a      	beq.n	8007fc4 <vTaskDelay+0x30>
	__asm volatile
 8007fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb2:	f383 8811 	msr	BASEPRI, r3
 8007fb6:	f3bf 8f6f 	isb	sy
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	60bb      	str	r3, [r7, #8]
}
 8007fc0:	bf00      	nop
 8007fc2:	e7fe      	b.n	8007fc2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007fc4:	f000 f880 	bl	80080c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007fc8:	2100      	movs	r1, #0
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 fe6a 	bl	8008ca4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007fd0:	f000 f888 	bl	80080e4 <xTaskResumeAll>
 8007fd4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d107      	bne.n	8007fec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007fdc:	4b06      	ldr	r3, [pc, #24]	; (8007ff8 <vTaskDelay+0x64>)
 8007fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fe2:	601a      	str	r2, [r3, #0]
 8007fe4:	f3bf 8f4f 	dsb	sy
 8007fe8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007fec:	bf00      	nop
 8007fee:	3710      	adds	r7, #16
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	200001f0 	.word	0x200001f0
 8007ff8:	e000ed04 	.word	0xe000ed04

08007ffc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b08a      	sub	sp, #40	; 0x28
 8008000:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008002:	2300      	movs	r3, #0
 8008004:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008006:	2300      	movs	r3, #0
 8008008:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800800a:	463a      	mov	r2, r7
 800800c:	1d39      	adds	r1, r7, #4
 800800e:	f107 0308 	add.w	r3, r7, #8
 8008012:	4618      	mov	r0, r3
 8008014:	f004 fcac 	bl	800c970 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008018:	6839      	ldr	r1, [r7, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	68ba      	ldr	r2, [r7, #8]
 800801e:	9202      	str	r2, [sp, #8]
 8008020:	9301      	str	r3, [sp, #4]
 8008022:	2300      	movs	r3, #0
 8008024:	9300      	str	r3, [sp, #0]
 8008026:	2300      	movs	r3, #0
 8008028:	460a      	mov	r2, r1
 800802a:	4921      	ldr	r1, [pc, #132]	; (80080b0 <vTaskStartScheduler+0xb4>)
 800802c:	4821      	ldr	r0, [pc, #132]	; (80080b4 <vTaskStartScheduler+0xb8>)
 800802e:	f7ff fd99 	bl	8007b64 <xTaskCreateStatic>
 8008032:	4603      	mov	r3, r0
 8008034:	4a20      	ldr	r2, [pc, #128]	; (80080b8 <vTaskStartScheduler+0xbc>)
 8008036:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008038:	4b1f      	ldr	r3, [pc, #124]	; (80080b8 <vTaskStartScheduler+0xbc>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d002      	beq.n	8008046 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008040:	2301      	movs	r3, #1
 8008042:	617b      	str	r3, [r7, #20]
 8008044:	e001      	b.n	800804a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008046:	2300      	movs	r3, #0
 8008048:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	2b01      	cmp	r3, #1
 800804e:	d102      	bne.n	8008056 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008050:	f000 fe8e 	bl	8008d70 <xTimerCreateTimerTask>
 8008054:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	2b01      	cmp	r3, #1
 800805a:	d116      	bne.n	800808a <vTaskStartScheduler+0x8e>
	__asm volatile
 800805c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008060:	f383 8811 	msr	BASEPRI, r3
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	f3bf 8f4f 	dsb	sy
 800806c:	613b      	str	r3, [r7, #16]
}
 800806e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008070:	4b12      	ldr	r3, [pc, #72]	; (80080bc <vTaskStartScheduler+0xc0>)
 8008072:	f04f 32ff 	mov.w	r2, #4294967295
 8008076:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008078:	4b11      	ldr	r3, [pc, #68]	; (80080c0 <vTaskStartScheduler+0xc4>)
 800807a:	2201      	movs	r2, #1
 800807c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800807e:	4b11      	ldr	r3, [pc, #68]	; (80080c4 <vTaskStartScheduler+0xc8>)
 8008080:	2200      	movs	r2, #0
 8008082:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008084:	f001 fa78 	bl	8009578 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008088:	e00e      	b.n	80080a8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008090:	d10a      	bne.n	80080a8 <vTaskStartScheduler+0xac>
	__asm volatile
 8008092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008096:	f383 8811 	msr	BASEPRI, r3
 800809a:	f3bf 8f6f 	isb	sy
 800809e:	f3bf 8f4f 	dsb	sy
 80080a2:	60fb      	str	r3, [r7, #12]
}
 80080a4:	bf00      	nop
 80080a6:	e7fe      	b.n	80080a6 <vTaskStartScheduler+0xaa>
}
 80080a8:	bf00      	nop
 80080aa:	3718      	adds	r7, #24
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	0800fb2c 	.word	0x0800fb2c
 80080b4:	08008735 	.word	0x08008735
 80080b8:	200001ec 	.word	0x200001ec
 80080bc:	200001e8 	.word	0x200001e8
 80080c0:	200001d4 	.word	0x200001d4
 80080c4:	200001cc 	.word	0x200001cc

080080c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80080c8:	b480      	push	{r7}
 80080ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80080cc:	4b04      	ldr	r3, [pc, #16]	; (80080e0 <vTaskSuspendAll+0x18>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	3301      	adds	r3, #1
 80080d2:	4a03      	ldr	r2, [pc, #12]	; (80080e0 <vTaskSuspendAll+0x18>)
 80080d4:	6013      	str	r3, [r2, #0]
}
 80080d6:	bf00      	nop
 80080d8:	46bd      	mov	sp, r7
 80080da:	bc80      	pop	{r7}
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	200001f0 	.word	0x200001f0

080080e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80080ea:	2300      	movs	r3, #0
 80080ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80080ee:	2300      	movs	r3, #0
 80080f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80080f2:	4b41      	ldr	r3, [pc, #260]	; (80081f8 <xTaskResumeAll+0x114>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d10a      	bne.n	8008110 <xTaskResumeAll+0x2c>
	__asm volatile
 80080fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fe:	f383 8811 	msr	BASEPRI, r3
 8008102:	f3bf 8f6f 	isb	sy
 8008106:	f3bf 8f4f 	dsb	sy
 800810a:	603b      	str	r3, [r7, #0]
}
 800810c:	bf00      	nop
 800810e:	e7fe      	b.n	800810e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008110:	f001 faa4 	bl	800965c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008114:	4b38      	ldr	r3, [pc, #224]	; (80081f8 <xTaskResumeAll+0x114>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	3b01      	subs	r3, #1
 800811a:	4a37      	ldr	r2, [pc, #220]	; (80081f8 <xTaskResumeAll+0x114>)
 800811c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800811e:	4b36      	ldr	r3, [pc, #216]	; (80081f8 <xTaskResumeAll+0x114>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d161      	bne.n	80081ea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008126:	4b35      	ldr	r3, [pc, #212]	; (80081fc <xTaskResumeAll+0x118>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d05d      	beq.n	80081ea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800812e:	e02e      	b.n	800818e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008130:	4b33      	ldr	r3, [pc, #204]	; (8008200 <xTaskResumeAll+0x11c>)
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	3318      	adds	r3, #24
 800813c:	4618      	mov	r0, r3
 800813e:	f7fe fd93 	bl	8006c68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	3304      	adds	r3, #4
 8008146:	4618      	mov	r0, r3
 8008148:	f7fe fd8e 	bl	8006c68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008150:	2201      	movs	r2, #1
 8008152:	409a      	lsls	r2, r3
 8008154:	4b2b      	ldr	r3, [pc, #172]	; (8008204 <xTaskResumeAll+0x120>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4313      	orrs	r3, r2
 800815a:	4a2a      	ldr	r2, [pc, #168]	; (8008204 <xTaskResumeAll+0x120>)
 800815c:	6013      	str	r3, [r2, #0]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008162:	4613      	mov	r3, r2
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	4413      	add	r3, r2
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	4a27      	ldr	r2, [pc, #156]	; (8008208 <xTaskResumeAll+0x124>)
 800816c:	441a      	add	r2, r3
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	3304      	adds	r3, #4
 8008172:	4619      	mov	r1, r3
 8008174:	4610      	mov	r0, r2
 8008176:	f7fe fd1c 	bl	8006bb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800817e:	4b23      	ldr	r3, [pc, #140]	; (800820c <xTaskResumeAll+0x128>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008184:	429a      	cmp	r2, r3
 8008186:	d302      	bcc.n	800818e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008188:	4b21      	ldr	r3, [pc, #132]	; (8008210 <xTaskResumeAll+0x12c>)
 800818a:	2201      	movs	r2, #1
 800818c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800818e:	4b1c      	ldr	r3, [pc, #112]	; (8008200 <xTaskResumeAll+0x11c>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1cc      	bne.n	8008130 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d001      	beq.n	80081a0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800819c:	f000 fb80 	bl	80088a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80081a0:	4b1c      	ldr	r3, [pc, #112]	; (8008214 <xTaskResumeAll+0x130>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d010      	beq.n	80081ce <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80081ac:	f000 f856 	bl	800825c <xTaskIncrementTick>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d002      	beq.n	80081bc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80081b6:	4b16      	ldr	r3, [pc, #88]	; (8008210 <xTaskResumeAll+0x12c>)
 80081b8:	2201      	movs	r2, #1
 80081ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	3b01      	subs	r3, #1
 80081c0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1f1      	bne.n	80081ac <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80081c8:	4b12      	ldr	r3, [pc, #72]	; (8008214 <xTaskResumeAll+0x130>)
 80081ca:	2200      	movs	r2, #0
 80081cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80081ce:	4b10      	ldr	r3, [pc, #64]	; (8008210 <xTaskResumeAll+0x12c>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d009      	beq.n	80081ea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80081d6:	2301      	movs	r3, #1
 80081d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80081da:	4b0f      	ldr	r3, [pc, #60]	; (8008218 <xTaskResumeAll+0x134>)
 80081dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081e0:	601a      	str	r2, [r3, #0]
 80081e2:	f3bf 8f4f 	dsb	sy
 80081e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081ea:	f001 fa67 	bl	80096bc <vPortExitCritical>

	return xAlreadyYielded;
 80081ee:	68bb      	ldr	r3, [r7, #8]
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3710      	adds	r7, #16
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	200001f0 	.word	0x200001f0
 80081fc:	200001c8 	.word	0x200001c8
 8008200:	20000188 	.word	0x20000188
 8008204:	200001d0 	.word	0x200001d0
 8008208:	200000cc 	.word	0x200000cc
 800820c:	200000c8 	.word	0x200000c8
 8008210:	200001dc 	.word	0x200001dc
 8008214:	200001d8 	.word	0x200001d8
 8008218:	e000ed04 	.word	0xe000ed04

0800821c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008222:	4b04      	ldr	r3, [pc, #16]	; (8008234 <xTaskGetTickCount+0x18>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008228:	687b      	ldr	r3, [r7, #4]
}
 800822a:	4618      	mov	r0, r3
 800822c:	370c      	adds	r7, #12
 800822e:	46bd      	mov	sp, r7
 8008230:	bc80      	pop	{r7}
 8008232:	4770      	bx	lr
 8008234:	200001cc 	.word	0x200001cc

08008238 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800823e:	f001 facf 	bl	80097e0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008242:	2300      	movs	r3, #0
 8008244:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008246:	4b04      	ldr	r3, [pc, #16]	; (8008258 <xTaskGetTickCountFromISR+0x20>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800824c:	683b      	ldr	r3, [r7, #0]
}
 800824e:	4618      	mov	r0, r3
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	200001cc 	.word	0x200001cc

0800825c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b086      	sub	sp, #24
 8008260:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008262:	2300      	movs	r3, #0
 8008264:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008266:	4b51      	ldr	r3, [pc, #324]	; (80083ac <xTaskIncrementTick+0x150>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	f040 808d 	bne.w	800838a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008270:	4b4f      	ldr	r3, [pc, #316]	; (80083b0 <xTaskIncrementTick+0x154>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	3301      	adds	r3, #1
 8008276:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008278:	4a4d      	ldr	r2, [pc, #308]	; (80083b0 <xTaskIncrementTick+0x154>)
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d120      	bne.n	80082c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008284:	4b4b      	ldr	r3, [pc, #300]	; (80083b4 <xTaskIncrementTick+0x158>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00a      	beq.n	80082a4 <xTaskIncrementTick+0x48>
	__asm volatile
 800828e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	603b      	str	r3, [r7, #0]
}
 80082a0:	bf00      	nop
 80082a2:	e7fe      	b.n	80082a2 <xTaskIncrementTick+0x46>
 80082a4:	4b43      	ldr	r3, [pc, #268]	; (80083b4 <xTaskIncrementTick+0x158>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	60fb      	str	r3, [r7, #12]
 80082aa:	4b43      	ldr	r3, [pc, #268]	; (80083b8 <xTaskIncrementTick+0x15c>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a41      	ldr	r2, [pc, #260]	; (80083b4 <xTaskIncrementTick+0x158>)
 80082b0:	6013      	str	r3, [r2, #0]
 80082b2:	4a41      	ldr	r2, [pc, #260]	; (80083b8 <xTaskIncrementTick+0x15c>)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6013      	str	r3, [r2, #0]
 80082b8:	4b40      	ldr	r3, [pc, #256]	; (80083bc <xTaskIncrementTick+0x160>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	3301      	adds	r3, #1
 80082be:	4a3f      	ldr	r2, [pc, #252]	; (80083bc <xTaskIncrementTick+0x160>)
 80082c0:	6013      	str	r3, [r2, #0]
 80082c2:	f000 faed 	bl	80088a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80082c6:	4b3e      	ldr	r3, [pc, #248]	; (80083c0 <xTaskIncrementTick+0x164>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	693a      	ldr	r2, [r7, #16]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d34d      	bcc.n	800836c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082d0:	4b38      	ldr	r3, [pc, #224]	; (80083b4 <xTaskIncrementTick+0x158>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d101      	bne.n	80082de <xTaskIncrementTick+0x82>
 80082da:	2301      	movs	r3, #1
 80082dc:	e000      	b.n	80082e0 <xTaskIncrementTick+0x84>
 80082de:	2300      	movs	r3, #0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d004      	beq.n	80082ee <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082e4:	4b36      	ldr	r3, [pc, #216]	; (80083c0 <xTaskIncrementTick+0x164>)
 80082e6:	f04f 32ff 	mov.w	r2, #4294967295
 80082ea:	601a      	str	r2, [r3, #0]
					break;
 80082ec:	e03e      	b.n	800836c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80082ee:	4b31      	ldr	r3, [pc, #196]	; (80083b4 <xTaskIncrementTick+0x158>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80082fe:	693a      	ldr	r2, [r7, #16]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	429a      	cmp	r2, r3
 8008304:	d203      	bcs.n	800830e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008306:	4a2e      	ldr	r2, [pc, #184]	; (80083c0 <xTaskIncrementTick+0x164>)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6013      	str	r3, [r2, #0]
						break;
 800830c:	e02e      	b.n	800836c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	3304      	adds	r3, #4
 8008312:	4618      	mov	r0, r3
 8008314:	f7fe fca8 	bl	8006c68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800831c:	2b00      	cmp	r3, #0
 800831e:	d004      	beq.n	800832a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	3318      	adds	r3, #24
 8008324:	4618      	mov	r0, r3
 8008326:	f7fe fc9f 	bl	8006c68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800832e:	2201      	movs	r2, #1
 8008330:	409a      	lsls	r2, r3
 8008332:	4b24      	ldr	r3, [pc, #144]	; (80083c4 <xTaskIncrementTick+0x168>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4313      	orrs	r3, r2
 8008338:	4a22      	ldr	r2, [pc, #136]	; (80083c4 <xTaskIncrementTick+0x168>)
 800833a:	6013      	str	r3, [r2, #0]
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008340:	4613      	mov	r3, r2
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	4413      	add	r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4a1f      	ldr	r2, [pc, #124]	; (80083c8 <xTaskIncrementTick+0x16c>)
 800834a:	441a      	add	r2, r3
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	3304      	adds	r3, #4
 8008350:	4619      	mov	r1, r3
 8008352:	4610      	mov	r0, r2
 8008354:	f7fe fc2d 	bl	8006bb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800835c:	4b1b      	ldr	r3, [pc, #108]	; (80083cc <xTaskIncrementTick+0x170>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008362:	429a      	cmp	r2, r3
 8008364:	d3b4      	bcc.n	80082d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008366:	2301      	movs	r3, #1
 8008368:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800836a:	e7b1      	b.n	80082d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800836c:	4b17      	ldr	r3, [pc, #92]	; (80083cc <xTaskIncrementTick+0x170>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008372:	4915      	ldr	r1, [pc, #84]	; (80083c8 <xTaskIncrementTick+0x16c>)
 8008374:	4613      	mov	r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	4413      	add	r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	440b      	add	r3, r1
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2b01      	cmp	r3, #1
 8008382:	d907      	bls.n	8008394 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8008384:	2301      	movs	r3, #1
 8008386:	617b      	str	r3, [r7, #20]
 8008388:	e004      	b.n	8008394 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800838a:	4b11      	ldr	r3, [pc, #68]	; (80083d0 <xTaskIncrementTick+0x174>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	3301      	adds	r3, #1
 8008390:	4a0f      	ldr	r2, [pc, #60]	; (80083d0 <xTaskIncrementTick+0x174>)
 8008392:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008394:	4b0f      	ldr	r3, [pc, #60]	; (80083d4 <xTaskIncrementTick+0x178>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d001      	beq.n	80083a0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800839c:	2301      	movs	r3, #1
 800839e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80083a0:	697b      	ldr	r3, [r7, #20]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3718      	adds	r7, #24
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	200001f0 	.word	0x200001f0
 80083b0:	200001cc 	.word	0x200001cc
 80083b4:	20000180 	.word	0x20000180
 80083b8:	20000184 	.word	0x20000184
 80083bc:	200001e0 	.word	0x200001e0
 80083c0:	200001e8 	.word	0x200001e8
 80083c4:	200001d0 	.word	0x200001d0
 80083c8:	200000cc 	.word	0x200000cc
 80083cc:	200000c8 	.word	0x200000c8
 80083d0:	200001d8 	.word	0x200001d8
 80083d4:	200001dc 	.word	0x200001dc

080083d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80083de:	4b33      	ldr	r3, [pc, #204]	; (80084ac <vTaskSwitchContext+0xd4>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d003      	beq.n	80083ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80083e6:	4b32      	ldr	r3, [pc, #200]	; (80084b0 <vTaskSwitchContext+0xd8>)
 80083e8:	2201      	movs	r2, #1
 80083ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80083ec:	e059      	b.n	80084a2 <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 80083ee:	4b30      	ldr	r3, [pc, #192]	; (80084b0 <vTaskSwitchContext+0xd8>)
 80083f0:	2200      	movs	r2, #0
 80083f2:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80083f4:	f7f8 ff1a 	bl	800122c <HAL_GetTick>
 80083f8:	4603      	mov	r3, r0
 80083fa:	461a      	mov	r2, r3
 80083fc:	4b2d      	ldr	r3, [pc, #180]	; (80084b4 <vTaskSwitchContext+0xdc>)
 80083fe:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8008400:	4b2c      	ldr	r3, [pc, #176]	; (80084b4 <vTaskSwitchContext+0xdc>)
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	4b2c      	ldr	r3, [pc, #176]	; (80084b8 <vTaskSwitchContext+0xe0>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	429a      	cmp	r2, r3
 800840a:	d909      	bls.n	8008420 <vTaskSwitchContext+0x48>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800840c:	4b2b      	ldr	r3, [pc, #172]	; (80084bc <vTaskSwitchContext+0xe4>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008412:	4a28      	ldr	r2, [pc, #160]	; (80084b4 <vTaskSwitchContext+0xdc>)
 8008414:	6810      	ldr	r0, [r2, #0]
 8008416:	4a28      	ldr	r2, [pc, #160]	; (80084b8 <vTaskSwitchContext+0xe0>)
 8008418:	6812      	ldr	r2, [r2, #0]
 800841a:	1a82      	subs	r2, r0, r2
 800841c:	440a      	add	r2, r1
 800841e:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 8008420:	4b24      	ldr	r3, [pc, #144]	; (80084b4 <vTaskSwitchContext+0xdc>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a24      	ldr	r2, [pc, #144]	; (80084b8 <vTaskSwitchContext+0xe0>)
 8008426:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008428:	4b25      	ldr	r3, [pc, #148]	; (80084c0 <vTaskSwitchContext+0xe8>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	fab3 f383 	clz	r3, r3
 8008434:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008436:	7afb      	ldrb	r3, [r7, #11]
 8008438:	f1c3 031f 	rsb	r3, r3, #31
 800843c:	617b      	str	r3, [r7, #20]
 800843e:	4921      	ldr	r1, [pc, #132]	; (80084c4 <vTaskSwitchContext+0xec>)
 8008440:	697a      	ldr	r2, [r7, #20]
 8008442:	4613      	mov	r3, r2
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	4413      	add	r3, r2
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	440b      	add	r3, r1
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d10a      	bne.n	8008468 <vTaskSwitchContext+0x90>
	__asm volatile
 8008452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008456:	f383 8811 	msr	BASEPRI, r3
 800845a:	f3bf 8f6f 	isb	sy
 800845e:	f3bf 8f4f 	dsb	sy
 8008462:	607b      	str	r3, [r7, #4]
}
 8008464:	bf00      	nop
 8008466:	e7fe      	b.n	8008466 <vTaskSwitchContext+0x8e>
 8008468:	697a      	ldr	r2, [r7, #20]
 800846a:	4613      	mov	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	4413      	add	r3, r2
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	4a14      	ldr	r2, [pc, #80]	; (80084c4 <vTaskSwitchContext+0xec>)
 8008474:	4413      	add	r3, r2
 8008476:	613b      	str	r3, [r7, #16]
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	685a      	ldr	r2, [r3, #4]
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	605a      	str	r2, [r3, #4]
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	685a      	ldr	r2, [r3, #4]
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	3308      	adds	r3, #8
 800848a:	429a      	cmp	r2, r3
 800848c:	d104      	bne.n	8008498 <vTaskSwitchContext+0xc0>
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	685a      	ldr	r2, [r3, #4]
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	605a      	str	r2, [r3, #4]
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	4a07      	ldr	r2, [pc, #28]	; (80084bc <vTaskSwitchContext+0xe4>)
 80084a0:	6013      	str	r3, [r2, #0]
}
 80084a2:	bf00      	nop
 80084a4:	3718      	adds	r7, #24
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	200001f0 	.word	0x200001f0
 80084b0:	200001dc 	.word	0x200001dc
 80084b4:	200001f8 	.word	0x200001f8
 80084b8:	200001f4 	.word	0x200001f4
 80084bc:	200000c8 	.word	0x200000c8
 80084c0:	200001d0 	.word	0x200001d0
 80084c4:	200000cc 	.word	0x200000cc

080084c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d10a      	bne.n	80084ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80084d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084dc:	f383 8811 	msr	BASEPRI, r3
 80084e0:	f3bf 8f6f 	isb	sy
 80084e4:	f3bf 8f4f 	dsb	sy
 80084e8:	60fb      	str	r3, [r7, #12]
}
 80084ea:	bf00      	nop
 80084ec:	e7fe      	b.n	80084ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80084ee:	4b07      	ldr	r3, [pc, #28]	; (800850c <vTaskPlaceOnEventList+0x44>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	3318      	adds	r3, #24
 80084f4:	4619      	mov	r1, r3
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f7fe fb7e 	bl	8006bf8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80084fc:	2101      	movs	r1, #1
 80084fe:	6838      	ldr	r0, [r7, #0]
 8008500:	f000 fbd0 	bl	8008ca4 <prvAddCurrentTaskToDelayedList>
}
 8008504:	bf00      	nop
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}
 800850c:	200000c8 	.word	0x200000c8

08008510 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008510:	b580      	push	{r7, lr}
 8008512:	b086      	sub	sp, #24
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d10a      	bne.n	8008538 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008526:	f383 8811 	msr	BASEPRI, r3
 800852a:	f3bf 8f6f 	isb	sy
 800852e:	f3bf 8f4f 	dsb	sy
 8008532:	617b      	str	r3, [r7, #20]
}
 8008534:	bf00      	nop
 8008536:	e7fe      	b.n	8008536 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008538:	4b0a      	ldr	r3, [pc, #40]	; (8008564 <vTaskPlaceOnEventListRestricted+0x54>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	3318      	adds	r3, #24
 800853e:	4619      	mov	r1, r3
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f7fe fb36 	bl	8006bb2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d002      	beq.n	8008552 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800854c:	f04f 33ff 	mov.w	r3, #4294967295
 8008550:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008552:	6879      	ldr	r1, [r7, #4]
 8008554:	68b8      	ldr	r0, [r7, #8]
 8008556:	f000 fba5 	bl	8008ca4 <prvAddCurrentTaskToDelayedList>
	}
 800855a:	bf00      	nop
 800855c:	3718      	adds	r7, #24
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	200000c8 	.word	0x200000c8

08008568 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b086      	sub	sp, #24
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d10a      	bne.n	8008594 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800857e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008582:	f383 8811 	msr	BASEPRI, r3
 8008586:	f3bf 8f6f 	isb	sy
 800858a:	f3bf 8f4f 	dsb	sy
 800858e:	60fb      	str	r3, [r7, #12]
}
 8008590:	bf00      	nop
 8008592:	e7fe      	b.n	8008592 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	3318      	adds	r3, #24
 8008598:	4618      	mov	r0, r3
 800859a:	f7fe fb65 	bl	8006c68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800859e:	4b1d      	ldr	r3, [pc, #116]	; (8008614 <xTaskRemoveFromEventList+0xac>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d11c      	bne.n	80085e0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	3304      	adds	r3, #4
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7fe fb5c 	bl	8006c68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b4:	2201      	movs	r2, #1
 80085b6:	409a      	lsls	r2, r3
 80085b8:	4b17      	ldr	r3, [pc, #92]	; (8008618 <xTaskRemoveFromEventList+0xb0>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4313      	orrs	r3, r2
 80085be:	4a16      	ldr	r2, [pc, #88]	; (8008618 <xTaskRemoveFromEventList+0xb0>)
 80085c0:	6013      	str	r3, [r2, #0]
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085c6:	4613      	mov	r3, r2
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	4413      	add	r3, r2
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	4a13      	ldr	r2, [pc, #76]	; (800861c <xTaskRemoveFromEventList+0xb4>)
 80085d0:	441a      	add	r2, r3
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	3304      	adds	r3, #4
 80085d6:	4619      	mov	r1, r3
 80085d8:	4610      	mov	r0, r2
 80085da:	f7fe faea 	bl	8006bb2 <vListInsertEnd>
 80085de:	e005      	b.n	80085ec <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	3318      	adds	r3, #24
 80085e4:	4619      	mov	r1, r3
 80085e6:	480e      	ldr	r0, [pc, #56]	; (8008620 <xTaskRemoveFromEventList+0xb8>)
 80085e8:	f7fe fae3 	bl	8006bb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085f0:	4b0c      	ldr	r3, [pc, #48]	; (8008624 <xTaskRemoveFromEventList+0xbc>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d905      	bls.n	8008606 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80085fa:	2301      	movs	r3, #1
 80085fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80085fe:	4b0a      	ldr	r3, [pc, #40]	; (8008628 <xTaskRemoveFromEventList+0xc0>)
 8008600:	2201      	movs	r2, #1
 8008602:	601a      	str	r2, [r3, #0]
 8008604:	e001      	b.n	800860a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008606:	2300      	movs	r3, #0
 8008608:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800860a:	697b      	ldr	r3, [r7, #20]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3718      	adds	r7, #24
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	200001f0 	.word	0x200001f0
 8008618:	200001d0 	.word	0x200001d0
 800861c:	200000cc 	.word	0x200000cc
 8008620:	20000188 	.word	0x20000188
 8008624:	200000c8 	.word	0x200000c8
 8008628:	200001dc 	.word	0x200001dc

0800862c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008634:	4b06      	ldr	r3, [pc, #24]	; (8008650 <vTaskInternalSetTimeOutState+0x24>)
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800863c:	4b05      	ldr	r3, [pc, #20]	; (8008654 <vTaskInternalSetTimeOutState+0x28>)
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	605a      	str	r2, [r3, #4]
}
 8008644:	bf00      	nop
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	bc80      	pop	{r7}
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop
 8008650:	200001e0 	.word	0x200001e0
 8008654:	200001cc 	.word	0x200001cc

08008658 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b088      	sub	sp, #32
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d10a      	bne.n	800867e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866c:	f383 8811 	msr	BASEPRI, r3
 8008670:	f3bf 8f6f 	isb	sy
 8008674:	f3bf 8f4f 	dsb	sy
 8008678:	613b      	str	r3, [r7, #16]
}
 800867a:	bf00      	nop
 800867c:	e7fe      	b.n	800867c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d10a      	bne.n	800869a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008688:	f383 8811 	msr	BASEPRI, r3
 800868c:	f3bf 8f6f 	isb	sy
 8008690:	f3bf 8f4f 	dsb	sy
 8008694:	60fb      	str	r3, [r7, #12]
}
 8008696:	bf00      	nop
 8008698:	e7fe      	b.n	8008698 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800869a:	f000 ffdf 	bl	800965c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800869e:	4b1d      	ldr	r3, [pc, #116]	; (8008714 <xTaskCheckForTimeOut+0xbc>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	69ba      	ldr	r2, [r7, #24]
 80086aa:	1ad3      	subs	r3, r2, r3
 80086ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086b6:	d102      	bne.n	80086be <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80086b8:	2300      	movs	r3, #0
 80086ba:	61fb      	str	r3, [r7, #28]
 80086bc:	e023      	b.n	8008706 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	4b15      	ldr	r3, [pc, #84]	; (8008718 <xTaskCheckForTimeOut+0xc0>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d007      	beq.n	80086da <xTaskCheckForTimeOut+0x82>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	69ba      	ldr	r2, [r7, #24]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d302      	bcc.n	80086da <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80086d4:	2301      	movs	r3, #1
 80086d6:	61fb      	str	r3, [r7, #28]
 80086d8:	e015      	b.n	8008706 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	697a      	ldr	r2, [r7, #20]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d20b      	bcs.n	80086fc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	1ad2      	subs	r2, r2, r3
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f7ff ff9b 	bl	800862c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80086f6:	2300      	movs	r3, #0
 80086f8:	61fb      	str	r3, [r7, #28]
 80086fa:	e004      	b.n	8008706 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	2200      	movs	r2, #0
 8008700:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008702:	2301      	movs	r3, #1
 8008704:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008706:	f000 ffd9 	bl	80096bc <vPortExitCritical>

	return xReturn;
 800870a:	69fb      	ldr	r3, [r7, #28]
}
 800870c:	4618      	mov	r0, r3
 800870e:	3720      	adds	r7, #32
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	200001cc 	.word	0x200001cc
 8008718:	200001e0 	.word	0x200001e0

0800871c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800871c:	b480      	push	{r7}
 800871e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008720:	4b03      	ldr	r3, [pc, #12]	; (8008730 <vTaskMissedYield+0x14>)
 8008722:	2201      	movs	r2, #1
 8008724:	601a      	str	r2, [r3, #0]
}
 8008726:	bf00      	nop
 8008728:	46bd      	mov	sp, r7
 800872a:	bc80      	pop	{r7}
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	200001dc 	.word	0x200001dc

08008734 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800873c:	f000 f852 	bl	80087e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008740:	4b06      	ldr	r3, [pc, #24]	; (800875c <prvIdleTask+0x28>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	2b01      	cmp	r3, #1
 8008746:	d9f9      	bls.n	800873c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008748:	4b05      	ldr	r3, [pc, #20]	; (8008760 <prvIdleTask+0x2c>)
 800874a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800874e:	601a      	str	r2, [r3, #0]
 8008750:	f3bf 8f4f 	dsb	sy
 8008754:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008758:	e7f0      	b.n	800873c <prvIdleTask+0x8>
 800875a:	bf00      	nop
 800875c:	200000cc 	.word	0x200000cc
 8008760:	e000ed04 	.word	0xe000ed04

08008764 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800876a:	2300      	movs	r3, #0
 800876c:	607b      	str	r3, [r7, #4]
 800876e:	e00c      	b.n	800878a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	4613      	mov	r3, r2
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	4413      	add	r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	4a12      	ldr	r2, [pc, #72]	; (80087c4 <prvInitialiseTaskLists+0x60>)
 800877c:	4413      	add	r3, r2
 800877e:	4618      	mov	r0, r3
 8008780:	f7fe f9ec 	bl	8006b5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	3301      	adds	r3, #1
 8008788:	607b      	str	r3, [r7, #4]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2b06      	cmp	r3, #6
 800878e:	d9ef      	bls.n	8008770 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008790:	480d      	ldr	r0, [pc, #52]	; (80087c8 <prvInitialiseTaskLists+0x64>)
 8008792:	f7fe f9e3 	bl	8006b5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008796:	480d      	ldr	r0, [pc, #52]	; (80087cc <prvInitialiseTaskLists+0x68>)
 8008798:	f7fe f9e0 	bl	8006b5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800879c:	480c      	ldr	r0, [pc, #48]	; (80087d0 <prvInitialiseTaskLists+0x6c>)
 800879e:	f7fe f9dd 	bl	8006b5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80087a2:	480c      	ldr	r0, [pc, #48]	; (80087d4 <prvInitialiseTaskLists+0x70>)
 80087a4:	f7fe f9da 	bl	8006b5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80087a8:	480b      	ldr	r0, [pc, #44]	; (80087d8 <prvInitialiseTaskLists+0x74>)
 80087aa:	f7fe f9d7 	bl	8006b5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80087ae:	4b0b      	ldr	r3, [pc, #44]	; (80087dc <prvInitialiseTaskLists+0x78>)
 80087b0:	4a05      	ldr	r2, [pc, #20]	; (80087c8 <prvInitialiseTaskLists+0x64>)
 80087b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80087b4:	4b0a      	ldr	r3, [pc, #40]	; (80087e0 <prvInitialiseTaskLists+0x7c>)
 80087b6:	4a05      	ldr	r2, [pc, #20]	; (80087cc <prvInitialiseTaskLists+0x68>)
 80087b8:	601a      	str	r2, [r3, #0]
}
 80087ba:	bf00      	nop
 80087bc:	3708      	adds	r7, #8
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	200000cc 	.word	0x200000cc
 80087c8:	20000158 	.word	0x20000158
 80087cc:	2000016c 	.word	0x2000016c
 80087d0:	20000188 	.word	0x20000188
 80087d4:	2000019c 	.word	0x2000019c
 80087d8:	200001b4 	.word	0x200001b4
 80087dc:	20000180 	.word	0x20000180
 80087e0:	20000184 	.word	0x20000184

080087e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087ea:	e019      	b.n	8008820 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80087ec:	f000 ff36 	bl	800965c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80087f0:	4b10      	ldr	r3, [pc, #64]	; (8008834 <prvCheckTasksWaitingTermination+0x50>)
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	68db      	ldr	r3, [r3, #12]
 80087f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	3304      	adds	r3, #4
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7fe fa33 	bl	8006c68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008802:	4b0d      	ldr	r3, [pc, #52]	; (8008838 <prvCheckTasksWaitingTermination+0x54>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	3b01      	subs	r3, #1
 8008808:	4a0b      	ldr	r2, [pc, #44]	; (8008838 <prvCheckTasksWaitingTermination+0x54>)
 800880a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800880c:	4b0b      	ldr	r3, [pc, #44]	; (800883c <prvCheckTasksWaitingTermination+0x58>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	3b01      	subs	r3, #1
 8008812:	4a0a      	ldr	r2, [pc, #40]	; (800883c <prvCheckTasksWaitingTermination+0x58>)
 8008814:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008816:	f000 ff51 	bl	80096bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 f810 	bl	8008840 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008820:	4b06      	ldr	r3, [pc, #24]	; (800883c <prvCheckTasksWaitingTermination+0x58>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d1e1      	bne.n	80087ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008828:	bf00      	nop
 800882a:	bf00      	nop
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	2000019c 	.word	0x2000019c
 8008838:	200001c8 	.word	0x200001c8
 800883c:	200001b0 	.word	0x200001b0

08008840 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800884e:	2b00      	cmp	r3, #0
 8008850:	d108      	bne.n	8008864 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008856:	4618      	mov	r0, r3
 8008858:	f001 f8c4 	bl	80099e4 <vPortFree>
				vPortFree( pxTCB );
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f001 f8c1 	bl	80099e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008862:	e018      	b.n	8008896 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800886a:	2b01      	cmp	r3, #1
 800886c:	d103      	bne.n	8008876 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f001 f8b8 	bl	80099e4 <vPortFree>
	}
 8008874:	e00f      	b.n	8008896 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800887c:	2b02      	cmp	r3, #2
 800887e:	d00a      	beq.n	8008896 <prvDeleteTCB+0x56>
	__asm volatile
 8008880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008884:	f383 8811 	msr	BASEPRI, r3
 8008888:	f3bf 8f6f 	isb	sy
 800888c:	f3bf 8f4f 	dsb	sy
 8008890:	60fb      	str	r3, [r7, #12]
}
 8008892:	bf00      	nop
 8008894:	e7fe      	b.n	8008894 <prvDeleteTCB+0x54>
	}
 8008896:	bf00      	nop
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
	...

080088a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088a6:	4b0e      	ldr	r3, [pc, #56]	; (80088e0 <prvResetNextTaskUnblockTime+0x40>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d101      	bne.n	80088b4 <prvResetNextTaskUnblockTime+0x14>
 80088b0:	2301      	movs	r3, #1
 80088b2:	e000      	b.n	80088b6 <prvResetNextTaskUnblockTime+0x16>
 80088b4:	2300      	movs	r3, #0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d004      	beq.n	80088c4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80088ba:	4b0a      	ldr	r3, [pc, #40]	; (80088e4 <prvResetNextTaskUnblockTime+0x44>)
 80088bc:	f04f 32ff 	mov.w	r2, #4294967295
 80088c0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80088c2:	e008      	b.n	80088d6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80088c4:	4b06      	ldr	r3, [pc, #24]	; (80088e0 <prvResetNextTaskUnblockTime+0x40>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	4a04      	ldr	r2, [pc, #16]	; (80088e4 <prvResetNextTaskUnblockTime+0x44>)
 80088d4:	6013      	str	r3, [r2, #0]
}
 80088d6:	bf00      	nop
 80088d8:	370c      	adds	r7, #12
 80088da:	46bd      	mov	sp, r7
 80088dc:	bc80      	pop	{r7}
 80088de:	4770      	bx	lr
 80088e0:	20000180 	.word	0x20000180
 80088e4:	200001e8 	.word	0x200001e8

080088e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80088ee:	4b0b      	ldr	r3, [pc, #44]	; (800891c <xTaskGetSchedulerState+0x34>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d102      	bne.n	80088fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80088f6:	2301      	movs	r3, #1
 80088f8:	607b      	str	r3, [r7, #4]
 80088fa:	e008      	b.n	800890e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088fc:	4b08      	ldr	r3, [pc, #32]	; (8008920 <xTaskGetSchedulerState+0x38>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d102      	bne.n	800890a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008904:	2302      	movs	r3, #2
 8008906:	607b      	str	r3, [r7, #4]
 8008908:	e001      	b.n	800890e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800890a:	2300      	movs	r3, #0
 800890c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800890e:	687b      	ldr	r3, [r7, #4]
	}
 8008910:	4618      	mov	r0, r3
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	bc80      	pop	{r7}
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	200001d4 	.word	0x200001d4
 8008920:	200001f0 	.word	0x200001f0

08008924 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008930:	2300      	movs	r3, #0
 8008932:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d06e      	beq.n	8008a18 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800893e:	4b39      	ldr	r3, [pc, #228]	; (8008a24 <xTaskPriorityInherit+0x100>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008944:	429a      	cmp	r2, r3
 8008946:	d25e      	bcs.n	8008a06 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	699b      	ldr	r3, [r3, #24]
 800894c:	2b00      	cmp	r3, #0
 800894e:	db06      	blt.n	800895e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008950:	4b34      	ldr	r3, [pc, #208]	; (8008a24 <xTaskPriorityInherit+0x100>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008956:	f1c3 0207 	rsb	r2, r3, #7
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	6959      	ldr	r1, [r3, #20]
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008966:	4613      	mov	r3, r2
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	4413      	add	r3, r2
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	4a2e      	ldr	r2, [pc, #184]	; (8008a28 <xTaskPriorityInherit+0x104>)
 8008970:	4413      	add	r3, r2
 8008972:	4299      	cmp	r1, r3
 8008974:	d101      	bne.n	800897a <xTaskPriorityInherit+0x56>
 8008976:	2301      	movs	r3, #1
 8008978:	e000      	b.n	800897c <xTaskPriorityInherit+0x58>
 800897a:	2300      	movs	r3, #0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d03a      	beq.n	80089f6 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	3304      	adds	r3, #4
 8008984:	4618      	mov	r0, r3
 8008986:	f7fe f96f 	bl	8006c68 <uxListRemove>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d115      	bne.n	80089bc <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008994:	4924      	ldr	r1, [pc, #144]	; (8008a28 <xTaskPriorityInherit+0x104>)
 8008996:	4613      	mov	r3, r2
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	4413      	add	r3, r2
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	440b      	add	r3, r1
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d10a      	bne.n	80089bc <xTaskPriorityInherit+0x98>
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089aa:	2201      	movs	r2, #1
 80089ac:	fa02 f303 	lsl.w	r3, r2, r3
 80089b0:	43da      	mvns	r2, r3
 80089b2:	4b1e      	ldr	r3, [pc, #120]	; (8008a2c <xTaskPriorityInherit+0x108>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4013      	ands	r3, r2
 80089b8:	4a1c      	ldr	r2, [pc, #112]	; (8008a2c <xTaskPriorityInherit+0x108>)
 80089ba:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80089bc:	4b19      	ldr	r3, [pc, #100]	; (8008a24 <xTaskPriorityInherit+0x100>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ca:	2201      	movs	r2, #1
 80089cc:	409a      	lsls	r2, r3
 80089ce:	4b17      	ldr	r3, [pc, #92]	; (8008a2c <xTaskPriorityInherit+0x108>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	4a15      	ldr	r2, [pc, #84]	; (8008a2c <xTaskPriorityInherit+0x108>)
 80089d6:	6013      	str	r3, [r2, #0]
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089dc:	4613      	mov	r3, r2
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	4413      	add	r3, r2
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	4a10      	ldr	r2, [pc, #64]	; (8008a28 <xTaskPriorityInherit+0x104>)
 80089e6:	441a      	add	r2, r3
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	3304      	adds	r3, #4
 80089ec:	4619      	mov	r1, r3
 80089ee:	4610      	mov	r0, r2
 80089f0:	f7fe f8df 	bl	8006bb2 <vListInsertEnd>
 80089f4:	e004      	b.n	8008a00 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80089f6:	4b0b      	ldr	r3, [pc, #44]	; (8008a24 <xTaskPriorityInherit+0x100>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008a00:	2301      	movs	r3, #1
 8008a02:	60fb      	str	r3, [r7, #12]
 8008a04:	e008      	b.n	8008a18 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a0a:	4b06      	ldr	r3, [pc, #24]	; (8008a24 <xTaskPriorityInherit+0x100>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d201      	bcs.n	8008a18 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008a14:	2301      	movs	r3, #1
 8008a16:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a18:	68fb      	ldr	r3, [r7, #12]
	}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	bf00      	nop
 8008a24:	200000c8 	.word	0x200000c8
 8008a28:	200000cc 	.word	0x200000cc
 8008a2c:	200001d0 	.word	0x200001d0

08008a30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b086      	sub	sp, #24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d06e      	beq.n	8008b24 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008a46:	4b3a      	ldr	r3, [pc, #232]	; (8008b30 <xTaskPriorityDisinherit+0x100>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	693a      	ldr	r2, [r7, #16]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d00a      	beq.n	8008a66 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a54:	f383 8811 	msr	BASEPRI, r3
 8008a58:	f3bf 8f6f 	isb	sy
 8008a5c:	f3bf 8f4f 	dsb	sy
 8008a60:	60fb      	str	r3, [r7, #12]
}
 8008a62:	bf00      	nop
 8008a64:	e7fe      	b.n	8008a64 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d10a      	bne.n	8008a84 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a72:	f383 8811 	msr	BASEPRI, r3
 8008a76:	f3bf 8f6f 	isb	sy
 8008a7a:	f3bf 8f4f 	dsb	sy
 8008a7e:	60bb      	str	r3, [r7, #8]
}
 8008a80:	bf00      	nop
 8008a82:	e7fe      	b.n	8008a82 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a88:	1e5a      	subs	r2, r3, #1
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d044      	beq.n	8008b24 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d140      	bne.n	8008b24 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	3304      	adds	r3, #4
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7fe f8de 	bl	8006c68 <uxListRemove>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d115      	bne.n	8008ade <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ab6:	491f      	ldr	r1, [pc, #124]	; (8008b34 <xTaskPriorityDisinherit+0x104>)
 8008ab8:	4613      	mov	r3, r2
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	4413      	add	r3, r2
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	440b      	add	r3, r1
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d10a      	bne.n	8008ade <xTaskPriorityDisinherit+0xae>
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008acc:	2201      	movs	r2, #1
 8008ace:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad2:	43da      	mvns	r2, r3
 8008ad4:	4b18      	ldr	r3, [pc, #96]	; (8008b38 <xTaskPriorityDisinherit+0x108>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4013      	ands	r3, r2
 8008ada:	4a17      	ldr	r2, [pc, #92]	; (8008b38 <xTaskPriorityDisinherit+0x108>)
 8008adc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aea:	f1c3 0207 	rsb	r2, r3, #7
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af6:	2201      	movs	r2, #1
 8008af8:	409a      	lsls	r2, r3
 8008afa:	4b0f      	ldr	r3, [pc, #60]	; (8008b38 <xTaskPriorityDisinherit+0x108>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	4a0d      	ldr	r2, [pc, #52]	; (8008b38 <xTaskPriorityDisinherit+0x108>)
 8008b02:	6013      	str	r3, [r2, #0]
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b08:	4613      	mov	r3, r2
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	4413      	add	r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	4a08      	ldr	r2, [pc, #32]	; (8008b34 <xTaskPriorityDisinherit+0x104>)
 8008b12:	441a      	add	r2, r3
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	3304      	adds	r3, #4
 8008b18:	4619      	mov	r1, r3
 8008b1a:	4610      	mov	r0, r2
 8008b1c:	f7fe f849 	bl	8006bb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008b20:	2301      	movs	r3, #1
 8008b22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b24:	697b      	ldr	r3, [r7, #20]
	}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3718      	adds	r7, #24
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	200000c8 	.word	0x200000c8
 8008b34:	200000cc 	.word	0x200000cc
 8008b38:	200001d0 	.word	0x200001d0

08008b3c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b088      	sub	sp, #32
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	f000 8088 	beq.w	8008c66 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d10a      	bne.n	8008b74 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b62:	f383 8811 	msr	BASEPRI, r3
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	f3bf 8f4f 	dsb	sy
 8008b6e:	60fb      	str	r3, [r7, #12]
}
 8008b70:	bf00      	nop
 8008b72:	e7fe      	b.n	8008b72 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b78:	683a      	ldr	r2, [r7, #0]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d902      	bls.n	8008b84 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	61fb      	str	r3, [r7, #28]
 8008b82:	e002      	b.n	8008b8a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008b84:	69bb      	ldr	r3, [r7, #24]
 8008b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b88:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8e:	69fa      	ldr	r2, [r7, #28]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d068      	beq.n	8008c66 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b98:	697a      	ldr	r2, [r7, #20]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d163      	bne.n	8008c66 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008b9e:	4b34      	ldr	r3, [pc, #208]	; (8008c70 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	69ba      	ldr	r2, [r7, #24]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d10a      	bne.n	8008bbe <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8008ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bac:	f383 8811 	msr	BASEPRI, r3
 8008bb0:	f3bf 8f6f 	isb	sy
 8008bb4:	f3bf 8f4f 	dsb	sy
 8008bb8:	60bb      	str	r3, [r7, #8]
}
 8008bba:	bf00      	nop
 8008bbc:	e7fe      	b.n	8008bbc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	69fa      	ldr	r2, [r7, #28]
 8008bc8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	699b      	ldr	r3, [r3, #24]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	db04      	blt.n	8008bdc <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	f1c3 0207 	rsb	r2, r3, #7
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	6959      	ldr	r1, [r3, #20]
 8008be0:	693a      	ldr	r2, [r7, #16]
 8008be2:	4613      	mov	r3, r2
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	4413      	add	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4a22      	ldr	r2, [pc, #136]	; (8008c74 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008bec:	4413      	add	r3, r2
 8008bee:	4299      	cmp	r1, r3
 8008bf0:	d101      	bne.n	8008bf6 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e000      	b.n	8008bf8 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d034      	beq.n	8008c66 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	3304      	adds	r3, #4
 8008c00:	4618      	mov	r0, r3
 8008c02:	f7fe f831 	bl	8006c68 <uxListRemove>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d115      	bne.n	8008c38 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008c0c:	69bb      	ldr	r3, [r7, #24]
 8008c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c10:	4918      	ldr	r1, [pc, #96]	; (8008c74 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008c12:	4613      	mov	r3, r2
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	4413      	add	r3, r2
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	440b      	add	r3, r1
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d10a      	bne.n	8008c38 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c26:	2201      	movs	r2, #1
 8008c28:	fa02 f303 	lsl.w	r3, r2, r3
 8008c2c:	43da      	mvns	r2, r3
 8008c2e:	4b12      	ldr	r3, [pc, #72]	; (8008c78 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4013      	ands	r3, r2
 8008c34:	4a10      	ldr	r2, [pc, #64]	; (8008c78 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008c36:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008c38:	69bb      	ldr	r3, [r7, #24]
 8008c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	409a      	lsls	r2, r3
 8008c40:	4b0d      	ldr	r3, [pc, #52]	; (8008c78 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4313      	orrs	r3, r2
 8008c46:	4a0c      	ldr	r2, [pc, #48]	; (8008c78 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008c48:	6013      	str	r3, [r2, #0]
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c4e:	4613      	mov	r3, r2
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	4413      	add	r3, r2
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	4a07      	ldr	r2, [pc, #28]	; (8008c74 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008c58:	441a      	add	r2, r3
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	3304      	adds	r3, #4
 8008c5e:	4619      	mov	r1, r3
 8008c60:	4610      	mov	r0, r2
 8008c62:	f7fd ffa6 	bl	8006bb2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c66:	bf00      	nop
 8008c68:	3720      	adds	r7, #32
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	bf00      	nop
 8008c70:	200000c8 	.word	0x200000c8
 8008c74:	200000cc 	.word	0x200000cc
 8008c78:	200001d0 	.word	0x200001d0

08008c7c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8008c7c:	b480      	push	{r7}
 8008c7e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008c80:	4b07      	ldr	r3, [pc, #28]	; (8008ca0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d004      	beq.n	8008c92 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008c88:	4b05      	ldr	r3, [pc, #20]	; (8008ca0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008c8e:	3201      	adds	r2, #1
 8008c90:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008c92:	4b03      	ldr	r3, [pc, #12]	; (8008ca0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c94:	681b      	ldr	r3, [r3, #0]
	}
 8008c96:	4618      	mov	r0, r3
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bc80      	pop	{r7}
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	200000c8 	.word	0x200000c8

08008ca4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008cae:	4b29      	ldr	r3, [pc, #164]	; (8008d54 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cb4:	4b28      	ldr	r3, [pc, #160]	; (8008d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	3304      	adds	r3, #4
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7fd ffd4 	bl	8006c68 <uxListRemove>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d10b      	bne.n	8008cde <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008cc6:	4b24      	ldr	r3, [pc, #144]	; (8008d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ccc:	2201      	movs	r2, #1
 8008cce:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd2:	43da      	mvns	r2, r3
 8008cd4:	4b21      	ldr	r3, [pc, #132]	; (8008d5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4013      	ands	r3, r2
 8008cda:	4a20      	ldr	r2, [pc, #128]	; (8008d5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008cdc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce4:	d10a      	bne.n	8008cfc <prvAddCurrentTaskToDelayedList+0x58>
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d007      	beq.n	8008cfc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cec:	4b1a      	ldr	r3, [pc, #104]	; (8008d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	3304      	adds	r3, #4
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	481a      	ldr	r0, [pc, #104]	; (8008d60 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008cf6:	f7fd ff5c 	bl	8006bb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008cfa:	e026      	b.n	8008d4a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4413      	add	r3, r2
 8008d02:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d04:	4b14      	ldr	r3, [pc, #80]	; (8008d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	68ba      	ldr	r2, [r7, #8]
 8008d0a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d0c:	68ba      	ldr	r2, [r7, #8]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d209      	bcs.n	8008d28 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d14:	4b13      	ldr	r3, [pc, #76]	; (8008d64 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	4b0f      	ldr	r3, [pc, #60]	; (8008d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	3304      	adds	r3, #4
 8008d1e:	4619      	mov	r1, r3
 8008d20:	4610      	mov	r0, r2
 8008d22:	f7fd ff69 	bl	8006bf8 <vListInsert>
}
 8008d26:	e010      	b.n	8008d4a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d28:	4b0f      	ldr	r3, [pc, #60]	; (8008d68 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	4b0a      	ldr	r3, [pc, #40]	; (8008d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	3304      	adds	r3, #4
 8008d32:	4619      	mov	r1, r3
 8008d34:	4610      	mov	r0, r2
 8008d36:	f7fd ff5f 	bl	8006bf8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d3a:	4b0c      	ldr	r3, [pc, #48]	; (8008d6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68ba      	ldr	r2, [r7, #8]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d202      	bcs.n	8008d4a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008d44:	4a09      	ldr	r2, [pc, #36]	; (8008d6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	6013      	str	r3, [r2, #0]
}
 8008d4a:	bf00      	nop
 8008d4c:	3710      	adds	r7, #16
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	200001cc 	.word	0x200001cc
 8008d58:	200000c8 	.word	0x200000c8
 8008d5c:	200001d0 	.word	0x200001d0
 8008d60:	200001b4 	.word	0x200001b4
 8008d64:	20000184 	.word	0x20000184
 8008d68:	20000180 	.word	0x20000180
 8008d6c:	200001e8 	.word	0x200001e8

08008d70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b08a      	sub	sp, #40	; 0x28
 8008d74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008d76:	2300      	movs	r3, #0
 8008d78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008d7a:	f000 fb41 	bl	8009400 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008d7e:	4b1c      	ldr	r3, [pc, #112]	; (8008df0 <xTimerCreateTimerTask+0x80>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d021      	beq.n	8008dca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008d86:	2300      	movs	r3, #0
 8008d88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008d8e:	1d3a      	adds	r2, r7, #4
 8008d90:	f107 0108 	add.w	r1, r7, #8
 8008d94:	f107 030c 	add.w	r3, r7, #12
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f003 fe01 	bl	800c9a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008d9e:	6879      	ldr	r1, [r7, #4]
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	9202      	str	r2, [sp, #8]
 8008da6:	9301      	str	r3, [sp, #4]
 8008da8:	2302      	movs	r3, #2
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	2300      	movs	r3, #0
 8008dae:	460a      	mov	r2, r1
 8008db0:	4910      	ldr	r1, [pc, #64]	; (8008df4 <xTimerCreateTimerTask+0x84>)
 8008db2:	4811      	ldr	r0, [pc, #68]	; (8008df8 <xTimerCreateTimerTask+0x88>)
 8008db4:	f7fe fed6 	bl	8007b64 <xTaskCreateStatic>
 8008db8:	4603      	mov	r3, r0
 8008dba:	4a10      	ldr	r2, [pc, #64]	; (8008dfc <xTimerCreateTimerTask+0x8c>)
 8008dbc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008dbe:	4b0f      	ldr	r3, [pc, #60]	; (8008dfc <xTimerCreateTimerTask+0x8c>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d001      	beq.n	8008dca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10a      	bne.n	8008de6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd4:	f383 8811 	msr	BASEPRI, r3
 8008dd8:	f3bf 8f6f 	isb	sy
 8008ddc:	f3bf 8f4f 	dsb	sy
 8008de0:	613b      	str	r3, [r7, #16]
}
 8008de2:	bf00      	nop
 8008de4:	e7fe      	b.n	8008de4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008de6:	697b      	ldr	r3, [r7, #20]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3718      	adds	r7, #24
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	2000022c 	.word	0x2000022c
 8008df4:	0800fb34 	.word	0x0800fb34
 8008df8:	0800903d 	.word	0x0800903d
 8008dfc:	20000230 	.word	0x20000230

08008e00 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b088      	sub	sp, #32
 8008e04:	af02      	add	r7, sp, #8
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	607a      	str	r2, [r7, #4]
 8008e0c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8008e0e:	2030      	movs	r0, #48	; 0x30
 8008e10:	f000 fd24 	bl	800985c <pvPortMalloc>
 8008e14:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d00d      	beq.n	8008e38 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	9301      	str	r3, [sp, #4]
 8008e20:	6a3b      	ldr	r3, [r7, #32]
 8008e22:	9300      	str	r3, [sp, #0]
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	68b9      	ldr	r1, [r7, #8]
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	f000 f846 	bl	8008ebc <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	2200      	movs	r2, #0
 8008e34:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8008e38:	697b      	ldr	r3, [r7, #20]
	}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3718      	adds	r7, #24
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b08a      	sub	sp, #40	; 0x28
 8008e46:	af02      	add	r7, sp, #8
 8008e48:	60f8      	str	r0, [r7, #12]
 8008e4a:	60b9      	str	r1, [r7, #8]
 8008e4c:	607a      	str	r2, [r7, #4]
 8008e4e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8008e50:	2330      	movs	r3, #48	; 0x30
 8008e52:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	2b30      	cmp	r3, #48	; 0x30
 8008e58:	d00a      	beq.n	8008e70 <xTimerCreateStatic+0x2e>
	__asm volatile
 8008e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5e:	f383 8811 	msr	BASEPRI, r3
 8008e62:	f3bf 8f6f 	isb	sy
 8008e66:	f3bf 8f4f 	dsb	sy
 8008e6a:	61bb      	str	r3, [r7, #24]
}
 8008e6c:	bf00      	nop
 8008e6e:	e7fe      	b.n	8008e6e <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8008e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d10a      	bne.n	8008e8c <xTimerCreateStatic+0x4a>
	__asm volatile
 8008e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7a:	f383 8811 	msr	BASEPRI, r3
 8008e7e:	f3bf 8f6f 	isb	sy
 8008e82:	f3bf 8f4f 	dsb	sy
 8008e86:	617b      	str	r3, [r7, #20]
}
 8008e88:	bf00      	nop
 8008e8a:	e7fe      	b.n	8008e8a <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e8e:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00d      	beq.n	8008eb2 <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	9301      	str	r3, [sp, #4]
 8008e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9c:	9300      	str	r3, [sp, #0]
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	68b9      	ldr	r1, [r7, #8]
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	f000 f809 	bl	8008ebc <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	2201      	movs	r2, #1
 8008eae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8008eb2:	69fb      	ldr	r3, [r7, #28]
	}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3720      	adds	r7, #32
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b086      	sub	sp, #24
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	60f8      	str	r0, [r7, #12]
 8008ec4:	60b9      	str	r1, [r7, #8]
 8008ec6:	607a      	str	r2, [r7, #4]
 8008ec8:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d10a      	bne.n	8008ee6 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8008ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed4:	f383 8811 	msr	BASEPRI, r3
 8008ed8:	f3bf 8f6f 	isb	sy
 8008edc:	f3bf 8f4f 	dsb	sy
 8008ee0:	617b      	str	r3, [r7, #20]
}
 8008ee2:	bf00      	nop
 8008ee4:	e7fe      	b.n	8008ee4 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8008ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d015      	beq.n	8008f18 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008eec:	f000 fa88 	bl	8009400 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef8:	68ba      	ldr	r2, [r7, #8]
 8008efa:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8008efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8008f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f04:	683a      	ldr	r2, [r7, #0]
 8008f06:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0a:	6a3a      	ldr	r2, [r7, #32]
 8008f0c:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f10:	3304      	adds	r3, #4
 8008f12:	4618      	mov	r0, r3
 8008f14:	f7fd fe41 	bl	8006b9a <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008f18:	bf00      	nop
 8008f1a:	3718      	adds	r7, #24
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b08a      	sub	sp, #40	; 0x28
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	607a      	str	r2, [r7, #4]
 8008f2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d10a      	bne.n	8008f4e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f3c:	f383 8811 	msr	BASEPRI, r3
 8008f40:	f3bf 8f6f 	isb	sy
 8008f44:	f3bf 8f4f 	dsb	sy
 8008f48:	623b      	str	r3, [r7, #32]
}
 8008f4a:	bf00      	nop
 8008f4c:	e7fe      	b.n	8008f4c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008f4e:	4b1a      	ldr	r3, [pc, #104]	; (8008fb8 <xTimerGenericCommand+0x98>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d02a      	beq.n	8008fac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	2b05      	cmp	r3, #5
 8008f66:	dc18      	bgt.n	8008f9a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008f68:	f7ff fcbe 	bl	80088e8 <xTaskGetSchedulerState>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	2b02      	cmp	r3, #2
 8008f70:	d109      	bne.n	8008f86 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008f72:	4b11      	ldr	r3, [pc, #68]	; (8008fb8 <xTimerGenericCommand+0x98>)
 8008f74:	6818      	ldr	r0, [r3, #0]
 8008f76:	f107 0114 	add.w	r1, r7, #20
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f7e:	f7fd ffdd 	bl	8006f3c <xQueueGenericSend>
 8008f82:	6278      	str	r0, [r7, #36]	; 0x24
 8008f84:	e012      	b.n	8008fac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008f86:	4b0c      	ldr	r3, [pc, #48]	; (8008fb8 <xTimerGenericCommand+0x98>)
 8008f88:	6818      	ldr	r0, [r3, #0]
 8008f8a:	f107 0114 	add.w	r1, r7, #20
 8008f8e:	2300      	movs	r3, #0
 8008f90:	2200      	movs	r2, #0
 8008f92:	f7fd ffd3 	bl	8006f3c <xQueueGenericSend>
 8008f96:	6278      	str	r0, [r7, #36]	; 0x24
 8008f98:	e008      	b.n	8008fac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008f9a:	4b07      	ldr	r3, [pc, #28]	; (8008fb8 <xTimerGenericCommand+0x98>)
 8008f9c:	6818      	ldr	r0, [r3, #0]
 8008f9e:	f107 0114 	add.w	r1, r7, #20
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	683a      	ldr	r2, [r7, #0]
 8008fa6:	f7fe f8c7 	bl	8007138 <xQueueGenericSendFromISR>
 8008faa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3728      	adds	r7, #40	; 0x28
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	2000022c 	.word	0x2000022c

08008fbc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b088      	sub	sp, #32
 8008fc0:	af02      	add	r7, sp, #8
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008fc6:	4b1c      	ldr	r3, [pc, #112]	; (8009038 <prvProcessExpiredTimer+0x7c>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	3304      	adds	r3, #4
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7fd fe47 	bl	8006c68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	69db      	ldr	r3, [r3, #28]
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d122      	bne.n	8009028 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	699a      	ldr	r2, [r3, #24]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	18d1      	adds	r1, r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	683a      	ldr	r2, [r7, #0]
 8008fee:	6978      	ldr	r0, [r7, #20]
 8008ff0:	f000 f8c8 	bl	8009184 <prvInsertTimerInActiveList>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d016      	beq.n	8009028 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	9300      	str	r3, [sp, #0]
 8008ffe:	2300      	movs	r3, #0
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	2100      	movs	r1, #0
 8009004:	6978      	ldr	r0, [r7, #20]
 8009006:	f7ff ff8b 	bl	8008f20 <xTimerGenericCommand>
 800900a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d10a      	bne.n	8009028 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8009012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009016:	f383 8811 	msr	BASEPRI, r3
 800901a:	f3bf 8f6f 	isb	sy
 800901e:	f3bf 8f4f 	dsb	sy
 8009022:	60fb      	str	r3, [r7, #12]
}
 8009024:	bf00      	nop
 8009026:	e7fe      	b.n	8009026 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902c:	6978      	ldr	r0, [r7, #20]
 800902e:	4798      	blx	r3
}
 8009030:	bf00      	nop
 8009032:	3718      	adds	r7, #24
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}
 8009038:	20000224 	.word	0x20000224

0800903c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009044:	f107 0308 	add.w	r3, r7, #8
 8009048:	4618      	mov	r0, r3
 800904a:	f000 f857 	bl	80090fc <prvGetNextExpireTime>
 800904e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	4619      	mov	r1, r3
 8009054:	68f8      	ldr	r0, [r7, #12]
 8009056:	f000 f803 	bl	8009060 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800905a:	f000 f8d5 	bl	8009208 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800905e:	e7f1      	b.n	8009044 <prvTimerTask+0x8>

08009060 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800906a:	f7ff f82d 	bl	80080c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800906e:	f107 0308 	add.w	r3, r7, #8
 8009072:	4618      	mov	r0, r3
 8009074:	f000 f866 	bl	8009144 <prvSampleTimeNow>
 8009078:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d130      	bne.n	80090e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d10a      	bne.n	800909c <prvProcessTimerOrBlockTask+0x3c>
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	429a      	cmp	r2, r3
 800908c:	d806      	bhi.n	800909c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800908e:	f7ff f829 	bl	80080e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009092:	68f9      	ldr	r1, [r7, #12]
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f7ff ff91 	bl	8008fbc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800909a:	e024      	b.n	80090e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d008      	beq.n	80090b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80090a2:	4b13      	ldr	r3, [pc, #76]	; (80090f0 <prvProcessTimerOrBlockTask+0x90>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	bf0c      	ite	eq
 80090ac:	2301      	moveq	r3, #1
 80090ae:	2300      	movne	r3, #0
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80090b4:	4b0f      	ldr	r3, [pc, #60]	; (80090f4 <prvProcessTimerOrBlockTask+0x94>)
 80090b6:	6818      	ldr	r0, [r3, #0]
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	1ad3      	subs	r3, r2, r3
 80090be:	683a      	ldr	r2, [r7, #0]
 80090c0:	4619      	mov	r1, r3
 80090c2:	f7fe fd1b 	bl	8007afc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80090c6:	f7ff f80d 	bl	80080e4 <xTaskResumeAll>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d10a      	bne.n	80090e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80090d0:	4b09      	ldr	r3, [pc, #36]	; (80090f8 <prvProcessTimerOrBlockTask+0x98>)
 80090d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090d6:	601a      	str	r2, [r3, #0]
 80090d8:	f3bf 8f4f 	dsb	sy
 80090dc:	f3bf 8f6f 	isb	sy
}
 80090e0:	e001      	b.n	80090e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80090e2:	f7fe ffff 	bl	80080e4 <xTaskResumeAll>
}
 80090e6:	bf00      	nop
 80090e8:	3710      	adds	r7, #16
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	20000228 	.word	0x20000228
 80090f4:	2000022c 	.word	0x2000022c
 80090f8:	e000ed04 	.word	0xe000ed04

080090fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009104:	4b0e      	ldr	r3, [pc, #56]	; (8009140 <prvGetNextExpireTime+0x44>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2b00      	cmp	r3, #0
 800910c:	bf0c      	ite	eq
 800910e:	2301      	moveq	r3, #1
 8009110:	2300      	movne	r3, #0
 8009112:	b2db      	uxtb	r3, r3
 8009114:	461a      	mov	r2, r3
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d105      	bne.n	800912e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009122:	4b07      	ldr	r3, [pc, #28]	; (8009140 <prvGetNextExpireTime+0x44>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	60fb      	str	r3, [r7, #12]
 800912c:	e001      	b.n	8009132 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800912e:	2300      	movs	r3, #0
 8009130:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009132:	68fb      	ldr	r3, [r7, #12]
}
 8009134:	4618      	mov	r0, r3
 8009136:	3714      	adds	r7, #20
 8009138:	46bd      	mov	sp, r7
 800913a:	bc80      	pop	{r7}
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	20000224 	.word	0x20000224

08009144 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800914c:	f7ff f866 	bl	800821c <xTaskGetTickCount>
 8009150:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009152:	4b0b      	ldr	r3, [pc, #44]	; (8009180 <prvSampleTimeNow+0x3c>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68fa      	ldr	r2, [r7, #12]
 8009158:	429a      	cmp	r2, r3
 800915a:	d205      	bcs.n	8009168 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800915c:	f000 f8ee 	bl	800933c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2201      	movs	r2, #1
 8009164:	601a      	str	r2, [r3, #0]
 8009166:	e002      	b.n	800916e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800916e:	4a04      	ldr	r2, [pc, #16]	; (8009180 <prvSampleTimeNow+0x3c>)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009174:	68fb      	ldr	r3, [r7, #12]
}
 8009176:	4618      	mov	r0, r3
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	20000234 	.word	0x20000234

08009184 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b086      	sub	sp, #24
 8009188:	af00      	add	r7, sp, #0
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	607a      	str	r2, [r7, #4]
 8009190:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009192:	2300      	movs	r3, #0
 8009194:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	68ba      	ldr	r2, [r7, #8]
 800919a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	68fa      	ldr	r2, [r7, #12]
 80091a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80091a2:	68ba      	ldr	r2, [r7, #8]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d812      	bhi.n	80091d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	1ad2      	subs	r2, r2, r3
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	699b      	ldr	r3, [r3, #24]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d302      	bcc.n	80091be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80091b8:	2301      	movs	r3, #1
 80091ba:	617b      	str	r3, [r7, #20]
 80091bc:	e01b      	b.n	80091f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80091be:	4b10      	ldr	r3, [pc, #64]	; (8009200 <prvInsertTimerInActiveList+0x7c>)
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	3304      	adds	r3, #4
 80091c6:	4619      	mov	r1, r3
 80091c8:	4610      	mov	r0, r2
 80091ca:	f7fd fd15 	bl	8006bf8 <vListInsert>
 80091ce:	e012      	b.n	80091f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d206      	bcs.n	80091e6 <prvInsertTimerInActiveList+0x62>
 80091d8:	68ba      	ldr	r2, [r7, #8]
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d302      	bcc.n	80091e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80091e0:	2301      	movs	r3, #1
 80091e2:	617b      	str	r3, [r7, #20]
 80091e4:	e007      	b.n	80091f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80091e6:	4b07      	ldr	r3, [pc, #28]	; (8009204 <prvInsertTimerInActiveList+0x80>)
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	3304      	adds	r3, #4
 80091ee:	4619      	mov	r1, r3
 80091f0:	4610      	mov	r0, r2
 80091f2:	f7fd fd01 	bl	8006bf8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80091f6:	697b      	ldr	r3, [r7, #20]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3718      	adds	r7, #24
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	20000228 	.word	0x20000228
 8009204:	20000224 	.word	0x20000224

08009208 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b08c      	sub	sp, #48	; 0x30
 800920c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800920e:	e081      	b.n	8009314 <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	2b00      	cmp	r3, #0
 8009214:	db7d      	blt.n	8009312 <prvProcessReceivedCommands+0x10a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800921a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921c:	695b      	ldr	r3, [r3, #20]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d004      	beq.n	800922c <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009224:	3304      	adds	r3, #4
 8009226:	4618      	mov	r0, r3
 8009228:	f7fd fd1e 	bl	8006c68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800922c:	1d3b      	adds	r3, r7, #4
 800922e:	4618      	mov	r0, r3
 8009230:	f7ff ff88 	bl	8009144 <prvSampleTimeNow>
 8009234:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	2b09      	cmp	r3, #9
 800923a:	d86b      	bhi.n	8009314 <prvProcessReceivedCommands+0x10c>
 800923c:	a201      	add	r2, pc, #4	; (adr r2, 8009244 <prvProcessReceivedCommands+0x3c>)
 800923e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009242:	bf00      	nop
 8009244:	0800926d 	.word	0x0800926d
 8009248:	0800926d 	.word	0x0800926d
 800924c:	0800926d 	.word	0x0800926d
 8009250:	08009315 	.word	0x08009315
 8009254:	080092c9 	.word	0x080092c9
 8009258:	08009301 	.word	0x08009301
 800925c:	0800926d 	.word	0x0800926d
 8009260:	0800926d 	.word	0x0800926d
 8009264:	08009315 	.word	0x08009315
 8009268:	080092c9 	.word	0x080092c9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009270:	699b      	ldr	r3, [r3, #24]
 8009272:	18d1      	adds	r1, r2, r3
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6a3a      	ldr	r2, [r7, #32]
 8009278:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800927a:	f7ff ff83 	bl	8009184 <prvInsertTimerInActiveList>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d047      	beq.n	8009314 <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009288:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800928a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800928c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928e:	69db      	ldr	r3, [r3, #28]
 8009290:	2b01      	cmp	r3, #1
 8009292:	d13f      	bne.n	8009314 <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009294:	68fa      	ldr	r2, [r7, #12]
 8009296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009298:	699b      	ldr	r3, [r3, #24]
 800929a:	441a      	add	r2, r3
 800929c:	2300      	movs	r3, #0
 800929e:	9300      	str	r3, [sp, #0]
 80092a0:	2300      	movs	r3, #0
 80092a2:	2100      	movs	r1, #0
 80092a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092a6:	f7ff fe3b 	bl	8008f20 <xTimerGenericCommand>
 80092aa:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d130      	bne.n	8009314 <prvProcessReceivedCommands+0x10c>
	__asm volatile
 80092b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b6:	f383 8811 	msr	BASEPRI, r3
 80092ba:	f3bf 8f6f 	isb	sy
 80092be:	f3bf 8f4f 	dsb	sy
 80092c2:	61bb      	str	r3, [r7, #24]
}
 80092c4:	bf00      	nop
 80092c6:	e7fe      	b.n	80092c6 <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80092c8:	68fa      	ldr	r2, [r7, #12]
 80092ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092cc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80092ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d0:	699b      	ldr	r3, [r3, #24]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d10a      	bne.n	80092ec <prvProcessReceivedCommands+0xe4>
	__asm volatile
 80092d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092da:	f383 8811 	msr	BASEPRI, r3
 80092de:	f3bf 8f6f 	isb	sy
 80092e2:	f3bf 8f4f 	dsb	sy
 80092e6:	617b      	str	r3, [r7, #20]
}
 80092e8:	bf00      	nop
 80092ea:	e7fe      	b.n	80092ea <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80092ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ee:	699a      	ldr	r2, [r3, #24]
 80092f0:	6a3b      	ldr	r3, [r7, #32]
 80092f2:	18d1      	adds	r1, r2, r3
 80092f4:	6a3b      	ldr	r3, [r7, #32]
 80092f6:	6a3a      	ldr	r2, [r7, #32]
 80092f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092fa:	f7ff ff43 	bl	8009184 <prvInsertTimerInActiveList>
					break;
 80092fe:	e009      	b.n	8009314 <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009302:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009306:	2b00      	cmp	r3, #0
 8009308:	d104      	bne.n	8009314 <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 800930a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800930c:	f000 fb6a 	bl	80099e4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009310:	e000      	b.n	8009314 <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009312:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009314:	4b08      	ldr	r3, [pc, #32]	; (8009338 <prvProcessReceivedCommands+0x130>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f107 0108 	add.w	r1, r7, #8
 800931c:	2200      	movs	r2, #0
 800931e:	4618      	mov	r0, r3
 8009320:	f7fe f830 	bl	8007384 <xQueueReceive>
 8009324:	4603      	mov	r3, r0
 8009326:	2b00      	cmp	r3, #0
 8009328:	f47f af72 	bne.w	8009210 <prvProcessReceivedCommands+0x8>
	}
}
 800932c:	bf00      	nop
 800932e:	bf00      	nop
 8009330:	3728      	adds	r7, #40	; 0x28
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	2000022c 	.word	0x2000022c

0800933c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b088      	sub	sp, #32
 8009340:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009342:	e045      	b.n	80093d0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009344:	4b2c      	ldr	r3, [pc, #176]	; (80093f8 <prvSwitchTimerLists+0xbc>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800934e:	4b2a      	ldr	r3, [pc, #168]	; (80093f8 <prvSwitchTimerLists+0xbc>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	3304      	adds	r3, #4
 800935c:	4618      	mov	r0, r3
 800935e:	f7fd fc83 	bl	8006c68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	69db      	ldr	r3, [r3, #28]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d12e      	bne.n	80093d0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	699b      	ldr	r3, [r3, #24]
 8009376:	693a      	ldr	r2, [r7, #16]
 8009378:	4413      	add	r3, r2
 800937a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800937c:	68ba      	ldr	r2, [r7, #8]
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	429a      	cmp	r2, r3
 8009382:	d90e      	bls.n	80093a2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	68ba      	ldr	r2, [r7, #8]
 8009388:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	68fa      	ldr	r2, [r7, #12]
 800938e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009390:	4b19      	ldr	r3, [pc, #100]	; (80093f8 <prvSwitchTimerLists+0xbc>)
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	3304      	adds	r3, #4
 8009398:	4619      	mov	r1, r3
 800939a:	4610      	mov	r0, r2
 800939c:	f7fd fc2c 	bl	8006bf8 <vListInsert>
 80093a0:	e016      	b.n	80093d0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093a2:	2300      	movs	r3, #0
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	2300      	movs	r3, #0
 80093a8:	693a      	ldr	r2, [r7, #16]
 80093aa:	2100      	movs	r1, #0
 80093ac:	68f8      	ldr	r0, [r7, #12]
 80093ae:	f7ff fdb7 	bl	8008f20 <xTimerGenericCommand>
 80093b2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d10a      	bne.n	80093d0 <prvSwitchTimerLists+0x94>
	__asm volatile
 80093ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	603b      	str	r3, [r7, #0]
}
 80093cc:	bf00      	nop
 80093ce:	e7fe      	b.n	80093ce <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80093d0:	4b09      	ldr	r3, [pc, #36]	; (80093f8 <prvSwitchTimerLists+0xbc>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d1b4      	bne.n	8009344 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80093da:	4b07      	ldr	r3, [pc, #28]	; (80093f8 <prvSwitchTimerLists+0xbc>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80093e0:	4b06      	ldr	r3, [pc, #24]	; (80093fc <prvSwitchTimerLists+0xc0>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a04      	ldr	r2, [pc, #16]	; (80093f8 <prvSwitchTimerLists+0xbc>)
 80093e6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80093e8:	4a04      	ldr	r2, [pc, #16]	; (80093fc <prvSwitchTimerLists+0xc0>)
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	6013      	str	r3, [r2, #0]
}
 80093ee:	bf00      	nop
 80093f0:	3718      	adds	r7, #24
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop
 80093f8:	20000224 	.word	0x20000224
 80093fc:	20000228 	.word	0x20000228

08009400 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009406:	f000 f929 	bl	800965c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800940a:	4b15      	ldr	r3, [pc, #84]	; (8009460 <prvCheckForValidListAndQueue+0x60>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d120      	bne.n	8009454 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009412:	4814      	ldr	r0, [pc, #80]	; (8009464 <prvCheckForValidListAndQueue+0x64>)
 8009414:	f7fd fba2 	bl	8006b5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009418:	4813      	ldr	r0, [pc, #76]	; (8009468 <prvCheckForValidListAndQueue+0x68>)
 800941a:	f7fd fb9f 	bl	8006b5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800941e:	4b13      	ldr	r3, [pc, #76]	; (800946c <prvCheckForValidListAndQueue+0x6c>)
 8009420:	4a10      	ldr	r2, [pc, #64]	; (8009464 <prvCheckForValidListAndQueue+0x64>)
 8009422:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009424:	4b12      	ldr	r3, [pc, #72]	; (8009470 <prvCheckForValidListAndQueue+0x70>)
 8009426:	4a10      	ldr	r2, [pc, #64]	; (8009468 <prvCheckForValidListAndQueue+0x68>)
 8009428:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800942a:	2300      	movs	r3, #0
 800942c:	9300      	str	r3, [sp, #0]
 800942e:	4b11      	ldr	r3, [pc, #68]	; (8009474 <prvCheckForValidListAndQueue+0x74>)
 8009430:	4a11      	ldr	r2, [pc, #68]	; (8009478 <prvCheckForValidListAndQueue+0x78>)
 8009432:	210c      	movs	r1, #12
 8009434:	200a      	movs	r0, #10
 8009436:	f7fd fca9 	bl	8006d8c <xQueueGenericCreateStatic>
 800943a:	4603      	mov	r3, r0
 800943c:	4a08      	ldr	r2, [pc, #32]	; (8009460 <prvCheckForValidListAndQueue+0x60>)
 800943e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009440:	4b07      	ldr	r3, [pc, #28]	; (8009460 <prvCheckForValidListAndQueue+0x60>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d005      	beq.n	8009454 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009448:	4b05      	ldr	r3, [pc, #20]	; (8009460 <prvCheckForValidListAndQueue+0x60>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	490b      	ldr	r1, [pc, #44]	; (800947c <prvCheckForValidListAndQueue+0x7c>)
 800944e:	4618      	mov	r0, r3
 8009450:	f7fe fb2c 	bl	8007aac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009454:	f000 f932 	bl	80096bc <vPortExitCritical>
}
 8009458:	bf00      	nop
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	2000022c 	.word	0x2000022c
 8009464:	200001fc 	.word	0x200001fc
 8009468:	20000210 	.word	0x20000210
 800946c:	20000224 	.word	0x20000224
 8009470:	20000228 	.word	0x20000228
 8009474:	200002b0 	.word	0x200002b0
 8009478:	20000238 	.word	0x20000238
 800947c:	0800fb3c 	.word	0x0800fb3c

08009480 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009480:	b480      	push	{r7}
 8009482:	b085      	sub	sp, #20
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	3b04      	subs	r3, #4
 8009490:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009498:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	3b04      	subs	r3, #4
 800949e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	f023 0201 	bic.w	r2, r3, #1
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	3b04      	subs	r3, #4
 80094ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80094b0:	4a08      	ldr	r2, [pc, #32]	; (80094d4 <pxPortInitialiseStack+0x54>)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	3b14      	subs	r3, #20
 80094ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	3b20      	subs	r3, #32
 80094c6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80094c8:	68fb      	ldr	r3, [r7, #12]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3714      	adds	r7, #20
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bc80      	pop	{r7}
 80094d2:	4770      	bx	lr
 80094d4:	080094d9 	.word	0x080094d9

080094d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80094d8:	b480      	push	{r7}
 80094da:	b085      	sub	sp, #20
 80094dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80094de:	2300      	movs	r3, #0
 80094e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80094e2:	4b12      	ldr	r3, [pc, #72]	; (800952c <prvTaskExitError+0x54>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ea:	d00a      	beq.n	8009502 <prvTaskExitError+0x2a>
	__asm volatile
 80094ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f0:	f383 8811 	msr	BASEPRI, r3
 80094f4:	f3bf 8f6f 	isb	sy
 80094f8:	f3bf 8f4f 	dsb	sy
 80094fc:	60fb      	str	r3, [r7, #12]
}
 80094fe:	bf00      	nop
 8009500:	e7fe      	b.n	8009500 <prvTaskExitError+0x28>
	__asm volatile
 8009502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009506:	f383 8811 	msr	BASEPRI, r3
 800950a:	f3bf 8f6f 	isb	sy
 800950e:	f3bf 8f4f 	dsb	sy
 8009512:	60bb      	str	r3, [r7, #8]
}
 8009514:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009516:	bf00      	nop
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d0fc      	beq.n	8009518 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800951e:	bf00      	nop
 8009520:	bf00      	nop
 8009522:	3714      	adds	r7, #20
 8009524:	46bd      	mov	sp, r7
 8009526:	bc80      	pop	{r7}
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop
 800952c:	20000008 	.word	0x20000008

08009530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009530:	4b07      	ldr	r3, [pc, #28]	; (8009550 <pxCurrentTCBConst2>)
 8009532:	6819      	ldr	r1, [r3, #0]
 8009534:	6808      	ldr	r0, [r1, #0]
 8009536:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800953a:	f380 8809 	msr	PSP, r0
 800953e:	f3bf 8f6f 	isb	sy
 8009542:	f04f 0000 	mov.w	r0, #0
 8009546:	f380 8811 	msr	BASEPRI, r0
 800954a:	f04e 0e0d 	orr.w	lr, lr, #13
 800954e:	4770      	bx	lr

08009550 <pxCurrentTCBConst2>:
 8009550:	200000c8 	.word	0x200000c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009554:	bf00      	nop
 8009556:	bf00      	nop

08009558 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009558:	4806      	ldr	r0, [pc, #24]	; (8009574 <prvPortStartFirstTask+0x1c>)
 800955a:	6800      	ldr	r0, [r0, #0]
 800955c:	6800      	ldr	r0, [r0, #0]
 800955e:	f380 8808 	msr	MSP, r0
 8009562:	b662      	cpsie	i
 8009564:	b661      	cpsie	f
 8009566:	f3bf 8f4f 	dsb	sy
 800956a:	f3bf 8f6f 	isb	sy
 800956e:	df00      	svc	0
 8009570:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009572:	bf00      	nop
 8009574:	e000ed08 	.word	0xe000ed08

08009578 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800957e:	4b32      	ldr	r3, [pc, #200]	; (8009648 <xPortStartScheduler+0xd0>)
 8009580:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	b2db      	uxtb	r3, r3
 8009588:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	22ff      	movs	r2, #255	; 0xff
 800958e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	b2db      	uxtb	r3, r3
 8009596:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009598:	78fb      	ldrb	r3, [r7, #3]
 800959a:	b2db      	uxtb	r3, r3
 800959c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80095a0:	b2da      	uxtb	r2, r3
 80095a2:	4b2a      	ldr	r3, [pc, #168]	; (800964c <xPortStartScheduler+0xd4>)
 80095a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80095a6:	4b2a      	ldr	r3, [pc, #168]	; (8009650 <xPortStartScheduler+0xd8>)
 80095a8:	2207      	movs	r2, #7
 80095aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095ac:	e009      	b.n	80095c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80095ae:	4b28      	ldr	r3, [pc, #160]	; (8009650 <xPortStartScheduler+0xd8>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	3b01      	subs	r3, #1
 80095b4:	4a26      	ldr	r2, [pc, #152]	; (8009650 <xPortStartScheduler+0xd8>)
 80095b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80095b8:	78fb      	ldrb	r3, [r7, #3]
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	005b      	lsls	r3, r3, #1
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095c2:	78fb      	ldrb	r3, [r7, #3]
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095ca:	2b80      	cmp	r3, #128	; 0x80
 80095cc:	d0ef      	beq.n	80095ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80095ce:	4b20      	ldr	r3, [pc, #128]	; (8009650 <xPortStartScheduler+0xd8>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f1c3 0307 	rsb	r3, r3, #7
 80095d6:	2b04      	cmp	r3, #4
 80095d8:	d00a      	beq.n	80095f0 <xPortStartScheduler+0x78>
	__asm volatile
 80095da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095de:	f383 8811 	msr	BASEPRI, r3
 80095e2:	f3bf 8f6f 	isb	sy
 80095e6:	f3bf 8f4f 	dsb	sy
 80095ea:	60bb      	str	r3, [r7, #8]
}
 80095ec:	bf00      	nop
 80095ee:	e7fe      	b.n	80095ee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80095f0:	4b17      	ldr	r3, [pc, #92]	; (8009650 <xPortStartScheduler+0xd8>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	021b      	lsls	r3, r3, #8
 80095f6:	4a16      	ldr	r2, [pc, #88]	; (8009650 <xPortStartScheduler+0xd8>)
 80095f8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80095fa:	4b15      	ldr	r3, [pc, #84]	; (8009650 <xPortStartScheduler+0xd8>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009602:	4a13      	ldr	r2, [pc, #76]	; (8009650 <xPortStartScheduler+0xd8>)
 8009604:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	b2da      	uxtb	r2, r3
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800960e:	4b11      	ldr	r3, [pc, #68]	; (8009654 <xPortStartScheduler+0xdc>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a10      	ldr	r2, [pc, #64]	; (8009654 <xPortStartScheduler+0xdc>)
 8009614:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009618:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800961a:	4b0e      	ldr	r3, [pc, #56]	; (8009654 <xPortStartScheduler+0xdc>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a0d      	ldr	r2, [pc, #52]	; (8009654 <xPortStartScheduler+0xdc>)
 8009620:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009624:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009626:	f000 f8b9 	bl	800979c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800962a:	4b0b      	ldr	r3, [pc, #44]	; (8009658 <xPortStartScheduler+0xe0>)
 800962c:	2200      	movs	r2, #0
 800962e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009630:	f7ff ff92 	bl	8009558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009634:	f7fe fed0 	bl	80083d8 <vTaskSwitchContext>
	prvTaskExitError();
 8009638:	f7ff ff4e 	bl	80094d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800963c:	2300      	movs	r3, #0
}
 800963e:	4618      	mov	r0, r3
 8009640:	3710      	adds	r7, #16
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	e000e400 	.word	0xe000e400
 800964c:	20000300 	.word	0x20000300
 8009650:	20000304 	.word	0x20000304
 8009654:	e000ed20 	.word	0xe000ed20
 8009658:	20000008 	.word	0x20000008

0800965c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
	__asm volatile
 8009662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009666:	f383 8811 	msr	BASEPRI, r3
 800966a:	f3bf 8f6f 	isb	sy
 800966e:	f3bf 8f4f 	dsb	sy
 8009672:	607b      	str	r3, [r7, #4]
}
 8009674:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009676:	4b0f      	ldr	r3, [pc, #60]	; (80096b4 <vPortEnterCritical+0x58>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	3301      	adds	r3, #1
 800967c:	4a0d      	ldr	r2, [pc, #52]	; (80096b4 <vPortEnterCritical+0x58>)
 800967e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009680:	4b0c      	ldr	r3, [pc, #48]	; (80096b4 <vPortEnterCritical+0x58>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2b01      	cmp	r3, #1
 8009686:	d10f      	bne.n	80096a8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009688:	4b0b      	ldr	r3, [pc, #44]	; (80096b8 <vPortEnterCritical+0x5c>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	b2db      	uxtb	r3, r3
 800968e:	2b00      	cmp	r3, #0
 8009690:	d00a      	beq.n	80096a8 <vPortEnterCritical+0x4c>
	__asm volatile
 8009692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009696:	f383 8811 	msr	BASEPRI, r3
 800969a:	f3bf 8f6f 	isb	sy
 800969e:	f3bf 8f4f 	dsb	sy
 80096a2:	603b      	str	r3, [r7, #0]
}
 80096a4:	bf00      	nop
 80096a6:	e7fe      	b.n	80096a6 <vPortEnterCritical+0x4a>
	}
}
 80096a8:	bf00      	nop
 80096aa:	370c      	adds	r7, #12
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bc80      	pop	{r7}
 80096b0:	4770      	bx	lr
 80096b2:	bf00      	nop
 80096b4:	20000008 	.word	0x20000008
 80096b8:	e000ed04 	.word	0xe000ed04

080096bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80096c2:	4b11      	ldr	r3, [pc, #68]	; (8009708 <vPortExitCritical+0x4c>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d10a      	bne.n	80096e0 <vPortExitCritical+0x24>
	__asm volatile
 80096ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ce:	f383 8811 	msr	BASEPRI, r3
 80096d2:	f3bf 8f6f 	isb	sy
 80096d6:	f3bf 8f4f 	dsb	sy
 80096da:	607b      	str	r3, [r7, #4]
}
 80096dc:	bf00      	nop
 80096de:	e7fe      	b.n	80096de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80096e0:	4b09      	ldr	r3, [pc, #36]	; (8009708 <vPortExitCritical+0x4c>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	3b01      	subs	r3, #1
 80096e6:	4a08      	ldr	r2, [pc, #32]	; (8009708 <vPortExitCritical+0x4c>)
 80096e8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80096ea:	4b07      	ldr	r3, [pc, #28]	; (8009708 <vPortExitCritical+0x4c>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d105      	bne.n	80096fe <vPortExitCritical+0x42>
 80096f2:	2300      	movs	r3, #0
 80096f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	f383 8811 	msr	BASEPRI, r3
}
 80096fc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80096fe:	bf00      	nop
 8009700:	370c      	adds	r7, #12
 8009702:	46bd      	mov	sp, r7
 8009704:	bc80      	pop	{r7}
 8009706:	4770      	bx	lr
 8009708:	20000008 	.word	0x20000008
 800970c:	00000000 	.word	0x00000000

08009710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009710:	f3ef 8009 	mrs	r0, PSP
 8009714:	f3bf 8f6f 	isb	sy
 8009718:	4b0d      	ldr	r3, [pc, #52]	; (8009750 <pxCurrentTCBConst>)
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009720:	6010      	str	r0, [r2, #0]
 8009722:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009726:	f04f 0050 	mov.w	r0, #80	; 0x50
 800972a:	f380 8811 	msr	BASEPRI, r0
 800972e:	f7fe fe53 	bl	80083d8 <vTaskSwitchContext>
 8009732:	f04f 0000 	mov.w	r0, #0
 8009736:	f380 8811 	msr	BASEPRI, r0
 800973a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800973e:	6819      	ldr	r1, [r3, #0]
 8009740:	6808      	ldr	r0, [r1, #0]
 8009742:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009746:	f380 8809 	msr	PSP, r0
 800974a:	f3bf 8f6f 	isb	sy
 800974e:	4770      	bx	lr

08009750 <pxCurrentTCBConst>:
 8009750:	200000c8 	.word	0x200000c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009754:	bf00      	nop
 8009756:	bf00      	nop

08009758 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
	__asm volatile
 800975e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009762:	f383 8811 	msr	BASEPRI, r3
 8009766:	f3bf 8f6f 	isb	sy
 800976a:	f3bf 8f4f 	dsb	sy
 800976e:	607b      	str	r3, [r7, #4]
}
 8009770:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009772:	f7fe fd73 	bl	800825c <xTaskIncrementTick>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d003      	beq.n	8009784 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800977c:	4b06      	ldr	r3, [pc, #24]	; (8009798 <SysTick_Handler+0x40>)
 800977e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009782:	601a      	str	r2, [r3, #0]
 8009784:	2300      	movs	r3, #0
 8009786:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	f383 8811 	msr	BASEPRI, r3
}
 800978e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009790:	bf00      	nop
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}
 8009798:	e000ed04 	.word	0xe000ed04

0800979c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800979c:	b480      	push	{r7}
 800979e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80097a0:	4b0a      	ldr	r3, [pc, #40]	; (80097cc <vPortSetupTimerInterrupt+0x30>)
 80097a2:	2200      	movs	r2, #0
 80097a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80097a6:	4b0a      	ldr	r3, [pc, #40]	; (80097d0 <vPortSetupTimerInterrupt+0x34>)
 80097a8:	2200      	movs	r2, #0
 80097aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80097ac:	4b09      	ldr	r3, [pc, #36]	; (80097d4 <vPortSetupTimerInterrupt+0x38>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a09      	ldr	r2, [pc, #36]	; (80097d8 <vPortSetupTimerInterrupt+0x3c>)
 80097b2:	fba2 2303 	umull	r2, r3, r2, r3
 80097b6:	099b      	lsrs	r3, r3, #6
 80097b8:	4a08      	ldr	r2, [pc, #32]	; (80097dc <vPortSetupTimerInterrupt+0x40>)
 80097ba:	3b01      	subs	r3, #1
 80097bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80097be:	4b03      	ldr	r3, [pc, #12]	; (80097cc <vPortSetupTimerInterrupt+0x30>)
 80097c0:	2207      	movs	r2, #7
 80097c2:	601a      	str	r2, [r3, #0]
}
 80097c4:	bf00      	nop
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bc80      	pop	{r7}
 80097ca:	4770      	bx	lr
 80097cc:	e000e010 	.word	0xe000e010
 80097d0:	e000e018 	.word	0xe000e018
 80097d4:	2000003c 	.word	0x2000003c
 80097d8:	10624dd3 	.word	0x10624dd3
 80097dc:	e000e014 	.word	0xe000e014

080097e0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80097e0:	b480      	push	{r7}
 80097e2:	b085      	sub	sp, #20
 80097e4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80097e6:	f3ef 8305 	mrs	r3, IPSR
 80097ea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2b0f      	cmp	r3, #15
 80097f0:	d914      	bls.n	800981c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80097f2:	4a16      	ldr	r2, [pc, #88]	; (800984c <vPortValidateInterruptPriority+0x6c>)
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	4413      	add	r3, r2
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80097fc:	4b14      	ldr	r3, [pc, #80]	; (8009850 <vPortValidateInterruptPriority+0x70>)
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	7afa      	ldrb	r2, [r7, #11]
 8009802:	429a      	cmp	r2, r3
 8009804:	d20a      	bcs.n	800981c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980a:	f383 8811 	msr	BASEPRI, r3
 800980e:	f3bf 8f6f 	isb	sy
 8009812:	f3bf 8f4f 	dsb	sy
 8009816:	607b      	str	r3, [r7, #4]
}
 8009818:	bf00      	nop
 800981a:	e7fe      	b.n	800981a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800981c:	4b0d      	ldr	r3, [pc, #52]	; (8009854 <vPortValidateInterruptPriority+0x74>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009824:	4b0c      	ldr	r3, [pc, #48]	; (8009858 <vPortValidateInterruptPriority+0x78>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	429a      	cmp	r2, r3
 800982a:	d90a      	bls.n	8009842 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800982c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009830:	f383 8811 	msr	BASEPRI, r3
 8009834:	f3bf 8f6f 	isb	sy
 8009838:	f3bf 8f4f 	dsb	sy
 800983c:	603b      	str	r3, [r7, #0]
}
 800983e:	bf00      	nop
 8009840:	e7fe      	b.n	8009840 <vPortValidateInterruptPriority+0x60>
	}
 8009842:	bf00      	nop
 8009844:	3714      	adds	r7, #20
 8009846:	46bd      	mov	sp, r7
 8009848:	bc80      	pop	{r7}
 800984a:	4770      	bx	lr
 800984c:	e000e3f0 	.word	0xe000e3f0
 8009850:	20000300 	.word	0x20000300
 8009854:	e000ed0c 	.word	0xe000ed0c
 8009858:	20000304 	.word	0x20000304

0800985c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b08a      	sub	sp, #40	; 0x28
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009864:	2300      	movs	r3, #0
 8009866:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009868:	f7fe fc2e 	bl	80080c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800986c:	4b58      	ldr	r3, [pc, #352]	; (80099d0 <pvPortMalloc+0x174>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d101      	bne.n	8009878 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009874:	f000 f910 	bl	8009a98 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009878:	4b56      	ldr	r3, [pc, #344]	; (80099d4 <pvPortMalloc+0x178>)
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	4013      	ands	r3, r2
 8009880:	2b00      	cmp	r3, #0
 8009882:	f040 808e 	bne.w	80099a2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d01d      	beq.n	80098c8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800988c:	2208      	movs	r2, #8
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	4413      	add	r3, r2
 8009892:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f003 0307 	and.w	r3, r3, #7
 800989a:	2b00      	cmp	r3, #0
 800989c:	d014      	beq.n	80098c8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f023 0307 	bic.w	r3, r3, #7
 80098a4:	3308      	adds	r3, #8
 80098a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f003 0307 	and.w	r3, r3, #7
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d00a      	beq.n	80098c8 <pvPortMalloc+0x6c>
	__asm volatile
 80098b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b6:	f383 8811 	msr	BASEPRI, r3
 80098ba:	f3bf 8f6f 	isb	sy
 80098be:	f3bf 8f4f 	dsb	sy
 80098c2:	617b      	str	r3, [r7, #20]
}
 80098c4:	bf00      	nop
 80098c6:	e7fe      	b.n	80098c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d069      	beq.n	80099a2 <pvPortMalloc+0x146>
 80098ce:	4b42      	ldr	r3, [pc, #264]	; (80099d8 <pvPortMalloc+0x17c>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d864      	bhi.n	80099a2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80098d8:	4b40      	ldr	r3, [pc, #256]	; (80099dc <pvPortMalloc+0x180>)
 80098da:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80098dc:	4b3f      	ldr	r3, [pc, #252]	; (80099dc <pvPortMalloc+0x180>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80098e2:	e004      	b.n	80098ee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80098e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80098e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80098ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d903      	bls.n	8009900 <pvPortMalloc+0xa4>
 80098f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d1f1      	bne.n	80098e4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009900:	4b33      	ldr	r3, [pc, #204]	; (80099d0 <pvPortMalloc+0x174>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009906:	429a      	cmp	r2, r3
 8009908:	d04b      	beq.n	80099a2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800990a:	6a3b      	ldr	r3, [r7, #32]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2208      	movs	r2, #8
 8009910:	4413      	add	r3, r2
 8009912:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	6a3b      	ldr	r3, [r7, #32]
 800991a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800991c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991e:	685a      	ldr	r2, [r3, #4]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	1ad2      	subs	r2, r2, r3
 8009924:	2308      	movs	r3, #8
 8009926:	005b      	lsls	r3, r3, #1
 8009928:	429a      	cmp	r2, r3
 800992a:	d91f      	bls.n	800996c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800992c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	4413      	add	r3, r2
 8009932:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	f003 0307 	and.w	r3, r3, #7
 800993a:	2b00      	cmp	r3, #0
 800993c:	d00a      	beq.n	8009954 <pvPortMalloc+0xf8>
	__asm volatile
 800993e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009942:	f383 8811 	msr	BASEPRI, r3
 8009946:	f3bf 8f6f 	isb	sy
 800994a:	f3bf 8f4f 	dsb	sy
 800994e:	613b      	str	r3, [r7, #16]
}
 8009950:	bf00      	nop
 8009952:	e7fe      	b.n	8009952 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009956:	685a      	ldr	r2, [r3, #4]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	1ad2      	subs	r2, r2, r3
 800995c:	69bb      	ldr	r3, [r7, #24]
 800995e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009966:	69b8      	ldr	r0, [r7, #24]
 8009968:	f000 f8f8 	bl	8009b5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800996c:	4b1a      	ldr	r3, [pc, #104]	; (80099d8 <pvPortMalloc+0x17c>)
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	1ad3      	subs	r3, r2, r3
 8009976:	4a18      	ldr	r2, [pc, #96]	; (80099d8 <pvPortMalloc+0x17c>)
 8009978:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800997a:	4b17      	ldr	r3, [pc, #92]	; (80099d8 <pvPortMalloc+0x17c>)
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	4b18      	ldr	r3, [pc, #96]	; (80099e0 <pvPortMalloc+0x184>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	429a      	cmp	r2, r3
 8009984:	d203      	bcs.n	800998e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009986:	4b14      	ldr	r3, [pc, #80]	; (80099d8 <pvPortMalloc+0x17c>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a15      	ldr	r2, [pc, #84]	; (80099e0 <pvPortMalloc+0x184>)
 800998c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800998e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009990:	685a      	ldr	r2, [r3, #4]
 8009992:	4b10      	ldr	r3, [pc, #64]	; (80099d4 <pvPortMalloc+0x178>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	431a      	orrs	r2, r3
 8009998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800999c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999e:	2200      	movs	r2, #0
 80099a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80099a2:	f7fe fb9f 	bl	80080e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80099a6:	69fb      	ldr	r3, [r7, #28]
 80099a8:	f003 0307 	and.w	r3, r3, #7
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d00a      	beq.n	80099c6 <pvPortMalloc+0x16a>
	__asm volatile
 80099b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b4:	f383 8811 	msr	BASEPRI, r3
 80099b8:	f3bf 8f6f 	isb	sy
 80099bc:	f3bf 8f4f 	dsb	sy
 80099c0:	60fb      	str	r3, [r7, #12]
}
 80099c2:	bf00      	nop
 80099c4:	e7fe      	b.n	80099c4 <pvPortMalloc+0x168>
	return pvReturn;
 80099c6:	69fb      	ldr	r3, [r7, #28]
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3728      	adds	r7, #40	; 0x28
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	20002310 	.word	0x20002310
 80099d4:	2000231c 	.word	0x2000231c
 80099d8:	20002314 	.word	0x20002314
 80099dc:	20002308 	.word	0x20002308
 80099e0:	20002318 	.word	0x20002318

080099e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b086      	sub	sp, #24
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d048      	beq.n	8009a88 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80099f6:	2308      	movs	r3, #8
 80099f8:	425b      	negs	r3, r3
 80099fa:	697a      	ldr	r2, [r7, #20]
 80099fc:	4413      	add	r3, r2
 80099fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	685a      	ldr	r2, [r3, #4]
 8009a08:	4b21      	ldr	r3, [pc, #132]	; (8009a90 <vPortFree+0xac>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4013      	ands	r3, r2
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d10a      	bne.n	8009a28 <vPortFree+0x44>
	__asm volatile
 8009a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a16:	f383 8811 	msr	BASEPRI, r3
 8009a1a:	f3bf 8f6f 	isb	sy
 8009a1e:	f3bf 8f4f 	dsb	sy
 8009a22:	60fb      	str	r3, [r7, #12]
}
 8009a24:	bf00      	nop
 8009a26:	e7fe      	b.n	8009a26 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d00a      	beq.n	8009a46 <vPortFree+0x62>
	__asm volatile
 8009a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a34:	f383 8811 	msr	BASEPRI, r3
 8009a38:	f3bf 8f6f 	isb	sy
 8009a3c:	f3bf 8f4f 	dsb	sy
 8009a40:	60bb      	str	r3, [r7, #8]
}
 8009a42:	bf00      	nop
 8009a44:	e7fe      	b.n	8009a44 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	685a      	ldr	r2, [r3, #4]
 8009a4a:	4b11      	ldr	r3, [pc, #68]	; (8009a90 <vPortFree+0xac>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4013      	ands	r3, r2
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d019      	beq.n	8009a88 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d115      	bne.n	8009a88 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	685a      	ldr	r2, [r3, #4]
 8009a60:	4b0b      	ldr	r3, [pc, #44]	; (8009a90 <vPortFree+0xac>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	43db      	mvns	r3, r3
 8009a66:	401a      	ands	r2, r3
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009a6c:	f7fe fb2c 	bl	80080c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	685a      	ldr	r2, [r3, #4]
 8009a74:	4b07      	ldr	r3, [pc, #28]	; (8009a94 <vPortFree+0xb0>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4413      	add	r3, r2
 8009a7a:	4a06      	ldr	r2, [pc, #24]	; (8009a94 <vPortFree+0xb0>)
 8009a7c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009a7e:	6938      	ldr	r0, [r7, #16]
 8009a80:	f000 f86c 	bl	8009b5c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009a84:	f7fe fb2e 	bl	80080e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009a88:	bf00      	nop
 8009a8a:	3718      	adds	r7, #24
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}
 8009a90:	2000231c 	.word	0x2000231c
 8009a94:	20002314 	.word	0x20002314

08009a98 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b085      	sub	sp, #20
 8009a9c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009a9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009aa2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009aa4:	4b27      	ldr	r3, [pc, #156]	; (8009b44 <prvHeapInit+0xac>)
 8009aa6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f003 0307 	and.w	r3, r3, #7
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d00c      	beq.n	8009acc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	3307      	adds	r3, #7
 8009ab6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f023 0307 	bic.w	r3, r3, #7
 8009abe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009ac0:	68ba      	ldr	r2, [r7, #8]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	1ad3      	subs	r3, r2, r3
 8009ac6:	4a1f      	ldr	r2, [pc, #124]	; (8009b44 <prvHeapInit+0xac>)
 8009ac8:	4413      	add	r3, r2
 8009aca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009ad0:	4a1d      	ldr	r2, [pc, #116]	; (8009b48 <prvHeapInit+0xb0>)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ad6:	4b1c      	ldr	r3, [pc, #112]	; (8009b48 <prvHeapInit+0xb0>)
 8009ad8:	2200      	movs	r2, #0
 8009ada:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	68ba      	ldr	r2, [r7, #8]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ae4:	2208      	movs	r2, #8
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	1a9b      	subs	r3, r3, r2
 8009aea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f023 0307 	bic.w	r3, r3, #7
 8009af2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	4a15      	ldr	r2, [pc, #84]	; (8009b4c <prvHeapInit+0xb4>)
 8009af8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009afa:	4b14      	ldr	r3, [pc, #80]	; (8009b4c <prvHeapInit+0xb4>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2200      	movs	r2, #0
 8009b00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009b02:	4b12      	ldr	r3, [pc, #72]	; (8009b4c <prvHeapInit+0xb4>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2200      	movs	r2, #0
 8009b08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	68fa      	ldr	r2, [r7, #12]
 8009b12:	1ad2      	subs	r2, r2, r3
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009b18:	4b0c      	ldr	r3, [pc, #48]	; (8009b4c <prvHeapInit+0xb4>)
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	4a0a      	ldr	r2, [pc, #40]	; (8009b50 <prvHeapInit+0xb8>)
 8009b26:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	4a09      	ldr	r2, [pc, #36]	; (8009b54 <prvHeapInit+0xbc>)
 8009b2e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009b30:	4b09      	ldr	r3, [pc, #36]	; (8009b58 <prvHeapInit+0xc0>)
 8009b32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009b36:	601a      	str	r2, [r3, #0]
}
 8009b38:	bf00      	nop
 8009b3a:	3714      	adds	r7, #20
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bc80      	pop	{r7}
 8009b40:	4770      	bx	lr
 8009b42:	bf00      	nop
 8009b44:	20000308 	.word	0x20000308
 8009b48:	20002308 	.word	0x20002308
 8009b4c:	20002310 	.word	0x20002310
 8009b50:	20002318 	.word	0x20002318
 8009b54:	20002314 	.word	0x20002314
 8009b58:	2000231c 	.word	0x2000231c

08009b5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009b64:	4b27      	ldr	r3, [pc, #156]	; (8009c04 <prvInsertBlockIntoFreeList+0xa8>)
 8009b66:	60fb      	str	r3, [r7, #12]
 8009b68:	e002      	b.n	8009b70 <prvInsertBlockIntoFreeList+0x14>
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	60fb      	str	r3, [r7, #12]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d8f7      	bhi.n	8009b6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	68ba      	ldr	r2, [r7, #8]
 8009b84:	4413      	add	r3, r2
 8009b86:	687a      	ldr	r2, [r7, #4]
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d108      	bne.n	8009b9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	685a      	ldr	r2, [r3, #4]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	441a      	add	r2, r3
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	68ba      	ldr	r2, [r7, #8]
 8009ba8:	441a      	add	r2, r3
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d118      	bne.n	8009be4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	4b14      	ldr	r3, [pc, #80]	; (8009c08 <prvInsertBlockIntoFreeList+0xac>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d00d      	beq.n	8009bda <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	685a      	ldr	r2, [r3, #4]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	441a      	add	r2, r3
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	601a      	str	r2, [r3, #0]
 8009bd8:	e008      	b.n	8009bec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009bda:	4b0b      	ldr	r3, [pc, #44]	; (8009c08 <prvInsertBlockIntoFreeList+0xac>)
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	601a      	str	r2, [r3, #0]
 8009be2:	e003      	b.n	8009bec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d002      	beq.n	8009bfa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	687a      	ldr	r2, [r7, #4]
 8009bf8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009bfa:	bf00      	nop
 8009bfc:	3714      	adds	r7, #20
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bc80      	pop	{r7}
 8009c02:	4770      	bx	lr
 8009c04:	20002308 	.word	0x20002308
 8009c08:	20002310 	.word	0x20002310

08009c0c <DebugManager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Steppermanager */
void DebugManager(void const * argument)
{
 8009c0c:	b5b0      	push	{r4, r5, r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]

	State TempAlgoState;

	for(;;)
	{
		osDelay(5000);
 8009c14:	f241 3088 	movw	r0, #5000	; 0x1388
 8009c18:	f7fc fe4f 	bl	80068ba <osDelay>
		HAL_RTC_GetTime(&hrtc,&sTime,0);
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	4973      	ldr	r1, [pc, #460]	; (8009dec <DebugManager+0x1e0>)
 8009c20:	4873      	ldr	r0, [pc, #460]	; (8009df0 <DebugManager+0x1e4>)
 8009c22:	f7fb fd75 	bl	8005710 <HAL_RTC_GetTime>
		printf("#");
 8009c26:	2023      	movs	r0, #35	; 0x23
 8009c28:	f004 f82e 	bl	800dc88 <putchar>
		printf("%02i:%02i:%02i ",sTime.Hours,sTime.Minutes,sTime.Seconds);
 8009c2c:	4b6f      	ldr	r3, [pc, #444]	; (8009dec <DebugManager+0x1e0>)
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	4619      	mov	r1, r3
 8009c32:	4b6e      	ldr	r3, [pc, #440]	; (8009dec <DebugManager+0x1e0>)
 8009c34:	785b      	ldrb	r3, [r3, #1]
 8009c36:	461a      	mov	r2, r3
 8009c38:	4b6c      	ldr	r3, [pc, #432]	; (8009dec <DebugManager+0x1e0>)
 8009c3a:	789b      	ldrb	r3, [r3, #2]
 8009c3c:	486d      	ldr	r0, [pc, #436]	; (8009df4 <DebugManager+0x1e8>)
 8009c3e:	f004 f80b 	bl	800dc58 <iprintf>
		printf("Tavant:%iF TArriere:%iF Plenum:%iF ",Algo_getBaffleTemp()/10,Algo_getRearTemp()/10,Algo_getPlenumTemp()/10);
 8009c42:	f002 fcf7 	bl	800c634 <Algo_getBaffleTemp>
 8009c46:	4603      	mov	r3, r0
 8009c48:	4a6b      	ldr	r2, [pc, #428]	; (8009df8 <DebugManager+0x1ec>)
 8009c4a:	fb82 1203 	smull	r1, r2, r2, r3
 8009c4e:	1092      	asrs	r2, r2, #2
 8009c50:	17db      	asrs	r3, r3, #31
 8009c52:	1ad4      	subs	r4, r2, r3
 8009c54:	f002 fce4 	bl	800c620 <Algo_getRearTemp>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	4a67      	ldr	r2, [pc, #412]	; (8009df8 <DebugManager+0x1ec>)
 8009c5c:	fb82 1203 	smull	r1, r2, r2, r3
 8009c60:	1092      	asrs	r2, r2, #2
 8009c62:	17db      	asrs	r3, r3, #31
 8009c64:	1ad5      	subs	r5, r2, r3
 8009c66:	f002 fcfd 	bl	800c664 <Algo_getPlenumTemp>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	4a62      	ldr	r2, [pc, #392]	; (8009df8 <DebugManager+0x1ec>)
 8009c6e:	fb82 1203 	smull	r1, r2, r2, r3
 8009c72:	1092      	asrs	r2, r2, #2
 8009c74:	17db      	asrs	r3, r3, #31
 8009c76:	1ad3      	subs	r3, r2, r3
 8009c78:	462a      	mov	r2, r5
 8009c7a:	4621      	mov	r1, r4
 8009c7c:	485f      	ldr	r0, [pc, #380]	; (8009dfc <DebugManager+0x1f0>)
 8009c7e:	f003 ffeb 	bl	800dc58 <iprintf>
		printf("State:");
 8009c82:	485f      	ldr	r0, [pc, #380]	; (8009e00 <DebugManager+0x1f4>)
 8009c84:	f003 ffe8 	bl	800dc58 <iprintf>

		TempAlgoState = Algo_getState();
 8009c88:	f002 fc9e 	bl	800c5c8 <Algo_getState>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	73fb      	strb	r3, [r7, #15]
		switch (TempAlgoState) {
 8009c90:	7bfb      	ldrb	r3, [r7, #15]
 8009c92:	2b0c      	cmp	r3, #12
 8009c94:	d850      	bhi.n	8009d38 <DebugManager+0x12c>
 8009c96:	a201      	add	r2, pc, #4	; (adr r2, 8009c9c <DebugManager+0x90>)
 8009c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c9c:	08009cd1 	.word	0x08009cd1
 8009ca0:	08009cd9 	.word	0x08009cd9
 8009ca4:	08009d01 	.word	0x08009d01
 8009ca8:	08009ce1 	.word	0x08009ce1
 8009cac:	08009ce9 	.word	0x08009ce9
 8009cb0:	08009cf1 	.word	0x08009cf1
 8009cb4:	08009cf9 	.word	0x08009cf9
 8009cb8:	08009d19 	.word	0x08009d19
 8009cbc:	08009d09 	.word	0x08009d09
 8009cc0:	08009d11 	.word	0x08009d11
 8009cc4:	08009d21 	.word	0x08009d21
 8009cc8:	08009d29 	.word	0x08009d29
 8009ccc:	08009d31 	.word	0x08009d31
			case ZEROING_STEPPER:
				printf("ZEROING_STEP");
 8009cd0:	484c      	ldr	r0, [pc, #304]	; (8009e04 <DebugManager+0x1f8>)
 8009cd2:	f003 ffc1 	bl	800dc58 <iprintf>
				break;
 8009cd6:	e033      	b.n	8009d40 <DebugManager+0x134>
			case WAITING:
				printf("WAITING");
 8009cd8:	484b      	ldr	r0, [pc, #300]	; (8009e08 <DebugManager+0x1fc>)
 8009cda:	f003 ffbd 	bl	800dc58 <iprintf>
				break;
 8009cde:	e02f      	b.n	8009d40 <DebugManager+0x134>
			case TEMPERATURE_RISE:
				printf("TEMP_RISE");
 8009ce0:	484a      	ldr	r0, [pc, #296]	; (8009e0c <DebugManager+0x200>)
 8009ce2:	f003 ffb9 	bl	800dc58 <iprintf>
				break;
 8009ce6:	e02b      	b.n	8009d40 <DebugManager+0x134>
			case COMBUSTION_LOW:
				printf("COMB_LOW");
 8009ce8:	4849      	ldr	r0, [pc, #292]	; (8009e10 <DebugManager+0x204>)
 8009cea:	f003 ffb5 	bl	800dc58 <iprintf>
				break;
 8009cee:	e027      	b.n	8009d40 <DebugManager+0x134>
			case COMBUSTION_LOW2:
				printf("COMB_LOW2");
 8009cf0:	4848      	ldr	r0, [pc, #288]	; (8009e14 <DebugManager+0x208>)
 8009cf2:	f003 ffb1 	bl	800dc58 <iprintf>
				break;
 8009cf6:	e023      	b.n	8009d40 <DebugManager+0x134>
			case COMBUSTION_HIGH:
				printf("COMB_HIGH");
 8009cf8:	4847      	ldr	r0, [pc, #284]	; (8009e18 <DebugManager+0x20c>)
 8009cfa:	f003 ffad 	bl	800dc58 <iprintf>
				break;
 8009cfe:	e01f      	b.n	8009d40 <DebugManager+0x134>
			case RELOAD_IGNITION:
				printf("RELOAD_IGNI");
 8009d00:	4846      	ldr	r0, [pc, #280]	; (8009e1c <DebugManager+0x210>)
 8009d02:	f003 ffa9 	bl	800dc58 <iprintf>
				break;
 8009d06:	e01b      	b.n	8009d40 <DebugManager+0x134>
			case FLAME_LOSS:
				printf("FLAME_LOSS");
 8009d08:	4845      	ldr	r0, [pc, #276]	; (8009e20 <DebugManager+0x214>)
 8009d0a:	f003 ffa5 	bl	800dc58 <iprintf>
				break;
 8009d0e:	e017      	b.n	8009d40 <DebugManager+0x134>
			case COAL_HIGH:
				printf("COAL_HIGH");
 8009d10:	4844      	ldr	r0, [pc, #272]	; (8009e24 <DebugManager+0x218>)
 8009d12:	f003 ffa1 	bl	800dc58 <iprintf>
				break;
 8009d16:	e013      	b.n	8009d40 <DebugManager+0x134>
			case COAL_LOW:
				printf("COAL_LOW");
 8009d18:	4843      	ldr	r0, [pc, #268]	; (8009e28 <DebugManager+0x21c>)
 8009d1a:	f003 ff9d 	bl	800dc58 <iprintf>
				break;
 8009d1e:	e00f      	b.n	8009d40 <DebugManager+0x134>
			case OVERTEMP:
				printf("OVERTEMP");
 8009d20:	4842      	ldr	r0, [pc, #264]	; (8009e2c <DebugManager+0x220>)
 8009d22:	f003 ff99 	bl	800dc58 <iprintf>
				break;
 8009d26:	e00b      	b.n	8009d40 <DebugManager+0x134>
			case SAFETY:
				printf("SAFETY");
 8009d28:	4841      	ldr	r0, [pc, #260]	; (8009e30 <DebugManager+0x224>)
 8009d2a:	f003 ff95 	bl	800dc58 <iprintf>
				break;
 8009d2e:	e007      	b.n	8009d40 <DebugManager+0x134>
			case PRODUCTION_TEST:
				printf("PRODTEST");
 8009d30:	4840      	ldr	r0, [pc, #256]	; (8009e34 <DebugManager+0x228>)
 8009d32:	f003 ff91 	bl	800dc58 <iprintf>
				break;
 8009d36:	e003      	b.n	8009d40 <DebugManager+0x134>
			default:
				printf("UNKNOWN");
 8009d38:	483f      	ldr	r0, [pc, #252]	; (8009e38 <DebugManager+0x22c>)
 8009d3a:	f003 ff8d 	bl	800dc58 <iprintf>
				break;
 8009d3e:	bf00      	nop
		}
		printf(" tStat:");
 8009d40:	483e      	ldr	r0, [pc, #248]	; (8009e3c <DebugManager+0x230>)
 8009d42:	f003 ff89 	bl	800dc58 <iprintf>
		if (Algo_getThermostatRequest())
 8009d46:	f002 fcbb 	bl	800c6c0 <Algo_getThermostatRequest>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d003      	beq.n	8009d58 <DebugManager+0x14c>
		{
			printf("ON ");
 8009d50:	483b      	ldr	r0, [pc, #236]	; (8009e40 <DebugManager+0x234>)
 8009d52:	f003 ff81 	bl	800dc58 <iprintf>
 8009d56:	e002      	b.n	8009d5e <DebugManager+0x152>
		}
		else
		{
			printf("OFF ");
 8009d58:	483a      	ldr	r0, [pc, #232]	; (8009e44 <DebugManager+0x238>)
 8009d5a:	f003 ff7d 	bl	800dc58 <iprintf>
		}
		printf("dTav:%i",(int)Algo_getBaffleTempSlope());
 8009d5e:	f002 fbf1 	bl	800c544 <Algo_getBaffleTempSlope>
 8009d62:	4603      	mov	r3, r0
 8009d64:	4618      	mov	r0, r3
 8009d66:	f7f7 f9f3 	bl	8001150 <__aeabi_f2iz>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	4836      	ldr	r0, [pc, #216]	; (8009e48 <DebugManager+0x23c>)
 8009d70:	f003 ff72 	bl	800dc58 <iprintf>
		printf(" FanSpeed:%i ",Mot_getFanSpeed());
 8009d74:	f000 fcbe 	bl	800a6f4 <Mot_getFanSpeed>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	4833      	ldr	r0, [pc, #204]	; (8009e4c <DebugManager+0x240>)
 8009d7e:	f003 ff6b 	bl	800dc58 <iprintf>
		printf("Grille:%i ",	Algo_getGrill()*9/10);
 8009d82:	f002 fc83 	bl	800c68c <Algo_getGrill>
 8009d86:	4602      	mov	r2, r0
 8009d88:	4613      	mov	r3, r2
 8009d8a:	00db      	lsls	r3, r3, #3
 8009d8c:	4413      	add	r3, r2
 8009d8e:	4a1a      	ldr	r2, [pc, #104]	; (8009df8 <DebugManager+0x1ec>)
 8009d90:	fb82 1203 	smull	r1, r2, r2, r3
 8009d94:	1092      	asrs	r2, r2, #2
 8009d96:	17db      	asrs	r3, r3, #31
 8009d98:	1ad3      	subs	r3, r2, r3
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	482c      	ldr	r0, [pc, #176]	; (8009e50 <DebugManager+0x244>)
 8009d9e:	f003 ff5b 	bl	800dc58 <iprintf>
		printf("PIDPos:%i ",PIDTrapPosition*9/10);
 8009da2:	4b2c      	ldr	r3, [pc, #176]	; (8009e54 <DebugManager+0x248>)
 8009da4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009da8:	461a      	mov	r2, r3
 8009daa:	4613      	mov	r3, r2
 8009dac:	00db      	lsls	r3, r3, #3
 8009dae:	4413      	add	r3, r2
 8009db0:	4a11      	ldr	r2, [pc, #68]	; (8009df8 <DebugManager+0x1ec>)
 8009db2:	fb82 1203 	smull	r1, r2, r2, r3
 8009db6:	1092      	asrs	r2, r2, #2
 8009db8:	17db      	asrs	r3, r3, #31
 8009dba:	1ad3      	subs	r3, r2, r3
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	4826      	ldr	r0, [pc, #152]	; (8009e58 <DebugManager+0x24c>)
 8009dc0:	f003 ff4a 	bl	800dc58 <iprintf>
		printf("PrimSec:%i",Algo_getPrimary()*9/10);
 8009dc4:	f002 fc58 	bl	800c678 <Algo_getPrimary>
 8009dc8:	4602      	mov	r2, r0
 8009dca:	4613      	mov	r3, r2
 8009dcc:	00db      	lsls	r3, r3, #3
 8009dce:	4413      	add	r3, r2
 8009dd0:	4a09      	ldr	r2, [pc, #36]	; (8009df8 <DebugManager+0x1ec>)
 8009dd2:	fb82 1203 	smull	r1, r2, r2, r3
 8009dd6:	1092      	asrs	r2, r2, #2
 8009dd8:	17db      	asrs	r3, r3, #31
 8009dda:	1ad3      	subs	r3, r2, r3
 8009ddc:	4619      	mov	r1, r3
 8009dde:	481f      	ldr	r0, [pc, #124]	; (8009e5c <DebugManager+0x250>)
 8009de0:	f003 ff3a 	bl	800dc58 <iprintf>
		printf("*\n\r");
 8009de4:	481e      	ldr	r0, [pc, #120]	; (8009e60 <DebugManager+0x254>)
 8009de6:	f003 ff37 	bl	800dc58 <iprintf>
		osDelay(5000);
 8009dea:	e713      	b.n	8009c14 <DebugManager+0x8>
 8009dec:	20003158 	.word	0x20003158
 8009df0:	200031ec 	.word	0x200031ec
 8009df4:	0800fb44 	.word	0x0800fb44
 8009df8:	66666667 	.word	0x66666667
 8009dfc:	0800fb54 	.word	0x0800fb54
 8009e00:	0800fb78 	.word	0x0800fb78
 8009e04:	0800fb80 	.word	0x0800fb80
 8009e08:	0800fb90 	.word	0x0800fb90
 8009e0c:	0800fb98 	.word	0x0800fb98
 8009e10:	0800fba4 	.word	0x0800fba4
 8009e14:	0800fbb0 	.word	0x0800fbb0
 8009e18:	0800fbbc 	.word	0x0800fbbc
 8009e1c:	0800fbc8 	.word	0x0800fbc8
 8009e20:	0800fbd4 	.word	0x0800fbd4
 8009e24:	0800fbe0 	.word	0x0800fbe0
 8009e28:	0800fbec 	.word	0x0800fbec
 8009e2c:	0800fbf8 	.word	0x0800fbf8
 8009e30:	0800fc04 	.word	0x0800fc04
 8009e34:	0800fc0c 	.word	0x0800fc0c
 8009e38:	0800fc18 	.word	0x0800fc18
 8009e3c:	0800fc20 	.word	0x0800fc20
 8009e40:	0800fc28 	.word	0x0800fc28
 8009e44:	0800fc2c 	.word	0x0800fc2c
 8009e48:	0800fc34 	.word	0x0800fc34
 8009e4c:	0800fc3c 	.word	0x0800fc3c
 8009e50:	0800fc4c 	.word	0x0800fc4c
 8009e54:	20002850 	.word	0x20002850
 8009e58:	0800fc58 	.word	0x0800fc58
 8009e5c:	0800fc64 	.word	0x0800fc64
 8009e60:	0800fc70 	.word	0x0800fc70

08009e64 <__io_putchar>:
//}
#ifdef __cplusplus
 extern "C" {
#endif

int __io_putchar(int ch) {
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b082      	sub	sp, #8
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8009e6c:	1d39      	adds	r1, r7, #4
 8009e6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009e72:	2201      	movs	r2, #1
 8009e74:	4803      	ldr	r0, [pc, #12]	; (8009e84 <__io_putchar+0x20>)
 8009e76:	f7fc fad8 	bl	800642a <HAL_UART_Transmit>
  return ch;
 8009e7a:	687b      	ldr	r3, [r7, #4]
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3708      	adds	r7, #8
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	2000306c 	.word	0x2000306c

08009e88 <readModel>:

}

/* Public function ----------------------------------------------------------*/
FurnaceModel readModel()
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
	FurnaceModel model = 0;  //default to Heatmax
 8009e8e:	2300      	movs	r3, #0
 8009e90:	71fb      	strb	r3, [r7, #7]

	if(GPIO_PIN_SET == HAL_GPIO_ReadPin(Model_bit2_GPIO_Port,Model_bit2_Pin))
 8009e92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009e96:	4811      	ldr	r0, [pc, #68]	; (8009edc <readModel+0x54>)
 8009e98:	f7f8 fdf8 	bl	8002a8c <HAL_GPIO_ReadPin>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d101      	bne.n	8009ea6 <readModel+0x1e>
	{
		model = 1;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	71fb      	strb	r3, [r7, #7]
	}
	if(GPIO_PIN_SET == HAL_GPIO_ReadPin(Model_bit1_GPIO_Port,Model_bit1_Pin))
 8009ea6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009eaa:	480c      	ldr	r0, [pc, #48]	; (8009edc <readModel+0x54>)
 8009eac:	f7f8 fdee 	bl	8002a8c <HAL_GPIO_ReadPin>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d102      	bne.n	8009ebc <readModel+0x34>
	{
		model +=2 ;
 8009eb6:	79fb      	ldrb	r3, [r7, #7]
 8009eb8:	3302      	adds	r3, #2
 8009eba:	71fb      	strb	r3, [r7, #7]
	}
	if(GPIO_PIN_SET == HAL_GPIO_ReadPin(Model_bit0_GPIO_Port,Model_bit0_Pin))
 8009ebc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009ec0:	4806      	ldr	r0, [pc, #24]	; (8009edc <readModel+0x54>)
 8009ec2:	f7f8 fde3 	bl	8002a8c <HAL_GPIO_ReadPin>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d102      	bne.n	8009ed2 <readModel+0x4a>
	{
		model +=4;
 8009ecc:	79fb      	ldrb	r3, [r7, #7]
 8009ece:	3304      	adds	r3, #4
 8009ed0:	71fb      	strb	r3, [r7, #7]
	}

	return model;
 8009ed2:	79fb      	ldrb	r3, [r7, #7]
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	40010800 	.word	0x40010800

08009ee0 <HmiManager>:

void HmiManager()
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b084      	sub	sp, #16
 8009ee4:	af00      	add	r7, sp, #0
	static uint32_t LastButtonPressedTime_ms = 0;
	static uint32_t LastButttonToggle_ms =0;
	uint32_t LastButttonToggleTemp_ms =0;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	60fb      	str	r3, [r7, #12]
    bool interlockActive;

	for(;;)
	{

		osDelay(50);
 8009eea:	2032      	movs	r0, #50	; 0x32
 8009eec:	f7fc fce5 	bl	80068ba <osDelay>
		State algostate = Algo_getState();
 8009ef0:	f002 fb6a 	bl	800c5c8 <Algo_getState>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	72fb      	strb	r3, [r7, #11]
		uint32_t kerneltime = osKernelSysTick();
 8009ef8:	f7fc fc83 	bl	8006802 <osKernelSysTick>
 8009efc:	6078      	str	r0, [r7, #4]

		tStatDemand = (HAL_GPIO_ReadPin(Thermostat_input_GPIO_Port,Thermostat_input_Pin) == GPIO_PIN_RESET);
 8009efe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009f02:	48a2      	ldr	r0, [pc, #648]	; (800a18c <HmiManager+0x2ac>)
 8009f04:	f7f8 fdc2 	bl	8002a8c <HAL_GPIO_ReadPin>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	bf0c      	ite	eq
 8009f0e:	2301      	moveq	r3, #1
 8009f10:	2300      	movne	r3, #0
 8009f12:	70fb      	strb	r3, [r7, #3]
		interlockActive = (HAL_GPIO_ReadPin(Interlock_input_GPIO_Port,Interlock_input_Pin) == GPIO_PIN_RESET);
 8009f14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009f18:	489c      	ldr	r0, [pc, #624]	; (800a18c <HmiManager+0x2ac>)
 8009f1a:	f7f8 fdb7 	bl	8002a8c <HAL_GPIO_ReadPin>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	bf0c      	ite	eq
 8009f24:	2301      	moveq	r3, #1
 8009f26:	2300      	movne	r3, #0
 8009f28:	70bb      	strb	r3, [r7, #2]

		Algo_setThermostatRequest(tStatDemand);
 8009f2a:	78fb      	ldrb	r3, [r7, #3]
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f002 fbb7 	bl	800c6a0 <Algo_setThermostatRequest>
		Algo_setInterlockRequest(interlockActive);
 8009f32:	78bb      	ldrb	r3, [r7, #2]
 8009f34:	4618      	mov	r0, r3
 8009f36:	f002 fbcd 	bl	800c6d4 <Algo_setInterlockRequest>

		if(algostate !=PRODUCTION_TEST)
 8009f3a:	7afb      	ldrb	r3, [r7, #11]
 8009f3c:	2b0c      	cmp	r3, #12
 8009f3e:	f000 8085 	beq.w	800a04c <HmiManager+0x16c>
			//{
			//	HAL_GPIO_TogglePin(Button_LED_GPIO_Port, Button_LED_Pin);
			//}
			//else
			//{
				if( (tStatDemand || Algo_getInterlockRequest()) && (Algo_getState() !=SAFETY && Algo_getState() != OVERTEMP && !ButtonBlinkingrequired) )
 8009f42:	78fb      	ldrb	r3, [r7, #3]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d104      	bne.n	8009f52 <HmiManager+0x72>
 8009f48:	f002 fbd4 	bl	800c6f4 <Algo_getInterlockRequest>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d027      	beq.n	8009fa2 <HmiManager+0xc2>
 8009f52:	f002 fb39 	bl	800c5c8 <Algo_getState>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b0b      	cmp	r3, #11
 8009f5a:	d022      	beq.n	8009fa2 <HmiManager+0xc2>
 8009f5c:	f002 fb34 	bl	800c5c8 <Algo_getState>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b0a      	cmp	r3, #10
 8009f64:	d01d      	beq.n	8009fa2 <HmiManager+0xc2>
 8009f66:	4b8a      	ldr	r3, [pc, #552]	; (800a190 <HmiManager+0x2b0>)
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	f083 0301 	eor.w	r3, r3, #1
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d016      	beq.n	8009fa2 <HmiManager+0xc2>
				{
					if(Algo_getInterlockRequest() || Algo_getRearTemp() < 4000) //if rear temp below 400F, furnace is too cold and reignition is needded
 8009f74:	f002 fbbe 	bl	800c6f4 <Algo_getInterlockRequest>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d105      	bne.n	8009f8a <HmiManager+0xaa>
 8009f7e:	f002 fb4f 	bl	800c620 <Algo_getRearTemp>
 8009f82:	4603      	mov	r3, r0
 8009f84:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8009f88:	da05      	bge.n	8009f96 <HmiManager+0xb6>
					{
						SetButtonLed_OFF();
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	2101      	movs	r1, #1
 8009f8e:	487f      	ldr	r0, [pc, #508]	; (800a18c <HmiManager+0x2ac>)
 8009f90:	f7f8 fd93 	bl	8002aba <HAL_GPIO_WritePin>
					if(Algo_getInterlockRequest() || Algo_getRearTemp() < 4000) //if rear temp below 400F, furnace is too cold and reignition is needded
 8009f94:	e10f      	b.n	800a1b6 <HmiManager+0x2d6>
					}
					else
					{
						SetButtonLed_ON();
 8009f96:	2201      	movs	r2, #1
 8009f98:	2101      	movs	r1, #1
 8009f9a:	487c      	ldr	r0, [pc, #496]	; (800a18c <HmiManager+0x2ac>)
 8009f9c:	f7f8 fd8d 	bl	8002aba <HAL_GPIO_WritePin>
					if(Algo_getInterlockRequest() || Algo_getRearTemp() < 4000) //if rear temp below 400F, furnace is too cold and reignition is needded
 8009fa0:	e109      	b.n	800a1b6 <HmiManager+0x2d6>
					}
				}
				else if(Algo_getBaffleTemp()>4000 || Algo_getState() ==SAFETY || Algo_getState() ==OVERTEMP || ButtonBlinkingrequired)
 8009fa2:	f002 fb47 	bl	800c634 <Algo_getBaffleTemp>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8009fac:	dc0d      	bgt.n	8009fca <HmiManager+0xea>
 8009fae:	f002 fb0b 	bl	800c5c8 <Algo_getState>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b0b      	cmp	r3, #11
 8009fb6:	d008      	beq.n	8009fca <HmiManager+0xea>
 8009fb8:	f002 fb06 	bl	800c5c8 <Algo_getState>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	2b0a      	cmp	r3, #10
 8009fc0:	d003      	beq.n	8009fca <HmiManager+0xea>
 8009fc2:	4b73      	ldr	r3, [pc, #460]	; (800a190 <HmiManager+0x2b0>)
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d03a      	beq.n	800a040 <HmiManager+0x160>
				{
					if(Algo_getState() ==SAFETY || Algo_getState() ==OVERTEMP)
 8009fca:	f002 fafd 	bl	800c5c8 <Algo_getState>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	2b0b      	cmp	r3, #11
 8009fd2:	d004      	beq.n	8009fde <HmiManager+0xfe>
 8009fd4:	f002 faf8 	bl	800c5c8 <Algo_getState>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2b0a      	cmp	r3, #10
 8009fdc:	d104      	bne.n	8009fe8 <HmiManager+0x108>
					{
						LastButttonToggleTemp_ms = LastButttonToggle_ms+100;
 8009fde:	4b6d      	ldr	r3, [pc, #436]	; (800a194 <HmiManager+0x2b4>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	3364      	adds	r3, #100	; 0x64
 8009fe4:	60fb      	str	r3, [r7, #12]
 8009fe6:	e00d      	b.n	800a004 <HmiManager+0x124>
					}
					else if (ButtonBlinkingrequired)
 8009fe8:	4b69      	ldr	r3, [pc, #420]	; (800a190 <HmiManager+0x2b0>)
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d004      	beq.n	8009ffa <HmiManager+0x11a>
					{
						LastButttonToggleTemp_ms = LastButttonToggle_ms+50;
 8009ff0:	4b68      	ldr	r3, [pc, #416]	; (800a194 <HmiManager+0x2b4>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	3332      	adds	r3, #50	; 0x32
 8009ff6:	60fb      	str	r3, [r7, #12]
 8009ff8:	e004      	b.n	800a004 <HmiManager+0x124>
					}
					else
					{
						LastButttonToggleTemp_ms = LastButttonToggle_ms+1500;
 8009ffa:	4b66      	ldr	r3, [pc, #408]	; (800a194 <HmiManager+0x2b4>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 800a002:	60fb      	str	r3, [r7, #12]
					}
					if((LastButttonToggleTemp_ms) < kerneltime) //1Hz
 800a004:	68fa      	ldr	r2, [r7, #12]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	429a      	cmp	r2, r3
 800a00a:	f080 80d4 	bcs.w	800a1b6 <HmiManager+0x2d6>
					{
						if(ButtonBlinkingrequired && (buttonblinkrequirecount >=0))
 800a00e:	4b60      	ldr	r3, [pc, #384]	; (800a190 <HmiManager+0x2b0>)
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d00c      	beq.n	800a030 <HmiManager+0x150>
						{
							buttonblinkrequirecount--;
 800a016:	4b60      	ldr	r3, [pc, #384]	; (800a198 <HmiManager+0x2b8>)
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	3b01      	subs	r3, #1
 800a01c:	b2da      	uxtb	r2, r3
 800a01e:	4b5e      	ldr	r3, [pc, #376]	; (800a198 <HmiManager+0x2b8>)
 800a020:	701a      	strb	r2, [r3, #0]
							if(buttonblinkrequirecount ==0)
 800a022:	4b5d      	ldr	r3, [pc, #372]	; (800a198 <HmiManager+0x2b8>)
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d102      	bne.n	800a030 <HmiManager+0x150>
							{
								ButtonBlinkingrequired = false;
 800a02a:	4b59      	ldr	r3, [pc, #356]	; (800a190 <HmiManager+0x2b0>)
 800a02c:	2200      	movs	r2, #0
 800a02e:	701a      	strb	r2, [r3, #0]
							}
						}
						LastButttonToggle_ms = kerneltime;
 800a030:	4a58      	ldr	r2, [pc, #352]	; (800a194 <HmiManager+0x2b4>)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6013      	str	r3, [r2, #0]
						HAL_GPIO_TogglePin(Button_LED_GPIO_Port, Button_LED_Pin);
 800a036:	2101      	movs	r1, #1
 800a038:	4854      	ldr	r0, [pc, #336]	; (800a18c <HmiManager+0x2ac>)
 800a03a:	f7f8 fd56 	bl	8002aea <HAL_GPIO_TogglePin>
					if((LastButttonToggleTemp_ms) < kerneltime) //1Hz
 800a03e:	e0ba      	b.n	800a1b6 <HmiManager+0x2d6>
					}
				}
				else
				{
					SetButtonLed_OFF();
 800a040:	2200      	movs	r2, #0
 800a042:	2101      	movs	r1, #1
 800a044:	4851      	ldr	r0, [pc, #324]	; (800a18c <HmiManager+0x2ac>)
 800a046:	f7f8 fd38 	bl	8002aba <HAL_GPIO_WritePin>
 800a04a:	e0b4      	b.n	800a1b6 <HmiManager+0x2d6>
				}
			//}
		}
		else
		{
			currentState = getTestState();
 800a04c:	f000 fd1e 	bl	800aa8c <getTestState>
 800a050:	4603      	mov	r3, r0
 800a052:	461a      	mov	r2, r3
 800a054:	4b51      	ldr	r3, [pc, #324]	; (800a19c <HmiManager+0x2bc>)
 800a056:	701a      	strb	r2, [r3, #0]
			void Algo_clearReloadRequest(); // in case we generate an event on function entry
			if(currentState == THERMO_REAR_TEST)
 800a058:	4b50      	ldr	r3, [pc, #320]	; (800a19c <HmiManager+0x2bc>)
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	2b02      	cmp	r3, #2
 800a05e:	d117      	bne.n	800a090 <HmiManager+0x1b0>
				thermocoupleTestPeriod = (float)1000/Algo_getRearTemp()*800;
 800a060:	f002 fade 	bl	800c620 <Algo_getRearTemp>
 800a064:	4603      	mov	r3, r0
 800a066:	4618      	mov	r0, r3
 800a068:	f7f6 fe58 	bl	8000d1c <__aeabi_i2f>
 800a06c:	4603      	mov	r3, r0
 800a06e:	4619      	mov	r1, r3
 800a070:	484b      	ldr	r0, [pc, #300]	; (800a1a0 <HmiManager+0x2c0>)
 800a072:	f7f6 ff5b 	bl	8000f2c <__aeabi_fdiv>
 800a076:	4603      	mov	r3, r0
 800a078:	494a      	ldr	r1, [pc, #296]	; (800a1a4 <HmiManager+0x2c4>)
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7f6 fea2 	bl	8000dc4 <__aeabi_fmul>
 800a080:	4603      	mov	r3, r0
 800a082:	4618      	mov	r0, r3
 800a084:	f7f7 f88a 	bl	800119c <__aeabi_f2uiz>
 800a088:	4603      	mov	r3, r0
 800a08a:	4a47      	ldr	r2, [pc, #284]	; (800a1a8 <HmiManager+0x2c8>)
 800a08c:	6013      	str	r3, [r2, #0]
 800a08e:	e036      	b.n	800a0fe <HmiManager+0x21e>
			else if (currentState== THERMO_BAFFLE_TEST)
 800a090:	4b42      	ldr	r3, [pc, #264]	; (800a19c <HmiManager+0x2bc>)
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	2b03      	cmp	r3, #3
 800a096:	d117      	bne.n	800a0c8 <HmiManager+0x1e8>
				thermocoupleTestPeriod = (float)1000/Algo_getBaffleTemp()*800;
 800a098:	f002 facc 	bl	800c634 <Algo_getBaffleTemp>
 800a09c:	4603      	mov	r3, r0
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7f6 fe3c 	bl	8000d1c <__aeabi_i2f>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	483d      	ldr	r0, [pc, #244]	; (800a1a0 <HmiManager+0x2c0>)
 800a0aa:	f7f6 ff3f 	bl	8000f2c <__aeabi_fdiv>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	493c      	ldr	r1, [pc, #240]	; (800a1a4 <HmiManager+0x2c4>)
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f7f6 fe86 	bl	8000dc4 <__aeabi_fmul>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7f7 f86e 	bl	800119c <__aeabi_f2uiz>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	4a39      	ldr	r2, [pc, #228]	; (800a1a8 <HmiManager+0x2c8>)
 800a0c4:	6013      	str	r3, [r2, #0]
 800a0c6:	e01a      	b.n	800a0fe <HmiManager+0x21e>
			else if (currentState== PLENUM_RTD_TEST)
 800a0c8:	4b34      	ldr	r3, [pc, #208]	; (800a19c <HmiManager+0x2bc>)
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	2b04      	cmp	r3, #4
 800a0ce:	d116      	bne.n	800a0fe <HmiManager+0x21e>
				thermocoupleTestPeriod = (float)1000/Algo_getPlenumTemp()*1000;
 800a0d0:	f002 fac8 	bl	800c664 <Algo_getPlenumTemp>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f7f6 fe20 	bl	8000d1c <__aeabi_i2f>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	4619      	mov	r1, r3
 800a0e0:	482f      	ldr	r0, [pc, #188]	; (800a1a0 <HmiManager+0x2c0>)
 800a0e2:	f7f6 ff23 	bl	8000f2c <__aeabi_fdiv>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	492d      	ldr	r1, [pc, #180]	; (800a1a0 <HmiManager+0x2c0>)
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f7f6 fe6a 	bl	8000dc4 <__aeabi_fmul>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7f7 f852 	bl	800119c <__aeabi_f2uiz>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	4a2b      	ldr	r2, [pc, #172]	; (800a1a8 <HmiManager+0x2c8>)
 800a0fc:	6013      	str	r3, [r2, #0]

			if (currentState == THERMO_REAR_TEST
 800a0fe:	4b27      	ldr	r3, [pc, #156]	; (800a19c <HmiManager+0x2bc>)
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	2b02      	cmp	r3, #2
 800a104:	d007      	beq.n	800a116 <HmiManager+0x236>
					|| currentState == THERMO_BAFFLE_TEST
 800a106:	4b25      	ldr	r3, [pc, #148]	; (800a19c <HmiManager+0x2bc>)
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	2b03      	cmp	r3, #3
 800a10c:	d003      	beq.n	800a116 <HmiManager+0x236>
					|| currentState == PLENUM_RTD_TEST)
 800a10e:	4b23      	ldr	r3, [pc, #140]	; (800a19c <HmiManager+0x2bc>)
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	2b04      	cmp	r3, #4
 800a114:	d10f      	bne.n	800a136 <HmiManager+0x256>
			{
				if((LastButttonToggle_ms+thermocoupleTestPeriod) < kerneltime)
 800a116:	4b1f      	ldr	r3, [pc, #124]	; (800a194 <HmiManager+0x2b4>)
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	4b23      	ldr	r3, [pc, #140]	; (800a1a8 <HmiManager+0x2c8>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4413      	add	r3, r2
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	429a      	cmp	r2, r3
 800a124:	d947      	bls.n	800a1b6 <HmiManager+0x2d6>
				{
					LastButttonToggle_ms = kerneltime;
 800a126:	4a1b      	ldr	r2, [pc, #108]	; (800a194 <HmiManager+0x2b4>)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6013      	str	r3, [r2, #0]
					ToggleButtonLed();
 800a12c:	2101      	movs	r1, #1
 800a12e:	4817      	ldr	r0, [pc, #92]	; (800a18c <HmiManager+0x2ac>)
 800a130:	f7f8 fcdb 	bl	8002aea <HAL_GPIO_TogglePin>
				if((LastButttonToggle_ms+thermocoupleTestPeriod) < kerneltime)
 800a134:	e03f      	b.n	800a1b6 <HmiManager+0x2d6>
				}
			}
			else if (currentState == THERMOSTAT_TEST)
 800a136:	4b19      	ldr	r3, [pc, #100]	; (800a19c <HmiManager+0x2bc>)
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	2b07      	cmp	r3, #7
 800a13c:	d110      	bne.n	800a160 <HmiManager+0x280>
			{
				Algo_getThermostatRequest()?SetButtonLed_ON():SetButtonLed_OFF();
 800a13e:	f002 fabf 	bl	800c6c0 <Algo_getThermostatRequest>
 800a142:	4603      	mov	r3, r0
 800a144:	2b00      	cmp	r3, #0
 800a146:	d005      	beq.n	800a154 <HmiManager+0x274>
 800a148:	2201      	movs	r2, #1
 800a14a:	2101      	movs	r1, #1
 800a14c:	480f      	ldr	r0, [pc, #60]	; (800a18c <HmiManager+0x2ac>)
 800a14e:	f7f8 fcb4 	bl	8002aba <HAL_GPIO_WritePin>
 800a152:	e030      	b.n	800a1b6 <HmiManager+0x2d6>
 800a154:	2200      	movs	r2, #0
 800a156:	2101      	movs	r1, #1
 800a158:	480c      	ldr	r0, [pc, #48]	; (800a18c <HmiManager+0x2ac>)
 800a15a:	f7f8 fcae 	bl	8002aba <HAL_GPIO_WritePin>
 800a15e:	e02a      	b.n	800a1b6 <HmiManager+0x2d6>
			}
			else if(currentState == INTERLOCK_TEST)
 800a160:	4b0e      	ldr	r3, [pc, #56]	; (800a19c <HmiManager+0x2bc>)
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	2b08      	cmp	r3, #8
 800a166:	d121      	bne.n	800a1ac <HmiManager+0x2cc>
			{
				Algo_getInterlockRequest()?SetButtonLed_ON():SetButtonLed_OFF();
 800a168:	f002 fac4 	bl	800c6f4 <Algo_getInterlockRequest>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d005      	beq.n	800a17e <HmiManager+0x29e>
 800a172:	2201      	movs	r2, #1
 800a174:	2101      	movs	r1, #1
 800a176:	4805      	ldr	r0, [pc, #20]	; (800a18c <HmiManager+0x2ac>)
 800a178:	f7f8 fc9f 	bl	8002aba <HAL_GPIO_WritePin>
 800a17c:	e01b      	b.n	800a1b6 <HmiManager+0x2d6>
 800a17e:	2200      	movs	r2, #0
 800a180:	2101      	movs	r1, #1
 800a182:	4802      	ldr	r0, [pc, #8]	; (800a18c <HmiManager+0x2ac>)
 800a184:	f7f8 fc99 	bl	8002aba <HAL_GPIO_WritePin>
 800a188:	e015      	b.n	800a1b6 <HmiManager+0x2d6>
 800a18a:	bf00      	nop
 800a18c:	40010c00 	.word	0x40010c00
 800a190:	20002320 	.word	0x20002320
 800a194:	20002324 	.word	0x20002324
 800a198:	20002328 	.word	0x20002328
 800a19c:	20002329 	.word	0x20002329
 800a1a0:	447a0000 	.word	0x447a0000
 800a1a4:	44480000 	.word	0x44480000
 800a1a8:	2000232c 	.word	0x2000232c
			}
			else
			{
				SetButtonLed_OFF();
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	2101      	movs	r1, #1
 800a1b0:	4827      	ldr	r0, [pc, #156]	; (800a250 <HmiManager+0x370>)
 800a1b2:	f7f8 fc82 	bl	8002aba <HAL_GPIO_WritePin>
			}
		}
		if(algostate !=PRODUCTION_TEST)
 800a1b6:	7afb      	ldrb	r3, [r7, #11]
 800a1b8:	2b0c      	cmp	r3, #12
 800a1ba:	d01c      	beq.n	800a1f6 <HmiManager+0x316>
		{
			if(GPIO_PIN_SET==HAL_GPIO_ReadPin(Button_input_GPIO_Port,Button_input_Pin))
 800a1bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a1c0:	4823      	ldr	r0, [pc, #140]	; (800a250 <HmiManager+0x370>)
 800a1c2:	f7f8 fc63 	bl	8002a8c <HAL_GPIO_ReadPin>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d10f      	bne.n	800a1ec <HmiManager+0x30c>
			{
				if ((LastButtonPressedTime_ms+100) < kerneltime)
 800a1cc:	4b21      	ldr	r3, [pc, #132]	; (800a254 <HmiManager+0x374>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	3364      	adds	r3, #100	; 0x64
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d90e      	bls.n	800a1f6 <HmiManager+0x316>
				{
					Algo_startChargement(kerneltime);
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f002 fa95 	bl	800c708 <Algo_startChargement>
					ButtonBlinkingrequired = true;
 800a1de:	4b1e      	ldr	r3, [pc, #120]	; (800a258 <HmiManager+0x378>)
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	701a      	strb	r2, [r3, #0]
					buttonblinkrequirecount = 6;
 800a1e4:	4b1d      	ldr	r3, [pc, #116]	; (800a25c <HmiManager+0x37c>)
 800a1e6:	2206      	movs	r2, #6
 800a1e8:	701a      	strb	r2, [r3, #0]
 800a1ea:	e004      	b.n	800a1f6 <HmiManager+0x316>
				}
			}
			else
			{
				LastButtonPressedTime_ms = osKernelSysTick();
 800a1ec:	f7fc fb09 	bl	8006802 <osKernelSysTick>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	4a18      	ldr	r2, [pc, #96]	; (800a254 <HmiManager+0x374>)
 800a1f4:	6013      	str	r3, [r2, #0]
			}
		}

//Status bit Handling
		switch(algostate)
 800a1f6:	7afb      	ldrb	r3, [r7, #11]
 800a1f8:	3b0a      	subs	r3, #10
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d805      	bhi.n	800a20a <HmiManager+0x32a>
		{
			case SAFETY:
			case OVERTEMP:
				Set_STATUS_BIT2_ON();
 800a1fe:	2200      	movs	r2, #0
 800a200:	2180      	movs	r1, #128	; 0x80
 800a202:	4817      	ldr	r0, [pc, #92]	; (800a260 <HmiManager+0x380>)
 800a204:	f7f8 fc59 	bl	8002aba <HAL_GPIO_WritePin>
				break;
 800a208:	e005      	b.n	800a216 <HmiManager+0x336>
			default:
				Set_STATUS_BIT2_OFF();
 800a20a:	2201      	movs	r2, #1
 800a20c:	2180      	movs	r1, #128	; 0x80
 800a20e:	4814      	ldr	r0, [pc, #80]	; (800a260 <HmiManager+0x380>)
 800a210:	f7f8 fc53 	bl	8002aba <HAL_GPIO_WritePin>
				break;
 800a214:	bf00      	nop
		}
		tStatDemand?Set_STATUS_BIT0_ON():Set_STATUS_BIT0_OFF();
 800a216:	78fb      	ldrb	r3, [r7, #3]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d005      	beq.n	800a228 <HmiManager+0x348>
 800a21c:	2200      	movs	r2, #0
 800a21e:	2120      	movs	r1, #32
 800a220:	480f      	ldr	r0, [pc, #60]	; (800a260 <HmiManager+0x380>)
 800a222:	f7f8 fc4a 	bl	8002aba <HAL_GPIO_WritePin>
 800a226:	e004      	b.n	800a232 <HmiManager+0x352>
 800a228:	2201      	movs	r2, #1
 800a22a:	2120      	movs	r1, #32
 800a22c:	480c      	ldr	r0, [pc, #48]	; (800a260 <HmiManager+0x380>)
 800a22e:	f7f8 fc44 	bl	8002aba <HAL_GPIO_WritePin>
		interlockActive?Set_STATUS_BIT1_ON():Set_STATUS_BIT1_OFF();
 800a232:	78bb      	ldrb	r3, [r7, #2]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d005      	beq.n	800a244 <HmiManager+0x364>
 800a238:	2200      	movs	r2, #0
 800a23a:	2140      	movs	r1, #64	; 0x40
 800a23c:	4808      	ldr	r0, [pc, #32]	; (800a260 <HmiManager+0x380>)
 800a23e:	f7f8 fc3c 	bl	8002aba <HAL_GPIO_WritePin>
 800a242:	e652      	b.n	8009eea <HmiManager+0xa>
 800a244:	2201      	movs	r2, #1
 800a246:	2140      	movs	r1, #64	; 0x40
 800a248:	4805      	ldr	r0, [pc, #20]	; (800a260 <HmiManager+0x380>)
 800a24a:	f7f8 fc36 	bl	8002aba <HAL_GPIO_WritePin>
	{
 800a24e:	e64c      	b.n	8009eea <HmiManager+0xa>
 800a250:	40010c00 	.word	0x40010c00
 800a254:	20002330 	.word	0x20002330
 800a258:	20002320 	.word	0x20002320
 800a25c:	20002328 	.word	0x20002328
 800a260:	40011000 	.word	0x40011000

0800a264 <Steppermanager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Steppermanager */
void Steppermanager(void const * argument)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	//sleep is active low but we inverse the logic with transistor
	//static int BoostPosition = 0;
	//static int PrimarySecondaryPosition = 0;

	HAL_GPIO_WritePin(uc_Stepper_Sleep_GPIO_Port,uc_Stepper_Sleep_Pin,RESET);
 800a26c:	2200      	movs	r2, #0
 800a26e:	2110      	movs	r1, #16
 800a270:	4811      	ldr	r0, [pc, #68]	; (800a2b8 <Steppermanager+0x54>)
 800a272:	f7f8 fc22 	bl	8002aba <HAL_GPIO_WritePin>
	Algo_init();
 800a276:	f001 fa15 	bl	800b6a4 <Algo_init>
  {
//#ifdef TEST_MOTEUR
//	vStepperPositioning(tman_getMoteur1Req(),&BoostPosition,BoostStepper);
//	vStepperPositioning(tman_getMoteur2Req(),&PrimarySecondaryPosition,PrimaryStepper);
//#else
	osDelay(50);
 800a27a:	2032      	movs	r0, #50	; 0x32
 800a27c:	f7fc fb1d 	bl	80068ba <osDelay>
	Algo_task(osKernelSysTick());
 800a280:	f7fc fabf 	bl	8006802 <osKernelSysTick>
 800a284:	4603      	mov	r3, r0
 800a286:	4618      	mov	r0, r3
 800a288:	f002 f940 	bl	800c50c <Algo_task>
	if(Algo_getState() != PRODUCTION_TEST)
 800a28c:	f002 f99c 	bl	800c5c8 <Algo_getState>
 800a290:	4603      	mov	r3, r0
 800a292:	2b0c      	cmp	r3, #12
 800a294:	d0f1      	beq.n	800a27a <Steppermanager+0x16>
	{
		vStepperPositioning(Algo_getGrill(),&stepperPosition[BoostStepper],BoostStepper);
 800a296:	f002 f9f9 	bl	800c68c <Algo_getGrill>
 800a29a:	4603      	mov	r3, r0
 800a29c:	2201      	movs	r2, #1
 800a29e:	4907      	ldr	r1, [pc, #28]	; (800a2bc <Steppermanager+0x58>)
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f000 f80f 	bl	800a2c4 <vStepperPositioning>
		vStepperPositioning(Algo_getPrimary(),&stepperPosition[PrimaryStepper],PrimaryStepper);
 800a2a6:	f002 f9e7 	bl	800c678 <Algo_getPrimary>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	4904      	ldr	r1, [pc, #16]	; (800a2c0 <Steppermanager+0x5c>)
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f000 f807 	bl	800a2c4 <vStepperPositioning>
	osDelay(50);
 800a2b6:	e7e0      	b.n	800a27a <Steppermanager+0x16>
 800a2b8:	40011000 	.word	0x40011000
 800a2bc:	200030f0 	.word	0x200030f0
 800a2c0:	200030ec 	.word	0x200030ec

0800a2c4 <vStepperPositioning>:
#else
#define primaryStepperMin 13
#endif

void vStepperPositioning(int RequestedPosition,int *CurrentPosition, motor_t MotorId)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b086      	sub	sp, #24
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	4613      	mov	r3, r2
 800a2d0:	71fb      	strb	r3, [r7, #7]
    //MotorControl_t* pstMotorControl;
    //pstMotorControl = &stMotor[MotorId];
    int StepToPerform = 0;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	617b      	str	r3, [r7, #20]

    bool StepperToZero = false;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	74fb      	strb	r3, [r7, #19]

    StepperToZero = vLimitSwitchActive(MotorId);
 800a2da:	79fb      	ldrb	r3, [r7, #7]
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f000 f8c5 	bl	800a46c <vLimitSwitchActive>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	74fb      	strb	r3, [r7, #19]

    if(StepperToZero)
 800a2e6:	7cfb      	ldrb	r3, [r7, #19]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d009      	beq.n	800a300 <vStepperPositioning+0x3c>
    {
    	if(MotorId == PrimaryStepper)
 800a2ec:	79fb      	ldrb	r3, [r7, #7]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d103      	bne.n	800a2fa <vStepperPositioning+0x36>
    	{
    		*CurrentPosition = primaryStepperMin;
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	2206      	movs	r2, #6
 800a2f6:	601a      	str	r2, [r3, #0]
 800a2f8:	e002      	b.n	800a300 <vStepperPositioning+0x3c>
    	}
    	else
    	{
    		*CurrentPosition = 0;
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	601a      	str	r2, [r3, #0]
    	}

    }
    StepToPerform = *CurrentPosition - RequestedPosition;
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	681a      	ldr	r2, [r3, #0]
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	1ad3      	subs	r3, r2, r3
 800a308:	617b      	str	r3, [r7, #20]
    if(MotorId == BoostStepper)
 800a30a:	79fb      	ldrb	r3, [r7, #7]
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d10c      	bne.n	800a32a <vStepperPositioning+0x66>
    {
		if (*CurrentPosition == 0 && !StepperToZero)
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d169      	bne.n	800a3ec <vStepperPositioning+0x128>
 800a318:	7cfb      	ldrb	r3, [r7, #19]
 800a31a:	f083 0301 	eor.w	r3, r3, #1
 800a31e:	b2db      	uxtb	r3, r3
 800a320:	2b00      	cmp	r3, #0
 800a322:	d063      	beq.n	800a3ec <vStepperPositioning+0x128>
		{
			StepToPerform = 1;
 800a324:	2301      	movs	r3, #1
 800a326:	617b      	str	r3, [r7, #20]
 800a328:	e060      	b.n	800a3ec <vStepperPositioning+0x128>
		}
    }
    else
    {
		if (*CurrentPosition == primaryStepperMin && !StepperToZero)
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	2b06      	cmp	r3, #6
 800a330:	d15c      	bne.n	800a3ec <vStepperPositioning+0x128>
 800a332:	7cfb      	ldrb	r3, [r7, #19]
 800a334:	f083 0301 	eor.w	r3, r3, #1
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d056      	beq.n	800a3ec <vStepperPositioning+0x128>
		{
			StepToPerform = 1;
 800a33e:	2301      	movs	r3, #1
 800a340:	617b      	str	r3, [r7, #20]
		}
    }

    while (StepToPerform != 0)
 800a342:	e053      	b.n	800a3ec <vStepperPositioning+0x128>
    {
    	vEnableStepper(MotorId);
 800a344:	79fb      	ldrb	r3, [r7, #7]
 800a346:	4618      	mov	r0, r3
 800a348:	f000 f8ba 	bl	800a4c0 <vEnableStepper>
    	vStepperMaxTorque(MotorId,true);
 800a34c:	79fb      	ldrb	r3, [r7, #7]
 800a34e:	2101      	movs	r1, #1
 800a350:	4618      	mov	r0, r3
 800a352:	f000 f8e5 	bl	800a520 <vStepperMaxTorque>
    	//osDelay(20);
    	if(StepToPerform > 0)
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	dd2c      	ble.n	800a3b6 <vStepperPositioning+0xf2>
		{
			vSetStepperMotorDirection(MotorId, Closing);
 800a35c:	79fb      	ldrb	r3, [r7, #7]
 800a35e:	2100      	movs	r1, #0
 800a360:	4618      	mov	r0, r3
 800a362:	f000 f933 	bl	800a5cc <vSetStepperMotorDirection>
			*CurrentPosition = *CurrentPosition -1;
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	1e5a      	subs	r2, r3, #1
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	601a      	str	r2, [r3, #0]
			if((*CurrentPosition < 0) && (MotorId == BoostStepper))
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	2b00      	cmp	r3, #0
 800a376:	da09      	bge.n	800a38c <vStepperPositioning+0xc8>
 800a378:	79fb      	ldrb	r3, [r7, #7]
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d106      	bne.n	800a38c <vStepperPositioning+0xc8>
			{
				*CurrentPosition = 0;
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	2200      	movs	r2, #0
 800a382:	601a      	str	r2, [r3, #0]
				vDisableStepper(BoostStepper);
 800a384:	2001      	movs	r0, #1
 800a386:	f000 f901 	bl	800a58c <vDisableStepper>
 800a38a:	e00c      	b.n	800a3a6 <vStepperPositioning+0xe2>
			}
			else if ((*CurrentPosition < primaryStepperMin) && (MotorId == PrimaryStepper))
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2b05      	cmp	r3, #5
 800a392:	dc08      	bgt.n	800a3a6 <vStepperPositioning+0xe2>
 800a394:	79fb      	ldrb	r3, [r7, #7]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d105      	bne.n	800a3a6 <vStepperPositioning+0xe2>
			{
				*CurrentPosition = primaryStepperMin;
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	2206      	movs	r2, #6
 800a39e:	601a      	str	r2, [r3, #0]
				vDisableStepper(PrimaryStepper);
 800a3a0:	2000      	movs	r0, #0
 800a3a2:	f000 f8f3 	bl	800a58c <vDisableStepper>
			}
 			vToggleOneStep(MotorId);
 800a3a6:	79fb      	ldrb	r3, [r7, #7]
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f000 f827 	bl	800a3fc <vToggleOneStep>
			StepToPerform--;
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	3b01      	subs	r3, #1
 800a3b2:	617b      	str	r3, [r7, #20]
 800a3b4:	e01a      	b.n	800a3ec <vStepperPositioning+0x128>
		}
		else if(StepToPerform < 0)
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	da17      	bge.n	800a3ec <vStepperPositioning+0x128>
		{
			vEnableStepper(MotorId);
 800a3bc:	79fb      	ldrb	r3, [r7, #7]
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f000 f87e 	bl	800a4c0 <vEnableStepper>
			osDelay(50);
 800a3c4:	2032      	movs	r0, #50	; 0x32
 800a3c6:	f7fc fa78 	bl	80068ba <osDelay>
			vSetStepperMotorDirection(MotorId, Opening);
 800a3ca:	79fb      	ldrb	r3, [r7, #7]
 800a3cc:	2101      	movs	r1, #1
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f000 f8fc 	bl	800a5cc <vSetStepperMotorDirection>
			*CurrentPosition = *CurrentPosition + 1;
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	1c5a      	adds	r2, r3, #1
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	601a      	str	r2, [r3, #0]
			vToggleOneStep(MotorId);
 800a3de:	79fb      	ldrb	r3, [r7, #7]
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f000 f80b 	bl	800a3fc <vToggleOneStep>
			StepToPerform++;
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	617b      	str	r3, [r7, #20]
    while (StepToPerform != 0)
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d1a8      	bne.n	800a344 <vStepperPositioning+0x80>
	}
    //vStepperMaxTorque(MotorId,true); TODO : re-enable max torque
    //osDelay(100);
	//vDisableStepper(MotorId);

}
 800a3f2:	bf00      	nop
 800a3f4:	bf00      	nop
 800a3f6:	3718      	adds	r7, #24
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <vToggleOneStep>:

void vToggleOneStep(motor_t Motor)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	4603      	mov	r3, r0
 800a404:	71fb      	strb	r3, [r7, #7]
    switch(Motor)
 800a406:	79fb      	ldrb	r3, [r7, #7]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d002      	beq.n	800a412 <vToggleOneStep+0x16>
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d011      	beq.n	800a434 <vToggleOneStep+0x38>
            osDelay(10);
            Boost_Step_SetHigh();
            osDelay(10);
            break;
        default:
            break;
 800a410:	e023      	b.n	800a45a <vToggleOneStep+0x5e>
            Primary_Step_SetLow();
 800a412:	2200      	movs	r2, #0
 800a414:	2108      	movs	r1, #8
 800a416:	4813      	ldr	r0, [pc, #76]	; (800a464 <vToggleOneStep+0x68>)
 800a418:	f7f8 fb4f 	bl	8002aba <HAL_GPIO_WritePin>
            osDelay(10);
 800a41c:	200a      	movs	r0, #10
 800a41e:	f7fc fa4c 	bl	80068ba <osDelay>
            Primary_Step_SetHigh();
 800a422:	2201      	movs	r2, #1
 800a424:	2108      	movs	r1, #8
 800a426:	480f      	ldr	r0, [pc, #60]	; (800a464 <vToggleOneStep+0x68>)
 800a428:	f7f8 fb47 	bl	8002aba <HAL_GPIO_WritePin>
            osDelay(10);
 800a42c:	200a      	movs	r0, #10
 800a42e:	f7fc fa44 	bl	80068ba <osDelay>
            break;
 800a432:	e012      	b.n	800a45a <vToggleOneStep+0x5e>
            Boost_Step_SetLow();
 800a434:	2200      	movs	r2, #0
 800a436:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a43a:	480b      	ldr	r0, [pc, #44]	; (800a468 <vToggleOneStep+0x6c>)
 800a43c:	f7f8 fb3d 	bl	8002aba <HAL_GPIO_WritePin>
            osDelay(10);
 800a440:	200a      	movs	r0, #10
 800a442:	f7fc fa3a 	bl	80068ba <osDelay>
            Boost_Step_SetHigh();
 800a446:	2201      	movs	r2, #1
 800a448:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a44c:	4806      	ldr	r0, [pc, #24]	; (800a468 <vToggleOneStep+0x6c>)
 800a44e:	f7f8 fb34 	bl	8002aba <HAL_GPIO_WritePin>
            osDelay(10);
 800a452:	200a      	movs	r0, #10
 800a454:	f7fc fa31 	bl	80068ba <osDelay>
            break;
 800a458:	bf00      	nop
    }
}
 800a45a:	bf00      	nop
 800a45c:	3708      	adds	r7, #8
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop
 800a464:	40010c00 	.word	0x40010c00
 800a468:	40011000 	.word	0x40011000

0800a46c <vLimitSwitchActive>:
bool vLimitSwitchActive(motor_t MotorId)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	4603      	mov	r3, r0
 800a474:	71fb      	strb	r3, [r7, #7]
	bool active=false;
 800a476:	2300      	movs	r3, #0
 800a478:	73fb      	strb	r3, [r7, #15]
    switch(MotorId)
 800a47a:	79fb      	ldrb	r3, [r7, #7]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d002      	beq.n	800a486 <vLimitSwitchActive+0x1a>
 800a480:	2b01      	cmp	r3, #1
 800a482:	d00b      	beq.n	800a49c <vLimitSwitchActive+0x30>
#else
        case PrimaryStepper:
#endif
        	active = (GPIO_PIN_RESET == HAL_GPIO_ReadPin(LimitSwitch2_GPIO_Port,LimitSwitch2_Pin));
        default:
            break;
 800a484:	e014      	b.n	800a4b0 <vLimitSwitchActive+0x44>
        	active = (GPIO_PIN_RESET == HAL_GPIO_ReadPin(LimitSwith1_GPIO_Port,LimitSwith1_Pin));
 800a486:	2101      	movs	r1, #1
 800a488:	480c      	ldr	r0, [pc, #48]	; (800a4bc <vLimitSwitchActive+0x50>)
 800a48a:	f7f8 faff 	bl	8002a8c <HAL_GPIO_ReadPin>
 800a48e:	4603      	mov	r3, r0
 800a490:	2b00      	cmp	r3, #0
 800a492:	bf0c      	ite	eq
 800a494:	2301      	moveq	r3, #1
 800a496:	2300      	movne	r3, #0
 800a498:	73fb      	strb	r3, [r7, #15]
            break;
 800a49a:	e00a      	b.n	800a4b2 <vLimitSwitchActive+0x46>
        	active = (GPIO_PIN_RESET == HAL_GPIO_ReadPin(LimitSwitch2_GPIO_Port,LimitSwitch2_Pin));
 800a49c:	2102      	movs	r1, #2
 800a49e:	4807      	ldr	r0, [pc, #28]	; (800a4bc <vLimitSwitchActive+0x50>)
 800a4a0:	f7f8 faf4 	bl	8002a8c <HAL_GPIO_ReadPin>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	bf0c      	ite	eq
 800a4aa:	2301      	moveq	r3, #1
 800a4ac:	2300      	movne	r3, #0
 800a4ae:	73fb      	strb	r3, [r7, #15]
            break;
 800a4b0:	bf00      	nop
    }
    return active;
 800a4b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3710      	adds	r7, #16
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}
 800a4bc:	40011000 	.word	0x40011000

0800a4c0 <vEnableStepper>:

void vEnableStepper(motor_t Motor)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b082      	sub	sp, #8
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	71fb      	strb	r3, [r7, #7]
    Step1_2_WAKE();
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	2110      	movs	r1, #16
 800a4ce:	4812      	ldr	r0, [pc, #72]	; (800a518 <vEnableStepper+0x58>)
 800a4d0:	f7f8 faf3 	bl	8002aba <HAL_GPIO_WritePin>
	switch(Motor)
 800a4d4:	79fb      	ldrb	r3, [r7, #7]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d002      	beq.n	800a4e0 <vEnableStepper+0x20>
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d00b      	beq.n	800a4f6 <vEnableStepper+0x36>
            Boost_ENABLE();
            Boost_nRESET();

            break;
        default:
            break;
 800a4de:	e017      	b.n	800a510 <vEnableStepper+0x50>
            Primary_ENABLE();
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	2120      	movs	r1, #32
 800a4e4:	480d      	ldr	r0, [pc, #52]	; (800a51c <vEnableStepper+0x5c>)
 800a4e6:	f7f8 fae8 	bl	8002aba <HAL_GPIO_WritePin>
            Primary_nRESET();
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	2110      	movs	r1, #16
 800a4ee:	480b      	ldr	r0, [pc, #44]	; (800a51c <vEnableStepper+0x5c>)
 800a4f0:	f7f8 fae3 	bl	8002aba <HAL_GPIO_WritePin>
            break;
 800a4f4:	e00c      	b.n	800a510 <vEnableStepper+0x50>
            Boost_ENABLE();
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a4fc:	4806      	ldr	r0, [pc, #24]	; (800a518 <vEnableStepper+0x58>)
 800a4fe:	f7f8 fadc 	bl	8002aba <HAL_GPIO_WritePin>
            Boost_nRESET();
 800a502:	2201      	movs	r2, #1
 800a504:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a508:	4803      	ldr	r0, [pc, #12]	; (800a518 <vEnableStepper+0x58>)
 800a50a:	f7f8 fad6 	bl	8002aba <HAL_GPIO_WritePin>
            break;
 800a50e:	bf00      	nop
    }
}
 800a510:	bf00      	nop
 800a512:	3708      	adds	r7, #8
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	40011000 	.word	0x40011000
 800a51c:	40010c00 	.word	0x40010c00

0800a520 <vStepperMaxTorque>:
void vStepperMaxTorque(motor_t Motor,bool bApplyMaxTorque)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
 800a526:	4603      	mov	r3, r0
 800a528:	460a      	mov	r2, r1
 800a52a:	71fb      	strb	r3, [r7, #7]
 800a52c:	4613      	mov	r3, r2
 800a52e:	71bb      	strb	r3, [r7, #6]
	switch(Motor)
 800a530:	79fb      	ldrb	r3, [r7, #7]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d002      	beq.n	800a53c <vStepperMaxTorque+0x1c>
 800a536:	2b01      	cmp	r3, #1
 800a538:	d011      	beq.n	800a55e <vStepperMaxTorque+0x3e>
			{
        		Boost_TorqueMin();
        	}
            break;
        default:
            break;
 800a53a:	e021      	b.n	800a580 <vStepperMaxTorque+0x60>
        	if(bApplyMaxTorque)
 800a53c:	79bb      	ldrb	r3, [r7, #6]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d006      	beq.n	800a550 <vStepperMaxTorque+0x30>
        		Primary_TorqueMax();
 800a542:	2200      	movs	r2, #0
 800a544:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a548:	480f      	ldr	r0, [pc, #60]	; (800a588 <vStepperMaxTorque+0x68>)
 800a54a:	f7f8 fab6 	bl	8002aba <HAL_GPIO_WritePin>
            break;
 800a54e:	e017      	b.n	800a580 <vStepperMaxTorque+0x60>
        		Primary_TorqueMin();
 800a550:	2201      	movs	r2, #1
 800a552:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a556:	480c      	ldr	r0, [pc, #48]	; (800a588 <vStepperMaxTorque+0x68>)
 800a558:	f7f8 faaf 	bl	8002aba <HAL_GPIO_WritePin>
            break;
 800a55c:	e010      	b.n	800a580 <vStepperMaxTorque+0x60>
        	if(bApplyMaxTorque)
 800a55e:	79bb      	ldrb	r3, [r7, #6]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d006      	beq.n	800a572 <vStepperMaxTorque+0x52>
        		Boost_TorqueMax();
 800a564:	2200      	movs	r2, #0
 800a566:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a56a:	4807      	ldr	r0, [pc, #28]	; (800a588 <vStepperMaxTorque+0x68>)
 800a56c:	f7f8 faa5 	bl	8002aba <HAL_GPIO_WritePin>
            break;
 800a570:	e005      	b.n	800a57e <vStepperMaxTorque+0x5e>
        		Boost_TorqueMin();
 800a572:	2201      	movs	r2, #1
 800a574:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a578:	4803      	ldr	r0, [pc, #12]	; (800a588 <vStepperMaxTorque+0x68>)
 800a57a:	f7f8 fa9e 	bl	8002aba <HAL_GPIO_WritePin>
            break;
 800a57e:	bf00      	nop
    }
}
 800a580:	bf00      	nop
 800a582:	3708      	adds	r7, #8
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}
 800a588:	40011000 	.word	0x40011000

0800a58c <vDisableStepper>:

void vDisableStepper(motor_t Motor)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b082      	sub	sp, #8
 800a590:	af00      	add	r7, sp, #0
 800a592:	4603      	mov	r3, r0
 800a594:	71fb      	strb	r3, [r7, #7]
	//Step1_2_SLEEP();
    switch(Motor)
 800a596:	79fb      	ldrb	r3, [r7, #7]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d002      	beq.n	800a5a2 <vDisableStepper+0x16>
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d006      	beq.n	800a5ae <vDisableStepper+0x22>
            break;
        case BoostStepper:
            Boost_DISABLE();
            break;
        default:
            break;
 800a5a0:	e00c      	b.n	800a5bc <vDisableStepper+0x30>
            Primary_DISABLE();
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	2120      	movs	r1, #32
 800a5a6:	4807      	ldr	r0, [pc, #28]	; (800a5c4 <vDisableStepper+0x38>)
 800a5a8:	f7f8 fa87 	bl	8002aba <HAL_GPIO_WritePin>
            break;
 800a5ac:	e006      	b.n	800a5bc <vDisableStepper+0x30>
            Boost_DISABLE();
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a5b4:	4804      	ldr	r0, [pc, #16]	; (800a5c8 <vDisableStepper+0x3c>)
 800a5b6:	f7f8 fa80 	bl	8002aba <HAL_GPIO_WritePin>
            break;
 800a5ba:	bf00      	nop
    }
}
 800a5bc:	bf00      	nop
 800a5be:	3708      	adds	r7, #8
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}
 800a5c4:	40010c00 	.word	0x40010c00
 800a5c8:	40011000 	.word	0x40011000

0800a5cc <vSetStepperMotorDirection>:

void vSetStepperMotorDirection(motor_t Motor, motor_direction_t Direction)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b082      	sub	sp, #8
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	460a      	mov	r2, r1
 800a5d6:	71fb      	strb	r3, [r7, #7]
 800a5d8:	4613      	mov	r3, r2
 800a5da:	71bb      	strb	r3, [r7, #6]
    if(Motor == BoostStepper)
 800a5dc:	79fb      	ldrb	r3, [r7, #7]
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d110      	bne.n	800a604 <vSetStepperMotorDirection+0x38>
    {
        if(Direction == Opening)
 800a5e2:	79bb      	ldrb	r3, [r7, #6]
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d106      	bne.n	800a5f6 <vSetStepperMotorDirection+0x2a>
        {
        	Boost_DIR_SetHigh();
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a5ee:	4810      	ldr	r0, [pc, #64]	; (800a630 <vSetStepperMotorDirection+0x64>)
 800a5f0:	f7f8 fa63 	bl	8002aba <HAL_GPIO_WritePin>
    else
    {
        while(1);
        //wrong motor argument
    }
}
 800a5f4:	e019      	b.n	800a62a <vSetStepperMotorDirection+0x5e>
        	Boost_DIR_SetLow();
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a5fc:	480c      	ldr	r0, [pc, #48]	; (800a630 <vSetStepperMotorDirection+0x64>)
 800a5fe:	f7f8 fa5c 	bl	8002aba <HAL_GPIO_WritePin>
}
 800a602:	e012      	b.n	800a62a <vSetStepperMotorDirection+0x5e>
    else if(Motor == PrimaryStepper)
 800a604:	79fb      	ldrb	r3, [r7, #7]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d10e      	bne.n	800a628 <vSetStepperMotorDirection+0x5c>
        if(Direction == Opening)
 800a60a:	79bb      	ldrb	r3, [r7, #6]
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d105      	bne.n	800a61c <vSetStepperMotorDirection+0x50>
        	Primary_DIR_SetHigh();
 800a610:	2201      	movs	r2, #1
 800a612:	2104      	movs	r1, #4
 800a614:	4807      	ldr	r0, [pc, #28]	; (800a634 <vSetStepperMotorDirection+0x68>)
 800a616:	f7f8 fa50 	bl	8002aba <HAL_GPIO_WritePin>
}
 800a61a:	e006      	b.n	800a62a <vSetStepperMotorDirection+0x5e>
        	Primary_DIR_SetLow();
 800a61c:	2200      	movs	r2, #0
 800a61e:	2104      	movs	r1, #4
 800a620:	4804      	ldr	r0, [pc, #16]	; (800a634 <vSetStepperMotorDirection+0x68>)
 800a622:	f7f8 fa4a 	bl	8002aba <HAL_GPIO_WritePin>
}
 800a626:	e000      	b.n	800a62a <vSetStepperMotorDirection+0x5e>
        while(1);
 800a628:	e7fe      	b.n	800a628 <vSetStepperMotorDirection+0x5c>
}
 800a62a:	3708      	adds	r7, #8
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}
 800a630:	40011000 	.word	0x40011000
 800a634:	40011400 	.word	0x40011400

0800a638 <vSetSpeed>:
{
    return &stMotor[Index];
}

void vSetSpeed(Mot_FanSpeed RequestedSpeed)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	4603      	mov	r3, r0
 800a640:	71fb      	strb	r3, [r7, #7]
	  switch (RequestedSpeed)
 800a642:	79fb      	ldrb	r3, [r7, #7]
 800a644:	2b03      	cmp	r3, #3
 800a646:	d02c      	beq.n	800a6a2 <vSetSpeed+0x6a>
 800a648:	2b03      	cmp	r3, #3
 800a64a:	dc3d      	bgt.n	800a6c8 <vSetSpeed+0x90>
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d002      	beq.n	800a656 <vSetSpeed+0x1e>
 800a650:	2b02      	cmp	r3, #2
 800a652:	d013      	beq.n	800a67c <vSetSpeed+0x44>
 800a654:	e038      	b.n	800a6c8 <vSetSpeed+0x90>
	  {
		  case 1://speed1
			  HAL_GPIO_WritePin(SPEED2_COIL_GPIO_Port,SPEED2_COIL_Pin,RESET);
 800a656:	2200      	movs	r2, #0
 800a658:	2104      	movs	r1, #4
 800a65a:	4825      	ldr	r0, [pc, #148]	; (800a6f0 <vSetSpeed+0xb8>)
 800a65c:	f7f8 fa2d 	bl	8002aba <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SPEED3_COIL_GPIO_Port,SPEED3_COIL_Pin,RESET);
 800a660:	2200      	movs	r2, #0
 800a662:	2102      	movs	r1, #2
 800a664:	4822      	ldr	r0, [pc, #136]	; (800a6f0 <vSetSpeed+0xb8>)
 800a666:	f7f8 fa28 	bl	8002aba <HAL_GPIO_WritePin>
			  osDelay(200);//break before make
 800a66a:	20c8      	movs	r0, #200	; 0xc8
 800a66c:	f7fc f925 	bl	80068ba <osDelay>
			  HAL_GPIO_WritePin(SPEED1_COIL_GPIO_Port,SPEED1_COIL_Pin,SET);
 800a670:	2201      	movs	r2, #1
 800a672:	2108      	movs	r1, #8
 800a674:	481e      	ldr	r0, [pc, #120]	; (800a6f0 <vSetSpeed+0xb8>)
 800a676:	f7f8 fa20 	bl	8002aba <HAL_GPIO_WritePin>
			  break;
 800a67a:	e035      	b.n	800a6e8 <vSetSpeed+0xb0>
		  case 2://speed2
			  HAL_GPIO_WritePin(SPEED3_COIL_GPIO_Port,SPEED3_COIL_Pin,RESET);
 800a67c:	2200      	movs	r2, #0
 800a67e:	2102      	movs	r1, #2
 800a680:	481b      	ldr	r0, [pc, #108]	; (800a6f0 <vSetSpeed+0xb8>)
 800a682:	f7f8 fa1a 	bl	8002aba <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SPEED1_COIL_GPIO_Port,SPEED1_COIL_Pin,RESET);
 800a686:	2200      	movs	r2, #0
 800a688:	2108      	movs	r1, #8
 800a68a:	4819      	ldr	r0, [pc, #100]	; (800a6f0 <vSetSpeed+0xb8>)
 800a68c:	f7f8 fa15 	bl	8002aba <HAL_GPIO_WritePin>
			  osDelay(200);//break before make
 800a690:	20c8      	movs	r0, #200	; 0xc8
 800a692:	f7fc f912 	bl	80068ba <osDelay>
			  HAL_GPIO_WritePin(SPEED2_COIL_GPIO_Port,SPEED2_COIL_Pin,SET);
 800a696:	2201      	movs	r2, #1
 800a698:	2104      	movs	r1, #4
 800a69a:	4815      	ldr	r0, [pc, #84]	; (800a6f0 <vSetSpeed+0xb8>)
 800a69c:	f7f8 fa0d 	bl	8002aba <HAL_GPIO_WritePin>
			  break;
 800a6a0:	e022      	b.n	800a6e8 <vSetSpeed+0xb0>
		  case 3://speed3
			  HAL_GPIO_WritePin(SPEED1_COIL_GPIO_Port,SPEED1_COIL_Pin,RESET);
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	2108      	movs	r1, #8
 800a6a6:	4812      	ldr	r0, [pc, #72]	; (800a6f0 <vSetSpeed+0xb8>)
 800a6a8:	f7f8 fa07 	bl	8002aba <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SPEED2_COIL_GPIO_Port,SPEED2_COIL_Pin,RESET);
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	2104      	movs	r1, #4
 800a6b0:	480f      	ldr	r0, [pc, #60]	; (800a6f0 <vSetSpeed+0xb8>)
 800a6b2:	f7f8 fa02 	bl	8002aba <HAL_GPIO_WritePin>
			  osDelay(200);//break before make
 800a6b6:	20c8      	movs	r0, #200	; 0xc8
 800a6b8:	f7fc f8ff 	bl	80068ba <osDelay>
			  HAL_GPIO_WritePin(SPEED3_COIL_GPIO_Port,SPEED3_COIL_Pin,SET);
 800a6bc:	2201      	movs	r2, #1
 800a6be:	2102      	movs	r1, #2
 800a6c0:	480b      	ldr	r0, [pc, #44]	; (800a6f0 <vSetSpeed+0xb8>)
 800a6c2:	f7f8 f9fa 	bl	8002aba <HAL_GPIO_WritePin>
			  break;
 800a6c6:	e00f      	b.n	800a6e8 <vSetSpeed+0xb0>
		  case 4: //speed4 controlled by hardware
		  default: //stop
			  HAL_GPIO_WritePin(SPEED1_COIL_GPIO_Port,SPEED1_COIL_Pin,RESET);
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	2108      	movs	r1, #8
 800a6cc:	4808      	ldr	r0, [pc, #32]	; (800a6f0 <vSetSpeed+0xb8>)
 800a6ce:	f7f8 f9f4 	bl	8002aba <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SPEED2_COIL_GPIO_Port,SPEED2_COIL_Pin,RESET);
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	2104      	movs	r1, #4
 800a6d6:	4806      	ldr	r0, [pc, #24]	; (800a6f0 <vSetSpeed+0xb8>)
 800a6d8:	f7f8 f9ef 	bl	8002aba <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SPEED3_COIL_GPIO_Port,SPEED3_COIL_Pin,RESET);
 800a6dc:	2200      	movs	r2, #0
 800a6de:	2102      	movs	r1, #2
 800a6e0:	4803      	ldr	r0, [pc, #12]	; (800a6f0 <vSetSpeed+0xb8>)
 800a6e2:	f7f8 f9ea 	bl	8002aba <HAL_GPIO_WritePin>
			  break;
 800a6e6:	bf00      	nop
	  }
}
 800a6e8:	bf00      	nop
 800a6ea:	3708      	adds	r7, #8
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}
 800a6f0:	40010800 	.word	0x40010800

0800a6f4 <Mot_getFanSpeed>:

Mot_FanSpeed Mot_getFanSpeed() {
 800a6f4:	b480      	push	{r7}
 800a6f6:	af00      	add	r7, sp, #0
  return plenumSpeed;
 800a6f8:	4b02      	ldr	r3, [pc, #8]	; (800a704 <Mot_getFanSpeed+0x10>)
 800a6fa:	781b      	ldrb	r3, [r3, #0]
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bc80      	pop	{r7}
 800a702:	4770      	bx	lr
 800a704:	20002334 	.word	0x20002334

0800a708 <StepperMotorProdTest>:
	  }
  plenumPreviousSpeed = plenumSpeed;
}

void StepperMotorProdTest(motor_t MotorId)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	4603      	mov	r3, r0
 800a710:	71fb      	strb	r3, [r7, #7]
	// on ouvre jusqu'à ce que la limite switch soit inactive,
	// on ferme jusqu'à ce qu'elle soit active
	//on va au max et on ferme sur la switch
	//on ouvre à 25% et on désactive les moteurs.

	vSetStepperMotorDirection(MotorId, Opening);
 800a712:	79fb      	ldrb	r3, [r7, #7]
 800a714:	2101      	movs	r1, #1
 800a716:	4618      	mov	r0, r3
 800a718:	f7ff ff58 	bl	800a5cc <vSetStepperMotorDirection>
	vEnableStepper(MotorId);
 800a71c:	79fb      	ldrb	r3, [r7, #7]
 800a71e:	4618      	mov	r0, r3
 800a720:	f7ff fece 	bl	800a4c0 <vEnableStepper>
	while(vLimitSwitchActive(MotorId))
 800a724:	e006      	b.n	800a734 <StepperMotorProdTest+0x2c>
	{
		vToggleOneStep(MotorId);
 800a726:	79fb      	ldrb	r3, [r7, #7]
 800a728:	4618      	mov	r0, r3
 800a72a:	f7ff fe67 	bl	800a3fc <vToggleOneStep>
		osDelay(5);
 800a72e:	2005      	movs	r0, #5
 800a730:	f7fc f8c3 	bl	80068ba <osDelay>
	while(vLimitSwitchActive(MotorId))
 800a734:	79fb      	ldrb	r3, [r7, #7]
 800a736:	4618      	mov	r0, r3
 800a738:	f7ff fe98 	bl	800a46c <vLimitSwitchActive>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d1f1      	bne.n	800a726 <StepperMotorProdTest+0x1e>
	}
	vSetStepperMotorDirection(MotorId, Closing);
 800a742:	79fb      	ldrb	r3, [r7, #7]
 800a744:	2100      	movs	r1, #0
 800a746:	4618      	mov	r0, r3
 800a748:	f7ff ff40 	bl	800a5cc <vSetStepperMotorDirection>
	while(!vLimitSwitchActive(MotorId))
 800a74c:	e006      	b.n	800a75c <StepperMotorProdTest+0x54>
	{
		vToggleOneStep(MotorId);
 800a74e:	79fb      	ldrb	r3, [r7, #7]
 800a750:	4618      	mov	r0, r3
 800a752:	f7ff fe53 	bl	800a3fc <vToggleOneStep>
		osDelay(5);
 800a756:	2005      	movs	r0, #5
 800a758:	f7fc f8af 	bl	80068ba <osDelay>
	while(!vLimitSwitchActive(MotorId))
 800a75c:	79fb      	ldrb	r3, [r7, #7]
 800a75e:	4618      	mov	r0, r3
 800a760:	f7ff fe84 	bl	800a46c <vLimitSwitchActive>
 800a764:	4603      	mov	r3, r0
 800a766:	f083 0301 	eor.w	r3, r3, #1
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d1ee      	bne.n	800a74e <StepperMotorProdTest+0x46>
	}
	vSetStepperMotorDirection(MotorId, Opening);
 800a770:	79fb      	ldrb	r3, [r7, #7]
 800a772:	2101      	movs	r1, #1
 800a774:	4618      	mov	r0, r3
 800a776:	f7ff ff29 	bl	800a5cc <vSetStepperMotorDirection>
	int stepToFull;
	stepToFull = (MotorId == PrimaryStepper)?STEP_RANGE_PRIMARY:STEP_RANGE_GRILL;
 800a77a:	79fb      	ldrb	r3, [r7, #7]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d101      	bne.n	800a784 <StepperMotorProdTest+0x7c>
 800a780:	235e      	movs	r3, #94	; 0x5e
 800a782:	e000      	b.n	800a786 <StepperMotorProdTest+0x7e>
 800a784:	2364      	movs	r3, #100	; 0x64
 800a786:	60bb      	str	r3, [r7, #8]
	int i;
	for (i=0;i<=stepToFull;i++)
 800a788:	2300      	movs	r3, #0
 800a78a:	60fb      	str	r3, [r7, #12]
 800a78c:	e009      	b.n	800a7a2 <StepperMotorProdTest+0x9a>
	{
		vToggleOneStep(MotorId);
 800a78e:	79fb      	ldrb	r3, [r7, #7]
 800a790:	4618      	mov	r0, r3
 800a792:	f7ff fe33 	bl	800a3fc <vToggleOneStep>
		osDelay(5);
 800a796:	2005      	movs	r0, #5
 800a798:	f7fc f88f 	bl	80068ba <osDelay>
	for (i=0;i<=stepToFull;i++)
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	3301      	adds	r3, #1
 800a7a0:	60fb      	str	r3, [r7, #12]
 800a7a2:	68fa      	ldr	r2, [r7, #12]
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	ddf1      	ble.n	800a78e <StepperMotorProdTest+0x86>
	}
	vSetStepperMotorDirection(MotorId, Closing);
 800a7aa:	79fb      	ldrb	r3, [r7, #7]
 800a7ac:	2100      	movs	r1, #0
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7ff ff0c 	bl	800a5cc <vSetStepperMotorDirection>
	for (i=0;i<=stepToFull;i++)
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	60fb      	str	r3, [r7, #12]
 800a7b8:	e009      	b.n	800a7ce <StepperMotorProdTest+0xc6>
	{
		vToggleOneStep(MotorId);
 800a7ba:	79fb      	ldrb	r3, [r7, #7]
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f7ff fe1d 	bl	800a3fc <vToggleOneStep>
		osDelay(5);
 800a7c2:	2005      	movs	r0, #5
 800a7c4:	f7fc f879 	bl	80068ba <osDelay>
	for (i=0;i<=stepToFull;i++)
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	60fb      	str	r3, [r7, #12]
 800a7ce:	68fa      	ldr	r2, [r7, #12]
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	ddf1      	ble.n	800a7ba <StepperMotorProdTest+0xb2>
	}
	//repeat for proper 0
	vSetStepperMotorDirection(MotorId, Opening);
 800a7d6:	79fb      	ldrb	r3, [r7, #7]
 800a7d8:	2101      	movs	r1, #1
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7ff fef6 	bl	800a5cc <vSetStepperMotorDirection>
	while(vLimitSwitchActive(MotorId))
 800a7e0:	e006      	b.n	800a7f0 <StepperMotorProdTest+0xe8>
	{
		vToggleOneStep(MotorId);
 800a7e2:	79fb      	ldrb	r3, [r7, #7]
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f7ff fe09 	bl	800a3fc <vToggleOneStep>
		osDelay(5);
 800a7ea:	2005      	movs	r0, #5
 800a7ec:	f7fc f865 	bl	80068ba <osDelay>
	while(vLimitSwitchActive(MotorId))
 800a7f0:	79fb      	ldrb	r3, [r7, #7]
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7ff fe3a 	bl	800a46c <vLimitSwitchActive>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d1f1      	bne.n	800a7e2 <StepperMotorProdTest+0xda>
	}
	vSetStepperMotorDirection(MotorId, Closing);
 800a7fe:	79fb      	ldrb	r3, [r7, #7]
 800a800:	2100      	movs	r1, #0
 800a802:	4618      	mov	r0, r3
 800a804:	f7ff fee2 	bl	800a5cc <vSetStepperMotorDirection>
	while(!vLimitSwitchActive(MotorId))
 800a808:	e006      	b.n	800a818 <StepperMotorProdTest+0x110>
	{
		vToggleOneStep(MotorId);
 800a80a:	79fb      	ldrb	r3, [r7, #7]
 800a80c:	4618      	mov	r0, r3
 800a80e:	f7ff fdf5 	bl	800a3fc <vToggleOneStep>
		osDelay(5);
 800a812:	2005      	movs	r0, #5
 800a814:	f7fc f851 	bl	80068ba <osDelay>
	while(!vLimitSwitchActive(MotorId))
 800a818:	79fb      	ldrb	r3, [r7, #7]
 800a81a:	4618      	mov	r0, r3
 800a81c:	f7ff fe26 	bl	800a46c <vLimitSwitchActive>
 800a820:	4603      	mov	r3, r0
 800a822:	f083 0301 	eor.w	r3, r3, #1
 800a826:	b2db      	uxtb	r3, r3
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d1ee      	bne.n	800a80a <StepperMotorProdTest+0x102>
	}
	vSetStepperMotorDirection(MotorId, Opening);
 800a82c:	79fb      	ldrb	r3, [r7, #7]
 800a82e:	2101      	movs	r1, #1
 800a830:	4618      	mov	r0, r3
 800a832:	f7ff fecb 	bl	800a5cc <vSetStepperMotorDirection>
	for (i=0;i<=stepToFull/3;i++)
 800a836:	2300      	movs	r3, #0
 800a838:	60fb      	str	r3, [r7, #12]
 800a83a:	e009      	b.n	800a850 <StepperMotorProdTest+0x148>
	{
		vToggleOneStep(MotorId);
 800a83c:	79fb      	ldrb	r3, [r7, #7]
 800a83e:	4618      	mov	r0, r3
 800a840:	f7ff fddc 	bl	800a3fc <vToggleOneStep>
		osDelay(5);
 800a844:	2005      	movs	r0, #5
 800a846:	f7fc f838 	bl	80068ba <osDelay>
	for (i=0;i<=stepToFull/3;i++)
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	3301      	adds	r3, #1
 800a84e:	60fb      	str	r3, [r7, #12]
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	4a08      	ldr	r2, [pc, #32]	; (800a874 <StepperMotorProdTest+0x16c>)
 800a854:	fb82 1203 	smull	r1, r2, r2, r3
 800a858:	17db      	asrs	r3, r3, #31
 800a85a:	1ad3      	subs	r3, r2, r3
 800a85c:	68fa      	ldr	r2, [r7, #12]
 800a85e:	429a      	cmp	r2, r3
 800a860:	ddec      	ble.n	800a83c <StepperMotorProdTest+0x134>
	}
	vDisableStepper(MotorId);
 800a862:	79fb      	ldrb	r3, [r7, #7]
 800a864:	4618      	mov	r0, r3
 800a866:	f7ff fe91 	bl	800a58c <vDisableStepper>
}
 800a86a:	bf00      	nop
 800a86c:	3710      	adds	r7, #16
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	55555556 	.word	0x55555556

0800a878 <AllMotorToZero>:
void AllMotorToZero()
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
	int i=0;
 800a87e:	2300      	movs	r3, #0
 800a880:	607b      	str	r3, [r7, #4]

	for(i=0;i<NumberOfMotors;i++)
 800a882:	2300      	movs	r3, #0
 800a884:	607b      	str	r3, [r7, #4]
 800a886:	e038      	b.n	800a8fa <AllMotorToZero+0x82>
	{
		vEnableStepper(i);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	4618      	mov	r0, r3
 800a88e:	f7ff fe17 	bl	800a4c0 <vEnableStepper>
		vSetStepperMotorDirection(i, Opening);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	b2db      	uxtb	r3, r3
 800a896:	2101      	movs	r1, #1
 800a898:	4618      	mov	r0, r3
 800a89a:	f7ff fe97 	bl	800a5cc <vSetStepperMotorDirection>
		while(vLimitSwitchActive(i))
 800a89e:	e007      	b.n	800a8b0 <AllMotorToZero+0x38>
		{
			vToggleOneStep(i);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7ff fda9 	bl	800a3fc <vToggleOneStep>
			osDelay(5);
 800a8aa:	2005      	movs	r0, #5
 800a8ac:	f7fc f805 	bl	80068ba <osDelay>
		while(vLimitSwitchActive(i))
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	b2db      	uxtb	r3, r3
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7ff fdd9 	bl	800a46c <vLimitSwitchActive>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d1ef      	bne.n	800a8a0 <AllMotorToZero+0x28>
		}
		vSetStepperMotorDirection(i, Closing);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	b2db      	uxtb	r3, r3
 800a8c4:	2100      	movs	r1, #0
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7ff fe80 	bl	800a5cc <vSetStepperMotorDirection>
		while(!vLimitSwitchActive(i))
 800a8cc:	e007      	b.n	800a8de <AllMotorToZero+0x66>
		{
			vToggleOneStep(i);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7ff fd92 	bl	800a3fc <vToggleOneStep>
			osDelay(5);
 800a8d8:	2005      	movs	r0, #5
 800a8da:	f7fb ffee 	bl	80068ba <osDelay>
		while(!vLimitSwitchActive(i))
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f7ff fdc2 	bl	800a46c <vLimitSwitchActive>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	f083 0301 	eor.w	r3, r3, #1
 800a8ee:	b2db      	uxtb	r3, r3
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d1ec      	bne.n	800a8ce <AllMotorToZero+0x56>
	for(i=0;i<NumberOfMotors;i++)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	3301      	adds	r3, #1
 800a8f8:	607b      	str	r3, [r7, #4]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	ddc3      	ble.n	800a888 <AllMotorToZero+0x10>
		}
	}
}
 800a900:	bf00      	nop
 800a902:	bf00      	nop
 800a904:	3708      	adds	r7, #8
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}

0800a90a <initPID>:
    return (pTerm + dTerm + iTerm); //iTerm +

}

void initPID(PIDtype* pid, float ki, float kd, float kp,int iErrorMax, int iErrorMin)
{
 800a90a:	b480      	push	{r7}
 800a90c:	b085      	sub	sp, #20
 800a90e:	af00      	add	r7, sp, #0
 800a910:	60f8      	str	r0, [r7, #12]
 800a912:	60b9      	str	r1, [r7, #8]
 800a914:	607a      	str	r2, [r7, #4]
 800a916:	603b      	str	r3, [r7, #0]
	pid->dLastValue = 0;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2200      	movs	r2, #0
 800a91c:	601a      	str	r2, [r3, #0]
	pid->iErrorMax = iErrorMax;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	69ba      	ldr	r2, [r7, #24]
 800a922:	609a      	str	r2, [r3, #8]
	pid->iErrorMin = iErrorMin;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	69fa      	ldr	r2, [r7, #28]
 800a928:	60da      	str	r2, [r3, #12]
	pid->previousError = 0;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2200      	movs	r2, #0
 800a92e:	611a      	str	r2, [r3, #16]
	pid->kd = kd;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	687a      	ldr	r2, [r7, #4]
 800a934:	61da      	str	r2, [r3, #28]
	pid->ki = ki;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	68ba      	ldr	r2, [r7, #8]
 800a93a:	619a      	str	r2, [r3, #24]
	pid->kp = kp;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	683a      	ldr	r2, [r7, #0]
 800a940:	615a      	str	r2, [r3, #20]
	pid->PIDPosition = 0;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2200      	movs	r2, #0
 800a946:	621a      	str	r2, [r3, #32]
}
 800a948:	bf00      	nop
 800a94a:	3714      	adds	r7, #20
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bc80      	pop	{r7}
 800a950:	4770      	bx	lr
	...

0800a954 <TestButtonWalkthrough>:
//static Test* pTestState = &TestList[MOTOR_SPEED1_TEST];
static Test TestState = COMPLETED;
Test getTestState();

void TestButtonWalkthrough(Test* pteststate)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
	static int debounceCounter=0;

	//function used to "harshly" debounce with timer and stuff for production testing
	if(GPIO_PIN_SET==HAL_GPIO_ReadPin(Button_input_GPIO_Port,Button_input_Pin))
 800a95c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a960:	4819      	ldr	r0, [pc, #100]	; (800a9c8 <TestButtonWalkthrough+0x74>)
 800a962:	f7f8 f893 	bl	8002a8c <HAL_GPIO_ReadPin>
 800a966:	4603      	mov	r3, r0
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d125      	bne.n	800a9b8 <TestButtonWalkthrough+0x64>
	{
		debounceCounter++;
 800a96c:	4b17      	ldr	r3, [pc, #92]	; (800a9cc <TestButtonWalkthrough+0x78>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	3301      	adds	r3, #1
 800a972:	4a16      	ldr	r2, [pc, #88]	; (800a9cc <TestButtonWalkthrough+0x78>)
 800a974:	6013      	str	r3, [r2, #0]
		if(debounceCounter > 1)
 800a976:	4b15      	ldr	r3, [pc, #84]	; (800a9cc <TestButtonWalkthrough+0x78>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	dd1f      	ble.n	800a9be <TestButtonWalkthrough+0x6a>
		{
			(*pteststate)++; //increment the test sequence.
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	781b      	ldrb	r3, [r3, #0]
 800a982:	3301      	adds	r3, #1
 800a984:	b2da      	uxtb	r2, r3
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	701a      	strb	r2, [r3, #0]
			if(*pteststate >=NB_OF_TEST)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	781b      	ldrb	r3, [r3, #0]
 800a98e:	2b08      	cmp	r3, #8
 800a990:	d905      	bls.n	800a99e <TestButtonWalkthrough+0x4a>
			{
				*pteststate = 0;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2200      	movs	r2, #0
 800a996:	701a      	strb	r2, [r3, #0]
				Algo_setState(ZEROING_STEPPER);
 800a998:	2000      	movs	r0, #0
 800a99a:	f001 fe05 	bl	800c5a8 <Algo_setState>
			}
			debounceCounter = 0 ;
 800a99e:	4b0b      	ldr	r3, [pc, #44]	; (800a9cc <TestButtonWalkthrough+0x78>)
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	601a      	str	r2, [r3, #0]
			while(GPIO_PIN_SET==HAL_GPIO_ReadPin(Button_input_GPIO_Port,Button_input_Pin)){}; // stay here if button is maintained
 800a9a4:	bf00      	nop
 800a9a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a9aa:	4807      	ldr	r0, [pc, #28]	; (800a9c8 <TestButtonWalkthrough+0x74>)
 800a9ac:	f7f8 f86e 	bl	8002a8c <HAL_GPIO_ReadPin>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	d0f7      	beq.n	800a9a6 <TestButtonWalkthrough+0x52>
	}
	else
	{
		debounceCounter =0;
	}
}
 800a9b6:	e002      	b.n	800a9be <TestButtonWalkthrough+0x6a>
		debounceCounter =0;
 800a9b8:	4b04      	ldr	r3, [pc, #16]	; (800a9cc <TestButtonWalkthrough+0x78>)
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	601a      	str	r2, [r3, #0]
}
 800a9be:	bf00      	nop
 800a9c0:	3708      	adds	r7, #8
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
 800a9c6:	bf00      	nop
 800a9c8:	40010c00 	.word	0x40010c00
 800a9cc:	20002338 	.word	0x20002338

0800a9d0 <TestRunner>:

void TestRunner()
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	af00      	add	r7, sp, #0
	//pTestState = &TestList[MOTOR_SPEED1_TEST];
	// we are going to use the status led to encode the test step

	switch (TestState) {
 800a9d4:	4b2c      	ldr	r3, [pc, #176]	; (800aa88 <TestRunner+0xb8>)
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	2b08      	cmp	r3, #8
 800a9da:	d851      	bhi.n	800aa80 <TestRunner+0xb0>
 800a9dc:	a201      	add	r2, pc, #4	; (adr r2, 800a9e4 <TestRunner+0x14>)
 800a9de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e2:	bf00      	nop
 800a9e4:	0800aa09 	.word	0x0800aa09
 800a9e8:	0800aa11 	.word	0x0800aa11
 800a9ec:	0800aa1f 	.word	0x0800aa1f
 800a9f0:	0800aa2d 	.word	0x0800aa2d
 800a9f4:	0800aa35 	.word	0x0800aa35
 800a9f8:	0800aa3d 	.word	0x0800aa3d
 800a9fc:	0800aa57 	.word	0x0800aa57
 800aa00:	0800aa71 	.word	0x0800aa71
 800aa04:	0800aa79 	.word	0x0800aa79
		case COMPLETED:
			//setStatusBit(TestState);
			TestButtonWalkthrough(&TestState);
 800aa08:	481f      	ldr	r0, [pc, #124]	; (800aa88 <TestRunner+0xb8>)
 800aa0a:	f7ff ffa3 	bl	800a954 <TestButtonWalkthrough>
			break;
 800aa0e:	e038      	b.n	800aa82 <TestRunner+0xb2>
		case MOTOR_SPEED1_TEST:
			vSetSpeed(1);
 800aa10:	2001      	movs	r0, #1
 800aa12:	f7ff fe11 	bl	800a638 <vSetSpeed>
			//setStatusBit(TestState);
			TestButtonWalkthrough(&TestState);
 800aa16:	481c      	ldr	r0, [pc, #112]	; (800aa88 <TestRunner+0xb8>)
 800aa18:	f7ff ff9c 	bl	800a954 <TestButtonWalkthrough>
			break;
 800aa1c:	e031      	b.n	800aa82 <TestRunner+0xb2>
		case THERMO_REAR_TEST:
			vSetSpeed(0);
 800aa1e:	2000      	movs	r0, #0
 800aa20:	f7ff fe0a 	bl	800a638 <vSetSpeed>
			//setStatusBit(1);
			TestButtonWalkthrough(&TestState);
 800aa24:	4818      	ldr	r0, [pc, #96]	; (800aa88 <TestRunner+0xb8>)
 800aa26:	f7ff ff95 	bl	800a954 <TestButtonWalkthrough>
			break;
 800aa2a:	e02a      	b.n	800aa82 <TestRunner+0xb2>
		case THERMO_BAFFLE_TEST:
			//setStatusBit(2);
			TestButtonWalkthrough(&TestState);
 800aa2c:	4816      	ldr	r0, [pc, #88]	; (800aa88 <TestRunner+0xb8>)
 800aa2e:	f7ff ff91 	bl	800a954 <TestButtonWalkthrough>
			break;
 800aa32:	e026      	b.n	800aa82 <TestRunner+0xb2>
		case PLENUM_RTD_TEST:
			//setStatusBit(3);
			TestButtonWalkthrough(&TestState);
 800aa34:	4814      	ldr	r0, [pc, #80]	; (800aa88 <TestRunner+0xb8>)
 800aa36:	f7ff ff8d 	bl	800a954 <TestButtonWalkthrough>
			break;
 800aa3a:	e022      	b.n	800aa82 <TestRunner+0xb2>
		case STEPPER_MOTOR1_TEST:
			//setStatusBit(4);
			StepperMotorProdTest(PrimaryStepper);
 800aa3c:	2000      	movs	r0, #0
 800aa3e:	f7ff fe63 	bl	800a708 <StepperMotorProdTest>
			TestButtonWalkthrough(&TestState);
 800aa42:	4811      	ldr	r0, [pc, #68]	; (800aa88 <TestRunner+0xb8>)
 800aa44:	f7ff ff86 	bl	800a954 <TestButtonWalkthrough>
			TestState++;
 800aa48:	4b0f      	ldr	r3, [pc, #60]	; (800aa88 <TestRunner+0xb8>)
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	b2da      	uxtb	r2, r3
 800aa50:	4b0d      	ldr	r3, [pc, #52]	; (800aa88 <TestRunner+0xb8>)
 800aa52:	701a      	strb	r2, [r3, #0]
			break;
 800aa54:	e015      	b.n	800aa82 <TestRunner+0xb2>
		case STEPPER_MOTOR2_TEST:
			//setStatusBit(5);
			StepperMotorProdTest(BoostStepper);
 800aa56:	2001      	movs	r0, #1
 800aa58:	f7ff fe56 	bl	800a708 <StepperMotorProdTest>
			TestButtonWalkthrough(&TestState);
 800aa5c:	480a      	ldr	r0, [pc, #40]	; (800aa88 <TestRunner+0xb8>)
 800aa5e:	f7ff ff79 	bl	800a954 <TestButtonWalkthrough>
			TestState++;
 800aa62:	4b09      	ldr	r3, [pc, #36]	; (800aa88 <TestRunner+0xb8>)
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	3301      	adds	r3, #1
 800aa68:	b2da      	uxtb	r2, r3
 800aa6a:	4b07      	ldr	r3, [pc, #28]	; (800aa88 <TestRunner+0xb8>)
 800aa6c:	701a      	strb	r2, [r3, #0]
			break;
 800aa6e:	e008      	b.n	800aa82 <TestRunner+0xb2>
		case THERMOSTAT_TEST:
			//setStatusBit(6);
			TestButtonWalkthrough(&TestState);
 800aa70:	4805      	ldr	r0, [pc, #20]	; (800aa88 <TestRunner+0xb8>)
 800aa72:	f7ff ff6f 	bl	800a954 <TestButtonWalkthrough>
			break;
 800aa76:	e004      	b.n	800aa82 <TestRunner+0xb2>
		case INTERLOCK_TEST:
			//setStatusBit(7);
			TestButtonWalkthrough(&TestState);
 800aa78:	4803      	ldr	r0, [pc, #12]	; (800aa88 <TestRunner+0xb8>)
 800aa7a:	f7ff ff6b 	bl	800a954 <TestButtonWalkthrough>
			break;
 800aa7e:	e000      	b.n	800aa82 <TestRunner+0xb2>
		default:
			break;
 800aa80:	bf00      	nop
	}
}
 800aa82:	bf00      	nop
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	20002335 	.word	0x20002335

0800aa8c <getTestState>:
Test getTestState()
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	af00      	add	r7, sp, #0
	return TestState;
 800aa90:	4b02      	ldr	r3, [pc, #8]	; (800aa9c <getTestState+0x10>)
 800aa92:	781b      	ldrb	r3, [r3, #0]
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bc80      	pop	{r7}
 800aa9a:	4770      	bx	lr
 800aa9c:	20002335 	.word	0x20002335

0800aaa0 <TemperatureManager>:
/* USER CODE END Header_TemperatureManager */
uint8_t dummy =0;


void TemperatureManager(void const * argument)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b096      	sub	sp, #88	; 0x58
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TemperatureManager */

	osSemaphoreDef(I2CSemaphoreHandle);
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aaac:	2300      	movs	r3, #0
 800aaae:	643b      	str	r3, [r7, #64]	; 0x40
    I2CSemaphoreHandle = osSemaphoreCreate(osSemaphore(I2CSemaphoreHandle), 1);
 800aab0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800aab4:	2101      	movs	r1, #1
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7fb ff84 	bl	80069c4 <osSemaphoreCreate>
 800aabc:	4603      	mov	r3, r0
 800aabe:	4aa8      	ldr	r2, [pc, #672]	; (800ad60 <TemperatureManager+0x2c0>)
 800aac0:	6013      	str	r3, [r2, #0]
    osSemaphoreWait(I2CSemaphoreHandle,1); //decrement semaphore value for the lack of way to create a semaphore with a count of 0.
 800aac2:	4ba7      	ldr	r3, [pc, #668]	; (800ad60 <TemperatureManager+0x2c0>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	2101      	movs	r1, #1
 800aac8:	4618      	mov	r0, r3
 800aaca:	f7fb ffad 	bl	8006a28 <osSemaphoreWait>

    uint8_t ADCConfigByte[NUMBER_OF_ADC_CH] = {0x9F,0xBF,0xDC,0xFF}; // Channel 3 is for RTD,Gain=1 //channel 4 is for the pressure sensor, Gain =1
 800aace:	4ba5      	ldr	r3, [pc, #660]	; (800ad64 <TemperatureManager+0x2c4>)
 800aad0:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t i32tempReading=0;
 800aad2:	2300      	movs	r3, #0
 800aad4:	657b      	str	r3, [r7, #84]	; 0x54
    int i =0;
 800aad6:	2300      	movs	r3, #0
 800aad8:	653b      	str	r3, [r7, #80]	; 0x50
    float AdcArray[NUMBER_OF_ADC_CH];
    float TemperatureCelsius[NUMBER_OF_ADC_CH-1];
    float TemperatureFarenheit[NUMBER_OF_ADC_CH-1];
	float tColdJunction;
	float temp1;
    uint32_t PreviousWakeTime = osKernelSysTick(); //must be nitialized before first use
 800aada:	f7fb fe92 	bl	8006802 <osKernelSysTick>
 800aade:	4603      	mov	r3, r0
 800aae0:	60bb      	str	r3, [r7, #8]
    bool DataReady;

    /* Infinite loop */
    for(;;)
    {
    	osDelayUntil(&PreviousWakeTime,5000);
 800aae2:	f107 0308 	add.w	r3, r7, #8
 800aae6:	f241 3188 	movw	r1, #5000	; 0x1388
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7fc f820 	bl	8006b30 <osDelayUntil>
    	HAL_GPIO_TogglePin(USB_LED_GPIO_Port,USB_LED_Pin);
 800aaf0:	2102      	movs	r1, #2
 800aaf2:	489d      	ldr	r0, [pc, #628]	; (800ad68 <TemperatureManager+0x2c8>)
 800aaf4:	f7f7 fff9 	bl	8002aea <HAL_GPIO_TogglePin>

    	//coldjunction temperature
		temp1 = uCAdcData[1]*3.3/4096;  //Vout=TC x TA + VoC where TC = 10mV/C V0C->500mV
 800aaf8:	4b9c      	ldr	r3, [pc, #624]	; (800ad6c <TemperatureManager+0x2cc>)
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7f5 fcd9 	bl	80004b4 <__aeabi_ui2d>
 800ab02:	a391      	add	r3, pc, #580	; (adr r3, 800ad48 <TemperatureManager+0x2a8>)
 800ab04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab08:	f7f5 fd4e 	bl	80005a8 <__aeabi_dmul>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	460b      	mov	r3, r1
 800ab10:	4610      	mov	r0, r2
 800ab12:	4619      	mov	r1, r3
 800ab14:	f04f 0200 	mov.w	r2, #0
 800ab18:	4b95      	ldr	r3, [pc, #596]	; (800ad70 <TemperatureManager+0x2d0>)
 800ab1a:	f7f5 fe6f 	bl	80007fc <__aeabi_ddiv>
 800ab1e:	4602      	mov	r2, r0
 800ab20:	460b      	mov	r3, r1
 800ab22:	4610      	mov	r0, r2
 800ab24:	4619      	mov	r1, r3
 800ab26:	f7f5 ffef 	bl	8000b08 <__aeabi_d2f>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	64bb      	str	r3, [r7, #72]	; 0x48
		tColdJunction = (temp1-0.500)/.010;
 800ab2e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ab30:	f7f5 fce2 	bl	80004f8 <__aeabi_f2d>
 800ab34:	f04f 0200 	mov.w	r2, #0
 800ab38:	4b8e      	ldr	r3, [pc, #568]	; (800ad74 <TemperatureManager+0x2d4>)
 800ab3a:	f7f5 fb7d 	bl	8000238 <__aeabi_dsub>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	460b      	mov	r3, r1
 800ab42:	4610      	mov	r0, r2
 800ab44:	4619      	mov	r1, r3
 800ab46:	a382      	add	r3, pc, #520	; (adr r3, 800ad50 <TemperatureManager+0x2b0>)
 800ab48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4c:	f7f5 fe56 	bl	80007fc <__aeabi_ddiv>
 800ab50:	4602      	mov	r2, r0
 800ab52:	460b      	mov	r3, r1
 800ab54:	4610      	mov	r0, r2
 800ab56:	4619      	mov	r1, r3
 800ab58:	f7f5 ffd6 	bl	8000b08 <__aeabi_d2f>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	647b      	str	r3, [r7, #68]	; 0x44

		for (i=FrontThermocouple;i<PlenumRtd;i++) //we don't need to read ADC input 3 and 4
 800ab60:	2300      	movs	r3, #0
 800ab62:	653b      	str	r3, [r7, #80]	; 0x50
 800ab64:	e0ba      	b.n	800acdc <TemperatureManager+0x23c>
		{

			HAL_I2C_Master_Transmit_IT(&hi2c1, ADC_ADDRESS_7BIT,&ADCConfigByte[i],1);
 800ab66:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800ab6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab6c:	441a      	add	r2, r3
 800ab6e:	2301      	movs	r3, #1
 800ab70:	21d0      	movs	r1, #208	; 0xd0
 800ab72:	4881      	ldr	r0, [pc, #516]	; (800ad78 <TemperatureManager+0x2d8>)
 800ab74:	f7f8 f93e 	bl	8002df4 <HAL_I2C_Master_Transmit_IT>
			//osSemaphoreWait(I2CSemaphoreHandle,osWaitForever); //wait forever @@@@ to restart and I2C transaction in case of hang up sys
			if(osErrorOS == osSemaphoreWait(I2CSemaphoreHandle,1000)) //wait 500ms for an answer or retry
 800ab78:	4b79      	ldr	r3, [pc, #484]	; (800ad60 <TemperatureManager+0x2c0>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ab80:	4618      	mov	r0, r3
 800ab82:	f7fb ff51 	bl	8006a28 <osSemaphoreWait>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2bff      	cmp	r3, #255	; 0xff
 800ab8a:	d10f      	bne.n	800abac <TemperatureManager+0x10c>
			{
				//clearly something is wrong Abort the transmission
				HAL_I2C_Master_Abort_IT(&hi2c1,ADC_ADDRESS_7BIT);
 800ab8c:	21d0      	movs	r1, #208	; 0xd0
 800ab8e:	487a      	ldr	r0, [pc, #488]	; (800ad78 <TemperatureManager+0x2d8>)
 800ab90:	f7f8 fa80 	bl	8003094 <HAL_I2C_Master_Abort_IT>
				HAL_I2C_DeInit(&hi2c1);
 800ab94:	4878      	ldr	r0, [pc, #480]	; (800ad78 <TemperatureManager+0x2d8>)
 800ab96:	f7f8 f8fd 	bl	8002d94 <HAL_I2C_DeInit>
				osDelay(100);
 800ab9a:	2064      	movs	r0, #100	; 0x64
 800ab9c:	f7fb fe8d 	bl	80068ba <osDelay>
				MX_I2C1_Init();
 800aba0:	f002 f9fa 	bl	800cf98 <MX_I2C1_Init>
				osDelay(100);
 800aba4:	2064      	movs	r0, #100	; 0x64
 800aba6:	f7fb fe88 	bl	80068ba <osDelay>
 800abaa:	e028      	b.n	800abfe <TemperatureManager+0x15e>
			}
			else
			{
				//do something in the callback
				do{
					DataReady = false;
 800abac:	2300      	movs	r3, #0
 800abae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					osDelay(300); //wait to give the chance to the ADC to complete the conversion 1/3.75 = 266ms
 800abb2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800abb6:	f7fb fe80 	bl	80068ba <osDelay>
					HAL_I2C_Master_Receive_IT(&hi2c1, ADC_ADDRESS_7BIT,adcData,4);
 800abba:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800abbe:	2304      	movs	r3, #4
 800abc0:	21d0      	movs	r1, #208	; 0xd0
 800abc2:	486d      	ldr	r0, [pc, #436]	; (800ad78 <TemperatureManager+0x2d8>)
 800abc4:	f7f8 f9ba 	bl	8002f3c <HAL_I2C_Master_Receive_IT>
					//osSemaphoreWait(I2CSemaphoreHandle,osWaitForever); //wait forever @@@@ to restart and I2C transaction in case of hang up sys
					if(osErrorOS == osSemaphoreWait(I2CSemaphoreHandle,500)) //wait 500ms for an answer or retry
 800abc8:	4b65      	ldr	r3, [pc, #404]	; (800ad60 <TemperatureManager+0x2c0>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800abd0:	4618      	mov	r0, r3
 800abd2:	f7fb ff29 	bl	8006a28 <osSemaphoreWait>
 800abd6:	4603      	mov	r3, r0
 800abd8:	2bff      	cmp	r3, #255	; 0xff
 800abda:	d008      	beq.n	800abee <TemperatureManager+0x14e>
					{
						continue;
					}
					else
					{
						DataReady = (IsDataNew(adcData[3]));
 800abdc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800abe0:	b25b      	sxtb	r3, r3
 800abe2:	43db      	mvns	r3, r3
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	09db      	lsrs	r3, r3, #7
 800abe8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800abec:	e000      	b.n	800abf0 <TemperatureManager+0x150>
						continue;
 800abee:	bf00      	nop
					}

				}while (!DataReady);
 800abf0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800abf4:	f083 0301 	eor.w	r3, r3, #1
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d1d6      	bne.n	800abac <TemperatureManager+0x10c>
			}
			i32tempReading = 0;
 800abfe:	2300      	movs	r3, #0
 800ac00:	657b      	str	r3, [r7, #84]	; 0x54
			i32tempReading = (adcData[0] << 30) + (adcData[1] << 22)  + (adcData[2] << 14); // justify the result for 32bit storage
 800ac02:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800ac06:	079a      	lsls	r2, r3, #30
 800ac08:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800ac0c:	059b      	lsls	r3, r3, #22
 800ac0e:	441a      	add	r2, r3
 800ac10:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ac14:	039b      	lsls	r3, r3, #14
 800ac16:	4413      	add	r3, r2
 800ac18:	657b      	str	r3, [r7, #84]	; 0x54
			if (i32tempReading < 0){
 800ac1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	da02      	bge.n	800ac26 <TemperatureManager+0x186>
				i32tempReading = -i32tempReading;
 800ac20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac22:	425b      	negs	r3, r3
 800ac24:	657b      	str	r3, [r7, #84]	; 0x54
			}
			i32tempReading = (i32tempReading) >> 14;
 800ac26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac28:	139b      	asrs	r3, r3, #14
 800ac2a:	657b      	str	r3, [r7, #84]	; 0x54

			//AdcArray[i] = ((float)(abs(i32tempReading))*15.625)/8; //15.625uV par bit  gain = 8
			AdcArray[i] = ((float)(i32tempReading)*15.625)/8; //15.625uV par bit  gain = 8
 800ac2c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ac2e:	f7f6 f875 	bl	8000d1c <__aeabi_i2f>
 800ac32:	4603      	mov	r3, r0
 800ac34:	4618      	mov	r0, r3
 800ac36:	f7f5 fc5f 	bl	80004f8 <__aeabi_f2d>
 800ac3a:	f04f 0200 	mov.w	r2, #0
 800ac3e:	4b4f      	ldr	r3, [pc, #316]	; (800ad7c <TemperatureManager+0x2dc>)
 800ac40:	f7f5 fcb2 	bl	80005a8 <__aeabi_dmul>
 800ac44:	4602      	mov	r2, r0
 800ac46:	460b      	mov	r3, r1
 800ac48:	4610      	mov	r0, r2
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	f04f 0200 	mov.w	r2, #0
 800ac50:	4b4b      	ldr	r3, [pc, #300]	; (800ad80 <TemperatureManager+0x2e0>)
 800ac52:	f7f5 fdd3 	bl	80007fc <__aeabi_ddiv>
 800ac56:	4602      	mov	r2, r0
 800ac58:	460b      	mov	r3, r1
 800ac5a:	4610      	mov	r0, r2
 800ac5c:	4619      	mov	r1, r3
 800ac5e:	f7f5 ff53 	bl	8000b08 <__aeabi_d2f>
 800ac62:	4602      	mov	r2, r0
 800ac64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac66:	009b      	lsls	r3, r3, #2
 800ac68:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ac6c:	440b      	add	r3, r1
 800ac6e:	f843 2c34 	str.w	r2, [r3, #-52]
			TemperatureCelsius[i] = uVtoDegreeCTypeK(AdcArray[i], tColdJunction); //6.7//26.1 //board is self heating to 7.3 above ambient
 800ac72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ac7a:	4413      	add	r3, r2
 800ac7c:	f853 3c34 	ldr.w	r3, [r3, #-52]
 800ac80:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ac82:	4618      	mov	r0, r3
 800ac84:	f000 f914 	bl	800aeb0 <uVtoDegreeCTypeK>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ac92:	440b      	add	r3, r1
 800ac94:	f843 2c40 	str.w	r2, [r3, #-64]
			TemperatureFarenheit[i] = TemperatureCelsius[i]*9/5+32;
 800ac98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800aca0:	4413      	add	r3, r2
 800aca2:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800aca6:	4937      	ldr	r1, [pc, #220]	; (800ad84 <TemperatureManager+0x2e4>)
 800aca8:	4618      	mov	r0, r3
 800acaa:	f7f6 f88b 	bl	8000dc4 <__aeabi_fmul>
 800acae:	4603      	mov	r3, r0
 800acb0:	4935      	ldr	r1, [pc, #212]	; (800ad88 <TemperatureManager+0x2e8>)
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7f6 f93a 	bl	8000f2c <__aeabi_fdiv>
 800acb8:	4603      	mov	r3, r0
 800acba:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7f5 ff78 	bl	8000bb4 <__addsf3>
 800acc4:	4603      	mov	r3, r0
 800acc6:	461a      	mov	r2, r3
 800acc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800acd0:	440b      	add	r3, r1
 800acd2:	f843 2c4c 	str.w	r2, [r3, #-76]
		for (i=FrontThermocouple;i<PlenumRtd;i++) //we don't need to read ADC input 3 and 4
 800acd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acd8:	3301      	adds	r3, #1
 800acda:	653b      	str	r3, [r7, #80]	; 0x50
 800acdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acde:	2b01      	cmp	r3, #1
 800ace0:	f77f af41 	ble.w	800ab66 <TemperatureManager+0xc6>

		}

    	temp1 = uCAdcData[0]*3.3/4096; //12bit internal ADC reference to 3.3V
 800ace4:	4b21      	ldr	r3, [pc, #132]	; (800ad6c <TemperatureManager+0x2cc>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4618      	mov	r0, r3
 800acea:	f7f5 fbe3 	bl	80004b4 <__aeabi_ui2d>
 800acee:	a316      	add	r3, pc, #88	; (adr r3, 800ad48 <TemperatureManager+0x2a8>)
 800acf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf4:	f7f5 fc58 	bl	80005a8 <__aeabi_dmul>
 800acf8:	4602      	mov	r2, r0
 800acfa:	460b      	mov	r3, r1
 800acfc:	4610      	mov	r0, r2
 800acfe:	4619      	mov	r1, r3
 800ad00:	f04f 0200 	mov.w	r2, #0
 800ad04:	4b1a      	ldr	r3, [pc, #104]	; (800ad70 <TemperatureManager+0x2d0>)
 800ad06:	f7f5 fd79 	bl	80007fc <__aeabi_ddiv>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	4610      	mov	r0, r2
 800ad10:	4619      	mov	r1, r3
 800ad12:	f7f5 fef9 	bl	8000b08 <__aeabi_d2f>
 800ad16:	4603      	mov	r3, r0
 800ad18:	64bb      	str	r3, [r7, #72]	; 0x48
		if(temp1 < 1.65)
 800ad1a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ad1c:	f7f5 fbec 	bl	80004f8 <__aeabi_f2d>
 800ad20:	a30d      	add	r3, pc, #52	; (adr r3, 800ad58 <TemperatureManager+0x2b8>)
 800ad22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad26:	f7f5 feb1 	bl	8000a8c <__aeabi_dcmplt>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d02d      	beq.n	800ad8c <TemperatureManager+0x2ec>
		{
			//polynome appoximation go nuts below that voltage range
			TemperatureCelsius[i] = 0;
 800ad30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad32:	009b      	lsls	r3, r3, #2
 800ad34:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ad38:	4413      	add	r3, r2
 800ad3a:	f04f 0200 	mov.w	r2, #0
 800ad3e:	f843 2c40 	str.w	r2, [r3, #-64]
 800ad42:	e02e      	b.n	800ada2 <TemperatureManager+0x302>
 800ad44:	f3af 8000 	nop.w
 800ad48:	66666666 	.word	0x66666666
 800ad4c:	400a6666 	.word	0x400a6666
 800ad50:	47ae147b 	.word	0x47ae147b
 800ad54:	3f847ae1 	.word	0x3f847ae1
 800ad58:	66666666 	.word	0x66666666
 800ad5c:	3ffa6666 	.word	0x3ffa6666
 800ad60:	20003148 	.word	0x20003148
 800ad64:	ffdcbf9f 	.word	0xffdcbf9f
 800ad68:	40010c00 	.word	0x40010c00
 800ad6c:	20003150 	.word	0x20003150
 800ad70:	40b00000 	.word	0x40b00000
 800ad74:	3fe00000 	.word	0x3fe00000
 800ad78:	200030f4 	.word	0x200030f4
 800ad7c:	402f4000 	.word	0x402f4000
 800ad80:	40200000 	.word	0x40200000
 800ad84:	41100000 	.word	0x41100000
 800ad88:	40a00000 	.word	0x40a00000
		}
		else
		{
			TemperatureCelsius[i] = VtoDegreeCRtd(temp1);
 800ad8c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ad8e:	f000 fbb3 	bl	800b4f8 <VtoDegreeCRtd>
 800ad92:	4602      	mov	r2, r0
 800ad94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad96:	009b      	lsls	r3, r3, #2
 800ad98:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ad9c:	440b      	add	r3, r1
 800ad9e:	f843 2c40 	str.w	r2, [r3, #-64]
		}
		TemperatureFarenheit[i] = TemperatureCelsius[i]*9/5+32;
 800ada2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ada4:	009b      	lsls	r3, r3, #2
 800ada6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800adaa:	4413      	add	r3, r2
 800adac:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800adb0:	491f      	ldr	r1, [pc, #124]	; (800ae30 <TemperatureManager+0x390>)
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7f6 f806 	bl	8000dc4 <__aeabi_fmul>
 800adb8:	4603      	mov	r3, r0
 800adba:	491e      	ldr	r1, [pc, #120]	; (800ae34 <TemperatureManager+0x394>)
 800adbc:	4618      	mov	r0, r3
 800adbe:	f7f6 f8b5 	bl	8000f2c <__aeabi_fdiv>
 800adc2:	4603      	mov	r3, r0
 800adc4:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 800adc8:	4618      	mov	r0, r3
 800adca:	f7f5 fef3 	bl	8000bb4 <__addsf3>
 800adce:	4603      	mov	r3, r0
 800add0:	461a      	mov	r2, r3
 800add2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800adda:	440b      	add	r3, r1
 800addc:	f843 2c4c 	str.w	r2, [r3, #-76]

		Algo_setBaffleTemp((int)(TemperatureFarenheit[FrontThermocouple]*10));
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	4915      	ldr	r1, [pc, #84]	; (800ae38 <TemperatureManager+0x398>)
 800ade4:	4618      	mov	r0, r3
 800ade6:	f7f5 ffed 	bl	8000dc4 <__aeabi_fmul>
 800adea:	4603      	mov	r3, r0
 800adec:	4618      	mov	r0, r3
 800adee:	f7f6 f9af 	bl	8001150 <__aeabi_f2iz>
 800adf2:	4603      	mov	r3, r0
 800adf4:	4618      	mov	r0, r3
 800adf6:	f001 fbf1 	bl	800c5dc <Algo_setBaffleTemp>
		Algo_setRearTemp((int)(TemperatureFarenheit[RearThermocouple]*10));
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	490e      	ldr	r1, [pc, #56]	; (800ae38 <TemperatureManager+0x398>)
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7f5 ffe0 	bl	8000dc4 <__aeabi_fmul>
 800ae04:	4603      	mov	r3, r0
 800ae06:	4618      	mov	r0, r3
 800ae08:	f7f6 f9a2 	bl	8001150 <__aeabi_f2iz>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f001 fbf8 	bl	800c604 <Algo_setRearTemp>
		Algo_setPlenumTemp((int)(TemperatureFarenheit[PlenumRtd]*10));
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	4908      	ldr	r1, [pc, #32]	; (800ae38 <TemperatureManager+0x398>)
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f7f5 ffd3 	bl	8000dc4 <__aeabi_fmul>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	4618      	mov	r0, r3
 800ae22:	f7f6 f995 	bl	8001150 <__aeabi_f2iz>
 800ae26:	4603      	mov	r3, r0
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f001 fc0d 	bl	800c648 <Algo_setPlenumTemp>
    	osDelayUntil(&PreviousWakeTime,5000);
 800ae2e:	e658      	b.n	800aae2 <TemperatureManager+0x42>
 800ae30:	41100000 	.word	0x41100000
 800ae34:	40a00000 	.word	0x40a00000
 800ae38:	41200000 	.word	0x41200000

0800ae3c <HAL_I2C_MasterTxCpltCallback>:

  	}
  /* USER CODE END TemperatureManager */
}
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(I2CSemaphoreHandle);
 800ae44:	4b04      	ldr	r3, [pc, #16]	; (800ae58 <HAL_I2C_MasterTxCpltCallback+0x1c>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f7fb fe3b 	bl	8006ac4 <osSemaphoreRelease>
}
 800ae4e:	bf00      	nop
 800ae50:	3708      	adds	r7, #8
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	bf00      	nop
 800ae58:	20003148 	.word	0x20003148

0800ae5c <HAL_I2C_MasterRxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b082      	sub	sp, #8
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(I2CSemaphoreHandle);
 800ae64:	4b04      	ldr	r3, [pc, #16]	; (800ae78 <HAL_I2C_MasterRxCpltCallback+0x1c>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7fb fe2b 	bl	8006ac4 <osSemaphoreRelease>
}
 800ae6e:	bf00      	nop
 800ae70:	3708      	adds	r7, #8
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
 800ae76:	bf00      	nop
 800ae78:	20003148 	.word	0x20003148

0800ae7c <HAL_I2C_ErrorCallback>:
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b085      	sub	sp, #20
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
	uint32_t errorcode = hi2c->ErrorCode;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae88:	60fb      	str	r3, [r7, #12]
}
 800ae8a:	bf00      	nop
 800ae8c:	3714      	adds	r7, #20
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bc80      	pop	{r7}
 800ae92:	4770      	bx	lr

0800ae94 <HAL_I2C_AbortCpltCallback>:
void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b085      	sub	sp, #20
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
	uint32_t errorcode = hi2c->ErrorCode;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aea0:	60fb      	str	r3, [r7, #12]
}
 800aea2:	bf00      	nop
 800aea4:	3714      	adds	r7, #20
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bc80      	pop	{r7}
 800aeaa:	4770      	bx	lr
 800aeac:	0000      	movs	r0, r0
	...

0800aeb0 <uVtoDegreeCTypeK>:
#define T_COEF_A0 1.185976E-1
#define T_COEF_A1 -1.183432E-4
#define T_COEF_A2 1.269686E2

float uVtoDegreeCTypeK(float uVdata,float Tref)
{
 800aeb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800aeb4:	b08a      	sub	sp, #40	; 0x28
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
 800aeba:	6039      	str	r1, [r7, #0]
    double Vref = T_COEF_C0 + T_COEF_C1*Tref + T_COEF_C2*pow(Tref,2) + T_COEF_C3*pow(Tref,3) + T_COEF_C4*pow(Tref,4) + T_COEF_C5*pow(Tref,5) + T_COEF_C6*pow(Tref,6) + T_COEF_C7*pow(Tref,7) + T_COEF_C8*pow(Tref,8) + T_COEF_C9*pow(Tref,9)+T_COEF_A0*pow(2.718281828,T_COEF_A1*(Tref-T_COEF_A2)*(Tref-T_COEF_A2));
 800aebc:	6838      	ldr	r0, [r7, #0]
 800aebe:	f7f5 fb1b 	bl	80004f8 <__aeabi_f2d>
 800aec2:	a3cd      	add	r3, pc, #820	; (adr r3, 800b1f8 <uVtoDegreeCTypeK+0x348>)
 800aec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec8:	f7f5 fb6e 	bl	80005a8 <__aeabi_dmul>
 800aecc:	4602      	mov	r2, r0
 800aece:	460b      	mov	r3, r1
 800aed0:	4610      	mov	r0, r2
 800aed2:	4619      	mov	r1, r3
 800aed4:	a3ca      	add	r3, pc, #808	; (adr r3, 800b200 <uVtoDegreeCTypeK+0x350>)
 800aed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeda:	f7f5 f9ad 	bl	8000238 <__aeabi_dsub>
 800aede:	4602      	mov	r2, r0
 800aee0:	460b      	mov	r3, r1
 800aee2:	4614      	mov	r4, r2
 800aee4:	461d      	mov	r5, r3
 800aee6:	6838      	ldr	r0, [r7, #0]
 800aee8:	f7f5 fb06 	bl	80004f8 <__aeabi_f2d>
 800aeec:	f04f 0200 	mov.w	r2, #0
 800aef0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aef4:	f003 fe6c 	bl	800ebd0 <pow>
 800aef8:	a3c3      	add	r3, pc, #780	; (adr r3, 800b208 <uVtoDegreeCTypeK+0x358>)
 800aefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefe:	f7f5 fb53 	bl	80005a8 <__aeabi_dmul>
 800af02:	4602      	mov	r2, r0
 800af04:	460b      	mov	r3, r1
 800af06:	4620      	mov	r0, r4
 800af08:	4629      	mov	r1, r5
 800af0a:	f7f5 f997 	bl	800023c <__adddf3>
 800af0e:	4602      	mov	r2, r0
 800af10:	460b      	mov	r3, r1
 800af12:	4614      	mov	r4, r2
 800af14:	461d      	mov	r5, r3
 800af16:	6838      	ldr	r0, [r7, #0]
 800af18:	f7f5 faee 	bl	80004f8 <__aeabi_f2d>
 800af1c:	f04f 0200 	mov.w	r2, #0
 800af20:	4bdd      	ldr	r3, [pc, #884]	; (800b298 <uVtoDegreeCTypeK+0x3e8>)
 800af22:	f003 fe55 	bl	800ebd0 <pow>
 800af26:	a3ba      	add	r3, pc, #744	; (adr r3, 800b210 <uVtoDegreeCTypeK+0x360>)
 800af28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2c:	f7f5 fb3c 	bl	80005a8 <__aeabi_dmul>
 800af30:	4602      	mov	r2, r0
 800af32:	460b      	mov	r3, r1
 800af34:	4620      	mov	r0, r4
 800af36:	4629      	mov	r1, r5
 800af38:	f7f5 f980 	bl	800023c <__adddf3>
 800af3c:	4602      	mov	r2, r0
 800af3e:	460b      	mov	r3, r1
 800af40:	4614      	mov	r4, r2
 800af42:	461d      	mov	r5, r3
 800af44:	6838      	ldr	r0, [r7, #0]
 800af46:	f7f5 fad7 	bl	80004f8 <__aeabi_f2d>
 800af4a:	f04f 0200 	mov.w	r2, #0
 800af4e:	4bd3      	ldr	r3, [pc, #844]	; (800b29c <uVtoDegreeCTypeK+0x3ec>)
 800af50:	f003 fe3e 	bl	800ebd0 <pow>
 800af54:	a3b0      	add	r3, pc, #704	; (adr r3, 800b218 <uVtoDegreeCTypeK+0x368>)
 800af56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af5a:	f7f5 fb25 	bl	80005a8 <__aeabi_dmul>
 800af5e:	4602      	mov	r2, r0
 800af60:	460b      	mov	r3, r1
 800af62:	4620      	mov	r0, r4
 800af64:	4629      	mov	r1, r5
 800af66:	f7f5 f969 	bl	800023c <__adddf3>
 800af6a:	4602      	mov	r2, r0
 800af6c:	460b      	mov	r3, r1
 800af6e:	4614      	mov	r4, r2
 800af70:	461d      	mov	r5, r3
 800af72:	6838      	ldr	r0, [r7, #0]
 800af74:	f7f5 fac0 	bl	80004f8 <__aeabi_f2d>
 800af78:	f04f 0200 	mov.w	r2, #0
 800af7c:	4bc8      	ldr	r3, [pc, #800]	; (800b2a0 <uVtoDegreeCTypeK+0x3f0>)
 800af7e:	f003 fe27 	bl	800ebd0 <pow>
 800af82:	a3a7      	add	r3, pc, #668	; (adr r3, 800b220 <uVtoDegreeCTypeK+0x370>)
 800af84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af88:	f7f5 fb0e 	bl	80005a8 <__aeabi_dmul>
 800af8c:	4602      	mov	r2, r0
 800af8e:	460b      	mov	r3, r1
 800af90:	4620      	mov	r0, r4
 800af92:	4629      	mov	r1, r5
 800af94:	f7f5 f952 	bl	800023c <__adddf3>
 800af98:	4602      	mov	r2, r0
 800af9a:	460b      	mov	r3, r1
 800af9c:	4614      	mov	r4, r2
 800af9e:	461d      	mov	r5, r3
 800afa0:	6838      	ldr	r0, [r7, #0]
 800afa2:	f7f5 faa9 	bl	80004f8 <__aeabi_f2d>
 800afa6:	f04f 0200 	mov.w	r2, #0
 800afaa:	4bbe      	ldr	r3, [pc, #760]	; (800b2a4 <uVtoDegreeCTypeK+0x3f4>)
 800afac:	f003 fe10 	bl	800ebd0 <pow>
 800afb0:	a39d      	add	r3, pc, #628	; (adr r3, 800b228 <uVtoDegreeCTypeK+0x378>)
 800afb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb6:	f7f5 faf7 	bl	80005a8 <__aeabi_dmul>
 800afba:	4602      	mov	r2, r0
 800afbc:	460b      	mov	r3, r1
 800afbe:	4620      	mov	r0, r4
 800afc0:	4629      	mov	r1, r5
 800afc2:	f7f5 f93b 	bl	800023c <__adddf3>
 800afc6:	4602      	mov	r2, r0
 800afc8:	460b      	mov	r3, r1
 800afca:	4614      	mov	r4, r2
 800afcc:	461d      	mov	r5, r3
 800afce:	6838      	ldr	r0, [r7, #0]
 800afd0:	f7f5 fa92 	bl	80004f8 <__aeabi_f2d>
 800afd4:	f04f 0200 	mov.w	r2, #0
 800afd8:	4bb3      	ldr	r3, [pc, #716]	; (800b2a8 <uVtoDegreeCTypeK+0x3f8>)
 800afda:	f003 fdf9 	bl	800ebd0 <pow>
 800afde:	a394      	add	r3, pc, #592	; (adr r3, 800b230 <uVtoDegreeCTypeK+0x380>)
 800afe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe4:	f7f5 fae0 	bl	80005a8 <__aeabi_dmul>
 800afe8:	4602      	mov	r2, r0
 800afea:	460b      	mov	r3, r1
 800afec:	4620      	mov	r0, r4
 800afee:	4629      	mov	r1, r5
 800aff0:	f7f5 f924 	bl	800023c <__adddf3>
 800aff4:	4602      	mov	r2, r0
 800aff6:	460b      	mov	r3, r1
 800aff8:	4614      	mov	r4, r2
 800affa:	461d      	mov	r5, r3
 800affc:	6838      	ldr	r0, [r7, #0]
 800affe:	f7f5 fa7b 	bl	80004f8 <__aeabi_f2d>
 800b002:	f04f 0200 	mov.w	r2, #0
 800b006:	4ba9      	ldr	r3, [pc, #676]	; (800b2ac <uVtoDegreeCTypeK+0x3fc>)
 800b008:	f003 fde2 	bl	800ebd0 <pow>
 800b00c:	a38a      	add	r3, pc, #552	; (adr r3, 800b238 <uVtoDegreeCTypeK+0x388>)
 800b00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b012:	f7f5 fac9 	bl	80005a8 <__aeabi_dmul>
 800b016:	4602      	mov	r2, r0
 800b018:	460b      	mov	r3, r1
 800b01a:	4620      	mov	r0, r4
 800b01c:	4629      	mov	r1, r5
 800b01e:	f7f5 f90d 	bl	800023c <__adddf3>
 800b022:	4602      	mov	r2, r0
 800b024:	460b      	mov	r3, r1
 800b026:	4614      	mov	r4, r2
 800b028:	461d      	mov	r5, r3
 800b02a:	6838      	ldr	r0, [r7, #0]
 800b02c:	f7f5 fa64 	bl	80004f8 <__aeabi_f2d>
 800b030:	f04f 0200 	mov.w	r2, #0
 800b034:	4b9e      	ldr	r3, [pc, #632]	; (800b2b0 <uVtoDegreeCTypeK+0x400>)
 800b036:	f003 fdcb 	bl	800ebd0 <pow>
 800b03a:	a381      	add	r3, pc, #516	; (adr r3, 800b240 <uVtoDegreeCTypeK+0x390>)
 800b03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b040:	f7f5 fab2 	bl	80005a8 <__aeabi_dmul>
 800b044:	4602      	mov	r2, r0
 800b046:	460b      	mov	r3, r1
 800b048:	4620      	mov	r0, r4
 800b04a:	4629      	mov	r1, r5
 800b04c:	f7f5 f8f6 	bl	800023c <__adddf3>
 800b050:	4602      	mov	r2, r0
 800b052:	460b      	mov	r3, r1
 800b054:	4614      	mov	r4, r2
 800b056:	461d      	mov	r5, r3
 800b058:	6838      	ldr	r0, [r7, #0]
 800b05a:	f7f5 fa4d 	bl	80004f8 <__aeabi_f2d>
 800b05e:	a37a      	add	r3, pc, #488	; (adr r3, 800b248 <uVtoDegreeCTypeK+0x398>)
 800b060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b064:	f7f5 f8e8 	bl	8000238 <__aeabi_dsub>
 800b068:	4602      	mov	r2, r0
 800b06a:	460b      	mov	r3, r1
 800b06c:	4610      	mov	r0, r2
 800b06e:	4619      	mov	r1, r3
 800b070:	a377      	add	r3, pc, #476	; (adr r3, 800b250 <uVtoDegreeCTypeK+0x3a0>)
 800b072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b076:	f7f5 fa97 	bl	80005a8 <__aeabi_dmul>
 800b07a:	4602      	mov	r2, r0
 800b07c:	460b      	mov	r3, r1
 800b07e:	4690      	mov	r8, r2
 800b080:	4699      	mov	r9, r3
 800b082:	6838      	ldr	r0, [r7, #0]
 800b084:	f7f5 fa38 	bl	80004f8 <__aeabi_f2d>
 800b088:	a36f      	add	r3, pc, #444	; (adr r3, 800b248 <uVtoDegreeCTypeK+0x398>)
 800b08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b08e:	f7f5 f8d3 	bl	8000238 <__aeabi_dsub>
 800b092:	4602      	mov	r2, r0
 800b094:	460b      	mov	r3, r1
 800b096:	4640      	mov	r0, r8
 800b098:	4649      	mov	r1, r9
 800b09a:	f7f5 fa85 	bl	80005a8 <__aeabi_dmul>
 800b09e:	4602      	mov	r2, r0
 800b0a0:	460b      	mov	r3, r1
 800b0a2:	a16d      	add	r1, pc, #436	; (adr r1, 800b258 <uVtoDegreeCTypeK+0x3a8>)
 800b0a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0a8:	f003 fd92 	bl	800ebd0 <pow>
 800b0ac:	a36c      	add	r3, pc, #432	; (adr r3, 800b260 <uVtoDegreeCTypeK+0x3b0>)
 800b0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b2:	f7f5 fa79 	bl	80005a8 <__aeabi_dmul>
 800b0b6:	4602      	mov	r2, r0
 800b0b8:	460b      	mov	r3, r1
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	4629      	mov	r1, r5
 800b0be:	f7f5 f8bd 	bl	800023c <__adddf3>
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	460b      	mov	r3, r1
 800b0c6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double Vmeas = uVdata/1000; //value need to be in mV
 800b0ca:	497a      	ldr	r1, [pc, #488]	; (800b2b4 <uVtoDegreeCTypeK+0x404>)
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f7f5 ff2d 	bl	8000f2c <__aeabi_fdiv>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7f5 fa0f 	bl	80004f8 <__aeabi_f2d>
 800b0da:	4602      	mov	r2, r0
 800b0dc:	460b      	mov	r3, r1
 800b0de:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double totalV = Vmeas + Vref;
 800b0e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b0e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b0ea:	f7f5 f8a7 	bl	800023c <__adddf3>
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	460b      	mov	r3, r1
 800b0f2:	e9c7 2302 	strd	r2, r3, [r7, #8]

    double t90;
    if(totalV < 20.644)
 800b0f6:	a35c      	add	r3, pc, #368	; (adr r3, 800b268 <uVtoDegreeCTypeK+0x3b8>)
 800b0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b100:	f7f5 fcc4 	bl	8000a8c <__aeabi_dcmplt>
 800b104:	4603      	mov	r3, r0
 800b106:	2b00      	cmp	r3, #0
 800b108:	f000 812a 	beq.w	800b360 <uVtoDegreeCTypeK+0x4b0>
    {
     t90 = T_COEF_D0_0_500 + T_COEF_D1_0_500 *totalV + T_COEF_D2_0_500 *pow(totalV,2) + T_COEF_D3_0_500 *pow(totalV,3) + T_COEF_D4_0_500 *pow(totalV,4) + T_COEF_D5_0_500 *pow(totalV,5) + T_COEF_D6_0_500 *pow(totalV,6) + T_COEF_D7_0_500 *pow(totalV,7) + T_COEF_D8_0_500 *pow(totalV,8) + T_COEF_D9_0_500 *pow(totalV,9);
 800b10c:	a358      	add	r3, pc, #352	; (adr r3, 800b270 <uVtoDegreeCTypeK+0x3c0>)
 800b10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b112:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b116:	f7f5 fa47 	bl	80005a8 <__aeabi_dmul>
 800b11a:	4602      	mov	r2, r0
 800b11c:	460b      	mov	r3, r1
 800b11e:	4610      	mov	r0, r2
 800b120:	4619      	mov	r1, r3
 800b122:	f04f 0200 	mov.w	r2, #0
 800b126:	f04f 0300 	mov.w	r3, #0
 800b12a:	f7f5 f887 	bl	800023c <__adddf3>
 800b12e:	4602      	mov	r2, r0
 800b130:	460b      	mov	r3, r1
 800b132:	4614      	mov	r4, r2
 800b134:	461d      	mov	r5, r3
 800b136:	f04f 0200 	mov.w	r2, #0
 800b13a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b13e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b142:	f003 fd45 	bl	800ebd0 <pow>
 800b146:	a34c      	add	r3, pc, #304	; (adr r3, 800b278 <uVtoDegreeCTypeK+0x3c8>)
 800b148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14c:	f7f5 fa2c 	bl	80005a8 <__aeabi_dmul>
 800b150:	4602      	mov	r2, r0
 800b152:	460b      	mov	r3, r1
 800b154:	4620      	mov	r0, r4
 800b156:	4629      	mov	r1, r5
 800b158:	f7f5 f870 	bl	800023c <__adddf3>
 800b15c:	4602      	mov	r2, r0
 800b15e:	460b      	mov	r3, r1
 800b160:	4614      	mov	r4, r2
 800b162:	461d      	mov	r5, r3
 800b164:	f04f 0200 	mov.w	r2, #0
 800b168:	4b4b      	ldr	r3, [pc, #300]	; (800b298 <uVtoDegreeCTypeK+0x3e8>)
 800b16a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b16e:	f003 fd2f 	bl	800ebd0 <pow>
 800b172:	a343      	add	r3, pc, #268	; (adr r3, 800b280 <uVtoDegreeCTypeK+0x3d0>)
 800b174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b178:	f7f5 fa16 	bl	80005a8 <__aeabi_dmul>
 800b17c:	4602      	mov	r2, r0
 800b17e:	460b      	mov	r3, r1
 800b180:	4620      	mov	r0, r4
 800b182:	4629      	mov	r1, r5
 800b184:	f7f5 f85a 	bl	800023c <__adddf3>
 800b188:	4602      	mov	r2, r0
 800b18a:	460b      	mov	r3, r1
 800b18c:	4614      	mov	r4, r2
 800b18e:	461d      	mov	r5, r3
 800b190:	f04f 0200 	mov.w	r2, #0
 800b194:	4b41      	ldr	r3, [pc, #260]	; (800b29c <uVtoDegreeCTypeK+0x3ec>)
 800b196:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b19a:	f003 fd19 	bl	800ebd0 <pow>
 800b19e:	a33a      	add	r3, pc, #232	; (adr r3, 800b288 <uVtoDegreeCTypeK+0x3d8>)
 800b1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a4:	f7f5 fa00 	bl	80005a8 <__aeabi_dmul>
 800b1a8:	4602      	mov	r2, r0
 800b1aa:	460b      	mov	r3, r1
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	4629      	mov	r1, r5
 800b1b0:	f7f5 f844 	bl	800023c <__adddf3>
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	460b      	mov	r3, r1
 800b1b8:	4614      	mov	r4, r2
 800b1ba:	461d      	mov	r5, r3
 800b1bc:	f04f 0200 	mov.w	r2, #0
 800b1c0:	4b37      	ldr	r3, [pc, #220]	; (800b2a0 <uVtoDegreeCTypeK+0x3f0>)
 800b1c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b1c6:	f003 fd03 	bl	800ebd0 <pow>
 800b1ca:	a331      	add	r3, pc, #196	; (adr r3, 800b290 <uVtoDegreeCTypeK+0x3e0>)
 800b1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d0:	f7f5 f9ea 	bl	80005a8 <__aeabi_dmul>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	460b      	mov	r3, r1
 800b1d8:	4620      	mov	r0, r4
 800b1da:	4629      	mov	r1, r5
 800b1dc:	f7f5 f82e 	bl	800023c <__adddf3>
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	460b      	mov	r3, r1
 800b1e4:	4614      	mov	r4, r2
 800b1e6:	461d      	mov	r5, r3
 800b1e8:	f04f 0200 	mov.w	r2, #0
 800b1ec:	4b2d      	ldr	r3, [pc, #180]	; (800b2a4 <uVtoDegreeCTypeK+0x3f4>)
 800b1ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b1f2:	e061      	b.n	800b2b8 <uVtoDegreeCTypeK+0x408>
 800b1f4:	f3af 8000 	nop.w
 800b1f8:	ecfa2196 	.word	0xecfa2196
 800b1fc:	3fa3ed7a 	.word	0x3fa3ed7a
 800b200:	c4b5b30b 	.word	0xc4b5b30b
 800b204:	3f9205d7 	.word	0x3f9205d7
 800b208:	f72891e7 	.word	0xf72891e7
 800b20c:	3ef375d4 	.word	0x3ef375d4
 800b210:	7a34de08 	.word	0x7a34de08
 800b214:	be7ab2ac 	.word	0xbe7ab2ac
 800b218:	b676ec5f 	.word	0xb676ec5f
 800b21c:	3df5e184 	.word	0x3df5e184
 800b220:	c620f2a8 	.word	0xc620f2a8
 800b224:	bd63ba97 	.word	0xbd63ba97
 800b228:	e5aa091d 	.word	0xe5aa091d
 800b22c:	3cc43402 	.word	0x3cc43402
 800b230:	01c8db89 	.word	0x01c8db89
 800b234:	bc17a08b 	.word	0xbc17a08b
 800b238:	b8001899 	.word	0xb8001899
 800b23c:	3b5d5cb4 	.word	0x3b5d5cb4
 800b240:	51ff39ec 	.word	0x51ff39ec
 800b244:	ba8df847 	.word	0xba8df847
 800b248:	8adab9f5 	.word	0x8adab9f5
 800b24c:	405fbdfd 	.word	0x405fbdfd
 800b250:	b1df7541 	.word	0xb1df7541
 800b254:	bf1f05e0 	.word	0xbf1f05e0
 800b258:	8b04919b 	.word	0x8b04919b
 800b25c:	4005bf0a 	.word	0x4005bf0a
 800b260:	8d6253b2 	.word	0x8d6253b2
 800b264:	3fbe5c69 	.word	0x3fbe5c69
 800b268:	2f1a9fbe 	.word	0x2f1a9fbe
 800b26c:	4034a4dd 	.word	0x4034a4dd
 800b270:	886594af 	.word	0x886594af
 800b274:	40391563 	.word	0x40391563
 800b278:	f62184e0 	.word	0xf62184e0
 800b27c:	3fb41f32 	.word	0x3fb41f32
 800b280:	3c90aa07 	.word	0x3c90aa07
 800b284:	bfd00521 	.word	0xbfd00521
 800b288:	cf12f82a 	.word	0xcf12f82a
 800b28c:	3fb5497e 	.word	0x3fb5497e
 800b290:	55785780 	.word	0x55785780
 800b294:	bf89266f 	.word	0xbf89266f
 800b298:	40080000 	.word	0x40080000
 800b29c:	40100000 	.word	0x40100000
 800b2a0:	40140000 	.word	0x40140000
 800b2a4:	40180000 	.word	0x40180000
 800b2a8:	401c0000 	.word	0x401c0000
 800b2ac:	40200000 	.word	0x40200000
 800b2b0:	40220000 	.word	0x40220000
 800b2b4:	447a0000 	.word	0x447a0000
 800b2b8:	f003 fc8a 	bl	800ebd0 <pow>
 800b2bc:	a370      	add	r3, pc, #448	; (adr r3, 800b480 <uVtoDegreeCTypeK+0x5d0>)
 800b2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c2:	f7f5 f971 	bl	80005a8 <__aeabi_dmul>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	4620      	mov	r0, r4
 800b2cc:	4629      	mov	r1, r5
 800b2ce:	f7f4 ffb5 	bl	800023c <__adddf3>
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	460b      	mov	r3, r1
 800b2d6:	4614      	mov	r4, r2
 800b2d8:	461d      	mov	r5, r3
 800b2da:	f04f 0200 	mov.w	r2, #0
 800b2de:	4b7e      	ldr	r3, [pc, #504]	; (800b4d8 <uVtoDegreeCTypeK+0x628>)
 800b2e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b2e4:	f003 fc74 	bl	800ebd0 <pow>
 800b2e8:	a367      	add	r3, pc, #412	; (adr r3, 800b488 <uVtoDegreeCTypeK+0x5d8>)
 800b2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ee:	f7f5 f95b 	bl	80005a8 <__aeabi_dmul>
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	4629      	mov	r1, r5
 800b2fa:	f7f4 ff9f 	bl	800023c <__adddf3>
 800b2fe:	4602      	mov	r2, r0
 800b300:	460b      	mov	r3, r1
 800b302:	4614      	mov	r4, r2
 800b304:	461d      	mov	r5, r3
 800b306:	f04f 0200 	mov.w	r2, #0
 800b30a:	4b74      	ldr	r3, [pc, #464]	; (800b4dc <uVtoDegreeCTypeK+0x62c>)
 800b30c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b310:	f003 fc5e 	bl	800ebd0 <pow>
 800b314:	a35e      	add	r3, pc, #376	; (adr r3, 800b490 <uVtoDegreeCTypeK+0x5e0>)
 800b316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31a:	f7f5 f945 	bl	80005a8 <__aeabi_dmul>
 800b31e:	4602      	mov	r2, r0
 800b320:	460b      	mov	r3, r1
 800b322:	4620      	mov	r0, r4
 800b324:	4629      	mov	r1, r5
 800b326:	f7f4 ff89 	bl	800023c <__adddf3>
 800b32a:	4602      	mov	r2, r0
 800b32c:	460b      	mov	r3, r1
 800b32e:	4614      	mov	r4, r2
 800b330:	461d      	mov	r5, r3
 800b332:	f04f 0200 	mov.w	r2, #0
 800b336:	4b6a      	ldr	r3, [pc, #424]	; (800b4e0 <uVtoDegreeCTypeK+0x630>)
 800b338:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b33c:	f003 fc48 	bl	800ebd0 <pow>
 800b340:	a355      	add	r3, pc, #340	; (adr r3, 800b498 <uVtoDegreeCTypeK+0x5e8>)
 800b342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b346:	f7f5 f92f 	bl	80005a8 <__aeabi_dmul>
 800b34a:	4602      	mov	r2, r0
 800b34c:	460b      	mov	r3, r1
 800b34e:	4620      	mov	r0, r4
 800b350:	4629      	mov	r1, r5
 800b352:	f7f4 ff73 	bl	800023c <__adddf3>
 800b356:	4602      	mov	r2, r0
 800b358:	460b      	mov	r3, r1
 800b35a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800b35e:	e082      	b.n	800b466 <uVtoDegreeCTypeK+0x5b6>
    }
    else
    {
	    t90 = T_COEF_D0_500_1372 + T_COEF_D1_500_1372 *totalV + T_COEF_D2_500_1372 *pow(totalV,2) + T_COEF_D3_500_1372 *pow(totalV,3) + T_COEF_D4_500_1372 *pow(totalV,4) + T_COEF_D5_500_1372 *pow(totalV,5) + T_COEF_D6_500_1372 *pow(totalV,6);
 800b360:	a34f      	add	r3, pc, #316	; (adr r3, 800b4a0 <uVtoDegreeCTypeK+0x5f0>)
 800b362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b366:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b36a:	f7f5 f91d 	bl	80005a8 <__aeabi_dmul>
 800b36e:	4602      	mov	r2, r0
 800b370:	460b      	mov	r3, r1
 800b372:	4610      	mov	r0, r2
 800b374:	4619      	mov	r1, r3
 800b376:	a34c      	add	r3, pc, #304	; (adr r3, 800b4a8 <uVtoDegreeCTypeK+0x5f8>)
 800b378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37c:	f7f4 ff5c 	bl	8000238 <__aeabi_dsub>
 800b380:	4602      	mov	r2, r0
 800b382:	460b      	mov	r3, r1
 800b384:	4614      	mov	r4, r2
 800b386:	461d      	mov	r5, r3
 800b388:	f04f 0200 	mov.w	r2, #0
 800b38c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b390:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b394:	f003 fc1c 	bl	800ebd0 <pow>
 800b398:	a345      	add	r3, pc, #276	; (adr r3, 800b4b0 <uVtoDegreeCTypeK+0x600>)
 800b39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39e:	f7f5 f903 	bl	80005a8 <__aeabi_dmul>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	460b      	mov	r3, r1
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	4629      	mov	r1, r5
 800b3aa:	f7f4 ff47 	bl	800023c <__adddf3>
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	460b      	mov	r3, r1
 800b3b2:	4614      	mov	r4, r2
 800b3b4:	461d      	mov	r5, r3
 800b3b6:	f04f 0200 	mov.w	r2, #0
 800b3ba:	4b4a      	ldr	r3, [pc, #296]	; (800b4e4 <uVtoDegreeCTypeK+0x634>)
 800b3bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b3c0:	f003 fc06 	bl	800ebd0 <pow>
 800b3c4:	a33c      	add	r3, pc, #240	; (adr r3, 800b4b8 <uVtoDegreeCTypeK+0x608>)
 800b3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ca:	f7f5 f8ed 	bl	80005a8 <__aeabi_dmul>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	460b      	mov	r3, r1
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	4629      	mov	r1, r5
 800b3d6:	f7f4 ff31 	bl	800023c <__adddf3>
 800b3da:	4602      	mov	r2, r0
 800b3dc:	460b      	mov	r3, r1
 800b3de:	4614      	mov	r4, r2
 800b3e0:	461d      	mov	r5, r3
 800b3e2:	f04f 0200 	mov.w	r2, #0
 800b3e6:	4b40      	ldr	r3, [pc, #256]	; (800b4e8 <uVtoDegreeCTypeK+0x638>)
 800b3e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b3ec:	f003 fbf0 	bl	800ebd0 <pow>
 800b3f0:	a333      	add	r3, pc, #204	; (adr r3, 800b4c0 <uVtoDegreeCTypeK+0x610>)
 800b3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f6:	f7f5 f8d7 	bl	80005a8 <__aeabi_dmul>
 800b3fa:	4602      	mov	r2, r0
 800b3fc:	460b      	mov	r3, r1
 800b3fe:	4620      	mov	r0, r4
 800b400:	4629      	mov	r1, r5
 800b402:	f7f4 ff1b 	bl	800023c <__adddf3>
 800b406:	4602      	mov	r2, r0
 800b408:	460b      	mov	r3, r1
 800b40a:	4614      	mov	r4, r2
 800b40c:	461d      	mov	r5, r3
 800b40e:	f04f 0200 	mov.w	r2, #0
 800b412:	4b36      	ldr	r3, [pc, #216]	; (800b4ec <uVtoDegreeCTypeK+0x63c>)
 800b414:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b418:	f003 fbda 	bl	800ebd0 <pow>
 800b41c:	a32a      	add	r3, pc, #168	; (adr r3, 800b4c8 <uVtoDegreeCTypeK+0x618>)
 800b41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b422:	f7f5 f8c1 	bl	80005a8 <__aeabi_dmul>
 800b426:	4602      	mov	r2, r0
 800b428:	460b      	mov	r3, r1
 800b42a:	4620      	mov	r0, r4
 800b42c:	4629      	mov	r1, r5
 800b42e:	f7f4 ff05 	bl	800023c <__adddf3>
 800b432:	4602      	mov	r2, r0
 800b434:	460b      	mov	r3, r1
 800b436:	4614      	mov	r4, r2
 800b438:	461d      	mov	r5, r3
 800b43a:	f04f 0200 	mov.w	r2, #0
 800b43e:	4b2c      	ldr	r3, [pc, #176]	; (800b4f0 <uVtoDegreeCTypeK+0x640>)
 800b440:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b444:	f003 fbc4 	bl	800ebd0 <pow>
 800b448:	a321      	add	r3, pc, #132	; (adr r3, 800b4d0 <uVtoDegreeCTypeK+0x620>)
 800b44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b44e:	f7f5 f8ab 	bl	80005a8 <__aeabi_dmul>
 800b452:	4602      	mov	r2, r0
 800b454:	460b      	mov	r3, r1
 800b456:	4620      	mov	r0, r4
 800b458:	4629      	mov	r1, r5
 800b45a:	f7f4 feef 	bl	800023c <__adddf3>
 800b45e:	4602      	mov	r2, r0
 800b460:	460b      	mov	r3, r1
 800b462:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }

    return (float)t90;
 800b466:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b46a:	f7f5 fb4d 	bl	8000b08 <__aeabi_d2f>
 800b46e:	4603      	mov	r3, r0
}
 800b470:	4618      	mov	r0, r3
 800b472:	3728      	adds	r7, #40	; 0x28
 800b474:	46bd      	mov	sp, r7
 800b476:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b47a:	bf00      	nop
 800b47c:	f3af 8000 	nop.w
 800b480:	598742c5 	.word	0x598742c5
 800b484:	3f50101c 	.word	0x3f50101c
 800b488:	8fe5dfc5 	.word	0x8fe5dfc5
 800b48c:	bf072311 	.word	0xbf072311
 800b490:	d5041d19 	.word	0xd5041d19
 800b494:	3eb1beee 	.word	0x3eb1beee
 800b498:	f20e972b 	.word	0xf20e972b
 800b49c:	be469b94 	.word	0xbe469b94
 800b4a0:	251c193b 	.word	0x251c193b
 800b4a4:	404826af 	.word	0x404826af
 800b4a8:	1d14e3bd 	.word	0x1d14e3bd
 800b4ac:	406079c9 	.word	0x406079c9
 800b4b0:	7dffe020 	.word	0x7dffe020
 800b4b4:	bffa587c 	.word	0xbffa587c
 800b4b8:	72875bff 	.word	0x72875bff
 800b4bc:	3fabfabb 	.word	0x3fabfabb
 800b4c0:	43f14f16 	.word	0x43f14f16
 800b4c4:	bf4f9f9b 	.word	0xbf4f9f9b
 800b4c8:	31b5afb6 	.word	0x31b5afb6
 800b4cc:	3ee275a4 	.word	0x3ee275a4
 800b4d0:	f722eba7 	.word	0xf722eba7
 800b4d4:	be60b376 	.word	0xbe60b376
 800b4d8:	401c0000 	.word	0x401c0000
 800b4dc:	40200000 	.word	0x40200000
 800b4e0:	40220000 	.word	0x40220000
 800b4e4:	40080000 	.word	0x40080000
 800b4e8:	40100000 	.word	0x40100000
 800b4ec:	40140000 	.word	0x40140000
 800b4f0:	40180000 	.word	0x40180000
 800b4f4:	00000000 	.word	0x00000000

0800b4f8 <VtoDegreeCRtd>:
float VtoDegreeCRtd(float Vdata)
{
 800b4f8:	b5b0      	push	{r4, r5, r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
	//using a y = 366.02x^2 -942.3x +561.55 where x is the ADC voltage and y is the temperature in C
	return (Vdata*Vdata)*366.02 - 942.3*Vdata + 561.55;
 800b500:	6879      	ldr	r1, [r7, #4]
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f7f5 fc5e 	bl	8000dc4 <__aeabi_fmul>
 800b508:	4603      	mov	r3, r0
 800b50a:	4618      	mov	r0, r3
 800b50c:	f7f4 fff4 	bl	80004f8 <__aeabi_f2d>
 800b510:	a315      	add	r3, pc, #84	; (adr r3, 800b568 <VtoDegreeCRtd+0x70>)
 800b512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b516:	f7f5 f847 	bl	80005a8 <__aeabi_dmul>
 800b51a:	4602      	mov	r2, r0
 800b51c:	460b      	mov	r3, r1
 800b51e:	4614      	mov	r4, r2
 800b520:	461d      	mov	r5, r3
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f7f4 ffe8 	bl	80004f8 <__aeabi_f2d>
 800b528:	a311      	add	r3, pc, #68	; (adr r3, 800b570 <VtoDegreeCRtd+0x78>)
 800b52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52e:	f7f5 f83b 	bl	80005a8 <__aeabi_dmul>
 800b532:	4602      	mov	r2, r0
 800b534:	460b      	mov	r3, r1
 800b536:	4620      	mov	r0, r4
 800b538:	4629      	mov	r1, r5
 800b53a:	f7f4 fe7d 	bl	8000238 <__aeabi_dsub>
 800b53e:	4602      	mov	r2, r0
 800b540:	460b      	mov	r3, r1
 800b542:	4610      	mov	r0, r2
 800b544:	4619      	mov	r1, r3
 800b546:	a30c      	add	r3, pc, #48	; (adr r3, 800b578 <VtoDegreeCRtd+0x80>)
 800b548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b54c:	f7f4 fe76 	bl	800023c <__adddf3>
 800b550:	4602      	mov	r2, r0
 800b552:	460b      	mov	r3, r1
 800b554:	4610      	mov	r0, r2
 800b556:	4619      	mov	r1, r3
 800b558:	f7f5 fad6 	bl	8000b08 <__aeabi_d2f>
 800b55c:	4603      	mov	r3, r0
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3708      	adds	r7, #8
 800b562:	46bd      	mov	sp, r7
 800b564:	bdb0      	pop	{r4, r5, r7, pc}
 800b566:	bf00      	nop
 800b568:	eb851eb8 	.word	0xeb851eb8
 800b56c:	4076e051 	.word	0x4076e051
 800b570:	66666666 	.word	0x66666666
 800b574:	408d7266 	.word	0x408d7266
 800b578:	66666666 	.word	0x66666666
 800b57c:	40818c66 	.word	0x40818c66

0800b580 <AirInput_forceAperture>:
#include "air_input.h"

#define constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))

void AirInput_forceAperture( AirInput * self, int aperture) {
 800b580:	b480      	push	{r7}
 800b582:	b083      	sub	sp, #12
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	6039      	str	r1, [r7, #0]
  aperture = constrain(aperture, self->minValue, self->maxValue); //TODO: MIN_VALEUR IS NOT ZERO FOR THE PRIMARY
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	695b      	ldr	r3, [r3, #20]
 800b58e:	683a      	ldr	r2, [r7, #0]
 800b590:	429a      	cmp	r2, r3
 800b592:	da02      	bge.n	800b59a <AirInput_forceAperture+0x1a>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	695b      	ldr	r3, [r3, #20]
 800b598:	e005      	b.n	800b5a6 <AirInput_forceAperture+0x26>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	691a      	ldr	r2, [r3, #16]
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	bfa8      	it	ge
 800b5a4:	4613      	movge	r3, r2
 800b5a6:	603b      	str	r3, [r7, #0]
  self->aperture = aperture;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	683a      	ldr	r2, [r7, #0]
 800b5ac:	601a      	str	r2, [r3, #0]
  self->setPoint = aperture;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	683a      	ldr	r2, [r7, #0]
 800b5b2:	605a      	str	r2, [r3, #4]
}
 800b5b4:	bf00      	nop
 800b5b6:	370c      	adds	r7, #12
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bc80      	pop	{r7}
 800b5bc:	4770      	bx	lr

0800b5be <AirInput_getAperture>:


int AirInput_getAperture( AirInput * self) {
 800b5be:	b480      	push	{r7}
 800b5c0:	b083      	sub	sp, #12
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
  return self->aperture;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	370c      	adds	r7, #12
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bc80      	pop	{r7}
 800b5d2:	4770      	bx	lr

0800b5d4 <AirInput_InPosition>:
bool AirInput_InPosition( AirInput * self)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
	return self->aperture == self->setPoint;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681a      	ldr	r2, [r3, #0]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	685b      	ldr	r3, [r3, #4]
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	bf0c      	ite	eq
 800b5e8:	2301      	moveq	r3, #1
 800b5ea:	2300      	movne	r3, #0
 800b5ec:	b2db      	uxtb	r3, r3
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	370c      	adds	r7, #12
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bc80      	pop	{r7}
 800b5f6:	4770      	bx	lr

0800b5f8 <AirInput_setAjustement>:
  self->setPoint = setPoint;
  self->secPerStep = secPerStep;
}


void AirInput_setAjustement( AirInput * self, int adjustement, uint32_t secPerStep) {
 800b5f8:	b480      	push	{r7}
 800b5fa:	b085      	sub	sp, #20
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	60f8      	str	r0, [r7, #12]
 800b600:	60b9      	str	r1, [r7, #8]
 800b602:	607a      	str	r2, [r7, #4]
  self->setPoint += adjustement;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	685a      	ldr	r2, [r3, #4]
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	441a      	add	r2, r3
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	605a      	str	r2, [r3, #4]
  self->setPoint = constrain(self->setPoint, self->minValue, self->maxValue);
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	685a      	ldr	r2, [r3, #4]
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	695b      	ldr	r3, [r3, #20]
 800b618:	429a      	cmp	r2, r3
 800b61a:	da02      	bge.n	800b622 <AirInput_setAjustement+0x2a>
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	695b      	ldr	r3, [r3, #20]
 800b620:	e006      	b.n	800b630 <AirInput_setAjustement+0x38>
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	685a      	ldr	r2, [r3, #4]
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	691b      	ldr	r3, [r3, #16]
 800b62a:	4293      	cmp	r3, r2
 800b62c:	bfa8      	it	ge
 800b62e:	4613      	movge	r3, r2
 800b630:	68fa      	ldr	r2, [r7, #12]
 800b632:	6053      	str	r3, [r2, #4]
  self->secPerStep = secPerStep;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	687a      	ldr	r2, [r7, #4]
 800b638:	609a      	str	r2, [r3, #8]
}
 800b63a:	bf00      	nop
 800b63c:	3714      	adds	r7, #20
 800b63e:	46bd      	mov	sp, r7
 800b640:	bc80      	pop	{r7}
 800b642:	4770      	bx	lr

0800b644 <AirInput_task>:


void AirInput_task( AirInput * self, uint32_t currentTime_ms) {
 800b644:	b480      	push	{r7}
 800b646:	b083      	sub	sp, #12
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	6039      	str	r1, [r7, #0]

  if (self->aperture != self->setPoint) {
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681a      	ldr	r2, [r3, #0]
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	429a      	cmp	r2, r3
 800b658:	d01f      	beq.n	800b69a <AirInput_task+0x56>
    if ((currentTime_ms - self->timeRefRampe) >= (self->secPerStep * 1000)) {
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	68db      	ldr	r3, [r3, #12]
 800b65e:	683a      	ldr	r2, [r7, #0]
 800b660:	1ad2      	subs	r2, r2, r3
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	689b      	ldr	r3, [r3, #8]
 800b666:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b66a:	fb01 f303 	mul.w	r3, r1, r3
 800b66e:	429a      	cmp	r2, r3
 800b670:	d313      	bcc.n	800b69a <AirInput_task+0x56>
      self->timeRefRampe = currentTime_ms;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	683a      	ldr	r2, [r7, #0]
 800b676:	60da      	str	r2, [r3, #12]
      if (self->setPoint > self->aperture) {
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	685a      	ldr	r2, [r3, #4]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	429a      	cmp	r2, r3
 800b682:	dd05      	ble.n	800b690 <AirInput_task+0x4c>
        self->aperture++;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	1c5a      	adds	r2, r3, #1
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	601a      	str	r2, [r3, #0]
      } else {
        self->aperture--;
      }
    }
  }
}
 800b68e:	e004      	b.n	800b69a <AirInput_task+0x56>
        self->aperture--;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	1e5a      	subs	r2, r3, #1
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	601a      	str	r2, [r3, #0]
}
 800b69a:	bf00      	nop
 800b69c:	370c      	adds	r7, #12
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bc80      	pop	{r7}
 800b6a2:	4770      	bx	lr

0800b6a4 <Algo_init>:
		AirInput* grill, const uint8_t MinGrill, const uint8_t MaxGrill);
void AirAdjustment(int adjustement, const uint32_t secondPerStep,
		AirInput* primaire, const uint8_t MinPrimary, const uint8_t MaxPrimary,
		AirInput* grill, const uint8_t MinGrill, const uint8_t MaxGrill);

void Algo_init() {
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	af00      	add	r7, sp, #0

  if(GPIO_PIN_SET==HAL_GPIO_ReadPin(Button_input_GPIO_Port,Button_input_Pin))
 800b6a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b6ac:	4817      	ldr	r0, [pc, #92]	; (800b70c <Algo_init+0x68>)
 800b6ae:	f7f7 f9ed 	bl	8002a8c <HAL_GPIO_ReadPin>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d103      	bne.n	800b6c0 <Algo_init+0x1c>
  {
	  currentState = PRODUCTION_TEST;
 800b6b8:	4b15      	ldr	r3, [pc, #84]	; (800b710 <Algo_init+0x6c>)
 800b6ba:	220c      	movs	r2, #12
 800b6bc:	701a      	strb	r2, [r3, #0]
 800b6be:	e002      	b.n	800b6c6 <Algo_init+0x22>
  }
  else
  {
	  currentState = ZEROING_STEPPER;
 800b6c0:	4b13      	ldr	r3, [pc, #76]	; (800b710 <Algo_init+0x6c>)
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	701a      	strb	r2, [r3, #0]
  }

  reloadingEvent = false;
 800b6c6:	4b13      	ldr	r3, [pc, #76]	; (800b714 <Algo_init+0x70>)
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	701a      	strb	r2, [r3, #0]
  AirInput_forceAperture(&primary, PRIMARY_CLOSED_SECONDARY_FULL_OPEN);
 800b6cc:	2106      	movs	r1, #6
 800b6ce:	4812      	ldr	r0, [pc, #72]	; (800b718 <Algo_init+0x74>)
 800b6d0:	f7ff ff56 	bl	800b580 <AirInput_forceAperture>
  AirInput_forceAperture(&grill, GRILL_CLOSED);
 800b6d4:	2100      	movs	r1, #0
 800b6d6:	4811      	ldr	r0, [pc, #68]	; (800b71c <Algo_init+0x78>)
 800b6d8:	f7ff ff52 	bl	800b580 <AirInput_forceAperture>
  baffleTemperature = 0;
 800b6dc:	4b10      	ldr	r3, [pc, #64]	; (800b720 <Algo_init+0x7c>)
 800b6de:	2200      	movs	r2, #0
 800b6e0:	601a      	str	r2, [r3, #0]
  rearTemperature = 0;
 800b6e2:	4b10      	ldr	r3, [pc, #64]	; (800b724 <Algo_init+0x80>)
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	601a      	str	r2, [r3, #0]
  thermostatRequest = false;
 800b6e8:	4b0f      	ldr	r3, [pc, #60]	; (800b728 <Algo_init+0x84>)
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	701a      	strb	r2, [r3, #0]
  delLoadingEnd = ALGO_DEL_OFF;
 800b6ee:	4b0f      	ldr	r3, [pc, #60]	; (800b72c <Algo_init+0x88>)
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	701a      	strb	r2, [r3, #0]
  delFermeturePorte = ALGO_DEL_OFF;
 800b6f4:	4b0e      	ldr	r3, [pc, #56]	; (800b730 <Algo_init+0x8c>)
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	701a      	strb	r2, [r3, #0]

  Slope_init(&slopeBaffleTemp, frontTempDataStore, NB_DATA, SAMPLING_RATE);
 800b6fa:	4b0e      	ldr	r3, [pc, #56]	; (800b734 <Algo_init+0x90>)
 800b6fc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b700:	490d      	ldr	r1, [pc, #52]	; (800b738 <Algo_init+0x94>)
 800b702:	480e      	ldr	r0, [pc, #56]	; (800b73c <Algo_init+0x98>)
 800b704:	f001 fdfe 	bl	800d304 <Slope_init>
}
 800b708:	bf00      	nop
 800b70a:	bd80      	pop	{r7, pc}
 800b70c:	40010c00 	.word	0x40010c00
 800b710:	2000233c 	.word	0x2000233c
 800b714:	2000233d 	.word	0x2000233d
 800b718:	2000000c 	.word	0x2000000c
 800b71c:	20000024 	.word	0x20000024
 800b720:	20002344 	.word	0x20002344
 800b724:	20002348 	.word	0x20002348
 800b728:	20002350 	.word	0x20002350
 800b72c:	2000233f 	.word	0x2000233f
 800b730:	20002340 	.word	0x20002340
 800b734:	3e4ccccd 	.word	0x3e4ccccd
 800b738:	20002354 	.word	0x20002354
 800b73c:	20002808 	.word	0x20002808

0800b740 <manageStateMachine>:

static void manageStateMachine(uint32_t currentTime_ms) {
 800b740:	b590      	push	{r4, r7, lr}
 800b742:	b095      	sub	sp, #84	; 0x54
 800b744:	af04      	add	r7, sp, #16
 800b746:	6078      	str	r0, [r7, #4]

	  State nextState = currentState;
 800b748:	4b9e      	ldr	r3, [pc, #632]	; (800b9c4 <manageStateMachine+0x284>)
 800b74a:	781b      	ldrb	r3, [r3, #0]
 800b74c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  float dTavant;
	  int adjustement;
	  FurnaceModel Model = readModel();
 800b750:	f7fe fb9a 	bl	8009e88 <readModel>
 800b754:	4603      	mov	r3, r0
 800b756:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  Model = HEATMAX; //c'était une bonne idée les dip switch, mais on le fera pas :) pis HeatMax c'est la HeatCommander oh yeah!
 800b75a:	2300      	movs	r3, #0
 800b75c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  static uint32_t stateChangeTimeRef = 0;
	  static uint32_t timeRefAutoMode = 0;
	  static int targetTemperature = 0;
	  static uint32_t Safetydebounce_ms = 0;
	  int i = 0;
 800b760:	2300      	movs	r3, #0
 800b762:	633b      	str	r3, [r7, #48]	; 0x30
#if defined GRILL_CIRC
	  //la nouvelle grille varie de 180 à 90 donc, on doit prendre 2 fois plus de temps entre les pas. (secondes)
	  const uint32_t SEC_PER_STEP_TEMP_RISE = 6;
 800b764:	2306      	movs	r3, #6
 800b766:	62fb      	str	r3, [r7, #44]	; 0x2c
	  const uint32_t SEC_PER_STEP_COMB_LOW = 6;
 800b768:	2306      	movs	r3, #6
 800b76a:	62bb      	str	r3, [r7, #40]	; 0x28
	  const uint32_t SEC_PER_STEP_COMB_HIGH = 6;
 800b76c:	2306      	movs	r3, #6
 800b76e:	627b      	str	r3, [r7, #36]	; 0x24
	  const uint32_t SEC_PER_STEP_COAL_HIGH = 12;
 800b770:	230c      	movs	r3, #12
 800b772:	623b      	str	r3, [r7, #32]
	  const uint32_t SEC_PER_STEP_COMB_HIGH = 6;
	  const uint32_t SEC_PER_STEP_COAL_HIGH = 6;
#endif

	  //calculate time used in the state transition.
	  timeSinceStateEntry = currentTime_ms - stateChangeTimeRef;
 800b774:	4b94      	ldr	r3, [pc, #592]	; (800b9c8 <manageStateMachine+0x288>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	687a      	ldr	r2, [r7, #4]
 800b77a:	1ad3      	subs	r3, r2, r3
 800b77c:	4a93      	ldr	r2, [pc, #588]	; (800b9cc <manageStateMachine+0x28c>)
 800b77e:	6013      	str	r3, [r2, #0]
	  uint32_t timeInTemperatureRise = 0;
 800b780:	2300      	movs	r3, #0
 800b782:	61fb      	str	r3, [r7, #28]
#if PID_CONTROL_ON
	  static uint32_t Pidtimeref = 0;
	  uint32_t TimeSinceLastPIDUpdate = currentTime_ms - Pidtimeref;
#endif
	  uint32_t TimeForStep = currentTime_ms - timeRefAutoMode;
 800b784:	4b92      	ldr	r3, [pc, #584]	; (800b9d0 <manageStateMachine+0x290>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	687a      	ldr	r2, [r7, #4]
 800b78a:	1ad3      	subs	r3, r2, r3
 800b78c:	61bb      	str	r3, [r7, #24]

	  // TODO: la periode utilisée pour le calcule de la pente n'est pas définie
  //       dans le document
  dTavant = computeSlopeBaffleTemp(2); //�tait 300, selon ce que Novika utilise test du 2019-12-04.
 800b78e:	2002      	movs	r0, #2
 800b790:	f000 fee2 	bl	800c558 <computeSlopeBaffleTemp>
 800b794:	6178      	str	r0, [r7, #20]
  	  	  	  	  	  	  	  	  	  // la d�riv� risque d'�tre sketch, une mesure de temp�rature /5 secondes si on
  int deltaTemperature = 0;
 800b796:	2300      	movs	r3, #0
 800b798:	613b      	str	r3, [r7, #16]
  /* Perform state's actions. */
  switch (currentState) {
 800b79a:	4b8a      	ldr	r3, [pc, #552]	; (800b9c4 <manageStateMachine+0x284>)
 800b79c:	781b      	ldrb	r3, [r3, #0]
 800b79e:	3b01      	subs	r3, #1
 800b7a0:	2b0b      	cmp	r3, #11
 800b7a2:	d81b      	bhi.n	800b7dc <manageStateMachine+0x9c>
 800b7a4:	a201      	add	r2, pc, #4	; (adr r2, 800b7ac <manageStateMachine+0x6c>)
 800b7a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7aa:	bf00      	nop
 800b7ac:	0800b841 	.word	0x0800b841
 800b7b0:	0800b911 	.word	0x0800b911
 800b7b4:	0800b9a3 	.word	0x0800b9a3
 800b7b8:	0800bd35 	.word	0x0800bd35
 800b7bc:	0800b7dd 	.word	0x0800b7dd
 800b7c0:	0800bb67 	.word	0x0800bb67
 800b7c4:	0800c075 	.word	0x0800c075
 800b7c8:	0800c0d1 	.word	0x0800c0d1
 800b7cc:	0800c163 	.word	0x0800c163
 800b7d0:	0800c29b 	.word	0x0800c29b
 800b7d4:	0800c29b 	.word	0x0800c29b
 800b7d8:	0800c32d 	.word	0x0800c32d

    default:
    case ZEROING_STEPPER:
		AirInput_forceAperture(&primary, PrimaryMotorParam[Model].MinWaiting);
 800b7dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b7e0:	4a7c      	ldr	r2, [pc, #496]	; (800b9d4 <manageStateMachine+0x294>)
 800b7e2:	015b      	lsls	r3, r3, #5
 800b7e4:	4413      	add	r3, r2
 800b7e6:	3302      	adds	r3, #2
 800b7e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	487a      	ldr	r0, [pc, #488]	; (800b9d8 <manageStateMachine+0x298>)
 800b7f0:	f7ff fec6 	bl	800b580 <AirInput_forceAperture>
		AirInput_forceAperture(&grill, BoostMotorParam[Model].MinWaiting);
 800b7f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b7f8:	4a78      	ldr	r2, [pc, #480]	; (800b9dc <manageStateMachine+0x29c>)
 800b7fa:	015b      	lsls	r3, r3, #5
 800b7fc:	4413      	add	r3, r2
 800b7fe:	3302      	adds	r3, #2
 800b800:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b804:	4619      	mov	r1, r3
 800b806:	4876      	ldr	r0, [pc, #472]	; (800b9e0 <manageStateMachine+0x2a0>)
 800b808:	f7ff feba 	bl	800b580 <AirInput_forceAperture>
		AllMotorToZero(); //set all motors to zero
 800b80c:	f7ff f834 	bl	800a878 <AllMotorToZero>
		while(!AirInput_InPosition(&grill) || !AirInput_InPosition(&primary))
 800b810:	bf00      	nop
 800b812:	4873      	ldr	r0, [pc, #460]	; (800b9e0 <manageStateMachine+0x2a0>)
 800b814:	f7ff fede 	bl	800b5d4 <AirInput_InPosition>
 800b818:	4603      	mov	r3, r0
 800b81a:	f083 0301 	eor.w	r3, r3, #1
 800b81e:	b2db      	uxtb	r3, r3
 800b820:	2b00      	cmp	r3, #0
 800b822:	d1f6      	bne.n	800b812 <manageStateMachine+0xd2>
 800b824:	486c      	ldr	r0, [pc, #432]	; (800b9d8 <manageStateMachine+0x298>)
 800b826:	f7ff fed5 	bl	800b5d4 <AirInput_InPosition>
 800b82a:	4603      	mov	r3, r0
 800b82c:	f083 0301 	eor.w	r3, r3, #1
 800b830:	b2db      	uxtb	r3, r3
 800b832:	2b00      	cmp	r3, #0
 800b834:	d1ed      	bne.n	800b812 <manageStateMachine+0xd2>
		{
		};
		nextState = WAITING;
 800b836:	2301      	movs	r3, #1
 800b838:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		break;
 800b83c:	f000 bdab 	b.w	800c396 <manageStateMachine+0xc56>
    case WAITING:

    	AirInput_forceAperture(&primary, PrimaryMotorParam[Model].MaxWaiting);// PRIMARY_CLOSED_SECONDARY_FULL_OPEN);
 800b840:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b844:	4a63      	ldr	r2, [pc, #396]	; (800b9d4 <manageStateMachine+0x294>)
 800b846:	015b      	lsls	r3, r3, #5
 800b848:	4413      	add	r3, r2
 800b84a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b84e:	4619      	mov	r1, r3
 800b850:	4861      	ldr	r0, [pc, #388]	; (800b9d8 <manageStateMachine+0x298>)
 800b852:	f7ff fe95 	bl	800b580 <AirInput_forceAperture>
    	AirInput_forceAperture(&grill, BoostMotorParam[Model].MaxWaiting);// GRILL_CLOSED);
 800b856:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b85a:	4a60      	ldr	r2, [pc, #384]	; (800b9dc <manageStateMachine+0x29c>)
 800b85c:	015b      	lsls	r3, r3, #5
 800b85e:	4413      	add	r3, r2
 800b860:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b864:	4619      	mov	r1, r3
 800b866:	485e      	ldr	r0, [pc, #376]	; (800b9e0 <manageStateMachine+0x2a0>)
 800b868:	f7ff fe8a 	bl	800b580 <AirInput_forceAperture>
    	delLoadingEnd = ALGO_DEL_OFF;
 800b86c:	4b5d      	ldr	r3, [pc, #372]	; (800b9e4 <manageStateMachine+0x2a4>)
 800b86e:	2200      	movs	r2, #0
 800b870:	701a      	strb	r2, [r3, #0]
    	delFermeturePorte = ALGO_DEL_OFF;
 800b872:	4b5d      	ldr	r3, [pc, #372]	; (800b9e8 <manageStateMachine+0x2a8>)
 800b874:	2200      	movs	r2, #0
 800b876:	701a      	strb	r2, [r3, #0]



		if(baffleTemperature > 8000 && rearTemperature > 7000 && (!Algo_getInterlockRequest()))
 800b878:	4b5c      	ldr	r3, [pc, #368]	; (800b9ec <manageStateMachine+0x2ac>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800b880:	dd15      	ble.n	800b8ae <manageStateMachine+0x16e>
 800b882:	4b5b      	ldr	r3, [pc, #364]	; (800b9f0 <manageStateMachine+0x2b0>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f641 3258 	movw	r2, #7000	; 0x1b58
 800b88a:	4293      	cmp	r3, r2
 800b88c:	dd0f      	ble.n	800b8ae <manageStateMachine+0x16e>
 800b88e:	f000 ff31 	bl	800c6f4 <Algo_getInterlockRequest>
 800b892:	4603      	mov	r3, r0
 800b894:	f083 0301 	eor.w	r3, r3, #1
 800b898:	b2db      	uxtb	r3, r3
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d007      	beq.n	800b8ae <manageStateMachine+0x16e>
		{
		  nextState = TEMPERATURE_RISE; //the only way this can happen is if we lost power we don't want to go back in reload/temprise
 800b89e:	2303      	movs	r3, #3
 800b8a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		  reloadingEvent = false;
 800b8a4:	4b53      	ldr	r3, [pc, #332]	; (800b9f4 <manageStateMachine+0x2b4>)
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	701a      	strb	r2, [r3, #0]
		  nextState = RELOAD_IGNITION;
		  reloadingEvent = false;
		  initPID(&TemperaturePID,Ki,Kd,Kp,20,-20); // pas utilisé
		}

		break;
 800b8aa:	f000 bd46 	b.w	800c33a <manageStateMachine+0xbfa>
		else if ((baffleTemperature > TemperatureParam[Model].WaitingToIgnition || reloadingEvent) && (!Algo_getInterlockRequest()) ) { //at 95F, someone is starting a fire
 800b8ae:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800b8b2:	4951      	ldr	r1, [pc, #324]	; (800b9f8 <manageStateMachine+0x2b8>)
 800b8b4:	4613      	mov	r3, r2
 800b8b6:	011b      	lsls	r3, r3, #4
 800b8b8:	4413      	add	r3, r2
 800b8ba:	005b      	lsls	r3, r3, #1
 800b8bc:	440b      	add	r3, r1
 800b8be:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	4b49      	ldr	r3, [pc, #292]	; (800b9ec <manageStateMachine+0x2ac>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	429a      	cmp	r2, r3
 800b8ca:	db04      	blt.n	800b8d6 <manageStateMachine+0x196>
 800b8cc:	4b49      	ldr	r3, [pc, #292]	; (800b9f4 <manageStateMachine+0x2b4>)
 800b8ce:	781b      	ldrb	r3, [r3, #0]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	f000 8532 	beq.w	800c33a <manageStateMachine+0xbfa>
 800b8d6:	f000 ff0d 	bl	800c6f4 <Algo_getInterlockRequest>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	f083 0301 	eor.w	r3, r3, #1
 800b8e0:	b2db      	uxtb	r3, r3
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	f000 8529 	beq.w	800c33a <manageStateMachine+0xbfa>
		  nextState = RELOAD_IGNITION;
 800b8e8:	2302      	movs	r3, #2
 800b8ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		  reloadingEvent = false;
 800b8ee:	4b41      	ldr	r3, [pc, #260]	; (800b9f4 <manageStateMachine+0x2b4>)
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	701a      	strb	r2, [r3, #0]
		  initPID(&TemperaturePID,Ki,Kd,Kp,20,-20); // pas utilisé
 800b8f4:	f06f 0313 	mvn.w	r3, #19
 800b8f8:	9301      	str	r3, [sp, #4]
 800b8fa:	2314      	movs	r3, #20
 800b8fc:	9300      	str	r3, [sp, #0]
 800b8fe:	4b3f      	ldr	r3, [pc, #252]	; (800b9fc <manageStateMachine+0x2bc>)
 800b900:	4a3f      	ldr	r2, [pc, #252]	; (800ba00 <manageStateMachine+0x2c0>)
 800b902:	f04f 0100 	mov.w	r1, #0
 800b906:	483f      	ldr	r0, [pc, #252]	; (800ba04 <manageStateMachine+0x2c4>)
 800b908:	f7fe ffff 	bl	800a90a <initPID>
		break;
 800b90c:	f000 bd15 	b.w	800c33a <manageStateMachine+0xbfa>

    case RELOAD_IGNITION:

		AirInput_forceAperture(&primary, PrimaryMotorParam[Model].MaxReload);// PRIMARY_SECONDARY_FULL_OPEN);
 800b910:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b914:	4a2f      	ldr	r2, [pc, #188]	; (800b9d4 <manageStateMachine+0x294>)
 800b916:	015b      	lsls	r3, r3, #5
 800b918:	4413      	add	r3, r2
 800b91a:	3304      	adds	r3, #4
 800b91c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b920:	4619      	mov	r1, r3
 800b922:	482d      	ldr	r0, [pc, #180]	; (800b9d8 <manageStateMachine+0x298>)
 800b924:	f7ff fe2c 	bl	800b580 <AirInput_forceAperture>
		AirInput_forceAperture(&grill, BoostMotorParam[Model].MaxReload);// 39); //2020-03-20 28 //2020-03-18 100
 800b928:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b92c:	4a2b      	ldr	r2, [pc, #172]	; (800b9dc <manageStateMachine+0x29c>)
 800b92e:	015b      	lsls	r3, r3, #5
 800b930:	4413      	add	r3, r2
 800b932:	3304      	adds	r3, #4
 800b934:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b938:	4619      	mov	r1, r3
 800b93a:	4829      	ldr	r0, [pc, #164]	; (800b9e0 <manageStateMachine+0x2a0>)
 800b93c:	f7ff fe20 	bl	800b580 <AirInput_forceAperture>

		if (((baffleTemperature > TemperatureParam[Model].IgnitionToTrise) && (timeSinceStateEntry >= MINUTES(1))) || (baffleTemperature > 10000)) {
 800b940:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800b944:	492c      	ldr	r1, [pc, #176]	; (800b9f8 <manageStateMachine+0x2b8>)
 800b946:	4613      	mov	r3, r2
 800b948:	011b      	lsls	r3, r3, #4
 800b94a:	4413      	add	r3, r2
 800b94c:	005b      	lsls	r3, r3, #1
 800b94e:	440b      	add	r3, r1
 800b950:	3302      	adds	r3, #2
 800b952:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b956:	461a      	mov	r2, r3
 800b958:	4b24      	ldr	r3, [pc, #144]	; (800b9ec <manageStateMachine+0x2ac>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	429a      	cmp	r2, r3
 800b95e:	da05      	bge.n	800b96c <manageStateMachine+0x22c>
 800b960:	4b1a      	ldr	r3, [pc, #104]	; (800b9cc <manageStateMachine+0x28c>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800b968:	4293      	cmp	r3, r2
 800b96a:	d805      	bhi.n	800b978 <manageStateMachine+0x238>
 800b96c:	4b1f      	ldr	r3, [pc, #124]	; (800b9ec <manageStateMachine+0x2ac>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f242 7210 	movw	r2, #10000	; 0x2710
 800b974:	4293      	cmp	r3, r2
 800b976:	dd09      	ble.n	800b98c <manageStateMachine+0x24c>
		nextState = TEMPERATURE_RISE;
 800b978:	2303      	movs	r3, #3
 800b97a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		reloadingEvent = false;
 800b97e:	4b1d      	ldr	r3, [pc, #116]	; (800b9f4 <manageStateMachine+0x2b4>)
 800b980:	2200      	movs	r2, #0
 800b982:	701a      	strb	r2, [r3, #0]
		AirInput_forceAperture(&grill, GRILL_CLOSED);
 800b984:	2100      	movs	r1, #0
 800b986:	4816      	ldr	r0, [pc, #88]	; (800b9e0 <manageStateMachine+0x2a0>)
 800b988:	f7ff fdfa 	bl	800b580 <AirInput_forceAperture>
		}
		if(timeSinceStateEntry >= MINUTES(20))
 800b98c:	4b0f      	ldr	r3, [pc, #60]	; (800b9cc <manageStateMachine+0x28c>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	4a1d      	ldr	r2, [pc, #116]	; (800ba08 <manageStateMachine+0x2c8>)
 800b992:	4293      	cmp	r3, r2
 800b994:	f240 84d3 	bls.w	800c33e <manageStateMachine+0xbfe>
		{
		  //ignition fail or coal was hot enough to make us enter in Ignition we go back to WAITING
		  nextState = ZEROING_STEPPER;
 800b998:	2300      	movs	r3, #0
 800b99a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
      break;
 800b99e:	f000 bcce 	b.w	800c33e <manageStateMachine+0xbfe>

    case TEMPERATURE_RISE:

		targetTemperature = thermostatRequest ? TemperatureParam[Model].TriseTargetHigh : TemperatureParam[Model].TriseTargetLow;
 800b9a2:	4b1a      	ldr	r3, [pc, #104]	; (800ba0c <manageStateMachine+0x2cc>)
 800b9a4:	781b      	ldrb	r3, [r3, #0]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d032      	beq.n	800ba10 <manageStateMachine+0x2d0>
 800b9aa:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800b9ae:	4912      	ldr	r1, [pc, #72]	; (800b9f8 <manageStateMachine+0x2b8>)
 800b9b0:	4613      	mov	r3, r2
 800b9b2:	011b      	lsls	r3, r3, #4
 800b9b4:	4413      	add	r3, r2
 800b9b6:	005b      	lsls	r3, r3, #1
 800b9b8:	440b      	add	r3, r1
 800b9ba:	3306      	adds	r3, #6
 800b9bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	e031      	b.n	800ba28 <manageStateMachine+0x2e8>
 800b9c4:	2000233c 	.word	0x2000233c
 800b9c8:	20002854 	.word	0x20002854
 800b9cc:	20002824 	.word	0x20002824
 800b9d0:	20002858 	.word	0x20002858
 800b9d4:	0800fe48 	.word	0x0800fe48
 800b9d8:	2000000c 	.word	0x2000000c
 800b9dc:	0800fe88 	.word	0x0800fe88
 800b9e0:	20000024 	.word	0x20000024
 800b9e4:	2000233f 	.word	0x2000233f
 800b9e8:	20002340 	.word	0x20002340
 800b9ec:	20002344 	.word	0x20002344
 800b9f0:	20002348 	.word	0x20002348
 800b9f4:	2000233d 	.word	0x2000233d
 800b9f8:	0800fe04 	.word	0x0800fe04
 800b9fc:	3da3d70a 	.word	0x3da3d70a
 800ba00:	3ca3d70a 	.word	0x3ca3d70a
 800ba04:	2000282c 	.word	0x2000282c
 800ba08:	00124f7f 	.word	0x00124f7f
 800ba0c:	20002350 	.word	0x20002350
 800ba10:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ba14:	49b6      	ldr	r1, [pc, #728]	; (800bcf0 <manageStateMachine+0x5b0>)
 800ba16:	4613      	mov	r3, r2
 800ba18:	011b      	lsls	r3, r3, #4
 800ba1a:	4413      	add	r3, r2
 800ba1c:	005b      	lsls	r3, r3, #1
 800ba1e:	440b      	add	r3, r1
 800ba20:	3304      	adds	r3, #4
 800ba22:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba26:	461a      	mov	r2, r3
 800ba28:	4bb2      	ldr	r3, [pc, #712]	; (800bcf4 <manageStateMachine+0x5b4>)
 800ba2a:	601a      	str	r2, [r3, #0]

		if(historyState != currentState){
 800ba2c:	4bb2      	ldr	r3, [pc, #712]	; (800bcf8 <manageStateMachine+0x5b8>)
 800ba2e:	781a      	ldrb	r2, [r3, #0]
 800ba30:	4bb2      	ldr	r3, [pc, #712]	; (800bcfc <manageStateMachine+0x5bc>)
 800ba32:	781b      	ldrb	r3, [r3, #0]
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d01b      	beq.n	800ba70 <manageStateMachine+0x330>
		  AirInput_forceAperture(&primary, PrimaryMotorParam[Model].MaxTempRise);
 800ba38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ba3c:	4ab0      	ldr	r2, [pc, #704]	; (800bd00 <manageStateMachine+0x5c0>)
 800ba3e:	015b      	lsls	r3, r3, #5
 800ba40:	4413      	add	r3, r2
 800ba42:	3308      	adds	r3, #8
 800ba44:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba48:	4619      	mov	r1, r3
 800ba4a:	48ae      	ldr	r0, [pc, #696]	; (800bd04 <manageStateMachine+0x5c4>)
 800ba4c:	f7ff fd98 	bl	800b580 <AirInput_forceAperture>
		  AirInput_forceAperture(&grill, BoostMotorParam[Model].MaxTempRise);
 800ba50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ba54:	4aac      	ldr	r2, [pc, #688]	; (800bd08 <manageStateMachine+0x5c8>)
 800ba56:	015b      	lsls	r3, r3, #5
 800ba58:	4413      	add	r3, r2
 800ba5a:	3308      	adds	r3, #8
 800ba5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba60:	4619      	mov	r1, r3
 800ba62:	48aa      	ldr	r0, [pc, #680]	; (800bd0c <manageStateMachine+0x5cc>)
 800ba64:	f7ff fd8c 	bl	800b580 <AirInput_forceAperture>
		  historyState = currentState;
 800ba68:	4ba4      	ldr	r3, [pc, #656]	; (800bcfc <manageStateMachine+0x5bc>)
 800ba6a:	781a      	ldrb	r2, [r3, #0]
 800ba6c:	4ba2      	ldr	r3, [pc, #648]	; (800bcf8 <manageStateMachine+0x5b8>)
 800ba6e:	701a      	strb	r2, [r3, #0]
		   to +/- 3 steps, it should take 3 * sec per step to complete
		   the movement. Reevaluate the control at that maximum period. */
//		if((timeSinceStateEntry >= MINUTES(3)) ||  (baffleTemperature > targetTemperature)) //3minutes // changemenet 2 min 2021-12-03
		//asservie seulement si on est depuis 3 minutes dans Temperature Rise ou qu'on a atteint 650 ou 660

			if (TimeForStep >= (1 * SEC_PER_STEP_TEMP_RISE * 1000)) { // changer de 3 a 2 2021-12-03
 800ba70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ba76:	fb02 f303 	mul.w	r3, r2, r3
 800ba7a:	69ba      	ldr	r2, [r7, #24]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d338      	bcc.n	800baf2 <manageStateMachine+0x3b2>
			  timeRefAutoMode = currentTime_ms;
 800ba80:	4aa3      	ldr	r2, [pc, #652]	; (800bd10 <manageStateMachine+0x5d0>)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6013      	str	r3, [r2, #0]

			  adjustement = computeAjustement(targetTemperature, dTavant);
 800ba86:	4b9b      	ldr	r3, [pc, #620]	; (800bcf4 <manageStateMachine+0x5b4>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	6979      	ldr	r1, [r7, #20]
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f000 fe53 	bl	800c738 <computeAjustement>
 800ba92:	63b8      	str	r0, [r7, #56]	; 0x38
			  AirAdjustment(adjustement, SEC_PER_STEP_TEMP_RISE,
							  &primary, PrimaryMotorParam[Model].MinTempRise, PrimaryMotorParam[Model].MaxTempRise,
 800ba94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ba98:	4a99      	ldr	r2, [pc, #612]	; (800bd00 <manageStateMachine+0x5c0>)
 800ba9a:	015b      	lsls	r3, r3, #5
 800ba9c:	4413      	add	r3, r2
 800ba9e:	330a      	adds	r3, #10
 800baa0:	f9b3 3000 	ldrsh.w	r3, [r3]
			  AirAdjustment(adjustement, SEC_PER_STEP_TEMP_RISE,
 800baa4:	b2d8      	uxtb	r0, r3
							  &primary, PrimaryMotorParam[Model].MinTempRise, PrimaryMotorParam[Model].MaxTempRise,
 800baa6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800baaa:	4a95      	ldr	r2, [pc, #596]	; (800bd00 <manageStateMachine+0x5c0>)
 800baac:	015b      	lsls	r3, r3, #5
 800baae:	4413      	add	r3, r2
 800bab0:	3308      	adds	r3, #8
 800bab2:	f9b3 3000 	ldrsh.w	r3, [r3]
			  AirAdjustment(adjustement, SEC_PER_STEP_TEMP_RISE,
 800bab6:	b2db      	uxtb	r3, r3
							  &grill, BoostMotorParam[Model].MinTempRise,BoostMotorParam[Model].MaxTempRise);
 800bab8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800babc:	4992      	ldr	r1, [pc, #584]	; (800bd08 <manageStateMachine+0x5c8>)
 800babe:	0152      	lsls	r2, r2, #5
 800bac0:	440a      	add	r2, r1
 800bac2:	320a      	adds	r2, #10
 800bac4:	f9b2 2000 	ldrsh.w	r2, [r2]
			  AirAdjustment(adjustement, SEC_PER_STEP_TEMP_RISE,
 800bac8:	b2d2      	uxtb	r2, r2
							  &grill, BoostMotorParam[Model].MinTempRise,BoostMotorParam[Model].MaxTempRise);
 800baca:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800bace:	4c8e      	ldr	r4, [pc, #568]	; (800bd08 <manageStateMachine+0x5c8>)
 800bad0:	0149      	lsls	r1, r1, #5
 800bad2:	4421      	add	r1, r4
 800bad4:	3108      	adds	r1, #8
 800bad6:	f9b1 1000 	ldrsh.w	r1, [r1]
			  AirAdjustment(adjustement, SEC_PER_STEP_TEMP_RISE,
 800bada:	b2c9      	uxtb	r1, r1
 800badc:	9103      	str	r1, [sp, #12]
 800bade:	9202      	str	r2, [sp, #8]
 800bae0:	4a8a      	ldr	r2, [pc, #552]	; (800bd0c <manageStateMachine+0x5cc>)
 800bae2:	9201      	str	r2, [sp, #4]
 800bae4:	9300      	str	r3, [sp, #0]
 800bae6:	4603      	mov	r3, r0
 800bae8:	4a86      	ldr	r2, [pc, #536]	; (800bd04 <manageStateMachine+0x5c4>)
 800baea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800baec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800baee:	f000 fe77 	bl	800c7e0 <AirAdjustment>
			}
			timeInTemperatureRise = thermostatRequest ? MINUTES(10):MINUTES(7);
 800baf2:	4b88      	ldr	r3, [pc, #544]	; (800bd14 <manageStateMachine+0x5d4>)
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d001      	beq.n	800bafe <manageStateMachine+0x3be>
 800bafa:	4b87      	ldr	r3, [pc, #540]	; (800bd18 <manageStateMachine+0x5d8>)
 800bafc:	e000      	b.n	800bb00 <manageStateMachine+0x3c0>
 800bafe:	4b87      	ldr	r3, [pc, #540]	; (800bd1c <manageStateMachine+0x5dc>)
 800bb00:	61fb      	str	r3, [r7, #28]
			if ( timeSinceStateEntry > timeInTemperatureRise && (baffleTemperature > targetTemperature))
 800bb02:	4b87      	ldr	r3, [pc, #540]	; (800bd20 <manageStateMachine+0x5e0>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	69fa      	ldr	r2, [r7, #28]
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	d20e      	bcs.n	800bb2a <manageStateMachine+0x3ea>
 800bb0c:	4b85      	ldr	r3, [pc, #532]	; (800bd24 <manageStateMachine+0x5e4>)
 800bb0e:	681a      	ldr	r2, [r3, #0]
 800bb10:	4b78      	ldr	r3, [pc, #480]	; (800bcf4 <manageStateMachine+0x5b4>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	429a      	cmp	r2, r3
 800bb16:	dd08      	ble.n	800bb2a <manageStateMachine+0x3ea>
			{
			  nextState = thermostatRequest ? COMBUSTION_HIGH : COMBUSTION_LOW;
 800bb18:	4b7e      	ldr	r3, [pc, #504]	; (800bd14 <manageStateMachine+0x5d4>)
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d001      	beq.n	800bb24 <manageStateMachine+0x3e4>
 800bb20:	2306      	movs	r3, #6
 800bb22:	e000      	b.n	800bb26 <manageStateMachine+0x3e6>
 800bb24:	2304      	movs	r3, #4
 800bb26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}


#endif
		if(reloadingEvent || (baffleTemperature < 3000)) {// changé pour 300 au lieu de 460 2022-03-04
 800bb2a:	4b7f      	ldr	r3, [pc, #508]	; (800bd28 <manageStateMachine+0x5e8>)
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d105      	bne.n	800bb3e <manageStateMachine+0x3fe>
 800bb32:	4b7c      	ldr	r3, [pc, #496]	; (800bd24 <manageStateMachine+0x5e4>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	dc03      	bgt.n	800bb46 <manageStateMachine+0x406>
			nextState = ZEROING_STEPPER;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		{
			nextState = thermostatRequest ? COMBUSTION_HIGH : COMBUSTION_LOW;
		}

      break;
 800bb44:	e3fd      	b.n	800c342 <manageStateMachine+0xc02>
		else if(timeSinceStateEntry > MINUTES(30))
 800bb46:	4b76      	ldr	r3, [pc, #472]	; (800bd20 <manageStateMachine+0x5e0>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	4a78      	ldr	r2, [pc, #480]	; (800bd2c <manageStateMachine+0x5ec>)
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	f240 83f8 	bls.w	800c342 <manageStateMachine+0xc02>
			nextState = thermostatRequest ? COMBUSTION_HIGH : COMBUSTION_LOW;
 800bb52:	4b70      	ldr	r3, [pc, #448]	; (800bd14 <manageStateMachine+0x5d4>)
 800bb54:	781b      	ldrb	r3, [r3, #0]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d001      	beq.n	800bb5e <manageStateMachine+0x41e>
 800bb5a:	2306      	movs	r3, #6
 800bb5c:	e000      	b.n	800bb60 <manageStateMachine+0x420>
 800bb5e:	2304      	movs	r3, #4
 800bb60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 800bb64:	e3ed      	b.n	800c342 <manageStateMachine+0xc02>

	case COMBUSTION_HIGH:
			if(historyState != currentState){
 800bb66:	4b64      	ldr	r3, [pc, #400]	; (800bcf8 <manageStateMachine+0x5b8>)
 800bb68:	781a      	ldrb	r2, [r3, #0]
 800bb6a:	4b64      	ldr	r3, [pc, #400]	; (800bcfc <manageStateMachine+0x5bc>)
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	d02e      	beq.n	800bbd0 <manageStateMachine+0x490>

				StateEntryControlAdjustment(&primary, PrimaryMotorParam[Model].MinCombHigh, PrimaryMotorParam[Model].MaxCombHigh,
 800bb72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bb76:	4a62      	ldr	r2, [pc, #392]	; (800bd00 <manageStateMachine+0x5c0>)
 800bb78:	015b      	lsls	r3, r3, #5
 800bb7a:	4413      	add	r3, r2
 800bb7c:	3316      	adds	r3, #22
 800bb7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bb82:	b2d9      	uxtb	r1, r3
 800bb84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bb88:	4a5d      	ldr	r2, [pc, #372]	; (800bd00 <manageStateMachine+0x5c0>)
 800bb8a:	015b      	lsls	r3, r3, #5
 800bb8c:	4413      	add	r3, r2
 800bb8e:	3314      	adds	r3, #20
 800bb90:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bb94:	b2d8      	uxtb	r0, r3
							  				&grill, BoostMotorParam[Model].MinCombHigh,BoostMotorParam[Model].MaxCombHigh);
 800bb96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bb9a:	4a5b      	ldr	r2, [pc, #364]	; (800bd08 <manageStateMachine+0x5c8>)
 800bb9c:	015b      	lsls	r3, r3, #5
 800bb9e:	4413      	add	r3, r2
 800bba0:	3316      	adds	r3, #22
 800bba2:	f9b3 3000 	ldrsh.w	r3, [r3]
				StateEntryControlAdjustment(&primary, PrimaryMotorParam[Model].MinCombHigh, PrimaryMotorParam[Model].MaxCombHigh,
 800bba6:	b2db      	uxtb	r3, r3
							  				&grill, BoostMotorParam[Model].MinCombHigh,BoostMotorParam[Model].MaxCombHigh);
 800bba8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800bbac:	4c56      	ldr	r4, [pc, #344]	; (800bd08 <manageStateMachine+0x5c8>)
 800bbae:	0152      	lsls	r2, r2, #5
 800bbb0:	4422      	add	r2, r4
 800bbb2:	3214      	adds	r2, #20
 800bbb4:	f9b2 2000 	ldrsh.w	r2, [r2]
				StateEntryControlAdjustment(&primary, PrimaryMotorParam[Model].MinCombHigh, PrimaryMotorParam[Model].MaxCombHigh,
 800bbb8:	b2d2      	uxtb	r2, r2
 800bbba:	9201      	str	r2, [sp, #4]
 800bbbc:	9300      	str	r3, [sp, #0]
 800bbbe:	4b53      	ldr	r3, [pc, #332]	; (800bd0c <manageStateMachine+0x5cc>)
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	4850      	ldr	r0, [pc, #320]	; (800bd04 <manageStateMachine+0x5c4>)
 800bbc4:	f000 fe52 	bl	800c86c <StateEntryControlAdjustment>
				historyState = currentState;
 800bbc8:	4b4c      	ldr	r3, [pc, #304]	; (800bcfc <manageStateMachine+0x5bc>)
 800bbca:	781a      	ldrb	r2, [r3, #0]
 800bbcc:	4b4a      	ldr	r3, [pc, #296]	; (800bcf8 <manageStateMachine+0x5b8>)
 800bbce:	701a      	strb	r2, [r3, #0]
            }
#else
            /* Since the control algo (i.e. computeAjustement) is limited
               to +/- 3 steps, it whould take 3 * sec per step to complete
               the mouvement. Reevaluate the control at that maximum period. */
            if (TimeForStep >= (3 * SEC_PER_STEP_COMB_HIGH * 1000)&& AirInput_InPosition(&grill) && AirInput_InPosition(&primary) ) {
 800bbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800bbd6:	fb02 f303 	mul.w	r3, r2, r3
 800bbda:	69ba      	ldr	r2, [r7, #24]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d34d      	bcc.n	800bc7c <manageStateMachine+0x53c>
 800bbe0:	484a      	ldr	r0, [pc, #296]	; (800bd0c <manageStateMachine+0x5cc>)
 800bbe2:	f7ff fcf7 	bl	800b5d4 <AirInput_InPosition>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d047      	beq.n	800bc7c <manageStateMachine+0x53c>
 800bbec:	4845      	ldr	r0, [pc, #276]	; (800bd04 <manageStateMachine+0x5c4>)
 800bbee:	f7ff fcf1 	bl	800b5d4 <AirInput_InPosition>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d041      	beq.n	800bc7c <manageStateMachine+0x53c>
              timeRefAutoMode = currentTime_ms;
 800bbf8:	4a45      	ldr	r2, [pc, #276]	; (800bd10 <manageStateMachine+0x5d0>)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6013      	str	r3, [r2, #0]
              adjustement = computeAjustement(TemperatureParam[Model].CombHighTarget, dTavant);
 800bbfe:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800bc02:	493b      	ldr	r1, [pc, #236]	; (800bcf0 <manageStateMachine+0x5b0>)
 800bc04:	4613      	mov	r3, r2
 800bc06:	011b      	lsls	r3, r3, #4
 800bc08:	4413      	add	r3, r2
 800bc0a:	005b      	lsls	r3, r3, #1
 800bc0c:	440b      	add	r3, r1
 800bc0e:	330a      	adds	r3, #10
 800bc10:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc14:	6979      	ldr	r1, [r7, #20]
 800bc16:	4618      	mov	r0, r3
 800bc18:	f000 fd8e 	bl	800c738 <computeAjustement>
 800bc1c:	63b8      	str	r0, [r7, #56]	; 0x38
			  AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
											&primary, PrimaryMotorParam[Model].MinCombHigh, PrimaryMotorParam[Model].MaxCombHigh,
 800bc1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bc22:	4a37      	ldr	r2, [pc, #220]	; (800bd00 <manageStateMachine+0x5c0>)
 800bc24:	015b      	lsls	r3, r3, #5
 800bc26:	4413      	add	r3, r2
 800bc28:	3316      	adds	r3, #22
 800bc2a:	f9b3 3000 	ldrsh.w	r3, [r3]
			  AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 800bc2e:	b2d8      	uxtb	r0, r3
											&primary, PrimaryMotorParam[Model].MinCombHigh, PrimaryMotorParam[Model].MaxCombHigh,
 800bc30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bc34:	4a32      	ldr	r2, [pc, #200]	; (800bd00 <manageStateMachine+0x5c0>)
 800bc36:	015b      	lsls	r3, r3, #5
 800bc38:	4413      	add	r3, r2
 800bc3a:	3314      	adds	r3, #20
 800bc3c:	f9b3 3000 	ldrsh.w	r3, [r3]
			  AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 800bc40:	b2db      	uxtb	r3, r3
							  				&grill, BoostMotorParam[Model].MinCombHigh,BoostMotorParam[Model].MaxCombHigh);
 800bc42:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800bc46:	4930      	ldr	r1, [pc, #192]	; (800bd08 <manageStateMachine+0x5c8>)
 800bc48:	0152      	lsls	r2, r2, #5
 800bc4a:	440a      	add	r2, r1
 800bc4c:	3216      	adds	r2, #22
 800bc4e:	f9b2 2000 	ldrsh.w	r2, [r2]
			  AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 800bc52:	b2d2      	uxtb	r2, r2
							  				&grill, BoostMotorParam[Model].MinCombHigh,BoostMotorParam[Model].MaxCombHigh);
 800bc54:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800bc58:	4c2b      	ldr	r4, [pc, #172]	; (800bd08 <manageStateMachine+0x5c8>)
 800bc5a:	0149      	lsls	r1, r1, #5
 800bc5c:	4421      	add	r1, r4
 800bc5e:	3114      	adds	r1, #20
 800bc60:	f9b1 1000 	ldrsh.w	r1, [r1]
			  AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 800bc64:	b2c9      	uxtb	r1, r1
 800bc66:	9103      	str	r1, [sp, #12]
 800bc68:	9202      	str	r2, [sp, #8]
 800bc6a:	4a28      	ldr	r2, [pc, #160]	; (800bd0c <manageStateMachine+0x5cc>)
 800bc6c:	9201      	str	r2, [sp, #4]
 800bc6e:	9300      	str	r3, [sp, #0]
 800bc70:	4603      	mov	r3, r0
 800bc72:	4a24      	ldr	r2, [pc, #144]	; (800bd04 <manageStateMachine+0x5c4>)
 800bc74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc76:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bc78:	f000 fdb2 	bl	800c7e0 <AirAdjustment>

            }
#endif
            if ( ((baffleTemperature) >= (rearTemperature-TemperatureParam[Model].CoalDeltaTemp)) // changement de <= à >= UFEC 23 2021-11-23
 800bc7c:	4b2c      	ldr	r3, [pc, #176]	; (800bd30 <manageStateMachine+0x5f0>)
 800bc7e:	6819      	ldr	r1, [r3, #0]
 800bc80:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800bc84:	481a      	ldr	r0, [pc, #104]	; (800bcf0 <manageStateMachine+0x5b0>)
 800bc86:	4613      	mov	r3, r2
 800bc88:	011b      	lsls	r3, r3, #4
 800bc8a:	4413      	add	r3, r2
 800bc8c:	005b      	lsls	r3, r3, #1
 800bc8e:	4403      	add	r3, r0
 800bc90:	3316      	adds	r3, #22
 800bc92:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc96:	1aca      	subs	r2, r1, r3
 800bc98:	4b22      	ldr	r3, [pc, #136]	; (800bd24 <manageStateMachine+0x5e4>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	dc12      	bgt.n	800bcc6 <manageStateMachine+0x586>
            		&& (TemperatureParam[Model].CoalCrossOverRearHigh > rearTemperature) ) //détection de l'état coal/braise
 800bca0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800bca4:	4912      	ldr	r1, [pc, #72]	; (800bcf0 <manageStateMachine+0x5b0>)
 800bca6:	4613      	mov	r3, r2
 800bca8:	011b      	lsls	r3, r3, #4
 800bcaa:	4413      	add	r3, r2
 800bcac:	005b      	lsls	r3, r3, #1
 800bcae:	440b      	add	r3, r1
 800bcb0:	3314      	adds	r3, #20
 800bcb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	4b1d      	ldr	r3, [pc, #116]	; (800bd30 <manageStateMachine+0x5f0>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	dd02      	ble.n	800bcc6 <manageStateMachine+0x586>
            {
            	nextState = COAL_HIGH;
 800bcc0:	2309      	movs	r3, #9
 800bcc2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            }
            if (!thermostatRequest) {
 800bcc6:	4b13      	ldr	r3, [pc, #76]	; (800bd14 <manageStateMachine+0x5d4>)
 800bcc8:	781b      	ldrb	r3, [r3, #0]
 800bcca:	f083 0301 	eor.w	r3, r3, #1
 800bcce:	b2db      	uxtb	r3, r3
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d003      	beq.n	800bcdc <manageStateMachine+0x59c>

              nextState = COMBUSTION_LOW;
 800bcd4:	2304      	movs	r3, #4
 800bcd6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            } else if (reloadingEvent) {
              nextState = ZEROING_STEPPER;
            }

          break;
 800bcda:	e334      	b.n	800c346 <manageStateMachine+0xc06>
            } else if (reloadingEvent) {
 800bcdc:	4b12      	ldr	r3, [pc, #72]	; (800bd28 <manageStateMachine+0x5e8>)
 800bcde:	781b      	ldrb	r3, [r3, #0]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	f000 8330 	beq.w	800c346 <manageStateMachine+0xc06>
              nextState = ZEROING_STEPPER;
 800bce6:	2300      	movs	r3, #0
 800bce8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
          break;
 800bcec:	e32b      	b.n	800c346 <manageStateMachine+0xc06>
 800bcee:	bf00      	nop
 800bcf0:	0800fe04 	.word	0x0800fe04
 800bcf4:	2000285c 	.word	0x2000285c
 800bcf8:	20002860 	.word	0x20002860
 800bcfc:	2000233c 	.word	0x2000233c
 800bd00:	0800fe48 	.word	0x0800fe48
 800bd04:	2000000c 	.word	0x2000000c
 800bd08:	0800fe88 	.word	0x0800fe88
 800bd0c:	20000024 	.word	0x20000024
 800bd10:	20002858 	.word	0x20002858
 800bd14:	20002350 	.word	0x20002350
 800bd18:	000927c0 	.word	0x000927c0
 800bd1c:	000668a0 	.word	0x000668a0
 800bd20:	20002824 	.word	0x20002824
 800bd24:	20002344 	.word	0x20002344
 800bd28:	2000233d 	.word	0x2000233d
 800bd2c:	001b7740 	.word	0x001b7740
 800bd30:	20002348 	.word	0x20002348

    case COMBUSTION_LOW:
    	HAL_GPIO_WritePin(SPEED1_COIL_GPIO_Port,SPEED1_COIL_Pin,RESET);//desactive le relai pour activer la carte 2 PLV 15/12/21
 800bd34:	2200      	movs	r2, #0
 800bd36:	2108      	movs	r1, #8
 800bd38:	48be      	ldr	r0, [pc, #760]	; (800c034 <manageStateMachine+0x8f4>)
 800bd3a:	f7f6 febe 	bl	8002aba <HAL_GPIO_WritePin>
		if(historyState != currentState){
 800bd3e:	4bbe      	ldr	r3, [pc, #760]	; (800c038 <manageStateMachine+0x8f8>)
 800bd40:	781a      	ldrb	r2, [r3, #0]
 800bd42:	4bbe      	ldr	r3, [pc, #760]	; (800c03c <manageStateMachine+0x8fc>)
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d02e      	beq.n	800bda8 <manageStateMachine+0x668>

			StateEntryControlAdjustment(&primary, PrimaryMotorParam[Model].MinCombLow, PrimaryMotorParam[Model].MaxCombLow,
 800bd4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bd4e:	4abc      	ldr	r2, [pc, #752]	; (800c040 <manageStateMachine+0x900>)
 800bd50:	015b      	lsls	r3, r3, #5
 800bd52:	4413      	add	r3, r2
 800bd54:	330e      	adds	r3, #14
 800bd56:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bd5a:	b2d9      	uxtb	r1, r3
 800bd5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bd60:	4ab7      	ldr	r2, [pc, #732]	; (800c040 <manageStateMachine+0x900>)
 800bd62:	015b      	lsls	r3, r3, #5
 800bd64:	4413      	add	r3, r2
 800bd66:	330c      	adds	r3, #12
 800bd68:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bd6c:	b2d8      	uxtb	r0, r3
							  			&grill, BoostMotorParam[Model].MinCombLow,BoostMotorParam[Model].MaxCombLow);
 800bd6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bd72:	4ab4      	ldr	r2, [pc, #720]	; (800c044 <manageStateMachine+0x904>)
 800bd74:	015b      	lsls	r3, r3, #5
 800bd76:	4413      	add	r3, r2
 800bd78:	330e      	adds	r3, #14
 800bd7a:	f9b3 3000 	ldrsh.w	r3, [r3]
			StateEntryControlAdjustment(&primary, PrimaryMotorParam[Model].MinCombLow, PrimaryMotorParam[Model].MaxCombLow,
 800bd7e:	b2db      	uxtb	r3, r3
							  			&grill, BoostMotorParam[Model].MinCombLow,BoostMotorParam[Model].MaxCombLow);
 800bd80:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800bd84:	4caf      	ldr	r4, [pc, #700]	; (800c044 <manageStateMachine+0x904>)
 800bd86:	0152      	lsls	r2, r2, #5
 800bd88:	4422      	add	r2, r4
 800bd8a:	320c      	adds	r2, #12
 800bd8c:	f9b2 2000 	ldrsh.w	r2, [r2]
			StateEntryControlAdjustment(&primary, PrimaryMotorParam[Model].MinCombLow, PrimaryMotorParam[Model].MaxCombLow,
 800bd90:	b2d2      	uxtb	r2, r2
 800bd92:	9201      	str	r2, [sp, #4]
 800bd94:	9300      	str	r3, [sp, #0]
 800bd96:	4bac      	ldr	r3, [pc, #688]	; (800c048 <manageStateMachine+0x908>)
 800bd98:	4602      	mov	r2, r0
 800bd9a:	48ac      	ldr	r0, [pc, #688]	; (800c04c <manageStateMachine+0x90c>)
 800bd9c:	f000 fd66 	bl	800c86c <StateEntryControlAdjustment>
		    historyState = currentState;
 800bda0:	4ba6      	ldr	r3, [pc, #664]	; (800c03c <manageStateMachine+0x8fc>)
 800bda2:	781a      	ldrb	r2, [r3, #0]
 800bda4:	4ba4      	ldr	r3, [pc, #656]	; (800c038 <manageStateMachine+0x8f8>)
 800bda6:	701a      	strb	r2, [r3, #0]
        	PIDTrapPosition = PIDTrapPosition > PRIMARY_SECONDARY_FULL_OPEN?PRIMARY_SECONDARY_FULL_OPEN:PIDTrapPosition<0?0:PIDTrapPosition;

        }
		AirInput_forceAperture(&primary,PIDTrapPosition);
#else
		deltaTemperature = abs(rearTemperature - baffleTemperature);
 800bda8:	4ba9      	ldr	r3, [pc, #676]	; (800c050 <manageStateMachine+0x910>)
 800bdaa:	681a      	ldr	r2, [r3, #0]
 800bdac:	4ba9      	ldr	r3, [pc, #676]	; (800c054 <manageStateMachine+0x914>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	1ad3      	subs	r3, r2, r3
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	bfb8      	it	lt
 800bdb6:	425b      	neglt	r3, r3
 800bdb8:	613b      	str	r3, [r7, #16]

		if (rearTemperature < TemperatureParam[Model].FlameLoss && ( deltaTemperature < TemperatureParam[Model].FlameLossDelta)) { //changement de reartemp pour le flameloss au lieu de baffletemp GTF 2022-08-30
 800bdba:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800bdbe:	49a6      	ldr	r1, [pc, #664]	; (800c058 <manageStateMachine+0x918>)
 800bdc0:	4613      	mov	r3, r2
 800bdc2:	011b      	lsls	r3, r3, #4
 800bdc4:	4413      	add	r3, r2
 800bdc6:	005b      	lsls	r3, r3, #1
 800bdc8:	440b      	add	r3, r1
 800bdca:	330e      	adds	r3, #14
 800bdcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	4b9f      	ldr	r3, [pc, #636]	; (800c050 <manageStateMachine+0x910>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	dd16      	ble.n	800be08 <manageStateMachine+0x6c8>
 800bdda:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800bdde:	499e      	ldr	r1, [pc, #632]	; (800c058 <manageStateMachine+0x918>)
 800bde0:	4613      	mov	r3, r2
 800bde2:	011b      	lsls	r3, r3, #4
 800bde4:	4413      	add	r3, r2
 800bde6:	005b      	lsls	r3, r3, #1
 800bde8:	440b      	add	r3, r1
 800bdea:	3310      	adds	r3, #16
 800bdec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bdf0:	461a      	mov	r2, r3
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	da07      	bge.n	800be08 <manageStateMachine+0x6c8>
			nextState = FLAME_LOSS;
 800bdf8:	2308      	movs	r3, #8
 800bdfa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			AirInput_forceAperture(&grill, GRILL_FULL_OPEN);
 800bdfe:	2164      	movs	r1, #100	; 0x64
 800be00:	4891      	ldr	r0, [pc, #580]	; (800c048 <manageStateMachine+0x908>)
 800be02:	f7ff fbbd 	bl	800b580 <AirInput_forceAperture>
 800be06:	e0de      	b.n	800bfc6 <manageStateMachine+0x886>
		}
		else{
			//we loss the flamme but we are not in coal yet, we reopen the grill
		  //AirInput_setSetPoint(&grill, GRILL_CLOSED, SEC_PER_STEP_COMB_LOW);
		  if (TimeForStep >= (1 * SEC_PER_STEP_COMB_LOW * 1000)
 800be08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800be0e:	fb02 f303 	mul.w	r3, r2, r3
 800be12:	69ba      	ldr	r2, [r7, #24]
 800be14:	429a      	cmp	r2, r3
 800be16:	f0c0 80d6 	bcc.w	800bfc6 <manageStateMachine+0x886>
				  && AirInput_InPosition(&grill)
 800be1a:	488b      	ldr	r0, [pc, #556]	; (800c048 <manageStateMachine+0x908>)
 800be1c:	f7ff fbda 	bl	800b5d4 <AirInput_InPosition>
 800be20:	4603      	mov	r3, r0
 800be22:	2b00      	cmp	r3, #0
 800be24:	f000 80cf 	beq.w	800bfc6 <manageStateMachine+0x886>
				  && AirInput_InPosition(&primary)
 800be28:	4888      	ldr	r0, [pc, #544]	; (800c04c <manageStateMachine+0x90c>)
 800be2a:	f7ff fbd3 	bl	800b5d4 <AirInput_InPosition>
 800be2e:	4603      	mov	r3, r0
 800be30:	2b00      	cmp	r3, #0
 800be32:	f000 80c8 	beq.w	800bfc6 <manageStateMachine+0x886>
				  && (timeSinceStateEntry >=MINUTES(2)) ) {
 800be36:	4b89      	ldr	r3, [pc, #548]	; (800c05c <manageStateMachine+0x91c>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	4a89      	ldr	r2, [pc, #548]	; (800c060 <manageStateMachine+0x920>)
 800be3c:	4293      	cmp	r3, r2
 800be3e:	f240 80c2 	bls.w	800bfc6 <manageStateMachine+0x886>

			timeRefAutoMode = currentTime_ms;
 800be42:	4a88      	ldr	r2, [pc, #544]	; (800c064 <manageStateMachine+0x924>)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6013      	str	r3, [r2, #0]

			adjustement = computeAjustement(TemperatureParam[Model].CombLowTarget, dTavant);
 800be48:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800be4c:	4982      	ldr	r1, [pc, #520]	; (800c058 <manageStateMachine+0x918>)
 800be4e:	4613      	mov	r3, r2
 800be50:	011b      	lsls	r3, r3, #4
 800be52:	4413      	add	r3, r2
 800be54:	005b      	lsls	r3, r3, #1
 800be56:	440b      	add	r3, r1
 800be58:	3308      	adds	r3, #8
 800be5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800be5e:	6979      	ldr	r1, [r7, #20]
 800be60:	4618      	mov	r0, r3
 800be62:	f000 fc69 	bl	800c738 <computeAjustement>
 800be66:	63b8      	str	r0, [r7, #56]	; 0x38

			if (timeSinceStateEntry > MINUTES(60) && (rearTemperature > TemperatureParam[Model].CombLowtoSuperLow)) //changé 35 min pour 60
 800be68:	4b7c      	ldr	r3, [pc, #496]	; (800c05c <manageStateMachine+0x91c>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	4a7e      	ldr	r2, [pc, #504]	; (800c068 <manageStateMachine+0x928>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d97a      	bls.n	800bf68 <manageStateMachine+0x828>
 800be72:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800be76:	4978      	ldr	r1, [pc, #480]	; (800c058 <manageStateMachine+0x918>)
 800be78:	4613      	mov	r3, r2
 800be7a:	011b      	lsls	r3, r3, #4
 800be7c:	4413      	add	r3, r2
 800be7e:	005b      	lsls	r3, r3, #1
 800be80:	440b      	add	r3, r1
 800be82:	330c      	adds	r3, #12
 800be84:	f9b3 3000 	ldrsh.w	r3, [r3]
 800be88:	461a      	mov	r2, r3
 800be8a:	4b71      	ldr	r3, [pc, #452]	; (800c050 <manageStateMachine+0x910>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	429a      	cmp	r2, r3
 800be90:	da6a      	bge.n	800bf68 <manageStateMachine+0x828>
			{		
				StateEntryControlAdjustment(&primary,PrimaryMotorParam[Model].MinCombSuperLow,PrimaryMotorParam[Model].MaxCombSuperLow,
 800be92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800be96:	4a6a      	ldr	r2, [pc, #424]	; (800c040 <manageStateMachine+0x900>)
 800be98:	015b      	lsls	r3, r3, #5
 800be9a:	4413      	add	r3, r2
 800be9c:	3312      	adds	r3, #18
 800be9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bea2:	b2d9      	uxtb	r1, r3
 800bea4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bea8:	4a65      	ldr	r2, [pc, #404]	; (800c040 <manageStateMachine+0x900>)
 800beaa:	015b      	lsls	r3, r3, #5
 800beac:	4413      	add	r3, r2
 800beae:	3310      	adds	r3, #16
 800beb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800beb4:	b2d8      	uxtb	r0, r3
											&grill,BoostMotorParam[Model].MinCombSuperLow,BoostMotorParam[Model].MaxCombSuperLow);
 800beb6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800beba:	4a62      	ldr	r2, [pc, #392]	; (800c044 <manageStateMachine+0x904>)
 800bebc:	015b      	lsls	r3, r3, #5
 800bebe:	4413      	add	r3, r2
 800bec0:	3312      	adds	r3, #18
 800bec2:	f9b3 3000 	ldrsh.w	r3, [r3]
				StateEntryControlAdjustment(&primary,PrimaryMotorParam[Model].MinCombSuperLow,PrimaryMotorParam[Model].MaxCombSuperLow,
 800bec6:	b2db      	uxtb	r3, r3
											&grill,BoostMotorParam[Model].MinCombSuperLow,BoostMotorParam[Model].MaxCombSuperLow);
 800bec8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800becc:	4c5d      	ldr	r4, [pc, #372]	; (800c044 <manageStateMachine+0x904>)
 800bece:	0152      	lsls	r2, r2, #5
 800bed0:	4422      	add	r2, r4
 800bed2:	3210      	adds	r2, #16
 800bed4:	f9b2 2000 	ldrsh.w	r2, [r2]
				StateEntryControlAdjustment(&primary,PrimaryMotorParam[Model].MinCombSuperLow,PrimaryMotorParam[Model].MaxCombSuperLow,
 800bed8:	b2d2      	uxtb	r2, r2
 800beda:	9201      	str	r2, [sp, #4]
 800bedc:	9300      	str	r3, [sp, #0]
 800bede:	4b5a      	ldr	r3, [pc, #360]	; (800c048 <manageStateMachine+0x908>)
 800bee0:	4602      	mov	r2, r0
 800bee2:	485a      	ldr	r0, [pc, #360]	; (800c04c <manageStateMachine+0x90c>)
 800bee4:	f000 fcc2 	bl	800c86c <StateEntryControlAdjustment>
				adjustement = computeAjustement(TemperatureParam[Model].CombLowtoSuperLow, dTavant);
 800bee8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800beec:	495a      	ldr	r1, [pc, #360]	; (800c058 <manageStateMachine+0x918>)
 800beee:	4613      	mov	r3, r2
 800bef0:	011b      	lsls	r3, r3, #4
 800bef2:	4413      	add	r3, r2
 800bef4:	005b      	lsls	r3, r3, #1
 800bef6:	440b      	add	r3, r1
 800bef8:	330c      	adds	r3, #12
 800befa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800befe:	6979      	ldr	r1, [r7, #20]
 800bf00:	4618      	mov	r0, r3
 800bf02:	f000 fc19 	bl	800c738 <computeAjustement>
 800bf06:	63b8      	str	r0, [r7, #56]	; 0x38
			
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
									&primary,PrimaryMotorParam[Model].MinCombSuperLow,PrimaryMotorParam[Model].MaxCombSuperLow,
 800bf08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf0c:	4a4c      	ldr	r2, [pc, #304]	; (800c040 <manageStateMachine+0x900>)
 800bf0e:	015b      	lsls	r3, r3, #5
 800bf10:	4413      	add	r3, r2
 800bf12:	3312      	adds	r3, #18
 800bf14:	f9b3 3000 	ldrsh.w	r3, [r3]
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 800bf18:	b2d8      	uxtb	r0, r3
									&primary,PrimaryMotorParam[Model].MinCombSuperLow,PrimaryMotorParam[Model].MaxCombSuperLow,
 800bf1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf1e:	4a48      	ldr	r2, [pc, #288]	; (800c040 <manageStateMachine+0x900>)
 800bf20:	015b      	lsls	r3, r3, #5
 800bf22:	4413      	add	r3, r2
 800bf24:	3310      	adds	r3, #16
 800bf26:	f9b3 3000 	ldrsh.w	r3, [r3]
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 800bf2a:	b2db      	uxtb	r3, r3
									&grill,BoostMotorParam[Model].MinCombSuperLow,BoostMotorParam[Model].MaxCombSuperLow);
 800bf2c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800bf30:	4944      	ldr	r1, [pc, #272]	; (800c044 <manageStateMachine+0x904>)
 800bf32:	0152      	lsls	r2, r2, #5
 800bf34:	440a      	add	r2, r1
 800bf36:	3212      	adds	r2, #18
 800bf38:	f9b2 2000 	ldrsh.w	r2, [r2]
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 800bf3c:	b2d2      	uxtb	r2, r2
									&grill,BoostMotorParam[Model].MinCombSuperLow,BoostMotorParam[Model].MaxCombSuperLow);
 800bf3e:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800bf42:	4c40      	ldr	r4, [pc, #256]	; (800c044 <manageStateMachine+0x904>)
 800bf44:	0149      	lsls	r1, r1, #5
 800bf46:	4421      	add	r1, r4
 800bf48:	3110      	adds	r1, #16
 800bf4a:	f9b1 1000 	ldrsh.w	r1, [r1]
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 800bf4e:	b2c9      	uxtb	r1, r1
 800bf50:	9103      	str	r1, [sp, #12]
 800bf52:	9202      	str	r2, [sp, #8]
 800bf54:	4a3c      	ldr	r2, [pc, #240]	; (800c048 <manageStateMachine+0x908>)
 800bf56:	9201      	str	r2, [sp, #4]
 800bf58:	9300      	str	r3, [sp, #0]
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	4a3b      	ldr	r2, [pc, #236]	; (800c04c <manageStateMachine+0x90c>)
 800bf5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bf62:	f000 fc3d 	bl	800c7e0 <AirAdjustment>
 800bf66:	e02e      	b.n	800bfc6 <manageStateMachine+0x886>
			
			}
			else
			{
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
							  &primary, PrimaryMotorParam[Model].MinCombLow, PrimaryMotorParam[Model].MaxCombLow,
 800bf68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf6c:	4a34      	ldr	r2, [pc, #208]	; (800c040 <manageStateMachine+0x900>)
 800bf6e:	015b      	lsls	r3, r3, #5
 800bf70:	4413      	add	r3, r2
 800bf72:	330e      	adds	r3, #14
 800bf74:	f9b3 3000 	ldrsh.w	r3, [r3]
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 800bf78:	b2d8      	uxtb	r0, r3
							  &primary, PrimaryMotorParam[Model].MinCombLow, PrimaryMotorParam[Model].MaxCombLow,
 800bf7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf7e:	4a30      	ldr	r2, [pc, #192]	; (800c040 <manageStateMachine+0x900>)
 800bf80:	015b      	lsls	r3, r3, #5
 800bf82:	4413      	add	r3, r2
 800bf84:	330c      	adds	r3, #12
 800bf86:	f9b3 3000 	ldrsh.w	r3, [r3]
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 800bf8a:	b2db      	uxtb	r3, r3
							  &grill,BoostMotorParam[Model].MinCombLow,BoostMotorParam[Model].MaxCombLow);
 800bf8c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800bf90:	492c      	ldr	r1, [pc, #176]	; (800c044 <manageStateMachine+0x904>)
 800bf92:	0152      	lsls	r2, r2, #5
 800bf94:	440a      	add	r2, r1
 800bf96:	320e      	adds	r2, #14
 800bf98:	f9b2 2000 	ldrsh.w	r2, [r2]
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 800bf9c:	b2d2      	uxtb	r2, r2
							  &grill,BoostMotorParam[Model].MinCombLow,BoostMotorParam[Model].MaxCombLow);
 800bf9e:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800bfa2:	4c28      	ldr	r4, [pc, #160]	; (800c044 <manageStateMachine+0x904>)
 800bfa4:	0149      	lsls	r1, r1, #5
 800bfa6:	4421      	add	r1, r4
 800bfa8:	310c      	adds	r1, #12
 800bfaa:	f9b1 1000 	ldrsh.w	r1, [r1]
				AirAdjustment(adjustement, SEC_PER_STEP_COMB_LOW,
 800bfae:	b2c9      	uxtb	r1, r1
 800bfb0:	9103      	str	r1, [sp, #12]
 800bfb2:	9202      	str	r2, [sp, #8]
 800bfb4:	4a24      	ldr	r2, [pc, #144]	; (800c048 <manageStateMachine+0x908>)
 800bfb6:	9201      	str	r2, [sp, #4]
 800bfb8:	9300      	str	r3, [sp, #0]
 800bfba:	4603      	mov	r3, r0
 800bfbc:	4a23      	ldr	r2, [pc, #140]	; (800c04c <manageStateMachine+0x90c>)
 800bfbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bfc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bfc2:	f000 fc0d 	bl	800c7e0 <AirAdjustment>
			}
  	  	  }
		}

#endif
		if ( (baffleTemperature <= (rearTemperature-TemperatureParam[Model].CoalDeltaTemp)) //RETOUR À <= ET CHANGEMENENT POUR 200 POUR LE COALCROSSOVERLOW gtf 2022-08-30
 800bfc6:	4b22      	ldr	r3, [pc, #136]	; (800c050 <manageStateMachine+0x910>)
 800bfc8:	6819      	ldr	r1, [r3, #0]
 800bfca:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800bfce:	4822      	ldr	r0, [pc, #136]	; (800c058 <manageStateMachine+0x918>)
 800bfd0:	4613      	mov	r3, r2
 800bfd2:	011b      	lsls	r3, r3, #4
 800bfd4:	4413      	add	r3, r2
 800bfd6:	005b      	lsls	r3, r3, #1
 800bfd8:	4403      	add	r3, r0
 800bfda:	3316      	adds	r3, #22
 800bfdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bfe0:	1aca      	subs	r2, r1, r3
 800bfe2:	4b1c      	ldr	r3, [pc, #112]	; (800c054 <manageStateMachine+0x914>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	db12      	blt.n	800c010 <manageStateMachine+0x8d0>
				&& (rearTemperature < TemperatureParam[Model].CoalCrossOverRearLow) )
 800bfea:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800bfee:	491a      	ldr	r1, [pc, #104]	; (800c058 <manageStateMachine+0x918>)
 800bff0:	4613      	mov	r3, r2
 800bff2:	011b      	lsls	r3, r3, #4
 800bff4:	4413      	add	r3, r2
 800bff6:	005b      	lsls	r3, r3, #1
 800bff8:	440b      	add	r3, r1
 800bffa:	3312      	adds	r3, #18
 800bffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c000:	461a      	mov	r2, r3
 800c002:	4b13      	ldr	r3, [pc, #76]	; (800c050 <manageStateMachine+0x910>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	429a      	cmp	r2, r3
 800c008:	dd02      	ble.n	800c010 <manageStateMachine+0x8d0>
        {
        	nextState = COAL_LOW;
 800c00a:	2307      	movs	r3, #7
 800c00c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        }
        if (thermostatRequest) {
 800c010:	4b16      	ldr	r3, [pc, #88]	; (800c06c <manageStateMachine+0x92c>)
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d003      	beq.n	800c020 <manageStateMachine+0x8e0>
          nextState = COMBUSTION_HIGH;
 800c018:	2306      	movs	r3, #6
 800c01a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        } else if (reloadingEvent) {
          nextState = ZEROING_STEPPER;
        }
      break;
 800c01e:	e194      	b.n	800c34a <manageStateMachine+0xc0a>
        } else if (reloadingEvent) {
 800c020:	4b13      	ldr	r3, [pc, #76]	; (800c070 <manageStateMachine+0x930>)
 800c022:	781b      	ldrb	r3, [r3, #0]
 800c024:	2b00      	cmp	r3, #0
 800c026:	f000 8190 	beq.w	800c34a <manageStateMachine+0xc0a>
          nextState = ZEROING_STEPPER;
 800c02a:	2300      	movs	r3, #0
 800c02c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 800c030:	e18b      	b.n	800c34a <manageStateMachine+0xc0a>
 800c032:	bf00      	nop
 800c034:	40010800 	.word	0x40010800
 800c038:	20002860 	.word	0x20002860
 800c03c:	2000233c 	.word	0x2000233c
 800c040:	0800fe48 	.word	0x0800fe48
 800c044:	0800fe88 	.word	0x0800fe88
 800c048:	20000024 	.word	0x20000024
 800c04c:	2000000c 	.word	0x2000000c
 800c050:	20002348 	.word	0x20002348
 800c054:	20002344 	.word	0x20002344
 800c058:	0800fe04 	.word	0x0800fe04
 800c05c:	20002824 	.word	0x20002824
 800c060:	0001d4bf 	.word	0x0001d4bf
 800c064:	20002858 	.word	0x20002858
 800c068:	0036ee80 	.word	0x0036ee80
 800c06c:	20002350 	.word	0x20002350
 800c070:	2000233d 	.word	0x2000233d

    case COAL_LOW: //remplacement de la logic du low pour la logic du high de la fournaise pour UFEC 23 2021-11-23

    	HAL_GPIO_WritePin(SPEED1_COIL_GPIO_Port,SPEED1_COIL_Pin,SET);//active le relai pour activer la carte 2 PLV 15/12/21
 800c074:	2201      	movs	r2, #1
 800c076:	2108      	movs	r1, #8
 800c078:	48b8      	ldr	r0, [pc, #736]	; (800c35c <manageStateMachine+0xc1c>)
 800c07a:	f7f6 fd1e 	bl	8002aba <HAL_GPIO_WritePin>
    	AirInput_forceAperture(&primary, PrimaryMotorParam[Model].MaxCoalLow);
 800c07e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c082:	4ab7      	ldr	r2, [pc, #732]	; (800c360 <manageStateMachine+0xc20>)
 800c084:	015b      	lsls	r3, r3, #5
 800c086:	4413      	add	r3, r2
 800c088:	331c      	adds	r3, #28
 800c08a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c08e:	4619      	mov	r1, r3
 800c090:	48b4      	ldr	r0, [pc, #720]	; (800c364 <manageStateMachine+0xc24>)
 800c092:	f7ff fa75 	bl	800b580 <AirInput_forceAperture>
    	AirInput_forceAperture(&grill, BoostMotorParam[Model].MaxCoalLow);
 800c096:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c09a:	4ab3      	ldr	r2, [pc, #716]	; (800c368 <manageStateMachine+0xc28>)
 800c09c:	015b      	lsls	r3, r3, #5
 800c09e:	4413      	add	r3, r2
 800c0a0:	331c      	adds	r3, #28
 800c0a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c0a6:	4619      	mov	r1, r3
 800c0a8:	48b0      	ldr	r0, [pc, #704]	; (800c36c <manageStateMachine+0xc2c>)
 800c0aa:	f7ff fa69 	bl	800b580 <AirInput_forceAperture>
    	if (thermostatRequest) {
 800c0ae:	4bb0      	ldr	r3, [pc, #704]	; (800c370 <manageStateMachine+0xc30>)
 800c0b0:	781b      	ldrb	r3, [r3, #0]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d003      	beq.n	800c0be <manageStateMachine+0x97e>
    	          nextState = COAL_HIGH;
 800c0b6:	2309      	movs	r3, #9
 800c0b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    	    	//}else if (reloadingEvent) {
    	          //  nextState = ZEROING_STEPPER;
    	        //}else if (baffleTemperature > TemperatureParam[Model].CombLowTarget){
    	        	//nextState = COMBUSTION_LOW;
    	        //}
    	break;
 800c0bc:	e147      	b.n	800c34e <manageStateMachine+0xc0e>
    	}else if (reloadingEvent) {
 800c0be:	4bad      	ldr	r3, [pc, #692]	; (800c374 <manageStateMachine+0xc34>)
 800c0c0:	781b      	ldrb	r3, [r3, #0]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	f000 8143 	beq.w	800c34e <manageStateMachine+0xc0e>
            nextState = ZEROING_STEPPER;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    	break;
 800c0ce:	e13e      	b.n	800c34e <manageStateMachine+0xc0e>

    case FLAME_LOSS:
    	deltaTemperature = abs(rearTemperature - baffleTemperature);
 800c0d0:	4ba9      	ldr	r3, [pc, #676]	; (800c378 <manageStateMachine+0xc38>)
 800c0d2:	681a      	ldr	r2, [r3, #0]
 800c0d4:	4ba9      	ldr	r3, [pc, #676]	; (800c37c <manageStateMachine+0xc3c>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	1ad3      	subs	r3, r2, r3
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	bfb8      	it	lt
 800c0de:	425b      	neglt	r3, r3
 800c0e0:	613b      	str	r3, [r7, #16]
    	if( deltaTemperature > TemperatureParam[Model].FlameLossDelta && timeSinceStateEntry >= MINUTES(1))
 800c0e2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800c0e6:	49a6      	ldr	r1, [pc, #664]	; (800c380 <manageStateMachine+0xc40>)
 800c0e8:	4613      	mov	r3, r2
 800c0ea:	011b      	lsls	r3, r3, #4
 800c0ec:	4413      	add	r3, r2
 800c0ee:	005b      	lsls	r3, r3, #1
 800c0f0:	440b      	add	r3, r1
 800c0f2:	3310      	adds	r3, #16
 800c0f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c0f8:	461a      	mov	r2, r3
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	dd0d      	ble.n	800c11c <manageStateMachine+0x9dc>
 800c100:	4ba0      	ldr	r3, [pc, #640]	; (800c384 <manageStateMachine+0xc44>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800c108:	4293      	cmp	r3, r2
 800c10a:	d907      	bls.n	800c11c <manageStateMachine+0x9dc>
    	{
    		nextState = historyState;
 800c10c:	4b9e      	ldr	r3, [pc, #632]	; (800c388 <manageStateMachine+0xc48>)
 800c10e:	781b      	ldrb	r3, [r3, #0]
 800c110:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    		AirInput_forceAperture(&grill, GRILL_CLOSED);
 800c114:	2100      	movs	r1, #0
 800c116:	4895      	ldr	r0, [pc, #596]	; (800c36c <manageStateMachine+0xc2c>)
 800c118:	f7ff fa32 	bl	800b580 <AirInput_forceAperture>
    	}
		if(reloadingEvent) {
 800c11c:	4b95      	ldr	r3, [pc, #596]	; (800c374 <manageStateMachine+0xc34>)
 800c11e:	781b      	ldrb	r3, [r3, #0]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d003      	beq.n	800c12c <manageStateMachine+0x9ec>
			nextState = ZEROING_STEPPER;
 800c124:	2300      	movs	r3, #0
 800c126:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
		else if((rearTemperature < TemperatureParam[Model].CoalCrossOverRearLow) && timeSinceStateEntry >= MINUTES(5))
		{
			nextState = COAL_HIGH;
		}
    	break;
 800c12a:	e112      	b.n	800c352 <manageStateMachine+0xc12>
		else if((rearTemperature < TemperatureParam[Model].CoalCrossOverRearLow) && timeSinceStateEntry >= MINUTES(5))
 800c12c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800c130:	4993      	ldr	r1, [pc, #588]	; (800c380 <manageStateMachine+0xc40>)
 800c132:	4613      	mov	r3, r2
 800c134:	011b      	lsls	r3, r3, #4
 800c136:	4413      	add	r3, r2
 800c138:	005b      	lsls	r3, r3, #1
 800c13a:	440b      	add	r3, r1
 800c13c:	3312      	adds	r3, #18
 800c13e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c142:	461a      	mov	r2, r3
 800c144:	4b8c      	ldr	r3, [pc, #560]	; (800c378 <manageStateMachine+0xc38>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	429a      	cmp	r2, r3
 800c14a:	f340 8102 	ble.w	800c352 <manageStateMachine+0xc12>
 800c14e:	4b8d      	ldr	r3, [pc, #564]	; (800c384 <manageStateMachine+0xc44>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	4a8e      	ldr	r2, [pc, #568]	; (800c38c <manageStateMachine+0xc4c>)
 800c154:	4293      	cmp	r3, r2
 800c156:	f240 80fc 	bls.w	800c352 <manageStateMachine+0xc12>
			nextState = COAL_HIGH;
 800c15a:	2309      	movs	r3, #9
 800c15c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    	break;
 800c160:	e0f7      	b.n	800c352 <manageStateMachine+0xc12>

    case COAL_HIGH:
		if(historyState != currentState){
 800c162:	4b89      	ldr	r3, [pc, #548]	; (800c388 <manageStateMachine+0xc48>)
 800c164:	781a      	ldrb	r2, [r3, #0]
 800c166:	4b8a      	ldr	r3, [pc, #552]	; (800c390 <manageStateMachine+0xc50>)
 800c168:	781b      	ldrb	r3, [r3, #0]
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d01d      	beq.n	800c1aa <manageStateMachine+0xa6a>
			StateEntryControlAdjustment(&primary,PrimaryMotorParam[Model].MinCoalHigh, PrimaryMotorParam[Model].MaxCoalHigh,
 800c16e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c172:	4a7b      	ldr	r2, [pc, #492]	; (800c360 <manageStateMachine+0xc20>)
 800c174:	015b      	lsls	r3, r3, #5
 800c176:	4413      	add	r3, r2
 800c178:	331a      	adds	r3, #26
 800c17a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c17e:	b2d9      	uxtb	r1, r3
 800c180:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c184:	4a76      	ldr	r2, [pc, #472]	; (800c360 <manageStateMachine+0xc20>)
 800c186:	015b      	lsls	r3, r3, #5
 800c188:	4413      	add	r3, r2
 800c18a:	3318      	adds	r3, #24
 800c18c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c190:	b2da      	uxtb	r2, r3
 800c192:	2300      	movs	r3, #0
 800c194:	9301      	str	r3, [sp, #4]
 800c196:	2300      	movs	r3, #0
 800c198:	9300      	str	r3, [sp, #0]
 800c19a:	4b74      	ldr	r3, [pc, #464]	; (800c36c <manageStateMachine+0xc2c>)
 800c19c:	4871      	ldr	r0, [pc, #452]	; (800c364 <manageStateMachine+0xc24>)
 800c19e:	f000 fb65 	bl	800c86c <StateEntryControlAdjustment>
											&grill,GRILL_CLOSED,GRILL_CLOSED);
		    historyState = currentState;
 800c1a2:	4b7b      	ldr	r3, [pc, #492]	; (800c390 <manageStateMachine+0xc50>)
 800c1a4:	781a      	ldrb	r2, [r3, #0]
 800c1a6:	4b78      	ldr	r3, [pc, #480]	; (800c388 <manageStateMachine+0xc48>)
 800c1a8:	701a      	strb	r2, [r3, #0]
		}
        /* Since the control algo (i.e. computeAjustement) is limited
           to +/- 3 steps, it whould take 3 * sec per step to complete
           the mouvement. Reevaluate the control at that maximum period. */
        if (TimeForStep >= (3 * SEC_PER_STEP_COAL_HIGH * 1000)) {
 800c1aa:	6a3b      	ldr	r3, [r7, #32]
 800c1ac:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800c1b0:	fb02 f303 	mul.w	r3, r2, r3
 800c1b4:	69ba      	ldr	r2, [r7, #24]
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d348      	bcc.n	800c24c <manageStateMachine+0xb0c>
        	if(rearTemperature > 9000) /// C'EST QUOI ÇA GTF 2022-03-11
 800c1ba:	4b6f      	ldr	r3, [pc, #444]	; (800c378 <manageStateMachine+0xc38>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f242 3228 	movw	r2, #9000	; 0x2328
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	dd03      	ble.n	800c1ce <manageStateMachine+0xa8e>
        	{
        		adjustement = -1; //Si T > 900, on ferme. Sinon on suit le tableau d'ajustement
 800c1c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c1ca:	63bb      	str	r3, [r7, #56]	; 0x38
 800c1cc:	e00f      	b.n	800c1ee <manageStateMachine+0xaae>
        	}
        	else
        	{
        		adjustement = computeAjustement( TemperatureParam[Model].CombHighTarget, dTavant);
 800c1ce:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800c1d2:	496b      	ldr	r1, [pc, #428]	; (800c380 <manageStateMachine+0xc40>)
 800c1d4:	4613      	mov	r3, r2
 800c1d6:	011b      	lsls	r3, r3, #4
 800c1d8:	4413      	add	r3, r2
 800c1da:	005b      	lsls	r3, r3, #1
 800c1dc:	440b      	add	r3, r1
 800c1de:	330a      	adds	r3, #10
 800c1e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c1e4:	6979      	ldr	r1, [r7, #20]
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f000 faa6 	bl	800c738 <computeAjustement>
 800c1ec:	63b8      	str	r0, [r7, #56]	; 0x38
        	}
            AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
					  	  	  &primary, PrimaryMotorParam[Model].MinCoalHigh, PrimaryMotorParam[Model].MaxCoalHigh,
 800c1ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c1f2:	4a5b      	ldr	r2, [pc, #364]	; (800c360 <manageStateMachine+0xc20>)
 800c1f4:	015b      	lsls	r3, r3, #5
 800c1f6:	4413      	add	r3, r2
 800c1f8:	331a      	adds	r3, #26
 800c1fa:	f9b3 3000 	ldrsh.w	r3, [r3]
            AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 800c1fe:	b2d8      	uxtb	r0, r3
					  	  	  &primary, PrimaryMotorParam[Model].MinCoalHigh, PrimaryMotorParam[Model].MaxCoalHigh,
 800c200:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c204:	4a56      	ldr	r2, [pc, #344]	; (800c360 <manageStateMachine+0xc20>)
 800c206:	015b      	lsls	r3, r3, #5
 800c208:	4413      	add	r3, r2
 800c20a:	3318      	adds	r3, #24
 800c20c:	f9b3 3000 	ldrsh.w	r3, [r3]
            AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 800c210:	b2db      	uxtb	r3, r3
							  &grill, BoostMotorParam[Model].MinCoalHigh, BoostMotorParam[Model].MaxCoalHigh);
 800c212:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800c216:	4954      	ldr	r1, [pc, #336]	; (800c368 <manageStateMachine+0xc28>)
 800c218:	0152      	lsls	r2, r2, #5
 800c21a:	440a      	add	r2, r1
 800c21c:	321a      	adds	r2, #26
 800c21e:	f9b2 2000 	ldrsh.w	r2, [r2]
            AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 800c222:	b2d2      	uxtb	r2, r2
							  &grill, BoostMotorParam[Model].MinCoalHigh, BoostMotorParam[Model].MaxCoalHigh);
 800c224:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800c228:	4c4f      	ldr	r4, [pc, #316]	; (800c368 <manageStateMachine+0xc28>)
 800c22a:	0149      	lsls	r1, r1, #5
 800c22c:	4421      	add	r1, r4
 800c22e:	3118      	adds	r1, #24
 800c230:	f9b1 1000 	ldrsh.w	r1, [r1]
            AirAdjustment(adjustement, SEC_PER_STEP_COMB_HIGH,
 800c234:	b2c9      	uxtb	r1, r1
 800c236:	9103      	str	r1, [sp, #12]
 800c238:	9202      	str	r2, [sp, #8]
 800c23a:	4a4c      	ldr	r2, [pc, #304]	; (800c36c <manageStateMachine+0xc2c>)
 800c23c:	9201      	str	r2, [sp, #4]
 800c23e:	9300      	str	r3, [sp, #0]
 800c240:	4603      	mov	r3, r0
 800c242:	4a48      	ldr	r2, [pc, #288]	; (800c364 <manageStateMachine+0xc24>)
 800c244:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c246:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c248:	f000 faca 	bl	800c7e0 <AirAdjustment>
        }

    	if (!thermostatRequest) {
 800c24c:	4b48      	ldr	r3, [pc, #288]	; (800c370 <manageStateMachine+0xc30>)
 800c24e:	781b      	ldrb	r3, [r3, #0]
 800c250:	f083 0301 	eor.w	r3, r3, #1
 800c254:	b2db      	uxtb	r3, r3
 800c256:	2b00      	cmp	r3, #0
 800c258:	d003      	beq.n	800c262 <manageStateMachine+0xb22>
    	          nextState = COAL_LOW;
 800c25a:	2307      	movs	r3, #7
 800c25c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    	}else if (reloadingEvent) {
            nextState = ZEROING_STEPPER;
        }else if (baffleTemperature > TemperatureParam[Model].CombLowTarget){
        	nextState = COMBUSTION_HIGH;
        }
    	break;
 800c260:	e079      	b.n	800c356 <manageStateMachine+0xc16>
    	}else if (reloadingEvent) {
 800c262:	4b44      	ldr	r3, [pc, #272]	; (800c374 <manageStateMachine+0xc34>)
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d003      	beq.n	800c272 <manageStateMachine+0xb32>
            nextState = ZEROING_STEPPER;
 800c26a:	2300      	movs	r3, #0
 800c26c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    	break;
 800c270:	e071      	b.n	800c356 <manageStateMachine+0xc16>
        }else if (baffleTemperature > TemperatureParam[Model].CombLowTarget){
 800c272:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800c276:	4942      	ldr	r1, [pc, #264]	; (800c380 <manageStateMachine+0xc40>)
 800c278:	4613      	mov	r3, r2
 800c27a:	011b      	lsls	r3, r3, #4
 800c27c:	4413      	add	r3, r2
 800c27e:	005b      	lsls	r3, r3, #1
 800c280:	440b      	add	r3, r1
 800c282:	3308      	adds	r3, #8
 800c284:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c288:	461a      	mov	r2, r3
 800c28a:	4b3c      	ldr	r3, [pc, #240]	; (800c37c <manageStateMachine+0xc3c>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	429a      	cmp	r2, r3
 800c290:	da61      	bge.n	800c356 <manageStateMachine+0xc16>
        	nextState = COMBUSTION_HIGH;
 800c292:	2306      	movs	r3, #6
 800c294:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    	break;
 800c298:	e05d      	b.n	800c356 <manageStateMachine+0xc16>

    case OVERTEMP:
    case SAFETY:
      AirInput_forceAperture(&grill, GRILL_CLOSED);
 800c29a:	2100      	movs	r1, #0
 800c29c:	4833      	ldr	r0, [pc, #204]	; (800c36c <manageStateMachine+0xc2c>)
 800c29e:	f7ff f96f 	bl	800b580 <AirInput_forceAperture>
      AirInput_forceAperture(&primary, PRIMARY_CLOSED_SECONDARY_FULL_OPEN);
 800c2a2:	2106      	movs	r1, #6
 800c2a4:	482f      	ldr	r0, [pc, #188]	; (800c364 <manageStateMachine+0xc24>)
 800c2a6:	f7ff f96b 	bl	800b580 <AirInput_forceAperture>

      if ((baffleTemperature < TemperatureParam[Model].OverheatBaffle)
 800c2aa:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800c2ae:	4934      	ldr	r1, [pc, #208]	; (800c380 <manageStateMachine+0xc40>)
 800c2b0:	4613      	mov	r3, r2
 800c2b2:	011b      	lsls	r3, r3, #4
 800c2b4:	4413      	add	r3, r2
 800c2b6:	005b      	lsls	r3, r3, #1
 800c2b8:	440b      	add	r3, r1
 800c2ba:	331e      	adds	r3, #30
 800c2bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	4b2e      	ldr	r3, [pc, #184]	; (800c37c <manageStateMachine+0xc3c>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	dd64      	ble.n	800c394 <manageStateMachine+0xc54>
    		  && (rearTemperature < TemperatureParam[Model].OverheatChamber)
 800c2ca:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800c2ce:	492c      	ldr	r1, [pc, #176]	; (800c380 <manageStateMachine+0xc40>)
 800c2d0:	4613      	mov	r3, r2
 800c2d2:	011b      	lsls	r3, r3, #4
 800c2d4:	4413      	add	r3, r2
 800c2d6:	005b      	lsls	r3, r3, #1
 800c2d8:	440b      	add	r3, r1
 800c2da:	3320      	adds	r3, #32
 800c2dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c2e0:	461a      	mov	r2, r3
 800c2e2:	4b25      	ldr	r3, [pc, #148]	; (800c378 <manageStateMachine+0xc38>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	429a      	cmp	r2, r3
 800c2e8:	dd54      	ble.n	800c394 <manageStateMachine+0xc54>
			  && (Algo_getPlenumTemp() < TemperatureParam[Model].OverheatPlenumExit)){
 800c2ea:	f000 f9bb 	bl	800c664 <Algo_getPlenumTemp>
 800c2ee:	4601      	mov	r1, r0
 800c2f0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800c2f4:	4822      	ldr	r0, [pc, #136]	; (800c380 <manageStateMachine+0xc40>)
 800c2f6:	4613      	mov	r3, r2
 800c2f8:	011b      	lsls	r3, r3, #4
 800c2fa:	4413      	add	r3, r2
 800c2fc:	005b      	lsls	r3, r3, #1
 800c2fe:	4403      	add	r3, r0
 800c300:	331c      	adds	r3, #28
 800c302:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c306:	4299      	cmp	r1, r3
 800c308:	da44      	bge.n	800c394 <manageStateMachine+0xc54>
    	  if(historyState == SAFETY || historyState == OVERTEMP)
 800c30a:	4b1f      	ldr	r3, [pc, #124]	; (800c388 <manageStateMachine+0xc48>)
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	2b0b      	cmp	r3, #11
 800c310:	d003      	beq.n	800c31a <manageStateMachine+0xbda>
 800c312:	4b1d      	ldr	r3, [pc, #116]	; (800c388 <manageStateMachine+0xc48>)
 800c314:	781b      	ldrb	r3, [r3, #0]
 800c316:	2b0a      	cmp	r3, #10
 800c318:	d103      	bne.n	800c322 <manageStateMachine+0xbe2>
    	  {
    		  nextState = ZEROING_STEPPER; //autre façon de fermer les trappes
 800c31a:	2300      	movs	r3, #0
 800c31c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    	  else
    	  {
    		  nextState = historyState;
    	  }
      }
      break;
 800c320:	e038      	b.n	800c394 <manageStateMachine+0xc54>
    		  nextState = historyState;
 800c322:	4b19      	ldr	r3, [pc, #100]	; (800c388 <manageStateMachine+0xc48>)
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 800c32a:	e033      	b.n	800c394 <manageStateMachine+0xc54>

    case PRODUCTION_TEST:
    	TestRunner();
 800c32c:	f7fe fb50 	bl	800a9d0 <TestRunner>
		nextState = currentState;  //assign the current state in the runner
 800c330:	4b17      	ldr	r3, [pc, #92]	; (800c390 <manageStateMachine+0xc50>)
 800c332:	781b      	ldrb	r3, [r3, #0]
 800c334:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    	break;
 800c338:	e02d      	b.n	800c396 <manageStateMachine+0xc56>
		break;
 800c33a:	bf00      	nop
 800c33c:	e02b      	b.n	800c396 <manageStateMachine+0xc56>
      break;
 800c33e:	bf00      	nop
 800c340:	e029      	b.n	800c396 <manageStateMachine+0xc56>
      break;
 800c342:	bf00      	nop
 800c344:	e027      	b.n	800c396 <manageStateMachine+0xc56>
          break;
 800c346:	bf00      	nop
 800c348:	e025      	b.n	800c396 <manageStateMachine+0xc56>
      break;
 800c34a:	bf00      	nop
 800c34c:	e023      	b.n	800c396 <manageStateMachine+0xc56>
    	break;
 800c34e:	bf00      	nop
 800c350:	e021      	b.n	800c396 <manageStateMachine+0xc56>
    	break;
 800c352:	bf00      	nop
 800c354:	e01f      	b.n	800c396 <manageStateMachine+0xc56>
    	break;
 800c356:	bf00      	nop
 800c358:	e01d      	b.n	800c396 <manageStateMachine+0xc56>
 800c35a:	bf00      	nop
 800c35c:	40010800 	.word	0x40010800
 800c360:	0800fe48 	.word	0x0800fe48
 800c364:	2000000c 	.word	0x2000000c
 800c368:	0800fe88 	.word	0x0800fe88
 800c36c:	20000024 	.word	0x20000024
 800c370:	20002350 	.word	0x20002350
 800c374:	2000233d 	.word	0x2000233d
 800c378:	20002348 	.word	0x20002348
 800c37c:	20002344 	.word	0x20002344
 800c380:	0800fe04 	.word	0x0800fe04
 800c384:	20002824 	.word	0x20002824
 800c388:	20002860 	.word	0x20002860
 800c38c:	000493df 	.word	0x000493df
 800c390:	2000233c 	.word	0x2000233c
      break;
 800c394:	bf00      	nop
  }

	if((GPIO_PIN_SET==HAL_GPIO_ReadPin(Safety_ON_GPIO_Port,Safety_ON_Pin)) && (currentState !=PRODUCTION_TEST))
 800c396:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c39a:	4853      	ldr	r0, [pc, #332]	; (800c4e8 <manageStateMachine+0xda8>)
 800c39c:	f7f6 fb76 	bl	8002a8c <HAL_GPIO_ReadPin>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	2b01      	cmp	r3, #1
 800c3a4:	d110      	bne.n	800c3c8 <manageStateMachine+0xc88>
 800c3a6:	4b51      	ldr	r3, [pc, #324]	; (800c4ec <manageStateMachine+0xdac>)
 800c3a8:	781b      	ldrb	r3, [r3, #0]
 800c3aa:	2b0c      	cmp	r3, #12
 800c3ac:	d00c      	beq.n	800c3c8 <manageStateMachine+0xc88>
	{
		uint32_t kerneltime = osKernelSysTick();
 800c3ae:	f7fa fa28 	bl	8006802 <osKernelSysTick>
 800c3b2:	60f8      	str	r0, [r7, #12]
		if ((Safetydebounce_ms+100) < kerneltime)
 800c3b4:	4b4e      	ldr	r3, [pc, #312]	; (800c4f0 <manageStateMachine+0xdb0>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	3364      	adds	r3, #100	; 0x64
 800c3ba:	68fa      	ldr	r2, [r7, #12]
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d909      	bls.n	800c3d4 <manageStateMachine+0xc94>
		{
			nextState = SAFETY; //force the safety state
 800c3c0:	230b      	movs	r3, #11
 800c3c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	{
 800c3c6:	e005      	b.n	800c3d4 <manageStateMachine+0xc94>
		}
	}
	else
	{
		Safetydebounce_ms = osKernelSysTick();
 800c3c8:	f7fa fa1b 	bl	8006802 <osKernelSysTick>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	4a48      	ldr	r2, [pc, #288]	; (800c4f0 <manageStateMachine+0xdb0>)
 800c3d0:	6013      	str	r3, [r2, #0]
 800c3d2:	e000      	b.n	800c3d6 <manageStateMachine+0xc96>
	{
 800c3d4:	bf00      	nop
	}

  /* Perform superstate action's */
  switch (currentState) {
 800c3d6:	4b45      	ldr	r3, [pc, #276]	; (800c4ec <manageStateMachine+0xdac>)
 800c3d8:	781b      	ldrb	r3, [r3, #0]
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d04f      	beq.n	800c47e <manageStateMachine+0xd3e>
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	dd02      	ble.n	800c3e8 <manageStateMachine+0xca8>
 800c3e2:	3b0a      	subs	r3, #10
 800c3e4:	2b02      	cmp	r3, #2
 800c3e6:	d94a      	bls.n	800c47e <manageStateMachine+0xd3e>

    default:
	if ((baffleTemperature > TemperatureParam[Model].OverheatBaffle) || (rearTemperature > TemperatureParam[Model].OverheatChamber) || (Algo_getPlenumTemp()>TemperatureParam[Model].OverheatPlenum)) {
 800c3e8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800c3ec:	4941      	ldr	r1, [pc, #260]	; (800c4f4 <manageStateMachine+0xdb4>)
 800c3ee:	4613      	mov	r3, r2
 800c3f0:	011b      	lsls	r3, r3, #4
 800c3f2:	4413      	add	r3, r2
 800c3f4:	005b      	lsls	r3, r3, #1
 800c3f6:	440b      	add	r3, r1
 800c3f8:	331e      	adds	r3, #30
 800c3fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c3fe:	461a      	mov	r2, r3
 800c400:	4b3d      	ldr	r3, [pc, #244]	; (800c4f8 <manageStateMachine+0xdb8>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	429a      	cmp	r2, r3
 800c406:	db1f      	blt.n	800c448 <manageStateMachine+0xd08>
 800c408:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800c40c:	4939      	ldr	r1, [pc, #228]	; (800c4f4 <manageStateMachine+0xdb4>)
 800c40e:	4613      	mov	r3, r2
 800c410:	011b      	lsls	r3, r3, #4
 800c412:	4413      	add	r3, r2
 800c414:	005b      	lsls	r3, r3, #1
 800c416:	440b      	add	r3, r1
 800c418:	3320      	adds	r3, #32
 800c41a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c41e:	461a      	mov	r2, r3
 800c420:	4b36      	ldr	r3, [pc, #216]	; (800c4fc <manageStateMachine+0xdbc>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	429a      	cmp	r2, r3
 800c426:	db0f      	blt.n	800c448 <manageStateMachine+0xd08>
 800c428:	f000 f91c 	bl	800c664 <Algo_getPlenumTemp>
 800c42c:	4601      	mov	r1, r0
 800c42e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800c432:	4830      	ldr	r0, [pc, #192]	; (800c4f4 <manageStateMachine+0xdb4>)
 800c434:	4613      	mov	r3, r2
 800c436:	011b      	lsls	r3, r3, #4
 800c438:	4413      	add	r3, r2
 800c43a:	005b      	lsls	r3, r3, #1
 800c43c:	4403      	add	r3, r0
 800c43e:	331a      	adds	r3, #26
 800c440:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c444:	4299      	cmp	r1, r3
 800c446:	dd02      	ble.n	800c44e <manageStateMachine+0xd0e>
		nextState = OVERTEMP;
 800c448:	230a      	movs	r3, #10
 800c44a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}
	if(currentState != RELOAD_IGNITION)
 800c44e:	4b27      	ldr	r3, [pc, #156]	; (800c4ec <manageStateMachine+0xdac>)
 800c450:	781b      	ldrb	r3, [r3, #0]
 800c452:	2b02      	cmp	r3, #2
 800c454:	d015      	beq.n	800c482 <manageStateMachine+0xd42>
	{
		if ((baffleTemperature < ColdStoveTemp) && (rearTemperature < ColdStoveTemp) && timeSinceStateEntry > MINUTES(1)) {
 800c456:	4b28      	ldr	r3, [pc, #160]	; (800c4f8 <manageStateMachine+0xdb8>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800c45e:	da10      	bge.n	800c482 <manageStateMachine+0xd42>
 800c460:	4b26      	ldr	r3, [pc, #152]	; (800c4fc <manageStateMachine+0xdbc>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800c468:	da0b      	bge.n	800c482 <manageStateMachine+0xd42>
 800c46a:	4b25      	ldr	r3, [pc, #148]	; (800c500 <manageStateMachine+0xdc0>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f64e 2260 	movw	r2, #60000	; 0xea60
 800c472:	4293      	cmp	r3, r2
 800c474:	d905      	bls.n	800c482 <manageStateMachine+0xd42>
		nextState = WAITING;
 800c476:	2301      	movs	r3, #1
 800c478:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
	}
      break;
 800c47c:	e001      	b.n	800c482 <manageStateMachine+0xd42>
    //case RELOAD_IGNITION:
    case OVERTEMP:
    case SAFETY:
    case PRODUCTION_TEST:
      /* do nothing */
      break;
 800c47e:	bf00      	nop
 800c480:	e000      	b.n	800c484 <manageStateMachine+0xd44>
      break;
 800c482:	bf00      	nop
  }
  if(Algo_getInterlockRequest() && (currentState !=PRODUCTION_TEST))
 800c484:	f000 f936 	bl	800c6f4 <Algo_getInterlockRequest>
 800c488:	4603      	mov	r3, r0
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d006      	beq.n	800c49c <manageStateMachine+0xd5c>
 800c48e:	4b17      	ldr	r3, [pc, #92]	; (800c4ec <manageStateMachine+0xdac>)
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	2b0c      	cmp	r3, #12
 800c494:	d002      	beq.n	800c49c <manageStateMachine+0xd5c>
  {
  		nextState = WAITING;
 800c496:	2301      	movs	r3, #1
 800c498:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  if (nextState != currentState) {
 800c49c:	4b13      	ldr	r3, [pc, #76]	; (800c4ec <manageStateMachine+0xdac>)
 800c49e:	781b      	ldrb	r3, [r3, #0]
 800c4a0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800c4a4:	429a      	cmp	r2, r3
 800c4a6:	d01a      	beq.n	800c4de <manageStateMachine+0xd9e>

	if ((currentState == COMBUSTION_HIGH  && nextState == COMBUSTION_LOW) || (currentState == COMBUSTION_LOW && nextState == COMBUSTION_HIGH))
 800c4a8:	4b10      	ldr	r3, [pc, #64]	; (800c4ec <manageStateMachine+0xdac>)
 800c4aa:	781b      	ldrb	r3, [r3, #0]
 800c4ac:	2b06      	cmp	r3, #6
 800c4ae:	d103      	bne.n	800c4b8 <manageStateMachine+0xd78>
 800c4b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c4b4:	2b04      	cmp	r3, #4
 800c4b6:	d00a      	beq.n	800c4ce <manageStateMachine+0xd8e>
 800c4b8:	4b0c      	ldr	r3, [pc, #48]	; (800c4ec <manageStateMachine+0xdac>)
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	2b04      	cmp	r3, #4
 800c4be:	d103      	bne.n	800c4c8 <manageStateMachine+0xd88>
 800c4c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c4c4:	2b06      	cmp	r3, #6
 800c4c6:	d002      	beq.n	800c4ce <manageStateMachine+0xd8e>
	{
		//do not update the state stateChangeTimeRef
	}
	else
	{
	    stateChangeTimeRef = currentTime_ms;
 800c4c8:	4a0e      	ldr	r2, [pc, #56]	; (800c504 <manageStateMachine+0xdc4>)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6013      	str	r3, [r2, #0]
	}
	historyState = currentState;
 800c4ce:	4b07      	ldr	r3, [pc, #28]	; (800c4ec <manageStateMachine+0xdac>)
 800c4d0:	781a      	ldrb	r2, [r3, #0]
 800c4d2:	4b0d      	ldr	r3, [pc, #52]	; (800c508 <manageStateMachine+0xdc8>)
 800c4d4:	701a      	strb	r2, [r3, #0]
    currentState = nextState;
 800c4d6:	4a05      	ldr	r2, [pc, #20]	; (800c4ec <manageStateMachine+0xdac>)
 800c4d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c4dc:	7013      	strb	r3, [r2, #0]
  }
}
 800c4de:	bf00      	nop
 800c4e0:	3744      	adds	r7, #68	; 0x44
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd90      	pop	{r4, r7, pc}
 800c4e6:	bf00      	nop
 800c4e8:	40010c00 	.word	0x40010c00
 800c4ec:	2000233c 	.word	0x2000233c
 800c4f0:	20002864 	.word	0x20002864
 800c4f4:	0800fe04 	.word	0x0800fe04
 800c4f8:	20002344 	.word	0x20002344
 800c4fc:	20002348 	.word	0x20002348
 800c500:	20002824 	.word	0x20002824
 800c504:	20002854 	.word	0x20002854
 800c508:	20002860 	.word	0x20002860

0800c50c <Algo_task>:

void Algo_task(uint32_t currentTime_ms) {
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b082      	sub	sp, #8
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]

  manageStateMachine(currentTime_ms);
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f7ff f913 	bl	800b740 <manageStateMachine>
//  managePlenumSpeed(Algo_getPlenumTemp(),Algo_getThermostatRequest(),currentTime_ms);

  if(Algo_getState()!= PRODUCTION_TEST)
 800c51a:	f000 f855 	bl	800c5c8 <Algo_getState>
 800c51e:	4603      	mov	r3, r0
 800c520:	2b0c      	cmp	r3, #12
 800c522:	d007      	beq.n	800c534 <Algo_task+0x28>
  {
	  AirInput_task( &primary, currentTime_ms);
 800c524:	6879      	ldr	r1, [r7, #4]
 800c526:	4805      	ldr	r0, [pc, #20]	; (800c53c <Algo_task+0x30>)
 800c528:	f7ff f88c 	bl	800b644 <AirInput_task>
	  AirInput_task( &grill, currentTime_ms);
 800c52c:	6879      	ldr	r1, [r7, #4]
 800c52e:	4804      	ldr	r0, [pc, #16]	; (800c540 <Algo_task+0x34>)
 800c530:	f7ff f888 	bl	800b644 <AirInput_task>
  }
}
 800c534:	bf00      	nop
 800c536:	3708      	adds	r7, #8
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}
 800c53c:	2000000c 	.word	0x2000000c
 800c540:	20000024 	.word	0x20000024

0800c544 <Algo_getBaffleTempSlope>:

void Algo_setSimulatorMode( bool active) {
  simulatorMode = active;
}

float Algo_getBaffleTempSlope() {
 800c544:	b480      	push	{r7}
 800c546:	af00      	add	r7, sp, #0
  return Algo_slopeBaffleTemp;
 800c548:	4b02      	ldr	r3, [pc, #8]	; (800c554 <Algo_getBaffleTempSlope+0x10>)
 800c54a:	681b      	ldr	r3, [r3, #0]
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	46bd      	mov	sp, r7
 800c550:	bc80      	pop	{r7}
 800c552:	4770      	bx	lr
 800c554:	20002820 	.word	0x20002820

0800c558 <computeSlopeBaffleTemp>:

/* Returns temperature slope in [*C / s] */
static float computeSlopeBaffleTemp(unsigned int nbData) {
 800c558:	b580      	push	{r7, lr}
 800c55a:	b082      	sub	sp, #8
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  if (simulatorMode)
 800c560:	4b0c      	ldr	r3, [pc, #48]	; (800c594 <computeSlopeBaffleTemp+0x3c>)
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d002      	beq.n	800c56e <computeSlopeBaffleTemp+0x16>
  {
    return Algo_Simulator_slopeBaffleTemp;
 800c568:	4b0b      	ldr	r3, [pc, #44]	; (800c598 <computeSlopeBaffleTemp+0x40>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	e00e      	b.n	800c58c <computeSlopeBaffleTemp+0x34>
  }
  else
  {
	Algo_slopeBaffleTemp = Slope_compute(&slopeBaffleTemp, nbData) / 10.0;
 800c56e:	6879      	ldr	r1, [r7, #4]
 800c570:	480a      	ldr	r0, [pc, #40]	; (800c59c <computeSlopeBaffleTemp+0x44>)
 800c572:	f000 ff0d 	bl	800d390 <Slope_compute>
 800c576:	4603      	mov	r3, r0
 800c578:	4909      	ldr	r1, [pc, #36]	; (800c5a0 <computeSlopeBaffleTemp+0x48>)
 800c57a:	4618      	mov	r0, r3
 800c57c:	f7f4 fcd6 	bl	8000f2c <__aeabi_fdiv>
 800c580:	4603      	mov	r3, r0
 800c582:	461a      	mov	r2, r3
 800c584:	4b07      	ldr	r3, [pc, #28]	; (800c5a4 <computeSlopeBaffleTemp+0x4c>)
 800c586:	601a      	str	r2, [r3, #0]
    return Algo_slopeBaffleTemp;
 800c588:	4b06      	ldr	r3, [pc, #24]	; (800c5a4 <computeSlopeBaffleTemp+0x4c>)
 800c58a:	681b      	ldr	r3, [r3, #0]
  }
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3708      	adds	r7, #8
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}
 800c594:	20002804 	.word	0x20002804
 800c598:	2000281c 	.word	0x2000281c
 800c59c:	20002808 	.word	0x20002808
 800c5a0:	41200000 	.word	0x41200000
 800c5a4:	20002820 	.word	0x20002820

0800c5a8 <Algo_setState>:

void Algo_setState(State state) {
 800c5a8:	b480      	push	{r7}
 800c5aa:	b083      	sub	sp, #12
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	71fb      	strb	r3, [r7, #7]
  //if (simulatorMode) {
    currentState = state;
 800c5b2:	4a04      	ldr	r2, [pc, #16]	; (800c5c4 <Algo_setState+0x1c>)
 800c5b4:	79fb      	ldrb	r3, [r7, #7]
 800c5b6:	7013      	strb	r3, [r2, #0]
  //}
}
 800c5b8:	bf00      	nop
 800c5ba:	370c      	adds	r7, #12
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bc80      	pop	{r7}
 800c5c0:	4770      	bx	lr
 800c5c2:	bf00      	nop
 800c5c4:	2000233c 	.word	0x2000233c

0800c5c8 <Algo_getState>:

State Algo_getState() {
 800c5c8:	b480      	push	{r7}
 800c5ca:	af00      	add	r7, sp, #0
  return currentState;
 800c5cc:	4b02      	ldr	r3, [pc, #8]	; (800c5d8 <Algo_getState+0x10>)
 800c5ce:	781b      	ldrb	r3, [r3, #0]
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bc80      	pop	{r7}
 800c5d6:	4770      	bx	lr
 800c5d8:	2000233c 	.word	0x2000233c

0800c5dc <Algo_setBaffleTemp>:
uint32_t getStateTime(){
  return timeSinceStateEntry;
}

void Algo_setBaffleTemp(int temp) {
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b082      	sub	sp, #8
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  baffleTemperature = temp;
 800c5e4:	4a05      	ldr	r2, [pc, #20]	; (800c5fc <Algo_setBaffleTemp+0x20>)
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6013      	str	r3, [r2, #0]
  Slope_addData(&slopeBaffleTemp, temp);
 800c5ea:	6879      	ldr	r1, [r7, #4]
 800c5ec:	4804      	ldr	r0, [pc, #16]	; (800c600 <Algo_setBaffleTemp+0x24>)
 800c5ee:	f000 fea4 	bl	800d33a <Slope_addData>
}
 800c5f2:	bf00      	nop
 800c5f4:	3708      	adds	r7, #8
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	20002344 	.word	0x20002344
 800c600:	20002808 	.word	0x20002808

0800c604 <Algo_setRearTemp>:

void Algo_setRearTemp(int temp) {
 800c604:	b480      	push	{r7}
 800c606:	b083      	sub	sp, #12
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
  rearTemperature = temp;
 800c60c:	4a03      	ldr	r2, [pc, #12]	; (800c61c <Algo_setRearTemp+0x18>)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6013      	str	r3, [r2, #0]
}
 800c612:	bf00      	nop
 800c614:	370c      	adds	r7, #12
 800c616:	46bd      	mov	sp, r7
 800c618:	bc80      	pop	{r7}
 800c61a:	4770      	bx	lr
 800c61c:	20002348 	.word	0x20002348

0800c620 <Algo_getRearTemp>:
int Algo_getRearTemp() {
 800c620:	b480      	push	{r7}
 800c622:	af00      	add	r7, sp, #0
  return rearTemperature;
 800c624:	4b02      	ldr	r3, [pc, #8]	; (800c630 <Algo_getRearTemp+0x10>)
 800c626:	681b      	ldr	r3, [r3, #0]
}
 800c628:	4618      	mov	r0, r3
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bc80      	pop	{r7}
 800c62e:	4770      	bx	lr
 800c630:	20002348 	.word	0x20002348

0800c634 <Algo_getBaffleTemp>:

int Algo_getBaffleTemp() {
 800c634:	b480      	push	{r7}
 800c636:	af00      	add	r7, sp, #0
  return baffleTemperature;
 800c638:	4b02      	ldr	r3, [pc, #8]	; (800c644 <Algo_getBaffleTemp+0x10>)
 800c63a:	681b      	ldr	r3, [r3, #0]
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	46bd      	mov	sp, r7
 800c640:	bc80      	pop	{r7}
 800c642:	4770      	bx	lr
 800c644:	20002344 	.word	0x20002344

0800c648 <Algo_setPlenumTemp>:

void Algo_setPlenumTemp(int temp) {
 800c648:	b480      	push	{r7}
 800c64a:	b083      	sub	sp, #12
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
  plenumTemp = temp;
 800c650:	4a03      	ldr	r2, [pc, #12]	; (800c660 <Algo_setPlenumTemp+0x18>)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6013      	str	r3, [r2, #0]
}
 800c656:	bf00      	nop
 800c658:	370c      	adds	r7, #12
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bc80      	pop	{r7}
 800c65e:	4770      	bx	lr
 800c660:	2000234c 	.word	0x2000234c

0800c664 <Algo_getPlenumTemp>:
int Algo_getPlenumTemp() {
 800c664:	b480      	push	{r7}
 800c666:	af00      	add	r7, sp, #0
  return plenumTemp;
 800c668:	4b02      	ldr	r3, [pc, #8]	; (800c674 <Algo_getPlenumTemp+0x10>)
 800c66a:	681b      	ldr	r3, [r3, #0]
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	46bd      	mov	sp, r7
 800c670:	bc80      	pop	{r7}
 800c672:	4770      	bx	lr
 800c674:	2000234c 	.word	0x2000234c

0800c678 <Algo_getPrimary>:

int Algo_getPrimary() {
 800c678:	b580      	push	{r7, lr}
 800c67a:	af00      	add	r7, sp, #0
  return AirInput_getAperture(&primary);
 800c67c:	4802      	ldr	r0, [pc, #8]	; (800c688 <Algo_getPrimary+0x10>)
 800c67e:	f7fe ff9e 	bl	800b5be <AirInput_getAperture>
 800c682:	4603      	mov	r3, r0
}
 800c684:	4618      	mov	r0, r3
 800c686:	bd80      	pop	{r7, pc}
 800c688:	2000000c 	.word	0x2000000c

0800c68c <Algo_getGrill>:

int Algo_getGrill() {
 800c68c:	b580      	push	{r7, lr}
 800c68e:	af00      	add	r7, sp, #0
  return AirInput_getAperture(&grill);
 800c690:	4802      	ldr	r0, [pc, #8]	; (800c69c <Algo_getGrill+0x10>)
 800c692:	f7fe ff94 	bl	800b5be <AirInput_getAperture>
 800c696:	4603      	mov	r3, r0
}
 800c698:	4618      	mov	r0, r3
 800c69a:	bd80      	pop	{r7, pc}
 800c69c:	20000024 	.word	0x20000024

0800c6a0 <Algo_setThermostatRequest>:

Algo_DELState Algo_getStateFermeturePorte() {
  return delFermeturePorte;
}

void Algo_setThermostatRequest(bool demand) {
 800c6a0:	b480      	push	{r7}
 800c6a2:	b083      	sub	sp, #12
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	71fb      	strb	r3, [r7, #7]
  thermostatRequest = demand;
 800c6aa:	4a04      	ldr	r2, [pc, #16]	; (800c6bc <Algo_setThermostatRequest+0x1c>)
 800c6ac:	79fb      	ldrb	r3, [r7, #7]
 800c6ae:	7013      	strb	r3, [r2, #0]
}
 800c6b0:	bf00      	nop
 800c6b2:	370c      	adds	r7, #12
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bc80      	pop	{r7}
 800c6b8:	4770      	bx	lr
 800c6ba:	bf00      	nop
 800c6bc:	20002350 	.word	0x20002350

0800c6c0 <Algo_getThermostatRequest>:
bool Algo_getThermostatRequest() {
 800c6c0:	b480      	push	{r7}
 800c6c2:	af00      	add	r7, sp, #0
  return thermostatRequest;
 800c6c4:	4b02      	ldr	r3, [pc, #8]	; (800c6d0 <Algo_getThermostatRequest+0x10>)
 800c6c6:	781b      	ldrb	r3, [r3, #0]
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bc80      	pop	{r7}
 800c6ce:	4770      	bx	lr
 800c6d0:	20002350 	.word	0x20002350

0800c6d4 <Algo_setInterlockRequest>:
void Algo_setInterlockRequest(bool demand) {
 800c6d4:	b480      	push	{r7}
 800c6d6:	b083      	sub	sp, #12
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	4603      	mov	r3, r0
 800c6dc:	71fb      	strb	r3, [r7, #7]
	interlockRequest = demand;
 800c6de:	4a04      	ldr	r2, [pc, #16]	; (800c6f0 <Algo_setInterlockRequest+0x1c>)
 800c6e0:	79fb      	ldrb	r3, [r7, #7]
 800c6e2:	7013      	strb	r3, [r2, #0]
}
 800c6e4:	bf00      	nop
 800c6e6:	370c      	adds	r7, #12
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bc80      	pop	{r7}
 800c6ec:	4770      	bx	lr
 800c6ee:	bf00      	nop
 800c6f0:	20002351 	.word	0x20002351

0800c6f4 <Algo_getInterlockRequest>:
bool Algo_getInterlockRequest() {
 800c6f4:	b480      	push	{r7}
 800c6f6:	af00      	add	r7, sp, #0
  return interlockRequest;
 800c6f8:	4b02      	ldr	r3, [pc, #8]	; (800c704 <Algo_getInterlockRequest+0x10>)
 800c6fa:	781b      	ldrb	r3, [r3, #0]
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bc80      	pop	{r7}
 800c702:	4770      	bx	lr
 800c704:	20002351 	.word	0x20002351

0800c708 <Algo_startChargement>:

void Algo_startChargement(uint32_t currentTime_ms) {
 800c708:	b480      	push	{r7}
 800c70a:	b083      	sub	sp, #12
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  reloadingEvent = true;
 800c710:	4b06      	ldr	r3, [pc, #24]	; (800c72c <Algo_startChargement+0x24>)
 800c712:	2201      	movs	r2, #1
 800c714:	701a      	strb	r2, [r3, #0]
  fanPauseRequired = true;
 800c716:	4b06      	ldr	r3, [pc, #24]	; (800c730 <Algo_startChargement+0x28>)
 800c718:	2201      	movs	r2, #1
 800c71a:	701a      	strb	r2, [r3, #0]
  TimeOfReloadRequest = currentTime_ms;
 800c71c:	4a05      	ldr	r2, [pc, #20]	; (800c734 <Algo_startChargement+0x2c>)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6013      	str	r3, [r2, #0]
}
 800c722:	bf00      	nop
 800c724:	370c      	adds	r7, #12
 800c726:	46bd      	mov	sp, r7
 800c728:	bc80      	pop	{r7}
 800c72a:	4770      	bx	lr
 800c72c:	2000233d 	.word	0x2000233d
 800c730:	2000233e 	.word	0x2000233e
 800c734:	20002828 	.word	0x20002828

0800c738 <computeAjustement>:

void Algo_clearReloadRequest() {
  reloadingEvent = false;
}

static int computeAjustement( int tempTarget_tenthF, float dTempAvant_FperS) {
 800c738:	b5b0      	push	{r4, r5, r7, lr}
 800c73a:	b08e      	sub	sp, #56	; 0x38
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6039      	str	r1, [r7, #0]

  //                  [line][column]
  const int adjustment[3][3] = {
 800c742:	4b23      	ldr	r3, [pc, #140]	; (800c7d0 <computeAjustement+0x98>)
 800c744:	f107 040c 	add.w	r4, r7, #12
 800c748:	461d      	mov	r5, r3
 800c74a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c74c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c74e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c750:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c752:	682b      	ldr	r3, [r5, #0]
 800c754:	6023      	str	r3, [r4, #0]
  };

  unsigned int line;
  unsigned int column;

  if (baffleTemperature > (tempTarget_tenthF + 50)) {
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c75c:	4b1d      	ldr	r3, [pc, #116]	; (800c7d4 <computeAjustement+0x9c>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	429a      	cmp	r2, r3
 800c762:	da02      	bge.n	800c76a <computeAjustement+0x32>
    line = 0;
 800c764:	2300      	movs	r3, #0
 800c766:	637b      	str	r3, [r7, #52]	; 0x34
 800c768:	e00b      	b.n	800c782 <computeAjustement+0x4a>
  } else if (baffleTemperature >= (tempTarget_tenthF - 50)) {
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f1a3 0232 	sub.w	r2, r3, #50	; 0x32
 800c770:	4b18      	ldr	r3, [pc, #96]	; (800c7d4 <computeAjustement+0x9c>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	429a      	cmp	r2, r3
 800c776:	dc02      	bgt.n	800c77e <computeAjustement+0x46>
    line = 1;
 800c778:	2301      	movs	r3, #1
 800c77a:	637b      	str	r3, [r7, #52]	; 0x34
 800c77c:	e001      	b.n	800c782 <computeAjustement+0x4a>
  } else {
    line = 2;
 800c77e:	2302      	movs	r3, #2
 800c780:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if (dTempAvant_FperS < -6.0) {
 800c782:	4915      	ldr	r1, [pc, #84]	; (800c7d8 <computeAjustement+0xa0>)
 800c784:	6838      	ldr	r0, [r7, #0]
 800c786:	f7f4 fcbb 	bl	8001100 <__aeabi_fcmplt>
 800c78a:	4603      	mov	r3, r0
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d002      	beq.n	800c796 <computeAjustement+0x5e>
    column = 0;
 800c790:	2300      	movs	r3, #0
 800c792:	633b      	str	r3, [r7, #48]	; 0x30
 800c794:	e00b      	b.n	800c7ae <computeAjustement+0x76>
  } else if (dTempAvant_FperS <= 6.0) {
 800c796:	4911      	ldr	r1, [pc, #68]	; (800c7dc <computeAjustement+0xa4>)
 800c798:	6838      	ldr	r0, [r7, #0]
 800c79a:	f7f4 fcbb 	bl	8001114 <__aeabi_fcmple>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d002      	beq.n	800c7aa <computeAjustement+0x72>
    column = 1;
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	633b      	str	r3, [r7, #48]	; 0x30
 800c7a8:	e001      	b.n	800c7ae <computeAjustement+0x76>
  } else {
    column = 2;
 800c7aa:	2302      	movs	r3, #2
 800c7ac:	633b      	str	r3, [r7, #48]	; 0x30
  }

  return adjustment[line][column];
 800c7ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7b0:	4613      	mov	r3, r2
 800c7b2:	005b      	lsls	r3, r3, #1
 800c7b4:	4413      	add	r3, r2
 800c7b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7b8:	4413      	add	r3, r2
 800c7ba:	009b      	lsls	r3, r3, #2
 800c7bc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800c7c0:	4413      	add	r3, r2
 800c7c2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3738      	adds	r7, #56	; 0x38
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bdb0      	pop	{r4, r5, r7, pc}
 800c7ce:	bf00      	nop
 800c7d0:	0800fc74 	.word	0x0800fc74
 800c7d4:	20002344 	.word	0x20002344
 800c7d8:	c0c00000 	.word	0xc0c00000
 800c7dc:	40c00000 	.word	0x40c00000

0800c7e0 <AirAdjustment>:

void AirAdjustment(int adjustement, const uint32_t secondPerStep,
		AirInput* primaire, const uint8_t MinPrimary, const uint8_t MaxPrimary,
		AirInput* grill, const uint8_t MinGrill, const uint8_t MaxGrill)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b084      	sub	sp, #16
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	60f8      	str	r0, [r7, #12]
 800c7e8:	60b9      	str	r1, [r7, #8]
 800c7ea:	607a      	str	r2, [r7, #4]
 800c7ec:	70fb      	strb	r3, [r7, #3]
	if (adjustement > 0)
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	dd1a      	ble.n	800c82a <AirAdjustment+0x4a>
	{
		if (AirInput_getAperture(primaire) >= MaxPrimary)
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f7fe fee2 	bl	800b5be <AirInput_getAperture>
 800c7fa:	4602      	mov	r2, r0
 800c7fc:	7e3b      	ldrb	r3, [r7, #24]
 800c7fe:	429a      	cmp	r2, r3
 800c800:	db0d      	blt.n	800c81e <AirAdjustment+0x3e>
		{
			if (AirInput_getAperture(grill) < MaxGrill)
 800c802:	69f8      	ldr	r0, [r7, #28]
 800c804:	f7fe fedb 	bl	800b5be <AirInput_getAperture>
 800c808:	4602      	mov	r2, r0
 800c80a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c80e:	429a      	cmp	r2, r3
 800c810:	da28      	bge.n	800c864 <AirAdjustment+0x84>
			{
				AirInput_setAjustement(grill, adjustement, secondPerStep);
 800c812:	68ba      	ldr	r2, [r7, #8]
 800c814:	68f9      	ldr	r1, [r7, #12]
 800c816:	69f8      	ldr	r0, [r7, #28]
 800c818:	f7fe feee 	bl	800b5f8 <AirInput_setAjustement>
				AirInput_setAjustement(primaire, adjustement,secondPerStep);
			}
		}
	}
	/*else{do nothing} air setting doesn't need further adjustment*/
}
 800c81c:	e022      	b.n	800c864 <AirAdjustment+0x84>
			AirInput_setAjustement(primaire, adjustement, secondPerStep);
 800c81e:	68ba      	ldr	r2, [r7, #8]
 800c820:	68f9      	ldr	r1, [r7, #12]
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f7fe fee8 	bl	800b5f8 <AirInput_setAjustement>
}
 800c828:	e01c      	b.n	800c864 <AirAdjustment+0x84>
	else if (adjustement < 0)
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	da19      	bge.n	800c864 <AirAdjustment+0x84>
		if (AirInput_getAperture(grill) > MinGrill)
 800c830:	69f8      	ldr	r0, [r7, #28]
 800c832:	f7fe fec4 	bl	800b5be <AirInput_getAperture>
 800c836:	4602      	mov	r2, r0
 800c838:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c83c:	429a      	cmp	r2, r3
 800c83e:	dd05      	ble.n	800c84c <AirAdjustment+0x6c>
			AirInput_setAjustement(grill, adjustement,secondPerStep);
 800c840:	68ba      	ldr	r2, [r7, #8]
 800c842:	68f9      	ldr	r1, [r7, #12]
 800c844:	69f8      	ldr	r0, [r7, #28]
 800c846:	f7fe fed7 	bl	800b5f8 <AirInput_setAjustement>
}
 800c84a:	e00b      	b.n	800c864 <AirAdjustment+0x84>
			if(AirInput_getAperture(primaire) > MinPrimary)
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f7fe feb6 	bl	800b5be <AirInput_getAperture>
 800c852:	4602      	mov	r2, r0
 800c854:	78fb      	ldrb	r3, [r7, #3]
 800c856:	429a      	cmp	r2, r3
 800c858:	dd04      	ble.n	800c864 <AirAdjustment+0x84>
				AirInput_setAjustement(primaire, adjustement,secondPerStep);
 800c85a:	68ba      	ldr	r2, [r7, #8]
 800c85c:	68f9      	ldr	r1, [r7, #12]
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f7fe feca 	bl	800b5f8 <AirInput_setAjustement>
}
 800c864:	bf00      	nop
 800c866:	3710      	adds	r7, #16
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}

0800c86c <StateEntryControlAdjustment>:


void StateEntryControlAdjustment( AirInput* primaireSecondaire, const uint8_t MinPrimary, const uint8_t MaxPrimary,
		AirInput* grill, const uint8_t MinGrill, const uint8_t MaxGrill)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b08a      	sub	sp, #40	; 0x28
 800c870:	af04      	add	r7, sp, #16
 800c872:	60f8      	str	r0, [r7, #12]
 800c874:	607b      	str	r3, [r7, #4]
 800c876:	460b      	mov	r3, r1
 800c878:	72fb      	strb	r3, [r7, #11]
 800c87a:	4613      	mov	r3, r2
 800c87c:	72bb      	strb	r3, [r7, #10]
	int aperture = AirInput_getAperture(primaireSecondaire);
 800c87e:	68f8      	ldr	r0, [r7, #12]
 800c880:	f7fe fe9d 	bl	800b5be <AirInput_getAperture>
 800c884:	6178      	str	r0, [r7, #20]
	int apertureAdjustment = 0;
 800c886:	2300      	movs	r3, #0
 800c888:	613b      	str	r3, [r7, #16]
	if (aperture >= MaxPrimary)
 800c88a:	7abb      	ldrb	r3, [r7, #10]
 800c88c:	697a      	ldr	r2, [r7, #20]
 800c88e:	429a      	cmp	r2, r3
 800c890:	db15      	blt.n	800c8be <StateEntryControlAdjustment+0x52>
	{
		apertureAdjustment = MaxPrimary - aperture;
 800c892:	7aba      	ldrb	r2, [r7, #10]
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	1ad3      	subs	r3, r2, r3
 800c898:	613b      	str	r3, [r7, #16]
		AirAdjustment(apertureAdjustment,2,primaireSecondaire,MinPrimary,MaxPrimary,grill,MinGrill,MaxGrill);
 800c89a:	7afa      	ldrb	r2, [r7, #11]
 800c89c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c8a0:	9303      	str	r3, [sp, #12]
 800c8a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c8a6:	9302      	str	r3, [sp, #8]
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	9301      	str	r3, [sp, #4]
 800c8ac:	7abb      	ldrb	r3, [r7, #10]
 800c8ae:	9300      	str	r3, [sp, #0]
 800c8b0:	4613      	mov	r3, r2
 800c8b2:	68fa      	ldr	r2, [r7, #12]
 800c8b4:	2102      	movs	r1, #2
 800c8b6:	6938      	ldr	r0, [r7, #16]
 800c8b8:	f7ff ff92 	bl	800c7e0 <AirAdjustment>
 800c8bc:	e018      	b.n	800c8f0 <StateEntryControlAdjustment+0x84>
	}
	else if (aperture <= MinPrimary)
 800c8be:	7afb      	ldrb	r3, [r7, #11]
 800c8c0:	697a      	ldr	r2, [r7, #20]
 800c8c2:	429a      	cmp	r2, r3
 800c8c4:	dc14      	bgt.n	800c8f0 <StateEntryControlAdjustment+0x84>
	{
		apertureAdjustment = MinPrimary - aperture;
 800c8c6:	7afa      	ldrb	r2, [r7, #11]
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	1ad3      	subs	r3, r2, r3
 800c8cc:	613b      	str	r3, [r7, #16]
		AirAdjustment(apertureAdjustment,2,primaireSecondaire,MinPrimary,MaxPrimary,grill,MinGrill,MaxGrill);
 800c8ce:	7afa      	ldrb	r2, [r7, #11]
 800c8d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c8d4:	9303      	str	r3, [sp, #12]
 800c8d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c8da:	9302      	str	r3, [sp, #8]
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	9301      	str	r3, [sp, #4]
 800c8e0:	7abb      	ldrb	r3, [r7, #10]
 800c8e2:	9300      	str	r3, [sp, #0]
 800c8e4:	4613      	mov	r3, r2
 800c8e6:	68fa      	ldr	r2, [r7, #12]
 800c8e8:	2102      	movs	r1, #2
 800c8ea:	6938      	ldr	r0, [r7, #16]
 800c8ec:	f7ff ff78 	bl	800c7e0 <AirAdjustment>
	}

	aperture = AirInput_getAperture(grill);
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f7fe fe64 	bl	800b5be <AirInput_getAperture>
 800c8f6:	6178      	str	r0, [r7, #20]
	if (aperture >= MaxGrill)
 800c8f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c8fc:	697a      	ldr	r2, [r7, #20]
 800c8fe:	429a      	cmp	r2, r3
 800c900:	db16      	blt.n	800c930 <StateEntryControlAdjustment+0xc4>
	{
		apertureAdjustment = MaxGrill - aperture;
 800c902:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	1ad3      	subs	r3, r2, r3
 800c90a:	613b      	str	r3, [r7, #16]
		AirAdjustment(apertureAdjustment,1,primaireSecondaire,MinPrimary,MaxPrimary,grill,MinGrill,MaxGrill);
 800c90c:	7afa      	ldrb	r2, [r7, #11]
 800c90e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c912:	9303      	str	r3, [sp, #12]
 800c914:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c918:	9302      	str	r3, [sp, #8]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	9301      	str	r3, [sp, #4]
 800c91e:	7abb      	ldrb	r3, [r7, #10]
 800c920:	9300      	str	r3, [sp, #0]
 800c922:	4613      	mov	r3, r2
 800c924:	68fa      	ldr	r2, [r7, #12]
 800c926:	2101      	movs	r1, #1
 800c928:	6938      	ldr	r0, [r7, #16]
 800c92a:	f7ff ff59 	bl	800c7e0 <AirAdjustment>
	else if (aperture <= MinGrill)
	{
		apertureAdjustment = MinGrill - aperture;
		AirAdjustment(apertureAdjustment,1,primaireSecondaire,MinPrimary,MaxPrimary,grill,MinGrill,MaxGrill);
	}
}
 800c92e:	e01a      	b.n	800c966 <StateEntryControlAdjustment+0xfa>
	else if (aperture <= MinGrill)
 800c930:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c934:	697a      	ldr	r2, [r7, #20]
 800c936:	429a      	cmp	r2, r3
 800c938:	dc15      	bgt.n	800c966 <StateEntryControlAdjustment+0xfa>
		apertureAdjustment = MinGrill - aperture;
 800c93a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800c93e:	697b      	ldr	r3, [r7, #20]
 800c940:	1ad3      	subs	r3, r2, r3
 800c942:	613b      	str	r3, [r7, #16]
		AirAdjustment(apertureAdjustment,1,primaireSecondaire,MinPrimary,MaxPrimary,grill,MinGrill,MaxGrill);
 800c944:	7afa      	ldrb	r2, [r7, #11]
 800c946:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c94a:	9303      	str	r3, [sp, #12]
 800c94c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c950:	9302      	str	r3, [sp, #8]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	9301      	str	r3, [sp, #4]
 800c956:	7abb      	ldrb	r3, [r7, #10]
 800c958:	9300      	str	r3, [sp, #0]
 800c95a:	4613      	mov	r3, r2
 800c95c:	68fa      	ldr	r2, [r7, #12]
 800c95e:	2101      	movs	r1, #1
 800c960:	6938      	ldr	r0, [r7, #16]
 800c962:	f7ff ff3d 	bl	800c7e0 <AirAdjustment>
}
 800c966:	bf00      	nop
 800c968:	3718      	adds	r7, #24
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
	...

0800c970 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800c970:	b480      	push	{r7}
 800c972:	b085      	sub	sp, #20
 800c974:	af00      	add	r7, sp, #0
 800c976:	60f8      	str	r0, [r7, #12]
 800c978:	60b9      	str	r1, [r7, #8]
 800c97a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	4a06      	ldr	r2, [pc, #24]	; (800c998 <vApplicationGetIdleTaskMemory+0x28>)
 800c980:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	4a05      	ldr	r2, [pc, #20]	; (800c99c <vApplicationGetIdleTaskMemory+0x2c>)
 800c986:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2280      	movs	r2, #128	; 0x80
 800c98c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800c98e:	bf00      	nop
 800c990:	3714      	adds	r7, #20
 800c992:	46bd      	mov	sp, r7
 800c994:	bc80      	pop	{r7}
 800c996:	4770      	bx	lr
 800c998:	20002868 	.word	0x20002868
 800c99c:	200028c8 	.word	0x200028c8

0800c9a0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b085      	sub	sp, #20
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	60f8      	str	r0, [r7, #12]
 800c9a8:	60b9      	str	r1, [r7, #8]
 800c9aa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	4a07      	ldr	r2, [pc, #28]	; (800c9cc <vApplicationGetTimerTaskMemory+0x2c>)
 800c9b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	4a06      	ldr	r2, [pc, #24]	; (800c9d0 <vApplicationGetTimerTaskMemory+0x30>)
 800c9b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c9be:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800c9c0:	bf00      	nop
 800c9c2:	3714      	adds	r7, #20
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bc80      	pop	{r7}
 800c9c8:	4770      	bx	lr
 800c9ca:	bf00      	nop
 800c9cc:	20002ac8 	.word	0x20002ac8
 800c9d0:	20002b28 	.word	0x20002b28

0800c9d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c9d4:	b5b0      	push	{r4, r5, r7, lr}
 800c9d6:	b0aa      	sub	sp, #168	; 0xa8
 800c9d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c9da:	f7f4 fbff 	bl	80011dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c9de:	f000 fa27 	bl	800ce30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c9e2:	f000 fb99 	bl	800d118 <MX_GPIO_Init>
  MX_DMA_Init();
 800c9e6:	f000 fb79 	bl	800d0dc <MX_DMA_Init>
  MX_I2C1_Init();
 800c9ea:	f000 fad5 	bl	800cf98 <MX_I2C1_Init>
  MX_RTC_Init();
 800c9ee:	f000 fb01 	bl	800cff4 <MX_RTC_Init>
  MX_USART3_UART_Init();
 800c9f2:	f000 fb49 	bl	800d088 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800c9f6:	f000 fa7f 	bl	800cef8 <MX_ADC1_Init>
  while(HAL_ADCEx_Calibration_Start(&hadc1)!=HAL_OK);
 800c9fa:	bf00      	nop
 800c9fc:	48c2      	ldr	r0, [pc, #776]	; (800cd08 <main+0x334>)
 800c9fe:	f7f4 ffe3 	bl	80019c8 <HAL_ADCEx_Calibration_Start>
 800ca02:	4603      	mov	r3, r0
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d1f9      	bne.n	800c9fc <main+0x28>
  //MX_USB_PCD_Init();
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, buffer, 2);
 800ca08:	2202      	movs	r2, #2
 800ca0a:	49c0      	ldr	r1, [pc, #768]	; (800cd0c <main+0x338>)
 800ca0c:	48be      	ldr	r0, [pc, #760]	; (800cd08 <main+0x334>)
 800ca0e:	f7f4 fd01 	bl	8001414 <HAL_ADC_Start_DMA>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of I2CSemaphore */
  osSemaphoreDef(I2CSemaphore);
 800ca12:	2300      	movs	r3, #0
 800ca14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ca18:	2300      	movs	r3, #0
 800ca1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  I2CSemaphoreHandle = osSemaphoreCreate(osSemaphore(I2CSemaphore), 1);
 800ca1e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800ca22:	2101      	movs	r1, #1
 800ca24:	4618      	mov	r0, r3
 800ca26:	f7f9 ffcd 	bl	80069c4 <osSemaphoreCreate>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	4ab8      	ldr	r2, [pc, #736]	; (800cd10 <main+0x33c>)
 800ca2e:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of Timer */
  osTimerDef(Timer, TimerCallback);
 800ca30:	4bb8      	ldr	r3, [pc, #736]	; (800cd14 <main+0x340>)
 800ca32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ca36:	2300      	movs	r3, #0
 800ca38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  TimerHandle = osTimerCreate(osTimer(Timer), osTimerPeriodic, NULL);
 800ca3c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800ca40:	2200      	movs	r2, #0
 800ca42:	2101      	movs	r1, #1
 800ca44:	4618      	mov	r0, r3
 800ca46:	f7f9 ff4d 	bl	80068e4 <osTimerCreate>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	4ab2      	ldr	r2, [pc, #712]	; (800cd18 <main+0x344>)
 800ca4e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800ca50:	4bb2      	ldr	r3, [pc, #712]	; (800cd1c <main+0x348>)
 800ca52:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800ca56:	461d      	mov	r5, r3
 800ca58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ca5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ca60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800ca64:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800ca68:	2100      	movs	r1, #0
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7f9 fed9 	bl	8006822 <osThreadCreate>
 800ca70:	4603      	mov	r3, r0
 800ca72:	4aab      	ldr	r2, [pc, #684]	; (800cd20 <main+0x34c>)
 800ca74:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(TemperatureMeas, TemperatureManager, osPriorityNormal, 0, 512); //TODO: Validate maximum stack needed adding printf end in Hard Fault handler
 800ca76:	4bab      	ldr	r3, [pc, #684]	; (800cd24 <main+0x350>)
 800ca78:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800ca7c:	461d      	mov	r5, r3
 800ca7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ca80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ca86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TemperatureMeasHandle = osThreadCreate(osThread(TemperatureMeas), NULL);
 800ca8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ca8e:	2100      	movs	r1, #0
 800ca90:	4618      	mov	r0, r3
 800ca92:	f7f9 fec6 	bl	8006822 <osThreadCreate>
 800ca96:	4603      	mov	r3, r0
 800ca98:	4aa3      	ldr	r2, [pc, #652]	; (800cd28 <main+0x354>)
 800ca9a:	6013      	str	r3, [r2, #0]

  osThreadDef(StepperManagerT, Steppermanager, osPriorityNormal, 0, 128);
 800ca9c:	4ba3      	ldr	r3, [pc, #652]	; (800cd2c <main+0x358>)
 800ca9e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800caa2:	461d      	mov	r5, r3
 800caa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800caa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800caa8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800caac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  StepperManagerTHandle = osThreadCreate(osThread(StepperManagerT), NULL);
 800cab0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cab4:	2100      	movs	r1, #0
 800cab6:	4618      	mov	r0, r3
 800cab8:	f7f9 feb3 	bl	8006822 <osThreadCreate>
 800cabc:	4603      	mov	r3, r0
 800cabe:	4a9c      	ldr	r2, [pc, #624]	; (800cd30 <main+0x35c>)
 800cac0:	6013      	str	r3, [r2, #0]

  osThreadDef(DebugManagerT, DebugManager, osPriorityNormal, 0, 512);
 800cac2:	4b9c      	ldr	r3, [pc, #624]	; (800cd34 <main+0x360>)
 800cac4:	f107 0420 	add.w	r4, r7, #32
 800cac8:	461d      	mov	r5, r3
 800caca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cacc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cace:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cad2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DebugManagerTHandle = osThreadCreate(osThread(DebugManagerT), NULL);
 800cad6:	f107 0320 	add.w	r3, r7, #32
 800cada:	2100      	movs	r1, #0
 800cadc:	4618      	mov	r0, r3
 800cade:	f7f9 fea0 	bl	8006822 <osThreadCreate>
 800cae2:	4603      	mov	r3, r0
 800cae4:	4a94      	ldr	r2, [pc, #592]	; (800cd38 <main+0x364>)
 800cae6:	6013      	str	r3, [r2, #0]

  osThreadDef(HmiManagerT, HmiManager, osPriorityNormal, 0, 128);
 800cae8:	4b94      	ldr	r3, [pc, #592]	; (800cd3c <main+0x368>)
 800caea:	1d3c      	adds	r4, r7, #4
 800caec:	461d      	mov	r5, r3
 800caee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800caf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800caf2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800caf6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HmiManagerTHandle = osThreadCreate(osThread(HmiManagerT), NULL);
 800cafa:	1d3b      	adds	r3, r7, #4
 800cafc:	2100      	movs	r1, #0
 800cafe:	4618      	mov	r0, r3
 800cb00:	f7f9 fe8f 	bl	8006822 <osThreadCreate>
 800cb04:	4603      	mov	r3, r0
 800cb06:	4a8e      	ldr	r2, [pc, #568]	; (800cd40 <main+0x36c>)
 800cb08:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  printf("-------------------------------\n\r"); //TODO: if we remove this call, go to hardfault handler  or fail to execute
 800cb0a:	488e      	ldr	r0, [pc, #568]	; (800cd44 <main+0x370>)
 800cb0c:	f001 f8a4 	bl	800dc58 <iprintf>

  switch (readModel())
 800cb10:	f7fd f9ba 	bl	8009e88 <readModel>
 800cb14:	4603      	mov	r3, r0
 800cb16:	2b05      	cmp	r3, #5
 800cb18:	d826      	bhi.n	800cb68 <main+0x194>
 800cb1a:	a201      	add	r2, pc, #4	; (adr r2, 800cb20 <main+0x14c>)
 800cb1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb20:	0800cb39 	.word	0x0800cb39
 800cb24:	0800cb41 	.word	0x0800cb41
 800cb28:	0800cb49 	.word	0x0800cb49
 800cb2c:	0800cb51 	.word	0x0800cb51
 800cb30:	0800cb59 	.word	0x0800cb59
 800cb34:	0800cb61 	.word	0x0800cb61
  {
  	  case HEATMAX:
	   	  printf("HeatCom CaddyAdv");
 800cb38:	4883      	ldr	r0, [pc, #524]	; (800cd48 <main+0x374>)
 800cb3a:	f001 f88d 	bl	800dc58 <iprintf>
	  break;
 800cb3e:	e017      	b.n	800cb70 <main+0x19c>
  	  case CADDY_ADVANCED:
  		  printf("Caddy Advanced");
 800cb40:	4882      	ldr	r0, [pc, #520]	; (800cd4c <main+0x378>)
 800cb42:	f001 f889 	bl	800dc58 <iprintf>
	  break;
 800cb46:	e013      	b.n	800cb70 <main+0x19c>
  	  case HEATPACK:
  		  printf("Heatpack");
 800cb48:	4881      	ldr	r0, [pc, #516]	; (800cd50 <main+0x37c>)
 800cb4a:	f001 f885 	bl	800dc58 <iprintf>
	  break;
 800cb4e:	e00f      	b.n	800cb70 <main+0x19c>
  	  case MINI_CADDY:
  		  printf("Mini Caddy");
 800cb50:	4880      	ldr	r0, [pc, #512]	; (800cd54 <main+0x380>)
 800cb52:	f001 f881 	bl	800dc58 <iprintf>
  	  break;
 800cb56:	e00b      	b.n	800cb70 <main+0x19c>
  	  case HEATPRO:
  		  printf("HeatPro");
 800cb58:	487f      	ldr	r0, [pc, #508]	; (800cd58 <main+0x384>)
 800cb5a:	f001 f87d 	bl	800dc58 <iprintf>
	  break;
 800cb5e:	e007      	b.n	800cb70 <main+0x19c>
  	  case MAX_CADDY:
  		  printf("Max Caddy");
 800cb60:	487e      	ldr	r0, [pc, #504]	; (800cd5c <main+0x388>)
 800cb62:	f001 f879 	bl	800dc58 <iprintf>
	  break;
 800cb66:	e003      	b.n	800cb70 <main+0x19c>
  	  default:
  		  printf("Invalid Model");
 800cb68:	487d      	ldr	r0, [pc, #500]	; (800cd60 <main+0x38c>)
 800cb6a:	f001 f875 	bl	800dc58 <iprintf>
  		break;
 800cb6e:	bf00      	nop
  }
  uint32_t j=0; //for a dumbass delay
 800cb70:	2300      	movs	r3, #0
 800cb72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HAL_GPIO_WritePin(STATUS_LED0_GPIO_Port,STATUS_LED0_Pin,SET);
 800cb76:	2201      	movs	r2, #1
 800cb78:	2120      	movs	r1, #32
 800cb7a:	487a      	ldr	r0, [pc, #488]	; (800cd64 <main+0x390>)
 800cb7c:	f7f5 ff9d 	bl	8002aba <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STATUS_LED1_GPIO_Port,STATUS_LED1_Pin,SET);
 800cb80:	2201      	movs	r2, #1
 800cb82:	2140      	movs	r1, #64	; 0x40
 800cb84:	4877      	ldr	r0, [pc, #476]	; (800cd64 <main+0x390>)
 800cb86:	f7f5 ff98 	bl	8002aba <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STATUS_LED2_GPIO_Port,STATUS_LED2_Pin,SET);
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	2180      	movs	r1, #128	; 0x80
 800cb8e:	4875      	ldr	r0, [pc, #468]	; (800cd64 <main+0x390>)
 800cb90:	f7f5 ff93 	bl	8002aba <HAL_GPIO_WritePin>
  for(j=0;j<10000000;j++){asm("NOP");}
 800cb94:	2300      	movs	r3, #0
 800cb96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800cb9a:	e005      	b.n	800cba8 <main+0x1d4>
 800cb9c:	bf00      	nop
 800cb9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cba2:	3301      	adds	r3, #1
 800cba4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800cba8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cbac:	4a6e      	ldr	r2, [pc, #440]	; (800cd68 <main+0x394>)
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d3f4      	bcc.n	800cb9c <main+0x1c8>
  printf(" Version %i.%i.%i\n\r",MAJOR_VER,MINOR_VER,REVISION_VER);
 800cbb2:	2308      	movs	r3, #8
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	2101      	movs	r1, #1
 800cbb8:	486c      	ldr	r0, [pc, #432]	; (800cd6c <main+0x398>)
 800cbba:	f001 f84d 	bl	800dc58 <iprintf>


  int i=0;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  for(i=0;i<MAJOR_VER;i++)
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cbca:	e02c      	b.n	800cc26 <main+0x252>
  {
	  HAL_GPIO_WritePin(STATUS_LED0_GPIO_Port,STATUS_LED0_Pin,RESET);
 800cbcc:	2200      	movs	r2, #0
 800cbce:	2120      	movs	r1, #32
 800cbd0:	4864      	ldr	r0, [pc, #400]	; (800cd64 <main+0x390>)
 800cbd2:	f7f5 ff72 	bl	8002aba <HAL_GPIO_WritePin>
	  for(j=0;j<5000000;j++){asm("NOP");}
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800cbdc:	e005      	b.n	800cbea <main+0x216>
 800cbde:	bf00      	nop
 800cbe0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cbe4:	3301      	adds	r3, #1
 800cbe6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800cbea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cbee:	4a60      	ldr	r2, [pc, #384]	; (800cd70 <main+0x39c>)
 800cbf0:	4293      	cmp	r3, r2
 800cbf2:	d9f4      	bls.n	800cbde <main+0x20a>
	  HAL_GPIO_WritePin(STATUS_LED0_GPIO_Port,STATUS_LED0_Pin,SET);
 800cbf4:	2201      	movs	r2, #1
 800cbf6:	2120      	movs	r1, #32
 800cbf8:	485a      	ldr	r0, [pc, #360]	; (800cd64 <main+0x390>)
 800cbfa:	f7f5 ff5e 	bl	8002aba <HAL_GPIO_WritePin>
	  for(j=0;j<5000000;j++){asm("NOP");}
 800cbfe:	2300      	movs	r3, #0
 800cc00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800cc04:	e005      	b.n	800cc12 <main+0x23e>
 800cc06:	bf00      	nop
 800cc08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800cc12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cc16:	4a56      	ldr	r2, [pc, #344]	; (800cd70 <main+0x39c>)
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d9f4      	bls.n	800cc06 <main+0x232>
  for(i=0;i<MAJOR_VER;i++)
 800cc1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cc20:	3301      	adds	r3, #1
 800cc22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cc26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	ddce      	ble.n	800cbcc <main+0x1f8>
  }
  for(i=0;i<MINOR_VER;i++)
 800cc2e:	2300      	movs	r3, #0
 800cc30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cc34:	e02c      	b.n	800cc90 <main+0x2bc>
  {
	  HAL_GPIO_WritePin(STATUS_LED1_GPIO_Port,STATUS_LED1_Pin,RESET);
 800cc36:	2200      	movs	r2, #0
 800cc38:	2140      	movs	r1, #64	; 0x40
 800cc3a:	484a      	ldr	r0, [pc, #296]	; (800cd64 <main+0x390>)
 800cc3c:	f7f5 ff3d 	bl	8002aba <HAL_GPIO_WritePin>
	  for(j=0;j<5000000;j++){asm("NOP");}
 800cc40:	2300      	movs	r3, #0
 800cc42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800cc46:	e005      	b.n	800cc54 <main+0x280>
 800cc48:	bf00      	nop
 800cc4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cc4e:	3301      	adds	r3, #1
 800cc50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800cc54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cc58:	4a45      	ldr	r2, [pc, #276]	; (800cd70 <main+0x39c>)
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d9f4      	bls.n	800cc48 <main+0x274>
	  HAL_GPIO_WritePin(STATUS_LED1_GPIO_Port,STATUS_LED1_Pin,SET);
 800cc5e:	2201      	movs	r2, #1
 800cc60:	2140      	movs	r1, #64	; 0x40
 800cc62:	4840      	ldr	r0, [pc, #256]	; (800cd64 <main+0x390>)
 800cc64:	f7f5 ff29 	bl	8002aba <HAL_GPIO_WritePin>
	  for(j=0;j<5000000;j++){asm("NOP");}
 800cc68:	2300      	movs	r3, #0
 800cc6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800cc6e:	e005      	b.n	800cc7c <main+0x2a8>
 800cc70:	bf00      	nop
 800cc72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cc76:	3301      	adds	r3, #1
 800cc78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800cc7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cc80:	4a3b      	ldr	r2, [pc, #236]	; (800cd70 <main+0x39c>)
 800cc82:	4293      	cmp	r3, r2
 800cc84:	d9f4      	bls.n	800cc70 <main+0x29c>
  for(i=0;i<MINOR_VER;i++)
 800cc86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cc8a:	3301      	adds	r3, #1
 800cc8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cc90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	dbce      	blt.n	800cc36 <main+0x262>
  }
  for(i=0;i<REVISION_VER;i++)
 800cc98:	2300      	movs	r3, #0
 800cc9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cc9e:	e02c      	b.n	800ccfa <main+0x326>
  {
	  HAL_GPIO_WritePin(STATUS_LED2_GPIO_Port,STATUS_LED2_Pin,RESET);
 800cca0:	2200      	movs	r2, #0
 800cca2:	2180      	movs	r1, #128	; 0x80
 800cca4:	482f      	ldr	r0, [pc, #188]	; (800cd64 <main+0x390>)
 800cca6:	f7f5 ff08 	bl	8002aba <HAL_GPIO_WritePin>
	  for(j=0;j<5000000;j++){asm("NOP");}
 800ccaa:	2300      	movs	r3, #0
 800ccac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ccb0:	e005      	b.n	800ccbe <main+0x2ea>
 800ccb2:	bf00      	nop
 800ccb4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ccb8:	3301      	adds	r3, #1
 800ccba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ccbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ccc2:	4a2b      	ldr	r2, [pc, #172]	; (800cd70 <main+0x39c>)
 800ccc4:	4293      	cmp	r3, r2
 800ccc6:	d9f4      	bls.n	800ccb2 <main+0x2de>
	  HAL_GPIO_WritePin(STATUS_LED2_GPIO_Port,STATUS_LED2_Pin,SET);
 800ccc8:	2201      	movs	r2, #1
 800ccca:	2180      	movs	r1, #128	; 0x80
 800cccc:	4825      	ldr	r0, [pc, #148]	; (800cd64 <main+0x390>)
 800ccce:	f7f5 fef4 	bl	8002aba <HAL_GPIO_WritePin>
	  for(j=0;j<5000000;j++){asm("NOP");}
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ccd8:	e005      	b.n	800cce6 <main+0x312>
 800ccda:	bf00      	nop
 800ccdc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cce0:	3301      	adds	r3, #1
 800cce2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800cce6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ccea:	4a21      	ldr	r2, [pc, #132]	; (800cd70 <main+0x39c>)
 800ccec:	4293      	cmp	r3, r2
 800ccee:	d9f4      	bls.n	800ccda <main+0x306>
  for(i=0;i<REVISION_VER;i++)
 800ccf0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ccfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ccfe:	2b07      	cmp	r3, #7
 800cd00:	ddce      	ble.n	800cca0 <main+0x2cc>
  }

//#endif

  osKernelStart();
 800cd02:	f7f9 fd77 	bl	80067f4 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800cd06:	e7fe      	b.n	800cd06 <main+0x332>
 800cd08:	20003168 	.word	0x20003168
 800cd0c:	20003198 	.word	0x20003198
 800cd10:	20003148 	.word	0x20003148
 800cd14:	0800d2b5 	.word	0x0800d2b5
 800cd18:	200031a4 	.word	0x200031a4
 800cd1c:	0800fd78 	.word	0x0800fd78
 800cd20:	2000314c 	.word	0x2000314c
 800cd24:	0800fd94 	.word	0x0800fd94
 800cd28:	200031a0 	.word	0x200031a0
 800cd2c:	0800fdb0 	.word	0x0800fdb0
 800cd30:	20003200 	.word	0x20003200
 800cd34:	0800fdcc 	.word	0x0800fdcc
 800cd38:	20003160 	.word	0x20003160
 800cd3c:	0800fde8 	.word	0x0800fde8
 800cd40:	2000315c 	.word	0x2000315c
 800cd44:	0800fce0 	.word	0x0800fce0
 800cd48:	0800fd04 	.word	0x0800fd04
 800cd4c:	0800fd18 	.word	0x0800fd18
 800cd50:	0800fd28 	.word	0x0800fd28
 800cd54:	0800fd34 	.word	0x0800fd34
 800cd58:	0800fd40 	.word	0x0800fd40
 800cd5c:	0800fd48 	.word	0x0800fd48
 800cd60:	0800fd54 	.word	0x0800fd54
 800cd64:	40011000 	.word	0x40011000
 800cd68:	00989680 	.word	0x00989680
 800cd6c:	0800fd64 	.word	0x0800fd64
 800cd70:	004c4b3f 	.word	0x004c4b3f

0800cd74 <HAL_ADC_ConvCpltCallback>:
  }
  /* USER CODE END 3 */
}
#define NB_SAMPLES 30
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800cd74:	b480      	push	{r7}
 800cd76:	b087      	sub	sp, #28
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
	static uint32_t filteredVoltage[NB_SAMPLES][2];
	static int j=0;
	for (int i =0; i<2; i++)
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	617b      	str	r3, [r7, #20]
 800cd80:	e00e      	b.n	800cda0 <HAL_ADC_ConvCpltCallback+0x2c>
	{
		filteredVoltage[j][i] = buffer[i];
 800cd82:	4b26      	ldr	r3, [pc, #152]	; (800ce1c <HAL_ADC_ConvCpltCallback+0xa8>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	4926      	ldr	r1, [pc, #152]	; (800ce20 <HAL_ADC_ConvCpltCallback+0xac>)
 800cd88:	697a      	ldr	r2, [r7, #20]
 800cd8a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800cd8e:	4825      	ldr	r0, [pc, #148]	; (800ce24 <HAL_ADC_ConvCpltCallback+0xb0>)
 800cd90:	0059      	lsls	r1, r3, #1
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	440b      	add	r3, r1
 800cd96:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (int i =0; i<2; i++)
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	617b      	str	r3, [r7, #20]
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	2b01      	cmp	r3, #1
 800cda4:	dded      	ble.n	800cd82 <HAL_ADC_ConvCpltCallback+0xe>
		//uCAdcData[i] = buffer[i];
	}
	j++;
 800cda6:	4b1d      	ldr	r3, [pc, #116]	; (800ce1c <HAL_ADC_ConvCpltCallback+0xa8>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	3301      	adds	r3, #1
 800cdac:	4a1b      	ldr	r2, [pc, #108]	; (800ce1c <HAL_ADC_ConvCpltCallback+0xa8>)
 800cdae:	6013      	str	r3, [r2, #0]
	if(j>NB_SAMPLES)
 800cdb0:	4b1a      	ldr	r3, [pc, #104]	; (800ce1c <HAL_ADC_ConvCpltCallback+0xa8>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	2b1e      	cmp	r3, #30
 800cdb6:	dd02      	ble.n	800cdbe <HAL_ADC_ConvCpltCallback+0x4a>
	{
		j=0;
 800cdb8:	4b18      	ldr	r3, [pc, #96]	; (800ce1c <HAL_ADC_ConvCpltCallback+0xa8>)
 800cdba:	2200      	movs	r2, #0
 800cdbc:	601a      	str	r2, [r3, #0]
	}
	uint32_t sum = 0;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	613b      	str	r3, [r7, #16]
	for (int i =0; i<2; i++)
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	60fb      	str	r3, [r7, #12]
 800cdc6:	e020      	b.n	800ce0a <HAL_ADC_ConvCpltCallback+0x96>
	{
		for (int k=0; k<NB_SAMPLES;k++)
 800cdc8:	2300      	movs	r3, #0
 800cdca:	60bb      	str	r3, [r7, #8]
 800cdcc:	e00c      	b.n	800cde8 <HAL_ADC_ConvCpltCallback+0x74>
		{
			sum += filteredVoltage[k][i];
 800cdce:	4915      	ldr	r1, [pc, #84]	; (800ce24 <HAL_ADC_ConvCpltCallback+0xb0>)
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	005a      	lsls	r2, r3, #1
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	4413      	add	r3, r2
 800cdd8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cddc:	693a      	ldr	r2, [r7, #16]
 800cdde:	4413      	add	r3, r2
 800cde0:	613b      	str	r3, [r7, #16]
		for (int k=0; k<NB_SAMPLES;k++)
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	3301      	adds	r3, #1
 800cde6:	60bb      	str	r3, [r7, #8]
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	2b1d      	cmp	r3, #29
 800cdec:	ddef      	ble.n	800cdce <HAL_ADC_ConvCpltCallback+0x5a>
		}
		uCAdcData[i] = sum/NB_SAMPLES;
 800cdee:	693b      	ldr	r3, [r7, #16]
 800cdf0:	4a0d      	ldr	r2, [pc, #52]	; (800ce28 <HAL_ADC_ConvCpltCallback+0xb4>)
 800cdf2:	fba2 2303 	umull	r2, r3, r2, r3
 800cdf6:	091a      	lsrs	r2, r3, #4
 800cdf8:	490c      	ldr	r1, [pc, #48]	; (800ce2c <HAL_ADC_ConvCpltCallback+0xb8>)
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		sum=0;
 800ce00:	2300      	movs	r3, #0
 800ce02:	613b      	str	r3, [r7, #16]
	for (int i =0; i<2; i++)
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	3301      	adds	r3, #1
 800ce08:	60fb      	str	r3, [r7, #12]
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	2b01      	cmp	r3, #1
 800ce0e:	dddb      	ble.n	800cdc8 <HAL_ADC_ConvCpltCallback+0x54>
	}
}
 800ce10:	bf00      	nop
 800ce12:	bf00      	nop
 800ce14:	371c      	adds	r7, #28
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bc80      	pop	{r7}
 800ce1a:	4770      	bx	lr
 800ce1c:	20002f28 	.word	0x20002f28
 800ce20:	20003198 	.word	0x20003198
 800ce24:	20002f2c 	.word	0x20002f2c
 800ce28:	88888889 	.word	0x88888889
 800ce2c:	20003150 	.word	0x20003150

0800ce30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b096      	sub	sp, #88	; 0x58
 800ce34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ce36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ce3a:	2228      	movs	r2, #40	; 0x28
 800ce3c:	2100      	movs	r1, #0
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f000 ff02 	bl	800dc48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ce44:	f107 031c 	add.w	r3, r7, #28
 800ce48:	2200      	movs	r2, #0
 800ce4a:	601a      	str	r2, [r3, #0]
 800ce4c:	605a      	str	r2, [r3, #4]
 800ce4e:	609a      	str	r2, [r3, #8]
 800ce50:	60da      	str	r2, [r3, #12]
 800ce52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ce54:	1d3b      	adds	r3, r7, #4
 800ce56:	2200      	movs	r2, #0
 800ce58:	601a      	str	r2, [r3, #0]
 800ce5a:	605a      	str	r2, [r3, #4]
 800ce5c:	609a      	str	r2, [r3, #8]
 800ce5e:	60da      	str	r2, [r3, #12]
 800ce60:	611a      	str	r2, [r3, #16]
 800ce62:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800ce64:	2309      	movs	r3, #9
 800ce66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800ce68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ce6c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800ce72:	2301      	movs	r3, #1
 800ce74:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800ce76:	2301      	movs	r3, #1
 800ce78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ce7a:	2302      	movs	r3, #2
 800ce7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ce7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ce82:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800ce84:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ce88:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ce8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f7f7 fd2a 	bl	80048e8 <HAL_RCC_OscConfig>
 800ce94:	4603      	mov	r3, r0
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d001      	beq.n	800ce9e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800ce9a:	f000 fa2d 	bl	800d2f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ce9e:	230f      	movs	r3, #15
 800cea0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800cea2:	2302      	movs	r3, #2
 800cea4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800cea6:	2300      	movs	r3, #0
 800cea8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800ceaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ceae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800ceb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ceb4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800ceb6:	f107 031c 	add.w	r3, r7, #28
 800ceba:	2101      	movs	r1, #1
 800cebc:	4618      	mov	r0, r3
 800cebe:	f7f7 ff93 	bl	8004de8 <HAL_RCC_ClockConfig>
 800cec2:	4603      	mov	r3, r0
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d001      	beq.n	800cecc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800cec8:	f000 fa16 	bl	800d2f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800cecc:	2303      	movs	r3, #3
 800cece:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800ced0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ced4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800ced6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ceda:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800cedc:	1d3b      	adds	r3, r7, #4
 800cede:	4618      	mov	r0, r3
 800cee0:	f7f8 f94c 	bl	800517c <HAL_RCCEx_PeriphCLKConfig>
 800cee4:	4603      	mov	r3, r0
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d001      	beq.n	800ceee <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800ceea:	f000 fa05 	bl	800d2f8 <Error_Handler>
  }
}
 800ceee:	bf00      	nop
 800cef0:	3758      	adds	r7, #88	; 0x58
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}
	...

0800cef8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b084      	sub	sp, #16
 800cefc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800cefe:	1d3b      	adds	r3, r7, #4
 800cf00:	2200      	movs	r2, #0
 800cf02:	601a      	str	r2, [r3, #0]
 800cf04:	605a      	str	r2, [r3, #4]
 800cf06:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800cf08:	4b21      	ldr	r3, [pc, #132]	; (800cf90 <MX_ADC1_Init+0x98>)
 800cf0a:	4a22      	ldr	r2, [pc, #136]	; (800cf94 <MX_ADC1_Init+0x9c>)
 800cf0c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800cf0e:	4b20      	ldr	r3, [pc, #128]	; (800cf90 <MX_ADC1_Init+0x98>)
 800cf10:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cf14:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800cf16:	4b1e      	ldr	r3, [pc, #120]	; (800cf90 <MX_ADC1_Init+0x98>)
 800cf18:	2201      	movs	r2, #1
 800cf1a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800cf1c:	4b1c      	ldr	r3, [pc, #112]	; (800cf90 <MX_ADC1_Init+0x98>)
 800cf1e:	2200      	movs	r2, #0
 800cf20:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800cf22:	4b1b      	ldr	r3, [pc, #108]	; (800cf90 <MX_ADC1_Init+0x98>)
 800cf24:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800cf28:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800cf2a:	4b19      	ldr	r3, [pc, #100]	; (800cf90 <MX_ADC1_Init+0x98>)
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 800cf30:	4b17      	ldr	r3, [pc, #92]	; (800cf90 <MX_ADC1_Init+0x98>)
 800cf32:	2202      	movs	r2, #2
 800cf34:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800cf36:	4816      	ldr	r0, [pc, #88]	; (800cf90 <MX_ADC1_Init+0x98>)
 800cf38:	f7f4 f982 	bl	8001240 <HAL_ADC_Init>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d001      	beq.n	800cf46 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800cf42:	f000 f9d9 	bl	800d2f8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800cf46:	2306      	movs	r3, #6
 800cf48:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800cf4e:	2307      	movs	r3, #7
 800cf50:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cf52:	1d3b      	adds	r3, r7, #4
 800cf54:	4619      	mov	r1, r3
 800cf56:	480e      	ldr	r0, [pc, #56]	; (800cf90 <MX_ADC1_Init+0x98>)
 800cf58:	f7f4 fb4c 	bl	80015f4 <HAL_ADC_ConfigChannel>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d001      	beq.n	800cf66 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800cf62:	f000 f9c9 	bl	800d2f8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800cf66:	2307      	movs	r3, #7
 800cf68:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800cf6a:	2302      	movs	r3, #2
 800cf6c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800cf6e:	2307      	movs	r3, #7
 800cf70:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cf72:	1d3b      	adds	r3, r7, #4
 800cf74:	4619      	mov	r1, r3
 800cf76:	4806      	ldr	r0, [pc, #24]	; (800cf90 <MX_ADC1_Init+0x98>)
 800cf78:	f7f4 fb3c 	bl	80015f4 <HAL_ADC_ConfigChannel>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d001      	beq.n	800cf86 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800cf82:	f000 f9b9 	bl	800d2f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800cf86:	bf00      	nop
 800cf88:	3710      	adds	r7, #16
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}
 800cf8e:	bf00      	nop
 800cf90:	20003168 	.word	0x20003168
 800cf94:	40012400 	.word	0x40012400

0800cf98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800cf9c:	4b12      	ldr	r3, [pc, #72]	; (800cfe8 <MX_I2C1_Init+0x50>)
 800cf9e:	4a13      	ldr	r2, [pc, #76]	; (800cfec <MX_I2C1_Init+0x54>)
 800cfa0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800cfa2:	4b11      	ldr	r3, [pc, #68]	; (800cfe8 <MX_I2C1_Init+0x50>)
 800cfa4:	4a12      	ldr	r2, [pc, #72]	; (800cff0 <MX_I2C1_Init+0x58>)
 800cfa6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800cfa8:	4b0f      	ldr	r3, [pc, #60]	; (800cfe8 <MX_I2C1_Init+0x50>)
 800cfaa:	2200      	movs	r2, #0
 800cfac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800cfae:	4b0e      	ldr	r3, [pc, #56]	; (800cfe8 <MX_I2C1_Init+0x50>)
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800cfb4:	4b0c      	ldr	r3, [pc, #48]	; (800cfe8 <MX_I2C1_Init+0x50>)
 800cfb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800cfba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800cfbc:	4b0a      	ldr	r3, [pc, #40]	; (800cfe8 <MX_I2C1_Init+0x50>)
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800cfc2:	4b09      	ldr	r3, [pc, #36]	; (800cfe8 <MX_I2C1_Init+0x50>)
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800cfc8:	4b07      	ldr	r3, [pc, #28]	; (800cfe8 <MX_I2C1_Init+0x50>)
 800cfca:	2200      	movs	r2, #0
 800cfcc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800cfce:	4b06      	ldr	r3, [pc, #24]	; (800cfe8 <MX_I2C1_Init+0x50>)
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800cfd4:	4804      	ldr	r0, [pc, #16]	; (800cfe8 <MX_I2C1_Init+0x50>)
 800cfd6:	f7f5 fda1 	bl	8002b1c <HAL_I2C_Init>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d001      	beq.n	800cfe4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800cfe0:	f000 f98a 	bl	800d2f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800cfe4:	bf00      	nop
 800cfe6:	bd80      	pop	{r7, pc}
 800cfe8:	200030f4 	.word	0x200030f4
 800cfec:	40005400 	.word	0x40005400
 800cff0:	000186a0 	.word	0x000186a0

0800cff4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b082      	sub	sp, #8
 800cff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800cffa:	1d3b      	adds	r3, r7, #4
 800cffc:	2100      	movs	r1, #0
 800cffe:	460a      	mov	r2, r1
 800d000:	801a      	strh	r2, [r3, #0]
 800d002:	460a      	mov	r2, r1
 800d004:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800d006:	2300      	movs	r3, #0
 800d008:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800d00a:	4b1d      	ldr	r3, [pc, #116]	; (800d080 <MX_RTC_Init+0x8c>)
 800d00c:	4a1d      	ldr	r2, [pc, #116]	; (800d084 <MX_RTC_Init+0x90>)
 800d00e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800d010:	4b1b      	ldr	r3, [pc, #108]	; (800d080 <MX_RTC_Init+0x8c>)
 800d012:	f04f 32ff 	mov.w	r2, #4294967295
 800d016:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 800d018:	4b19      	ldr	r3, [pc, #100]	; (800d080 <MX_RTC_Init+0x8c>)
 800d01a:	2200      	movs	r2, #0
 800d01c:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800d01e:	4818      	ldr	r0, [pc, #96]	; (800d080 <MX_RTC_Init+0x8c>)
 800d020:	f7f8 fa48 	bl	80054b4 <HAL_RTC_Init>
 800d024:	4603      	mov	r3, r0
 800d026:	2b00      	cmp	r3, #0
 800d028:	d001      	beq.n	800d02e <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 800d02a:	f000 f965 	bl	800d2f8 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 800d02e:	2300      	movs	r3, #0
 800d030:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800d032:	2300      	movs	r3, #0
 800d034:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800d036:	2300      	movs	r3, #0
 800d038:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800d03a:	1d3b      	adds	r3, r7, #4
 800d03c:	2201      	movs	r2, #1
 800d03e:	4619      	mov	r1, r3
 800d040:	480f      	ldr	r0, [pc, #60]	; (800d080 <MX_RTC_Init+0x8c>)
 800d042:	f7f8 facd 	bl	80055e0 <HAL_RTC_SetTime>
 800d046:	4603      	mov	r3, r0
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d001      	beq.n	800d050 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 800d04c:	f000 f954 	bl	800d2f8 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800d050:	2301      	movs	r3, #1
 800d052:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800d054:	2301      	movs	r3, #1
 800d056:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 800d058:	2301      	movs	r3, #1
 800d05a:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 800d05c:	2300      	movs	r3, #0
 800d05e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800d060:	463b      	mov	r3, r7
 800d062:	2201      	movs	r2, #1
 800d064:	4619      	mov	r1, r3
 800d066:	4806      	ldr	r0, [pc, #24]	; (800d080 <MX_RTC_Init+0x8c>)
 800d068:	f7f8 fc2a 	bl	80058c0 <HAL_RTC_SetDate>
 800d06c:	4603      	mov	r3, r0
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d001      	beq.n	800d076 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800d072:	f000 f941 	bl	800d2f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800d076:	bf00      	nop
 800d078:	3708      	adds	r7, #8
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}
 800d07e:	bf00      	nop
 800d080:	200031ec 	.word	0x200031ec
 800d084:	40002800 	.word	0x40002800

0800d088 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800d08c:	4b11      	ldr	r3, [pc, #68]	; (800d0d4 <MX_USART3_UART_Init+0x4c>)
 800d08e:	4a12      	ldr	r2, [pc, #72]	; (800d0d8 <MX_USART3_UART_Init+0x50>)
 800d090:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800d092:	4b10      	ldr	r3, [pc, #64]	; (800d0d4 <MX_USART3_UART_Init+0x4c>)
 800d094:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800d098:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d09a:	4b0e      	ldr	r3, [pc, #56]	; (800d0d4 <MX_USART3_UART_Init+0x4c>)
 800d09c:	2200      	movs	r2, #0
 800d09e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800d0a0:	4b0c      	ldr	r3, [pc, #48]	; (800d0d4 <MX_USART3_UART_Init+0x4c>)
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800d0a6:	4b0b      	ldr	r3, [pc, #44]	; (800d0d4 <MX_USART3_UART_Init+0x4c>)
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d0ac:	4b09      	ldr	r3, [pc, #36]	; (800d0d4 <MX_USART3_UART_Init+0x4c>)
 800d0ae:	220c      	movs	r2, #12
 800d0b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d0b2:	4b08      	ldr	r3, [pc, #32]	; (800d0d4 <MX_USART3_UART_Init+0x4c>)
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800d0b8:	4b06      	ldr	r3, [pc, #24]	; (800d0d4 <MX_USART3_UART_Init+0x4c>)
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800d0be:	4805      	ldr	r0, [pc, #20]	; (800d0d4 <MX_USART3_UART_Init+0x4c>)
 800d0c0:	f7f9 f966 	bl	8006390 <HAL_UART_Init>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d001      	beq.n	800d0ce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800d0ca:	f000 f915 	bl	800d2f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800d0ce:	bf00      	nop
 800d0d0:	bd80      	pop	{r7, pc}
 800d0d2:	bf00      	nop
 800d0d4:	2000306c 	.word	0x2000306c
 800d0d8:	40004800 	.word	0x40004800

0800d0dc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b082      	sub	sp, #8
 800d0e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800d0e2:	4b0c      	ldr	r3, [pc, #48]	; (800d114 <MX_DMA_Init+0x38>)
 800d0e4:	695b      	ldr	r3, [r3, #20]
 800d0e6:	4a0b      	ldr	r2, [pc, #44]	; (800d114 <MX_DMA_Init+0x38>)
 800d0e8:	f043 0301 	orr.w	r3, r3, #1
 800d0ec:	6153      	str	r3, [r2, #20]
 800d0ee:	4b09      	ldr	r3, [pc, #36]	; (800d114 <MX_DMA_Init+0x38>)
 800d0f0:	695b      	ldr	r3, [r3, #20]
 800d0f2:	f003 0301 	and.w	r3, r3, #1
 800d0f6:	607b      	str	r3, [r7, #4]
 800d0f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	2105      	movs	r1, #5
 800d0fe:	200b      	movs	r0, #11
 800d100:	f7f4 fdd7 	bl	8001cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800d104:	200b      	movs	r0, #11
 800d106:	f7f4 fdf0 	bl	8001cea <HAL_NVIC_EnableIRQ>

}
 800d10a:	bf00      	nop
 800d10c:	3708      	adds	r7, #8
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}
 800d112:	bf00      	nop
 800d114:	40021000 	.word	0x40021000

0800d118 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b088      	sub	sp, #32
 800d11c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d11e:	f107 0310 	add.w	r3, r7, #16
 800d122:	2200      	movs	r2, #0
 800d124:	601a      	str	r2, [r3, #0]
 800d126:	605a      	str	r2, [r3, #4]
 800d128:	609a      	str	r2, [r3, #8]
 800d12a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d12c:	4b58      	ldr	r3, [pc, #352]	; (800d290 <MX_GPIO_Init+0x178>)
 800d12e:	699b      	ldr	r3, [r3, #24]
 800d130:	4a57      	ldr	r2, [pc, #348]	; (800d290 <MX_GPIO_Init+0x178>)
 800d132:	f043 0310 	orr.w	r3, r3, #16
 800d136:	6193      	str	r3, [r2, #24]
 800d138:	4b55      	ldr	r3, [pc, #340]	; (800d290 <MX_GPIO_Init+0x178>)
 800d13a:	699b      	ldr	r3, [r3, #24]
 800d13c:	f003 0310 	and.w	r3, r3, #16
 800d140:	60fb      	str	r3, [r7, #12]
 800d142:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d144:	4b52      	ldr	r3, [pc, #328]	; (800d290 <MX_GPIO_Init+0x178>)
 800d146:	699b      	ldr	r3, [r3, #24]
 800d148:	4a51      	ldr	r2, [pc, #324]	; (800d290 <MX_GPIO_Init+0x178>)
 800d14a:	f043 0320 	orr.w	r3, r3, #32
 800d14e:	6193      	str	r3, [r2, #24]
 800d150:	4b4f      	ldr	r3, [pc, #316]	; (800d290 <MX_GPIO_Init+0x178>)
 800d152:	699b      	ldr	r3, [r3, #24]
 800d154:	f003 0320 	and.w	r3, r3, #32
 800d158:	60bb      	str	r3, [r7, #8]
 800d15a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d15c:	4b4c      	ldr	r3, [pc, #304]	; (800d290 <MX_GPIO_Init+0x178>)
 800d15e:	699b      	ldr	r3, [r3, #24]
 800d160:	4a4b      	ldr	r2, [pc, #300]	; (800d290 <MX_GPIO_Init+0x178>)
 800d162:	f043 0304 	orr.w	r3, r3, #4
 800d166:	6193      	str	r3, [r2, #24]
 800d168:	4b49      	ldr	r3, [pc, #292]	; (800d290 <MX_GPIO_Init+0x178>)
 800d16a:	699b      	ldr	r3, [r3, #24]
 800d16c:	f003 0304 	and.w	r3, r3, #4
 800d170:	607b      	str	r3, [r7, #4]
 800d172:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d174:	4b46      	ldr	r3, [pc, #280]	; (800d290 <MX_GPIO_Init+0x178>)
 800d176:	699b      	ldr	r3, [r3, #24]
 800d178:	4a45      	ldr	r2, [pc, #276]	; (800d290 <MX_GPIO_Init+0x178>)
 800d17a:	f043 0308 	orr.w	r3, r3, #8
 800d17e:	6193      	str	r3, [r2, #24]
 800d180:	4b43      	ldr	r3, [pc, #268]	; (800d290 <MX_GPIO_Init+0x178>)
 800d182:	699b      	ldr	r3, [r3, #24]
 800d184:	f003 0308 	and.w	r3, r3, #8
 800d188:	603b      	str	r3, [r7, #0]
 800d18a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, step2_LowCurrent_Pin|Remote_led_Pin|uc_Stepper_Sleep_Pin|STATUS_LED0_Pin 
 800d18c:	2200      	movs	r2, #0
 800d18e:	f643 71f8 	movw	r1, #16376	; 0x3ff8
 800d192:	4840      	ldr	r0, [pc, #256]	; (800d294 <MX_GPIO_Init+0x17c>)
 800d194:	f7f5 fc91 	bl	8002aba <HAL_GPIO_WritePin>
                          |STATUS_LED1_Pin|STATUS_LED2_Pin|Step2_DIR_Pin|Step1_LowCurrent_Pin 
                          |Step2_STEP_Pin|Step2_RESET_Pin|Step2_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPEED3_COIL_Pin|SPEED2_COIL_Pin|SPEED1_COIL_Pin, GPIO_PIN_RESET);
 800d198:	2200      	movs	r2, #0
 800d19a:	210e      	movs	r1, #14
 800d19c:	483e      	ldr	r0, [pc, #248]	; (800d298 <MX_GPIO_Init+0x180>)
 800d19e:	f7f5 fc8c 	bl	8002aba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Button_LED_Pin|USB_LED_Pin|Step1_STEP_Pin|Step1_RESET_Pin 
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	213b      	movs	r1, #59	; 0x3b
 800d1a6:	483d      	ldr	r0, [pc, #244]	; (800d29c <MX_GPIO_Init+0x184>)
 800d1a8:	f7f5 fc87 	bl	8002aba <HAL_GPIO_WritePin>
                          |Step1_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Step1_DIR_GPIO_Port, Step1_DIR_Pin, GPIO_PIN_RESET);
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	2104      	movs	r1, #4
 800d1b0:	483b      	ldr	r0, [pc, #236]	; (800d2a0 <MX_GPIO_Init+0x188>)
 800d1b2:	f7f5 fc82 	bl	8002aba <HAL_GPIO_WritePin>

  /*Configure GPIO pins : step2_LowCurrent_Pin Remote_led_Pin uc_Stepper_Sleep_Pin STATUS_LED0_Pin 
                           STATUS_LED1_Pin STATUS_LED2_Pin Step2_DIR_Pin Step1_LowCurrent_Pin 
                           Step2_STEP_Pin Step2_RESET_Pin Step2_ENABLE_Pin */
  GPIO_InitStruct.Pin = step2_LowCurrent_Pin|Remote_led_Pin|uc_Stepper_Sleep_Pin|STATUS_LED0_Pin 
 800d1b6:	f643 73f8 	movw	r3, #16376	; 0x3ff8
 800d1ba:	613b      	str	r3, [r7, #16]
                          |STATUS_LED1_Pin|STATUS_LED2_Pin|Step2_DIR_Pin|Step1_LowCurrent_Pin 
                          |Step2_STEP_Pin|Step2_RESET_Pin|Step2_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d1bc:	2301      	movs	r3, #1
 800d1be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d1c4:	2302      	movs	r3, #2
 800d1c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d1c8:	f107 0310 	add.w	r3, r7, #16
 800d1cc:	4619      	mov	r1, r3
 800d1ce:	4831      	ldr	r0, [pc, #196]	; (800d294 <MX_GPIO_Init+0x17c>)
 800d1d0:	f7f5 f9fc 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LimitSwith1_Pin LimitSwitch2_Pin Remote_BTN_Pin */
  GPIO_InitStruct.Pin = LimitSwith1_Pin|LimitSwitch2_Pin|Remote_BTN_Pin;
 800d1d4:	2307      	movs	r3, #7
 800d1d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d1d8:	2300      	movs	r3, #0
 800d1da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d1e0:	f107 0310 	add.w	r3, r7, #16
 800d1e4:	4619      	mov	r1, r3
 800d1e6:	482b      	ldr	r0, [pc, #172]	; (800d294 <MX_GPIO_Init+0x17c>)
 800d1e8:	f7f5 f9f0 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPEED3_COIL_Pin SPEED2_COIL_Pin SPEED1_COIL_Pin */
  GPIO_InitStruct.Pin = SPEED3_COIL_Pin|SPEED2_COIL_Pin|SPEED1_COIL_Pin;
 800d1ec:	230e      	movs	r3, #14
 800d1ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d1f8:	2302      	movs	r3, #2
 800d1fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d1fc:	f107 0310 	add.w	r3, r7, #16
 800d200:	4619      	mov	r1, r3
 800d202:	4825      	ldr	r0, [pc, #148]	; (800d298 <MX_GPIO_Init+0x180>)
 800d204:	f7f5 f9e2 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pins : Rev_bit1_Pin Rev_bit0_Pin Model_bit0_Pin Model_bit1_Pin 
                           Model_bit2_Pin */
  GPIO_InitStruct.Pin = Rev_bit1_Pin|Rev_bit0_Pin|Model_bit0_Pin|Model_bit1_Pin 
 800d208:	f44f 63e6 	mov.w	r3, #1840	; 0x730
 800d20c:	613b      	str	r3, [r7, #16]
                          |Model_bit2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d20e:	2300      	movs	r3, #0
 800d210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d212:	2300      	movs	r3, #0
 800d214:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d216:	f107 0310 	add.w	r3, r7, #16
 800d21a:	4619      	mov	r1, r3
 800d21c:	481e      	ldr	r0, [pc, #120]	; (800d298 <MX_GPIO_Init+0x180>)
 800d21e:	f7f5 f9d5 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800d222:	2340      	movs	r3, #64	; 0x40
 800d224:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d226:	2303      	movs	r3, #3
 800d228:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d22a:	f107 0310 	add.w	r3, r7, #16
 800d22e:	4619      	mov	r1, r3
 800d230:	4819      	ldr	r0, [pc, #100]	; (800d298 <MX_GPIO_Init+0x180>)
 800d232:	f7f5 f9cb 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_LED_Pin USB_LED_Pin Step1_STEP_Pin Step1_RESET_Pin 
                           Step1_ENABLE_Pin */
  GPIO_InitStruct.Pin = Button_LED_Pin|USB_LED_Pin|Step1_STEP_Pin|Step1_RESET_Pin 
 800d236:	233b      	movs	r3, #59	; 0x3b
 800d238:	613b      	str	r3, [r7, #16]
                          |Step1_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d23a:	2301      	movs	r3, #1
 800d23c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d23e:	2300      	movs	r3, #0
 800d240:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d242:	2302      	movs	r3, #2
 800d244:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d246:	f107 0310 	add.w	r3, r7, #16
 800d24a:	4619      	mov	r1, r3
 800d24c:	4813      	ldr	r0, [pc, #76]	; (800d29c <MX_GPIO_Init+0x184>)
 800d24e:	f7f5 f9bd 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pins : Test_Pin_Pin Thermostat_input_Pin Safety_ON_Pin Interlock_input_Pin 
                           Button_input_Pin USB_Fault_Pin */
  GPIO_InitStruct.Pin = Test_Pin_Pin|Thermostat_input_Pin|Safety_ON_Pin|Interlock_input_Pin 
 800d252:	f247 3304 	movw	r3, #29444	; 0x7304
 800d256:	613b      	str	r3, [r7, #16]
                          |Button_input_Pin|USB_Fault_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d258:	2300      	movs	r3, #0
 800d25a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d25c:	2300      	movs	r3, #0
 800d25e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d260:	f107 0310 	add.w	r3, r7, #16
 800d264:	4619      	mov	r1, r3
 800d266:	480d      	ldr	r0, [pc, #52]	; (800d29c <MX_GPIO_Init+0x184>)
 800d268:	f7f5 f9b0 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pin : Step1_DIR_Pin */
  GPIO_InitStruct.Pin = Step1_DIR_Pin;
 800d26c:	2304      	movs	r3, #4
 800d26e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d270:	2301      	movs	r3, #1
 800d272:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d274:	2300      	movs	r3, #0
 800d276:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d278:	2302      	movs	r3, #2
 800d27a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Step1_DIR_GPIO_Port, &GPIO_InitStruct);
 800d27c:	f107 0310 	add.w	r3, r7, #16
 800d280:	4619      	mov	r1, r3
 800d282:	4807      	ldr	r0, [pc, #28]	; (800d2a0 <MX_GPIO_Init+0x188>)
 800d284:	f7f5 f9a2 	bl	80025cc <HAL_GPIO_Init>

}
 800d288:	bf00      	nop
 800d28a:	3720      	adds	r7, #32
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}
 800d290:	40021000 	.word	0x40021000
 800d294:	40011000 	.word	0x40011000
 800d298:	40010800 	.word	0x40010800
 800d29c:	40010c00 	.word	0x40010c00
 800d2a0:	40011400 	.word	0x40011400

0800d2a4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b082      	sub	sp, #8
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800d2ac:	2001      	movs	r0, #1
 800d2ae:	f7f9 fb04 	bl	80068ba <osDelay>
 800d2b2:	e7fb      	b.n	800d2ac <StartDefaultTask+0x8>

0800d2b4 <TimerCallback>:
  /* USER CODE END 5 */ 
}

/* TimerCallback function */
void TimerCallback(void const * argument)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b082      	sub	sp, #8
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]

  //if(GPIO_PIN_RESET==HAL_GPIO_ReadPin(Button_input_GPIO_Port,Button_input_Pin))
  //{
  //	  Algo_startChargement();
  // }
  osTimerStop(TimerHandle);
 800d2bc:	4b04      	ldr	r3, [pc, #16]	; (800d2d0 <TimerCallback+0x1c>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f7f9 fb43 	bl	800694c <osTimerStop>
  /* USER CODE END TimerCallback */
}
 800d2c6:	bf00      	nop
 800d2c8:	3708      	adds	r7, #8
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}
 800d2ce:	bf00      	nop
 800d2d0:	200031a4 	.word	0x200031a4

0800d2d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	4a04      	ldr	r2, [pc, #16]	; (800d2f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	d101      	bne.n	800d2ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800d2e6:	f7f3 ff8f 	bl	8001208 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800d2ea:	bf00      	nop
 800d2ec:	3708      	adds	r7, #8
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}
 800d2f2:	bf00      	nop
 800d2f4:	40012c00 	.word	0x40012c00

0800d2f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800d2fc:	bf00      	nop
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bc80      	pop	{r7}
 800d302:	4770      	bx	lr

0800d304 <Slope_init>:
  https://www.embeddedrelated.com/showcode/323.php
*/

#include "slope.h"

void Slope_init(Slope * slope, int dataStore[], unsigned int nbDataMax, float samplingRate) {
 800d304:	b480      	push	{r7}
 800d306:	b085      	sub	sp, #20
 800d308:	af00      	add	r7, sp, #0
 800d30a:	60f8      	str	r0, [r7, #12]
 800d30c:	60b9      	str	r1, [r7, #8]
 800d30e:	607a      	str	r2, [r7, #4]
 800d310:	603b      	str	r3, [r7, #0]
  if (sizeof(uint64_t) != 8) {
    // ERROR: the size of int64_t on this platform is not supported.
    while(true) {;}
  }

  slope->dataStore = dataStore;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	68ba      	ldr	r2, [r7, #8]
 800d316:	601a      	str	r2, [r3, #0]
  slope->nbDataMax = nbDataMax;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	687a      	ldr	r2, [r7, #4]
 800d31c:	605a      	str	r2, [r3, #4]
  slope->nbDataInDataStore = 0;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	2200      	movs	r2, #0
 800d322:	609a      	str	r2, [r3, #8]
  slope->dataIndex = 0;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	2200      	movs	r2, #0
 800d328:	60da      	str	r2, [r3, #12]
  slope->samplingRate = samplingRate;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	683a      	ldr	r2, [r7, #0]
 800d32e:	611a      	str	r2, [r3, #16]
}
 800d330:	bf00      	nop
 800d332:	3714      	adds	r7, #20
 800d334:	46bd      	mov	sp, r7
 800d336:	bc80      	pop	{r7}
 800d338:	4770      	bx	lr

0800d33a <Slope_addData>:

void Slope_addData(Slope * slope, int data) {
 800d33a:	b480      	push	{r7}
 800d33c:	b083      	sub	sp, #12
 800d33e:	af00      	add	r7, sp, #0
 800d340:	6078      	str	r0, [r7, #4]
 800d342:	6039      	str	r1, [r7, #0]

  if (slope->nbDataInDataStore < slope->nbDataMax) {
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	689a      	ldr	r2, [r3, #8]
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	685b      	ldr	r3, [r3, #4]
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d204      	bcs.n	800d35a <Slope_addData+0x20>
    slope->nbDataInDataStore++;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	689b      	ldr	r3, [r3, #8]
 800d354:	1c5a      	adds	r2, r3, #1
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	609a      	str	r2, [r3, #8]
  }

  slope->dataStore[slope->dataIndex] = data;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681a      	ldr	r2, [r3, #0]
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	68db      	ldr	r3, [r3, #12]
 800d362:	009b      	lsls	r3, r3, #2
 800d364:	4413      	add	r3, r2
 800d366:	683a      	ldr	r2, [r7, #0]
 800d368:	601a      	str	r2, [r3, #0]
  slope->dataIndex++;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	68db      	ldr	r3, [r3, #12]
 800d36e:	1c5a      	adds	r2, r3, #1
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	60da      	str	r2, [r3, #12]
  if (slope->dataIndex >= slope->nbDataMax) {
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	68da      	ldr	r2, [r3, #12]
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	685b      	ldr	r3, [r3, #4]
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d302      	bcc.n	800d386 <Slope_addData+0x4c>
    slope->dataIndex = 0;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2200      	movs	r2, #0
 800d384:	60da      	str	r2, [r3, #12]
  }
}
 800d386:	bf00      	nop
 800d388:	370c      	adds	r7, #12
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bc80      	pop	{r7}
 800d38e:	4770      	bx	lr

0800d390 <Slope_compute>:

float Slope_compute(Slope * slope, unsigned int nbData) {
 800d390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d394:	b097      	sub	sp, #92	; 0x5c
 800d396:	af00      	add	r7, sp, #0
 800d398:	61f8      	str	r0, [r7, #28]
 800d39a:	61b9      	str	r1, [r7, #24]

  int64_t nbDataToUse;
  int64_t sumX = 0;
 800d39c:	f04f 0200 	mov.w	r2, #0
 800d3a0:	f04f 0300 	mov.w	r3, #0
 800d3a4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  int64_t sumY = 0;
 800d3a8:	f04f 0200 	mov.w	r2, #0
 800d3ac:	f04f 0300 	mov.w	r3, #0
 800d3b0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  int64_t sumXY = 0;
 800d3b4:	f04f 0200 	mov.w	r2, #0
 800d3b8:	f04f 0300 	mov.w	r3, #0
 800d3bc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
   int64_t sumX2 = 0;
 800d3c0:	f04f 0200 	mov.w	r2, #0
 800d3c4:	f04f 0300 	mov.w	r3, #0
 800d3c8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  unsigned int readingIndex;
  float slopeValue;

  if (nbData > slope->nbDataInDataStore) {
 800d3cc:	69fb      	ldr	r3, [r7, #28]
 800d3ce:	689b      	ldr	r3, [r3, #8]
 800d3d0:	69ba      	ldr	r2, [r7, #24]
 800d3d2:	429a      	cmp	r2, r3
 800d3d4:	d907      	bls.n	800d3e6 <Slope_compute+0x56>
    nbDataToUse = slope->nbDataInDataStore;
 800d3d6:	69fb      	ldr	r3, [r7, #28]
 800d3d8:	689b      	ldr	r3, [r3, #8]
 800d3da:	461a      	mov	r2, r3
 800d3dc:	f04f 0300 	mov.w	r3, #0
 800d3e0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 800d3e4:	e005      	b.n	800d3f2 <Slope_compute+0x62>
  } else {
    nbDataToUse = nbData;
 800d3e6:	69bb      	ldr	r3, [r7, #24]
 800d3e8:	461a      	mov	r2, r3
 800d3ea:	f04f 0300 	mov.w	r3, #0
 800d3ee:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  }

  if (slope->dataIndex >= nbDataToUse) {
 800d3f2:	69fb      	ldr	r3, [r7, #28]
 800d3f4:	68db      	ldr	r3, [r3, #12]
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f04f 0100 	mov.w	r1, #0
 800d3fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d400:	4290      	cmp	r0, r2
 800d402:	eb71 0303 	sbcs.w	r3, r1, r3
 800d406:	db05      	blt.n	800d414 <Slope_compute+0x84>
    readingIndex = slope->dataIndex - nbDataToUse;
 800d408:	69fb      	ldr	r3, [r7, #28]
 800d40a:	68da      	ldr	r2, [r3, #12]
 800d40c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d40e:	1ad3      	subs	r3, r2, r3
 800d410:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d412:	e007      	b.n	800d424 <Slope_compute+0x94>
  } else {
    readingIndex = slope->nbDataInDataStore - (nbDataToUse - slope->dataIndex);
 800d414:	69fb      	ldr	r3, [r7, #28]
 800d416:	6899      	ldr	r1, [r3, #8]
 800d418:	69fb      	ldr	r3, [r7, #28]
 800d41a:	68da      	ldr	r2, [r3, #12]
 800d41c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d41e:	1ad3      	subs	r3, r2, r3
 800d420:	440b      	add	r3, r1
 800d422:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (int32_t i = 0; i < nbDataToUse; i++) {
 800d424:	2300      	movs	r3, #0
 800d426:	627b      	str	r3, [r7, #36]	; 0x24
 800d428:	e04c      	b.n	800d4c4 <Slope_compute+0x134>

    sumX += i;
 800d42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d42c:	4618      	mov	r0, r3
 800d42e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800d432:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d436:	1814      	adds	r4, r2, r0
 800d438:	eb43 0501 	adc.w	r5, r3, r1
 800d43c:	e9c7 4512 	strd	r4, r5, [r7, #72]	; 0x48
    sumY += slope->dataStore[readingIndex];
 800d440:	69fb      	ldr	r3, [r7, #28]
 800d442:	681a      	ldr	r2, [r3, #0]
 800d444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d446:	009b      	lsls	r3, r3, #2
 800d448:	4413      	add	r3, r2
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	4618      	mov	r0, r3
 800d44e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800d452:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d456:	eb12 0800 	adds.w	r8, r2, r0
 800d45a:	eb43 0901 	adc.w	r9, r3, r1
 800d45e:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
    sumXY += (i * slope->dataStore[readingIndex]); // ATTENTION: TODO: trouver un moyen de tester si on fait un overflow
 800d462:	69fb      	ldr	r3, [r7, #28]
 800d464:	681a      	ldr	r2, [r3, #0]
 800d466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d468:	009b      	lsls	r3, r3, #2
 800d46a:	4413      	add	r3, r2
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d470:	fb02 f303 	mul.w	r3, r2, r3
 800d474:	4618      	mov	r0, r3
 800d476:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800d47a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d47e:	eb12 0a00 	adds.w	sl, r2, r0
 800d482:	eb43 0b01 	adc.w	fp, r3, r1
 800d486:	e9c7 ab0e 	strd	sl, fp, [r7, #56]	; 0x38
    sumX2 += i * i;
 800d48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d48c:	fb03 f303 	mul.w	r3, r3, r3
 800d490:	4618      	mov	r0, r3
 800d492:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800d496:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d49a:	1816      	adds	r6, r2, r0
 800d49c:	603e      	str	r6, [r7, #0]
 800d49e:	414b      	adcs	r3, r1
 800d4a0:	607b      	str	r3, [r7, #4]
 800d4a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4a6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    readingIndex++;
 800d4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ac:	3301      	adds	r3, #1
 800d4ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (readingIndex >= slope->nbDataInDataStore) {
 800d4b0:	69fb      	ldr	r3, [r7, #28]
 800d4b2:	689b      	ldr	r3, [r3, #8]
 800d4b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	d301      	bcc.n	800d4be <Slope_compute+0x12e>
      readingIndex = 0;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (int32_t i = 0; i < nbDataToUse; i++) {
 800d4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c0:	3301      	adds	r3, #1
 800d4c2:	627b      	str	r3, [r7, #36]	; 0x24
 800d4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800d4cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d4d0:	4290      	cmp	r0, r2
 800d4d2:	eb71 0303 	sbcs.w	r3, r1, r3
 800d4d6:	dba8      	blt.n	800d42a <Slope_compute+0x9a>
    }
  }

  if ((sumX != 0) || (sumX2 != 0)) {
 800d4d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d4dc:	4313      	orrs	r3, r2
 800d4de:	d103      	bne.n	800d4e8 <Slope_compute+0x158>
 800d4e0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d4e4:	4313      	orrs	r3, r2
 800d4e6:	d05d      	beq.n	800d5a4 <Slope_compute+0x214>
    slopeValue = (((sumX * sumY) - (nbDataToUse * sumXY)) * 1.0) / (((sumX * sumX) - (nbDataToUse * sumX2)) * 1.0);
 800d4e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d4ec:	fb02 f203 	mul.w	r2, r2, r3
 800d4f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4f2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d4f4:	fb01 f303 	mul.w	r3, r1, r3
 800d4f8:	4413      	add	r3, r2
 800d4fa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d4fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d4fe:	fba1 0102 	umull	r0, r1, r1, r2
 800d502:	440b      	add	r3, r1
 800d504:	4619      	mov	r1, r3
 800d506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d508:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d50a:	fb02 f203 	mul.w	r2, r2, r3
 800d50e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d510:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 800d512:	fb04 f303 	mul.w	r3, r4, r3
 800d516:	18d4      	adds	r4, r2, r3
 800d518:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d51c:	fba2 2303 	umull	r2, r3, r2, r3
 800d520:	441c      	add	r4, r3
 800d522:	4623      	mov	r3, r4
 800d524:	1a84      	subs	r4, r0, r2
 800d526:	613c      	str	r4, [r7, #16]
 800d528:	eb61 0303 	sbc.w	r3, r1, r3
 800d52c:	617b      	str	r3, [r7, #20]
 800d52e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d532:	f7f3 f80b 	bl	800054c <__aeabi_l2d>
 800d536:	4604      	mov	r4, r0
 800d538:	460d      	mov	r5, r1
 800d53a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d53c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d53e:	fb02 f203 	mul.w	r2, r2, r3
 800d542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d544:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d546:	fb01 f303 	mul.w	r3, r1, r3
 800d54a:	441a      	add	r2, r3
 800d54c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d54e:	fba3 0103 	umull	r0, r1, r3, r3
 800d552:	1853      	adds	r3, r2, r1
 800d554:	4619      	mov	r1, r3
 800d556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d55a:	fb02 f203 	mul.w	r2, r2, r3
 800d55e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d560:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 800d562:	fb06 f303 	mul.w	r3, r6, r3
 800d566:	18d6      	adds	r6, r2, r3
 800d568:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d56c:	fba2 2303 	umull	r2, r3, r2, r3
 800d570:	441e      	add	r6, r3
 800d572:	4633      	mov	r3, r6
 800d574:	1a86      	subs	r6, r0, r2
 800d576:	60be      	str	r6, [r7, #8]
 800d578:	eb61 0303 	sbc.w	r3, r1, r3
 800d57c:	60fb      	str	r3, [r7, #12]
 800d57e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d582:	f7f2 ffe3 	bl	800054c <__aeabi_l2d>
 800d586:	4602      	mov	r2, r0
 800d588:	460b      	mov	r3, r1
 800d58a:	4620      	mov	r0, r4
 800d58c:	4629      	mov	r1, r5
 800d58e:	f7f3 f935 	bl	80007fc <__aeabi_ddiv>
 800d592:	4602      	mov	r2, r0
 800d594:	460b      	mov	r3, r1
 800d596:	4610      	mov	r0, r2
 800d598:	4619      	mov	r1, r3
 800d59a:	f7f3 fab5 	bl	8000b08 <__aeabi_d2f>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800d5a2:	e002      	b.n	800d5aa <Slope_compute+0x21a>
  } else {
    slopeValue = 0.0;
 800d5a4:	f04f 0300 	mov.w	r3, #0
 800d5a8:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  return slopeValue * slope->samplingRate;
 800d5aa:	69fb      	ldr	r3, [r7, #28]
 800d5ac:	691b      	ldr	r3, [r3, #16]
 800d5ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f7f3 fc07 	bl	8000dc4 <__aeabi_fmul>
 800d5b6:	4603      	mov	r3, r0
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	375c      	adds	r7, #92	; 0x5c
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800d5c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b084      	sub	sp, #16
 800d5c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800d5ca:	4b18      	ldr	r3, [pc, #96]	; (800d62c <HAL_MspInit+0x68>)
 800d5cc:	699b      	ldr	r3, [r3, #24]
 800d5ce:	4a17      	ldr	r2, [pc, #92]	; (800d62c <HAL_MspInit+0x68>)
 800d5d0:	f043 0301 	orr.w	r3, r3, #1
 800d5d4:	6193      	str	r3, [r2, #24]
 800d5d6:	4b15      	ldr	r3, [pc, #84]	; (800d62c <HAL_MspInit+0x68>)
 800d5d8:	699b      	ldr	r3, [r3, #24]
 800d5da:	f003 0301 	and.w	r3, r3, #1
 800d5de:	60bb      	str	r3, [r7, #8]
 800d5e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d5e2:	4b12      	ldr	r3, [pc, #72]	; (800d62c <HAL_MspInit+0x68>)
 800d5e4:	69db      	ldr	r3, [r3, #28]
 800d5e6:	4a11      	ldr	r2, [pc, #68]	; (800d62c <HAL_MspInit+0x68>)
 800d5e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d5ec:	61d3      	str	r3, [r2, #28]
 800d5ee:	4b0f      	ldr	r3, [pc, #60]	; (800d62c <HAL_MspInit+0x68>)
 800d5f0:	69db      	ldr	r3, [r3, #28]
 800d5f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d5f6:	607b      	str	r3, [r7, #4]
 800d5f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	210f      	movs	r1, #15
 800d5fe:	f06f 0001 	mvn.w	r0, #1
 800d602:	f7f4 fb56 	bl	8001cb2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800d606:	4b0a      	ldr	r3, [pc, #40]	; (800d630 <HAL_MspInit+0x6c>)
 800d608:	685b      	ldr	r3, [r3, #4]
 800d60a:	60fb      	str	r3, [r7, #12]
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800d612:	60fb      	str	r3, [r7, #12]
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d61a:	60fb      	str	r3, [r7, #12]
 800d61c:	4a04      	ldr	r2, [pc, #16]	; (800d630 <HAL_MspInit+0x6c>)
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d622:	bf00      	nop
 800d624:	3710      	adds	r7, #16
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}
 800d62a:	bf00      	nop
 800d62c:	40021000 	.word	0x40021000
 800d630:	40010000 	.word	0x40010000

0800d634 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b088      	sub	sp, #32
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d63c:	f107 0310 	add.w	r3, r7, #16
 800d640:	2200      	movs	r2, #0
 800d642:	601a      	str	r2, [r3, #0]
 800d644:	605a      	str	r2, [r3, #4]
 800d646:	609a      	str	r2, [r3, #8]
 800d648:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	4a28      	ldr	r2, [pc, #160]	; (800d6f0 <HAL_ADC_MspInit+0xbc>)
 800d650:	4293      	cmp	r3, r2
 800d652:	d149      	bne.n	800d6e8 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800d654:	4b27      	ldr	r3, [pc, #156]	; (800d6f4 <HAL_ADC_MspInit+0xc0>)
 800d656:	699b      	ldr	r3, [r3, #24]
 800d658:	4a26      	ldr	r2, [pc, #152]	; (800d6f4 <HAL_ADC_MspInit+0xc0>)
 800d65a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d65e:	6193      	str	r3, [r2, #24]
 800d660:	4b24      	ldr	r3, [pc, #144]	; (800d6f4 <HAL_ADC_MspInit+0xc0>)
 800d662:	699b      	ldr	r3, [r3, #24]
 800d664:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d668:	60fb      	str	r3, [r7, #12]
 800d66a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d66c:	4b21      	ldr	r3, [pc, #132]	; (800d6f4 <HAL_ADC_MspInit+0xc0>)
 800d66e:	699b      	ldr	r3, [r3, #24]
 800d670:	4a20      	ldr	r2, [pc, #128]	; (800d6f4 <HAL_ADC_MspInit+0xc0>)
 800d672:	f043 0304 	orr.w	r3, r3, #4
 800d676:	6193      	str	r3, [r2, #24]
 800d678:	4b1e      	ldr	r3, [pc, #120]	; (800d6f4 <HAL_ADC_MspInit+0xc0>)
 800d67a:	699b      	ldr	r3, [r3, #24]
 800d67c:	f003 0304 	and.w	r3, r3, #4
 800d680:	60bb      	str	r3, [r7, #8]
 800d682:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800d684:	23c0      	movs	r3, #192	; 0xc0
 800d686:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d688:	2303      	movs	r3, #3
 800d68a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d68c:	f107 0310 	add.w	r3, r7, #16
 800d690:	4619      	mov	r1, r3
 800d692:	4819      	ldr	r0, [pc, #100]	; (800d6f8 <HAL_ADC_MspInit+0xc4>)
 800d694:	f7f4 ff9a 	bl	80025cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800d698:	4b18      	ldr	r3, [pc, #96]	; (800d6fc <HAL_ADC_MspInit+0xc8>)
 800d69a:	4a19      	ldr	r2, [pc, #100]	; (800d700 <HAL_ADC_MspInit+0xcc>)
 800d69c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d69e:	4b17      	ldr	r3, [pc, #92]	; (800d6fc <HAL_ADC_MspInit+0xc8>)
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800d6a4:	4b15      	ldr	r3, [pc, #84]	; (800d6fc <HAL_ADC_MspInit+0xc8>)
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800d6aa:	4b14      	ldr	r3, [pc, #80]	; (800d6fc <HAL_ADC_MspInit+0xc8>)
 800d6ac:	2280      	movs	r2, #128	; 0x80
 800d6ae:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800d6b0:	4b12      	ldr	r3, [pc, #72]	; (800d6fc <HAL_ADC_MspInit+0xc8>)
 800d6b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d6b6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800d6b8:	4b10      	ldr	r3, [pc, #64]	; (800d6fc <HAL_ADC_MspInit+0xc8>)
 800d6ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d6be:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800d6c0:	4b0e      	ldr	r3, [pc, #56]	; (800d6fc <HAL_ADC_MspInit+0xc8>)
 800d6c2:	2220      	movs	r2, #32
 800d6c4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800d6c6:	4b0d      	ldr	r3, [pc, #52]	; (800d6fc <HAL_ADC_MspInit+0xc8>)
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800d6cc:	480b      	ldr	r0, [pc, #44]	; (800d6fc <HAL_ADC_MspInit+0xc8>)
 800d6ce:	f7f4 fb29 	bl	8001d24 <HAL_DMA_Init>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d001      	beq.n	800d6dc <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800d6d8:	f7ff fe0e 	bl	800d2f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	4a07      	ldr	r2, [pc, #28]	; (800d6fc <HAL_ADC_MspInit+0xc8>)
 800d6e0:	621a      	str	r2, [r3, #32]
 800d6e2:	4a06      	ldr	r2, [pc, #24]	; (800d6fc <HAL_ADC_MspInit+0xc8>)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800d6e8:	bf00      	nop
 800d6ea:	3720      	adds	r7, #32
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}
 800d6f0:	40012400 	.word	0x40012400
 800d6f4:	40021000 	.word	0x40021000
 800d6f8:	40010800 	.word	0x40010800
 800d6fc:	200031a8 	.word	0x200031a8
 800d700:	40020008 	.word	0x40020008

0800d704 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b088      	sub	sp, #32
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d70c:	f107 0310 	add.w	r3, r7, #16
 800d710:	2200      	movs	r2, #0
 800d712:	601a      	str	r2, [r3, #0]
 800d714:	605a      	str	r2, [r3, #4]
 800d716:	609a      	str	r2, [r3, #8]
 800d718:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	4a1d      	ldr	r2, [pc, #116]	; (800d794 <HAL_I2C_MspInit+0x90>)
 800d720:	4293      	cmp	r3, r2
 800d722:	d133      	bne.n	800d78c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d724:	4b1c      	ldr	r3, [pc, #112]	; (800d798 <HAL_I2C_MspInit+0x94>)
 800d726:	699b      	ldr	r3, [r3, #24]
 800d728:	4a1b      	ldr	r2, [pc, #108]	; (800d798 <HAL_I2C_MspInit+0x94>)
 800d72a:	f043 0308 	orr.w	r3, r3, #8
 800d72e:	6193      	str	r3, [r2, #24]
 800d730:	4b19      	ldr	r3, [pc, #100]	; (800d798 <HAL_I2C_MspInit+0x94>)
 800d732:	699b      	ldr	r3, [r3, #24]
 800d734:	f003 0308 	and.w	r3, r3, #8
 800d738:	60fb      	str	r3, [r7, #12]
 800d73a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 800d73c:	23c0      	movs	r3, #192	; 0xc0
 800d73e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d740:	2312      	movs	r3, #18
 800d742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d744:	2303      	movs	r3, #3
 800d746:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d748:	f107 0310 	add.w	r3, r7, #16
 800d74c:	4619      	mov	r1, r3
 800d74e:	4813      	ldr	r0, [pc, #76]	; (800d79c <HAL_I2C_MspInit+0x98>)
 800d750:	f7f4 ff3c 	bl	80025cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800d754:	4b10      	ldr	r3, [pc, #64]	; (800d798 <HAL_I2C_MspInit+0x94>)
 800d756:	69db      	ldr	r3, [r3, #28]
 800d758:	4a0f      	ldr	r2, [pc, #60]	; (800d798 <HAL_I2C_MspInit+0x94>)
 800d75a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d75e:	61d3      	str	r3, [r2, #28]
 800d760:	4b0d      	ldr	r3, [pc, #52]	; (800d798 <HAL_I2C_MspInit+0x94>)
 800d762:	69db      	ldr	r3, [r3, #28]
 800d764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d768:	60bb      	str	r3, [r7, #8]
 800d76a:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800d76c:	2200      	movs	r2, #0
 800d76e:	2105      	movs	r1, #5
 800d770:	201f      	movs	r0, #31
 800d772:	f7f4 fa9e 	bl	8001cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800d776:	201f      	movs	r0, #31
 800d778:	f7f4 fab7 	bl	8001cea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800d77c:	2200      	movs	r2, #0
 800d77e:	2105      	movs	r1, #5
 800d780:	2020      	movs	r0, #32
 800d782:	f7f4 fa96 	bl	8001cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800d786:	2020      	movs	r0, #32
 800d788:	f7f4 faaf 	bl	8001cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800d78c:	bf00      	nop
 800d78e:	3720      	adds	r7, #32
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}
 800d794:	40005400 	.word	0x40005400
 800d798:	40021000 	.word	0x40021000
 800d79c:	40010c00 	.word	0x40010c00

0800d7a0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b082      	sub	sp, #8
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	4a0b      	ldr	r2, [pc, #44]	; (800d7dc <HAL_I2C_MspDeInit+0x3c>)
 800d7ae:	4293      	cmp	r3, r2
 800d7b0:	d10f      	bne.n	800d7d2 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800d7b2:	4b0b      	ldr	r3, [pc, #44]	; (800d7e0 <HAL_I2C_MspDeInit+0x40>)
 800d7b4:	69db      	ldr	r3, [r3, #28]
 800d7b6:	4a0a      	ldr	r2, [pc, #40]	; (800d7e0 <HAL_I2C_MspDeInit+0x40>)
 800d7b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d7bc:	61d3      	str	r3, [r2, #28]
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, I2C_SDA_Pin|I2C_SCL_Pin);
 800d7be:	21c0      	movs	r1, #192	; 0xc0
 800d7c0:	4808      	ldr	r0, [pc, #32]	; (800d7e4 <HAL_I2C_MspDeInit+0x44>)
 800d7c2:	f7f5 f897 	bl	80028f4 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800d7c6:	201f      	movs	r0, #31
 800d7c8:	f7f4 fa9d 	bl	8001d06 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 800d7cc:	2020      	movs	r0, #32
 800d7ce:	f7f4 fa9a 	bl	8001d06 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800d7d2:	bf00      	nop
 800d7d4:	3708      	adds	r7, #8
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}
 800d7da:	bf00      	nop
 800d7dc:	40005400 	.word	0x40005400
 800d7e0:	40021000 	.word	0x40021000
 800d7e4:	40010c00 	.word	0x40010c00

0800d7e8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b084      	sub	sp, #16
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	4a0b      	ldr	r2, [pc, #44]	; (800d824 <HAL_RTC_MspInit+0x3c>)
 800d7f6:	4293      	cmp	r3, r2
 800d7f8:	d110      	bne.n	800d81c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800d7fa:	f7f7 f869 	bl	80048d0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800d7fe:	4b0a      	ldr	r3, [pc, #40]	; (800d828 <HAL_RTC_MspInit+0x40>)
 800d800:	69db      	ldr	r3, [r3, #28]
 800d802:	4a09      	ldr	r2, [pc, #36]	; (800d828 <HAL_RTC_MspInit+0x40>)
 800d804:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d808:	61d3      	str	r3, [r2, #28]
 800d80a:	4b07      	ldr	r3, [pc, #28]	; (800d828 <HAL_RTC_MspInit+0x40>)
 800d80c:	69db      	ldr	r3, [r3, #28]
 800d80e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d812:	60fb      	str	r3, [r7, #12]
 800d814:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800d816:	4b05      	ldr	r3, [pc, #20]	; (800d82c <HAL_RTC_MspInit+0x44>)
 800d818:	2201      	movs	r2, #1
 800d81a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800d81c:	bf00      	nop
 800d81e:	3710      	adds	r7, #16
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}
 800d824:	40002800 	.word	0x40002800
 800d828:	40021000 	.word	0x40021000
 800d82c:	4242043c 	.word	0x4242043c

0800d830 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b088      	sub	sp, #32
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d838:	f107 0310 	add.w	r3, r7, #16
 800d83c:	2200      	movs	r2, #0
 800d83e:	601a      	str	r2, [r3, #0]
 800d840:	605a      	str	r2, [r3, #4]
 800d842:	609a      	str	r2, [r3, #8]
 800d844:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	4a1c      	ldr	r2, [pc, #112]	; (800d8bc <HAL_UART_MspInit+0x8c>)
 800d84c:	4293      	cmp	r3, r2
 800d84e:	d131      	bne.n	800d8b4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800d850:	4b1b      	ldr	r3, [pc, #108]	; (800d8c0 <HAL_UART_MspInit+0x90>)
 800d852:	69db      	ldr	r3, [r3, #28]
 800d854:	4a1a      	ldr	r2, [pc, #104]	; (800d8c0 <HAL_UART_MspInit+0x90>)
 800d856:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d85a:	61d3      	str	r3, [r2, #28]
 800d85c:	4b18      	ldr	r3, [pc, #96]	; (800d8c0 <HAL_UART_MspInit+0x90>)
 800d85e:	69db      	ldr	r3, [r3, #28]
 800d860:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d864:	60fb      	str	r3, [r7, #12]
 800d866:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d868:	4b15      	ldr	r3, [pc, #84]	; (800d8c0 <HAL_UART_MspInit+0x90>)
 800d86a:	699b      	ldr	r3, [r3, #24]
 800d86c:	4a14      	ldr	r2, [pc, #80]	; (800d8c0 <HAL_UART_MspInit+0x90>)
 800d86e:	f043 0308 	orr.w	r3, r3, #8
 800d872:	6193      	str	r3, [r2, #24]
 800d874:	4b12      	ldr	r3, [pc, #72]	; (800d8c0 <HAL_UART_MspInit+0x90>)
 800d876:	699b      	ldr	r3, [r3, #24]
 800d878:	f003 0308 	and.w	r3, r3, #8
 800d87c:	60bb      	str	r3, [r7, #8]
 800d87e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800d880:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d884:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d886:	2302      	movs	r3, #2
 800d888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d88a:	2303      	movs	r3, #3
 800d88c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d88e:	f107 0310 	add.w	r3, r7, #16
 800d892:	4619      	mov	r1, r3
 800d894:	480b      	ldr	r0, [pc, #44]	; (800d8c4 <HAL_UART_MspInit+0x94>)
 800d896:	f7f4 fe99 	bl	80025cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800d89a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d89e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d8a8:	f107 0310 	add.w	r3, r7, #16
 800d8ac:	4619      	mov	r1, r3
 800d8ae:	4805      	ldr	r0, [pc, #20]	; (800d8c4 <HAL_UART_MspInit+0x94>)
 800d8b0:	f7f4 fe8c 	bl	80025cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800d8b4:	bf00      	nop
 800d8b6:	3720      	adds	r7, #32
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	40004800 	.word	0x40004800
 800d8c0:	40021000 	.word	0x40021000
 800d8c4:	40010c00 	.word	0x40010c00

0800d8c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b08c      	sub	sp, #48	; 0x30
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 800d8d8:	2200      	movs	r2, #0
 800d8da:	6879      	ldr	r1, [r7, #4]
 800d8dc:	2019      	movs	r0, #25
 800d8de:	f7f4 f9e8 	bl	8001cb2 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 800d8e2:	2019      	movs	r0, #25
 800d8e4:	f7f4 fa01 	bl	8001cea <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800d8e8:	4b1f      	ldr	r3, [pc, #124]	; (800d968 <HAL_InitTick+0xa0>)
 800d8ea:	699b      	ldr	r3, [r3, #24]
 800d8ec:	4a1e      	ldr	r2, [pc, #120]	; (800d968 <HAL_InitTick+0xa0>)
 800d8ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d8f2:	6193      	str	r3, [r2, #24]
 800d8f4:	4b1c      	ldr	r3, [pc, #112]	; (800d968 <HAL_InitTick+0xa0>)
 800d8f6:	699b      	ldr	r3, [r3, #24]
 800d8f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d8fc:	60fb      	str	r3, [r7, #12]
 800d8fe:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800d900:	f107 0210 	add.w	r2, r7, #16
 800d904:	f107 0314 	add.w	r3, r7, #20
 800d908:	4611      	mov	r1, r2
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7f7 fbe8 	bl	80050e0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800d910:	f7f7 fbd2 	bl	80050b8 <HAL_RCC_GetPCLK2Freq>
 800d914:	4603      	mov	r3, r0
 800d916:	005b      	lsls	r3, r3, #1
 800d918:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800d91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d91c:	4a13      	ldr	r2, [pc, #76]	; (800d96c <HAL_InitTick+0xa4>)
 800d91e:	fba2 2303 	umull	r2, r3, r2, r3
 800d922:	0c9b      	lsrs	r3, r3, #18
 800d924:	3b01      	subs	r3, #1
 800d926:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800d928:	4b11      	ldr	r3, [pc, #68]	; (800d970 <HAL_InitTick+0xa8>)
 800d92a:	4a12      	ldr	r2, [pc, #72]	; (800d974 <HAL_InitTick+0xac>)
 800d92c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800d92e:	4b10      	ldr	r3, [pc, #64]	; (800d970 <HAL_InitTick+0xa8>)
 800d930:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d934:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800d936:	4a0e      	ldr	r2, [pc, #56]	; (800d970 <HAL_InitTick+0xa8>)
 800d938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d93a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800d93c:	4b0c      	ldr	r3, [pc, #48]	; (800d970 <HAL_InitTick+0xa8>)
 800d93e:	2200      	movs	r2, #0
 800d940:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d942:	4b0b      	ldr	r3, [pc, #44]	; (800d970 <HAL_InitTick+0xa8>)
 800d944:	2200      	movs	r2, #0
 800d946:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800d948:	4809      	ldr	r0, [pc, #36]	; (800d970 <HAL_InitTick+0xa8>)
 800d94a:	f7f8 fb11 	bl	8005f70 <HAL_TIM_Base_Init>
 800d94e:	4603      	mov	r3, r0
 800d950:	2b00      	cmp	r3, #0
 800d952:	d104      	bne.n	800d95e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800d954:	4806      	ldr	r0, [pc, #24]	; (800d970 <HAL_InitTick+0xa8>)
 800d956:	f7f8 fb3f 	bl	8005fd8 <HAL_TIM_Base_Start_IT>
 800d95a:	4603      	mov	r3, r0
 800d95c:	e000      	b.n	800d960 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800d95e:	2301      	movs	r3, #1
}
 800d960:	4618      	mov	r0, r3
 800d962:	3730      	adds	r7, #48	; 0x30
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}
 800d968:	40021000 	.word	0x40021000
 800d96c:	431bde83 	.word	0x431bde83
 800d970:	20003204 	.word	0x20003204
 800d974:	40012c00 	.word	0x40012c00

0800d978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d978:	b480      	push	{r7}
 800d97a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800d97c:	bf00      	nop
 800d97e:	46bd      	mov	sp, r7
 800d980:	bc80      	pop	{r7}
 800d982:	4770      	bx	lr

0800d984 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d984:	b480      	push	{r7}
 800d986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d988:	e7fe      	b.n	800d988 <HardFault_Handler+0x4>

0800d98a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d98a:	b480      	push	{r7}
 800d98c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d98e:	e7fe      	b.n	800d98e <MemManage_Handler+0x4>

0800d990 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d990:	b480      	push	{r7}
 800d992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d994:	e7fe      	b.n	800d994 <BusFault_Handler+0x4>

0800d996 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d996:	b480      	push	{r7}
 800d998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d99a:	e7fe      	b.n	800d99a <UsageFault_Handler+0x4>

0800d99c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d99c:	b480      	push	{r7}
 800d99e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d9a0:	bf00      	nop
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bc80      	pop	{r7}
 800d9a6:	4770      	bx	lr

0800d9a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800d9ac:	4802      	ldr	r0, [pc, #8]	; (800d9b8 <DMA1_Channel1_IRQHandler+0x10>)
 800d9ae:	f7f4 fb97 	bl	80020e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800d9b2:	bf00      	nop
 800d9b4:	bd80      	pop	{r7, pc}
 800d9b6:	bf00      	nop
 800d9b8:	200031a8 	.word	0x200031a8

0800d9bc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800d9c0:	4802      	ldr	r0, [pc, #8]	; (800d9cc <TIM1_UP_IRQHandler+0x10>)
 800d9c2:	f7f8 fb2c 	bl	800601e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800d9c6:	bf00      	nop
 800d9c8:	bd80      	pop	{r7, pc}
 800d9ca:	bf00      	nop
 800d9cc:	20003204 	.word	0x20003204

0800d9d0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800d9d4:	4802      	ldr	r0, [pc, #8]	; (800d9e0 <I2C1_EV_IRQHandler+0x10>)
 800d9d6:	f7f5 fba5 	bl	8003124 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800d9da:	bf00      	nop
 800d9dc:	bd80      	pop	{r7, pc}
 800d9de:	bf00      	nop
 800d9e0:	200030f4 	.word	0x200030f4

0800d9e4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800d9e8:	4802      	ldr	r0, [pc, #8]	; (800d9f4 <I2C1_ER_IRQHandler+0x10>)
 800d9ea:	f7f5 fd27 	bl	800343c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800d9ee:	bf00      	nop
 800d9f0:	bd80      	pop	{r7, pc}
 800d9f2:	bf00      	nop
 800d9f4:	200030f4 	.word	0x200030f4

0800d9f8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b086      	sub	sp, #24
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	60f8      	str	r0, [r7, #12]
 800da00:	60b9      	str	r1, [r7, #8]
 800da02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800da04:	2300      	movs	r3, #0
 800da06:	617b      	str	r3, [r7, #20]
 800da08:	e00a      	b.n	800da20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800da0a:	f3af 8000 	nop.w
 800da0e:	4601      	mov	r1, r0
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	1c5a      	adds	r2, r3, #1
 800da14:	60ba      	str	r2, [r7, #8]
 800da16:	b2ca      	uxtb	r2, r1
 800da18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	3301      	adds	r3, #1
 800da1e:	617b      	str	r3, [r7, #20]
 800da20:	697a      	ldr	r2, [r7, #20]
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	429a      	cmp	r2, r3
 800da26:	dbf0      	blt.n	800da0a <_read+0x12>
	}

return len;
 800da28:	687b      	ldr	r3, [r7, #4]
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	3718      	adds	r7, #24
 800da2e:	46bd      	mov	sp, r7
 800da30:	bd80      	pop	{r7, pc}

0800da32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800da32:	b580      	push	{r7, lr}
 800da34:	b086      	sub	sp, #24
 800da36:	af00      	add	r7, sp, #0
 800da38:	60f8      	str	r0, [r7, #12]
 800da3a:	60b9      	str	r1, [r7, #8]
 800da3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800da3e:	2300      	movs	r3, #0
 800da40:	617b      	str	r3, [r7, #20]
 800da42:	e009      	b.n	800da58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	1c5a      	adds	r2, r3, #1
 800da48:	60ba      	str	r2, [r7, #8]
 800da4a:	781b      	ldrb	r3, [r3, #0]
 800da4c:	4618      	mov	r0, r3
 800da4e:	f7fc fa09 	bl	8009e64 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	3301      	adds	r3, #1
 800da56:	617b      	str	r3, [r7, #20]
 800da58:	697a      	ldr	r2, [r7, #20]
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	429a      	cmp	r2, r3
 800da5e:	dbf1      	blt.n	800da44 <_write+0x12>
	}
	return len;
 800da60:	687b      	ldr	r3, [r7, #4]
}
 800da62:	4618      	mov	r0, r3
 800da64:	3718      	adds	r7, #24
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}
	...

0800da6c <_sbrk>:

caddr_t _sbrk(int incr)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b084      	sub	sp, #16
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800da74:	4b11      	ldr	r3, [pc, #68]	; (800dabc <_sbrk+0x50>)
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d102      	bne.n	800da82 <_sbrk+0x16>
		heap_end = &end;
 800da7c:	4b0f      	ldr	r3, [pc, #60]	; (800dabc <_sbrk+0x50>)
 800da7e:	4a10      	ldr	r2, [pc, #64]	; (800dac0 <_sbrk+0x54>)
 800da80:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800da82:	4b0e      	ldr	r3, [pc, #56]	; (800dabc <_sbrk+0x50>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800da88:	4b0c      	ldr	r3, [pc, #48]	; (800dabc <_sbrk+0x50>)
 800da8a:	681a      	ldr	r2, [r3, #0]
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	4413      	add	r3, r2
 800da90:	466a      	mov	r2, sp
 800da92:	4293      	cmp	r3, r2
 800da94:	d907      	bls.n	800daa6 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800da96:	f000 f89f 	bl	800dbd8 <__errno>
 800da9a:	4603      	mov	r3, r0
 800da9c:	220c      	movs	r2, #12
 800da9e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800daa0:	f04f 33ff 	mov.w	r3, #4294967295
 800daa4:	e006      	b.n	800dab4 <_sbrk+0x48>
	}

	heap_end += incr;
 800daa6:	4b05      	ldr	r3, [pc, #20]	; (800dabc <_sbrk+0x50>)
 800daa8:	681a      	ldr	r2, [r3, #0]
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	4413      	add	r3, r2
 800daae:	4a03      	ldr	r2, [pc, #12]	; (800dabc <_sbrk+0x50>)
 800dab0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800dab2:	68fb      	ldr	r3, [r7, #12]
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	3710      	adds	r7, #16
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}
 800dabc:	2000301c 	.word	0x2000301c
 800dac0:	20003254 	.word	0x20003254

0800dac4 <_close>:

int _close(int file)
{
 800dac4:	b480      	push	{r7}
 800dac6:	b083      	sub	sp, #12
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
	return -1;
 800dacc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dad0:	4618      	mov	r0, r3
 800dad2:	370c      	adds	r7, #12
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bc80      	pop	{r7}
 800dad8:	4770      	bx	lr

0800dada <_fstat>:


int _fstat(int file, struct stat *st)
{
 800dada:	b480      	push	{r7}
 800dadc:	b083      	sub	sp, #12
 800dade:	af00      	add	r7, sp, #0
 800dae0:	6078      	str	r0, [r7, #4]
 800dae2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800daea:	605a      	str	r2, [r3, #4]
	return 0;
 800daec:	2300      	movs	r3, #0
}
 800daee:	4618      	mov	r0, r3
 800daf0:	370c      	adds	r7, #12
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bc80      	pop	{r7}
 800daf6:	4770      	bx	lr

0800daf8 <_isatty>:

int _isatty(int file)
{
 800daf8:	b480      	push	{r7}
 800dafa:	b083      	sub	sp, #12
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
	return 1;
 800db00:	2301      	movs	r3, #1
}
 800db02:	4618      	mov	r0, r3
 800db04:	370c      	adds	r7, #12
 800db06:	46bd      	mov	sp, r7
 800db08:	bc80      	pop	{r7}
 800db0a:	4770      	bx	lr

0800db0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800db0c:	b480      	push	{r7}
 800db0e:	b085      	sub	sp, #20
 800db10:	af00      	add	r7, sp, #0
 800db12:	60f8      	str	r0, [r7, #12]
 800db14:	60b9      	str	r1, [r7, #8]
 800db16:	607a      	str	r2, [r7, #4]
	return 0;
 800db18:	2300      	movs	r3, #0
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3714      	adds	r7, #20
 800db1e:	46bd      	mov	sp, r7
 800db20:	bc80      	pop	{r7}
 800db22:	4770      	bx	lr

0800db24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800db24:	b480      	push	{r7}
 800db26:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800db28:	4b15      	ldr	r3, [pc, #84]	; (800db80 <SystemInit+0x5c>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	4a14      	ldr	r2, [pc, #80]	; (800db80 <SystemInit+0x5c>)
 800db2e:	f043 0301 	orr.w	r3, r3, #1
 800db32:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800db34:	4b12      	ldr	r3, [pc, #72]	; (800db80 <SystemInit+0x5c>)
 800db36:	685a      	ldr	r2, [r3, #4]
 800db38:	4911      	ldr	r1, [pc, #68]	; (800db80 <SystemInit+0x5c>)
 800db3a:	4b12      	ldr	r3, [pc, #72]	; (800db84 <SystemInit+0x60>)
 800db3c:	4013      	ands	r3, r2
 800db3e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800db40:	4b0f      	ldr	r3, [pc, #60]	; (800db80 <SystemInit+0x5c>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	4a0e      	ldr	r2, [pc, #56]	; (800db80 <SystemInit+0x5c>)
 800db46:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800db4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800db4e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800db50:	4b0b      	ldr	r3, [pc, #44]	; (800db80 <SystemInit+0x5c>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	4a0a      	ldr	r2, [pc, #40]	; (800db80 <SystemInit+0x5c>)
 800db56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800db5a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800db5c:	4b08      	ldr	r3, [pc, #32]	; (800db80 <SystemInit+0x5c>)
 800db5e:	685b      	ldr	r3, [r3, #4]
 800db60:	4a07      	ldr	r2, [pc, #28]	; (800db80 <SystemInit+0x5c>)
 800db62:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800db66:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800db68:	4b05      	ldr	r3, [pc, #20]	; (800db80 <SystemInit+0x5c>)
 800db6a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800db6e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800db70:	4b05      	ldr	r3, [pc, #20]	; (800db88 <SystemInit+0x64>)
 800db72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800db76:	609a      	str	r2, [r3, #8]
#endif 
}
 800db78:	bf00      	nop
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bc80      	pop	{r7}
 800db7e:	4770      	bx	lr
 800db80:	40021000 	.word	0x40021000
 800db84:	f8ff0000 	.word	0xf8ff0000
 800db88:	e000ed00 	.word	0xe000ed00

0800db8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800db8c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800db8e:	e003      	b.n	800db98 <LoopCopyDataInit>

0800db90 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800db90:	4b0b      	ldr	r3, [pc, #44]	; (800dbc0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800db92:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800db94:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800db96:	3104      	adds	r1, #4

0800db98 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800db98:	480a      	ldr	r0, [pc, #40]	; (800dbc4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800db9a:	4b0b      	ldr	r3, [pc, #44]	; (800dbc8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800db9c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800db9e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800dba0:	d3f6      	bcc.n	800db90 <CopyDataInit>
  ldr r2, =_sbss
 800dba2:	4a0a      	ldr	r2, [pc, #40]	; (800dbcc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800dba4:	e002      	b.n	800dbac <LoopFillZerobss>

0800dba6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800dba6:	2300      	movs	r3, #0
  str r3, [r2], #4
 800dba8:	f842 3b04 	str.w	r3, [r2], #4

0800dbac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800dbac:	4b08      	ldr	r3, [pc, #32]	; (800dbd0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800dbae:	429a      	cmp	r2, r3
  bcc FillZerobss
 800dbb0:	d3f9      	bcc.n	800dba6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800dbb2:	f7ff ffb7 	bl	800db24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800dbb6:	f000 f815 	bl	800dbe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800dbba:	f7fe ff0b 	bl	800c9d4 <main>
  bx lr
 800dbbe:	4770      	bx	lr
  ldr r3, =_sidata
 800dbc0:	0800ffc0 	.word	0x0800ffc0
  ldr r0, =_sdata
 800dbc4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800dbc8:	200000a8 	.word	0x200000a8
  ldr r2, =_sbss
 800dbcc:	200000a8 	.word	0x200000a8
  ldr r3, = _ebss
 800dbd0:	20003254 	.word	0x20003254

0800dbd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800dbd4:	e7fe      	b.n	800dbd4 <ADC1_2_IRQHandler>
	...

0800dbd8 <__errno>:
 800dbd8:	4b01      	ldr	r3, [pc, #4]	; (800dbe0 <__errno+0x8>)
 800dbda:	6818      	ldr	r0, [r3, #0]
 800dbdc:	4770      	bx	lr
 800dbde:	bf00      	nop
 800dbe0:	20000040 	.word	0x20000040

0800dbe4 <__libc_init_array>:
 800dbe4:	b570      	push	{r4, r5, r6, lr}
 800dbe6:	2600      	movs	r6, #0
 800dbe8:	4d0c      	ldr	r5, [pc, #48]	; (800dc1c <__libc_init_array+0x38>)
 800dbea:	4c0d      	ldr	r4, [pc, #52]	; (800dc20 <__libc_init_array+0x3c>)
 800dbec:	1b64      	subs	r4, r4, r5
 800dbee:	10a4      	asrs	r4, r4, #2
 800dbf0:	42a6      	cmp	r6, r4
 800dbf2:	d109      	bne.n	800dc08 <__libc_init_array+0x24>
 800dbf4:	f001 ff7a 	bl	800faec <_init>
 800dbf8:	2600      	movs	r6, #0
 800dbfa:	4d0a      	ldr	r5, [pc, #40]	; (800dc24 <__libc_init_array+0x40>)
 800dbfc:	4c0a      	ldr	r4, [pc, #40]	; (800dc28 <__libc_init_array+0x44>)
 800dbfe:	1b64      	subs	r4, r4, r5
 800dc00:	10a4      	asrs	r4, r4, #2
 800dc02:	42a6      	cmp	r6, r4
 800dc04:	d105      	bne.n	800dc12 <__libc_init_array+0x2e>
 800dc06:	bd70      	pop	{r4, r5, r6, pc}
 800dc08:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc0c:	4798      	blx	r3
 800dc0e:	3601      	adds	r6, #1
 800dc10:	e7ee      	b.n	800dbf0 <__libc_init_array+0xc>
 800dc12:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc16:	4798      	blx	r3
 800dc18:	3601      	adds	r6, #1
 800dc1a:	e7f2      	b.n	800dc02 <__libc_init_array+0x1e>
 800dc1c:	0800ffb8 	.word	0x0800ffb8
 800dc20:	0800ffb8 	.word	0x0800ffb8
 800dc24:	0800ffb8 	.word	0x0800ffb8
 800dc28:	0800ffbc 	.word	0x0800ffbc

0800dc2c <memcpy>:
 800dc2c:	440a      	add	r2, r1
 800dc2e:	4291      	cmp	r1, r2
 800dc30:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc34:	d100      	bne.n	800dc38 <memcpy+0xc>
 800dc36:	4770      	bx	lr
 800dc38:	b510      	push	{r4, lr}
 800dc3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc3e:	4291      	cmp	r1, r2
 800dc40:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc44:	d1f9      	bne.n	800dc3a <memcpy+0xe>
 800dc46:	bd10      	pop	{r4, pc}

0800dc48 <memset>:
 800dc48:	4603      	mov	r3, r0
 800dc4a:	4402      	add	r2, r0
 800dc4c:	4293      	cmp	r3, r2
 800dc4e:	d100      	bne.n	800dc52 <memset+0xa>
 800dc50:	4770      	bx	lr
 800dc52:	f803 1b01 	strb.w	r1, [r3], #1
 800dc56:	e7f9      	b.n	800dc4c <memset+0x4>

0800dc58 <iprintf>:
 800dc58:	b40f      	push	{r0, r1, r2, r3}
 800dc5a:	4b0a      	ldr	r3, [pc, #40]	; (800dc84 <iprintf+0x2c>)
 800dc5c:	b513      	push	{r0, r1, r4, lr}
 800dc5e:	681c      	ldr	r4, [r3, #0]
 800dc60:	b124      	cbz	r4, 800dc6c <iprintf+0x14>
 800dc62:	69a3      	ldr	r3, [r4, #24]
 800dc64:	b913      	cbnz	r3, 800dc6c <iprintf+0x14>
 800dc66:	4620      	mov	r0, r4
 800dc68:	f000 f87a 	bl	800dd60 <__sinit>
 800dc6c:	ab05      	add	r3, sp, #20
 800dc6e:	4620      	mov	r0, r4
 800dc70:	9a04      	ldr	r2, [sp, #16]
 800dc72:	68a1      	ldr	r1, [r4, #8]
 800dc74:	9301      	str	r3, [sp, #4]
 800dc76:	f000 f995 	bl	800dfa4 <_vfiprintf_r>
 800dc7a:	b002      	add	sp, #8
 800dc7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc80:	b004      	add	sp, #16
 800dc82:	4770      	bx	lr
 800dc84:	20000040 	.word	0x20000040

0800dc88 <putchar>:
 800dc88:	b538      	push	{r3, r4, r5, lr}
 800dc8a:	4b08      	ldr	r3, [pc, #32]	; (800dcac <putchar+0x24>)
 800dc8c:	4605      	mov	r5, r0
 800dc8e:	681c      	ldr	r4, [r3, #0]
 800dc90:	b124      	cbz	r4, 800dc9c <putchar+0x14>
 800dc92:	69a3      	ldr	r3, [r4, #24]
 800dc94:	b913      	cbnz	r3, 800dc9c <putchar+0x14>
 800dc96:	4620      	mov	r0, r4
 800dc98:	f000 f862 	bl	800dd60 <__sinit>
 800dc9c:	4629      	mov	r1, r5
 800dc9e:	4620      	mov	r0, r4
 800dca0:	68a2      	ldr	r2, [r4, #8]
 800dca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dca6:	f000 bc43 	b.w	800e530 <_putc_r>
 800dcaa:	bf00      	nop
 800dcac:	20000040 	.word	0x20000040

0800dcb0 <std>:
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	b510      	push	{r4, lr}
 800dcb4:	4604      	mov	r4, r0
 800dcb6:	e9c0 3300 	strd	r3, r3, [r0]
 800dcba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dcbe:	6083      	str	r3, [r0, #8]
 800dcc0:	8181      	strh	r1, [r0, #12]
 800dcc2:	6643      	str	r3, [r0, #100]	; 0x64
 800dcc4:	81c2      	strh	r2, [r0, #14]
 800dcc6:	6183      	str	r3, [r0, #24]
 800dcc8:	4619      	mov	r1, r3
 800dcca:	2208      	movs	r2, #8
 800dccc:	305c      	adds	r0, #92	; 0x5c
 800dcce:	f7ff ffbb 	bl	800dc48 <memset>
 800dcd2:	4b05      	ldr	r3, [pc, #20]	; (800dce8 <std+0x38>)
 800dcd4:	6224      	str	r4, [r4, #32]
 800dcd6:	6263      	str	r3, [r4, #36]	; 0x24
 800dcd8:	4b04      	ldr	r3, [pc, #16]	; (800dcec <std+0x3c>)
 800dcda:	62a3      	str	r3, [r4, #40]	; 0x28
 800dcdc:	4b04      	ldr	r3, [pc, #16]	; (800dcf0 <std+0x40>)
 800dcde:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dce0:	4b04      	ldr	r3, [pc, #16]	; (800dcf4 <std+0x44>)
 800dce2:	6323      	str	r3, [r4, #48]	; 0x30
 800dce4:	bd10      	pop	{r4, pc}
 800dce6:	bf00      	nop
 800dce8:	0800e5e1 	.word	0x0800e5e1
 800dcec:	0800e603 	.word	0x0800e603
 800dcf0:	0800e63b 	.word	0x0800e63b
 800dcf4:	0800e65f 	.word	0x0800e65f

0800dcf8 <_cleanup_r>:
 800dcf8:	4901      	ldr	r1, [pc, #4]	; (800dd00 <_cleanup_r+0x8>)
 800dcfa:	f000 b8af 	b.w	800de5c <_fwalk_reent>
 800dcfe:	bf00      	nop
 800dd00:	0800e939 	.word	0x0800e939

0800dd04 <__sfmoreglue>:
 800dd04:	b570      	push	{r4, r5, r6, lr}
 800dd06:	2568      	movs	r5, #104	; 0x68
 800dd08:	1e4a      	subs	r2, r1, #1
 800dd0a:	4355      	muls	r5, r2
 800dd0c:	460e      	mov	r6, r1
 800dd0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dd12:	f000 f8c5 	bl	800dea0 <_malloc_r>
 800dd16:	4604      	mov	r4, r0
 800dd18:	b140      	cbz	r0, 800dd2c <__sfmoreglue+0x28>
 800dd1a:	2100      	movs	r1, #0
 800dd1c:	e9c0 1600 	strd	r1, r6, [r0]
 800dd20:	300c      	adds	r0, #12
 800dd22:	60a0      	str	r0, [r4, #8]
 800dd24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dd28:	f7ff ff8e 	bl	800dc48 <memset>
 800dd2c:	4620      	mov	r0, r4
 800dd2e:	bd70      	pop	{r4, r5, r6, pc}

0800dd30 <__sfp_lock_acquire>:
 800dd30:	4801      	ldr	r0, [pc, #4]	; (800dd38 <__sfp_lock_acquire+0x8>)
 800dd32:	f000 b8b3 	b.w	800de9c <__retarget_lock_acquire_recursive>
 800dd36:	bf00      	nop
 800dd38:	2000324c 	.word	0x2000324c

0800dd3c <__sfp_lock_release>:
 800dd3c:	4801      	ldr	r0, [pc, #4]	; (800dd44 <__sfp_lock_release+0x8>)
 800dd3e:	f000 b8ae 	b.w	800de9e <__retarget_lock_release_recursive>
 800dd42:	bf00      	nop
 800dd44:	2000324c 	.word	0x2000324c

0800dd48 <__sinit_lock_acquire>:
 800dd48:	4801      	ldr	r0, [pc, #4]	; (800dd50 <__sinit_lock_acquire+0x8>)
 800dd4a:	f000 b8a7 	b.w	800de9c <__retarget_lock_acquire_recursive>
 800dd4e:	bf00      	nop
 800dd50:	20003247 	.word	0x20003247

0800dd54 <__sinit_lock_release>:
 800dd54:	4801      	ldr	r0, [pc, #4]	; (800dd5c <__sinit_lock_release+0x8>)
 800dd56:	f000 b8a2 	b.w	800de9e <__retarget_lock_release_recursive>
 800dd5a:	bf00      	nop
 800dd5c:	20003247 	.word	0x20003247

0800dd60 <__sinit>:
 800dd60:	b510      	push	{r4, lr}
 800dd62:	4604      	mov	r4, r0
 800dd64:	f7ff fff0 	bl	800dd48 <__sinit_lock_acquire>
 800dd68:	69a3      	ldr	r3, [r4, #24]
 800dd6a:	b11b      	cbz	r3, 800dd74 <__sinit+0x14>
 800dd6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd70:	f7ff bff0 	b.w	800dd54 <__sinit_lock_release>
 800dd74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dd78:	6523      	str	r3, [r4, #80]	; 0x50
 800dd7a:	4b13      	ldr	r3, [pc, #76]	; (800ddc8 <__sinit+0x68>)
 800dd7c:	4a13      	ldr	r2, [pc, #76]	; (800ddcc <__sinit+0x6c>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	62a2      	str	r2, [r4, #40]	; 0x28
 800dd82:	42a3      	cmp	r3, r4
 800dd84:	bf08      	it	eq
 800dd86:	2301      	moveq	r3, #1
 800dd88:	4620      	mov	r0, r4
 800dd8a:	bf08      	it	eq
 800dd8c:	61a3      	streq	r3, [r4, #24]
 800dd8e:	f000 f81f 	bl	800ddd0 <__sfp>
 800dd92:	6060      	str	r0, [r4, #4]
 800dd94:	4620      	mov	r0, r4
 800dd96:	f000 f81b 	bl	800ddd0 <__sfp>
 800dd9a:	60a0      	str	r0, [r4, #8]
 800dd9c:	4620      	mov	r0, r4
 800dd9e:	f000 f817 	bl	800ddd0 <__sfp>
 800dda2:	2200      	movs	r2, #0
 800dda4:	2104      	movs	r1, #4
 800dda6:	60e0      	str	r0, [r4, #12]
 800dda8:	6860      	ldr	r0, [r4, #4]
 800ddaa:	f7ff ff81 	bl	800dcb0 <std>
 800ddae:	2201      	movs	r2, #1
 800ddb0:	2109      	movs	r1, #9
 800ddb2:	68a0      	ldr	r0, [r4, #8]
 800ddb4:	f7ff ff7c 	bl	800dcb0 <std>
 800ddb8:	2202      	movs	r2, #2
 800ddba:	2112      	movs	r1, #18
 800ddbc:	68e0      	ldr	r0, [r4, #12]
 800ddbe:	f7ff ff77 	bl	800dcb0 <std>
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	61a3      	str	r3, [r4, #24]
 800ddc6:	e7d1      	b.n	800dd6c <__sinit+0xc>
 800ddc8:	0800fee0 	.word	0x0800fee0
 800ddcc:	0800dcf9 	.word	0x0800dcf9

0800ddd0 <__sfp>:
 800ddd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddd2:	4607      	mov	r7, r0
 800ddd4:	f7ff ffac 	bl	800dd30 <__sfp_lock_acquire>
 800ddd8:	4b1e      	ldr	r3, [pc, #120]	; (800de54 <__sfp+0x84>)
 800ddda:	681e      	ldr	r6, [r3, #0]
 800dddc:	69b3      	ldr	r3, [r6, #24]
 800ddde:	b913      	cbnz	r3, 800dde6 <__sfp+0x16>
 800dde0:	4630      	mov	r0, r6
 800dde2:	f7ff ffbd 	bl	800dd60 <__sinit>
 800dde6:	3648      	adds	r6, #72	; 0x48
 800dde8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ddec:	3b01      	subs	r3, #1
 800ddee:	d503      	bpl.n	800ddf8 <__sfp+0x28>
 800ddf0:	6833      	ldr	r3, [r6, #0]
 800ddf2:	b30b      	cbz	r3, 800de38 <__sfp+0x68>
 800ddf4:	6836      	ldr	r6, [r6, #0]
 800ddf6:	e7f7      	b.n	800dde8 <__sfp+0x18>
 800ddf8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ddfc:	b9d5      	cbnz	r5, 800de34 <__sfp+0x64>
 800ddfe:	4b16      	ldr	r3, [pc, #88]	; (800de58 <__sfp+0x88>)
 800de00:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800de04:	60e3      	str	r3, [r4, #12]
 800de06:	6665      	str	r5, [r4, #100]	; 0x64
 800de08:	f000 f847 	bl	800de9a <__retarget_lock_init_recursive>
 800de0c:	f7ff ff96 	bl	800dd3c <__sfp_lock_release>
 800de10:	2208      	movs	r2, #8
 800de12:	4629      	mov	r1, r5
 800de14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800de18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800de1c:	6025      	str	r5, [r4, #0]
 800de1e:	61a5      	str	r5, [r4, #24]
 800de20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800de24:	f7ff ff10 	bl	800dc48 <memset>
 800de28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800de2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800de30:	4620      	mov	r0, r4
 800de32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de34:	3468      	adds	r4, #104	; 0x68
 800de36:	e7d9      	b.n	800ddec <__sfp+0x1c>
 800de38:	2104      	movs	r1, #4
 800de3a:	4638      	mov	r0, r7
 800de3c:	f7ff ff62 	bl	800dd04 <__sfmoreglue>
 800de40:	4604      	mov	r4, r0
 800de42:	6030      	str	r0, [r6, #0]
 800de44:	2800      	cmp	r0, #0
 800de46:	d1d5      	bne.n	800ddf4 <__sfp+0x24>
 800de48:	f7ff ff78 	bl	800dd3c <__sfp_lock_release>
 800de4c:	230c      	movs	r3, #12
 800de4e:	603b      	str	r3, [r7, #0]
 800de50:	e7ee      	b.n	800de30 <__sfp+0x60>
 800de52:	bf00      	nop
 800de54:	0800fee0 	.word	0x0800fee0
 800de58:	ffff0001 	.word	0xffff0001

0800de5c <_fwalk_reent>:
 800de5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de60:	4606      	mov	r6, r0
 800de62:	4688      	mov	r8, r1
 800de64:	2700      	movs	r7, #0
 800de66:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800de6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800de6e:	f1b9 0901 	subs.w	r9, r9, #1
 800de72:	d505      	bpl.n	800de80 <_fwalk_reent+0x24>
 800de74:	6824      	ldr	r4, [r4, #0]
 800de76:	2c00      	cmp	r4, #0
 800de78:	d1f7      	bne.n	800de6a <_fwalk_reent+0xe>
 800de7a:	4638      	mov	r0, r7
 800de7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de80:	89ab      	ldrh	r3, [r5, #12]
 800de82:	2b01      	cmp	r3, #1
 800de84:	d907      	bls.n	800de96 <_fwalk_reent+0x3a>
 800de86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800de8a:	3301      	adds	r3, #1
 800de8c:	d003      	beq.n	800de96 <_fwalk_reent+0x3a>
 800de8e:	4629      	mov	r1, r5
 800de90:	4630      	mov	r0, r6
 800de92:	47c0      	blx	r8
 800de94:	4307      	orrs	r7, r0
 800de96:	3568      	adds	r5, #104	; 0x68
 800de98:	e7e9      	b.n	800de6e <_fwalk_reent+0x12>

0800de9a <__retarget_lock_init_recursive>:
 800de9a:	4770      	bx	lr

0800de9c <__retarget_lock_acquire_recursive>:
 800de9c:	4770      	bx	lr

0800de9e <__retarget_lock_release_recursive>:
 800de9e:	4770      	bx	lr

0800dea0 <_malloc_r>:
 800dea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dea2:	1ccd      	adds	r5, r1, #3
 800dea4:	f025 0503 	bic.w	r5, r5, #3
 800dea8:	3508      	adds	r5, #8
 800deaa:	2d0c      	cmp	r5, #12
 800deac:	bf38      	it	cc
 800deae:	250c      	movcc	r5, #12
 800deb0:	2d00      	cmp	r5, #0
 800deb2:	4606      	mov	r6, r0
 800deb4:	db01      	blt.n	800deba <_malloc_r+0x1a>
 800deb6:	42a9      	cmp	r1, r5
 800deb8:	d903      	bls.n	800dec2 <_malloc_r+0x22>
 800deba:	230c      	movs	r3, #12
 800debc:	6033      	str	r3, [r6, #0]
 800debe:	2000      	movs	r0, #0
 800dec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dec2:	f000 fdf9 	bl	800eab8 <__malloc_lock>
 800dec6:	4921      	ldr	r1, [pc, #132]	; (800df4c <_malloc_r+0xac>)
 800dec8:	680a      	ldr	r2, [r1, #0]
 800deca:	4614      	mov	r4, r2
 800decc:	b99c      	cbnz	r4, 800def6 <_malloc_r+0x56>
 800dece:	4f20      	ldr	r7, [pc, #128]	; (800df50 <_malloc_r+0xb0>)
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	b923      	cbnz	r3, 800dede <_malloc_r+0x3e>
 800ded4:	4621      	mov	r1, r4
 800ded6:	4630      	mov	r0, r6
 800ded8:	f000 fb72 	bl	800e5c0 <_sbrk_r>
 800dedc:	6038      	str	r0, [r7, #0]
 800dede:	4629      	mov	r1, r5
 800dee0:	4630      	mov	r0, r6
 800dee2:	f000 fb6d 	bl	800e5c0 <_sbrk_r>
 800dee6:	1c43      	adds	r3, r0, #1
 800dee8:	d123      	bne.n	800df32 <_malloc_r+0x92>
 800deea:	230c      	movs	r3, #12
 800deec:	4630      	mov	r0, r6
 800deee:	6033      	str	r3, [r6, #0]
 800def0:	f000 fde8 	bl	800eac4 <__malloc_unlock>
 800def4:	e7e3      	b.n	800debe <_malloc_r+0x1e>
 800def6:	6823      	ldr	r3, [r4, #0]
 800def8:	1b5b      	subs	r3, r3, r5
 800defa:	d417      	bmi.n	800df2c <_malloc_r+0x8c>
 800defc:	2b0b      	cmp	r3, #11
 800defe:	d903      	bls.n	800df08 <_malloc_r+0x68>
 800df00:	6023      	str	r3, [r4, #0]
 800df02:	441c      	add	r4, r3
 800df04:	6025      	str	r5, [r4, #0]
 800df06:	e004      	b.n	800df12 <_malloc_r+0x72>
 800df08:	6863      	ldr	r3, [r4, #4]
 800df0a:	42a2      	cmp	r2, r4
 800df0c:	bf0c      	ite	eq
 800df0e:	600b      	streq	r3, [r1, #0]
 800df10:	6053      	strne	r3, [r2, #4]
 800df12:	4630      	mov	r0, r6
 800df14:	f000 fdd6 	bl	800eac4 <__malloc_unlock>
 800df18:	f104 000b 	add.w	r0, r4, #11
 800df1c:	1d23      	adds	r3, r4, #4
 800df1e:	f020 0007 	bic.w	r0, r0, #7
 800df22:	1ac2      	subs	r2, r0, r3
 800df24:	d0cc      	beq.n	800dec0 <_malloc_r+0x20>
 800df26:	1a1b      	subs	r3, r3, r0
 800df28:	50a3      	str	r3, [r4, r2]
 800df2a:	e7c9      	b.n	800dec0 <_malloc_r+0x20>
 800df2c:	4622      	mov	r2, r4
 800df2e:	6864      	ldr	r4, [r4, #4]
 800df30:	e7cc      	b.n	800decc <_malloc_r+0x2c>
 800df32:	1cc4      	adds	r4, r0, #3
 800df34:	f024 0403 	bic.w	r4, r4, #3
 800df38:	42a0      	cmp	r0, r4
 800df3a:	d0e3      	beq.n	800df04 <_malloc_r+0x64>
 800df3c:	1a21      	subs	r1, r4, r0
 800df3e:	4630      	mov	r0, r6
 800df40:	f000 fb3e 	bl	800e5c0 <_sbrk_r>
 800df44:	3001      	adds	r0, #1
 800df46:	d1dd      	bne.n	800df04 <_malloc_r+0x64>
 800df48:	e7cf      	b.n	800deea <_malloc_r+0x4a>
 800df4a:	bf00      	nop
 800df4c:	20003020 	.word	0x20003020
 800df50:	20003024 	.word	0x20003024

0800df54 <__sfputc_r>:
 800df54:	6893      	ldr	r3, [r2, #8]
 800df56:	b410      	push	{r4}
 800df58:	3b01      	subs	r3, #1
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	6093      	str	r3, [r2, #8]
 800df5e:	da07      	bge.n	800df70 <__sfputc_r+0x1c>
 800df60:	6994      	ldr	r4, [r2, #24]
 800df62:	42a3      	cmp	r3, r4
 800df64:	db01      	blt.n	800df6a <__sfputc_r+0x16>
 800df66:	290a      	cmp	r1, #10
 800df68:	d102      	bne.n	800df70 <__sfputc_r+0x1c>
 800df6a:	bc10      	pop	{r4}
 800df6c:	f000 bb7c 	b.w	800e668 <__swbuf_r>
 800df70:	6813      	ldr	r3, [r2, #0]
 800df72:	1c58      	adds	r0, r3, #1
 800df74:	6010      	str	r0, [r2, #0]
 800df76:	7019      	strb	r1, [r3, #0]
 800df78:	4608      	mov	r0, r1
 800df7a:	bc10      	pop	{r4}
 800df7c:	4770      	bx	lr

0800df7e <__sfputs_r>:
 800df7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df80:	4606      	mov	r6, r0
 800df82:	460f      	mov	r7, r1
 800df84:	4614      	mov	r4, r2
 800df86:	18d5      	adds	r5, r2, r3
 800df88:	42ac      	cmp	r4, r5
 800df8a:	d101      	bne.n	800df90 <__sfputs_r+0x12>
 800df8c:	2000      	movs	r0, #0
 800df8e:	e007      	b.n	800dfa0 <__sfputs_r+0x22>
 800df90:	463a      	mov	r2, r7
 800df92:	4630      	mov	r0, r6
 800df94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df98:	f7ff ffdc 	bl	800df54 <__sfputc_r>
 800df9c:	1c43      	adds	r3, r0, #1
 800df9e:	d1f3      	bne.n	800df88 <__sfputs_r+0xa>
 800dfa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dfa4 <_vfiprintf_r>:
 800dfa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfa8:	460d      	mov	r5, r1
 800dfaa:	4614      	mov	r4, r2
 800dfac:	4698      	mov	r8, r3
 800dfae:	4606      	mov	r6, r0
 800dfb0:	b09d      	sub	sp, #116	; 0x74
 800dfb2:	b118      	cbz	r0, 800dfbc <_vfiprintf_r+0x18>
 800dfb4:	6983      	ldr	r3, [r0, #24]
 800dfb6:	b90b      	cbnz	r3, 800dfbc <_vfiprintf_r+0x18>
 800dfb8:	f7ff fed2 	bl	800dd60 <__sinit>
 800dfbc:	4b89      	ldr	r3, [pc, #548]	; (800e1e4 <_vfiprintf_r+0x240>)
 800dfbe:	429d      	cmp	r5, r3
 800dfc0:	d11b      	bne.n	800dffa <_vfiprintf_r+0x56>
 800dfc2:	6875      	ldr	r5, [r6, #4]
 800dfc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dfc6:	07d9      	lsls	r1, r3, #31
 800dfc8:	d405      	bmi.n	800dfd6 <_vfiprintf_r+0x32>
 800dfca:	89ab      	ldrh	r3, [r5, #12]
 800dfcc:	059a      	lsls	r2, r3, #22
 800dfce:	d402      	bmi.n	800dfd6 <_vfiprintf_r+0x32>
 800dfd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dfd2:	f7ff ff63 	bl	800de9c <__retarget_lock_acquire_recursive>
 800dfd6:	89ab      	ldrh	r3, [r5, #12]
 800dfd8:	071b      	lsls	r3, r3, #28
 800dfda:	d501      	bpl.n	800dfe0 <_vfiprintf_r+0x3c>
 800dfdc:	692b      	ldr	r3, [r5, #16]
 800dfde:	b9eb      	cbnz	r3, 800e01c <_vfiprintf_r+0x78>
 800dfe0:	4629      	mov	r1, r5
 800dfe2:	4630      	mov	r0, r6
 800dfe4:	f000 fba4 	bl	800e730 <__swsetup_r>
 800dfe8:	b1c0      	cbz	r0, 800e01c <_vfiprintf_r+0x78>
 800dfea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dfec:	07dc      	lsls	r4, r3, #31
 800dfee:	d50e      	bpl.n	800e00e <_vfiprintf_r+0x6a>
 800dff0:	f04f 30ff 	mov.w	r0, #4294967295
 800dff4:	b01d      	add	sp, #116	; 0x74
 800dff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dffa:	4b7b      	ldr	r3, [pc, #492]	; (800e1e8 <_vfiprintf_r+0x244>)
 800dffc:	429d      	cmp	r5, r3
 800dffe:	d101      	bne.n	800e004 <_vfiprintf_r+0x60>
 800e000:	68b5      	ldr	r5, [r6, #8]
 800e002:	e7df      	b.n	800dfc4 <_vfiprintf_r+0x20>
 800e004:	4b79      	ldr	r3, [pc, #484]	; (800e1ec <_vfiprintf_r+0x248>)
 800e006:	429d      	cmp	r5, r3
 800e008:	bf08      	it	eq
 800e00a:	68f5      	ldreq	r5, [r6, #12]
 800e00c:	e7da      	b.n	800dfc4 <_vfiprintf_r+0x20>
 800e00e:	89ab      	ldrh	r3, [r5, #12]
 800e010:	0598      	lsls	r0, r3, #22
 800e012:	d4ed      	bmi.n	800dff0 <_vfiprintf_r+0x4c>
 800e014:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e016:	f7ff ff42 	bl	800de9e <__retarget_lock_release_recursive>
 800e01a:	e7e9      	b.n	800dff0 <_vfiprintf_r+0x4c>
 800e01c:	2300      	movs	r3, #0
 800e01e:	9309      	str	r3, [sp, #36]	; 0x24
 800e020:	2320      	movs	r3, #32
 800e022:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e026:	2330      	movs	r3, #48	; 0x30
 800e028:	f04f 0901 	mov.w	r9, #1
 800e02c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e030:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800e1f0 <_vfiprintf_r+0x24c>
 800e034:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e038:	4623      	mov	r3, r4
 800e03a:	469a      	mov	sl, r3
 800e03c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e040:	b10a      	cbz	r2, 800e046 <_vfiprintf_r+0xa2>
 800e042:	2a25      	cmp	r2, #37	; 0x25
 800e044:	d1f9      	bne.n	800e03a <_vfiprintf_r+0x96>
 800e046:	ebba 0b04 	subs.w	fp, sl, r4
 800e04a:	d00b      	beq.n	800e064 <_vfiprintf_r+0xc0>
 800e04c:	465b      	mov	r3, fp
 800e04e:	4622      	mov	r2, r4
 800e050:	4629      	mov	r1, r5
 800e052:	4630      	mov	r0, r6
 800e054:	f7ff ff93 	bl	800df7e <__sfputs_r>
 800e058:	3001      	adds	r0, #1
 800e05a:	f000 80aa 	beq.w	800e1b2 <_vfiprintf_r+0x20e>
 800e05e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e060:	445a      	add	r2, fp
 800e062:	9209      	str	r2, [sp, #36]	; 0x24
 800e064:	f89a 3000 	ldrb.w	r3, [sl]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	f000 80a2 	beq.w	800e1b2 <_vfiprintf_r+0x20e>
 800e06e:	2300      	movs	r3, #0
 800e070:	f04f 32ff 	mov.w	r2, #4294967295
 800e074:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e078:	f10a 0a01 	add.w	sl, sl, #1
 800e07c:	9304      	str	r3, [sp, #16]
 800e07e:	9307      	str	r3, [sp, #28]
 800e080:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e084:	931a      	str	r3, [sp, #104]	; 0x68
 800e086:	4654      	mov	r4, sl
 800e088:	2205      	movs	r2, #5
 800e08a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e08e:	4858      	ldr	r0, [pc, #352]	; (800e1f0 <_vfiprintf_r+0x24c>)
 800e090:	f000 fd04 	bl	800ea9c <memchr>
 800e094:	9a04      	ldr	r2, [sp, #16]
 800e096:	b9d8      	cbnz	r0, 800e0d0 <_vfiprintf_r+0x12c>
 800e098:	06d1      	lsls	r1, r2, #27
 800e09a:	bf44      	itt	mi
 800e09c:	2320      	movmi	r3, #32
 800e09e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0a2:	0713      	lsls	r3, r2, #28
 800e0a4:	bf44      	itt	mi
 800e0a6:	232b      	movmi	r3, #43	; 0x2b
 800e0a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0ac:	f89a 3000 	ldrb.w	r3, [sl]
 800e0b0:	2b2a      	cmp	r3, #42	; 0x2a
 800e0b2:	d015      	beq.n	800e0e0 <_vfiprintf_r+0x13c>
 800e0b4:	4654      	mov	r4, sl
 800e0b6:	2000      	movs	r0, #0
 800e0b8:	f04f 0c0a 	mov.w	ip, #10
 800e0bc:	9a07      	ldr	r2, [sp, #28]
 800e0be:	4621      	mov	r1, r4
 800e0c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0c4:	3b30      	subs	r3, #48	; 0x30
 800e0c6:	2b09      	cmp	r3, #9
 800e0c8:	d94e      	bls.n	800e168 <_vfiprintf_r+0x1c4>
 800e0ca:	b1b0      	cbz	r0, 800e0fa <_vfiprintf_r+0x156>
 800e0cc:	9207      	str	r2, [sp, #28]
 800e0ce:	e014      	b.n	800e0fa <_vfiprintf_r+0x156>
 800e0d0:	eba0 0308 	sub.w	r3, r0, r8
 800e0d4:	fa09 f303 	lsl.w	r3, r9, r3
 800e0d8:	4313      	orrs	r3, r2
 800e0da:	46a2      	mov	sl, r4
 800e0dc:	9304      	str	r3, [sp, #16]
 800e0de:	e7d2      	b.n	800e086 <_vfiprintf_r+0xe2>
 800e0e0:	9b03      	ldr	r3, [sp, #12]
 800e0e2:	1d19      	adds	r1, r3, #4
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	9103      	str	r1, [sp, #12]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	bfbb      	ittet	lt
 800e0ec:	425b      	neglt	r3, r3
 800e0ee:	f042 0202 	orrlt.w	r2, r2, #2
 800e0f2:	9307      	strge	r3, [sp, #28]
 800e0f4:	9307      	strlt	r3, [sp, #28]
 800e0f6:	bfb8      	it	lt
 800e0f8:	9204      	strlt	r2, [sp, #16]
 800e0fa:	7823      	ldrb	r3, [r4, #0]
 800e0fc:	2b2e      	cmp	r3, #46	; 0x2e
 800e0fe:	d10c      	bne.n	800e11a <_vfiprintf_r+0x176>
 800e100:	7863      	ldrb	r3, [r4, #1]
 800e102:	2b2a      	cmp	r3, #42	; 0x2a
 800e104:	d135      	bne.n	800e172 <_vfiprintf_r+0x1ce>
 800e106:	9b03      	ldr	r3, [sp, #12]
 800e108:	3402      	adds	r4, #2
 800e10a:	1d1a      	adds	r2, r3, #4
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	9203      	str	r2, [sp, #12]
 800e110:	2b00      	cmp	r3, #0
 800e112:	bfb8      	it	lt
 800e114:	f04f 33ff 	movlt.w	r3, #4294967295
 800e118:	9305      	str	r3, [sp, #20]
 800e11a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e200 <_vfiprintf_r+0x25c>
 800e11e:	2203      	movs	r2, #3
 800e120:	4650      	mov	r0, sl
 800e122:	7821      	ldrb	r1, [r4, #0]
 800e124:	f000 fcba 	bl	800ea9c <memchr>
 800e128:	b140      	cbz	r0, 800e13c <_vfiprintf_r+0x198>
 800e12a:	2340      	movs	r3, #64	; 0x40
 800e12c:	eba0 000a 	sub.w	r0, r0, sl
 800e130:	fa03 f000 	lsl.w	r0, r3, r0
 800e134:	9b04      	ldr	r3, [sp, #16]
 800e136:	3401      	adds	r4, #1
 800e138:	4303      	orrs	r3, r0
 800e13a:	9304      	str	r3, [sp, #16]
 800e13c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e140:	2206      	movs	r2, #6
 800e142:	482c      	ldr	r0, [pc, #176]	; (800e1f4 <_vfiprintf_r+0x250>)
 800e144:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e148:	f000 fca8 	bl	800ea9c <memchr>
 800e14c:	2800      	cmp	r0, #0
 800e14e:	d03f      	beq.n	800e1d0 <_vfiprintf_r+0x22c>
 800e150:	4b29      	ldr	r3, [pc, #164]	; (800e1f8 <_vfiprintf_r+0x254>)
 800e152:	bb1b      	cbnz	r3, 800e19c <_vfiprintf_r+0x1f8>
 800e154:	9b03      	ldr	r3, [sp, #12]
 800e156:	3307      	adds	r3, #7
 800e158:	f023 0307 	bic.w	r3, r3, #7
 800e15c:	3308      	adds	r3, #8
 800e15e:	9303      	str	r3, [sp, #12]
 800e160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e162:	443b      	add	r3, r7
 800e164:	9309      	str	r3, [sp, #36]	; 0x24
 800e166:	e767      	b.n	800e038 <_vfiprintf_r+0x94>
 800e168:	460c      	mov	r4, r1
 800e16a:	2001      	movs	r0, #1
 800e16c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e170:	e7a5      	b.n	800e0be <_vfiprintf_r+0x11a>
 800e172:	2300      	movs	r3, #0
 800e174:	f04f 0c0a 	mov.w	ip, #10
 800e178:	4619      	mov	r1, r3
 800e17a:	3401      	adds	r4, #1
 800e17c:	9305      	str	r3, [sp, #20]
 800e17e:	4620      	mov	r0, r4
 800e180:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e184:	3a30      	subs	r2, #48	; 0x30
 800e186:	2a09      	cmp	r2, #9
 800e188:	d903      	bls.n	800e192 <_vfiprintf_r+0x1ee>
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d0c5      	beq.n	800e11a <_vfiprintf_r+0x176>
 800e18e:	9105      	str	r1, [sp, #20]
 800e190:	e7c3      	b.n	800e11a <_vfiprintf_r+0x176>
 800e192:	4604      	mov	r4, r0
 800e194:	2301      	movs	r3, #1
 800e196:	fb0c 2101 	mla	r1, ip, r1, r2
 800e19a:	e7f0      	b.n	800e17e <_vfiprintf_r+0x1da>
 800e19c:	ab03      	add	r3, sp, #12
 800e19e:	9300      	str	r3, [sp, #0]
 800e1a0:	462a      	mov	r2, r5
 800e1a2:	4630      	mov	r0, r6
 800e1a4:	4b15      	ldr	r3, [pc, #84]	; (800e1fc <_vfiprintf_r+0x258>)
 800e1a6:	a904      	add	r1, sp, #16
 800e1a8:	f3af 8000 	nop.w
 800e1ac:	4607      	mov	r7, r0
 800e1ae:	1c78      	adds	r0, r7, #1
 800e1b0:	d1d6      	bne.n	800e160 <_vfiprintf_r+0x1bc>
 800e1b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e1b4:	07d9      	lsls	r1, r3, #31
 800e1b6:	d405      	bmi.n	800e1c4 <_vfiprintf_r+0x220>
 800e1b8:	89ab      	ldrh	r3, [r5, #12]
 800e1ba:	059a      	lsls	r2, r3, #22
 800e1bc:	d402      	bmi.n	800e1c4 <_vfiprintf_r+0x220>
 800e1be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e1c0:	f7ff fe6d 	bl	800de9e <__retarget_lock_release_recursive>
 800e1c4:	89ab      	ldrh	r3, [r5, #12]
 800e1c6:	065b      	lsls	r3, r3, #25
 800e1c8:	f53f af12 	bmi.w	800dff0 <_vfiprintf_r+0x4c>
 800e1cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e1ce:	e711      	b.n	800dff4 <_vfiprintf_r+0x50>
 800e1d0:	ab03      	add	r3, sp, #12
 800e1d2:	9300      	str	r3, [sp, #0]
 800e1d4:	462a      	mov	r2, r5
 800e1d6:	4630      	mov	r0, r6
 800e1d8:	4b08      	ldr	r3, [pc, #32]	; (800e1fc <_vfiprintf_r+0x258>)
 800e1da:	a904      	add	r1, sp, #16
 800e1dc:	f000 f882 	bl	800e2e4 <_printf_i>
 800e1e0:	e7e4      	b.n	800e1ac <_vfiprintf_r+0x208>
 800e1e2:	bf00      	nop
 800e1e4:	0800ff04 	.word	0x0800ff04
 800e1e8:	0800ff24 	.word	0x0800ff24
 800e1ec:	0800fee4 	.word	0x0800fee4
 800e1f0:	0800ff44 	.word	0x0800ff44
 800e1f4:	0800ff4e 	.word	0x0800ff4e
 800e1f8:	00000000 	.word	0x00000000
 800e1fc:	0800df7f 	.word	0x0800df7f
 800e200:	0800ff4a 	.word	0x0800ff4a

0800e204 <_printf_common>:
 800e204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e208:	4616      	mov	r6, r2
 800e20a:	4699      	mov	r9, r3
 800e20c:	688a      	ldr	r2, [r1, #8]
 800e20e:	690b      	ldr	r3, [r1, #16]
 800e210:	4607      	mov	r7, r0
 800e212:	4293      	cmp	r3, r2
 800e214:	bfb8      	it	lt
 800e216:	4613      	movlt	r3, r2
 800e218:	6033      	str	r3, [r6, #0]
 800e21a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e21e:	460c      	mov	r4, r1
 800e220:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e224:	b10a      	cbz	r2, 800e22a <_printf_common+0x26>
 800e226:	3301      	adds	r3, #1
 800e228:	6033      	str	r3, [r6, #0]
 800e22a:	6823      	ldr	r3, [r4, #0]
 800e22c:	0699      	lsls	r1, r3, #26
 800e22e:	bf42      	ittt	mi
 800e230:	6833      	ldrmi	r3, [r6, #0]
 800e232:	3302      	addmi	r3, #2
 800e234:	6033      	strmi	r3, [r6, #0]
 800e236:	6825      	ldr	r5, [r4, #0]
 800e238:	f015 0506 	ands.w	r5, r5, #6
 800e23c:	d106      	bne.n	800e24c <_printf_common+0x48>
 800e23e:	f104 0a19 	add.w	sl, r4, #25
 800e242:	68e3      	ldr	r3, [r4, #12]
 800e244:	6832      	ldr	r2, [r6, #0]
 800e246:	1a9b      	subs	r3, r3, r2
 800e248:	42ab      	cmp	r3, r5
 800e24a:	dc28      	bgt.n	800e29e <_printf_common+0x9a>
 800e24c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e250:	1e13      	subs	r3, r2, #0
 800e252:	6822      	ldr	r2, [r4, #0]
 800e254:	bf18      	it	ne
 800e256:	2301      	movne	r3, #1
 800e258:	0692      	lsls	r2, r2, #26
 800e25a:	d42d      	bmi.n	800e2b8 <_printf_common+0xb4>
 800e25c:	4649      	mov	r1, r9
 800e25e:	4638      	mov	r0, r7
 800e260:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e264:	47c0      	blx	r8
 800e266:	3001      	adds	r0, #1
 800e268:	d020      	beq.n	800e2ac <_printf_common+0xa8>
 800e26a:	6823      	ldr	r3, [r4, #0]
 800e26c:	68e5      	ldr	r5, [r4, #12]
 800e26e:	f003 0306 	and.w	r3, r3, #6
 800e272:	2b04      	cmp	r3, #4
 800e274:	bf18      	it	ne
 800e276:	2500      	movne	r5, #0
 800e278:	6832      	ldr	r2, [r6, #0]
 800e27a:	f04f 0600 	mov.w	r6, #0
 800e27e:	68a3      	ldr	r3, [r4, #8]
 800e280:	bf08      	it	eq
 800e282:	1aad      	subeq	r5, r5, r2
 800e284:	6922      	ldr	r2, [r4, #16]
 800e286:	bf08      	it	eq
 800e288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e28c:	4293      	cmp	r3, r2
 800e28e:	bfc4      	itt	gt
 800e290:	1a9b      	subgt	r3, r3, r2
 800e292:	18ed      	addgt	r5, r5, r3
 800e294:	341a      	adds	r4, #26
 800e296:	42b5      	cmp	r5, r6
 800e298:	d11a      	bne.n	800e2d0 <_printf_common+0xcc>
 800e29a:	2000      	movs	r0, #0
 800e29c:	e008      	b.n	800e2b0 <_printf_common+0xac>
 800e29e:	2301      	movs	r3, #1
 800e2a0:	4652      	mov	r2, sl
 800e2a2:	4649      	mov	r1, r9
 800e2a4:	4638      	mov	r0, r7
 800e2a6:	47c0      	blx	r8
 800e2a8:	3001      	adds	r0, #1
 800e2aa:	d103      	bne.n	800e2b4 <_printf_common+0xb0>
 800e2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e2b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2b4:	3501      	adds	r5, #1
 800e2b6:	e7c4      	b.n	800e242 <_printf_common+0x3e>
 800e2b8:	2030      	movs	r0, #48	; 0x30
 800e2ba:	18e1      	adds	r1, r4, r3
 800e2bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e2c0:	1c5a      	adds	r2, r3, #1
 800e2c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e2c6:	4422      	add	r2, r4
 800e2c8:	3302      	adds	r3, #2
 800e2ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e2ce:	e7c5      	b.n	800e25c <_printf_common+0x58>
 800e2d0:	2301      	movs	r3, #1
 800e2d2:	4622      	mov	r2, r4
 800e2d4:	4649      	mov	r1, r9
 800e2d6:	4638      	mov	r0, r7
 800e2d8:	47c0      	blx	r8
 800e2da:	3001      	adds	r0, #1
 800e2dc:	d0e6      	beq.n	800e2ac <_printf_common+0xa8>
 800e2de:	3601      	adds	r6, #1
 800e2e0:	e7d9      	b.n	800e296 <_printf_common+0x92>
	...

0800e2e4 <_printf_i>:
 800e2e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e2e8:	460c      	mov	r4, r1
 800e2ea:	7e27      	ldrb	r7, [r4, #24]
 800e2ec:	4691      	mov	r9, r2
 800e2ee:	2f78      	cmp	r7, #120	; 0x78
 800e2f0:	4680      	mov	r8, r0
 800e2f2:	469a      	mov	sl, r3
 800e2f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e2f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e2fa:	d807      	bhi.n	800e30c <_printf_i+0x28>
 800e2fc:	2f62      	cmp	r7, #98	; 0x62
 800e2fe:	d80a      	bhi.n	800e316 <_printf_i+0x32>
 800e300:	2f00      	cmp	r7, #0
 800e302:	f000 80d9 	beq.w	800e4b8 <_printf_i+0x1d4>
 800e306:	2f58      	cmp	r7, #88	; 0x58
 800e308:	f000 80a4 	beq.w	800e454 <_printf_i+0x170>
 800e30c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e310:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e314:	e03a      	b.n	800e38c <_printf_i+0xa8>
 800e316:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e31a:	2b15      	cmp	r3, #21
 800e31c:	d8f6      	bhi.n	800e30c <_printf_i+0x28>
 800e31e:	a001      	add	r0, pc, #4	; (adr r0, 800e324 <_printf_i+0x40>)
 800e320:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e324:	0800e37d 	.word	0x0800e37d
 800e328:	0800e391 	.word	0x0800e391
 800e32c:	0800e30d 	.word	0x0800e30d
 800e330:	0800e30d 	.word	0x0800e30d
 800e334:	0800e30d 	.word	0x0800e30d
 800e338:	0800e30d 	.word	0x0800e30d
 800e33c:	0800e391 	.word	0x0800e391
 800e340:	0800e30d 	.word	0x0800e30d
 800e344:	0800e30d 	.word	0x0800e30d
 800e348:	0800e30d 	.word	0x0800e30d
 800e34c:	0800e30d 	.word	0x0800e30d
 800e350:	0800e49f 	.word	0x0800e49f
 800e354:	0800e3c1 	.word	0x0800e3c1
 800e358:	0800e481 	.word	0x0800e481
 800e35c:	0800e30d 	.word	0x0800e30d
 800e360:	0800e30d 	.word	0x0800e30d
 800e364:	0800e4c1 	.word	0x0800e4c1
 800e368:	0800e30d 	.word	0x0800e30d
 800e36c:	0800e3c1 	.word	0x0800e3c1
 800e370:	0800e30d 	.word	0x0800e30d
 800e374:	0800e30d 	.word	0x0800e30d
 800e378:	0800e489 	.word	0x0800e489
 800e37c:	680b      	ldr	r3, [r1, #0]
 800e37e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e382:	1d1a      	adds	r2, r3, #4
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	600a      	str	r2, [r1, #0]
 800e388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e38c:	2301      	movs	r3, #1
 800e38e:	e0a4      	b.n	800e4da <_printf_i+0x1f6>
 800e390:	6825      	ldr	r5, [r4, #0]
 800e392:	6808      	ldr	r0, [r1, #0]
 800e394:	062e      	lsls	r6, r5, #24
 800e396:	f100 0304 	add.w	r3, r0, #4
 800e39a:	d50a      	bpl.n	800e3b2 <_printf_i+0xce>
 800e39c:	6805      	ldr	r5, [r0, #0]
 800e39e:	600b      	str	r3, [r1, #0]
 800e3a0:	2d00      	cmp	r5, #0
 800e3a2:	da03      	bge.n	800e3ac <_printf_i+0xc8>
 800e3a4:	232d      	movs	r3, #45	; 0x2d
 800e3a6:	426d      	negs	r5, r5
 800e3a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e3ac:	230a      	movs	r3, #10
 800e3ae:	485e      	ldr	r0, [pc, #376]	; (800e528 <_printf_i+0x244>)
 800e3b0:	e019      	b.n	800e3e6 <_printf_i+0x102>
 800e3b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e3b6:	6805      	ldr	r5, [r0, #0]
 800e3b8:	600b      	str	r3, [r1, #0]
 800e3ba:	bf18      	it	ne
 800e3bc:	b22d      	sxthne	r5, r5
 800e3be:	e7ef      	b.n	800e3a0 <_printf_i+0xbc>
 800e3c0:	680b      	ldr	r3, [r1, #0]
 800e3c2:	6825      	ldr	r5, [r4, #0]
 800e3c4:	1d18      	adds	r0, r3, #4
 800e3c6:	6008      	str	r0, [r1, #0]
 800e3c8:	0628      	lsls	r0, r5, #24
 800e3ca:	d501      	bpl.n	800e3d0 <_printf_i+0xec>
 800e3cc:	681d      	ldr	r5, [r3, #0]
 800e3ce:	e002      	b.n	800e3d6 <_printf_i+0xf2>
 800e3d0:	0669      	lsls	r1, r5, #25
 800e3d2:	d5fb      	bpl.n	800e3cc <_printf_i+0xe8>
 800e3d4:	881d      	ldrh	r5, [r3, #0]
 800e3d6:	2f6f      	cmp	r7, #111	; 0x6f
 800e3d8:	bf0c      	ite	eq
 800e3da:	2308      	moveq	r3, #8
 800e3dc:	230a      	movne	r3, #10
 800e3de:	4852      	ldr	r0, [pc, #328]	; (800e528 <_printf_i+0x244>)
 800e3e0:	2100      	movs	r1, #0
 800e3e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e3e6:	6866      	ldr	r6, [r4, #4]
 800e3e8:	2e00      	cmp	r6, #0
 800e3ea:	bfa8      	it	ge
 800e3ec:	6821      	ldrge	r1, [r4, #0]
 800e3ee:	60a6      	str	r6, [r4, #8]
 800e3f0:	bfa4      	itt	ge
 800e3f2:	f021 0104 	bicge.w	r1, r1, #4
 800e3f6:	6021      	strge	r1, [r4, #0]
 800e3f8:	b90d      	cbnz	r5, 800e3fe <_printf_i+0x11a>
 800e3fa:	2e00      	cmp	r6, #0
 800e3fc:	d04d      	beq.n	800e49a <_printf_i+0x1b6>
 800e3fe:	4616      	mov	r6, r2
 800e400:	fbb5 f1f3 	udiv	r1, r5, r3
 800e404:	fb03 5711 	mls	r7, r3, r1, r5
 800e408:	5dc7      	ldrb	r7, [r0, r7]
 800e40a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e40e:	462f      	mov	r7, r5
 800e410:	42bb      	cmp	r3, r7
 800e412:	460d      	mov	r5, r1
 800e414:	d9f4      	bls.n	800e400 <_printf_i+0x11c>
 800e416:	2b08      	cmp	r3, #8
 800e418:	d10b      	bne.n	800e432 <_printf_i+0x14e>
 800e41a:	6823      	ldr	r3, [r4, #0]
 800e41c:	07df      	lsls	r7, r3, #31
 800e41e:	d508      	bpl.n	800e432 <_printf_i+0x14e>
 800e420:	6923      	ldr	r3, [r4, #16]
 800e422:	6861      	ldr	r1, [r4, #4]
 800e424:	4299      	cmp	r1, r3
 800e426:	bfde      	ittt	le
 800e428:	2330      	movle	r3, #48	; 0x30
 800e42a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e42e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e432:	1b92      	subs	r2, r2, r6
 800e434:	6122      	str	r2, [r4, #16]
 800e436:	464b      	mov	r3, r9
 800e438:	4621      	mov	r1, r4
 800e43a:	4640      	mov	r0, r8
 800e43c:	f8cd a000 	str.w	sl, [sp]
 800e440:	aa03      	add	r2, sp, #12
 800e442:	f7ff fedf 	bl	800e204 <_printf_common>
 800e446:	3001      	adds	r0, #1
 800e448:	d14c      	bne.n	800e4e4 <_printf_i+0x200>
 800e44a:	f04f 30ff 	mov.w	r0, #4294967295
 800e44e:	b004      	add	sp, #16
 800e450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e454:	4834      	ldr	r0, [pc, #208]	; (800e528 <_printf_i+0x244>)
 800e456:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e45a:	680e      	ldr	r6, [r1, #0]
 800e45c:	6823      	ldr	r3, [r4, #0]
 800e45e:	f856 5b04 	ldr.w	r5, [r6], #4
 800e462:	061f      	lsls	r7, r3, #24
 800e464:	600e      	str	r6, [r1, #0]
 800e466:	d514      	bpl.n	800e492 <_printf_i+0x1ae>
 800e468:	07d9      	lsls	r1, r3, #31
 800e46a:	bf44      	itt	mi
 800e46c:	f043 0320 	orrmi.w	r3, r3, #32
 800e470:	6023      	strmi	r3, [r4, #0]
 800e472:	b91d      	cbnz	r5, 800e47c <_printf_i+0x198>
 800e474:	6823      	ldr	r3, [r4, #0]
 800e476:	f023 0320 	bic.w	r3, r3, #32
 800e47a:	6023      	str	r3, [r4, #0]
 800e47c:	2310      	movs	r3, #16
 800e47e:	e7af      	b.n	800e3e0 <_printf_i+0xfc>
 800e480:	6823      	ldr	r3, [r4, #0]
 800e482:	f043 0320 	orr.w	r3, r3, #32
 800e486:	6023      	str	r3, [r4, #0]
 800e488:	2378      	movs	r3, #120	; 0x78
 800e48a:	4828      	ldr	r0, [pc, #160]	; (800e52c <_printf_i+0x248>)
 800e48c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e490:	e7e3      	b.n	800e45a <_printf_i+0x176>
 800e492:	065e      	lsls	r6, r3, #25
 800e494:	bf48      	it	mi
 800e496:	b2ad      	uxthmi	r5, r5
 800e498:	e7e6      	b.n	800e468 <_printf_i+0x184>
 800e49a:	4616      	mov	r6, r2
 800e49c:	e7bb      	b.n	800e416 <_printf_i+0x132>
 800e49e:	680b      	ldr	r3, [r1, #0]
 800e4a0:	6826      	ldr	r6, [r4, #0]
 800e4a2:	1d1d      	adds	r5, r3, #4
 800e4a4:	6960      	ldr	r0, [r4, #20]
 800e4a6:	600d      	str	r5, [r1, #0]
 800e4a8:	0635      	lsls	r5, r6, #24
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	d501      	bpl.n	800e4b2 <_printf_i+0x1ce>
 800e4ae:	6018      	str	r0, [r3, #0]
 800e4b0:	e002      	b.n	800e4b8 <_printf_i+0x1d4>
 800e4b2:	0671      	lsls	r1, r6, #25
 800e4b4:	d5fb      	bpl.n	800e4ae <_printf_i+0x1ca>
 800e4b6:	8018      	strh	r0, [r3, #0]
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	4616      	mov	r6, r2
 800e4bc:	6123      	str	r3, [r4, #16]
 800e4be:	e7ba      	b.n	800e436 <_printf_i+0x152>
 800e4c0:	680b      	ldr	r3, [r1, #0]
 800e4c2:	1d1a      	adds	r2, r3, #4
 800e4c4:	600a      	str	r2, [r1, #0]
 800e4c6:	681e      	ldr	r6, [r3, #0]
 800e4c8:	2100      	movs	r1, #0
 800e4ca:	4630      	mov	r0, r6
 800e4cc:	6862      	ldr	r2, [r4, #4]
 800e4ce:	f000 fae5 	bl	800ea9c <memchr>
 800e4d2:	b108      	cbz	r0, 800e4d8 <_printf_i+0x1f4>
 800e4d4:	1b80      	subs	r0, r0, r6
 800e4d6:	6060      	str	r0, [r4, #4]
 800e4d8:	6863      	ldr	r3, [r4, #4]
 800e4da:	6123      	str	r3, [r4, #16]
 800e4dc:	2300      	movs	r3, #0
 800e4de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e4e2:	e7a8      	b.n	800e436 <_printf_i+0x152>
 800e4e4:	4632      	mov	r2, r6
 800e4e6:	4649      	mov	r1, r9
 800e4e8:	4640      	mov	r0, r8
 800e4ea:	6923      	ldr	r3, [r4, #16]
 800e4ec:	47d0      	blx	sl
 800e4ee:	3001      	adds	r0, #1
 800e4f0:	d0ab      	beq.n	800e44a <_printf_i+0x166>
 800e4f2:	6823      	ldr	r3, [r4, #0]
 800e4f4:	079b      	lsls	r3, r3, #30
 800e4f6:	d413      	bmi.n	800e520 <_printf_i+0x23c>
 800e4f8:	68e0      	ldr	r0, [r4, #12]
 800e4fa:	9b03      	ldr	r3, [sp, #12]
 800e4fc:	4298      	cmp	r0, r3
 800e4fe:	bfb8      	it	lt
 800e500:	4618      	movlt	r0, r3
 800e502:	e7a4      	b.n	800e44e <_printf_i+0x16a>
 800e504:	2301      	movs	r3, #1
 800e506:	4632      	mov	r2, r6
 800e508:	4649      	mov	r1, r9
 800e50a:	4640      	mov	r0, r8
 800e50c:	47d0      	blx	sl
 800e50e:	3001      	adds	r0, #1
 800e510:	d09b      	beq.n	800e44a <_printf_i+0x166>
 800e512:	3501      	adds	r5, #1
 800e514:	68e3      	ldr	r3, [r4, #12]
 800e516:	9903      	ldr	r1, [sp, #12]
 800e518:	1a5b      	subs	r3, r3, r1
 800e51a:	42ab      	cmp	r3, r5
 800e51c:	dcf2      	bgt.n	800e504 <_printf_i+0x220>
 800e51e:	e7eb      	b.n	800e4f8 <_printf_i+0x214>
 800e520:	2500      	movs	r5, #0
 800e522:	f104 0619 	add.w	r6, r4, #25
 800e526:	e7f5      	b.n	800e514 <_printf_i+0x230>
 800e528:	0800ff55 	.word	0x0800ff55
 800e52c:	0800ff66 	.word	0x0800ff66

0800e530 <_putc_r>:
 800e530:	b570      	push	{r4, r5, r6, lr}
 800e532:	460d      	mov	r5, r1
 800e534:	4614      	mov	r4, r2
 800e536:	4606      	mov	r6, r0
 800e538:	b118      	cbz	r0, 800e542 <_putc_r+0x12>
 800e53a:	6983      	ldr	r3, [r0, #24]
 800e53c:	b90b      	cbnz	r3, 800e542 <_putc_r+0x12>
 800e53e:	f7ff fc0f 	bl	800dd60 <__sinit>
 800e542:	4b1c      	ldr	r3, [pc, #112]	; (800e5b4 <_putc_r+0x84>)
 800e544:	429c      	cmp	r4, r3
 800e546:	d124      	bne.n	800e592 <_putc_r+0x62>
 800e548:	6874      	ldr	r4, [r6, #4]
 800e54a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e54c:	07d8      	lsls	r0, r3, #31
 800e54e:	d405      	bmi.n	800e55c <_putc_r+0x2c>
 800e550:	89a3      	ldrh	r3, [r4, #12]
 800e552:	0599      	lsls	r1, r3, #22
 800e554:	d402      	bmi.n	800e55c <_putc_r+0x2c>
 800e556:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e558:	f7ff fca0 	bl	800de9c <__retarget_lock_acquire_recursive>
 800e55c:	68a3      	ldr	r3, [r4, #8]
 800e55e:	3b01      	subs	r3, #1
 800e560:	2b00      	cmp	r3, #0
 800e562:	60a3      	str	r3, [r4, #8]
 800e564:	da05      	bge.n	800e572 <_putc_r+0x42>
 800e566:	69a2      	ldr	r2, [r4, #24]
 800e568:	4293      	cmp	r3, r2
 800e56a:	db1c      	blt.n	800e5a6 <_putc_r+0x76>
 800e56c:	b2eb      	uxtb	r3, r5
 800e56e:	2b0a      	cmp	r3, #10
 800e570:	d019      	beq.n	800e5a6 <_putc_r+0x76>
 800e572:	6823      	ldr	r3, [r4, #0]
 800e574:	1c5a      	adds	r2, r3, #1
 800e576:	6022      	str	r2, [r4, #0]
 800e578:	701d      	strb	r5, [r3, #0]
 800e57a:	b2ed      	uxtb	r5, r5
 800e57c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e57e:	07da      	lsls	r2, r3, #31
 800e580:	d405      	bmi.n	800e58e <_putc_r+0x5e>
 800e582:	89a3      	ldrh	r3, [r4, #12]
 800e584:	059b      	lsls	r3, r3, #22
 800e586:	d402      	bmi.n	800e58e <_putc_r+0x5e>
 800e588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e58a:	f7ff fc88 	bl	800de9e <__retarget_lock_release_recursive>
 800e58e:	4628      	mov	r0, r5
 800e590:	bd70      	pop	{r4, r5, r6, pc}
 800e592:	4b09      	ldr	r3, [pc, #36]	; (800e5b8 <_putc_r+0x88>)
 800e594:	429c      	cmp	r4, r3
 800e596:	d101      	bne.n	800e59c <_putc_r+0x6c>
 800e598:	68b4      	ldr	r4, [r6, #8]
 800e59a:	e7d6      	b.n	800e54a <_putc_r+0x1a>
 800e59c:	4b07      	ldr	r3, [pc, #28]	; (800e5bc <_putc_r+0x8c>)
 800e59e:	429c      	cmp	r4, r3
 800e5a0:	bf08      	it	eq
 800e5a2:	68f4      	ldreq	r4, [r6, #12]
 800e5a4:	e7d1      	b.n	800e54a <_putc_r+0x1a>
 800e5a6:	4629      	mov	r1, r5
 800e5a8:	4622      	mov	r2, r4
 800e5aa:	4630      	mov	r0, r6
 800e5ac:	f000 f85c 	bl	800e668 <__swbuf_r>
 800e5b0:	4605      	mov	r5, r0
 800e5b2:	e7e3      	b.n	800e57c <_putc_r+0x4c>
 800e5b4:	0800ff04 	.word	0x0800ff04
 800e5b8:	0800ff24 	.word	0x0800ff24
 800e5bc:	0800fee4 	.word	0x0800fee4

0800e5c0 <_sbrk_r>:
 800e5c0:	b538      	push	{r3, r4, r5, lr}
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	4d05      	ldr	r5, [pc, #20]	; (800e5dc <_sbrk_r+0x1c>)
 800e5c6:	4604      	mov	r4, r0
 800e5c8:	4608      	mov	r0, r1
 800e5ca:	602b      	str	r3, [r5, #0]
 800e5cc:	f7ff fa4e 	bl	800da6c <_sbrk>
 800e5d0:	1c43      	adds	r3, r0, #1
 800e5d2:	d102      	bne.n	800e5da <_sbrk_r+0x1a>
 800e5d4:	682b      	ldr	r3, [r5, #0]
 800e5d6:	b103      	cbz	r3, 800e5da <_sbrk_r+0x1a>
 800e5d8:	6023      	str	r3, [r4, #0]
 800e5da:	bd38      	pop	{r3, r4, r5, pc}
 800e5dc:	20003250 	.word	0x20003250

0800e5e0 <__sread>:
 800e5e0:	b510      	push	{r4, lr}
 800e5e2:	460c      	mov	r4, r1
 800e5e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5e8:	f000 fabe 	bl	800eb68 <_read_r>
 800e5ec:	2800      	cmp	r0, #0
 800e5ee:	bfab      	itete	ge
 800e5f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e5f2:	89a3      	ldrhlt	r3, [r4, #12]
 800e5f4:	181b      	addge	r3, r3, r0
 800e5f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e5fa:	bfac      	ite	ge
 800e5fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800e5fe:	81a3      	strhlt	r3, [r4, #12]
 800e600:	bd10      	pop	{r4, pc}

0800e602 <__swrite>:
 800e602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e606:	461f      	mov	r7, r3
 800e608:	898b      	ldrh	r3, [r1, #12]
 800e60a:	4605      	mov	r5, r0
 800e60c:	05db      	lsls	r3, r3, #23
 800e60e:	460c      	mov	r4, r1
 800e610:	4616      	mov	r6, r2
 800e612:	d505      	bpl.n	800e620 <__swrite+0x1e>
 800e614:	2302      	movs	r3, #2
 800e616:	2200      	movs	r2, #0
 800e618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e61c:	f000 f9c8 	bl	800e9b0 <_lseek_r>
 800e620:	89a3      	ldrh	r3, [r4, #12]
 800e622:	4632      	mov	r2, r6
 800e624:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e628:	81a3      	strh	r3, [r4, #12]
 800e62a:	4628      	mov	r0, r5
 800e62c:	463b      	mov	r3, r7
 800e62e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e636:	f000 b869 	b.w	800e70c <_write_r>

0800e63a <__sseek>:
 800e63a:	b510      	push	{r4, lr}
 800e63c:	460c      	mov	r4, r1
 800e63e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e642:	f000 f9b5 	bl	800e9b0 <_lseek_r>
 800e646:	1c43      	adds	r3, r0, #1
 800e648:	89a3      	ldrh	r3, [r4, #12]
 800e64a:	bf15      	itete	ne
 800e64c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e64e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e652:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e656:	81a3      	strheq	r3, [r4, #12]
 800e658:	bf18      	it	ne
 800e65a:	81a3      	strhne	r3, [r4, #12]
 800e65c:	bd10      	pop	{r4, pc}

0800e65e <__sclose>:
 800e65e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e662:	f000 b8d3 	b.w	800e80c <_close_r>
	...

0800e668 <__swbuf_r>:
 800e668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e66a:	460e      	mov	r6, r1
 800e66c:	4614      	mov	r4, r2
 800e66e:	4605      	mov	r5, r0
 800e670:	b118      	cbz	r0, 800e67a <__swbuf_r+0x12>
 800e672:	6983      	ldr	r3, [r0, #24]
 800e674:	b90b      	cbnz	r3, 800e67a <__swbuf_r+0x12>
 800e676:	f7ff fb73 	bl	800dd60 <__sinit>
 800e67a:	4b21      	ldr	r3, [pc, #132]	; (800e700 <__swbuf_r+0x98>)
 800e67c:	429c      	cmp	r4, r3
 800e67e:	d12b      	bne.n	800e6d8 <__swbuf_r+0x70>
 800e680:	686c      	ldr	r4, [r5, #4]
 800e682:	69a3      	ldr	r3, [r4, #24]
 800e684:	60a3      	str	r3, [r4, #8]
 800e686:	89a3      	ldrh	r3, [r4, #12]
 800e688:	071a      	lsls	r2, r3, #28
 800e68a:	d52f      	bpl.n	800e6ec <__swbuf_r+0x84>
 800e68c:	6923      	ldr	r3, [r4, #16]
 800e68e:	b36b      	cbz	r3, 800e6ec <__swbuf_r+0x84>
 800e690:	6923      	ldr	r3, [r4, #16]
 800e692:	6820      	ldr	r0, [r4, #0]
 800e694:	b2f6      	uxtb	r6, r6
 800e696:	1ac0      	subs	r0, r0, r3
 800e698:	6963      	ldr	r3, [r4, #20]
 800e69a:	4637      	mov	r7, r6
 800e69c:	4283      	cmp	r3, r0
 800e69e:	dc04      	bgt.n	800e6aa <__swbuf_r+0x42>
 800e6a0:	4621      	mov	r1, r4
 800e6a2:	4628      	mov	r0, r5
 800e6a4:	f000 f948 	bl	800e938 <_fflush_r>
 800e6a8:	bb30      	cbnz	r0, 800e6f8 <__swbuf_r+0x90>
 800e6aa:	68a3      	ldr	r3, [r4, #8]
 800e6ac:	3001      	adds	r0, #1
 800e6ae:	3b01      	subs	r3, #1
 800e6b0:	60a3      	str	r3, [r4, #8]
 800e6b2:	6823      	ldr	r3, [r4, #0]
 800e6b4:	1c5a      	adds	r2, r3, #1
 800e6b6:	6022      	str	r2, [r4, #0]
 800e6b8:	701e      	strb	r6, [r3, #0]
 800e6ba:	6963      	ldr	r3, [r4, #20]
 800e6bc:	4283      	cmp	r3, r0
 800e6be:	d004      	beq.n	800e6ca <__swbuf_r+0x62>
 800e6c0:	89a3      	ldrh	r3, [r4, #12]
 800e6c2:	07db      	lsls	r3, r3, #31
 800e6c4:	d506      	bpl.n	800e6d4 <__swbuf_r+0x6c>
 800e6c6:	2e0a      	cmp	r6, #10
 800e6c8:	d104      	bne.n	800e6d4 <__swbuf_r+0x6c>
 800e6ca:	4621      	mov	r1, r4
 800e6cc:	4628      	mov	r0, r5
 800e6ce:	f000 f933 	bl	800e938 <_fflush_r>
 800e6d2:	b988      	cbnz	r0, 800e6f8 <__swbuf_r+0x90>
 800e6d4:	4638      	mov	r0, r7
 800e6d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6d8:	4b0a      	ldr	r3, [pc, #40]	; (800e704 <__swbuf_r+0x9c>)
 800e6da:	429c      	cmp	r4, r3
 800e6dc:	d101      	bne.n	800e6e2 <__swbuf_r+0x7a>
 800e6de:	68ac      	ldr	r4, [r5, #8]
 800e6e0:	e7cf      	b.n	800e682 <__swbuf_r+0x1a>
 800e6e2:	4b09      	ldr	r3, [pc, #36]	; (800e708 <__swbuf_r+0xa0>)
 800e6e4:	429c      	cmp	r4, r3
 800e6e6:	bf08      	it	eq
 800e6e8:	68ec      	ldreq	r4, [r5, #12]
 800e6ea:	e7ca      	b.n	800e682 <__swbuf_r+0x1a>
 800e6ec:	4621      	mov	r1, r4
 800e6ee:	4628      	mov	r0, r5
 800e6f0:	f000 f81e 	bl	800e730 <__swsetup_r>
 800e6f4:	2800      	cmp	r0, #0
 800e6f6:	d0cb      	beq.n	800e690 <__swbuf_r+0x28>
 800e6f8:	f04f 37ff 	mov.w	r7, #4294967295
 800e6fc:	e7ea      	b.n	800e6d4 <__swbuf_r+0x6c>
 800e6fe:	bf00      	nop
 800e700:	0800ff04 	.word	0x0800ff04
 800e704:	0800ff24 	.word	0x0800ff24
 800e708:	0800fee4 	.word	0x0800fee4

0800e70c <_write_r>:
 800e70c:	b538      	push	{r3, r4, r5, lr}
 800e70e:	4604      	mov	r4, r0
 800e710:	4608      	mov	r0, r1
 800e712:	4611      	mov	r1, r2
 800e714:	2200      	movs	r2, #0
 800e716:	4d05      	ldr	r5, [pc, #20]	; (800e72c <_write_r+0x20>)
 800e718:	602a      	str	r2, [r5, #0]
 800e71a:	461a      	mov	r2, r3
 800e71c:	f7ff f989 	bl	800da32 <_write>
 800e720:	1c43      	adds	r3, r0, #1
 800e722:	d102      	bne.n	800e72a <_write_r+0x1e>
 800e724:	682b      	ldr	r3, [r5, #0]
 800e726:	b103      	cbz	r3, 800e72a <_write_r+0x1e>
 800e728:	6023      	str	r3, [r4, #0]
 800e72a:	bd38      	pop	{r3, r4, r5, pc}
 800e72c:	20003250 	.word	0x20003250

0800e730 <__swsetup_r>:
 800e730:	4b32      	ldr	r3, [pc, #200]	; (800e7fc <__swsetup_r+0xcc>)
 800e732:	b570      	push	{r4, r5, r6, lr}
 800e734:	681d      	ldr	r5, [r3, #0]
 800e736:	4606      	mov	r6, r0
 800e738:	460c      	mov	r4, r1
 800e73a:	b125      	cbz	r5, 800e746 <__swsetup_r+0x16>
 800e73c:	69ab      	ldr	r3, [r5, #24]
 800e73e:	b913      	cbnz	r3, 800e746 <__swsetup_r+0x16>
 800e740:	4628      	mov	r0, r5
 800e742:	f7ff fb0d 	bl	800dd60 <__sinit>
 800e746:	4b2e      	ldr	r3, [pc, #184]	; (800e800 <__swsetup_r+0xd0>)
 800e748:	429c      	cmp	r4, r3
 800e74a:	d10f      	bne.n	800e76c <__swsetup_r+0x3c>
 800e74c:	686c      	ldr	r4, [r5, #4]
 800e74e:	89a3      	ldrh	r3, [r4, #12]
 800e750:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e754:	0719      	lsls	r1, r3, #28
 800e756:	d42c      	bmi.n	800e7b2 <__swsetup_r+0x82>
 800e758:	06dd      	lsls	r5, r3, #27
 800e75a:	d411      	bmi.n	800e780 <__swsetup_r+0x50>
 800e75c:	2309      	movs	r3, #9
 800e75e:	6033      	str	r3, [r6, #0]
 800e760:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e764:	f04f 30ff 	mov.w	r0, #4294967295
 800e768:	81a3      	strh	r3, [r4, #12]
 800e76a:	e03e      	b.n	800e7ea <__swsetup_r+0xba>
 800e76c:	4b25      	ldr	r3, [pc, #148]	; (800e804 <__swsetup_r+0xd4>)
 800e76e:	429c      	cmp	r4, r3
 800e770:	d101      	bne.n	800e776 <__swsetup_r+0x46>
 800e772:	68ac      	ldr	r4, [r5, #8]
 800e774:	e7eb      	b.n	800e74e <__swsetup_r+0x1e>
 800e776:	4b24      	ldr	r3, [pc, #144]	; (800e808 <__swsetup_r+0xd8>)
 800e778:	429c      	cmp	r4, r3
 800e77a:	bf08      	it	eq
 800e77c:	68ec      	ldreq	r4, [r5, #12]
 800e77e:	e7e6      	b.n	800e74e <__swsetup_r+0x1e>
 800e780:	0758      	lsls	r0, r3, #29
 800e782:	d512      	bpl.n	800e7aa <__swsetup_r+0x7a>
 800e784:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e786:	b141      	cbz	r1, 800e79a <__swsetup_r+0x6a>
 800e788:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e78c:	4299      	cmp	r1, r3
 800e78e:	d002      	beq.n	800e796 <__swsetup_r+0x66>
 800e790:	4630      	mov	r0, r6
 800e792:	f000 f99d 	bl	800ead0 <_free_r>
 800e796:	2300      	movs	r3, #0
 800e798:	6363      	str	r3, [r4, #52]	; 0x34
 800e79a:	89a3      	ldrh	r3, [r4, #12]
 800e79c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e7a0:	81a3      	strh	r3, [r4, #12]
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	6063      	str	r3, [r4, #4]
 800e7a6:	6923      	ldr	r3, [r4, #16]
 800e7a8:	6023      	str	r3, [r4, #0]
 800e7aa:	89a3      	ldrh	r3, [r4, #12]
 800e7ac:	f043 0308 	orr.w	r3, r3, #8
 800e7b0:	81a3      	strh	r3, [r4, #12]
 800e7b2:	6923      	ldr	r3, [r4, #16]
 800e7b4:	b94b      	cbnz	r3, 800e7ca <__swsetup_r+0x9a>
 800e7b6:	89a3      	ldrh	r3, [r4, #12]
 800e7b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e7bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e7c0:	d003      	beq.n	800e7ca <__swsetup_r+0x9a>
 800e7c2:	4621      	mov	r1, r4
 800e7c4:	4630      	mov	r0, r6
 800e7c6:	f000 f929 	bl	800ea1c <__smakebuf_r>
 800e7ca:	89a0      	ldrh	r0, [r4, #12]
 800e7cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e7d0:	f010 0301 	ands.w	r3, r0, #1
 800e7d4:	d00a      	beq.n	800e7ec <__swsetup_r+0xbc>
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	60a3      	str	r3, [r4, #8]
 800e7da:	6963      	ldr	r3, [r4, #20]
 800e7dc:	425b      	negs	r3, r3
 800e7de:	61a3      	str	r3, [r4, #24]
 800e7e0:	6923      	ldr	r3, [r4, #16]
 800e7e2:	b943      	cbnz	r3, 800e7f6 <__swsetup_r+0xc6>
 800e7e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e7e8:	d1ba      	bne.n	800e760 <__swsetup_r+0x30>
 800e7ea:	bd70      	pop	{r4, r5, r6, pc}
 800e7ec:	0781      	lsls	r1, r0, #30
 800e7ee:	bf58      	it	pl
 800e7f0:	6963      	ldrpl	r3, [r4, #20]
 800e7f2:	60a3      	str	r3, [r4, #8]
 800e7f4:	e7f4      	b.n	800e7e0 <__swsetup_r+0xb0>
 800e7f6:	2000      	movs	r0, #0
 800e7f8:	e7f7      	b.n	800e7ea <__swsetup_r+0xba>
 800e7fa:	bf00      	nop
 800e7fc:	20000040 	.word	0x20000040
 800e800:	0800ff04 	.word	0x0800ff04
 800e804:	0800ff24 	.word	0x0800ff24
 800e808:	0800fee4 	.word	0x0800fee4

0800e80c <_close_r>:
 800e80c:	b538      	push	{r3, r4, r5, lr}
 800e80e:	2300      	movs	r3, #0
 800e810:	4d05      	ldr	r5, [pc, #20]	; (800e828 <_close_r+0x1c>)
 800e812:	4604      	mov	r4, r0
 800e814:	4608      	mov	r0, r1
 800e816:	602b      	str	r3, [r5, #0]
 800e818:	f7ff f954 	bl	800dac4 <_close>
 800e81c:	1c43      	adds	r3, r0, #1
 800e81e:	d102      	bne.n	800e826 <_close_r+0x1a>
 800e820:	682b      	ldr	r3, [r5, #0]
 800e822:	b103      	cbz	r3, 800e826 <_close_r+0x1a>
 800e824:	6023      	str	r3, [r4, #0]
 800e826:	bd38      	pop	{r3, r4, r5, pc}
 800e828:	20003250 	.word	0x20003250

0800e82c <__sflush_r>:
 800e82c:	898a      	ldrh	r2, [r1, #12]
 800e82e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e832:	4605      	mov	r5, r0
 800e834:	0710      	lsls	r0, r2, #28
 800e836:	460c      	mov	r4, r1
 800e838:	d458      	bmi.n	800e8ec <__sflush_r+0xc0>
 800e83a:	684b      	ldr	r3, [r1, #4]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	dc05      	bgt.n	800e84c <__sflush_r+0x20>
 800e840:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e842:	2b00      	cmp	r3, #0
 800e844:	dc02      	bgt.n	800e84c <__sflush_r+0x20>
 800e846:	2000      	movs	r0, #0
 800e848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e84c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e84e:	2e00      	cmp	r6, #0
 800e850:	d0f9      	beq.n	800e846 <__sflush_r+0x1a>
 800e852:	2300      	movs	r3, #0
 800e854:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e858:	682f      	ldr	r7, [r5, #0]
 800e85a:	602b      	str	r3, [r5, #0]
 800e85c:	d032      	beq.n	800e8c4 <__sflush_r+0x98>
 800e85e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e860:	89a3      	ldrh	r3, [r4, #12]
 800e862:	075a      	lsls	r2, r3, #29
 800e864:	d505      	bpl.n	800e872 <__sflush_r+0x46>
 800e866:	6863      	ldr	r3, [r4, #4]
 800e868:	1ac0      	subs	r0, r0, r3
 800e86a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e86c:	b10b      	cbz	r3, 800e872 <__sflush_r+0x46>
 800e86e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e870:	1ac0      	subs	r0, r0, r3
 800e872:	2300      	movs	r3, #0
 800e874:	4602      	mov	r2, r0
 800e876:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e878:	4628      	mov	r0, r5
 800e87a:	6a21      	ldr	r1, [r4, #32]
 800e87c:	47b0      	blx	r6
 800e87e:	1c43      	adds	r3, r0, #1
 800e880:	89a3      	ldrh	r3, [r4, #12]
 800e882:	d106      	bne.n	800e892 <__sflush_r+0x66>
 800e884:	6829      	ldr	r1, [r5, #0]
 800e886:	291d      	cmp	r1, #29
 800e888:	d82c      	bhi.n	800e8e4 <__sflush_r+0xb8>
 800e88a:	4a2a      	ldr	r2, [pc, #168]	; (800e934 <__sflush_r+0x108>)
 800e88c:	40ca      	lsrs	r2, r1
 800e88e:	07d6      	lsls	r6, r2, #31
 800e890:	d528      	bpl.n	800e8e4 <__sflush_r+0xb8>
 800e892:	2200      	movs	r2, #0
 800e894:	6062      	str	r2, [r4, #4]
 800e896:	6922      	ldr	r2, [r4, #16]
 800e898:	04d9      	lsls	r1, r3, #19
 800e89a:	6022      	str	r2, [r4, #0]
 800e89c:	d504      	bpl.n	800e8a8 <__sflush_r+0x7c>
 800e89e:	1c42      	adds	r2, r0, #1
 800e8a0:	d101      	bne.n	800e8a6 <__sflush_r+0x7a>
 800e8a2:	682b      	ldr	r3, [r5, #0]
 800e8a4:	b903      	cbnz	r3, 800e8a8 <__sflush_r+0x7c>
 800e8a6:	6560      	str	r0, [r4, #84]	; 0x54
 800e8a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e8aa:	602f      	str	r7, [r5, #0]
 800e8ac:	2900      	cmp	r1, #0
 800e8ae:	d0ca      	beq.n	800e846 <__sflush_r+0x1a>
 800e8b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e8b4:	4299      	cmp	r1, r3
 800e8b6:	d002      	beq.n	800e8be <__sflush_r+0x92>
 800e8b8:	4628      	mov	r0, r5
 800e8ba:	f000 f909 	bl	800ead0 <_free_r>
 800e8be:	2000      	movs	r0, #0
 800e8c0:	6360      	str	r0, [r4, #52]	; 0x34
 800e8c2:	e7c1      	b.n	800e848 <__sflush_r+0x1c>
 800e8c4:	6a21      	ldr	r1, [r4, #32]
 800e8c6:	2301      	movs	r3, #1
 800e8c8:	4628      	mov	r0, r5
 800e8ca:	47b0      	blx	r6
 800e8cc:	1c41      	adds	r1, r0, #1
 800e8ce:	d1c7      	bne.n	800e860 <__sflush_r+0x34>
 800e8d0:	682b      	ldr	r3, [r5, #0]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d0c4      	beq.n	800e860 <__sflush_r+0x34>
 800e8d6:	2b1d      	cmp	r3, #29
 800e8d8:	d001      	beq.n	800e8de <__sflush_r+0xb2>
 800e8da:	2b16      	cmp	r3, #22
 800e8dc:	d101      	bne.n	800e8e2 <__sflush_r+0xb6>
 800e8de:	602f      	str	r7, [r5, #0]
 800e8e0:	e7b1      	b.n	800e846 <__sflush_r+0x1a>
 800e8e2:	89a3      	ldrh	r3, [r4, #12]
 800e8e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8e8:	81a3      	strh	r3, [r4, #12]
 800e8ea:	e7ad      	b.n	800e848 <__sflush_r+0x1c>
 800e8ec:	690f      	ldr	r7, [r1, #16]
 800e8ee:	2f00      	cmp	r7, #0
 800e8f0:	d0a9      	beq.n	800e846 <__sflush_r+0x1a>
 800e8f2:	0793      	lsls	r3, r2, #30
 800e8f4:	bf18      	it	ne
 800e8f6:	2300      	movne	r3, #0
 800e8f8:	680e      	ldr	r6, [r1, #0]
 800e8fa:	bf08      	it	eq
 800e8fc:	694b      	ldreq	r3, [r1, #20]
 800e8fe:	eba6 0807 	sub.w	r8, r6, r7
 800e902:	600f      	str	r7, [r1, #0]
 800e904:	608b      	str	r3, [r1, #8]
 800e906:	f1b8 0f00 	cmp.w	r8, #0
 800e90a:	dd9c      	ble.n	800e846 <__sflush_r+0x1a>
 800e90c:	4643      	mov	r3, r8
 800e90e:	463a      	mov	r2, r7
 800e910:	4628      	mov	r0, r5
 800e912:	6a21      	ldr	r1, [r4, #32]
 800e914:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e916:	47b0      	blx	r6
 800e918:	2800      	cmp	r0, #0
 800e91a:	dc06      	bgt.n	800e92a <__sflush_r+0xfe>
 800e91c:	89a3      	ldrh	r3, [r4, #12]
 800e91e:	f04f 30ff 	mov.w	r0, #4294967295
 800e922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e926:	81a3      	strh	r3, [r4, #12]
 800e928:	e78e      	b.n	800e848 <__sflush_r+0x1c>
 800e92a:	4407      	add	r7, r0
 800e92c:	eba8 0800 	sub.w	r8, r8, r0
 800e930:	e7e9      	b.n	800e906 <__sflush_r+0xda>
 800e932:	bf00      	nop
 800e934:	20400001 	.word	0x20400001

0800e938 <_fflush_r>:
 800e938:	b538      	push	{r3, r4, r5, lr}
 800e93a:	690b      	ldr	r3, [r1, #16]
 800e93c:	4605      	mov	r5, r0
 800e93e:	460c      	mov	r4, r1
 800e940:	b913      	cbnz	r3, 800e948 <_fflush_r+0x10>
 800e942:	2500      	movs	r5, #0
 800e944:	4628      	mov	r0, r5
 800e946:	bd38      	pop	{r3, r4, r5, pc}
 800e948:	b118      	cbz	r0, 800e952 <_fflush_r+0x1a>
 800e94a:	6983      	ldr	r3, [r0, #24]
 800e94c:	b90b      	cbnz	r3, 800e952 <_fflush_r+0x1a>
 800e94e:	f7ff fa07 	bl	800dd60 <__sinit>
 800e952:	4b14      	ldr	r3, [pc, #80]	; (800e9a4 <_fflush_r+0x6c>)
 800e954:	429c      	cmp	r4, r3
 800e956:	d11b      	bne.n	800e990 <_fflush_r+0x58>
 800e958:	686c      	ldr	r4, [r5, #4]
 800e95a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d0ef      	beq.n	800e942 <_fflush_r+0xa>
 800e962:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e964:	07d0      	lsls	r0, r2, #31
 800e966:	d404      	bmi.n	800e972 <_fflush_r+0x3a>
 800e968:	0599      	lsls	r1, r3, #22
 800e96a:	d402      	bmi.n	800e972 <_fflush_r+0x3a>
 800e96c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e96e:	f7ff fa95 	bl	800de9c <__retarget_lock_acquire_recursive>
 800e972:	4628      	mov	r0, r5
 800e974:	4621      	mov	r1, r4
 800e976:	f7ff ff59 	bl	800e82c <__sflush_r>
 800e97a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e97c:	4605      	mov	r5, r0
 800e97e:	07da      	lsls	r2, r3, #31
 800e980:	d4e0      	bmi.n	800e944 <_fflush_r+0xc>
 800e982:	89a3      	ldrh	r3, [r4, #12]
 800e984:	059b      	lsls	r3, r3, #22
 800e986:	d4dd      	bmi.n	800e944 <_fflush_r+0xc>
 800e988:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e98a:	f7ff fa88 	bl	800de9e <__retarget_lock_release_recursive>
 800e98e:	e7d9      	b.n	800e944 <_fflush_r+0xc>
 800e990:	4b05      	ldr	r3, [pc, #20]	; (800e9a8 <_fflush_r+0x70>)
 800e992:	429c      	cmp	r4, r3
 800e994:	d101      	bne.n	800e99a <_fflush_r+0x62>
 800e996:	68ac      	ldr	r4, [r5, #8]
 800e998:	e7df      	b.n	800e95a <_fflush_r+0x22>
 800e99a:	4b04      	ldr	r3, [pc, #16]	; (800e9ac <_fflush_r+0x74>)
 800e99c:	429c      	cmp	r4, r3
 800e99e:	bf08      	it	eq
 800e9a0:	68ec      	ldreq	r4, [r5, #12]
 800e9a2:	e7da      	b.n	800e95a <_fflush_r+0x22>
 800e9a4:	0800ff04 	.word	0x0800ff04
 800e9a8:	0800ff24 	.word	0x0800ff24
 800e9ac:	0800fee4 	.word	0x0800fee4

0800e9b0 <_lseek_r>:
 800e9b0:	b538      	push	{r3, r4, r5, lr}
 800e9b2:	4604      	mov	r4, r0
 800e9b4:	4608      	mov	r0, r1
 800e9b6:	4611      	mov	r1, r2
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	4d05      	ldr	r5, [pc, #20]	; (800e9d0 <_lseek_r+0x20>)
 800e9bc:	602a      	str	r2, [r5, #0]
 800e9be:	461a      	mov	r2, r3
 800e9c0:	f7ff f8a4 	bl	800db0c <_lseek>
 800e9c4:	1c43      	adds	r3, r0, #1
 800e9c6:	d102      	bne.n	800e9ce <_lseek_r+0x1e>
 800e9c8:	682b      	ldr	r3, [r5, #0]
 800e9ca:	b103      	cbz	r3, 800e9ce <_lseek_r+0x1e>
 800e9cc:	6023      	str	r3, [r4, #0]
 800e9ce:	bd38      	pop	{r3, r4, r5, pc}
 800e9d0:	20003250 	.word	0x20003250

0800e9d4 <__swhatbuf_r>:
 800e9d4:	b570      	push	{r4, r5, r6, lr}
 800e9d6:	460e      	mov	r6, r1
 800e9d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9dc:	4614      	mov	r4, r2
 800e9de:	2900      	cmp	r1, #0
 800e9e0:	461d      	mov	r5, r3
 800e9e2:	b096      	sub	sp, #88	; 0x58
 800e9e4:	da07      	bge.n	800e9f6 <__swhatbuf_r+0x22>
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	602b      	str	r3, [r5, #0]
 800e9ea:	89b3      	ldrh	r3, [r6, #12]
 800e9ec:	061a      	lsls	r2, r3, #24
 800e9ee:	d410      	bmi.n	800ea12 <__swhatbuf_r+0x3e>
 800e9f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e9f4:	e00e      	b.n	800ea14 <__swhatbuf_r+0x40>
 800e9f6:	466a      	mov	r2, sp
 800e9f8:	f000 f8c8 	bl	800eb8c <_fstat_r>
 800e9fc:	2800      	cmp	r0, #0
 800e9fe:	dbf2      	blt.n	800e9e6 <__swhatbuf_r+0x12>
 800ea00:	9a01      	ldr	r2, [sp, #4]
 800ea02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ea06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ea0a:	425a      	negs	r2, r3
 800ea0c:	415a      	adcs	r2, r3
 800ea0e:	602a      	str	r2, [r5, #0]
 800ea10:	e7ee      	b.n	800e9f0 <__swhatbuf_r+0x1c>
 800ea12:	2340      	movs	r3, #64	; 0x40
 800ea14:	2000      	movs	r0, #0
 800ea16:	6023      	str	r3, [r4, #0]
 800ea18:	b016      	add	sp, #88	; 0x58
 800ea1a:	bd70      	pop	{r4, r5, r6, pc}

0800ea1c <__smakebuf_r>:
 800ea1c:	898b      	ldrh	r3, [r1, #12]
 800ea1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ea20:	079d      	lsls	r5, r3, #30
 800ea22:	4606      	mov	r6, r0
 800ea24:	460c      	mov	r4, r1
 800ea26:	d507      	bpl.n	800ea38 <__smakebuf_r+0x1c>
 800ea28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ea2c:	6023      	str	r3, [r4, #0]
 800ea2e:	6123      	str	r3, [r4, #16]
 800ea30:	2301      	movs	r3, #1
 800ea32:	6163      	str	r3, [r4, #20]
 800ea34:	b002      	add	sp, #8
 800ea36:	bd70      	pop	{r4, r5, r6, pc}
 800ea38:	466a      	mov	r2, sp
 800ea3a:	ab01      	add	r3, sp, #4
 800ea3c:	f7ff ffca 	bl	800e9d4 <__swhatbuf_r>
 800ea40:	9900      	ldr	r1, [sp, #0]
 800ea42:	4605      	mov	r5, r0
 800ea44:	4630      	mov	r0, r6
 800ea46:	f7ff fa2b 	bl	800dea0 <_malloc_r>
 800ea4a:	b948      	cbnz	r0, 800ea60 <__smakebuf_r+0x44>
 800ea4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea50:	059a      	lsls	r2, r3, #22
 800ea52:	d4ef      	bmi.n	800ea34 <__smakebuf_r+0x18>
 800ea54:	f023 0303 	bic.w	r3, r3, #3
 800ea58:	f043 0302 	orr.w	r3, r3, #2
 800ea5c:	81a3      	strh	r3, [r4, #12]
 800ea5e:	e7e3      	b.n	800ea28 <__smakebuf_r+0xc>
 800ea60:	4b0d      	ldr	r3, [pc, #52]	; (800ea98 <__smakebuf_r+0x7c>)
 800ea62:	62b3      	str	r3, [r6, #40]	; 0x28
 800ea64:	89a3      	ldrh	r3, [r4, #12]
 800ea66:	6020      	str	r0, [r4, #0]
 800ea68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea6c:	81a3      	strh	r3, [r4, #12]
 800ea6e:	9b00      	ldr	r3, [sp, #0]
 800ea70:	6120      	str	r0, [r4, #16]
 800ea72:	6163      	str	r3, [r4, #20]
 800ea74:	9b01      	ldr	r3, [sp, #4]
 800ea76:	b15b      	cbz	r3, 800ea90 <__smakebuf_r+0x74>
 800ea78:	4630      	mov	r0, r6
 800ea7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea7e:	f000 f897 	bl	800ebb0 <_isatty_r>
 800ea82:	b128      	cbz	r0, 800ea90 <__smakebuf_r+0x74>
 800ea84:	89a3      	ldrh	r3, [r4, #12]
 800ea86:	f023 0303 	bic.w	r3, r3, #3
 800ea8a:	f043 0301 	orr.w	r3, r3, #1
 800ea8e:	81a3      	strh	r3, [r4, #12]
 800ea90:	89a0      	ldrh	r0, [r4, #12]
 800ea92:	4305      	orrs	r5, r0
 800ea94:	81a5      	strh	r5, [r4, #12]
 800ea96:	e7cd      	b.n	800ea34 <__smakebuf_r+0x18>
 800ea98:	0800dcf9 	.word	0x0800dcf9

0800ea9c <memchr>:
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	b510      	push	{r4, lr}
 800eaa0:	b2c9      	uxtb	r1, r1
 800eaa2:	4402      	add	r2, r0
 800eaa4:	4293      	cmp	r3, r2
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	d101      	bne.n	800eaae <memchr+0x12>
 800eaaa:	2000      	movs	r0, #0
 800eaac:	e003      	b.n	800eab6 <memchr+0x1a>
 800eaae:	7804      	ldrb	r4, [r0, #0]
 800eab0:	3301      	adds	r3, #1
 800eab2:	428c      	cmp	r4, r1
 800eab4:	d1f6      	bne.n	800eaa4 <memchr+0x8>
 800eab6:	bd10      	pop	{r4, pc}

0800eab8 <__malloc_lock>:
 800eab8:	4801      	ldr	r0, [pc, #4]	; (800eac0 <__malloc_lock+0x8>)
 800eaba:	f7ff b9ef 	b.w	800de9c <__retarget_lock_acquire_recursive>
 800eabe:	bf00      	nop
 800eac0:	20003248 	.word	0x20003248

0800eac4 <__malloc_unlock>:
 800eac4:	4801      	ldr	r0, [pc, #4]	; (800eacc <__malloc_unlock+0x8>)
 800eac6:	f7ff b9ea 	b.w	800de9e <__retarget_lock_release_recursive>
 800eaca:	bf00      	nop
 800eacc:	20003248 	.word	0x20003248

0800ead0 <_free_r>:
 800ead0:	b538      	push	{r3, r4, r5, lr}
 800ead2:	4605      	mov	r5, r0
 800ead4:	2900      	cmp	r1, #0
 800ead6:	d043      	beq.n	800eb60 <_free_r+0x90>
 800ead8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eadc:	1f0c      	subs	r4, r1, #4
 800eade:	2b00      	cmp	r3, #0
 800eae0:	bfb8      	it	lt
 800eae2:	18e4      	addlt	r4, r4, r3
 800eae4:	f7ff ffe8 	bl	800eab8 <__malloc_lock>
 800eae8:	4a1e      	ldr	r2, [pc, #120]	; (800eb64 <_free_r+0x94>)
 800eaea:	6813      	ldr	r3, [r2, #0]
 800eaec:	4610      	mov	r0, r2
 800eaee:	b933      	cbnz	r3, 800eafe <_free_r+0x2e>
 800eaf0:	6063      	str	r3, [r4, #4]
 800eaf2:	6014      	str	r4, [r2, #0]
 800eaf4:	4628      	mov	r0, r5
 800eaf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eafa:	f7ff bfe3 	b.w	800eac4 <__malloc_unlock>
 800eafe:	42a3      	cmp	r3, r4
 800eb00:	d90a      	bls.n	800eb18 <_free_r+0x48>
 800eb02:	6821      	ldr	r1, [r4, #0]
 800eb04:	1862      	adds	r2, r4, r1
 800eb06:	4293      	cmp	r3, r2
 800eb08:	bf01      	itttt	eq
 800eb0a:	681a      	ldreq	r2, [r3, #0]
 800eb0c:	685b      	ldreq	r3, [r3, #4]
 800eb0e:	1852      	addeq	r2, r2, r1
 800eb10:	6022      	streq	r2, [r4, #0]
 800eb12:	6063      	str	r3, [r4, #4]
 800eb14:	6004      	str	r4, [r0, #0]
 800eb16:	e7ed      	b.n	800eaf4 <_free_r+0x24>
 800eb18:	461a      	mov	r2, r3
 800eb1a:	685b      	ldr	r3, [r3, #4]
 800eb1c:	b10b      	cbz	r3, 800eb22 <_free_r+0x52>
 800eb1e:	42a3      	cmp	r3, r4
 800eb20:	d9fa      	bls.n	800eb18 <_free_r+0x48>
 800eb22:	6811      	ldr	r1, [r2, #0]
 800eb24:	1850      	adds	r0, r2, r1
 800eb26:	42a0      	cmp	r0, r4
 800eb28:	d10b      	bne.n	800eb42 <_free_r+0x72>
 800eb2a:	6820      	ldr	r0, [r4, #0]
 800eb2c:	4401      	add	r1, r0
 800eb2e:	1850      	adds	r0, r2, r1
 800eb30:	4283      	cmp	r3, r0
 800eb32:	6011      	str	r1, [r2, #0]
 800eb34:	d1de      	bne.n	800eaf4 <_free_r+0x24>
 800eb36:	6818      	ldr	r0, [r3, #0]
 800eb38:	685b      	ldr	r3, [r3, #4]
 800eb3a:	4401      	add	r1, r0
 800eb3c:	6011      	str	r1, [r2, #0]
 800eb3e:	6053      	str	r3, [r2, #4]
 800eb40:	e7d8      	b.n	800eaf4 <_free_r+0x24>
 800eb42:	d902      	bls.n	800eb4a <_free_r+0x7a>
 800eb44:	230c      	movs	r3, #12
 800eb46:	602b      	str	r3, [r5, #0]
 800eb48:	e7d4      	b.n	800eaf4 <_free_r+0x24>
 800eb4a:	6820      	ldr	r0, [r4, #0]
 800eb4c:	1821      	adds	r1, r4, r0
 800eb4e:	428b      	cmp	r3, r1
 800eb50:	bf01      	itttt	eq
 800eb52:	6819      	ldreq	r1, [r3, #0]
 800eb54:	685b      	ldreq	r3, [r3, #4]
 800eb56:	1809      	addeq	r1, r1, r0
 800eb58:	6021      	streq	r1, [r4, #0]
 800eb5a:	6063      	str	r3, [r4, #4]
 800eb5c:	6054      	str	r4, [r2, #4]
 800eb5e:	e7c9      	b.n	800eaf4 <_free_r+0x24>
 800eb60:	bd38      	pop	{r3, r4, r5, pc}
 800eb62:	bf00      	nop
 800eb64:	20003020 	.word	0x20003020

0800eb68 <_read_r>:
 800eb68:	b538      	push	{r3, r4, r5, lr}
 800eb6a:	4604      	mov	r4, r0
 800eb6c:	4608      	mov	r0, r1
 800eb6e:	4611      	mov	r1, r2
 800eb70:	2200      	movs	r2, #0
 800eb72:	4d05      	ldr	r5, [pc, #20]	; (800eb88 <_read_r+0x20>)
 800eb74:	602a      	str	r2, [r5, #0]
 800eb76:	461a      	mov	r2, r3
 800eb78:	f7fe ff3e 	bl	800d9f8 <_read>
 800eb7c:	1c43      	adds	r3, r0, #1
 800eb7e:	d102      	bne.n	800eb86 <_read_r+0x1e>
 800eb80:	682b      	ldr	r3, [r5, #0]
 800eb82:	b103      	cbz	r3, 800eb86 <_read_r+0x1e>
 800eb84:	6023      	str	r3, [r4, #0]
 800eb86:	bd38      	pop	{r3, r4, r5, pc}
 800eb88:	20003250 	.word	0x20003250

0800eb8c <_fstat_r>:
 800eb8c:	b538      	push	{r3, r4, r5, lr}
 800eb8e:	2300      	movs	r3, #0
 800eb90:	4d06      	ldr	r5, [pc, #24]	; (800ebac <_fstat_r+0x20>)
 800eb92:	4604      	mov	r4, r0
 800eb94:	4608      	mov	r0, r1
 800eb96:	4611      	mov	r1, r2
 800eb98:	602b      	str	r3, [r5, #0]
 800eb9a:	f7fe ff9e 	bl	800dada <_fstat>
 800eb9e:	1c43      	adds	r3, r0, #1
 800eba0:	d102      	bne.n	800eba8 <_fstat_r+0x1c>
 800eba2:	682b      	ldr	r3, [r5, #0]
 800eba4:	b103      	cbz	r3, 800eba8 <_fstat_r+0x1c>
 800eba6:	6023      	str	r3, [r4, #0]
 800eba8:	bd38      	pop	{r3, r4, r5, pc}
 800ebaa:	bf00      	nop
 800ebac:	20003250 	.word	0x20003250

0800ebb0 <_isatty_r>:
 800ebb0:	b538      	push	{r3, r4, r5, lr}
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	4d05      	ldr	r5, [pc, #20]	; (800ebcc <_isatty_r+0x1c>)
 800ebb6:	4604      	mov	r4, r0
 800ebb8:	4608      	mov	r0, r1
 800ebba:	602b      	str	r3, [r5, #0]
 800ebbc:	f7fe ff9c 	bl	800daf8 <_isatty>
 800ebc0:	1c43      	adds	r3, r0, #1
 800ebc2:	d102      	bne.n	800ebca <_isatty_r+0x1a>
 800ebc4:	682b      	ldr	r3, [r5, #0]
 800ebc6:	b103      	cbz	r3, 800ebca <_isatty_r+0x1a>
 800ebc8:	6023      	str	r3, [r4, #0]
 800ebca:	bd38      	pop	{r3, r4, r5, pc}
 800ebcc:	20003250 	.word	0x20003250

0800ebd0 <pow>:
 800ebd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebd4:	461f      	mov	r7, r3
 800ebd6:	4680      	mov	r8, r0
 800ebd8:	4689      	mov	r9, r1
 800ebda:	4616      	mov	r6, r2
 800ebdc:	f000 f8a4 	bl	800ed28 <__ieee754_pow>
 800ebe0:	4b4d      	ldr	r3, [pc, #308]	; (800ed18 <pow+0x148>)
 800ebe2:	4604      	mov	r4, r0
 800ebe4:	f993 3000 	ldrsb.w	r3, [r3]
 800ebe8:	460d      	mov	r5, r1
 800ebea:	3301      	adds	r3, #1
 800ebec:	d015      	beq.n	800ec1a <pow+0x4a>
 800ebee:	4632      	mov	r2, r6
 800ebf0:	463b      	mov	r3, r7
 800ebf2:	4630      	mov	r0, r6
 800ebf4:	4639      	mov	r1, r7
 800ebf6:	f7f1 ff71 	bl	8000adc <__aeabi_dcmpun>
 800ebfa:	b970      	cbnz	r0, 800ec1a <pow+0x4a>
 800ebfc:	4642      	mov	r2, r8
 800ebfe:	464b      	mov	r3, r9
 800ec00:	4640      	mov	r0, r8
 800ec02:	4649      	mov	r1, r9
 800ec04:	f7f1 ff6a 	bl	8000adc <__aeabi_dcmpun>
 800ec08:	2200      	movs	r2, #0
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	b148      	cbz	r0, 800ec22 <pow+0x52>
 800ec0e:	4630      	mov	r0, r6
 800ec10:	4639      	mov	r1, r7
 800ec12:	f7f1 ff31 	bl	8000a78 <__aeabi_dcmpeq>
 800ec16:	2800      	cmp	r0, #0
 800ec18:	d17b      	bne.n	800ed12 <pow+0x142>
 800ec1a:	4620      	mov	r0, r4
 800ec1c:	4629      	mov	r1, r5
 800ec1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec22:	4640      	mov	r0, r8
 800ec24:	4649      	mov	r1, r9
 800ec26:	f7f1 ff27 	bl	8000a78 <__aeabi_dcmpeq>
 800ec2a:	b1e0      	cbz	r0, 800ec66 <pow+0x96>
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	2300      	movs	r3, #0
 800ec30:	4630      	mov	r0, r6
 800ec32:	4639      	mov	r1, r7
 800ec34:	f7f1 ff20 	bl	8000a78 <__aeabi_dcmpeq>
 800ec38:	2800      	cmp	r0, #0
 800ec3a:	d16a      	bne.n	800ed12 <pow+0x142>
 800ec3c:	4630      	mov	r0, r6
 800ec3e:	4639      	mov	r1, r7
 800ec40:	f000 fe37 	bl	800f8b2 <finite>
 800ec44:	2800      	cmp	r0, #0
 800ec46:	d0e8      	beq.n	800ec1a <pow+0x4a>
 800ec48:	2200      	movs	r2, #0
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	4630      	mov	r0, r6
 800ec4e:	4639      	mov	r1, r7
 800ec50:	f7f1 ff1c 	bl	8000a8c <__aeabi_dcmplt>
 800ec54:	2800      	cmp	r0, #0
 800ec56:	d0e0      	beq.n	800ec1a <pow+0x4a>
 800ec58:	f7fe ffbe 	bl	800dbd8 <__errno>
 800ec5c:	2321      	movs	r3, #33	; 0x21
 800ec5e:	2400      	movs	r4, #0
 800ec60:	6003      	str	r3, [r0, #0]
 800ec62:	4d2e      	ldr	r5, [pc, #184]	; (800ed1c <pow+0x14c>)
 800ec64:	e7d9      	b.n	800ec1a <pow+0x4a>
 800ec66:	4620      	mov	r0, r4
 800ec68:	4629      	mov	r1, r5
 800ec6a:	f000 fe22 	bl	800f8b2 <finite>
 800ec6e:	bba8      	cbnz	r0, 800ecdc <pow+0x10c>
 800ec70:	4640      	mov	r0, r8
 800ec72:	4649      	mov	r1, r9
 800ec74:	f000 fe1d 	bl	800f8b2 <finite>
 800ec78:	b380      	cbz	r0, 800ecdc <pow+0x10c>
 800ec7a:	4630      	mov	r0, r6
 800ec7c:	4639      	mov	r1, r7
 800ec7e:	f000 fe18 	bl	800f8b2 <finite>
 800ec82:	b358      	cbz	r0, 800ecdc <pow+0x10c>
 800ec84:	4622      	mov	r2, r4
 800ec86:	462b      	mov	r3, r5
 800ec88:	4620      	mov	r0, r4
 800ec8a:	4629      	mov	r1, r5
 800ec8c:	f7f1 ff26 	bl	8000adc <__aeabi_dcmpun>
 800ec90:	b160      	cbz	r0, 800ecac <pow+0xdc>
 800ec92:	f7fe ffa1 	bl	800dbd8 <__errno>
 800ec96:	2321      	movs	r3, #33	; 0x21
 800ec98:	2200      	movs	r2, #0
 800ec9a:	6003      	str	r3, [r0, #0]
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	4610      	mov	r0, r2
 800eca0:	4619      	mov	r1, r3
 800eca2:	f7f1 fdab 	bl	80007fc <__aeabi_ddiv>
 800eca6:	4604      	mov	r4, r0
 800eca8:	460d      	mov	r5, r1
 800ecaa:	e7b6      	b.n	800ec1a <pow+0x4a>
 800ecac:	f7fe ff94 	bl	800dbd8 <__errno>
 800ecb0:	2322      	movs	r3, #34	; 0x22
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	6003      	str	r3, [r0, #0]
 800ecb6:	4649      	mov	r1, r9
 800ecb8:	2300      	movs	r3, #0
 800ecba:	4640      	mov	r0, r8
 800ecbc:	f7f1 fee6 	bl	8000a8c <__aeabi_dcmplt>
 800ecc0:	2400      	movs	r4, #0
 800ecc2:	b148      	cbz	r0, 800ecd8 <pow+0x108>
 800ecc4:	4630      	mov	r0, r6
 800ecc6:	4639      	mov	r1, r7
 800ecc8:	f000 fe00 	bl	800f8cc <rint>
 800eccc:	4632      	mov	r2, r6
 800ecce:	463b      	mov	r3, r7
 800ecd0:	f7f1 fed2 	bl	8000a78 <__aeabi_dcmpeq>
 800ecd4:	2800      	cmp	r0, #0
 800ecd6:	d0c4      	beq.n	800ec62 <pow+0x92>
 800ecd8:	4d11      	ldr	r5, [pc, #68]	; (800ed20 <pow+0x150>)
 800ecda:	e79e      	b.n	800ec1a <pow+0x4a>
 800ecdc:	2200      	movs	r2, #0
 800ecde:	2300      	movs	r3, #0
 800ece0:	4620      	mov	r0, r4
 800ece2:	4629      	mov	r1, r5
 800ece4:	f7f1 fec8 	bl	8000a78 <__aeabi_dcmpeq>
 800ece8:	2800      	cmp	r0, #0
 800ecea:	d096      	beq.n	800ec1a <pow+0x4a>
 800ecec:	4640      	mov	r0, r8
 800ecee:	4649      	mov	r1, r9
 800ecf0:	f000 fddf 	bl	800f8b2 <finite>
 800ecf4:	2800      	cmp	r0, #0
 800ecf6:	d090      	beq.n	800ec1a <pow+0x4a>
 800ecf8:	4630      	mov	r0, r6
 800ecfa:	4639      	mov	r1, r7
 800ecfc:	f000 fdd9 	bl	800f8b2 <finite>
 800ed00:	2800      	cmp	r0, #0
 800ed02:	d08a      	beq.n	800ec1a <pow+0x4a>
 800ed04:	f7fe ff68 	bl	800dbd8 <__errno>
 800ed08:	2322      	movs	r3, #34	; 0x22
 800ed0a:	2400      	movs	r4, #0
 800ed0c:	2500      	movs	r5, #0
 800ed0e:	6003      	str	r3, [r0, #0]
 800ed10:	e783      	b.n	800ec1a <pow+0x4a>
 800ed12:	2400      	movs	r4, #0
 800ed14:	4d03      	ldr	r5, [pc, #12]	; (800ed24 <pow+0x154>)
 800ed16:	e780      	b.n	800ec1a <pow+0x4a>
 800ed18:	200000a4 	.word	0x200000a4
 800ed1c:	fff00000 	.word	0xfff00000
 800ed20:	7ff00000 	.word	0x7ff00000
 800ed24:	3ff00000 	.word	0x3ff00000

0800ed28 <__ieee754_pow>:
 800ed28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed2c:	b093      	sub	sp, #76	; 0x4c
 800ed2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ed32:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800ed36:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800ed3a:	ea55 0302 	orrs.w	r3, r5, r2
 800ed3e:	4607      	mov	r7, r0
 800ed40:	4688      	mov	r8, r1
 800ed42:	f000 84bf 	beq.w	800f6c4 <__ieee754_pow+0x99c>
 800ed46:	4b7e      	ldr	r3, [pc, #504]	; (800ef40 <__ieee754_pow+0x218>)
 800ed48:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800ed4c:	429c      	cmp	r4, r3
 800ed4e:	4689      	mov	r9, r1
 800ed50:	4682      	mov	sl, r0
 800ed52:	dc09      	bgt.n	800ed68 <__ieee754_pow+0x40>
 800ed54:	d103      	bne.n	800ed5e <__ieee754_pow+0x36>
 800ed56:	b978      	cbnz	r0, 800ed78 <__ieee754_pow+0x50>
 800ed58:	42a5      	cmp	r5, r4
 800ed5a:	dd02      	ble.n	800ed62 <__ieee754_pow+0x3a>
 800ed5c:	e00c      	b.n	800ed78 <__ieee754_pow+0x50>
 800ed5e:	429d      	cmp	r5, r3
 800ed60:	dc02      	bgt.n	800ed68 <__ieee754_pow+0x40>
 800ed62:	429d      	cmp	r5, r3
 800ed64:	d10e      	bne.n	800ed84 <__ieee754_pow+0x5c>
 800ed66:	b16a      	cbz	r2, 800ed84 <__ieee754_pow+0x5c>
 800ed68:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ed6c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ed70:	ea54 030a 	orrs.w	r3, r4, sl
 800ed74:	f000 84a6 	beq.w	800f6c4 <__ieee754_pow+0x99c>
 800ed78:	4872      	ldr	r0, [pc, #456]	; (800ef44 <__ieee754_pow+0x21c>)
 800ed7a:	b013      	add	sp, #76	; 0x4c
 800ed7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed80:	f000 bd9e 	b.w	800f8c0 <nan>
 800ed84:	f1b9 0f00 	cmp.w	r9, #0
 800ed88:	da39      	bge.n	800edfe <__ieee754_pow+0xd6>
 800ed8a:	4b6f      	ldr	r3, [pc, #444]	; (800ef48 <__ieee754_pow+0x220>)
 800ed8c:	429d      	cmp	r5, r3
 800ed8e:	dc54      	bgt.n	800ee3a <__ieee754_pow+0x112>
 800ed90:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ed94:	429d      	cmp	r5, r3
 800ed96:	f340 84a6 	ble.w	800f6e6 <__ieee754_pow+0x9be>
 800ed9a:	152b      	asrs	r3, r5, #20
 800ed9c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800eda0:	2b14      	cmp	r3, #20
 800eda2:	dd0f      	ble.n	800edc4 <__ieee754_pow+0x9c>
 800eda4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800eda8:	fa22 f103 	lsr.w	r1, r2, r3
 800edac:	fa01 f303 	lsl.w	r3, r1, r3
 800edb0:	4293      	cmp	r3, r2
 800edb2:	f040 8498 	bne.w	800f6e6 <__ieee754_pow+0x9be>
 800edb6:	f001 0101 	and.w	r1, r1, #1
 800edba:	f1c1 0302 	rsb	r3, r1, #2
 800edbe:	9300      	str	r3, [sp, #0]
 800edc0:	b182      	cbz	r2, 800ede4 <__ieee754_pow+0xbc>
 800edc2:	e05e      	b.n	800ee82 <__ieee754_pow+0x15a>
 800edc4:	2a00      	cmp	r2, #0
 800edc6:	d15a      	bne.n	800ee7e <__ieee754_pow+0x156>
 800edc8:	f1c3 0314 	rsb	r3, r3, #20
 800edcc:	fa45 f103 	asr.w	r1, r5, r3
 800edd0:	fa01 f303 	lsl.w	r3, r1, r3
 800edd4:	42ab      	cmp	r3, r5
 800edd6:	f040 8483 	bne.w	800f6e0 <__ieee754_pow+0x9b8>
 800edda:	f001 0101 	and.w	r1, r1, #1
 800edde:	f1c1 0302 	rsb	r3, r1, #2
 800ede2:	9300      	str	r3, [sp, #0]
 800ede4:	4b59      	ldr	r3, [pc, #356]	; (800ef4c <__ieee754_pow+0x224>)
 800ede6:	429d      	cmp	r5, r3
 800ede8:	d130      	bne.n	800ee4c <__ieee754_pow+0x124>
 800edea:	2e00      	cmp	r6, #0
 800edec:	f280 8474 	bge.w	800f6d8 <__ieee754_pow+0x9b0>
 800edf0:	463a      	mov	r2, r7
 800edf2:	4643      	mov	r3, r8
 800edf4:	2000      	movs	r0, #0
 800edf6:	4955      	ldr	r1, [pc, #340]	; (800ef4c <__ieee754_pow+0x224>)
 800edf8:	f7f1 fd00 	bl	80007fc <__aeabi_ddiv>
 800edfc:	e02f      	b.n	800ee5e <__ieee754_pow+0x136>
 800edfe:	2300      	movs	r3, #0
 800ee00:	9300      	str	r3, [sp, #0]
 800ee02:	2a00      	cmp	r2, #0
 800ee04:	d13d      	bne.n	800ee82 <__ieee754_pow+0x15a>
 800ee06:	4b4e      	ldr	r3, [pc, #312]	; (800ef40 <__ieee754_pow+0x218>)
 800ee08:	429d      	cmp	r5, r3
 800ee0a:	d1eb      	bne.n	800ede4 <__ieee754_pow+0xbc>
 800ee0c:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ee10:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ee14:	ea53 030a 	orrs.w	r3, r3, sl
 800ee18:	f000 8454 	beq.w	800f6c4 <__ieee754_pow+0x99c>
 800ee1c:	4b4c      	ldr	r3, [pc, #304]	; (800ef50 <__ieee754_pow+0x228>)
 800ee1e:	429c      	cmp	r4, r3
 800ee20:	dd0d      	ble.n	800ee3e <__ieee754_pow+0x116>
 800ee22:	2e00      	cmp	r6, #0
 800ee24:	f280 8454 	bge.w	800f6d0 <__ieee754_pow+0x9a8>
 800ee28:	f04f 0b00 	mov.w	fp, #0
 800ee2c:	f04f 0c00 	mov.w	ip, #0
 800ee30:	4658      	mov	r0, fp
 800ee32:	4661      	mov	r1, ip
 800ee34:	b013      	add	sp, #76	; 0x4c
 800ee36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee3a:	2302      	movs	r3, #2
 800ee3c:	e7e0      	b.n	800ee00 <__ieee754_pow+0xd8>
 800ee3e:	2e00      	cmp	r6, #0
 800ee40:	daf2      	bge.n	800ee28 <__ieee754_pow+0x100>
 800ee42:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800ee46:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800ee4a:	e7f1      	b.n	800ee30 <__ieee754_pow+0x108>
 800ee4c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800ee50:	d108      	bne.n	800ee64 <__ieee754_pow+0x13c>
 800ee52:	463a      	mov	r2, r7
 800ee54:	4643      	mov	r3, r8
 800ee56:	4638      	mov	r0, r7
 800ee58:	4641      	mov	r1, r8
 800ee5a:	f7f1 fba5 	bl	80005a8 <__aeabi_dmul>
 800ee5e:	4683      	mov	fp, r0
 800ee60:	468c      	mov	ip, r1
 800ee62:	e7e5      	b.n	800ee30 <__ieee754_pow+0x108>
 800ee64:	4b3b      	ldr	r3, [pc, #236]	; (800ef54 <__ieee754_pow+0x22c>)
 800ee66:	429e      	cmp	r6, r3
 800ee68:	d10b      	bne.n	800ee82 <__ieee754_pow+0x15a>
 800ee6a:	f1b9 0f00 	cmp.w	r9, #0
 800ee6e:	db08      	blt.n	800ee82 <__ieee754_pow+0x15a>
 800ee70:	4638      	mov	r0, r7
 800ee72:	4641      	mov	r1, r8
 800ee74:	b013      	add	sp, #76	; 0x4c
 800ee76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee7a:	f000 bc6b 	b.w	800f754 <__ieee754_sqrt>
 800ee7e:	2300      	movs	r3, #0
 800ee80:	9300      	str	r3, [sp, #0]
 800ee82:	4638      	mov	r0, r7
 800ee84:	4641      	mov	r1, r8
 800ee86:	f000 fd11 	bl	800f8ac <fabs>
 800ee8a:	4683      	mov	fp, r0
 800ee8c:	468c      	mov	ip, r1
 800ee8e:	f1ba 0f00 	cmp.w	sl, #0
 800ee92:	d129      	bne.n	800eee8 <__ieee754_pow+0x1c0>
 800ee94:	b124      	cbz	r4, 800eea0 <__ieee754_pow+0x178>
 800ee96:	4b2d      	ldr	r3, [pc, #180]	; (800ef4c <__ieee754_pow+0x224>)
 800ee98:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800ee9c:	429a      	cmp	r2, r3
 800ee9e:	d123      	bne.n	800eee8 <__ieee754_pow+0x1c0>
 800eea0:	2e00      	cmp	r6, #0
 800eea2:	da07      	bge.n	800eeb4 <__ieee754_pow+0x18c>
 800eea4:	465a      	mov	r2, fp
 800eea6:	4663      	mov	r3, ip
 800eea8:	2000      	movs	r0, #0
 800eeaa:	4928      	ldr	r1, [pc, #160]	; (800ef4c <__ieee754_pow+0x224>)
 800eeac:	f7f1 fca6 	bl	80007fc <__aeabi_ddiv>
 800eeb0:	4683      	mov	fp, r0
 800eeb2:	468c      	mov	ip, r1
 800eeb4:	f1b9 0f00 	cmp.w	r9, #0
 800eeb8:	daba      	bge.n	800ee30 <__ieee754_pow+0x108>
 800eeba:	9b00      	ldr	r3, [sp, #0]
 800eebc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800eec0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800eec4:	4323      	orrs	r3, r4
 800eec6:	d108      	bne.n	800eeda <__ieee754_pow+0x1b2>
 800eec8:	465a      	mov	r2, fp
 800eeca:	4663      	mov	r3, ip
 800eecc:	4658      	mov	r0, fp
 800eece:	4661      	mov	r1, ip
 800eed0:	f7f1 f9b2 	bl	8000238 <__aeabi_dsub>
 800eed4:	4602      	mov	r2, r0
 800eed6:	460b      	mov	r3, r1
 800eed8:	e78e      	b.n	800edf8 <__ieee754_pow+0xd0>
 800eeda:	9b00      	ldr	r3, [sp, #0]
 800eedc:	2b01      	cmp	r3, #1
 800eede:	d1a7      	bne.n	800ee30 <__ieee754_pow+0x108>
 800eee0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800eee4:	469c      	mov	ip, r3
 800eee6:	e7a3      	b.n	800ee30 <__ieee754_pow+0x108>
 800eee8:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800eeec:	3b01      	subs	r3, #1
 800eeee:	930c      	str	r3, [sp, #48]	; 0x30
 800eef0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eef2:	9b00      	ldr	r3, [sp, #0]
 800eef4:	4313      	orrs	r3, r2
 800eef6:	d104      	bne.n	800ef02 <__ieee754_pow+0x1da>
 800eef8:	463a      	mov	r2, r7
 800eefa:	4643      	mov	r3, r8
 800eefc:	4638      	mov	r0, r7
 800eefe:	4641      	mov	r1, r8
 800ef00:	e7e6      	b.n	800eed0 <__ieee754_pow+0x1a8>
 800ef02:	4b15      	ldr	r3, [pc, #84]	; (800ef58 <__ieee754_pow+0x230>)
 800ef04:	429d      	cmp	r5, r3
 800ef06:	f340 80f9 	ble.w	800f0fc <__ieee754_pow+0x3d4>
 800ef0a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ef0e:	429d      	cmp	r5, r3
 800ef10:	4b0f      	ldr	r3, [pc, #60]	; (800ef50 <__ieee754_pow+0x228>)
 800ef12:	dd09      	ble.n	800ef28 <__ieee754_pow+0x200>
 800ef14:	429c      	cmp	r4, r3
 800ef16:	dc0c      	bgt.n	800ef32 <__ieee754_pow+0x20a>
 800ef18:	2e00      	cmp	r6, #0
 800ef1a:	da85      	bge.n	800ee28 <__ieee754_pow+0x100>
 800ef1c:	a306      	add	r3, pc, #24	; (adr r3, 800ef38 <__ieee754_pow+0x210>)
 800ef1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef22:	4610      	mov	r0, r2
 800ef24:	4619      	mov	r1, r3
 800ef26:	e798      	b.n	800ee5a <__ieee754_pow+0x132>
 800ef28:	429c      	cmp	r4, r3
 800ef2a:	dbf5      	blt.n	800ef18 <__ieee754_pow+0x1f0>
 800ef2c:	4b07      	ldr	r3, [pc, #28]	; (800ef4c <__ieee754_pow+0x224>)
 800ef2e:	429c      	cmp	r4, r3
 800ef30:	dd14      	ble.n	800ef5c <__ieee754_pow+0x234>
 800ef32:	2e00      	cmp	r6, #0
 800ef34:	dcf2      	bgt.n	800ef1c <__ieee754_pow+0x1f4>
 800ef36:	e777      	b.n	800ee28 <__ieee754_pow+0x100>
 800ef38:	8800759c 	.word	0x8800759c
 800ef3c:	7e37e43c 	.word	0x7e37e43c
 800ef40:	7ff00000 	.word	0x7ff00000
 800ef44:	0800ff49 	.word	0x0800ff49
 800ef48:	433fffff 	.word	0x433fffff
 800ef4c:	3ff00000 	.word	0x3ff00000
 800ef50:	3fefffff 	.word	0x3fefffff
 800ef54:	3fe00000 	.word	0x3fe00000
 800ef58:	41e00000 	.word	0x41e00000
 800ef5c:	4661      	mov	r1, ip
 800ef5e:	2200      	movs	r2, #0
 800ef60:	4658      	mov	r0, fp
 800ef62:	4b61      	ldr	r3, [pc, #388]	; (800f0e8 <__ieee754_pow+0x3c0>)
 800ef64:	f7f1 f968 	bl	8000238 <__aeabi_dsub>
 800ef68:	a355      	add	r3, pc, #340	; (adr r3, 800f0c0 <__ieee754_pow+0x398>)
 800ef6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef6e:	4604      	mov	r4, r0
 800ef70:	460d      	mov	r5, r1
 800ef72:	f7f1 fb19 	bl	80005a8 <__aeabi_dmul>
 800ef76:	a354      	add	r3, pc, #336	; (adr r3, 800f0c8 <__ieee754_pow+0x3a0>)
 800ef78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef7c:	4606      	mov	r6, r0
 800ef7e:	460f      	mov	r7, r1
 800ef80:	4620      	mov	r0, r4
 800ef82:	4629      	mov	r1, r5
 800ef84:	f7f1 fb10 	bl	80005a8 <__aeabi_dmul>
 800ef88:	2200      	movs	r2, #0
 800ef8a:	4682      	mov	sl, r0
 800ef8c:	468b      	mov	fp, r1
 800ef8e:	4620      	mov	r0, r4
 800ef90:	4629      	mov	r1, r5
 800ef92:	4b56      	ldr	r3, [pc, #344]	; (800f0ec <__ieee754_pow+0x3c4>)
 800ef94:	f7f1 fb08 	bl	80005a8 <__aeabi_dmul>
 800ef98:	4602      	mov	r2, r0
 800ef9a:	460b      	mov	r3, r1
 800ef9c:	a14c      	add	r1, pc, #304	; (adr r1, 800f0d0 <__ieee754_pow+0x3a8>)
 800ef9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800efa2:	f7f1 f949 	bl	8000238 <__aeabi_dsub>
 800efa6:	4622      	mov	r2, r4
 800efa8:	462b      	mov	r3, r5
 800efaa:	f7f1 fafd 	bl	80005a8 <__aeabi_dmul>
 800efae:	4602      	mov	r2, r0
 800efb0:	460b      	mov	r3, r1
 800efb2:	2000      	movs	r0, #0
 800efb4:	494e      	ldr	r1, [pc, #312]	; (800f0f0 <__ieee754_pow+0x3c8>)
 800efb6:	f7f1 f93f 	bl	8000238 <__aeabi_dsub>
 800efba:	4622      	mov	r2, r4
 800efbc:	462b      	mov	r3, r5
 800efbe:	4680      	mov	r8, r0
 800efc0:	4689      	mov	r9, r1
 800efc2:	4620      	mov	r0, r4
 800efc4:	4629      	mov	r1, r5
 800efc6:	f7f1 faef 	bl	80005a8 <__aeabi_dmul>
 800efca:	4602      	mov	r2, r0
 800efcc:	460b      	mov	r3, r1
 800efce:	4640      	mov	r0, r8
 800efd0:	4649      	mov	r1, r9
 800efd2:	f7f1 fae9 	bl	80005a8 <__aeabi_dmul>
 800efd6:	a340      	add	r3, pc, #256	; (adr r3, 800f0d8 <__ieee754_pow+0x3b0>)
 800efd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efdc:	f7f1 fae4 	bl	80005a8 <__aeabi_dmul>
 800efe0:	4602      	mov	r2, r0
 800efe2:	460b      	mov	r3, r1
 800efe4:	4650      	mov	r0, sl
 800efe6:	4659      	mov	r1, fp
 800efe8:	f7f1 f926 	bl	8000238 <__aeabi_dsub>
 800efec:	f04f 0a00 	mov.w	sl, #0
 800eff0:	4602      	mov	r2, r0
 800eff2:	460b      	mov	r3, r1
 800eff4:	4604      	mov	r4, r0
 800eff6:	460d      	mov	r5, r1
 800eff8:	4630      	mov	r0, r6
 800effa:	4639      	mov	r1, r7
 800effc:	f7f1 f91e 	bl	800023c <__adddf3>
 800f000:	4632      	mov	r2, r6
 800f002:	463b      	mov	r3, r7
 800f004:	4650      	mov	r0, sl
 800f006:	468b      	mov	fp, r1
 800f008:	f7f1 f916 	bl	8000238 <__aeabi_dsub>
 800f00c:	4602      	mov	r2, r0
 800f00e:	460b      	mov	r3, r1
 800f010:	4620      	mov	r0, r4
 800f012:	4629      	mov	r1, r5
 800f014:	f7f1 f910 	bl	8000238 <__aeabi_dsub>
 800f018:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f01c:	9b00      	ldr	r3, [sp, #0]
 800f01e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f020:	3b01      	subs	r3, #1
 800f022:	4313      	orrs	r3, r2
 800f024:	f04f 0600 	mov.w	r6, #0
 800f028:	f04f 0200 	mov.w	r2, #0
 800f02c:	bf0c      	ite	eq
 800f02e:	4b31      	ldreq	r3, [pc, #196]	; (800f0f4 <__ieee754_pow+0x3cc>)
 800f030:	4b2d      	ldrne	r3, [pc, #180]	; (800f0e8 <__ieee754_pow+0x3c0>)
 800f032:	4604      	mov	r4, r0
 800f034:	460d      	mov	r5, r1
 800f036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f03a:	e9cd 2300 	strd	r2, r3, [sp]
 800f03e:	4632      	mov	r2, r6
 800f040:	463b      	mov	r3, r7
 800f042:	f7f1 f8f9 	bl	8000238 <__aeabi_dsub>
 800f046:	4652      	mov	r2, sl
 800f048:	465b      	mov	r3, fp
 800f04a:	f7f1 faad 	bl	80005a8 <__aeabi_dmul>
 800f04e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f052:	4680      	mov	r8, r0
 800f054:	4689      	mov	r9, r1
 800f056:	4620      	mov	r0, r4
 800f058:	4629      	mov	r1, r5
 800f05a:	f7f1 faa5 	bl	80005a8 <__aeabi_dmul>
 800f05e:	4602      	mov	r2, r0
 800f060:	460b      	mov	r3, r1
 800f062:	4640      	mov	r0, r8
 800f064:	4649      	mov	r1, r9
 800f066:	f7f1 f8e9 	bl	800023c <__adddf3>
 800f06a:	4632      	mov	r2, r6
 800f06c:	463b      	mov	r3, r7
 800f06e:	4680      	mov	r8, r0
 800f070:	4689      	mov	r9, r1
 800f072:	4650      	mov	r0, sl
 800f074:	4659      	mov	r1, fp
 800f076:	f7f1 fa97 	bl	80005a8 <__aeabi_dmul>
 800f07a:	4604      	mov	r4, r0
 800f07c:	460d      	mov	r5, r1
 800f07e:	460b      	mov	r3, r1
 800f080:	4602      	mov	r2, r0
 800f082:	4649      	mov	r1, r9
 800f084:	4640      	mov	r0, r8
 800f086:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800f08a:	f7f1 f8d7 	bl	800023c <__adddf3>
 800f08e:	4b1a      	ldr	r3, [pc, #104]	; (800f0f8 <__ieee754_pow+0x3d0>)
 800f090:	4682      	mov	sl, r0
 800f092:	4299      	cmp	r1, r3
 800f094:	460f      	mov	r7, r1
 800f096:	460e      	mov	r6, r1
 800f098:	f340 82ed 	ble.w	800f676 <__ieee754_pow+0x94e>
 800f09c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800f0a0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800f0a4:	4303      	orrs	r3, r0
 800f0a6:	f000 81e7 	beq.w	800f478 <__ieee754_pow+0x750>
 800f0aa:	a30d      	add	r3, pc, #52	; (adr r3, 800f0e0 <__ieee754_pow+0x3b8>)
 800f0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f0b4:	f7f1 fa78 	bl	80005a8 <__aeabi_dmul>
 800f0b8:	a309      	add	r3, pc, #36	; (adr r3, 800f0e0 <__ieee754_pow+0x3b8>)
 800f0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0be:	e6cc      	b.n	800ee5a <__ieee754_pow+0x132>
 800f0c0:	60000000 	.word	0x60000000
 800f0c4:	3ff71547 	.word	0x3ff71547
 800f0c8:	f85ddf44 	.word	0xf85ddf44
 800f0cc:	3e54ae0b 	.word	0x3e54ae0b
 800f0d0:	55555555 	.word	0x55555555
 800f0d4:	3fd55555 	.word	0x3fd55555
 800f0d8:	652b82fe 	.word	0x652b82fe
 800f0dc:	3ff71547 	.word	0x3ff71547
 800f0e0:	8800759c 	.word	0x8800759c
 800f0e4:	7e37e43c 	.word	0x7e37e43c
 800f0e8:	3ff00000 	.word	0x3ff00000
 800f0ec:	3fd00000 	.word	0x3fd00000
 800f0f0:	3fe00000 	.word	0x3fe00000
 800f0f4:	bff00000 	.word	0xbff00000
 800f0f8:	408fffff 	.word	0x408fffff
 800f0fc:	4bd4      	ldr	r3, [pc, #848]	; (800f450 <__ieee754_pow+0x728>)
 800f0fe:	2200      	movs	r2, #0
 800f100:	ea09 0303 	and.w	r3, r9, r3
 800f104:	b943      	cbnz	r3, 800f118 <__ieee754_pow+0x3f0>
 800f106:	4658      	mov	r0, fp
 800f108:	4661      	mov	r1, ip
 800f10a:	4bd2      	ldr	r3, [pc, #840]	; (800f454 <__ieee754_pow+0x72c>)
 800f10c:	f7f1 fa4c 	bl	80005a8 <__aeabi_dmul>
 800f110:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800f114:	4683      	mov	fp, r0
 800f116:	460c      	mov	r4, r1
 800f118:	1523      	asrs	r3, r4, #20
 800f11a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f11e:	4413      	add	r3, r2
 800f120:	930b      	str	r3, [sp, #44]	; 0x2c
 800f122:	4bcd      	ldr	r3, [pc, #820]	; (800f458 <__ieee754_pow+0x730>)
 800f124:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f128:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800f12c:	429c      	cmp	r4, r3
 800f12e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f132:	dd08      	ble.n	800f146 <__ieee754_pow+0x41e>
 800f134:	4bc9      	ldr	r3, [pc, #804]	; (800f45c <__ieee754_pow+0x734>)
 800f136:	429c      	cmp	r4, r3
 800f138:	f340 819c 	ble.w	800f474 <__ieee754_pow+0x74c>
 800f13c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f13e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800f142:	3301      	adds	r3, #1
 800f144:	930b      	str	r3, [sp, #44]	; 0x2c
 800f146:	2600      	movs	r6, #0
 800f148:	00f3      	lsls	r3, r6, #3
 800f14a:	930d      	str	r3, [sp, #52]	; 0x34
 800f14c:	4bc4      	ldr	r3, [pc, #784]	; (800f460 <__ieee754_pow+0x738>)
 800f14e:	4658      	mov	r0, fp
 800f150:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f154:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f158:	4629      	mov	r1, r5
 800f15a:	461a      	mov	r2, r3
 800f15c:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800f160:	4623      	mov	r3, r4
 800f162:	f7f1 f869 	bl	8000238 <__aeabi_dsub>
 800f166:	46da      	mov	sl, fp
 800f168:	462b      	mov	r3, r5
 800f16a:	4652      	mov	r2, sl
 800f16c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800f170:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f174:	f7f1 f862 	bl	800023c <__adddf3>
 800f178:	4602      	mov	r2, r0
 800f17a:	460b      	mov	r3, r1
 800f17c:	2000      	movs	r0, #0
 800f17e:	49b9      	ldr	r1, [pc, #740]	; (800f464 <__ieee754_pow+0x73c>)
 800f180:	f7f1 fb3c 	bl	80007fc <__aeabi_ddiv>
 800f184:	4602      	mov	r2, r0
 800f186:	460b      	mov	r3, r1
 800f188:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f18c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800f190:	f7f1 fa0a 	bl	80005a8 <__aeabi_dmul>
 800f194:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f198:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800f19c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	46ab      	mov	fp, r5
 800f1a6:	106d      	asrs	r5, r5, #1
 800f1a8:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800f1ac:	9304      	str	r3, [sp, #16]
 800f1ae:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800f1b2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800f1b6:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800f1ba:	4640      	mov	r0, r8
 800f1bc:	4649      	mov	r1, r9
 800f1be:	4614      	mov	r4, r2
 800f1c0:	461d      	mov	r5, r3
 800f1c2:	f7f1 f9f1 	bl	80005a8 <__aeabi_dmul>
 800f1c6:	4602      	mov	r2, r0
 800f1c8:	460b      	mov	r3, r1
 800f1ca:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800f1ce:	f7f1 f833 	bl	8000238 <__aeabi_dsub>
 800f1d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f1d6:	4606      	mov	r6, r0
 800f1d8:	460f      	mov	r7, r1
 800f1da:	4620      	mov	r0, r4
 800f1dc:	4629      	mov	r1, r5
 800f1de:	f7f1 f82b 	bl	8000238 <__aeabi_dsub>
 800f1e2:	4602      	mov	r2, r0
 800f1e4:	460b      	mov	r3, r1
 800f1e6:	4650      	mov	r0, sl
 800f1e8:	4659      	mov	r1, fp
 800f1ea:	f7f1 f825 	bl	8000238 <__aeabi_dsub>
 800f1ee:	4642      	mov	r2, r8
 800f1f0:	464b      	mov	r3, r9
 800f1f2:	f7f1 f9d9 	bl	80005a8 <__aeabi_dmul>
 800f1f6:	4602      	mov	r2, r0
 800f1f8:	460b      	mov	r3, r1
 800f1fa:	4630      	mov	r0, r6
 800f1fc:	4639      	mov	r1, r7
 800f1fe:	f7f1 f81b 	bl	8000238 <__aeabi_dsub>
 800f202:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f206:	f7f1 f9cf 	bl	80005a8 <__aeabi_dmul>
 800f20a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f20e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f212:	4610      	mov	r0, r2
 800f214:	4619      	mov	r1, r3
 800f216:	f7f1 f9c7 	bl	80005a8 <__aeabi_dmul>
 800f21a:	a37b      	add	r3, pc, #492	; (adr r3, 800f408 <__ieee754_pow+0x6e0>)
 800f21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f220:	4604      	mov	r4, r0
 800f222:	460d      	mov	r5, r1
 800f224:	f7f1 f9c0 	bl	80005a8 <__aeabi_dmul>
 800f228:	a379      	add	r3, pc, #484	; (adr r3, 800f410 <__ieee754_pow+0x6e8>)
 800f22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f22e:	f7f1 f805 	bl	800023c <__adddf3>
 800f232:	4622      	mov	r2, r4
 800f234:	462b      	mov	r3, r5
 800f236:	f7f1 f9b7 	bl	80005a8 <__aeabi_dmul>
 800f23a:	a377      	add	r3, pc, #476	; (adr r3, 800f418 <__ieee754_pow+0x6f0>)
 800f23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f240:	f7f0 fffc 	bl	800023c <__adddf3>
 800f244:	4622      	mov	r2, r4
 800f246:	462b      	mov	r3, r5
 800f248:	f7f1 f9ae 	bl	80005a8 <__aeabi_dmul>
 800f24c:	a374      	add	r3, pc, #464	; (adr r3, 800f420 <__ieee754_pow+0x6f8>)
 800f24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f252:	f7f0 fff3 	bl	800023c <__adddf3>
 800f256:	4622      	mov	r2, r4
 800f258:	462b      	mov	r3, r5
 800f25a:	f7f1 f9a5 	bl	80005a8 <__aeabi_dmul>
 800f25e:	a372      	add	r3, pc, #456	; (adr r3, 800f428 <__ieee754_pow+0x700>)
 800f260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f264:	f7f0 ffea 	bl	800023c <__adddf3>
 800f268:	4622      	mov	r2, r4
 800f26a:	462b      	mov	r3, r5
 800f26c:	f7f1 f99c 	bl	80005a8 <__aeabi_dmul>
 800f270:	a36f      	add	r3, pc, #444	; (adr r3, 800f430 <__ieee754_pow+0x708>)
 800f272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f276:	f7f0 ffe1 	bl	800023c <__adddf3>
 800f27a:	4622      	mov	r2, r4
 800f27c:	4606      	mov	r6, r0
 800f27e:	460f      	mov	r7, r1
 800f280:	462b      	mov	r3, r5
 800f282:	4620      	mov	r0, r4
 800f284:	4629      	mov	r1, r5
 800f286:	f7f1 f98f 	bl	80005a8 <__aeabi_dmul>
 800f28a:	4602      	mov	r2, r0
 800f28c:	460b      	mov	r3, r1
 800f28e:	4630      	mov	r0, r6
 800f290:	4639      	mov	r1, r7
 800f292:	f7f1 f989 	bl	80005a8 <__aeabi_dmul>
 800f296:	4604      	mov	r4, r0
 800f298:	460d      	mov	r5, r1
 800f29a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f29e:	4642      	mov	r2, r8
 800f2a0:	464b      	mov	r3, r9
 800f2a2:	f7f0 ffcb 	bl	800023c <__adddf3>
 800f2a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f2aa:	f7f1 f97d 	bl	80005a8 <__aeabi_dmul>
 800f2ae:	4622      	mov	r2, r4
 800f2b0:	462b      	mov	r3, r5
 800f2b2:	f7f0 ffc3 	bl	800023c <__adddf3>
 800f2b6:	4642      	mov	r2, r8
 800f2b8:	4606      	mov	r6, r0
 800f2ba:	460f      	mov	r7, r1
 800f2bc:	464b      	mov	r3, r9
 800f2be:	4640      	mov	r0, r8
 800f2c0:	4649      	mov	r1, r9
 800f2c2:	f7f1 f971 	bl	80005a8 <__aeabi_dmul>
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	4b67      	ldr	r3, [pc, #412]	; (800f468 <__ieee754_pow+0x740>)
 800f2ca:	4682      	mov	sl, r0
 800f2cc:	468b      	mov	fp, r1
 800f2ce:	f7f0 ffb5 	bl	800023c <__adddf3>
 800f2d2:	4632      	mov	r2, r6
 800f2d4:	463b      	mov	r3, r7
 800f2d6:	f7f0 ffb1 	bl	800023c <__adddf3>
 800f2da:	9c04      	ldr	r4, [sp, #16]
 800f2dc:	460d      	mov	r5, r1
 800f2de:	4622      	mov	r2, r4
 800f2e0:	460b      	mov	r3, r1
 800f2e2:	4640      	mov	r0, r8
 800f2e4:	4649      	mov	r1, r9
 800f2e6:	f7f1 f95f 	bl	80005a8 <__aeabi_dmul>
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	4680      	mov	r8, r0
 800f2ee:	4689      	mov	r9, r1
 800f2f0:	4620      	mov	r0, r4
 800f2f2:	4629      	mov	r1, r5
 800f2f4:	4b5c      	ldr	r3, [pc, #368]	; (800f468 <__ieee754_pow+0x740>)
 800f2f6:	f7f0 ff9f 	bl	8000238 <__aeabi_dsub>
 800f2fa:	4652      	mov	r2, sl
 800f2fc:	465b      	mov	r3, fp
 800f2fe:	f7f0 ff9b 	bl	8000238 <__aeabi_dsub>
 800f302:	4602      	mov	r2, r0
 800f304:	460b      	mov	r3, r1
 800f306:	4630      	mov	r0, r6
 800f308:	4639      	mov	r1, r7
 800f30a:	f7f0 ff95 	bl	8000238 <__aeabi_dsub>
 800f30e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f312:	f7f1 f949 	bl	80005a8 <__aeabi_dmul>
 800f316:	4622      	mov	r2, r4
 800f318:	4606      	mov	r6, r0
 800f31a:	460f      	mov	r7, r1
 800f31c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f320:	462b      	mov	r3, r5
 800f322:	f7f1 f941 	bl	80005a8 <__aeabi_dmul>
 800f326:	4602      	mov	r2, r0
 800f328:	460b      	mov	r3, r1
 800f32a:	4630      	mov	r0, r6
 800f32c:	4639      	mov	r1, r7
 800f32e:	f7f0 ff85 	bl	800023c <__adddf3>
 800f332:	4606      	mov	r6, r0
 800f334:	460f      	mov	r7, r1
 800f336:	4602      	mov	r2, r0
 800f338:	460b      	mov	r3, r1
 800f33a:	4640      	mov	r0, r8
 800f33c:	4649      	mov	r1, r9
 800f33e:	f7f0 ff7d 	bl	800023c <__adddf3>
 800f342:	a33d      	add	r3, pc, #244	; (adr r3, 800f438 <__ieee754_pow+0x710>)
 800f344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f348:	9c04      	ldr	r4, [sp, #16]
 800f34a:	460d      	mov	r5, r1
 800f34c:	4620      	mov	r0, r4
 800f34e:	f7f1 f92b 	bl	80005a8 <__aeabi_dmul>
 800f352:	4642      	mov	r2, r8
 800f354:	464b      	mov	r3, r9
 800f356:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f35a:	4620      	mov	r0, r4
 800f35c:	4629      	mov	r1, r5
 800f35e:	f7f0 ff6b 	bl	8000238 <__aeabi_dsub>
 800f362:	4602      	mov	r2, r0
 800f364:	460b      	mov	r3, r1
 800f366:	4630      	mov	r0, r6
 800f368:	4639      	mov	r1, r7
 800f36a:	f7f0 ff65 	bl	8000238 <__aeabi_dsub>
 800f36e:	a334      	add	r3, pc, #208	; (adr r3, 800f440 <__ieee754_pow+0x718>)
 800f370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f374:	f7f1 f918 	bl	80005a8 <__aeabi_dmul>
 800f378:	a333      	add	r3, pc, #204	; (adr r3, 800f448 <__ieee754_pow+0x720>)
 800f37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f37e:	4606      	mov	r6, r0
 800f380:	460f      	mov	r7, r1
 800f382:	4620      	mov	r0, r4
 800f384:	4629      	mov	r1, r5
 800f386:	f7f1 f90f 	bl	80005a8 <__aeabi_dmul>
 800f38a:	4602      	mov	r2, r0
 800f38c:	460b      	mov	r3, r1
 800f38e:	4630      	mov	r0, r6
 800f390:	4639      	mov	r1, r7
 800f392:	f7f0 ff53 	bl	800023c <__adddf3>
 800f396:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f398:	4b34      	ldr	r3, [pc, #208]	; (800f46c <__ieee754_pow+0x744>)
 800f39a:	4413      	add	r3, r2
 800f39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3a0:	f7f0 ff4c 	bl	800023c <__adddf3>
 800f3a4:	4680      	mov	r8, r0
 800f3a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f3a8:	4689      	mov	r9, r1
 800f3aa:	f7f1 f893 	bl	80004d4 <__aeabi_i2d>
 800f3ae:	4604      	mov	r4, r0
 800f3b0:	460d      	mov	r5, r1
 800f3b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f3b4:	4b2e      	ldr	r3, [pc, #184]	; (800f470 <__ieee754_pow+0x748>)
 800f3b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f3ba:	4413      	add	r3, r2
 800f3bc:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f3c0:	4642      	mov	r2, r8
 800f3c2:	464b      	mov	r3, r9
 800f3c4:	f7f0 ff3a 	bl	800023c <__adddf3>
 800f3c8:	4632      	mov	r2, r6
 800f3ca:	463b      	mov	r3, r7
 800f3cc:	f7f0 ff36 	bl	800023c <__adddf3>
 800f3d0:	4622      	mov	r2, r4
 800f3d2:	462b      	mov	r3, r5
 800f3d4:	f7f0 ff32 	bl	800023c <__adddf3>
 800f3d8:	f8dd a010 	ldr.w	sl, [sp, #16]
 800f3dc:	4622      	mov	r2, r4
 800f3de:	462b      	mov	r3, r5
 800f3e0:	4650      	mov	r0, sl
 800f3e2:	468b      	mov	fp, r1
 800f3e4:	f7f0 ff28 	bl	8000238 <__aeabi_dsub>
 800f3e8:	4632      	mov	r2, r6
 800f3ea:	463b      	mov	r3, r7
 800f3ec:	f7f0 ff24 	bl	8000238 <__aeabi_dsub>
 800f3f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f3f4:	f7f0 ff20 	bl	8000238 <__aeabi_dsub>
 800f3f8:	4602      	mov	r2, r0
 800f3fa:	460b      	mov	r3, r1
 800f3fc:	4640      	mov	r0, r8
 800f3fe:	4649      	mov	r1, r9
 800f400:	e608      	b.n	800f014 <__ieee754_pow+0x2ec>
 800f402:	bf00      	nop
 800f404:	f3af 8000 	nop.w
 800f408:	4a454eef 	.word	0x4a454eef
 800f40c:	3fca7e28 	.word	0x3fca7e28
 800f410:	93c9db65 	.word	0x93c9db65
 800f414:	3fcd864a 	.word	0x3fcd864a
 800f418:	a91d4101 	.word	0xa91d4101
 800f41c:	3fd17460 	.word	0x3fd17460
 800f420:	518f264d 	.word	0x518f264d
 800f424:	3fd55555 	.word	0x3fd55555
 800f428:	db6fabff 	.word	0xdb6fabff
 800f42c:	3fdb6db6 	.word	0x3fdb6db6
 800f430:	33333303 	.word	0x33333303
 800f434:	3fe33333 	.word	0x3fe33333
 800f438:	e0000000 	.word	0xe0000000
 800f43c:	3feec709 	.word	0x3feec709
 800f440:	dc3a03fd 	.word	0xdc3a03fd
 800f444:	3feec709 	.word	0x3feec709
 800f448:	145b01f5 	.word	0x145b01f5
 800f44c:	be3e2fe0 	.word	0xbe3e2fe0
 800f450:	7ff00000 	.word	0x7ff00000
 800f454:	43400000 	.word	0x43400000
 800f458:	0003988e 	.word	0x0003988e
 800f45c:	000bb679 	.word	0x000bb679
 800f460:	0800ff78 	.word	0x0800ff78
 800f464:	3ff00000 	.word	0x3ff00000
 800f468:	40080000 	.word	0x40080000
 800f46c:	0800ff98 	.word	0x0800ff98
 800f470:	0800ff88 	.word	0x0800ff88
 800f474:	2601      	movs	r6, #1
 800f476:	e667      	b.n	800f148 <__ieee754_pow+0x420>
 800f478:	a39d      	add	r3, pc, #628	; (adr r3, 800f6f0 <__ieee754_pow+0x9c8>)
 800f47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f47e:	4640      	mov	r0, r8
 800f480:	4649      	mov	r1, r9
 800f482:	f7f0 fedb 	bl	800023c <__adddf3>
 800f486:	4622      	mov	r2, r4
 800f488:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f48c:	462b      	mov	r3, r5
 800f48e:	4650      	mov	r0, sl
 800f490:	4639      	mov	r1, r7
 800f492:	f7f0 fed1 	bl	8000238 <__aeabi_dsub>
 800f496:	4602      	mov	r2, r0
 800f498:	460b      	mov	r3, r1
 800f49a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f49e:	f7f1 fb13 	bl	8000ac8 <__aeabi_dcmpgt>
 800f4a2:	2800      	cmp	r0, #0
 800f4a4:	f47f ae01 	bne.w	800f0aa <__ieee754_pow+0x382>
 800f4a8:	4aa5      	ldr	r2, [pc, #660]	; (800f740 <__ieee754_pow+0xa18>)
 800f4aa:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800f4ae:	4293      	cmp	r3, r2
 800f4b0:	f340 8103 	ble.w	800f6ba <__ieee754_pow+0x992>
 800f4b4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800f4b8:	2000      	movs	r0, #0
 800f4ba:	151b      	asrs	r3, r3, #20
 800f4bc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800f4c0:	fa4a f303 	asr.w	r3, sl, r3
 800f4c4:	4433      	add	r3, r6
 800f4c6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f4ca:	4f9e      	ldr	r7, [pc, #632]	; (800f744 <__ieee754_pow+0xa1c>)
 800f4cc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800f4d0:	4117      	asrs	r7, r2
 800f4d2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800f4d6:	ea23 0107 	bic.w	r1, r3, r7
 800f4da:	f1c2 0214 	rsb	r2, r2, #20
 800f4de:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800f4e2:	460b      	mov	r3, r1
 800f4e4:	fa4a fa02 	asr.w	sl, sl, r2
 800f4e8:	2e00      	cmp	r6, #0
 800f4ea:	4602      	mov	r2, r0
 800f4ec:	4629      	mov	r1, r5
 800f4ee:	4620      	mov	r0, r4
 800f4f0:	bfb8      	it	lt
 800f4f2:	f1ca 0a00 	rsblt	sl, sl, #0
 800f4f6:	f7f0 fe9f 	bl	8000238 <__aeabi_dsub>
 800f4fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f502:	2400      	movs	r4, #0
 800f504:	4642      	mov	r2, r8
 800f506:	464b      	mov	r3, r9
 800f508:	f7f0 fe98 	bl	800023c <__adddf3>
 800f50c:	a37a      	add	r3, pc, #488	; (adr r3, 800f6f8 <__ieee754_pow+0x9d0>)
 800f50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f512:	4620      	mov	r0, r4
 800f514:	460d      	mov	r5, r1
 800f516:	f7f1 f847 	bl	80005a8 <__aeabi_dmul>
 800f51a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f51e:	4606      	mov	r6, r0
 800f520:	460f      	mov	r7, r1
 800f522:	4620      	mov	r0, r4
 800f524:	4629      	mov	r1, r5
 800f526:	f7f0 fe87 	bl	8000238 <__aeabi_dsub>
 800f52a:	4602      	mov	r2, r0
 800f52c:	460b      	mov	r3, r1
 800f52e:	4640      	mov	r0, r8
 800f530:	4649      	mov	r1, r9
 800f532:	f7f0 fe81 	bl	8000238 <__aeabi_dsub>
 800f536:	a372      	add	r3, pc, #456	; (adr r3, 800f700 <__ieee754_pow+0x9d8>)
 800f538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f53c:	f7f1 f834 	bl	80005a8 <__aeabi_dmul>
 800f540:	a371      	add	r3, pc, #452	; (adr r3, 800f708 <__ieee754_pow+0x9e0>)
 800f542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f546:	4680      	mov	r8, r0
 800f548:	4689      	mov	r9, r1
 800f54a:	4620      	mov	r0, r4
 800f54c:	4629      	mov	r1, r5
 800f54e:	f7f1 f82b 	bl	80005a8 <__aeabi_dmul>
 800f552:	4602      	mov	r2, r0
 800f554:	460b      	mov	r3, r1
 800f556:	4640      	mov	r0, r8
 800f558:	4649      	mov	r1, r9
 800f55a:	f7f0 fe6f 	bl	800023c <__adddf3>
 800f55e:	4604      	mov	r4, r0
 800f560:	460d      	mov	r5, r1
 800f562:	4602      	mov	r2, r0
 800f564:	460b      	mov	r3, r1
 800f566:	4630      	mov	r0, r6
 800f568:	4639      	mov	r1, r7
 800f56a:	f7f0 fe67 	bl	800023c <__adddf3>
 800f56e:	4632      	mov	r2, r6
 800f570:	463b      	mov	r3, r7
 800f572:	4680      	mov	r8, r0
 800f574:	4689      	mov	r9, r1
 800f576:	f7f0 fe5f 	bl	8000238 <__aeabi_dsub>
 800f57a:	4602      	mov	r2, r0
 800f57c:	460b      	mov	r3, r1
 800f57e:	4620      	mov	r0, r4
 800f580:	4629      	mov	r1, r5
 800f582:	f7f0 fe59 	bl	8000238 <__aeabi_dsub>
 800f586:	4642      	mov	r2, r8
 800f588:	4606      	mov	r6, r0
 800f58a:	460f      	mov	r7, r1
 800f58c:	464b      	mov	r3, r9
 800f58e:	4640      	mov	r0, r8
 800f590:	4649      	mov	r1, r9
 800f592:	f7f1 f809 	bl	80005a8 <__aeabi_dmul>
 800f596:	a35e      	add	r3, pc, #376	; (adr r3, 800f710 <__ieee754_pow+0x9e8>)
 800f598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f59c:	4604      	mov	r4, r0
 800f59e:	460d      	mov	r5, r1
 800f5a0:	f7f1 f802 	bl	80005a8 <__aeabi_dmul>
 800f5a4:	a35c      	add	r3, pc, #368	; (adr r3, 800f718 <__ieee754_pow+0x9f0>)
 800f5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5aa:	f7f0 fe45 	bl	8000238 <__aeabi_dsub>
 800f5ae:	4622      	mov	r2, r4
 800f5b0:	462b      	mov	r3, r5
 800f5b2:	f7f0 fff9 	bl	80005a8 <__aeabi_dmul>
 800f5b6:	a35a      	add	r3, pc, #360	; (adr r3, 800f720 <__ieee754_pow+0x9f8>)
 800f5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5bc:	f7f0 fe3e 	bl	800023c <__adddf3>
 800f5c0:	4622      	mov	r2, r4
 800f5c2:	462b      	mov	r3, r5
 800f5c4:	f7f0 fff0 	bl	80005a8 <__aeabi_dmul>
 800f5c8:	a357      	add	r3, pc, #348	; (adr r3, 800f728 <__ieee754_pow+0xa00>)
 800f5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ce:	f7f0 fe33 	bl	8000238 <__aeabi_dsub>
 800f5d2:	4622      	mov	r2, r4
 800f5d4:	462b      	mov	r3, r5
 800f5d6:	f7f0 ffe7 	bl	80005a8 <__aeabi_dmul>
 800f5da:	a355      	add	r3, pc, #340	; (adr r3, 800f730 <__ieee754_pow+0xa08>)
 800f5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5e0:	f7f0 fe2c 	bl	800023c <__adddf3>
 800f5e4:	4622      	mov	r2, r4
 800f5e6:	462b      	mov	r3, r5
 800f5e8:	f7f0 ffde 	bl	80005a8 <__aeabi_dmul>
 800f5ec:	4602      	mov	r2, r0
 800f5ee:	460b      	mov	r3, r1
 800f5f0:	4640      	mov	r0, r8
 800f5f2:	4649      	mov	r1, r9
 800f5f4:	f7f0 fe20 	bl	8000238 <__aeabi_dsub>
 800f5f8:	4604      	mov	r4, r0
 800f5fa:	460d      	mov	r5, r1
 800f5fc:	4602      	mov	r2, r0
 800f5fe:	460b      	mov	r3, r1
 800f600:	4640      	mov	r0, r8
 800f602:	4649      	mov	r1, r9
 800f604:	f7f0 ffd0 	bl	80005a8 <__aeabi_dmul>
 800f608:	2200      	movs	r2, #0
 800f60a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f60e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f612:	4620      	mov	r0, r4
 800f614:	4629      	mov	r1, r5
 800f616:	f7f0 fe0f 	bl	8000238 <__aeabi_dsub>
 800f61a:	4602      	mov	r2, r0
 800f61c:	460b      	mov	r3, r1
 800f61e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f622:	f7f1 f8eb 	bl	80007fc <__aeabi_ddiv>
 800f626:	4632      	mov	r2, r6
 800f628:	4604      	mov	r4, r0
 800f62a:	460d      	mov	r5, r1
 800f62c:	463b      	mov	r3, r7
 800f62e:	4640      	mov	r0, r8
 800f630:	4649      	mov	r1, r9
 800f632:	f7f0 ffb9 	bl	80005a8 <__aeabi_dmul>
 800f636:	4632      	mov	r2, r6
 800f638:	463b      	mov	r3, r7
 800f63a:	f7f0 fdff 	bl	800023c <__adddf3>
 800f63e:	4602      	mov	r2, r0
 800f640:	460b      	mov	r3, r1
 800f642:	4620      	mov	r0, r4
 800f644:	4629      	mov	r1, r5
 800f646:	f7f0 fdf7 	bl	8000238 <__aeabi_dsub>
 800f64a:	4642      	mov	r2, r8
 800f64c:	464b      	mov	r3, r9
 800f64e:	f7f0 fdf3 	bl	8000238 <__aeabi_dsub>
 800f652:	4602      	mov	r2, r0
 800f654:	460b      	mov	r3, r1
 800f656:	2000      	movs	r0, #0
 800f658:	493b      	ldr	r1, [pc, #236]	; (800f748 <__ieee754_pow+0xa20>)
 800f65a:	f7f0 fded 	bl	8000238 <__aeabi_dsub>
 800f65e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800f662:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800f666:	da2b      	bge.n	800f6c0 <__ieee754_pow+0x998>
 800f668:	4652      	mov	r2, sl
 800f66a:	f000 f9b9 	bl	800f9e0 <scalbn>
 800f66e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f672:	f7ff bbf2 	b.w	800ee5a <__ieee754_pow+0x132>
 800f676:	4b35      	ldr	r3, [pc, #212]	; (800f74c <__ieee754_pow+0xa24>)
 800f678:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800f67c:	429f      	cmp	r7, r3
 800f67e:	f77f af13 	ble.w	800f4a8 <__ieee754_pow+0x780>
 800f682:	4b33      	ldr	r3, [pc, #204]	; (800f750 <__ieee754_pow+0xa28>)
 800f684:	440b      	add	r3, r1
 800f686:	4303      	orrs	r3, r0
 800f688:	d00b      	beq.n	800f6a2 <__ieee754_pow+0x97a>
 800f68a:	a32b      	add	r3, pc, #172	; (adr r3, 800f738 <__ieee754_pow+0xa10>)
 800f68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f690:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f694:	f7f0 ff88 	bl	80005a8 <__aeabi_dmul>
 800f698:	a327      	add	r3, pc, #156	; (adr r3, 800f738 <__ieee754_pow+0xa10>)
 800f69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f69e:	f7ff bbdc 	b.w	800ee5a <__ieee754_pow+0x132>
 800f6a2:	4622      	mov	r2, r4
 800f6a4:	462b      	mov	r3, r5
 800f6a6:	f7f0 fdc7 	bl	8000238 <__aeabi_dsub>
 800f6aa:	4642      	mov	r2, r8
 800f6ac:	464b      	mov	r3, r9
 800f6ae:	f7f1 fa01 	bl	8000ab4 <__aeabi_dcmpge>
 800f6b2:	2800      	cmp	r0, #0
 800f6b4:	f43f aef8 	beq.w	800f4a8 <__ieee754_pow+0x780>
 800f6b8:	e7e7      	b.n	800f68a <__ieee754_pow+0x962>
 800f6ba:	f04f 0a00 	mov.w	sl, #0
 800f6be:	e71e      	b.n	800f4fe <__ieee754_pow+0x7d6>
 800f6c0:	4621      	mov	r1, r4
 800f6c2:	e7d4      	b.n	800f66e <__ieee754_pow+0x946>
 800f6c4:	f04f 0b00 	mov.w	fp, #0
 800f6c8:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f748 <__ieee754_pow+0xa20>
 800f6cc:	f7ff bbb0 	b.w	800ee30 <__ieee754_pow+0x108>
 800f6d0:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800f6d4:	f7ff bbac 	b.w	800ee30 <__ieee754_pow+0x108>
 800f6d8:	4638      	mov	r0, r7
 800f6da:	4641      	mov	r1, r8
 800f6dc:	f7ff bbbf 	b.w	800ee5e <__ieee754_pow+0x136>
 800f6e0:	9200      	str	r2, [sp, #0]
 800f6e2:	f7ff bb7f 	b.w	800ede4 <__ieee754_pow+0xbc>
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	f7ff bb69 	b.w	800edbe <__ieee754_pow+0x96>
 800f6ec:	f3af 8000 	nop.w
 800f6f0:	652b82fe 	.word	0x652b82fe
 800f6f4:	3c971547 	.word	0x3c971547
 800f6f8:	00000000 	.word	0x00000000
 800f6fc:	3fe62e43 	.word	0x3fe62e43
 800f700:	fefa39ef 	.word	0xfefa39ef
 800f704:	3fe62e42 	.word	0x3fe62e42
 800f708:	0ca86c39 	.word	0x0ca86c39
 800f70c:	be205c61 	.word	0xbe205c61
 800f710:	72bea4d0 	.word	0x72bea4d0
 800f714:	3e663769 	.word	0x3e663769
 800f718:	c5d26bf1 	.word	0xc5d26bf1
 800f71c:	3ebbbd41 	.word	0x3ebbbd41
 800f720:	af25de2c 	.word	0xaf25de2c
 800f724:	3f11566a 	.word	0x3f11566a
 800f728:	16bebd93 	.word	0x16bebd93
 800f72c:	3f66c16c 	.word	0x3f66c16c
 800f730:	5555553e 	.word	0x5555553e
 800f734:	3fc55555 	.word	0x3fc55555
 800f738:	c2f8f359 	.word	0xc2f8f359
 800f73c:	01a56e1f 	.word	0x01a56e1f
 800f740:	3fe00000 	.word	0x3fe00000
 800f744:	000fffff 	.word	0x000fffff
 800f748:	3ff00000 	.word	0x3ff00000
 800f74c:	4090cbff 	.word	0x4090cbff
 800f750:	3f6f3400 	.word	0x3f6f3400

0800f754 <__ieee754_sqrt>:
 800f754:	f8df c150 	ldr.w	ip, [pc, #336]	; 800f8a8 <__ieee754_sqrt+0x154>
 800f758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f75c:	ea3c 0c01 	bics.w	ip, ip, r1
 800f760:	460b      	mov	r3, r1
 800f762:	4606      	mov	r6, r0
 800f764:	460d      	mov	r5, r1
 800f766:	460a      	mov	r2, r1
 800f768:	4607      	mov	r7, r0
 800f76a:	4604      	mov	r4, r0
 800f76c:	d10e      	bne.n	800f78c <__ieee754_sqrt+0x38>
 800f76e:	4602      	mov	r2, r0
 800f770:	f7f0 ff1a 	bl	80005a8 <__aeabi_dmul>
 800f774:	4602      	mov	r2, r0
 800f776:	460b      	mov	r3, r1
 800f778:	4630      	mov	r0, r6
 800f77a:	4629      	mov	r1, r5
 800f77c:	f7f0 fd5e 	bl	800023c <__adddf3>
 800f780:	4606      	mov	r6, r0
 800f782:	460d      	mov	r5, r1
 800f784:	4630      	mov	r0, r6
 800f786:	4629      	mov	r1, r5
 800f788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f78c:	2900      	cmp	r1, #0
 800f78e:	dc0d      	bgt.n	800f7ac <__ieee754_sqrt+0x58>
 800f790:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800f794:	ea5c 0707 	orrs.w	r7, ip, r7
 800f798:	d0f4      	beq.n	800f784 <__ieee754_sqrt+0x30>
 800f79a:	b139      	cbz	r1, 800f7ac <__ieee754_sqrt+0x58>
 800f79c:	4602      	mov	r2, r0
 800f79e:	f7f0 fd4b 	bl	8000238 <__aeabi_dsub>
 800f7a2:	4602      	mov	r2, r0
 800f7a4:	460b      	mov	r3, r1
 800f7a6:	f7f1 f829 	bl	80007fc <__aeabi_ddiv>
 800f7aa:	e7e9      	b.n	800f780 <__ieee754_sqrt+0x2c>
 800f7ac:	1512      	asrs	r2, r2, #20
 800f7ae:	d074      	beq.n	800f89a <__ieee754_sqrt+0x146>
 800f7b0:	2000      	movs	r0, #0
 800f7b2:	07d5      	lsls	r5, r2, #31
 800f7b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f7b8:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800f7bc:	bf5e      	ittt	pl
 800f7be:	0fe3      	lsrpl	r3, r4, #31
 800f7c0:	0064      	lslpl	r4, r4, #1
 800f7c2:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800f7c6:	0fe3      	lsrs	r3, r4, #31
 800f7c8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800f7cc:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800f7d0:	2516      	movs	r5, #22
 800f7d2:	4601      	mov	r1, r0
 800f7d4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f7d8:	1076      	asrs	r6, r6, #1
 800f7da:	0064      	lsls	r4, r4, #1
 800f7dc:	188f      	adds	r7, r1, r2
 800f7de:	429f      	cmp	r7, r3
 800f7e0:	bfde      	ittt	le
 800f7e2:	1bdb      	suble	r3, r3, r7
 800f7e4:	18b9      	addle	r1, r7, r2
 800f7e6:	1880      	addle	r0, r0, r2
 800f7e8:	005b      	lsls	r3, r3, #1
 800f7ea:	3d01      	subs	r5, #1
 800f7ec:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800f7f0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f7f4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800f7f8:	d1f0      	bne.n	800f7dc <__ieee754_sqrt+0x88>
 800f7fa:	462a      	mov	r2, r5
 800f7fc:	f04f 0e20 	mov.w	lr, #32
 800f800:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800f804:	428b      	cmp	r3, r1
 800f806:	eb07 0c05 	add.w	ip, r7, r5
 800f80a:	dc02      	bgt.n	800f812 <__ieee754_sqrt+0xbe>
 800f80c:	d113      	bne.n	800f836 <__ieee754_sqrt+0xe2>
 800f80e:	45a4      	cmp	ip, r4
 800f810:	d811      	bhi.n	800f836 <__ieee754_sqrt+0xe2>
 800f812:	f1bc 0f00 	cmp.w	ip, #0
 800f816:	eb0c 0507 	add.w	r5, ip, r7
 800f81a:	da43      	bge.n	800f8a4 <__ieee754_sqrt+0x150>
 800f81c:	2d00      	cmp	r5, #0
 800f81e:	db41      	blt.n	800f8a4 <__ieee754_sqrt+0x150>
 800f820:	f101 0801 	add.w	r8, r1, #1
 800f824:	1a5b      	subs	r3, r3, r1
 800f826:	4641      	mov	r1, r8
 800f828:	45a4      	cmp	ip, r4
 800f82a:	bf88      	it	hi
 800f82c:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f830:	eba4 040c 	sub.w	r4, r4, ip
 800f834:	443a      	add	r2, r7
 800f836:	005b      	lsls	r3, r3, #1
 800f838:	f1be 0e01 	subs.w	lr, lr, #1
 800f83c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800f840:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800f844:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800f848:	d1dc      	bne.n	800f804 <__ieee754_sqrt+0xb0>
 800f84a:	4323      	orrs	r3, r4
 800f84c:	d006      	beq.n	800f85c <__ieee754_sqrt+0x108>
 800f84e:	1c54      	adds	r4, r2, #1
 800f850:	bf0b      	itete	eq
 800f852:	4672      	moveq	r2, lr
 800f854:	3201      	addne	r2, #1
 800f856:	3001      	addeq	r0, #1
 800f858:	f022 0201 	bicne.w	r2, r2, #1
 800f85c:	1043      	asrs	r3, r0, #1
 800f85e:	07c1      	lsls	r1, r0, #31
 800f860:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f864:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f868:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f86c:	bf48      	it	mi
 800f86e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800f872:	4610      	mov	r0, r2
 800f874:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800f878:	e782      	b.n	800f780 <__ieee754_sqrt+0x2c>
 800f87a:	0ae3      	lsrs	r3, r4, #11
 800f87c:	3915      	subs	r1, #21
 800f87e:	0564      	lsls	r4, r4, #21
 800f880:	2b00      	cmp	r3, #0
 800f882:	d0fa      	beq.n	800f87a <__ieee754_sqrt+0x126>
 800f884:	02de      	lsls	r6, r3, #11
 800f886:	d50a      	bpl.n	800f89e <__ieee754_sqrt+0x14a>
 800f888:	f1c2 0020 	rsb	r0, r2, #32
 800f88c:	fa24 f000 	lsr.w	r0, r4, r0
 800f890:	1e55      	subs	r5, r2, #1
 800f892:	4094      	lsls	r4, r2
 800f894:	4303      	orrs	r3, r0
 800f896:	1b4a      	subs	r2, r1, r5
 800f898:	e78a      	b.n	800f7b0 <__ieee754_sqrt+0x5c>
 800f89a:	4611      	mov	r1, r2
 800f89c:	e7f0      	b.n	800f880 <__ieee754_sqrt+0x12c>
 800f89e:	005b      	lsls	r3, r3, #1
 800f8a0:	3201      	adds	r2, #1
 800f8a2:	e7ef      	b.n	800f884 <__ieee754_sqrt+0x130>
 800f8a4:	4688      	mov	r8, r1
 800f8a6:	e7bd      	b.n	800f824 <__ieee754_sqrt+0xd0>
 800f8a8:	7ff00000 	.word	0x7ff00000

0800f8ac <fabs>:
 800f8ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f8b0:	4770      	bx	lr

0800f8b2 <finite>:
 800f8b2:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800f8b6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f8ba:	0fc0      	lsrs	r0, r0, #31
 800f8bc:	4770      	bx	lr
	...

0800f8c0 <nan>:
 800f8c0:	2000      	movs	r0, #0
 800f8c2:	4901      	ldr	r1, [pc, #4]	; (800f8c8 <nan+0x8>)
 800f8c4:	4770      	bx	lr
 800f8c6:	bf00      	nop
 800f8c8:	7ff80000 	.word	0x7ff80000

0800f8cc <rint>:
 800f8cc:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800f8d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f8d2:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800f8d6:	2f13      	cmp	r7, #19
 800f8d8:	4602      	mov	r2, r0
 800f8da:	460b      	mov	r3, r1
 800f8dc:	460c      	mov	r4, r1
 800f8de:	4605      	mov	r5, r0
 800f8e0:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800f8e4:	dc59      	bgt.n	800f99a <rint+0xce>
 800f8e6:	2f00      	cmp	r7, #0
 800f8e8:	da2a      	bge.n	800f940 <rint+0x74>
 800f8ea:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f8ee:	4301      	orrs	r1, r0
 800f8f0:	d022      	beq.n	800f938 <rint+0x6c>
 800f8f2:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800f8f6:	4301      	orrs	r1, r0
 800f8f8:	424d      	negs	r5, r1
 800f8fa:	430d      	orrs	r5, r1
 800f8fc:	4936      	ldr	r1, [pc, #216]	; (800f9d8 <rint+0x10c>)
 800f8fe:	0c5c      	lsrs	r4, r3, #17
 800f900:	0b2d      	lsrs	r5, r5, #12
 800f902:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800f906:	0464      	lsls	r4, r4, #17
 800f908:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f90c:	ea45 0304 	orr.w	r3, r5, r4
 800f910:	e9d1 4500 	ldrd	r4, r5, [r1]
 800f914:	4620      	mov	r0, r4
 800f916:	4629      	mov	r1, r5
 800f918:	f7f0 fc90 	bl	800023c <__adddf3>
 800f91c:	e9cd 0100 	strd	r0, r1, [sp]
 800f920:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f924:	462b      	mov	r3, r5
 800f926:	4622      	mov	r2, r4
 800f928:	f7f0 fc86 	bl	8000238 <__aeabi_dsub>
 800f92c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f930:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800f934:	4602      	mov	r2, r0
 800f936:	460b      	mov	r3, r1
 800f938:	4610      	mov	r0, r2
 800f93a:	4619      	mov	r1, r3
 800f93c:	b003      	add	sp, #12
 800f93e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f940:	4926      	ldr	r1, [pc, #152]	; (800f9dc <rint+0x110>)
 800f942:	4139      	asrs	r1, r7
 800f944:	ea03 0001 	and.w	r0, r3, r1
 800f948:	4310      	orrs	r0, r2
 800f94a:	d0f5      	beq.n	800f938 <rint+0x6c>
 800f94c:	084b      	lsrs	r3, r1, #1
 800f94e:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800f952:	ea52 0501 	orrs.w	r5, r2, r1
 800f956:	d00c      	beq.n	800f972 <rint+0xa6>
 800f958:	ea24 0303 	bic.w	r3, r4, r3
 800f95c:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800f960:	2f13      	cmp	r7, #19
 800f962:	bf0c      	ite	eq
 800f964:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800f968:	2500      	movne	r5, #0
 800f96a:	fa44 f707 	asr.w	r7, r4, r7
 800f96e:	ea43 0407 	orr.w	r4, r3, r7
 800f972:	4919      	ldr	r1, [pc, #100]	; (800f9d8 <rint+0x10c>)
 800f974:	4623      	mov	r3, r4
 800f976:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800f97a:	462a      	mov	r2, r5
 800f97c:	e9d6 4500 	ldrd	r4, r5, [r6]
 800f980:	4620      	mov	r0, r4
 800f982:	4629      	mov	r1, r5
 800f984:	f7f0 fc5a 	bl	800023c <__adddf3>
 800f988:	e9cd 0100 	strd	r0, r1, [sp]
 800f98c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f990:	4622      	mov	r2, r4
 800f992:	462b      	mov	r3, r5
 800f994:	f7f0 fc50 	bl	8000238 <__aeabi_dsub>
 800f998:	e7cc      	b.n	800f934 <rint+0x68>
 800f99a:	2f33      	cmp	r7, #51	; 0x33
 800f99c:	dd05      	ble.n	800f9aa <rint+0xde>
 800f99e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800f9a2:	d1c9      	bne.n	800f938 <rint+0x6c>
 800f9a4:	f7f0 fc4a 	bl	800023c <__adddf3>
 800f9a8:	e7c4      	b.n	800f934 <rint+0x68>
 800f9aa:	f04f 31ff 	mov.w	r1, #4294967295
 800f9ae:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800f9b2:	fa21 f10c 	lsr.w	r1, r1, ip
 800f9b6:	4208      	tst	r0, r1
 800f9b8:	d0be      	beq.n	800f938 <rint+0x6c>
 800f9ba:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800f9be:	bf18      	it	ne
 800f9c0:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800f9c4:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800f9c8:	bf1e      	ittt	ne
 800f9ca:	ea20 0303 	bicne.w	r3, r0, r3
 800f9ce:	fa45 fc0c 	asrne.w	ip, r5, ip
 800f9d2:	ea43 050c 	orrne.w	r5, r3, ip
 800f9d6:	e7cc      	b.n	800f972 <rint+0xa6>
 800f9d8:	0800ffa8 	.word	0x0800ffa8
 800f9dc:	000fffff 	.word	0x000fffff

0800f9e0 <scalbn>:
 800f9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9e2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800f9e6:	4604      	mov	r4, r0
 800f9e8:	460d      	mov	r5, r1
 800f9ea:	4617      	mov	r7, r2
 800f9ec:	460b      	mov	r3, r1
 800f9ee:	b996      	cbnz	r6, 800fa16 <scalbn+0x36>
 800f9f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f9f4:	4303      	orrs	r3, r0
 800f9f6:	d039      	beq.n	800fa6c <scalbn+0x8c>
 800f9f8:	4b35      	ldr	r3, [pc, #212]	; (800fad0 <scalbn+0xf0>)
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	f7f0 fdd4 	bl	80005a8 <__aeabi_dmul>
 800fa00:	4b34      	ldr	r3, [pc, #208]	; (800fad4 <scalbn+0xf4>)
 800fa02:	4604      	mov	r4, r0
 800fa04:	429f      	cmp	r7, r3
 800fa06:	460d      	mov	r5, r1
 800fa08:	da0f      	bge.n	800fa2a <scalbn+0x4a>
 800fa0a:	a32d      	add	r3, pc, #180	; (adr r3, 800fac0 <scalbn+0xe0>)
 800fa0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa10:	f7f0 fdca 	bl	80005a8 <__aeabi_dmul>
 800fa14:	e006      	b.n	800fa24 <scalbn+0x44>
 800fa16:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800fa1a:	4296      	cmp	r6, r2
 800fa1c:	d10a      	bne.n	800fa34 <scalbn+0x54>
 800fa1e:	4602      	mov	r2, r0
 800fa20:	f7f0 fc0c 	bl	800023c <__adddf3>
 800fa24:	4604      	mov	r4, r0
 800fa26:	460d      	mov	r5, r1
 800fa28:	e020      	b.n	800fa6c <scalbn+0x8c>
 800fa2a:	460b      	mov	r3, r1
 800fa2c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800fa30:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800fa34:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800fa38:	19b9      	adds	r1, r7, r6
 800fa3a:	4291      	cmp	r1, r2
 800fa3c:	dd0e      	ble.n	800fa5c <scalbn+0x7c>
 800fa3e:	a322      	add	r3, pc, #136	; (adr r3, 800fac8 <scalbn+0xe8>)
 800fa40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa44:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800fa48:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800fa4c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800fa50:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800fa54:	4820      	ldr	r0, [pc, #128]	; (800fad8 <scalbn+0xf8>)
 800fa56:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800fa5a:	e7d9      	b.n	800fa10 <scalbn+0x30>
 800fa5c:	2900      	cmp	r1, #0
 800fa5e:	dd08      	ble.n	800fa72 <scalbn+0x92>
 800fa60:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fa64:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fa68:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800fa6c:	4620      	mov	r0, r4
 800fa6e:	4629      	mov	r1, r5
 800fa70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa72:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800fa76:	da16      	bge.n	800faa6 <scalbn+0xc6>
 800fa78:	f24c 3350 	movw	r3, #50000	; 0xc350
 800fa7c:	429f      	cmp	r7, r3
 800fa7e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800fa82:	dd08      	ble.n	800fa96 <scalbn+0xb6>
 800fa84:	4c15      	ldr	r4, [pc, #84]	; (800fadc <scalbn+0xfc>)
 800fa86:	4814      	ldr	r0, [pc, #80]	; (800fad8 <scalbn+0xf8>)
 800fa88:	f363 74df 	bfi	r4, r3, #31, #1
 800fa8c:	a30e      	add	r3, pc, #56	; (adr r3, 800fac8 <scalbn+0xe8>)
 800fa8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa92:	4621      	mov	r1, r4
 800fa94:	e7bc      	b.n	800fa10 <scalbn+0x30>
 800fa96:	4c12      	ldr	r4, [pc, #72]	; (800fae0 <scalbn+0x100>)
 800fa98:	4812      	ldr	r0, [pc, #72]	; (800fae4 <scalbn+0x104>)
 800fa9a:	f363 74df 	bfi	r4, r3, #31, #1
 800fa9e:	a308      	add	r3, pc, #32	; (adr r3, 800fac0 <scalbn+0xe0>)
 800faa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faa4:	e7f5      	b.n	800fa92 <scalbn+0xb2>
 800faa6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800faaa:	3136      	adds	r1, #54	; 0x36
 800faac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fab0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800fab4:	4620      	mov	r0, r4
 800fab6:	4629      	mov	r1, r5
 800fab8:	2200      	movs	r2, #0
 800faba:	4b0b      	ldr	r3, [pc, #44]	; (800fae8 <scalbn+0x108>)
 800fabc:	e7a8      	b.n	800fa10 <scalbn+0x30>
 800fabe:	bf00      	nop
 800fac0:	c2f8f359 	.word	0xc2f8f359
 800fac4:	01a56e1f 	.word	0x01a56e1f
 800fac8:	8800759c 	.word	0x8800759c
 800facc:	7e37e43c 	.word	0x7e37e43c
 800fad0:	43500000 	.word	0x43500000
 800fad4:	ffff3cb0 	.word	0xffff3cb0
 800fad8:	8800759c 	.word	0x8800759c
 800fadc:	7e37e43c 	.word	0x7e37e43c
 800fae0:	01a56e1f 	.word	0x01a56e1f
 800fae4:	c2f8f359 	.word	0xc2f8f359
 800fae8:	3c900000 	.word	0x3c900000

0800faec <_init>:
 800faec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faee:	bf00      	nop
 800faf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800faf2:	bc08      	pop	{r3}
 800faf4:	469e      	mov	lr, r3
 800faf6:	4770      	bx	lr

0800faf8 <_fini>:
 800faf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fafa:	bf00      	nop
 800fafc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fafe:	bc08      	pop	{r3}
 800fb00:	469e      	mov	lr, r3
 800fb02:	4770      	bx	lr
