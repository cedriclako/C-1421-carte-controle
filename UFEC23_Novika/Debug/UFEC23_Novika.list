
UFEC23_Novika.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012714  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e20  08012908  08012908  00022908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014728  08014728  00030238  2**0
                  CONTENTS
  4 .ARM          00000008  08014728  08014728  00024728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014730  08014730  00030238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014730  08014730  00024730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014734  08014734  00024734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08014738  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003964  20000238  08014970  00030238  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20003b9c  08014970  00033b9c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cd10  00000000  00000000  00030261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000060e5  00000000  00000000  0005cf71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dd0  00000000  00000000  00063058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bd8  00000000  00000000  00064e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000265a8  00000000  00000000  00066a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024a72  00000000  00000000  0008cfa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca38b  00000000  00000000  000b1a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017bda5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000090b0  00000000  00000000  0017bdf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000238 	.word	0x20000238
 800020c:	00000000 	.word	0x00000000
 8000210:	080128ec 	.word	0x080128ec

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	2000023c 	.word	0x2000023c
 800022c:	080128ec 	.word	0x080128ec

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <strlen>:
 8000244:	4603      	mov	r3, r0
 8000246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800024a:	2a00      	cmp	r2, #0
 800024c:	d1fb      	bne.n	8000246 <strlen+0x2>
 800024e:	1a18      	subs	r0, r3, r0
 8000250:	3801      	subs	r0, #1
 8000252:	4770      	bx	lr

08000254 <__aeabi_drsub>:
 8000254:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000258:	e002      	b.n	8000260 <__adddf3>
 800025a:	bf00      	nop

0800025c <__aeabi_dsub>:
 800025c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000260 <__adddf3>:
 8000260:	b530      	push	{r4, r5, lr}
 8000262:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000266:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800026a:	ea94 0f05 	teq	r4, r5
 800026e:	bf08      	it	eq
 8000270:	ea90 0f02 	teqeq	r0, r2
 8000274:	bf1f      	itttt	ne
 8000276:	ea54 0c00 	orrsne.w	ip, r4, r0
 800027a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000282:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000286:	f000 80e2 	beq.w	800044e <__adddf3+0x1ee>
 800028a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000292:	bfb8      	it	lt
 8000294:	426d      	neglt	r5, r5
 8000296:	dd0c      	ble.n	80002b2 <__adddf3+0x52>
 8000298:	442c      	add	r4, r5
 800029a:	ea80 0202 	eor.w	r2, r0, r2
 800029e:	ea81 0303 	eor.w	r3, r1, r3
 80002a2:	ea82 0000 	eor.w	r0, r2, r0
 80002a6:	ea83 0101 	eor.w	r1, r3, r1
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	2d36      	cmp	r5, #54	; 0x36
 80002b4:	bf88      	it	hi
 80002b6:	bd30      	pophi	{r4, r5, pc}
 80002b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x70>
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002dc:	d002      	beq.n	80002e4 <__adddf3+0x84>
 80002de:	4252      	negs	r2, r2
 80002e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e4:	ea94 0f05 	teq	r4, r5
 80002e8:	f000 80a7 	beq.w	800043a <__adddf3+0x1da>
 80002ec:	f1a4 0401 	sub.w	r4, r4, #1
 80002f0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f4:	db0d      	blt.n	8000312 <__adddf3+0xb2>
 80002f6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002fa:	fa22 f205 	lsr.w	r2, r2, r5
 80002fe:	1880      	adds	r0, r0, r2
 8000300:	f141 0100 	adc.w	r1, r1, #0
 8000304:	fa03 f20e 	lsl.w	r2, r3, lr
 8000308:	1880      	adds	r0, r0, r2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	4159      	adcs	r1, r3
 8000310:	e00e      	b.n	8000330 <__adddf3+0xd0>
 8000312:	f1a5 0520 	sub.w	r5, r5, #32
 8000316:	f10e 0e20 	add.w	lr, lr, #32
 800031a:	2a01      	cmp	r2, #1
 800031c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000320:	bf28      	it	cs
 8000322:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	18c0      	adds	r0, r0, r3
 800032c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000330:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000334:	d507      	bpl.n	8000346 <__adddf3+0xe6>
 8000336:	f04f 0e00 	mov.w	lr, #0
 800033a:	f1dc 0c00 	rsbs	ip, ip, #0
 800033e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000342:	eb6e 0101 	sbc.w	r1, lr, r1
 8000346:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800034a:	d31b      	bcc.n	8000384 <__adddf3+0x124>
 800034c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000350:	d30c      	bcc.n	800036c <__adddf3+0x10c>
 8000352:	0849      	lsrs	r1, r1, #1
 8000354:	ea5f 0030 	movs.w	r0, r0, rrx
 8000358:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800035c:	f104 0401 	add.w	r4, r4, #1
 8000360:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000364:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000368:	f080 809a 	bcs.w	80004a0 <__adddf3+0x240>
 800036c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000370:	bf08      	it	eq
 8000372:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000376:	f150 0000 	adcs.w	r0, r0, #0
 800037a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037e:	ea41 0105 	orr.w	r1, r1, r5
 8000382:	bd30      	pop	{r4, r5, pc}
 8000384:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000388:	4140      	adcs	r0, r0
 800038a:	eb41 0101 	adc.w	r1, r1, r1
 800038e:	3c01      	subs	r4, #1
 8000390:	bf28      	it	cs
 8000392:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000396:	d2e9      	bcs.n	800036c <__adddf3+0x10c>
 8000398:	f091 0f00 	teq	r1, #0
 800039c:	bf04      	itt	eq
 800039e:	4601      	moveq	r1, r0
 80003a0:	2000      	moveq	r0, #0
 80003a2:	fab1 f381 	clz	r3, r1
 80003a6:	bf08      	it	eq
 80003a8:	3320      	addeq	r3, #32
 80003aa:	f1a3 030b 	sub.w	r3, r3, #11
 80003ae:	f1b3 0220 	subs.w	r2, r3, #32
 80003b2:	da0c      	bge.n	80003ce <__adddf3+0x16e>
 80003b4:	320c      	adds	r2, #12
 80003b6:	dd08      	ble.n	80003ca <__adddf3+0x16a>
 80003b8:	f102 0c14 	add.w	ip, r2, #20
 80003bc:	f1c2 020c 	rsb	r2, r2, #12
 80003c0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c4:	fa21 f102 	lsr.w	r1, r1, r2
 80003c8:	e00c      	b.n	80003e4 <__adddf3+0x184>
 80003ca:	f102 0214 	add.w	r2, r2, #20
 80003ce:	bfd8      	it	le
 80003d0:	f1c2 0c20 	rsble	ip, r2, #32
 80003d4:	fa01 f102 	lsl.w	r1, r1, r2
 80003d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003dc:	bfdc      	itt	le
 80003de:	ea41 010c 	orrle.w	r1, r1, ip
 80003e2:	4090      	lslle	r0, r2
 80003e4:	1ae4      	subs	r4, r4, r3
 80003e6:	bfa2      	ittt	ge
 80003e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003ec:	4329      	orrge	r1, r5
 80003ee:	bd30      	popge	{r4, r5, pc}
 80003f0:	ea6f 0404 	mvn.w	r4, r4
 80003f4:	3c1f      	subs	r4, #31
 80003f6:	da1c      	bge.n	8000432 <__adddf3+0x1d2>
 80003f8:	340c      	adds	r4, #12
 80003fa:	dc0e      	bgt.n	800041a <__adddf3+0x1ba>
 80003fc:	f104 0414 	add.w	r4, r4, #20
 8000400:	f1c4 0220 	rsb	r2, r4, #32
 8000404:	fa20 f004 	lsr.w	r0, r0, r4
 8000408:	fa01 f302 	lsl.w	r3, r1, r2
 800040c:	ea40 0003 	orr.w	r0, r0, r3
 8000410:	fa21 f304 	lsr.w	r3, r1, r4
 8000414:	ea45 0103 	orr.w	r1, r5, r3
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	f1c4 040c 	rsb	r4, r4, #12
 800041e:	f1c4 0220 	rsb	r2, r4, #32
 8000422:	fa20 f002 	lsr.w	r0, r0, r2
 8000426:	fa01 f304 	lsl.w	r3, r1, r4
 800042a:	ea40 0003 	orr.w	r0, r0, r3
 800042e:	4629      	mov	r1, r5
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	fa21 f004 	lsr.w	r0, r1, r4
 8000436:	4629      	mov	r1, r5
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	f094 0f00 	teq	r4, #0
 800043e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000442:	bf06      	itte	eq
 8000444:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000448:	3401      	addeq	r4, #1
 800044a:	3d01      	subne	r5, #1
 800044c:	e74e      	b.n	80002ec <__adddf3+0x8c>
 800044e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000452:	bf18      	it	ne
 8000454:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000458:	d029      	beq.n	80004ae <__adddf3+0x24e>
 800045a:	ea94 0f05 	teq	r4, r5
 800045e:	bf08      	it	eq
 8000460:	ea90 0f02 	teqeq	r0, r2
 8000464:	d005      	beq.n	8000472 <__adddf3+0x212>
 8000466:	ea54 0c00 	orrs.w	ip, r4, r0
 800046a:	bf04      	itt	eq
 800046c:	4619      	moveq	r1, r3
 800046e:	4610      	moveq	r0, r2
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea91 0f03 	teq	r1, r3
 8000476:	bf1e      	ittt	ne
 8000478:	2100      	movne	r1, #0
 800047a:	2000      	movne	r0, #0
 800047c:	bd30      	popne	{r4, r5, pc}
 800047e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000482:	d105      	bne.n	8000490 <__adddf3+0x230>
 8000484:	0040      	lsls	r0, r0, #1
 8000486:	4149      	adcs	r1, r1
 8000488:	bf28      	it	cs
 800048a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048e:	bd30      	pop	{r4, r5, pc}
 8000490:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000494:	bf3c      	itt	cc
 8000496:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800049a:	bd30      	popcc	{r4, r5, pc}
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a8:	f04f 0000 	mov.w	r0, #0
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf1a      	itte	ne
 80004b4:	4619      	movne	r1, r3
 80004b6:	4610      	movne	r0, r2
 80004b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004bc:	bf1c      	itt	ne
 80004be:	460b      	movne	r3, r1
 80004c0:	4602      	movne	r2, r0
 80004c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c6:	bf06      	itte	eq
 80004c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004cc:	ea91 0f03 	teqeq	r1, r3
 80004d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	bf00      	nop

080004d8 <__aeabi_ui2d>:
 80004d8:	f090 0f00 	teq	r0, #0
 80004dc:	bf04      	itt	eq
 80004de:	2100      	moveq	r1, #0
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ec:	f04f 0500 	mov.w	r5, #0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e750      	b.n	8000398 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_i2d>:
 80004f8:	f090 0f00 	teq	r0, #0
 80004fc:	bf04      	itt	eq
 80004fe:	2100      	moveq	r1, #0
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000508:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000510:	bf48      	it	mi
 8000512:	4240      	negmi	r0, r0
 8000514:	f04f 0100 	mov.w	r1, #0
 8000518:	e73e      	b.n	8000398 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_f2d>:
 800051c:	0042      	lsls	r2, r0, #1
 800051e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000522:	ea4f 0131 	mov.w	r1, r1, rrx
 8000526:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800052a:	bf1f      	itttt	ne
 800052c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000530:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000534:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000538:	4770      	bxne	lr
 800053a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053e:	bf08      	it	eq
 8000540:	4770      	bxeq	lr
 8000542:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000546:	bf04      	itt	eq
 8000548:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000554:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000558:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800055c:	e71c      	b.n	8000398 <__adddf3+0x138>
 800055e:	bf00      	nop

08000560 <__aeabi_ul2d>:
 8000560:	ea50 0201 	orrs.w	r2, r0, r1
 8000564:	bf08      	it	eq
 8000566:	4770      	bxeq	lr
 8000568:	b530      	push	{r4, r5, lr}
 800056a:	f04f 0500 	mov.w	r5, #0
 800056e:	e00a      	b.n	8000586 <__aeabi_l2d+0x16>

08000570 <__aeabi_l2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057e:	d502      	bpl.n	8000586 <__aeabi_l2d+0x16>
 8000580:	4240      	negs	r0, r0
 8000582:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000586:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000592:	f43f aed8 	beq.w	8000346 <__adddf3+0xe6>
 8000596:	f04f 0203 	mov.w	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a6:	bf18      	it	ne
 80005a8:	3203      	addne	r2, #3
 80005aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ae:	f1c2 0320 	rsb	r3, r2, #32
 80005b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80005be:	ea40 000e 	orr.w	r0, r0, lr
 80005c2:	fa21 f102 	lsr.w	r1, r1, r2
 80005c6:	4414      	add	r4, r2
 80005c8:	e6bd      	b.n	8000346 <__adddf3+0xe6>
 80005ca:	bf00      	nop

080005cc <__aeabi_dmul>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005da:	bf1d      	ittte	ne
 80005dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005e0:	ea94 0f0c 	teqne	r4, ip
 80005e4:	ea95 0f0c 	teqne	r5, ip
 80005e8:	f000 f8de 	bleq	80007a8 <__aeabi_dmul+0x1dc>
 80005ec:	442c      	add	r4, r5
 80005ee:	ea81 0603 	eor.w	r6, r1, r3
 80005f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fe:	bf18      	it	ne
 8000600:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000604:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000608:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800060c:	d038      	beq.n	8000680 <__aeabi_dmul+0xb4>
 800060e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000612:	f04f 0500 	mov.w	r5, #0
 8000616:	fbe1 e502 	umlal	lr, r5, r1, r2
 800061a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000622:	f04f 0600 	mov.w	r6, #0
 8000626:	fbe1 5603 	umlal	r5, r6, r1, r3
 800062a:	f09c 0f00 	teq	ip, #0
 800062e:	bf18      	it	ne
 8000630:	f04e 0e01 	orrne.w	lr, lr, #1
 8000634:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000638:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800063c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000640:	d204      	bcs.n	800064c <__aeabi_dmul+0x80>
 8000642:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000646:	416d      	adcs	r5, r5
 8000648:	eb46 0606 	adc.w	r6, r6, r6
 800064c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000650:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000654:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000658:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800065c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000660:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000664:	bf88      	it	hi
 8000666:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800066a:	d81e      	bhi.n	80006aa <__aeabi_dmul+0xde>
 800066c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000670:	bf08      	it	eq
 8000672:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000676:	f150 0000 	adcs.w	r0, r0, #0
 800067a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000684:	ea46 0101 	orr.w	r1, r6, r1
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	ea81 0103 	eor.w	r1, r1, r3
 8000690:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000694:	bfc2      	ittt	gt
 8000696:	ebd4 050c 	rsbsgt	r5, r4, ip
 800069a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069e:	bd70      	popgt	{r4, r5, r6, pc}
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f04f 0e00 	mov.w	lr, #0
 80006a8:	3c01      	subs	r4, #1
 80006aa:	f300 80ab 	bgt.w	8000804 <__aeabi_dmul+0x238>
 80006ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006b2:	bfde      	ittt	le
 80006b4:	2000      	movle	r0, #0
 80006b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ba:	bd70      	pople	{r4, r5, r6, pc}
 80006bc:	f1c4 0400 	rsb	r4, r4, #0
 80006c0:	3c20      	subs	r4, #32
 80006c2:	da35      	bge.n	8000730 <__aeabi_dmul+0x164>
 80006c4:	340c      	adds	r4, #12
 80006c6:	dc1b      	bgt.n	8000700 <__aeabi_dmul+0x134>
 80006c8:	f104 0414 	add.w	r4, r4, #20
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f305 	lsl.w	r3, r0, r5
 80006d4:	fa20 f004 	lsr.w	r0, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	fa21 f604 	lsr.w	r6, r1, r4
 80006f0:	eb42 0106 	adc.w	r1, r2, r6
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f1c4 040c 	rsb	r4, r4, #12
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f304 	lsl.w	r3, r0, r4
 800070c:	fa20 f005 	lsr.w	r0, r0, r5
 8000710:	fa01 f204 	lsl.w	r2, r1, r4
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	f141 0100 	adc.w	r1, r1, #0
 8000724:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000728:	bf08      	it	eq
 800072a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072e:	bd70      	pop	{r4, r5, r6, pc}
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f205 	lsl.w	r2, r0, r5
 8000738:	ea4e 0e02 	orr.w	lr, lr, r2
 800073c:	fa20 f304 	lsr.w	r3, r0, r4
 8000740:	fa01 f205 	lsl.w	r2, r1, r5
 8000744:	ea43 0302 	orr.w	r3, r3, r2
 8000748:	fa21 f004 	lsr.w	r0, r1, r4
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	fa21 f204 	lsr.w	r2, r1, r4
 8000754:	ea20 0002 	bic.w	r0, r0, r2
 8000758:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800075c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000760:	bf08      	it	eq
 8000762:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000766:	bd70      	pop	{r4, r5, r6, pc}
 8000768:	f094 0f00 	teq	r4, #0
 800076c:	d10f      	bne.n	800078e <__aeabi_dmul+0x1c2>
 800076e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000772:	0040      	lsls	r0, r0, #1
 8000774:	eb41 0101 	adc.w	r1, r1, r1
 8000778:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800077c:	bf08      	it	eq
 800077e:	3c01      	subeq	r4, #1
 8000780:	d0f7      	beq.n	8000772 <__aeabi_dmul+0x1a6>
 8000782:	ea41 0106 	orr.w	r1, r1, r6
 8000786:	f095 0f00 	teq	r5, #0
 800078a:	bf18      	it	ne
 800078c:	4770      	bxne	lr
 800078e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000792:	0052      	lsls	r2, r2, #1
 8000794:	eb43 0303 	adc.w	r3, r3, r3
 8000798:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800079c:	bf08      	it	eq
 800079e:	3d01      	subeq	r5, #1
 80007a0:	d0f7      	beq.n	8000792 <__aeabi_dmul+0x1c6>
 80007a2:	ea43 0306 	orr.w	r3, r3, r6
 80007a6:	4770      	bx	lr
 80007a8:	ea94 0f0c 	teq	r4, ip
 80007ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007b0:	bf18      	it	ne
 80007b2:	ea95 0f0c 	teqne	r5, ip
 80007b6:	d00c      	beq.n	80007d2 <__aeabi_dmul+0x206>
 80007b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007bc:	bf18      	it	ne
 80007be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c2:	d1d1      	bne.n	8000768 <__aeabi_dmul+0x19c>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d6:	bf06      	itte	eq
 80007d8:	4610      	moveq	r0, r2
 80007da:	4619      	moveq	r1, r3
 80007dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e0:	d019      	beq.n	8000816 <__aeabi_dmul+0x24a>
 80007e2:	ea94 0f0c 	teq	r4, ip
 80007e6:	d102      	bne.n	80007ee <__aeabi_dmul+0x222>
 80007e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007ec:	d113      	bne.n	8000816 <__aeabi_dmul+0x24a>
 80007ee:	ea95 0f0c 	teq	r5, ip
 80007f2:	d105      	bne.n	8000800 <__aeabi_dmul+0x234>
 80007f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f8:	bf1c      	itt	ne
 80007fa:	4610      	movne	r0, r2
 80007fc:	4619      	movne	r1, r3
 80007fe:	d10a      	bne.n	8000816 <__aeabi_dmul+0x24a>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800080c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081e:	bd70      	pop	{r4, r5, r6, pc}

08000820 <__aeabi_ddiv>:
 8000820:	b570      	push	{r4, r5, r6, lr}
 8000822:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000826:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800082a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082e:	bf1d      	ittte	ne
 8000830:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000834:	ea94 0f0c 	teqne	r4, ip
 8000838:	ea95 0f0c 	teqne	r5, ip
 800083c:	f000 f8a7 	bleq	800098e <__aeabi_ddiv+0x16e>
 8000840:	eba4 0405 	sub.w	r4, r4, r5
 8000844:	ea81 0e03 	eor.w	lr, r1, r3
 8000848:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800084c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000850:	f000 8088 	beq.w	8000964 <__aeabi_ddiv+0x144>
 8000854:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000858:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800085c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000860:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000864:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000868:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800086c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000870:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000874:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000878:	429d      	cmp	r5, r3
 800087a:	bf08      	it	eq
 800087c:	4296      	cmpeq	r6, r2
 800087e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000882:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000886:	d202      	bcs.n	800088e <__aeabi_ddiv+0x6e>
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	1ab6      	subs	r6, r6, r2
 8000890:	eb65 0503 	sbc.w	r5, r5, r3
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008aa:	bf22      	ittt	cs
 80008ac:	1ab6      	subcs	r6, r6, r2
 80008ae:	4675      	movcs	r5, lr
 80008b0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80008be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c2:	bf22      	ittt	cs
 80008c4:	1ab6      	subcs	r6, r6, r2
 80008c6:	4675      	movcs	r5, lr
 80008c8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008da:	bf22      	ittt	cs
 80008dc:	1ab6      	subcs	r6, r6, r2
 80008de:	4675      	movcs	r5, lr
 80008e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f2:	bf22      	ittt	cs
 80008f4:	1ab6      	subcs	r6, r6, r2
 80008f6:	4675      	movcs	r5, lr
 80008f8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008fc:	ea55 0e06 	orrs.w	lr, r5, r6
 8000900:	d018      	beq.n	8000934 <__aeabi_ddiv+0x114>
 8000902:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000906:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800090a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000912:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000916:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800091a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091e:	d1c0      	bne.n	80008a2 <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	d10b      	bne.n	800093e <__aeabi_ddiv+0x11e>
 8000926:	ea41 0100 	orr.w	r1, r1, r0
 800092a:	f04f 0000 	mov.w	r0, #0
 800092e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000932:	e7b6      	b.n	80008a2 <__aeabi_ddiv+0x82>
 8000934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000938:	bf04      	itt	eq
 800093a:	4301      	orreq	r1, r0
 800093c:	2000      	moveq	r0, #0
 800093e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000942:	bf88      	it	hi
 8000944:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000948:	f63f aeaf 	bhi.w	80006aa <__aeabi_dmul+0xde>
 800094c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000950:	bf04      	itt	eq
 8000952:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000956:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800095a:	f150 0000 	adcs.w	r0, r0, #0
 800095e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000962:	bd70      	pop	{r4, r5, r6, pc}
 8000964:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000968:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800096c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000970:	bfc2      	ittt	gt
 8000972:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000976:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800097a:	bd70      	popgt	{r4, r5, r6, pc}
 800097c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000980:	f04f 0e00 	mov.w	lr, #0
 8000984:	3c01      	subs	r4, #1
 8000986:	e690      	b.n	80006aa <__aeabi_dmul+0xde>
 8000988:	ea45 0e06 	orr.w	lr, r5, r6
 800098c:	e68d      	b.n	80006aa <__aeabi_dmul+0xde>
 800098e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000992:	ea94 0f0c 	teq	r4, ip
 8000996:	bf08      	it	eq
 8000998:	ea95 0f0c 	teqeq	r5, ip
 800099c:	f43f af3b 	beq.w	8000816 <__aeabi_dmul+0x24a>
 80009a0:	ea94 0f0c 	teq	r4, ip
 80009a4:	d10a      	bne.n	80009bc <__aeabi_ddiv+0x19c>
 80009a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009aa:	f47f af34 	bne.w	8000816 <__aeabi_dmul+0x24a>
 80009ae:	ea95 0f0c 	teq	r5, ip
 80009b2:	f47f af25 	bne.w	8000800 <__aeabi_dmul+0x234>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e72c      	b.n	8000816 <__aeabi_dmul+0x24a>
 80009bc:	ea95 0f0c 	teq	r5, ip
 80009c0:	d106      	bne.n	80009d0 <__aeabi_ddiv+0x1b0>
 80009c2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c6:	f43f aefd 	beq.w	80007c4 <__aeabi_dmul+0x1f8>
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	e722      	b.n	8000816 <__aeabi_dmul+0x24a>
 80009d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d4:	bf18      	it	ne
 80009d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009da:	f47f aec5 	bne.w	8000768 <__aeabi_dmul+0x19c>
 80009de:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009e2:	f47f af0d 	bne.w	8000800 <__aeabi_dmul+0x234>
 80009e6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ea:	f47f aeeb 	bne.w	80007c4 <__aeabi_dmul+0x1f8>
 80009ee:	e712      	b.n	8000816 <__aeabi_dmul+0x24a>

080009f0 <__gedf2>:
 80009f0:	f04f 3cff 	mov.w	ip, #4294967295
 80009f4:	e006      	b.n	8000a04 <__cmpdf2+0x4>
 80009f6:	bf00      	nop

080009f8 <__ledf2>:
 80009f8:	f04f 0c01 	mov.w	ip, #1
 80009fc:	e002      	b.n	8000a04 <__cmpdf2+0x4>
 80009fe:	bf00      	nop

08000a00 <__cmpdf2>:
 8000a00:	f04f 0c01 	mov.w	ip, #1
 8000a04:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a1a:	d01b      	beq.n	8000a54 <__cmpdf2+0x54>
 8000a1c:	b001      	add	sp, #4
 8000a1e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a22:	bf0c      	ite	eq
 8000a24:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a28:	ea91 0f03 	teqne	r1, r3
 8000a2c:	bf02      	ittt	eq
 8000a2e:	ea90 0f02 	teqeq	r0, r2
 8000a32:	2000      	moveq	r0, #0
 8000a34:	4770      	bxeq	lr
 8000a36:	f110 0f00 	cmn.w	r0, #0
 8000a3a:	ea91 0f03 	teq	r1, r3
 8000a3e:	bf58      	it	pl
 8000a40:	4299      	cmppl	r1, r3
 8000a42:	bf08      	it	eq
 8000a44:	4290      	cmpeq	r0, r2
 8000a46:	bf2c      	ite	cs
 8000a48:	17d8      	asrcs	r0, r3, #31
 8000a4a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4e:	f040 0001 	orr.w	r0, r0, #1
 8000a52:	4770      	bx	lr
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	d102      	bne.n	8000a64 <__cmpdf2+0x64>
 8000a5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a62:	d107      	bne.n	8000a74 <__cmpdf2+0x74>
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d1d6      	bne.n	8000a1c <__cmpdf2+0x1c>
 8000a6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a72:	d0d3      	beq.n	8000a1c <__cmpdf2+0x1c>
 8000a74:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_cdrcmple>:
 8000a7c:	4684      	mov	ip, r0
 8000a7e:	4610      	mov	r0, r2
 8000a80:	4662      	mov	r2, ip
 8000a82:	468c      	mov	ip, r1
 8000a84:	4619      	mov	r1, r3
 8000a86:	4663      	mov	r3, ip
 8000a88:	e000      	b.n	8000a8c <__aeabi_cdcmpeq>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdcmpeq>:
 8000a8c:	b501      	push	{r0, lr}
 8000a8e:	f7ff ffb7 	bl	8000a00 <__cmpdf2>
 8000a92:	2800      	cmp	r0, #0
 8000a94:	bf48      	it	mi
 8000a96:	f110 0f00 	cmnmi.w	r0, #0
 8000a9a:	bd01      	pop	{r0, pc}

08000a9c <__aeabi_dcmpeq>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff fff4 	bl	8000a8c <__aeabi_cdcmpeq>
 8000aa4:	bf0c      	ite	eq
 8000aa6:	2001      	moveq	r0, #1
 8000aa8:	2000      	movne	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmplt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffea 	bl	8000a8c <__aeabi_cdcmpeq>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmple>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffe0 	bl	8000a8c <__aeabi_cdcmpeq>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpge>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffce 	bl	8000a7c <__aeabi_cdrcmple>
 8000ae0:	bf94      	ite	ls
 8000ae2:	2001      	movls	r0, #1
 8000ae4:	2000      	movhi	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpgt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffc4 	bl	8000a7c <__aeabi_cdrcmple>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmpun>:
 8000b00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d102      	bne.n	8000b10 <__aeabi_dcmpun+0x10>
 8000b0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0e:	d10a      	bne.n	8000b26 <__aeabi_dcmpun+0x26>
 8000b10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x20>
 8000b1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_dcmpun+0x26>
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0001 	mov.w	r0, #1
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_frsub>:
 8000c1c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c20:	e002      	b.n	8000c28 <__addsf3>
 8000c22:	bf00      	nop

08000c24 <__aeabi_fsub>:
 8000c24:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c28 <__addsf3>:
 8000c28:	0042      	lsls	r2, r0, #1
 8000c2a:	bf1f      	itttt	ne
 8000c2c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c30:	ea92 0f03 	teqne	r2, r3
 8000c34:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c38:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c3c:	d06a      	beq.n	8000d14 <__addsf3+0xec>
 8000c3e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c42:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c46:	bfc1      	itttt	gt
 8000c48:	18d2      	addgt	r2, r2, r3
 8000c4a:	4041      	eorgt	r1, r0
 8000c4c:	4048      	eorgt	r0, r1
 8000c4e:	4041      	eorgt	r1, r0
 8000c50:	bfb8      	it	lt
 8000c52:	425b      	neglt	r3, r3
 8000c54:	2b19      	cmp	r3, #25
 8000c56:	bf88      	it	hi
 8000c58:	4770      	bxhi	lr
 8000c5a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c66:	bf18      	it	ne
 8000c68:	4240      	negne	r0, r0
 8000c6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c6e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c72:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c76:	bf18      	it	ne
 8000c78:	4249      	negne	r1, r1
 8000c7a:	ea92 0f03 	teq	r2, r3
 8000c7e:	d03f      	beq.n	8000d00 <__addsf3+0xd8>
 8000c80:	f1a2 0201 	sub.w	r2, r2, #1
 8000c84:	fa41 fc03 	asr.w	ip, r1, r3
 8000c88:	eb10 000c 	adds.w	r0, r0, ip
 8000c8c:	f1c3 0320 	rsb	r3, r3, #32
 8000c90:	fa01 f103 	lsl.w	r1, r1, r3
 8000c94:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__addsf3+0x78>
 8000c9a:	4249      	negs	r1, r1
 8000c9c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ca0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ca4:	d313      	bcc.n	8000cce <__addsf3+0xa6>
 8000ca6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000caa:	d306      	bcc.n	8000cba <__addsf3+0x92>
 8000cac:	0840      	lsrs	r0, r0, #1
 8000cae:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cb2:	f102 0201 	add.w	r2, r2, #1
 8000cb6:	2afe      	cmp	r2, #254	; 0xfe
 8000cb8:	d251      	bcs.n	8000d5e <__addsf3+0x136>
 8000cba:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cbe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cc2:	bf08      	it	eq
 8000cc4:	f020 0001 	biceq.w	r0, r0, #1
 8000cc8:	ea40 0003 	orr.w	r0, r0, r3
 8000ccc:	4770      	bx	lr
 8000cce:	0049      	lsls	r1, r1, #1
 8000cd0:	eb40 0000 	adc.w	r0, r0, r0
 8000cd4:	3a01      	subs	r2, #1
 8000cd6:	bf28      	it	cs
 8000cd8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cdc:	d2ed      	bcs.n	8000cba <__addsf3+0x92>
 8000cde:	fab0 fc80 	clz	ip, r0
 8000ce2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ce6:	ebb2 020c 	subs.w	r2, r2, ip
 8000cea:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cee:	bfaa      	itet	ge
 8000cf0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cf4:	4252      	neglt	r2, r2
 8000cf6:	4318      	orrge	r0, r3
 8000cf8:	bfbc      	itt	lt
 8000cfa:	40d0      	lsrlt	r0, r2
 8000cfc:	4318      	orrlt	r0, r3
 8000cfe:	4770      	bx	lr
 8000d00:	f092 0f00 	teq	r2, #0
 8000d04:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d08:	bf06      	itte	eq
 8000d0a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d0e:	3201      	addeq	r2, #1
 8000d10:	3b01      	subne	r3, #1
 8000d12:	e7b5      	b.n	8000c80 <__addsf3+0x58>
 8000d14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d1c:	bf18      	it	ne
 8000d1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d22:	d021      	beq.n	8000d68 <__addsf3+0x140>
 8000d24:	ea92 0f03 	teq	r2, r3
 8000d28:	d004      	beq.n	8000d34 <__addsf3+0x10c>
 8000d2a:	f092 0f00 	teq	r2, #0
 8000d2e:	bf08      	it	eq
 8000d30:	4608      	moveq	r0, r1
 8000d32:	4770      	bx	lr
 8000d34:	ea90 0f01 	teq	r0, r1
 8000d38:	bf1c      	itt	ne
 8000d3a:	2000      	movne	r0, #0
 8000d3c:	4770      	bxne	lr
 8000d3e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d42:	d104      	bne.n	8000d4e <__addsf3+0x126>
 8000d44:	0040      	lsls	r0, r0, #1
 8000d46:	bf28      	it	cs
 8000d48:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d4c:	4770      	bx	lr
 8000d4e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d52:	bf3c      	itt	cc
 8000d54:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d58:	4770      	bxcc	lr
 8000d5a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d5e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d66:	4770      	bx	lr
 8000d68:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d6c:	bf16      	itet	ne
 8000d6e:	4608      	movne	r0, r1
 8000d70:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d74:	4601      	movne	r1, r0
 8000d76:	0242      	lsls	r2, r0, #9
 8000d78:	bf06      	itte	eq
 8000d7a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d7e:	ea90 0f01 	teqeq	r0, r1
 8000d82:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_ui2f>:
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e004      	b.n	8000d98 <__aeabi_i2f+0x8>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_i2f>:
 8000d90:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d94:	bf48      	it	mi
 8000d96:	4240      	negmi	r0, r0
 8000d98:	ea5f 0c00 	movs.w	ip, r0
 8000d9c:	bf08      	it	eq
 8000d9e:	4770      	bxeq	lr
 8000da0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000da4:	4601      	mov	r1, r0
 8000da6:	f04f 0000 	mov.w	r0, #0
 8000daa:	e01c      	b.n	8000de6 <__aeabi_l2f+0x2a>

08000dac <__aeabi_ul2f>:
 8000dac:	ea50 0201 	orrs.w	r2, r0, r1
 8000db0:	bf08      	it	eq
 8000db2:	4770      	bxeq	lr
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	e00a      	b.n	8000dd0 <__aeabi_l2f+0x14>
 8000dba:	bf00      	nop

08000dbc <__aeabi_l2f>:
 8000dbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dc8:	d502      	bpl.n	8000dd0 <__aeabi_l2f+0x14>
 8000dca:	4240      	negs	r0, r0
 8000dcc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd0:	ea5f 0c01 	movs.w	ip, r1
 8000dd4:	bf02      	ittt	eq
 8000dd6:	4684      	moveq	ip, r0
 8000dd8:	4601      	moveq	r1, r0
 8000dda:	2000      	moveq	r0, #0
 8000ddc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000de0:	bf08      	it	eq
 8000de2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000de6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dea:	fabc f28c 	clz	r2, ip
 8000dee:	3a08      	subs	r2, #8
 8000df0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000df4:	db10      	blt.n	8000e18 <__aeabi_l2f+0x5c>
 8000df6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dfa:	4463      	add	r3, ip
 8000dfc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e00:	f1c2 0220 	rsb	r2, r2, #32
 8000e04:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e08:	fa20 f202 	lsr.w	r2, r0, r2
 8000e0c:	eb43 0002 	adc.w	r0, r3, r2
 8000e10:	bf08      	it	eq
 8000e12:	f020 0001 	biceq.w	r0, r0, #1
 8000e16:	4770      	bx	lr
 8000e18:	f102 0220 	add.w	r2, r2, #32
 8000e1c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e20:	f1c2 0220 	rsb	r2, r2, #32
 8000e24:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e28:	fa21 f202 	lsr.w	r2, r1, r2
 8000e2c:	eb43 0002 	adc.w	r0, r3, r2
 8000e30:	bf08      	it	eq
 8000e32:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e36:	4770      	bx	lr

08000e38 <__aeabi_fmul>:
 8000e38:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e40:	bf1e      	ittt	ne
 8000e42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e46:	ea92 0f0c 	teqne	r2, ip
 8000e4a:	ea93 0f0c 	teqne	r3, ip
 8000e4e:	d06f      	beq.n	8000f30 <__aeabi_fmul+0xf8>
 8000e50:	441a      	add	r2, r3
 8000e52:	ea80 0c01 	eor.w	ip, r0, r1
 8000e56:	0240      	lsls	r0, r0, #9
 8000e58:	bf18      	it	ne
 8000e5a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e5e:	d01e      	beq.n	8000e9e <__aeabi_fmul+0x66>
 8000e60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e64:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e68:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e6c:	fba0 3101 	umull	r3, r1, r0, r1
 8000e70:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e74:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e78:	bf3e      	ittt	cc
 8000e7a:	0049      	lslcc	r1, r1, #1
 8000e7c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e80:	005b      	lslcc	r3, r3, #1
 8000e82:	ea40 0001 	orr.w	r0, r0, r1
 8000e86:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e8a:	2afd      	cmp	r2, #253	; 0xfd
 8000e8c:	d81d      	bhi.n	8000eca <__aeabi_fmul+0x92>
 8000e8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e96:	bf08      	it	eq
 8000e98:	f020 0001 	biceq.w	r0, r0, #1
 8000e9c:	4770      	bx	lr
 8000e9e:	f090 0f00 	teq	r0, #0
 8000ea2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea6:	bf08      	it	eq
 8000ea8:	0249      	lsleq	r1, r1, #9
 8000eaa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000eb2:	3a7f      	subs	r2, #127	; 0x7f
 8000eb4:	bfc2      	ittt	gt
 8000eb6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ebe:	4770      	bxgt	lr
 8000ec0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ec4:	f04f 0300 	mov.w	r3, #0
 8000ec8:	3a01      	subs	r2, #1
 8000eca:	dc5d      	bgt.n	8000f88 <__aeabi_fmul+0x150>
 8000ecc:	f112 0f19 	cmn.w	r2, #25
 8000ed0:	bfdc      	itt	le
 8000ed2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ed6:	4770      	bxle	lr
 8000ed8:	f1c2 0200 	rsb	r2, r2, #0
 8000edc:	0041      	lsls	r1, r0, #1
 8000ede:	fa21 f102 	lsr.w	r1, r1, r2
 8000ee2:	f1c2 0220 	rsb	r2, r2, #32
 8000ee6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eea:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eee:	f140 0000 	adc.w	r0, r0, #0
 8000ef2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ef6:	bf08      	it	eq
 8000ef8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000efc:	4770      	bx	lr
 8000efe:	f092 0f00 	teq	r2, #0
 8000f02:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f06:	bf02      	ittt	eq
 8000f08:	0040      	lsleq	r0, r0, #1
 8000f0a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f0e:	3a01      	subeq	r2, #1
 8000f10:	d0f9      	beq.n	8000f06 <__aeabi_fmul+0xce>
 8000f12:	ea40 000c 	orr.w	r0, r0, ip
 8000f16:	f093 0f00 	teq	r3, #0
 8000f1a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f1e:	bf02      	ittt	eq
 8000f20:	0049      	lsleq	r1, r1, #1
 8000f22:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f26:	3b01      	subeq	r3, #1
 8000f28:	d0f9      	beq.n	8000f1e <__aeabi_fmul+0xe6>
 8000f2a:	ea41 010c 	orr.w	r1, r1, ip
 8000f2e:	e78f      	b.n	8000e50 <__aeabi_fmul+0x18>
 8000f30:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f34:	ea92 0f0c 	teq	r2, ip
 8000f38:	bf18      	it	ne
 8000f3a:	ea93 0f0c 	teqne	r3, ip
 8000f3e:	d00a      	beq.n	8000f56 <__aeabi_fmul+0x11e>
 8000f40:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f44:	bf18      	it	ne
 8000f46:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	d1d8      	bne.n	8000efe <__aeabi_fmul+0xc6>
 8000f4c:	ea80 0001 	eor.w	r0, r0, r1
 8000f50:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f54:	4770      	bx	lr
 8000f56:	f090 0f00 	teq	r0, #0
 8000f5a:	bf17      	itett	ne
 8000f5c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f60:	4608      	moveq	r0, r1
 8000f62:	f091 0f00 	teqne	r1, #0
 8000f66:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f6a:	d014      	beq.n	8000f96 <__aeabi_fmul+0x15e>
 8000f6c:	ea92 0f0c 	teq	r2, ip
 8000f70:	d101      	bne.n	8000f76 <__aeabi_fmul+0x13e>
 8000f72:	0242      	lsls	r2, r0, #9
 8000f74:	d10f      	bne.n	8000f96 <__aeabi_fmul+0x15e>
 8000f76:	ea93 0f0c 	teq	r3, ip
 8000f7a:	d103      	bne.n	8000f84 <__aeabi_fmul+0x14c>
 8000f7c:	024b      	lsls	r3, r1, #9
 8000f7e:	bf18      	it	ne
 8000f80:	4608      	movne	r0, r1
 8000f82:	d108      	bne.n	8000f96 <__aeabi_fmul+0x15e>
 8000f84:	ea80 0001 	eor.w	r0, r0, r1
 8000f88:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f94:	4770      	bx	lr
 8000f96:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f9a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f9e:	4770      	bx	lr

08000fa0 <__aeabi_fdiv>:
 8000fa0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fa4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fa8:	bf1e      	ittt	ne
 8000faa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fae:	ea92 0f0c 	teqne	r2, ip
 8000fb2:	ea93 0f0c 	teqne	r3, ip
 8000fb6:	d069      	beq.n	800108c <__aeabi_fdiv+0xec>
 8000fb8:	eba2 0203 	sub.w	r2, r2, r3
 8000fbc:	ea80 0c01 	eor.w	ip, r0, r1
 8000fc0:	0249      	lsls	r1, r1, #9
 8000fc2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fc6:	d037      	beq.n	8001038 <__aeabi_fdiv+0x98>
 8000fc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fcc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fd0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fd4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	bf38      	it	cc
 8000fdc:	005b      	lslcc	r3, r3, #1
 8000fde:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fe2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	bf24      	itt	cs
 8000fea:	1a5b      	subcs	r3, r3, r1
 8000fec:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ff0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ff4:	bf24      	itt	cs
 8000ff6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ffa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ffe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001002:	bf24      	itt	cs
 8001004:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001008:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800100c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001010:	bf24      	itt	cs
 8001012:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001016:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800101a:	011b      	lsls	r3, r3, #4
 800101c:	bf18      	it	ne
 800101e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001022:	d1e0      	bne.n	8000fe6 <__aeabi_fdiv+0x46>
 8001024:	2afd      	cmp	r2, #253	; 0xfd
 8001026:	f63f af50 	bhi.w	8000eca <__aeabi_fmul+0x92>
 800102a:	428b      	cmp	r3, r1
 800102c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001030:	bf08      	it	eq
 8001032:	f020 0001 	biceq.w	r0, r0, #1
 8001036:	4770      	bx	lr
 8001038:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800103c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001040:	327f      	adds	r2, #127	; 0x7f
 8001042:	bfc2      	ittt	gt
 8001044:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001048:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800104c:	4770      	bxgt	lr
 800104e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001052:	f04f 0300 	mov.w	r3, #0
 8001056:	3a01      	subs	r2, #1
 8001058:	e737      	b.n	8000eca <__aeabi_fmul+0x92>
 800105a:	f092 0f00 	teq	r2, #0
 800105e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001062:	bf02      	ittt	eq
 8001064:	0040      	lsleq	r0, r0, #1
 8001066:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800106a:	3a01      	subeq	r2, #1
 800106c:	d0f9      	beq.n	8001062 <__aeabi_fdiv+0xc2>
 800106e:	ea40 000c 	orr.w	r0, r0, ip
 8001072:	f093 0f00 	teq	r3, #0
 8001076:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800107a:	bf02      	ittt	eq
 800107c:	0049      	lsleq	r1, r1, #1
 800107e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001082:	3b01      	subeq	r3, #1
 8001084:	d0f9      	beq.n	800107a <__aeabi_fdiv+0xda>
 8001086:	ea41 010c 	orr.w	r1, r1, ip
 800108a:	e795      	b.n	8000fb8 <__aeabi_fdiv+0x18>
 800108c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001090:	ea92 0f0c 	teq	r2, ip
 8001094:	d108      	bne.n	80010a8 <__aeabi_fdiv+0x108>
 8001096:	0242      	lsls	r2, r0, #9
 8001098:	f47f af7d 	bne.w	8000f96 <__aeabi_fmul+0x15e>
 800109c:	ea93 0f0c 	teq	r3, ip
 80010a0:	f47f af70 	bne.w	8000f84 <__aeabi_fmul+0x14c>
 80010a4:	4608      	mov	r0, r1
 80010a6:	e776      	b.n	8000f96 <__aeabi_fmul+0x15e>
 80010a8:	ea93 0f0c 	teq	r3, ip
 80010ac:	d104      	bne.n	80010b8 <__aeabi_fdiv+0x118>
 80010ae:	024b      	lsls	r3, r1, #9
 80010b0:	f43f af4c 	beq.w	8000f4c <__aeabi_fmul+0x114>
 80010b4:	4608      	mov	r0, r1
 80010b6:	e76e      	b.n	8000f96 <__aeabi_fmul+0x15e>
 80010b8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010bc:	bf18      	it	ne
 80010be:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010c2:	d1ca      	bne.n	800105a <__aeabi_fdiv+0xba>
 80010c4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010c8:	f47f af5c 	bne.w	8000f84 <__aeabi_fmul+0x14c>
 80010cc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010d0:	f47f af3c 	bne.w	8000f4c <__aeabi_fmul+0x114>
 80010d4:	e75f      	b.n	8000f96 <__aeabi_fmul+0x15e>
 80010d6:	bf00      	nop

080010d8 <__gesf2>:
 80010d8:	f04f 3cff 	mov.w	ip, #4294967295
 80010dc:	e006      	b.n	80010ec <__cmpsf2+0x4>
 80010de:	bf00      	nop

080010e0 <__lesf2>:
 80010e0:	f04f 0c01 	mov.w	ip, #1
 80010e4:	e002      	b.n	80010ec <__cmpsf2+0x4>
 80010e6:	bf00      	nop

080010e8 <__cmpsf2>:
 80010e8:	f04f 0c01 	mov.w	ip, #1
 80010ec:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010f0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010f8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010fc:	bf18      	it	ne
 80010fe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001102:	d011      	beq.n	8001128 <__cmpsf2+0x40>
 8001104:	b001      	add	sp, #4
 8001106:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800110a:	bf18      	it	ne
 800110c:	ea90 0f01 	teqne	r0, r1
 8001110:	bf58      	it	pl
 8001112:	ebb2 0003 	subspl.w	r0, r2, r3
 8001116:	bf88      	it	hi
 8001118:	17c8      	asrhi	r0, r1, #31
 800111a:	bf38      	it	cc
 800111c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001120:	bf18      	it	ne
 8001122:	f040 0001 	orrne.w	r0, r0, #1
 8001126:	4770      	bx	lr
 8001128:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800112c:	d102      	bne.n	8001134 <__cmpsf2+0x4c>
 800112e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001132:	d105      	bne.n	8001140 <__cmpsf2+0x58>
 8001134:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001138:	d1e4      	bne.n	8001104 <__cmpsf2+0x1c>
 800113a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800113e:	d0e1      	beq.n	8001104 <__cmpsf2+0x1c>
 8001140:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop

08001148 <__aeabi_cfrcmple>:
 8001148:	4684      	mov	ip, r0
 800114a:	4608      	mov	r0, r1
 800114c:	4661      	mov	r1, ip
 800114e:	e7ff      	b.n	8001150 <__aeabi_cfcmpeq>

08001150 <__aeabi_cfcmpeq>:
 8001150:	b50f      	push	{r0, r1, r2, r3, lr}
 8001152:	f7ff ffc9 	bl	80010e8 <__cmpsf2>
 8001156:	2800      	cmp	r0, #0
 8001158:	bf48      	it	mi
 800115a:	f110 0f00 	cmnmi.w	r0, #0
 800115e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001160 <__aeabi_fcmpeq>:
 8001160:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001164:	f7ff fff4 	bl	8001150 <__aeabi_cfcmpeq>
 8001168:	bf0c      	ite	eq
 800116a:	2001      	moveq	r0, #1
 800116c:	2000      	movne	r0, #0
 800116e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001172:	bf00      	nop

08001174 <__aeabi_fcmplt>:
 8001174:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001178:	f7ff ffea 	bl	8001150 <__aeabi_cfcmpeq>
 800117c:	bf34      	ite	cc
 800117e:	2001      	movcc	r0, #1
 8001180:	2000      	movcs	r0, #0
 8001182:	f85d fb08 	ldr.w	pc, [sp], #8
 8001186:	bf00      	nop

08001188 <__aeabi_fcmple>:
 8001188:	f84d ed08 	str.w	lr, [sp, #-8]!
 800118c:	f7ff ffe0 	bl	8001150 <__aeabi_cfcmpeq>
 8001190:	bf94      	ite	ls
 8001192:	2001      	movls	r0, #1
 8001194:	2000      	movhi	r0, #0
 8001196:	f85d fb08 	ldr.w	pc, [sp], #8
 800119a:	bf00      	nop

0800119c <__aeabi_fcmpge>:
 800119c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011a0:	f7ff ffd2 	bl	8001148 <__aeabi_cfrcmple>
 80011a4:	bf94      	ite	ls
 80011a6:	2001      	movls	r0, #1
 80011a8:	2000      	movhi	r0, #0
 80011aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80011ae:	bf00      	nop

080011b0 <__aeabi_fcmpgt>:
 80011b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b4:	f7ff ffc8 	bl	8001148 <__aeabi_cfrcmple>
 80011b8:	bf34      	ite	cc
 80011ba:	2001      	movcc	r0, #1
 80011bc:	2000      	movcs	r0, #0
 80011be:	f85d fb08 	ldr.w	pc, [sp], #8
 80011c2:	bf00      	nop

080011c4 <__aeabi_f2iz>:
 80011c4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011c8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011cc:	d30f      	bcc.n	80011ee <__aeabi_f2iz+0x2a>
 80011ce:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011d2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011d6:	d90d      	bls.n	80011f4 <__aeabi_f2iz+0x30>
 80011d8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011e0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80011e4:	fa23 f002 	lsr.w	r0, r3, r2
 80011e8:	bf18      	it	ne
 80011ea:	4240      	negne	r0, r0
 80011ec:	4770      	bx	lr
 80011ee:	f04f 0000 	mov.w	r0, #0
 80011f2:	4770      	bx	lr
 80011f4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011f8:	d101      	bne.n	80011fe <__aeabi_f2iz+0x3a>
 80011fa:	0242      	lsls	r2, r0, #9
 80011fc:	d105      	bne.n	800120a <__aeabi_f2iz+0x46>
 80011fe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001202:	bf08      	it	eq
 8001204:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001208:	4770      	bx	lr
 800120a:	f04f 0000 	mov.w	r0, #0
 800120e:	4770      	bx	lr

08001210 <__aeabi_f2uiz>:
 8001210:	0042      	lsls	r2, r0, #1
 8001212:	d20e      	bcs.n	8001232 <__aeabi_f2uiz+0x22>
 8001214:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001218:	d30b      	bcc.n	8001232 <__aeabi_f2uiz+0x22>
 800121a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800121e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001222:	d409      	bmi.n	8001238 <__aeabi_f2uiz+0x28>
 8001224:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001228:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800122c:	fa23 f002 	lsr.w	r0, r3, r2
 8001230:	4770      	bx	lr
 8001232:	f04f 0000 	mov.w	r0, #0
 8001236:	4770      	bx	lr
 8001238:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800123c:	d101      	bne.n	8001242 <__aeabi_f2uiz+0x32>
 800123e:	0242      	lsls	r2, r0, #9
 8001240:	d102      	bne.n	8001248 <__aeabi_f2uiz+0x38>
 8001242:	f04f 30ff 	mov.w	r0, #4294967295
 8001246:	4770      	bx	lr
 8001248:	f04f 0000 	mov.w	r0, #0
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop

08001250 <__aeabi_uldivmod>:
 8001250:	b953      	cbnz	r3, 8001268 <__aeabi_uldivmod+0x18>
 8001252:	b94a      	cbnz	r2, 8001268 <__aeabi_uldivmod+0x18>
 8001254:	2900      	cmp	r1, #0
 8001256:	bf08      	it	eq
 8001258:	2800      	cmpeq	r0, #0
 800125a:	bf1c      	itt	ne
 800125c:	f04f 31ff 	movne.w	r1, #4294967295
 8001260:	f04f 30ff 	movne.w	r0, #4294967295
 8001264:	f000 b96e 	b.w	8001544 <__aeabi_idiv0>
 8001268:	f1ad 0c08 	sub.w	ip, sp, #8
 800126c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001270:	f000 f806 	bl	8001280 <__udivmoddi4>
 8001274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800127c:	b004      	add	sp, #16
 800127e:	4770      	bx	lr

08001280 <__udivmoddi4>:
 8001280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001284:	9e08      	ldr	r6, [sp, #32]
 8001286:	460d      	mov	r5, r1
 8001288:	4604      	mov	r4, r0
 800128a:	468e      	mov	lr, r1
 800128c:	2b00      	cmp	r3, #0
 800128e:	f040 8083 	bne.w	8001398 <__udivmoddi4+0x118>
 8001292:	428a      	cmp	r2, r1
 8001294:	4617      	mov	r7, r2
 8001296:	d947      	bls.n	8001328 <__udivmoddi4+0xa8>
 8001298:	fab2 f382 	clz	r3, r2
 800129c:	b14b      	cbz	r3, 80012b2 <__udivmoddi4+0x32>
 800129e:	f1c3 0120 	rsb	r1, r3, #32
 80012a2:	fa05 fe03 	lsl.w	lr, r5, r3
 80012a6:	fa20 f101 	lsr.w	r1, r0, r1
 80012aa:	409f      	lsls	r7, r3
 80012ac:	ea41 0e0e 	orr.w	lr, r1, lr
 80012b0:	409c      	lsls	r4, r3
 80012b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80012b6:	fbbe fcf8 	udiv	ip, lr, r8
 80012ba:	fa1f f987 	uxth.w	r9, r7
 80012be:	fb08 e21c 	mls	r2, r8, ip, lr
 80012c2:	fb0c f009 	mul.w	r0, ip, r9
 80012c6:	0c21      	lsrs	r1, r4, #16
 80012c8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80012cc:	4290      	cmp	r0, r2
 80012ce:	d90a      	bls.n	80012e6 <__udivmoddi4+0x66>
 80012d0:	18ba      	adds	r2, r7, r2
 80012d2:	f10c 31ff 	add.w	r1, ip, #4294967295
 80012d6:	f080 8118 	bcs.w	800150a <__udivmoddi4+0x28a>
 80012da:	4290      	cmp	r0, r2
 80012dc:	f240 8115 	bls.w	800150a <__udivmoddi4+0x28a>
 80012e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80012e4:	443a      	add	r2, r7
 80012e6:	1a12      	subs	r2, r2, r0
 80012e8:	fbb2 f0f8 	udiv	r0, r2, r8
 80012ec:	fb08 2210 	mls	r2, r8, r0, r2
 80012f0:	fb00 f109 	mul.w	r1, r0, r9
 80012f4:	b2a4      	uxth	r4, r4
 80012f6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80012fa:	42a1      	cmp	r1, r4
 80012fc:	d909      	bls.n	8001312 <__udivmoddi4+0x92>
 80012fe:	193c      	adds	r4, r7, r4
 8001300:	f100 32ff 	add.w	r2, r0, #4294967295
 8001304:	f080 8103 	bcs.w	800150e <__udivmoddi4+0x28e>
 8001308:	42a1      	cmp	r1, r4
 800130a:	f240 8100 	bls.w	800150e <__udivmoddi4+0x28e>
 800130e:	3802      	subs	r0, #2
 8001310:	443c      	add	r4, r7
 8001312:	1a64      	subs	r4, r4, r1
 8001314:	2100      	movs	r1, #0
 8001316:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800131a:	b11e      	cbz	r6, 8001324 <__udivmoddi4+0xa4>
 800131c:	2200      	movs	r2, #0
 800131e:	40dc      	lsrs	r4, r3
 8001320:	e9c6 4200 	strd	r4, r2, [r6]
 8001324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001328:	b902      	cbnz	r2, 800132c <__udivmoddi4+0xac>
 800132a:	deff      	udf	#255	; 0xff
 800132c:	fab2 f382 	clz	r3, r2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d14f      	bne.n	80013d4 <__udivmoddi4+0x154>
 8001334:	1a8d      	subs	r5, r1, r2
 8001336:	2101      	movs	r1, #1
 8001338:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800133c:	fa1f f882 	uxth.w	r8, r2
 8001340:	fbb5 fcfe 	udiv	ip, r5, lr
 8001344:	fb0e 551c 	mls	r5, lr, ip, r5
 8001348:	fb08 f00c 	mul.w	r0, r8, ip
 800134c:	0c22      	lsrs	r2, r4, #16
 800134e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8001352:	42a8      	cmp	r0, r5
 8001354:	d907      	bls.n	8001366 <__udivmoddi4+0xe6>
 8001356:	197d      	adds	r5, r7, r5
 8001358:	f10c 32ff 	add.w	r2, ip, #4294967295
 800135c:	d202      	bcs.n	8001364 <__udivmoddi4+0xe4>
 800135e:	42a8      	cmp	r0, r5
 8001360:	f200 80e9 	bhi.w	8001536 <__udivmoddi4+0x2b6>
 8001364:	4694      	mov	ip, r2
 8001366:	1a2d      	subs	r5, r5, r0
 8001368:	fbb5 f0fe 	udiv	r0, r5, lr
 800136c:	fb0e 5510 	mls	r5, lr, r0, r5
 8001370:	fb08 f800 	mul.w	r8, r8, r0
 8001374:	b2a4      	uxth	r4, r4
 8001376:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800137a:	45a0      	cmp	r8, r4
 800137c:	d907      	bls.n	800138e <__udivmoddi4+0x10e>
 800137e:	193c      	adds	r4, r7, r4
 8001380:	f100 32ff 	add.w	r2, r0, #4294967295
 8001384:	d202      	bcs.n	800138c <__udivmoddi4+0x10c>
 8001386:	45a0      	cmp	r8, r4
 8001388:	f200 80d9 	bhi.w	800153e <__udivmoddi4+0x2be>
 800138c:	4610      	mov	r0, r2
 800138e:	eba4 0408 	sub.w	r4, r4, r8
 8001392:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001396:	e7c0      	b.n	800131a <__udivmoddi4+0x9a>
 8001398:	428b      	cmp	r3, r1
 800139a:	d908      	bls.n	80013ae <__udivmoddi4+0x12e>
 800139c:	2e00      	cmp	r6, #0
 800139e:	f000 80b1 	beq.w	8001504 <__udivmoddi4+0x284>
 80013a2:	2100      	movs	r1, #0
 80013a4:	e9c6 0500 	strd	r0, r5, [r6]
 80013a8:	4608      	mov	r0, r1
 80013aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013ae:	fab3 f183 	clz	r1, r3
 80013b2:	2900      	cmp	r1, #0
 80013b4:	d14b      	bne.n	800144e <__udivmoddi4+0x1ce>
 80013b6:	42ab      	cmp	r3, r5
 80013b8:	d302      	bcc.n	80013c0 <__udivmoddi4+0x140>
 80013ba:	4282      	cmp	r2, r0
 80013bc:	f200 80b9 	bhi.w	8001532 <__udivmoddi4+0x2b2>
 80013c0:	1a84      	subs	r4, r0, r2
 80013c2:	eb65 0303 	sbc.w	r3, r5, r3
 80013c6:	2001      	movs	r0, #1
 80013c8:	469e      	mov	lr, r3
 80013ca:	2e00      	cmp	r6, #0
 80013cc:	d0aa      	beq.n	8001324 <__udivmoddi4+0xa4>
 80013ce:	e9c6 4e00 	strd	r4, lr, [r6]
 80013d2:	e7a7      	b.n	8001324 <__udivmoddi4+0xa4>
 80013d4:	409f      	lsls	r7, r3
 80013d6:	f1c3 0220 	rsb	r2, r3, #32
 80013da:	40d1      	lsrs	r1, r2
 80013dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80013e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80013e4:	fa1f f887 	uxth.w	r8, r7
 80013e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80013ec:	fa24 f202 	lsr.w	r2, r4, r2
 80013f0:	409d      	lsls	r5, r3
 80013f2:	fb00 fc08 	mul.w	ip, r0, r8
 80013f6:	432a      	orrs	r2, r5
 80013f8:	0c15      	lsrs	r5, r2, #16
 80013fa:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80013fe:	45ac      	cmp	ip, r5
 8001400:	fa04 f403 	lsl.w	r4, r4, r3
 8001404:	d909      	bls.n	800141a <__udivmoddi4+0x19a>
 8001406:	197d      	adds	r5, r7, r5
 8001408:	f100 31ff 	add.w	r1, r0, #4294967295
 800140c:	f080 808f 	bcs.w	800152e <__udivmoddi4+0x2ae>
 8001410:	45ac      	cmp	ip, r5
 8001412:	f240 808c 	bls.w	800152e <__udivmoddi4+0x2ae>
 8001416:	3802      	subs	r0, #2
 8001418:	443d      	add	r5, r7
 800141a:	eba5 050c 	sub.w	r5, r5, ip
 800141e:	fbb5 f1fe 	udiv	r1, r5, lr
 8001422:	fb0e 5c11 	mls	ip, lr, r1, r5
 8001426:	fb01 f908 	mul.w	r9, r1, r8
 800142a:	b295      	uxth	r5, r2
 800142c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001430:	45a9      	cmp	r9, r5
 8001432:	d907      	bls.n	8001444 <__udivmoddi4+0x1c4>
 8001434:	197d      	adds	r5, r7, r5
 8001436:	f101 32ff 	add.w	r2, r1, #4294967295
 800143a:	d274      	bcs.n	8001526 <__udivmoddi4+0x2a6>
 800143c:	45a9      	cmp	r9, r5
 800143e:	d972      	bls.n	8001526 <__udivmoddi4+0x2a6>
 8001440:	3902      	subs	r1, #2
 8001442:	443d      	add	r5, r7
 8001444:	eba5 0509 	sub.w	r5, r5, r9
 8001448:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800144c:	e778      	b.n	8001340 <__udivmoddi4+0xc0>
 800144e:	f1c1 0720 	rsb	r7, r1, #32
 8001452:	408b      	lsls	r3, r1
 8001454:	fa22 fc07 	lsr.w	ip, r2, r7
 8001458:	ea4c 0c03 	orr.w	ip, ip, r3
 800145c:	fa25 f407 	lsr.w	r4, r5, r7
 8001460:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001464:	fbb4 f9fe 	udiv	r9, r4, lr
 8001468:	fa1f f88c 	uxth.w	r8, ip
 800146c:	fb0e 4419 	mls	r4, lr, r9, r4
 8001470:	fa20 f307 	lsr.w	r3, r0, r7
 8001474:	fb09 fa08 	mul.w	sl, r9, r8
 8001478:	408d      	lsls	r5, r1
 800147a:	431d      	orrs	r5, r3
 800147c:	0c2b      	lsrs	r3, r5, #16
 800147e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001482:	45a2      	cmp	sl, r4
 8001484:	fa02 f201 	lsl.w	r2, r2, r1
 8001488:	fa00 f301 	lsl.w	r3, r0, r1
 800148c:	d909      	bls.n	80014a2 <__udivmoddi4+0x222>
 800148e:	eb1c 0404 	adds.w	r4, ip, r4
 8001492:	f109 30ff 	add.w	r0, r9, #4294967295
 8001496:	d248      	bcs.n	800152a <__udivmoddi4+0x2aa>
 8001498:	45a2      	cmp	sl, r4
 800149a:	d946      	bls.n	800152a <__udivmoddi4+0x2aa>
 800149c:	f1a9 0902 	sub.w	r9, r9, #2
 80014a0:	4464      	add	r4, ip
 80014a2:	eba4 040a 	sub.w	r4, r4, sl
 80014a6:	fbb4 f0fe 	udiv	r0, r4, lr
 80014aa:	fb0e 4410 	mls	r4, lr, r0, r4
 80014ae:	fb00 fa08 	mul.w	sl, r0, r8
 80014b2:	b2ad      	uxth	r5, r5
 80014b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80014b8:	45a2      	cmp	sl, r4
 80014ba:	d908      	bls.n	80014ce <__udivmoddi4+0x24e>
 80014bc:	eb1c 0404 	adds.w	r4, ip, r4
 80014c0:	f100 35ff 	add.w	r5, r0, #4294967295
 80014c4:	d22d      	bcs.n	8001522 <__udivmoddi4+0x2a2>
 80014c6:	45a2      	cmp	sl, r4
 80014c8:	d92b      	bls.n	8001522 <__udivmoddi4+0x2a2>
 80014ca:	3802      	subs	r0, #2
 80014cc:	4464      	add	r4, ip
 80014ce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80014d2:	fba0 8902 	umull	r8, r9, r0, r2
 80014d6:	eba4 040a 	sub.w	r4, r4, sl
 80014da:	454c      	cmp	r4, r9
 80014dc:	46c6      	mov	lr, r8
 80014de:	464d      	mov	r5, r9
 80014e0:	d319      	bcc.n	8001516 <__udivmoddi4+0x296>
 80014e2:	d016      	beq.n	8001512 <__udivmoddi4+0x292>
 80014e4:	b15e      	cbz	r6, 80014fe <__udivmoddi4+0x27e>
 80014e6:	ebb3 020e 	subs.w	r2, r3, lr
 80014ea:	eb64 0405 	sbc.w	r4, r4, r5
 80014ee:	fa04 f707 	lsl.w	r7, r4, r7
 80014f2:	fa22 f301 	lsr.w	r3, r2, r1
 80014f6:	431f      	orrs	r7, r3
 80014f8:	40cc      	lsrs	r4, r1
 80014fa:	e9c6 7400 	strd	r7, r4, [r6]
 80014fe:	2100      	movs	r1, #0
 8001500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001504:	4631      	mov	r1, r6
 8001506:	4630      	mov	r0, r6
 8001508:	e70c      	b.n	8001324 <__udivmoddi4+0xa4>
 800150a:	468c      	mov	ip, r1
 800150c:	e6eb      	b.n	80012e6 <__udivmoddi4+0x66>
 800150e:	4610      	mov	r0, r2
 8001510:	e6ff      	b.n	8001312 <__udivmoddi4+0x92>
 8001512:	4543      	cmp	r3, r8
 8001514:	d2e6      	bcs.n	80014e4 <__udivmoddi4+0x264>
 8001516:	ebb8 0e02 	subs.w	lr, r8, r2
 800151a:	eb69 050c 	sbc.w	r5, r9, ip
 800151e:	3801      	subs	r0, #1
 8001520:	e7e0      	b.n	80014e4 <__udivmoddi4+0x264>
 8001522:	4628      	mov	r0, r5
 8001524:	e7d3      	b.n	80014ce <__udivmoddi4+0x24e>
 8001526:	4611      	mov	r1, r2
 8001528:	e78c      	b.n	8001444 <__udivmoddi4+0x1c4>
 800152a:	4681      	mov	r9, r0
 800152c:	e7b9      	b.n	80014a2 <__udivmoddi4+0x222>
 800152e:	4608      	mov	r0, r1
 8001530:	e773      	b.n	800141a <__udivmoddi4+0x19a>
 8001532:	4608      	mov	r0, r1
 8001534:	e749      	b.n	80013ca <__udivmoddi4+0x14a>
 8001536:	f1ac 0c02 	sub.w	ip, ip, #2
 800153a:	443d      	add	r5, r7
 800153c:	e713      	b.n	8001366 <__udivmoddi4+0xe6>
 800153e:	3802      	subs	r0, #2
 8001540:	443c      	add	r4, r7
 8001542:	e724      	b.n	800138e <__udivmoddi4+0x10e>

08001544 <__aeabi_idiv0>:
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop

08001548 <Algo_Init>:
bool Algo_adjust_steppers_position(Mobj *stove);
void Algo_update_steppers_inPlace_flag(void);
void Algo_stoveInit(Mobj *stove);

void Algo_Init(void const * argument)
{
 8001548:	b5b0      	push	{r4, r5, r7, lr}
 800154a:	b0aa      	sub	sp, #168	; 0xa8
 800154c:	af04      	add	r7, sp, #16
 800154e:	6078      	str	r0, [r7, #4]
	static Mobj UFEC23;
	Algo_fill_state_functions();
 8001550:	f000 ffcc 	bl	80024ec <Algo_fill_state_functions>

	PARAMFILE_Init();
 8001554:	f001 ff50 	bl	80033f8 <PARAMFILE_Init>
	Algo_stoveInit(&UFEC23);
 8001558:	483a      	ldr	r0, [pc, #232]	; (8001644 <Algo_Init+0xfc>)
 800155a:	f000 f98d 	bl	8001878 <Algo_stoveInit>
	Temperature_Init();
 800155e:	f002 fbed 	bl	8003d3c <Temperature_Init>
	ESPMANAGER_Init();
 8001562:	f001 f975 	bl	8002850 <ESPMANAGER_Init>
	Particle_Init();
 8001566:	f002 f8e1 	bl	800372c <Particle_Init>


	// Print all parameters into the debug file
	for(uint32_t ix = 0; ix < PARAMFILE_GetParamEntryCount(); ix++)
 800156a:	2300      	movs	r3, #0
 800156c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001570:	e038      	b.n	80015e4 <Algo_Init+0x9c>
	{
	  const PFL_SParameterItem* pParamItem = PARAMFILE_GetParamEntryByIndex(ix);
 8001572:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8001576:	f001 ff5d 	bl	8003434 <PARAMFILE_GetParamEntryByIndex>
 800157a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	  if (pParamItem == NULL)
 800157e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001582:	2b00      	cmp	r3, #0
 8001584:	d028      	beq.n	80015d8 <Algo_Init+0x90>
		  continue;

	  char tmp[128+1];
	  int32_t s32Value;
	  PFL_GetValueInt32(&PARAMFILE_g_sHandle, pParamItem->szKey, &s32Value);
 8001586:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001590:	4619      	mov	r1, r3
 8001592:	482d      	ldr	r0, [pc, #180]	; (8001648 <Algo_Init+0x100>)
 8001594:	f002 f823 	bl	80035de <PFL_GetValueInt32>
	  snprintf(tmp, sizeof(tmp), "%s | %d (default: %d, min: %d, max: %d)", pParamItem->szKey, (int)s32Value, (int)pParamItem->uType.sInt32.s32Default, (int)pParamItem->uType.sInt32.s32Min, (int)pParamItem->uType.sInt32.s32Max);
 8001598:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800159c:	681d      	ldr	r5, [r3, #0]
 800159e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015a2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80015a6:	6912      	ldr	r2, [r2, #16]
 80015a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80015ac:	6949      	ldr	r1, [r1, #20]
 80015ae:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80015b2:	6980      	ldr	r0, [r0, #24]
 80015b4:	f107 0408 	add.w	r4, r7, #8
 80015b8:	9003      	str	r0, [sp, #12]
 80015ba:	9102      	str	r1, [sp, #8]
 80015bc:	9201      	str	r2, [sp, #4]
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	462b      	mov	r3, r5
 80015c2:	4a22      	ldr	r2, [pc, #136]	; (800164c <Algo_Init+0x104>)
 80015c4:	2181      	movs	r1, #129	; 0x81
 80015c6:	4620      	mov	r0, r4
 80015c8:	f00e f8ec 	bl	800f7a4 <sniprintf>
	  printf(tmp);
 80015cc:	f107 0308 	add.w	r3, r7, #8
 80015d0:	4618      	mov	r0, r3
 80015d2:	f00e f8bb 	bl	800f74c <iprintf>
 80015d6:	e000      	b.n	80015da <Algo_Init+0x92>
		  continue;
 80015d8:	bf00      	nop
	for(uint32_t ix = 0; ix < PARAMFILE_GetParamEntryCount(); ix++)
 80015da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80015de:	3301      	adds	r3, #1
 80015e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80015e4:	f001 ff1c 	bl	8003420 <PARAMFILE_GetParamEntryCount>
 80015e8:	4602      	mov	r2, r0
 80015ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d3bf      	bcc.n	8001572 <Algo_Init+0x2a>
	}


    for(;;)
    {
    	GPIOManager(&UFEC23,osKernelSysTick());
 80015f2:	f00a f8ae 	bl	800b752 <osKernelSysTick>
 80015f6:	4603      	mov	r3, r0
 80015f8:	4619      	mov	r1, r3
 80015fa:	4812      	ldr	r0, [pc, #72]	; (8001644 <Algo_Init+0xfc>)
 80015fc:	f001 fade 	bl	8002bbc <GPIOManager>
    	TemperatureManager(&UFEC23,osKernelSysTick());
 8001600:	f00a f8a7 	bl	800b752 <osKernelSysTick>
 8001604:	4603      	mov	r3, r0
 8001606:	4619      	mov	r1, r3
 8001608:	480e      	ldr	r0, [pc, #56]	; (8001644 <Algo_Init+0xfc>)
 800160a:	f002 fbc9 	bl	8003da0 <TemperatureManager>
    	DebugManager(&UFEC23,osKernelSysTick());
 800160e:	f00a f8a0 	bl	800b752 <osKernelSysTick>
 8001612:	4603      	mov	r3, r0
 8001614:	4619      	mov	r1, r3
 8001616:	480b      	ldr	r0, [pc, #44]	; (8001644 <Algo_Init+0xfc>)
 8001618:	f001 f840 	bl	800269c <DebugManager>
    	ESPMANAGER_Task();
 800161c:	f001 f948 	bl	80028b0 <ESPMANAGER_Task>
    	ParticlesManager(osKernelSysTick());
 8001620:	f00a f897 	bl	800b752 <osKernelSysTick>
 8001624:	4603      	mov	r3, r0
 8001626:	4618      	mov	r0, r3
 8001628:	f002 f8c2 	bl	80037b0 <ParticlesManager>
    	Algo_task(&UFEC23, osKernelSysTick());
 800162c:	f00a f891 	bl	800b752 <osKernelSysTick>
 8001630:	4603      	mov	r3, r0
 8001632:	4619      	mov	r1, r3
 8001634:	4803      	ldr	r0, [pc, #12]	; (8001644 <Algo_Init+0xfc>)
 8001636:	f000 f80b 	bl	8001650 <Algo_task>
    	osDelay(1);
 800163a:	2001      	movs	r0, #1
 800163c:	f00a f8e5 	bl	800b80a <osDelay>
    	GPIOManager(&UFEC23,osKernelSysTick());
 8001640:	e7d7      	b.n	80015f2 <Algo_Init+0xaa>
 8001642:	bf00      	nop
 8001644:	20000310 	.word	0x20000310
 8001648:	200038d8 	.word	0x200038d8
 800164c:	08012908 	.word	0x08012908

08001650 <Algo_task>:
    }

}

void Algo_task(Mobj *stove, uint32_t u32CurrentTime_ms)
{
 8001650:	b590      	push	{r4, r7, lr}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
	const PF_UsrParam* UsrParam =  PB_GetUserParam();
 800165a:	f001 ff15 	bl	8003488 <PB_GetUserParam>
 800165e:	60f8      	str	r0, [r7, #12]
	const PF_OverHeat_Thresholds_t* OvrhtParams = PB_GetOverheatParams();
 8001660:	f001 ff1c 	bl	800349c <PB_GetOverheatParams>
 8001664:	60b8      	str	r0, [r7, #8]

	Algo_update_steppers_inPlace_flag();
 8001666:	f000 ffb3 	bl	80025d0 <Algo_update_steppers_inPlace_flag>

	if((currentState != MANUAL_CONTROL) && UsrParam->s32ManualOverride == 1)
 800166a:	4b7c      	ldr	r3, [pc, #496]	; (800185c <Algo_task+0x20c>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b0a      	cmp	r3, #10
 8001670:	d007      	beq.n	8001682 <Algo_task+0x32>
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d103      	bne.n	8001682 <Algo_task+0x32>
	{
		nextState = MANUAL_CONTROL;
 800167a:	4b79      	ldr	r3, [pc, #484]	; (8001860 <Algo_task+0x210>)
 800167c:	220a      	movs	r2, #10
 800167e:	701a      	strb	r2, [r3, #0]
 8001680:	e0c6      	b.n	8001810 <Algo_task+0x1c0>
	}
	else if((currentState != SAFETY) && stove->bSafetyOn)
 8001682:	4b76      	ldr	r3, [pc, #472]	; (800185c <Algo_task+0x20c>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b09      	cmp	r3, #9
 8001688:	d008      	beq.n	800169c <Algo_task+0x4c>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <Algo_task+0x4c>
	{
		nextState = SAFETY;
 8001694:	4b72      	ldr	r3, [pc, #456]	; (8001860 <Algo_task+0x210>)
 8001696:	2209      	movs	r2, #9
 8001698:	701a      	strb	r2, [r3, #0]
 800169a:	e0b9      	b.n	8001810 <Algo_task+0x1c0>
	}
	else if((currentState != OVERTEMP) && (currentState != SAFETY) && (
 800169c:	4b6f      	ldr	r3, [pc, #444]	; (800185c <Algo_task+0x20c>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b08      	cmp	r3, #8
 80016a2:	d034      	beq.n	800170e <Algo_task+0xbe>
 80016a4:	4b6d      	ldr	r3, [pc, #436]	; (800185c <Algo_task+0x20c>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b09      	cmp	r3, #9
 80016aa:	d030      	beq.n	800170e <Algo_task+0xbe>
			(stove->fBaffleTemp > P2F(OvrhtParams->OverheatBaffle))  ||
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a1c      	ldr	r4, [r3, #32]
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fb6b 	bl	8000d90 <__aeabi_i2f>
 80016ba:	4603      	mov	r3, r0
	else if((currentState != OVERTEMP) && (currentState != SAFETY) && (
 80016bc:	4619      	mov	r1, r3
 80016be:	4620      	mov	r0, r4
 80016c0:	f7ff fd76 	bl	80011b0 <__aeabi_fcmpgt>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d11d      	bne.n	8001706 <Algo_task+0xb6>
			(stove->fChamberTemp > P2F(OvrhtParams->OverheatChamber)) ||
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fb5c 	bl	8000d90 <__aeabi_i2f>
 80016d8:	4603      	mov	r3, r0
			(stove->fBaffleTemp > P2F(OvrhtParams->OverheatBaffle))  ||
 80016da:	4619      	mov	r1, r3
 80016dc:	4620      	mov	r0, r4
 80016de:	f7ff fd67 	bl	80011b0 <__aeabi_fcmpgt>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d10e      	bne.n	8001706 <Algo_task+0xb6>
			(stove->fPlenumTemp > P2F(OvrhtParams->OverheatPlenum))) )
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fb4d 	bl	8000d90 <__aeabi_i2f>
 80016f6:	4603      	mov	r3, r0
			(stove->fChamberTemp > P2F(OvrhtParams->OverheatChamber)) ||
 80016f8:	4619      	mov	r1, r3
 80016fa:	4620      	mov	r0, r4
 80016fc:	f7ff fd58 	bl	80011b0 <__aeabi_fcmpgt>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <Algo_task+0xbe>
	{
		nextState = OVERTEMP;
 8001706:	4b56      	ldr	r3, [pc, #344]	; (8001860 <Algo_task+0x210>)
 8001708:	2208      	movs	r2, #8
 800170a:	701a      	strb	r2, [r3, #0]
 800170c:	e080      	b.n	8001810 <Algo_task+0x1c0>
	}
	else if(stove->bstateJustChanged) // If first loop in state, perform entry action
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001714:	2b00      	cmp	r3, #0
 8001716:	d01e      	beq.n	8001756 <Algo_task+0x106>
	{
		stove->u32TimeOfStateEntry_ms = u32CurrentTime_ms;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	63da      	str	r2, [r3, #60]	; 0x3c
		stove->bstateJustChanged = false;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

		if(AlgoStateEntryAction[currentState] != NULL)
 8001726:	4b4d      	ldr	r3, [pc, #308]	; (800185c <Algo_task+0x20c>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	4b4d      	ldr	r3, [pc, #308]	; (8001864 <Algo_task+0x214>)
 800172e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d06c      	beq.n	8001810 <Algo_task+0x1c0>
		{
			AlgoStateEntryAction[currentState](stove, sStateParams[currentState]);
 8001736:	4b49      	ldr	r3, [pc, #292]	; (800185c <Algo_task+0x20c>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	461a      	mov	r2, r3
 800173c:	4b49      	ldr	r3, [pc, #292]	; (8001864 <Algo_task+0x214>)
 800173e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001742:	4a46      	ldr	r2, [pc, #280]	; (800185c <Algo_task+0x20c>)
 8001744:	7812      	ldrb	r2, [r2, #0]
 8001746:	4611      	mov	r1, r2
 8001748:	4a47      	ldr	r2, [pc, #284]	; (8001868 <Algo_task+0x218>)
 800174a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800174e:	4611      	mov	r1, r2
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	4798      	blx	r3
 8001754:	e05c      	b.n	8001810 <Algo_task+0x1c0>
		}

	}
	else // When we get here, check if it's time to compute an adjustment
	{
		if((u32CurrentTime_ms - stove->u32TimeOfComputation_ms) > UsrParam->s32TimeBetweenComputations_ms)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	6992      	ldr	r2, [r2, #24]
 8001762:	4293      	cmp	r3, r2
 8001764:	d939      	bls.n	80017da <Algo_task+0x18a>
		{
			Temperature_update_deltaT(stove,(u32CurrentTime_ms - stove->u32TimeOfComputation_ms));
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	4619      	mov	r1, r3
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f002 fccb 	bl	800410c <Temperature_update_deltaT>
			if((u32CurrentTime_ms - stove->u32TimeOfStateEntry_ms) > SECONDS(sStateParams[currentState]->i32EntryWaitTimeSeconds))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	4a37      	ldr	r2, [pc, #220]	; (800185c <Algo_task+0x20c>)
 8001780:	7812      	ldrb	r2, [r2, #0]
 8001782:	4611      	mov	r1, r2
 8001784:	4a38      	ldr	r2, [pc, #224]	; (8001868 <Algo_task+0x218>)
 8001786:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800178a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800178c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001790:	fb01 f202 	mul.w	r2, r1, r2
 8001794:	4293      	cmp	r3, r2
 8001796:	d916      	bls.n	80017c6 <Algo_task+0x176>
			{
				if(AlgoComputeAdjustment[currentState] != NULL)
 8001798:	4b30      	ldr	r3, [pc, #192]	; (800185c <Algo_task+0x20c>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	4b33      	ldr	r3, [pc, #204]	; (800186c <Algo_task+0x21c>)
 80017a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00e      	beq.n	80017c6 <Algo_task+0x176>
				{
					AlgoComputeAdjustment[currentState](stove, sStateParams[currentState], u32CurrentTime_ms);
 80017a8:	4b2c      	ldr	r3, [pc, #176]	; (800185c <Algo_task+0x20c>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	461a      	mov	r2, r3
 80017ae:	4b2f      	ldr	r3, [pc, #188]	; (800186c <Algo_task+0x21c>)
 80017b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b4:	4a29      	ldr	r2, [pc, #164]	; (800185c <Algo_task+0x20c>)
 80017b6:	7812      	ldrb	r2, [r2, #0]
 80017b8:	4611      	mov	r1, r2
 80017ba:	4a2b      	ldr	r2, [pc, #172]	; (8001868 <Algo_task+0x218>)
 80017bc:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	4798      	blx	r3
				}
			}
			stove->u32TimeOfComputation_ms = u32CurrentTime_ms;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	645a      	str	r2, [r3, #68]	; 0x44
			PrintOutput(stove, nextState);
 80017cc:	4b24      	ldr	r3, [pc, #144]	; (8001860 <Algo_task+0x210>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	4619      	mov	r1, r3
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 ff7a 	bl	80026cc <PrintOutput>
 80017d8:	e01a      	b.n	8001810 <Algo_task+0x1c0>
		}else if(currentState == MANUAL_CONTROL) // If in manual control, we don't wait the computation time
 80017da:	4b20      	ldr	r3, [pc, #128]	; (800185c <Algo_task+0x20c>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b0a      	cmp	r3, #10
 80017e0:	d116      	bne.n	8001810 <Algo_task+0x1c0>
		{										// But we still loop in the first 'if' once per computation period (to print output)
			if(AlgoComputeAdjustment[currentState] != NULL)
 80017e2:	4b1e      	ldr	r3, [pc, #120]	; (800185c <Algo_task+0x20c>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	4b20      	ldr	r3, [pc, #128]	; (800186c <Algo_task+0x21c>)
 80017ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00e      	beq.n	8001810 <Algo_task+0x1c0>
			{
				AlgoComputeAdjustment[currentState](stove, sStateParams[currentState], u32CurrentTime_ms);
 80017f2:	4b1a      	ldr	r3, [pc, #104]	; (800185c <Algo_task+0x20c>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	4b1c      	ldr	r3, [pc, #112]	; (800186c <Algo_task+0x21c>)
 80017fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017fe:	4a17      	ldr	r2, [pc, #92]	; (800185c <Algo_task+0x20c>)
 8001800:	7812      	ldrb	r2, [r2, #0]
 8001802:	4611      	mov	r1, r2
 8001804:	4a18      	ldr	r2, [pc, #96]	; (8001868 <Algo_task+0x218>)
 8001806:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	4798      	blx	r3
			}
		}
	}

	if(bStepperAdjustmentNeeded) // If an adjustment is requested, send configs to motors
 8001810:	4b17      	ldr	r3, [pc, #92]	; (8001870 <Algo_task+0x220>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d00b      	beq.n	8001830 <Algo_task+0x1e0>
	{

		if(Algo_adjust_steppers_position(stove))
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 feef 	bl	80025fc <Algo_adjust_steppers_position>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d005      	beq.n	8001830 <Algo_task+0x1e0>
		{
			bStepperAdjustmentNeeded = false;
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <Algo_task+0x220>)
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
			stove->u32TimeOfAdjustment_ms = u32CurrentTime_ms;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}

	if(nextState != currentState) // Perform state change if requested
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <Algo_task+0x210>)
 8001832:	781a      	ldrb	r2, [r3, #0]
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <Algo_task+0x20c>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	d00b      	beq.n	8001854 <Algo_task+0x204>
	{
		lastState = currentState;
 800183c:	4b07      	ldr	r3, [pc, #28]	; (800185c <Algo_task+0x20c>)
 800183e:	781a      	ldrb	r2, [r3, #0]
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <Algo_task+0x224>)
 8001842:	701a      	strb	r2, [r3, #0]
		currentState = nextState;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <Algo_task+0x210>)
 8001846:	781a      	ldrb	r2, [r3, #0]
 8001848:	4b04      	ldr	r3, [pc, #16]	; (800185c <Algo_task+0x20c>)
 800184a:	701a      	strb	r2, [r3, #0]
		stove->bstateJustChanged = true;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	}

}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	bd90      	pop	{r4, r7, pc}
 800185c:	20000256 	.word	0x20000256
 8001860:	20000258 	.word	0x20000258
 8001864:	20000288 	.word	0x20000288
 8001868:	200038a8 	.word	0x200038a8
 800186c:	2000025c 	.word	0x2000025c
 8001870:	20000255 	.word	0x20000255
 8001874:	20000257 	.word	0x20000257

08001878 <Algo_stoveInit>:

void Algo_stoveInit(Mobj *stove)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	stove->sParticles = ParticlesGetObject(); // Get pointer to particles Structure
 8001880:	f002 fa52 	bl	8003d28 <ParticlesGetObject>
 8001884:	4602      	mov	r2, r0
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	619a      	str	r2, [r3, #24]
	stove->sUserParams = PB_GetUserParam();
 800188a:	f001 fdfd 	bl	8003488 <PB_GetUserParam>
 800188e:	4602      	mov	r2, r0
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	61da      	str	r2, [r3, #28]
	sOverheatParams = PB_GetOverheatParams();
 8001894:	f001 fe02 	bl	800349c <PB_GetOverheatParams>
 8001898:	4603      	mov	r3, r0
 800189a:	4a28      	ldr	r2, [pc, #160]	; (800193c <Algo_stoveInit+0xc4>)
 800189c:	6013      	str	r3, [r2, #0]
	sStateParams[WAITING] = PB_GetWaitingParams();
 800189e:	f001 fe07 	bl	80034b0 <PB_GetWaitingParams>
 80018a2:	4603      	mov	r3, r0
 80018a4:	4a26      	ldr	r2, [pc, #152]	; (8001940 <Algo_stoveInit+0xc8>)
 80018a6:	6053      	str	r3, [r2, #4]
	sStateParams[RELOAD_IGNITION] = PB_GetReloadParams();
 80018a8:	f001 fe0c 	bl	80034c4 <PB_GetReloadParams>
 80018ac:	4603      	mov	r3, r0
 80018ae:	4a24      	ldr	r2, [pc, #144]	; (8001940 <Algo_stoveInit+0xc8>)
 80018b0:	6093      	str	r3, [r2, #8]
	sStateParams[TEMPERATURE_RISE] = PB_GetTRiseParams();
 80018b2:	f001 fe11 	bl	80034d8 <PB_GetTRiseParams>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4a21      	ldr	r2, [pc, #132]	; (8001940 <Algo_stoveInit+0xc8>)
 80018ba:	60d3      	str	r3, [r2, #12]
	sStateParams[COMBUSTION_LOW] = PB_GetCombLowParams();
 80018bc:	f001 fe16 	bl	80034ec <PB_GetCombLowParams>
 80018c0:	4603      	mov	r3, r0
 80018c2:	4a1f      	ldr	r2, [pc, #124]	; (8001940 <Algo_stoveInit+0xc8>)
 80018c4:	6153      	str	r3, [r2, #20]
	sStateParams[COMBUSTION_HIGH] = PB_GetCombHighParams();
 80018c6:	f001 fe1b 	bl	8003500 <PB_GetCombHighParams>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4a1c      	ldr	r2, [pc, #112]	; (8001940 <Algo_stoveInit+0xc8>)
 80018ce:	6113      	str	r3, [r2, #16]
	sStateParams[COAL_LOW] = PB_GetCoalLowParams();
 80018d0:	f001 fe20 	bl	8003514 <PB_GetCoalLowParams>
 80018d4:	4603      	mov	r3, r0
 80018d6:	4a1a      	ldr	r2, [pc, #104]	; (8001940 <Algo_stoveInit+0xc8>)
 80018d8:	6193      	str	r3, [r2, #24]
	sStateParams[COAL_HIGH] = PB_GetCoalHighParams();
 80018da:	f001 fe25 	bl	8003528 <PB_GetCoalHighParams>
 80018de:	4603      	mov	r3, r0
 80018e0:	4a17      	ldr	r2, [pc, #92]	; (8001940 <Algo_stoveInit+0xc8>)
 80018e2:	61d3      	str	r3, [r2, #28]

	sStatedummy.i32EntryWaitTimeSeconds = 0;
 80018e4:	4b17      	ldr	r3, [pc, #92]	; (8001944 <Algo_stoveInit+0xcc>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	649a      	str	r2, [r3, #72]	; 0x48

	sStateParams[ZEROING_STEPPER] = &sStatedummy;
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <Algo_stoveInit+0xc8>)
 80018ec:	4a15      	ldr	r2, [pc, #84]	; (8001944 <Algo_stoveInit+0xcc>)
 80018ee:	601a      	str	r2, [r3, #0]
	sStateParams[OVERTEMP] = &sStatedummy;
 80018f0:	4b13      	ldr	r3, [pc, #76]	; (8001940 <Algo_stoveInit+0xc8>)
 80018f2:	4a14      	ldr	r2, [pc, #80]	; (8001944 <Algo_stoveInit+0xcc>)
 80018f4:	621a      	str	r2, [r3, #32]
	sStateParams[SAFETY] = &sStatedummy;
 80018f6:	4b12      	ldr	r3, [pc, #72]	; (8001940 <Algo_stoveInit+0xc8>)
 80018f8:	4a12      	ldr	r2, [pc, #72]	; (8001944 <Algo_stoveInit+0xcc>)
 80018fa:	625a      	str	r2, [r3, #36]	; 0x24
	sStateParams[MANUAL_CONTROL] = &sStatedummy;
 80018fc:	4b10      	ldr	r3, [pc, #64]	; (8001940 <Algo_stoveInit+0xc8>)
 80018fe:	4a11      	ldr	r2, [pc, #68]	; (8001944 <Algo_stoveInit+0xcc>)
 8001900:	629a      	str	r2, [r3, #40]	; 0x28

	stove->u32TimeOfStateEntry_ms = 0;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	63da      	str	r2, [r3, #60]	; 0x3c
	stove->u32TimeOfAdjustment_ms = 0;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	641a      	str	r2, [r3, #64]	; 0x40
	stove->u32TimeOfComputation_ms = 0;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	645a      	str	r2, [r3, #68]	; 0x44
	stove->bReloadRequested = false;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	stove->bstateJustChanged = true;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	stove->bSafetyOn = false;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	stove->TimeOfReloadRequest = 0;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	200038d4 	.word	0x200038d4
 8001940:	200038a8 	.word	0x200038a8
 8001944:	200002b4 	.word	0x200002b4

08001948 <Algo_zeroing_entry>:
///////////////////////// STATE MACHINE  //////////////////////////////////////////////////////////////////////


//** STATE: ZEROING STEPPER **//
static void Algo_zeroing_entry(Mobj *stove,const  PF_StateParam_t* sParams)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
	stove->sPrimary.i8apertureSteps = 0;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
	stove->sPrimary.fSecPerStep = 0;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	605a      	str	r2, [r3, #4]
	stove->sGrill.i8apertureSteps = 0;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	721a      	strb	r2, [r3, #8]
	stove->sGrill.fSecPerStep = 0;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	60da      	str	r2, [r3, #12]
	stove->sSecondary.i8apertureSteps = 0;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	741a      	strb	r2, [r3, #16]
	stove->sSecondary.fSecPerStep = 0;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	615a      	str	r2, [r3, #20]
	bStepperAdjustmentNeeded = true;
 800197c:	4b03      	ldr	r3, [pc, #12]	; (800198c <Algo_zeroing_entry+0x44>)
 800197e:	2201      	movs	r2, #1
 8001980:	701a      	strb	r2, [r3, #0]
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr
 800198c:	20000255 	.word	0x20000255

08001990 <Algo_zeroing_action>:

static void Algo_zeroing_action(Mobj* stove,const  PF_StateParam_t* sParams, uint32_t u32CurrentTime_ms)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]

	if(motors_ready_for_req)
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <Algo_zeroing_action+0x24>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d002      	beq.n	80019aa <Algo_zeroing_action+0x1a>
	{
		nextState = WAITING;
 80019a4:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <Algo_zeroing_action+0x28>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	701a      	strb	r2, [r3, #0]
	}
}
 80019aa:	bf00      	nop
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr
 80019b4:	20000254 	.word	0x20000254
 80019b8:	20000258 	.word	0x20000258

080019bc <Algo_waiting_entry>:
//** END: ZEROING STEPPER **//

//** STATE: WAITING **//
static void Algo_waiting_entry(Mobj *stove,const  PF_StateParam_t* sParams)
{
 80019bc:	b590      	push	{r4, r7, lr}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
	if((stove->fBaffleTemp > P2F(sParams->sTemperature.fAbsMaxDiff)))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a1c      	ldr	r4, [r3, #32]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff f9de 	bl	8000d90 <__aeabi_i2f>
 80019d4:	4603      	mov	r3, r0
 80019d6:	4619      	mov	r1, r3
 80019d8:	4620      	mov	r0, r4
 80019da:	f7ff fbe9 	bl	80011b0 <__aeabi_fcmpgt>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d100      	bne.n	80019e6 <Algo_waiting_entry+0x2a>
	{
		nextState = TEMPERATURE_RISE;
	}

}
 80019e4:	e002      	b.n	80019ec <Algo_waiting_entry+0x30>
		nextState = TEMPERATURE_RISE;
 80019e6:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <Algo_waiting_entry+0x38>)
 80019e8:	2203      	movs	r2, #3
 80019ea:	701a      	strb	r2, [r3, #0]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd90      	pop	{r4, r7, pc}
 80019f4:	20000258 	.word	0x20000258

080019f8 <Algo_Waiting_action>:

static void Algo_Waiting_action(Mobj* stove,const  PF_StateParam_t* sParams, uint32_t u32CurrentTime_ms)
{
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
	if(!stove->bInterlockOn)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a0a:	f083 0301 	eor.w	r3, r3, #1
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d019      	beq.n	8001a48 <Algo_Waiting_action+0x50>
	{
		if((stove->fBaffleTemp > P2F(sParams->sTemperature.fTarget)) || stove->bReloadRequested)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6a1c      	ldr	r4, [r3, #32]
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff f9b7 	bl	8000d90 <__aeabi_i2f>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4619      	mov	r1, r3
 8001a26:	4620      	mov	r0, r4
 8001a28:	f7ff fbc2 	bl	80011b0 <__aeabi_fcmpgt>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d104      	bne.n	8001a3c <Algo_Waiting_action+0x44>
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d005      	beq.n	8001a48 <Algo_Waiting_action+0x50>
		{
			nextState = RELOAD_IGNITION;
 8001a3c:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <Algo_Waiting_action+0x58>)
 8001a3e:	2202      	movs	r2, #2
 8001a40:	701a      	strb	r2, [r3, #0]
			stove->TimeOfReloadRequest = u32CurrentTime_ms;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	64da      	str	r2, [r3, #76]	; 0x4c
		}
	}

}
 8001a48:	bf00      	nop
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd90      	pop	{r4, r7, pc}
 8001a50:	20000258 	.word	0x20000258

08001a54 <Algo_reload_entry>:
//** END: ZEROING STEPPER **//

//** STATE: RELOAD / IGNITION **//
static void Algo_reload_entry(Mobj* stove,const  PF_StateParam_t* sParams)
{
 8001a54:	b590      	push	{r4, r7, lr}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
		stove->sPrimary.i8apertureSteps = sParams->sPrimary.i32Max;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	b25a      	sxtb	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	701a      	strb	r2, [r3, #0]
		stove->sPrimary.fSecPerStep = 0; // force aperture
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	605a      	str	r2, [r3, #4]
		stove->sGrill.i8apertureSteps = sParams->sGrill.i32Max;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	b25a      	sxtb	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	721a      	strb	r2, [r3, #8]
		stove->sGrill.fSecPerStep = 0; // force aperture
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
		stove->sSecondary.i8apertureSteps = sParams->sSecondary.i32Max;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a86:	b25a      	sxtb	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	741a      	strb	r2, [r3, #16]
		stove->sSecondary.fSecPerStep = 0; // force aperture
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	615a      	str	r2, [r3, #20]
		bStepperAdjustmentNeeded = true;
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <Algo_reload_entry+0x74>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	701a      	strb	r2, [r3, #0]

		if((stove->fBaffleTemp > P2F(sParams->sTemperature.fAbsMaxDiff)))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a1c      	ldr	r4, [r3, #32]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff f974 	bl	8000d90 <__aeabi_i2f>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4620      	mov	r0, r4
 8001aae:	f7ff fb7f 	bl	80011b0 <__aeabi_fcmpgt>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d100      	bne.n	8001aba <Algo_reload_entry+0x66>
		{
			nextState = TEMPERATURE_RISE;
		}

}
 8001ab8:	e002      	b.n	8001ac0 <Algo_reload_entry+0x6c>
			nextState = TEMPERATURE_RISE;
 8001aba:	4b04      	ldr	r3, [pc, #16]	; (8001acc <Algo_reload_entry+0x78>)
 8001abc:	2203      	movs	r2, #3
 8001abe:	701a      	strb	r2, [r3, #0]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd90      	pop	{r4, r7, pc}
 8001ac8:	20000255 	.word	0x20000255
 8001acc:	20000258 	.word	0x20000258

08001ad0 <Algo_reload_action>:

static void Algo_reload_action(Mobj* stove,const  PF_StateParam_t* sParams, uint32_t u32CurrentTime_ms)
{
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]

	if((stove->fBaffleTemp > P2F(sParams->sTemperature.fTarget)))
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6a1c      	ldr	r4, [r3, #32]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff f953 	bl	8000d90 <__aeabi_i2f>
 8001aea:	4603      	mov	r3, r0
 8001aec:	4619      	mov	r1, r3
 8001aee:	4620      	mov	r0, r4
 8001af0:	f7ff fb5e 	bl	80011b0 <__aeabi_fcmpgt>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d100      	bne.n	8001afc <Algo_reload_action+0x2c>
	{
		nextState = TEMPERATURE_RISE;
	}
}
 8001afa:	e002      	b.n	8001b02 <Algo_reload_action+0x32>
		nextState = TEMPERATURE_RISE;
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <Algo_reload_action+0x3c>)
 8001afe:	2203      	movs	r2, #3
 8001b00:	701a      	strb	r2, [r3, #0]
}
 8001b02:	bf00      	nop
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd90      	pop	{r4, r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000258 	.word	0x20000258

08001b10 <Algo_tempRise_entry>:
//** END: RELOAD / IGNITION**//


//** STATE: TEMPERATURE RISE **//
static void Algo_tempRise_entry(Mobj* stove,const  PF_StateParam_t* sParams)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
	stove->sPrimary.i8apertureSteps = sParams->sPrimary.i32Max;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	b25a      	sxtb	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	701a      	strb	r2, [r3, #0]
	stove->sPrimary.fSecPerStep = 0; // force aperture
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	605a      	str	r2, [r3, #4]
	stove->sGrill.i8apertureSteps = sParams->sGrill.i32Max;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b30:	b25a      	sxtb	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	721a      	strb	r2, [r3, #8]
	stove->sGrill.fSecPerStep = 0; // force aperture
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	60da      	str	r2, [r3, #12]
	stove->sSecondary.i8apertureSteps = sParams->sSecondary.i32Max;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b42:	b25a      	sxtb	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	741a      	strb	r2, [r3, #16]
	stove->sSecondary.fSecPerStep = 0; // force aperture
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	615a      	str	r2, [r3, #20]
	bStepperAdjustmentNeeded = true;
 8001b50:	4b03      	ldr	r3, [pc, #12]	; (8001b60 <Algo_tempRise_entry+0x50>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	701a      	strb	r2, [r3, #0]
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr
 8001b60:	20000255 	.word	0x20000255

08001b64 <Algo_tempRise_action>:

static void Algo_tempRise_action(Mobj* stove,const  PF_StateParam_t* sParams, uint32_t u32CurrentTime_ms)
{
 8001b64:	b5b0      	push	{r4, r5, r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
	static uint32_t u32TimeOfMajorCorr = 0;
	const PF_StepperStepsPerSec_t *sSpeedParams =  PB_SpeedParams();
 8001b70:	f001 fce4 	bl	800353c <PB_SpeedParams>
 8001b74:	6178      	str	r0, [r7, #20]

	// Case(s) we want to wait
	if((u32TimeOfMajorCorr != 0 && (u32CurrentTime_ms - u32TimeOfMajorCorr < MINUTES(1))) || 	// We just made a correction
 8001b76:	4b86      	ldr	r3, [pc, #536]	; (8001d90 <Algo_tempRise_action+0x22c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d008      	beq.n	8001b90 <Algo_tempRise_action+0x2c>
 8001b7e:	4b84      	ldr	r3, [pc, #528]	; (8001d90 <Algo_tempRise_action+0x22c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	f240 80fb 	bls.w	8001d86 <Algo_tempRise_action+0x222>
			(stove->fBaffleDeltaT < (P2F1DEC(sParams->sTempSlope.fTarget) - P2F1DEC(sParams->sTempSlope.fTolerance)))) // Temperature rises abnormally slow
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff f8f9 	bl	8000d90 <__aeabi_i2f>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	497c      	ldr	r1, [pc, #496]	; (8001d94 <Algo_tempRise_action+0x230>)
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff f9fc 	bl	8000fa0 <__aeabi_fdiv>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	461d      	mov	r5, r3
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff f8ed 	bl	8000d90 <__aeabi_i2f>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	4976      	ldr	r1, [pc, #472]	; (8001d94 <Algo_tempRise_action+0x230>)
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff f9f0 	bl	8000fa0 <__aeabi_fdiv>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4628      	mov	r0, r5
 8001bc6:	f7ff f82d 	bl	8000c24 <__aeabi_fsub>
 8001bca:	4603      	mov	r3, r0
	if((u32TimeOfMajorCorr != 0 && (u32CurrentTime_ms - u32TimeOfMajorCorr < MINUTES(1))) || 	// We just made a correction
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4620      	mov	r0, r4
 8001bd0:	f7ff fad0 	bl	8001174 <__aeabi_fcmplt>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f040 80d5 	bne.w	8001d86 <Algo_tempRise_action+0x222>
	{
		return;
	}

	if(stove->fBaffleTemp >P2F(sParams->i32FreeParam1)) // Here, i32FreeParam1 -> Temp to start regulating with particles
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6a1c      	ldr	r4, [r3, #32]
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff f8d3 	bl	8000d90 <__aeabi_i2f>
 8001bea:	4603      	mov	r3, r0
 8001bec:	4619      	mov	r1, r3
 8001bee:	4620      	mov	r0, r4
 8001bf0:	f7ff fade 	bl	80011b0 <__aeabi_fcmpgt>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d07a      	beq.n	8001cf0 <Algo_tempRise_action+0x18c>
	{
		if((stove->sParticles->fparticles - stove->sParticles->fnormalized_zero) > (P2F(sParams->sParticles.fAbsMaxDiff)) &&
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	695a      	ldr	r2, [r3, #20]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	4619      	mov	r1, r3
 8001c08:	4610      	mov	r0, r2
 8001c0a:	f7ff f80b 	bl	8000c24 <__aeabi_fsub>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	461c      	mov	r4, r3
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff f8ba 	bl	8000d90 <__aeabi_i2f>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4620      	mov	r0, r4
 8001c22:	f7ff fac5 	bl	80011b0 <__aeabi_fcmpgt>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d061      	beq.n	8001cf0 <Algo_tempRise_action+0x18c>
				stove->fBaffleDeltaT > (P2F1DEC(sParams->sTempSlope.fTarget) + P2F1DEC(sParams->sTempSlope.fTolerance)))
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff f8ab 	bl	8000d90 <__aeabi_i2f>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	4955      	ldr	r1, [pc, #340]	; (8001d94 <Algo_tempRise_action+0x230>)
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff f9ae 	bl	8000fa0 <__aeabi_fdiv>
 8001c44:	4603      	mov	r3, r0
 8001c46:	461d      	mov	r5, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff f89f 	bl	8000d90 <__aeabi_i2f>
 8001c52:	4603      	mov	r3, r0
 8001c54:	494f      	ldr	r1, [pc, #316]	; (8001d94 <Algo_tempRise_action+0x230>)
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff f9a2 	bl	8000fa0 <__aeabi_fdiv>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4628      	mov	r0, r5
 8001c62:	f7fe ffe1 	bl	8000c28 <__addsf3>
 8001c66:	4603      	mov	r3, r0
		if((stove->sParticles->fparticles - stove->sParticles->fnormalized_zero) > (P2F(sParams->sParticles.fAbsMaxDiff)) &&
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	f7ff faa0 	bl	80011b0 <__aeabi_fcmpgt>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d03c      	beq.n	8001cf0 <Algo_tempRise_action+0x18c>
		{
			if(stove->sGrill.i8apertureSteps > 15)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001c7c:	2b0f      	cmp	r3, #15
 8001c7e:	dd0d      	ble.n	8001c9c <Algo_tempRise_action+0x138>
			{
				stove->sGrill.i8apertureSteps /= 2;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001c86:	0fda      	lsrs	r2, r3, #31
 8001c88:	4413      	add	r3, r2
 8001c8a:	105b      	asrs	r3, r3, #1
 8001c8c:	b25a      	sxtb	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	721a      	strb	r2, [r3, #8]
				stove->sGrill.fSecPerStep = 0;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	e022      	b.n	8001ce2 <Algo_tempRise_action+0x17e>
			}
			else if(stove->sGrill.i8apertureSteps > sParams->sGrill.i32Min)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	dd09      	ble.n	8001cc0 <Algo_tempRise_action+0x15c>
			{
				stove->sGrill.i8apertureSteps = sParams->sGrill.i32Min;
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb0:	b25a      	sxtb	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	721a      	strb	r2, [r3, #8]
				stove->sGrill.fSecPerStep = 0;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	e010      	b.n	8001ce2 <Algo_tempRise_action+0x17e>
			}
			else
			{
				stove->sPrimary.i8apertureSteps = 75;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	224b      	movs	r2, #75	; 0x4b
 8001cc4:	701a      	strb	r2, [r3, #0]
				stove->sPrimary.fSecPerStep = 0;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f04f 0200 	mov.w	r2, #0
 8001ccc:	605a      	str	r2, [r3, #4]
				nextState = stove->bThermostatOn ? COMBUSTION_HIGH : COMBUSTION_LOW;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <Algo_tempRise_action+0x178>
 8001cd8:	2204      	movs	r2, #4
 8001cda:	e000      	b.n	8001cde <Algo_tempRise_action+0x17a>
 8001cdc:	2205      	movs	r2, #5
 8001cde:	4b2e      	ldr	r3, [pc, #184]	; (8001d98 <Algo_tempRise_action+0x234>)
 8001ce0:	701a      	strb	r2, [r3, #0]
			}


			bStepperAdjustmentNeeded = true;
 8001ce2:	4b2e      	ldr	r3, [pc, #184]	; (8001d9c <Algo_tempRise_action+0x238>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	701a      	strb	r2, [r3, #0]
			u32TimeOfMajorCorr = u32CurrentTime_ms;
 8001ce8:	4a29      	ldr	r2, [pc, #164]	; (8001d90 <Algo_tempRise_action+0x22c>)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6013      	str	r3, [r2, #0]
			return;
 8001cee:	e04b      	b.n	8001d88 <Algo_tempRise_action+0x224>
		}
	}

	if(motors_ready_for_req)
 8001cf0:	4b2b      	ldr	r3, [pc, #172]	; (8001da0 <Algo_tempRise_action+0x23c>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d047      	beq.n	8001d88 <Algo_tempRise_action+0x224>
	{
		if(stove->sGrill.i8apertureSteps > sParams->sGrill.i32Min)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d04:	429a      	cmp	r2, r3
 8001d06:	dd17      	ble.n	8001d38 <Algo_tempRise_action+0x1d4>
		{
			stove->sGrill.i8apertureSteps--;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	3b01      	subs	r3, #1
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	b25a      	sxtb	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	721a      	strb	r2, [r3, #8]
			stove->sGrill.fSecPerStep = P2F1DEC(sSpeedParams->fNormal);
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff f836 	bl	8000d90 <__aeabi_i2f>
 8001d24:	4603      	mov	r3, r0
 8001d26:	491b      	ldr	r1, [pc, #108]	; (8001d94 <Algo_tempRise_action+0x230>)
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff f939 	bl	8000fa0 <__aeabi_fdiv>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	461a      	mov	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	e022      	b.n	8001d7e <Algo_tempRise_action+0x21a>
		}else
		{

			if(stove->sPrimary.i8apertureSteps-- <= 75)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f993 3000 	ldrsb.w	r3, [r3]
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	3a01      	subs	r2, #1
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	b251      	sxtb	r1, r2
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	7011      	strb	r1, [r2, #0]
 8001d4a:	2b4b      	cmp	r3, #75	; 0x4b
 8001d4c:	dc09      	bgt.n	8001d62 <Algo_tempRise_action+0x1fe>
			{
				nextState = stove->bThermostatOn ? COMBUSTION_HIGH : COMBUSTION_LOW;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <Algo_tempRise_action+0x1f8>
 8001d58:	2204      	movs	r2, #4
 8001d5a:	e000      	b.n	8001d5e <Algo_tempRise_action+0x1fa>
 8001d5c:	2205      	movs	r2, #5
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <Algo_tempRise_action+0x234>)
 8001d60:	701a      	strb	r2, [r3, #0]
			}
			stove->sPrimary.fSecPerStep = P2F1DEC(sSpeedParams->fNormal);
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff f812 	bl	8000d90 <__aeabi_i2f>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	4909      	ldr	r1, [pc, #36]	; (8001d94 <Algo_tempRise_action+0x230>)
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff f915 	bl	8000fa0 <__aeabi_fdiv>
 8001d76:	4603      	mov	r3, r0
 8001d78:	461a      	mov	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	605a      	str	r2, [r3, #4]
		}

		bStepperAdjustmentNeeded = true;
 8001d7e:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <Algo_tempRise_action+0x238>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	701a      	strb	r2, [r3, #0]
 8001d84:	e000      	b.n	8001d88 <Algo_tempRise_action+0x224>
		return;
 8001d86:	bf00      	nop
	}


}
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000360 	.word	0x20000360
 8001d94:	41200000 	.word	0x41200000
 8001d98:	20000258 	.word	0x20000258
 8001d9c:	20000255 	.word	0x20000255
 8001da0:	20000254 	.word	0x20000254

08001da4 <Algo_combLow_entry>:
//** END: TEMPERATURE RISE **//


//** STATE: COMBUSTION LOW **//
static void Algo_combLow_entry(Mobj *stove,const  PF_StateParam_t* sParams)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
	stove->sPrimary.i8apertureSteps = sParams->sPrimary.i32Max;
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	b25a      	sxtb	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	701a      	strb	r2, [r3, #0]
	stove->sPrimary.fSecPerStep = 0; // force aperture
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f04f 0200 	mov.w	r2, #0
 8001dbe:	605a      	str	r2, [r3, #4]
	stove->sGrill.i8apertureSteps = sParams->sGrill.i32Max;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	b25a      	sxtb	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	721a      	strb	r2, [r3, #8]
	stove->sGrill.fSecPerStep = 0; // force aperture
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	60da      	str	r2, [r3, #12]
	stove->sSecondary.i8apertureSteps = sParams->sSecondary.i32Max;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd6:	b25a      	sxtb	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	741a      	strb	r2, [r3, #16]
	stove->sSecondary.fSecPerStep = 0; // force aperture
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	615a      	str	r2, [r3, #20]
	bStepperAdjustmentNeeded = true;
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <Algo_combLow_entry+0x50>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	701a      	strb	r2, [r3, #0]
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr
 8001df4:	20000255 	.word	0x20000255

08001df8 <Algo_combLow_action>:

static void Algo_combLow_action(Mobj* stove,const  PF_StateParam_t* sParams, uint32_t u32CurrentTime_ms)
{
 8001df8:	b5b0      	push	{r4, r5, r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
	static uint32_t u32ActionTime_ms = 0;
	const PF_StepperStepsPerSec_t *sSpeedParams =  PB_SpeedParams();
 8001e04:	f001 fb9a 	bl	800353c <PB_SpeedParams>
 8001e08:	6178      	str	r0, [r7, #20]

	if(stove->fBaffleTemp < P2F(sParams->sTemperature.fTarget - sParams->sTemperature.fTolerance))
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6a1c      	ldr	r4, [r3, #32]
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe ffbc 	bl	8000d90 <__aeabi_i2f>
 8001e18:	4605      	mov	r5, r0
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe ffb6 	bl	8000d90 <__aeabi_i2f>
 8001e24:	4603      	mov	r3, r0
 8001e26:	4619      	mov	r1, r3
 8001e28:	4628      	mov	r0, r5
 8001e2a:	f7fe fefb 	bl	8000c24 <__aeabi_fsub>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	4619      	mov	r1, r3
 8001e32:	4620      	mov	r0, r4
 8001e34:	f7ff f99e 	bl	8001174 <__aeabi_fcmplt>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 80ad 	beq.w	8001f9a <Algo_combLow_action+0x1a2>
	{
		if(stove->fBaffleDeltaT < P2F1DEC(sParams->sTempSlope.fTarget - sParams->sTempSlope.fAbsMaxDiff))
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7fe ffa1 	bl	8000d90 <__aeabi_i2f>
 8001e4e:	4605      	mov	r5, r0
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	4a84      	ldr	r2, [pc, #528]	; (8002068 <Algo_combLow_action+0x270>)
 8001e56:	fb82 1203 	smull	r1, r2, r2, r3
 8001e5a:	1092      	asrs	r2, r2, #2
 8001e5c:	17db      	asrs	r3, r3, #31
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe ff95 	bl	8000d90 <__aeabi_i2f>
 8001e66:	4603      	mov	r3, r0
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4628      	mov	r0, r5
 8001e6c:	f7fe feda 	bl	8000c24 <__aeabi_fsub>
 8001e70:	4603      	mov	r3, r0
 8001e72:	4619      	mov	r1, r3
 8001e74:	4620      	mov	r0, r4
 8001e76:	f7ff f97d 	bl	8001174 <__aeabi_fcmplt>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d02e      	beq.n	8001ede <Algo_combLow_action+0xe6>
		{
			if(u32ActionTime_ms - u32CurrentTime_ms > SECONDS(30))
 8001e80:	4b7a      	ldr	r3, [pc, #488]	; (800206c <Algo_combLow_action+0x274>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	f247 5230 	movw	r2, #30000	; 0x7530
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d926      	bls.n	8001ede <Algo_combLow_action+0xe6>
			{
				if(stove->sPrimary.i8apertureSteps *= 2 > sParams->sPrimary.i32Max)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f993 3000 	ldrsb.w	r3, [r3]
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e9c:	2a01      	cmp	r2, #1
 8001e9e:	bfd4      	ite	le
 8001ea0:	2201      	movle	r2, #1
 8001ea2:	2200      	movgt	r2, #0
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	fb02 f303 	mul.w	r3, r2, r3
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	b25a      	sxtb	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	701a      	strb	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f993 3000 	ldrsb.w	r3, [r3]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d004      	beq.n	8001ec8 <Algo_combLow_action+0xd0>
				{
					stove->sPrimary.i8apertureSteps = sParams->sPrimary.i32Max;
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	b25a      	sxtb	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	701a      	strb	r2, [r3, #0]
				}
				stove->sPrimary.fSecPerStep = 0; // force aperture
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	605a      	str	r2, [r3, #4]
				bStepperAdjustmentNeeded = true;
 8001ed0:	4b67      	ldr	r3, [pc, #412]	; (8002070 <Algo_combLow_action+0x278>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	701a      	strb	r2, [r3, #0]

				u32ActionTime_ms = u32CurrentTime_ms;
 8001ed6:	4a65      	ldr	r2, [pc, #404]	; (800206c <Algo_combLow_action+0x274>)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6013      	str	r3, [r2, #0]
				return;
 8001edc:	e195      	b.n	800220a <Algo_combLow_action+0x412>
			}

		}

		if(stove->fBaffleDeltaT < P2F1DEC(sParams->sTempSlope.fTarget - sParams->sTempSlope.fTolerance))
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe ff52 	bl	8000d90 <__aeabi_i2f>
 8001eec:	4605      	mov	r5, r0
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	4a5d      	ldr	r2, [pc, #372]	; (8002068 <Algo_combLow_action+0x270>)
 8001ef4:	fb82 1203 	smull	r1, r2, r2, r3
 8001ef8:	1092      	asrs	r2, r2, #2
 8001efa:	17db      	asrs	r3, r3, #31
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe ff46 	bl	8000d90 <__aeabi_i2f>
 8001f04:	4603      	mov	r3, r0
 8001f06:	4619      	mov	r1, r3
 8001f08:	4628      	mov	r0, r5
 8001f0a:	f7fe fe8b 	bl	8000c24 <__aeabi_fsub>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	4619      	mov	r1, r3
 8001f12:	4620      	mov	r0, r4
 8001f14:	f7ff f92e 	bl	8001174 <__aeabi_fcmplt>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 8166 	beq.w	80021ec <Algo_combLow_action+0x3f4>
		{
			if(motors_ready_for_req || stove->sPrimary.fSecPerStep != P2F1DEC(sSpeedParams->fSlow))
 8001f20:	4b54      	ldr	r3, [pc, #336]	; (8002074 <Algo_combLow_action+0x27c>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d114      	bne.n	8001f52 <Algo_combLow_action+0x15a>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	685c      	ldr	r4, [r3, #4]
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe ff2d 	bl	8000d90 <__aeabi_i2f>
 8001f36:	4603      	mov	r3, r0
 8001f38:	494f      	ldr	r1, [pc, #316]	; (8002078 <Algo_combLow_action+0x280>)
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff f830 	bl	8000fa0 <__aeabi_fdiv>
 8001f40:	4603      	mov	r3, r0
 8001f42:	4619      	mov	r1, r3
 8001f44:	4620      	mov	r0, r4
 8001f46:	f7ff f90b 	bl	8001160 <__aeabi_fcmpeq>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f040 814d 	bne.w	80021ec <Algo_combLow_action+0x3f4>
			{
				if(stove->sPrimary.i8apertureSteps++ > sParams->sPrimary.i32Max)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f993 2000 	ldrsb.w	r2, [r3]
 8001f58:	b2d3      	uxtb	r3, r2
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	b259      	sxtb	r1, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	7019      	strb	r1, [r3, #0]
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	dd04      	ble.n	8001f76 <Algo_combLow_action+0x17e>
				{
					stove->sPrimary.i8apertureSteps = sParams->sPrimary.i32Max;
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	b25a      	sxtb	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	701a      	strb	r2, [r3, #0]
				}
				stove->sPrimary.fSecPerStep = P2F1DEC(sSpeedParams->fSlow);
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe ff08 	bl	8000d90 <__aeabi_i2f>
 8001f80:	4603      	mov	r3, r0
 8001f82:	493d      	ldr	r1, [pc, #244]	; (8002078 <Algo_combLow_action+0x280>)
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff f80b 	bl	8000fa0 <__aeabi_fdiv>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	605a      	str	r2, [r3, #4]
				bStepperAdjustmentNeeded = true;
 8001f92:	4b37      	ldr	r3, [pc, #220]	; (8002070 <Algo_combLow_action+0x278>)
 8001f94:	2201      	movs	r2, #1
 8001f96:	701a      	strb	r2, [r3, #0]
				return;
 8001f98:	e137      	b.n	800220a <Algo_combLow_action+0x412>
			}

		}
	}else if(stove->fBaffleTemp < P2F(sParams->sTemperature.fTarget + sParams->sTemperature.fAbsMaxDiff))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6a1c      	ldr	r4, [r3, #32]
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fef4 	bl	8000d90 <__aeabi_i2f>
 8001fa8:	4605      	mov	r5, r0
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe feee 	bl	8000d90 <__aeabi_i2f>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4628      	mov	r0, r5
 8001fba:	f7fe fe35 	bl	8000c28 <__addsf3>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	f7ff f8d6 	bl	8001174 <__aeabi_fcmplt>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d056      	beq.n	800207c <Algo_combLow_action+0x284>
	{
		if(fabs(stove->fBaffleDeltaT) < P2F1DEC(sParams->sTempSlope.fTarget + sParams->sTempSlope.fTolerance))
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd2:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe fed8 	bl	8000d90 <__aeabi_i2f>
 8001fe0:	4605      	mov	r5, r0
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	4a20      	ldr	r2, [pc, #128]	; (8002068 <Algo_combLow_action+0x270>)
 8001fe8:	fb82 1203 	smull	r1, r2, r2, r3
 8001fec:	1092      	asrs	r2, r2, #2
 8001fee:	17db      	asrs	r3, r3, #31
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe fecc 	bl	8000d90 <__aeabi_i2f>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4628      	mov	r0, r5
 8001ffe:	f7fe fe13 	bl	8000c28 <__addsf3>
 8002002:	4603      	mov	r3, r0
 8002004:	4619      	mov	r1, r3
 8002006:	4620      	mov	r0, r4
 8002008:	f7ff f8b4 	bl	8001174 <__aeabi_fcmplt>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 80ec 	beq.w	80021ec <Algo_combLow_action+0x3f4>
		{
			if(motors_ready_for_req)
 8002014:	4b17      	ldr	r3, [pc, #92]	; (8002074 <Algo_combLow_action+0x27c>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 80e7 	beq.w	80021ec <Algo_combLow_action+0x3f4>
			{
				if(stove->sPrimary.i8apertureSteps-- < sParams->sPrimary.i32Min)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f993 2000 	ldrsb.w	r2, [r3]
 8002024:	b2d3      	uxtb	r3, r2
 8002026:	3b01      	subs	r3, #1
 8002028:	b2db      	uxtb	r3, r3
 800202a:	b259      	sxtb	r1, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	7019      	strb	r1, [r3, #0]
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002034:	429a      	cmp	r2, r3
 8002036:	da04      	bge.n	8002042 <Algo_combLow_action+0x24a>
				{
					stove->sPrimary.i8apertureSteps = sParams->sPrimary.i32Min;
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800203c:	b25a      	sxtb	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	701a      	strb	r2, [r3, #0]
				}
				stove->sPrimary.fSecPerStep = P2F1DEC(sSpeedParams->fVerySlow);
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fea2 	bl	8000d90 <__aeabi_i2f>
 800204c:	4603      	mov	r3, r0
 800204e:	490a      	ldr	r1, [pc, #40]	; (8002078 <Algo_combLow_action+0x280>)
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe ffa5 	bl	8000fa0 <__aeabi_fdiv>
 8002056:	4603      	mov	r3, r0
 8002058:	461a      	mov	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	605a      	str	r2, [r3, #4]
				bStepperAdjustmentNeeded = true;
 800205e:	4b04      	ldr	r3, [pc, #16]	; (8002070 <Algo_combLow_action+0x278>)
 8002060:	2201      	movs	r2, #1
 8002062:	701a      	strb	r2, [r3, #0]
				return;
 8002064:	e0d1      	b.n	800220a <Algo_combLow_action+0x412>
 8002066:	bf00      	nop
 8002068:	66666667 	.word	0x66666667
 800206c:	20000364 	.word	0x20000364
 8002070:	20000255 	.word	0x20000255
 8002074:	20000254 	.word	0x20000254
 8002078:	41200000 	.word	0x41200000
			}

		}
	}else
	{
		if(stove->fBaffleDeltaT > P2F1DEC(sParams->sTempSlope.fTarget + sParams->sTempSlope.fAbsMaxDiff))
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe fe83 	bl	8000d90 <__aeabi_i2f>
 800208a:	4605      	mov	r5, r0
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	4a5f      	ldr	r2, [pc, #380]	; (8002210 <Algo_combLow_action+0x418>)
 8002092:	fb82 1203 	smull	r1, r2, r2, r3
 8002096:	1092      	asrs	r2, r2, #2
 8002098:	17db      	asrs	r3, r3, #31
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe fe77 	bl	8000d90 <__aeabi_i2f>
 80020a2:	4603      	mov	r3, r0
 80020a4:	4619      	mov	r1, r3
 80020a6:	4628      	mov	r0, r5
 80020a8:	f7fe fdbe 	bl	8000c28 <__addsf3>
 80020ac:	4603      	mov	r3, r0
 80020ae:	4619      	mov	r1, r3
 80020b0:	4620      	mov	r0, r4
 80020b2:	f7ff f87d 	bl	80011b0 <__aeabi_fcmpgt>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d03b      	beq.n	8002134 <Algo_combLow_action+0x33c>
		{
			if(motors_ready_for_req || stove->sPrimary.fSecPerStep != P2F1DEC(sSpeedParams->fNormal))
 80020bc:	4b55      	ldr	r3, [pc, #340]	; (8002214 <Algo_combLow_action+0x41c>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d113      	bne.n	80020ec <Algo_combLow_action+0x2f4>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	685c      	ldr	r4, [r3, #4]
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7fe fe5f 	bl	8000d90 <__aeabi_i2f>
 80020d2:	4603      	mov	r3, r0
 80020d4:	4950      	ldr	r1, [pc, #320]	; (8002218 <Algo_combLow_action+0x420>)
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe ff62 	bl	8000fa0 <__aeabi_fdiv>
 80020dc:	4603      	mov	r3, r0
 80020de:	4619      	mov	r1, r3
 80020e0:	4620      	mov	r0, r4
 80020e2:	f7ff f83d 	bl	8001160 <__aeabi_fcmpeq>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d123      	bne.n	8002134 <Algo_combLow_action+0x33c>
			{
				if(stove->sPrimary.i8apertureSteps-- < sParams->sPrimary.i32Min)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f993 2000 	ldrsb.w	r2, [r3]
 80020f2:	b2d3      	uxtb	r3, r2
 80020f4:	3b01      	subs	r3, #1
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	b259      	sxtb	r1, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	7019      	strb	r1, [r3, #0]
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002102:	429a      	cmp	r2, r3
 8002104:	da04      	bge.n	8002110 <Algo_combLow_action+0x318>
				{
					stove->sPrimary.i8apertureSteps = sParams->sPrimary.i32Min;
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800210a:	b25a      	sxtb	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	701a      	strb	r2, [r3, #0]
				}
				stove->sPrimary.fSecPerStep = P2F1DEC(sSpeedParams->fNormal);
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	4618      	mov	r0, r3
 8002116:	f7fe fe3b 	bl	8000d90 <__aeabi_i2f>
 800211a:	4603      	mov	r3, r0
 800211c:	493e      	ldr	r1, [pc, #248]	; (8002218 <Algo_combLow_action+0x420>)
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe ff3e 	bl	8000fa0 <__aeabi_fdiv>
 8002124:	4603      	mov	r3, r0
 8002126:	461a      	mov	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	605a      	str	r2, [r3, #4]
				bStepperAdjustmentNeeded = true;
 800212c:	4b3b      	ldr	r3, [pc, #236]	; (800221c <Algo_combLow_action+0x424>)
 800212e:	2201      	movs	r2, #1
 8002130:	701a      	strb	r2, [r3, #0]
				return;
 8002132:	e06a      	b.n	800220a <Algo_combLow_action+0x412>
			}
		}

		if(stove->fBaffleDeltaT > P2F1DEC(sParams->sTempSlope.fTarget - sParams->sTempSlope.fTolerance))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe fe27 	bl	8000d90 <__aeabi_i2f>
 8002142:	4605      	mov	r5, r0
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	4a31      	ldr	r2, [pc, #196]	; (8002210 <Algo_combLow_action+0x418>)
 800214a:	fb82 1203 	smull	r1, r2, r2, r3
 800214e:	1092      	asrs	r2, r2, #2
 8002150:	17db      	asrs	r3, r3, #31
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe fe1b 	bl	8000d90 <__aeabi_i2f>
 800215a:	4603      	mov	r3, r0
 800215c:	4619      	mov	r1, r3
 800215e:	4628      	mov	r0, r5
 8002160:	f7fe fd60 	bl	8000c24 <__aeabi_fsub>
 8002164:	4603      	mov	r3, r0
 8002166:	4619      	mov	r1, r3
 8002168:	4620      	mov	r0, r4
 800216a:	f7ff f821 	bl	80011b0 <__aeabi_fcmpgt>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d03b      	beq.n	80021ec <Algo_combLow_action+0x3f4>
		{
			if(motors_ready_for_req || stove->sPrimary.fSecPerStep != P2F1DEC(sSpeedParams->fSlow))
 8002174:	4b27      	ldr	r3, [pc, #156]	; (8002214 <Algo_combLow_action+0x41c>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d113      	bne.n	80021a4 <Algo_combLow_action+0x3ac>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	685c      	ldr	r4, [r3, #4]
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	4618      	mov	r0, r3
 8002186:	f7fe fe03 	bl	8000d90 <__aeabi_i2f>
 800218a:	4603      	mov	r3, r0
 800218c:	4922      	ldr	r1, [pc, #136]	; (8002218 <Algo_combLow_action+0x420>)
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe ff06 	bl	8000fa0 <__aeabi_fdiv>
 8002194:	4603      	mov	r3, r0
 8002196:	4619      	mov	r1, r3
 8002198:	4620      	mov	r0, r4
 800219a:	f7fe ffe1 	bl	8001160 <__aeabi_fcmpeq>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d123      	bne.n	80021ec <Algo_combLow_action+0x3f4>
			{
				if(stove->sPrimary.i8apertureSteps-- < sParams->sPrimary.i32Min)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f993 2000 	ldrsb.w	r2, [r3]
 80021aa:	b2d3      	uxtb	r3, r2
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	b259      	sxtb	r1, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	7019      	strb	r1, [r3, #0]
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ba:	429a      	cmp	r2, r3
 80021bc:	da04      	bge.n	80021c8 <Algo_combLow_action+0x3d0>
				{
					stove->sPrimary.i8apertureSteps = sParams->sPrimary.i32Min;
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c2:	b25a      	sxtb	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	701a      	strb	r2, [r3, #0]
				}
				stove->sPrimary.fSecPerStep = P2F1DEC(sSpeedParams->fSlow);
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7fe fddf 	bl	8000d90 <__aeabi_i2f>
 80021d2:	4603      	mov	r3, r0
 80021d4:	4910      	ldr	r1, [pc, #64]	; (8002218 <Algo_combLow_action+0x420>)
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fe fee2 	bl	8000fa0 <__aeabi_fdiv>
 80021dc:	4603      	mov	r3, r0
 80021de:	461a      	mov	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	605a      	str	r2, [r3, #4]
				bStepperAdjustmentNeeded = true;
 80021e4:	4b0d      	ldr	r3, [pc, #52]	; (800221c <Algo_combLow_action+0x424>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	701a      	strb	r2, [r3, #0]
				return;
 80021ea:	e00e      	b.n	800220a <Algo_combLow_action+0x412>
		}


	}

	if(u32CurrentTime_ms - stove->u32TimeOfStateEntry_ms >MINUTES(sParams->i32MaximumTimeInStateMinutes))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80021f8:	f64e 2160 	movw	r1, #60000	; 0xea60
 80021fc:	fb01 f202 	mul.w	r2, r1, r2
 8002200:	4293      	cmp	r3, r2
 8002202:	d902      	bls.n	800220a <Algo_combLow_action+0x412>
	{
		nextState = COAL_LOW;
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <Algo_combLow_action+0x428>)
 8002206:	2206      	movs	r2, #6
 8002208:	701a      	strb	r2, [r3, #0]
	}




}
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bdb0      	pop	{r4, r5, r7, pc}
 8002210:	66666667 	.word	0x66666667
 8002214:	20000254 	.word	0x20000254
 8002218:	41200000 	.word	0x41200000
 800221c:	20000255 	.word	0x20000255
 8002220:	20000258 	.word	0x20000258

08002224 <Algo_combHigh_entry>:
//** END: COMBUSTION LOW **//

//** STATE: COMBUSTION HIGH **//
static void Algo_combHigh_entry(Mobj *stove,const  PF_StateParam_t* sParams)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]

}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr

08002238 <Algo_combHigh_action>:


static void Algo_combHigh_action(Mobj* stove,const  PF_StateParam_t* sParams, uint32_t u32CurrentTime_ms)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]

}
 8002244:	bf00      	nop
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr

0800224e <Algo_coalLow_entry>:
//** END: COMBUSTION HIGH **//

//** STATE: COAL LOW **//
static void Algo_coalLow_entry(Mobj *stove,const  PF_StateParam_t* sParams)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
 8002256:	6039      	str	r1, [r7, #0]

}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr
	...

08002264 <Algo_coalLow_action>:

static void Algo_coalLow_action(Mobj* stove,const  PF_StateParam_t* sParams, uint32_t u32CurrentTime_ms)
{
 8002264:	b590      	push	{r4, r7, lr}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
	static uint32_t u32ActionTime_ms = 0;

	if((stove->fBaffleTemp < P2F( sParams->sTemperature.fTarget)) && stove->sGrill.i8apertureSteps != sParams->sGrill.i32Max)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6a1c      	ldr	r4, [r3, #32]
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe fd89 	bl	8000d90 <__aeabi_i2f>
 800227e:	4603      	mov	r3, r0
 8002280:	4619      	mov	r1, r3
 8002282:	4620      	mov	r0, r4
 8002284:	f7fe ff76 	bl	8001174 <__aeabi_fcmplt>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d016      	beq.n	80022bc <Algo_coalLow_action+0x58>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002294:	461a      	mov	r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	429a      	cmp	r2, r3
 800229c:	d00e      	beq.n	80022bc <Algo_coalLow_action+0x58>
	{
		stove->sGrill.i8apertureSteps = sParams->sGrill.i32Max;
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	b25a      	sxtb	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	721a      	strb	r2, [r3, #8]
		stove->sGrill.fSecPerStep = 0; // force aperture
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	60da      	str	r2, [r3, #12]
		bStepperAdjustmentNeeded = true;
 80022b0:	4b27      	ldr	r3, [pc, #156]	; (8002350 <Algo_coalLow_action+0xec>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	701a      	strb	r2, [r3, #0]

		u32ActionTime_ms = u32CurrentTime_ms;
 80022b6:	4a27      	ldr	r2, [pc, #156]	; (8002354 <Algo_coalLow_action+0xf0>)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6013      	str	r3, [r2, #0]

	}

													// FreeParam1 used as container (see ParamFile.c)
	if(u32CurrentTime_ms - u32ActionTime_ms > MINUTES(sParams->i32FreeParam1) && (stove->sPrimary.i8apertureSteps != sParams->sPrimary.i32Min))
 80022bc:	4b25      	ldr	r3, [pc, #148]	; (8002354 <Algo_coalLow_action+0xf0>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80022c8:	f64e 2160 	movw	r1, #60000	; 0xea60
 80022cc:	fb01 f202 	mul.w	r2, r1, r2
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d916      	bls.n	8002302 <Algo_coalLow_action+0x9e>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f993 3000 	ldrsb.w	r3, [r3]
 80022da:	461a      	mov	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d00e      	beq.n	8002302 <Algo_coalLow_action+0x9e>
	{
		stove->sPrimary.i8apertureSteps = sParams->sPrimary.i32Min;
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e8:	b25a      	sxtb	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	701a      	strb	r2, [r3, #0]
		stove->sPrimary.fSecPerStep = 0; // force aperture
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f04f 0200 	mov.w	r2, #0
 80022f4:	605a      	str	r2, [r3, #4]
		bStepperAdjustmentNeeded = true;
 80022f6:	4b16      	ldr	r3, [pc, #88]	; (8002350 <Algo_coalLow_action+0xec>)
 80022f8:	2201      	movs	r2, #1
 80022fa:	701a      	strb	r2, [r3, #0]

		u32ActionTime_ms = u32CurrentTime_ms;
 80022fc:	4a15      	ldr	r2, [pc, #84]	; (8002354 <Algo_coalLow_action+0xf0>)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6013      	str	r3, [r2, #0]
	}
													// FreeParam2 used as container (see ParamFile.c)
	if(u32CurrentTime_ms - u32ActionTime_ms > MINUTES(sParams->i32FreeParam2) && (stove->sSecondary.i8apertureSteps != sParams->sSecondary.i32Min))
 8002302:	4b14      	ldr	r3, [pc, #80]	; (8002354 <Algo_coalLow_action+0xf0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800230e:	f64e 2160 	movw	r1, #60000	; 0xea60
 8002312:	fb01 f202 	mul.w	r2, r1, r2
 8002316:	4293      	cmp	r3, r2
 8002318:	d916      	bls.n	8002348 <Algo_coalLow_action+0xe4>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8002320:	461a      	mov	r2, r3
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002326:	429a      	cmp	r2, r3
 8002328:	d00e      	beq.n	8002348 <Algo_coalLow_action+0xe4>
	{
		stove->sSecondary.i8apertureSteps = sParams->sSecondary.i32Min;
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232e:	b25a      	sxtb	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	741a      	strb	r2, [r3, #16]
		stove->sSecondary.fSecPerStep = 0; // force aperture
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f04f 0200 	mov.w	r2, #0
 800233a:	615a      	str	r2, [r3, #20]
		bStepperAdjustmentNeeded = true;
 800233c:	4b04      	ldr	r3, [pc, #16]	; (8002350 <Algo_coalLow_action+0xec>)
 800233e:	2201      	movs	r2, #1
 8002340:	701a      	strb	r2, [r3, #0]

		u32ActionTime_ms = u32CurrentTime_ms;
 8002342:	4a04      	ldr	r2, [pc, #16]	; (8002354 <Algo_coalLow_action+0xf0>)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6013      	str	r3, [r2, #0]
	}


}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	bd90      	pop	{r4, r7, pc}
 8002350:	20000255 	.word	0x20000255
 8002354:	20000368 	.word	0x20000368

08002358 <Algo_coalHigh_entry>:
//** END: COAL LOW **//

//** STATE: COAL HIGH **//
static void Algo_coalHigh_entry(Mobj *stove,const  PF_StateParam_t* sParams)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]

}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <Algo_coalHigh_action>:

static void Algo_coalHigh_action(Mobj* stove,const  PF_StateParam_t* sParams, uint32_t u32CurrentTime_ms)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]

}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr
	...

08002384 <Algo_manual_action>:
//** END: COAL HIGH **//

static void Algo_manual_action(Mobj* stove,const  PF_StateParam_t* sParams, uint32_t u32CurrentTime_ms)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
	const PF_UsrParam* sManParam = PB_GetUserParam();
 8002390:	f001 f87a 	bl	8003488 <PB_GetUserParam>
 8002394:	6178      	str	r0, [r7, #20]

	if(!sManParam->s32ManualOverride) // TODO: Put this in task function
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d104      	bne.n	80023a8 <Algo_manual_action+0x24>
	{
		nextState = lastState;
 800239e:	4b1f      	ldr	r3, [pc, #124]	; (800241c <Algo_manual_action+0x98>)
 80023a0:	781a      	ldrb	r2, [r3, #0]
 80023a2:	4b1f      	ldr	r3, [pc, #124]	; (8002420 <Algo_manual_action+0x9c>)
 80023a4:	701a      	strb	r2, [r3, #0]
		return;
 80023a6:	e035      	b.n	8002414 <Algo_manual_action+0x90>
	}

	if(stove->sPrimary.i8apertureSteps != sManParam->s32ManualPrimary ||
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f993 3000 	ldrsb.w	r3, [r3]
 80023ae:	461a      	mov	r2, r3
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d10f      	bne.n	80023d8 <Algo_manual_action+0x54>
			stove->sGrill.i8apertureSteps != sManParam->s32ManualGrill ||
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80023be:	461a      	mov	r2, r3
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	695b      	ldr	r3, [r3, #20]
	if(stove->sPrimary.i8apertureSteps != sManParam->s32ManualPrimary ||
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d107      	bne.n	80023d8 <Algo_manual_action+0x54>
			stove->sSecondary.i8apertureSteps != sManParam->s32ManualSecondary)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80023ce:	461a      	mov	r2, r3
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	691b      	ldr	r3, [r3, #16]
			stove->sGrill.i8apertureSteps != sManParam->s32ManualGrill ||
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d01d      	beq.n	8002414 <Algo_manual_action+0x90>
	{
		stove->sPrimary.i8apertureSteps = sManParam->s32ManualPrimary;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	b25a      	sxtb	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	701a      	strb	r2, [r3, #0]
		stove->sPrimary.fSecPerStep = 0; // force aperture
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	605a      	str	r2, [r3, #4]
		stove->sGrill.i8apertureSteps = sManParam->s32ManualGrill;
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	b25a      	sxtb	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	721a      	strb	r2, [r3, #8]
		stove->sGrill.fSecPerStep = 0; // force aperture
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	60da      	str	r2, [r3, #12]
		stove->sSecondary.i8apertureSteps = sManParam->s32ManualSecondary;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	b25a      	sxtb	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	741a      	strb	r2, [r3, #16]
		stove->sSecondary.fSecPerStep = 0; // force aperture
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	615a      	str	r2, [r3, #20]
		bStepperAdjustmentNeeded = true;
 800240e:	4b05      	ldr	r3, [pc, #20]	; (8002424 <Algo_manual_action+0xa0>)
 8002410:	2201      	movs	r2, #1
 8002412:	701a      	strb	r2, [r3, #0]
	}


}
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20000257 	.word	0x20000257
 8002420:	20000258 	.word	0x20000258
 8002424:	20000255 	.word	0x20000255

08002428 <Algo_safety_action>:

static void Algo_safety_action(Mobj* stove, const PF_StateParam_t* sParams, uint32_t u32CurrentTime_ms)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
	if(!stove->bSafetyOn)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800243a:	f083 0301 	eor.w	r3, r3, #1
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <Algo_safety_action+0x24>
	{
		nextState = lastState;
 8002444:	4b04      	ldr	r3, [pc, #16]	; (8002458 <Algo_safety_action+0x30>)
 8002446:	781a      	ldrb	r2, [r3, #0]
 8002448:	4b04      	ldr	r3, [pc, #16]	; (800245c <Algo_safety_action+0x34>)
 800244a:	701a      	strb	r2, [r3, #0]
	}
}
 800244c:	bf00      	nop
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	20000257 	.word	0x20000257
 800245c:	20000258 	.word	0x20000258

08002460 <Algo_overtemp_action>:

static void Algo_overtemp_action(Mobj* stove, const PF_StateParam_t* sParams, uint32_t u32CurrentTime_ms)
{
 8002460:	b590      	push	{r4, r7, lr}
 8002462:	b087      	sub	sp, #28
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
	const PF_OverHeat_Thresholds_t* OvrhtParams = PB_GetOverheatParams();
 800246c:	f001 f816 	bl	800349c <PB_GetOverheatParams>
 8002470:	6178      	str	r0, [r7, #20]

	if((stove->fBaffleTemp < P2F(OvrhtParams->OverheatBaffle))  &&
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6a1c      	ldr	r4, [r3, #32]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe fc88 	bl	8000d90 <__aeabi_i2f>
 8002480:	4603      	mov	r3, r0
 8002482:	4619      	mov	r1, r3
 8002484:	4620      	mov	r0, r4
 8002486:	f7fe fe75 	bl	8001174 <__aeabi_fcmplt>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d100      	bne.n	8002492 <Algo_overtemp_action+0x32>
				(stove->fChamberTemp < P2F(OvrhtParams->OverheatChamber)) &&
				(stove->fPlenumTemp < P2F(OvrhtParams->OverheatPlenumExit)) )
		{
			nextState = lastState;
		}
}
 8002490:	e023      	b.n	80024da <Algo_overtemp_action+0x7a>
				(stove->fChamberTemp < P2F(OvrhtParams->OverheatChamber)) &&
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe fc78 	bl	8000d90 <__aeabi_i2f>
 80024a0:	4603      	mov	r3, r0
	if((stove->fBaffleTemp < P2F(OvrhtParams->OverheatBaffle))  &&
 80024a2:	4619      	mov	r1, r3
 80024a4:	4620      	mov	r0, r4
 80024a6:	f7fe fe65 	bl	8001174 <__aeabi_fcmplt>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d100      	bne.n	80024b2 <Algo_overtemp_action+0x52>
}
 80024b0:	e013      	b.n	80024da <Algo_overtemp_action+0x7a>
				(stove->fPlenumTemp < P2F(OvrhtParams->OverheatPlenumExit)) )
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fe fc68 	bl	8000d90 <__aeabi_i2f>
 80024c0:	4603      	mov	r3, r0
				(stove->fChamberTemp < P2F(OvrhtParams->OverheatChamber)) &&
 80024c2:	4619      	mov	r1, r3
 80024c4:	4620      	mov	r0, r4
 80024c6:	f7fe fe55 	bl	8001174 <__aeabi_fcmplt>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d100      	bne.n	80024d2 <Algo_overtemp_action+0x72>
}
 80024d0:	e003      	b.n	80024da <Algo_overtemp_action+0x7a>
			nextState = lastState;
 80024d2:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <Algo_overtemp_action+0x84>)
 80024d4:	781a      	ldrb	r2, [r3, #0]
 80024d6:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <Algo_overtemp_action+0x88>)
 80024d8:	701a      	strb	r2, [r3, #0]
}
 80024da:	bf00      	nop
 80024dc:	371c      	adds	r7, #28
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd90      	pop	{r4, r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000257 	.word	0x20000257
 80024e8:	20000258 	.word	0x20000258

080024ec <Algo_fill_state_functions>:

///////////////// Handle and low level functions /////////////////////////////////////////

void Algo_fill_state_functions(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
	AlgoComputeAdjustment[ZEROING_STEPPER] = Algo_zeroing_action;
 80024f0:	4b22      	ldr	r3, [pc, #136]	; (800257c <Algo_fill_state_functions+0x90>)
 80024f2:	4a23      	ldr	r2, [pc, #140]	; (8002580 <Algo_fill_state_functions+0x94>)
 80024f4:	601a      	str	r2, [r3, #0]
	AlgoComputeAdjustment[WAITING] = Algo_Waiting_action;
 80024f6:	4b21      	ldr	r3, [pc, #132]	; (800257c <Algo_fill_state_functions+0x90>)
 80024f8:	4a22      	ldr	r2, [pc, #136]	; (8002584 <Algo_fill_state_functions+0x98>)
 80024fa:	605a      	str	r2, [r3, #4]
	AlgoComputeAdjustment[RELOAD_IGNITION] = Algo_reload_action;
 80024fc:	4b1f      	ldr	r3, [pc, #124]	; (800257c <Algo_fill_state_functions+0x90>)
 80024fe:	4a22      	ldr	r2, [pc, #136]	; (8002588 <Algo_fill_state_functions+0x9c>)
 8002500:	609a      	str	r2, [r3, #8]
	AlgoComputeAdjustment[TEMPERATURE_RISE] = Algo_tempRise_action;
 8002502:	4b1e      	ldr	r3, [pc, #120]	; (800257c <Algo_fill_state_functions+0x90>)
 8002504:	4a21      	ldr	r2, [pc, #132]	; (800258c <Algo_fill_state_functions+0xa0>)
 8002506:	60da      	str	r2, [r3, #12]
	AlgoComputeAdjustment[COMBUSTION_HIGH] = Algo_combHigh_action;
 8002508:	4b1c      	ldr	r3, [pc, #112]	; (800257c <Algo_fill_state_functions+0x90>)
 800250a:	4a21      	ldr	r2, [pc, #132]	; (8002590 <Algo_fill_state_functions+0xa4>)
 800250c:	611a      	str	r2, [r3, #16]
	AlgoComputeAdjustment[COMBUSTION_LOW] = Algo_combLow_action;
 800250e:	4b1b      	ldr	r3, [pc, #108]	; (800257c <Algo_fill_state_functions+0x90>)
 8002510:	4a20      	ldr	r2, [pc, #128]	; (8002594 <Algo_fill_state_functions+0xa8>)
 8002512:	615a      	str	r2, [r3, #20]
	AlgoComputeAdjustment[COAL_LOW] = Algo_coalLow_action;
 8002514:	4b19      	ldr	r3, [pc, #100]	; (800257c <Algo_fill_state_functions+0x90>)
 8002516:	4a20      	ldr	r2, [pc, #128]	; (8002598 <Algo_fill_state_functions+0xac>)
 8002518:	619a      	str	r2, [r3, #24]
	AlgoComputeAdjustment[COAL_HIGH] = Algo_coalHigh_action;
 800251a:	4b18      	ldr	r3, [pc, #96]	; (800257c <Algo_fill_state_functions+0x90>)
 800251c:	4a1f      	ldr	r2, [pc, #124]	; (800259c <Algo_fill_state_functions+0xb0>)
 800251e:	61da      	str	r2, [r3, #28]
	AlgoComputeAdjustment[OVERTEMP] = Algo_overtemp_action;
 8002520:	4b16      	ldr	r3, [pc, #88]	; (800257c <Algo_fill_state_functions+0x90>)
 8002522:	4a1f      	ldr	r2, [pc, #124]	; (80025a0 <Algo_fill_state_functions+0xb4>)
 8002524:	621a      	str	r2, [r3, #32]
	AlgoComputeAdjustment[SAFETY] = Algo_safety_action;
 8002526:	4b15      	ldr	r3, [pc, #84]	; (800257c <Algo_fill_state_functions+0x90>)
 8002528:	4a1e      	ldr	r2, [pc, #120]	; (80025a4 <Algo_fill_state_functions+0xb8>)
 800252a:	625a      	str	r2, [r3, #36]	; 0x24
	AlgoComputeAdjustment[MANUAL_CONTROL] = Algo_manual_action;
 800252c:	4b13      	ldr	r3, [pc, #76]	; (800257c <Algo_fill_state_functions+0x90>)
 800252e:	4a1e      	ldr	r2, [pc, #120]	; (80025a8 <Algo_fill_state_functions+0xbc>)
 8002530:	629a      	str	r2, [r3, #40]	; 0x28

	AlgoStateEntryAction[ZEROING_STEPPER] = Algo_zeroing_entry;
 8002532:	4b1e      	ldr	r3, [pc, #120]	; (80025ac <Algo_fill_state_functions+0xc0>)
 8002534:	4a1e      	ldr	r2, [pc, #120]	; (80025b0 <Algo_fill_state_functions+0xc4>)
 8002536:	601a      	str	r2, [r3, #0]
	AlgoStateEntryAction[WAITING] = Algo_waiting_entry;
 8002538:	4b1c      	ldr	r3, [pc, #112]	; (80025ac <Algo_fill_state_functions+0xc0>)
 800253a:	4a1e      	ldr	r2, [pc, #120]	; (80025b4 <Algo_fill_state_functions+0xc8>)
 800253c:	605a      	str	r2, [r3, #4]
	AlgoStateEntryAction[RELOAD_IGNITION] = Algo_reload_entry;
 800253e:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <Algo_fill_state_functions+0xc0>)
 8002540:	4a1d      	ldr	r2, [pc, #116]	; (80025b8 <Algo_fill_state_functions+0xcc>)
 8002542:	609a      	str	r2, [r3, #8]
	AlgoStateEntryAction[TEMPERATURE_RISE] = Algo_tempRise_entry;
 8002544:	4b19      	ldr	r3, [pc, #100]	; (80025ac <Algo_fill_state_functions+0xc0>)
 8002546:	4a1d      	ldr	r2, [pc, #116]	; (80025bc <Algo_fill_state_functions+0xd0>)
 8002548:	60da      	str	r2, [r3, #12]
	AlgoStateEntryAction[COMBUSTION_HIGH] = Algo_combHigh_entry;
 800254a:	4b18      	ldr	r3, [pc, #96]	; (80025ac <Algo_fill_state_functions+0xc0>)
 800254c:	4a1c      	ldr	r2, [pc, #112]	; (80025c0 <Algo_fill_state_functions+0xd4>)
 800254e:	611a      	str	r2, [r3, #16]
	AlgoStateEntryAction[COMBUSTION_LOW] = Algo_combLow_entry;
 8002550:	4b16      	ldr	r3, [pc, #88]	; (80025ac <Algo_fill_state_functions+0xc0>)
 8002552:	4a1c      	ldr	r2, [pc, #112]	; (80025c4 <Algo_fill_state_functions+0xd8>)
 8002554:	615a      	str	r2, [r3, #20]
	AlgoStateEntryAction[COAL_LOW] = Algo_coalLow_entry;
 8002556:	4b15      	ldr	r3, [pc, #84]	; (80025ac <Algo_fill_state_functions+0xc0>)
 8002558:	4a1b      	ldr	r2, [pc, #108]	; (80025c8 <Algo_fill_state_functions+0xdc>)
 800255a:	619a      	str	r2, [r3, #24]
	AlgoStateEntryAction[COAL_HIGH] = Algo_coalHigh_entry;
 800255c:	4b13      	ldr	r3, [pc, #76]	; (80025ac <Algo_fill_state_functions+0xc0>)
 800255e:	4a1b      	ldr	r2, [pc, #108]	; (80025cc <Algo_fill_state_functions+0xe0>)
 8002560:	61da      	str	r2, [r3, #28]
	AlgoStateEntryAction[OVERTEMP] = Algo_zeroing_entry;
 8002562:	4b12      	ldr	r3, [pc, #72]	; (80025ac <Algo_fill_state_functions+0xc0>)
 8002564:	4a12      	ldr	r2, [pc, #72]	; (80025b0 <Algo_fill_state_functions+0xc4>)
 8002566:	621a      	str	r2, [r3, #32]
	AlgoStateEntryAction[SAFETY] = Algo_zeroing_entry;
 8002568:	4b10      	ldr	r3, [pc, #64]	; (80025ac <Algo_fill_state_functions+0xc0>)
 800256a:	4a11      	ldr	r2, [pc, #68]	; (80025b0 <Algo_fill_state_functions+0xc4>)
 800256c:	625a      	str	r2, [r3, #36]	; 0x24
	AlgoStateEntryAction[MANUAL_CONTROL] = NULL;
 800256e:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <Algo_fill_state_functions+0xc0>)
 8002570:	2200      	movs	r2, #0
 8002572:	629a      	str	r2, [r3, #40]	; 0x28

}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr
 800257c:	2000025c 	.word	0x2000025c
 8002580:	08001991 	.word	0x08001991
 8002584:	080019f9 	.word	0x080019f9
 8002588:	08001ad1 	.word	0x08001ad1
 800258c:	08001b65 	.word	0x08001b65
 8002590:	08002239 	.word	0x08002239
 8002594:	08001df9 	.word	0x08001df9
 8002598:	08002265 	.word	0x08002265
 800259c:	0800236d 	.word	0x0800236d
 80025a0:	08002461 	.word	0x08002461
 80025a4:	08002429 	.word	0x08002429
 80025a8:	08002385 	.word	0x08002385
 80025ac:	20000288 	.word	0x20000288
 80025b0:	08001949 	.word	0x08001949
 80025b4:	080019bd 	.word	0x080019bd
 80025b8:	08001a55 	.word	0x08001a55
 80025bc:	08001b11 	.word	0x08001b11
 80025c0:	08002225 	.word	0x08002225
 80025c4:	08001da5 	.word	0x08001da5
 80025c8:	0800224f 	.word	0x0800224f
 80025cc:	08002359 	.word	0x08002359

080025d0 <Algo_update_steppers_inPlace_flag>:

void Algo_update_steppers_inPlace_flag(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
	if(!motors_ready_for_req)
 80025d4:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <Algo_update_steppers_inPlace_flag+0x24>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	f083 0301 	eor.w	r3, r3, #1
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d006      	beq.n	80025f0 <Algo_update_steppers_inPlace_flag+0x20>
	{
		xQueueReceive(MotorInPlaceHandle,&motors_ready_for_req,5);
 80025e2:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <Algo_update_steppers_inPlace_flag+0x28>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2205      	movs	r2, #5
 80025e8:	4902      	ldr	r1, [pc, #8]	; (80025f4 <Algo_update_steppers_inPlace_flag+0x24>)
 80025ea:	4618      	mov	r0, r3
 80025ec:	f009 fcd8 	bl	800bfa0 <xQueueReceive>
	}
}
 80025f0:	bf00      	nop
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	20000254 	.word	0x20000254
 80025f8:	200039f0 	.word	0x200039f0

080025fc <Algo_adjust_steppers_position>:

bool Algo_adjust_steppers_position(Mobj *stove)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
	uint8_t cmd[NUMBER_OF_STEPPER_CMDS] =
	{
		stove->sPrimary.i8apertureSteps,
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f993 3000 	ldrsb.w	r3, [r3]
 800260a:	b2db      	uxtb	r3, r3
	uint8_t cmd[NUMBER_OF_STEPPER_CMDS] =
 800260c:	723b      	strb	r3, [r7, #8]
		(uint8_t)(stove->sPrimary.fSecPerStep*10),
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	4920      	ldr	r1, [pc, #128]	; (8002694 <Algo_adjust_steppers_position+0x98>)
 8002614:	4618      	mov	r0, r3
 8002616:	f7fe fc0f 	bl	8000e38 <__aeabi_fmul>
 800261a:	4603      	mov	r3, r0
 800261c:	4618      	mov	r0, r3
 800261e:	f7fe fdf7 	bl	8001210 <__aeabi_f2uiz>
 8002622:	4603      	mov	r3, r0
 8002624:	b2db      	uxtb	r3, r3
	uint8_t cmd[NUMBER_OF_STEPPER_CMDS] =
 8002626:	727b      	strb	r3, [r7, #9]
		stove->sGrill.i8apertureSteps,
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800262e:	b2db      	uxtb	r3, r3
	uint8_t cmd[NUMBER_OF_STEPPER_CMDS] =
 8002630:	72bb      	strb	r3, [r7, #10]
		(uint8_t)(stove->sGrill.fSecPerStep*10),
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	4917      	ldr	r1, [pc, #92]	; (8002694 <Algo_adjust_steppers_position+0x98>)
 8002638:	4618      	mov	r0, r3
 800263a:	f7fe fbfd 	bl	8000e38 <__aeabi_fmul>
 800263e:	4603      	mov	r3, r0
 8002640:	4618      	mov	r0, r3
 8002642:	f7fe fde5 	bl	8001210 <__aeabi_f2uiz>
 8002646:	4603      	mov	r3, r0
 8002648:	b2db      	uxtb	r3, r3
	uint8_t cmd[NUMBER_OF_STEPPER_CMDS] =
 800264a:	72fb      	strb	r3, [r7, #11]
		stove->sSecondary.i8apertureSteps,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8002652:	b2db      	uxtb	r3, r3
	uint8_t cmd[NUMBER_OF_STEPPER_CMDS] =
 8002654:	733b      	strb	r3, [r7, #12]
		(uint8_t)(stove->sSecondary.fSecPerStep*10)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	490e      	ldr	r1, [pc, #56]	; (8002694 <Algo_adjust_steppers_position+0x98>)
 800265c:	4618      	mov	r0, r3
 800265e:	f7fe fbeb 	bl	8000e38 <__aeabi_fmul>
 8002662:	4603      	mov	r3, r0
 8002664:	4618      	mov	r0, r3
 8002666:	f7fe fdd3 	bl	8001210 <__aeabi_f2uiz>
 800266a:	4603      	mov	r3, r0
 800266c:	b2db      	uxtb	r3, r3
	uint8_t cmd[NUMBER_OF_STEPPER_CMDS] =
 800266e:	737b      	strb	r3, [r7, #13]

	};
	if(!xMessageBufferSend(MotorControlsHandle,cmd,NUMBER_OF_STEPPER_CMDS,0))
 8002670:	4b09      	ldr	r3, [pc, #36]	; (8002698 <Algo_adjust_steppers_position+0x9c>)
 8002672:	6818      	ldr	r0, [r3, #0]
 8002674:	f107 0108 	add.w	r1, r7, #8
 8002678:	2300      	movs	r3, #0
 800267a:	2206      	movs	r2, #6
 800267c:	f009 ff51 	bl	800c522 <xStreamBufferSend>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <Algo_adjust_steppers_position+0x8e>
	{
		return false;
 8002686:	2300      	movs	r3, #0
 8002688:	e000      	b.n	800268c <Algo_adjust_steppers_position+0x90>
	}
	return true;
 800268a:	2301      	movs	r3, #1
}
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	41200000 	.word	0x41200000
 8002698:	200039f4 	.word	0x200039f4

0800269c <DebugManager>:
/* Private variables ---------------------------------------------------------*/
/* Private function ---------------------------------------------------------*/


void DebugManager(Mobj * stove, uint32_t u32time_ms)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
	static uint32_t u32LastTimeInDebug = 0;

	if(u32time_ms - u32LastTimeInDebug > SECONDS(5))
 80026a6:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <DebugManager+0x2c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d902      	bls.n	80026bc <DebugManager+0x20>
		//printf("%.2f\r\n",stove->fBaffleTemp);
		//printf("%.2f\r\n",stove->fBaffleDeltaT);
		//printf("%.2f\r\n",stove->fChamberTemp);
		//printf("%.2f\r\n",stove->fPlenumTemp);

		u32LastTimeInDebug = u32time_ms;
 80026b6:	4a04      	ldr	r2, [pc, #16]	; (80026c8 <DebugManager+0x2c>)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	6013      	str	r3, [r2, #0]
	}
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	2000036c 	.word	0x2000036c

080026cc <PrintOutput>:
		"SAFETY",
		"MANUAL"
};

void PrintOutput(Mobj * stove, State currentState)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	70fb      	strb	r3, [r7, #3]

	//HAL_RTC_GetTime(&hrtc,&sTime,0);
	printf("#");
 80026d8:	2023      	movs	r0, #35	; 0x23
 80026da:	f00d f84f 	bl	800f77c <putchar>
	//printf("%02i:%02i:%02i ",sTime.Hours,sTime.Minutes,sTime.Seconds);
	printf("\tTbaffle: %i",(int) stove->fBaffleTemp);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fe fd6e 	bl	80011c4 <__aeabi_f2iz>
 80026e8:	4603      	mov	r3, r0
 80026ea:	4619      	mov	r1, r3
 80026ec:	483f      	ldr	r0, [pc, #252]	; (80027ec <PrintOutput+0x120>)
 80026ee:	f00d f82d 	bl	800f74c <iprintf>
	printf("\tdTbaffle: %.1f",stove->fBaffleDeltaT);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fd ff10 	bl	800051c <__aeabi_f2d>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	483b      	ldr	r0, [pc, #236]	; (80027f0 <PrintOutput+0x124>)
 8002702:	f00d f823 	bl	800f74c <iprintf>
	printf("\tTavant: %i",(int) stove->fChamberTemp);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	4618      	mov	r0, r3
 800270c:	f7fe fd5a 	bl	80011c4 <__aeabi_f2iz>
 8002710:	4603      	mov	r3, r0
 8002712:	4619      	mov	r1, r3
 8002714:	4837      	ldr	r0, [pc, #220]	; (80027f4 <PrintOutput+0x128>)
 8002716:	f00d f819 	bl	800f74c <iprintf>
	printf("\tdTavant: %.1f",stove->fChamberDeltaT);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	4618      	mov	r0, r3
 8002720:	f7fd fefc 	bl	800051c <__aeabi_f2d>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4833      	ldr	r0, [pc, #204]	; (80027f8 <PrintOutput+0x12c>)
 800272a:	f00d f80f 	bl	800f74c <iprintf>
	printf("\tPlenum: %i ",(int) stove->fPlenumTemp);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002732:	4618      	mov	r0, r3
 8002734:	f7fe fd46 	bl	80011c4 <__aeabi_f2iz>
 8002738:	4603      	mov	r3, r0
 800273a:	4619      	mov	r1, r3
 800273c:	482f      	ldr	r0, [pc, #188]	; (80027fc <PrintOutput+0x130>)
 800273e:	f00d f805 	bl	800f74c <iprintf>
	printf("State:");
 8002742:	482f      	ldr	r0, [pc, #188]	; (8002800 <PrintOutput+0x134>)
 8002744:	f00d f802 	bl	800f74c <iprintf>

	printf(StateStrings[currentState]);
 8002748:	78fb      	ldrb	r3, [r7, #3]
 800274a:	4a2e      	ldr	r2, [pc, #184]	; (8002804 <PrintOutput+0x138>)
 800274c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002750:	4618      	mov	r0, r3
 8002752:	f00c fffb 	bl	800f74c <iprintf>
	//}

	//printf(" FanSpeed:%i ",0);
	//printf("Grille:%i ",	stove->sGrill.i8apertureSteps*9/10);
	//printf("Prim:%i ",stove->sPrimary.i8apertureSteps*9/10);
	printf("\tSec: %i ",stove->sSecondary.i8apertureSteps*9/10);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800275c:	461a      	mov	r2, r3
 800275e:	4613      	mov	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	4413      	add	r3, r2
 8002764:	4a28      	ldr	r2, [pc, #160]	; (8002808 <PrintOutput+0x13c>)
 8002766:	fb82 1203 	smull	r1, r2, r2, r3
 800276a:	1092      	asrs	r2, r2, #2
 800276c:	17db      	asrs	r3, r3, #31
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	4619      	mov	r1, r3
 8002772:	4826      	ldr	r0, [pc, #152]	; (800280c <PrintOutput+0x140>)
 8002774:	f00c ffea 	bl	800f74c <iprintf>
	//else
	//{
	//	printf("CLOSED ");
	//}

	printf("\tPartCH0ON: %u ", stove->sParticles->u16ch0_ON);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	4619      	mov	r1, r3
 8002780:	4823      	ldr	r0, [pc, #140]	; (8002810 <PrintOutput+0x144>)
 8002782:	f00c ffe3 	bl	800f74c <iprintf>
	//printf("PartCH1ON:%u ", stove->sParticles->u16ch1_ON);
	printf("\tPartCH0OFF: %u ",stove->sParticles->u16ch0_OFF);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	885b      	ldrh	r3, [r3, #2]
 800278c:	4619      	mov	r1, r3
 800278e:	4821      	ldr	r0, [pc, #132]	; (8002814 <PrintOutput+0x148>)
 8002790:	f00c ffdc 	bl	800f74c <iprintf>
	//printf("PartCH1OFF:%u ",stove->sParticles->u16ch1_OFF);
	printf("\tPartVar: %u ",stove->sParticles->u16stDev);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	891b      	ldrh	r3, [r3, #8]
 800279a:	4619      	mov	r1, r3
 800279c:	481e      	ldr	r0, [pc, #120]	; (8002818 <PrintOutput+0x14c>)
 800279e:	f00c ffd5 	bl	800f74c <iprintf>
	printf("\tPartSlope: %.1f ",stove->sParticles->fslope);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fd feb7 	bl	800051c <__aeabi_f2d>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	481a      	ldr	r0, [pc, #104]	; (800281c <PrintOutput+0x150>)
 80027b4:	f00c ffca 	bl	800f74c <iprintf>
	printf("\tTPart:%u ",stove->sParticles->u16temperature);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	895b      	ldrh	r3, [r3, #10]
 80027be:	4619      	mov	r1, r3
 80027c0:	4817      	ldr	r0, [pc, #92]	; (8002820 <PrintOutput+0x154>)
 80027c2:	f00c ffc3 	bl	800f74c <iprintf>
	printf("\tPartCurr: %.1f ",stove->sParticles->fLED_current_meas);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fd fea5 	bl	800051c <__aeabi_f2d>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4813      	ldr	r0, [pc, #76]	; (8002824 <PrintOutput+0x158>)
 80027d8:	f00c ffb8 	bl	800f74c <iprintf>
	//printf("PartLuxON:%u ", stove->sParticles->u16Lux_ON);
	//printf("PartLuxOFF:%u ", stove->sParticles->u16Lux_OFF);
	//printf("PartTime:%lu ", stove->sParticles->u16TimeSinceInit);

	printf("*\n\r\n\r");
 80027dc:	4812      	ldr	r0, [pc, #72]	; (8002828 <PrintOutput+0x15c>)
 80027de:	f00c ffb5 	bl	800f74c <iprintf>
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	080129ac 	.word	0x080129ac
 80027f0:	080129bc 	.word	0x080129bc
 80027f4:	080129cc 	.word	0x080129cc
 80027f8:	080129d8 	.word	0x080129d8
 80027fc:	080129e8 	.word	0x080129e8
 8002800:	080129f8 	.word	0x080129f8
 8002804:	20000000 	.word	0x20000000
 8002808:	66666667 	.word	0x66666667
 800280c:	08012a00 	.word	0x08012a00
 8002810:	08012a0c 	.word	0x08012a0c
 8002814:	08012a1c 	.word	0x08012a1c
 8002818:	08012a30 	.word	0x08012a30
 800281c:	08012a40 	.word	0x08012a40
 8002820:	08012a54 	.word	0x08012a54
 8002824:	08012a60 	.word	0x08012a60
 8002828:	08012a74 	.word	0x08012a74

0800282c <__io_putchar>:
 extern "C" {
#endif

extern UART_HandleTypeDef huart1;

int __io_putchar(int ch) {
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002834:	1d39      	adds	r1, r7, #4
 8002836:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800283a:	2201      	movs	r2, #1
 800283c:	4803      	ldr	r0, [pc, #12]	; (800284c <__io_putchar+0x20>)
 800283e:	f008 f817 	bl	800a870 <HAL_UART_Transmit>
  return ch;
 8002842:	687b      	ldr	r3, [r7, #4]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	200039f8 	.word	0x200039f8

08002850 <ESPMANAGER_Init>:
// --------
// Bridge state
static SBridgeState m_sBridgeState;

void ESPMANAGER_Init()
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
	// Initialize bridge ...
	m_sBridgeState.u32GetParameterCurrentIndex = 0;
 8002854:	4b0d      	ldr	r3, [pc, #52]	; (800288c <ESPMANAGER_Init+0x3c>)
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]

	m_last_DMA_count = 0;
 800285a:	4b0d      	ldr	r3, [pc, #52]	; (8002890 <ESPMANAGER_Init+0x40>)
 800285c:	2200      	movs	r2, #0
 800285e:	801a      	strh	r2, [r3, #0]

    // Encoder
    UARTPROTOCOLENC_Init(&m_sHandleEncoder, &m_sConfigEncoder);
 8002860:	490c      	ldr	r1, [pc, #48]	; (8002894 <ESPMANAGER_Init+0x44>)
 8002862:	480d      	ldr	r0, [pc, #52]	; (8002898 <ESPMANAGER_Init+0x48>)
 8002864:	f003 f898 	bl	8005998 <UARTPROTOCOLENC_Init>

    // Decoder
    UARTPROTOCOLDEC_Init(&m_sHandleDecoder, &m_sConfigDecoder);
 8002868:	490c      	ldr	r1, [pc, #48]	; (800289c <ESPMANAGER_Init+0x4c>)
 800286a:	480d      	ldr	r0, [pc, #52]	; (80028a0 <ESPMANAGER_Init+0x50>)
 800286c:	f002 fee6 	bl	800563c <UARTPROTOCOLDEC_Init>

	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, m_u8UART_RX_DMABuffers, MAX_RX_DMA_SIZE);
 8002870:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002874:	490b      	ldr	r1, [pc, #44]	; (80028a4 <ESPMANAGER_Init+0x54>)
 8002876:	480c      	ldr	r0, [pc, #48]	; (80028a8 <ESPMANAGER_Init+0x58>)
 8002878:	f008 f91f 	bl	800aaba <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UART_RegisterCallback(&huart2, HAL_UART_ERROR_CB_ID, UARTErrorCb);
 800287c:	4a0b      	ldr	r2, [pc, #44]	; (80028ac <ESPMANAGER_Init+0x5c>)
 800287e:	2104      	movs	r1, #4
 8002880:	4809      	ldr	r0, [pc, #36]	; (80028a8 <ESPMANAGER_Init+0x58>)
 8002882:	f007 ff4f 	bl	800a724 <HAL_UART_RegisterCallback>
}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20000c1c 	.word	0x20000c1c
 8002890:	20000770 	.word	0x20000770
 8002894:	2000002c 	.word	0x2000002c
 8002898:	200007f4 	.word	0x200007f4
 800289c:	20000030 	.word	0x20000030
 80028a0:	20000bf8 	.word	0x20000bf8
 80028a4:	20000370 	.word	0x20000370
 80028a8:	20003a88 	.word	0x20003a88
 80028ac:	0800296d 	.word	0x0800296d

080028b0 <ESPMANAGER_Task>:

void ESPMANAGER_Task(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0


		if (m_bNeedRestartDMA)
 80028b6:	4b27      	ldr	r3, [pc, #156]	; (8002954 <ESPMANAGER_Task+0xa4>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <ESPMANAGER_Task+0x22>
		{
			m_bNeedRestartDMA = false;
 80028c0:	4b24      	ldr	r3, [pc, #144]	; (8002954 <ESPMANAGER_Task+0xa4>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	701a      	strb	r2, [r3, #0]
			HAL_UARTEx_ReceiveToIdle_DMA(&huart2, m_u8UART_RX_DMABuffers, MAX_RX_DMA_SIZE);
 80028c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028ca:	4923      	ldr	r1, [pc, #140]	; (8002958 <ESPMANAGER_Task+0xa8>)
 80028cc:	4823      	ldr	r0, [pc, #140]	; (800295c <ESPMANAGER_Task+0xac>)
 80028ce:	f008 f8f4 	bl	800aaba <HAL_UARTEx_ReceiveToIdle_DMA>
		}

		const uint16_t u16DMA_count = (uint16_t)(MAX_RX_DMA_SIZE - hdma_usart2_rx.Instance->CNDTR);
 80028d2:	4b23      	ldr	r3, [pc, #140]	; (8002960 <ESPMANAGER_Task+0xb0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	b29b      	uxth	r3, r3
 80028da:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80028de:	80fb      	strh	r3, [r7, #6]

		if(u16DMA_count > m_last_DMA_count)
 80028e0:	4b20      	ldr	r3, [pc, #128]	; (8002964 <ESPMANAGER_Task+0xb4>)
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	88fa      	ldrh	r2, [r7, #6]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d911      	bls.n	800290e <ESPMANAGER_Task+0x5e>
		{
			UARTPROTOCOLDEC_HandleIn(&m_sHandleDecoder,&m_u8UART_RX_DMABuffers[m_last_DMA_count],(uint16_t)(u16DMA_count-m_last_DMA_count));
 80028ea:	4b1e      	ldr	r3, [pc, #120]	; (8002964 <ESPMANAGER_Task+0xb4>)
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	4b19      	ldr	r3, [pc, #100]	; (8002958 <ESPMANAGER_Task+0xa8>)
 80028f2:	18d1      	adds	r1, r2, r3
 80028f4:	4b1b      	ldr	r3, [pc, #108]	; (8002964 <ESPMANAGER_Task+0xb4>)
 80028f6:	881b      	ldrh	r3, [r3, #0]
 80028f8:	88fa      	ldrh	r2, [r7, #6]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	461a      	mov	r2, r3
 8002900:	4819      	ldr	r0, [pc, #100]	; (8002968 <ESPMANAGER_Task+0xb8>)
 8002902:	f002 fed9 	bl	80056b8 <UARTPROTOCOLDEC_HandleIn>
			m_last_DMA_count = u16DMA_count;
 8002906:	4a17      	ldr	r2, [pc, #92]	; (8002964 <ESPMANAGER_Task+0xb4>)
 8002908:	88fb      	ldrh	r3, [r7, #6]
 800290a:	8013      	strh	r3, [r2, #0]

			m_last_DMA_count = u16DMA_count;
		}


}
 800290c:	e01e      	b.n	800294c <ESPMANAGER_Task+0x9c>
		else if(u16DMA_count < m_last_DMA_count)
 800290e:	4b15      	ldr	r3, [pc, #84]	; (8002964 <ESPMANAGER_Task+0xb4>)
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	88fa      	ldrh	r2, [r7, #6]
 8002914:	429a      	cmp	r2, r3
 8002916:	d219      	bcs.n	800294c <ESPMANAGER_Task+0x9c>
			UARTPROTOCOLDEC_HandleIn(&m_sHandleDecoder,&m_u8UART_RX_DMABuffers[m_last_DMA_count],(uint16_t)(MAX_RX_DMA_SIZE-m_last_DMA_count));
 8002918:	4b12      	ldr	r3, [pc, #72]	; (8002964 <ESPMANAGER_Task+0xb4>)
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	461a      	mov	r2, r3
 800291e:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <ESPMANAGER_Task+0xa8>)
 8002920:	18d1      	adds	r1, r2, r3
 8002922:	4b10      	ldr	r3, [pc, #64]	; (8002964 <ESPMANAGER_Task+0xb4>)
 8002924:	881b      	ldrh	r3, [r3, #0]
 8002926:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800292a:	b29b      	uxth	r3, r3
 800292c:	461a      	mov	r2, r3
 800292e:	480e      	ldr	r0, [pc, #56]	; (8002968 <ESPMANAGER_Task+0xb8>)
 8002930:	f002 fec2 	bl	80056b8 <UARTPROTOCOLDEC_HandleIn>
			if(u16DMA_count != 0)
 8002934:	88fb      	ldrh	r3, [r7, #6]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d005      	beq.n	8002946 <ESPMANAGER_Task+0x96>
				UARTPROTOCOLDEC_HandleIn(&m_sHandleDecoder,m_u8UART_RX_DMABuffers,(uint32_t)(u16DMA_count));
 800293a:	88fb      	ldrh	r3, [r7, #6]
 800293c:	461a      	mov	r2, r3
 800293e:	4906      	ldr	r1, [pc, #24]	; (8002958 <ESPMANAGER_Task+0xa8>)
 8002940:	4809      	ldr	r0, [pc, #36]	; (8002968 <ESPMANAGER_Task+0xb8>)
 8002942:	f002 feb9 	bl	80056b8 <UARTPROTOCOLDEC_HandleIn>
			m_last_DMA_count = u16DMA_count;
 8002946:	4a07      	ldr	r2, [pc, #28]	; (8002964 <ESPMANAGER_Task+0xb4>)
 8002948:	88fb      	ldrh	r3, [r7, #6]
 800294a:	8013      	strh	r3, [r2, #0]
}
 800294c:	bf00      	nop
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	20000c18 	.word	0x20000c18
 8002958:	20000370 	.word	0x20000370
 800295c:	20003a88 	.word	0x20003a88
 8002960:	200038e4 	.word	0x200038e4
 8002964:	20000770 	.word	0x20000770
 8002968:	20000bf8 	.word	0x20000bf8

0800296c <UARTErrorCb>:

static void UARTErrorCb(UART_HandleTypeDef *huart)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
	// If there is not enough activity it seems to trigger an error
	// in that case we need to restart the DMA
	m_bNeedRestartDMA = true;
 8002974:	4b03      	ldr	r3, [pc, #12]	; (8002984 <UARTErrorCb+0x18>)
 8002976:	2201      	movs	r2, #1
 8002978:	701a      	strb	r2, [r3, #0]
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr
 8002984:	20000c18 	.word	0x20000c18

08002988 <EncWriteUART>:

static void EncWriteUART(const UARTPROTOCOLENC_SHandle* psHandle, const uint8_t u8Datas[], uint32_t u32DataLen)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
    //uart_write_bytes(HWGPIO_BRIDGEUART_PORT_NUM, u8Datas, u32DataLen);
	// Write byte into UART ...
	HAL_UART_Transmit(&huart2, (uint8_t*)u8Datas, (uint16_t)u32DataLen, 500);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	b29a      	uxth	r2, r3
 8002998:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800299c:	68b9      	ldr	r1, [r7, #8]
 800299e:	4803      	ldr	r0, [pc, #12]	; (80029ac <EncWriteUART+0x24>)
 80029a0:	f007 ff66 	bl	800a870 <HAL_UART_Transmit>
}
 80029a4:	bf00      	nop
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20003a88 	.word	0x20003a88

080029b0 <DecAcceptFrame>:


static void DecAcceptFrame(const UARTPROTOCOLDEC_SHandle* psHandle, uint8_t u8ID, const uint8_t u8Payloads[], uint16_t u16PayloadLen)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b09a      	sub	sp, #104	; 0x68
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	607a      	str	r2, [r7, #4]
 80029ba:	461a      	mov	r2, r3
 80029bc:	460b      	mov	r3, r1
 80029be:	72fb      	strb	r3, [r7, #11]
 80029c0:	4613      	mov	r3, r2
 80029c2:	813b      	strh	r3, [r7, #8]
	switch((UFEC23PROTOCOL_FRAMEID)u8ID)
 80029c4:	7afb      	ldrb	r3, [r7, #11]
 80029c6:	2b10      	cmp	r3, #16
 80029c8:	f000 8098 	beq.w	8002afc <DecAcceptFrame+0x14c>
 80029cc:	2b10      	cmp	r3, #16
 80029ce:	f300 80c7 	bgt.w	8002b60 <DecAcceptFrame+0x1b0>
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d002      	beq.n	80029dc <DecAcceptFrame+0x2c>
 80029d6:	2b0f      	cmp	r3, #15
 80029d8:	d020      	beq.n	8002a1c <DecAcceptFrame+0x6c>
		}
		//case UFEC23PROTOCOL_FRAMEID_C2SCommitParameter:
		//	break;
		default:
			// TODO: Not a valid protocol ID... Do something? Throw into UART log?
			break;
 80029da:	e0c1      	b.n	8002b60 <DecAcceptFrame+0x1b0>
			if (!UFEC23ENDEC_A2AReqPingAliveDecode(&reqPing, u8Payloads, u16PayloadLen))
 80029dc:	893a      	ldrh	r2, [r7, #8]
 80029de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f003 f89c 	bl	8005b22 <UFEC23ENDEC_A2AReqPingAliveDecode>
 80029ea:	4603      	mov	r3, r0
 80029ec:	f083 0301 	eor.w	r3, r3, #1
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f040 80b6 	bne.w	8002b64 <DecAcceptFrame+0x1b4>
			const uint16_t u16Len = (uint16_t)UFEC23ENDEC_A2AReqPingAliveEncode(m_u8UARTOutputBuffers, UART_OUTBUFFER_LEN, &reqPing);
 80029f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80029fc:	461a      	mov	r2, r3
 80029fe:	2180      	movs	r1, #128	; 0x80
 8002a00:	485d      	ldr	r0, [pc, #372]	; (8002b78 <DecAcceptFrame+0x1c8>)
 8002a02:	f003 f878 	bl	8005af6 <UFEC23ENDEC_A2AReqPingAliveEncode>
 8002a06:	4603      	mov	r3, r0
 8002a08:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
			UARTPROTOCOLENC_Send(&m_sHandleEncoder, UFEC23PROTOCOL_FRAMEID_A2AReqPingAliveResp, m_u8UARTOutputBuffers, u16Len);
 8002a0c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002a10:	4a59      	ldr	r2, [pc, #356]	; (8002b78 <DecAcceptFrame+0x1c8>)
 8002a12:	2181      	movs	r1, #129	; 0x81
 8002a14:	4859      	ldr	r0, [pc, #356]	; (8002b7c <DecAcceptFrame+0x1cc>)
 8002a16:	f002 ffe9 	bl	80059ec <UARTPROTOCOLENC_Send>
			break;
 8002a1a:	e0a8      	b.n	8002b6e <DecAcceptFrame+0x1be>
			if(!UFEC23ENDEC_C2SGetParameterDecode(&param, u8Payloads,(uint32_t) u16PayloadLen))
 8002a1c:	893a      	ldrh	r2, [r7, #8]
 8002a1e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f003 f891 	bl	8005b4c <UFEC23ENDEC_C2SGetParameterDecode>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	f083 0301 	eor.w	r3, r3, #1
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f040 8098 	bne.w	8002b68 <DecAcceptFrame+0x1b8>
			const uint32_t u32ParamEntryCount = PARAMFILE_GetParamEntryCount();
 8002a38:	f000 fcf2 	bl	8003420 <PARAMFILE_GetParamEntryCount>
 8002a3c:	6638      	str	r0, [r7, #96]	; 0x60
			if (param.eIterateOp == UFEC23ENDEC_EITERATEOP_First)
 8002a3e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d103      	bne.n	8002a4e <DecAcceptFrame+0x9e>
				m_sBridgeState.u32GetParameterCurrentIndex = 0;
 8002a46:	4b4e      	ldr	r3, [pc, #312]	; (8002b80 <DecAcceptFrame+0x1d0>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	e008      	b.n	8002a60 <DecAcceptFrame+0xb0>
			else if (param.eIterateOp == UFEC23ENDEC_EITERATEOP_Next)
 8002a4e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d104      	bne.n	8002a60 <DecAcceptFrame+0xb0>
				m_sBridgeState.u32GetParameterCurrentIndex++; // Next record ....
 8002a56:	4b4a      	ldr	r3, [pc, #296]	; (8002b80 <DecAcceptFrame+0x1d0>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	4a48      	ldr	r2, [pc, #288]	; (8002b80 <DecAcceptFrame+0x1d0>)
 8002a5e:	6013      	str	r3, [r2, #0]
			sResp.bHasRecord = false;
 8002a60:	2300      	movs	r3, #0
 8002a62:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
			sResp.bIsEOF = true;
 8002a66:	2301      	movs	r3, #1
 8002a68:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
			if (m_sBridgeState.u32GetParameterCurrentIndex < u32ParamEntryCount)
 8002a6c:	4b44      	ldr	r3, [pc, #272]	; (8002b80 <DecAcceptFrame+0x1d0>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d930      	bls.n	8002ad8 <DecAcceptFrame+0x128>
				const PFL_SParameterItem* pParamItem = PARAMFILE_GetParamEntryByIndex(m_sBridgeState.u32GetParameterCurrentIndex);
 8002a76:	4b42      	ldr	r3, [pc, #264]	; (8002b80 <DecAcceptFrame+0x1d0>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 fcda 	bl	8003434 <PARAMFILE_GetParamEntryByIndex>
 8002a80:	65f8      	str	r0, [r7, #92]	; 0x5c
				if (pParamItem != NULL && pParamItem->eType == PFL_TYPE_Int32)
 8002a82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d027      	beq.n	8002ad8 <DecAcceptFrame+0x128>
 8002a88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a8a:	7a1b      	ldrb	r3, [r3, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d123      	bne.n	8002ad8 <DecAcceptFrame+0x128>
					sResp.bHasRecord = true;
 8002a90:	2301      	movs	r3, #1
 8002a92:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
					sResp.bIsEOF = false;
 8002a96:	2300      	movs	r3, #0
 8002a98:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					sResp.sEntry.eParamType = UFEC23ENDEC_EPARAMTYPE_Int32;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
					sResp.sEntry.uType.sInt32.s32Default = pParamItem->uType.sInt32.s32Default;
 8002aa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	637b      	str	r3, [r7, #52]	; 0x34
					sResp.sEntry.uType.sInt32.s32Min = pParamItem->uType.sInt32.s32Min;
 8002aa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	63bb      	str	r3, [r7, #56]	; 0x38
					sResp.sEntry.uType.sInt32.s32Max = pParamItem->uType.sInt32.s32Max;
 8002aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
					strcpy(sResp.sEntry.szKey, pParamItem->szKey);
 8002ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	f107 0314 	add.w	r3, r7, #20
 8002abc:	4611      	mov	r1, r2
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f00c fea4 	bl	800f80c <strcpy>
					PFL_GetValueInt32(&PARAMFILE_g_sHandle, pParamItem->szKey, &s32Value);
 8002ac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002acc:	4619      	mov	r1, r3
 8002ace:	482d      	ldr	r0, [pc, #180]	; (8002b84 <DecAcceptFrame+0x1d4>)
 8002ad0:	f000 fd85 	bl	80035de <PFL_GetValueInt32>
					sResp.uValue.s32Value = s32Value;
 8002ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ad6:	643b      	str	r3, [r7, #64]	; 0x40
			const uint16_t u16Len = (uint16_t)UFEC23ENDEC_S2CGetParameterRespEncode(m_u8UARTOutputBuffers, UART_OUTBUFFER_LEN, &sResp);
 8002ad8:	f107 0314 	add.w	r3, r7, #20
 8002adc:	461a      	mov	r2, r3
 8002ade:	2180      	movs	r1, #128	; 0x80
 8002ae0:	4825      	ldr	r0, [pc, #148]	; (8002b78 <DecAcceptFrame+0x1c8>)
 8002ae2:	f003 f84e 	bl	8005b82 <UFEC23ENDEC_S2CGetParameterRespEncode>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			UARTPROTOCOLENC_Send(&m_sHandleEncoder, UFEC23PROTOCOL_FRAMEID_S2CGetParameterResp, m_u8UARTOutputBuffers, u16Len);
 8002aec:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8002af0:	4a21      	ldr	r2, [pc, #132]	; (8002b78 <DecAcceptFrame+0x1c8>)
 8002af2:	218f      	movs	r1, #143	; 0x8f
 8002af4:	4821      	ldr	r0, [pc, #132]	; (8002b7c <DecAcceptFrame+0x1cc>)
 8002af6:	f002 ff79 	bl	80059ec <UARTPROTOCOLENC_Send>
			break;
 8002afa:	e038      	b.n	8002b6e <DecAcceptFrame+0x1be>
			if(!UFEC23ENDEC_C2SSetParameterDecode(&param, u8Payloads,(uint32_t) u16PayloadLen))
 8002afc:	893a      	ldrh	r2, [r7, #8]
 8002afe:	f107 0314 	add.w	r3, r7, #20
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f003 f8cb 	bl	8005ca0 <UFEC23ENDEC_C2SSetParameterDecode>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	f083 0301 	eor.w	r3, r3, #1
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d12a      	bne.n	8002b6c <DecAcceptFrame+0x1bc>
			const PFL_ESETRET setRet = PFL_SetValueInt32(&PARAMFILE_g_sHandle, param.szKey, param.uValue.s32Value);
 8002b16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b18:	f107 0314 	add.w	r3, r7, #20
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4819      	ldr	r0, [pc, #100]	; (8002b84 <DecAcceptFrame+0x1d4>)
 8002b20:	f000 fd81 	bl	8003626 <PFL_SetValueInt32>
 8002b24:	4603      	mov	r3, r0
 8002b26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				.eResult = (setRet == PFL_ESETRET_OK) ? UFEC23PROTOCOL_ERESULT_Ok : UFEC23PROTOCOL_ERESULT_Fail
 8002b2a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	bf14      	ite	ne
 8002b32:	2301      	movne	r3, #1
 8002b34:	2300      	moveq	r3, #0
 8002b36:	b2db      	uxtb	r3, r3
			UFEC23PROTOCOL_S2CSetParameterResp s2cSetParameterResp =
 8002b38:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
			const uint16_t u16Len = (uint16_t)UFEC23ENDEC_S2CSetParameterRespEncode(m_u8UARTOutputBuffers, UART_OUTBUFFER_LEN, &s2cSetParameterResp);
 8002b3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b40:	461a      	mov	r2, r3
 8002b42:	2180      	movs	r1, #128	; 0x80
 8002b44:	480c      	ldr	r0, [pc, #48]	; (8002b78 <DecAcceptFrame+0x1c8>)
 8002b46:	f003 f8ee 	bl	8005d26 <UFEC23ENDEC_S2CSetParameterRespEncode>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			UARTPROTOCOLENC_Send(&m_sHandleEncoder, UFEC23PROTOCOL_FRAMEID_S2CSetParameterResp, m_u8UARTOutputBuffers, u16Len);
 8002b50:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002b54:	4a08      	ldr	r2, [pc, #32]	; (8002b78 <DecAcceptFrame+0x1c8>)
 8002b56:	2190      	movs	r1, #144	; 0x90
 8002b58:	4808      	ldr	r0, [pc, #32]	; (8002b7c <DecAcceptFrame+0x1cc>)
 8002b5a:	f002 ff47 	bl	80059ec <UARTPROTOCOLENC_Send>
			break;
 8002b5e:	e006      	b.n	8002b6e <DecAcceptFrame+0x1be>
			break;
 8002b60:	bf00      	nop
 8002b62:	e004      	b.n	8002b6e <DecAcceptFrame+0x1be>
				break;
 8002b64:	bf00      	nop
 8002b66:	e002      	b.n	8002b6e <DecAcceptFrame+0x1be>
				break;
 8002b68:	bf00      	nop
 8002b6a:	e000      	b.n	8002b6e <DecAcceptFrame+0x1be>
				break;
 8002b6c:	bf00      	nop
	}

}
 8002b6e:	bf00      	nop
 8002b70:	3768      	adds	r7, #104	; 0x68
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	20000774 	.word	0x20000774
 8002b7c:	200007f4 	.word	0x200007f4
 8002b80:	20000c1c 	.word	0x20000c1c
 8002b84:	200038d8 	.word	0x200038d8

08002b88 <DecDropFrame>:

static void DecDropFrame(const UARTPROTOCOLDEC_SHandle* psHandle, const char* szReason)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
    // Exists mostly for debug purpose
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr

08002b9c <GetTimerCountMS>:

static int64_t GetTimerCountMS(const UARTPROTOCOLDEC_SHandle* psHandle)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
	return xTaskGetTickCount() * portTICK_PERIOD_MS;
 8002ba4:	f00a fab2 	bl	800d10c <xTaskGetTickCount>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	461a      	mov	r2, r3
 8002bac:	f04f 0300 	mov.w	r3, #0
}
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
	...

08002bbc <GPIOManager>:
static uint32_t u32PressStartTime_ms = 0;
static bool bSafetyActive = false;
static uint32_t u32SafetyStartTime_ms = 0;

void GPIOManager(Mobj *stove, uint32_t u32CurrentTime_ms)
{
 8002bbc:	b590      	push	{r4, r7, lr}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]

	const PF_UsrParam* uParam = PB_GetUserParam();
 8002bc6:	f000 fc5f 	bl	8003488 <PB_GetUserParam>
 8002bca:	60f8      	str	r0, [r7, #12]


	// Update Thermostat boolean based on GPIO state
	stove->bThermostatOn = (HAL_GPIO_ReadPin(Thermostat_Input_GPIO_Port,Thermostat_Input_Pin) == GPIO_PIN_RESET);
 8002bcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bd0:	4872      	ldr	r0, [pc, #456]	; (8002d9c <GPIOManager+0x1e0>)
 8002bd2:	f003 ffe9 	bl	8006ba8 <HAL_GPIO_ReadPin>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	bf0c      	ite	eq
 8002bdc:	2301      	moveq	r3, #1
 8002bde:	2300      	movne	r3, #0
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	// Update Interlock boolean based on GPIO state
	stove->bInterlockOn = (HAL_GPIO_ReadPin(Interlock_Input_GPIO_Port,Interlock_Input_Pin) == GPIO_PIN_RESET);
 8002be8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002bec:	486b      	ldr	r0, [pc, #428]	; (8002d9c <GPIOManager+0x1e0>)
 8002bee:	f003 ffdb 	bl	8006ba8 <HAL_GPIO_ReadPin>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	bf0c      	ite	eq
 8002bf8:	2301      	moveq	r3, #1
 8002bfa:	2300      	movne	r3, #0
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	// Update Door state boolean based on GPIO state
	stove->bDoorOpen = (HAL_GPIO_ReadPin(Limit_switch_Door_GPIO_Port,Limit_switch_Door_Pin) == GPIO_PIN_SET);
 8002c04:	2101      	movs	r1, #1
 8002c06:	4865      	ldr	r0, [pc, #404]	; (8002d9c <GPIOManager+0x1e0>)
 8002c08:	f003 ffce 	bl	8006ba8 <HAL_GPIO_ReadPin>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	bf0c      	ite	eq
 8002c12:	2301      	moveq	r3, #1
 8002c14:	2300      	movne	r3, #0
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	// Store button GPIO state for debounce
	bButtonPressed = (HAL_GPIO_ReadPin(Button_Input_GPIO_Port,Button_Input_Pin) == GPIO_PIN_SET);
 8002c1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c22:	485e      	ldr	r0, [pc, #376]	; (8002d9c <GPIOManager+0x1e0>)
 8002c24:	f003 ffc0 	bl	8006ba8 <HAL_GPIO_ReadPin>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	bf0c      	ite	eq
 8002c2e:	2301      	moveq	r3, #1
 8002c30:	2300      	movne	r3, #0
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	4b5a      	ldr	r3, [pc, #360]	; (8002da0 <GPIOManager+0x1e4>)
 8002c36:	701a      	strb	r2, [r3, #0]

	if(bButtonPressed && (u32PressStartTime_ms == 0))
 8002c38:	4b59      	ldr	r3, [pc, #356]	; (8002da0 <GPIOManager+0x1e4>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d007      	beq.n	8002c50 <GPIOManager+0x94>
 8002c40:	4b58      	ldr	r3, [pc, #352]	; (8002da4 <GPIOManager+0x1e8>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d103      	bne.n	8002c50 <GPIOManager+0x94>
	{
		u32PressStartTime_ms = u32CurrentTime_ms;//Initialize timer
 8002c48:	4a56      	ldr	r2, [pc, #344]	; (8002da4 <GPIOManager+0x1e8>)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	e018      	b.n	8002c82 <GPIOManager+0xc6>
	}
	else if(bButtonPressed && (u32CurrentTime_ms - u32PressStartTime_ms < 100)) // Software debounce
 8002c50:	4b53      	ldr	r3, [pc, #332]	; (8002da0 <GPIOManager+0x1e4>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00a      	beq.n	8002c6e <GPIOManager+0xb2>
 8002c58:	4b52      	ldr	r3, [pc, #328]	; (8002da4 <GPIOManager+0x1e8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b63      	cmp	r3, #99	; 0x63
 8002c62:	d804      	bhi.n	8002c6e <GPIOManager+0xb2>
	{
		stove->bReloadRequested = true; // Button is pressed, Update Reload Requested boolean
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8002c6c:	e009      	b.n	8002c82 <GPIOManager+0xc6>
	}
	else if(!bButtonPressed) // Not pressed? Reset timer
 8002c6e:	4b4c      	ldr	r3, [pc, #304]	; (8002da0 <GPIOManager+0x1e4>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	f083 0301 	eor.w	r3, r3, #1
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <GPIOManager+0xc6>
	{
		u32PressStartTime_ms = 0;
 8002c7c:	4b49      	ldr	r3, [pc, #292]	; (8002da4 <GPIOManager+0x1e8>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
	}

	bSafetyActive = (HAL_GPIO_ReadPin(Safety_ON_GPIO_Port,Safety_ON_Pin) == GPIO_PIN_SET);
 8002c82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c86:	4845      	ldr	r0, [pc, #276]	; (8002d9c <GPIOManager+0x1e0>)
 8002c88:	f003 ff8e 	bl	8006ba8 <HAL_GPIO_ReadPin>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	bf0c      	ite	eq
 8002c92:	2301      	moveq	r3, #1
 8002c94:	2300      	movne	r3, #0
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	4b43      	ldr	r3, [pc, #268]	; (8002da8 <GPIOManager+0x1ec>)
 8002c9a:	701a      	strb	r2, [r3, #0]

	if(bSafetyActive && (u32SafetyStartTime_ms == 0))
 8002c9c:	4b42      	ldr	r3, [pc, #264]	; (8002da8 <GPIOManager+0x1ec>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d007      	beq.n	8002cb4 <GPIOManager+0xf8>
 8002ca4:	4b41      	ldr	r3, [pc, #260]	; (8002dac <GPIOManager+0x1f0>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d103      	bne.n	8002cb4 <GPIOManager+0xf8>
	{
		u32SafetyStartTime_ms = u32CurrentTime_ms;//Initialize timer
 8002cac:	4a3f      	ldr	r2, [pc, #252]	; (8002dac <GPIOManager+0x1f0>)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	e01c      	b.n	8002cee <GPIOManager+0x132>
	}
	else if(bSafetyActive && (u32CurrentTime_ms - u32SafetyStartTime_ms > 100)) // Software debounce
 8002cb4:	4b3c      	ldr	r3, [pc, #240]	; (8002da8 <GPIOManager+0x1ec>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00a      	beq.n	8002cd2 <GPIOManager+0x116>
 8002cbc:	4b3b      	ldr	r3, [pc, #236]	; (8002dac <GPIOManager+0x1f0>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b64      	cmp	r3, #100	; 0x64
 8002cc6:	d904      	bls.n	8002cd2 <GPIOManager+0x116>
	{
		stove->bSafetyOn = true;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8002cd0:	e00d      	b.n	8002cee <GPIOManager+0x132>
	}
	else if(!bSafetyActive) // Not active? Reset timer
 8002cd2:	4b35      	ldr	r3, [pc, #212]	; (8002da8 <GPIOManager+0x1ec>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	f083 0301 	eor.w	r3, r3, #1
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d006      	beq.n	8002cee <GPIOManager+0x132>
	{
		u32SafetyStartTime_ms = 0;
 8002ce0:	4b32      	ldr	r3, [pc, #200]	; (8002dac <GPIOManager+0x1f0>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
		stove->bSafetyOn = false;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	}


	// Fans management
	if(stove->bDoorOpen)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d01a      	beq.n	8002d2e <GPIOManager+0x172>
	{
		HAL_GPIO_WritePin(SPEED2_COIL_GPIO_Port,SPEED2_COIL_Pin,RESET);
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2140      	movs	r1, #64	; 0x40
 8002cfc:	482c      	ldr	r0, [pc, #176]	; (8002db0 <GPIOManager+0x1f4>)
 8002cfe:	f003 ff6a 	bl	8006bd6 <HAL_GPIO_WritePin>
		if(stove->fBaffleTemp < P2F(uParam->s32FAN_KOP))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a1c      	ldr	r4, [r3, #32]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fe f840 	bl	8000d90 <__aeabi_i2f>
 8002d10:	4603      	mov	r3, r0
 8002d12:	4619      	mov	r1, r3
 8002d14:	4620      	mov	r0, r4
 8002d16:	f7fe fa2d 	bl	8001174 <__aeabi_fcmplt>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d100      	bne.n	8002d22 <GPIOManager+0x166>
		{
			HAL_GPIO_WritePin(SPEED3_COIL_GPIO_Port,SPEED3_COIL_Pin,RESET);
		}
		return;
 8002d20:	e038      	b.n	8002d94 <GPIOManager+0x1d8>
			HAL_GPIO_WritePin(SPEED3_COIL_GPIO_Port,SPEED3_COIL_Pin,RESET);
 8002d22:	2200      	movs	r2, #0
 8002d24:	2180      	movs	r1, #128	; 0x80
 8002d26:	4822      	ldr	r0, [pc, #136]	; (8002db0 <GPIOManager+0x1f4>)
 8002d28:	f003 ff55 	bl	8006bd6 <HAL_GPIO_WritePin>
		return;
 8002d2c:	e032      	b.n	8002d94 <GPIOManager+0x1d8>
	}

	if(stove->fBaffleTemp > P2F(uParam->s32FAN_KIP))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1c      	ldr	r4, [r3, #32]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fe f82a 	bl	8000d90 <__aeabi_i2f>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4620      	mov	r0, r4
 8002d42:	f7fe fa35 	bl	80011b0 <__aeabi_fcmpgt>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00a      	beq.n	8002d62 <GPIOManager+0x1a6>
	{
		  HAL_GPIO_WritePin(SPEED2_COIL_GPIO_Port,SPEED2_COIL_Pin,SET);
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	2140      	movs	r1, #64	; 0x40
 8002d50:	4817      	ldr	r0, [pc, #92]	; (8002db0 <GPIOManager+0x1f4>)
 8002d52:	f003 ff40 	bl	8006bd6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SPEED3_COIL_GPIO_Port,SPEED3_COIL_Pin,SET);
 8002d56:	2201      	movs	r2, #1
 8002d58:	2180      	movs	r1, #128	; 0x80
 8002d5a:	4815      	ldr	r0, [pc, #84]	; (8002db0 <GPIOManager+0x1f4>)
 8002d5c:	f003 ff3b 	bl	8006bd6 <HAL_GPIO_WritePin>
 8002d60:	e018      	b.n	8002d94 <GPIOManager+0x1d8>
	}else if(stove->fBaffleTemp < P2F(uParam->s32FAN_KOP))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1c      	ldr	r4, [r3, #32]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fe f810 	bl	8000d90 <__aeabi_i2f>
 8002d70:	4603      	mov	r3, r0
 8002d72:	4619      	mov	r1, r3
 8002d74:	4620      	mov	r0, r4
 8002d76:	f7fe f9fd 	bl	8001174 <__aeabi_fcmplt>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d009      	beq.n	8002d94 <GPIOManager+0x1d8>
	{
		  HAL_GPIO_WritePin(SPEED2_COIL_GPIO_Port,SPEED2_COIL_Pin,RESET);
 8002d80:	2200      	movs	r2, #0
 8002d82:	2140      	movs	r1, #64	; 0x40
 8002d84:	480a      	ldr	r0, [pc, #40]	; (8002db0 <GPIOManager+0x1f4>)
 8002d86:	f003 ff26 	bl	8006bd6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SPEED3_COIL_GPIO_Port,SPEED3_COIL_Pin,RESET);
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	2180      	movs	r1, #128	; 0x80
 8002d8e:	4808      	ldr	r0, [pc, #32]	; (8002db0 <GPIOManager+0x1f4>)
 8002d90:	f003 ff21 	bl	8006bd6 <HAL_GPIO_WritePin>
	}


}
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd90      	pop	{r4, r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40010c00 	.word	0x40010c00
 8002da0:	20000c20 	.word	0x20000c20
 8002da4:	20000c24 	.word	0x20000c24
 8002da8:	20000c28 	.word	0x20000c28
 8002dac:	20000c2c 	.word	0x20000c2c
 8002db0:	40011000 	.word	0x40011000

08002db4 <Motor_task>:

bool StepperAtSetpoint(StepObj *motor);
bool StepperLimitSwitchActive(StepObj *motor);

void Motor_task(void const * argument)
{
 8002db4:	b590      	push	{r4, r7, lr}
 8002db6:	b0af      	sub	sp, #188	; 0xbc
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]

	Step1_2_3_WAKE();
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	2110      	movs	r1, #16
 8002dc0:	48c8      	ldr	r0, [pc, #800]	; (80030e4 <Motor_task+0x330>)
 8002dc2:	f003 ff08 	bl	8006bd6 <HAL_GPIO_WritePin>
#if NOVIKA_SETUP
	HAL_GPIO_WritePin(Stepper_HalfStep_GPIO_Port,Stepper_HalfStep_Pin,RESET);
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dcc:	48c6      	ldr	r0, [pc, #792]	; (80030e8 <Motor_task+0x334>)
 8002dce:	f003 ff02 	bl	8006bd6 <HAL_GPIO_WritePin>
#else
	HAL_GPIO_WritePin(Stepper_HalfStep_GPIO_Port,Stepper_HalfStep_Pin,SET);
#endif
	StepObj motor[NumberOfMotors] = {
 8002dd2:	f107 0314 	add.w	r3, r7, #20
 8002dd6:	229c      	movs	r2, #156	; 0x9c
 8002dd8:	2100      	movs	r1, #0
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f00b fef6 	bl	800ebcc <memset>
 8002de0:	2308      	movs	r3, #8
 8002de2:	833b      	strh	r3, [r7, #24]
 8002de4:	2320      	movs	r3, #32
 8002de6:	837b      	strh	r3, [r7, #26]
 8002de8:	2310      	movs	r3, #16
 8002dea:	83bb      	strh	r3, [r7, #28]
 8002dec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002df0:	83fb      	strh	r3, [r7, #30]
 8002df2:	2304      	movs	r3, #4
 8002df4:	843b      	strh	r3, [r7, #32]
 8002df6:	2301      	movs	r3, #1
 8002df8:	847b      	strh	r3, [r7, #34]	; 0x22
 8002dfa:	4bbb      	ldr	r3, [pc, #748]	; (80030e8 <Motor_task+0x334>)
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dfe:	4bba      	ldr	r3, [pc, #744]	; (80030e8 <Motor_task+0x334>)
 8002e00:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e02:	4bb9      	ldr	r3, [pc, #740]	; (80030e8 <Motor_task+0x334>)
 8002e04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e06:	4bb7      	ldr	r3, [pc, #732]	; (80030e4 <Motor_task+0x330>)
 8002e08:	633b      	str	r3, [r7, #48]	; 0x30
 8002e0a:	4bb8      	ldr	r3, [pc, #736]	; (80030ec <Motor_task+0x338>)
 8002e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e0e:	4bb5      	ldr	r3, [pc, #724]	; (80030e4 <Motor_task+0x330>)
 8002e10:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e12:	2364      	movs	r3, #100	; 0x64
 8002e14:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8002e18:	2364      	movs	r3, #100	; 0x64
 8002e1a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8002e1e:	2361      	movs	r3, #97	; 0x61
 8002e20:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002e24:	2306      	movs	r3, #6
 8002e26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e2e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e36:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002e3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e3e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002e42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e46:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002e4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e4e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8002e52:	2302      	movs	r3, #2
 8002e54:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8002e58:	4ba2      	ldr	r3, [pc, #648]	; (80030e4 <Motor_task+0x330>)
 8002e5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e5c:	4ba1      	ldr	r3, [pc, #644]	; (80030e4 <Motor_task+0x330>)
 8002e5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e60:	4ba0      	ldr	r3, [pc, #640]	; (80030e4 <Motor_task+0x330>)
 8002e62:	663b      	str	r3, [r7, #96]	; 0x60
 8002e64:	4b9f      	ldr	r3, [pc, #636]	; (80030e4 <Motor_task+0x330>)
 8002e66:	667b      	str	r3, [r7, #100]	; 0x64
 8002e68:	4b9e      	ldr	r3, [pc, #632]	; (80030e4 <Motor_task+0x330>)
 8002e6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e6c:	4b9d      	ldr	r3, [pc, #628]	; (80030e4 <Motor_task+0x330>)
 8002e6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e70:	2364      	movs	r3, #100	; 0x64
 8002e72:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 8002e76:	2364      	movs	r3, #100	; 0x64
 8002e78:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
 8002e7c:	2361      	movs	r3, #97	; 0x61
 8002e7e:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8002e82:	2302      	movs	r3, #2
 8002e84:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 8002e88:	2320      	movs	r3, #32
 8002e8a:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8002e8e:	2304      	movs	r3, #4
 8002e90:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8002e94:	2304      	movs	r3, #4
 8002e96:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8002e9a:	2320      	movs	r3, #32
 8002e9c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002ea0:	2340      	movs	r3, #64	; 0x40
 8002ea2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002ea6:	4b90      	ldr	r3, [pc, #576]	; (80030e8 <Motor_task+0x334>)
 8002ea8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002eac:	4b8d      	ldr	r3, [pc, #564]	; (80030e4 <Motor_task+0x330>)
 8002eae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002eb2:	4b8c      	ldr	r3, [pc, #560]	; (80030e4 <Motor_task+0x330>)
 8002eb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002eb8:	4b8b      	ldr	r3, [pc, #556]	; (80030e8 <Motor_task+0x334>)
 8002eba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ebe:	4b8c      	ldr	r3, [pc, #560]	; (80030f0 <Motor_task+0x33c>)
 8002ec0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ec4:	4b8a      	ldr	r3, [pc, #552]	; (80030f0 <Motor_task+0x33c>)
 8002ec6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002eca:	2364      	movs	r3, #100	; 0x64
 8002ecc:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
 8002ed0:	2364      	movs	r3, #100	; 0x64
 8002ed2:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 8002ed6:	2361      	movs	r3, #97	; 0x61
 8002ed8:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
 8002edc:	2306      	movs	r3, #6
 8002ede:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
								Step2_STEP_GPIO_Port, Step2_ENABLE_GPIO_Port, Step2_RESET_GPIO_Port,Step2_LowCurrent_GPIO_Port,Step2_DIR_GPIO_Port, Limit_switch2_GPIO_Port),
			STEPPER_INIT(PF_SECONDARY_MINIMUM_OPENING,PF_SECONDARY_FULL_OPEN, Step3_STEP_Pin,Step3_ENABLE_Pin,Step3_RESET_Pin,Step3_LowCurrent_Pin,Step3_DIR_Pin, Limit_switch3_Pin,
										Step3_STEP_GPIO_Port,Step3_ENABLE_GPIO_Port,Step3_RESET_GPIO_Port,Step3_LowCurrent_GPIO_Port,Step3_DIR_GPIO_Port, Limit_switch3_GPIO_Port),
			};

	bool AllInPlace = true;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	74fb      	strb	r3, [r7, #19]
	uint8_t u8cmd_buf[6] = {0x00};
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	2300      	movs	r3, #0
 8002eec:	823b      	strh	r3, [r7, #16]
	uint32_t u32CurrentTime_ms = 0;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  for(;;)
  {
	  u32CurrentTime_ms = osKernelSysTick();
 8002ef4:	f008 fc2d 	bl	800b752 <osKernelSysTick>
 8002ef8:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0

	  if(xMessageBufferIsFull(MotorControlsHandle) == pdTRUE)
 8002efc:	4b7d      	ldr	r3, [pc, #500]	; (80030f4 <Motor_task+0x340>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f009 fcb8 	bl	800c876 <xStreamBufferIsFull>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d14a      	bne.n	8002fa2 <Motor_task+0x1ee>
	  {
		  xMessageBufferReceive(MotorControlsHandle, u8cmd_buf, 6, 5);
 8002f0c:	4b79      	ldr	r3, [pc, #484]	; (80030f4 <Motor_task+0x340>)
 8002f0e:	6818      	ldr	r0, [r3, #0]
 8002f10:	f107 010c 	add.w	r1, r7, #12
 8002f14:	2305      	movs	r3, #5
 8002f16:	2206      	movs	r2, #6
 8002f18:	f009 fbe7 	bl	800c6ea <xStreamBufferReceive>

		  for(uint8_t i = 0;i < NumberOfMotors;i++)
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 8002f22:	e03a      	b.n	8002f9a <Motor_task+0x1e6>
		  {

			  motor[i].u8SetPoint = MIN(u8cmd_buf[2*i], motor->u8MaxValue);
 8002f24:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 8002f28:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8002f32:	4413      	add	r3, r2
 8002f34:	f813 2cac 	ldrb.w	r2, [r3, #-172]
 8002f38:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8002f3c:	428a      	cmp	r2, r1
 8002f3e:	bf28      	it	cs
 8002f40:	460a      	movcs	r2, r1
 8002f42:	b2d1      	uxtb	r1, r2
 8002f44:	2234      	movs	r2, #52	; 0x34
 8002f46:	fb02 f303 	mul.w	r3, r2, r3
 8002f4a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8002f4e:	4413      	add	r3, r2
 8002f50:	3b7b      	subs	r3, #123	; 0x7b
 8002f52:	460a      	mov	r2, r1
 8002f54:	701a      	strb	r2, [r3, #0]
			  motor[i].fSecPerStep = (float) (u8cmd_buf[2*i + 1])/10;
 8002f56:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8002f62:	4413      	add	r3, r2
 8002f64:	f813 3cac 	ldrb.w	r3, [r3, #-172]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fd ff0d 	bl	8000d88 <__aeabi_ui2f>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	f897 40b7 	ldrb.w	r4, [r7, #183]	; 0xb7
 8002f74:	4960      	ldr	r1, [pc, #384]	; (80030f8 <Motor_task+0x344>)
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fe f812 	bl	8000fa0 <__aeabi_fdiv>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	461a      	mov	r2, r3
 8002f80:	2334      	movs	r3, #52	; 0x34
 8002f82:	fb03 f304 	mul.w	r3, r3, r4
 8002f86:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8002f8a:	440b      	add	r3, r1
 8002f8c:	3b74      	subs	r3, #116	; 0x74
 8002f8e:	601a      	str	r2, [r3, #0]
		  for(uint8_t i = 0;i < NumberOfMotors;i++)
 8002f90:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8002f94:	3301      	adds	r3, #1
 8002f96:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 8002f9a:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d9c0      	bls.n	8002f24 <Motor_task+0x170>
		  }
	  }


	  if(StepperAtSetpoint(&motor[PrimaryStepper]) && StepperAtSetpoint(&motor[GrillStepper]) //TODO: receive commands at every passage
 8002fa2:	f107 0314 	add.w	r3, r7, #20
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 f8ec 	bl	8003184 <StepperAtSetpoint>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d023      	beq.n	8002ffa <Motor_task+0x246>
 8002fb2:	f107 0314 	add.w	r3, r7, #20
 8002fb6:	3334      	adds	r3, #52	; 0x34
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 f8e3 	bl	8003184 <StepperAtSetpoint>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d01a      	beq.n	8002ffa <Motor_task+0x246>
			  && StepperAtSetpoint(&motor[SecondaryStepper]))
 8002fc4:	f107 0314 	add.w	r3, r7, #20
 8002fc8:	3368      	adds	r3, #104	; 0x68
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 f8da 	bl	8003184 <StepperAtSetpoint>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d011      	beq.n	8002ffa <Motor_task+0x246>
	  {
		  if(!AllInPlace)
 8002fd6:	7cfb      	ldrb	r3, [r7, #19]
 8002fd8:	f083 0301 	eor.w	r3, r3, #1
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 80ca 	beq.w	8003178 <Motor_task+0x3c4>
		  {
			  AllInPlace = true;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	74fb      	strb	r3, [r7, #19]
			  xQueueSend(MotorInPlaceHandle,&AllInPlace,0);
 8002fe8:	4b44      	ldr	r3, [pc, #272]	; (80030fc <Motor_task+0x348>)
 8002fea:	6818      	ldr	r0, [r3, #0]
 8002fec:	f107 0113 	add.w	r1, r7, #19
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f008 fe3e 	bl	800bc74 <xQueueGenericSend>
		  if(!AllInPlace)
 8002ff8:	e0be      	b.n	8003178 <Motor_task+0x3c4>
		  }

	  }else
	  {
		  AllInPlace = false;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	74fb      	strb	r3, [r7, #19]
		  for(uint8_t i = 0;i < NumberOfMotors;i++)
 8002ffe:	2300      	movs	r3, #0
 8003000:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 8003004:	e0b3      	b.n	800316e <Motor_task+0x3ba>
		  {

			  if(!StepperAtSetpoint(&motor[i]) && (u32CurrentTime_ms - motor[i].u32LastMove_ms > STEP_PERIOD))
 8003006:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 800300a:	f107 0214 	add.w	r2, r7, #20
 800300e:	2134      	movs	r1, #52	; 0x34
 8003010:	fb01 f303 	mul.w	r3, r1, r3
 8003014:	4413      	add	r3, r2
 8003016:	4618      	mov	r0, r3
 8003018:	f000 f8b4 	bl	8003184 <StepperAtSetpoint>
 800301c:	4603      	mov	r3, r0
 800301e:	f083 0301 	eor.w	r3, r3, #1
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 809d 	beq.w	8003164 <Motor_task+0x3b0>
 800302a:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 800302e:	2234      	movs	r2, #52	; 0x34
 8003030:	fb02 f303 	mul.w	r3, r2, r3
 8003034:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8003038:	4413      	add	r3, r2
 800303a:	3b78      	subs	r3, #120	; 0x78
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b0a      	cmp	r3, #10
 8003046:	f240 808d 	bls.w	8003164 <Motor_task+0x3b0>
			  {
				  if((motor[i].u8SetPoint == 0) && (motor[i].fSecPerStep == 0.0))
 800304a:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 800304e:	2234      	movs	r2, #52	; 0x34
 8003050:	fb02 f303 	mul.w	r3, r2, r3
 8003054:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8003058:	4413      	add	r3, r2
 800305a:	3b7b      	subs	r3, #123	; 0x7b
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d14e      	bne.n	8003100 <Motor_task+0x34c>
 8003062:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8003066:	2234      	movs	r2, #52	; 0x34
 8003068:	fb02 f303 	mul.w	r3, r2, r3
 800306c:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8003070:	4413      	add	r3, r2
 8003072:	3b74      	subs	r3, #116	; 0x74
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f04f 0100 	mov.w	r1, #0
 800307a:	4618      	mov	r0, r3
 800307c:	f7fe f870 	bl	8001160 <__aeabi_fcmpeq>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d03c      	beq.n	8003100 <Motor_task+0x34c>
				  {
					  if(StepperSetToZero(&motor[i]))
 8003086:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 800308a:	f107 0214 	add.w	r2, r7, #20
 800308e:	2134      	movs	r1, #52	; 0x34
 8003090:	fb01 f303 	mul.w	r3, r1, r3
 8003094:	4413      	add	r3, r2
 8003096:	4618      	mov	r0, r3
 8003098:	f000 f888 	bl	80031ac <StepperSetToZero>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d060      	beq.n	8003164 <Motor_task+0x3b0>
					  {
						  motor[i].u8SetPoint = motor[i].u8MinValue;
 80030a2:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 80030a6:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80030aa:	2134      	movs	r1, #52	; 0x34
 80030ac:	fb01 f202 	mul.w	r2, r1, r2
 80030b0:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80030b4:	440a      	add	r2, r1
 80030b6:	3a79      	subs	r2, #121	; 0x79
 80030b8:	7811      	ldrb	r1, [r2, #0]
 80030ba:	2234      	movs	r2, #52	; 0x34
 80030bc:	fb02 f303 	mul.w	r3, r2, r3
 80030c0:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80030c4:	4413      	add	r3, r2
 80030c6:	3b7b      	subs	r3, #123	; 0x7b
 80030c8:	460a      	mov	r2, r1
 80030ca:	701a      	strb	r2, [r3, #0]
						  StepperDisable(&motor[i]);
 80030cc:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80030d0:	f107 0214 	add.w	r2, r7, #20
 80030d4:	2134      	movs	r1, #52	; 0x34
 80030d6:	fb01 f303 	mul.w	r3, r1, r3
 80030da:	4413      	add	r3, r2
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 f96a 	bl	80033b6 <StepperDisable>
					  if(StepperSetToZero(&motor[i]))
 80030e2:	e03f      	b.n	8003164 <Motor_task+0x3b0>
 80030e4:	40011000 	.word	0x40011000
 80030e8:	40010c00 	.word	0x40010c00
 80030ec:	40011400 	.word	0x40011400
 80030f0:	40010800 	.word	0x40010800
 80030f4:	200039f4 	.word	0x200039f4
 80030f8:	41200000 	.word	0x41200000
 80030fc:	200039f0 	.word	0x200039f0
					  }

				  }else if(u32CurrentTime_ms - motor[i].u32LastMove_ms > motor[i].fSecPerStep*1000)
 8003100:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8003104:	2234      	movs	r2, #52	; 0x34
 8003106:	fb02 f303 	mul.w	r3, r2, r3
 800310a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800310e:	4413      	add	r3, r2
 8003110:	3b78      	subs	r3, #120	; 0x78
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	4618      	mov	r0, r3
 800311c:	f7fd fe34 	bl	8000d88 <__aeabi_ui2f>
 8003120:	4604      	mov	r4, r0
 8003122:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8003126:	2234      	movs	r2, #52	; 0x34
 8003128:	fb02 f303 	mul.w	r3, r2, r3
 800312c:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8003130:	4413      	add	r3, r2
 8003132:	3b74      	subs	r3, #116	; 0x74
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4912      	ldr	r1, [pc, #72]	; (8003180 <Motor_task+0x3cc>)
 8003138:	4618      	mov	r0, r3
 800313a:	f7fd fe7d 	bl	8000e38 <__aeabi_fmul>
 800313e:	4603      	mov	r3, r0
 8003140:	4619      	mov	r1, r3
 8003142:	4620      	mov	r0, r4
 8003144:	f7fe f834 	bl	80011b0 <__aeabi_fcmpgt>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00a      	beq.n	8003164 <Motor_task+0x3b0>
				  {
					  StepperAdjustPosition(&motor[i]);
 800314e:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8003152:	f107 0214 	add.w	r2, r7, #20
 8003156:	2134      	movs	r1, #52	; 0x34
 8003158:	fb01 f303 	mul.w	r3, r1, r3
 800315c:	4413      	add	r3, r2
 800315e:	4618      	mov	r0, r3
 8003160:	f000 f84d 	bl	80031fe <StepperAdjustPosition>
		  for(uint8_t i = 0;i < NumberOfMotors;i++)
 8003164:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8003168:	3301      	adds	r3, #1
 800316a:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 800316e:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8003172:	2b02      	cmp	r3, #2
 8003174:	f67f af47 	bls.w	8003006 <Motor_task+0x252>

		  }

	  }

	  osDelay(1);
 8003178:	2001      	movs	r0, #1
 800317a:	f008 fb46 	bl	800b80a <osDelay>
	  u32CurrentTime_ms = osKernelSysTick();
 800317e:	e6b9      	b.n	8002ef4 <Motor_task+0x140>
 8003180:	447a0000 	.word	0x447a0000

08003184 <StepperAtSetpoint>:


}

bool StepperAtSetpoint(StepObj *motor)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
	return motor->u8Position == motor->u8SetPoint;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003198:	429a      	cmp	r2, r3
 800319a:	bf0c      	ite	eq
 800319c:	2301      	moveq	r3, #1
 800319e:	2300      	movne	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr

080031ac <StepperSetToZero>:

bool StepperSetToZero(StepObj *motor)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
	if(!StepperLimitSwitchActive(motor))
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f8b0 	bl	800331a <StepperLimitSwitchActive>
 80031ba:	4603      	mov	r3, r0
 80031bc:	f083 0301 	eor.w	r3, r3, #1
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d010      	beq.n	80031e8 <StepperSetToZero+0x3c>
	{
		StepperEnable(motor);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f8bd 	bl	8003346 <StepperEnable>
		StepperLowCurrentON(motor);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f8e2 	bl	8003396 <StepperLowCurrentON>
	    motor->sDirection = Closing;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	701a      	strb	r2, [r3, #0]
	    StepperSetDirection(motor);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f8fc 	bl	80033d6 <StepperSetDirection>

	    StepperToggleOneStep(motor);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f87b 	bl	80032da <StepperToggleOneStep>
	    return false;
 80031e4:	2300      	movs	r3, #0
 80031e6:	e006      	b.n	80031f6 <StepperSetToZero+0x4a>

	}
	motor->u8Position = motor->u8MinValue;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	return true;
 80031f4:	2301      	movs	r3, #1
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <StepperAdjustPosition>:
    	osDelay(50);
	}
}
*/
void StepperAdjustPosition(StepObj *motor)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b084      	sub	sp, #16
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]

	int8_t delta_pos;

    if(StepperLimitSwitchActive(motor))
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f887 	bl	800331a <StepperLimitSwitchActive>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d005      	beq.n	800321e <StepperAdjustPosition+0x20>
    {
    	motor->u8Position = motor->u8MinValue;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }

	StepperEnable(motor);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f891 	bl	8003346 <StepperEnable>
	StepperLowCurrentOFF(motor);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f8a6 	bl	8003376 <StepperLowCurrentOFF>

	if(motor->u8Position > motor->u8SetPoint)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003236:	429a      	cmp	r2, r3
 8003238:	d908      	bls.n	800324c <StepperAdjustPosition+0x4e>
	{
		motor->sDirection = Closing;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	701a      	strb	r2, [r3, #0]
		StepperSetDirection(motor);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 f8c8 	bl	80033d6 <StepperSetDirection>
		delta_pos = -1;
 8003246:	23ff      	movs	r3, #255	; 0xff
 8003248:	73fb      	strb	r3, [r7, #15]
 800324a:	e007      	b.n	800325c <StepperAdjustPosition+0x5e>
	}
	else
	{
		motor->sDirection = Opening;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	701a      	strb	r2, [r3, #0]
		StepperSetDirection(motor);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f8bf 	bl	80033d6 <StepperSetDirection>
		delta_pos = 1;
 8003258:	2301      	movs	r3, #1
 800325a:	73fb      	strb	r3, [r7, #15]
	}


    motor->u8Position += delta_pos;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8003262:	7bfb      	ldrb	r3, [r7, #15]
 8003264:	4413      	add	r3, r2
 8003266:	b2da      	uxtb	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	StepperToggleOneStep(motor);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f833 	bl	80032da <StepperToggleOneStep>

    if(StepperLimitSwitchActive(motor) && motor->sDirection == Closing)
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 f850 	bl	800331a <StepperLimitSwitchActive>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00d      	beq.n	800329c <StepperAdjustPosition+0x9e>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d109      	bne.n	800329c <StepperAdjustPosition+0x9e>
	{
		motor->u8Position = motor->u8MinValue; // On a atteint le minimum, on peut désactiver le moteur
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		StepperDisable(motor);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f88e 	bl	80033b6 <StepperDisable>
 800329a:	e00f      	b.n	80032bc <StepperAdjustPosition+0xbe>
	}
    else if(motor->u8Position == motor->u8MinValue) // On pense qu'on est au minimum, mais on est perdu
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d107      	bne.n	80032bc <StepperAdjustPosition+0xbe>
    {
    	motor->u8SetPoint = 0; 		// On demande une remise à zéro
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    	motor->fSecPerStep = 0.0;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	631a      	str	r2, [r3, #48]	; 0x30
    }

    if(motor->u8Position == motor->u8SetPoint)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d102      	bne.n	80032d2 <StepperAdjustPosition+0xd4>
    {
    	StepperLowCurrentON(motor); // To remove if spring load is too strong (reduces torque)
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f862 	bl	8003396 <StepperLowCurrentON>
    }

}
 80032d2:	bf00      	nop
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <StepperToggleOneStep>:

void StepperToggleOneStep(StepObj * motor)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b082      	sub	sp, #8
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(motor->sPins.PWM_PORT,motor->sPins.PWM_PIN,GPIO_PIN_RESET);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6918      	ldr	r0, [r3, #16]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	889b      	ldrh	r3, [r3, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	4619      	mov	r1, r3
 80032ee:	f003 fc72 	bl	8006bd6 <HAL_GPIO_WritePin>
	osDelay(10);
 80032f2:	200a      	movs	r0, #10
 80032f4:	f008 fa89 	bl	800b80a <osDelay>
	HAL_GPIO_WritePin(motor->sPins.PWM_PORT,motor->sPins.PWM_PIN,GPIO_PIN_SET);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6918      	ldr	r0, [r3, #16]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	889b      	ldrh	r3, [r3, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	4619      	mov	r1, r3
 8003304:	f003 fc67 	bl	8006bd6 <HAL_GPIO_WritePin>
	motor->u32LastMove_ms = osKernelSysTick();
 8003308:	f008 fa23 	bl	800b752 <osKernelSysTick>
 800330c:	4602      	mov	r2, r0
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <StepperLimitSwitchActive>:
bool StepperLimitSwitchActive(StepObj * motor)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b082      	sub	sp, #8
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]

	return HAL_GPIO_ReadPin(motor->sPins.SWITCH_PORT,motor->sPins.SWITCH_PIN) == GPIO_PIN_RESET;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	89db      	ldrh	r3, [r3, #14]
 800332a:	4619      	mov	r1, r3
 800332c:	4610      	mov	r0, r2
 800332e:	f003 fc3b 	bl	8006ba8 <HAL_GPIO_ReadPin>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	bf0c      	ite	eq
 8003338:	2301      	moveq	r3, #1
 800333a:	2300      	movne	r3, #0
 800333c:	b2db      	uxtb	r3, r3
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <StepperEnable>:

void StepperEnable(StepObj * motor)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b082      	sub	sp, #8
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(motor->sPins.ENABLE_PORT,motor->sPins.ENABLE_PIN,GPIO_PIN_RESET);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6958      	ldr	r0, [r3, #20]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	88db      	ldrh	r3, [r3, #6]
 8003356:	2200      	movs	r2, #0
 8003358:	4619      	mov	r1, r3
 800335a:	f003 fc3c 	bl	8006bd6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(motor->sPins.RESET_PORT,motor->sPins.RESET_PIN,GPIO_PIN_SET);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6998      	ldr	r0, [r3, #24]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	891b      	ldrh	r3, [r3, #8]
 8003366:	2201      	movs	r2, #1
 8003368:	4619      	mov	r1, r3
 800336a:	f003 fc34 	bl	8006bd6 <HAL_GPIO_WritePin>
}
 800336e:	bf00      	nop
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <StepperLowCurrentOFF>:

void StepperLowCurrentOFF(StepObj *motor)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b082      	sub	sp, #8
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->sPins.LOW_CURRENT_PORT,motor->sPins.LOW_CURRENT_PIN,GPIO_PIN_RESET);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69d8      	ldr	r0, [r3, #28]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	895b      	ldrh	r3, [r3, #10]
 8003386:	2200      	movs	r2, #0
 8003388:	4619      	mov	r1, r3
 800338a:	f003 fc24 	bl	8006bd6 <HAL_GPIO_WritePin>
}
 800338e:	bf00      	nop
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <StepperLowCurrentON>:

void StepperLowCurrentON(StepObj *motor)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->sPins.LOW_CURRENT_PORT,motor->sPins.LOW_CURRENT_PIN,GPIO_PIN_SET);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69d8      	ldr	r0, [r3, #28]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	895b      	ldrh	r3, [r3, #10]
 80033a6:	2201      	movs	r2, #1
 80033a8:	4619      	mov	r1, r3
 80033aa:	f003 fc14 	bl	8006bd6 <HAL_GPIO_WritePin>
}
 80033ae:	bf00      	nop
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <StepperDisable>:

void StepperDisable(StepObj *motor)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b082      	sub	sp, #8
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(motor->sPins.ENABLE_PORT,motor->sPins.ENABLE_PIN,GPIO_PIN_SET);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6958      	ldr	r0, [r3, #20]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	88db      	ldrh	r3, [r3, #6]
 80033c6:	2201      	movs	r2, #1
 80033c8:	4619      	mov	r1, r3
 80033ca:	f003 fc04 	bl	8006bd6 <HAL_GPIO_WritePin>
}
 80033ce:	bf00      	nop
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <StepperSetDirection>:

void StepperSetDirection(StepObj *motor)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b082      	sub	sp, #8
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->sPins.DIRECTION_PORT,motor->sPins.DIRECTION_PIN,motor->sDirection);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a18      	ldr	r0, [r3, #32]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	8999      	ldrh	r1, [r3, #12]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	461a      	mov	r2, r3
 80033ec:	f003 fbf3 	bl	8006bd6 <HAL_GPIO_WritePin>
}
 80033f0:	bf00      	nop
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <PARAMFILE_Init>:

PFL_SHandle PARAMFILE_g_sHandle;
const PFL_SConfig m_sConfig = { .ptrLoadAll = LoadAllCallback, .ptrCommitAll = CommitAllCallback };

void PARAMFILE_Init()
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
	PFL_Init(&PARAMFILE_g_sHandle,  m_sParameterItems, PARAMETERITEM_COUNT, &m_sConfig);
 80033fc:	4b05      	ldr	r3, [pc, #20]	; (8003414 <PARAMFILE_Init+0x1c>)
 80033fe:	2270      	movs	r2, #112	; 0x70
 8003400:	4905      	ldr	r1, [pc, #20]	; (8003418 <PARAMFILE_Init+0x20>)
 8003402:	4806      	ldr	r0, [pc, #24]	; (800341c <PARAMFILE_Init+0x24>)
 8003404:	f000 f8a4 	bl	8003550 <PFL_Init>
	//PFL_LoadAll(&PARAMFILE_g_sHandle);
	PFL_LoadAllDefault(&PARAMFILE_g_sHandle);
 8003408:	4804      	ldr	r0, [pc, #16]	; (800341c <PARAMFILE_Init+0x24>)
 800340a:	f000 f8b6 	bl	800357a <PFL_LoadAllDefault>
}
 800340e:	bf00      	nop
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	080142a0 	.word	0x080142a0
 8003418:	08013660 	.word	0x08013660
 800341c:	200038d8 	.word	0x200038d8

08003420 <PARAMFILE_GetParamEntryCount>:

uint32_t PARAMFILE_GetParamEntryCount()
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
	return PARAMFILE_g_sHandle.u32ParameterEntryCount;
 8003424:	4b02      	ldr	r3, [pc, #8]	; (8003430 <PARAMFILE_GetParamEntryCount+0x10>)
 8003426:	685b      	ldr	r3, [r3, #4]
}
 8003428:	4618      	mov	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr
 8003430:	200038d8 	.word	0x200038d8

08003434 <PARAMFILE_GetParamEntryByIndex>:

const PFL_SParameterItem* PARAMFILE_GetParamEntryByIndex(uint32_t u32Index)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
	if (u32Index >= PARAMETERITEM_COUNT)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b6f      	cmp	r3, #111	; 0x6f
 8003440:	d901      	bls.n	8003446 <PARAMFILE_GetParamEntryByIndex+0x12>
		return NULL;
 8003442:	2300      	movs	r3, #0
 8003444:	e007      	b.n	8003456 <PARAMFILE_GetParamEntryByIndex+0x22>
	return &PARAMFILE_g_sHandle.pParameterEntries[u32Index];
 8003446:	4b06      	ldr	r3, [pc, #24]	; (8003460 <PARAMFILE_GetParamEntryByIndex+0x2c>)
 8003448:	6819      	ldr	r1, [r3, #0]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	1a9b      	subs	r3, r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
}
 8003456:	4618      	mov	r0, r3
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr
 8003460:	200038d8 	.word	0x200038d8

08003464 <LoadAllCallback>:

static void LoadAllCallback(const PFL_SHandle* psHandle)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
	// TODO: Flash reading is not yet implemented
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	bc80      	pop	{r7}
 8003474:	4770      	bx	lr

08003476 <CommitAllCallback>:

static void CommitAllCallback(const PFL_SHandle* psHandle)
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
	// TODO: Flash writing is not yet implemented
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr

08003488 <PB_GetUserParam>:


const PF_UsrParam* PB_GetUserParam()
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
	return &m_sMemBlock;
 800348c:	4b02      	ldr	r3, [pc, #8]	; (8003498 <PB_GetUserParam+0x10>)
}
 800348e:	4618      	mov	r0, r3
 8003490:	46bd      	mov	sp, r7
 8003492:	bc80      	pop	{r7}
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	20000ec4 	.word	0x20000ec4

0800349c <PB_GetOverheatParams>:

const PF_OverHeat_Thresholds_t* PB_GetOverheatParams(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
	return &m_sOverheatParams;
 80034a0:	4b02      	ldr	r3, [pc, #8]	; (80034ac <PB_GetOverheatParams+0x10>)
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc80      	pop	{r7}
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	20000eb4 	.word	0x20000eb4

080034b0 <PB_GetWaitingParams>:


const PF_StateParam_t *PB_GetWaitingParams(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
	return &m_sWaitingParams;
 80034b4:	4b02      	ldr	r3, [pc, #8]	; (80034c0 <PB_GetWaitingParams+0x10>)
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bc80      	pop	{r7}
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	20000c30 	.word	0x20000c30

080034c4 <PB_GetReloadParams>:
const PF_StateParam_t *PB_GetReloadParams(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
	return &m_sReloadParams;
 80034c8:	4b02      	ldr	r3, [pc, #8]	; (80034d4 <PB_GetReloadParams+0x10>)
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bc80      	pop	{r7}
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	20000c8c 	.word	0x20000c8c

080034d8 <PB_GetTRiseParams>:
const PF_StateParam_t *PB_GetTRiseParams(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
	return &m_sTRiseParams;
 80034dc:	4b02      	ldr	r3, [pc, #8]	; (80034e8 <PB_GetTRiseParams+0x10>)
}
 80034de:	4618      	mov	r0, r3
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	20000ce8 	.word	0x20000ce8

080034ec <PB_GetCombLowParams>:
const PF_StateParam_t *PB_GetCombLowParams(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
	return &m_sCombLowParams;
 80034f0:	4b02      	ldr	r3, [pc, #8]	; (80034fc <PB_GetCombLowParams+0x10>)
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bc80      	pop	{r7}
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	20000d44 	.word	0x20000d44

08003500 <PB_GetCombHighParams>:
const PF_StateParam_t *PB_GetCombHighParams(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
	return &m_sCombHighParams;
 8003504:	4b02      	ldr	r3, [pc, #8]	; (8003510 <PB_GetCombHighParams+0x10>)
}
 8003506:	4618      	mov	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	bc80      	pop	{r7}
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	20000da0 	.word	0x20000da0

08003514 <PB_GetCoalLowParams>:
const PF_StateParam_t *PB_GetCoalLowParams(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
	return &m_sCoalLowParams;
 8003518:	4b02      	ldr	r3, [pc, #8]	; (8003524 <PB_GetCoalLowParams+0x10>)
}
 800351a:	4618      	mov	r0, r3
 800351c:	46bd      	mov	sp, r7
 800351e:	bc80      	pop	{r7}
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	20000dfc 	.word	0x20000dfc

08003528 <PB_GetCoalHighParams>:
const PF_StateParam_t *PB_GetCoalHighParams(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
	return &m_sCoalHighParams;
 800352c:	4b02      	ldr	r3, [pc, #8]	; (8003538 <PB_GetCoalHighParams+0x10>)
}
 800352e:	4618      	mov	r0, r3
 8003530:	46bd      	mov	sp, r7
 8003532:	bc80      	pop	{r7}
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	20000e58 	.word	0x20000e58

0800353c <PB_SpeedParams>:

const PF_StepperStepsPerSec_t *PB_SpeedParams(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
	return &m_sSpeedParams;
 8003540:	4b02      	ldr	r3, [pc, #8]	; (800354c <PB_SpeedParams+0x10>)
}
 8003542:	4618      	mov	r0, r3
 8003544:	46bd      	mov	sp, r7
 8003546:	bc80      	pop	{r7}
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	20000ee0 	.word	0x20000ee0

08003550 <PFL_Init>:

static const PFL_SParameterItem* GetParameterEntryByKey(const PFL_SHandle* pHandle, const char* szKey);
static PFL_ESETRET ValidateValueInt32(const PFL_SHandle* pHandle, const PFL_SParameterItem* pParameterFile, int32_t s32Value);

void PFL_Init(PFL_SHandle* pHandle, const PFL_SParameterItem* pParameterEntries, uint32_t u32ParameterEntryCount, const PFL_SConfig* psConfig)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	603b      	str	r3, [r7, #0]
	pHandle->pParameterEntries = pParameterEntries;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	601a      	str	r2, [r3, #0]
	pHandle->u32ParameterEntryCount = u32ParameterEntryCount;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	605a      	str	r2, [r3, #4]

	pHandle->psConfig = psConfig;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	609a      	str	r2, [r3, #8]
}
 8003570:	bf00      	nop
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	bc80      	pop	{r7}
 8003578:	4770      	bx	lr

0800357a <PFL_LoadAllDefault>:
		}
	}
}

void PFL_LoadAllDefault(PFL_SHandle* pHandle)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b086      	sub	sp, #24
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
	if (pHandle->psConfig->ptrLoadAll != NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d004      	beq.n	8003596 <PFL_LoadAllDefault+0x1c>
		pHandle->psConfig->ptrLoadAll(pHandle);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	4798      	blx	r3

	// Verify variables and load default value if necessary
	for(int i = 0; i < pHandle->u32ParameterEntryCount; i++)
 8003596:	2300      	movs	r3, #0
 8003598:	617b      	str	r3, [r7, #20]
 800359a:	e016      	b.n	80035ca <PFL_LoadAllDefault+0x50>
	{
		const PFL_SParameterItem* pEnt = &pHandle->pParameterEntries[i];
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6819      	ldr	r1, [r3, #0]
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	4613      	mov	r3, r2
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	1a9b      	subs	r3, r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	613b      	str	r3, [r7, #16]

		if (pEnt->eType == PFL_TYPE_Int32)
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	7a1b      	ldrb	r3, [r3, #8]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d106      	bne.n	80035c4 <PFL_LoadAllDefault+0x4a>
		{
			int32_t* ps32Value = ((int32_t*)pEnt->vdVar);
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	60fb      	str	r3, [r7, #12]
			*ps32Value = pEnt->uType.sInt32.s32Default;
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < pHandle->u32ParameterEntryCount; i++)
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	3301      	adds	r3, #1
 80035c8:	617b      	str	r3, [r7, #20]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d8e3      	bhi.n	800359c <PFL_LoadAllDefault+0x22>
		}
	}
}
 80035d4:	bf00      	nop
 80035d6:	bf00      	nop
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <PFL_GetValueInt32>:
	if (pHandle->psConfig->ptrCommitAll != NULL)
		pHandle->psConfig->ptrCommitAll(pHandle);
}

PFL_ESETRET PFL_GetValueInt32(const PFL_SHandle* pHandle, const char* szName, int32_t* psOut32Value)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b086      	sub	sp, #24
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	60f8      	str	r0, [r7, #12]
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	607a      	str	r2, [r7, #4]
	const PFL_SParameterItem* pEnt = GetParameterEntryByKey(pHandle, szName);
 80035ea:	68b9      	ldr	r1, [r7, #8]
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 f873 	bl	80036d8 <GetParameterEntryByKey>
 80035f2:	6178      	str	r0, [r7, #20]
	if (pEnt == NULL || pEnt->eType != PFL_TYPE_Int32 || pEnt->vdVar == NULL)
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d007      	beq.n	800360a <PFL_GetValueInt32+0x2c>
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	7a1b      	ldrb	r3, [r3, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d103      	bne.n	800360a <PFL_GetValueInt32+0x2c>
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <PFL_GetValueInt32+0x30>
		return PFL_ESETRET_EntryNoFound;
 800360a:	2304      	movs	r3, #4
 800360c:	e007      	b.n	800361e <PFL_GetValueInt32+0x40>

	const int32_t* ps32Value = ((int32_t*)pEnt->vdVar);
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	613b      	str	r3, [r7, #16]
	if (eValidateRet != PFL_ESETRET_OK)
	{
		*psOut32Value = pEnt->uType.sInt32.s32Default;
		return eValidateRet;
	}*/
	*psOut32Value = *ps32Value;
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	601a      	str	r2, [r3, #0]
	return PFL_ESETRET_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <PFL_SetValueInt32>:

PFL_ESETRET PFL_SetValueInt32(const PFL_SHandle* pHandle, const char* szName, int32_t s32NewValue)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b088      	sub	sp, #32
 800362a:	af00      	add	r7, sp, #0
 800362c:	60f8      	str	r0, [r7, #12]
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	607a      	str	r2, [r7, #4]
	const PFL_SParameterItem* pEnt = GetParameterEntryByKey(pHandle, szName);
 8003632:	68b9      	ldr	r1, [r7, #8]
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 f84f 	bl	80036d8 <GetParameterEntryByKey>
 800363a:	61f8      	str	r0, [r7, #28]
	if (pEnt == NULL || pEnt->eType != PFL_TYPE_Int32 || pEnt->vdVar == NULL)
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d007      	beq.n	8003652 <PFL_SetValueInt32+0x2c>
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	7a1b      	ldrb	r3, [r3, #8]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d103      	bne.n	8003652 <PFL_SetValueInt32+0x2c>
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <PFL_SetValueInt32+0x30>
		return PFL_ESETRET_EntryNoFound;
 8003652:	2304      	movs	r3, #4
 8003654:	e012      	b.n	800367c <PFL_SetValueInt32+0x56>
	int32_t* ps32Value = ((int32_t*)pEnt->vdVar);
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	61bb      	str	r3, [r7, #24]
	const PFL_ESETRET eValidateRet = ValidateValueInt32(pHandle, pEnt, s32NewValue);
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	69f9      	ldr	r1, [r7, #28]
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 f80f 	bl	8003684 <ValidateValueInt32>
 8003666:	4603      	mov	r3, r0
 8003668:	75fb      	strb	r3, [r7, #23]
	if (eValidateRet != PFL_ESETRET_OK)
 800366a:	7dfb      	ldrb	r3, [r7, #23]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <PFL_SetValueInt32+0x4e>
		return eValidateRet;
 8003670:	7dfb      	ldrb	r3, [r7, #23]
 8003672:	e003      	b.n	800367c <PFL_SetValueInt32+0x56>
	// We can record if it pass validation step
	*ps32Value = s32NewValue;
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	601a      	str	r2, [r3, #0]
	return PFL_ESETRET_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3720      	adds	r7, #32
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <ValidateValueInt32>:

static PFL_ESETRET ValidateValueInt32(const PFL_SHandle* pHandle, const PFL_SParameterItem* pParameterFile, int32_t s32Value)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
    assert(pParameterFile != NULL && pParameterFile->eType == PFL_TYPE_Int32);
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <ValidateValueInt32+0x1a>
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	7a1b      	ldrb	r3, [r3, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d005      	beq.n	80036aa <ValidateValueInt32+0x26>
 800369e:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <ValidateValueInt32+0x48>)
 80036a0:	4a0b      	ldr	r2, [pc, #44]	; (80036d0 <ValidateValueInt32+0x4c>)
 80036a2:	2169      	movs	r1, #105	; 0x69
 80036a4:	480b      	ldr	r0, [pc, #44]	; (80036d4 <ValidateValueInt32+0x50>)
 80036a6:	f00b fa29 	bl	800eafc <__assert_func>
	if (s32Value < pParameterFile->uType.sInt32.s32Min || s32Value > pParameterFile->uType.sInt32.s32Max)
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	db04      	blt.n	80036be <ValidateValueInt32+0x3a>
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	dd01      	ble.n	80036c2 <ValidateValueInt32+0x3e>
		return PFL_ESETRET_InvalidRange;
 80036be:	2302      	movs	r3, #2
 80036c0:	e000      	b.n	80036c4 <ValidateValueInt32+0x40>
	return PFL_ESETRET_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	080133d0 	.word	0x080133d0
 80036d0:	080142a8 	.word	0x080142a8
 80036d4:	08013414 	.word	0x08013414

080036d8 <GetParameterEntryByKey>:

static const PFL_SParameterItem* GetParameterEntryByKey(const PFL_SHandle* pHandle, const char* szKey)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
    for(int i = 0; i < pHandle->u32ParameterEntryCount; i++)
 80036e2:	2300      	movs	r3, #0
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	e016      	b.n	8003716 <GetParameterEntryByKey+0x3e>
    {
    	const PFL_SParameterItem* pParamItem = &pHandle->pParameterEntries[i];
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6819      	ldr	r1, [r3, #0]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	4613      	mov	r3, r2
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	1a9b      	subs	r3, r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	440b      	add	r3, r1
 80036f8:	60bb      	str	r3, [r7, #8]
        if (strcmp(pParamItem->szKey, szKey) == 0)
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6839      	ldr	r1, [r7, #0]
 8003700:	4618      	mov	r0, r3
 8003702:	f7fc fd95 	bl	8000230 <strcmp>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <GetParameterEntryByKey+0x38>
            return pParamItem;
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	e008      	b.n	8003722 <GetParameterEntryByKey+0x4a>
    for(int i = 0; i < pHandle->u32ParameterEntryCount; i++)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	3301      	adds	r3, #1
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	429a      	cmp	r2, r3
 800371e:	d8e3      	bhi.n	80036e8 <GetParameterEntryByKey+0x10>
    }
    return NULL;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <Particle_Init>:

uint16_t Particle_Send_CMD(uint8_t cmd);


void Particle_Init(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
	ParticleDevice.fLED_current_meas = 0;
 8003730:	4b1b      	ldr	r3, [pc, #108]	; (80037a0 <Particle_Init+0x74>)
 8003732:	f04f 0200 	mov.w	r2, #0
 8003736:	61da      	str	r2, [r3, #28]
	ParticleDevice.u16ch0_ON = 0;
 8003738:	4b19      	ldr	r3, [pc, #100]	; (80037a0 <Particle_Init+0x74>)
 800373a:	2200      	movs	r2, #0
 800373c:	801a      	strh	r2, [r3, #0]
	ParticleDevice.u16ch0_OFF = 0;
 800373e:	4b18      	ldr	r3, [pc, #96]	; (80037a0 <Particle_Init+0x74>)
 8003740:	2200      	movs	r2, #0
 8003742:	805a      	strh	r2, [r3, #2]
	ParticleDevice.u16ch1_ON = 0;
 8003744:	4b16      	ldr	r3, [pc, #88]	; (80037a0 <Particle_Init+0x74>)
 8003746:	2200      	movs	r2, #0
 8003748:	809a      	strh	r2, [r3, #4]
	ParticleDevice.u16ch1_OFF = 0;
 800374a:	4b15      	ldr	r3, [pc, #84]	; (80037a0 <Particle_Init+0x74>)
 800374c:	2200      	movs	r2, #0
 800374e:	80da      	strh	r2, [r3, #6]
	ParticleDevice.u16stDev = 0;
 8003750:	4b13      	ldr	r3, [pc, #76]	; (80037a0 <Particle_Init+0x74>)
 8003752:	2200      	movs	r2, #0
 8003754:	811a      	strh	r2, [r3, #8]
	ParticleDevice.u16temperature = 0;
 8003756:	4b12      	ldr	r3, [pc, #72]	; (80037a0 <Particle_Init+0x74>)
 8003758:	2200      	movs	r2, #0
 800375a:	815a      	strh	r2, [r3, #10]
	ParticleDevice.fLED_current_meas = 0;
 800375c:	4b10      	ldr	r3, [pc, #64]	; (80037a0 <Particle_Init+0x74>)
 800375e:	f04f 0200 	mov.w	r2, #0
 8003762:	61da      	str	r2, [r3, #28]
	ParticleDevice.fslope = 0;
 8003764:	4b0e      	ldr	r3, [pc, #56]	; (80037a0 <Particle_Init+0x74>)
 8003766:	f04f 0200 	mov.w	r2, #0
 800376a:	619a      	str	r2, [r3, #24]
	ParticleDevice.u16Lux_ON = 0;
 800376c:	4b0c      	ldr	r3, [pc, #48]	; (80037a0 <Particle_Init+0x74>)
 800376e:	2200      	movs	r2, #0
 8003770:	841a      	strh	r2, [r3, #32]
	ParticleDevice.u16Lux_OFF = 0;
 8003772:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <Particle_Init+0x74>)
 8003774:	2200      	movs	r2, #0
 8003776:	845a      	strh	r2, [r3, #34]	; 0x22
	ParticleDevice.u16TimeSinceInit = 0;
 8003778:	4b09      	ldr	r3, [pc, #36]	; (80037a0 <Particle_Init+0x74>)
 800377a:	2200      	movs	r2, #0
 800377c:	625a      	str	r2, [r3, #36]	; 0x24
	ParticleDevice.u16Last_particle_time = 0;
 800377e:	4b08      	ldr	r3, [pc, #32]	; (80037a0 <Particle_Init+0x74>)
 8003780:	2200      	movs	r2, #0
 8003782:	629a      	str	r2, [r3, #40]	; 0x28
	ParticleDevice.fnormalized_zero = 80.0;
 8003784:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <Particle_Init+0x74>)
 8003786:	4a07      	ldr	r2, [pc, #28]	; (80037a4 <Particle_Init+0x78>)
 8003788:	611a      	str	r2, [r3, #16]

	currentState = Idle;
 800378a:	4b07      	ldr	r3, [pc, #28]	; (80037a8 <Particle_Init+0x7c>)
 800378c:	2200      	movs	r2, #0
 800378e:	701a      	strb	r2, [r3, #0]
	nextState = Idle;
 8003790:	4b06      	ldr	r3, [pc, #24]	; (80037ac <Particle_Init+0x80>)
 8003792:	2200      	movs	r2, #0
 8003794:	701a      	strb	r2, [r3, #0]
}
 8003796:	bf00      	nop
 8003798:	46bd      	mov	sp, r7
 800379a:	bc80      	pop	{r7}
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	20000f4c 	.word	0x20000f4c
 80037a4:	42a00000 	.word	0x42a00000
 80037a8:	20000ef4 	.word	0x20000ef4
 80037ac:	20000ef5 	.word	0x20000ef5

080037b0 <ParticlesManager>:

void ParticlesManager(uint32_t u32Time_ms)
{
 80037b0:	b590      	push	{r4, r7, lr}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
	static uint16_t tx_checksum, rx_checksum;
	static uint8_t rx_payload_size, tx_size;
	static uint32_t response_delay = 800;
	static uint8_t request_interval = TIME_TO_WAIT_IF_OK;
	static uint32_t u32LastReqTime = 0;
	int slp_sign = 1;
 80037b8:	2301      	movs	r3, #1
 80037ba:	60fb      	str	r3, [r7, #12]


	switch(currentState)
 80037bc:	4b9e      	ldr	r3, [pc, #632]	; (8003a38 <ParticlesManager+0x288>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b04      	cmp	r3, #4
 80037c2:	f200 8269 	bhi.w	8003c98 <ParticlesManager+0x4e8>
 80037c6:	a201      	add	r2, pc, #4	; (adr r2, 80037cc <ParticlesManager+0x1c>)
 80037c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037cc:	080037e1 	.word	0x080037e1
 80037d0:	080038f7 	.word	0x080038f7
 80037d4:	0800393b 	.word	0x0800393b
 80037d8:	080039af 	.word	0x080039af
 80037dc:	08003a91 	.word	0x08003a91
	{
	case Idle:
		if(u32Time_ms - u32LastReqTime > SECONDS(request_interval))
 80037e0:	4b96      	ldr	r3, [pc, #600]	; (8003a3c <ParticlesManager+0x28c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	4a95      	ldr	r2, [pc, #596]	; (8003a40 <ParticlesManager+0x290>)
 80037ea:	7812      	ldrb	r2, [r2, #0]
 80037ec:	4611      	mov	r1, r2
 80037ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037f2:	fb02 f201 	mul.w	r2, r2, r1
 80037f6:	4293      	cmp	r3, r2
 80037f8:	f240 824b 	bls.w	8003c92 <ParticlesManager+0x4e2>
		{
			//GC 2023-07-19 debug
			if(config_mode)
 80037fc:	4b91      	ldr	r3, [pc, #580]	; (8003a44 <ParticlesManager+0x294>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d040      	beq.n	8003886 <ParticlesManager+0xd6>
			{
				//Test unitaire - WRITE CMD
				TX_BUFFER[0] = START_BYTE;
 8003804:	4b90      	ldr	r3, [pc, #576]	; (8003a48 <ParticlesManager+0x298>)
 8003806:	22cc      	movs	r2, #204	; 0xcc
 8003808:	701a      	strb	r2, [r3, #0]
				TX_BUFFER[1] = WRITE_CMD | 0x04; //Attention, devrait etre 0x05, updater aussi PF_VvalidatateConfig
 800380a:	4b8f      	ldr	r3, [pc, #572]	; (8003a48 <ParticlesManager+0x298>)
 800380c:	22c4      	movs	r2, #196	; 0xc4
 800380e:	705a      	strb	r2, [r3, #1]
				tx_checksum = TX_BUFFER[1];
 8003810:	4b8d      	ldr	r3, [pc, #564]	; (8003a48 <ParticlesManager+0x298>)
 8003812:	785b      	ldrb	r3, [r3, #1]
 8003814:	b29a      	uxth	r2, r3
 8003816:	4b8d      	ldr	r3, [pc, #564]	; (8003a4c <ParticlesManager+0x29c>)
 8003818:	801a      	strh	r2, [r3, #0]
				TX_BUFFER[2] = 3;//(uint8_t)pParam->s32TLSGAIN;
 800381a:	4b8b      	ldr	r3, [pc, #556]	; (8003a48 <ParticlesManager+0x298>)
 800381c:	2203      	movs	r2, #3
 800381e:	709a      	strb	r2, [r3, #2]
				TX_BUFFER[3] = 5;//(uint8_t)pParam->s32TSLINT;
 8003820:	4b89      	ldr	r3, [pc, #548]	; (8003a48 <ParticlesManager+0x298>)
 8003822:	2205      	movs	r2, #5
 8003824:	70da      	strb	r2, [r3, #3]
				TX_BUFFER[4] = 7;//(uint8_t)pParam->s32DACCMD;
 8003826:	4b88      	ldr	r3, [pc, #544]	; (8003a48 <ParticlesManager+0x298>)
 8003828:	2207      	movs	r2, #7
 800382a:	711a      	strb	r2, [r3, #4]
				TX_BUFFER[5] = 10;//(uint8_t)pParam->s32TIMEINTERVAL;  //GC Attention, devrait être un WORD (2 byte)
 800382c:	4b86      	ldr	r3, [pc, #536]	; (8003a48 <ParticlesManager+0x298>)
 800382e:	220a      	movs	r2, #10
 8003830:	715a      	strb	r2, [r3, #5]
				//TX_BUFFER[6] = 0;//(uint8_t)pParam->s32TIMEINTERVAL;  //GC Attention, devrait être un WORD (2 byte)
				for(uint8_t j = 2;j < 6;j++)
 8003832:	2302      	movs	r3, #2
 8003834:	72fb      	strb	r3, [r7, #11]
 8003836:	e00c      	b.n	8003852 <ParticlesManager+0xa2>
				{
					tx_checksum += TX_BUFFER[j];
 8003838:	7afb      	ldrb	r3, [r7, #11]
 800383a:	4a83      	ldr	r2, [pc, #524]	; (8003a48 <ParticlesManager+0x298>)
 800383c:	5cd3      	ldrb	r3, [r2, r3]
 800383e:	b29a      	uxth	r2, r3
 8003840:	4b82      	ldr	r3, [pc, #520]	; (8003a4c <ParticlesManager+0x29c>)
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	4413      	add	r3, r2
 8003846:	b29a      	uxth	r2, r3
 8003848:	4b80      	ldr	r3, [pc, #512]	; (8003a4c <ParticlesManager+0x29c>)
 800384a:	801a      	strh	r2, [r3, #0]
				for(uint8_t j = 2;j < 6;j++)
 800384c:	7afb      	ldrb	r3, [r7, #11]
 800384e:	3301      	adds	r3, #1
 8003850:	72fb      	strb	r3, [r7, #11]
 8003852:	7afb      	ldrb	r3, [r7, #11]
 8003854:	2b05      	cmp	r3, #5
 8003856:	d9ef      	bls.n	8003838 <ParticlesManager+0x88>
				}
				TX_BUFFER[6] = (uint8_t)(tx_checksum >> 8);
 8003858:	4b7c      	ldr	r3, [pc, #496]	; (8003a4c <ParticlesManager+0x29c>)
 800385a:	881b      	ldrh	r3, [r3, #0]
 800385c:	0a1b      	lsrs	r3, r3, #8
 800385e:	b29b      	uxth	r3, r3
 8003860:	b2da      	uxtb	r2, r3
 8003862:	4b79      	ldr	r3, [pc, #484]	; (8003a48 <ParticlesManager+0x298>)
 8003864:	719a      	strb	r2, [r3, #6]
				TX_BUFFER[7] = (uint8_t)(tx_checksum & 0x00FF);
 8003866:	4b79      	ldr	r3, [pc, #484]	; (8003a4c <ParticlesManager+0x29c>)
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	b2da      	uxtb	r2, r3
 800386c:	4b76      	ldr	r3, [pc, #472]	; (8003a48 <ParticlesManager+0x298>)
 800386e:	71da      	strb	r2, [r3, #7]
				TX_BUFFER[8] = STOP_BYTE;
 8003870:	4b75      	ldr	r3, [pc, #468]	; (8003a48 <ParticlesManager+0x298>)
 8003872:	2299      	movs	r2, #153	; 0x99
 8003874:	721a      	strb	r2, [r3, #8]
				tx_size = 9;
 8003876:	4b76      	ldr	r3, [pc, #472]	; (8003a50 <ParticlesManager+0x2a0>)
 8003878:	2209      	movs	r2, #9
 800387a:	701a      	strb	r2, [r3, #0]
				response_delay = 600;
 800387c:	4b75      	ldr	r3, [pc, #468]	; (8003a54 <ParticlesManager+0x2a4>)
 800387e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	e033      	b.n	80038ee <ParticlesManager+0x13e>
			}else if(IncFireCount)
 8003886:	4b74      	ldr	r3, [pc, #464]	; (8003a58 <ParticlesManager+0x2a8>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00e      	beq.n	80038ac <ParticlesManager+0xfc>
			{
				//Test unitaire - FIRECNT_CMD
				tx_checksum = Particle_Send_CMD(FIRECNT_CMD);
 800388e:	2080      	movs	r0, #128	; 0x80
 8003890:	f000 fa20 	bl	8003cd4 <Particle_Send_CMD>
 8003894:	4603      	mov	r3, r0
 8003896:	461a      	mov	r2, r3
 8003898:	4b6c      	ldr	r3, [pc, #432]	; (8003a4c <ParticlesManager+0x29c>)
 800389a:	801a      	strh	r2, [r3, #0]
				tx_size = 5;
 800389c:	4b6c      	ldr	r3, [pc, #432]	; (8003a50 <ParticlesManager+0x2a0>)
 800389e:	2205      	movs	r2, #5
 80038a0:	701a      	strb	r2, [r3, #0]
				response_delay = 600;
 80038a2:	4b6c      	ldr	r3, [pc, #432]	; (8003a54 <ParticlesManager+0x2a4>)
 80038a4:	f44f 7216 	mov.w	r2, #600	; 0x258
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	e020      	b.n	80038ee <ParticlesManager+0x13e>
			}else if(setZero)
 80038ac:	4b6b      	ldr	r3, [pc, #428]	; (8003a5c <ParticlesManager+0x2ac>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00e      	beq.n	80038d2 <ParticlesManager+0x122>
			{
				//Test unitaire - SETZERO CMD
				tx_checksum = Particle_Send_CMD(SETZERO_CMD);
 80038b4:	2040      	movs	r0, #64	; 0x40
 80038b6:	f000 fa0d 	bl	8003cd4 <Particle_Send_CMD>
 80038ba:	4603      	mov	r3, r0
 80038bc:	461a      	mov	r2, r3
 80038be:	4b63      	ldr	r3, [pc, #396]	; (8003a4c <ParticlesManager+0x29c>)
 80038c0:	801a      	strh	r2, [r3, #0]
				tx_size = 5;
 80038c2:	4b63      	ldr	r3, [pc, #396]	; (8003a50 <ParticlesManager+0x2a0>)
 80038c4:	2205      	movs	r2, #5
 80038c6:	701a      	strb	r2, [r3, #0]
				response_delay = 600;
 80038c8:	4b62      	ldr	r3, [pc, #392]	; (8003a54 <ParticlesManager+0x2a4>)
 80038ca:	f44f 7216 	mov.w	r2, #600	; 0x258
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	e00d      	b.n	80038ee <ParticlesManager+0x13e>

			}else{

				//Test unitaire - READ_CMD
				tx_checksum = Particle_Send_CMD(READ_CMD);
 80038d2:	2000      	movs	r0, #0
 80038d4:	f000 f9fe 	bl	8003cd4 <Particle_Send_CMD>
 80038d8:	4603      	mov	r3, r0
 80038da:	461a      	mov	r2, r3
 80038dc:	4b5b      	ldr	r3, [pc, #364]	; (8003a4c <ParticlesManager+0x29c>)
 80038de:	801a      	strh	r2, [r3, #0]
				tx_size = 5;
 80038e0:	4b5b      	ldr	r3, [pc, #364]	; (8003a50 <ParticlesManager+0x2a0>)
 80038e2:	2205      	movs	r2, #5
 80038e4:	701a      	strb	r2, [r3, #0]
				response_delay = 800;
 80038e6:	4b5b      	ldr	r3, [pc, #364]	; (8003a54 <ParticlesManager+0x2a4>)
 80038e8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80038ec:	601a      	str	r2, [r3, #0]
				//TX_BUFFER[3] = (uint8_t)(tx_checksum & 0x00FF);
				//TX_BUFFER[4] = STOP_BYTE;
				//tx_size = 5;
				//response_delay = 800;
			}
			nextState = Send_request;
 80038ee:	4b5c      	ldr	r3, [pc, #368]	; (8003a60 <ParticlesManager+0x2b0>)
 80038f0:	2201      	movs	r2, #1
 80038f2:	701a      	strb	r2, [r3, #0]
		}
		break;
 80038f4:	e1cd      	b.n	8003c92 <ParticlesManager+0x4e2>
	case Send_request:
		if(uartErrorCount > COMM_ERR_LIMIT && request_interval !=TIME_TO_WAIT_IF_ERR)
 80038f6:	4b5b      	ldr	r3, [pc, #364]	; (8003a64 <ParticlesManager+0x2b4>)
 80038f8:	881b      	ldrh	r3, [r3, #0]
 80038fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038fe:	d90a      	bls.n	8003916 <ParticlesManager+0x166>
 8003900:	4b4f      	ldr	r3, [pc, #316]	; (8003a40 <ParticlesManager+0x290>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	2b1e      	cmp	r3, #30
 8003906:	d006      	beq.n	8003916 <ParticlesManager+0x166>
		{
			request_interval = TIME_TO_WAIT_IF_ERR;
 8003908:	4b4d      	ldr	r3, [pc, #308]	; (8003a40 <ParticlesManager+0x290>)
 800390a:	221e      	movs	r2, #30
 800390c:	701a      	strb	r2, [r3, #0]
			nextState = Idle;
 800390e:	4b54      	ldr	r3, [pc, #336]	; (8003a60 <ParticlesManager+0x2b0>)
 8003910:	2200      	movs	r2, #0
 8003912:	701a      	strb	r2, [r3, #0]
			break;
 8003914:	e1c0      	b.n	8003c98 <ParticlesManager+0x4e8>
		}


		HAL_UART_Transmit_IT(&huart3, TX_BUFFER, tx_size);
 8003916:	4b4e      	ldr	r3, [pc, #312]	; (8003a50 <ParticlesManager+0x2a0>)
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	b29b      	uxth	r3, r3
 800391c:	461a      	mov	r2, r3
 800391e:	494a      	ldr	r1, [pc, #296]	; (8003a48 <ParticlesManager+0x298>)
 8003920:	4851      	ldr	r0, [pc, #324]	; (8003a68 <ParticlesManager+0x2b8>)
 8003922:	f007 f837 	bl	800a994 <HAL_UART_Transmit_IT>
		RX_BUFFER[0] = 0;
 8003926:	4b51      	ldr	r3, [pc, #324]	; (8003a6c <ParticlesManager+0x2bc>)
 8003928:	2200      	movs	r2, #0
 800392a:	701a      	strb	r2, [r3, #0]
		u32LastReqTime = u32Time_ms;
 800392c:	4a43      	ldr	r2, [pc, #268]	; (8003a3c <ParticlesManager+0x28c>)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6013      	str	r3, [r2, #0]
		nextState = Request_sent;
 8003932:	4b4b      	ldr	r3, [pc, #300]	; (8003a60 <ParticlesManager+0x2b0>)
 8003934:	2202      	movs	r2, #2
 8003936:	701a      	strb	r2, [r3, #0]
		break;
 8003938:	e1ae      	b.n	8003c98 <ParticlesManager+0x4e8>
	case Request_sent:
		HAL_UARTEx_ReceiveToIdle_IT(&huart3, RX_BUFFER,RX_BUFFER_LENGTH);
 800393a:	2240      	movs	r2, #64	; 0x40
 800393c:	494b      	ldr	r1, [pc, #300]	; (8003a6c <ParticlesManager+0x2bc>)
 800393e:	484a      	ldr	r0, [pc, #296]	; (8003a68 <ParticlesManager+0x2b8>)
 8003940:	f007 f86c 	bl	800aa1c <HAL_UARTEx_ReceiveToIdle_IT>
		if(RX_BUFFER[0] == START_BYTE)
 8003944:	4b49      	ldr	r3, [pc, #292]	; (8003a6c <ParticlesManager+0x2bc>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2bcc      	cmp	r3, #204	; 0xcc
 800394a:	d114      	bne.n	8003976 <ParticlesManager+0x1c6>
		{
			rx_payload_size = RX_BUFFER[1] & 0x3F;
 800394c:	4b47      	ldr	r3, [pc, #284]	; (8003a6c <ParticlesManager+0x2bc>)
 800394e:	785b      	ldrb	r3, [r3, #1]
 8003950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003954:	b2da      	uxtb	r2, r3
 8003956:	4b46      	ldr	r3, [pc, #280]	; (8003a70 <ParticlesManager+0x2c0>)
 8003958:	701a      	strb	r2, [r3, #0]

			if(rx_payload_size != 0 && RX_BUFFER[rx_payload_size + 4] == STOP_BYTE)
 800395a:	4b45      	ldr	r3, [pc, #276]	; (8003a70 <ParticlesManager+0x2c0>)
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d009      	beq.n	8003976 <ParticlesManager+0x1c6>
 8003962:	4b43      	ldr	r3, [pc, #268]	; (8003a70 <ParticlesManager+0x2c0>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	3304      	adds	r3, #4
 8003968:	4a40      	ldr	r2, [pc, #256]	; (8003a6c <ParticlesManager+0x2bc>)
 800396a:	5cd3      	ldrb	r3, [r2, r3]
 800396c:	2b99      	cmp	r3, #153	; 0x99
 800396e:	d102      	bne.n	8003976 <ParticlesManager+0x1c6>
			{
				nextState = Validate_data;
 8003970:	4b3b      	ldr	r3, [pc, #236]	; (8003a60 <ParticlesManager+0x2b0>)
 8003972:	2203      	movs	r2, #3
 8003974:	701a      	strb	r2, [r3, #0]
			}

		}

		if(u32Time_ms - u32LastReqTime > response_delay)
 8003976:	4b31      	ldr	r3, [pc, #196]	; (8003a3c <ParticlesManager+0x28c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	1ad2      	subs	r2, r2, r3
 800397e:	4b35      	ldr	r3, [pc, #212]	; (8003a54 <ParticlesManager+0x2a4>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	429a      	cmp	r2, r3
 8003984:	f240 8187 	bls.w	8003c96 <ParticlesManager+0x4e6>
		{
			if(uartErrorCount <= COMM_ERR_LIMIT)
 8003988:	4b36      	ldr	r3, [pc, #216]	; (8003a64 <ParticlesManager+0x2b4>)
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003990:	d803      	bhi.n	800399a <ParticlesManager+0x1ea>
			{
				nextState = Send_request;
 8003992:	4b33      	ldr	r3, [pc, #204]	; (8003a60 <ParticlesManager+0x2b0>)
 8003994:	2201      	movs	r2, #1
 8003996:	701a      	strb	r2, [r3, #0]
 8003998:	e002      	b.n	80039a0 <ParticlesManager+0x1f0>
			}else
			{
				nextState = Idle;
 800399a:	4b31      	ldr	r3, [pc, #196]	; (8003a60 <ParticlesManager+0x2b0>)
 800399c:	2200      	movs	r2, #0
 800399e:	701a      	strb	r2, [r3, #0]
			}
			uartErrorCount++;
 80039a0:	4b30      	ldr	r3, [pc, #192]	; (8003a64 <ParticlesManager+0x2b4>)
 80039a2:	881b      	ldrh	r3, [r3, #0]
 80039a4:	3301      	adds	r3, #1
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	4b2e      	ldr	r3, [pc, #184]	; (8003a64 <ParticlesManager+0x2b4>)
 80039aa:	801a      	strh	r2, [r3, #0]

		}

		break;
 80039ac:	e173      	b.n	8003c96 <ParticlesManager+0x4e6>
	case Validate_data:
		rx_checksum = RX_BUFFER[1];
 80039ae:	4b2f      	ldr	r3, [pc, #188]	; (8003a6c <ParticlesManager+0x2bc>)
 80039b0:	785b      	ldrb	r3, [r3, #1]
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	4b2f      	ldr	r3, [pc, #188]	; (8003a74 <ParticlesManager+0x2c4>)
 80039b6:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 2;i <= rx_payload_size+1;i++)
 80039b8:	2302      	movs	r3, #2
 80039ba:	72bb      	strb	r3, [r7, #10]
 80039bc:	e00c      	b.n	80039d8 <ParticlesManager+0x228>
		{
			rx_checksum += RX_BUFFER[i];
 80039be:	7abb      	ldrb	r3, [r7, #10]
 80039c0:	4a2a      	ldr	r2, [pc, #168]	; (8003a6c <ParticlesManager+0x2bc>)
 80039c2:	5cd3      	ldrb	r3, [r2, r3]
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	4b2b      	ldr	r3, [pc, #172]	; (8003a74 <ParticlesManager+0x2c4>)
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	4413      	add	r3, r2
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	4b29      	ldr	r3, [pc, #164]	; (8003a74 <ParticlesManager+0x2c4>)
 80039d0:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 2;i <= rx_payload_size+1;i++)
 80039d2:	7abb      	ldrb	r3, [r7, #10]
 80039d4:	3301      	adds	r3, #1
 80039d6:	72bb      	strb	r3, [r7, #10]
 80039d8:	7aba      	ldrb	r2, [r7, #10]
 80039da:	4b25      	ldr	r3, [pc, #148]	; (8003a70 <ParticlesManager+0x2c0>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	3301      	adds	r3, #1
 80039e0:	429a      	cmp	r2, r3
 80039e2:	ddec      	ble.n	80039be <ParticlesManager+0x20e>
		}

		if(rx_checksum == ((uint16_t)(RX_BUFFER[rx_payload_size+2] << 8) + (uint16_t)RX_BUFFER[rx_payload_size+3]))
 80039e4:	4b23      	ldr	r3, [pc, #140]	; (8003a74 <ParticlesManager+0x2c4>)
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	4619      	mov	r1, r3
 80039ea:	4b21      	ldr	r3, [pc, #132]	; (8003a70 <ParticlesManager+0x2c0>)
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	3302      	adds	r3, #2
 80039f0:	4a1e      	ldr	r2, [pc, #120]	; (8003a6c <ParticlesManager+0x2bc>)
 80039f2:	5cd3      	ldrb	r3, [r2, r3]
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	021b      	lsls	r3, r3, #8
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	4618      	mov	r0, r3
 80039fc:	4b1c      	ldr	r3, [pc, #112]	; (8003a70 <ParticlesManager+0x2c0>)
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	3303      	adds	r3, #3
 8003a02:	4a1a      	ldr	r2, [pc, #104]	; (8003a6c <ParticlesManager+0x2bc>)
 8003a04:	5cd3      	ldrb	r3, [r2, r3]
 8003a06:	4403      	add	r3, r0
 8003a08:	4299      	cmp	r1, r3
 8003a0a:	d10c      	bne.n	8003a26 <ParticlesManager+0x276>
		{
			particleBoardAbsent = false;
 8003a0c:	4b1a      	ldr	r3, [pc, #104]	; (8003a78 <ParticlesManager+0x2c8>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	701a      	strb	r2, [r3, #0]
			request_interval = TIME_TO_WAIT_IF_OK;
 8003a12:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <ParticlesManager+0x290>)
 8003a14:	2202      	movs	r2, #2
 8003a16:	701a      	strb	r2, [r3, #0]
			uartErrorCount = 0;
 8003a18:	4b12      	ldr	r3, [pc, #72]	; (8003a64 <ParticlesManager+0x2b4>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	801a      	strh	r2, [r3, #0]
			nextState = Data_ready;
 8003a1e:	4b10      	ldr	r3, [pc, #64]	; (8003a60 <ParticlesManager+0x2b0>)
 8003a20:	2204      	movs	r2, #4
 8003a22:	701a      	strb	r2, [r3, #0]
			{
				nextState = Idle;
			}
			uartErrorCount++;
		}
		break;
 8003a24:	e138      	b.n	8003c98 <ParticlesManager+0x4e8>
			if(uartErrorCount <= COMM_ERR_LIMIT)
 8003a26:	4b0f      	ldr	r3, [pc, #60]	; (8003a64 <ParticlesManager+0x2b4>)
 8003a28:	881b      	ldrh	r3, [r3, #0]
 8003a2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a2e:	d825      	bhi.n	8003a7c <ParticlesManager+0x2cc>
				nextState = Send_request;
 8003a30:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <ParticlesManager+0x2b0>)
 8003a32:	2201      	movs	r2, #1
 8003a34:	701a      	strb	r2, [r3, #0]
 8003a36:	e024      	b.n	8003a82 <ParticlesManager+0x2d2>
 8003a38:	20000ef4 	.word	0x20000ef4
 8003a3c:	20000f7c 	.word	0x20000f7c
 8003a40:	20000048 	.word	0x20000048
 8003a44:	20000f79 	.word	0x20000f79
 8003a48:	20000f38 	.word	0x20000f38
 8003a4c:	20000f80 	.word	0x20000f80
 8003a50:	20000f82 	.word	0x20000f82
 8003a54:	2000004c 	.word	0x2000004c
 8003a58:	20000f7b 	.word	0x20000f7b
 8003a5c:	20000f7a 	.word	0x20000f7a
 8003a60:	20000ef5 	.word	0x20000ef5
 8003a64:	20000f84 	.word	0x20000f84
 8003a68:	20003928 	.word	0x20003928
 8003a6c:	20000ef8 	.word	0x20000ef8
 8003a70:	20000f86 	.word	0x20000f86
 8003a74:	20000f88 	.word	0x20000f88
 8003a78:	20000f78 	.word	0x20000f78
				nextState = Idle;
 8003a7c:	4b8d      	ldr	r3, [pc, #564]	; (8003cb4 <ParticlesManager+0x504>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	701a      	strb	r2, [r3, #0]
			uartErrorCount++;
 8003a82:	4b8d      	ldr	r3, [pc, #564]	; (8003cb8 <ParticlesManager+0x508>)
 8003a84:	881b      	ldrh	r3, [r3, #0]
 8003a86:	3301      	adds	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	4b8b      	ldr	r3, [pc, #556]	; (8003cb8 <ParticlesManager+0x508>)
 8003a8c:	801a      	strh	r2, [r3, #0]
		break;
 8003a8e:	e103      	b.n	8003c98 <ParticlesManager+0x4e8>
	case Data_ready:
		nextState = Idle;
 8003a90:	4b88      	ldr	r3, [pc, #544]	; (8003cb4 <ParticlesManager+0x504>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	701a      	strb	r2, [r3, #0]
		if((RX_BUFFER[1] & 0xC0) == READ_CMD)
 8003a96:	4b89      	ldr	r3, [pc, #548]	; (8003cbc <ParticlesManager+0x50c>)
 8003a98:	785b      	ldrb	r3, [r3, #1]
 8003a9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f040 80c4 	bne.w	8003c2c <ParticlesManager+0x47c>
		{
			ParticleDevice.u16ch0_ON = (uint16_t)(RX_BUFFER[2] << 8) + (uint16_t)RX_BUFFER[3];
 8003aa4:	4b85      	ldr	r3, [pc, #532]	; (8003cbc <ParticlesManager+0x50c>)
 8003aa6:	789b      	ldrb	r3, [r3, #2]
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	021b      	lsls	r3, r3, #8
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	4b83      	ldr	r3, [pc, #524]	; (8003cbc <ParticlesManager+0x50c>)
 8003ab0:	78db      	ldrb	r3, [r3, #3]
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	4413      	add	r3, r2
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	4b81      	ldr	r3, [pc, #516]	; (8003cc0 <ParticlesManager+0x510>)
 8003aba:	801a      	strh	r2, [r3, #0]
			ParticleDevice.u16ch0_OFF = (uint16_t)(RX_BUFFER[4] << 8) + (uint16_t)RX_BUFFER[5];
 8003abc:	4b7f      	ldr	r3, [pc, #508]	; (8003cbc <ParticlesManager+0x50c>)
 8003abe:	791b      	ldrb	r3, [r3, #4]
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	021b      	lsls	r3, r3, #8
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	4b7d      	ldr	r3, [pc, #500]	; (8003cbc <ParticlesManager+0x50c>)
 8003ac8:	795b      	ldrb	r3, [r3, #5]
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	4413      	add	r3, r2
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	4b7b      	ldr	r3, [pc, #492]	; (8003cc0 <ParticlesManager+0x510>)
 8003ad2:	805a      	strh	r2, [r3, #2]
			ParticleDevice.u16ch1_ON = (uint16_t)(RX_BUFFER[6] << 8) + (uint16_t)RX_BUFFER[7];
 8003ad4:	4b79      	ldr	r3, [pc, #484]	; (8003cbc <ParticlesManager+0x50c>)
 8003ad6:	799b      	ldrb	r3, [r3, #6]
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	021b      	lsls	r3, r3, #8
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	4b77      	ldr	r3, [pc, #476]	; (8003cbc <ParticlesManager+0x50c>)
 8003ae0:	79db      	ldrb	r3, [r3, #7]
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	4413      	add	r3, r2
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	4b75      	ldr	r3, [pc, #468]	; (8003cc0 <ParticlesManager+0x510>)
 8003aea:	809a      	strh	r2, [r3, #4]
			ParticleDevice.u16ch1_OFF = (uint16_t)(RX_BUFFER[8] << 8) + (uint16_t)RX_BUFFER[9];
 8003aec:	4b73      	ldr	r3, [pc, #460]	; (8003cbc <ParticlesManager+0x50c>)
 8003aee:	7a1b      	ldrb	r3, [r3, #8]
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	021b      	lsls	r3, r3, #8
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	4b71      	ldr	r3, [pc, #452]	; (8003cbc <ParticlesManager+0x50c>)
 8003af8:	7a5b      	ldrb	r3, [r3, #9]
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	4413      	add	r3, r2
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	4b6f      	ldr	r3, [pc, #444]	; (8003cc0 <ParticlesManager+0x510>)
 8003b02:	80da      	strh	r2, [r3, #6]
			ParticleDevice.u16stDev = (uint16_t)(RX_BUFFER[10] << 8) + (uint16_t)RX_BUFFER[11];
 8003b04:	4b6d      	ldr	r3, [pc, #436]	; (8003cbc <ParticlesManager+0x50c>)
 8003b06:	7a9b      	ldrb	r3, [r3, #10]
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	021b      	lsls	r3, r3, #8
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	4b6b      	ldr	r3, [pc, #428]	; (8003cbc <ParticlesManager+0x50c>)
 8003b10:	7adb      	ldrb	r3, [r3, #11]
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	4413      	add	r3, r2
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	4b69      	ldr	r3, [pc, #420]	; (8003cc0 <ParticlesManager+0x510>)
 8003b1a:	811a      	strh	r2, [r3, #8]
			ParticleDevice.u16temperature = (uint16_t)(RX_BUFFER[12] << 8) + (uint16_t)RX_BUFFER[13];
 8003b1c:	4b67      	ldr	r3, [pc, #412]	; (8003cbc <ParticlesManager+0x50c>)
 8003b1e:	7b1b      	ldrb	r3, [r3, #12]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	021b      	lsls	r3, r3, #8
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	4b65      	ldr	r3, [pc, #404]	; (8003cbc <ParticlesManager+0x50c>)
 8003b28:	7b5b      	ldrb	r3, [r3, #13]
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	4413      	add	r3, r2
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	4b63      	ldr	r3, [pc, #396]	; (8003cc0 <ParticlesManager+0x510>)
 8003b32:	815a      	strh	r2, [r3, #10]
			ParticleDevice.fLED_current_meas = P2F1DEC(((uint16_t)(RX_BUFFER[14] << 8) + (uint16_t)RX_BUFFER[15]));
 8003b34:	4b61      	ldr	r3, [pc, #388]	; (8003cbc <ParticlesManager+0x50c>)
 8003b36:	7b9b      	ldrb	r3, [r3, #14]
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	021b      	lsls	r3, r3, #8
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	461a      	mov	r2, r3
 8003b40:	4b5e      	ldr	r3, [pc, #376]	; (8003cbc <ParticlesManager+0x50c>)
 8003b42:	7bdb      	ldrb	r3, [r3, #15]
 8003b44:	4413      	add	r3, r2
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7fd f922 	bl	8000d90 <__aeabi_i2f>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	495d      	ldr	r1, [pc, #372]	; (8003cc4 <ParticlesManager+0x514>)
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7fd fa25 	bl	8000fa0 <__aeabi_fdiv>
 8003b56:	4603      	mov	r3, r0
 8003b58:	461a      	mov	r2, r3
 8003b5a:	4b59      	ldr	r3, [pc, #356]	; (8003cc0 <ParticlesManager+0x510>)
 8003b5c:	61da      	str	r2, [r3, #28]

			if(RX_BUFFER[16] & 0x80)
 8003b5e:	4b57      	ldr	r3, [pc, #348]	; (8003cbc <ParticlesManager+0x50c>)
 8003b60:	7c1b      	ldrb	r3, [r3, #16]
 8003b62:	b25b      	sxtb	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	da09      	bge.n	8003b7c <ParticlesManager+0x3cc>
			{
				RX_BUFFER[16] &= 0x7F;
 8003b68:	4b54      	ldr	r3, [pc, #336]	; (8003cbc <ParticlesManager+0x50c>)
 8003b6a:	7c1b      	ldrb	r3, [r3, #16]
 8003b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b70:	b2da      	uxtb	r2, r3
 8003b72:	4b52      	ldr	r3, [pc, #328]	; (8003cbc <ParticlesManager+0x50c>)
 8003b74:	741a      	strb	r2, [r3, #16]
				slp_sign = -1;
 8003b76:	f04f 33ff 	mov.w	r3, #4294967295
 8003b7a:	60fb      	str	r3, [r7, #12]
			}
			ParticleDevice.fslope = P2F1DEC(slp_sign*((int)(RX_BUFFER[16] << 8) + (int)(uint8_t)RX_BUFFER[17]));
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f7fd f907 	bl	8000d90 <__aeabi_i2f>
 8003b82:	4604      	mov	r4, r0
 8003b84:	4b4d      	ldr	r3, [pc, #308]	; (8003cbc <ParticlesManager+0x50c>)
 8003b86:	7c1b      	ldrb	r3, [r3, #16]
 8003b88:	021b      	lsls	r3, r3, #8
 8003b8a:	4a4c      	ldr	r2, [pc, #304]	; (8003cbc <ParticlesManager+0x50c>)
 8003b8c:	7c52      	ldrb	r2, [r2, #17]
 8003b8e:	4413      	add	r3, r2
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7fd f8fd 	bl	8000d90 <__aeabi_i2f>
 8003b96:	4603      	mov	r3, r0
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4620      	mov	r0, r4
 8003b9c:	f7fd f94c 	bl	8000e38 <__aeabi_fmul>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	4948      	ldr	r1, [pc, #288]	; (8003cc4 <ParticlesManager+0x514>)
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7fd f9fb 	bl	8000fa0 <__aeabi_fdiv>
 8003baa:	4603      	mov	r3, r0
 8003bac:	461a      	mov	r2, r3
 8003bae:	4b44      	ldr	r3, [pc, #272]	; (8003cc0 <ParticlesManager+0x510>)
 8003bb0:	619a      	str	r2, [r3, #24]
			ParticleDevice.u16Lux_ON = (uint16_t)(RX_BUFFER[18] << 8) + (uint16_t)RX_BUFFER[19];
 8003bb2:	4b42      	ldr	r3, [pc, #264]	; (8003cbc <ParticlesManager+0x50c>)
 8003bb4:	7c9b      	ldrb	r3, [r3, #18]
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	021b      	lsls	r3, r3, #8
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	4b3f      	ldr	r3, [pc, #252]	; (8003cbc <ParticlesManager+0x50c>)
 8003bbe:	7cdb      	ldrb	r3, [r3, #19]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	4b3e      	ldr	r3, [pc, #248]	; (8003cc0 <ParticlesManager+0x510>)
 8003bc8:	841a      	strh	r2, [r3, #32]
			ParticleDevice.u16Lux_OFF = (uint16_t)(RX_BUFFER[20] << 8) + (uint16_t)RX_BUFFER[21];
 8003bca:	4b3c      	ldr	r3, [pc, #240]	; (8003cbc <ParticlesManager+0x50c>)
 8003bcc:	7d1b      	ldrb	r3, [r3, #20]
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	021b      	lsls	r3, r3, #8
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	4b39      	ldr	r3, [pc, #228]	; (8003cbc <ParticlesManager+0x50c>)
 8003bd6:	7d5b      	ldrb	r3, [r3, #21]
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	4413      	add	r3, r2
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	4b38      	ldr	r3, [pc, #224]	; (8003cc0 <ParticlesManager+0x510>)
 8003be0:	845a      	strh	r2, [r3, #34]	; 0x22
			ParticleDevice.u16TimeSinceInit = (uint32_t)(RX_BUFFER[22] << 24) + (uint32_t)(RX_BUFFER[23] << 16) + (uint32_t)(RX_BUFFER[24] << 8) + (uint32_t)(RX_BUFFER[25]);
 8003be2:	4b36      	ldr	r3, [pc, #216]	; (8003cbc <ParticlesManager+0x50c>)
 8003be4:	7d9b      	ldrb	r3, [r3, #22]
 8003be6:	061b      	lsls	r3, r3, #24
 8003be8:	461a      	mov	r2, r3
 8003bea:	4b34      	ldr	r3, [pc, #208]	; (8003cbc <ParticlesManager+0x50c>)
 8003bec:	7ddb      	ldrb	r3, [r3, #23]
 8003bee:	041b      	lsls	r3, r3, #16
 8003bf0:	4413      	add	r3, r2
 8003bf2:	4a32      	ldr	r2, [pc, #200]	; (8003cbc <ParticlesManager+0x50c>)
 8003bf4:	7e12      	ldrb	r2, [r2, #24]
 8003bf6:	0212      	lsls	r2, r2, #8
 8003bf8:	4413      	add	r3, r2
 8003bfa:	4a30      	ldr	r2, [pc, #192]	; (8003cbc <ParticlesManager+0x50c>)
 8003bfc:	7e52      	ldrb	r2, [r2, #25]
 8003bfe:	4413      	add	r3, r2
 8003c00:	4a2f      	ldr	r2, [pc, #188]	; (8003cc0 <ParticlesManager+0x510>)
 8003c02:	6253      	str	r3, [r2, #36]	; 0x24

			ParticleDevice.fparticles = (float)ParticleDevice.u16ch0_ON/ParticleDevice.fLED_current_meas;
 8003c04:	4b2e      	ldr	r3, [pc, #184]	; (8003cc0 <ParticlesManager+0x510>)
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fd f8bd 	bl	8000d88 <__aeabi_ui2f>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	4b2b      	ldr	r3, [pc, #172]	; (8003cc0 <ParticlesManager+0x510>)
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	4619      	mov	r1, r3
 8003c16:	4610      	mov	r0, r2
 8003c18:	f7fd f9c2 	bl	8000fa0 <__aeabi_fdiv>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	461a      	mov	r2, r3
 8003c20:	4b27      	ldr	r3, [pc, #156]	; (8003cc0 <ParticlesManager+0x510>)
 8003c22:	615a      	str	r2, [r3, #20]

			config_mode = false; //GC 2023-07-19 Debug comm
 8003c24:	4b28      	ldr	r3, [pc, #160]	; (8003cc8 <ParticlesManager+0x518>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	701a      	strb	r2, [r3, #0]
			{
				nextState = Idle;
			}
			uartErrorCount++;
		}
		break;
 8003c2a:	e035      	b.n	8003c98 <ParticlesManager+0x4e8>
		}else if((RX_BUFFER[1] & 0xC0) == WRITE_CMD)
 8003c2c:	4b23      	ldr	r3, [pc, #140]	; (8003cbc <ParticlesManager+0x50c>)
 8003c2e:	785b      	ldrb	r3, [r3, #1]
 8003c30:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c34:	2bc0      	cmp	r3, #192	; 0xc0
 8003c36:	d103      	bne.n	8003c40 <ParticlesManager+0x490>
			config_mode = false; //GC 2023-07-19 debug
 8003c38:	4b23      	ldr	r3, [pc, #140]	; (8003cc8 <ParticlesManager+0x518>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	701a      	strb	r2, [r3, #0]
		break;
 8003c3e:	e02b      	b.n	8003c98 <ParticlesManager+0x4e8>
		}else if((RX_BUFFER[1] & 0xC0) == SETZERO_CMD)
 8003c40:	4b1e      	ldr	r3, [pc, #120]	; (8003cbc <ParticlesManager+0x50c>)
 8003c42:	785b      	ldrb	r3, [r3, #1]
 8003c44:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c48:	2b40      	cmp	r3, #64	; 0x40
 8003c4a:	d10f      	bne.n	8003c6c <ParticlesManager+0x4bc>
			setZero = false;
 8003c4c:	4b1f      	ldr	r3, [pc, #124]	; (8003ccc <ParticlesManager+0x51c>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	701a      	strb	r2, [r3, #0]
			ParticleDevice.u16zero = (uint16_t)(RX_BUFFER[4] << 8) + (uint16_t)RX_BUFFER[5];
 8003c52:	4b1a      	ldr	r3, [pc, #104]	; (8003cbc <ParticlesManager+0x50c>)
 8003c54:	791b      	ldrb	r3, [r3, #4]
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	021b      	lsls	r3, r3, #8
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	4b17      	ldr	r3, [pc, #92]	; (8003cbc <ParticlesManager+0x50c>)
 8003c5e:	795b      	ldrb	r3, [r3, #5]
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	4413      	add	r3, r2
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	4b16      	ldr	r3, [pc, #88]	; (8003cc0 <ParticlesManager+0x510>)
 8003c68:	819a      	strh	r2, [r3, #12]
		break;
 8003c6a:	e015      	b.n	8003c98 <ParticlesManager+0x4e8>
			if(uartErrorCount <= COMM_ERR_LIMIT)
 8003c6c:	4b12      	ldr	r3, [pc, #72]	; (8003cb8 <ParticlesManager+0x508>)
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c74:	d803      	bhi.n	8003c7e <ParticlesManager+0x4ce>
				nextState = Send_request;
 8003c76:	4b0f      	ldr	r3, [pc, #60]	; (8003cb4 <ParticlesManager+0x504>)
 8003c78:	2201      	movs	r2, #1
 8003c7a:	701a      	strb	r2, [r3, #0]
 8003c7c:	e002      	b.n	8003c84 <ParticlesManager+0x4d4>
				nextState = Idle;
 8003c7e:	4b0d      	ldr	r3, [pc, #52]	; (8003cb4 <ParticlesManager+0x504>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	701a      	strb	r2, [r3, #0]
			uartErrorCount++;
 8003c84:	4b0c      	ldr	r3, [pc, #48]	; (8003cb8 <ParticlesManager+0x508>)
 8003c86:	881b      	ldrh	r3, [r3, #0]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <ParticlesManager+0x508>)
 8003c8e:	801a      	strh	r2, [r3, #0]
		break;
 8003c90:	e002      	b.n	8003c98 <ParticlesManager+0x4e8>
		break;
 8003c92:	bf00      	nop
 8003c94:	e000      	b.n	8003c98 <ParticlesManager+0x4e8>
		break;
 8003c96:	bf00      	nop
	}
	if(nextState != currentState)
 8003c98:	4b06      	ldr	r3, [pc, #24]	; (8003cb4 <ParticlesManager+0x504>)
 8003c9a:	781a      	ldrb	r2, [r3, #0]
 8003c9c:	4b0c      	ldr	r3, [pc, #48]	; (8003cd0 <ParticlesManager+0x520>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d003      	beq.n	8003cac <ParticlesManager+0x4fc>
	{
		currentState = nextState;
 8003ca4:	4b03      	ldr	r3, [pc, #12]	; (8003cb4 <ParticlesManager+0x504>)
 8003ca6:	781a      	ldrb	r2, [r3, #0]
 8003ca8:	4b09      	ldr	r3, [pc, #36]	; (8003cd0 <ParticlesManager+0x520>)
 8003caa:	701a      	strb	r2, [r3, #0]
	}

}
 8003cac:	bf00      	nop
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd90      	pop	{r4, r7, pc}
 8003cb4:	20000ef5 	.word	0x20000ef5
 8003cb8:	20000f84 	.word	0x20000f84
 8003cbc:	20000ef8 	.word	0x20000ef8
 8003cc0:	20000f4c 	.word	0x20000f4c
 8003cc4:	41200000 	.word	0x41200000
 8003cc8:	20000f79 	.word	0x20000f79
 8003ccc:	20000f7a 	.word	0x20000f7a
 8003cd0:	20000ef4 	.word	0x20000ef4

08003cd4 <Particle_Send_CMD>:
{
	IncFireCount = true;
}

uint16_t Particle_Send_CMD(uint8_t cmd)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	71fb      	strb	r3, [r7, #7]
	static uint16_t tx_checksum;

	TX_BUFFER[0] = START_BYTE;
 8003cde:	4b10      	ldr	r3, [pc, #64]	; (8003d20 <Particle_Send_CMD+0x4c>)
 8003ce0:	22cc      	movs	r2, #204	; 0xcc
 8003ce2:	701a      	strb	r2, [r3, #0]
	TX_BUFFER[1] = cmd;
 8003ce4:	4a0e      	ldr	r2, [pc, #56]	; (8003d20 <Particle_Send_CMD+0x4c>)
 8003ce6:	79fb      	ldrb	r3, [r7, #7]
 8003ce8:	7053      	strb	r3, [r2, #1]
	tx_checksum = cmd;
 8003cea:	79fb      	ldrb	r3, [r7, #7]
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	4b0d      	ldr	r3, [pc, #52]	; (8003d24 <Particle_Send_CMD+0x50>)
 8003cf0:	801a      	strh	r2, [r3, #0]
	TX_BUFFER[2] = (uint8_t)(tx_checksum >> 8);
 8003cf2:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <Particle_Send_CMD+0x50>)
 8003cf4:	881b      	ldrh	r3, [r3, #0]
 8003cf6:	0a1b      	lsrs	r3, r3, #8
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	4b08      	ldr	r3, [pc, #32]	; (8003d20 <Particle_Send_CMD+0x4c>)
 8003cfe:	709a      	strb	r2, [r3, #2]
	TX_BUFFER[3] = (uint8_t)(tx_checksum & 0x00FF);
 8003d00:	4b08      	ldr	r3, [pc, #32]	; (8003d24 <Particle_Send_CMD+0x50>)
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	4b06      	ldr	r3, [pc, #24]	; (8003d20 <Particle_Send_CMD+0x4c>)
 8003d08:	70da      	strb	r2, [r3, #3]
	TX_BUFFER[4] = STOP_BYTE;
 8003d0a:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <Particle_Send_CMD+0x4c>)
 8003d0c:	2299      	movs	r2, #153	; 0x99
 8003d0e:	711a      	strb	r2, [r3, #4]

	return tx_checksum;
 8003d10:	4b04      	ldr	r3, [pc, #16]	; (8003d24 <Particle_Send_CMD+0x50>)
 8003d12:	881b      	ldrh	r3, [r3, #0]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bc80      	pop	{r7}
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	20000f38 	.word	0x20000f38
 8003d24:	20000f8a 	.word	0x20000f8a

08003d28 <ParticlesGetObject>:

const MeasureParticles_t* ParticlesGetObject(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
	return &ParticleDevice;
 8003d2c:	4b02      	ldr	r3, [pc, #8]	; (8003d38 <ParticlesGetObject+0x10>)
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bc80      	pop	{r7}
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	20000f4c 	.word	0x20000f4c

08003d3c <Temperature_Init>:
float uVtoDegreeCTypeK(float uVdata,float Tref);
float VtoDegreeCRtd(float Vdata);


void Temperature_Init(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
	currentState = Sending_config;
 8003d40:	4b10      	ldr	r3, [pc, #64]	; (8003d84 <Temperature_Init+0x48>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	701a      	strb	r2, [r3, #0]
	nextState = Sending_config;
 8003d46:	4b10      	ldr	r3, [pc, #64]	; (8003d88 <Temperature_Init+0x4c>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	701a      	strb	r2, [r3, #0]
	b_tx_pending = false;
 8003d4c:	4b0f      	ldr	r3, [pc, #60]	; (8003d8c <Temperature_Init+0x50>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	701a      	strb	r2, [r3, #0]
	b_tx_success = false;
 8003d52:	4b0f      	ldr	r3, [pc, #60]	; (8003d90 <Temperature_Init+0x54>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	701a      	strb	r2, [r3, #0]
	b_rx_pending = false;
 8003d58:	4b0e      	ldr	r3, [pc, #56]	; (8003d94 <Temperature_Init+0x58>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	701a      	strb	r2, [r3, #0]
	b_rx_success = false;
 8003d5e:	4b0e      	ldr	r3, [pc, #56]	; (8003d98 <Temperature_Init+0x5c>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	701a      	strb	r2, [r3, #0]
	Tobj.ADCConfigByte[0] = 0x9F;
 8003d64:	4b0d      	ldr	r3, [pc, #52]	; (8003d9c <Temperature_Init+0x60>)
 8003d66:	229f      	movs	r2, #159	; 0x9f
 8003d68:	711a      	strb	r2, [r3, #4]
	Tobj.ADCConfigByte[1] = 0xBF;
 8003d6a:	4b0c      	ldr	r3, [pc, #48]	; (8003d9c <Temperature_Init+0x60>)
 8003d6c:	22bf      	movs	r2, #191	; 0xbf
 8003d6e:	715a      	strb	r2, [r3, #5]
	Tobj.ADCConfigByte[2] = 0xDC;
 8003d70:	4b0a      	ldr	r3, [pc, #40]	; (8003d9c <Temperature_Init+0x60>)
 8003d72:	22dc      	movs	r2, #220	; 0xdc
 8003d74:	719a      	strb	r2, [r3, #6]
	Tobj.ADCConfigByte[3] = 0xFC;
 8003d76:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <Temperature_Init+0x60>)
 8003d78:	22fc      	movs	r2, #252	; 0xfc
 8003d7a:	71da      	strb	r2, [r3, #7]
}
 8003d7c:	bf00      	nop
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bc80      	pop	{r7}
 8003d82:	4770      	bx	lr
 8003d84:	20000f90 	.word	0x20000f90
 8003d88:	20000f91 	.word	0x20000f91
 8003d8c:	20000f8c 	.word	0x20000f8c
 8003d90:	20000f8d 	.word	0x20000f8d
 8003d94:	20000f8e 	.word	0x20000f8e
 8003d98:	20000f8f 	.word	0x20000f8f
 8003d9c:	20000f94 	.word	0x20000f94

08003da0 <TemperatureManager>:



void TemperatureManager(Mobj* stove, uint32_t u32time_ms)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
	static int8_t ch_idx = NUMBER_OF_ADC_CH - 1;
	static uint8_t adcData[4];
	static uint32_t u32conf_time;
	int32_t i32tempReading=0;
 8003daa:	2300      	movs	r3, #0
 8003dac:	60fb      	str	r3, [r7, #12]
	float ftempReading = 0.0;
 8003dae:	f04f 0300 	mov.w	r3, #0
 8003db2:	60bb      	str	r3, [r7, #8]

	switch(currentState)
 8003db4:	4bae      	ldr	r3, [pc, #696]	; (8004070 <TemperatureManager+0x2d0>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	2b03      	cmp	r3, #3
 8003dba:	f200 8193 	bhi.w	80040e4 <TemperatureManager+0x344>
 8003dbe:	a201      	add	r2, pc, #4	; (adr r2, 8003dc4 <TemperatureManager+0x24>)
 8003dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc4:	08003dd5 	.word	0x08003dd5
 8003dc8:	08003e21 	.word	0x08003e21
 8003dcc:	08003e39 	.word	0x08003e39
 8003dd0:	08003e85 	.word	0x08003e85
	{
	case Sending_config:
		if(b_tx_success)
 8003dd4:	4ba7      	ldr	r3, [pc, #668]	; (8004074 <TemperatureManager+0x2d4>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d009      	beq.n	8003df0 <TemperatureManager+0x50>
		{
			b_tx_success = false;
 8003ddc:	4ba5      	ldr	r3, [pc, #660]	; (8004074 <TemperatureManager+0x2d4>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	701a      	strb	r2, [r3, #0]
			nextState = Wait_for_data_rdy;
 8003de2:	4ba5      	ldr	r3, [pc, #660]	; (8004078 <TemperatureManager+0x2d8>)
 8003de4:	2201      	movs	r2, #1
 8003de6:	701a      	strb	r2, [r3, #0]
			u32conf_time = u32time_ms;
 8003de8:	4aa4      	ldr	r2, [pc, #656]	; (800407c <TemperatureManager+0x2dc>)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	6013      	str	r3, [r2, #0]
		else if(!b_tx_pending)
		{
			HAL_I2C_Master_Transmit_IT(&hi2c1, ADC_ADDRESS_7BIT,&Tobj.ADCConfigByte[ch_idx],1);
			b_tx_pending = true;
		}
		break;
 8003dee:	e172      	b.n	80040d6 <TemperatureManager+0x336>
		else if(!b_tx_pending)
 8003df0:	4ba3      	ldr	r3, [pc, #652]	; (8004080 <TemperatureManager+0x2e0>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	f083 0301 	eor.w	r3, r3, #1
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f000 816b 	beq.w	80040d6 <TemperatureManager+0x336>
			HAL_I2C_Master_Transmit_IT(&hi2c1, ADC_ADDRESS_7BIT,&Tobj.ADCConfigByte[ch_idx],1);
 8003e00:	4ba0      	ldr	r3, [pc, #640]	; (8004084 <TemperatureManager+0x2e4>)
 8003e02:	f993 3000 	ldrsb.w	r3, [r3]
 8003e06:	461a      	mov	r2, r3
 8003e08:	4b9f      	ldr	r3, [pc, #636]	; (8004088 <TemperatureManager+0x2e8>)
 8003e0a:	4413      	add	r3, r2
 8003e0c:	1d1a      	adds	r2, r3, #4
 8003e0e:	2301      	movs	r3, #1
 8003e10:	21d0      	movs	r1, #208	; 0xd0
 8003e12:	489e      	ldr	r0, [pc, #632]	; (800408c <TemperatureManager+0x2ec>)
 8003e14:	f003 f83c 	bl	8006e90 <HAL_I2C_Master_Transmit_IT>
			b_tx_pending = true;
 8003e18:	4b99      	ldr	r3, [pc, #612]	; (8004080 <TemperatureManager+0x2e0>)
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	701a      	strb	r2, [r3, #0]
		break;
 8003e1e:	e15a      	b.n	80040d6 <TemperatureManager+0x336>
	case Wait_for_data_rdy:
		if(u32time_ms - u32conf_time > 300) //Conversion time around 266 ms
 8003e20:	4b96      	ldr	r3, [pc, #600]	; (800407c <TemperatureManager+0x2dc>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003e2c:	f240 8155 	bls.w	80040da <TemperatureManager+0x33a>
		{
			nextState = Send_read_req;
 8003e30:	4b91      	ldr	r3, [pc, #580]	; (8004078 <TemperatureManager+0x2d8>)
 8003e32:	2202      	movs	r2, #2
 8003e34:	701a      	strb	r2, [r3, #0]
		}
		break;
 8003e36:	e150      	b.n	80040da <TemperatureManager+0x33a>
	case Send_read_req:

		if(b_rx_success)
 8003e38:	4b95      	ldr	r3, [pc, #596]	; (8004090 <TemperatureManager+0x2f0>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00f      	beq.n	8003e60 <TemperatureManager+0xc0>
		{
			b_rx_success = false;
 8003e40:	4b93      	ldr	r3, [pc, #588]	; (8004090 <TemperatureManager+0x2f0>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	701a      	strb	r2, [r3, #0]
			if(IsDataNew(adcData[3]))
 8003e46:	4b93      	ldr	r3, [pc, #588]	; (8004094 <TemperatureManager+0x2f4>)
 8003e48:	78db      	ldrb	r3, [r3, #3]
 8003e4a:	b25b      	sxtb	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f2c0 8146 	blt.w	80040de <TemperatureManager+0x33e>
			{
				adcData[3] = 0;
 8003e52:	4b90      	ldr	r3, [pc, #576]	; (8004094 <TemperatureManager+0x2f4>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	70da      	strb	r2, [r3, #3]
				nextState = Response_received;
 8003e58:	4b87      	ldr	r3, [pc, #540]	; (8004078 <TemperatureManager+0x2d8>)
 8003e5a:	2203      	movs	r2, #3
 8003e5c:	701a      	strb	r2, [r3, #0]
		{
			HAL_I2C_Master_Receive_IT(&hi2c1, ADC_ADDRESS_7BIT,adcData,4);
			b_rx_pending = true;
		}

		break;
 8003e5e:	e13e      	b.n	80040de <TemperatureManager+0x33e>
		else if(!b_rx_pending)
 8003e60:	4b8d      	ldr	r3, [pc, #564]	; (8004098 <TemperatureManager+0x2f8>)
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	f083 0301 	eor.w	r3, r3, #1
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 8137 	beq.w	80040de <TemperatureManager+0x33e>
			HAL_I2C_Master_Receive_IT(&hi2c1, ADC_ADDRESS_7BIT,adcData,4);
 8003e70:	2304      	movs	r3, #4
 8003e72:	4a88      	ldr	r2, [pc, #544]	; (8004094 <TemperatureManager+0x2f4>)
 8003e74:	21d0      	movs	r1, #208	; 0xd0
 8003e76:	4885      	ldr	r0, [pc, #532]	; (800408c <TemperatureManager+0x2ec>)
 8003e78:	f003 f8ae 	bl	8006fd8 <HAL_I2C_Master_Receive_IT>
			b_rx_pending = true;
 8003e7c:	4b86      	ldr	r3, [pc, #536]	; (8004098 <TemperatureManager+0x2f8>)
 8003e7e:	2201      	movs	r2, #1
 8003e80:	701a      	strb	r2, [r3, #0]
		break;
 8003e82:	e12c      	b.n	80040de <TemperatureManager+0x33e>
	case Response_received:
		i32tempReading = 0;
 8003e84:	2300      	movs	r3, #0
 8003e86:	60fb      	str	r3, [r7, #12]
		i32tempReading = (adcData[0] << 30) + (adcData[1] << 22)  + (adcData[2] << 14); // justify the result for 32bit storage
 8003e88:	4b82      	ldr	r3, [pc, #520]	; (8004094 <TemperatureManager+0x2f4>)
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	079a      	lsls	r2, r3, #30
 8003e8e:	4b81      	ldr	r3, [pc, #516]	; (8004094 <TemperatureManager+0x2f4>)
 8003e90:	785b      	ldrb	r3, [r3, #1]
 8003e92:	059b      	lsls	r3, r3, #22
 8003e94:	441a      	add	r2, r3
 8003e96:	4b7f      	ldr	r3, [pc, #508]	; (8004094 <TemperatureManager+0x2f4>)
 8003e98:	789b      	ldrb	r3, [r3, #2]
 8003e9a:	039b      	lsls	r3, r3, #14
 8003e9c:	4413      	add	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]
		if (i32tempReading < 0)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	da02      	bge.n	8003eac <TemperatureManager+0x10c>
		{
			i32tempReading = -i32tempReading;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	425b      	negs	r3, r3
 8003eaa:	60fb      	str	r3, [r7, #12]
		}
		i32tempReading = (i32tempReading) >> 14;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	139b      	asrs	r3, r3, #14
 8003eb0:	60fb      	str	r3, [r7, #12]

		switch(ch_idx)
 8003eb2:	4b74      	ldr	r3, [pc, #464]	; (8004084 <TemperatureManager+0x2e4>)
 8003eb4:	f993 3000 	ldrsb.w	r3, [r3]
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	f200 80f9 	bhi.w	80040b0 <TemperatureManager+0x310>
 8003ebe:	a201      	add	r2, pc, #4	; (adr r2, 8003ec4 <TemperatureManager+0x124>)
 8003ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec4:	08003ed5 	.word	0x08003ed5
 8003ec8:	08003f45 	.word	0x08003f45
 8003ecc:	08003fb5 	.word	0x08003fb5
 8003ed0:	08004005 	.word	0x08004005
		{
			case BaffleThermocouple:
				ftempReading = ((float)(i32tempReading)*15.625)/8; //15.625uV par bit  gain = 8
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f7fc ff5b 	bl	8000d90 <__aeabi_i2f>
 8003eda:	4603      	mov	r3, r0
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7fc fb1d 	bl	800051c <__aeabi_f2d>
 8003ee2:	f04f 0200 	mov.w	r2, #0
 8003ee6:	4b6d      	ldr	r3, [pc, #436]	; (800409c <TemperatureManager+0x2fc>)
 8003ee8:	f7fc fb70 	bl	80005cc <__aeabi_dmul>
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4610      	mov	r0, r2
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	4b69      	ldr	r3, [pc, #420]	; (80040a0 <TemperatureManager+0x300>)
 8003efa:	f7fc fc91 	bl	8000820 <__aeabi_ddiv>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4610      	mov	r0, r2
 8003f04:	4619      	mov	r1, r3
 8003f06:	f7fc fe39 	bl	8000b7c <__aeabi_d2f>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	60bb      	str	r3, [r7, #8]
				stove->fBaffleTemp = CELSIUS_TO_FAHRENHEIT(uVtoDegreeCTypeK(ftempReading, Tobj.fTcoldJunct)); //6.7//26.1 //board is self heating to 7.3 above ambient
 8003f0e:	4b5e      	ldr	r3, [pc, #376]	; (8004088 <TemperatureManager+0x2e8>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4619      	mov	r1, r3
 8003f14:	68b8      	ldr	r0, [r7, #8]
 8003f16:	f000 f9d7 	bl	80042c8 <uVtoDegreeCTypeK>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	4961      	ldr	r1, [pc, #388]	; (80040a4 <TemperatureManager+0x304>)
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fc ff8a 	bl	8000e38 <__aeabi_fmul>
 8003f24:	4603      	mov	r3, r0
 8003f26:	4960      	ldr	r1, [pc, #384]	; (80040a8 <TemperatureManager+0x308>)
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7fd f839 	bl	8000fa0 <__aeabi_fdiv>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fc fe77 	bl	8000c28 <__addsf3>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	621a      	str	r2, [r3, #32]

				break;
 8003f42:	e0b6      	b.n	80040b2 <TemperatureManager+0x312>
			case ChamberThermocouple:
				ftempReading = ((float)(i32tempReading)*15.625)/8; //15.625uV par bit  gain = 8
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f7fc ff23 	bl	8000d90 <__aeabi_i2f>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7fc fae5 	bl	800051c <__aeabi_f2d>
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	4b51      	ldr	r3, [pc, #324]	; (800409c <TemperatureManager+0x2fc>)
 8003f58:	f7fc fb38 	bl	80005cc <__aeabi_dmul>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4610      	mov	r0, r2
 8003f62:	4619      	mov	r1, r3
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	4b4d      	ldr	r3, [pc, #308]	; (80040a0 <TemperatureManager+0x300>)
 8003f6a:	f7fc fc59 	bl	8000820 <__aeabi_ddiv>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	4610      	mov	r0, r2
 8003f74:	4619      	mov	r1, r3
 8003f76:	f7fc fe01 	bl	8000b7c <__aeabi_d2f>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	60bb      	str	r3, [r7, #8]
				stove->fChamberTemp = CELSIUS_TO_FAHRENHEIT(uVtoDegreeCTypeK(ftempReading, Tobj.fTcoldJunct)); //6.7//26.1 //board is self heating to 7.3 above ambient
 8003f7e:	4b42      	ldr	r3, [pc, #264]	; (8004088 <TemperatureManager+0x2e8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4619      	mov	r1, r3
 8003f84:	68b8      	ldr	r0, [r7, #8]
 8003f86:	f000 f99f 	bl	80042c8 <uVtoDegreeCTypeK>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	4945      	ldr	r1, [pc, #276]	; (80040a4 <TemperatureManager+0x304>)
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fc ff52 	bl	8000e38 <__aeabi_fmul>
 8003f94:	4603      	mov	r3, r0
 8003f96:	4944      	ldr	r1, [pc, #272]	; (80040a8 <TemperatureManager+0x308>)
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7fd f801 	bl	8000fa0 <__aeabi_fdiv>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fc fe3f 	bl	8000c28 <__addsf3>
 8003faa:	4603      	mov	r3, r0
 8003fac:	461a      	mov	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	625a      	str	r2, [r3, #36]	; 0x24

				break;
 8003fb2:	e07e      	b.n	80040b2 <TemperatureManager+0x312>
			case PlenumRtd:
				ftempReading = (float)(i32tempReading*15.625e-6);
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f7fc fa9f 	bl	80004f8 <__aeabi_i2d>
 8003fba:	a329      	add	r3, pc, #164	; (adr r3, 8004060 <TemperatureManager+0x2c0>)
 8003fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc0:	f7fc fb04 	bl	80005cc <__aeabi_dmul>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	4610      	mov	r0, r2
 8003fca:	4619      	mov	r1, r3
 8003fcc:	f7fc fdd6 	bl	8000b7c <__aeabi_d2f>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	60bb      	str	r3, [r7, #8]
				stove->fPlenumTemp = CELSIUS_TO_FAHRENHEIT(VtoDegreeCRtd(ftempReading));
 8003fd4:	68b8      	ldr	r0, [r7, #8]
 8003fd6:	f000 fc9b 	bl	8004910 <VtoDegreeCRtd>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	4931      	ldr	r1, [pc, #196]	; (80040a4 <TemperatureManager+0x304>)
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fc ff2a 	bl	8000e38 <__aeabi_fmul>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	4930      	ldr	r1, [pc, #192]	; (80040a8 <TemperatureManager+0x308>)
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7fc ffd9 	bl	8000fa0 <__aeabi_fdiv>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7fc fe17 	bl	8000c28 <__addsf3>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	629a      	str	r2, [r3, #40]	; 0x28

				break;
 8004002:	e056      	b.n	80040b2 <TemperatureManager+0x312>
			case TempSense_board:
				ftempReading = (float)(i32tempReading*15.625e-6);
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f7fc fa77 	bl	80004f8 <__aeabi_i2d>
 800400a:	a315      	add	r3, pc, #84	; (adr r3, 8004060 <TemperatureManager+0x2c0>)
 800400c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004010:	f7fc fadc 	bl	80005cc <__aeabi_dmul>
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
 8004018:	4610      	mov	r0, r2
 800401a:	4619      	mov	r1, r3
 800401c:	f7fc fdae 	bl	8000b7c <__aeabi_d2f>
 8004020:	4603      	mov	r3, r0
 8004022:	60bb      	str	r3, [r7, #8]
				Tobj.fTcoldJunct = (ftempReading-0.500)/.010;
 8004024:	68b8      	ldr	r0, [r7, #8]
 8004026:	f7fc fa79 	bl	800051c <__aeabi_f2d>
 800402a:	f04f 0200 	mov.w	r2, #0
 800402e:	4b1f      	ldr	r3, [pc, #124]	; (80040ac <TemperatureManager+0x30c>)
 8004030:	f7fc f914 	bl	800025c <__aeabi_dsub>
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	4610      	mov	r0, r2
 800403a:	4619      	mov	r1, r3
 800403c:	a30a      	add	r3, pc, #40	; (adr r3, 8004068 <TemperatureManager+0x2c8>)
 800403e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004042:	f7fc fbed 	bl	8000820 <__aeabi_ddiv>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4610      	mov	r0, r2
 800404c:	4619      	mov	r1, r3
 800404e:	f7fc fd95 	bl	8000b7c <__aeabi_d2f>
 8004052:	4603      	mov	r3, r0
 8004054:	4a0c      	ldr	r2, [pc, #48]	; (8004088 <TemperatureManager+0x2e8>)
 8004056:	6013      	str	r3, [r2, #0]
				break;
 8004058:	e02b      	b.n	80040b2 <TemperatureManager+0x312>
 800405a:	bf00      	nop
 800405c:	f3af 8000 	nop.w
 8004060:	d2f1a9fc 	.word	0xd2f1a9fc
 8004064:	3ef0624d 	.word	0x3ef0624d
 8004068:	47ae147b 	.word	0x47ae147b
 800406c:	3f847ae1 	.word	0x3f847ae1
 8004070:	20000f90 	.word	0x20000f90
 8004074:	20000f8d 	.word	0x20000f8d
 8004078:	20000f91 	.word	0x20000f91
 800407c:	20000f9c 	.word	0x20000f9c
 8004080:	20000f8c 	.word	0x20000f8c
 8004084:	20000050 	.word	0x20000050
 8004088:	20000f94 	.word	0x20000f94
 800408c:	2000399c 	.word	0x2000399c
 8004090:	20000f8f 	.word	0x20000f8f
 8004094:	20000fa0 	.word	0x20000fa0
 8004098:	20000f8e 	.word	0x20000f8e
 800409c:	402f4000 	.word	0x402f4000
 80040a0:	40200000 	.word	0x40200000
 80040a4:	41100000 	.word	0x41100000
 80040a8:	40a00000 	.word	0x40a00000
 80040ac:	3fe00000 	.word	0x3fe00000
			default:
				break;
 80040b0:	bf00      	nop
		}

		nextState = Sending_config;
 80040b2:	4b13      	ldr	r3, [pc, #76]	; (8004100 <TemperatureManager+0x360>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]
		if(ch_idx-- < 0)
 80040b8:	4b12      	ldr	r3, [pc, #72]	; (8004104 <TemperatureManager+0x364>)
 80040ba:	f993 3000 	ldrsb.w	r3, [r3]
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	3a01      	subs	r2, #1
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	b251      	sxtb	r1, r2
 80040c6:	4a0f      	ldr	r2, [pc, #60]	; (8004104 <TemperatureManager+0x364>)
 80040c8:	7011      	strb	r1, [r2, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	da09      	bge.n	80040e2 <TemperatureManager+0x342>
		{
			ch_idx = NUMBER_OF_ADC_CH - 1;
 80040ce:	4b0d      	ldr	r3, [pc, #52]	; (8004104 <TemperatureManager+0x364>)
 80040d0:	2203      	movs	r2, #3
 80040d2:	701a      	strb	r2, [r3, #0]
		}
		break;
 80040d4:	e005      	b.n	80040e2 <TemperatureManager+0x342>
		break;
 80040d6:	bf00      	nop
 80040d8:	e004      	b.n	80040e4 <TemperatureManager+0x344>
		break;
 80040da:	bf00      	nop
 80040dc:	e002      	b.n	80040e4 <TemperatureManager+0x344>
		break;
 80040de:	bf00      	nop
 80040e0:	e000      	b.n	80040e4 <TemperatureManager+0x344>
		break;
 80040e2:	bf00      	nop
	}

	if(nextState != currentState)
 80040e4:	4b06      	ldr	r3, [pc, #24]	; (8004100 <TemperatureManager+0x360>)
 80040e6:	781a      	ldrb	r2, [r3, #0]
 80040e8:	4b07      	ldr	r3, [pc, #28]	; (8004108 <TemperatureManager+0x368>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d003      	beq.n	80040f8 <TemperatureManager+0x358>
	{
		currentState = nextState;
 80040f0:	4b03      	ldr	r3, [pc, #12]	; (8004100 <TemperatureManager+0x360>)
 80040f2:	781a      	ldrb	r2, [r3, #0]
 80040f4:	4b04      	ldr	r3, [pc, #16]	; (8004108 <TemperatureManager+0x368>)
 80040f6:	701a      	strb	r2, [r3, #0]
	}

}
 80040f8:	bf00      	nop
 80040fa:	3710      	adds	r7, #16
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	20000f91 	.word	0x20000f91
 8004104:	20000050 	.word	0x20000050
 8004108:	20000f90 	.word	0x20000f90

0800410c <Temperature_update_deltaT>:

void Temperature_update_deltaT(Mobj *stove, uint32_t u32DeltaT_ms)
{
 800410c:	b590      	push	{r4, r7, lr}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
	static float baffle = 0;
	static float chamber = 0;

	if(baffle == 0 && chamber == 0)
 8004116:	4b34      	ldr	r3, [pc, #208]	; (80041e8 <Temperature_update_deltaT+0xdc>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f04f 0100 	mov.w	r1, #0
 800411e:	4618      	mov	r0, r3
 8004120:	f7fd f81e 	bl	8001160 <__aeabi_fcmpeq>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d012      	beq.n	8004150 <Temperature_update_deltaT+0x44>
 800412a:	4b30      	ldr	r3, [pc, #192]	; (80041ec <Temperature_update_deltaT+0xe0>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f04f 0100 	mov.w	r1, #0
 8004132:	4618      	mov	r0, r3
 8004134:	f7fd f814 	bl	8001160 <__aeabi_fcmpeq>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d008      	beq.n	8004150 <Temperature_update_deltaT+0x44>
	{
		baffle = stove->fBaffleTemp;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	4a29      	ldr	r2, [pc, #164]	; (80041e8 <Temperature_update_deltaT+0xdc>)
 8004144:	6013      	str	r3, [r2, #0]
		chamber = stove->fChamberTemp;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	4a28      	ldr	r2, [pc, #160]	; (80041ec <Temperature_update_deltaT+0xe0>)
 800414c:	6013      	str	r3, [r2, #0]
		return;
 800414e:	e047      	b.n	80041e0 <Temperature_update_deltaT+0xd4>
	}

	// To avoid confusion, parameters calculated per 30 seconds => (deg F / 30 sec)
	stove->fBaffleDeltaT = 30*(stove->fBaffleTemp-baffle)/((u32DeltaT_ms)/1000);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	4a24      	ldr	r2, [pc, #144]	; (80041e8 <Temperature_update_deltaT+0xdc>)
 8004156:	6812      	ldr	r2, [r2, #0]
 8004158:	4611      	mov	r1, r2
 800415a:	4618      	mov	r0, r3
 800415c:	f7fc fd62 	bl	8000c24 <__aeabi_fsub>
 8004160:	4603      	mov	r3, r0
 8004162:	4923      	ldr	r1, [pc, #140]	; (80041f0 <Temperature_update_deltaT+0xe4>)
 8004164:	4618      	mov	r0, r3
 8004166:	f7fc fe67 	bl	8000e38 <__aeabi_fmul>
 800416a:	4603      	mov	r3, r0
 800416c:	461c      	mov	r4, r3
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	4a20      	ldr	r2, [pc, #128]	; (80041f4 <Temperature_update_deltaT+0xe8>)
 8004172:	fba2 2303 	umull	r2, r3, r2, r3
 8004176:	099b      	lsrs	r3, r3, #6
 8004178:	4618      	mov	r0, r3
 800417a:	f7fc fe05 	bl	8000d88 <__aeabi_ui2f>
 800417e:	4603      	mov	r3, r0
 8004180:	4619      	mov	r1, r3
 8004182:	4620      	mov	r0, r4
 8004184:	f7fc ff0c 	bl	8000fa0 <__aeabi_fdiv>
 8004188:	4603      	mov	r3, r0
 800418a:	461a      	mov	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	62da      	str	r2, [r3, #44]	; 0x2c
	stove->fChamberDeltaT = 30*(stove->fChamberTemp-chamber)/((u32DeltaT_ms)/1000);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	4a15      	ldr	r2, [pc, #84]	; (80041ec <Temperature_update_deltaT+0xe0>)
 8004196:	6812      	ldr	r2, [r2, #0]
 8004198:	4611      	mov	r1, r2
 800419a:	4618      	mov	r0, r3
 800419c:	f7fc fd42 	bl	8000c24 <__aeabi_fsub>
 80041a0:	4603      	mov	r3, r0
 80041a2:	4913      	ldr	r1, [pc, #76]	; (80041f0 <Temperature_update_deltaT+0xe4>)
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fc fe47 	bl	8000e38 <__aeabi_fmul>
 80041aa:	4603      	mov	r3, r0
 80041ac:	461c      	mov	r4, r3
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	4a10      	ldr	r2, [pc, #64]	; (80041f4 <Temperature_update_deltaT+0xe8>)
 80041b2:	fba2 2303 	umull	r2, r3, r2, r3
 80041b6:	099b      	lsrs	r3, r3, #6
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fc fde5 	bl	8000d88 <__aeabi_ui2f>
 80041be:	4603      	mov	r3, r0
 80041c0:	4619      	mov	r1, r3
 80041c2:	4620      	mov	r0, r4
 80041c4:	f7fc feec 	bl	8000fa0 <__aeabi_fdiv>
 80041c8:	4603      	mov	r3, r0
 80041ca:	461a      	mov	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	631a      	str	r2, [r3, #48]	; 0x30

	baffle = stove->fBaffleTemp;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	4a04      	ldr	r2, [pc, #16]	; (80041e8 <Temperature_update_deltaT+0xdc>)
 80041d6:	6013      	str	r3, [r2, #0]
	chamber = stove->fChamberTemp;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	4a03      	ldr	r2, [pc, #12]	; (80041ec <Temperature_update_deltaT+0xe0>)
 80041de:	6013      	str	r3, [r2, #0]

}
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd90      	pop	{r4, r7, pc}
 80041e6:	bf00      	nop
 80041e8:	20000fa4 	.word	0x20000fa4
 80041ec:	20000fa8 	.word	0x20000fa8
 80041f0:	41f00000 	.word	0x41f00000
 80041f4:	10624dd3 	.word	0x10624dd3

080041f8 <HAL_I2C_MasterTxCpltCallback>:
{
	return Tobj.fTcoldJunct ;
}

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
	b_tx_success = true;
 8004200:	4b05      	ldr	r3, [pc, #20]	; (8004218 <HAL_I2C_MasterTxCpltCallback+0x20>)
 8004202:	2201      	movs	r2, #1
 8004204:	701a      	strb	r2, [r3, #0]
	b_tx_pending = false;
 8004206:	4b05      	ldr	r3, [pc, #20]	; (800421c <HAL_I2C_MasterTxCpltCallback+0x24>)
 8004208:	2200      	movs	r2, #0
 800420a:	701a      	strb	r2, [r3, #0]
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	20000f8d 	.word	0x20000f8d
 800421c:	20000f8c 	.word	0x20000f8c

08004220 <HAL_I2C_MasterRxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
	b_rx_success = true;
 8004228:	4b05      	ldr	r3, [pc, #20]	; (8004240 <HAL_I2C_MasterRxCpltCallback+0x20>)
 800422a:	2201      	movs	r2, #1
 800422c:	701a      	strb	r2, [r3, #0]
	b_rx_pending = false;
 800422e:	4b05      	ldr	r3, [pc, #20]	; (8004244 <HAL_I2C_MasterRxCpltCallback+0x24>)
 8004230:	2200      	movs	r2, #0
 8004232:	701a      	strb	r2, [r3, #0]
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	bc80      	pop	{r7}
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	20000f8f 	.word	0x20000f8f
 8004244:	20000f8e 	.word	0x20000f8e

08004248 <HAL_I2C_ErrorCallback>:
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
	b_tx_pending = false;
 8004250:	4b09      	ldr	r3, [pc, #36]	; (8004278 <HAL_I2C_ErrorCallback+0x30>)
 8004252:	2200      	movs	r2, #0
 8004254:	701a      	strb	r2, [r3, #0]
	b_tx_success = false;
 8004256:	4b09      	ldr	r3, [pc, #36]	; (800427c <HAL_I2C_ErrorCallback+0x34>)
 8004258:	2200      	movs	r2, #0
 800425a:	701a      	strb	r2, [r3, #0]
	b_rx_pending = false;
 800425c:	4b08      	ldr	r3, [pc, #32]	; (8004280 <HAL_I2C_ErrorCallback+0x38>)
 800425e:	2200      	movs	r2, #0
 8004260:	701a      	strb	r2, [r3, #0]
	b_rx_success = false;
 8004262:	4b08      	ldr	r3, [pc, #32]	; (8004284 <HAL_I2C_ErrorCallback+0x3c>)
 8004264:	2200      	movs	r2, #0
 8004266:	701a      	strb	r2, [r3, #0]
	uint32_t errorcode = hi2c->ErrorCode;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426c:	60fb      	str	r3, [r7, #12]
	UNUSED(errorcode);
}
 800426e:	bf00      	nop
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	bc80      	pop	{r7}
 8004276:	4770      	bx	lr
 8004278:	20000f8c 	.word	0x20000f8c
 800427c:	20000f8d 	.word	0x20000f8d
 8004280:	20000f8e 	.word	0x20000f8e
 8004284:	20000f8f 	.word	0x20000f8f

08004288 <HAL_I2C_AbortCpltCallback>:
void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
	b_tx_pending = false;
 8004290:	4b09      	ldr	r3, [pc, #36]	; (80042b8 <HAL_I2C_AbortCpltCallback+0x30>)
 8004292:	2200      	movs	r2, #0
 8004294:	701a      	strb	r2, [r3, #0]
	b_tx_success = false;
 8004296:	4b09      	ldr	r3, [pc, #36]	; (80042bc <HAL_I2C_AbortCpltCallback+0x34>)
 8004298:	2200      	movs	r2, #0
 800429a:	701a      	strb	r2, [r3, #0]
	b_rx_pending = false;
 800429c:	4b08      	ldr	r3, [pc, #32]	; (80042c0 <HAL_I2C_AbortCpltCallback+0x38>)
 800429e:	2200      	movs	r2, #0
 80042a0:	701a      	strb	r2, [r3, #0]
	b_rx_success = false;
 80042a2:	4b08      	ldr	r3, [pc, #32]	; (80042c4 <HAL_I2C_AbortCpltCallback+0x3c>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	701a      	strb	r2, [r3, #0]
	uint32_t errorcode = hi2c->ErrorCode;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ac:	60fb      	str	r3, [r7, #12]
	UNUSED(errorcode);
}
 80042ae:	bf00      	nop
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr
 80042b8:	20000f8c 	.word	0x20000f8c
 80042bc:	20000f8d 	.word	0x20000f8d
 80042c0:	20000f8e 	.word	0x20000f8e
 80042c4:	20000f8f 	.word	0x20000f8f

080042c8 <uVtoDegreeCTypeK>:
#define T_COEF_A0 1.185976E-1
#define T_COEF_A1 -1.183432E-4
#define T_COEF_A2 1.269686E2

float uVtoDegreeCTypeK(float uVdata,float Tref)
{
 80042c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80042cc:	b08a      	sub	sp, #40	; 0x28
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
 80042d2:	6039      	str	r1, [r7, #0]
    double Vref = T_COEF_C0 + T_COEF_C1*Tref + T_COEF_C2*pow(Tref,2) + T_COEF_C3*pow(Tref,3) + T_COEF_C4*pow(Tref,4) + T_COEF_C5*pow(Tref,5) + T_COEF_C6*pow(Tref,6) + T_COEF_C7*pow(Tref,7) + T_COEF_C8*pow(Tref,8) + T_COEF_C9*pow(Tref,9)+T_COEF_A0*pow(2.718281828,T_COEF_A1*(Tref-T_COEF_A2)*(Tref-T_COEF_A2));
 80042d4:	6838      	ldr	r0, [r7, #0]
 80042d6:	f7fc f921 	bl	800051c <__aeabi_f2d>
 80042da:	a3cd      	add	r3, pc, #820	; (adr r3, 8004610 <uVtoDegreeCTypeK+0x348>)
 80042dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e0:	f7fc f974 	bl	80005cc <__aeabi_dmul>
 80042e4:	4602      	mov	r2, r0
 80042e6:	460b      	mov	r3, r1
 80042e8:	4610      	mov	r0, r2
 80042ea:	4619      	mov	r1, r3
 80042ec:	a3ca      	add	r3, pc, #808	; (adr r3, 8004618 <uVtoDegreeCTypeK+0x350>)
 80042ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f2:	f7fb ffb3 	bl	800025c <__aeabi_dsub>
 80042f6:	4602      	mov	r2, r0
 80042f8:	460b      	mov	r3, r1
 80042fa:	4614      	mov	r4, r2
 80042fc:	461d      	mov	r5, r3
 80042fe:	6838      	ldr	r0, [r7, #0]
 8004300:	f7fc f90c 	bl	800051c <__aeabi_f2d>
 8004304:	f04f 0200 	mov.w	r2, #0
 8004308:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800430c:	f00d fb5e 	bl	80119cc <pow>
 8004310:	a3c3      	add	r3, pc, #780	; (adr r3, 8004620 <uVtoDegreeCTypeK+0x358>)
 8004312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004316:	f7fc f959 	bl	80005cc <__aeabi_dmul>
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	4620      	mov	r0, r4
 8004320:	4629      	mov	r1, r5
 8004322:	f7fb ff9d 	bl	8000260 <__adddf3>
 8004326:	4602      	mov	r2, r0
 8004328:	460b      	mov	r3, r1
 800432a:	4614      	mov	r4, r2
 800432c:	461d      	mov	r5, r3
 800432e:	6838      	ldr	r0, [r7, #0]
 8004330:	f7fc f8f4 	bl	800051c <__aeabi_f2d>
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	4bdd      	ldr	r3, [pc, #884]	; (80046b0 <uVtoDegreeCTypeK+0x3e8>)
 800433a:	f00d fb47 	bl	80119cc <pow>
 800433e:	a3ba      	add	r3, pc, #744	; (adr r3, 8004628 <uVtoDegreeCTypeK+0x360>)
 8004340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004344:	f7fc f942 	bl	80005cc <__aeabi_dmul>
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	4620      	mov	r0, r4
 800434e:	4629      	mov	r1, r5
 8004350:	f7fb ff86 	bl	8000260 <__adddf3>
 8004354:	4602      	mov	r2, r0
 8004356:	460b      	mov	r3, r1
 8004358:	4614      	mov	r4, r2
 800435a:	461d      	mov	r5, r3
 800435c:	6838      	ldr	r0, [r7, #0]
 800435e:	f7fc f8dd 	bl	800051c <__aeabi_f2d>
 8004362:	f04f 0200 	mov.w	r2, #0
 8004366:	4bd3      	ldr	r3, [pc, #844]	; (80046b4 <uVtoDegreeCTypeK+0x3ec>)
 8004368:	f00d fb30 	bl	80119cc <pow>
 800436c:	a3b0      	add	r3, pc, #704	; (adr r3, 8004630 <uVtoDegreeCTypeK+0x368>)
 800436e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004372:	f7fc f92b 	bl	80005cc <__aeabi_dmul>
 8004376:	4602      	mov	r2, r0
 8004378:	460b      	mov	r3, r1
 800437a:	4620      	mov	r0, r4
 800437c:	4629      	mov	r1, r5
 800437e:	f7fb ff6f 	bl	8000260 <__adddf3>
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	4614      	mov	r4, r2
 8004388:	461d      	mov	r5, r3
 800438a:	6838      	ldr	r0, [r7, #0]
 800438c:	f7fc f8c6 	bl	800051c <__aeabi_f2d>
 8004390:	f04f 0200 	mov.w	r2, #0
 8004394:	4bc8      	ldr	r3, [pc, #800]	; (80046b8 <uVtoDegreeCTypeK+0x3f0>)
 8004396:	f00d fb19 	bl	80119cc <pow>
 800439a:	a3a7      	add	r3, pc, #668	; (adr r3, 8004638 <uVtoDegreeCTypeK+0x370>)
 800439c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a0:	f7fc f914 	bl	80005cc <__aeabi_dmul>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	4620      	mov	r0, r4
 80043aa:	4629      	mov	r1, r5
 80043ac:	f7fb ff58 	bl	8000260 <__adddf3>
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	4614      	mov	r4, r2
 80043b6:	461d      	mov	r5, r3
 80043b8:	6838      	ldr	r0, [r7, #0]
 80043ba:	f7fc f8af 	bl	800051c <__aeabi_f2d>
 80043be:	f04f 0200 	mov.w	r2, #0
 80043c2:	4bbe      	ldr	r3, [pc, #760]	; (80046bc <uVtoDegreeCTypeK+0x3f4>)
 80043c4:	f00d fb02 	bl	80119cc <pow>
 80043c8:	a39d      	add	r3, pc, #628	; (adr r3, 8004640 <uVtoDegreeCTypeK+0x378>)
 80043ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ce:	f7fc f8fd 	bl	80005cc <__aeabi_dmul>
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	4620      	mov	r0, r4
 80043d8:	4629      	mov	r1, r5
 80043da:	f7fb ff41 	bl	8000260 <__adddf3>
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4614      	mov	r4, r2
 80043e4:	461d      	mov	r5, r3
 80043e6:	6838      	ldr	r0, [r7, #0]
 80043e8:	f7fc f898 	bl	800051c <__aeabi_f2d>
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	4bb3      	ldr	r3, [pc, #716]	; (80046c0 <uVtoDegreeCTypeK+0x3f8>)
 80043f2:	f00d faeb 	bl	80119cc <pow>
 80043f6:	a394      	add	r3, pc, #592	; (adr r3, 8004648 <uVtoDegreeCTypeK+0x380>)
 80043f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fc:	f7fc f8e6 	bl	80005cc <__aeabi_dmul>
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	4620      	mov	r0, r4
 8004406:	4629      	mov	r1, r5
 8004408:	f7fb ff2a 	bl	8000260 <__adddf3>
 800440c:	4602      	mov	r2, r0
 800440e:	460b      	mov	r3, r1
 8004410:	4614      	mov	r4, r2
 8004412:	461d      	mov	r5, r3
 8004414:	6838      	ldr	r0, [r7, #0]
 8004416:	f7fc f881 	bl	800051c <__aeabi_f2d>
 800441a:	f04f 0200 	mov.w	r2, #0
 800441e:	4ba9      	ldr	r3, [pc, #676]	; (80046c4 <uVtoDegreeCTypeK+0x3fc>)
 8004420:	f00d fad4 	bl	80119cc <pow>
 8004424:	a38a      	add	r3, pc, #552	; (adr r3, 8004650 <uVtoDegreeCTypeK+0x388>)
 8004426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442a:	f7fc f8cf 	bl	80005cc <__aeabi_dmul>
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	4620      	mov	r0, r4
 8004434:	4629      	mov	r1, r5
 8004436:	f7fb ff13 	bl	8000260 <__adddf3>
 800443a:	4602      	mov	r2, r0
 800443c:	460b      	mov	r3, r1
 800443e:	4614      	mov	r4, r2
 8004440:	461d      	mov	r5, r3
 8004442:	6838      	ldr	r0, [r7, #0]
 8004444:	f7fc f86a 	bl	800051c <__aeabi_f2d>
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	4b9e      	ldr	r3, [pc, #632]	; (80046c8 <uVtoDegreeCTypeK+0x400>)
 800444e:	f00d fabd 	bl	80119cc <pow>
 8004452:	a381      	add	r3, pc, #516	; (adr r3, 8004658 <uVtoDegreeCTypeK+0x390>)
 8004454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004458:	f7fc f8b8 	bl	80005cc <__aeabi_dmul>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	4620      	mov	r0, r4
 8004462:	4629      	mov	r1, r5
 8004464:	f7fb fefc 	bl	8000260 <__adddf3>
 8004468:	4602      	mov	r2, r0
 800446a:	460b      	mov	r3, r1
 800446c:	4614      	mov	r4, r2
 800446e:	461d      	mov	r5, r3
 8004470:	6838      	ldr	r0, [r7, #0]
 8004472:	f7fc f853 	bl	800051c <__aeabi_f2d>
 8004476:	a37a      	add	r3, pc, #488	; (adr r3, 8004660 <uVtoDegreeCTypeK+0x398>)
 8004478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447c:	f7fb feee 	bl	800025c <__aeabi_dsub>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4610      	mov	r0, r2
 8004486:	4619      	mov	r1, r3
 8004488:	a377      	add	r3, pc, #476	; (adr r3, 8004668 <uVtoDegreeCTypeK+0x3a0>)
 800448a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448e:	f7fc f89d 	bl	80005cc <__aeabi_dmul>
 8004492:	4602      	mov	r2, r0
 8004494:	460b      	mov	r3, r1
 8004496:	4690      	mov	r8, r2
 8004498:	4699      	mov	r9, r3
 800449a:	6838      	ldr	r0, [r7, #0]
 800449c:	f7fc f83e 	bl	800051c <__aeabi_f2d>
 80044a0:	a36f      	add	r3, pc, #444	; (adr r3, 8004660 <uVtoDegreeCTypeK+0x398>)
 80044a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a6:	f7fb fed9 	bl	800025c <__aeabi_dsub>
 80044aa:	4602      	mov	r2, r0
 80044ac:	460b      	mov	r3, r1
 80044ae:	4640      	mov	r0, r8
 80044b0:	4649      	mov	r1, r9
 80044b2:	f7fc f88b 	bl	80005cc <__aeabi_dmul>
 80044b6:	4602      	mov	r2, r0
 80044b8:	460b      	mov	r3, r1
 80044ba:	a16d      	add	r1, pc, #436	; (adr r1, 8004670 <uVtoDegreeCTypeK+0x3a8>)
 80044bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044c0:	f00d fa84 	bl	80119cc <pow>
 80044c4:	a36c      	add	r3, pc, #432	; (adr r3, 8004678 <uVtoDegreeCTypeK+0x3b0>)
 80044c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ca:	f7fc f87f 	bl	80005cc <__aeabi_dmul>
 80044ce:	4602      	mov	r2, r0
 80044d0:	460b      	mov	r3, r1
 80044d2:	4620      	mov	r0, r4
 80044d4:	4629      	mov	r1, r5
 80044d6:	f7fb fec3 	bl	8000260 <__adddf3>
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double Vmeas = uVdata/1000; //value need to be in mV
 80044e2:	497a      	ldr	r1, [pc, #488]	; (80046cc <uVtoDegreeCTypeK+0x404>)
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7fc fd5b 	bl	8000fa0 <__aeabi_fdiv>
 80044ea:	4603      	mov	r3, r0
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7fc f815 	bl	800051c <__aeabi_f2d>
 80044f2:	4602      	mov	r2, r0
 80044f4:	460b      	mov	r3, r1
 80044f6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double totalV = Vmeas + Vref;
 80044fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004502:	f7fb fead 	bl	8000260 <__adddf3>
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	e9c7 2302 	strd	r2, r3, [r7, #8]

    double t90;
    if(totalV < 20.644)
 800450e:	a35c      	add	r3, pc, #368	; (adr r3, 8004680 <uVtoDegreeCTypeK+0x3b8>)
 8004510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004514:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004518:	f7fc faca 	bl	8000ab0 <__aeabi_dcmplt>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 812a 	beq.w	8004778 <uVtoDegreeCTypeK+0x4b0>
    {
     t90 = T_COEF_D0_0_500 + T_COEF_D1_0_500 *totalV + T_COEF_D2_0_500 *pow(totalV,2) + T_COEF_D3_0_500 *pow(totalV,3) + T_COEF_D4_0_500 *pow(totalV,4) + T_COEF_D5_0_500 *pow(totalV,5) + T_COEF_D6_0_500 *pow(totalV,6) + T_COEF_D7_0_500 *pow(totalV,7) + T_COEF_D8_0_500 *pow(totalV,8) + T_COEF_D9_0_500 *pow(totalV,9);
 8004524:	a358      	add	r3, pc, #352	; (adr r3, 8004688 <uVtoDegreeCTypeK+0x3c0>)
 8004526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800452e:	f7fc f84d 	bl	80005cc <__aeabi_dmul>
 8004532:	4602      	mov	r2, r0
 8004534:	460b      	mov	r3, r1
 8004536:	4610      	mov	r0, r2
 8004538:	4619      	mov	r1, r3
 800453a:	f04f 0200 	mov.w	r2, #0
 800453e:	f04f 0300 	mov.w	r3, #0
 8004542:	f7fb fe8d 	bl	8000260 <__adddf3>
 8004546:	4602      	mov	r2, r0
 8004548:	460b      	mov	r3, r1
 800454a:	4614      	mov	r4, r2
 800454c:	461d      	mov	r5, r3
 800454e:	f04f 0200 	mov.w	r2, #0
 8004552:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004556:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800455a:	f00d fa37 	bl	80119cc <pow>
 800455e:	a34c      	add	r3, pc, #304	; (adr r3, 8004690 <uVtoDegreeCTypeK+0x3c8>)
 8004560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004564:	f7fc f832 	bl	80005cc <__aeabi_dmul>
 8004568:	4602      	mov	r2, r0
 800456a:	460b      	mov	r3, r1
 800456c:	4620      	mov	r0, r4
 800456e:	4629      	mov	r1, r5
 8004570:	f7fb fe76 	bl	8000260 <__adddf3>
 8004574:	4602      	mov	r2, r0
 8004576:	460b      	mov	r3, r1
 8004578:	4614      	mov	r4, r2
 800457a:	461d      	mov	r5, r3
 800457c:	f04f 0200 	mov.w	r2, #0
 8004580:	4b4b      	ldr	r3, [pc, #300]	; (80046b0 <uVtoDegreeCTypeK+0x3e8>)
 8004582:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004586:	f00d fa21 	bl	80119cc <pow>
 800458a:	a343      	add	r3, pc, #268	; (adr r3, 8004698 <uVtoDegreeCTypeK+0x3d0>)
 800458c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004590:	f7fc f81c 	bl	80005cc <__aeabi_dmul>
 8004594:	4602      	mov	r2, r0
 8004596:	460b      	mov	r3, r1
 8004598:	4620      	mov	r0, r4
 800459a:	4629      	mov	r1, r5
 800459c:	f7fb fe60 	bl	8000260 <__adddf3>
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	4614      	mov	r4, r2
 80045a6:	461d      	mov	r5, r3
 80045a8:	f04f 0200 	mov.w	r2, #0
 80045ac:	4b41      	ldr	r3, [pc, #260]	; (80046b4 <uVtoDegreeCTypeK+0x3ec>)
 80045ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80045b2:	f00d fa0b 	bl	80119cc <pow>
 80045b6:	a33a      	add	r3, pc, #232	; (adr r3, 80046a0 <uVtoDegreeCTypeK+0x3d8>)
 80045b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045bc:	f7fc f806 	bl	80005cc <__aeabi_dmul>
 80045c0:	4602      	mov	r2, r0
 80045c2:	460b      	mov	r3, r1
 80045c4:	4620      	mov	r0, r4
 80045c6:	4629      	mov	r1, r5
 80045c8:	f7fb fe4a 	bl	8000260 <__adddf3>
 80045cc:	4602      	mov	r2, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	4614      	mov	r4, r2
 80045d2:	461d      	mov	r5, r3
 80045d4:	f04f 0200 	mov.w	r2, #0
 80045d8:	4b37      	ldr	r3, [pc, #220]	; (80046b8 <uVtoDegreeCTypeK+0x3f0>)
 80045da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80045de:	f00d f9f5 	bl	80119cc <pow>
 80045e2:	a331      	add	r3, pc, #196	; (adr r3, 80046a8 <uVtoDegreeCTypeK+0x3e0>)
 80045e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e8:	f7fb fff0 	bl	80005cc <__aeabi_dmul>
 80045ec:	4602      	mov	r2, r0
 80045ee:	460b      	mov	r3, r1
 80045f0:	4620      	mov	r0, r4
 80045f2:	4629      	mov	r1, r5
 80045f4:	f7fb fe34 	bl	8000260 <__adddf3>
 80045f8:	4602      	mov	r2, r0
 80045fa:	460b      	mov	r3, r1
 80045fc:	4614      	mov	r4, r2
 80045fe:	461d      	mov	r5, r3
 8004600:	f04f 0200 	mov.w	r2, #0
 8004604:	4b2d      	ldr	r3, [pc, #180]	; (80046bc <uVtoDegreeCTypeK+0x3f4>)
 8004606:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800460a:	e061      	b.n	80046d0 <uVtoDegreeCTypeK+0x408>
 800460c:	f3af 8000 	nop.w
 8004610:	ecfa2196 	.word	0xecfa2196
 8004614:	3fa3ed7a 	.word	0x3fa3ed7a
 8004618:	c4b5b30b 	.word	0xc4b5b30b
 800461c:	3f9205d7 	.word	0x3f9205d7
 8004620:	f72891e7 	.word	0xf72891e7
 8004624:	3ef375d4 	.word	0x3ef375d4
 8004628:	7a34de08 	.word	0x7a34de08
 800462c:	be7ab2ac 	.word	0xbe7ab2ac
 8004630:	b676ec5f 	.word	0xb676ec5f
 8004634:	3df5e184 	.word	0x3df5e184
 8004638:	c620f2a8 	.word	0xc620f2a8
 800463c:	bd63ba97 	.word	0xbd63ba97
 8004640:	e5aa091d 	.word	0xe5aa091d
 8004644:	3cc43402 	.word	0x3cc43402
 8004648:	01c8db89 	.word	0x01c8db89
 800464c:	bc17a08b 	.word	0xbc17a08b
 8004650:	b8001899 	.word	0xb8001899
 8004654:	3b5d5cb4 	.word	0x3b5d5cb4
 8004658:	51ff39ec 	.word	0x51ff39ec
 800465c:	ba8df847 	.word	0xba8df847
 8004660:	8adab9f5 	.word	0x8adab9f5
 8004664:	405fbdfd 	.word	0x405fbdfd
 8004668:	b1df7541 	.word	0xb1df7541
 800466c:	bf1f05e0 	.word	0xbf1f05e0
 8004670:	8b04919b 	.word	0x8b04919b
 8004674:	4005bf0a 	.word	0x4005bf0a
 8004678:	8d6253b2 	.word	0x8d6253b2
 800467c:	3fbe5c69 	.word	0x3fbe5c69
 8004680:	2f1a9fbe 	.word	0x2f1a9fbe
 8004684:	4034a4dd 	.word	0x4034a4dd
 8004688:	886594af 	.word	0x886594af
 800468c:	40391563 	.word	0x40391563
 8004690:	f62184e0 	.word	0xf62184e0
 8004694:	3fb41f32 	.word	0x3fb41f32
 8004698:	3c90aa07 	.word	0x3c90aa07
 800469c:	bfd00521 	.word	0xbfd00521
 80046a0:	cf12f82a 	.word	0xcf12f82a
 80046a4:	3fb5497e 	.word	0x3fb5497e
 80046a8:	55785780 	.word	0x55785780
 80046ac:	bf89266f 	.word	0xbf89266f
 80046b0:	40080000 	.word	0x40080000
 80046b4:	40100000 	.word	0x40100000
 80046b8:	40140000 	.word	0x40140000
 80046bc:	40180000 	.word	0x40180000
 80046c0:	401c0000 	.word	0x401c0000
 80046c4:	40200000 	.word	0x40200000
 80046c8:	40220000 	.word	0x40220000
 80046cc:	447a0000 	.word	0x447a0000
 80046d0:	f00d f97c 	bl	80119cc <pow>
 80046d4:	a370      	add	r3, pc, #448	; (adr r3, 8004898 <uVtoDegreeCTypeK+0x5d0>)
 80046d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046da:	f7fb ff77 	bl	80005cc <__aeabi_dmul>
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	4620      	mov	r0, r4
 80046e4:	4629      	mov	r1, r5
 80046e6:	f7fb fdbb 	bl	8000260 <__adddf3>
 80046ea:	4602      	mov	r2, r0
 80046ec:	460b      	mov	r3, r1
 80046ee:	4614      	mov	r4, r2
 80046f0:	461d      	mov	r5, r3
 80046f2:	f04f 0200 	mov.w	r2, #0
 80046f6:	4b7e      	ldr	r3, [pc, #504]	; (80048f0 <uVtoDegreeCTypeK+0x628>)
 80046f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046fc:	f00d f966 	bl	80119cc <pow>
 8004700:	a367      	add	r3, pc, #412	; (adr r3, 80048a0 <uVtoDegreeCTypeK+0x5d8>)
 8004702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004706:	f7fb ff61 	bl	80005cc <__aeabi_dmul>
 800470a:	4602      	mov	r2, r0
 800470c:	460b      	mov	r3, r1
 800470e:	4620      	mov	r0, r4
 8004710:	4629      	mov	r1, r5
 8004712:	f7fb fda5 	bl	8000260 <__adddf3>
 8004716:	4602      	mov	r2, r0
 8004718:	460b      	mov	r3, r1
 800471a:	4614      	mov	r4, r2
 800471c:	461d      	mov	r5, r3
 800471e:	f04f 0200 	mov.w	r2, #0
 8004722:	4b74      	ldr	r3, [pc, #464]	; (80048f4 <uVtoDegreeCTypeK+0x62c>)
 8004724:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004728:	f00d f950 	bl	80119cc <pow>
 800472c:	a35e      	add	r3, pc, #376	; (adr r3, 80048a8 <uVtoDegreeCTypeK+0x5e0>)
 800472e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004732:	f7fb ff4b 	bl	80005cc <__aeabi_dmul>
 8004736:	4602      	mov	r2, r0
 8004738:	460b      	mov	r3, r1
 800473a:	4620      	mov	r0, r4
 800473c:	4629      	mov	r1, r5
 800473e:	f7fb fd8f 	bl	8000260 <__adddf3>
 8004742:	4602      	mov	r2, r0
 8004744:	460b      	mov	r3, r1
 8004746:	4614      	mov	r4, r2
 8004748:	461d      	mov	r5, r3
 800474a:	f04f 0200 	mov.w	r2, #0
 800474e:	4b6a      	ldr	r3, [pc, #424]	; (80048f8 <uVtoDegreeCTypeK+0x630>)
 8004750:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004754:	f00d f93a 	bl	80119cc <pow>
 8004758:	a355      	add	r3, pc, #340	; (adr r3, 80048b0 <uVtoDegreeCTypeK+0x5e8>)
 800475a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475e:	f7fb ff35 	bl	80005cc <__aeabi_dmul>
 8004762:	4602      	mov	r2, r0
 8004764:	460b      	mov	r3, r1
 8004766:	4620      	mov	r0, r4
 8004768:	4629      	mov	r1, r5
 800476a:	f7fb fd79 	bl	8000260 <__adddf3>
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8004776:	e082      	b.n	800487e <uVtoDegreeCTypeK+0x5b6>
    }
    else
    {
	    t90 = T_COEF_D0_500_1372 + T_COEF_D1_500_1372 *totalV + T_COEF_D2_500_1372 *pow(totalV,2) + T_COEF_D3_500_1372 *pow(totalV,3) + T_COEF_D4_500_1372 *pow(totalV,4) + T_COEF_D5_500_1372 *pow(totalV,5) + T_COEF_D6_500_1372 *pow(totalV,6);
 8004778:	a34f      	add	r3, pc, #316	; (adr r3, 80048b8 <uVtoDegreeCTypeK+0x5f0>)
 800477a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004782:	f7fb ff23 	bl	80005cc <__aeabi_dmul>
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	4610      	mov	r0, r2
 800478c:	4619      	mov	r1, r3
 800478e:	a34c      	add	r3, pc, #304	; (adr r3, 80048c0 <uVtoDegreeCTypeK+0x5f8>)
 8004790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004794:	f7fb fd62 	bl	800025c <__aeabi_dsub>
 8004798:	4602      	mov	r2, r0
 800479a:	460b      	mov	r3, r1
 800479c:	4614      	mov	r4, r2
 800479e:	461d      	mov	r5, r3
 80047a0:	f04f 0200 	mov.w	r2, #0
 80047a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80047a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80047ac:	f00d f90e 	bl	80119cc <pow>
 80047b0:	a345      	add	r3, pc, #276	; (adr r3, 80048c8 <uVtoDegreeCTypeK+0x600>)
 80047b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b6:	f7fb ff09 	bl	80005cc <__aeabi_dmul>
 80047ba:	4602      	mov	r2, r0
 80047bc:	460b      	mov	r3, r1
 80047be:	4620      	mov	r0, r4
 80047c0:	4629      	mov	r1, r5
 80047c2:	f7fb fd4d 	bl	8000260 <__adddf3>
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	4614      	mov	r4, r2
 80047cc:	461d      	mov	r5, r3
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	4b4a      	ldr	r3, [pc, #296]	; (80048fc <uVtoDegreeCTypeK+0x634>)
 80047d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80047d8:	f00d f8f8 	bl	80119cc <pow>
 80047dc:	a33c      	add	r3, pc, #240	; (adr r3, 80048d0 <uVtoDegreeCTypeK+0x608>)
 80047de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e2:	f7fb fef3 	bl	80005cc <__aeabi_dmul>
 80047e6:	4602      	mov	r2, r0
 80047e8:	460b      	mov	r3, r1
 80047ea:	4620      	mov	r0, r4
 80047ec:	4629      	mov	r1, r5
 80047ee:	f7fb fd37 	bl	8000260 <__adddf3>
 80047f2:	4602      	mov	r2, r0
 80047f4:	460b      	mov	r3, r1
 80047f6:	4614      	mov	r4, r2
 80047f8:	461d      	mov	r5, r3
 80047fa:	f04f 0200 	mov.w	r2, #0
 80047fe:	4b40      	ldr	r3, [pc, #256]	; (8004900 <uVtoDegreeCTypeK+0x638>)
 8004800:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004804:	f00d f8e2 	bl	80119cc <pow>
 8004808:	a333      	add	r3, pc, #204	; (adr r3, 80048d8 <uVtoDegreeCTypeK+0x610>)
 800480a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480e:	f7fb fedd 	bl	80005cc <__aeabi_dmul>
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	4620      	mov	r0, r4
 8004818:	4629      	mov	r1, r5
 800481a:	f7fb fd21 	bl	8000260 <__adddf3>
 800481e:	4602      	mov	r2, r0
 8004820:	460b      	mov	r3, r1
 8004822:	4614      	mov	r4, r2
 8004824:	461d      	mov	r5, r3
 8004826:	f04f 0200 	mov.w	r2, #0
 800482a:	4b36      	ldr	r3, [pc, #216]	; (8004904 <uVtoDegreeCTypeK+0x63c>)
 800482c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004830:	f00d f8cc 	bl	80119cc <pow>
 8004834:	a32a      	add	r3, pc, #168	; (adr r3, 80048e0 <uVtoDegreeCTypeK+0x618>)
 8004836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483a:	f7fb fec7 	bl	80005cc <__aeabi_dmul>
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	4620      	mov	r0, r4
 8004844:	4629      	mov	r1, r5
 8004846:	f7fb fd0b 	bl	8000260 <__adddf3>
 800484a:	4602      	mov	r2, r0
 800484c:	460b      	mov	r3, r1
 800484e:	4614      	mov	r4, r2
 8004850:	461d      	mov	r5, r3
 8004852:	f04f 0200 	mov.w	r2, #0
 8004856:	4b2c      	ldr	r3, [pc, #176]	; (8004908 <uVtoDegreeCTypeK+0x640>)
 8004858:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800485c:	f00d f8b6 	bl	80119cc <pow>
 8004860:	a321      	add	r3, pc, #132	; (adr r3, 80048e8 <uVtoDegreeCTypeK+0x620>)
 8004862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004866:	f7fb feb1 	bl	80005cc <__aeabi_dmul>
 800486a:	4602      	mov	r2, r0
 800486c:	460b      	mov	r3, r1
 800486e:	4620      	mov	r0, r4
 8004870:	4629      	mov	r1, r5
 8004872:	f7fb fcf5 	bl	8000260 <__adddf3>
 8004876:	4602      	mov	r2, r0
 8004878:	460b      	mov	r3, r1
 800487a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }

    return (float)t90;
 800487e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004882:	f7fc f97b 	bl	8000b7c <__aeabi_d2f>
 8004886:	4603      	mov	r3, r0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3728      	adds	r7, #40	; 0x28
 800488c:	46bd      	mov	sp, r7
 800488e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004892:	bf00      	nop
 8004894:	f3af 8000 	nop.w
 8004898:	598742c5 	.word	0x598742c5
 800489c:	3f50101c 	.word	0x3f50101c
 80048a0:	8fe5dfc5 	.word	0x8fe5dfc5
 80048a4:	bf072311 	.word	0xbf072311
 80048a8:	d5041d19 	.word	0xd5041d19
 80048ac:	3eb1beee 	.word	0x3eb1beee
 80048b0:	f20e972b 	.word	0xf20e972b
 80048b4:	be469b94 	.word	0xbe469b94
 80048b8:	251c193b 	.word	0x251c193b
 80048bc:	404826af 	.word	0x404826af
 80048c0:	1d14e3bd 	.word	0x1d14e3bd
 80048c4:	406079c9 	.word	0x406079c9
 80048c8:	7dffe020 	.word	0x7dffe020
 80048cc:	bffa587c 	.word	0xbffa587c
 80048d0:	72875bff 	.word	0x72875bff
 80048d4:	3fabfabb 	.word	0x3fabfabb
 80048d8:	43f14f16 	.word	0x43f14f16
 80048dc:	bf4f9f9b 	.word	0xbf4f9f9b
 80048e0:	31b5afb6 	.word	0x31b5afb6
 80048e4:	3ee275a4 	.word	0x3ee275a4
 80048e8:	f722eba7 	.word	0xf722eba7
 80048ec:	be60b376 	.word	0xbe60b376
 80048f0:	401c0000 	.word	0x401c0000
 80048f4:	40200000 	.word	0x40200000
 80048f8:	40220000 	.word	0x40220000
 80048fc:	40080000 	.word	0x40080000
 8004900:	40100000 	.word	0x40100000
 8004904:	40140000 	.word	0x40140000
 8004908:	40180000 	.word	0x40180000
 800490c:	00000000 	.word	0x00000000

08004910 <VtoDegreeCRtd>:
float VtoDegreeCRtd(float Vdata)
{
 8004910:	b5b0      	push	{r4, r5, r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
	//using a y = 366.02x^2 -942.3x +561.55 where x is the ADC voltage and y is the temperature in C
	return (Vdata*Vdata)*366.02 - 942.3*Vdata + 561.55;
 8004918:	6879      	ldr	r1, [r7, #4]
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7fc fa8c 	bl	8000e38 <__aeabi_fmul>
 8004920:	4603      	mov	r3, r0
 8004922:	4618      	mov	r0, r3
 8004924:	f7fb fdfa 	bl	800051c <__aeabi_f2d>
 8004928:	a315      	add	r3, pc, #84	; (adr r3, 8004980 <VtoDegreeCRtd+0x70>)
 800492a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492e:	f7fb fe4d 	bl	80005cc <__aeabi_dmul>
 8004932:	4602      	mov	r2, r0
 8004934:	460b      	mov	r3, r1
 8004936:	4614      	mov	r4, r2
 8004938:	461d      	mov	r5, r3
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7fb fdee 	bl	800051c <__aeabi_f2d>
 8004940:	a311      	add	r3, pc, #68	; (adr r3, 8004988 <VtoDegreeCRtd+0x78>)
 8004942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004946:	f7fb fe41 	bl	80005cc <__aeabi_dmul>
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	4620      	mov	r0, r4
 8004950:	4629      	mov	r1, r5
 8004952:	f7fb fc83 	bl	800025c <__aeabi_dsub>
 8004956:	4602      	mov	r2, r0
 8004958:	460b      	mov	r3, r1
 800495a:	4610      	mov	r0, r2
 800495c:	4619      	mov	r1, r3
 800495e:	a30c      	add	r3, pc, #48	; (adr r3, 8004990 <VtoDegreeCRtd+0x80>)
 8004960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004964:	f7fb fc7c 	bl	8000260 <__adddf3>
 8004968:	4602      	mov	r2, r0
 800496a:	460b      	mov	r3, r1
 800496c:	4610      	mov	r0, r2
 800496e:	4619      	mov	r1, r3
 8004970:	f7fc f904 	bl	8000b7c <__aeabi_d2f>
 8004974:	4603      	mov	r3, r0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bdb0      	pop	{r4, r5, r7, pc}
 800497e:	bf00      	nop
 8004980:	eb851eb8 	.word	0xeb851eb8
 8004984:	4076e051 	.word	0x4076e051
 8004988:	66666666 	.word	0x66666666
 800498c:	408d7266 	.word	0x408d7266
 8004990:	66666666 	.word	0x66666666
 8004994:	40818c66 	.word	0x40818c66

08004998 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4a06      	ldr	r2, [pc, #24]	; (80049c0 <vApplicationGetIdleTaskMemory+0x28>)
 80049a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	4a05      	ldr	r2, [pc, #20]	; (80049c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80049ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2280      	movs	r2, #128	; 0x80
 80049b4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80049b6:	bf00      	nop
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bc80      	pop	{r7}
 80049be:	4770      	bx	lr
 80049c0:	20000fac 	.word	0x20000fac
 80049c4:	20001000 	.word	0x20001000

080049c8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	4a07      	ldr	r2, [pc, #28]	; (80049f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80049d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	4a06      	ldr	r2, [pc, #24]	; (80049f8 <vApplicationGetTimerTaskMemory+0x30>)
 80049de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049e6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80049e8:	bf00      	nop
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bc80      	pop	{r7}
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	20001200 	.word	0x20001200
 80049f8:	20001254 	.word	0x20001254

080049fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80049fc:	b5b0      	push	{r4, r5, r7, lr}
 80049fe:	b090      	sub	sp, #64	; 0x40
 8004a00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004a02:	f001 f9ad 	bl	8005d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004a06:	f000 f863 	bl	8004ad0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004a0a:	f000 f9db 	bl	8004dc4 <MX_GPIO_Init>
  MX_DMA_Init();
 8004a0e:	f000 f9bb 	bl	8004d88 <MX_DMA_Init>
  MX_I2C1_Init();
 8004a12:	f000 f8c3 	bl	8004b9c <MX_I2C1_Init>
  MX_RTC_Init();
 8004a16:	f000 f8ef 	bl	8004bf8 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8004a1a:	f000 f937 	bl	8004c8c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8004a1e:	f000 f989 	bl	8004d34 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8004a22:	f000 f95d 	bl	8004ce0 <MX_USART2_UART_Init>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of Timer */
  osTimerDef(Timer, TimerCallback);
 8004a26:	4b22      	ldr	r3, [pc, #136]	; (8004ab0 <main+0xb4>)
 8004a28:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  TimerHandle = osTimerCreate(osTimer(Timer), osTimerPeriodic, NULL);
 8004a2e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004a32:	2200      	movs	r2, #0
 8004a34:	2101      	movs	r1, #1
 8004a36:	4618      	mov	r0, r3
 8004a38:	f006 fefc 	bl	800b834 <osTimerCreate>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	4a1d      	ldr	r2, [pc, #116]	; (8004ab4 <main+0xb8>)
 8004a40:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	MotorControlsHandle = xMessageBufferCreate(10);
 8004a42:	2201      	movs	r2, #1
 8004a44:	2100      	movs	r1, #0
 8004a46:	200a      	movs	r0, #10
 8004a48:	f007 fcf6 	bl	800c438 <xStreamBufferGenericCreate>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	4a1a      	ldr	r2, [pc, #104]	; (8004ab8 <main+0xbc>)
 8004a50:	6013      	str	r3, [r2, #0]
	MotorInPlaceHandle = xQueueCreate(1, sizeof(bool));
 8004a52:	2200      	movs	r2, #0
 8004a54:	2101      	movs	r1, #1
 8004a56:	2001      	movs	r0, #1
 8004a58:	f007 f8af 	bl	800bbba <xQueueGenericCreate>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	4a17      	ldr	r2, [pc, #92]	; (8004abc <main+0xc0>)
 8004a60:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Algo_task */
  osThreadDef(Algo_task, Algo_Init, osPriorityNormal, 0, 512);
 8004a62:	4b17      	ldr	r3, [pc, #92]	; (8004ac0 <main+0xc4>)
 8004a64:	f107 041c 	add.w	r4, r7, #28
 8004a68:	461d      	mov	r5, r3
 8004a6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a6e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004a72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Algo_taskHandle = osThreadCreate(osThread(Algo_task), NULL);
 8004a76:	f107 031c 	add.w	r3, r7, #28
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f006 fe78 	bl	800b772 <osThreadCreate>
 8004a82:	4603      	mov	r3, r0
 8004a84:	4a0f      	ldr	r2, [pc, #60]	; (8004ac4 <main+0xc8>)
 8004a86:	6013      	str	r3, [r2, #0]

  /* definition and creation of MotorManager */
  osThreadDef(MotorManager, Motor_task, osPriorityAboveNormal, 0, 128);
 8004a88:	4b0f      	ldr	r3, [pc, #60]	; (8004ac8 <main+0xcc>)
 8004a8a:	463c      	mov	r4, r7
 8004a8c:	461d      	mov	r5, r3
 8004a8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a92:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004a96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotorManagerHandle = osThreadCreate(osThread(MotorManager), NULL);
 8004a9a:	463b      	mov	r3, r7
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f006 fe67 	bl	800b772 <osThreadCreate>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	4a09      	ldr	r2, [pc, #36]	; (8004acc <main+0xd0>)
 8004aa8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8004aaa:	f006 fe4b 	bl	800b744 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004aae:	e7fe      	b.n	8004aae <main+0xb2>
 8004ab0:	08004f65 	.word	0x08004f65
 8004ab4:	20003a6c 	.word	0x20003a6c
 8004ab8:	200039f4 	.word	0x200039f4
 8004abc:	200039f0 	.word	0x200039f0
 8004ac0:	08013450 	.word	0x08013450
 8004ac4:	20003a70 	.word	0x20003a70
 8004ac8:	0801346c 	.word	0x0801346c
 8004acc:	20003afc 	.word	0x20003afc

08004ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b09c      	sub	sp, #112	; 0x70
 8004ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004ad6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004ada:	2238      	movs	r2, #56	; 0x38
 8004adc:	2100      	movs	r1, #0
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f00a f874 	bl	800ebcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ae8:	2200      	movs	r2, #0
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	605a      	str	r2, [r3, #4]
 8004aee:	609a      	str	r2, [r3, #8]
 8004af0:	60da      	str	r2, [r3, #12]
 8004af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004af4:	1d3b      	adds	r3, r7, #4
 8004af6:	2220      	movs	r2, #32
 8004af8:	2100      	movs	r1, #0
 8004afa:	4618      	mov	r0, r3
 8004afc:	f00a f866 	bl	800ebcc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004b00:	2309      	movs	r3, #9
 8004b02:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004b04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b08:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004b12:	2301      	movs	r3, #1
 8004b14:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8004b16:	2300      	movs	r3, #0
 8004b18:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004b1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b22:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8004b24:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004b28:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b2e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004b32:	4618      	mov	r0, r3
 8004b34:	f003 ffb8 	bl	8008aa8 <HAL_RCC_OscConfig>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8004b3e:	f000 fa2d 	bl	8004f9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004b42:	230f      	movs	r3, #15
 8004b44:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b46:	2302      	movs	r3, #2
 8004b48:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004b54:	2300      	movs	r3, #0
 8004b56:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f004 fab8 	bl	80090d4 <HAL_RCC_ClockConfig>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8004b6a:	f000 fa17 	bl	8004f9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004b72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b76:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b78:	1d3b      	adds	r3, r7, #4
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f004 fcf8 	bl	8009570 <HAL_RCCEx_PeriphCLKConfig>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8004b86:	f000 fa09 	bl	8004f9c <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8004b8a:	4b03      	ldr	r3, [pc, #12]	; (8004b98 <SystemClock_Config+0xc8>)
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]
}
 8004b90:	bf00      	nop
 8004b92:	3770      	adds	r7, #112	; 0x70
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	42420070 	.word	0x42420070

08004b9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004ba0:	4b12      	ldr	r3, [pc, #72]	; (8004bec <MX_I2C1_Init+0x50>)
 8004ba2:	4a13      	ldr	r2, [pc, #76]	; (8004bf0 <MX_I2C1_Init+0x54>)
 8004ba4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004ba6:	4b11      	ldr	r3, [pc, #68]	; (8004bec <MX_I2C1_Init+0x50>)
 8004ba8:	4a12      	ldr	r2, [pc, #72]	; (8004bf4 <MX_I2C1_Init+0x58>)
 8004baa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004bac:	4b0f      	ldr	r3, [pc, #60]	; (8004bec <MX_I2C1_Init+0x50>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004bb2:	4b0e      	ldr	r3, [pc, #56]	; (8004bec <MX_I2C1_Init+0x50>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004bb8:	4b0c      	ldr	r3, [pc, #48]	; (8004bec <MX_I2C1_Init+0x50>)
 8004bba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004bbe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004bc0:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <MX_I2C1_Init+0x50>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004bc6:	4b09      	ldr	r3, [pc, #36]	; (8004bec <MX_I2C1_Init+0x50>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004bcc:	4b07      	ldr	r3, [pc, #28]	; (8004bec <MX_I2C1_Init+0x50>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004bd2:	4b06      	ldr	r3, [pc, #24]	; (8004bec <MX_I2C1_Init+0x50>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004bd8:	4804      	ldr	r0, [pc, #16]	; (8004bec <MX_I2C1_Init+0x50>)
 8004bda:	f002 f815 	bl	8006c08 <HAL_I2C_Init>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004be4:	f000 f9da 	bl	8004f9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004be8:	bf00      	nop
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	2000399c 	.word	0x2000399c
 8004bf0:	40005400 	.word	0x40005400
 8004bf4:	000186a0 	.word	0x000186a0

08004bf8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004bfe:	1d3b      	adds	r3, r7, #4
 8004c00:	2100      	movs	r1, #0
 8004c02:	460a      	mov	r2, r1
 8004c04:	801a      	strh	r2, [r3, #0]
 8004c06:	460a      	mov	r2, r1
 8004c08:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004c0e:	4b1d      	ldr	r3, [pc, #116]	; (8004c84 <MX_RTC_Init+0x8c>)
 8004c10:	4a1d      	ldr	r2, [pc, #116]	; (8004c88 <MX_RTC_Init+0x90>)
 8004c12:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8004c14:	4b1b      	ldr	r3, [pc, #108]	; (8004c84 <MX_RTC_Init+0x8c>)
 8004c16:	f04f 32ff 	mov.w	r2, #4294967295
 8004c1a:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8004c1c:	4b19      	ldr	r3, [pc, #100]	; (8004c84 <MX_RTC_Init+0x8c>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004c22:	4818      	ldr	r0, [pc, #96]	; (8004c84 <MX_RTC_Init+0x8c>)
 8004c24:	f004 ff3a 	bl	8009a9c <HAL_RTC_Init>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 8004c2e:	f000 f9b5 	bl	8004f9c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8004c32:	2300      	movs	r3, #0
 8004c34:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8004c36:	2300      	movs	r3, #0
 8004c38:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004c3e:	1d3b      	adds	r3, r7, #4
 8004c40:	2201      	movs	r2, #1
 8004c42:	4619      	mov	r1, r3
 8004c44:	480f      	ldr	r0, [pc, #60]	; (8004c84 <MX_RTC_Init+0x8c>)
 8004c46:	f004 ffbf 	bl	8009bc8 <HAL_RTC_SetTime>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8004c50:	f000 f9a4 	bl	8004f9c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004c54:	2301      	movs	r3, #1
 8004c56:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8004c60:	2300      	movs	r3, #0
 8004c62:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8004c64:	463b      	mov	r3, r7
 8004c66:	2201      	movs	r2, #1
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4806      	ldr	r0, [pc, #24]	; (8004c84 <MX_RTC_Init+0x8c>)
 8004c6c:	f005 f844 	bl	8009cf8 <HAL_RTC_SetDate>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8004c76:	f000 f991 	bl	8004f9c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004c7a:	bf00      	nop
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	20003a74 	.word	0x20003a74
 8004c88:	40002800 	.word	0x40002800

08004c8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004c90:	4b11      	ldr	r3, [pc, #68]	; (8004cd8 <MX_USART1_UART_Init+0x4c>)
 8004c92:	4a12      	ldr	r2, [pc, #72]	; (8004cdc <MX_USART1_UART_Init+0x50>)
 8004c94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004c96:	4b10      	ldr	r3, [pc, #64]	; (8004cd8 <MX_USART1_UART_Init+0x4c>)
 8004c98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004c9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004c9e:	4b0e      	ldr	r3, [pc, #56]	; (8004cd8 <MX_USART1_UART_Init+0x4c>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004ca4:	4b0c      	ldr	r3, [pc, #48]	; (8004cd8 <MX_USART1_UART_Init+0x4c>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004caa:	4b0b      	ldr	r3, [pc, #44]	; (8004cd8 <MX_USART1_UART_Init+0x4c>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004cb0:	4b09      	ldr	r3, [pc, #36]	; (8004cd8 <MX_USART1_UART_Init+0x4c>)
 8004cb2:	220c      	movs	r2, #12
 8004cb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004cb6:	4b08      	ldr	r3, [pc, #32]	; (8004cd8 <MX_USART1_UART_Init+0x4c>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004cbc:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <MX_USART1_UART_Init+0x4c>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004cc2:	4805      	ldr	r0, [pc, #20]	; (8004cd8 <MX_USART1_UART_Init+0x4c>)
 8004cc4:	f005 fcd4 	bl	800a670 <HAL_UART_Init>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004cce:	f000 f965 	bl	8004f9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004cd2:	bf00      	nop
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	200039f8 	.word	0x200039f8
 8004cdc:	40013800 	.word	0x40013800

08004ce0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004ce4:	4b11      	ldr	r3, [pc, #68]	; (8004d2c <MX_USART2_UART_Init+0x4c>)
 8004ce6:	4a12      	ldr	r2, [pc, #72]	; (8004d30 <MX_USART2_UART_Init+0x50>)
 8004ce8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004cea:	4b10      	ldr	r3, [pc, #64]	; (8004d2c <MX_USART2_UART_Init+0x4c>)
 8004cec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004cf0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004cf2:	4b0e      	ldr	r3, [pc, #56]	; (8004d2c <MX_USART2_UART_Init+0x4c>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004cf8:	4b0c      	ldr	r3, [pc, #48]	; (8004d2c <MX_USART2_UART_Init+0x4c>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004cfe:	4b0b      	ldr	r3, [pc, #44]	; (8004d2c <MX_USART2_UART_Init+0x4c>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004d04:	4b09      	ldr	r3, [pc, #36]	; (8004d2c <MX_USART2_UART_Init+0x4c>)
 8004d06:	220c      	movs	r2, #12
 8004d08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d0a:	4b08      	ldr	r3, [pc, #32]	; (8004d2c <MX_USART2_UART_Init+0x4c>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d10:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <MX_USART2_UART_Init+0x4c>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004d16:	4805      	ldr	r0, [pc, #20]	; (8004d2c <MX_USART2_UART_Init+0x4c>)
 8004d18:	f005 fcaa 	bl	800a670 <HAL_UART_Init>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004d22:	f000 f93b 	bl	8004f9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004d26:	bf00      	nop
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	20003a88 	.word	0x20003a88
 8004d30:	40004400 	.word	0x40004400

08004d34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004d38:	4b11      	ldr	r3, [pc, #68]	; (8004d80 <MX_USART3_UART_Init+0x4c>)
 8004d3a:	4a12      	ldr	r2, [pc, #72]	; (8004d84 <MX_USART3_UART_Init+0x50>)
 8004d3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8004d3e:	4b10      	ldr	r3, [pc, #64]	; (8004d80 <MX_USART3_UART_Init+0x4c>)
 8004d40:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8004d44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004d46:	4b0e      	ldr	r3, [pc, #56]	; (8004d80 <MX_USART3_UART_Init+0x4c>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004d4c:	4b0c      	ldr	r3, [pc, #48]	; (8004d80 <MX_USART3_UART_Init+0x4c>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004d52:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <MX_USART3_UART_Init+0x4c>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004d58:	4b09      	ldr	r3, [pc, #36]	; (8004d80 <MX_USART3_UART_Init+0x4c>)
 8004d5a:	220c      	movs	r2, #12
 8004d5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d5e:	4b08      	ldr	r3, [pc, #32]	; (8004d80 <MX_USART3_UART_Init+0x4c>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d64:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <MX_USART3_UART_Init+0x4c>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004d6a:	4805      	ldr	r0, [pc, #20]	; (8004d80 <MX_USART3_UART_Init+0x4c>)
 8004d6c:	f005 fc80 	bl	800a670 <HAL_UART_Init>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004d76:	f000 f911 	bl	8004f9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004d7a:	bf00      	nop
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	20003928 	.word	0x20003928
 8004d84:	40004800 	.word	0x40004800

08004d88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004d8e:	4b0c      	ldr	r3, [pc, #48]	; (8004dc0 <MX_DMA_Init+0x38>)
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	4a0b      	ldr	r2, [pc, #44]	; (8004dc0 <MX_DMA_Init+0x38>)
 8004d94:	f043 0301 	orr.w	r3, r3, #1
 8004d98:	6153      	str	r3, [r2, #20]
 8004d9a:	4b09      	ldr	r3, [pc, #36]	; (8004dc0 <MX_DMA_Init+0x38>)
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	607b      	str	r3, [r7, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8004da6:	2200      	movs	r2, #0
 8004da8:	2105      	movs	r1, #5
 8004daa:	2010      	movs	r0, #16
 8004dac:	f001 f8bf 	bl	8005f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8004db0:	2010      	movs	r0, #16
 8004db2:	f001 f8d8 	bl	8005f66 <HAL_NVIC_EnableIRQ>

}
 8004db6:	bf00      	nop
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	40021000 	.word	0x40021000

08004dc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b088      	sub	sp, #32
 8004dc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dca:	f107 0310 	add.w	r3, r7, #16
 8004dce:	2200      	movs	r2, #0
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	605a      	str	r2, [r3, #4]
 8004dd4:	609a      	str	r2, [r3, #8]
 8004dd6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dd8:	4b5d      	ldr	r3, [pc, #372]	; (8004f50 <MX_GPIO_Init+0x18c>)
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	4a5c      	ldr	r2, [pc, #368]	; (8004f50 <MX_GPIO_Init+0x18c>)
 8004dde:	f043 0310 	orr.w	r3, r3, #16
 8004de2:	6193      	str	r3, [r2, #24]
 8004de4:	4b5a      	ldr	r3, [pc, #360]	; (8004f50 <MX_GPIO_Init+0x18c>)
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	f003 0310 	and.w	r3, r3, #16
 8004dec:	60fb      	str	r3, [r7, #12]
 8004dee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004df0:	4b57      	ldr	r3, [pc, #348]	; (8004f50 <MX_GPIO_Init+0x18c>)
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	4a56      	ldr	r2, [pc, #344]	; (8004f50 <MX_GPIO_Init+0x18c>)
 8004df6:	f043 0320 	orr.w	r3, r3, #32
 8004dfa:	6193      	str	r3, [r2, #24]
 8004dfc:	4b54      	ldr	r3, [pc, #336]	; (8004f50 <MX_GPIO_Init+0x18c>)
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	f003 0320 	and.w	r3, r3, #32
 8004e04:	60bb      	str	r3, [r7, #8]
 8004e06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e08:	4b51      	ldr	r3, [pc, #324]	; (8004f50 <MX_GPIO_Init+0x18c>)
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	4a50      	ldr	r2, [pc, #320]	; (8004f50 <MX_GPIO_Init+0x18c>)
 8004e0e:	f043 0304 	orr.w	r3, r3, #4
 8004e12:	6193      	str	r3, [r2, #24]
 8004e14:	4b4e      	ldr	r3, [pc, #312]	; (8004f50 <MX_GPIO_Init+0x18c>)
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	f003 0304 	and.w	r3, r3, #4
 8004e1c:	607b      	str	r3, [r7, #4]
 8004e1e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e20:	4b4b      	ldr	r3, [pc, #300]	; (8004f50 <MX_GPIO_Init+0x18c>)
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	4a4a      	ldr	r2, [pc, #296]	; (8004f50 <MX_GPIO_Init+0x18c>)
 8004e26:	f043 0308 	orr.w	r3, r3, #8
 8004e2a:	6193      	str	r3, [r2, #24]
 8004e2c:	4b48      	ldr	r3, [pc, #288]	; (8004f50 <MX_GPIO_Init+0x18c>)
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	f003 0308 	and.w	r3, r3, #8
 8004e34:	603b      	str	r3, [r7, #0]
 8004e36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Step2_LowCurrent_Pin|uc_Stepper_Sleep_Pin|SPEED2_COIL_Pin|SPEED3_COIL_Pin
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f242 71d0 	movw	r1, #10192	; 0x27d0
 8004e3e:	4845      	ldr	r0, [pc, #276]	; (8004f54 <MX_GPIO_Init+0x190>)
 8004e40:	f001 fec9 	bl	8006bd6 <HAL_GPIO_WritePin>
                          |Step2_DIR_Pin|Step1_LowCurrent_Pin|Step2_STEP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Step3_RESET_Pin|STATUS_LED1_Pin|Step3_ENABLE_Pin|Step2_RESET_Pin
 8004e44:	2201      	movs	r2, #1
 8004e46:	f641 012c 	movw	r1, #6188	; 0x182c
 8004e4a:	4842      	ldr	r0, [pc, #264]	; (8004f54 <MX_GPIO_Init+0x190>)
 8004e4c:	f001 fec3 	bl	8006bd6 <HAL_GPIO_WritePin>
                          |Step2_ENABLE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_ON_Pin|AFK_Var_Pin|USB_ENABLE_Pin, GPIO_PIN_RESET);
 8004e50:	2200      	movs	r2, #0
 8004e52:	f248 0182 	movw	r1, #32898	; 0x8082
 8004e56:	4840      	ldr	r0, [pc, #256]	; (8004f58 <MX_GPIO_Init+0x194>)
 8004e58:	f001 febd 	bl	8006bd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STATUS_LED2_Pin|Step3_DIR_Pin|Button_LED_Pin, GPIO_PIN_SET);
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f44f 7198 	mov.w	r1, #304	; 0x130
 8004e62:	483d      	ldr	r0, [pc, #244]	; (8004f58 <MX_GPIO_Init+0x194>)
 8004e64:	f001 feb7 	bl	8006bd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Step3_STEP_Pin|Step3_LowCurrent_Pin|Stepper_HalfStep_Pin|Step1_STEP_Pin, GPIO_PIN_RESET);
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f248 010e 	movw	r1, #32782	; 0x800e
 8004e6e:	483b      	ldr	r0, [pc, #236]	; (8004f5c <MX_GPIO_Init+0x198>)
 8004e70:	f001 feb1 	bl	8006bd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Step1_DIR_GPIO_Port, Step1_DIR_Pin, GPIO_PIN_RESET);
 8004e74:	2200      	movs	r2, #0
 8004e76:	2104      	movs	r1, #4
 8004e78:	4839      	ldr	r0, [pc, #228]	; (8004f60 <MX_GPIO_Init+0x19c>)
 8004e7a:	f001 feac 	bl	8006bd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Step1_RESET_Pin|Step1_ENABLE_Pin, GPIO_PIN_SET);
 8004e7e:	2201      	movs	r2, #1
 8004e80:	2130      	movs	r1, #48	; 0x30
 8004e82:	4836      	ldr	r0, [pc, #216]	; (8004f5c <MX_GPIO_Init+0x198>)
 8004e84:	f001 fea7 	bl	8006bd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Step2_LowCurrent_Pin Step3_RESET_Pin STATUS_LED1_Pin uc_Stepper_Sleep_Pin
                           Step3_ENABLE_Pin SPEED2_COIL_Pin SPEED3_COIL_Pin Step2_DIR_Pin
                           Step1_LowCurrent_Pin Step2_STEP_Pin Step2_RESET_Pin Step2_ENABLE_Pin */
  GPIO_InitStruct.Pin = Step2_LowCurrent_Pin|Step3_RESET_Pin|STATUS_LED1_Pin|uc_Stepper_Sleep_Pin
 8004e88:	f643 73fc 	movw	r3, #16380	; 0x3ffc
 8004e8c:	613b      	str	r3, [r7, #16]
                          |Step3_ENABLE_Pin|SPEED2_COIL_Pin|SPEED3_COIL_Pin|Step2_DIR_Pin
                          |Step1_LowCurrent_Pin|Step2_STEP_Pin|Step2_RESET_Pin|Step2_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e92:	2300      	movs	r3, #0
 8004e94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e96:	2302      	movs	r3, #2
 8004e98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e9a:	f107 0310 	add.w	r3, r7, #16
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	482c      	ldr	r0, [pc, #176]	; (8004f54 <MX_GPIO_Init+0x190>)
 8004ea2:	f001 fcfd 	bl	80068a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_switch1_Pin Limit_switch2_Pin */
  GPIO_InitStruct.Pin = Limit_switch1_Pin|Limit_switch2_Pin;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004eb2:	f107 0310 	add.w	r3, r7, #16
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	4826      	ldr	r0, [pc, #152]	; (8004f54 <MX_GPIO_Init+0x190>)
 8004eba:	f001 fcf1 	bl	80068a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_ON_Pin STATUS_LED2_Pin Step3_DIR_Pin AFK_Var_Pin
                           Button_LED_Pin USB_ENABLE_Pin */
  GPIO_InitStruct.Pin = Buzzer_ON_Pin|STATUS_LED2_Pin|Step3_DIR_Pin|AFK_Var_Pin
 8004ebe:	f248 13b2 	movw	r3, #33202	; 0x81b2
 8004ec2:	613b      	str	r3, [r7, #16]
                          |Button_LED_Pin|USB_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ecc:	2302      	movs	r3, #2
 8004ece:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ed0:	f107 0310 	add.w	r3, r7, #16
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	4820      	ldr	r0, [pc, #128]	; (8004f58 <MX_GPIO_Init+0x194>)
 8004ed8:	f001 fce2 	bl	80068a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Limit_switch3_Pin */
  GPIO_InitStruct.Pin = Limit_switch3_Pin;
 8004edc:	2340      	movs	r3, #64	; 0x40
 8004ede:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Limit_switch3_GPIO_Port, &GPIO_InitStruct);
 8004ee8:	f107 0310 	add.w	r3, r7, #16
 8004eec:	4619      	mov	r1, r3
 8004eee:	481a      	ldr	r0, [pc, #104]	; (8004f58 <MX_GPIO_Init+0x194>)
 8004ef0:	f001 fcd6 	bl	80068a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_switch_Door_Pin Thermostat_Input_Pin Safety_ON_Pin Interlock_Input_Pin
                           Button_Input_Pin USB_Fault_Pin */
  GPIO_InitStruct.Pin = Limit_switch_Door_Pin|Thermostat_Input_Pin|Safety_ON_Pin|Interlock_Input_Pin
 8004ef4:	f247 3301 	movw	r3, #29441	; 0x7301
 8004ef8:	613b      	str	r3, [r7, #16]
                          |Button_Input_Pin|USB_Fault_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004efa:	2300      	movs	r3, #0
 8004efc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004efe:	2300      	movs	r3, #0
 8004f00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f02:	f107 0310 	add.w	r3, r7, #16
 8004f06:	4619      	mov	r1, r3
 8004f08:	4814      	ldr	r0, [pc, #80]	; (8004f5c <MX_GPIO_Init+0x198>)
 8004f0a:	f001 fcc9 	bl	80068a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Step3_STEP_Pin Step3_LowCurrent_Pin Stepper_HalfStep_Pin Step1_STEP_Pin
                           Step1_RESET_Pin Step1_ENABLE_Pin */
  GPIO_InitStruct.Pin = Step3_STEP_Pin|Step3_LowCurrent_Pin|Stepper_HalfStep_Pin|Step1_STEP_Pin
 8004f0e:	f248 033e 	movw	r3, #32830	; 0x803e
 8004f12:	613b      	str	r3, [r7, #16]
                          |Step1_RESET_Pin|Step1_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f14:	2301      	movs	r3, #1
 8004f16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f20:	f107 0310 	add.w	r3, r7, #16
 8004f24:	4619      	mov	r1, r3
 8004f26:	480d      	ldr	r0, [pc, #52]	; (8004f5c <MX_GPIO_Init+0x198>)
 8004f28:	f001 fcba 	bl	80068a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Step1_DIR_Pin */
  GPIO_InitStruct.Pin = Step1_DIR_Pin;
 8004f2c:	2304      	movs	r3, #4
 8004f2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f30:	2301      	movs	r3, #1
 8004f32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f34:	2300      	movs	r3, #0
 8004f36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f38:	2302      	movs	r3, #2
 8004f3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Step1_DIR_GPIO_Port, &GPIO_InitStruct);
 8004f3c:	f107 0310 	add.w	r3, r7, #16
 8004f40:	4619      	mov	r1, r3
 8004f42:	4807      	ldr	r0, [pc, #28]	; (8004f60 <MX_GPIO_Init+0x19c>)
 8004f44:	f001 fcac 	bl	80068a0 <HAL_GPIO_Init>

}
 8004f48:	bf00      	nop
 8004f4a:	3720      	adds	r7, #32
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	40021000 	.word	0x40021000
 8004f54:	40011000 	.word	0x40011000
 8004f58:	40010800 	.word	0x40010800
 8004f5c:	40010c00 	.word	0x40010c00
 8004f60:	40011400 	.word	0x40011400

08004f64 <TimerCallback>:
  /* USER CODE END 5 */
}

/* TimerCallback function */
void TimerCallback(void const * argument)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TimerCallback */

  /* USER CODE END TimerCallback */
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bc80      	pop	{r7}
 8004f74:	4770      	bx	lr
	...

08004f78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a04      	ldr	r2, [pc, #16]	; (8004f98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d101      	bne.n	8004f8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004f8a:	f000 feff 	bl	8005d8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004f8e:	bf00      	nop
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	40012c00 	.word	0x40012c00

08004f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004fa0:	b672      	cpsid	i
}
 8004fa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004fa4:	e7fe      	b.n	8004fa4 <Error_Handler+0x8>
	...

08004fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004fae:	4b18      	ldr	r3, [pc, #96]	; (8005010 <HAL_MspInit+0x68>)
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	4a17      	ldr	r2, [pc, #92]	; (8005010 <HAL_MspInit+0x68>)
 8004fb4:	f043 0301 	orr.w	r3, r3, #1
 8004fb8:	6193      	str	r3, [r2, #24]
 8004fba:	4b15      	ldr	r3, [pc, #84]	; (8005010 <HAL_MspInit+0x68>)
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	60bb      	str	r3, [r7, #8]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fc6:	4b12      	ldr	r3, [pc, #72]	; (8005010 <HAL_MspInit+0x68>)
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	4a11      	ldr	r2, [pc, #68]	; (8005010 <HAL_MspInit+0x68>)
 8004fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fd0:	61d3      	str	r3, [r2, #28]
 8004fd2:	4b0f      	ldr	r3, [pc, #60]	; (8005010 <HAL_MspInit+0x68>)
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fda:	607b      	str	r3, [r7, #4]
 8004fdc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004fde:	2200      	movs	r2, #0
 8004fe0:	210f      	movs	r1, #15
 8004fe2:	f06f 0001 	mvn.w	r0, #1
 8004fe6:	f000 ffa2 	bl	8005f2e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004fea:	4b0a      	ldr	r3, [pc, #40]	; (8005014 <HAL_MspInit+0x6c>)
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	4a04      	ldr	r2, [pc, #16]	; (8005014 <HAL_MspInit+0x6c>)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005006:	bf00      	nop
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	40021000 	.word	0x40021000
 8005014:	40010000 	.word	0x40010000

08005018 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b088      	sub	sp, #32
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005020:	f107 0310 	add.w	r3, r7, #16
 8005024:	2200      	movs	r2, #0
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	605a      	str	r2, [r3, #4]
 800502a:	609a      	str	r2, [r3, #8]
 800502c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a1d      	ldr	r2, [pc, #116]	; (80050a8 <HAL_I2C_MspInit+0x90>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d133      	bne.n	80050a0 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005038:	4b1c      	ldr	r3, [pc, #112]	; (80050ac <HAL_I2C_MspInit+0x94>)
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	4a1b      	ldr	r2, [pc, #108]	; (80050ac <HAL_I2C_MspInit+0x94>)
 800503e:	f043 0308 	orr.w	r3, r3, #8
 8005042:	6193      	str	r3, [r2, #24]
 8005044:	4b19      	ldr	r3, [pc, #100]	; (80050ac <HAL_I2C_MspInit+0x94>)
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	f003 0308 	and.w	r3, r3, #8
 800504c:	60fb      	str	r3, [r7, #12]
 800504e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 8005050:	23c0      	movs	r3, #192	; 0xc0
 8005052:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005054:	2312      	movs	r3, #18
 8005056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005058:	2303      	movs	r3, #3
 800505a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800505c:	f107 0310 	add.w	r3, r7, #16
 8005060:	4619      	mov	r1, r3
 8005062:	4813      	ldr	r0, [pc, #76]	; (80050b0 <HAL_I2C_MspInit+0x98>)
 8005064:	f001 fc1c 	bl	80068a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005068:	4b10      	ldr	r3, [pc, #64]	; (80050ac <HAL_I2C_MspInit+0x94>)
 800506a:	69db      	ldr	r3, [r3, #28]
 800506c:	4a0f      	ldr	r2, [pc, #60]	; (80050ac <HAL_I2C_MspInit+0x94>)
 800506e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005072:	61d3      	str	r3, [r2, #28]
 8005074:	4b0d      	ldr	r3, [pc, #52]	; (80050ac <HAL_I2C_MspInit+0x94>)
 8005076:	69db      	ldr	r3, [r3, #28]
 8005078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800507c:	60bb      	str	r3, [r7, #8]
 800507e:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8005080:	2200      	movs	r2, #0
 8005082:	2105      	movs	r1, #5
 8005084:	201f      	movs	r0, #31
 8005086:	f000 ff52 	bl	8005f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800508a:	201f      	movs	r0, #31
 800508c:	f000 ff6b 	bl	8005f66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8005090:	2200      	movs	r2, #0
 8005092:	2105      	movs	r1, #5
 8005094:	2020      	movs	r0, #32
 8005096:	f000 ff4a 	bl	8005f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800509a:	2020      	movs	r0, #32
 800509c:	f000 ff63 	bl	8005f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80050a0:	bf00      	nop
 80050a2:	3720      	adds	r7, #32
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	40005400 	.word	0x40005400
 80050ac:	40021000 	.word	0x40021000
 80050b0:	40010c00 	.word	0x40010c00

080050b4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a0b      	ldr	r2, [pc, #44]	; (80050f0 <HAL_RTC_MspInit+0x3c>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d110      	bne.n	80050e8 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80050c6:	f003 fce3 	bl	8008a90 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80050ca:	4b0a      	ldr	r3, [pc, #40]	; (80050f4 <HAL_RTC_MspInit+0x40>)
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	4a09      	ldr	r2, [pc, #36]	; (80050f4 <HAL_RTC_MspInit+0x40>)
 80050d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050d4:	61d3      	str	r3, [r2, #28]
 80050d6:	4b07      	ldr	r3, [pc, #28]	; (80050f4 <HAL_RTC_MspInit+0x40>)
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80050e2:	4b05      	ldr	r3, [pc, #20]	; (80050f8 <HAL_RTC_MspInit+0x44>)
 80050e4:	2201      	movs	r2, #1
 80050e6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80050e8:	bf00      	nop
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	40002800 	.word	0x40002800
 80050f4:	40021000 	.word	0x40021000
 80050f8:	4242043c 	.word	0x4242043c

080050fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b08c      	sub	sp, #48	; 0x30
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005104:	f107 0320 	add.w	r3, r7, #32
 8005108:	2200      	movs	r2, #0
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	605a      	str	r2, [r3, #4]
 800510e:	609a      	str	r2, [r3, #8]
 8005110:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a72      	ldr	r2, [pc, #456]	; (80052e0 <HAL_UART_MspInit+0x1e4>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d13a      	bne.n	8005192 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800511c:	4b71      	ldr	r3, [pc, #452]	; (80052e4 <HAL_UART_MspInit+0x1e8>)
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	4a70      	ldr	r2, [pc, #448]	; (80052e4 <HAL_UART_MspInit+0x1e8>)
 8005122:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005126:	6193      	str	r3, [r2, #24]
 8005128:	4b6e      	ldr	r3, [pc, #440]	; (80052e4 <HAL_UART_MspInit+0x1e8>)
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005130:	61fb      	str	r3, [r7, #28]
 8005132:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005134:	4b6b      	ldr	r3, [pc, #428]	; (80052e4 <HAL_UART_MspInit+0x1e8>)
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	4a6a      	ldr	r2, [pc, #424]	; (80052e4 <HAL_UART_MspInit+0x1e8>)
 800513a:	f043 0304 	orr.w	r3, r3, #4
 800513e:	6193      	str	r3, [r2, #24]
 8005140:	4b68      	ldr	r3, [pc, #416]	; (80052e4 <HAL_UART_MspInit+0x1e8>)
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	f003 0304 	and.w	r3, r3, #4
 8005148:	61bb      	str	r3, [r7, #24]
 800514a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800514c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005152:	2302      	movs	r3, #2
 8005154:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005156:	2303      	movs	r3, #3
 8005158:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800515a:	f107 0320 	add.w	r3, r7, #32
 800515e:	4619      	mov	r1, r3
 8005160:	4861      	ldr	r0, [pc, #388]	; (80052e8 <HAL_UART_MspInit+0x1ec>)
 8005162:	f001 fb9d 	bl	80068a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800516a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800516c:	2300      	movs	r3, #0
 800516e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005170:	2300      	movs	r3, #0
 8005172:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005174:	f107 0320 	add.w	r3, r7, #32
 8005178:	4619      	mov	r1, r3
 800517a:	485b      	ldr	r0, [pc, #364]	; (80052e8 <HAL_UART_MspInit+0x1ec>)
 800517c:	f001 fb90 	bl	80068a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005180:	2200      	movs	r2, #0
 8005182:	2105      	movs	r1, #5
 8005184:	2025      	movs	r0, #37	; 0x25
 8005186:	f000 fed2 	bl	8005f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800518a:	2025      	movs	r0, #37	; 0x25
 800518c:	f000 feeb 	bl	8005f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005190:	e0a2      	b.n	80052d8 <HAL_UART_MspInit+0x1dc>
  else if(huart->Instance==USART2)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a55      	ldr	r2, [pc, #340]	; (80052ec <HAL_UART_MspInit+0x1f0>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d15e      	bne.n	800525a <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800519c:	4b51      	ldr	r3, [pc, #324]	; (80052e4 <HAL_UART_MspInit+0x1e8>)
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	4a50      	ldr	r2, [pc, #320]	; (80052e4 <HAL_UART_MspInit+0x1e8>)
 80051a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051a6:	61d3      	str	r3, [r2, #28]
 80051a8:	4b4e      	ldr	r3, [pc, #312]	; (80052e4 <HAL_UART_MspInit+0x1e8>)
 80051aa:	69db      	ldr	r3, [r3, #28]
 80051ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b0:	617b      	str	r3, [r7, #20]
 80051b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051b4:	4b4b      	ldr	r3, [pc, #300]	; (80052e4 <HAL_UART_MspInit+0x1e8>)
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	4a4a      	ldr	r2, [pc, #296]	; (80052e4 <HAL_UART_MspInit+0x1e8>)
 80051ba:	f043 0304 	orr.w	r3, r3, #4
 80051be:	6193      	str	r3, [r2, #24]
 80051c0:	4b48      	ldr	r3, [pc, #288]	; (80052e4 <HAL_UART_MspInit+0x1e8>)
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	613b      	str	r3, [r7, #16]
 80051ca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80051cc:	2304      	movs	r3, #4
 80051ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051d0:	2302      	movs	r3, #2
 80051d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80051d4:	2303      	movs	r3, #3
 80051d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051d8:	f107 0320 	add.w	r3, r7, #32
 80051dc:	4619      	mov	r1, r3
 80051de:	4842      	ldr	r0, [pc, #264]	; (80052e8 <HAL_UART_MspInit+0x1ec>)
 80051e0:	f001 fb5e 	bl	80068a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80051e4:	2308      	movs	r3, #8
 80051e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051e8:	2300      	movs	r3, #0
 80051ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ec:	2300      	movs	r3, #0
 80051ee:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051f0:	f107 0320 	add.w	r3, r7, #32
 80051f4:	4619      	mov	r1, r3
 80051f6:	483c      	ldr	r0, [pc, #240]	; (80052e8 <HAL_UART_MspInit+0x1ec>)
 80051f8:	f001 fb52 	bl	80068a0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80051fc:	4b3c      	ldr	r3, [pc, #240]	; (80052f0 <HAL_UART_MspInit+0x1f4>)
 80051fe:	4a3d      	ldr	r2, [pc, #244]	; (80052f4 <HAL_UART_MspInit+0x1f8>)
 8005200:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005202:	4b3b      	ldr	r3, [pc, #236]	; (80052f0 <HAL_UART_MspInit+0x1f4>)
 8005204:	2200      	movs	r2, #0
 8005206:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005208:	4b39      	ldr	r3, [pc, #228]	; (80052f0 <HAL_UART_MspInit+0x1f4>)
 800520a:	2200      	movs	r2, #0
 800520c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800520e:	4b38      	ldr	r3, [pc, #224]	; (80052f0 <HAL_UART_MspInit+0x1f4>)
 8005210:	2280      	movs	r2, #128	; 0x80
 8005212:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005214:	4b36      	ldr	r3, [pc, #216]	; (80052f0 <HAL_UART_MspInit+0x1f4>)
 8005216:	2200      	movs	r2, #0
 8005218:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800521a:	4b35      	ldr	r3, [pc, #212]	; (80052f0 <HAL_UART_MspInit+0x1f4>)
 800521c:	2200      	movs	r2, #0
 800521e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8005220:	4b33      	ldr	r3, [pc, #204]	; (80052f0 <HAL_UART_MspInit+0x1f4>)
 8005222:	2220      	movs	r2, #32
 8005224:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005226:	4b32      	ldr	r3, [pc, #200]	; (80052f0 <HAL_UART_MspInit+0x1f4>)
 8005228:	2200      	movs	r2, #0
 800522a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800522c:	4830      	ldr	r0, [pc, #192]	; (80052f0 <HAL_UART_MspInit+0x1f4>)
 800522e:	f000 fea9 	bl	8005f84 <HAL_DMA_Init>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d001      	beq.n	800523c <HAL_UART_MspInit+0x140>
      Error_Handler();
 8005238:	f7ff feb0 	bl	8004f9c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a2c      	ldr	r2, [pc, #176]	; (80052f0 <HAL_UART_MspInit+0x1f4>)
 8005240:	639a      	str	r2, [r3, #56]	; 0x38
 8005242:	4a2b      	ldr	r2, [pc, #172]	; (80052f0 <HAL_UART_MspInit+0x1f4>)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8005248:	2200      	movs	r2, #0
 800524a:	2105      	movs	r1, #5
 800524c:	2026      	movs	r0, #38	; 0x26
 800524e:	f000 fe6e 	bl	8005f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005252:	2026      	movs	r0, #38	; 0x26
 8005254:	f000 fe87 	bl	8005f66 <HAL_NVIC_EnableIRQ>
}
 8005258:	e03e      	b.n	80052d8 <HAL_UART_MspInit+0x1dc>
  else if(huart->Instance==USART3)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a26      	ldr	r2, [pc, #152]	; (80052f8 <HAL_UART_MspInit+0x1fc>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d139      	bne.n	80052d8 <HAL_UART_MspInit+0x1dc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005264:	4b1f      	ldr	r3, [pc, #124]	; (80052e4 <HAL_UART_MspInit+0x1e8>)
 8005266:	69db      	ldr	r3, [r3, #28]
 8005268:	4a1e      	ldr	r2, [pc, #120]	; (80052e4 <HAL_UART_MspInit+0x1e8>)
 800526a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800526e:	61d3      	str	r3, [r2, #28]
 8005270:	4b1c      	ldr	r3, [pc, #112]	; (80052e4 <HAL_UART_MspInit+0x1e8>)
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005278:	60fb      	str	r3, [r7, #12]
 800527a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800527c:	4b19      	ldr	r3, [pc, #100]	; (80052e4 <HAL_UART_MspInit+0x1e8>)
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	4a18      	ldr	r2, [pc, #96]	; (80052e4 <HAL_UART_MspInit+0x1e8>)
 8005282:	f043 0308 	orr.w	r3, r3, #8
 8005286:	6193      	str	r3, [r2, #24]
 8005288:	4b16      	ldr	r3, [pc, #88]	; (80052e4 <HAL_UART_MspInit+0x1e8>)
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	f003 0308 	and.w	r3, r3, #8
 8005290:	60bb      	str	r3, [r7, #8]
 8005292:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800529a:	2302      	movs	r3, #2
 800529c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800529e:	2303      	movs	r3, #3
 80052a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052a2:	f107 0320 	add.w	r3, r7, #32
 80052a6:	4619      	mov	r1, r3
 80052a8:	4814      	ldr	r0, [pc, #80]	; (80052fc <HAL_UART_MspInit+0x200>)
 80052aa:	f001 faf9 	bl	80068a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80052ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80052b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80052b4:	2300      	movs	r3, #0
 80052b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052b8:	2300      	movs	r3, #0
 80052ba:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052bc:	f107 0320 	add.w	r3, r7, #32
 80052c0:	4619      	mov	r1, r3
 80052c2:	480e      	ldr	r0, [pc, #56]	; (80052fc <HAL_UART_MspInit+0x200>)
 80052c4:	f001 faec 	bl	80068a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80052c8:	2200      	movs	r2, #0
 80052ca:	2105      	movs	r1, #5
 80052cc:	2027      	movs	r0, #39	; 0x27
 80052ce:	f000 fe2e 	bl	8005f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80052d2:	2027      	movs	r0, #39	; 0x27
 80052d4:	f000 fe47 	bl	8005f66 <HAL_NVIC_EnableIRQ>
}
 80052d8:	bf00      	nop
 80052da:	3730      	adds	r7, #48	; 0x30
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	40013800 	.word	0x40013800
 80052e4:	40021000 	.word	0x40021000
 80052e8:	40010800 	.word	0x40010800
 80052ec:	40004400 	.word	0x40004400
 80052f0:	200038e4 	.word	0x200038e4
 80052f4:	4002006c 	.word	0x4002006c
 80052f8:	40004800 	.word	0x40004800
 80052fc:	40010c00 	.word	0x40010c00

08005300 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b08c      	sub	sp, #48	; 0x30
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005308:	2300      	movs	r3, #0
 800530a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800530c:	2300      	movs	r3, #0
 800530e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8005310:	2200      	movs	r2, #0
 8005312:	6879      	ldr	r1, [r7, #4]
 8005314:	2019      	movs	r0, #25
 8005316:	f000 fe0a 	bl	8005f2e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800531a:	2019      	movs	r0, #25
 800531c:	f000 fe23 	bl	8005f66 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005320:	4b1e      	ldr	r3, [pc, #120]	; (800539c <HAL_InitTick+0x9c>)
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	4a1d      	ldr	r2, [pc, #116]	; (800539c <HAL_InitTick+0x9c>)
 8005326:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800532a:	6193      	str	r3, [r2, #24]
 800532c:	4b1b      	ldr	r3, [pc, #108]	; (800539c <HAL_InitTick+0x9c>)
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005338:	f107 0210 	add.w	r2, r7, #16
 800533c:	f107 0314 	add.w	r3, r7, #20
 8005340:	4611      	mov	r1, r2
 8005342:	4618      	mov	r0, r3
 8005344:	f004 f8c6 	bl	80094d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005348:	f004 f8b0 	bl	80094ac <HAL_RCC_GetPCLK2Freq>
 800534c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800534e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005350:	4a13      	ldr	r2, [pc, #76]	; (80053a0 <HAL_InitTick+0xa0>)
 8005352:	fba2 2303 	umull	r2, r3, r2, r3
 8005356:	0c9b      	lsrs	r3, r3, #18
 8005358:	3b01      	subs	r3, #1
 800535a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800535c:	4b11      	ldr	r3, [pc, #68]	; (80053a4 <HAL_InitTick+0xa4>)
 800535e:	4a12      	ldr	r2, [pc, #72]	; (80053a8 <HAL_InitTick+0xa8>)
 8005360:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8005362:	4b10      	ldr	r3, [pc, #64]	; (80053a4 <HAL_InitTick+0xa4>)
 8005364:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005368:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800536a:	4a0e      	ldr	r2, [pc, #56]	; (80053a4 <HAL_InitTick+0xa4>)
 800536c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005370:	4b0c      	ldr	r3, [pc, #48]	; (80053a4 <HAL_InitTick+0xa4>)
 8005372:	2200      	movs	r2, #0
 8005374:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005376:	4b0b      	ldr	r3, [pc, #44]	; (80053a4 <HAL_InitTick+0xa4>)
 8005378:	2200      	movs	r2, #0
 800537a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800537c:	4809      	ldr	r0, [pc, #36]	; (80053a4 <HAL_InitTick+0xa4>)
 800537e:	f004 ff1b 	bl	800a1b8 <HAL_TIM_Base_Init>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d104      	bne.n	8005392 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8005388:	4806      	ldr	r0, [pc, #24]	; (80053a4 <HAL_InitTick+0xa4>)
 800538a:	f004 ff6d 	bl	800a268 <HAL_TIM_Base_Start_IT>
 800538e:	4603      	mov	r3, r0
 8005390:	e000      	b.n	8005394 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
}
 8005394:	4618      	mov	r0, r3
 8005396:	3730      	adds	r7, #48	; 0x30
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	40021000 	.word	0x40021000
 80053a0:	431bde83 	.word	0x431bde83
 80053a4:	20003b00 	.word	0x20003b00
 80053a8:	40012c00 	.word	0x40012c00

080053ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80053ac:	b480      	push	{r7}
 80053ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80053b0:	e7fe      	b.n	80053b0 <NMI_Handler+0x4>

080053b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80053b2:	b480      	push	{r7}
 80053b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80053b6:	e7fe      	b.n	80053b6 <HardFault_Handler+0x4>

080053b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80053b8:	b480      	push	{r7}
 80053ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80053bc:	e7fe      	b.n	80053bc <MemManage_Handler+0x4>

080053be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80053be:	b480      	push	{r7}
 80053c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80053c2:	e7fe      	b.n	80053c2 <BusFault_Handler+0x4>

080053c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80053c4:	b480      	push	{r7}
 80053c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80053c8:	e7fe      	b.n	80053c8 <UsageFault_Handler+0x4>

080053ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80053ca:	b480      	push	{r7}
 80053cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80053ce:	bf00      	nop
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bc80      	pop	{r7}
 80053d4:	4770      	bx	lr
	...

080053d8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80053dc:	4802      	ldr	r0, [pc, #8]	; (80053e8 <DMA1_Channel6_IRQHandler+0x10>)
 80053de:	f000 ffe9 	bl	80063b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80053e2:	bf00      	nop
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	200038e4 	.word	0x200038e4

080053ec <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80053f0:	4802      	ldr	r0, [pc, #8]	; (80053fc <TIM1_UP_IRQHandler+0x10>)
 80053f2:	f004 ff93 	bl	800a31c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80053f6:	bf00      	nop
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	20003b00 	.word	0x20003b00

08005400 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005404:	4802      	ldr	r0, [pc, #8]	; (8005410 <I2C1_EV_IRQHandler+0x10>)
 8005406:	f001 fe93 	bl	8007130 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800540a:	bf00      	nop
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	2000399c 	.word	0x2000399c

08005414 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005418:	4802      	ldr	r0, [pc, #8]	; (8005424 <I2C1_ER_IRQHandler+0x10>)
 800541a:	f001 fffa 	bl	8007412 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800541e:	bf00      	nop
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	2000399c 	.word	0x2000399c

08005428 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800542c:	4802      	ldr	r0, [pc, #8]	; (8005438 <USART1_IRQHandler+0x10>)
 800542e:	f005 fb93 	bl	800ab58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005432:	bf00      	nop
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	200039f8 	.word	0x200039f8

0800543c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005440:	4802      	ldr	r0, [pc, #8]	; (800544c <USART2_IRQHandler+0x10>)
 8005442:	f005 fb89 	bl	800ab58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005446:	bf00      	nop
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	20003a88 	.word	0x20003a88

08005450 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005454:	4802      	ldr	r0, [pc, #8]	; (8005460 <USART3_IRQHandler+0x10>)
 8005456:	f005 fb7f 	bl	800ab58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800545a:	bf00      	nop
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	20003928 	.word	0x20003928

08005464 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005464:	b480      	push	{r7}
 8005466:	af00      	add	r7, sp, #0
	return 1;
 8005468:	2301      	movs	r3, #1
}
 800546a:	4618      	mov	r0, r3
 800546c:	46bd      	mov	sp, r7
 800546e:	bc80      	pop	{r7}
 8005470:	4770      	bx	lr

08005472 <_kill>:

int _kill(int pid, int sig)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b082      	sub	sp, #8
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
 800547a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800547c:	f009 fb5c 	bl	800eb38 <__errno>
 8005480:	4603      	mov	r3, r0
 8005482:	2216      	movs	r2, #22
 8005484:	601a      	str	r2, [r3, #0]
	return -1;
 8005486:	f04f 33ff 	mov.w	r3, #4294967295
}
 800548a:	4618      	mov	r0, r3
 800548c:	3708      	adds	r7, #8
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <_exit>:

void _exit (int status)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b082      	sub	sp, #8
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800549a:	f04f 31ff 	mov.w	r1, #4294967295
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7ff ffe7 	bl	8005472 <_kill>
	while (1) {}		/* Make sure we hang here */
 80054a4:	e7fe      	b.n	80054a4 <_exit+0x12>

080054a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b086      	sub	sp, #24
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	60f8      	str	r0, [r7, #12]
 80054ae:	60b9      	str	r1, [r7, #8]
 80054b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054b2:	2300      	movs	r3, #0
 80054b4:	617b      	str	r3, [r7, #20]
 80054b6:	e00a      	b.n	80054ce <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80054b8:	f3af 8000 	nop.w
 80054bc:	4601      	mov	r1, r0
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	1c5a      	adds	r2, r3, #1
 80054c2:	60ba      	str	r2, [r7, #8]
 80054c4:	b2ca      	uxtb	r2, r1
 80054c6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	3301      	adds	r3, #1
 80054cc:	617b      	str	r3, [r7, #20]
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	dbf0      	blt.n	80054b8 <_read+0x12>
	}

return len;
 80054d6:	687b      	ldr	r3, [r7, #4]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3718      	adds	r7, #24
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054ec:	2300      	movs	r3, #0
 80054ee:	617b      	str	r3, [r7, #20]
 80054f0:	e009      	b.n	8005506 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	1c5a      	adds	r2, r3, #1
 80054f6:	60ba      	str	r2, [r7, #8]
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7fd f996 	bl	800282c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	3301      	adds	r3, #1
 8005504:	617b      	str	r3, [r7, #20]
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	429a      	cmp	r2, r3
 800550c:	dbf1      	blt.n	80054f2 <_write+0x12>
	}
	return len;
 800550e:	687b      	ldr	r3, [r7, #4]
}
 8005510:	4618      	mov	r0, r3
 8005512:	3718      	adds	r7, #24
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <_close>:

int _close(int file)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
	return -1;
 8005520:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005524:	4618      	mov	r0, r3
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	bc80      	pop	{r7}
 800552c:	4770      	bx	lr

0800552e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800552e:	b480      	push	{r7}
 8005530:	b083      	sub	sp, #12
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
 8005536:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800553e:	605a      	str	r2, [r3, #4]
	return 0;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	bc80      	pop	{r7}
 800554a:	4770      	bx	lr

0800554c <_isatty>:

int _isatty(int file)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
	return 1;
 8005554:	2301      	movs	r3, #1
}
 8005556:	4618      	mov	r0, r3
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	bc80      	pop	{r7}
 800555e:	4770      	bx	lr

08005560 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
	return 0;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	bc80      	pop	{r7}
 8005576:	4770      	bx	lr

08005578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005580:	4a14      	ldr	r2, [pc, #80]	; (80055d4 <_sbrk+0x5c>)
 8005582:	4b15      	ldr	r3, [pc, #84]	; (80055d8 <_sbrk+0x60>)
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800558c:	4b13      	ldr	r3, [pc, #76]	; (80055dc <_sbrk+0x64>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d102      	bne.n	800559a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005594:	4b11      	ldr	r3, [pc, #68]	; (80055dc <_sbrk+0x64>)
 8005596:	4a12      	ldr	r2, [pc, #72]	; (80055e0 <_sbrk+0x68>)
 8005598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800559a:	4b10      	ldr	r3, [pc, #64]	; (80055dc <_sbrk+0x64>)
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4413      	add	r3, r2
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d207      	bcs.n	80055b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80055a8:	f009 fac6 	bl	800eb38 <__errno>
 80055ac:	4603      	mov	r3, r0
 80055ae:	220c      	movs	r2, #12
 80055b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80055b2:	f04f 33ff 	mov.w	r3, #4294967295
 80055b6:	e009      	b.n	80055cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80055b8:	4b08      	ldr	r3, [pc, #32]	; (80055dc <_sbrk+0x64>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80055be:	4b07      	ldr	r3, [pc, #28]	; (80055dc <_sbrk+0x64>)
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4413      	add	r3, r2
 80055c6:	4a05      	ldr	r2, [pc, #20]	; (80055dc <_sbrk+0x64>)
 80055c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80055ca:	68fb      	ldr	r3, [r7, #12]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3718      	adds	r7, #24
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	20010000 	.word	0x20010000
 80055d8:	00000400 	.word	0x00000400
 80055dc:	20001654 	.word	0x20001654
 80055e0:	20003ba0 	.word	0x20003ba0

080055e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80055e4:	b480      	push	{r7}
 80055e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80055e8:	bf00      	nop
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bc80      	pop	{r7}
 80055ee:	4770      	bx	lr

080055f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80055f0:	480c      	ldr	r0, [pc, #48]	; (8005624 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80055f2:	490d      	ldr	r1, [pc, #52]	; (8005628 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80055f4:	4a0d      	ldr	r2, [pc, #52]	; (800562c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80055f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055f8:	e002      	b.n	8005600 <LoopCopyDataInit>

080055fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055fe:	3304      	adds	r3, #4

08005600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005604:	d3f9      	bcc.n	80055fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005606:	4a0a      	ldr	r2, [pc, #40]	; (8005630 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005608:	4c0a      	ldr	r4, [pc, #40]	; (8005634 <LoopFillZerobss+0x22>)
  movs r3, #0
 800560a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800560c:	e001      	b.n	8005612 <LoopFillZerobss>

0800560e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800560e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005610:	3204      	adds	r2, #4

08005612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005614:	d3fb      	bcc.n	800560e <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005616:	f7ff ffe5 	bl	80055e4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800561a:	f009 faa5 	bl	800eb68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800561e:	f7ff f9ed 	bl	80049fc <main>
  bx lr
 8005622:	4770      	bx	lr
  ldr r0, =_sdata
 8005624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005628:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 800562c:	08014738 	.word	0x08014738
  ldr r2, =_sbss
 8005630:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8005634:	20003b9c 	.word	0x20003b9c

08005638 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005638:	e7fe      	b.n	8005638 <ADC1_2_IRQHandler>
	...

0800563c <UARTPROTOCOLDEC_Init>:

static void DropFrame(UARTPROTOCOLDEC_SHandle* psHandle, const char* szReason);
static void AcceptFrame(UARTPROTOCOLDEC_SHandle* psHandle);

void UARTPROTOCOLDEC_Init(UARTPROTOCOLDEC_SHandle* psHandle, const UARTPROTOCOLDEC_SConfig* psConfig)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
    assert(psHandle != NULL && psConfig != NULL && psConfig->u8PayloadBuffers != NULL);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d006      	beq.n	800565a <UARTPROTOCOLDEC_Init+0x1e>
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d003      	beq.n	800565a <UARTPROTOCOLDEC_Init+0x1e>
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d105      	bne.n	8005666 <UARTPROTOCOLDEC_Init+0x2a>
 800565a:	4b06      	ldr	r3, [pc, #24]	; (8005674 <UARTPROTOCOLDEC_Init+0x38>)
 800565c:	4a06      	ldr	r2, [pc, #24]	; (8005678 <UARTPROTOCOLDEC_Init+0x3c>)
 800565e:	210c      	movs	r1, #12
 8005660:	4806      	ldr	r0, [pc, #24]	; (800567c <UARTPROTOCOLDEC_Init+0x40>)
 8005662:	f009 fa4b 	bl	800eafc <__assert_func>
    psHandle->psConfig = psConfig;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	683a      	ldr	r2, [r7, #0]
 800566a:	619a      	str	r2, [r3, #24]
}
 800566c:	bf00      	nop
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	08013488 	.word	0x08013488
 8005678:	080142d4 	.word	0x080142d4
 800567c:	080134d4 	.word	0x080134d4

08005680 <UARTPROTOCOLDEC_Reset>:

void UARTPROTOCOLDEC_Reset(UARTPROTOCOLDEC_SHandle* psHandle)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
    psHandle->eStep = UARTPROTOCOLDEC_ESTEP_WaitingForStartByte;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	701a      	strb	r2, [r3, #0]
    psHandle->u16PayloadCount = 0;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	805a      	strh	r2, [r3, #2]

    psHandle->s64StartTimeMS = 0;
 8005694:	6879      	ldr	r1, [r7, #4]
 8005696:	f04f 0200 	mov.w	r2, #0
 800569a:	f04f 0300 	mov.w	r3, #0
 800569e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    psHandle->u8CurrentFrameID = 0;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	741a      	strb	r2, [r3, #16]

    psHandle->u8ChecksumCalculation = 0;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	751a      	strb	r2, [r3, #20]
}
 80056ae:	bf00      	nop
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bc80      	pop	{r7}
 80056b6:	4770      	bx	lr

080056b8 <UARTPROTOCOLDEC_HandleIn>:

void UARTPROTOCOLDEC_HandleIn(UARTPROTOCOLDEC_SHandle* psHandle, const uint8_t* u8Datas, uint16_t u16DataLen)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	4613      	mov	r3, r2
 80056c4:	80fb      	strh	r3, [r7, #6]
    for(uint32_t i = 0; i < u16DataLen; i++)
 80056c6:	2300      	movs	r3, #0
 80056c8:	617b      	str	r3, [r7, #20]
 80056ca:	e00a      	b.n	80056e2 <UARTPROTOCOLDEC_HandleIn+0x2a>
        AddByte(psHandle, u8Datas[i]);
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	4413      	add	r3, r2
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	4619      	mov	r1, r3
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f000 f80c 	bl	80056f4 <AddByte>
    for(uint32_t i = 0; i < u16DataLen; i++)
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	3301      	adds	r3, #1
 80056e0:	617b      	str	r3, [r7, #20]
 80056e2:	88fb      	ldrh	r3, [r7, #6]
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d3f0      	bcc.n	80056cc <UARTPROTOCOLDEC_HandleIn+0x14>
}
 80056ea:	bf00      	nop
 80056ec:	bf00      	nop
 80056ee:	3718      	adds	r7, #24
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <AddByte>:

static void AddByte(UARTPROTOCOLDEC_SHandle* psHandle, uint8_t u8)
{
 80056f4:	b5b0      	push	{r4, r5, r7, lr}
 80056f6:	b098      	sub	sp, #96	; 0x60
 80056f8:	af02      	add	r7, sp, #8
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	460b      	mov	r3, r1
 80056fe:	70fb      	strb	r3, [r7, #3]
    // Timeout is supported but optional ...
    if (psHandle->eStep != UARTPROTOCOLDEC_ESTEP_WaitingForStartByte)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d026      	beq.n	8005756 <AddByte+0x62>
    {
        if (psHandle->psConfig->fnGetTimerCountMSCb != NULL &&
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d021      	beq.n	8005756 <AddByte+0x62>
            psHandle->psConfig->u32FrameReceiveTimeOutMS > 0)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	689b      	ldr	r3, [r3, #8]
        if (psHandle->psConfig->fnGetTimerCountMSCb != NULL &&
 8005718:	2b00      	cmp	r3, #0
 800571a:	d01c      	beq.n	8005756 <AddByte+0x62>
        {       
            const int64_t s64TimeDiffMS = psHandle->psConfig->fnGetTimerCountMSCb(psHandle) - psHandle->s64StartTimeMS;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	4798      	blx	r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800572c:	1a84      	subs	r4, r0, r2
 800572e:	eb61 0503 	sbc.w	r5, r1, r3
 8005732:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
            if (s64TimeDiffMS > psHandle->psConfig->u32FrameReceiveTimeOutMS)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	4618      	mov	r0, r3
 800573e:	f04f 0100 	mov.w	r1, #0
 8005742:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005746:	4290      	cmp	r0, r2
 8005748:	eb71 0303 	sbcs.w	r3, r1, r3
 800574c:	da03      	bge.n	8005756 <AddByte+0x62>
            {
                // We don't break here on purpose, we give it a chance to start a new frame.
                DropFrame(psHandle, "Timeout");
 800574e:	4973      	ldr	r1, [pc, #460]	; (800591c <AddByte+0x228>)
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 f909 	bl	8005968 <DropFrame>
            }
        }
    }

    switch(psHandle->eStep)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	2b06      	cmp	r3, #6
 800575c:	f200 80d5 	bhi.w	800590a <AddByte+0x216>
 8005760:	a201      	add	r2, pc, #4	; (adr r2, 8005768 <AddByte+0x74>)
 8005762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005766:	bf00      	nop
 8005768:	08005785 	.word	0x08005785
 800576c:	080057cf 	.word	0x080057cf
 8005770:	080057eb 	.word	0x080057eb
 8005774:	08005809 	.word	0x08005809
 8005778:	0800586f 	.word	0x0800586f
 800577c:	080058ad 	.word	0x080058ad
 8005780:	080058ed 	.word	0x080058ed
    {
        case UARTPROTOCOLDEC_ESTEP_WaitingForStartByte:
        {
            // Wait until we get a start byte ...
            if (u8 == UARTPROTOCOLCOMMON_START_BYTE)
 8005784:	78fb      	ldrb	r3, [r7, #3]
 8005786:	2bcc      	cmp	r3, #204	; 0xcc
 8005788:	f040 80c1 	bne.w	800590e <AddByte+0x21a>
            {
                psHandle->u16CurrentFramePayloadLen = 0;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	825a      	strh	r2, [r3, #18]
                psHandle->u8ChecksumCalculation = 0;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	751a      	strb	r2, [r3, #20]

                // IF we support timeout ...
                if (psHandle->psConfig->fnGetTimerCountMSCb != NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00a      	beq.n	80057b8 <AddByte+0xc4>
                    psHandle->s64StartTimeMS = psHandle->psConfig->fnGetTimerCountMSCb(psHandle);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	4798      	blx	r3
 80057ac:	4602      	mov	r2, r0
 80057ae:	460b      	mov	r3, r1
 80057b0:	6879      	ldr	r1, [r7, #4]
 80057b2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80057b6:	e006      	b.n	80057c6 <AddByte+0xd2>
                else
                    psHandle->s64StartTimeMS = 0;
 80057b8:	6879      	ldr	r1, [r7, #4]
 80057ba:	f04f 0200 	mov.w	r2, #0
 80057be:	f04f 0300 	mov.w	r3, #0
 80057c2:	e9c1 2302 	strd	r2, r3, [r1, #8]

                psHandle->eStep = UARTPROTOCOLDEC_ESTEP_WaitingFrameID;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	701a      	strb	r2, [r3, #0]
            }
            break;
 80057cc:	e09f      	b.n	800590e <AddByte+0x21a>
        }
        case UARTPROTOCOLDEC_ESTEP_WaitingFrameID:
        {
            psHandle->u8ChecksumCalculation += u8;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	7d1a      	ldrb	r2, [r3, #20]
 80057d2:	78fb      	ldrb	r3, [r7, #3]
 80057d4:	4413      	add	r3, r2
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	751a      	strb	r2, [r3, #20]
            psHandle->u8CurrentFrameID = u8;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	78fa      	ldrb	r2, [r7, #3]
 80057e0:	741a      	strb	r2, [r3, #16]
            psHandle->eStep = UARTPROTOCOLDEC_ESTEP_WaitingPayloadLengthB0;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2202      	movs	r2, #2
 80057e6:	701a      	strb	r2, [r3, #0]
            break;
 80057e8:	e094      	b.n	8005914 <AddByte+0x220>
        }
        case UARTPROTOCOLDEC_ESTEP_WaitingPayloadLengthB0:
        {
            psHandle->u8ChecksumCalculation += u8;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	7d1a      	ldrb	r2, [r3, #20]
 80057ee:	78fb      	ldrb	r3, [r7, #3]
 80057f0:	4413      	add	r3, r2
 80057f2:	b2da      	uxtb	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	751a      	strb	r2, [r3, #20]
            psHandle->u16CurrentFramePayloadLen = u8;
 80057f8:	78fb      	ldrb	r3, [r7, #3]
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	825a      	strh	r2, [r3, #18]

            psHandle->eStep = UARTPROTOCOLDEC_ESTEP_WaitingPayloadLengthB1;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2203      	movs	r2, #3
 8005804:	701a      	strb	r2, [r3, #0]
            break;
 8005806:	e085      	b.n	8005914 <AddByte+0x220>
        }
        case UARTPROTOCOLDEC_ESTEP_WaitingPayloadLengthB1:
        {
            psHandle->u8ChecksumCalculation += u8;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	7d1a      	ldrb	r2, [r3, #20]
 800580c:	78fb      	ldrb	r3, [r7, #3]
 800580e:	4413      	add	r3, r2
 8005810:	b2da      	uxtb	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	751a      	strb	r2, [r3, #20]
            // Little endian ...
            psHandle->u16CurrentFramePayloadLen |= (uint16_t)((uint16_t)u8 << 8);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	8a5a      	ldrh	r2, [r3, #18]
 800581a:	78fb      	ldrb	r3, [r7, #3]
 800581c:	b29b      	uxth	r3, r3
 800581e:	021b      	lsls	r3, r3, #8
 8005820:	b29b      	uxth	r3, r3
 8005822:	4313      	orrs	r3, r2
 8005824:	b29a      	uxth	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	825a      	strh	r2, [r3, #18]

            if (psHandle->u16CurrentFramePayloadLen > UARTPROTOCOLCOMMON_MAXPAYLOAD)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	8a5b      	ldrh	r3, [r3, #18]
 800582e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005832:	d904      	bls.n	800583e <AddByte+0x14a>
            {
                DropFrame(psHandle, "Payload is too big for the protocol");
 8005834:	493a      	ldr	r1, [pc, #232]	; (8005920 <AddByte+0x22c>)
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 f896 	bl	8005968 <DropFrame>
                break;
 800583c:	e06a      	b.n	8005914 <AddByte+0x220>
            }
            
            if (psHandle->u16CurrentFramePayloadLen > psHandle->psConfig->u16PayloadBufferLen)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	8a5a      	ldrh	r2, [r3, #18]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	889b      	ldrh	r3, [r3, #4]
 8005848:	429a      	cmp	r2, r3
 800584a:	d904      	bls.n	8005856 <AddByte+0x162>
            {
                DropFrame(psHandle, "Payload is too big for the buffer");
 800584c:	4935      	ldr	r1, [pc, #212]	; (8005924 <AddByte+0x230>)
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f88a 	bl	8005968 <DropFrame>
                break;
 8005854:	e05e      	b.n	8005914 <AddByte+0x220>
            }

            // 0 byte payload are supported
            if (psHandle->u16CurrentFramePayloadLen == 0)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	8a5b      	ldrh	r3, [r3, #18]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d103      	bne.n	8005866 <AddByte+0x172>
            	psHandle->eStep = UARTPROTOCOLDEC_ESTEP_WaitingChecksum;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2205      	movs	r2, #5
 8005862:	701a      	strb	r2, [r3, #0]
            else
            	psHandle->eStep = UARTPROTOCOLDEC_ESTEP_GettingPayload;
            break;
 8005864:	e056      	b.n	8005914 <AddByte+0x220>
            	psHandle->eStep = UARTPROTOCOLDEC_ESTEP_GettingPayload;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2204      	movs	r2, #4
 800586a:	701a      	strb	r2, [r3, #0]
            break;
 800586c:	e052      	b.n	8005914 <AddByte+0x220>
        }
        case UARTPROTOCOLDEC_ESTEP_GettingPayload:
        {
            psHandle->psConfig->u8PayloadBuffers[psHandle->u16PayloadCount] = u8;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	8852      	ldrh	r2, [r2, #2]
 8005878:	4413      	add	r3, r2
 800587a:	78fa      	ldrb	r2, [r7, #3]
 800587c:	701a      	strb	r2, [r3, #0]
            psHandle->u8ChecksumCalculation += u8;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	7d1a      	ldrb	r2, [r3, #20]
 8005882:	78fb      	ldrb	r3, [r7, #3]
 8005884:	4413      	add	r3, r2
 8005886:	b2da      	uxtb	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	751a      	strb	r2, [r3, #20]
            psHandle->u16PayloadCount++;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	885b      	ldrh	r3, [r3, #2]
 8005890:	3301      	adds	r3, #1
 8005892:	b29a      	uxth	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	805a      	strh	r2, [r3, #2]

            // Complete payload detected ...
            if (psHandle->u16PayloadCount >= (uint32_t)psHandle->u16CurrentFramePayloadLen)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	885a      	ldrh	r2, [r3, #2]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	8a5b      	ldrh	r3, [r3, #18]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d336      	bcc.n	8005912 <AddByte+0x21e>
                psHandle->eStep = UARTPROTOCOLDEC_ESTEP_WaitingChecksum;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2205      	movs	r2, #5
 80058a8:	701a      	strb	r2, [r3, #0]
            break;
 80058aa:	e032      	b.n	8005912 <AddByte+0x21e>
        }
        case UARTPROTOCOLDEC_ESTEP_WaitingChecksum:
        {
            // Bitwise operation on calculated checksum ...
            // Checksum arrived ...
            const uint8_t u8CurrChecksum = ~psHandle->u8ChecksumCalculation;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	7d1b      	ldrb	r3, [r3, #20]
 80058b0:	43db      	mvns	r3, r3
 80058b2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            if (u8CurrChecksum != u8)
 80058b6:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80058ba:	78fb      	ldrb	r3, [r7, #3]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d011      	beq.n	80058e4 <AddByte+0x1f0>
            {
                char tmp[64+1];
                snprintf(tmp, sizeof(tmp), "Invalid checksum, expected: %2X, got: %2X", u8CurrChecksum, u8);
 80058c0:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80058c4:	78fb      	ldrb	r3, [r7, #3]
 80058c6:	f107 000c 	add.w	r0, r7, #12
 80058ca:	9300      	str	r3, [sp, #0]
 80058cc:	4613      	mov	r3, r2
 80058ce:	4a16      	ldr	r2, [pc, #88]	; (8005928 <AddByte+0x234>)
 80058d0:	2141      	movs	r1, #65	; 0x41
 80058d2:	f009 ff67 	bl	800f7a4 <sniprintf>
                DropFrame(psHandle, tmp);
 80058d6:	f107 030c 	add.w	r3, r7, #12
 80058da:	4619      	mov	r1, r3
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f843 	bl	8005968 <DropFrame>
                break;
 80058e2:	e017      	b.n	8005914 <AddByte+0x220>
            }
            
            psHandle->eStep = UARTPROTOCOLDEC_ESTEP_WaitingStopByte;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2206      	movs	r2, #6
 80058e8:	701a      	strb	r2, [r3, #0]
            break;
 80058ea:	e013      	b.n	8005914 <AddByte+0x220>
        }
        case UARTPROTOCOLDEC_ESTEP_WaitingStopByte:
        {
            // If we reach this point, the checksum passed
            if (u8 != UARTPROTOCOLCOMMON_STOP_BYTE)
 80058ec:	78fb      	ldrb	r3, [r7, #3]
 80058ee:	2b99      	cmp	r3, #153	; 0x99
 80058f0:	d004      	beq.n	80058fc <AddByte+0x208>
            {
                DropFrame(psHandle, "Not a stop byte");
 80058f2:	490e      	ldr	r1, [pc, #56]	; (800592c <AddByte+0x238>)
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 f837 	bl	8005968 <DropFrame>
                break;
 80058fa:	e00b      	b.n	8005914 <AddByte+0x220>
            }

            // If we reach this point it's good.
            AcceptFrame(psHandle);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f817 	bl	8005930 <AcceptFrame>
            UARTPROTOCOLDEC_Reset(psHandle);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f7ff febc 	bl	8005680 <UARTPROTOCOLDEC_Reset>
            break;
 8005908:	e004      	b.n	8005914 <AddByte+0x220>
        }
        default:
        	break;
 800590a:	bf00      	nop
 800590c:	e002      	b.n	8005914 <AddByte+0x220>
            break;
 800590e:	bf00      	nop
 8005910:	e000      	b.n	8005914 <AddByte+0x220>
            break;
 8005912:	bf00      	nop
    }
}
 8005914:	bf00      	nop
 8005916:	3758      	adds	r7, #88	; 0x58
 8005918:	46bd      	mov	sp, r7
 800591a:	bdb0      	pop	{r4, r5, r7, pc}
 800591c:	08013504 	.word	0x08013504
 8005920:	0801350c 	.word	0x0801350c
 8005924:	08013530 	.word	0x08013530
 8005928:	08013554 	.word	0x08013554
 800592c:	08013580 	.word	0x08013580

08005930 <AcceptFrame>:

static void AcceptFrame(UARTPROTOCOLDEC_SHandle* psHandle)
{
 8005930:	b590      	push	{r4, r7, lr}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
    if (psHandle->psConfig->fnAcceptFrameCb != NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00b      	beq.n	800595a <AcceptFrame+0x2a>
        psHandle->psConfig->fnAcceptFrameCb(psHandle, psHandle->u8CurrentFrameID, psHandle->psConfig->u8PayloadBuffers, psHandle->u16PayloadCount);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	68dc      	ldr	r4, [r3, #12]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	7c19      	ldrb	r1, [r3, #16]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	885b      	ldrh	r3, [r3, #2]
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	47a0      	blx	r4
    UARTPROTOCOLDEC_Reset(psHandle);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7ff fe90 	bl	8005680 <UARTPROTOCOLDEC_Reset>
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	bd90      	pop	{r4, r7, pc}

08005968 <DropFrame>:

static void DropFrame(UARTPROTOCOLDEC_SHandle* psHandle, const char* szReason)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
    if (psHandle->psConfig->fnDropFrameCb != NULL)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d005      	beq.n	8005988 <DropFrame+0x20>
        psHandle->psConfig->fnDropFrameCb(psHandle, szReason);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	6839      	ldr	r1, [r7, #0]
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	4798      	blx	r3
    UARTPROTOCOLDEC_Reset(psHandle);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7ff fe79 	bl	8005680 <UARTPROTOCOLDEC_Reset>
}
 800598e:	bf00      	nop
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
	...

08005998 <UARTPROTOCOLENC_Init>:
#include <assert.h>
#include "uart_protocol_enc.h"

void UARTPROTOCOLENC_Init(UARTPROTOCOLENC_SHandle* psHandle, const UARTPROTOCOLENC_SConfig* psConfig)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
    assert(psHandle != NULL && psConfig != NULL);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d002      	beq.n	80059ae <UARTPROTOCOLENC_Init+0x16>
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d105      	bne.n	80059ba <UARTPROTOCOLENC_Init+0x22>
 80059ae:	4b0b      	ldr	r3, [pc, #44]	; (80059dc <UARTPROTOCOLENC_Init+0x44>)
 80059b0:	4a0b      	ldr	r2, [pc, #44]	; (80059e0 <UARTPROTOCOLENC_Init+0x48>)
 80059b2:	2106      	movs	r1, #6
 80059b4:	480b      	ldr	r0, [pc, #44]	; (80059e4 <UARTPROTOCOLENC_Init+0x4c>)
 80059b6:	f009 f8a1 	bl	800eafc <__assert_func>
    assert(psConfig->fnWriteCb != NULL);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d105      	bne.n	80059ce <UARTPROTOCOLENC_Init+0x36>
 80059c2:	4b09      	ldr	r3, [pc, #36]	; (80059e8 <UARTPROTOCOLENC_Init+0x50>)
 80059c4:	4a06      	ldr	r2, [pc, #24]	; (80059e0 <UARTPROTOCOLENC_Init+0x48>)
 80059c6:	2107      	movs	r1, #7
 80059c8:	4806      	ldr	r0, [pc, #24]	; (80059e4 <UARTPROTOCOLENC_Init+0x4c>)
 80059ca:	f009 f897 	bl	800eafc <__assert_func>

    psHandle->psConfig = psConfig;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	601a      	str	r2, [r3, #0]
}
 80059d4:	bf00      	nop
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	08013590 	.word	0x08013590
 80059e0:	080142ec 	.word	0x080142ec
 80059e4:	080135b8 	.word	0x080135b8
 80059e8:	080135e8 	.word	0x080135e8

080059ec <UARTPROTOCOLENC_Send>:

bool UARTPROTOCOLENC_Send(UARTPROTOCOLENC_SHandle* psHandle, uint8_t u8ID, const uint8_t u8Payloads[], uint16_t u16PayloadLen)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b088      	sub	sp, #32
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	607a      	str	r2, [r7, #4]
 80059f6:	461a      	mov	r2, r3
 80059f8:	460b      	mov	r3, r1
 80059fa:	72fb      	strb	r3, [r7, #11]
 80059fc:	4613      	mov	r3, r2
 80059fe:	813b      	strh	r3, [r7, #8]
    if (u16PayloadLen > UARTPROTOCOLCOMMON_MAXPAYLOAD)
 8005a00:	893b      	ldrh	r3, [r7, #8]
 8005a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a06:	d901      	bls.n	8005a0c <UARTPROTOCOLENC_Send+0x20>
        return false;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	e070      	b.n	8005aee <UARTPROTOCOLENC_Send+0x102>

    uint8_t u8Checksum = 0;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	76fb      	strb	r3, [r7, #27]
    const uint8_t u8STARTBYTE = UARTPROTOCOLCOMMON_START_BYTE;
 8005a10:	23cc      	movs	r3, #204	; 0xcc
 8005a12:	76bb      	strb	r3, [r7, #26]
    psHandle->psConfig->fnWriteCb(psHandle, &u8STARTBYTE, 1);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f107 011a 	add.w	r1, r7, #26
 8005a1e:	2201      	movs	r2, #1
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	4798      	blx	r3
    psHandle->psConfig->fnWriteCb(psHandle, &u8ID, 1);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f107 010b 	add.w	r1, r7, #11
 8005a2e:	2201      	movs	r2, #1
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	4798      	blx	r3
    u8Checksum += u8ID;
 8005a34:	7efa      	ldrb	r2, [r7, #27]
 8005a36:	7afb      	ldrb	r3, [r7, #11]
 8005a38:	4413      	add	r3, r2
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	76fb      	strb	r3, [r7, #27]
    // Payload in LITTLE ENDIAN format
    const uint8_t u8LenB0 = (uint8_t)(u16PayloadLen & 0xFF);
 8005a3e:	893b      	ldrh	r3, [r7, #8]
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	767b      	strb	r3, [r7, #25]
    psHandle->psConfig->fnWriteCb(psHandle, &u8LenB0, 1);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f107 0119 	add.w	r1, r7, #25
 8005a4e:	2201      	movs	r2, #1
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	4798      	blx	r3
    const uint8_t u8LenB1 = (uint8_t)((u16PayloadLen >> 8) & 0xFF);
 8005a54:	893b      	ldrh	r3, [r7, #8]
 8005a56:	0a1b      	lsrs	r3, r3, #8
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	763b      	strb	r3, [r7, #24]
    psHandle->psConfig->fnWriteCb(psHandle, &u8LenB1, 1);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f107 0118 	add.w	r1, r7, #24
 8005a68:	2201      	movs	r2, #1
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	4798      	blx	r3
    // Calculate checksum on the fly ...
    if (u8Payloads != NULL && u16PayloadLen > 0)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d025      	beq.n	8005ac0 <UARTPROTOCOLENC_Send+0xd4>
 8005a74:	893b      	ldrh	r3, [r7, #8]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d022      	beq.n	8005ac0 <UARTPROTOCOLENC_Send+0xd4>
    {
        u8Checksum += u8LenB0;
 8005a7a:	7efa      	ldrb	r2, [r7, #27]
 8005a7c:	7e7b      	ldrb	r3, [r7, #25]
 8005a7e:	4413      	add	r3, r2
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	76fb      	strb	r3, [r7, #27]
        u8Checksum += u8LenB1;
 8005a84:	7efa      	ldrb	r2, [r7, #27]
 8005a86:	7e3b      	ldrb	r3, [r7, #24]
 8005a88:	4413      	add	r3, r2
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	76fb      	strb	r3, [r7, #27]
        for(int i = 0; i < u16PayloadLen; i++)
 8005a8e:	2300      	movs	r3, #0
 8005a90:	61fb      	str	r3, [r7, #28]
 8005a92:	e00a      	b.n	8005aaa <UARTPROTOCOLENC_Send+0xbe>
            u8Checksum += u8Payloads[i];
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	4413      	add	r3, r2
 8005a9a:	781a      	ldrb	r2, [r3, #0]
 8005a9c:	7efb      	ldrb	r3, [r7, #27]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	76fb      	strb	r3, [r7, #27]
        for(int i = 0; i < u16PayloadLen; i++)
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	61fb      	str	r3, [r7, #28]
 8005aaa:	893b      	ldrh	r3, [r7, #8]
 8005aac:	69fa      	ldr	r2, [r7, #28]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	dbf0      	blt.n	8005a94 <UARTPROTOCOLENC_Send+0xa8>
        psHandle->psConfig->fnWriteCb(psHandle, u8Payloads, u16PayloadLen);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	893a      	ldrh	r2, [r7, #8]
 8005aba:	6879      	ldr	r1, [r7, #4]
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	4798      	blx	r3
    }
    u8Checksum = ~u8Checksum;
 8005ac0:	7efb      	ldrb	r3, [r7, #27]
 8005ac2:	43db      	mvns	r3, r3
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	76fb      	strb	r3, [r7, #27]

    psHandle->psConfig->fnWriteCb(psHandle, &u8Checksum, 1);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f107 011b 	add.w	r1, r7, #27
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	4798      	blx	r3
    const uint8_t u8STOPBYTE = UARTPROTOCOLCOMMON_STOP_BYTE;
 8005ad8:	2399      	movs	r3, #153	; 0x99
 8005ada:	75fb      	strb	r3, [r7, #23]
    psHandle->psConfig->fnWriteCb(psHandle, &u8STOPBYTE, 1);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f107 0117 	add.w	r1, r7, #23
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	4798      	blx	r3
    return true;
 8005aec:	2301      	movs	r3, #1
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3720      	adds	r7, #32
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <UFEC23ENDEC_A2AReqPingAliveEncode>:
{
    
}

int32_t UFEC23ENDEC_A2AReqPingAliveEncode(uint8_t u8Dst[], uint32_t u32DstLen, const UFEC23ENDEC_A2AReqPingAlive* pSrc)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b085      	sub	sp, #20
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	60f8      	str	r0, [r7, #12]
 8005afe:	60b9      	str	r1, [r7, #8]
 8005b00:	607a      	str	r2, [r7, #4]
    if (u32DstLen < UFEC23ENDEC_A2AREQPINGALIVE_COUNT)
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	2b03      	cmp	r3, #3
 8005b06:	d801      	bhi.n	8005b0c <UFEC23ENDEC_A2AReqPingAliveEncode+0x16>
        return 0;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	e005      	b.n	8005b18 <UFEC23ENDEC_A2AReqPingAliveEncode+0x22>
    memcpy(u8Dst, &pSrc->u32Ping, sizeof(uint32_t));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	461a      	mov	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	601a      	str	r2, [r3, #0]
    return sizeof(uint32_t);
 8005b16:	2304      	movs	r3, #4
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bc80      	pop	{r7}
 8005b20:	4770      	bx	lr

08005b22 <UFEC23ENDEC_A2AReqPingAliveDecode>:

bool UFEC23ENDEC_A2AReqPingAliveDecode(UFEC23ENDEC_A2AReqPingAlive* pDst, const uint8_t u8Datas[], uint32_t u32DataLen)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b085      	sub	sp, #20
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	60f8      	str	r0, [r7, #12]
 8005b2a:	60b9      	str	r1, [r7, #8]
 8005b2c:	607a      	str	r2, [r7, #4]
    if (u32DataLen < UFEC23ENDEC_A2AREQPINGALIVE_COUNT)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2b03      	cmp	r3, #3
 8005b32:	d801      	bhi.n	8005b38 <UFEC23ENDEC_A2AReqPingAliveDecode+0x16>
        return false;
 8005b34:	2300      	movs	r3, #0
 8005b36:	e004      	b.n	8005b42 <UFEC23ENDEC_A2AReqPingAliveDecode+0x20>
    memcpy(&pDst->u32Ping, u8Datas, sizeof(uint32_t));
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	6812      	ldr	r2, [r2, #0]
 8005b3e:	601a      	str	r2, [r3, #0]
    return true;
 8005b40:	2301      	movs	r3, #1
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bc80      	pop	{r7}
 8005b4a:	4770      	bx	lr

08005b4c <UFEC23ENDEC_C2SGetParameterDecode>:
    u8Dst[n++] = (uint8_t)pSrc->eIterateOp;
    return n;
}

bool UFEC23ENDEC_C2SGetParameterDecode(UFEC23ENDEC_C2SGetParameter* pDst, const uint8_t u8Datas[], uint32_t u32DataLen)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
    if (u32DataLen < UFEC23ENDEC_C2SGETPARAMETER_COUNT)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <UFEC23ENDEC_C2SGetParameterDecode+0x16>
        return false;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	e00a      	b.n	8005b78 <UFEC23ENDEC_C2SGetParameterDecode+0x2c>
    pDst->eIterateOp = (UFEC23ENDEC_EITERATEOP)u8Datas[0];
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	781a      	ldrb	r2, [r3, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	701a      	strb	r2, [r3, #0]
    if (pDst->eIterateOp >= UFEC23ENDEC_EITERATEOP_Count)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d901      	bls.n	8005b76 <UFEC23ENDEC_C2SGetParameterDecode+0x2a>
        return false;
 8005b72:	2300      	movs	r3, #0
 8005b74:	e000      	b.n	8005b78 <UFEC23ENDEC_C2SGetParameterDecode+0x2c>
    return true;
 8005b76:	2301      	movs	r3, #1
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3714      	adds	r7, #20
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bc80      	pop	{r7}
 8005b80:	4770      	bx	lr

08005b82 <UFEC23ENDEC_S2CGetParameterRespEncode>:
    pDst->bIsFanModeAuto = (u8Datas[3] & 0x02) ? 0x01 : 0x00;
    return true;
}

int32_t UFEC23ENDEC_S2CGetParameterRespEncode(uint8_t u8Dst[], uint32_t u32DstLen, const UFEC23ENDEC_S2CReqParameterGetResp* pSrc)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b088      	sub	sp, #32
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	60f8      	str	r0, [r7, #12]
 8005b8a:	60b9      	str	r1, [r7, #8]
 8005b8c:	607a      	str	r2, [r7, #4]
    if (u32DstLen < UFEC23ENDEC_S2CREQPARAMETERGETRESP_MAX_COUNT)
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	2b4a      	cmp	r3, #74	; 0x4a
 8005b92:	d801      	bhi.n	8005b98 <UFEC23ENDEC_S2CGetParameterRespEncode+0x16>
        return 0;
 8005b94:	2300      	movs	r3, #0
 8005b96:	e07f      	b.n	8005c98 <UFEC23ENDEC_S2CGetParameterRespEncode+0x116>
 
    const UFEC23ENDEC_SEntry* psEntry = &pSrc->sEntry;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	61fb      	str	r3, [r7, #28]
	int32_t n = 0;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	61bb      	str	r3, [r7, #24]
	u8Dst[n++] = (uint8_t)((pSrc->bHasRecord ? (uint8_t)UFEC23ENDEC_S2CREQPARAMETERGETRESPFLAGS_HASRECORD : 0x00) |
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d001      	beq.n	8005bae <UFEC23ENDEC_S2CGetParameterRespEncode+0x2c>
 8005baa:	2201      	movs	r2, #1
 8005bac:	e000      	b.n	8005bb0 <UFEC23ENDEC_S2CGetParameterRespEncode+0x2e>
 8005bae:	2200      	movs	r2, #0
                           (pSrc->bIsEOF ? (uint8_t)UFEC23ENDEC_S2CREQPARAMETERGETRESPFLAGS_EOF : 0x00)) |
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	u8Dst[n++] = (uint8_t)((pSrc->bHasRecord ? (uint8_t)UFEC23ENDEC_S2CREQPARAMETERGETRESPFLAGS_HASRECORD : 0x00) |
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <UFEC23ENDEC_S2CGetParameterRespEncode+0x3c>
 8005bba:	2302      	movs	r3, #2
 8005bbc:	e000      	b.n	8005bc0 <UFEC23ENDEC_S2CGetParameterRespEncode+0x3e>
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	b25b      	sxtb	r3, r3
                           (pSrc->bIsFirstRecord ? (uint8_t)UFEC23ENDEC_S2CREQPARAMETERGETRESPFLAGS_ISFIRSTRECORD : 0x00);
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
                           (pSrc->bIsEOF ? (uint8_t)UFEC23ENDEC_S2CREQPARAMETERGETRESPFLAGS_EOF : 0x00)) |
 8005bca:	2a00      	cmp	r2, #0
 8005bcc:	d001      	beq.n	8005bd2 <UFEC23ENDEC_S2CGetParameterRespEncode+0x50>
 8005bce:	2204      	movs	r2, #4
 8005bd0:	e000      	b.n	8005bd4 <UFEC23ENDEC_S2CGetParameterRespEncode+0x52>
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	b259      	sxtb	r1, r3
	u8Dst[n++] = (uint8_t)((pSrc->bHasRecord ? (uint8_t)UFEC23ENDEC_S2CREQPARAMETERGETRESPFLAGS_HASRECORD : 0x00) |
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	1c5a      	adds	r2, r3, #1
 8005bdc:	61ba      	str	r2, [r7, #24]
 8005bde:	461a      	mov	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4413      	add	r3, r2
                           (pSrc->bIsEOF ? (uint8_t)UFEC23ENDEC_S2CREQPARAMETERGETRESPFLAGS_EOF : 0x00)) |
 8005be4:	b2ca      	uxtb	r2, r1
	u8Dst[n++] = (uint8_t)((pSrc->bHasRecord ? (uint8_t)UFEC23ENDEC_S2CREQPARAMETERGETRESPFLAGS_HASRECORD : 0x00) |
 8005be6:	701a      	strb	r2, [r3, #0]
	u8Dst[n++] = (uint8_t)psEntry->eParamType;
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	61ba      	str	r2, [r7, #24]
 8005bee:	461a      	mov	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	69fa      	ldr	r2, [r7, #28]
 8005bf6:	7fd2      	ldrb	r2, [r2, #31]
 8005bf8:	701a      	strb	r2, [r3, #0]
	const uint8_t u8KeyLen = (uint8_t)strnlen(psEntry->szKey, UFEC23ENDEC_PARAMETERITEM_KEY_LEN+1);
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	211f      	movs	r1, #31
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f009 fe0c 	bl	800f81c <strnlen>
 8005c04:	4603      	mov	r3, r0
 8005c06:	75fb      	strb	r3, [r7, #23]
	if (u8KeyLen > UFEC23ENDEC_PARAMETERITEM_KEY_LEN)
 8005c08:	7dfb      	ldrb	r3, [r7, #23]
 8005c0a:	2b1e      	cmp	r3, #30
 8005c0c:	d901      	bls.n	8005c12 <UFEC23ENDEC_S2CGetParameterRespEncode+0x90>
		return 0;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	e042      	b.n	8005c98 <UFEC23ENDEC_S2CGetParameterRespEncode+0x116>
	u8Dst[n++] = (uint8_t)u8KeyLen;
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	1c5a      	adds	r2, r3, #1
 8005c16:	61ba      	str	r2, [r7, #24]
 8005c18:	461a      	mov	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	7dfa      	ldrb	r2, [r7, #23]
 8005c20:	701a      	strb	r2, [r3, #0]
    memcpy(u8Dst + n, psEntry->szKey, (size_t)u8KeyLen);
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	4413      	add	r3, r2
 8005c28:	69f9      	ldr	r1, [r7, #28]
 8005c2a:	7dfa      	ldrb	r2, [r7, #23]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f008 ffbf 	bl	800ebb0 <memcpy>
    n += u8KeyLen;
 8005c32:	7dfb      	ldrb	r3, [r7, #23]
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	4413      	add	r3, r2
 8005c38:	61bb      	str	r3, [r7, #24]
    if (psEntry->eParamType == UFEC23ENDEC_EPARAMTYPE_Int32)
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	7fdb      	ldrb	r3, [r3, #31]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d129      	bne.n	8005c96 <UFEC23ENDEC_S2CGetParameterRespEncode+0x114>
    {
        memcpy(&u8Dst[n], &psEntry->uType.sInt32.s32Default, sizeof(int32_t));
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	4413      	add	r3, r2
 8005c48:	69fa      	ldr	r2, [r7, #28]
 8005c4a:	3220      	adds	r2, #32
 8005c4c:	6812      	ldr	r2, [r2, #0]
 8005c4e:	601a      	str	r2, [r3, #0]
        n += sizeof(int32_t);
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	3304      	adds	r3, #4
 8005c54:	61bb      	str	r3, [r7, #24]
        memcpy(&u8Dst[n], &psEntry->uType.sInt32.s32Min, sizeof(int32_t));
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	69fa      	ldr	r2, [r7, #28]
 8005c5e:	3224      	adds	r2, #36	; 0x24
 8005c60:	6812      	ldr	r2, [r2, #0]
 8005c62:	601a      	str	r2, [r3, #0]
        n += sizeof(int32_t);
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	3304      	adds	r3, #4
 8005c68:	61bb      	str	r3, [r7, #24]
        memcpy(&u8Dst[n], &psEntry->uType.sInt32.s32Max, sizeof(int32_t));
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	4413      	add	r3, r2
 8005c70:	69fa      	ldr	r2, [r7, #28]
 8005c72:	3228      	adds	r2, #40	; 0x28
 8005c74:	6812      	ldr	r2, [r2, #0]
 8005c76:	601a      	str	r2, [r3, #0]
        n += sizeof(int32_t);
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	3304      	adds	r3, #4
 8005c7c:	61bb      	str	r3, [r7, #24]
        memcpy(&u8Dst[n], &pSrc->uValue.s32Value, sizeof(int32_t));
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	4413      	add	r3, r2
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	322c      	adds	r2, #44	; 0x2c
 8005c88:	6812      	ldr	r2, [r2, #0]
 8005c8a:	601a      	str	r2, [r3, #0]
        n += sizeof(int32_t);
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	3304      	adds	r3, #4
 8005c90:	61bb      	str	r3, [r7, #24]
    else
    {
        // Not supported
        return 0;
    }
	return n;
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	e000      	b.n	8005c98 <UFEC23ENDEC_S2CGetParameterRespEncode+0x116>
        return 0;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3720      	adds	r7, #32
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <UFEC23ENDEC_C2SSetParameterDecode>:
    n += sizeof(UFEC23ENDEC_uValue);
    return n;
}

bool UFEC23ENDEC_C2SSetParameterDecode(UFEC23PROTOCOL_C2SSetParameter* pDst, const uint8_t u8Datas[], uint32_t u32DataLen)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
    if (u32DataLen < 1)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <UFEC23ENDEC_C2SSetParameterDecode+0x16>
        return false;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	e033      	b.n	8005d1e <UFEC23ENDEC_C2SSetParameterDecode+0x7e>
    int n = 0;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	617b      	str	r3, [r7, #20]
    const uint8_t u8KeyLen = u8Datas[n++];
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	1c5a      	adds	r2, r3, #1
 8005cbe:	617a      	str	r2, [r7, #20]
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	74fb      	strb	r3, [r7, #19]
    if (u32DataLen < 1 + u8KeyLen)
 8005cca:	7cfb      	ldrb	r3, [r7, #19]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	461a      	mov	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d201      	bcs.n	8005cda <UFEC23ENDEC_C2SSetParameterDecode+0x3a>
        return false;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	e021      	b.n	8005d1e <UFEC23ENDEC_C2SSetParameterDecode+0x7e>
    memcpy(pDst->szKey, &u8Datas[n], u8KeyLen);
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	7cfa      	ldrb	r2, [r7, #19]
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	f008 ff63 	bl	800ebb0 <memcpy>
    pDst->szKey[u8KeyLen] = 0;
 8005cea:	7cfb      	ldrb	r3, [r7, #19]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	2100      	movs	r1, #0
 8005cf0:	54d1      	strb	r1, [r2, r3]
    n += u8KeyLen;
 8005cf2:	7cfb      	ldrb	r3, [r7, #19]
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	617b      	str	r3, [r7, #20]
    if (u32DataLen < 1 + u8KeyLen + sizeof(UFEC23ENDEC_uValue))
 8005cfa:	7cfb      	ldrb	r3, [r7, #19]
 8005cfc:	3305      	adds	r3, #5
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d201      	bcs.n	8005d08 <UFEC23ENDEC_C2SSetParameterDecode+0x68>
        return false;
 8005d04:	2300      	movs	r3, #0
 8005d06:	e00a      	b.n	8005d1e <UFEC23ENDEC_C2SSetParameterDecode+0x7e>
    memcpy(&pDst->uValue, &u8Datas[n], sizeof(UFEC23ENDEC_uValue));
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	3320      	adds	r3, #32
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	68b9      	ldr	r1, [r7, #8]
 8005d10:	440a      	add	r2, r1
 8005d12:	6812      	ldr	r2, [r2, #0]
 8005d14:	601a      	str	r2, [r3, #0]
    n += sizeof(UFEC23ENDEC_uValue);
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	3304      	adds	r3, #4
 8005d1a:	617b      	str	r3, [r7, #20]
    return true;
 8005d1c:	2301      	movs	r3, #1
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3718      	adds	r7, #24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <UFEC23ENDEC_S2CSetParameterRespEncode>:

int32_t UFEC23ENDEC_S2CSetParameterRespEncode(uint8_t u8Dst[], uint32_t u32DstLen, const UFEC23PROTOCOL_S2CSetParameterResp* pSrc)
{
 8005d26:	b480      	push	{r7}
 8005d28:	b087      	sub	sp, #28
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	60f8      	str	r0, [r7, #12]
 8005d2e:	60b9      	str	r1, [r7, #8]
 8005d30:	607a      	str	r2, [r7, #4]
    if (u32DstLen < UFEC23ENDEC_S2CSETPARAMETERRESP_COUNT)
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d101      	bne.n	8005d3c <UFEC23ENDEC_S2CSetParameterRespEncode+0x16>
        return 0;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	e00b      	b.n	8005d54 <UFEC23ENDEC_S2CSetParameterRespEncode+0x2e>
    int n = 0;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	617b      	str	r3, [r7, #20]
    u8Dst[n++] = (uint8_t)pSrc->eResult;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	1c5a      	adds	r2, r3, #1
 8005d44:	617a      	str	r2, [r7, #20]
 8005d46:	461a      	mov	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	7812      	ldrb	r2, [r2, #0]
 8005d50:	701a      	strb	r2, [r3, #0]
    return n;
 8005d52:	697b      	ldr	r3, [r7, #20]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	371c      	adds	r7, #28
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bc80      	pop	{r7}
 8005d5c:	4770      	bx	lr
	...

08005d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d64:	4b08      	ldr	r3, [pc, #32]	; (8005d88 <HAL_Init+0x28>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a07      	ldr	r2, [pc, #28]	; (8005d88 <HAL_Init+0x28>)
 8005d6a:	f043 0310 	orr.w	r3, r3, #16
 8005d6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d70:	2003      	movs	r0, #3
 8005d72:	f000 f8d1 	bl	8005f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005d76:	2000      	movs	r0, #0
 8005d78:	f7ff fac2 	bl	8005300 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005d7c:	f7ff f914 	bl	8004fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	40022000 	.word	0x40022000

08005d8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005d90:	4b05      	ldr	r3, [pc, #20]	; (8005da8 <HAL_IncTick+0x1c>)
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	461a      	mov	r2, r3
 8005d96:	4b05      	ldr	r3, [pc, #20]	; (8005dac <HAL_IncTick+0x20>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	4a03      	ldr	r2, [pc, #12]	; (8005dac <HAL_IncTick+0x20>)
 8005d9e:	6013      	str	r3, [r2, #0]
}
 8005da0:	bf00      	nop
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bc80      	pop	{r7}
 8005da6:	4770      	bx	lr
 8005da8:	2000005c 	.word	0x2000005c
 8005dac:	20003b48 	.word	0x20003b48

08005db0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005db0:	b480      	push	{r7}
 8005db2:	af00      	add	r7, sp, #0
  return uwTick;
 8005db4:	4b02      	ldr	r3, [pc, #8]	; (8005dc0 <HAL_GetTick+0x10>)
 8005db6:	681b      	ldr	r3, [r3, #0]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bc80      	pop	{r7}
 8005dbe:	4770      	bx	lr
 8005dc0:	20003b48 	.word	0x20003b48

08005dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f003 0307 	and.w	r3, r3, #7
 8005dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005dd4:	4b0c      	ldr	r3, [pc, #48]	; (8005e08 <__NVIC_SetPriorityGrouping+0x44>)
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005de0:	4013      	ands	r3, r2
 8005de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005df6:	4a04      	ldr	r2, [pc, #16]	; (8005e08 <__NVIC_SetPriorityGrouping+0x44>)
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	60d3      	str	r3, [r2, #12]
}
 8005dfc:	bf00      	nop
 8005dfe:	3714      	adds	r7, #20
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bc80      	pop	{r7}
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	e000ed00 	.word	0xe000ed00

08005e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e10:	4b04      	ldr	r3, [pc, #16]	; (8005e24 <__NVIC_GetPriorityGrouping+0x18>)
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	0a1b      	lsrs	r3, r3, #8
 8005e16:	f003 0307 	and.w	r3, r3, #7
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bc80      	pop	{r7}
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	e000ed00 	.word	0xe000ed00

08005e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	4603      	mov	r3, r0
 8005e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	db0b      	blt.n	8005e52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e3a:	79fb      	ldrb	r3, [r7, #7]
 8005e3c:	f003 021f 	and.w	r2, r3, #31
 8005e40:	4906      	ldr	r1, [pc, #24]	; (8005e5c <__NVIC_EnableIRQ+0x34>)
 8005e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e46:	095b      	lsrs	r3, r3, #5
 8005e48:	2001      	movs	r0, #1
 8005e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8005e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005e52:	bf00      	nop
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bc80      	pop	{r7}
 8005e5a:	4770      	bx	lr
 8005e5c:	e000e100 	.word	0xe000e100

08005e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	4603      	mov	r3, r0
 8005e68:	6039      	str	r1, [r7, #0]
 8005e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	db0a      	blt.n	8005e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	490c      	ldr	r1, [pc, #48]	; (8005eac <__NVIC_SetPriority+0x4c>)
 8005e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e7e:	0112      	lsls	r2, r2, #4
 8005e80:	b2d2      	uxtb	r2, r2
 8005e82:	440b      	add	r3, r1
 8005e84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005e88:	e00a      	b.n	8005ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	b2da      	uxtb	r2, r3
 8005e8e:	4908      	ldr	r1, [pc, #32]	; (8005eb0 <__NVIC_SetPriority+0x50>)
 8005e90:	79fb      	ldrb	r3, [r7, #7]
 8005e92:	f003 030f 	and.w	r3, r3, #15
 8005e96:	3b04      	subs	r3, #4
 8005e98:	0112      	lsls	r2, r2, #4
 8005e9a:	b2d2      	uxtb	r2, r2
 8005e9c:	440b      	add	r3, r1
 8005e9e:	761a      	strb	r2, [r3, #24]
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bc80      	pop	{r7}
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	e000e100 	.word	0xe000e100
 8005eb0:	e000ed00 	.word	0xe000ed00

08005eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b089      	sub	sp, #36	; 0x24
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f003 0307 	and.w	r3, r3, #7
 8005ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	f1c3 0307 	rsb	r3, r3, #7
 8005ece:	2b04      	cmp	r3, #4
 8005ed0:	bf28      	it	cs
 8005ed2:	2304      	movcs	r3, #4
 8005ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	3304      	adds	r3, #4
 8005eda:	2b06      	cmp	r3, #6
 8005edc:	d902      	bls.n	8005ee4 <NVIC_EncodePriority+0x30>
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	3b03      	subs	r3, #3
 8005ee2:	e000      	b.n	8005ee6 <NVIC_EncodePriority+0x32>
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef2:	43da      	mvns	r2, r3
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	401a      	ands	r2, r3
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005efc:	f04f 31ff 	mov.w	r1, #4294967295
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	fa01 f303 	lsl.w	r3, r1, r3
 8005f06:	43d9      	mvns	r1, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f0c:	4313      	orrs	r3, r2
         );
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3724      	adds	r7, #36	; 0x24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bc80      	pop	{r7}
 8005f16:	4770      	bx	lr

08005f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f7ff ff4f 	bl	8005dc4 <__NVIC_SetPriorityGrouping>
}
 8005f26:	bf00      	nop
 8005f28:	3708      	adds	r7, #8
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b086      	sub	sp, #24
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	4603      	mov	r3, r0
 8005f36:	60b9      	str	r1, [r7, #8]
 8005f38:	607a      	str	r2, [r7, #4]
 8005f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005f40:	f7ff ff64 	bl	8005e0c <__NVIC_GetPriorityGrouping>
 8005f44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	68b9      	ldr	r1, [r7, #8]
 8005f4a:	6978      	ldr	r0, [r7, #20]
 8005f4c:	f7ff ffb2 	bl	8005eb4 <NVIC_EncodePriority>
 8005f50:	4602      	mov	r2, r0
 8005f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f56:	4611      	mov	r1, r2
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7ff ff81 	bl	8005e60 <__NVIC_SetPriority>
}
 8005f5e:	bf00      	nop
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b082      	sub	sp, #8
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7ff ff57 	bl	8005e28 <__NVIC_EnableIRQ>
}
 8005f7a:	bf00      	nop
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
	...

08005f84 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e059      	b.n	800604e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	4b2d      	ldr	r3, [pc, #180]	; (8006058 <HAL_DMA_Init+0xd4>)
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d80f      	bhi.n	8005fc6 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	461a      	mov	r2, r3
 8005fac:	4b2b      	ldr	r3, [pc, #172]	; (800605c <HAL_DMA_Init+0xd8>)
 8005fae:	4413      	add	r3, r2
 8005fb0:	4a2b      	ldr	r2, [pc, #172]	; (8006060 <HAL_DMA_Init+0xdc>)
 8005fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb6:	091b      	lsrs	r3, r3, #4
 8005fb8:	009a      	lsls	r2, r3, #2
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a28      	ldr	r2, [pc, #160]	; (8006064 <HAL_DMA_Init+0xe0>)
 8005fc2:	63da      	str	r2, [r3, #60]	; 0x3c
 8005fc4:	e00e      	b.n	8005fe4 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	4b26      	ldr	r3, [pc, #152]	; (8006068 <HAL_DMA_Init+0xe4>)
 8005fce:	4413      	add	r3, r2
 8005fd0:	4a23      	ldr	r2, [pc, #140]	; (8006060 <HAL_DMA_Init+0xdc>)
 8005fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd6:	091b      	lsrs	r3, r3, #4
 8005fd8:	009a      	lsls	r2, r3, #2
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a22      	ldr	r2, [pc, #136]	; (800606c <HAL_DMA_Init+0xe8>)
 8005fe2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005ffa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005ffe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006008:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006014:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006020:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	69db      	ldr	r3, [r3, #28]
 8006026:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	4313      	orrs	r3, r2
 800602c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3714      	adds	r7, #20
 8006052:	46bd      	mov	sp, r7
 8006054:	bc80      	pop	{r7}
 8006056:	4770      	bx	lr
 8006058:	40020407 	.word	0x40020407
 800605c:	bffdfff8 	.word	0xbffdfff8
 8006060:	cccccccd 	.word	0xcccccccd
 8006064:	40020000 	.word	0x40020000
 8006068:	bffdfbf8 	.word	0xbffdfbf8
 800606c:	40020400 	.word	0x40020400

08006070 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
 800607c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800607e:	2300      	movs	r3, #0
 8006080:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d101      	bne.n	8006090 <HAL_DMA_Start_IT+0x20>
 800608c:	2302      	movs	r3, #2
 800608e:	e04a      	b.n	8006126 <HAL_DMA_Start_IT+0xb6>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d13a      	bne.n	8006118 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2202      	movs	r2, #2
 80060a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 0201 	bic.w	r2, r2, #1
 80060be:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	68b9      	ldr	r1, [r7, #8]
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f000 fbbc 	bl	8006844 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d008      	beq.n	80060e6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f042 020e 	orr.w	r2, r2, #14
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	e00f      	b.n	8006106 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 0204 	bic.w	r2, r2, #4
 80060f4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f042 020a 	orr.w	r2, r2, #10
 8006104:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f042 0201 	orr.w	r2, r2, #1
 8006114:	601a      	str	r2, [r3, #0]
 8006116:	e005      	b.n	8006124 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006120:	2302      	movs	r3, #2
 8006122:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006124:	7dfb      	ldrb	r3, [r7, #23]
}
 8006126:	4618      	mov	r0, r3
 8006128:	3718      	adds	r7, #24
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800612e:	b480      	push	{r7}
 8006130:	b085      	sub	sp, #20
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006140:	2b02      	cmp	r3, #2
 8006142:	d008      	beq.n	8006156 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2204      	movs	r2, #4
 8006148:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e020      	b.n	8006198 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f022 020e 	bic.w	r2, r2, #14
 8006164:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 0201 	bic.w	r2, r2, #1
 8006174:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617e:	2101      	movs	r1, #1
 8006180:	fa01 f202 	lsl.w	r2, r1, r2
 8006184:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8006196:	7bfb      	ldrb	r3, [r7, #15]
}
 8006198:	4618      	mov	r0, r3
 800619a:	3714      	adds	r7, #20
 800619c:	46bd      	mov	sp, r7
 800619e:	bc80      	pop	{r7}
 80061a0:	4770      	bx	lr
	...

080061a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061ac:	2300      	movs	r3, #0
 80061ae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d005      	beq.n	80061c6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2204      	movs	r2, #4
 80061be:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	73fb      	strb	r3, [r7, #15]
 80061c4:	e0d6      	b.n	8006374 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f022 020e 	bic.w	r2, r2, #14
 80061d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f022 0201 	bic.w	r2, r2, #1
 80061e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	461a      	mov	r2, r3
 80061ec:	4b64      	ldr	r3, [pc, #400]	; (8006380 <HAL_DMA_Abort_IT+0x1dc>)
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d958      	bls.n	80062a4 <HAL_DMA_Abort_IT+0x100>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a63      	ldr	r2, [pc, #396]	; (8006384 <HAL_DMA_Abort_IT+0x1e0>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d04f      	beq.n	800629c <HAL_DMA_Abort_IT+0xf8>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a61      	ldr	r2, [pc, #388]	; (8006388 <HAL_DMA_Abort_IT+0x1e4>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d048      	beq.n	8006298 <HAL_DMA_Abort_IT+0xf4>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a60      	ldr	r2, [pc, #384]	; (800638c <HAL_DMA_Abort_IT+0x1e8>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d040      	beq.n	8006292 <HAL_DMA_Abort_IT+0xee>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a5e      	ldr	r2, [pc, #376]	; (8006390 <HAL_DMA_Abort_IT+0x1ec>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d038      	beq.n	800628c <HAL_DMA_Abort_IT+0xe8>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a5d      	ldr	r2, [pc, #372]	; (8006394 <HAL_DMA_Abort_IT+0x1f0>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d030      	beq.n	8006286 <HAL_DMA_Abort_IT+0xe2>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a5b      	ldr	r2, [pc, #364]	; (8006398 <HAL_DMA_Abort_IT+0x1f4>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d028      	beq.n	8006280 <HAL_DMA_Abort_IT+0xdc>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a53      	ldr	r2, [pc, #332]	; (8006380 <HAL_DMA_Abort_IT+0x1dc>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d020      	beq.n	800627a <HAL_DMA_Abort_IT+0xd6>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a57      	ldr	r2, [pc, #348]	; (800639c <HAL_DMA_Abort_IT+0x1f8>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d019      	beq.n	8006276 <HAL_DMA_Abort_IT+0xd2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a56      	ldr	r2, [pc, #344]	; (80063a0 <HAL_DMA_Abort_IT+0x1fc>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d012      	beq.n	8006272 <HAL_DMA_Abort_IT+0xce>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a54      	ldr	r2, [pc, #336]	; (80063a4 <HAL_DMA_Abort_IT+0x200>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d00a      	beq.n	800626c <HAL_DMA_Abort_IT+0xc8>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a53      	ldr	r2, [pc, #332]	; (80063a8 <HAL_DMA_Abort_IT+0x204>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d102      	bne.n	8006266 <HAL_DMA_Abort_IT+0xc2>
 8006260:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006264:	e01b      	b.n	800629e <HAL_DMA_Abort_IT+0xfa>
 8006266:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800626a:	e018      	b.n	800629e <HAL_DMA_Abort_IT+0xfa>
 800626c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006270:	e015      	b.n	800629e <HAL_DMA_Abort_IT+0xfa>
 8006272:	2310      	movs	r3, #16
 8006274:	e013      	b.n	800629e <HAL_DMA_Abort_IT+0xfa>
 8006276:	2301      	movs	r3, #1
 8006278:	e011      	b.n	800629e <HAL_DMA_Abort_IT+0xfa>
 800627a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800627e:	e00e      	b.n	800629e <HAL_DMA_Abort_IT+0xfa>
 8006280:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006284:	e00b      	b.n	800629e <HAL_DMA_Abort_IT+0xfa>
 8006286:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800628a:	e008      	b.n	800629e <HAL_DMA_Abort_IT+0xfa>
 800628c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006290:	e005      	b.n	800629e <HAL_DMA_Abort_IT+0xfa>
 8006292:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006296:	e002      	b.n	800629e <HAL_DMA_Abort_IT+0xfa>
 8006298:	2310      	movs	r3, #16
 800629a:	e000      	b.n	800629e <HAL_DMA_Abort_IT+0xfa>
 800629c:	2301      	movs	r3, #1
 800629e:	4a43      	ldr	r2, [pc, #268]	; (80063ac <HAL_DMA_Abort_IT+0x208>)
 80062a0:	6053      	str	r3, [r2, #4]
 80062a2:	e057      	b.n	8006354 <HAL_DMA_Abort_IT+0x1b0>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a36      	ldr	r2, [pc, #216]	; (8006384 <HAL_DMA_Abort_IT+0x1e0>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d04f      	beq.n	800634e <HAL_DMA_Abort_IT+0x1aa>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a35      	ldr	r2, [pc, #212]	; (8006388 <HAL_DMA_Abort_IT+0x1e4>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d048      	beq.n	800634a <HAL_DMA_Abort_IT+0x1a6>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a33      	ldr	r2, [pc, #204]	; (800638c <HAL_DMA_Abort_IT+0x1e8>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d040      	beq.n	8006344 <HAL_DMA_Abort_IT+0x1a0>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a32      	ldr	r2, [pc, #200]	; (8006390 <HAL_DMA_Abort_IT+0x1ec>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d038      	beq.n	800633e <HAL_DMA_Abort_IT+0x19a>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a30      	ldr	r2, [pc, #192]	; (8006394 <HAL_DMA_Abort_IT+0x1f0>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d030      	beq.n	8006338 <HAL_DMA_Abort_IT+0x194>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a2f      	ldr	r2, [pc, #188]	; (8006398 <HAL_DMA_Abort_IT+0x1f4>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d028      	beq.n	8006332 <HAL_DMA_Abort_IT+0x18e>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a26      	ldr	r2, [pc, #152]	; (8006380 <HAL_DMA_Abort_IT+0x1dc>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d020      	beq.n	800632c <HAL_DMA_Abort_IT+0x188>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a2b      	ldr	r2, [pc, #172]	; (800639c <HAL_DMA_Abort_IT+0x1f8>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d019      	beq.n	8006328 <HAL_DMA_Abort_IT+0x184>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a29      	ldr	r2, [pc, #164]	; (80063a0 <HAL_DMA_Abort_IT+0x1fc>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d012      	beq.n	8006324 <HAL_DMA_Abort_IT+0x180>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a28      	ldr	r2, [pc, #160]	; (80063a4 <HAL_DMA_Abort_IT+0x200>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d00a      	beq.n	800631e <HAL_DMA_Abort_IT+0x17a>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a26      	ldr	r2, [pc, #152]	; (80063a8 <HAL_DMA_Abort_IT+0x204>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d102      	bne.n	8006318 <HAL_DMA_Abort_IT+0x174>
 8006312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006316:	e01b      	b.n	8006350 <HAL_DMA_Abort_IT+0x1ac>
 8006318:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800631c:	e018      	b.n	8006350 <HAL_DMA_Abort_IT+0x1ac>
 800631e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006322:	e015      	b.n	8006350 <HAL_DMA_Abort_IT+0x1ac>
 8006324:	2310      	movs	r3, #16
 8006326:	e013      	b.n	8006350 <HAL_DMA_Abort_IT+0x1ac>
 8006328:	2301      	movs	r3, #1
 800632a:	e011      	b.n	8006350 <HAL_DMA_Abort_IT+0x1ac>
 800632c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006330:	e00e      	b.n	8006350 <HAL_DMA_Abort_IT+0x1ac>
 8006332:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006336:	e00b      	b.n	8006350 <HAL_DMA_Abort_IT+0x1ac>
 8006338:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800633c:	e008      	b.n	8006350 <HAL_DMA_Abort_IT+0x1ac>
 800633e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006342:	e005      	b.n	8006350 <HAL_DMA_Abort_IT+0x1ac>
 8006344:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006348:	e002      	b.n	8006350 <HAL_DMA_Abort_IT+0x1ac>
 800634a:	2310      	movs	r3, #16
 800634c:	e000      	b.n	8006350 <HAL_DMA_Abort_IT+0x1ac>
 800634e:	2301      	movs	r3, #1
 8006350:	4a17      	ldr	r2, [pc, #92]	; (80063b0 <HAL_DMA_Abort_IT+0x20c>)
 8006352:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006368:	2b00      	cmp	r3, #0
 800636a:	d003      	beq.n	8006374 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	4798      	blx	r3
    } 
  }
  return status;
 8006374:	7bfb      	ldrb	r3, [r7, #15]
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	40020080 	.word	0x40020080
 8006384:	40020008 	.word	0x40020008
 8006388:	4002001c 	.word	0x4002001c
 800638c:	40020030 	.word	0x40020030
 8006390:	40020044 	.word	0x40020044
 8006394:	40020058 	.word	0x40020058
 8006398:	4002006c 	.word	0x4002006c
 800639c:	40020408 	.word	0x40020408
 80063a0:	4002041c 	.word	0x4002041c
 80063a4:	40020430 	.word	0x40020430
 80063a8:	40020444 	.word	0x40020444
 80063ac:	40020400 	.word	0x40020400
 80063b0:	40020000 	.word	0x40020000

080063b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d0:	2204      	movs	r2, #4
 80063d2:	409a      	lsls	r2, r3
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	4013      	ands	r3, r2
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 80d6 	beq.w	800658a <HAL_DMA_IRQHandler+0x1d6>
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	f003 0304 	and.w	r3, r3, #4
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f000 80d0 	beq.w	800658a <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0320 	and.w	r3, r3, #32
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d107      	bne.n	8006408 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f022 0204 	bic.w	r2, r2, #4
 8006406:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	461a      	mov	r2, r3
 800640e:	4b9b      	ldr	r3, [pc, #620]	; (800667c <HAL_DMA_IRQHandler+0x2c8>)
 8006410:	429a      	cmp	r2, r3
 8006412:	d958      	bls.n	80064c6 <HAL_DMA_IRQHandler+0x112>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a99      	ldr	r2, [pc, #612]	; (8006680 <HAL_DMA_IRQHandler+0x2cc>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d04f      	beq.n	80064be <HAL_DMA_IRQHandler+0x10a>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a98      	ldr	r2, [pc, #608]	; (8006684 <HAL_DMA_IRQHandler+0x2d0>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d048      	beq.n	80064ba <HAL_DMA_IRQHandler+0x106>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a96      	ldr	r2, [pc, #600]	; (8006688 <HAL_DMA_IRQHandler+0x2d4>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d040      	beq.n	80064b4 <HAL_DMA_IRQHandler+0x100>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a95      	ldr	r2, [pc, #596]	; (800668c <HAL_DMA_IRQHandler+0x2d8>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d038      	beq.n	80064ae <HAL_DMA_IRQHandler+0xfa>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a93      	ldr	r2, [pc, #588]	; (8006690 <HAL_DMA_IRQHandler+0x2dc>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d030      	beq.n	80064a8 <HAL_DMA_IRQHandler+0xf4>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a92      	ldr	r2, [pc, #584]	; (8006694 <HAL_DMA_IRQHandler+0x2e0>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d028      	beq.n	80064a2 <HAL_DMA_IRQHandler+0xee>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a89      	ldr	r2, [pc, #548]	; (800667c <HAL_DMA_IRQHandler+0x2c8>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d020      	beq.n	800649c <HAL_DMA_IRQHandler+0xe8>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a8e      	ldr	r2, [pc, #568]	; (8006698 <HAL_DMA_IRQHandler+0x2e4>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d019      	beq.n	8006498 <HAL_DMA_IRQHandler+0xe4>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a8c      	ldr	r2, [pc, #560]	; (800669c <HAL_DMA_IRQHandler+0x2e8>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d012      	beq.n	8006494 <HAL_DMA_IRQHandler+0xe0>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a8b      	ldr	r2, [pc, #556]	; (80066a0 <HAL_DMA_IRQHandler+0x2ec>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d00a      	beq.n	800648e <HAL_DMA_IRQHandler+0xda>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a89      	ldr	r2, [pc, #548]	; (80066a4 <HAL_DMA_IRQHandler+0x2f0>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d102      	bne.n	8006488 <HAL_DMA_IRQHandler+0xd4>
 8006482:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006486:	e01b      	b.n	80064c0 <HAL_DMA_IRQHandler+0x10c>
 8006488:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800648c:	e018      	b.n	80064c0 <HAL_DMA_IRQHandler+0x10c>
 800648e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006492:	e015      	b.n	80064c0 <HAL_DMA_IRQHandler+0x10c>
 8006494:	2340      	movs	r3, #64	; 0x40
 8006496:	e013      	b.n	80064c0 <HAL_DMA_IRQHandler+0x10c>
 8006498:	2304      	movs	r3, #4
 800649a:	e011      	b.n	80064c0 <HAL_DMA_IRQHandler+0x10c>
 800649c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80064a0:	e00e      	b.n	80064c0 <HAL_DMA_IRQHandler+0x10c>
 80064a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80064a6:	e00b      	b.n	80064c0 <HAL_DMA_IRQHandler+0x10c>
 80064a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80064ac:	e008      	b.n	80064c0 <HAL_DMA_IRQHandler+0x10c>
 80064ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80064b2:	e005      	b.n	80064c0 <HAL_DMA_IRQHandler+0x10c>
 80064b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064b8:	e002      	b.n	80064c0 <HAL_DMA_IRQHandler+0x10c>
 80064ba:	2340      	movs	r3, #64	; 0x40
 80064bc:	e000      	b.n	80064c0 <HAL_DMA_IRQHandler+0x10c>
 80064be:	2304      	movs	r3, #4
 80064c0:	4a79      	ldr	r2, [pc, #484]	; (80066a8 <HAL_DMA_IRQHandler+0x2f4>)
 80064c2:	6053      	str	r3, [r2, #4]
 80064c4:	e057      	b.n	8006576 <HAL_DMA_IRQHandler+0x1c2>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a6d      	ldr	r2, [pc, #436]	; (8006680 <HAL_DMA_IRQHandler+0x2cc>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d04f      	beq.n	8006570 <HAL_DMA_IRQHandler+0x1bc>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a6b      	ldr	r2, [pc, #428]	; (8006684 <HAL_DMA_IRQHandler+0x2d0>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d048      	beq.n	800656c <HAL_DMA_IRQHandler+0x1b8>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a6a      	ldr	r2, [pc, #424]	; (8006688 <HAL_DMA_IRQHandler+0x2d4>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d040      	beq.n	8006566 <HAL_DMA_IRQHandler+0x1b2>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a68      	ldr	r2, [pc, #416]	; (800668c <HAL_DMA_IRQHandler+0x2d8>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d038      	beq.n	8006560 <HAL_DMA_IRQHandler+0x1ac>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a67      	ldr	r2, [pc, #412]	; (8006690 <HAL_DMA_IRQHandler+0x2dc>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d030      	beq.n	800655a <HAL_DMA_IRQHandler+0x1a6>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a65      	ldr	r2, [pc, #404]	; (8006694 <HAL_DMA_IRQHandler+0x2e0>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d028      	beq.n	8006554 <HAL_DMA_IRQHandler+0x1a0>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a5d      	ldr	r2, [pc, #372]	; (800667c <HAL_DMA_IRQHandler+0x2c8>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d020      	beq.n	800654e <HAL_DMA_IRQHandler+0x19a>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a61      	ldr	r2, [pc, #388]	; (8006698 <HAL_DMA_IRQHandler+0x2e4>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d019      	beq.n	800654a <HAL_DMA_IRQHandler+0x196>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a60      	ldr	r2, [pc, #384]	; (800669c <HAL_DMA_IRQHandler+0x2e8>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d012      	beq.n	8006546 <HAL_DMA_IRQHandler+0x192>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a5e      	ldr	r2, [pc, #376]	; (80066a0 <HAL_DMA_IRQHandler+0x2ec>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d00a      	beq.n	8006540 <HAL_DMA_IRQHandler+0x18c>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a5d      	ldr	r2, [pc, #372]	; (80066a4 <HAL_DMA_IRQHandler+0x2f0>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d102      	bne.n	800653a <HAL_DMA_IRQHandler+0x186>
 8006534:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006538:	e01b      	b.n	8006572 <HAL_DMA_IRQHandler+0x1be>
 800653a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800653e:	e018      	b.n	8006572 <HAL_DMA_IRQHandler+0x1be>
 8006540:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006544:	e015      	b.n	8006572 <HAL_DMA_IRQHandler+0x1be>
 8006546:	2340      	movs	r3, #64	; 0x40
 8006548:	e013      	b.n	8006572 <HAL_DMA_IRQHandler+0x1be>
 800654a:	2304      	movs	r3, #4
 800654c:	e011      	b.n	8006572 <HAL_DMA_IRQHandler+0x1be>
 800654e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006552:	e00e      	b.n	8006572 <HAL_DMA_IRQHandler+0x1be>
 8006554:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006558:	e00b      	b.n	8006572 <HAL_DMA_IRQHandler+0x1be>
 800655a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800655e:	e008      	b.n	8006572 <HAL_DMA_IRQHandler+0x1be>
 8006560:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006564:	e005      	b.n	8006572 <HAL_DMA_IRQHandler+0x1be>
 8006566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800656a:	e002      	b.n	8006572 <HAL_DMA_IRQHandler+0x1be>
 800656c:	2340      	movs	r3, #64	; 0x40
 800656e:	e000      	b.n	8006572 <HAL_DMA_IRQHandler+0x1be>
 8006570:	2304      	movs	r3, #4
 8006572:	4a4e      	ldr	r2, [pc, #312]	; (80066ac <HAL_DMA_IRQHandler+0x2f8>)
 8006574:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657a:	2b00      	cmp	r3, #0
 800657c:	f000 8136 	beq.w	80067ec <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8006588:	e130      	b.n	80067ec <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658e:	2202      	movs	r2, #2
 8006590:	409a      	lsls	r2, r3
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	4013      	ands	r3, r2
 8006596:	2b00      	cmp	r3, #0
 8006598:	f000 80f8 	beq.w	800678c <HAL_DMA_IRQHandler+0x3d8>
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f003 0302 	and.w	r3, r3, #2
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f000 80f2 	beq.w	800678c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0320 	and.w	r3, r3, #32
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10b      	bne.n	80065ce <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f022 020a 	bic.w	r2, r2, #10
 80065c4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	461a      	mov	r2, r3
 80065d4:	4b29      	ldr	r3, [pc, #164]	; (800667c <HAL_DMA_IRQHandler+0x2c8>)
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d973      	bls.n	80066c2 <HAL_DMA_IRQHandler+0x30e>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a28      	ldr	r2, [pc, #160]	; (8006680 <HAL_DMA_IRQHandler+0x2cc>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d06a      	beq.n	80066ba <HAL_DMA_IRQHandler+0x306>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a26      	ldr	r2, [pc, #152]	; (8006684 <HAL_DMA_IRQHandler+0x2d0>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d063      	beq.n	80066b6 <HAL_DMA_IRQHandler+0x302>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a25      	ldr	r2, [pc, #148]	; (8006688 <HAL_DMA_IRQHandler+0x2d4>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d05b      	beq.n	80066b0 <HAL_DMA_IRQHandler+0x2fc>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a23      	ldr	r2, [pc, #140]	; (800668c <HAL_DMA_IRQHandler+0x2d8>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d038      	beq.n	8006674 <HAL_DMA_IRQHandler+0x2c0>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a22      	ldr	r2, [pc, #136]	; (8006690 <HAL_DMA_IRQHandler+0x2dc>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d030      	beq.n	800666e <HAL_DMA_IRQHandler+0x2ba>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a20      	ldr	r2, [pc, #128]	; (8006694 <HAL_DMA_IRQHandler+0x2e0>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d028      	beq.n	8006668 <HAL_DMA_IRQHandler+0x2b4>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a18      	ldr	r2, [pc, #96]	; (800667c <HAL_DMA_IRQHandler+0x2c8>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d020      	beq.n	8006662 <HAL_DMA_IRQHandler+0x2ae>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a1c      	ldr	r2, [pc, #112]	; (8006698 <HAL_DMA_IRQHandler+0x2e4>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d019      	beq.n	800665e <HAL_DMA_IRQHandler+0x2aa>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a1b      	ldr	r2, [pc, #108]	; (800669c <HAL_DMA_IRQHandler+0x2e8>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d012      	beq.n	800665a <HAL_DMA_IRQHandler+0x2a6>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a19      	ldr	r2, [pc, #100]	; (80066a0 <HAL_DMA_IRQHandler+0x2ec>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d00a      	beq.n	8006654 <HAL_DMA_IRQHandler+0x2a0>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a18      	ldr	r2, [pc, #96]	; (80066a4 <HAL_DMA_IRQHandler+0x2f0>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d102      	bne.n	800664e <HAL_DMA_IRQHandler+0x29a>
 8006648:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800664c:	e036      	b.n	80066bc <HAL_DMA_IRQHandler+0x308>
 800664e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006652:	e033      	b.n	80066bc <HAL_DMA_IRQHandler+0x308>
 8006654:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006658:	e030      	b.n	80066bc <HAL_DMA_IRQHandler+0x308>
 800665a:	2320      	movs	r3, #32
 800665c:	e02e      	b.n	80066bc <HAL_DMA_IRQHandler+0x308>
 800665e:	2302      	movs	r3, #2
 8006660:	e02c      	b.n	80066bc <HAL_DMA_IRQHandler+0x308>
 8006662:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006666:	e029      	b.n	80066bc <HAL_DMA_IRQHandler+0x308>
 8006668:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800666c:	e026      	b.n	80066bc <HAL_DMA_IRQHandler+0x308>
 800666e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006672:	e023      	b.n	80066bc <HAL_DMA_IRQHandler+0x308>
 8006674:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006678:	e020      	b.n	80066bc <HAL_DMA_IRQHandler+0x308>
 800667a:	bf00      	nop
 800667c:	40020080 	.word	0x40020080
 8006680:	40020008 	.word	0x40020008
 8006684:	4002001c 	.word	0x4002001c
 8006688:	40020030 	.word	0x40020030
 800668c:	40020044 	.word	0x40020044
 8006690:	40020058 	.word	0x40020058
 8006694:	4002006c 	.word	0x4002006c
 8006698:	40020408 	.word	0x40020408
 800669c:	4002041c 	.word	0x4002041c
 80066a0:	40020430 	.word	0x40020430
 80066a4:	40020444 	.word	0x40020444
 80066a8:	40020400 	.word	0x40020400
 80066ac:	40020000 	.word	0x40020000
 80066b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066b4:	e002      	b.n	80066bc <HAL_DMA_IRQHandler+0x308>
 80066b6:	2320      	movs	r3, #32
 80066b8:	e000      	b.n	80066bc <HAL_DMA_IRQHandler+0x308>
 80066ba:	2302      	movs	r3, #2
 80066bc:	4a4e      	ldr	r2, [pc, #312]	; (80067f8 <HAL_DMA_IRQHandler+0x444>)
 80066be:	6053      	str	r3, [r2, #4]
 80066c0:	e057      	b.n	8006772 <HAL_DMA_IRQHandler+0x3be>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a4d      	ldr	r2, [pc, #308]	; (80067fc <HAL_DMA_IRQHandler+0x448>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d04f      	beq.n	800676c <HAL_DMA_IRQHandler+0x3b8>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a4b      	ldr	r2, [pc, #300]	; (8006800 <HAL_DMA_IRQHandler+0x44c>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d048      	beq.n	8006768 <HAL_DMA_IRQHandler+0x3b4>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a4a      	ldr	r2, [pc, #296]	; (8006804 <HAL_DMA_IRQHandler+0x450>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d040      	beq.n	8006762 <HAL_DMA_IRQHandler+0x3ae>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a48      	ldr	r2, [pc, #288]	; (8006808 <HAL_DMA_IRQHandler+0x454>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d038      	beq.n	800675c <HAL_DMA_IRQHandler+0x3a8>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a47      	ldr	r2, [pc, #284]	; (800680c <HAL_DMA_IRQHandler+0x458>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d030      	beq.n	8006756 <HAL_DMA_IRQHandler+0x3a2>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a45      	ldr	r2, [pc, #276]	; (8006810 <HAL_DMA_IRQHandler+0x45c>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d028      	beq.n	8006750 <HAL_DMA_IRQHandler+0x39c>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a44      	ldr	r2, [pc, #272]	; (8006814 <HAL_DMA_IRQHandler+0x460>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d020      	beq.n	800674a <HAL_DMA_IRQHandler+0x396>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a42      	ldr	r2, [pc, #264]	; (8006818 <HAL_DMA_IRQHandler+0x464>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d019      	beq.n	8006746 <HAL_DMA_IRQHandler+0x392>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a41      	ldr	r2, [pc, #260]	; (800681c <HAL_DMA_IRQHandler+0x468>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d012      	beq.n	8006742 <HAL_DMA_IRQHandler+0x38e>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a3f      	ldr	r2, [pc, #252]	; (8006820 <HAL_DMA_IRQHandler+0x46c>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d00a      	beq.n	800673c <HAL_DMA_IRQHandler+0x388>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a3e      	ldr	r2, [pc, #248]	; (8006824 <HAL_DMA_IRQHandler+0x470>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d102      	bne.n	8006736 <HAL_DMA_IRQHandler+0x382>
 8006730:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006734:	e01b      	b.n	800676e <HAL_DMA_IRQHandler+0x3ba>
 8006736:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800673a:	e018      	b.n	800676e <HAL_DMA_IRQHandler+0x3ba>
 800673c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006740:	e015      	b.n	800676e <HAL_DMA_IRQHandler+0x3ba>
 8006742:	2320      	movs	r3, #32
 8006744:	e013      	b.n	800676e <HAL_DMA_IRQHandler+0x3ba>
 8006746:	2302      	movs	r3, #2
 8006748:	e011      	b.n	800676e <HAL_DMA_IRQHandler+0x3ba>
 800674a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800674e:	e00e      	b.n	800676e <HAL_DMA_IRQHandler+0x3ba>
 8006750:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006754:	e00b      	b.n	800676e <HAL_DMA_IRQHandler+0x3ba>
 8006756:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800675a:	e008      	b.n	800676e <HAL_DMA_IRQHandler+0x3ba>
 800675c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006760:	e005      	b.n	800676e <HAL_DMA_IRQHandler+0x3ba>
 8006762:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006766:	e002      	b.n	800676e <HAL_DMA_IRQHandler+0x3ba>
 8006768:	2320      	movs	r3, #32
 800676a:	e000      	b.n	800676e <HAL_DMA_IRQHandler+0x3ba>
 800676c:	2302      	movs	r3, #2
 800676e:	4a2e      	ldr	r2, [pc, #184]	; (8006828 <HAL_DMA_IRQHandler+0x474>)
 8006770:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800677e:	2b00      	cmp	r3, #0
 8006780:	d034      	beq.n	80067ec <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800678a:	e02f      	b.n	80067ec <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006790:	2208      	movs	r2, #8
 8006792:	409a      	lsls	r2, r3
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4013      	ands	r3, r2
 8006798:	2b00      	cmp	r3, #0
 800679a:	d028      	beq.n	80067ee <HAL_DMA_IRQHandler+0x43a>
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	f003 0308 	and.w	r3, r3, #8
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d023      	beq.n	80067ee <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f022 020e 	bic.w	r2, r2, #14
 80067b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067be:	2101      	movs	r1, #1
 80067c0:	fa01 f202 	lsl.w	r2, r1, r2
 80067c4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d004      	beq.n	80067ee <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	4798      	blx	r3
    }
  }
  return;
 80067ec:	bf00      	nop
 80067ee:	bf00      	nop
}
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	40020400 	.word	0x40020400
 80067fc:	40020008 	.word	0x40020008
 8006800:	4002001c 	.word	0x4002001c
 8006804:	40020030 	.word	0x40020030
 8006808:	40020044 	.word	0x40020044
 800680c:	40020058 	.word	0x40020058
 8006810:	4002006c 	.word	0x4002006c
 8006814:	40020080 	.word	0x40020080
 8006818:	40020408 	.word	0x40020408
 800681c:	4002041c 	.word	0x4002041c
 8006820:	40020430 	.word	0x40020430
 8006824:	40020444 	.word	0x40020444
 8006828:	40020000 	.word	0x40020000

0800682c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 800683a:	4618      	mov	r0, r3
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	bc80      	pop	{r7}
 8006842:	4770      	bx	lr

08006844 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
 8006850:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800685a:	2101      	movs	r1, #1
 800685c:	fa01 f202 	lsl.w	r2, r1, r2
 8006860:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	2b10      	cmp	r3, #16
 8006870:	d108      	bne.n	8006884 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006882:	e007      	b.n	8006894 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	60da      	str	r2, [r3, #12]
}
 8006894:	bf00      	nop
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	bc80      	pop	{r7}
 800689c:	4770      	bx	lr
	...

080068a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b08b      	sub	sp, #44	; 0x2c
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80068aa:	2300      	movs	r3, #0
 80068ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80068ae:	2300      	movs	r3, #0
 80068b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80068b2:	e169      	b.n	8006b88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80068b4:	2201      	movs	r2, #1
 80068b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b8:	fa02 f303 	lsl.w	r3, r2, r3
 80068bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	69fa      	ldr	r2, [r7, #28]
 80068c4:	4013      	ands	r3, r2
 80068c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80068c8:	69ba      	ldr	r2, [r7, #24]
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	f040 8158 	bne.w	8006b82 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	4a9a      	ldr	r2, [pc, #616]	; (8006b40 <HAL_GPIO_Init+0x2a0>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d05e      	beq.n	800699a <HAL_GPIO_Init+0xfa>
 80068dc:	4a98      	ldr	r2, [pc, #608]	; (8006b40 <HAL_GPIO_Init+0x2a0>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d875      	bhi.n	80069ce <HAL_GPIO_Init+0x12e>
 80068e2:	4a98      	ldr	r2, [pc, #608]	; (8006b44 <HAL_GPIO_Init+0x2a4>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d058      	beq.n	800699a <HAL_GPIO_Init+0xfa>
 80068e8:	4a96      	ldr	r2, [pc, #600]	; (8006b44 <HAL_GPIO_Init+0x2a4>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d86f      	bhi.n	80069ce <HAL_GPIO_Init+0x12e>
 80068ee:	4a96      	ldr	r2, [pc, #600]	; (8006b48 <HAL_GPIO_Init+0x2a8>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d052      	beq.n	800699a <HAL_GPIO_Init+0xfa>
 80068f4:	4a94      	ldr	r2, [pc, #592]	; (8006b48 <HAL_GPIO_Init+0x2a8>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d869      	bhi.n	80069ce <HAL_GPIO_Init+0x12e>
 80068fa:	4a94      	ldr	r2, [pc, #592]	; (8006b4c <HAL_GPIO_Init+0x2ac>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d04c      	beq.n	800699a <HAL_GPIO_Init+0xfa>
 8006900:	4a92      	ldr	r2, [pc, #584]	; (8006b4c <HAL_GPIO_Init+0x2ac>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d863      	bhi.n	80069ce <HAL_GPIO_Init+0x12e>
 8006906:	4a92      	ldr	r2, [pc, #584]	; (8006b50 <HAL_GPIO_Init+0x2b0>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d046      	beq.n	800699a <HAL_GPIO_Init+0xfa>
 800690c:	4a90      	ldr	r2, [pc, #576]	; (8006b50 <HAL_GPIO_Init+0x2b0>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d85d      	bhi.n	80069ce <HAL_GPIO_Init+0x12e>
 8006912:	2b12      	cmp	r3, #18
 8006914:	d82a      	bhi.n	800696c <HAL_GPIO_Init+0xcc>
 8006916:	2b12      	cmp	r3, #18
 8006918:	d859      	bhi.n	80069ce <HAL_GPIO_Init+0x12e>
 800691a:	a201      	add	r2, pc, #4	; (adr r2, 8006920 <HAL_GPIO_Init+0x80>)
 800691c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006920:	0800699b 	.word	0x0800699b
 8006924:	08006975 	.word	0x08006975
 8006928:	08006987 	.word	0x08006987
 800692c:	080069c9 	.word	0x080069c9
 8006930:	080069cf 	.word	0x080069cf
 8006934:	080069cf 	.word	0x080069cf
 8006938:	080069cf 	.word	0x080069cf
 800693c:	080069cf 	.word	0x080069cf
 8006940:	080069cf 	.word	0x080069cf
 8006944:	080069cf 	.word	0x080069cf
 8006948:	080069cf 	.word	0x080069cf
 800694c:	080069cf 	.word	0x080069cf
 8006950:	080069cf 	.word	0x080069cf
 8006954:	080069cf 	.word	0x080069cf
 8006958:	080069cf 	.word	0x080069cf
 800695c:	080069cf 	.word	0x080069cf
 8006960:	080069cf 	.word	0x080069cf
 8006964:	0800697d 	.word	0x0800697d
 8006968:	08006991 	.word	0x08006991
 800696c:	4a79      	ldr	r2, [pc, #484]	; (8006b54 <HAL_GPIO_Init+0x2b4>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d013      	beq.n	800699a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006972:	e02c      	b.n	80069ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	623b      	str	r3, [r7, #32]
          break;
 800697a:	e029      	b.n	80069d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	3304      	adds	r3, #4
 8006982:	623b      	str	r3, [r7, #32]
          break;
 8006984:	e024      	b.n	80069d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	3308      	adds	r3, #8
 800698c:	623b      	str	r3, [r7, #32]
          break;
 800698e:	e01f      	b.n	80069d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	330c      	adds	r3, #12
 8006996:	623b      	str	r3, [r7, #32]
          break;
 8006998:	e01a      	b.n	80069d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d102      	bne.n	80069a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80069a2:	2304      	movs	r3, #4
 80069a4:	623b      	str	r3, [r7, #32]
          break;
 80069a6:	e013      	b.n	80069d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d105      	bne.n	80069bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80069b0:	2308      	movs	r3, #8
 80069b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	69fa      	ldr	r2, [r7, #28]
 80069b8:	611a      	str	r2, [r3, #16]
          break;
 80069ba:	e009      	b.n	80069d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80069bc:	2308      	movs	r3, #8
 80069be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	69fa      	ldr	r2, [r7, #28]
 80069c4:	615a      	str	r2, [r3, #20]
          break;
 80069c6:	e003      	b.n	80069d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80069c8:	2300      	movs	r3, #0
 80069ca:	623b      	str	r3, [r7, #32]
          break;
 80069cc:	e000      	b.n	80069d0 <HAL_GPIO_Init+0x130>
          break;
 80069ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	2bff      	cmp	r3, #255	; 0xff
 80069d4:	d801      	bhi.n	80069da <HAL_GPIO_Init+0x13a>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	e001      	b.n	80069de <HAL_GPIO_Init+0x13e>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	3304      	adds	r3, #4
 80069de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	2bff      	cmp	r3, #255	; 0xff
 80069e4:	d802      	bhi.n	80069ec <HAL_GPIO_Init+0x14c>
 80069e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	e002      	b.n	80069f2 <HAL_GPIO_Init+0x152>
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	3b08      	subs	r3, #8
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	210f      	movs	r1, #15
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006a00:	43db      	mvns	r3, r3
 8006a02:	401a      	ands	r2, r3
 8006a04:	6a39      	ldr	r1, [r7, #32]
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	fa01 f303 	lsl.w	r3, r1, r3
 8006a0c:	431a      	orrs	r2, r3
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f000 80b1 	beq.w	8006b82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006a20:	4b4d      	ldr	r3, [pc, #308]	; (8006b58 <HAL_GPIO_Init+0x2b8>)
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	4a4c      	ldr	r2, [pc, #304]	; (8006b58 <HAL_GPIO_Init+0x2b8>)
 8006a26:	f043 0301 	orr.w	r3, r3, #1
 8006a2a:	6193      	str	r3, [r2, #24]
 8006a2c:	4b4a      	ldr	r3, [pc, #296]	; (8006b58 <HAL_GPIO_Init+0x2b8>)
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	60bb      	str	r3, [r7, #8]
 8006a36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006a38:	4a48      	ldr	r2, [pc, #288]	; (8006b5c <HAL_GPIO_Init+0x2bc>)
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	089b      	lsrs	r3, r3, #2
 8006a3e:	3302      	adds	r3, #2
 8006a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a48:	f003 0303 	and.w	r3, r3, #3
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	220f      	movs	r2, #15
 8006a50:	fa02 f303 	lsl.w	r3, r2, r3
 8006a54:	43db      	mvns	r3, r3
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	4013      	ands	r3, r2
 8006a5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a40      	ldr	r2, [pc, #256]	; (8006b60 <HAL_GPIO_Init+0x2c0>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d013      	beq.n	8006a8c <HAL_GPIO_Init+0x1ec>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a3f      	ldr	r2, [pc, #252]	; (8006b64 <HAL_GPIO_Init+0x2c4>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d00d      	beq.n	8006a88 <HAL_GPIO_Init+0x1e8>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a3e      	ldr	r2, [pc, #248]	; (8006b68 <HAL_GPIO_Init+0x2c8>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d007      	beq.n	8006a84 <HAL_GPIO_Init+0x1e4>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a3d      	ldr	r2, [pc, #244]	; (8006b6c <HAL_GPIO_Init+0x2cc>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d101      	bne.n	8006a80 <HAL_GPIO_Init+0x1e0>
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e006      	b.n	8006a8e <HAL_GPIO_Init+0x1ee>
 8006a80:	2304      	movs	r3, #4
 8006a82:	e004      	b.n	8006a8e <HAL_GPIO_Init+0x1ee>
 8006a84:	2302      	movs	r3, #2
 8006a86:	e002      	b.n	8006a8e <HAL_GPIO_Init+0x1ee>
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e000      	b.n	8006a8e <HAL_GPIO_Init+0x1ee>
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a90:	f002 0203 	and.w	r2, r2, #3
 8006a94:	0092      	lsls	r2, r2, #2
 8006a96:	4093      	lsls	r3, r2
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006a9e:	492f      	ldr	r1, [pc, #188]	; (8006b5c <HAL_GPIO_Init+0x2bc>)
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	089b      	lsrs	r3, r3, #2
 8006aa4:	3302      	adds	r3, #2
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d006      	beq.n	8006ac6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006ab8:	4b2d      	ldr	r3, [pc, #180]	; (8006b70 <HAL_GPIO_Init+0x2d0>)
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	492c      	ldr	r1, [pc, #176]	; (8006b70 <HAL_GPIO_Init+0x2d0>)
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	600b      	str	r3, [r1, #0]
 8006ac4:	e006      	b.n	8006ad4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006ac6:	4b2a      	ldr	r3, [pc, #168]	; (8006b70 <HAL_GPIO_Init+0x2d0>)
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	43db      	mvns	r3, r3
 8006ace:	4928      	ldr	r1, [pc, #160]	; (8006b70 <HAL_GPIO_Init+0x2d0>)
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d006      	beq.n	8006aee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006ae0:	4b23      	ldr	r3, [pc, #140]	; (8006b70 <HAL_GPIO_Init+0x2d0>)
 8006ae2:	685a      	ldr	r2, [r3, #4]
 8006ae4:	4922      	ldr	r1, [pc, #136]	; (8006b70 <HAL_GPIO_Init+0x2d0>)
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	604b      	str	r3, [r1, #4]
 8006aec:	e006      	b.n	8006afc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006aee:	4b20      	ldr	r3, [pc, #128]	; (8006b70 <HAL_GPIO_Init+0x2d0>)
 8006af0:	685a      	ldr	r2, [r3, #4]
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	43db      	mvns	r3, r3
 8006af6:	491e      	ldr	r1, [pc, #120]	; (8006b70 <HAL_GPIO_Init+0x2d0>)
 8006af8:	4013      	ands	r3, r2
 8006afa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d006      	beq.n	8006b16 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006b08:	4b19      	ldr	r3, [pc, #100]	; (8006b70 <HAL_GPIO_Init+0x2d0>)
 8006b0a:	689a      	ldr	r2, [r3, #8]
 8006b0c:	4918      	ldr	r1, [pc, #96]	; (8006b70 <HAL_GPIO_Init+0x2d0>)
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	608b      	str	r3, [r1, #8]
 8006b14:	e006      	b.n	8006b24 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006b16:	4b16      	ldr	r3, [pc, #88]	; (8006b70 <HAL_GPIO_Init+0x2d0>)
 8006b18:	689a      	ldr	r2, [r3, #8]
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	43db      	mvns	r3, r3
 8006b1e:	4914      	ldr	r1, [pc, #80]	; (8006b70 <HAL_GPIO_Init+0x2d0>)
 8006b20:	4013      	ands	r3, r2
 8006b22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d021      	beq.n	8006b74 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006b30:	4b0f      	ldr	r3, [pc, #60]	; (8006b70 <HAL_GPIO_Init+0x2d0>)
 8006b32:	68da      	ldr	r2, [r3, #12]
 8006b34:	490e      	ldr	r1, [pc, #56]	; (8006b70 <HAL_GPIO_Init+0x2d0>)
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	60cb      	str	r3, [r1, #12]
 8006b3c:	e021      	b.n	8006b82 <HAL_GPIO_Init+0x2e2>
 8006b3e:	bf00      	nop
 8006b40:	10320000 	.word	0x10320000
 8006b44:	10310000 	.word	0x10310000
 8006b48:	10220000 	.word	0x10220000
 8006b4c:	10210000 	.word	0x10210000
 8006b50:	10120000 	.word	0x10120000
 8006b54:	10110000 	.word	0x10110000
 8006b58:	40021000 	.word	0x40021000
 8006b5c:	40010000 	.word	0x40010000
 8006b60:	40010800 	.word	0x40010800
 8006b64:	40010c00 	.word	0x40010c00
 8006b68:	40011000 	.word	0x40011000
 8006b6c:	40011400 	.word	0x40011400
 8006b70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006b74:	4b0b      	ldr	r3, [pc, #44]	; (8006ba4 <HAL_GPIO_Init+0x304>)
 8006b76:	68da      	ldr	r2, [r3, #12]
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	43db      	mvns	r3, r3
 8006b7c:	4909      	ldr	r1, [pc, #36]	; (8006ba4 <HAL_GPIO_Init+0x304>)
 8006b7e:	4013      	ands	r3, r2
 8006b80:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8006b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b84:	3301      	adds	r3, #1
 8006b86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f47f ae8e 	bne.w	80068b4 <HAL_GPIO_Init+0x14>
  }
}
 8006b98:	bf00      	nop
 8006b9a:	bf00      	nop
 8006b9c:	372c      	adds	r7, #44	; 0x2c
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bc80      	pop	{r7}
 8006ba2:	4770      	bx	lr
 8006ba4:	40010400 	.word	0x40010400

08006ba8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	689a      	ldr	r2, [r3, #8]
 8006bb8:	887b      	ldrh	r3, [r7, #2]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d002      	beq.n	8006bc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	73fb      	strb	r3, [r7, #15]
 8006bc4:	e001      	b.n	8006bca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3714      	adds	r7, #20
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bc80      	pop	{r7}
 8006bd4:	4770      	bx	lr

08006bd6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b083      	sub	sp, #12
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
 8006bde:	460b      	mov	r3, r1
 8006be0:	807b      	strh	r3, [r7, #2]
 8006be2:	4613      	mov	r3, r2
 8006be4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006be6:	787b      	ldrb	r3, [r7, #1]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d003      	beq.n	8006bf4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006bec:	887a      	ldrh	r2, [r7, #2]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006bf2:	e003      	b.n	8006bfc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006bf4:	887b      	ldrh	r3, [r7, #2]
 8006bf6:	041a      	lsls	r2, r3, #16
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	611a      	str	r2, [r3, #16]
}
 8006bfc:	bf00      	nop
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bc80      	pop	{r7}
 8006c04:	4770      	bx	lr
	...

08006c08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e12b      	b.n	8006e72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d106      	bne.n	8006c34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f7fe f9f2 	bl	8005018 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2224      	movs	r2, #36	; 0x24
 8006c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f022 0201 	bic.w	r2, r2, #1
 8006c4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006c6c:	f002 fc0a 	bl	8009484 <HAL_RCC_GetPCLK1Freq>
 8006c70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	4a81      	ldr	r2, [pc, #516]	; (8006e7c <HAL_I2C_Init+0x274>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d807      	bhi.n	8006c8c <HAL_I2C_Init+0x84>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	4a80      	ldr	r2, [pc, #512]	; (8006e80 <HAL_I2C_Init+0x278>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	bf94      	ite	ls
 8006c84:	2301      	movls	r3, #1
 8006c86:	2300      	movhi	r3, #0
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	e006      	b.n	8006c9a <HAL_I2C_Init+0x92>
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	4a7d      	ldr	r2, [pc, #500]	; (8006e84 <HAL_I2C_Init+0x27c>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	bf94      	ite	ls
 8006c94:	2301      	movls	r3, #1
 8006c96:	2300      	movhi	r3, #0
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d001      	beq.n	8006ca2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e0e7      	b.n	8006e72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	4a78      	ldr	r2, [pc, #480]	; (8006e88 <HAL_I2C_Init+0x280>)
 8006ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8006caa:	0c9b      	lsrs	r3, r3, #18
 8006cac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	6a1b      	ldr	r3, [r3, #32]
 8006cc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	4a6a      	ldr	r2, [pc, #424]	; (8006e7c <HAL_I2C_Init+0x274>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d802      	bhi.n	8006cdc <HAL_I2C_Init+0xd4>
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	e009      	b.n	8006cf0 <HAL_I2C_Init+0xe8>
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006ce2:	fb02 f303 	mul.w	r3, r2, r3
 8006ce6:	4a69      	ldr	r2, [pc, #420]	; (8006e8c <HAL_I2C_Init+0x284>)
 8006ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cec:	099b      	lsrs	r3, r3, #6
 8006cee:	3301      	adds	r3, #1
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	6812      	ldr	r2, [r2, #0]
 8006cf4:	430b      	orrs	r3, r1
 8006cf6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	69db      	ldr	r3, [r3, #28]
 8006cfe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006d02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	495c      	ldr	r1, [pc, #368]	; (8006e7c <HAL_I2C_Init+0x274>)
 8006d0c:	428b      	cmp	r3, r1
 8006d0e:	d819      	bhi.n	8006d44 <HAL_I2C_Init+0x13c>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	1e59      	subs	r1, r3, #1
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	005b      	lsls	r3, r3, #1
 8006d1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d1e:	1c59      	adds	r1, r3, #1
 8006d20:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006d24:	400b      	ands	r3, r1
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00a      	beq.n	8006d40 <HAL_I2C_Init+0x138>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	1e59      	subs	r1, r3, #1
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	005b      	lsls	r3, r3, #1
 8006d34:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d38:	3301      	adds	r3, #1
 8006d3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d3e:	e051      	b.n	8006de4 <HAL_I2C_Init+0x1dc>
 8006d40:	2304      	movs	r3, #4
 8006d42:	e04f      	b.n	8006de4 <HAL_I2C_Init+0x1dc>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d111      	bne.n	8006d70 <HAL_I2C_Init+0x168>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	1e58      	subs	r0, r3, #1
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6859      	ldr	r1, [r3, #4]
 8006d54:	460b      	mov	r3, r1
 8006d56:	005b      	lsls	r3, r3, #1
 8006d58:	440b      	add	r3, r1
 8006d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d5e:	3301      	adds	r3, #1
 8006d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	bf0c      	ite	eq
 8006d68:	2301      	moveq	r3, #1
 8006d6a:	2300      	movne	r3, #0
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	e012      	b.n	8006d96 <HAL_I2C_Init+0x18e>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	1e58      	subs	r0, r3, #1
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6859      	ldr	r1, [r3, #4]
 8006d78:	460b      	mov	r3, r1
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	440b      	add	r3, r1
 8006d7e:	0099      	lsls	r1, r3, #2
 8006d80:	440b      	add	r3, r1
 8006d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d86:	3301      	adds	r3, #1
 8006d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	bf0c      	ite	eq
 8006d90:	2301      	moveq	r3, #1
 8006d92:	2300      	movne	r3, #0
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <HAL_I2C_Init+0x196>
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e022      	b.n	8006de4 <HAL_I2C_Init+0x1dc>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10e      	bne.n	8006dc4 <HAL_I2C_Init+0x1bc>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	1e58      	subs	r0, r3, #1
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6859      	ldr	r1, [r3, #4]
 8006dae:	460b      	mov	r3, r1
 8006db0:	005b      	lsls	r3, r3, #1
 8006db2:	440b      	add	r3, r1
 8006db4:	fbb0 f3f3 	udiv	r3, r0, r3
 8006db8:	3301      	adds	r3, #1
 8006dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dc2:	e00f      	b.n	8006de4 <HAL_I2C_Init+0x1dc>
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	1e58      	subs	r0, r3, #1
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6859      	ldr	r1, [r3, #4]
 8006dcc:	460b      	mov	r3, r1
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	440b      	add	r3, r1
 8006dd2:	0099      	lsls	r1, r3, #2
 8006dd4:	440b      	add	r3, r1
 8006dd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006dda:	3301      	adds	r3, #1
 8006ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006de0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006de4:	6879      	ldr	r1, [r7, #4]
 8006de6:	6809      	ldr	r1, [r1, #0]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	69da      	ldr	r2, [r3, #28]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a1b      	ldr	r3, [r3, #32]
 8006dfe:	431a      	orrs	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	430a      	orrs	r2, r1
 8006e06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006e12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	6911      	ldr	r1, [r2, #16]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	68d2      	ldr	r2, [r2, #12]
 8006e1e:	4311      	orrs	r1, r2
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	6812      	ldr	r2, [r2, #0]
 8006e24:	430b      	orrs	r3, r1
 8006e26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	695a      	ldr	r2, [r3, #20]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	431a      	orrs	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	430a      	orrs	r2, r1
 8006e42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f042 0201 	orr.w	r2, r2, #1
 8006e52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2220      	movs	r2, #32
 8006e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	000186a0 	.word	0x000186a0
 8006e80:	001e847f 	.word	0x001e847f
 8006e84:	003d08ff 	.word	0x003d08ff
 8006e88:	431bde83 	.word	0x431bde83
 8006e8c:	10624dd3 	.word	0x10624dd3

08006e90 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b087      	sub	sp, #28
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	607a      	str	r2, [r7, #4]
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	817b      	strh	r3, [r7, #10]
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b20      	cmp	r3, #32
 8006eb2:	f040 8085 	bne.w	8006fc0 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006eb6:	4b45      	ldr	r3, [pc, #276]	; (8006fcc <HAL_I2C_Master_Transmit_IT+0x13c>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	08db      	lsrs	r3, r3, #3
 8006ebc:	4a44      	ldr	r2, [pc, #272]	; (8006fd0 <HAL_I2C_Master_Transmit_IT+0x140>)
 8006ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec2:	0a1a      	lsrs	r2, r3, #8
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	4413      	add	r3, r2
 8006eca:	009a      	lsls	r2, r3, #2
 8006ecc:	4413      	add	r3, r2
 8006ece:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d116      	bne.n	8006f0a <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2220      	movs	r2, #32
 8006ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef6:	f043 0220 	orr.w	r2, r3, #32
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e05b      	b.n	8006fc2 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	f003 0302 	and.w	r3, r3, #2
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d0db      	beq.n	8006ed0 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d101      	bne.n	8006f26 <HAL_I2C_Master_Transmit_IT+0x96>
 8006f22:	2302      	movs	r3, #2
 8006f24:	e04d      	b.n	8006fc2 <HAL_I2C_Master_Transmit_IT+0x132>
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 0301 	and.w	r3, r3, #1
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d007      	beq.n	8006f4c <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f042 0201 	orr.w	r2, r2, #1
 8006f4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2221      	movs	r2, #33	; 0x21
 8006f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2210      	movs	r2, #16
 8006f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	893a      	ldrh	r2, [r7, #8]
 8006f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	4a12      	ldr	r2, [pc, #72]	; (8006fd4 <HAL_I2C_Master_Transmit_IT+0x144>)
 8006f8c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8006f8e:	897a      	ldrh	r2, [r7, #10]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	685a      	ldr	r2, [r3, #4]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006faa:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fba:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	e000      	b.n	8006fc2 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8006fc0:	2302      	movs	r3, #2
  }
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	371c      	adds	r7, #28
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bc80      	pop	{r7}
 8006fca:	4770      	bx	lr
 8006fcc:	20000054 	.word	0x20000054
 8006fd0:	14f8b589 	.word	0x14f8b589
 8006fd4:	ffff0000 	.word	0xffff0000

08006fd8 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b087      	sub	sp, #28
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	607a      	str	r2, [r7, #4]
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	817b      	strh	r3, [r7, #10]
 8006fe8:	4613      	mov	r3, r2
 8006fea:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b20      	cmp	r3, #32
 8006ffa:	f040 808d 	bne.w	8007118 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006ffe:	4b49      	ldr	r3, [pc, #292]	; (8007124 <HAL_I2C_Master_Receive_IT+0x14c>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	08db      	lsrs	r3, r3, #3
 8007004:	4a48      	ldr	r2, [pc, #288]	; (8007128 <HAL_I2C_Master_Receive_IT+0x150>)
 8007006:	fba2 2303 	umull	r2, r3, r2, r3
 800700a:	0a1a      	lsrs	r2, r3, #8
 800700c:	4613      	mov	r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	009a      	lsls	r2, r3, #2
 8007014:	4413      	add	r3, r2
 8007016:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	3b01      	subs	r3, #1
 800701c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d116      	bne.n	8007052 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2220      	movs	r2, #32
 800702e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703e:	f043 0220 	orr.w	r2, r3, #32
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e063      	b.n	800711a <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	f003 0302 	and.w	r3, r3, #2
 800705c:	2b02      	cmp	r3, #2
 800705e:	d0db      	beq.n	8007018 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007066:	2b01      	cmp	r3, #1
 8007068:	d101      	bne.n	800706e <HAL_I2C_Master_Receive_IT+0x96>
 800706a:	2302      	movs	r3, #2
 800706c:	e055      	b.n	800711a <HAL_I2C_Master_Receive_IT+0x142>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 0301 	and.w	r3, r3, #1
 8007080:	2b01      	cmp	r3, #1
 8007082:	d007      	beq.n	8007094 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f042 0201 	orr.w	r2, r2, #1
 8007092:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2222      	movs	r2, #34	; 0x22
 80070a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2210      	movs	r2, #16
 80070b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	893a      	ldrh	r2, [r7, #8]
 80070c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4a16      	ldr	r2, [pc, #88]	; (800712c <HAL_I2C_Master_Receive_IT+0x154>)
 80070d4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80070d6:	897a      	ldrh	r2, [r7, #10]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	685a      	ldr	r2, [r3, #4]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80070f2:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007102:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007112:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007114:	2300      	movs	r3, #0
 8007116:	e000      	b.n	800711a <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8007118:	2302      	movs	r3, #2
  }
}
 800711a:	4618      	mov	r0, r3
 800711c:	371c      	adds	r7, #28
 800711e:	46bd      	mov	sp, r7
 8007120:	bc80      	pop	{r7}
 8007122:	4770      	bx	lr
 8007124:	20000054 	.word	0x20000054
 8007128:	14f8b589 	.word	0x14f8b589
 800712c:	ffff0000 	.word	0xffff0000

08007130 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b088      	sub	sp, #32
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007138:	2300      	movs	r3, #0
 800713a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007148:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007150:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007158:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800715a:	7bfb      	ldrb	r3, [r7, #15]
 800715c:	2b10      	cmp	r3, #16
 800715e:	d003      	beq.n	8007168 <HAL_I2C_EV_IRQHandler+0x38>
 8007160:	7bfb      	ldrb	r3, [r7, #15]
 8007162:	2b40      	cmp	r3, #64	; 0x40
 8007164:	f040 80c1 	bne.w	80072ea <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	f003 0301 	and.w	r3, r3, #1
 800717e:	2b00      	cmp	r3, #0
 8007180:	d10d      	bne.n	800719e <HAL_I2C_EV_IRQHandler+0x6e>
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007188:	d003      	beq.n	8007192 <HAL_I2C_EV_IRQHandler+0x62>
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007190:	d101      	bne.n	8007196 <HAL_I2C_EV_IRQHandler+0x66>
 8007192:	2301      	movs	r3, #1
 8007194:	e000      	b.n	8007198 <HAL_I2C_EV_IRQHandler+0x68>
 8007196:	2300      	movs	r3, #0
 8007198:	2b01      	cmp	r3, #1
 800719a:	f000 8132 	beq.w	8007402 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00c      	beq.n	80071c2 <HAL_I2C_EV_IRQHandler+0x92>
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	0a5b      	lsrs	r3, r3, #9
 80071ac:	f003 0301 	and.w	r3, r3, #1
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d006      	beq.n	80071c2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f001 fc51 	bl	8008a5c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 fd53 	bl	8007c66 <I2C_Master_SB>
 80071c0:	e092      	b.n	80072e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	08db      	lsrs	r3, r3, #3
 80071c6:	f003 0301 	and.w	r3, r3, #1
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d009      	beq.n	80071e2 <HAL_I2C_EV_IRQHandler+0xb2>
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	0a5b      	lsrs	r3, r3, #9
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d003      	beq.n	80071e2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 fdc8 	bl	8007d70 <I2C_Master_ADD10>
 80071e0:	e082      	b.n	80072e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	085b      	lsrs	r3, r3, #1
 80071e6:	f003 0301 	and.w	r3, r3, #1
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d009      	beq.n	8007202 <HAL_I2C_EV_IRQHandler+0xd2>
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	0a5b      	lsrs	r3, r3, #9
 80071f2:	f003 0301 	and.w	r3, r3, #1
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d003      	beq.n	8007202 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fde1 	bl	8007dc2 <I2C_Master_ADDR>
 8007200:	e072      	b.n	80072e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	089b      	lsrs	r3, r3, #2
 8007206:	f003 0301 	and.w	r3, r3, #1
 800720a:	2b00      	cmp	r3, #0
 800720c:	d03b      	beq.n	8007286 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007218:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800721c:	f000 80f3 	beq.w	8007406 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	09db      	lsrs	r3, r3, #7
 8007224:	f003 0301 	and.w	r3, r3, #1
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00f      	beq.n	800724c <HAL_I2C_EV_IRQHandler+0x11c>
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	0a9b      	lsrs	r3, r3, #10
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	d009      	beq.n	800724c <HAL_I2C_EV_IRQHandler+0x11c>
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	089b      	lsrs	r3, r3, #2
 800723c:	f003 0301 	and.w	r3, r3, #1
 8007240:	2b00      	cmp	r3, #0
 8007242:	d103      	bne.n	800724c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f9cd 	bl	80075e4 <I2C_MasterTransmit_TXE>
 800724a:	e04d      	b.n	80072e8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	089b      	lsrs	r3, r3, #2
 8007250:	f003 0301 	and.w	r3, r3, #1
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 80d6 	beq.w	8007406 <HAL_I2C_EV_IRQHandler+0x2d6>
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	0a5b      	lsrs	r3, r3, #9
 800725e:	f003 0301 	and.w	r3, r3, #1
 8007262:	2b00      	cmp	r3, #0
 8007264:	f000 80cf 	beq.w	8007406 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007268:	7bbb      	ldrb	r3, [r7, #14]
 800726a:	2b21      	cmp	r3, #33	; 0x21
 800726c:	d103      	bne.n	8007276 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fa54 	bl	800771c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007274:	e0c7      	b.n	8007406 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8007276:	7bfb      	ldrb	r3, [r7, #15]
 8007278:	2b40      	cmp	r3, #64	; 0x40
 800727a:	f040 80c4 	bne.w	8007406 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fac2 	bl	8007808 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007284:	e0bf      	b.n	8007406 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007290:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007294:	f000 80b7 	beq.w	8007406 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	099b      	lsrs	r3, r3, #6
 800729c:	f003 0301 	and.w	r3, r3, #1
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00f      	beq.n	80072c4 <HAL_I2C_EV_IRQHandler+0x194>
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	0a9b      	lsrs	r3, r3, #10
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d009      	beq.n	80072c4 <HAL_I2C_EV_IRQHandler+0x194>
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	089b      	lsrs	r3, r3, #2
 80072b4:	f003 0301 	and.w	r3, r3, #1
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d103      	bne.n	80072c4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fb37 	bl	8007930 <I2C_MasterReceive_RXNE>
 80072c2:	e011      	b.n	80072e8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	089b      	lsrs	r3, r3, #2
 80072c8:	f003 0301 	and.w	r3, r3, #1
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 809a 	beq.w	8007406 <HAL_I2C_EV_IRQHandler+0x2d6>
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	0a5b      	lsrs	r3, r3, #9
 80072d6:	f003 0301 	and.w	r3, r3, #1
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f000 8093 	beq.w	8007406 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 fbd6 	bl	8007a92 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80072e6:	e08e      	b.n	8007406 <HAL_I2C_EV_IRQHandler+0x2d6>
 80072e8:	e08d      	b.n	8007406 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d004      	beq.n	80072fc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	695b      	ldr	r3, [r3, #20]
 80072f8:	61fb      	str	r3, [r7, #28]
 80072fa:	e007      	b.n	800730c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	699b      	ldr	r3, [r3, #24]
 8007302:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	085b      	lsrs	r3, r3, #1
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	2b00      	cmp	r3, #0
 8007316:	d012      	beq.n	800733e <HAL_I2C_EV_IRQHandler+0x20e>
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	0a5b      	lsrs	r3, r3, #9
 800731c:	f003 0301 	and.w	r3, r3, #1
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00c      	beq.n	800733e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007328:	2b00      	cmp	r3, #0
 800732a:	d003      	beq.n	8007334 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007334:	69b9      	ldr	r1, [r7, #24]
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 ff9a 	bl	8008270 <I2C_Slave_ADDR>
 800733c:	e066      	b.n	800740c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	091b      	lsrs	r3, r3, #4
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	2b00      	cmp	r3, #0
 8007348:	d009      	beq.n	800735e <HAL_I2C_EV_IRQHandler+0x22e>
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	0a5b      	lsrs	r3, r3, #9
 800734e:	f003 0301 	and.w	r3, r3, #1
 8007352:	2b00      	cmp	r3, #0
 8007354:	d003      	beq.n	800735e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 ffd4 	bl	8008304 <I2C_Slave_STOPF>
 800735c:	e056      	b.n	800740c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800735e:	7bbb      	ldrb	r3, [r7, #14]
 8007360:	2b21      	cmp	r3, #33	; 0x21
 8007362:	d002      	beq.n	800736a <HAL_I2C_EV_IRQHandler+0x23a>
 8007364:	7bbb      	ldrb	r3, [r7, #14]
 8007366:	2b29      	cmp	r3, #41	; 0x29
 8007368:	d125      	bne.n	80073b6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	09db      	lsrs	r3, r3, #7
 800736e:	f003 0301 	and.w	r3, r3, #1
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00f      	beq.n	8007396 <HAL_I2C_EV_IRQHandler+0x266>
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	0a9b      	lsrs	r3, r3, #10
 800737a:	f003 0301 	and.w	r3, r3, #1
 800737e:	2b00      	cmp	r3, #0
 8007380:	d009      	beq.n	8007396 <HAL_I2C_EV_IRQHandler+0x266>
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	089b      	lsrs	r3, r3, #2
 8007386:	f003 0301 	and.w	r3, r3, #1
 800738a:	2b00      	cmp	r3, #0
 800738c:	d103      	bne.n	8007396 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 feb2 	bl	80080f8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007394:	e039      	b.n	800740a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	089b      	lsrs	r3, r3, #2
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d033      	beq.n	800740a <HAL_I2C_EV_IRQHandler+0x2da>
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	0a5b      	lsrs	r3, r3, #9
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d02d      	beq.n	800740a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fedf 	bl	8008172 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80073b4:	e029      	b.n	800740a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	099b      	lsrs	r3, r3, #6
 80073ba:	f003 0301 	and.w	r3, r3, #1
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00f      	beq.n	80073e2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	0a9b      	lsrs	r3, r3, #10
 80073c6:	f003 0301 	and.w	r3, r3, #1
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d009      	beq.n	80073e2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	089b      	lsrs	r3, r3, #2
 80073d2:	f003 0301 	and.w	r3, r3, #1
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d103      	bne.n	80073e2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 fee9 	bl	80081b2 <I2C_SlaveReceive_RXNE>
 80073e0:	e014      	b.n	800740c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	089b      	lsrs	r3, r3, #2
 80073e6:	f003 0301 	and.w	r3, r3, #1
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00e      	beq.n	800740c <HAL_I2C_EV_IRQHandler+0x2dc>
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	0a5b      	lsrs	r3, r3, #9
 80073f2:	f003 0301 	and.w	r3, r3, #1
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d008      	beq.n	800740c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 ff17 	bl	800822e <I2C_SlaveReceive_BTF>
 8007400:	e004      	b.n	800740c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8007402:	bf00      	nop
 8007404:	e002      	b.n	800740c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007406:	bf00      	nop
 8007408:	e000      	b.n	800740c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800740a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800740c:	3720      	adds	r7, #32
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b08a      	sub	sp, #40	; 0x28
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	695b      	ldr	r3, [r3, #20]
 8007420:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800742a:	2300      	movs	r3, #0
 800742c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007434:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	0a1b      	lsrs	r3, r3, #8
 800743a:	f003 0301 	and.w	r3, r3, #1
 800743e:	2b00      	cmp	r3, #0
 8007440:	d016      	beq.n	8007470 <HAL_I2C_ER_IRQHandler+0x5e>
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	0a1b      	lsrs	r3, r3, #8
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	2b00      	cmp	r3, #0
 800744c:	d010      	beq.n	8007470 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800744e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007450:	f043 0301 	orr.w	r3, r3, #1
 8007454:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800745e:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800746e:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007470:	6a3b      	ldr	r3, [r7, #32]
 8007472:	0a5b      	lsrs	r3, r3, #9
 8007474:	f003 0301 	and.w	r3, r3, #1
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00e      	beq.n	800749a <HAL_I2C_ER_IRQHandler+0x88>
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	0a1b      	lsrs	r3, r3, #8
 8007480:	f003 0301 	and.w	r3, r3, #1
 8007484:	2b00      	cmp	r3, #0
 8007486:	d008      	beq.n	800749a <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748a:	f043 0302 	orr.w	r3, r3, #2
 800748e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8007498:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800749a:	6a3b      	ldr	r3, [r7, #32]
 800749c:	0a9b      	lsrs	r3, r3, #10
 800749e:	f003 0301 	and.w	r3, r3, #1
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d03f      	beq.n	8007526 <HAL_I2C_ER_IRQHandler+0x114>
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	0a1b      	lsrs	r3, r3, #8
 80074aa:	f003 0301 	and.w	r3, r3, #1
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d039      	beq.n	8007526 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80074b2:	7efb      	ldrb	r3, [r7, #27]
 80074b4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074c4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ca:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80074cc:	7ebb      	ldrb	r3, [r7, #26]
 80074ce:	2b20      	cmp	r3, #32
 80074d0:	d112      	bne.n	80074f8 <HAL_I2C_ER_IRQHandler+0xe6>
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d10f      	bne.n	80074f8 <HAL_I2C_ER_IRQHandler+0xe6>
 80074d8:	7cfb      	ldrb	r3, [r7, #19]
 80074da:	2b21      	cmp	r3, #33	; 0x21
 80074dc:	d008      	beq.n	80074f0 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80074de:	7cfb      	ldrb	r3, [r7, #19]
 80074e0:	2b29      	cmp	r3, #41	; 0x29
 80074e2:	d005      	beq.n	80074f0 <HAL_I2C_ER_IRQHandler+0xde>
 80074e4:	7cfb      	ldrb	r3, [r7, #19]
 80074e6:	2b28      	cmp	r3, #40	; 0x28
 80074e8:	d106      	bne.n	80074f8 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2b21      	cmp	r3, #33	; 0x21
 80074ee:	d103      	bne.n	80074f8 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f001 f837 	bl	8008564 <I2C_Slave_AF>
 80074f6:	e016      	b.n	8007526 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007500:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007504:	f043 0304 	orr.w	r3, r3, #4
 8007508:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800750a:	7efb      	ldrb	r3, [r7, #27]
 800750c:	2b10      	cmp	r3, #16
 800750e:	d002      	beq.n	8007516 <HAL_I2C_ER_IRQHandler+0x104>
 8007510:	7efb      	ldrb	r3, [r7, #27]
 8007512:	2b40      	cmp	r3, #64	; 0x40
 8007514:	d107      	bne.n	8007526 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007524:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007526:	6a3b      	ldr	r3, [r7, #32]
 8007528:	0adb      	lsrs	r3, r3, #11
 800752a:	f003 0301 	and.w	r3, r3, #1
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00e      	beq.n	8007550 <HAL_I2C_ER_IRQHandler+0x13e>
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	0a1b      	lsrs	r3, r3, #8
 8007536:	f003 0301 	and.w	r3, r3, #1
 800753a:	2b00      	cmp	r3, #0
 800753c:	d008      	beq.n	8007550 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007540:	f043 0308 	orr.w	r3, r3, #8
 8007544:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800754e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007552:	2b00      	cmp	r3, #0
 8007554:	d008      	beq.n	8007568 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	431a      	orrs	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f001 f86e 	bl	8008644 <I2C_ITError>
  }
}
 8007568:	bf00      	nop
 800756a:	3728      	adds	r7, #40	; 0x28
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007578:	bf00      	nop
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	bc80      	pop	{r7}
 8007580:	4770      	bx	lr

08007582 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007582:	b480      	push	{r7}
 8007584:	b083      	sub	sp, #12
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800758a:	bf00      	nop
 800758c:	370c      	adds	r7, #12
 800758e:	46bd      	mov	sp, r7
 8007590:	bc80      	pop	{r7}
 8007592:	4770      	bx	lr

08007594 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	460b      	mov	r3, r1
 800759e:	70fb      	strb	r3, [r7, #3]
 80075a0:	4613      	mov	r3, r2
 80075a2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80075a4:	bf00      	nop
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bc80      	pop	{r7}
 80075ac:	4770      	bx	lr

080075ae <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80075ae:	b480      	push	{r7}
 80075b0:	b083      	sub	sp, #12
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80075b6:	bf00      	nop
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bc80      	pop	{r7}
 80075be:	4770      	bx	lr

080075c0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bc80      	pop	{r7}
 80075d0:	4770      	bx	lr

080075d2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80075d2:	b480      	push	{r7}
 80075d4:	b083      	sub	sp, #12
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80075da:	bf00      	nop
 80075dc:	370c      	adds	r7, #12
 80075de:	46bd      	mov	sp, r7
 80075e0:	bc80      	pop	{r7}
 80075e2:	4770      	bx	lr

080075e4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075f2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075fa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007600:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007606:	2b00      	cmp	r3, #0
 8007608:	d150      	bne.n	80076ac <I2C_MasterTransmit_TXE+0xc8>
 800760a:	7bfb      	ldrb	r3, [r7, #15]
 800760c:	2b21      	cmp	r3, #33	; 0x21
 800760e:	d14d      	bne.n	80076ac <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	2b08      	cmp	r3, #8
 8007614:	d01d      	beq.n	8007652 <I2C_MasterTransmit_TXE+0x6e>
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	2b20      	cmp	r3, #32
 800761a:	d01a      	beq.n	8007652 <I2C_MasterTransmit_TXE+0x6e>
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007622:	d016      	beq.n	8007652 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	685a      	ldr	r2, [r3, #4]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007632:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2211      	movs	r2, #17
 8007638:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2220      	movs	r2, #32
 8007646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f7fc fdd4 	bl	80041f8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007650:	e060      	b.n	8007714 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	685a      	ldr	r2, [r3, #4]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007660:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007670:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2220      	movs	r2, #32
 800767c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b40      	cmp	r3, #64	; 0x40
 800768a:	d107      	bne.n	800769c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f7ff ff93 	bl	80075c0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800769a:	e03b      	b.n	8007714 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f7fc fda7 	bl	80041f8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80076aa:	e033      	b.n	8007714 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
 80076ae:	2b21      	cmp	r3, #33	; 0x21
 80076b0:	d005      	beq.n	80076be <I2C_MasterTransmit_TXE+0xda>
 80076b2:	7bbb      	ldrb	r3, [r7, #14]
 80076b4:	2b40      	cmp	r3, #64	; 0x40
 80076b6:	d12d      	bne.n	8007714 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80076b8:	7bfb      	ldrb	r3, [r7, #15]
 80076ba:	2b22      	cmp	r3, #34	; 0x22
 80076bc:	d12a      	bne.n	8007714 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d108      	bne.n	80076da <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	685a      	ldr	r2, [r3, #4]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076d6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80076d8:	e01c      	b.n	8007714 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	2b40      	cmp	r3, #64	; 0x40
 80076e4:	d103      	bne.n	80076ee <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f88e 	bl	8007808 <I2C_MemoryTransmit_TXE_BTF>
}
 80076ec:	e012      	b.n	8007714 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f2:	781a      	ldrb	r2, [r3, #0]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fe:	1c5a      	adds	r2, r3, #1
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007708:	b29b      	uxth	r3, r3
 800770a:	3b01      	subs	r3, #1
 800770c:	b29a      	uxth	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007712:	e7ff      	b.n	8007714 <I2C_MasterTransmit_TXE+0x130>
 8007714:	bf00      	nop
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007728:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007730:	b2db      	uxtb	r3, r3
 8007732:	2b21      	cmp	r3, #33	; 0x21
 8007734:	d164      	bne.n	8007800 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800773a:	b29b      	uxth	r3, r3
 800773c:	2b00      	cmp	r3, #0
 800773e:	d012      	beq.n	8007766 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007744:	781a      	ldrb	r2, [r3, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007750:	1c5a      	adds	r2, r3, #1
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800775a:	b29b      	uxth	r3, r3
 800775c:	3b01      	subs	r3, #1
 800775e:	b29a      	uxth	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007764:	e04c      	b.n	8007800 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2b08      	cmp	r3, #8
 800776a:	d01d      	beq.n	80077a8 <I2C_MasterTransmit_BTF+0x8c>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2b20      	cmp	r3, #32
 8007770:	d01a      	beq.n	80077a8 <I2C_MasterTransmit_BTF+0x8c>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007778:	d016      	beq.n	80077a8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	685a      	ldr	r2, [r3, #4]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007788:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2211      	movs	r2, #17
 800778e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2220      	movs	r2, #32
 800779c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f7fc fd29 	bl	80041f8 <HAL_I2C_MasterTxCpltCallback>
}
 80077a6:	e02b      	b.n	8007800 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	685a      	ldr	r2, [r3, #4]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80077b6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077c6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2220      	movs	r2, #32
 80077d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b40      	cmp	r3, #64	; 0x40
 80077e0:	d107      	bne.n	80077f2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7ff fee8 	bl	80075c0 <HAL_I2C_MemTxCpltCallback>
}
 80077f0:	e006      	b.n	8007800 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7fc fcfc 	bl	80041f8 <HAL_I2C_MasterTxCpltCallback>
}
 8007800:	bf00      	nop
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007816:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800781c:	2b00      	cmp	r3, #0
 800781e:	d11d      	bne.n	800785c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007824:	2b01      	cmp	r3, #1
 8007826:	d10b      	bne.n	8007840 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800782c:	b2da      	uxtb	r2, r3
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007838:	1c9a      	adds	r2, r3, #2
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800783e:	e073      	b.n	8007928 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007844:	b29b      	uxth	r3, r3
 8007846:	121b      	asrs	r3, r3, #8
 8007848:	b2da      	uxtb	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007854:	1c5a      	adds	r2, r3, #1
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	651a      	str	r2, [r3, #80]	; 0x50
}
 800785a:	e065      	b.n	8007928 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007860:	2b01      	cmp	r3, #1
 8007862:	d10b      	bne.n	800787c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007868:	b2da      	uxtb	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007874:	1c5a      	adds	r2, r3, #1
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	651a      	str	r2, [r3, #80]	; 0x50
}
 800787a:	e055      	b.n	8007928 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007880:	2b02      	cmp	r3, #2
 8007882:	d151      	bne.n	8007928 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007884:	7bfb      	ldrb	r3, [r7, #15]
 8007886:	2b22      	cmp	r3, #34	; 0x22
 8007888:	d10d      	bne.n	80078a6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007898:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800789e:	1c5a      	adds	r2, r3, #1
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80078a4:	e040      	b.n	8007928 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d015      	beq.n	80078dc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80078b0:	7bfb      	ldrb	r3, [r7, #15]
 80078b2:	2b21      	cmp	r3, #33	; 0x21
 80078b4:	d112      	bne.n	80078dc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ba:	781a      	ldrb	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c6:	1c5a      	adds	r2, r3, #1
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	3b01      	subs	r3, #1
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80078da:	e025      	b.n	8007928 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d120      	bne.n	8007928 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80078e6:	7bfb      	ldrb	r3, [r7, #15]
 80078e8:	2b21      	cmp	r3, #33	; 0x21
 80078ea:	d11d      	bne.n	8007928 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	685a      	ldr	r2, [r3, #4]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80078fa:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800790a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2220      	movs	r2, #32
 8007916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f7ff fe4c 	bl	80075c0 <HAL_I2C_MemTxCpltCallback>
}
 8007928:	bf00      	nop
 800792a:	3710      	adds	r7, #16
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800793e:	b2db      	uxtb	r3, r3
 8007940:	2b22      	cmp	r3, #34	; 0x22
 8007942:	f040 80a2 	bne.w	8007a8a <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800794a:	b29b      	uxth	r3, r3
 800794c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2b03      	cmp	r3, #3
 8007952:	d921      	bls.n	8007998 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	691a      	ldr	r2, [r3, #16]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795e:	b2d2      	uxtb	r2, r2
 8007960:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007966:	1c5a      	adds	r2, r3, #1
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007970:	b29b      	uxth	r3, r3
 8007972:	3b01      	subs	r3, #1
 8007974:	b29a      	uxth	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800797e:	b29b      	uxth	r3, r3
 8007980:	2b03      	cmp	r3, #3
 8007982:	f040 8082 	bne.w	8007a8a <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	685a      	ldr	r2, [r3, #4]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007994:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8007996:	e078      	b.n	8007a8a <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799c:	2b02      	cmp	r3, #2
 800799e:	d074      	beq.n	8007a8a <I2C_MasterReceive_RXNE+0x15a>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d002      	beq.n	80079ac <I2C_MasterReceive_RXNE+0x7c>
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d16e      	bne.n	8007a8a <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f001 f823 	bl	80089f8 <I2C_WaitOnSTOPRequestThroughIT>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d142      	bne.n	8007a3e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079c6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	685a      	ldr	r2, [r3, #4]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80079d6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	691a      	ldr	r2, [r3, #16]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e2:	b2d2      	uxtb	r2, r2
 80079e4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ea:	1c5a      	adds	r2, r3, #1
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	3b01      	subs	r3, #1
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2220      	movs	r2, #32
 8007a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	2b40      	cmp	r3, #64	; 0x40
 8007a10:	d10a      	bne.n	8007a28 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f7ff fdd6 	bl	80075d2 <HAL_I2C_MemRxCpltCallback>
}
 8007a26:	e030      	b.n	8007a8a <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2212      	movs	r2, #18
 8007a34:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f7fc fbf2 	bl	8004220 <HAL_I2C_MasterRxCpltCallback>
}
 8007a3c:	e025      	b.n	8007a8a <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	685a      	ldr	r2, [r3, #4]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007a4c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	691a      	ldr	r2, [r3, #16]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a58:	b2d2      	uxtb	r2, r2
 8007a5a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a60:	1c5a      	adds	r2, r3, #1
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2220      	movs	r2, #32
 8007a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f7fc fbdf 	bl	8004248 <HAL_I2C_ErrorCallback>
}
 8007a8a:	bf00      	nop
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b084      	sub	sp, #16
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	2b04      	cmp	r3, #4
 8007aa8:	d11b      	bne.n	8007ae2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	685a      	ldr	r2, [r3, #4]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ab8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	691a      	ldr	r2, [r3, #16]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac4:	b2d2      	uxtb	r2, r2
 8007ac6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007acc:	1c5a      	adds	r2, r3, #1
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	b29a      	uxth	r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007ae0:	e0bd      	b.n	8007c5e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	2b03      	cmp	r3, #3
 8007aea:	d129      	bne.n	8007b40 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	685a      	ldr	r2, [r3, #4]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007afa:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2b04      	cmp	r3, #4
 8007b00:	d00a      	beq.n	8007b18 <I2C_MasterReceive_BTF+0x86>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d007      	beq.n	8007b18 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b16:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	691a      	ldr	r2, [r3, #16]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b22:	b2d2      	uxtb	r2, r2
 8007b24:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2a:	1c5a      	adds	r2, r3, #1
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	3b01      	subs	r3, #1
 8007b38:	b29a      	uxth	r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007b3e:	e08e      	b.n	8007c5e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	d176      	bne.n	8007c38 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d002      	beq.n	8007b56 <I2C_MasterReceive_BTF+0xc4>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2b10      	cmp	r3, #16
 8007b54:	d108      	bne.n	8007b68 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b64:	601a      	str	r2, [r3, #0]
 8007b66:	e019      	b.n	8007b9c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2b04      	cmp	r3, #4
 8007b6c:	d002      	beq.n	8007b74 <I2C_MasterReceive_BTF+0xe2>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d108      	bne.n	8007b86 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b82:	601a      	str	r2, [r3, #0]
 8007b84:	e00a      	b.n	8007b9c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2b10      	cmp	r3, #16
 8007b8a:	d007      	beq.n	8007b9c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b9a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	691a      	ldr	r2, [r3, #16]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba6:	b2d2      	uxtb	r2, r2
 8007ba8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bae:	1c5a      	adds	r2, r3, #1
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	691a      	ldr	r2, [r3, #16]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bcc:	b2d2      	uxtb	r2, r2
 8007bce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd4:	1c5a      	adds	r2, r3, #1
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	3b01      	subs	r3, #1
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	685a      	ldr	r2, [r3, #4]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007bf6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2220      	movs	r2, #32
 8007bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	2b40      	cmp	r3, #64	; 0x40
 8007c0a:	d10a      	bne.n	8007c22 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7ff fcd9 	bl	80075d2 <HAL_I2C_MemRxCpltCallback>
}
 8007c20:	e01d      	b.n	8007c5e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2212      	movs	r2, #18
 8007c2e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f7fc faf5 	bl	8004220 <HAL_I2C_MasterRxCpltCallback>
}
 8007c36:	e012      	b.n	8007c5e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	691a      	ldr	r2, [r3, #16]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c42:	b2d2      	uxtb	r2, r2
 8007c44:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4a:	1c5a      	adds	r2, r3, #1
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	3b01      	subs	r3, #1
 8007c58:	b29a      	uxth	r2, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007c5e:	bf00      	nop
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007c66:	b480      	push	{r7}
 8007c68:	b083      	sub	sp, #12
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	2b40      	cmp	r3, #64	; 0x40
 8007c78:	d117      	bne.n	8007caa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d109      	bne.n	8007c96 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	461a      	mov	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007c92:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007c94:	e067      	b.n	8007d66 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	f043 0301 	orr.w	r3, r3, #1
 8007ca0:	b2da      	uxtb	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	611a      	str	r2, [r3, #16]
}
 8007ca8:	e05d      	b.n	8007d66 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cb2:	d133      	bne.n	8007d1c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	2b21      	cmp	r3, #33	; 0x21
 8007cbe:	d109      	bne.n	8007cd4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007cd0:	611a      	str	r2, [r3, #16]
 8007cd2:	e008      	b.n	8007ce6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	f043 0301 	orr.w	r3, r3, #1
 8007cde:	b2da      	uxtb	r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d004      	beq.n	8007cf8 <I2C_Master_SB+0x92>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d108      	bne.n	8007d0a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d032      	beq.n	8007d66 <I2C_Master_SB+0x100>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d02d      	beq.n	8007d66 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	685a      	ldr	r2, [r3, #4]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d18:	605a      	str	r2, [r3, #4]
}
 8007d1a:	e024      	b.n	8007d66 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d10e      	bne.n	8007d42 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	11db      	asrs	r3, r3, #7
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	f003 0306 	and.w	r3, r3, #6
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	f063 030f 	orn	r3, r3, #15
 8007d38:	b2da      	uxtb	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	611a      	str	r2, [r3, #16]
}
 8007d40:	e011      	b.n	8007d66 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d10d      	bne.n	8007d66 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	11db      	asrs	r3, r3, #7
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	f003 0306 	and.w	r3, r3, #6
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	f063 030e 	orn	r3, r3, #14
 8007d5e:	b2da      	uxtb	r2, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	611a      	str	r2, [r3, #16]
}
 8007d66:	bf00      	nop
 8007d68:	370c      	adds	r7, #12
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bc80      	pop	{r7}
 8007d6e:	4770      	bx	lr

08007d70 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d004      	beq.n	8007d96 <I2C_Master_ADD10+0x26>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d108      	bne.n	8007da8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00c      	beq.n	8007db8 <I2C_Master_ADD10+0x48>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d007      	beq.n	8007db8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	685a      	ldr	r2, [r3, #4]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007db6:	605a      	str	r2, [r3, #4]
  }
}
 8007db8:	bf00      	nop
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bc80      	pop	{r7}
 8007dc0:	4770      	bx	lr

08007dc2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	b091      	sub	sp, #68	; 0x44
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007dd0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dde:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	2b22      	cmp	r3, #34	; 0x22
 8007dea:	f040 8174 	bne.w	80080d6 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d10f      	bne.n	8007e16 <I2C_Master_ADDR+0x54>
 8007df6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007dfa:	2b40      	cmp	r3, #64	; 0x40
 8007dfc:	d10b      	bne.n	8007e16 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007dfe:	2300      	movs	r3, #0
 8007e00:	633b      	str	r3, [r7, #48]	; 0x30
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	695b      	ldr	r3, [r3, #20]
 8007e08:	633b      	str	r3, [r7, #48]	; 0x30
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	633b      	str	r3, [r7, #48]	; 0x30
 8007e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e14:	e16b      	b.n	80080ee <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d11d      	bne.n	8007e5a <I2C_Master_ADDR+0x98>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e26:	d118      	bne.n	8007e5a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e28:	2300      	movs	r3, #0
 8007e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e4c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e52:	1c5a      	adds	r2, r3, #1
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	651a      	str	r2, [r3, #80]	; 0x50
 8007e58:	e149      	b.n	80080ee <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d113      	bne.n	8007e8c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e64:	2300      	movs	r3, #0
 8007e66:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e78:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e88:	601a      	str	r2, [r3, #0]
 8007e8a:	e120      	b.n	80080ce <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	f040 808a 	bne.w	8007fac <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007e9e:	d137      	bne.n	8007f10 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007eae:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007eba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ebe:	d113      	bne.n	8007ee8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ece:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	627b      	str	r3, [r7, #36]	; 0x24
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	699b      	ldr	r3, [r3, #24]
 8007ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee6:	e0f2      	b.n	80080ce <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ee8:	2300      	movs	r3, #0
 8007eea:	623b      	str	r3, [r7, #32]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	695b      	ldr	r3, [r3, #20]
 8007ef2:	623b      	str	r3, [r7, #32]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	699b      	ldr	r3, [r3, #24]
 8007efa:	623b      	str	r3, [r7, #32]
 8007efc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f0c:	601a      	str	r2, [r3, #0]
 8007f0e:	e0de      	b.n	80080ce <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f12:	2b08      	cmp	r3, #8
 8007f14:	d02e      	beq.n	8007f74 <I2C_Master_ADDR+0x1b2>
 8007f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f18:	2b20      	cmp	r3, #32
 8007f1a:	d02b      	beq.n	8007f74 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f1e:	2b12      	cmp	r3, #18
 8007f20:	d102      	bne.n	8007f28 <I2C_Master_ADDR+0x166>
 8007f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d125      	bne.n	8007f74 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f2a:	2b04      	cmp	r3, #4
 8007f2c:	d00e      	beq.n	8007f4c <I2C_Master_ADDR+0x18a>
 8007f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	d00b      	beq.n	8007f4c <I2C_Master_ADDR+0x18a>
 8007f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f36:	2b10      	cmp	r3, #16
 8007f38:	d008      	beq.n	8007f4c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f48:	601a      	str	r2, [r3, #0]
 8007f4a:	e007      	b.n	8007f5c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f5a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	61fb      	str	r3, [r7, #28]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	695b      	ldr	r3, [r3, #20]
 8007f66:	61fb      	str	r3, [r7, #28]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	699b      	ldr	r3, [r3, #24]
 8007f6e:	61fb      	str	r3, [r7, #28]
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	e0ac      	b.n	80080ce <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f82:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f84:	2300      	movs	r3, #0
 8007f86:	61bb      	str	r3, [r7, #24]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	61bb      	str	r3, [r7, #24]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	699b      	ldr	r3, [r3, #24]
 8007f96:	61bb      	str	r3, [r7, #24]
 8007f98:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fa8:	601a      	str	r2, [r3, #0]
 8007faa:	e090      	b.n	80080ce <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d158      	bne.n	8008068 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb8:	2b04      	cmp	r3, #4
 8007fba:	d021      	beq.n	8008000 <I2C_Master_ADDR+0x23e>
 8007fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d01e      	beq.n	8008000 <I2C_Master_ADDR+0x23e>
 8007fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc4:	2b10      	cmp	r3, #16
 8007fc6:	d01b      	beq.n	8008000 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fd6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fd8:	2300      	movs	r3, #0
 8007fda:	617b      	str	r3, [r7, #20]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	695b      	ldr	r3, [r3, #20]
 8007fe2:	617b      	str	r3, [r7, #20]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	699b      	ldr	r3, [r3, #24]
 8007fea:	617b      	str	r3, [r7, #20]
 8007fec:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ffc:	601a      	str	r2, [r3, #0]
 8007ffe:	e012      	b.n	8008026 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800800e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008010:	2300      	movs	r3, #0
 8008012:	613b      	str	r3, [r7, #16]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	695b      	ldr	r3, [r3, #20]
 800801a:	613b      	str	r3, [r7, #16]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	699b      	ldr	r3, [r3, #24]
 8008022:	613b      	str	r3, [r7, #16]
 8008024:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008030:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008034:	d14b      	bne.n	80080ce <I2C_Master_ADDR+0x30c>
 8008036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008038:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800803c:	d00b      	beq.n	8008056 <I2C_Master_ADDR+0x294>
 800803e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008040:	2b01      	cmp	r3, #1
 8008042:	d008      	beq.n	8008056 <I2C_Master_ADDR+0x294>
 8008044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008046:	2b08      	cmp	r3, #8
 8008048:	d005      	beq.n	8008056 <I2C_Master_ADDR+0x294>
 800804a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804c:	2b10      	cmp	r3, #16
 800804e:	d002      	beq.n	8008056 <I2C_Master_ADDR+0x294>
 8008050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008052:	2b20      	cmp	r3, #32
 8008054:	d13b      	bne.n	80080ce <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	685a      	ldr	r2, [r3, #4]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008064:	605a      	str	r2, [r3, #4]
 8008066:	e032      	b.n	80080ce <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008076:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008082:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008086:	d117      	bne.n	80080b8 <I2C_Master_ADDR+0x2f6>
 8008088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800808e:	d00b      	beq.n	80080a8 <I2C_Master_ADDR+0x2e6>
 8008090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008092:	2b01      	cmp	r3, #1
 8008094:	d008      	beq.n	80080a8 <I2C_Master_ADDR+0x2e6>
 8008096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008098:	2b08      	cmp	r3, #8
 800809a:	d005      	beq.n	80080a8 <I2C_Master_ADDR+0x2e6>
 800809c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809e:	2b10      	cmp	r3, #16
 80080a0:	d002      	beq.n	80080a8 <I2C_Master_ADDR+0x2e6>
 80080a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a4:	2b20      	cmp	r3, #32
 80080a6:	d107      	bne.n	80080b8 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	685a      	ldr	r2, [r3, #4]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80080b6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080b8:	2300      	movs	r3, #0
 80080ba:	60fb      	str	r3, [r7, #12]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	695b      	ldr	r3, [r3, #20]
 80080c2:	60fb      	str	r3, [r7, #12]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	60fb      	str	r3, [r7, #12]
 80080cc:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80080d4:	e00b      	b.n	80080ee <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080d6:	2300      	movs	r3, #0
 80080d8:	60bb      	str	r3, [r7, #8]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	695b      	ldr	r3, [r3, #20]
 80080e0:	60bb      	str	r3, [r7, #8]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	699b      	ldr	r3, [r3, #24]
 80080e8:	60bb      	str	r3, [r7, #8]
 80080ea:	68bb      	ldr	r3, [r7, #8]
}
 80080ec:	e7ff      	b.n	80080ee <I2C_Master_ADDR+0x32c>
 80080ee:	bf00      	nop
 80080f0:	3744      	adds	r7, #68	; 0x44
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bc80      	pop	{r7}
 80080f6:	4770      	bx	lr

080080f8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008106:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800810c:	b29b      	uxth	r3, r3
 800810e:	2b00      	cmp	r3, #0
 8008110:	d02b      	beq.n	800816a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008116:	781a      	ldrb	r2, [r3, #0]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008122:	1c5a      	adds	r2, r3, #1
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800812c:	b29b      	uxth	r3, r3
 800812e:	3b01      	subs	r3, #1
 8008130:	b29a      	uxth	r2, r3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800813a:	b29b      	uxth	r3, r3
 800813c:	2b00      	cmp	r3, #0
 800813e:	d114      	bne.n	800816a <I2C_SlaveTransmit_TXE+0x72>
 8008140:	7bfb      	ldrb	r3, [r7, #15]
 8008142:	2b29      	cmp	r3, #41	; 0x29
 8008144:	d111      	bne.n	800816a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	685a      	ldr	r2, [r3, #4]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008154:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2221      	movs	r2, #33	; 0x21
 800815a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2228      	movs	r2, #40	; 0x28
 8008160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f7ff fa03 	bl	8007570 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800816a:	bf00      	nop
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008172:	b480      	push	{r7}
 8008174:	b083      	sub	sp, #12
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800817e:	b29b      	uxth	r3, r3
 8008180:	2b00      	cmp	r3, #0
 8008182:	d011      	beq.n	80081a8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008188:	781a      	ldrb	r2, [r3, #0]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008194:	1c5a      	adds	r2, r3, #1
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800819e:	b29b      	uxth	r3, r3
 80081a0:	3b01      	subs	r3, #1
 80081a2:	b29a      	uxth	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80081a8:	bf00      	nop
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bc80      	pop	{r7}
 80081b0:	4770      	bx	lr

080081b2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b084      	sub	sp, #16
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081c0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d02c      	beq.n	8008226 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	691a      	ldr	r2, [r3, #16]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d6:	b2d2      	uxtb	r2, r2
 80081d8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081de:	1c5a      	adds	r2, r3, #1
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	3b01      	subs	r3, #1
 80081ec:	b29a      	uxth	r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d114      	bne.n	8008226 <I2C_SlaveReceive_RXNE+0x74>
 80081fc:	7bfb      	ldrb	r3, [r7, #15]
 80081fe:	2b2a      	cmp	r3, #42	; 0x2a
 8008200:	d111      	bne.n	8008226 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	685a      	ldr	r2, [r3, #4]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008210:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2222      	movs	r2, #34	; 0x22
 8008216:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2228      	movs	r2, #40	; 0x28
 800821c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f7ff f9ae 	bl	8007582 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008226:	bf00      	nop
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800822e:	b480      	push	{r7}
 8008230:	b083      	sub	sp, #12
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800823a:	b29b      	uxth	r3, r3
 800823c:	2b00      	cmp	r3, #0
 800823e:	d012      	beq.n	8008266 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	691a      	ldr	r2, [r3, #16]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824a:	b2d2      	uxtb	r2, r2
 800824c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008252:	1c5a      	adds	r2, r3, #1
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800825c:	b29b      	uxth	r3, r3
 800825e:	3b01      	subs	r3, #1
 8008260:	b29a      	uxth	r2, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008266:	bf00      	nop
 8008268:	370c      	adds	r7, #12
 800826a:	46bd      	mov	sp, r7
 800826c:	bc80      	pop	{r7}
 800826e:	4770      	bx	lr

08008270 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800827a:	2300      	movs	r3, #0
 800827c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008284:	b2db      	uxtb	r3, r3
 8008286:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800828a:	2b28      	cmp	r3, #40	; 0x28
 800828c:	d127      	bne.n	80082de <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	685a      	ldr	r2, [r3, #4]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800829c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	089b      	lsrs	r3, r3, #2
 80082a2:	f003 0301 	and.w	r3, r3, #1
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d101      	bne.n	80082ae <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80082aa:	2301      	movs	r3, #1
 80082ac:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	09db      	lsrs	r3, r3, #7
 80082b2:	f003 0301 	and.w	r3, r3, #1
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d103      	bne.n	80082c2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	81bb      	strh	r3, [r7, #12]
 80082c0:	e002      	b.n	80082c8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	699b      	ldr	r3, [r3, #24]
 80082c6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80082d0:	89ba      	ldrh	r2, [r7, #12]
 80082d2:	7bfb      	ldrb	r3, [r7, #15]
 80082d4:	4619      	mov	r1, r3
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f7ff f95c 	bl	8007594 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80082dc:	e00e      	b.n	80082fc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082de:	2300      	movs	r3, #0
 80082e0:	60bb      	str	r3, [r7, #8]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	695b      	ldr	r3, [r3, #20]
 80082e8:	60bb      	str	r3, [r7, #8]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	60bb      	str	r3, [r7, #8]
 80082f2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80082fc:	bf00      	nop
 80082fe:	3710      	adds	r7, #16
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008312:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	685a      	ldr	r2, [r3, #4]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008322:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008324:	2300      	movs	r3, #0
 8008326:	60bb      	str	r3, [r7, #8]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	695b      	ldr	r3, [r3, #20]
 800832e:	60bb      	str	r3, [r7, #8]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f042 0201 	orr.w	r2, r2, #1
 800833e:	601a      	str	r2, [r3, #0]
 8008340:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008350:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800835c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008360:	d172      	bne.n	8008448 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008362:	7bfb      	ldrb	r3, [r7, #15]
 8008364:	2b22      	cmp	r3, #34	; 0x22
 8008366:	d002      	beq.n	800836e <I2C_Slave_STOPF+0x6a>
 8008368:	7bfb      	ldrb	r3, [r7, #15]
 800836a:	2b2a      	cmp	r3, #42	; 0x2a
 800836c:	d135      	bne.n	80083da <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	b29a      	uxth	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008380:	b29b      	uxth	r3, r3
 8008382:	2b00      	cmp	r3, #0
 8008384:	d005      	beq.n	8008392 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838a:	f043 0204 	orr.w	r2, r3, #4
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	685a      	ldr	r2, [r3, #4]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083a0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7fe fa40 	bl	800682c <HAL_DMA_GetState>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d049      	beq.n	8008446 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b6:	4a69      	ldr	r2, [pc, #420]	; (800855c <I2C_Slave_STOPF+0x258>)
 80083b8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083be:	4618      	mov	r0, r3
 80083c0:	f7fd fef0 	bl	80061a4 <HAL_DMA_Abort_IT>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d03d      	beq.n	8008446 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80083d4:	4610      	mov	r0, r2
 80083d6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80083d8:	e035      	b.n	8008446 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d005      	beq.n	80083fe <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f6:	f043 0204 	orr.w	r2, r3, #4
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	685a      	ldr	r2, [r3, #4]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800840c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008412:	4618      	mov	r0, r3
 8008414:	f7fe fa0a 	bl	800682c <HAL_DMA_GetState>
 8008418:	4603      	mov	r3, r0
 800841a:	2b01      	cmp	r3, #1
 800841c:	d014      	beq.n	8008448 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008422:	4a4e      	ldr	r2, [pc, #312]	; (800855c <I2C_Slave_STOPF+0x258>)
 8008424:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800842a:	4618      	mov	r0, r3
 800842c:	f7fd feba 	bl	80061a4 <HAL_DMA_Abort_IT>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d008      	beq.n	8008448 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800843a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008440:	4610      	mov	r0, r2
 8008442:	4798      	blx	r3
 8008444:	e000      	b.n	8008448 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008446:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800844c:	b29b      	uxth	r3, r3
 800844e:	2b00      	cmp	r3, #0
 8008450:	d03e      	beq.n	80084d0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	695b      	ldr	r3, [r3, #20]
 8008458:	f003 0304 	and.w	r3, r3, #4
 800845c:	2b04      	cmp	r3, #4
 800845e:	d112      	bne.n	8008486 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	691a      	ldr	r2, [r3, #16]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846a:	b2d2      	uxtb	r2, r2
 800846c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008472:	1c5a      	adds	r2, r3, #1
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800847c:	b29b      	uxth	r3, r3
 800847e:	3b01      	subs	r3, #1
 8008480:	b29a      	uxth	r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	695b      	ldr	r3, [r3, #20]
 800848c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008490:	2b40      	cmp	r3, #64	; 0x40
 8008492:	d112      	bne.n	80084ba <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	691a      	ldr	r2, [r3, #16]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849e:	b2d2      	uxtb	r2, r2
 80084a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a6:	1c5a      	adds	r2, r3, #1
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	3b01      	subs	r3, #1
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084be:	b29b      	uxth	r3, r3
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d005      	beq.n	80084d0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c8:	f043 0204 	orr.w	r2, r3, #4
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d003      	beq.n	80084e0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 f8b3 	bl	8008644 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80084de:	e039      	b.n	8008554 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80084e0:	7bfb      	ldrb	r3, [r7, #15]
 80084e2:	2b2a      	cmp	r3, #42	; 0x2a
 80084e4:	d109      	bne.n	80084fa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2228      	movs	r2, #40	; 0x28
 80084f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f7ff f844 	bl	8007582 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008500:	b2db      	uxtb	r3, r3
 8008502:	2b28      	cmp	r3, #40	; 0x28
 8008504:	d111      	bne.n	800852a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a15      	ldr	r2, [pc, #84]	; (8008560 <I2C_Slave_STOPF+0x25c>)
 800850a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2220      	movs	r2, #32
 8008516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f7ff f843 	bl	80075ae <HAL_I2C_ListenCpltCallback>
}
 8008528:	e014      	b.n	8008554 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852e:	2b22      	cmp	r3, #34	; 0x22
 8008530:	d002      	beq.n	8008538 <I2C_Slave_STOPF+0x234>
 8008532:	7bfb      	ldrb	r3, [r7, #15]
 8008534:	2b22      	cmp	r3, #34	; 0x22
 8008536:	d10d      	bne.n	8008554 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2220      	movs	r2, #32
 8008542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f7ff f817 	bl	8007582 <HAL_I2C_SlaveRxCpltCallback>
}
 8008554:	bf00      	nop
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}
 800855c:	080088a9 	.word	0x080088a9
 8008560:	ffff0000 	.word	0xffff0000

08008564 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008572:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008578:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	2b08      	cmp	r3, #8
 800857e:	d002      	beq.n	8008586 <I2C_Slave_AF+0x22>
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	2b20      	cmp	r3, #32
 8008584:	d129      	bne.n	80085da <I2C_Slave_AF+0x76>
 8008586:	7bfb      	ldrb	r3, [r7, #15]
 8008588:	2b28      	cmp	r3, #40	; 0x28
 800858a:	d126      	bne.n	80085da <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a2c      	ldr	r2, [pc, #176]	; (8008640 <I2C_Slave_AF+0xdc>)
 8008590:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	685a      	ldr	r2, [r3, #4]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80085a0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80085aa:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085ba:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2220      	movs	r2, #32
 80085c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f7fe ffeb 	bl	80075ae <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80085d8:	e02e      	b.n	8008638 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80085da:	7bfb      	ldrb	r3, [r7, #15]
 80085dc:	2b21      	cmp	r3, #33	; 0x21
 80085de:	d126      	bne.n	800862e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a17      	ldr	r2, [pc, #92]	; (8008640 <I2C_Slave_AF+0xdc>)
 80085e4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2221      	movs	r2, #33	; 0x21
 80085ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2220      	movs	r2, #32
 80085f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	685a      	ldr	r2, [r3, #4]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800860a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008614:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008624:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f7fe ffa2 	bl	8007570 <HAL_I2C_SlaveTxCpltCallback>
}
 800862c:	e004      	b.n	8008638 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008636:	615a      	str	r2, [r3, #20]
}
 8008638:	bf00      	nop
 800863a:	3710      	adds	r7, #16
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	ffff0000 	.word	0xffff0000

08008644 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008652:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800865a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800865c:	7bbb      	ldrb	r3, [r7, #14]
 800865e:	2b10      	cmp	r3, #16
 8008660:	d002      	beq.n	8008668 <I2C_ITError+0x24>
 8008662:	7bbb      	ldrb	r3, [r7, #14]
 8008664:	2b40      	cmp	r3, #64	; 0x40
 8008666:	d10a      	bne.n	800867e <I2C_ITError+0x3a>
 8008668:	7bfb      	ldrb	r3, [r7, #15]
 800866a:	2b22      	cmp	r3, #34	; 0x22
 800866c:	d107      	bne.n	800867e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800867c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800867e:	7bfb      	ldrb	r3, [r7, #15]
 8008680:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008684:	2b28      	cmp	r3, #40	; 0x28
 8008686:	d107      	bne.n	8008698 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2228      	movs	r2, #40	; 0x28
 8008692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008696:	e015      	b.n	80086c4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086a6:	d00a      	beq.n	80086be <I2C_ITError+0x7a>
 80086a8:	7bfb      	ldrb	r3, [r7, #15]
 80086aa:	2b60      	cmp	r3, #96	; 0x60
 80086ac:	d007      	beq.n	80086be <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2220      	movs	r2, #32
 80086b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086d2:	d161      	bne.n	8008798 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	685a      	ldr	r2, [r3, #4]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80086e2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d020      	beq.n	8008732 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086f4:	4a6a      	ldr	r2, [pc, #424]	; (80088a0 <I2C_ITError+0x25c>)
 80086f6:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7fd fd51 	bl	80061a4 <HAL_DMA_Abort_IT>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	f000 8089 	beq.w	800881c <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f022 0201 	bic.w	r2, r2, #1
 8008718:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2220      	movs	r2, #32
 800871e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800872c:	4610      	mov	r0, r2
 800872e:	4798      	blx	r3
 8008730:	e074      	b.n	800881c <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008736:	4a5a      	ldr	r2, [pc, #360]	; (80088a0 <I2C_ITError+0x25c>)
 8008738:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800873e:	4618      	mov	r0, r3
 8008740:	f7fd fd30 	bl	80061a4 <HAL_DMA_Abort_IT>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d068      	beq.n	800881c <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	695b      	ldr	r3, [r3, #20]
 8008750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008754:	2b40      	cmp	r3, #64	; 0x40
 8008756:	d10b      	bne.n	8008770 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	691a      	ldr	r2, [r3, #16]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008762:	b2d2      	uxtb	r2, r2
 8008764:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876a:	1c5a      	adds	r2, r3, #1
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f022 0201 	bic.w	r2, r2, #1
 800877e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2220      	movs	r2, #32
 8008784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800878c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008792:	4610      	mov	r0, r2
 8008794:	4798      	blx	r3
 8008796:	e041      	b.n	800881c <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	2b60      	cmp	r3, #96	; 0x60
 80087a2:	d125      	bne.n	80087f0 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2220      	movs	r2, #32
 80087a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	695b      	ldr	r3, [r3, #20]
 80087b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087bc:	2b40      	cmp	r3, #64	; 0x40
 80087be:	d10b      	bne.n	80087d8 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	691a      	ldr	r2, [r3, #16]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ca:	b2d2      	uxtb	r2, r2
 80087cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d2:	1c5a      	adds	r2, r3, #1
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f022 0201 	bic.w	r2, r2, #1
 80087e6:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f7fb fd4d 	bl	8004288 <HAL_I2C_AbortCpltCallback>
 80087ee:	e015      	b.n	800881c <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	695b      	ldr	r3, [r3, #20]
 80087f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087fa:	2b40      	cmp	r3, #64	; 0x40
 80087fc:	d10b      	bne.n	8008816 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	691a      	ldr	r2, [r3, #16]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008808:	b2d2      	uxtb	r2, r2
 800880a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008810:	1c5a      	adds	r2, r3, #1
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f7fb fd16 	bl	8004248 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008820:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	f003 0301 	and.w	r3, r3, #1
 8008828:	2b00      	cmp	r3, #0
 800882a:	d10e      	bne.n	800884a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008832:	2b00      	cmp	r3, #0
 8008834:	d109      	bne.n	800884a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800883c:	2b00      	cmp	r3, #0
 800883e:	d104      	bne.n	800884a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008846:	2b00      	cmp	r3, #0
 8008848:	d007      	beq.n	800885a <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	685a      	ldr	r2, [r3, #4]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008858:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008860:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008866:	f003 0304 	and.w	r3, r3, #4
 800886a:	2b04      	cmp	r3, #4
 800886c:	d113      	bne.n	8008896 <I2C_ITError+0x252>
 800886e:	7bfb      	ldrb	r3, [r7, #15]
 8008870:	2b28      	cmp	r3, #40	; 0x28
 8008872:	d110      	bne.n	8008896 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a0b      	ldr	r2, [pc, #44]	; (80088a4 <I2C_ITError+0x260>)
 8008878:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2220      	movs	r2, #32
 8008884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f7fe fe8c 	bl	80075ae <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008896:	bf00      	nop
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	080088a9 	.word	0x080088a9
 80088a4:	ffff0000 	.word	0xffff0000

080088a8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b086      	sub	sp, #24
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80088b0:	2300      	movs	r3, #0
 80088b2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088c0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80088c2:	4b4b      	ldr	r3, [pc, #300]	; (80089f0 <I2C_DMAAbort+0x148>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	08db      	lsrs	r3, r3, #3
 80088c8:	4a4a      	ldr	r2, [pc, #296]	; (80089f4 <I2C_DMAAbort+0x14c>)
 80088ca:	fba2 2303 	umull	r2, r3, r2, r3
 80088ce:	0a1a      	lsrs	r2, r3, #8
 80088d0:	4613      	mov	r3, r2
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	4413      	add	r3, r2
 80088d6:	00da      	lsls	r2, r3, #3
 80088d8:	1ad3      	subs	r3, r2, r3
 80088da:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d106      	bne.n	80088f0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e6:	f043 0220 	orr.w	r2, r3, #32
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80088ee:	e00a      	b.n	8008906 <I2C_DMAAbort+0x5e>
    }
    count--;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	3b01      	subs	r3, #1
 80088f4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008904:	d0ea      	beq.n	80088dc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800890a:	2b00      	cmp	r3, #0
 800890c:	d003      	beq.n	8008916 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008912:	2200      	movs	r2, #0
 8008914:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800891a:	2b00      	cmp	r3, #0
 800891c:	d003      	beq.n	8008926 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008922:	2200      	movs	r2, #0
 8008924:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008934:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	2200      	movs	r2, #0
 800893a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008940:	2b00      	cmp	r3, #0
 8008942:	d003      	beq.n	800894c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008948:	2200      	movs	r2, #0
 800894a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008950:	2b00      	cmp	r3, #0
 8008952:	d003      	beq.n	800895c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008958:	2200      	movs	r2, #0
 800895a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f022 0201 	bic.w	r2, r2, #1
 800896a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008972:	b2db      	uxtb	r3, r3
 8008974:	2b60      	cmp	r3, #96	; 0x60
 8008976:	d10e      	bne.n	8008996 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	2220      	movs	r2, #32
 800897c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	2200      	movs	r2, #0
 8008984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	2200      	movs	r2, #0
 800898c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800898e:	6978      	ldr	r0, [r7, #20]
 8008990:	f7fb fc7a 	bl	8004288 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008994:	e027      	b.n	80089e6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008996:	7cfb      	ldrb	r3, [r7, #19]
 8008998:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800899c:	2b28      	cmp	r3, #40	; 0x28
 800899e:	d117      	bne.n	80089d0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f042 0201 	orr.w	r2, r2, #1
 80089ae:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80089be:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	2200      	movs	r2, #0
 80089c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	2228      	movs	r2, #40	; 0x28
 80089ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80089ce:	e007      	b.n	80089e0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	2220      	movs	r2, #32
 80089d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	2200      	movs	r2, #0
 80089dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80089e0:	6978      	ldr	r0, [r7, #20]
 80089e2:	f7fb fc31 	bl	8004248 <HAL_I2C_ErrorCallback>
}
 80089e6:	bf00      	nop
 80089e8:	3718      	adds	r7, #24
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	20000054 	.word	0x20000054
 80089f4:	14f8b589 	.word	0x14f8b589

080089f8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a00:	2300      	movs	r3, #0
 8008a02:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008a04:	4b13      	ldr	r3, [pc, #76]	; (8008a54 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	08db      	lsrs	r3, r3, #3
 8008a0a:	4a13      	ldr	r2, [pc, #76]	; (8008a58 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a10:	0a1a      	lsrs	r2, r3, #8
 8008a12:	4613      	mov	r3, r2
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	4413      	add	r3, r2
 8008a18:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	3b01      	subs	r3, #1
 8008a1e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d107      	bne.n	8008a36 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2a:	f043 0220 	orr.w	r2, r3, #32
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e008      	b.n	8008a48 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a44:	d0e9      	beq.n	8008a1a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3714      	adds	r7, #20
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bc80      	pop	{r7}
 8008a50:	4770      	bx	lr
 8008a52:	bf00      	nop
 8008a54:	20000054 	.word	0x20000054
 8008a58:	14f8b589 	.word	0x14f8b589

08008a5c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a68:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008a6c:	d103      	bne.n	8008a76 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2201      	movs	r2, #1
 8008a72:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008a74:	e007      	b.n	8008a86 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a7a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008a7e:	d102      	bne.n	8008a86 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2208      	movs	r2, #8
 8008a84:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008a86:	bf00      	nop
 8008a88:	370c      	adds	r7, #12
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bc80      	pop	{r7}
 8008a8e:	4770      	bx	lr

08008a90 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008a90:	b480      	push	{r7}
 8008a92:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8008a94:	4b03      	ldr	r3, [pc, #12]	; (8008aa4 <HAL_PWR_EnableBkUpAccess+0x14>)
 8008a96:	2201      	movs	r2, #1
 8008a98:	601a      	str	r2, [r3, #0]
}
 8008a9a:	bf00      	nop
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bc80      	pop	{r7}
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop
 8008aa4:	420e0020 	.word	0x420e0020

08008aa8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b086      	sub	sp, #24
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d101      	bne.n	8008aba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e304      	b.n	80090c4 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 0301 	and.w	r3, r3, #1
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	f000 8087 	beq.w	8008bd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008ac8:	4b92      	ldr	r3, [pc, #584]	; (8008d14 <HAL_RCC_OscConfig+0x26c>)
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	f003 030c 	and.w	r3, r3, #12
 8008ad0:	2b04      	cmp	r3, #4
 8008ad2:	d00c      	beq.n	8008aee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008ad4:	4b8f      	ldr	r3, [pc, #572]	; (8008d14 <HAL_RCC_OscConfig+0x26c>)
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	f003 030c 	and.w	r3, r3, #12
 8008adc:	2b08      	cmp	r3, #8
 8008ade:	d112      	bne.n	8008b06 <HAL_RCC_OscConfig+0x5e>
 8008ae0:	4b8c      	ldr	r3, [pc, #560]	; (8008d14 <HAL_RCC_OscConfig+0x26c>)
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008aec:	d10b      	bne.n	8008b06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008aee:	4b89      	ldr	r3, [pc, #548]	; (8008d14 <HAL_RCC_OscConfig+0x26c>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d06c      	beq.n	8008bd4 <HAL_RCC_OscConfig+0x12c>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d168      	bne.n	8008bd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	e2de      	b.n	80090c4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b0e:	d106      	bne.n	8008b1e <HAL_RCC_OscConfig+0x76>
 8008b10:	4b80      	ldr	r3, [pc, #512]	; (8008d14 <HAL_RCC_OscConfig+0x26c>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a7f      	ldr	r2, [pc, #508]	; (8008d14 <HAL_RCC_OscConfig+0x26c>)
 8008b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b1a:	6013      	str	r3, [r2, #0]
 8008b1c:	e02e      	b.n	8008b7c <HAL_RCC_OscConfig+0xd4>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d10c      	bne.n	8008b40 <HAL_RCC_OscConfig+0x98>
 8008b26:	4b7b      	ldr	r3, [pc, #492]	; (8008d14 <HAL_RCC_OscConfig+0x26c>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a7a      	ldr	r2, [pc, #488]	; (8008d14 <HAL_RCC_OscConfig+0x26c>)
 8008b2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b30:	6013      	str	r3, [r2, #0]
 8008b32:	4b78      	ldr	r3, [pc, #480]	; (8008d14 <HAL_RCC_OscConfig+0x26c>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a77      	ldr	r2, [pc, #476]	; (8008d14 <HAL_RCC_OscConfig+0x26c>)
 8008b38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b3c:	6013      	str	r3, [r2, #0]
 8008b3e:	e01d      	b.n	8008b7c <HAL_RCC_OscConfig+0xd4>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b48:	d10c      	bne.n	8008b64 <HAL_RCC_OscConfig+0xbc>
 8008b4a:	4b72      	ldr	r3, [pc, #456]	; (8008d14 <HAL_RCC_OscConfig+0x26c>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a71      	ldr	r2, [pc, #452]	; (8008d14 <HAL_RCC_OscConfig+0x26c>)
 8008b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b54:	6013      	str	r3, [r2, #0]
 8008b56:	4b6f      	ldr	r3, [pc, #444]	; (8008d14 <HAL_RCC_OscConfig+0x26c>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a6e      	ldr	r2, [pc, #440]	; (8008d14 <HAL_RCC_OscConfig+0x26c>)
 8008b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b60:	6013      	str	r3, [r2, #0]
 8008b62:	e00b      	b.n	8008b7c <HAL_RCC_OscConfig+0xd4>
 8008b64:	4b6b      	ldr	r3, [pc, #428]	; (8008d14 <HAL_RCC_OscConfig+0x26c>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a6a      	ldr	r2, [pc, #424]	; (8008d14 <HAL_RCC_OscConfig+0x26c>)
 8008b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b6e:	6013      	str	r3, [r2, #0]
 8008b70:	4b68      	ldr	r3, [pc, #416]	; (8008d14 <HAL_RCC_OscConfig+0x26c>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a67      	ldr	r2, [pc, #412]	; (8008d14 <HAL_RCC_OscConfig+0x26c>)
 8008b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d013      	beq.n	8008bac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b84:	f7fd f914 	bl	8005db0 <HAL_GetTick>
 8008b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b8a:	e008      	b.n	8008b9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b8c:	f7fd f910 	bl	8005db0 <HAL_GetTick>
 8008b90:	4602      	mov	r2, r0
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	2b64      	cmp	r3, #100	; 0x64
 8008b98:	d901      	bls.n	8008b9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008b9a:	2303      	movs	r3, #3
 8008b9c:	e292      	b.n	80090c4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b9e:	4b5d      	ldr	r3, [pc, #372]	; (8008d14 <HAL_RCC_OscConfig+0x26c>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d0f0      	beq.n	8008b8c <HAL_RCC_OscConfig+0xe4>
 8008baa:	e014      	b.n	8008bd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bac:	f7fd f900 	bl	8005db0 <HAL_GetTick>
 8008bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008bb2:	e008      	b.n	8008bc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008bb4:	f7fd f8fc 	bl	8005db0 <HAL_GetTick>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	1ad3      	subs	r3, r2, r3
 8008bbe:	2b64      	cmp	r3, #100	; 0x64
 8008bc0:	d901      	bls.n	8008bc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008bc2:	2303      	movs	r3, #3
 8008bc4:	e27e      	b.n	80090c4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008bc6:	4b53      	ldr	r3, [pc, #332]	; (8008d14 <HAL_RCC_OscConfig+0x26c>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1f0      	bne.n	8008bb4 <HAL_RCC_OscConfig+0x10c>
 8008bd2:	e000      	b.n	8008bd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 0302 	and.w	r3, r3, #2
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d063      	beq.n	8008caa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008be2:	4b4c      	ldr	r3, [pc, #304]	; (8008d14 <HAL_RCC_OscConfig+0x26c>)
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	f003 030c 	and.w	r3, r3, #12
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00b      	beq.n	8008c06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008bee:	4b49      	ldr	r3, [pc, #292]	; (8008d14 <HAL_RCC_OscConfig+0x26c>)
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	f003 030c 	and.w	r3, r3, #12
 8008bf6:	2b08      	cmp	r3, #8
 8008bf8:	d11c      	bne.n	8008c34 <HAL_RCC_OscConfig+0x18c>
 8008bfa:	4b46      	ldr	r3, [pc, #280]	; (8008d14 <HAL_RCC_OscConfig+0x26c>)
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d116      	bne.n	8008c34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c06:	4b43      	ldr	r3, [pc, #268]	; (8008d14 <HAL_RCC_OscConfig+0x26c>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f003 0302 	and.w	r3, r3, #2
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d005      	beq.n	8008c1e <HAL_RCC_OscConfig+0x176>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	695b      	ldr	r3, [r3, #20]
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d001      	beq.n	8008c1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e252      	b.n	80090c4 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c1e:	4b3d      	ldr	r3, [pc, #244]	; (8008d14 <HAL_RCC_OscConfig+0x26c>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	699b      	ldr	r3, [r3, #24]
 8008c2a:	00db      	lsls	r3, r3, #3
 8008c2c:	4939      	ldr	r1, [pc, #228]	; (8008d14 <HAL_RCC_OscConfig+0x26c>)
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c32:	e03a      	b.n	8008caa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	695b      	ldr	r3, [r3, #20]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d020      	beq.n	8008c7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008c3c:	4b36      	ldr	r3, [pc, #216]	; (8008d18 <HAL_RCC_OscConfig+0x270>)
 8008c3e:	2201      	movs	r2, #1
 8008c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c42:	f7fd f8b5 	bl	8005db0 <HAL_GetTick>
 8008c46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c48:	e008      	b.n	8008c5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c4a:	f7fd f8b1 	bl	8005db0 <HAL_GetTick>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	1ad3      	subs	r3, r2, r3
 8008c54:	2b02      	cmp	r3, #2
 8008c56:	d901      	bls.n	8008c5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008c58:	2303      	movs	r3, #3
 8008c5a:	e233      	b.n	80090c4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c5c:	4b2d      	ldr	r3, [pc, #180]	; (8008d14 <HAL_RCC_OscConfig+0x26c>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f003 0302 	and.w	r3, r3, #2
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d0f0      	beq.n	8008c4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c68:	4b2a      	ldr	r3, [pc, #168]	; (8008d14 <HAL_RCC_OscConfig+0x26c>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	699b      	ldr	r3, [r3, #24]
 8008c74:	00db      	lsls	r3, r3, #3
 8008c76:	4927      	ldr	r1, [pc, #156]	; (8008d14 <HAL_RCC_OscConfig+0x26c>)
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	600b      	str	r3, [r1, #0]
 8008c7c:	e015      	b.n	8008caa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c7e:	4b26      	ldr	r3, [pc, #152]	; (8008d18 <HAL_RCC_OscConfig+0x270>)
 8008c80:	2200      	movs	r2, #0
 8008c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c84:	f7fd f894 	bl	8005db0 <HAL_GetTick>
 8008c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c8a:	e008      	b.n	8008c9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c8c:	f7fd f890 	bl	8005db0 <HAL_GetTick>
 8008c90:	4602      	mov	r2, r0
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	1ad3      	subs	r3, r2, r3
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d901      	bls.n	8008c9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008c9a:	2303      	movs	r3, #3
 8008c9c:	e212      	b.n	80090c4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c9e:	4b1d      	ldr	r3, [pc, #116]	; (8008d14 <HAL_RCC_OscConfig+0x26c>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f003 0302 	and.w	r3, r3, #2
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1f0      	bne.n	8008c8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f003 0308 	and.w	r3, r3, #8
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d03a      	beq.n	8008d2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	69db      	ldr	r3, [r3, #28]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d019      	beq.n	8008cf2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008cbe:	4b17      	ldr	r3, [pc, #92]	; (8008d1c <HAL_RCC_OscConfig+0x274>)
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008cc4:	f7fd f874 	bl	8005db0 <HAL_GetTick>
 8008cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008cca:	e008      	b.n	8008cde <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ccc:	f7fd f870 	bl	8005db0 <HAL_GetTick>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	1ad3      	subs	r3, r2, r3
 8008cd6:	2b02      	cmp	r3, #2
 8008cd8:	d901      	bls.n	8008cde <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008cda:	2303      	movs	r3, #3
 8008cdc:	e1f2      	b.n	80090c4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008cde:	4b0d      	ldr	r3, [pc, #52]	; (8008d14 <HAL_RCC_OscConfig+0x26c>)
 8008ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce2:	f003 0302 	and.w	r3, r3, #2
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d0f0      	beq.n	8008ccc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008cea:	2001      	movs	r0, #1
 8008cec:	f000 fc22 	bl	8009534 <RCC_Delay>
 8008cf0:	e01c      	b.n	8008d2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008cf2:	4b0a      	ldr	r3, [pc, #40]	; (8008d1c <HAL_RCC_OscConfig+0x274>)
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008cf8:	f7fd f85a 	bl	8005db0 <HAL_GetTick>
 8008cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008cfe:	e00f      	b.n	8008d20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d00:	f7fd f856 	bl	8005db0 <HAL_GetTick>
 8008d04:	4602      	mov	r2, r0
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	1ad3      	subs	r3, r2, r3
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d908      	bls.n	8008d20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008d0e:	2303      	movs	r3, #3
 8008d10:	e1d8      	b.n	80090c4 <HAL_RCC_OscConfig+0x61c>
 8008d12:	bf00      	nop
 8008d14:	40021000 	.word	0x40021000
 8008d18:	42420000 	.word	0x42420000
 8008d1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d20:	4b9b      	ldr	r3, [pc, #620]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d24:	f003 0302 	and.w	r3, r3, #2
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d1e9      	bne.n	8008d00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 0304 	and.w	r3, r3, #4
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	f000 80a6 	beq.w	8008e86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d3e:	4b94      	ldr	r3, [pc, #592]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008d40:	69db      	ldr	r3, [r3, #28]
 8008d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d10d      	bne.n	8008d66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d4a:	4b91      	ldr	r3, [pc, #580]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008d4c:	69db      	ldr	r3, [r3, #28]
 8008d4e:	4a90      	ldr	r2, [pc, #576]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d54:	61d3      	str	r3, [r2, #28]
 8008d56:	4b8e      	ldr	r3, [pc, #568]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008d58:	69db      	ldr	r3, [r3, #28]
 8008d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d5e:	60bb      	str	r3, [r7, #8]
 8008d60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d62:	2301      	movs	r3, #1
 8008d64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d66:	4b8b      	ldr	r3, [pc, #556]	; (8008f94 <HAL_RCC_OscConfig+0x4ec>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d118      	bne.n	8008da4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008d72:	4b88      	ldr	r3, [pc, #544]	; (8008f94 <HAL_RCC_OscConfig+0x4ec>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a87      	ldr	r2, [pc, #540]	; (8008f94 <HAL_RCC_OscConfig+0x4ec>)
 8008d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d7e:	f7fd f817 	bl	8005db0 <HAL_GetTick>
 8008d82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d84:	e008      	b.n	8008d98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d86:	f7fd f813 	bl	8005db0 <HAL_GetTick>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	1ad3      	subs	r3, r2, r3
 8008d90:	2b64      	cmp	r3, #100	; 0x64
 8008d92:	d901      	bls.n	8008d98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008d94:	2303      	movs	r3, #3
 8008d96:	e195      	b.n	80090c4 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d98:	4b7e      	ldr	r3, [pc, #504]	; (8008f94 <HAL_RCC_OscConfig+0x4ec>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d0f0      	beq.n	8008d86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	691b      	ldr	r3, [r3, #16]
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d106      	bne.n	8008dba <HAL_RCC_OscConfig+0x312>
 8008dac:	4b78      	ldr	r3, [pc, #480]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008dae:	6a1b      	ldr	r3, [r3, #32]
 8008db0:	4a77      	ldr	r2, [pc, #476]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008db2:	f043 0301 	orr.w	r3, r3, #1
 8008db6:	6213      	str	r3, [r2, #32]
 8008db8:	e02d      	b.n	8008e16 <HAL_RCC_OscConfig+0x36e>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	691b      	ldr	r3, [r3, #16]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d10c      	bne.n	8008ddc <HAL_RCC_OscConfig+0x334>
 8008dc2:	4b73      	ldr	r3, [pc, #460]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008dc4:	6a1b      	ldr	r3, [r3, #32]
 8008dc6:	4a72      	ldr	r2, [pc, #456]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008dc8:	f023 0301 	bic.w	r3, r3, #1
 8008dcc:	6213      	str	r3, [r2, #32]
 8008dce:	4b70      	ldr	r3, [pc, #448]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008dd0:	6a1b      	ldr	r3, [r3, #32]
 8008dd2:	4a6f      	ldr	r2, [pc, #444]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008dd4:	f023 0304 	bic.w	r3, r3, #4
 8008dd8:	6213      	str	r3, [r2, #32]
 8008dda:	e01c      	b.n	8008e16 <HAL_RCC_OscConfig+0x36e>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	691b      	ldr	r3, [r3, #16]
 8008de0:	2b05      	cmp	r3, #5
 8008de2:	d10c      	bne.n	8008dfe <HAL_RCC_OscConfig+0x356>
 8008de4:	4b6a      	ldr	r3, [pc, #424]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008de6:	6a1b      	ldr	r3, [r3, #32]
 8008de8:	4a69      	ldr	r2, [pc, #420]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008dea:	f043 0304 	orr.w	r3, r3, #4
 8008dee:	6213      	str	r3, [r2, #32]
 8008df0:	4b67      	ldr	r3, [pc, #412]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008df2:	6a1b      	ldr	r3, [r3, #32]
 8008df4:	4a66      	ldr	r2, [pc, #408]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008df6:	f043 0301 	orr.w	r3, r3, #1
 8008dfa:	6213      	str	r3, [r2, #32]
 8008dfc:	e00b      	b.n	8008e16 <HAL_RCC_OscConfig+0x36e>
 8008dfe:	4b64      	ldr	r3, [pc, #400]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008e00:	6a1b      	ldr	r3, [r3, #32]
 8008e02:	4a63      	ldr	r2, [pc, #396]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008e04:	f023 0301 	bic.w	r3, r3, #1
 8008e08:	6213      	str	r3, [r2, #32]
 8008e0a:	4b61      	ldr	r3, [pc, #388]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008e0c:	6a1b      	ldr	r3, [r3, #32]
 8008e0e:	4a60      	ldr	r2, [pc, #384]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008e10:	f023 0304 	bic.w	r3, r3, #4
 8008e14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	691b      	ldr	r3, [r3, #16]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d015      	beq.n	8008e4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e1e:	f7fc ffc7 	bl	8005db0 <HAL_GetTick>
 8008e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e24:	e00a      	b.n	8008e3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e26:	f7fc ffc3 	bl	8005db0 <HAL_GetTick>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	1ad3      	subs	r3, r2, r3
 8008e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d901      	bls.n	8008e3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008e38:	2303      	movs	r3, #3
 8008e3a:	e143      	b.n	80090c4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e3c:	4b54      	ldr	r3, [pc, #336]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008e3e:	6a1b      	ldr	r3, [r3, #32]
 8008e40:	f003 0302 	and.w	r3, r3, #2
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d0ee      	beq.n	8008e26 <HAL_RCC_OscConfig+0x37e>
 8008e48:	e014      	b.n	8008e74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e4a:	f7fc ffb1 	bl	8005db0 <HAL_GetTick>
 8008e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e50:	e00a      	b.n	8008e68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e52:	f7fc ffad 	bl	8005db0 <HAL_GetTick>
 8008e56:	4602      	mov	r2, r0
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	1ad3      	subs	r3, r2, r3
 8008e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d901      	bls.n	8008e68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008e64:	2303      	movs	r3, #3
 8008e66:	e12d      	b.n	80090c4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e68:	4b49      	ldr	r3, [pc, #292]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008e6a:	6a1b      	ldr	r3, [r3, #32]
 8008e6c:	f003 0302 	and.w	r3, r3, #2
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d1ee      	bne.n	8008e52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008e74:	7dfb      	ldrb	r3, [r7, #23]
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d105      	bne.n	8008e86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e7a:	4b45      	ldr	r3, [pc, #276]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008e7c:	69db      	ldr	r3, [r3, #28]
 8008e7e:	4a44      	ldr	r2, [pc, #272]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e84:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	f000 808c 	beq.w	8008fa8 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8008e90:	4b3f      	ldr	r3, [pc, #252]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e9c:	d10e      	bne.n	8008ebc <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8008e9e:	4b3c      	ldr	r3, [pc, #240]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8008ea6:	2b08      	cmp	r3, #8
 8008ea8:	d108      	bne.n	8008ebc <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8008eaa:	4b39      	ldr	r3, [pc, #228]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8008eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008eb6:	d101      	bne.n	8008ebc <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e103      	b.n	80090c4 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	d14e      	bne.n	8008f62 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8008ec4:	4b32      	ldr	r3, [pc, #200]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d009      	beq.n	8008ee4 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8008ed0:	4b2f      	ldr	r3, [pc, #188]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d001      	beq.n	8008ee4 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e0ef      	b.n	80090c4 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8008ee4:	4b2c      	ldr	r3, [pc, #176]	; (8008f98 <HAL_RCC_OscConfig+0x4f0>)
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008eea:	f7fc ff61 	bl	8005db0 <HAL_GetTick>
 8008eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8008ef0:	e008      	b.n	8008f04 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008ef2:	f7fc ff5d 	bl	8005db0 <HAL_GetTick>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	1ad3      	subs	r3, r2, r3
 8008efc:	2b64      	cmp	r3, #100	; 0x64
 8008efe:	d901      	bls.n	8008f04 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008f00:	2303      	movs	r3, #3
 8008f02:	e0df      	b.n	80090c4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8008f04:	4b22      	ldr	r3, [pc, #136]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1f0      	bne.n	8008ef2 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8008f10:	4b1f      	ldr	r3, [pc, #124]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f1c:	491c      	ldr	r1, [pc, #112]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8008f22:	4b1b      	ldr	r3, [pc, #108]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f26:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f2e:	4918      	ldr	r1, [pc, #96]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008f30:	4313      	orrs	r3, r2
 8008f32:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8008f34:	4b18      	ldr	r3, [pc, #96]	; (8008f98 <HAL_RCC_OscConfig+0x4f0>)
 8008f36:	2201      	movs	r2, #1
 8008f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f3a:	f7fc ff39 	bl	8005db0 <HAL_GetTick>
 8008f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8008f40:	e008      	b.n	8008f54 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008f42:	f7fc ff35 	bl	8005db0 <HAL_GetTick>
 8008f46:	4602      	mov	r2, r0
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	1ad3      	subs	r3, r2, r3
 8008f4c:	2b64      	cmp	r3, #100	; 0x64
 8008f4e:	d901      	bls.n	8008f54 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8008f50:	2303      	movs	r3, #3
 8008f52:	e0b7      	b.n	80090c4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8008f54:	4b0e      	ldr	r3, [pc, #56]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d0f0      	beq.n	8008f42 <HAL_RCC_OscConfig+0x49a>
 8008f60:	e022      	b.n	8008fa8 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8008f62:	4b0b      	ldr	r3, [pc, #44]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f66:	4a0a      	ldr	r2, [pc, #40]	; (8008f90 <HAL_RCC_OscConfig+0x4e8>)
 8008f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8008f6e:	4b0a      	ldr	r3, [pc, #40]	; (8008f98 <HAL_RCC_OscConfig+0x4f0>)
 8008f70:	2200      	movs	r2, #0
 8008f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f74:	f7fc ff1c 	bl	8005db0 <HAL_GetTick>
 8008f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8008f7a:	e00f      	b.n	8008f9c <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008f7c:	f7fc ff18 	bl	8005db0 <HAL_GetTick>
 8008f80:	4602      	mov	r2, r0
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	1ad3      	subs	r3, r2, r3
 8008f86:	2b64      	cmp	r3, #100	; 0x64
 8008f88:	d908      	bls.n	8008f9c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8008f8a:	2303      	movs	r3, #3
 8008f8c:	e09a      	b.n	80090c4 <HAL_RCC_OscConfig+0x61c>
 8008f8e:	bf00      	nop
 8008f90:	40021000 	.word	0x40021000
 8008f94:	40007000 	.word	0x40007000
 8008f98:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8008f9c:	4b4b      	ldr	r3, [pc, #300]	; (80090cc <HAL_RCC_OscConfig+0x624>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d1e9      	bne.n	8008f7c <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6a1b      	ldr	r3, [r3, #32]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f000 8088 	beq.w	80090c2 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008fb2:	4b46      	ldr	r3, [pc, #280]	; (80090cc <HAL_RCC_OscConfig+0x624>)
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	f003 030c 	and.w	r3, r3, #12
 8008fba:	2b08      	cmp	r3, #8
 8008fbc:	d068      	beq.n	8009090 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a1b      	ldr	r3, [r3, #32]
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d14d      	bne.n	8009062 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fc6:	4b42      	ldr	r3, [pc, #264]	; (80090d0 <HAL_RCC_OscConfig+0x628>)
 8008fc8:	2200      	movs	r2, #0
 8008fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fcc:	f7fc fef0 	bl	8005db0 <HAL_GetTick>
 8008fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008fd2:	e008      	b.n	8008fe6 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fd4:	f7fc feec 	bl	8005db0 <HAL_GetTick>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	1ad3      	subs	r3, r2, r3
 8008fde:	2b02      	cmp	r3, #2
 8008fe0:	d901      	bls.n	8008fe6 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8008fe2:	2303      	movs	r3, #3
 8008fe4:	e06e      	b.n	80090c4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008fe6:	4b39      	ldr	r3, [pc, #228]	; (80090cc <HAL_RCC_OscConfig+0x624>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d1f0      	bne.n	8008fd4 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ffa:	d10f      	bne.n	800901c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8008ffc:	4b33      	ldr	r3, [pc, #204]	; (80090cc <HAL_RCC_OscConfig+0x624>)
 8008ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	4931      	ldr	r1, [pc, #196]	; (80090cc <HAL_RCC_OscConfig+0x624>)
 8009006:	4313      	orrs	r3, r2
 8009008:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800900a:	4b30      	ldr	r3, [pc, #192]	; (80090cc <HAL_RCC_OscConfig+0x624>)
 800900c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800900e:	f023 020f 	bic.w	r2, r3, #15
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	492d      	ldr	r1, [pc, #180]	; (80090cc <HAL_RCC_OscConfig+0x624>)
 8009018:	4313      	orrs	r3, r2
 800901a:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800901c:	4b2b      	ldr	r3, [pc, #172]	; (80090cc <HAL_RCC_OscConfig+0x624>)
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800902c:	430b      	orrs	r3, r1
 800902e:	4927      	ldr	r1, [pc, #156]	; (80090cc <HAL_RCC_OscConfig+0x624>)
 8009030:	4313      	orrs	r3, r2
 8009032:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009034:	4b26      	ldr	r3, [pc, #152]	; (80090d0 <HAL_RCC_OscConfig+0x628>)
 8009036:	2201      	movs	r2, #1
 8009038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800903a:	f7fc feb9 	bl	8005db0 <HAL_GetTick>
 800903e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009040:	e008      	b.n	8009054 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009042:	f7fc feb5 	bl	8005db0 <HAL_GetTick>
 8009046:	4602      	mov	r2, r0
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	1ad3      	subs	r3, r2, r3
 800904c:	2b02      	cmp	r3, #2
 800904e:	d901      	bls.n	8009054 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8009050:	2303      	movs	r3, #3
 8009052:	e037      	b.n	80090c4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009054:	4b1d      	ldr	r3, [pc, #116]	; (80090cc <HAL_RCC_OscConfig+0x624>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800905c:	2b00      	cmp	r3, #0
 800905e:	d0f0      	beq.n	8009042 <HAL_RCC_OscConfig+0x59a>
 8009060:	e02f      	b.n	80090c2 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009062:	4b1b      	ldr	r3, [pc, #108]	; (80090d0 <HAL_RCC_OscConfig+0x628>)
 8009064:	2200      	movs	r2, #0
 8009066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009068:	f7fc fea2 	bl	8005db0 <HAL_GetTick>
 800906c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800906e:	e008      	b.n	8009082 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009070:	f7fc fe9e 	bl	8005db0 <HAL_GetTick>
 8009074:	4602      	mov	r2, r0
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	1ad3      	subs	r3, r2, r3
 800907a:	2b02      	cmp	r3, #2
 800907c:	d901      	bls.n	8009082 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800907e:	2303      	movs	r3, #3
 8009080:	e020      	b.n	80090c4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009082:	4b12      	ldr	r3, [pc, #72]	; (80090cc <HAL_RCC_OscConfig+0x624>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800908a:	2b00      	cmp	r3, #0
 800908c:	d1f0      	bne.n	8009070 <HAL_RCC_OscConfig+0x5c8>
 800908e:	e018      	b.n	80090c2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6a1b      	ldr	r3, [r3, #32]
 8009094:	2b01      	cmp	r3, #1
 8009096:	d101      	bne.n	800909c <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8009098:	2301      	movs	r3, #1
 800909a:	e013      	b.n	80090c4 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800909c:	4b0b      	ldr	r3, [pc, #44]	; (80090cc <HAL_RCC_OscConfig+0x624>)
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d106      	bne.n	80090be <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d001      	beq.n	80090c2 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80090be:	2301      	movs	r3, #1
 80090c0:	e000      	b.n	80090c4 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3718      	adds	r7, #24
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	40021000 	.word	0x40021000
 80090d0:	42420060 	.word	0x42420060

080090d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d101      	bne.n	80090e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80090e4:	2301      	movs	r3, #1
 80090e6:	e0d0      	b.n	800928a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80090e8:	4b6a      	ldr	r3, [pc, #424]	; (8009294 <HAL_RCC_ClockConfig+0x1c0>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f003 0307 	and.w	r3, r3, #7
 80090f0:	683a      	ldr	r2, [r7, #0]
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d910      	bls.n	8009118 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090f6:	4b67      	ldr	r3, [pc, #412]	; (8009294 <HAL_RCC_ClockConfig+0x1c0>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f023 0207 	bic.w	r2, r3, #7
 80090fe:	4965      	ldr	r1, [pc, #404]	; (8009294 <HAL_RCC_ClockConfig+0x1c0>)
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	4313      	orrs	r3, r2
 8009104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009106:	4b63      	ldr	r3, [pc, #396]	; (8009294 <HAL_RCC_ClockConfig+0x1c0>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f003 0307 	and.w	r3, r3, #7
 800910e:	683a      	ldr	r2, [r7, #0]
 8009110:	429a      	cmp	r2, r3
 8009112:	d001      	beq.n	8009118 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8009114:	2301      	movs	r3, #1
 8009116:	e0b8      	b.n	800928a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f003 0302 	and.w	r3, r3, #2
 8009120:	2b00      	cmp	r3, #0
 8009122:	d020      	beq.n	8009166 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f003 0304 	and.w	r3, r3, #4
 800912c:	2b00      	cmp	r3, #0
 800912e:	d005      	beq.n	800913c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009130:	4b59      	ldr	r3, [pc, #356]	; (8009298 <HAL_RCC_ClockConfig+0x1c4>)
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	4a58      	ldr	r2, [pc, #352]	; (8009298 <HAL_RCC_ClockConfig+0x1c4>)
 8009136:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800913a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 0308 	and.w	r3, r3, #8
 8009144:	2b00      	cmp	r3, #0
 8009146:	d005      	beq.n	8009154 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009148:	4b53      	ldr	r3, [pc, #332]	; (8009298 <HAL_RCC_ClockConfig+0x1c4>)
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	4a52      	ldr	r2, [pc, #328]	; (8009298 <HAL_RCC_ClockConfig+0x1c4>)
 800914e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8009152:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009154:	4b50      	ldr	r3, [pc, #320]	; (8009298 <HAL_RCC_ClockConfig+0x1c4>)
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	494d      	ldr	r1, [pc, #308]	; (8009298 <HAL_RCC_ClockConfig+0x1c4>)
 8009162:	4313      	orrs	r3, r2
 8009164:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f003 0301 	and.w	r3, r3, #1
 800916e:	2b00      	cmp	r3, #0
 8009170:	d040      	beq.n	80091f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	2b01      	cmp	r3, #1
 8009178:	d107      	bne.n	800918a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800917a:	4b47      	ldr	r3, [pc, #284]	; (8009298 <HAL_RCC_ClockConfig+0x1c4>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009182:	2b00      	cmp	r3, #0
 8009184:	d115      	bne.n	80091b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	e07f      	b.n	800928a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	2b02      	cmp	r3, #2
 8009190:	d107      	bne.n	80091a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009192:	4b41      	ldr	r3, [pc, #260]	; (8009298 <HAL_RCC_ClockConfig+0x1c4>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800919a:	2b00      	cmp	r3, #0
 800919c:	d109      	bne.n	80091b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	e073      	b.n	800928a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091a2:	4b3d      	ldr	r3, [pc, #244]	; (8009298 <HAL_RCC_ClockConfig+0x1c4>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f003 0302 	and.w	r3, r3, #2
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d101      	bne.n	80091b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091ae:	2301      	movs	r3, #1
 80091b0:	e06b      	b.n	800928a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80091b2:	4b39      	ldr	r3, [pc, #228]	; (8009298 <HAL_RCC_ClockConfig+0x1c4>)
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	f023 0203 	bic.w	r2, r3, #3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	4936      	ldr	r1, [pc, #216]	; (8009298 <HAL_RCC_ClockConfig+0x1c4>)
 80091c0:	4313      	orrs	r3, r2
 80091c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80091c4:	f7fc fdf4 	bl	8005db0 <HAL_GetTick>
 80091c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091ca:	e00a      	b.n	80091e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091cc:	f7fc fdf0 	bl	8005db0 <HAL_GetTick>
 80091d0:	4602      	mov	r2, r0
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	1ad3      	subs	r3, r2, r3
 80091d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80091da:	4293      	cmp	r3, r2
 80091dc:	d901      	bls.n	80091e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80091de:	2303      	movs	r3, #3
 80091e0:	e053      	b.n	800928a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091e2:	4b2d      	ldr	r3, [pc, #180]	; (8009298 <HAL_RCC_ClockConfig+0x1c4>)
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	f003 020c 	and.w	r2, r3, #12
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d1eb      	bne.n	80091cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80091f4:	4b27      	ldr	r3, [pc, #156]	; (8009294 <HAL_RCC_ClockConfig+0x1c0>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f003 0307 	and.w	r3, r3, #7
 80091fc:	683a      	ldr	r2, [r7, #0]
 80091fe:	429a      	cmp	r2, r3
 8009200:	d210      	bcs.n	8009224 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009202:	4b24      	ldr	r3, [pc, #144]	; (8009294 <HAL_RCC_ClockConfig+0x1c0>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f023 0207 	bic.w	r2, r3, #7
 800920a:	4922      	ldr	r1, [pc, #136]	; (8009294 <HAL_RCC_ClockConfig+0x1c0>)
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	4313      	orrs	r3, r2
 8009210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009212:	4b20      	ldr	r3, [pc, #128]	; (8009294 <HAL_RCC_ClockConfig+0x1c0>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f003 0307 	and.w	r3, r3, #7
 800921a:	683a      	ldr	r2, [r7, #0]
 800921c:	429a      	cmp	r2, r3
 800921e:	d001      	beq.n	8009224 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	e032      	b.n	800928a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f003 0304 	and.w	r3, r3, #4
 800922c:	2b00      	cmp	r3, #0
 800922e:	d008      	beq.n	8009242 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009230:	4b19      	ldr	r3, [pc, #100]	; (8009298 <HAL_RCC_ClockConfig+0x1c4>)
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	4916      	ldr	r1, [pc, #88]	; (8009298 <HAL_RCC_ClockConfig+0x1c4>)
 800923e:	4313      	orrs	r3, r2
 8009240:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f003 0308 	and.w	r3, r3, #8
 800924a:	2b00      	cmp	r3, #0
 800924c:	d009      	beq.n	8009262 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800924e:	4b12      	ldr	r3, [pc, #72]	; (8009298 <HAL_RCC_ClockConfig+0x1c4>)
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	00db      	lsls	r3, r3, #3
 800925c:	490e      	ldr	r1, [pc, #56]	; (8009298 <HAL_RCC_ClockConfig+0x1c4>)
 800925e:	4313      	orrs	r3, r2
 8009260:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009262:	f000 f821 	bl	80092a8 <HAL_RCC_GetSysClockFreq>
 8009266:	4602      	mov	r2, r0
 8009268:	4b0b      	ldr	r3, [pc, #44]	; (8009298 <HAL_RCC_ClockConfig+0x1c4>)
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	091b      	lsrs	r3, r3, #4
 800926e:	f003 030f 	and.w	r3, r3, #15
 8009272:	490a      	ldr	r1, [pc, #40]	; (800929c <HAL_RCC_ClockConfig+0x1c8>)
 8009274:	5ccb      	ldrb	r3, [r1, r3]
 8009276:	fa22 f303 	lsr.w	r3, r2, r3
 800927a:	4a09      	ldr	r2, [pc, #36]	; (80092a0 <HAL_RCC_ClockConfig+0x1cc>)
 800927c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800927e:	4b09      	ldr	r3, [pc, #36]	; (80092a4 <HAL_RCC_ClockConfig+0x1d0>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4618      	mov	r0, r3
 8009284:	f7fc f83c 	bl	8005300 <HAL_InitTick>

  return HAL_OK;
 8009288:	2300      	movs	r3, #0
}
 800928a:	4618      	mov	r0, r3
 800928c:	3710      	adds	r7, #16
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	40022000 	.word	0x40022000
 8009298:	40021000 	.word	0x40021000
 800929c:	080142bc 	.word	0x080142bc
 80092a0:	20000054 	.word	0x20000054
 80092a4:	20000058 	.word	0x20000058

080092a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80092ac:	b091      	sub	sp, #68	; 0x44
 80092ae:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80092b0:	4b6a      	ldr	r3, [pc, #424]	; (800945c <HAL_RCC_GetSysClockFreq+0x1b4>)
 80092b2:	f107 0414 	add.w	r4, r7, #20
 80092b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80092b8:	c407      	stmia	r4!, {r0, r1, r2}
 80092ba:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80092bc:	4b68      	ldr	r3, [pc, #416]	; (8009460 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80092be:	1d3c      	adds	r4, r7, #4
 80092c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80092c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80092c6:	2300      	movs	r3, #0
 80092c8:	637b      	str	r3, [r7, #52]	; 0x34
 80092ca:	2300      	movs	r3, #0
 80092cc:	633b      	str	r3, [r7, #48]	; 0x30
 80092ce:	2300      	movs	r3, #0
 80092d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092d2:	2300      	movs	r3, #0
 80092d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 80092d6:	2300      	movs	r3, #0
 80092d8:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80092da:	2300      	movs	r3, #0
 80092dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80092de:	2300      	movs	r3, #0
 80092e0:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80092e2:	4b60      	ldr	r3, [pc, #384]	; (8009464 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80092e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ea:	f003 030c 	and.w	r3, r3, #12
 80092ee:	2b04      	cmp	r3, #4
 80092f0:	d002      	beq.n	80092f8 <HAL_RCC_GetSysClockFreq+0x50>
 80092f2:	2b08      	cmp	r3, #8
 80092f4:	d003      	beq.n	80092fe <HAL_RCC_GetSysClockFreq+0x56>
 80092f6:	e0a8      	b.n	800944a <HAL_RCC_GetSysClockFreq+0x1a2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80092f8:	4b5b      	ldr	r3, [pc, #364]	; (8009468 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80092fa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80092fc:	e0a8      	b.n	8009450 <HAL_RCC_GetSysClockFreq+0x1a8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80092fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009300:	0c9b      	lsrs	r3, r3, #18
 8009302:	f003 030f 	and.w	r3, r3, #15
 8009306:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800930a:	4413      	add	r3, r2
 800930c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8009310:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009318:	2b00      	cmp	r3, #0
 800931a:	f000 808e 	beq.w	800943a <HAL_RCC_GetSysClockFreq+0x192>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800931e:	4b51      	ldr	r3, [pc, #324]	; (8009464 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009322:	f003 030f 	and.w	r3, r3, #15
 8009326:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800932a:	4413      	add	r3, r2
 800932c:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8009330:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8009332:	4b4c      	ldr	r3, [pc, #304]	; (8009464 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800933a:	2b00      	cmp	r3, #0
 800933c:	d06b      	beq.n	8009416 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800933e:	4b49      	ldr	r3, [pc, #292]	; (8009464 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009342:	091b      	lsrs	r3, r3, #4
 8009344:	f003 030f 	and.w	r3, r3, #15
 8009348:	3301      	adds	r3, #1
 800934a:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 800934c:	4b45      	ldr	r3, [pc, #276]	; (8009464 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800934e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009350:	0a1b      	lsrs	r3, r3, #8
 8009352:	f003 030f 	and.w	r3, r3, #15
 8009356:	3302      	adds	r3, #2
 8009358:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800935a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935c:	4618      	mov	r0, r3
 800935e:	f04f 0100 	mov.w	r1, #0
 8009362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009364:	461a      	mov	r2, r3
 8009366:	f04f 0300 	mov.w	r3, #0
 800936a:	fb02 f501 	mul.w	r5, r2, r1
 800936e:	fb00 f403 	mul.w	r4, r0, r3
 8009372:	192e      	adds	r6, r5, r4
 8009374:	fba0 4502 	umull	r4, r5, r0, r2
 8009378:	1973      	adds	r3, r6, r5
 800937a:	461d      	mov	r5, r3
 800937c:	4620      	mov	r0, r4
 800937e:	4629      	mov	r1, r5
 8009380:	f04f 0200 	mov.w	r2, #0
 8009384:	f04f 0300 	mov.w	r3, #0
 8009388:	014b      	lsls	r3, r1, #5
 800938a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800938e:	0142      	lsls	r2, r0, #5
 8009390:	4610      	mov	r0, r2
 8009392:	4619      	mov	r1, r3
 8009394:	1b00      	subs	r0, r0, r4
 8009396:	eb61 0105 	sbc.w	r1, r1, r5
 800939a:	f04f 0200 	mov.w	r2, #0
 800939e:	f04f 0300 	mov.w	r3, #0
 80093a2:	018b      	lsls	r3, r1, #6
 80093a4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80093a8:	0182      	lsls	r2, r0, #6
 80093aa:	1a12      	subs	r2, r2, r0
 80093ac:	eb63 0301 	sbc.w	r3, r3, r1
 80093b0:	f04f 0000 	mov.w	r0, #0
 80093b4:	f04f 0100 	mov.w	r1, #0
 80093b8:	00d9      	lsls	r1, r3, #3
 80093ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80093be:	00d0      	lsls	r0, r2, #3
 80093c0:	4602      	mov	r2, r0
 80093c2:	460b      	mov	r3, r1
 80093c4:	1912      	adds	r2, r2, r4
 80093c6:	eb45 0303 	adc.w	r3, r5, r3
 80093ca:	f04f 0000 	mov.w	r0, #0
 80093ce:	f04f 0100 	mov.w	r1, #0
 80093d2:	0259      	lsls	r1, r3, #9
 80093d4:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80093d8:	0250      	lsls	r0, r2, #9
 80093da:	4602      	mov	r2, r0
 80093dc:	460b      	mov	r3, r1
 80093de:	4690      	mov	r8, r2
 80093e0:	4699      	mov	r9, r3
 80093e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e4:	4618      	mov	r0, r3
 80093e6:	f04f 0100 	mov.w	r1, #0
 80093ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ec:	461a      	mov	r2, r3
 80093ee:	f04f 0300 	mov.w	r3, #0
 80093f2:	fb02 f501 	mul.w	r5, r2, r1
 80093f6:	fb00 f403 	mul.w	r4, r0, r3
 80093fa:	442c      	add	r4, r5
 80093fc:	fba0 2302 	umull	r2, r3, r0, r2
 8009400:	18e1      	adds	r1, r4, r3
 8009402:	460b      	mov	r3, r1
 8009404:	4640      	mov	r0, r8
 8009406:	4649      	mov	r1, r9
 8009408:	f7f7 ff22 	bl	8001250 <__aeabi_uldivmod>
 800940c:	4602      	mov	r2, r0
 800940e:	460b      	mov	r3, r1
 8009410:	4613      	mov	r3, r2
 8009412:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009414:	e007      	b.n	8009426 <HAL_RCC_GetSysClockFreq+0x17e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8009416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009418:	4a13      	ldr	r2, [pc, #76]	; (8009468 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800941a:	fb02 f203 	mul.w	r2, r2, r3
 800941e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009420:	fbb2 f3f3 	udiv	r3, r2, r3
 8009424:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8009426:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800942a:	461a      	mov	r2, r3
 800942c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942e:	4293      	cmp	r3, r2
 8009430:	d108      	bne.n	8009444 <HAL_RCC_GetSysClockFreq+0x19c>
        {
          pllclk = pllclk / 2;
 8009432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009434:	085b      	lsrs	r3, r3, #1
 8009436:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009438:	e004      	b.n	8009444 <HAL_RCC_GetSysClockFreq+0x19c>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800943a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800943c:	4a0b      	ldr	r2, [pc, #44]	; (800946c <HAL_RCC_GetSysClockFreq+0x1c4>)
 800943e:	fb02 f303 	mul.w	r3, r2, r3
 8009442:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8009444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009446:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009448:	e002      	b.n	8009450 <HAL_RCC_GetSysClockFreq+0x1a8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800944a:	4b07      	ldr	r3, [pc, #28]	; (8009468 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800944c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800944e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8009452:	4618      	mov	r0, r3
 8009454:	3744      	adds	r7, #68	; 0x44
 8009456:	46bd      	mov	sp, r7
 8009458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800945c:	08013604 	.word	0x08013604
 8009460:	08013614 	.word	0x08013614
 8009464:	40021000 	.word	0x40021000
 8009468:	007a1200 	.word	0x007a1200
 800946c:	003d0900 	.word	0x003d0900

08009470 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009470:	b480      	push	{r7}
 8009472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009474:	4b02      	ldr	r3, [pc, #8]	; (8009480 <HAL_RCC_GetHCLKFreq+0x10>)
 8009476:	681b      	ldr	r3, [r3, #0]
}
 8009478:	4618      	mov	r0, r3
 800947a:	46bd      	mov	sp, r7
 800947c:	bc80      	pop	{r7}
 800947e:	4770      	bx	lr
 8009480:	20000054 	.word	0x20000054

08009484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009488:	f7ff fff2 	bl	8009470 <HAL_RCC_GetHCLKFreq>
 800948c:	4602      	mov	r2, r0
 800948e:	4b05      	ldr	r3, [pc, #20]	; (80094a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	0a1b      	lsrs	r3, r3, #8
 8009494:	f003 0307 	and.w	r3, r3, #7
 8009498:	4903      	ldr	r1, [pc, #12]	; (80094a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800949a:	5ccb      	ldrb	r3, [r1, r3]
 800949c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	bd80      	pop	{r7, pc}
 80094a4:	40021000 	.word	0x40021000
 80094a8:	080142cc 	.word	0x080142cc

080094ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80094b0:	f7ff ffde 	bl	8009470 <HAL_RCC_GetHCLKFreq>
 80094b4:	4602      	mov	r2, r0
 80094b6:	4b05      	ldr	r3, [pc, #20]	; (80094cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	0adb      	lsrs	r3, r3, #11
 80094bc:	f003 0307 	and.w	r3, r3, #7
 80094c0:	4903      	ldr	r1, [pc, #12]	; (80094d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80094c2:	5ccb      	ldrb	r3, [r1, r3]
 80094c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	40021000 	.word	0x40021000
 80094d0:	080142cc 	.word	0x080142cc

080094d4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	220f      	movs	r2, #15
 80094e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80094e4:	4b11      	ldr	r3, [pc, #68]	; (800952c <HAL_RCC_GetClockConfig+0x58>)
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	f003 0203 	and.w	r2, r3, #3
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80094f0:	4b0e      	ldr	r3, [pc, #56]	; (800952c <HAL_RCC_GetClockConfig+0x58>)
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80094fc:	4b0b      	ldr	r3, [pc, #44]	; (800952c <HAL_RCC_GetClockConfig+0x58>)
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009508:	4b08      	ldr	r3, [pc, #32]	; (800952c <HAL_RCC_GetClockConfig+0x58>)
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	08db      	lsrs	r3, r3, #3
 800950e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009516:	4b06      	ldr	r3, [pc, #24]	; (8009530 <HAL_RCC_GetClockConfig+0x5c>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f003 0207 	and.w	r2, r3, #7
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8009522:	bf00      	nop
 8009524:	370c      	adds	r7, #12
 8009526:	46bd      	mov	sp, r7
 8009528:	bc80      	pop	{r7}
 800952a:	4770      	bx	lr
 800952c:	40021000 	.word	0x40021000
 8009530:	40022000 	.word	0x40022000

08009534 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800953c:	4b0a      	ldr	r3, [pc, #40]	; (8009568 <RCC_Delay+0x34>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a0a      	ldr	r2, [pc, #40]	; (800956c <RCC_Delay+0x38>)
 8009542:	fba2 2303 	umull	r2, r3, r2, r3
 8009546:	0a5b      	lsrs	r3, r3, #9
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	fb02 f303 	mul.w	r3, r2, r3
 800954e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009550:	bf00      	nop
  }
  while (Delay --);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	1e5a      	subs	r2, r3, #1
 8009556:	60fa      	str	r2, [r7, #12]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d1f9      	bne.n	8009550 <RCC_Delay+0x1c>
}
 800955c:	bf00      	nop
 800955e:	bf00      	nop
 8009560:	3714      	adds	r7, #20
 8009562:	46bd      	mov	sp, r7
 8009564:	bc80      	pop	{r7}
 8009566:	4770      	bx	lr
 8009568:	20000054 	.word	0x20000054
 800956c:	10624dd3 	.word	0x10624dd3

08009570 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b088      	sub	sp, #32
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8009578:	2300      	movs	r3, #0
 800957a:	617b      	str	r3, [r7, #20]
 800957c:	2300      	movs	r3, #0
 800957e:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8009580:	2300      	movs	r3, #0
 8009582:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f003 0301 	and.w	r3, r3, #1
 800958c:	2b00      	cmp	r3, #0
 800958e:	d07d      	beq.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8009590:	2300      	movs	r3, #0
 8009592:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009594:	4b8b      	ldr	r3, [pc, #556]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009596:	69db      	ldr	r3, [r3, #28]
 8009598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800959c:	2b00      	cmp	r3, #0
 800959e:	d10d      	bne.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80095a0:	4b88      	ldr	r3, [pc, #544]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80095a2:	69db      	ldr	r3, [r3, #28]
 80095a4:	4a87      	ldr	r2, [pc, #540]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80095a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095aa:	61d3      	str	r3, [r2, #28]
 80095ac:	4b85      	ldr	r3, [pc, #532]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80095ae:	69db      	ldr	r3, [r3, #28]
 80095b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095b4:	60fb      	str	r3, [r7, #12]
 80095b6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80095b8:	2301      	movs	r3, #1
 80095ba:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80095bc:	4b82      	ldr	r3, [pc, #520]	; (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d118      	bne.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80095c8:	4b7f      	ldr	r3, [pc, #508]	; (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a7e      	ldr	r2, [pc, #504]	; (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80095ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80095d4:	f7fc fbec 	bl	8005db0 <HAL_GetTick>
 80095d8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80095da:	e008      	b.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80095dc:	f7fc fbe8 	bl	8005db0 <HAL_GetTick>
 80095e0:	4602      	mov	r2, r0
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	1ad3      	subs	r3, r2, r3
 80095e6:	2b64      	cmp	r3, #100	; 0x64
 80095e8:	d901      	bls.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 80095ea:	2303      	movs	r3, #3
 80095ec:	e0e5      	b.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80095ee:	4b76      	ldr	r3, [pc, #472]	; (80097c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d0f0      	beq.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80095fa:	4b72      	ldr	r3, [pc, #456]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80095fc:	6a1b      	ldr	r3, [r3, #32]
 80095fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009602:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d02e      	beq.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009612:	693a      	ldr	r2, [r7, #16]
 8009614:	429a      	cmp	r2, r3
 8009616:	d027      	beq.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009618:	4b6a      	ldr	r3, [pc, #424]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800961a:	6a1b      	ldr	r3, [r3, #32]
 800961c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009620:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009622:	4b6a      	ldr	r3, [pc, #424]	; (80097cc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8009624:	2201      	movs	r2, #1
 8009626:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009628:	4b68      	ldr	r3, [pc, #416]	; (80097cc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800962a:	2200      	movs	r2, #0
 800962c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800962e:	4a65      	ldr	r2, [pc, #404]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	f003 0301 	and.w	r3, r3, #1
 800963a:	2b00      	cmp	r3, #0
 800963c:	d014      	beq.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800963e:	f7fc fbb7 	bl	8005db0 <HAL_GetTick>
 8009642:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009644:	e00a      	b.n	800965c <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009646:	f7fc fbb3 	bl	8005db0 <HAL_GetTick>
 800964a:	4602      	mov	r2, r0
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	1ad3      	subs	r3, r2, r3
 8009650:	f241 3288 	movw	r2, #5000	; 0x1388
 8009654:	4293      	cmp	r3, r2
 8009656:	d901      	bls.n	800965c <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8009658:	2303      	movs	r3, #3
 800965a:	e0ae      	b.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800965c:	4b59      	ldr	r3, [pc, #356]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800965e:	6a1b      	ldr	r3, [r3, #32]
 8009660:	f003 0302 	and.w	r3, r3, #2
 8009664:	2b00      	cmp	r3, #0
 8009666:	d0ee      	beq.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009668:	4b56      	ldr	r3, [pc, #344]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800966a:	6a1b      	ldr	r3, [r3, #32]
 800966c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	4953      	ldr	r1, [pc, #332]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009676:	4313      	orrs	r3, r2
 8009678:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800967a:	7efb      	ldrb	r3, [r7, #27]
 800967c:	2b01      	cmp	r3, #1
 800967e:	d105      	bne.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009680:	4b50      	ldr	r3, [pc, #320]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009682:	69db      	ldr	r3, [r3, #28]
 8009684:	4a4f      	ldr	r2, [pc, #316]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009686:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800968a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f003 0302 	and.w	r3, r3, #2
 8009694:	2b00      	cmp	r3, #0
 8009696:	d008      	beq.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009698:	4b4a      	ldr	r3, [pc, #296]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	4947      	ldr	r1, [pc, #284]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80096a6:	4313      	orrs	r3, r2
 80096a8:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f003 0304 	and.w	r3, r3, #4
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d008      	beq.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80096b6:	4b43      	ldr	r3, [pc, #268]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80096b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	68db      	ldr	r3, [r3, #12]
 80096c2:	4940      	ldr	r1, [pc, #256]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80096c4:	4313      	orrs	r3, r2
 80096c6:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f003 0308 	and.w	r3, r3, #8
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d008      	beq.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 80096d4:	4b3b      	ldr	r3, [pc, #236]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80096d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	691b      	ldr	r3, [r3, #16]
 80096e0:	4938      	ldr	r1, [pc, #224]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80096e2:	4313      	orrs	r3, r2
 80096e4:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 80096e6:	4b37      	ldr	r3, [pc, #220]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80096e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d105      	bne.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x18e>
 80096f2:	4b34      	ldr	r3, [pc, #208]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80096f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d001      	beq.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 80096fe:	2301      	movs	r3, #1
 8009700:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8009702:	69fb      	ldr	r3, [r7, #28]
 8009704:	2b01      	cmp	r3, #1
 8009706:	d148      	bne.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8009708:	4b2e      	ldr	r3, [pc, #184]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009710:	2b00      	cmp	r3, #0
 8009712:	d138      	bne.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8009714:	4b2b      	ldr	r3, [pc, #172]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800971c:	2b00      	cmp	r3, #0
 800971e:	d009      	beq.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8009720:	4b28      	ldr	r3, [pc, #160]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009724:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 800972c:	429a      	cmp	r2, r3
 800972e:	d001      	beq.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8009730:	2301      	movs	r3, #1
 8009732:	e042      	b.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8009734:	4b23      	ldr	r3, [pc, #140]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	699b      	ldr	r3, [r3, #24]
 8009740:	4920      	ldr	r1, [pc, #128]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009742:	4313      	orrs	r3, r2
 8009744:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8009746:	4b1f      	ldr	r3, [pc, #124]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800974a:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	695b      	ldr	r3, [r3, #20]
 8009752:	491c      	ldr	r1, [pc, #112]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009754:	4313      	orrs	r3, r2
 8009756:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8009758:	4b1d      	ldr	r3, [pc, #116]	; (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800975a:	2201      	movs	r2, #1
 800975c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800975e:	f7fc fb27 	bl	8005db0 <HAL_GetTick>
 8009762:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009764:	e008      	b.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009766:	f7fc fb23 	bl	8005db0 <HAL_GetTick>
 800976a:	4602      	mov	r2, r0
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	1ad3      	subs	r3, r2, r3
 8009770:	2b64      	cmp	r3, #100	; 0x64
 8009772:	d901      	bls.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8009774:	2303      	movs	r3, #3
 8009776:	e020      	b.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009778:	4b12      	ldr	r3, [pc, #72]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009780:	2b00      	cmp	r3, #0
 8009782:	d0f0      	beq.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8009784:	e009      	b.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8009786:	4b0f      	ldr	r3, [pc, #60]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800978a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	695b      	ldr	r3, [r3, #20]
 8009792:	429a      	cmp	r2, r3
 8009794:	d001      	beq.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	e00f      	b.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f003 0310 	and.w	r3, r3, #16
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d008      	beq.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80097a6:	4b07      	ldr	r3, [pc, #28]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	69db      	ldr	r3, [r3, #28]
 80097b2:	4904      	ldr	r1, [pc, #16]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80097b4:	4313      	orrs	r3, r2
 80097b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3720      	adds	r7, #32
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	bf00      	nop
 80097c4:	40021000 	.word	0x40021000
 80097c8:	40007000 	.word	0x40007000
 80097cc:	42420440 	.word	0x42420440
 80097d0:	42420070 	.word	0x42420070

080097d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80097d4:	b590      	push	{r4, r7, lr}
 80097d6:	b093      	sub	sp, #76	; 0x4c
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80097dc:	4ba9      	ldr	r3, [pc, #676]	; (8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 80097de:	f107 0418 	add.w	r4, r7, #24
 80097e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80097e4:	c407      	stmia	r4!, {r0, r1, r2}
 80097e6:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80097e8:	4ba7      	ldr	r3, [pc, #668]	; (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80097ea:	f107 0408 	add.w	r4, r7, #8
 80097ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80097f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80097f4:	2300      	movs	r3, #0
 80097f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097f8:	2300      	movs	r3, #0
 80097fa:	647b      	str	r3, [r7, #68]	; 0x44
 80097fc:	2300      	movs	r3, #0
 80097fe:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
 8009800:	2300      	movs	r3, #0
 8009802:	637b      	str	r3, [r7, #52]	; 0x34
 8009804:	2300      	movs	r3, #0
 8009806:	633b      	str	r3, [r7, #48]	; 0x30
 8009808:	2300      	movs	r3, #0
 800980a:	62fb      	str	r3, [r7, #44]	; 0x2c
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[2] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800980c:	2300      	movs	r3, #0
 800980e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009810:	2300      	movs	r3, #0
 8009812:	643b      	str	r3, [r7, #64]	; 0x40
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	3b01      	subs	r3, #1
 8009818:	2b0f      	cmp	r3, #15
 800981a:	f200 8124 	bhi.w	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 800981e:	a201      	add	r2, pc, #4	; (adr r2, 8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8009820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009824:	080099e5 	.word	0x080099e5
 8009828:	08009a4b 	.word	0x08009a4b
 800982c:	08009a67 	.word	0x08009a67
 8009830:	08009943 	.word	0x08009943
 8009834:	08009a67 	.word	0x08009a67
 8009838:	08009a67 	.word	0x08009a67
 800983c:	08009a67 	.word	0x08009a67
 8009840:	08009995 	.word	0x08009995
 8009844:	08009a67 	.word	0x08009a67
 8009848:	08009a67 	.word	0x08009a67
 800984c:	08009a67 	.word	0x08009a67
 8009850:	08009a67 	.word	0x08009a67
 8009854:	08009a67 	.word	0x08009a67
 8009858:	08009a67 	.word	0x08009a67
 800985c:	08009a67 	.word	0x08009a67
 8009860:	08009865 	.word	0x08009865
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8009864:	4b89      	ldr	r3, [pc, #548]	; (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800986a:	4b88      	ldr	r3, [pc, #544]	; (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009872:	2b00      	cmp	r3, #0
 8009874:	f000 80f9 	beq.w	8009a6a <HAL_RCCEx_GetPeriphCLKFreq+0x296>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987a:	0c9b      	lsrs	r3, r3, #18
 800987c:	f003 030f 	and.w	r3, r3, #15
 8009880:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009884:	4413      	add	r3, r2
 8009886:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800988a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800988c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800988e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009892:	2b00      	cmp	r3, #0
 8009894:	d03e      	beq.n	8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8009896:	4b7d      	ldr	r3, [pc, #500]	; (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800989a:	f003 030f 	and.w	r3, r3, #15
 800989e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80098a2:	4413      	add	r3, r2
 80098a4:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 80098a8:	63fb      	str	r3, [r7, #60]	; 0x3c
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80098aa:	4b78      	ldr	r3, [pc, #480]	; (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80098ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d01c      	beq.n	80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80098b6:	4b75      	ldr	r3, [pc, #468]	; (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80098b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ba:	091b      	lsrs	r3, r3, #4
 80098bc:	f003 030f 	and.w	r3, r3, #15
 80098c0:	3301      	adds	r3, #1
 80098c2:	62fb      	str	r3, [r7, #44]	; 0x2c
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80098c4:	4b71      	ldr	r3, [pc, #452]	; (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80098c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c8:	0a1b      	lsrs	r3, r3, #8
 80098ca:	f003 030f 	and.w	r3, r3, #15
 80098ce:	3302      	adds	r3, #2
 80098d0:	637b      	str	r3, [r7, #52]	; 0x34
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 80098d2:	4a6f      	ldr	r2, [pc, #444]	; (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80098d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80098da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098dc:	fb02 f203 	mul.w	r2, r2, r3
 80098e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80098e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e8:	fb02 f303 	mul.w	r3, r2, r3
 80098ec:	647b      	str	r3, [r7, #68]	; 0x44
 80098ee:	e007      	b.n	8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80098f0:	4a67      	ldr	r2, [pc, #412]	; (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80098f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80098f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098fa:	fb02 f303 	mul.w	r3, r2, r3
 80098fe:	647b      	str	r3, [r7, #68]	; 0x44
          }

          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8009900:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009904:	461a      	mov	r2, r3
 8009906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009908:	4293      	cmp	r3, r2
 800990a:	d108      	bne.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
          {
            pllclk = pllclk / 2;
 800990c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800990e:	085b      	lsrs	r3, r3, #1
 8009910:	647b      	str	r3, [r7, #68]	; 0x44
 8009912:	e004      	b.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009916:	4a5f      	ldr	r2, [pc, #380]	; (8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009918:	fb02 f303 	mul.w	r3, r2, r3
 800991c:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 800991e:	4b5b      	ldr	r3, [pc, #364]	; (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009926:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800992a:	d102      	bne.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        {
          /* Prescaler of 2 selected for USB */
          frequency = pllclk;
 800992c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800992e:	643b      	str	r3, [r7, #64]	; 0x40
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8009930:	e09b      	b.n	8009a6a <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          frequency = (2 * pllclk) / 3;
 8009932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009934:	005b      	lsls	r3, r3, #1
 8009936:	4a58      	ldr	r2, [pc, #352]	; (8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8009938:	fba2 2303 	umull	r2, r3, r2, r3
 800993c:	085b      	lsrs	r3, r3, #1
 800993e:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8009940:	e093      	b.n	8009a6a <HAL_RCCEx_GetPeriphCLKFreq+0x296>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 8009942:	4b52      	ldr	r3, [pc, #328]	; (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800994a:	2b00      	cmp	r3, #0
 800994c:	d103      	bne.n	8009956 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        /* SYSCLK used as source clock for I2S2 */
        frequency = HAL_RCC_GetSysClockFreq();
 800994e:	f7ff fcab 	bl	80092a8 <HAL_RCC_GetSysClockFreq>
 8009952:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8009954:	e08b      	b.n	8009a6e <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8009956:	4b4d      	ldr	r3, [pc, #308]	; (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800995e:	2b00      	cmp	r3, #0
 8009960:	f000 8085 	beq.w	8009a6e <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8009964:	4b49      	ldr	r3, [pc, #292]	; (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009968:	091b      	lsrs	r3, r3, #4
 800996a:	f003 030f 	and.w	r3, r3, #15
 800996e:	3301      	adds	r3, #1
 8009970:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8009972:	4b46      	ldr	r3, [pc, #280]	; (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009976:	0b1b      	lsrs	r3, r3, #12
 8009978:	f003 030f 	and.w	r3, r3, #15
 800997c:	3302      	adds	r3, #2
 800997e:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8009980:	4a43      	ldr	r2, [pc, #268]	; (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009984:	fbb2 f3f3 	udiv	r3, r2, r3
 8009988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800998a:	fb02 f303 	mul.w	r3, r2, r3
 800998e:	005b      	lsls	r3, r3, #1
 8009990:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8009992:	e06c      	b.n	8009a6e <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 8009994:	4b3d      	ldr	r3, [pc, #244]	; (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009998:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800999c:	2b00      	cmp	r3, #0
 800999e:	d103      	bne.n	80099a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
      {
        /* SYSCLK used as source clock for I2S3 */
        frequency = HAL_RCC_GetSysClockFreq();
 80099a0:	f7ff fc82 	bl	80092a8 <HAL_RCC_GetSysClockFreq>
 80099a4:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80099a6:	e064      	b.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 80099a8:	4b38      	ldr	r3, [pc, #224]	; (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d05e      	beq.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80099b4:	4b35      	ldr	r3, [pc, #212]	; (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80099b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b8:	091b      	lsrs	r3, r3, #4
 80099ba:	f003 030f 	and.w	r3, r3, #15
 80099be:	3301      	adds	r3, #1
 80099c0:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 80099c2:	4b32      	ldr	r3, [pc, #200]	; (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80099c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c6:	0b1b      	lsrs	r3, r3, #12
 80099c8:	f003 030f 	and.w	r3, r3, #15
 80099cc:	3302      	adds	r3, #2
 80099ce:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 80099d0:	4a2f      	ldr	r2, [pc, #188]	; (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80099d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80099d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099da:	fb02 f303 	mul.w	r3, r2, r3
 80099de:	005b      	lsls	r3, r3, #1
 80099e0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80099e2:	e046      	b.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80099e4:	4b29      	ldr	r3, [pc, #164]	; (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80099e6:	6a1b      	ldr	r3, [r3, #32]
 80099e8:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80099ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099f4:	d108      	bne.n	8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 80099f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f8:	f003 0302 	and.w	r3, r3, #2
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d003      	beq.n	8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
      {
        frequency = LSE_VALUE;
 8009a00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a04:	643b      	str	r3, [r7, #64]	; 0x40
 8009a06:	e01f      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8009a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a12:	d109      	bne.n	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8009a14:	4b1d      	ldr	r3, [pc, #116]	; (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a18:	f003 0302 	and.w	r3, r3, #2
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d003      	beq.n	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
      {
        frequency = LSI_VALUE;
 8009a20:	f649 4340 	movw	r3, #40000	; 0x9c40
 8009a24:	643b      	str	r3, [r7, #64]	; 0x40
 8009a26:	e00f      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8009a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a32:	d120      	bne.n	8009a76 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 8009a34:	4b15      	ldr	r3, [pc, #84]	; (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d01a      	beq.n	8009a76 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
      {
        frequency = HSE_VALUE / 128U;
 8009a40:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009a44:	643b      	str	r3, [r7, #64]	; 0x40
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8009a46:	e016      	b.n	8009a76 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 8009a48:	e015      	b.n	8009a76 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8009a4a:	f7ff fd2f 	bl	80094ac <HAL_RCC_GetPCLK2Freq>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	4b0e      	ldr	r3, [pc, #56]	; (8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	0b9b      	lsrs	r3, r3, #14
 8009a56:	f003 0303 	and.w	r3, r3, #3
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	005b      	lsls	r3, r3, #1
 8009a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a62:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8009a64:	e008      	b.n	8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
    }
    default:
    {
      break;
 8009a66:	bf00      	nop
 8009a68:	e006      	b.n	8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8009a6a:	bf00      	nop
 8009a6c:	e004      	b.n	8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8009a6e:	bf00      	nop
 8009a70:	e002      	b.n	8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8009a72:	bf00      	nop
 8009a74:	e000      	b.n	8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8009a76:	bf00      	nop
    }
  }
  return (frequency);
 8009a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	374c      	adds	r7, #76	; 0x4c
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd90      	pop	{r4, r7, pc}
 8009a82:	bf00      	nop
 8009a84:	08013624 	.word	0x08013624
 8009a88:	08013634 	.word	0x08013634
 8009a8c:	40021000 	.word	0x40021000
 8009a90:	007a1200 	.word	0x007a1200
 8009a94:	003d0900 	.word	0x003d0900
 8009a98:	aaaaaaab 	.word	0xaaaaaaab

08009a9c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d101      	bne.n	8009ab2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e084      	b.n	8009bbc <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	7c5b      	ldrb	r3, [r3, #17]
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d105      	bne.n	8009ac8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f7fb faf6 	bl	80050b4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2202      	movs	r2, #2
 8009acc:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 f9c8 	bl	8009e64 <HAL_RTC_WaitForSynchro>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d004      	beq.n	8009ae4 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2204      	movs	r2, #4
 8009ade:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	e06b      	b.n	8009bbc <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 fa81 	bl	8009fec <RTC_EnterInitMode>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d004      	beq.n	8009afa <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2204      	movs	r2, #4
 8009af4:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8009af6:	2301      	movs	r3, #1
 8009af8:	e060      	b.n	8009bbc <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	685a      	ldr	r2, [r3, #4]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f022 0207 	bic.w	r2, r2, #7
 8009b08:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	689b      	ldr	r3, [r3, #8]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d005      	beq.n	8009b1e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8009b12:	4b2c      	ldr	r3, [pc, #176]	; (8009bc4 <HAL_RTC_Init+0x128>)
 8009b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b16:	4a2b      	ldr	r2, [pc, #172]	; (8009bc4 <HAL_RTC_Init+0x128>)
 8009b18:	f023 0301 	bic.w	r3, r3, #1
 8009b1c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8009b1e:	4b29      	ldr	r3, [pc, #164]	; (8009bc4 <HAL_RTC_Init+0x128>)
 8009b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b22:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	4926      	ldr	r1, [pc, #152]	; (8009bc4 <HAL_RTC_Init+0x128>)
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b38:	d003      	beq.n	8009b42 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	60fb      	str	r3, [r7, #12]
 8009b40:	e00e      	b.n	8009b60 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8009b42:	2001      	movs	r0, #1
 8009b44:	f7ff fe46 	bl	80097d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009b48:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d104      	bne.n	8009b5a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2204      	movs	r2, #4
 8009b54:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8009b56:	2301      	movs	r3, #1
 8009b58:	e030      	b.n	8009bbc <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	3b01      	subs	r3, #1
 8009b5e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	689b      	ldr	r3, [r3, #8]
 8009b66:	f023 010f 	bic.w	r1, r3, #15
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	0c1a      	lsrs	r2, r3, #16
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	430a      	orrs	r2, r1
 8009b74:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	68db      	ldr	r3, [r3, #12]
 8009b7c:	0c1b      	lsrs	r3, r3, #16
 8009b7e:	041b      	lsls	r3, r3, #16
 8009b80:	68fa      	ldr	r2, [r7, #12]
 8009b82:	b291      	uxth	r1, r2
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	6812      	ldr	r2, [r2, #0]
 8009b88:	430b      	orrs	r3, r1
 8009b8a:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 fa55 	bl	800a03c <RTC_ExitInitMode>
 8009b92:	4603      	mov	r3, r0
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d004      	beq.n	8009ba2 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2204      	movs	r2, #4
 8009b9c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	e00c      	b.n	8009bbc <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2201      	movs	r2, #1
 8009bac:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8009bba:	2300      	movs	r3, #0
  }
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3710      	adds	r7, #16
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	40006c00 	.word	0x40006c00

08009bc8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009bc8:	b590      	push	{r4, r7, lr}
 8009bca:	b087      	sub	sp, #28
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	60f8      	str	r0, [r7, #12]
 8009bd0:	60b9      	str	r1, [r7, #8]
 8009bd2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	617b      	str	r3, [r7, #20]
 8009bd8:	2300      	movs	r3, #0
 8009bda:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d002      	beq.n	8009be8 <HAL_RTC_SetTime+0x20>
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d101      	bne.n	8009bec <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8009be8:	2301      	movs	r3, #1
 8009bea:	e080      	b.n	8009cee <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	7c1b      	ldrb	r3, [r3, #16]
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d101      	bne.n	8009bf8 <HAL_RTC_SetTime+0x30>
 8009bf4:	2302      	movs	r3, #2
 8009bf6:	e07a      	b.n	8009cee <HAL_RTC_SetTime+0x126>
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2202      	movs	r2, #2
 8009c02:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d113      	bne.n	8009c32 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	461a      	mov	r2, r3
 8009c10:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8009c14:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	785b      	ldrb	r3, [r3, #1]
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	460b      	mov	r3, r1
 8009c20:	011b      	lsls	r3, r3, #4
 8009c22:	1a5b      	subs	r3, r3, r1
 8009c24:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8009c26:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8009c28:	68ba      	ldr	r2, [r7, #8]
 8009c2a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8009c2c:	4413      	add	r3, r2
 8009c2e:	617b      	str	r3, [r7, #20]
 8009c30:	e01e      	b.n	8009c70 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	4618      	mov	r0, r3
 8009c38:	f000 fa28 	bl	800a08c <RTC_Bcd2ToByte>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	461a      	mov	r2, r3
 8009c40:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8009c44:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	785b      	ldrb	r3, [r3, #1]
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f000 fa1d 	bl	800a08c <RTC_Bcd2ToByte>
 8009c52:	4603      	mov	r3, r0
 8009c54:	461a      	mov	r2, r3
 8009c56:	4613      	mov	r3, r2
 8009c58:	011b      	lsls	r3, r3, #4
 8009c5a:	1a9b      	subs	r3, r3, r2
 8009c5c:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8009c5e:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	789b      	ldrb	r3, [r3, #2]
 8009c64:	4618      	mov	r0, r3
 8009c66:	f000 fa11 	bl	800a08c <RTC_Bcd2ToByte>
 8009c6a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8009c6c:	4423      	add	r3, r4
 8009c6e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8009c70:	6979      	ldr	r1, [r7, #20]
 8009c72:	68f8      	ldr	r0, [r7, #12]
 8009c74:	f000 f953 	bl	8009f1e <RTC_WriteTimeCounter>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d007      	beq.n	8009c8e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2204      	movs	r2, #4
 8009c82:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2200      	movs	r2, #0
 8009c88:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e02f      	b.n	8009cee <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	685a      	ldr	r2, [r3, #4]
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f022 0205 	bic.w	r2, r2, #5
 8009c9c:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8009c9e:	68f8      	ldr	r0, [r7, #12]
 8009ca0:	f000 f964 	bl	8009f6c <RTC_ReadAlarmCounter>
 8009ca4:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cac:	d018      	beq.n	8009ce0 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8009cae:	693a      	ldr	r2, [r7, #16]
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d214      	bcs.n	8009ce0 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8009cbc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8009cc0:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8009cc2:	6939      	ldr	r1, [r7, #16]
 8009cc4:	68f8      	ldr	r0, [r7, #12]
 8009cc6:	f000 f96a 	bl	8009f9e <RTC_WriteAlarmCounter>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d007      	beq.n	8009ce0 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2204      	movs	r2, #4
 8009cd4:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	e006      	b.n	8009cee <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8009cec:	2300      	movs	r3, #0
  }
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	371c      	adds	r7, #28
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd90      	pop	{r4, r7, pc}
	...

08009cf8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b088      	sub	sp, #32
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8009d04:	2300      	movs	r3, #0
 8009d06:	61fb      	str	r3, [r7, #28]
 8009d08:	2300      	movs	r3, #0
 8009d0a:	61bb      	str	r3, [r7, #24]
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d002      	beq.n	8009d1c <HAL_RTC_SetDate+0x24>
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d101      	bne.n	8009d20 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	e097      	b.n	8009e50 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	7c1b      	ldrb	r3, [r3, #16]
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d101      	bne.n	8009d2c <HAL_RTC_SetDate+0x34>
 8009d28:	2302      	movs	r3, #2
 8009d2a:	e091      	b.n	8009e50 <HAL_RTC_SetDate+0x158>
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2202      	movs	r2, #2
 8009d36:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d10c      	bne.n	8009d58 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	78da      	ldrb	r2, [r3, #3]
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	785a      	ldrb	r2, [r3, #1]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	789a      	ldrb	r2, [r3, #2]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	739a      	strb	r2, [r3, #14]
 8009d56:	e01a      	b.n	8009d8e <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	78db      	ldrb	r3, [r3, #3]
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f000 f995 	bl	800a08c <RTC_Bcd2ToByte>
 8009d62:	4603      	mov	r3, r0
 8009d64:	461a      	mov	r2, r3
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	785b      	ldrb	r3, [r3, #1]
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f000 f98c 	bl	800a08c <RTC_Bcd2ToByte>
 8009d74:	4603      	mov	r3, r0
 8009d76:	461a      	mov	r2, r3
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	789b      	ldrb	r3, [r3, #2]
 8009d80:	4618      	mov	r0, r3
 8009d82:	f000 f983 	bl	800a08c <RTC_Bcd2ToByte>
 8009d86:	4603      	mov	r3, r0
 8009d88:	461a      	mov	r2, r3
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	7bdb      	ldrb	r3, [r3, #15]
 8009d92:	4618      	mov	r0, r3
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	7b59      	ldrb	r1, [r3, #13]
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	7b9b      	ldrb	r3, [r3, #14]
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	f000 f993 	bl	800a0c8 <RTC_WeekDayNum>
 8009da2:	4603      	mov	r3, r0
 8009da4:	461a      	mov	r2, r3
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	7b1a      	ldrb	r2, [r3, #12]
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8009db2:	68f8      	ldr	r0, [r7, #12]
 8009db4:	f000 f883 	bl	8009ebe <RTC_ReadTimeCounter>
 8009db8:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8009dba:	69fb      	ldr	r3, [r7, #28]
 8009dbc:	4a26      	ldr	r2, [pc, #152]	; (8009e58 <HAL_RTC_SetDate+0x160>)
 8009dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8009dc2:	0adb      	lsrs	r3, r3, #11
 8009dc4:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	2b18      	cmp	r3, #24
 8009dca:	d93a      	bls.n	8009e42 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	4a23      	ldr	r2, [pc, #140]	; (8009e5c <HAL_RTC_SetDate+0x164>)
 8009dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8009dd4:	091b      	lsrs	r3, r3, #4
 8009dd6:	4a22      	ldr	r2, [pc, #136]	; (8009e60 <HAL_RTC_SetDate+0x168>)
 8009dd8:	fb02 f303 	mul.w	r3, r2, r3
 8009ddc:	69fa      	ldr	r2, [r7, #28]
 8009dde:	1ad3      	subs	r3, r2, r3
 8009de0:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8009de2:	69f9      	ldr	r1, [r7, #28]
 8009de4:	68f8      	ldr	r0, [r7, #12]
 8009de6:	f000 f89a 	bl	8009f1e <RTC_WriteTimeCounter>
 8009dea:	4603      	mov	r3, r0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d007      	beq.n	8009e00 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2204      	movs	r2, #4
 8009df4:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	e027      	b.n	8009e50 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8009e00:	68f8      	ldr	r0, [r7, #12]
 8009e02:	f000 f8b3 	bl	8009f6c <RTC_ReadAlarmCounter>
 8009e06:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8009e08:	69bb      	ldr	r3, [r7, #24]
 8009e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e0e:	d018      	beq.n	8009e42 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8009e10:	69ba      	ldr	r2, [r7, #24]
 8009e12:	69fb      	ldr	r3, [r7, #28]
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d214      	bcs.n	8009e42 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8009e1e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8009e22:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8009e24:	69b9      	ldr	r1, [r7, #24]
 8009e26:	68f8      	ldr	r0, [r7, #12]
 8009e28:	f000 f8b9 	bl	8009f9e <RTC_WriteAlarmCounter>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d007      	beq.n	8009e42 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2204      	movs	r2, #4
 8009e36:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e006      	b.n	8009e50 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2201      	movs	r2, #1
 8009e46:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8009e4e:	2300      	movs	r3, #0
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3720      	adds	r7, #32
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	91a2b3c5 	.word	0x91a2b3c5
 8009e5c:	aaaaaaab 	.word	0xaaaaaaab
 8009e60:	00015180 	.word	0x00015180

08009e64 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d101      	bne.n	8009e7a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	e01d      	b.n	8009eb6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	685a      	ldr	r2, [r3, #4]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f022 0208 	bic.w	r2, r2, #8
 8009e88:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8009e8a:	f7fb ff91 	bl	8005db0 <HAL_GetTick>
 8009e8e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8009e90:	e009      	b.n	8009ea6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8009e92:	f7fb ff8d 	bl	8005db0 <HAL_GetTick>
 8009e96:	4602      	mov	r2, r0
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	1ad3      	subs	r3, r2, r3
 8009e9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ea0:	d901      	bls.n	8009ea6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8009ea2:	2303      	movs	r3, #3
 8009ea4:	e007      	b.n	8009eb6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	f003 0308 	and.w	r3, r3, #8
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d0ee      	beq.n	8009e92 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8009ebe:	b480      	push	{r7}
 8009ec0:	b087      	sub	sp, #28
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	827b      	strh	r3, [r7, #18]
 8009eca:	2300      	movs	r3, #0
 8009ecc:	823b      	strh	r3, [r7, #16]
 8009ece:	2300      	movs	r3, #0
 8009ed0:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	699b      	ldr	r3, [r3, #24]
 8009edc:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	69db      	ldr	r3, [r3, #28]
 8009ee4:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	699b      	ldr	r3, [r3, #24]
 8009eec:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8009eee:	8a7a      	ldrh	r2, [r7, #18]
 8009ef0:	8a3b      	ldrh	r3, [r7, #16]
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d008      	beq.n	8009f08 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8009ef6:	8a3b      	ldrh	r3, [r7, #16]
 8009ef8:	041a      	lsls	r2, r3, #16
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	69db      	ldr	r3, [r3, #28]
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	4313      	orrs	r3, r2
 8009f04:	617b      	str	r3, [r7, #20]
 8009f06:	e004      	b.n	8009f12 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8009f08:	8a7b      	ldrh	r3, [r7, #18]
 8009f0a:	041a      	lsls	r2, r3, #16
 8009f0c:	89fb      	ldrh	r3, [r7, #14]
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8009f12:	697b      	ldr	r3, [r7, #20]
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	371c      	adds	r7, #28
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bc80      	pop	{r7}
 8009f1c:	4770      	bx	lr

08009f1e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b084      	sub	sp, #16
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
 8009f26:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 f85d 	bl	8009fec <RTC_EnterInitMode>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d002      	beq.n	8009f3e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	73fb      	strb	r3, [r7, #15]
 8009f3c:	e011      	b.n	8009f62 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	683a      	ldr	r2, [r7, #0]
 8009f44:	0c12      	lsrs	r2, r2, #16
 8009f46:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	683a      	ldr	r2, [r7, #0]
 8009f4e:	b292      	uxth	r2, r2
 8009f50:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f000 f872 	bl	800a03c <RTC_ExitInitMode>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d001      	beq.n	8009f62 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3710      	adds	r7, #16
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b085      	sub	sp, #20
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8009f74:	2300      	movs	r3, #0
 8009f76:	81fb      	strh	r3, [r7, #14]
 8009f78:	2300      	movs	r3, #0
 8009f7a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	6a1b      	ldr	r3, [r3, #32]
 8009f82:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f8a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8009f8c:	89fb      	ldrh	r3, [r7, #14]
 8009f8e:	041a      	lsls	r2, r3, #16
 8009f90:	89bb      	ldrh	r3, [r7, #12]
 8009f92:	4313      	orrs	r3, r2
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3714      	adds	r7, #20
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bc80      	pop	{r7}
 8009f9c:	4770      	bx	lr

08009f9e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b084      	sub	sp, #16
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
 8009fa6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 f81d 	bl	8009fec <RTC_EnterInitMode>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d002      	beq.n	8009fbe <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	73fb      	strb	r3, [r7, #15]
 8009fbc:	e011      	b.n	8009fe2 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	683a      	ldr	r2, [r7, #0]
 8009fc4:	0c12      	lsrs	r2, r2, #16
 8009fc6:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	683a      	ldr	r2, [r7, #0]
 8009fce:	b292      	uxth	r2, r2
 8009fd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 f832 	bl	800a03c <RTC_ExitInitMode>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d001      	beq.n	8009fe2 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3710      	adds	r7, #16
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8009ff8:	f7fb feda 	bl	8005db0 <HAL_GetTick>
 8009ffc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8009ffe:	e009      	b.n	800a014 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800a000:	f7fb fed6 	bl	8005db0 <HAL_GetTick>
 800a004:	4602      	mov	r2, r0
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	1ad3      	subs	r3, r2, r3
 800a00a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a00e:	d901      	bls.n	800a014 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800a010:	2303      	movs	r3, #3
 800a012:	e00f      	b.n	800a034 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	f003 0320 	and.w	r3, r3, #32
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d0ee      	beq.n	800a000 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	685a      	ldr	r2, [r3, #4]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f042 0210 	orr.w	r2, r2, #16
 800a030:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	3710      	adds	r7, #16
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a044:	2300      	movs	r3, #0
 800a046:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	685a      	ldr	r2, [r3, #4]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f022 0210 	bic.w	r2, r2, #16
 800a056:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800a058:	f7fb feaa 	bl	8005db0 <HAL_GetTick>
 800a05c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800a05e:	e009      	b.n	800a074 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800a060:	f7fb fea6 	bl	8005db0 <HAL_GetTick>
 800a064:	4602      	mov	r2, r0
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	1ad3      	subs	r3, r2, r3
 800a06a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a06e:	d901      	bls.n	800a074 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800a070:	2303      	movs	r3, #3
 800a072:	e007      	b.n	800a084 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	f003 0320 	and.w	r3, r3, #32
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d0ee      	beq.n	800a060 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800a082:	2300      	movs	r3, #0
}
 800a084:	4618      	mov	r0, r3
 800a086:	3710      	adds	r7, #16
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b085      	sub	sp, #20
 800a090:	af00      	add	r7, sp, #0
 800a092:	4603      	mov	r3, r0
 800a094:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800a096:	2300      	movs	r3, #0
 800a098:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800a09a:	79fb      	ldrb	r3, [r7, #7]
 800a09c:	091b      	lsrs	r3, r3, #4
 800a09e:	b2db      	uxtb	r3, r3
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	4613      	mov	r3, r2
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	4413      	add	r3, r2
 800a0a8:	005b      	lsls	r3, r3, #1
 800a0aa:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800a0ac:	79fb      	ldrb	r3, [r7, #7]
 800a0ae:	f003 030f 	and.w	r3, r3, #15
 800a0b2:	b2da      	uxtb	r2, r3
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	4413      	add	r3, r2
 800a0ba:	b2db      	uxtb	r3, r3
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3714      	adds	r7, #20
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bc80      	pop	{r7}
 800a0c4:	4770      	bx	lr
	...

0800a0c8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b085      	sub	sp, #20
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	70fb      	strb	r3, [r7, #3]
 800a0d4:	4613      	mov	r3, r2
 800a0d6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	60bb      	str	r3, [r7, #8]
 800a0dc:	2300      	movs	r3, #0
 800a0de:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800a0e6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800a0e8:	78fb      	ldrb	r3, [r7, #3]
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d82d      	bhi.n	800a14a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800a0ee:	78fa      	ldrb	r2, [r7, #3]
 800a0f0:	4613      	mov	r3, r2
 800a0f2:	005b      	lsls	r3, r3, #1
 800a0f4:	4413      	add	r3, r2
 800a0f6:	00db      	lsls	r3, r3, #3
 800a0f8:	1a9b      	subs	r3, r3, r2
 800a0fa:	4a2c      	ldr	r2, [pc, #176]	; (800a1ac <RTC_WeekDayNum+0xe4>)
 800a0fc:	fba2 2303 	umull	r2, r3, r2, r3
 800a100:	085a      	lsrs	r2, r3, #1
 800a102:	78bb      	ldrb	r3, [r7, #2]
 800a104:	441a      	add	r2, r3
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	441a      	add	r2, r3
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	3b01      	subs	r3, #1
 800a10e:	089b      	lsrs	r3, r3, #2
 800a110:	441a      	add	r2, r3
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	3b01      	subs	r3, #1
 800a116:	4926      	ldr	r1, [pc, #152]	; (800a1b0 <RTC_WeekDayNum+0xe8>)
 800a118:	fba1 1303 	umull	r1, r3, r1, r3
 800a11c:	095b      	lsrs	r3, r3, #5
 800a11e:	1ad2      	subs	r2, r2, r3
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	3b01      	subs	r3, #1
 800a124:	4922      	ldr	r1, [pc, #136]	; (800a1b0 <RTC_WeekDayNum+0xe8>)
 800a126:	fba1 1303 	umull	r1, r3, r1, r3
 800a12a:	09db      	lsrs	r3, r3, #7
 800a12c:	4413      	add	r3, r2
 800a12e:	1d1a      	adds	r2, r3, #4
 800a130:	4b20      	ldr	r3, [pc, #128]	; (800a1b4 <RTC_WeekDayNum+0xec>)
 800a132:	fba3 1302 	umull	r1, r3, r3, r2
 800a136:	1ad1      	subs	r1, r2, r3
 800a138:	0849      	lsrs	r1, r1, #1
 800a13a:	440b      	add	r3, r1
 800a13c:	0899      	lsrs	r1, r3, #2
 800a13e:	460b      	mov	r3, r1
 800a140:	00db      	lsls	r3, r3, #3
 800a142:	1a5b      	subs	r3, r3, r1
 800a144:	1ad3      	subs	r3, r2, r3
 800a146:	60fb      	str	r3, [r7, #12]
 800a148:	e029      	b.n	800a19e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800a14a:	78fa      	ldrb	r2, [r7, #3]
 800a14c:	4613      	mov	r3, r2
 800a14e:	005b      	lsls	r3, r3, #1
 800a150:	4413      	add	r3, r2
 800a152:	00db      	lsls	r3, r3, #3
 800a154:	1a9b      	subs	r3, r3, r2
 800a156:	4a15      	ldr	r2, [pc, #84]	; (800a1ac <RTC_WeekDayNum+0xe4>)
 800a158:	fba2 2303 	umull	r2, r3, r2, r3
 800a15c:	085a      	lsrs	r2, r3, #1
 800a15e:	78bb      	ldrb	r3, [r7, #2]
 800a160:	441a      	add	r2, r3
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	441a      	add	r2, r3
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	089b      	lsrs	r3, r3, #2
 800a16a:	441a      	add	r2, r3
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	4910      	ldr	r1, [pc, #64]	; (800a1b0 <RTC_WeekDayNum+0xe8>)
 800a170:	fba1 1303 	umull	r1, r3, r1, r3
 800a174:	095b      	lsrs	r3, r3, #5
 800a176:	1ad2      	subs	r2, r2, r3
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	490d      	ldr	r1, [pc, #52]	; (800a1b0 <RTC_WeekDayNum+0xe8>)
 800a17c:	fba1 1303 	umull	r1, r3, r1, r3
 800a180:	09db      	lsrs	r3, r3, #7
 800a182:	4413      	add	r3, r2
 800a184:	1c9a      	adds	r2, r3, #2
 800a186:	4b0b      	ldr	r3, [pc, #44]	; (800a1b4 <RTC_WeekDayNum+0xec>)
 800a188:	fba3 1302 	umull	r1, r3, r3, r2
 800a18c:	1ad1      	subs	r1, r2, r3
 800a18e:	0849      	lsrs	r1, r1, #1
 800a190:	440b      	add	r3, r1
 800a192:	0899      	lsrs	r1, r3, #2
 800a194:	460b      	mov	r3, r1
 800a196:	00db      	lsls	r3, r3, #3
 800a198:	1a5b      	subs	r3, r3, r1
 800a19a:	1ad3      	subs	r3, r2, r3
 800a19c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	b2db      	uxtb	r3, r3
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3714      	adds	r7, #20
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bc80      	pop	{r7}
 800a1aa:	4770      	bx	lr
 800a1ac:	38e38e39 	.word	0x38e38e39
 800a1b0:	51eb851f 	.word	0x51eb851f
 800a1b4:	24924925 	.word	0x24924925

0800a1b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d101      	bne.n	800a1ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e041      	b.n	800a24e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d106      	bne.n	800a1e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 f839 	bl	800a256 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2202      	movs	r2, #2
 800a1e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681a      	ldr	r2, [r3, #0]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	3304      	adds	r3, #4
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	4610      	mov	r0, r2
 800a1f8:	f000 f9bc 	bl	800a574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2201      	movs	r2, #1
 800a200:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2201      	movs	r2, #1
 800a208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2201      	movs	r2, #1
 800a210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2201      	movs	r2, #1
 800a218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2201      	movs	r2, #1
 800a220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2201      	movs	r2, #1
 800a228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2201      	movs	r2, #1
 800a230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2201      	movs	r2, #1
 800a238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2201      	movs	r2, #1
 800a240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2201      	movs	r2, #1
 800a248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a24c:	2300      	movs	r3, #0
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3708      	adds	r7, #8
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a256:	b480      	push	{r7}
 800a258:	b083      	sub	sp, #12
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a25e:	bf00      	nop
 800a260:	370c      	adds	r7, #12
 800a262:	46bd      	mov	sp, r7
 800a264:	bc80      	pop	{r7}
 800a266:	4770      	bx	lr

0800a268 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a268:	b480      	push	{r7}
 800a26a:	b085      	sub	sp, #20
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a276:	b2db      	uxtb	r3, r3
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d001      	beq.n	800a280 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a27c:	2301      	movs	r3, #1
 800a27e:	e03f      	b.n	800a300 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2202      	movs	r2, #2
 800a284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	68da      	ldr	r2, [r3, #12]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f042 0201 	orr.w	r2, r2, #1
 800a296:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a1b      	ldr	r2, [pc, #108]	; (800a30c <HAL_TIM_Base_Start_IT+0xa4>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d013      	beq.n	800a2ca <HAL_TIM_Base_Start_IT+0x62>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2aa:	d00e      	beq.n	800a2ca <HAL_TIM_Base_Start_IT+0x62>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a17      	ldr	r2, [pc, #92]	; (800a310 <HAL_TIM_Base_Start_IT+0xa8>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d009      	beq.n	800a2ca <HAL_TIM_Base_Start_IT+0x62>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a16      	ldr	r2, [pc, #88]	; (800a314 <HAL_TIM_Base_Start_IT+0xac>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d004      	beq.n	800a2ca <HAL_TIM_Base_Start_IT+0x62>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a14      	ldr	r2, [pc, #80]	; (800a318 <HAL_TIM_Base_Start_IT+0xb0>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d111      	bne.n	800a2ee <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	689b      	ldr	r3, [r3, #8]
 800a2d0:	f003 0307 	and.w	r3, r3, #7
 800a2d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2b06      	cmp	r3, #6
 800a2da:	d010      	beq.n	800a2fe <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	681a      	ldr	r2, [r3, #0]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f042 0201 	orr.w	r2, r2, #1
 800a2ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2ec:	e007      	b.n	800a2fe <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f042 0201 	orr.w	r2, r2, #1
 800a2fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a2fe:	2300      	movs	r3, #0
}
 800a300:	4618      	mov	r0, r3
 800a302:	3714      	adds	r7, #20
 800a304:	46bd      	mov	sp, r7
 800a306:	bc80      	pop	{r7}
 800a308:	4770      	bx	lr
 800a30a:	bf00      	nop
 800a30c:	40012c00 	.word	0x40012c00
 800a310:	40000400 	.word	0x40000400
 800a314:	40000800 	.word	0x40000800
 800a318:	40000c00 	.word	0x40000c00

0800a31c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	691b      	ldr	r3, [r3, #16]
 800a32a:	f003 0302 	and.w	r3, r3, #2
 800a32e:	2b02      	cmp	r3, #2
 800a330:	d122      	bne.n	800a378 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	f003 0302 	and.w	r3, r3, #2
 800a33c:	2b02      	cmp	r3, #2
 800a33e:	d11b      	bne.n	800a378 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f06f 0202 	mvn.w	r2, #2
 800a348:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2201      	movs	r2, #1
 800a34e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	699b      	ldr	r3, [r3, #24]
 800a356:	f003 0303 	and.w	r3, r3, #3
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d003      	beq.n	800a366 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 f8ed 	bl	800a53e <HAL_TIM_IC_CaptureCallback>
 800a364:	e005      	b.n	800a372 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 f8e0 	bl	800a52c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 f8ef 	bl	800a550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2200      	movs	r2, #0
 800a376:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	691b      	ldr	r3, [r3, #16]
 800a37e:	f003 0304 	and.w	r3, r3, #4
 800a382:	2b04      	cmp	r3, #4
 800a384:	d122      	bne.n	800a3cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	68db      	ldr	r3, [r3, #12]
 800a38c:	f003 0304 	and.w	r3, r3, #4
 800a390:	2b04      	cmp	r3, #4
 800a392:	d11b      	bne.n	800a3cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f06f 0204 	mvn.w	r2, #4
 800a39c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2202      	movs	r2, #2
 800a3a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	699b      	ldr	r3, [r3, #24]
 800a3aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d003      	beq.n	800a3ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f000 f8c3 	bl	800a53e <HAL_TIM_IC_CaptureCallback>
 800a3b8:	e005      	b.n	800a3c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 f8b6 	bl	800a52c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f000 f8c5 	bl	800a550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	691b      	ldr	r3, [r3, #16]
 800a3d2:	f003 0308 	and.w	r3, r3, #8
 800a3d6:	2b08      	cmp	r3, #8
 800a3d8:	d122      	bne.n	800a420 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	68db      	ldr	r3, [r3, #12]
 800a3e0:	f003 0308 	and.w	r3, r3, #8
 800a3e4:	2b08      	cmp	r3, #8
 800a3e6:	d11b      	bne.n	800a420 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f06f 0208 	mvn.w	r2, #8
 800a3f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2204      	movs	r2, #4
 800a3f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	69db      	ldr	r3, [r3, #28]
 800a3fe:	f003 0303 	and.w	r3, r3, #3
 800a402:	2b00      	cmp	r3, #0
 800a404:	d003      	beq.n	800a40e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 f899 	bl	800a53e <HAL_TIM_IC_CaptureCallback>
 800a40c:	e005      	b.n	800a41a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 f88c 	bl	800a52c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f000 f89b 	bl	800a550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2200      	movs	r2, #0
 800a41e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	691b      	ldr	r3, [r3, #16]
 800a426:	f003 0310 	and.w	r3, r3, #16
 800a42a:	2b10      	cmp	r3, #16
 800a42c:	d122      	bne.n	800a474 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	68db      	ldr	r3, [r3, #12]
 800a434:	f003 0310 	and.w	r3, r3, #16
 800a438:	2b10      	cmp	r3, #16
 800a43a:	d11b      	bne.n	800a474 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f06f 0210 	mvn.w	r2, #16
 800a444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2208      	movs	r2, #8
 800a44a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	69db      	ldr	r3, [r3, #28]
 800a452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a456:	2b00      	cmp	r3, #0
 800a458:	d003      	beq.n	800a462 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 f86f 	bl	800a53e <HAL_TIM_IC_CaptureCallback>
 800a460:	e005      	b.n	800a46e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 f862 	bl	800a52c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 f871 	bl	800a550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2200      	movs	r2, #0
 800a472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	691b      	ldr	r3, [r3, #16]
 800a47a:	f003 0301 	and.w	r3, r3, #1
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d10e      	bne.n	800a4a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	68db      	ldr	r3, [r3, #12]
 800a488:	f003 0301 	and.w	r3, r3, #1
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d107      	bne.n	800a4a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f06f 0201 	mvn.w	r2, #1
 800a498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f7fa fd6c 	bl	8004f78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	691b      	ldr	r3, [r3, #16]
 800a4a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4aa:	2b80      	cmp	r3, #128	; 0x80
 800a4ac:	d10e      	bne.n	800a4cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	68db      	ldr	r3, [r3, #12]
 800a4b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4b8:	2b80      	cmp	r3, #128	; 0x80
 800a4ba:	d107      	bne.n	800a4cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a4c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 f8c9 	bl	800a65e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	691b      	ldr	r3, [r3, #16]
 800a4d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4d6:	2b40      	cmp	r3, #64	; 0x40
 800a4d8:	d10e      	bne.n	800a4f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4e4:	2b40      	cmp	r3, #64	; 0x40
 800a4e6:	d107      	bne.n	800a4f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a4f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 f835 	bl	800a562 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	f003 0320 	and.w	r3, r3, #32
 800a502:	2b20      	cmp	r3, #32
 800a504:	d10e      	bne.n	800a524 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	68db      	ldr	r3, [r3, #12]
 800a50c:	f003 0320 	and.w	r3, r3, #32
 800a510:	2b20      	cmp	r3, #32
 800a512:	d107      	bne.n	800a524 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f06f 0220 	mvn.w	r2, #32
 800a51c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f000 f894 	bl	800a64c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a524:	bf00      	nop
 800a526:	3708      	adds	r7, #8
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}

0800a52c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b083      	sub	sp, #12
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a534:	bf00      	nop
 800a536:	370c      	adds	r7, #12
 800a538:	46bd      	mov	sp, r7
 800a53a:	bc80      	pop	{r7}
 800a53c:	4770      	bx	lr

0800a53e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a53e:	b480      	push	{r7}
 800a540:	b083      	sub	sp, #12
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a546:	bf00      	nop
 800a548:	370c      	adds	r7, #12
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bc80      	pop	{r7}
 800a54e:	4770      	bx	lr

0800a550 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a550:	b480      	push	{r7}
 800a552:	b083      	sub	sp, #12
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a558:	bf00      	nop
 800a55a:	370c      	adds	r7, #12
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bc80      	pop	{r7}
 800a560:	4770      	bx	lr

0800a562 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a562:	b480      	push	{r7}
 800a564:	b083      	sub	sp, #12
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a56a:	bf00      	nop
 800a56c:	370c      	adds	r7, #12
 800a56e:	46bd      	mov	sp, r7
 800a570:	bc80      	pop	{r7}
 800a572:	4770      	bx	lr

0800a574 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a574:	b480      	push	{r7}
 800a576:	b085      	sub	sp, #20
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	4a2d      	ldr	r2, [pc, #180]	; (800a63c <TIM_Base_SetConfig+0xc8>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d00f      	beq.n	800a5ac <TIM_Base_SetConfig+0x38>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a592:	d00b      	beq.n	800a5ac <TIM_Base_SetConfig+0x38>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	4a2a      	ldr	r2, [pc, #168]	; (800a640 <TIM_Base_SetConfig+0xcc>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d007      	beq.n	800a5ac <TIM_Base_SetConfig+0x38>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	4a29      	ldr	r2, [pc, #164]	; (800a644 <TIM_Base_SetConfig+0xd0>)
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d003      	beq.n	800a5ac <TIM_Base_SetConfig+0x38>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	4a28      	ldr	r2, [pc, #160]	; (800a648 <TIM_Base_SetConfig+0xd4>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d108      	bne.n	800a5be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	68fa      	ldr	r2, [r7, #12]
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	4a1e      	ldr	r2, [pc, #120]	; (800a63c <TIM_Base_SetConfig+0xc8>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d00f      	beq.n	800a5e6 <TIM_Base_SetConfig+0x72>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5cc:	d00b      	beq.n	800a5e6 <TIM_Base_SetConfig+0x72>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	4a1b      	ldr	r2, [pc, #108]	; (800a640 <TIM_Base_SetConfig+0xcc>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d007      	beq.n	800a5e6 <TIM_Base_SetConfig+0x72>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	4a1a      	ldr	r2, [pc, #104]	; (800a644 <TIM_Base_SetConfig+0xd0>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d003      	beq.n	800a5e6 <TIM_Base_SetConfig+0x72>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	4a19      	ldr	r2, [pc, #100]	; (800a648 <TIM_Base_SetConfig+0xd4>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d108      	bne.n	800a5f8 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	68db      	ldr	r3, [r3, #12]
 800a5f2:	68fa      	ldr	r2, [r7, #12]
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	695b      	ldr	r3, [r3, #20]
 800a602:	4313      	orrs	r3, r2
 800a604:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	68fa      	ldr	r2, [r7, #12]
 800a60a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	689a      	ldr	r2, [r3, #8]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	681a      	ldr	r2, [r3, #0]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	4a07      	ldr	r2, [pc, #28]	; (800a63c <TIM_Base_SetConfig+0xc8>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d103      	bne.n	800a62c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	691a      	ldr	r2, [r3, #16]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2201      	movs	r2, #1
 800a630:	615a      	str	r2, [r3, #20]
}
 800a632:	bf00      	nop
 800a634:	3714      	adds	r7, #20
 800a636:	46bd      	mov	sp, r7
 800a638:	bc80      	pop	{r7}
 800a63a:	4770      	bx	lr
 800a63c:	40012c00 	.word	0x40012c00
 800a640:	40000400 	.word	0x40000400
 800a644:	40000800 	.word	0x40000800
 800a648:	40000c00 	.word	0x40000c00

0800a64c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a654:	bf00      	nop
 800a656:	370c      	adds	r7, #12
 800a658:	46bd      	mov	sp, r7
 800a65a:	bc80      	pop	{r7}
 800a65c:	4770      	bx	lr

0800a65e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a65e:	b480      	push	{r7}
 800a660:	b083      	sub	sp, #12
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a666:	bf00      	nop
 800a668:	370c      	adds	r7, #12
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bc80      	pop	{r7}
 800a66e:	4770      	bx	lr

0800a670 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d101      	bne.n	800a682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a67e:	2301      	movs	r3, #1
 800a680:	e04a      	b.n	800a718 <HAL_UART_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a688:	b2db      	uxtb	r3, r3
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d111      	bne.n	800a6b2 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f000 fc62 	bl	800af60 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d102      	bne.n	800a6aa <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	4a1e      	ldr	r2, [pc, #120]	; (800a720 <HAL_UART_Init+0xb0>)
 800a6a8:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2224      	movs	r2, #36	; 0x24
 800a6b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	68da      	ldr	r2, [r3, #12]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a6c8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 ff84 	bl	800b5d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	691a      	ldr	r2, [r3, #16]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a6de:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	695a      	ldr	r2, [r3, #20]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a6ee:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	68da      	ldr	r2, [r3, #12]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a6fe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2200      	movs	r2, #0
 800a704:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2220      	movs	r2, #32
 800a70a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2220      	movs	r2, #32
 800a712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a716:	2300      	movs	r3, #0
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3708      	adds	r7, #8
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}
 800a720:	080050fd 	.word	0x080050fd

0800a724 <HAL_UART_RegisterCallback>:
  *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID, pUART_CallbackTypeDef pCallback)
{
 800a724:	b480      	push	{r7}
 800a726:	b087      	sub	sp, #28
 800a728:	af00      	add	r7, sp, #0
 800a72a:	60f8      	str	r0, [r7, #12]
 800a72c:	460b      	mov	r3, r1
 800a72e:	607a      	str	r2, [r7, #4]
 800a730:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a732:	2300      	movs	r3, #0
 800a734:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d107      	bne.n	800a74c <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a740:	f043 0220 	orr.w	r2, r3, #32
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a748:	2301      	movs	r3, #1
 800a74a:	e08c      	b.n	800a866 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a752:	2b01      	cmp	r3, #1
 800a754:	d101      	bne.n	800a75a <HAL_UART_RegisterCallback+0x36>
 800a756:	2302      	movs	r3, #2
 800a758:	e085      	b.n	800a866 <HAL_UART_RegisterCallback+0x142>
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2201      	movs	r2, #1
 800a75e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a768:	b2db      	uxtb	r3, r3
 800a76a:	2b20      	cmp	r3, #32
 800a76c:	d151      	bne.n	800a812 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800a76e:	7afb      	ldrb	r3, [r7, #11]
 800a770:	2b0c      	cmp	r3, #12
 800a772:	d845      	bhi.n	800a800 <HAL_UART_RegisterCallback+0xdc>
 800a774:	a201      	add	r2, pc, #4	; (adr r2, 800a77c <HAL_UART_RegisterCallback+0x58>)
 800a776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a77a:	bf00      	nop
 800a77c:	0800a7b1 	.word	0x0800a7b1
 800a780:	0800a7b9 	.word	0x0800a7b9
 800a784:	0800a7c1 	.word	0x0800a7c1
 800a788:	0800a7c9 	.word	0x0800a7c9
 800a78c:	0800a7d1 	.word	0x0800a7d1
 800a790:	0800a7d9 	.word	0x0800a7d9
 800a794:	0800a7e1 	.word	0x0800a7e1
 800a798:	0800a7e9 	.word	0x0800a7e9
 800a79c:	0800a801 	.word	0x0800a801
 800a7a0:	0800a801 	.word	0x0800a801
 800a7a4:	0800a801 	.word	0x0800a801
 800a7a8:	0800a7f1 	.word	0x0800a7f1
 800a7ac:	0800a7f9 	.word	0x0800a7f9
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	687a      	ldr	r2, [r7, #4]
 800a7b4:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800a7b6:	e051      	b.n	800a85c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800a7be:	e04d      	b.n	800a85c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a7c6:	e049      	b.n	800a85c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	687a      	ldr	r2, [r7, #4]
 800a7cc:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a7ce:	e045      	b.n	800a85c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a7d6:	e041      	b.n	800a85c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a7de:	e03d      	b.n	800a85c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	687a      	ldr	r2, [r7, #4]
 800a7e4:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a7e6:	e039      	b.n	800a85c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	687a      	ldr	r2, [r7, #4]
 800a7ec:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a7ee:	e035      	b.n	800a85c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	687a      	ldr	r2, [r7, #4]
 800a7f4:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a7f6:	e031      	b.n	800a85c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a7fe:	e02d      	b.n	800a85c <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a804:	f043 0220 	orr.w	r2, r3, #32
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800a80c:	2301      	movs	r3, #1
 800a80e:	75fb      	strb	r3, [r7, #23]
        break;
 800a810:	e024      	b.n	800a85c <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d116      	bne.n	800a84c <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800a81e:	7afb      	ldrb	r3, [r7, #11]
 800a820:	2b0b      	cmp	r3, #11
 800a822:	d002      	beq.n	800a82a <HAL_UART_RegisterCallback+0x106>
 800a824:	2b0c      	cmp	r3, #12
 800a826:	d004      	beq.n	800a832 <HAL_UART_RegisterCallback+0x10e>
 800a828:	e007      	b.n	800a83a <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	687a      	ldr	r2, [r7, #4]
 800a82e:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a830:	e014      	b.n	800a85c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	687a      	ldr	r2, [r7, #4]
 800a836:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a838:	e010      	b.n	800a85c <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a83e:	f043 0220 	orr.w	r2, r3, #32
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800a846:	2301      	movs	r3, #1
 800a848:	75fb      	strb	r3, [r7, #23]
        break;
 800a84a:	e007      	b.n	800a85c <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a850:	f043 0220 	orr.w	r2, r3, #32
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800a858:	2301      	movs	r3, #1
 800a85a:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2200      	movs	r2, #0
 800a860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a864:	7dfb      	ldrb	r3, [r7, #23]
}
 800a866:	4618      	mov	r0, r3
 800a868:	371c      	adds	r7, #28
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bc80      	pop	{r7}
 800a86e:	4770      	bx	lr

0800a870 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b08a      	sub	sp, #40	; 0x28
 800a874:	af02      	add	r7, sp, #8
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	60b9      	str	r1, [r7, #8]
 800a87a:	603b      	str	r3, [r7, #0]
 800a87c:	4613      	mov	r3, r2
 800a87e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a880:	2300      	movs	r3, #0
 800a882:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	2b20      	cmp	r3, #32
 800a88e:	d17c      	bne.n	800a98a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d002      	beq.n	800a89c <HAL_UART_Transmit+0x2c>
 800a896:	88fb      	ldrh	r3, [r7, #6]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d101      	bne.n	800a8a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a89c:	2301      	movs	r3, #1
 800a89e:	e075      	b.n	800a98c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	d101      	bne.n	800a8ae <HAL_UART_Transmit+0x3e>
 800a8aa:	2302      	movs	r3, #2
 800a8ac:	e06e      	b.n	800a98c <HAL_UART_Transmit+0x11c>
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2221      	movs	r2, #33	; 0x21
 800a8c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a8c4:	f7fb fa74 	bl	8005db0 <HAL_GetTick>
 800a8c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	88fa      	ldrh	r2, [r7, #6]
 800a8ce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	88fa      	ldrh	r2, [r7, #6]
 800a8d4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	689b      	ldr	r3, [r3, #8]
 800a8da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8de:	d108      	bne.n	800a8f2 <HAL_UART_Transmit+0x82>
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	691b      	ldr	r3, [r3, #16]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d104      	bne.n	800a8f2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	61bb      	str	r3, [r7, #24]
 800a8f0:	e003      	b.n	800a8fa <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a902:	e02a      	b.n	800a95a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	9300      	str	r3, [sp, #0]
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	2200      	movs	r2, #0
 800a90c:	2180      	movs	r1, #128	; 0x80
 800a90e:	68f8      	ldr	r0, [r7, #12]
 800a910:	f000 fc11 	bl	800b136 <UART_WaitOnFlagUntilTimeout>
 800a914:	4603      	mov	r3, r0
 800a916:	2b00      	cmp	r3, #0
 800a918:	d001      	beq.n	800a91e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a91a:	2303      	movs	r3, #3
 800a91c:	e036      	b.n	800a98c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a91e:	69fb      	ldr	r3, [r7, #28]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d10b      	bne.n	800a93c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a924:	69bb      	ldr	r3, [r7, #24]
 800a926:	881b      	ldrh	r3, [r3, #0]
 800a928:	461a      	mov	r2, r3
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a932:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a934:	69bb      	ldr	r3, [r7, #24]
 800a936:	3302      	adds	r3, #2
 800a938:	61bb      	str	r3, [r7, #24]
 800a93a:	e007      	b.n	800a94c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a93c:	69fb      	ldr	r3, [r7, #28]
 800a93e:	781a      	ldrb	r2, [r3, #0]
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a946:	69fb      	ldr	r3, [r7, #28]
 800a948:	3301      	adds	r3, #1
 800a94a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a950:	b29b      	uxth	r3, r3
 800a952:	3b01      	subs	r3, #1
 800a954:	b29a      	uxth	r2, r3
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a95e:	b29b      	uxth	r3, r3
 800a960:	2b00      	cmp	r3, #0
 800a962:	d1cf      	bne.n	800a904 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	9300      	str	r3, [sp, #0]
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	2200      	movs	r2, #0
 800a96c:	2140      	movs	r1, #64	; 0x40
 800a96e:	68f8      	ldr	r0, [r7, #12]
 800a970:	f000 fbe1 	bl	800b136 <UART_WaitOnFlagUntilTimeout>
 800a974:	4603      	mov	r3, r0
 800a976:	2b00      	cmp	r3, #0
 800a978:	d001      	beq.n	800a97e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a97a:	2303      	movs	r3, #3
 800a97c:	e006      	b.n	800a98c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2220      	movs	r2, #32
 800a982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a986:	2300      	movs	r3, #0
 800a988:	e000      	b.n	800a98c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a98a:	2302      	movs	r3, #2
  }
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3720      	adds	r7, #32
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a994:	b480      	push	{r7}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	60b9      	str	r1, [r7, #8]
 800a99e:	4613      	mov	r3, r2
 800a9a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9a8:	b2db      	uxtb	r3, r3
 800a9aa:	2b20      	cmp	r3, #32
 800a9ac:	d130      	bne.n	800aa10 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d002      	beq.n	800a9ba <HAL_UART_Transmit_IT+0x26>
 800a9b4:	88fb      	ldrh	r3, [r7, #6]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d101      	bne.n	800a9be <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	e029      	b.n	800aa12 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d101      	bne.n	800a9cc <HAL_UART_Transmit_IT+0x38>
 800a9c8:	2302      	movs	r3, #2
 800a9ca:	e022      	b.n	800aa12 <HAL_UART_Transmit_IT+0x7e>
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	68ba      	ldr	r2, [r7, #8]
 800a9d8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	88fa      	ldrh	r2, [r7, #6]
 800a9de:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	88fa      	ldrh	r2, [r7, #6]
 800a9e4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2221      	movs	r2, #33	; 0x21
 800a9f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	68da      	ldr	r2, [r3, #12]
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800aa0a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	e000      	b.n	800aa12 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800aa10:	2302      	movs	r3, #2
  }
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3714      	adds	r7, #20
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bc80      	pop	{r7}
 800aa1a:	4770      	bx	lr

0800aa1c <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b086      	sub	sp, #24
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	4613      	mov	r3, r2
 800aa28:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa30:	b2db      	uxtb	r3, r3
 800aa32:	2b20      	cmp	r3, #32
 800aa34:	d13c      	bne.n	800aab0 <HAL_UARTEx_ReceiveToIdle_IT+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d002      	beq.n	800aa42 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800aa3c:	88fb      	ldrh	r3, [r7, #6]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d101      	bne.n	800aa46 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800aa42:	2301      	movs	r3, #1
 800aa44:	e035      	b.n	800aab2 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
    }

    __HAL_LOCK(huart);
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d101      	bne.n	800aa54 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 800aa50:	2302      	movs	r3, #2
 800aa52:	e02e      	b.n	800aab2 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2201      	movs	r2, #1
 800aa58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800aa62:	88fb      	ldrh	r3, [r7, #6]
 800aa64:	461a      	mov	r2, r3
 800aa66:	68b9      	ldr	r1, [r7, #8]
 800aa68:	68f8      	ldr	r0, [r7, #12]
 800aa6a:	f000 fbae 	bl	800b1ca <UART_Start_Receive_IT>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800aa72:	7dfb      	ldrb	r3, [r7, #23]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d119      	bne.n	800aaac <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d113      	bne.n	800aaa8 <HAL_UARTEx_ReceiveToIdle_IT+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aa80:	2300      	movs	r3, #0
 800aa82:	613b      	str	r3, [r7, #16]
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	613b      	str	r3, [r7, #16]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	613b      	str	r3, [r7, #16]
 800aa94:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	68da      	ldr	r2, [r3, #12]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f042 0210 	orr.w	r2, r2, #16
 800aaa4:	60da      	str	r2, [r3, #12]
 800aaa6:	e001      	b.n	800aaac <HAL_UARTEx_ReceiveToIdle_IT+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 800aaac:	7dfb      	ldrb	r3, [r7, #23]
 800aaae:	e000      	b.n	800aab2 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  }
  else
  {
    return HAL_BUSY;
 800aab0:	2302      	movs	r3, #2
  }
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3718      	adds	r7, #24
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}

0800aaba <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aaba:	b580      	push	{r7, lr}
 800aabc:	b086      	sub	sp, #24
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	60f8      	str	r0, [r7, #12]
 800aac2:	60b9      	str	r1, [r7, #8]
 800aac4:	4613      	mov	r3, r2
 800aac6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aace:	b2db      	uxtb	r3, r3
 800aad0:	2b20      	cmp	r3, #32
 800aad2:	d13c      	bne.n	800ab4e <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d002      	beq.n	800aae0 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800aada:	88fb      	ldrh	r3, [r7, #6]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d101      	bne.n	800aae4 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800aae0:	2301      	movs	r3, #1
 800aae2:	e035      	b.n	800ab50 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aaea:	2b01      	cmp	r3, #1
 800aaec:	d101      	bne.n	800aaf2 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800aaee:	2302      	movs	r3, #2
 800aaf0:	e02e      	b.n	800ab50 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	2201      	movs	r2, #1
 800aafe:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800ab00:	88fb      	ldrh	r3, [r7, #6]
 800ab02:	461a      	mov	r2, r3
 800ab04:	68b9      	ldr	r1, [r7, #8]
 800ab06:	68f8      	ldr	r0, [r7, #12]
 800ab08:	f000 fb98 	bl	800b23c <UART_Start_Receive_DMA>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800ab10:	7dfb      	ldrb	r3, [r7, #23]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d119      	bne.n	800ab4a <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab1a:	2b01      	cmp	r3, #1
 800ab1c:	d113      	bne.n	800ab46 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ab1e:	2300      	movs	r3, #0
 800ab20:	613b      	str	r3, [r7, #16]
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	613b      	str	r3, [r7, #16]
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	613b      	str	r3, [r7, #16]
 800ab32:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	68da      	ldr	r2, [r3, #12]
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f042 0210 	orr.w	r2, r2, #16
 800ab42:	60da      	str	r2, [r3, #12]
 800ab44:	e001      	b.n	800ab4a <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800ab46:	2301      	movs	r3, #1
 800ab48:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 800ab4a:	7dfb      	ldrb	r3, [r7, #23]
 800ab4c:	e000      	b.n	800ab50 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 800ab4e:	2302      	movs	r3, #2
  }
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3718      	adds	r7, #24
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b08a      	sub	sp, #40	; 0x28
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	68db      	ldr	r3, [r3, #12]
 800ab6e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	695b      	ldr	r3, [r3, #20]
 800ab76:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ab80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab82:	f003 030f 	and.w	r3, r3, #15
 800ab86:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800ab88:	69bb      	ldr	r3, [r7, #24]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d10d      	bne.n	800abaa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ab8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab90:	f003 0320 	and.w	r3, r3, #32
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d008      	beq.n	800abaa <HAL_UART_IRQHandler+0x52>
 800ab98:	6a3b      	ldr	r3, [r7, #32]
 800ab9a:	f003 0320 	and.w	r3, r3, #32
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d003      	beq.n	800abaa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f000 fc6c 	bl	800b480 <UART_Receive_IT>
      return;
 800aba8:	e180      	b.n	800aeac <HAL_UART_IRQHandler+0x354>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800abaa:	69bb      	ldr	r3, [r7, #24]
 800abac:	2b00      	cmp	r3, #0
 800abae:	f000 80b4 	beq.w	800ad1a <HAL_UART_IRQHandler+0x1c2>
 800abb2:	69fb      	ldr	r3, [r7, #28]
 800abb4:	f003 0301 	and.w	r3, r3, #1
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d105      	bne.n	800abc8 <HAL_UART_IRQHandler+0x70>
 800abbc:	6a3b      	ldr	r3, [r7, #32]
 800abbe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	f000 80a9 	beq.w	800ad1a <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800abc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abca:	f003 0301 	and.w	r3, r3, #1
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d00a      	beq.n	800abe8 <HAL_UART_IRQHandler+0x90>
 800abd2:	6a3b      	ldr	r3, [r7, #32]
 800abd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d005      	beq.n	800abe8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe0:	f043 0201 	orr.w	r2, r3, #1
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800abe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abea:	f003 0304 	and.w	r3, r3, #4
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d00a      	beq.n	800ac08 <HAL_UART_IRQHandler+0xb0>
 800abf2:	69fb      	ldr	r3, [r7, #28]
 800abf4:	f003 0301 	and.w	r3, r3, #1
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d005      	beq.n	800ac08 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac00:	f043 0202 	orr.w	r2, r3, #2
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ac08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0a:	f003 0302 	and.w	r3, r3, #2
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d00a      	beq.n	800ac28 <HAL_UART_IRQHandler+0xd0>
 800ac12:	69fb      	ldr	r3, [r7, #28]
 800ac14:	f003 0301 	and.w	r3, r3, #1
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d005      	beq.n	800ac28 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac20:	f043 0204 	orr.w	r2, r3, #4
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800ac28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2a:	f003 0308 	and.w	r3, r3, #8
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d00f      	beq.n	800ac52 <HAL_UART_IRQHandler+0xfa>
 800ac32:	6a3b      	ldr	r3, [r7, #32]
 800ac34:	f003 0320 	and.w	r3, r3, #32
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d104      	bne.n	800ac46 <HAL_UART_IRQHandler+0xee>
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	f003 0301 	and.w	r3, r3, #1
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d005      	beq.n	800ac52 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac4a:	f043 0208 	orr.w	r2, r3, #8
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	f000 8123 	beq.w	800aea2 <HAL_UART_IRQHandler+0x34a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ac5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5e:	f003 0320 	and.w	r3, r3, #32
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d007      	beq.n	800ac76 <HAL_UART_IRQHandler+0x11e>
 800ac66:	6a3b      	ldr	r3, [r7, #32]
 800ac68:	f003 0320 	and.w	r3, r3, #32
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d002      	beq.n	800ac76 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f000 fc05 	bl	800b480 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	695b      	ldr	r3, [r3, #20]
 800ac7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	bf14      	ite	ne
 800ac84:	2301      	movne	r3, #1
 800ac86:	2300      	moveq	r3, #0
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac90:	f003 0308 	and.w	r3, r3, #8
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d102      	bne.n	800ac9e <HAL_UART_IRQHandler+0x146>
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d033      	beq.n	800ad06 <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 fb45 	bl	800b32e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	695b      	ldr	r3, [r3, #20]
 800acaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d024      	beq.n	800acfc <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	695a      	ldr	r2, [r3, #20]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800acc0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d013      	beq.n	800acf2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acce:	4a79      	ldr	r2, [pc, #484]	; (800aeb4 <HAL_UART_IRQHandler+0x35c>)
 800acd0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd6:	4618      	mov	r0, r3
 800acd8:	f7fb fa64 	bl	80061a4 <HAL_DMA_Abort_IT>
 800acdc:	4603      	mov	r3, r0
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d019      	beq.n	800ad16 <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ace6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800acec:	4610      	mov	r0, r2
 800acee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acf0:	e011      	b.n	800ad16 <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acfa:	e00c      	b.n	800ad16 <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad04:	e007      	b.n	800ad16 <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2200      	movs	r2, #0
 800ad12:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800ad14:	e0c5      	b.n	800aea2 <HAL_UART_IRQHandler+0x34a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad16:	bf00      	nop
    return;
 800ad18:	e0c3      	b.n	800aea2 <HAL_UART_IRQHandler+0x34a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	f040 80a3 	bne.w	800ae6a <HAL_UART_IRQHandler+0x312>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800ad24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad26:	f003 0310 	and.w	r3, r3, #16
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	f000 809d 	beq.w	800ae6a <HAL_UART_IRQHandler+0x312>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800ad30:	6a3b      	ldr	r3, [r7, #32]
 800ad32:	f003 0310 	and.w	r3, r3, #16
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	f000 8097 	beq.w	800ae6a <HAL_UART_IRQHandler+0x312>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	60fb      	str	r3, [r7, #12]
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	60fb      	str	r3, [r7, #12]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	60fb      	str	r3, [r7, #12]
 800ad50:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	695b      	ldr	r3, [r3, #20]
 800ad58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d04f      	beq.n	800ae00 <HAL_UART_IRQHandler+0x2a8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800ad6a:	8a3b      	ldrh	r3, [r7, #16]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	f000 809a 	beq.w	800aea6 <HAL_UART_IRQHandler+0x34e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ad76:	8a3a      	ldrh	r2, [r7, #16]
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	f080 8094 	bcs.w	800aea6 <HAL_UART_IRQHandler+0x34e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	8a3a      	ldrh	r2, [r7, #16]
 800ad82:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad88:	699b      	ldr	r3, [r3, #24]
 800ad8a:	2b20      	cmp	r3, #32
 800ad8c:	d02b      	beq.n	800ade6 <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	68da      	ldr	r2, [r3, #12]
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ad9c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	695a      	ldr	r2, [r3, #20]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f022 0201 	bic.w	r2, r2, #1
 800adac:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	695a      	ldr	r2, [r3, #20]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800adbc:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2220      	movs	r2, #32
 800adc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	68da      	ldr	r2, [r3, #12]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f022 0210 	bic.w	r2, r2, #16
 800adda:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ade0:	4618      	mov	r0, r3
 800ade2:	f7fb f9a4 	bl	800612e <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800adf2:	b292      	uxth	r2, r2
 800adf4:	1a8a      	subs	r2, r1, r2
 800adf6:	b292      	uxth	r2, r2
 800adf8:	4611      	mov	r1, r2
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 800adfe:	e052      	b.n	800aea6 <HAL_UART_IRQHandler+0x34e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ae08:	b29b      	uxth	r3, r3
 800ae0a:	1ad3      	subs	r3, r2, r3
 800ae0c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d048      	beq.n	800aeaa <HAL_UART_IRQHandler+0x352>
          &&(nb_rx_data > 0U) )
 800ae18:	8a7b      	ldrh	r3, [r7, #18]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d045      	beq.n	800aeaa <HAL_UART_IRQHandler+0x352>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	68da      	ldr	r2, [r3, #12]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ae2c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	695a      	ldr	r2, [r3, #20]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f022 0201 	bic.w	r2, r2, #1
 800ae3c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2220      	movs	r2, #32
 800ae42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	68da      	ldr	r2, [r3, #12]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f022 0210 	bic.w	r2, r2, #16
 800ae5a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae60:	8a7a      	ldrh	r2, [r7, #18]
 800ae62:	4611      	mov	r1, r2
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 800ae68:	e01f      	b.n	800aeaa <HAL_UART_IRQHandler+0x352>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ae6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d008      	beq.n	800ae86 <HAL_UART_IRQHandler+0x32e>
 800ae74:	6a3b      	ldr	r3, [r7, #32]
 800ae76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d003      	beq.n	800ae86 <HAL_UART_IRQHandler+0x32e>
  {
    UART_Transmit_IT(huart);
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 fa96 	bl	800b3b0 <UART_Transmit_IT>
    return;
 800ae84:	e012      	b.n	800aeac <HAL_UART_IRQHandler+0x354>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ae86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d00d      	beq.n	800aeac <HAL_UART_IRQHandler+0x354>
 800ae90:	6a3b      	ldr	r3, [r7, #32]
 800ae92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d008      	beq.n	800aeac <HAL_UART_IRQHandler+0x354>
  {
    UART_EndTransmit_IT(huart);
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 fad7 	bl	800b44e <UART_EndTransmit_IT>
    return;
 800aea0:	e004      	b.n	800aeac <HAL_UART_IRQHandler+0x354>
    return;
 800aea2:	bf00      	nop
 800aea4:	e002      	b.n	800aeac <HAL_UART_IRQHandler+0x354>
      return;
 800aea6:	bf00      	nop
 800aea8:	e000      	b.n	800aeac <HAL_UART_IRQHandler+0x354>
      return;
 800aeaa:	bf00      	nop
  }
}
 800aeac:	3728      	adds	r7, #40	; 0x28
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	bf00      	nop
 800aeb4:	0800b387 	.word	0x0800b387

0800aeb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b083      	sub	sp, #12
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800aec0:	bf00      	nop
 800aec2:	370c      	adds	r7, #12
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bc80      	pop	{r7}
 800aec8:	4770      	bx	lr

0800aeca <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aeca:	b480      	push	{r7}
 800aecc:	b083      	sub	sp, #12
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800aed2:	bf00      	nop
 800aed4:	370c      	adds	r7, #12
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bc80      	pop	{r7}
 800aeda:	4770      	bx	lr

0800aedc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800aedc:	b480      	push	{r7}
 800aede:	b083      	sub	sp, #12
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800aee4:	bf00      	nop
 800aee6:	370c      	adds	r7, #12
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bc80      	pop	{r7}
 800aeec:	4770      	bx	lr

0800aeee <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aeee:	b480      	push	{r7}
 800aef0:	b083      	sub	sp, #12
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800aef6:	bf00      	nop
 800aef8:	370c      	adds	r7, #12
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bc80      	pop	{r7}
 800aefe:	4770      	bx	lr

0800af00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800af00:	b480      	push	{r7}
 800af02:	b083      	sub	sp, #12
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800af08:	bf00      	nop
 800af0a:	370c      	adds	r7, #12
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bc80      	pop	{r7}
 800af10:	4770      	bx	lr

0800af12 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800af12:	b480      	push	{r7}
 800af14:	b083      	sub	sp, #12
 800af16:	af00      	add	r7, sp, #0
 800af18:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800af1a:	bf00      	nop
 800af1c:	370c      	adds	r7, #12
 800af1e:	46bd      	mov	sp, r7
 800af20:	bc80      	pop	{r7}
 800af22:	4770      	bx	lr

0800af24 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800af24:	b480      	push	{r7}
 800af26:	b083      	sub	sp, #12
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800af2c:	bf00      	nop
 800af2e:	370c      	adds	r7, #12
 800af30:	46bd      	mov	sp, r7
 800af32:	bc80      	pop	{r7}
 800af34:	4770      	bx	lr

0800af36 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800af36:	b480      	push	{r7}
 800af38:	b083      	sub	sp, #12
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800af3e:	bf00      	nop
 800af40:	370c      	adds	r7, #12
 800af42:	46bd      	mov	sp, r7
 800af44:	bc80      	pop	{r7}
 800af46:	4770      	bx	lr

0800af48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800af48:	b480      	push	{r7}
 800af4a:	b083      	sub	sp, #12
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	460b      	mov	r3, r1
 800af52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800af54:	bf00      	nop
 800af56:	370c      	adds	r7, #12
 800af58:	46bd      	mov	sp, r7
 800af5a:	bc80      	pop	{r7}
 800af5c:	4770      	bx	lr
	...

0800af60 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	4a0f      	ldr	r2, [pc, #60]	; (800afa8 <UART_InitCallbacksToDefault+0x48>)
 800af6c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	4a0e      	ldr	r2, [pc, #56]	; (800afac <UART_InitCallbacksToDefault+0x4c>)
 800af72:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	4a0e      	ldr	r2, [pc, #56]	; (800afb0 <UART_InitCallbacksToDefault+0x50>)
 800af78:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	4a0d      	ldr	r2, [pc, #52]	; (800afb4 <UART_InitCallbacksToDefault+0x54>)
 800af7e:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	4a0d      	ldr	r2, [pc, #52]	; (800afb8 <UART_InitCallbacksToDefault+0x58>)
 800af84:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	4a0c      	ldr	r2, [pc, #48]	; (800afbc <UART_InitCallbacksToDefault+0x5c>)
 800af8a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	4a0c      	ldr	r2, [pc, #48]	; (800afc0 <UART_InitCallbacksToDefault+0x60>)
 800af90:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	4a0b      	ldr	r2, [pc, #44]	; (800afc4 <UART_InitCallbacksToDefault+0x64>)
 800af96:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	4a0b      	ldr	r2, [pc, #44]	; (800afc8 <UART_InitCallbacksToDefault+0x68>)
 800af9c:	669a      	str	r2, [r3, #104]	; 0x68

}
 800af9e:	bf00      	nop
 800afa0:	370c      	adds	r7, #12
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bc80      	pop	{r7}
 800afa6:	4770      	bx	lr
 800afa8:	0800aecb 	.word	0x0800aecb
 800afac:	0800aeb9 	.word	0x0800aeb9
 800afb0:	0800aeef 	.word	0x0800aeef
 800afb4:	0800aedd 	.word	0x0800aedd
 800afb8:	0800af01 	.word	0x0800af01
 800afbc:	0800af13 	.word	0x0800af13
 800afc0:	0800af25 	.word	0x0800af25
 800afc4:	0800af37 	.word	0x0800af37
 800afc8:	0800af49 	.word	0x0800af49

0800afcc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f003 0320 	and.w	r3, r3, #32
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d12a      	bne.n	800b03e <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2200      	movs	r2, #0
 800afec:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	68da      	ldr	r2, [r3, #12]
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800affc:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	695a      	ldr	r2, [r3, #20]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f022 0201 	bic.w	r2, r2, #1
 800b00c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	695a      	ldr	r2, [r3, #20]
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b01c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	2220      	movs	r2, #32
 800b022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	d107      	bne.n	800b03e <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	68da      	ldr	r2, [r3, #12]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f022 0210 	bic.w	r2, r2, #16
 800b03c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b042:	2b01      	cmp	r3, #1
 800b044:	d107      	bne.n	800b056 <UART_DMAReceiveCplt+0x8a>
  {  
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b04a:	68fa      	ldr	r2, [r7, #12]
 800b04c:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800b04e:	4611      	mov	r1, r2
 800b050:	68f8      	ldr	r0, [r7, #12]
 800b052:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b054:	e003      	b.n	800b05e <UART_DMAReceiveCplt+0x92>
    huart->RxCpltCallback(huart);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b05a:	68f8      	ldr	r0, [r7, #12]
 800b05c:	4798      	blx	r3
}
 800b05e:	bf00      	nop
 800b060:	3710      	adds	r7, #16
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}

0800b066 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b066:	b580      	push	{r7, lr}
 800b068:	b084      	sub	sp, #16
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b072:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d109      	bne.n	800b090 <UART_DMARxHalfCplt+0x2a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b080:	68fa      	ldr	r2, [r7, #12]
 800b082:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800b084:	0852      	lsrs	r2, r2, #1
 800b086:	b292      	uxth	r2, r2
 800b088:	4611      	mov	r1, r2
 800b08a:	68f8      	ldr	r0, [r7, #12]
 800b08c:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b08e:	e003      	b.n	800b098 <UART_DMARxHalfCplt+0x32>
    huart->RxHalfCpltCallback(huart);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b094:	68f8      	ldr	r0, [r7, #12]
 800b096:	4798      	blx	r3
}
 800b098:	bf00      	nop
 800b09a:	3710      	adds	r7, #16
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b084      	sub	sp, #16
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	695b      	ldr	r3, [r3, #20]
 800b0b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	bf14      	ite	ne
 800b0c0:	2301      	movne	r3, #1
 800b0c2:	2300      	moveq	r3, #0
 800b0c4:	b2db      	uxtb	r3, r3
 800b0c6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0ce:	b2db      	uxtb	r3, r3
 800b0d0:	2b21      	cmp	r3, #33	; 0x21
 800b0d2:	d108      	bne.n	800b0e6 <UART_DMAError+0x46>
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d005      	beq.n	800b0e6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b0e0:	68b8      	ldr	r0, [r7, #8]
 800b0e2:	f000 f90f 	bl	800b304 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	695b      	ldr	r3, [r3, #20]
 800b0ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	bf14      	ite	ne
 800b0f4:	2301      	movne	r3, #1
 800b0f6:	2300      	moveq	r3, #0
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b102:	b2db      	uxtb	r3, r3
 800b104:	2b22      	cmp	r3, #34	; 0x22
 800b106:	d108      	bne.n	800b11a <UART_DMAError+0x7a>
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d005      	beq.n	800b11a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	2200      	movs	r2, #0
 800b112:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b114:	68b8      	ldr	r0, [r7, #8]
 800b116:	f000 f90a 	bl	800b32e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b11e:	f043 0210 	orr.w	r2, r3, #16
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b12a:	68b8      	ldr	r0, [r7, #8]
 800b12c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b12e:	bf00      	nop
 800b130:	3710      	adds	r7, #16
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}

0800b136 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b136:	b580      	push	{r7, lr}
 800b138:	b084      	sub	sp, #16
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	60f8      	str	r0, [r7, #12]
 800b13e:	60b9      	str	r1, [r7, #8]
 800b140:	603b      	str	r3, [r7, #0]
 800b142:	4613      	mov	r3, r2
 800b144:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b146:	e02c      	b.n	800b1a2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b148:	69bb      	ldr	r3, [r7, #24]
 800b14a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b14e:	d028      	beq.n	800b1a2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b150:	69bb      	ldr	r3, [r7, #24]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d007      	beq.n	800b166 <UART_WaitOnFlagUntilTimeout+0x30>
 800b156:	f7fa fe2b 	bl	8005db0 <HAL_GetTick>
 800b15a:	4602      	mov	r2, r0
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	1ad3      	subs	r3, r2, r3
 800b160:	69ba      	ldr	r2, [r7, #24]
 800b162:	429a      	cmp	r2, r3
 800b164:	d21d      	bcs.n	800b1a2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	68da      	ldr	r2, [r3, #12]
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b174:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	695a      	ldr	r2, [r3, #20]
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f022 0201 	bic.w	r2, r2, #1
 800b184:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2220      	movs	r2, #32
 800b18a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2220      	movs	r2, #32
 800b192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2200      	movs	r2, #0
 800b19a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b19e:	2303      	movs	r3, #3
 800b1a0:	e00f      	b.n	800b1c2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	4013      	ands	r3, r2
 800b1ac:	68ba      	ldr	r2, [r7, #8]
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	bf0c      	ite	eq
 800b1b2:	2301      	moveq	r3, #1
 800b1b4:	2300      	movne	r3, #0
 800b1b6:	b2db      	uxtb	r3, r3
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	79fb      	ldrb	r3, [r7, #7]
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d0c3      	beq.n	800b148 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b1c0:	2300      	movs	r3, #0
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3710      	adds	r7, #16
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}

0800b1ca <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b1ca:	b480      	push	{r7}
 800b1cc:	b085      	sub	sp, #20
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	60f8      	str	r0, [r7, #12]
 800b1d2:	60b9      	str	r1, [r7, #8]
 800b1d4:	4613      	mov	r3, r2
 800b1d6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	68ba      	ldr	r2, [r7, #8]
 800b1dc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	88fa      	ldrh	r2, [r7, #6]
 800b1e2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	88fa      	ldrh	r2, [r7, #6]
 800b1e8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2222      	movs	r2, #34	; 0x22
 800b1f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	68da      	ldr	r2, [r3, #12]
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b20e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	695a      	ldr	r2, [r3, #20]
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f042 0201 	orr.w	r2, r2, #1
 800b21e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	68da      	ldr	r2, [r3, #12]
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f042 0220 	orr.w	r2, r2, #32
 800b22e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b230:	2300      	movs	r3, #0
}
 800b232:	4618      	mov	r0, r3
 800b234:	3714      	adds	r7, #20
 800b236:	46bd      	mov	sp, r7
 800b238:	bc80      	pop	{r7}
 800b23a:	4770      	bx	lr

0800b23c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b086      	sub	sp, #24
 800b240:	af00      	add	r7, sp, #0
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	4613      	mov	r3, r2
 800b248:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b24a:	68ba      	ldr	r2, [r7, #8]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	88fa      	ldrh	r2, [r7, #6]
 800b254:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	2200      	movs	r2, #0
 800b25a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2222      	movs	r2, #34	; 0x22
 800b260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b268:	4a23      	ldr	r2, [pc, #140]	; (800b2f8 <UART_Start_Receive_DMA+0xbc>)
 800b26a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b270:	4a22      	ldr	r2, [pc, #136]	; (800b2fc <UART_Start_Receive_DMA+0xc0>)
 800b272:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b278:	4a21      	ldr	r2, [pc, #132]	; (800b300 <UART_Start_Receive_DMA+0xc4>)
 800b27a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b280:	2200      	movs	r2, #0
 800b282:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b284:	f107 0308 	add.w	r3, r7, #8
 800b288:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	3304      	adds	r3, #4
 800b294:	4619      	mov	r1, r3
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	681a      	ldr	r2, [r3, #0]
 800b29a:	88fb      	ldrh	r3, [r7, #6]
 800b29c:	f7fa fee8 	bl	8006070 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	613b      	str	r3, [r7, #16]
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	613b      	str	r3, [r7, #16]
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	613b      	str	r3, [r7, #16]
 800b2b4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	68da      	ldr	r2, [r3, #12]
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b2cc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	695a      	ldr	r2, [r3, #20]
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f042 0201 	orr.w	r2, r2, #1
 800b2dc:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	695a      	ldr	r2, [r3, #20]
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b2ec:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800b2ee:	2300      	movs	r3, #0
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3718      	adds	r7, #24
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}
 800b2f8:	0800afcd 	.word	0x0800afcd
 800b2fc:	0800b067 	.word	0x0800b067
 800b300:	0800b0a1 	.word	0x0800b0a1

0800b304 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b304:	b480      	push	{r7}
 800b306:	b083      	sub	sp, #12
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	68da      	ldr	r2, [r3, #12]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b31a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2220      	movs	r2, #32
 800b320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b324:	bf00      	nop
 800b326:	370c      	adds	r7, #12
 800b328:	46bd      	mov	sp, r7
 800b32a:	bc80      	pop	{r7}
 800b32c:	4770      	bx	lr

0800b32e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b32e:	b480      	push	{r7}
 800b330:	b083      	sub	sp, #12
 800b332:	af00      	add	r7, sp, #0
 800b334:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	68da      	ldr	r2, [r3, #12]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b344:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	695a      	ldr	r2, [r3, #20]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f022 0201 	bic.w	r2, r2, #1
 800b354:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b35a:	2b01      	cmp	r3, #1
 800b35c:	d107      	bne.n	800b36e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	68da      	ldr	r2, [r3, #12]
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f022 0210 	bic.w	r2, r2, #16
 800b36c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2220      	movs	r2, #32
 800b372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2200      	movs	r2, #0
 800b37a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b37c:	bf00      	nop
 800b37e:	370c      	adds	r7, #12
 800b380:	46bd      	mov	sp, r7
 800b382:	bc80      	pop	{r7}
 800b384:	4770      	bx	lr

0800b386 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b386:	b580      	push	{r7, lr}
 800b388:	b084      	sub	sp, #16
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b392:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2200      	movs	r2, #0
 800b398:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2200      	movs	r2, #0
 800b39e:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3a4:	68f8      	ldr	r0, [r7, #12]
 800b3a6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3a8:	bf00      	nop
 800b3aa:	3710      	adds	r7, #16
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b085      	sub	sp, #20
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3be:	b2db      	uxtb	r3, r3
 800b3c0:	2b21      	cmp	r3, #33	; 0x21
 800b3c2:	d13e      	bne.n	800b442 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	689b      	ldr	r3, [r3, #8]
 800b3c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3cc:	d114      	bne.n	800b3f8 <UART_Transmit_IT+0x48>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	691b      	ldr	r3, [r3, #16]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d110      	bne.n	800b3f8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6a1b      	ldr	r3, [r3, #32]
 800b3da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	881b      	ldrh	r3, [r3, #0]
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b3ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6a1b      	ldr	r3, [r3, #32]
 800b3f0:	1c9a      	adds	r2, r3, #2
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	621a      	str	r2, [r3, #32]
 800b3f6:	e008      	b.n	800b40a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6a1b      	ldr	r3, [r3, #32]
 800b3fc:	1c59      	adds	r1, r3, #1
 800b3fe:	687a      	ldr	r2, [r7, #4]
 800b400:	6211      	str	r1, [r2, #32]
 800b402:	781a      	ldrb	r2, [r3, #0]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b40e:	b29b      	uxth	r3, r3
 800b410:	3b01      	subs	r3, #1
 800b412:	b29b      	uxth	r3, r3
 800b414:	687a      	ldr	r2, [r7, #4]
 800b416:	4619      	mov	r1, r3
 800b418:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d10f      	bne.n	800b43e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	68da      	ldr	r2, [r3, #12]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b42c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	68da      	ldr	r2, [r3, #12]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b43c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b43e:	2300      	movs	r3, #0
 800b440:	e000      	b.n	800b444 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b442:	2302      	movs	r3, #2
  }
}
 800b444:	4618      	mov	r0, r3
 800b446:	3714      	adds	r7, #20
 800b448:	46bd      	mov	sp, r7
 800b44a:	bc80      	pop	{r7}
 800b44c:	4770      	bx	lr

0800b44e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b44e:	b580      	push	{r7, lr}
 800b450:	b082      	sub	sp, #8
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	68da      	ldr	r2, [r3, #12]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b464:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2220      	movs	r2, #32
 800b46a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b476:	2300      	movs	r3, #0
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3708      	adds	r7, #8
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b086      	sub	sp, #24
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b48e:	b2db      	uxtb	r3, r3
 800b490:	2b22      	cmp	r3, #34	; 0x22
 800b492:	f040 809b 	bne.w	800b5cc <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	689b      	ldr	r3, [r3, #8]
 800b49a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b49e:	d117      	bne.n	800b4d0 <UART_Receive_IT+0x50>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	691b      	ldr	r3, [r3, #16]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d113      	bne.n	800b4d0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4b0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	b29b      	uxth	r3, r3
 800b4ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4be:	b29a      	uxth	r2, r3
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4c8:	1c9a      	adds	r2, r3, #2
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	629a      	str	r2, [r3, #40]	; 0x28
 800b4ce:	e026      	b.n	800b51e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4d4:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	689b      	ldr	r3, [r3, #8]
 800b4de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4e2:	d007      	beq.n	800b4f4 <UART_Receive_IT+0x74>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	689b      	ldr	r3, [r3, #8]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d10a      	bne.n	800b502 <UART_Receive_IT+0x82>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	691b      	ldr	r3, [r3, #16]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d106      	bne.n	800b502 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	b2da      	uxtb	r2, r3
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	701a      	strb	r2, [r3, #0]
 800b500:	e008      	b.n	800b514 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	b2db      	uxtb	r3, r3
 800b50a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b50e:	b2da      	uxtb	r2, r3
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b518:	1c5a      	adds	r2, r3, #1
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b522:	b29b      	uxth	r3, r3
 800b524:	3b01      	subs	r3, #1
 800b526:	b29b      	uxth	r3, r3
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	4619      	mov	r1, r3
 800b52c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d14a      	bne.n	800b5c8 <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	68da      	ldr	r2, [r3, #12]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f022 0220 	bic.w	r2, r2, #32
 800b540:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	68da      	ldr	r2, [r3, #12]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b550:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	695a      	ldr	r2, [r3, #20]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f022 0201 	bic.w	r2, r2, #1
 800b560:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2220      	movs	r2, #32
 800b566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b56e:	2b01      	cmp	r3, #1
 800b570:	d124      	bne.n	800b5bc <UART_Receive_IT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2200      	movs	r2, #0
 800b576:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	68da      	ldr	r2, [r3, #12]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f022 0210 	bic.w	r2, r2, #16
 800b586:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f003 0310 	and.w	r3, r3, #16
 800b592:	2b10      	cmp	r3, #16
 800b594:	d10a      	bne.n	800b5ac <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b596:	2300      	movs	r3, #0
 800b598:	60fb      	str	r3, [r7, #12]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	60fb      	str	r3, [r7, #12]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	60fb      	str	r3, [r7, #12]
 800b5aa:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800b5b4:	4611      	mov	r1, r2
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	4798      	blx	r3
 800b5ba:	e003      	b.n	800b5c4 <UART_Receive_IT+0x144>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	4798      	blx	r3
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	e002      	b.n	800b5ce <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	e000      	b.n	800b5ce <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 800b5cc:	2302      	movs	r3, #2
  }
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3718      	adds	r7, #24
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}
	...

0800b5d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b084      	sub	sp, #16
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	691b      	ldr	r3, [r3, #16]
 800b5e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	68da      	ldr	r2, [r3, #12]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	430a      	orrs	r2, r1
 800b5f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	689a      	ldr	r2, [r3, #8]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	691b      	ldr	r3, [r3, #16]
 800b5fe:	431a      	orrs	r2, r3
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	695b      	ldr	r3, [r3, #20]
 800b604:	4313      	orrs	r3, r2
 800b606:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800b612:	f023 030c 	bic.w	r3, r3, #12
 800b616:	687a      	ldr	r2, [r7, #4]
 800b618:	6812      	ldr	r2, [r2, #0]
 800b61a:	68b9      	ldr	r1, [r7, #8]
 800b61c:	430b      	orrs	r3, r1
 800b61e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	695b      	ldr	r3, [r3, #20]
 800b626:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	699a      	ldr	r2, [r3, #24]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	430a      	orrs	r2, r1
 800b634:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	4a2c      	ldr	r2, [pc, #176]	; (800b6ec <UART_SetConfig+0x114>)
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d103      	bne.n	800b648 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800b640:	f7fd ff34 	bl	80094ac <HAL_RCC_GetPCLK2Freq>
 800b644:	60f8      	str	r0, [r7, #12]
 800b646:	e002      	b.n	800b64e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800b648:	f7fd ff1c 	bl	8009484 <HAL_RCC_GetPCLK1Freq>
 800b64c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b64e:	68fa      	ldr	r2, [r7, #12]
 800b650:	4613      	mov	r3, r2
 800b652:	009b      	lsls	r3, r3, #2
 800b654:	4413      	add	r3, r2
 800b656:	009a      	lsls	r2, r3, #2
 800b658:	441a      	add	r2, r3
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	685b      	ldr	r3, [r3, #4]
 800b65e:	009b      	lsls	r3, r3, #2
 800b660:	fbb2 f3f3 	udiv	r3, r2, r3
 800b664:	4a22      	ldr	r2, [pc, #136]	; (800b6f0 <UART_SetConfig+0x118>)
 800b666:	fba2 2303 	umull	r2, r3, r2, r3
 800b66a:	095b      	lsrs	r3, r3, #5
 800b66c:	0119      	lsls	r1, r3, #4
 800b66e:	68fa      	ldr	r2, [r7, #12]
 800b670:	4613      	mov	r3, r2
 800b672:	009b      	lsls	r3, r3, #2
 800b674:	4413      	add	r3, r2
 800b676:	009a      	lsls	r2, r3, #2
 800b678:	441a      	add	r2, r3
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	009b      	lsls	r3, r3, #2
 800b680:	fbb2 f2f3 	udiv	r2, r2, r3
 800b684:	4b1a      	ldr	r3, [pc, #104]	; (800b6f0 <UART_SetConfig+0x118>)
 800b686:	fba3 0302 	umull	r0, r3, r3, r2
 800b68a:	095b      	lsrs	r3, r3, #5
 800b68c:	2064      	movs	r0, #100	; 0x64
 800b68e:	fb00 f303 	mul.w	r3, r0, r3
 800b692:	1ad3      	subs	r3, r2, r3
 800b694:	011b      	lsls	r3, r3, #4
 800b696:	3332      	adds	r3, #50	; 0x32
 800b698:	4a15      	ldr	r2, [pc, #84]	; (800b6f0 <UART_SetConfig+0x118>)
 800b69a:	fba2 2303 	umull	r2, r3, r2, r3
 800b69e:	095b      	lsrs	r3, r3, #5
 800b6a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b6a4:	4419      	add	r1, r3
 800b6a6:	68fa      	ldr	r2, [r7, #12]
 800b6a8:	4613      	mov	r3, r2
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	4413      	add	r3, r2
 800b6ae:	009a      	lsls	r2, r3, #2
 800b6b0:	441a      	add	r2, r3
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	685b      	ldr	r3, [r3, #4]
 800b6b6:	009b      	lsls	r3, r3, #2
 800b6b8:	fbb2 f2f3 	udiv	r2, r2, r3
 800b6bc:	4b0c      	ldr	r3, [pc, #48]	; (800b6f0 <UART_SetConfig+0x118>)
 800b6be:	fba3 0302 	umull	r0, r3, r3, r2
 800b6c2:	095b      	lsrs	r3, r3, #5
 800b6c4:	2064      	movs	r0, #100	; 0x64
 800b6c6:	fb00 f303 	mul.w	r3, r0, r3
 800b6ca:	1ad3      	subs	r3, r2, r3
 800b6cc:	011b      	lsls	r3, r3, #4
 800b6ce:	3332      	adds	r3, #50	; 0x32
 800b6d0:	4a07      	ldr	r2, [pc, #28]	; (800b6f0 <UART_SetConfig+0x118>)
 800b6d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b6d6:	095b      	lsrs	r3, r3, #5
 800b6d8:	f003 020f 	and.w	r2, r3, #15
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	440a      	add	r2, r1
 800b6e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800b6e4:	bf00      	nop
 800b6e6:	3710      	adds	r7, #16
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}
 800b6ec:	40013800 	.word	0x40013800
 800b6f0:	51eb851f 	.word	0x51eb851f

0800b6f4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b085      	sub	sp, #20
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b6fe:	2300      	movs	r3, #0
 800b700:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b702:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b706:	2b84      	cmp	r3, #132	; 0x84
 800b708:	d005      	beq.n	800b716 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b70a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	4413      	add	r3, r2
 800b712:	3303      	adds	r3, #3
 800b714:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b716:	68fb      	ldr	r3, [r7, #12]
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3714      	adds	r7, #20
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bc80      	pop	{r7}
 800b720:	4770      	bx	lr

0800b722 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b722:	b480      	push	{r7}
 800b724:	b083      	sub	sp, #12
 800b726:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b728:	f3ef 8305 	mrs	r3, IPSR
 800b72c:	607b      	str	r3, [r7, #4]
  return(result);
 800b72e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b730:	2b00      	cmp	r3, #0
 800b732:	bf14      	ite	ne
 800b734:	2301      	movne	r3, #1
 800b736:	2300      	moveq	r3, #0
 800b738:	b2db      	uxtb	r3, r3
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	370c      	adds	r7, #12
 800b73e:	46bd      	mov	sp, r7
 800b740:	bc80      	pop	{r7}
 800b742:	4770      	bx	lr

0800b744 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b748:	f001 fbd0 	bl	800ceec <vTaskStartScheduler>
  
  return osOK;
 800b74c:	2300      	movs	r3, #0
}
 800b74e:	4618      	mov	r0, r3
 800b750:	bd80      	pop	{r7, pc}

0800b752 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800b752:	b580      	push	{r7, lr}
 800b754:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800b756:	f7ff ffe4 	bl	800b722 <inHandlerMode>
 800b75a:	4603      	mov	r3, r0
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d003      	beq.n	800b768 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800b760:	f001 fce2 	bl	800d128 <xTaskGetTickCountFromISR>
 800b764:	4603      	mov	r3, r0
 800b766:	e002      	b.n	800b76e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800b768:	f001 fcd0 	bl	800d10c <xTaskGetTickCount>
 800b76c:	4603      	mov	r3, r0
  }
}
 800b76e:	4618      	mov	r0, r3
 800b770:	bd80      	pop	{r7, pc}

0800b772 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b772:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b774:	b089      	sub	sp, #36	; 0x24
 800b776:	af04      	add	r7, sp, #16
 800b778:	6078      	str	r0, [r7, #4]
 800b77a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	695b      	ldr	r3, [r3, #20]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d020      	beq.n	800b7c6 <osThreadCreate+0x54>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	699b      	ldr	r3, [r3, #24]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d01c      	beq.n	800b7c6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	685c      	ldr	r4, [r3, #4]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681d      	ldr	r5, [r3, #0]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	691e      	ldr	r6, [r3, #16]
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7ff ffa8 	bl	800b6f4 <makeFreeRtosPriority>
 800b7a4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	695b      	ldr	r3, [r3, #20]
 800b7aa:	687a      	ldr	r2, [r7, #4]
 800b7ac:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b7ae:	9202      	str	r2, [sp, #8]
 800b7b0:	9301      	str	r3, [sp, #4]
 800b7b2:	9100      	str	r1, [sp, #0]
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	4632      	mov	r2, r6
 800b7b8:	4629      	mov	r1, r5
 800b7ba:	4620      	mov	r0, r4
 800b7bc:	f001 f9cf 	bl	800cb5e <xTaskCreateStatic>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	60fb      	str	r3, [r7, #12]
 800b7c4:	e01c      	b.n	800b800 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	685c      	ldr	r4, [r3, #4]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b7d2:	b29e      	uxth	r6, r3
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f7ff ff8a 	bl	800b6f4 <makeFreeRtosPriority>
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	f107 030c 	add.w	r3, r7, #12
 800b7e6:	9301      	str	r3, [sp, #4]
 800b7e8:	9200      	str	r2, [sp, #0]
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	4632      	mov	r2, r6
 800b7ee:	4629      	mov	r1, r5
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	f001 fa10 	bl	800cc16 <xTaskCreate>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	d001      	beq.n	800b800 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	e000      	b.n	800b802 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b800:	68fb      	ldr	r3, [r7, #12]
}
 800b802:	4618      	mov	r0, r3
 800b804:	3714      	adds	r7, #20
 800b806:	46bd      	mov	sp, r7
 800b808:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b80a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b80a:	b580      	push	{r7, lr}
 800b80c:	b084      	sub	sp, #16
 800b80e:	af00      	add	r7, sp, #0
 800b810:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d001      	beq.n	800b820 <osDelay+0x16>
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	e000      	b.n	800b822 <osDelay+0x18>
 800b820:	2301      	movs	r3, #1
 800b822:	4618      	mov	r0, r3
 800b824:	f001 fb2e 	bl	800ce84 <vTaskDelay>
  
  return osOK;
 800b828:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3710      	adds	r7, #16
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
	...

0800b834 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b086      	sub	sp, #24
 800b838:	af02      	add	r7, sp, #8
 800b83a:	60f8      	str	r0, [r7, #12]
 800b83c:	460b      	mov	r3, r1
 800b83e:	607a      	str	r2, [r7, #4]
 800b840:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d013      	beq.n	800b872 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800b84a:	7afb      	ldrb	r3, [r7, #11]
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d101      	bne.n	800b854 <osTimerCreate+0x20>
 800b850:	2101      	movs	r1, #1
 800b852:	e000      	b.n	800b856 <osTimerCreate+0x22>
 800b854:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800b85a:	68fa      	ldr	r2, [r7, #12]
 800b85c:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800b85e:	9201      	str	r2, [sp, #4]
 800b860:	9300      	str	r3, [sp, #0]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	460a      	mov	r2, r1
 800b866:	2101      	movs	r1, #1
 800b868:	480b      	ldr	r0, [pc, #44]	; (800b898 <osTimerCreate+0x64>)
 800b86a:	f002 fa62 	bl	800dd32 <xTimerCreateStatic>
 800b86e:	4603      	mov	r3, r0
 800b870:	e00e      	b.n	800b890 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800b872:	7afb      	ldrb	r3, [r7, #11]
 800b874:	2b01      	cmp	r3, #1
 800b876:	d101      	bne.n	800b87c <osTimerCreate+0x48>
 800b878:	2201      	movs	r2, #1
 800b87a:	e000      	b.n	800b87e <osTimerCreate+0x4a>
 800b87c:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800b882:	9300      	str	r3, [sp, #0]
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2101      	movs	r1, #1
 800b888:	4803      	ldr	r0, [pc, #12]	; (800b898 <osTimerCreate+0x64>)
 800b88a:	f002 fa31 	bl	800dcf0 <xTimerCreate>
 800b88e:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800b890:	4618      	mov	r0, r3
 800b892:	3710      	adds	r7, #16
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}
 800b898:	08013644 	.word	0x08013644

0800b89c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b89c:	b480      	push	{r7}
 800b89e:	b083      	sub	sp, #12
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f103 0208 	add.w	r2, r3, #8
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f04f 32ff 	mov.w	r2, #4294967295
 800b8b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f103 0208 	add.w	r2, r3, #8
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f103 0208 	add.w	r2, r3, #8
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b8d0:	bf00      	nop
 800b8d2:	370c      	adds	r7, #12
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bc80      	pop	{r7}
 800b8d8:	4770      	bx	lr

0800b8da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b8da:	b480      	push	{r7}
 800b8dc:	b083      	sub	sp, #12
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b8e8:	bf00      	nop
 800b8ea:	370c      	adds	r7, #12
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bc80      	pop	{r7}
 800b8f0:	4770      	bx	lr

0800b8f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b8f2:	b480      	push	{r7}
 800b8f4:	b085      	sub	sp, #20
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	6078      	str	r0, [r7, #4]
 800b8fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	68fa      	ldr	r2, [r7, #12]
 800b906:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	689a      	ldr	r2, [r3, #8]
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	689b      	ldr	r3, [r3, #8]
 800b914:	683a      	ldr	r2, [r7, #0]
 800b916:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	683a      	ldr	r2, [r7, #0]
 800b91c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	687a      	ldr	r2, [r7, #4]
 800b922:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	1c5a      	adds	r2, r3, #1
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	601a      	str	r2, [r3, #0]
}
 800b92e:	bf00      	nop
 800b930:	3714      	adds	r7, #20
 800b932:	46bd      	mov	sp, r7
 800b934:	bc80      	pop	{r7}
 800b936:	4770      	bx	lr

0800b938 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b938:	b480      	push	{r7}
 800b93a:	b085      	sub	sp, #20
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b94e:	d103      	bne.n	800b958 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	691b      	ldr	r3, [r3, #16]
 800b954:	60fb      	str	r3, [r7, #12]
 800b956:	e00c      	b.n	800b972 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	3308      	adds	r3, #8
 800b95c:	60fb      	str	r3, [r7, #12]
 800b95e:	e002      	b.n	800b966 <vListInsert+0x2e>
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	60fb      	str	r3, [r7, #12]
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	68ba      	ldr	r2, [r7, #8]
 800b96e:	429a      	cmp	r2, r3
 800b970:	d2f6      	bcs.n	800b960 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	685a      	ldr	r2, [r3, #4]
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	683a      	ldr	r2, [r7, #0]
 800b980:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	68fa      	ldr	r2, [r7, #12]
 800b986:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	683a      	ldr	r2, [r7, #0]
 800b98c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	687a      	ldr	r2, [r7, #4]
 800b992:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	1c5a      	adds	r2, r3, #1
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	601a      	str	r2, [r3, #0]
}
 800b99e:	bf00      	nop
 800b9a0:	3714      	adds	r7, #20
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bc80      	pop	{r7}
 800b9a6:	4770      	bx	lr

0800b9a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b085      	sub	sp, #20
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	691b      	ldr	r3, [r3, #16]
 800b9b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	687a      	ldr	r2, [r7, #4]
 800b9bc:	6892      	ldr	r2, [r2, #8]
 800b9be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	689b      	ldr	r3, [r3, #8]
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	6852      	ldr	r2, [r2, #4]
 800b9c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	687a      	ldr	r2, [r7, #4]
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	d103      	bne.n	800b9dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	689a      	ldr	r2, [r3, #8]
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	1e5a      	subs	r2, r3, #1
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3714      	adds	r7, #20
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bc80      	pop	{r7}
 800b9f8:	4770      	bx	lr
	...

0800b9fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b084      	sub	sp, #16
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d10a      	bne.n	800ba26 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ba10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba14:	f383 8811 	msr	BASEPRI, r3
 800ba18:	f3bf 8f6f 	isb	sy
 800ba1c:	f3bf 8f4f 	dsb	sy
 800ba20:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ba22:	bf00      	nop
 800ba24:	e7fe      	b.n	800ba24 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ba26:	f002 fd91 	bl	800e54c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681a      	ldr	r2, [r3, #0]
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba32:	68f9      	ldr	r1, [r7, #12]
 800ba34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ba36:	fb01 f303 	mul.w	r3, r1, r3
 800ba3a:	441a      	add	r2, r3
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	2200      	movs	r2, #0
 800ba44:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681a      	ldr	r2, [r3, #0]
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681a      	ldr	r2, [r3, #0]
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba56:	3b01      	subs	r3, #1
 800ba58:	68f9      	ldr	r1, [r7, #12]
 800ba5a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ba5c:	fb01 f303 	mul.w	r3, r1, r3
 800ba60:	441a      	add	r2, r3
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	22ff      	movs	r2, #255	; 0xff
 800ba6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	22ff      	movs	r2, #255	; 0xff
 800ba72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d114      	bne.n	800baa6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	691b      	ldr	r3, [r3, #16]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d01a      	beq.n	800baba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	3310      	adds	r3, #16
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f001 fcc7 	bl	800d41c <xTaskRemoveFromEventList>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d012      	beq.n	800baba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ba94:	4b0c      	ldr	r3, [pc, #48]	; (800bac8 <xQueueGenericReset+0xcc>)
 800ba96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba9a:	601a      	str	r2, [r3, #0]
 800ba9c:	f3bf 8f4f 	dsb	sy
 800baa0:	f3bf 8f6f 	isb	sy
 800baa4:	e009      	b.n	800baba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	3310      	adds	r3, #16
 800baaa:	4618      	mov	r0, r3
 800baac:	f7ff fef6 	bl	800b89c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	3324      	adds	r3, #36	; 0x24
 800bab4:	4618      	mov	r0, r3
 800bab6:	f7ff fef1 	bl	800b89c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800baba:	f002 fd77 	bl	800e5ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800babe:	2301      	movs	r3, #1
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3710      	adds	r7, #16
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}
 800bac8:	e000ed04 	.word	0xe000ed04

0800bacc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b08e      	sub	sp, #56	; 0x38
 800bad0:	af02      	add	r7, sp, #8
 800bad2:	60f8      	str	r0, [r7, #12]
 800bad4:	60b9      	str	r1, [r7, #8]
 800bad6:	607a      	str	r2, [r7, #4]
 800bad8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d10a      	bne.n	800baf6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae4:	f383 8811 	msr	BASEPRI, r3
 800bae8:	f3bf 8f6f 	isb	sy
 800baec:	f3bf 8f4f 	dsb	sy
 800baf0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800baf2:	bf00      	nop
 800baf4:	e7fe      	b.n	800baf4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d10a      	bne.n	800bb12 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb00:	f383 8811 	msr	BASEPRI, r3
 800bb04:	f3bf 8f6f 	isb	sy
 800bb08:	f3bf 8f4f 	dsb	sy
 800bb0c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bb0e:	bf00      	nop
 800bb10:	e7fe      	b.n	800bb10 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d002      	beq.n	800bb1e <xQueueGenericCreateStatic+0x52>
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d001      	beq.n	800bb22 <xQueueGenericCreateStatic+0x56>
 800bb1e:	2301      	movs	r3, #1
 800bb20:	e000      	b.n	800bb24 <xQueueGenericCreateStatic+0x58>
 800bb22:	2300      	movs	r3, #0
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d10a      	bne.n	800bb3e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bb28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb2c:	f383 8811 	msr	BASEPRI, r3
 800bb30:	f3bf 8f6f 	isb	sy
 800bb34:	f3bf 8f4f 	dsb	sy
 800bb38:	623b      	str	r3, [r7, #32]
}
 800bb3a:	bf00      	nop
 800bb3c:	e7fe      	b.n	800bb3c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d102      	bne.n	800bb4a <xQueueGenericCreateStatic+0x7e>
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d101      	bne.n	800bb4e <xQueueGenericCreateStatic+0x82>
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e000      	b.n	800bb50 <xQueueGenericCreateStatic+0x84>
 800bb4e:	2300      	movs	r3, #0
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d10a      	bne.n	800bb6a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bb54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb58:	f383 8811 	msr	BASEPRI, r3
 800bb5c:	f3bf 8f6f 	isb	sy
 800bb60:	f3bf 8f4f 	dsb	sy
 800bb64:	61fb      	str	r3, [r7, #28]
}
 800bb66:	bf00      	nop
 800bb68:	e7fe      	b.n	800bb68 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bb6a:	2348      	movs	r3, #72	; 0x48
 800bb6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	2b48      	cmp	r3, #72	; 0x48
 800bb72:	d00a      	beq.n	800bb8a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bb74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb78:	f383 8811 	msr	BASEPRI, r3
 800bb7c:	f3bf 8f6f 	isb	sy
 800bb80:	f3bf 8f4f 	dsb	sy
 800bb84:	61bb      	str	r3, [r7, #24]
}
 800bb86:	bf00      	nop
 800bb88:	e7fe      	b.n	800bb88 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d00d      	beq.n	800bbb0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb96:	2201      	movs	r2, #1
 800bb98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bb9c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bba2:	9300      	str	r3, [sp, #0]
 800bba4:	4613      	mov	r3, r2
 800bba6:	687a      	ldr	r2, [r7, #4]
 800bba8:	68b9      	ldr	r1, [r7, #8]
 800bbaa:	68f8      	ldr	r0, [r7, #12]
 800bbac:	f000 f843 	bl	800bc36 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800bbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3730      	adds	r7, #48	; 0x30
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}

0800bbba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bbba:	b580      	push	{r7, lr}
 800bbbc:	b08a      	sub	sp, #40	; 0x28
 800bbbe:	af02      	add	r7, sp, #8
 800bbc0:	60f8      	str	r0, [r7, #12]
 800bbc2:	60b9      	str	r1, [r7, #8]
 800bbc4:	4613      	mov	r3, r2
 800bbc6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d10a      	bne.n	800bbe4 <xQueueGenericCreate+0x2a>
	__asm volatile
 800bbce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd2:	f383 8811 	msr	BASEPRI, r3
 800bbd6:	f3bf 8f6f 	isb	sy
 800bbda:	f3bf 8f4f 	dsb	sy
 800bbde:	613b      	str	r3, [r7, #16]
}
 800bbe0:	bf00      	nop
 800bbe2:	e7fe      	b.n	800bbe2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d102      	bne.n	800bbf0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800bbea:	2300      	movs	r3, #0
 800bbec:	61fb      	str	r3, [r7, #28]
 800bbee:	e004      	b.n	800bbfa <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	68ba      	ldr	r2, [r7, #8]
 800bbf4:	fb02 f303 	mul.w	r3, r2, r3
 800bbf8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800bbfa:	69fb      	ldr	r3, [r7, #28]
 800bbfc:	3348      	adds	r3, #72	; 0x48
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f002 fda4 	bl	800e74c <pvPortMalloc>
 800bc04:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bc06:	69bb      	ldr	r3, [r7, #24]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d00f      	beq.n	800bc2c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800bc0c:	69bb      	ldr	r3, [r7, #24]
 800bc0e:	3348      	adds	r3, #72	; 0x48
 800bc10:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bc12:	69bb      	ldr	r3, [r7, #24]
 800bc14:	2200      	movs	r2, #0
 800bc16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bc1a:	79fa      	ldrb	r2, [r7, #7]
 800bc1c:	69bb      	ldr	r3, [r7, #24]
 800bc1e:	9300      	str	r3, [sp, #0]
 800bc20:	4613      	mov	r3, r2
 800bc22:	697a      	ldr	r2, [r7, #20]
 800bc24:	68b9      	ldr	r1, [r7, #8]
 800bc26:	68f8      	ldr	r0, [r7, #12]
 800bc28:	f000 f805 	bl	800bc36 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800bc2c:	69bb      	ldr	r3, [r7, #24]
	}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3720      	adds	r7, #32
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}

0800bc36 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bc36:	b580      	push	{r7, lr}
 800bc38:	b084      	sub	sp, #16
 800bc3a:	af00      	add	r7, sp, #0
 800bc3c:	60f8      	str	r0, [r7, #12]
 800bc3e:	60b9      	str	r1, [r7, #8]
 800bc40:	607a      	str	r2, [r7, #4]
 800bc42:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d103      	bne.n	800bc52 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bc4a:	69bb      	ldr	r3, [r7, #24]
 800bc4c:	69ba      	ldr	r2, [r7, #24]
 800bc4e:	601a      	str	r2, [r3, #0]
 800bc50:	e002      	b.n	800bc58 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	687a      	ldr	r2, [r7, #4]
 800bc56:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bc58:	69bb      	ldr	r3, [r7, #24]
 800bc5a:	68fa      	ldr	r2, [r7, #12]
 800bc5c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bc5e:	69bb      	ldr	r3, [r7, #24]
 800bc60:	68ba      	ldr	r2, [r7, #8]
 800bc62:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bc64:	2101      	movs	r1, #1
 800bc66:	69b8      	ldr	r0, [r7, #24]
 800bc68:	f7ff fec8 	bl	800b9fc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bc6c:	bf00      	nop
 800bc6e:	3710      	adds	r7, #16
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b08e      	sub	sp, #56	; 0x38
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	60f8      	str	r0, [r7, #12]
 800bc7c:	60b9      	str	r1, [r7, #8]
 800bc7e:	607a      	str	r2, [r7, #4]
 800bc80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bc82:	2300      	movs	r3, #0
 800bc84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d10a      	bne.n	800bca6 <xQueueGenericSend+0x32>
	__asm volatile
 800bc90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc94:	f383 8811 	msr	BASEPRI, r3
 800bc98:	f3bf 8f6f 	isb	sy
 800bc9c:	f3bf 8f4f 	dsb	sy
 800bca0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bca2:	bf00      	nop
 800bca4:	e7fe      	b.n	800bca4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d103      	bne.n	800bcb4 <xQueueGenericSend+0x40>
 800bcac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d101      	bne.n	800bcb8 <xQueueGenericSend+0x44>
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	e000      	b.n	800bcba <xQueueGenericSend+0x46>
 800bcb8:	2300      	movs	r3, #0
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d10a      	bne.n	800bcd4 <xQueueGenericSend+0x60>
	__asm volatile
 800bcbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc2:	f383 8811 	msr	BASEPRI, r3
 800bcc6:	f3bf 8f6f 	isb	sy
 800bcca:	f3bf 8f4f 	dsb	sy
 800bcce:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bcd0:	bf00      	nop
 800bcd2:	e7fe      	b.n	800bcd2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	2b02      	cmp	r3, #2
 800bcd8:	d103      	bne.n	800bce2 <xQueueGenericSend+0x6e>
 800bcda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcde:	2b01      	cmp	r3, #1
 800bce0:	d101      	bne.n	800bce6 <xQueueGenericSend+0x72>
 800bce2:	2301      	movs	r3, #1
 800bce4:	e000      	b.n	800bce8 <xQueueGenericSend+0x74>
 800bce6:	2300      	movs	r3, #0
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d10a      	bne.n	800bd02 <xQueueGenericSend+0x8e>
	__asm volatile
 800bcec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf0:	f383 8811 	msr	BASEPRI, r3
 800bcf4:	f3bf 8f6f 	isb	sy
 800bcf8:	f3bf 8f4f 	dsb	sy
 800bcfc:	623b      	str	r3, [r7, #32]
}
 800bcfe:	bf00      	nop
 800bd00:	e7fe      	b.n	800bd00 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd02:	f001 fd7f 	bl	800d804 <xTaskGetSchedulerState>
 800bd06:	4603      	mov	r3, r0
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d102      	bne.n	800bd12 <xQueueGenericSend+0x9e>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d101      	bne.n	800bd16 <xQueueGenericSend+0xa2>
 800bd12:	2301      	movs	r3, #1
 800bd14:	e000      	b.n	800bd18 <xQueueGenericSend+0xa4>
 800bd16:	2300      	movs	r3, #0
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d10a      	bne.n	800bd32 <xQueueGenericSend+0xbe>
	__asm volatile
 800bd1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd20:	f383 8811 	msr	BASEPRI, r3
 800bd24:	f3bf 8f6f 	isb	sy
 800bd28:	f3bf 8f4f 	dsb	sy
 800bd2c:	61fb      	str	r3, [r7, #28]
}
 800bd2e:	bf00      	nop
 800bd30:	e7fe      	b.n	800bd30 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd32:	f002 fc0b 	bl	800e54c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d302      	bcc.n	800bd48 <xQueueGenericSend+0xd4>
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	2b02      	cmp	r3, #2
 800bd46:	d129      	bne.n	800bd9c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bd48:	683a      	ldr	r2, [r7, #0]
 800bd4a:	68b9      	ldr	r1, [r7, #8]
 800bd4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd4e:	f000 fa07 	bl	800c160 <prvCopyDataToQueue>
 800bd52:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d010      	beq.n	800bd7e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5e:	3324      	adds	r3, #36	; 0x24
 800bd60:	4618      	mov	r0, r3
 800bd62:	f001 fb5b 	bl	800d41c <xTaskRemoveFromEventList>
 800bd66:	4603      	mov	r3, r0
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d013      	beq.n	800bd94 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bd6c:	4b3f      	ldr	r3, [pc, #252]	; (800be6c <xQueueGenericSend+0x1f8>)
 800bd6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd72:	601a      	str	r2, [r3, #0]
 800bd74:	f3bf 8f4f 	dsb	sy
 800bd78:	f3bf 8f6f 	isb	sy
 800bd7c:	e00a      	b.n	800bd94 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d007      	beq.n	800bd94 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bd84:	4b39      	ldr	r3, [pc, #228]	; (800be6c <xQueueGenericSend+0x1f8>)
 800bd86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd8a:	601a      	str	r2, [r3, #0]
 800bd8c:	f3bf 8f4f 	dsb	sy
 800bd90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bd94:	f002 fc0a 	bl	800e5ac <vPortExitCritical>
				return pdPASS;
 800bd98:	2301      	movs	r3, #1
 800bd9a:	e063      	b.n	800be64 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d103      	bne.n	800bdaa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bda2:	f002 fc03 	bl	800e5ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bda6:	2300      	movs	r3, #0
 800bda8:	e05c      	b.n	800be64 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bdaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d106      	bne.n	800bdbe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bdb0:	f107 0314 	add.w	r3, r7, #20
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f001 fbb9 	bl	800d52c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bdba:	2301      	movs	r3, #1
 800bdbc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bdbe:	f002 fbf5 	bl	800e5ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bdc2:	f001 f8f9 	bl	800cfb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bdc6:	f002 fbc1 	bl	800e54c <vPortEnterCritical>
 800bdca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bdd0:	b25b      	sxtb	r3, r3
 800bdd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdd6:	d103      	bne.n	800bde0 <xQueueGenericSend+0x16c>
 800bdd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdda:	2200      	movs	r2, #0
 800bddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bde0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bde6:	b25b      	sxtb	r3, r3
 800bde8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdec:	d103      	bne.n	800bdf6 <xQueueGenericSend+0x182>
 800bdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bdf6:	f002 fbd9 	bl	800e5ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bdfa:	1d3a      	adds	r2, r7, #4
 800bdfc:	f107 0314 	add.w	r3, r7, #20
 800be00:	4611      	mov	r1, r2
 800be02:	4618      	mov	r0, r3
 800be04:	f001 fba8 	bl	800d558 <xTaskCheckForTimeOut>
 800be08:	4603      	mov	r3, r0
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d124      	bne.n	800be58 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800be0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be10:	f000 fa9e 	bl	800c350 <prvIsQueueFull>
 800be14:	4603      	mov	r3, r0
 800be16:	2b00      	cmp	r3, #0
 800be18:	d018      	beq.n	800be4c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800be1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be1c:	3310      	adds	r3, #16
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	4611      	mov	r1, r2
 800be22:	4618      	mov	r0, r3
 800be24:	f001 faaa 	bl	800d37c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800be28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be2a:	f000 fa29 	bl	800c280 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800be2e:	f001 f8d1 	bl	800cfd4 <xTaskResumeAll>
 800be32:	4603      	mov	r3, r0
 800be34:	2b00      	cmp	r3, #0
 800be36:	f47f af7c 	bne.w	800bd32 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800be3a:	4b0c      	ldr	r3, [pc, #48]	; (800be6c <xQueueGenericSend+0x1f8>)
 800be3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be40:	601a      	str	r2, [r3, #0]
 800be42:	f3bf 8f4f 	dsb	sy
 800be46:	f3bf 8f6f 	isb	sy
 800be4a:	e772      	b.n	800bd32 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800be4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be4e:	f000 fa17 	bl	800c280 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be52:	f001 f8bf 	bl	800cfd4 <xTaskResumeAll>
 800be56:	e76c      	b.n	800bd32 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800be58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be5a:	f000 fa11 	bl	800c280 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be5e:	f001 f8b9 	bl	800cfd4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800be62:	2300      	movs	r3, #0
		}
	}
}
 800be64:	4618      	mov	r0, r3
 800be66:	3738      	adds	r7, #56	; 0x38
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	e000ed04 	.word	0xe000ed04

0800be70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b08e      	sub	sp, #56	; 0x38
 800be74:	af00      	add	r7, sp, #0
 800be76:	60f8      	str	r0, [r7, #12]
 800be78:	60b9      	str	r1, [r7, #8]
 800be7a:	607a      	str	r2, [r7, #4]
 800be7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800be82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be84:	2b00      	cmp	r3, #0
 800be86:	d10a      	bne.n	800be9e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800be88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be8c:	f383 8811 	msr	BASEPRI, r3
 800be90:	f3bf 8f6f 	isb	sy
 800be94:	f3bf 8f4f 	dsb	sy
 800be98:	627b      	str	r3, [r7, #36]	; 0x24
}
 800be9a:	bf00      	nop
 800be9c:	e7fe      	b.n	800be9c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d103      	bne.n	800beac <xQueueGenericSendFromISR+0x3c>
 800bea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d101      	bne.n	800beb0 <xQueueGenericSendFromISR+0x40>
 800beac:	2301      	movs	r3, #1
 800beae:	e000      	b.n	800beb2 <xQueueGenericSendFromISR+0x42>
 800beb0:	2300      	movs	r3, #0
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d10a      	bne.n	800becc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800beb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beba:	f383 8811 	msr	BASEPRI, r3
 800bebe:	f3bf 8f6f 	isb	sy
 800bec2:	f3bf 8f4f 	dsb	sy
 800bec6:	623b      	str	r3, [r7, #32]
}
 800bec8:	bf00      	nop
 800beca:	e7fe      	b.n	800beca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	2b02      	cmp	r3, #2
 800bed0:	d103      	bne.n	800beda <xQueueGenericSendFromISR+0x6a>
 800bed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bed6:	2b01      	cmp	r3, #1
 800bed8:	d101      	bne.n	800bede <xQueueGenericSendFromISR+0x6e>
 800beda:	2301      	movs	r3, #1
 800bedc:	e000      	b.n	800bee0 <xQueueGenericSendFromISR+0x70>
 800bede:	2300      	movs	r3, #0
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d10a      	bne.n	800befa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee8:	f383 8811 	msr	BASEPRI, r3
 800beec:	f3bf 8f6f 	isb	sy
 800bef0:	f3bf 8f4f 	dsb	sy
 800bef4:	61fb      	str	r3, [r7, #28]
}
 800bef6:	bf00      	nop
 800bef8:	e7fe      	b.n	800bef8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800befa:	f002 fbe9 	bl	800e6d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800befe:	f3ef 8211 	mrs	r2, BASEPRI
 800bf02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf06:	f383 8811 	msr	BASEPRI, r3
 800bf0a:	f3bf 8f6f 	isb	sy
 800bf0e:	f3bf 8f4f 	dsb	sy
 800bf12:	61ba      	str	r2, [r7, #24]
 800bf14:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bf16:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bf18:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bf1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d302      	bcc.n	800bf2c <xQueueGenericSendFromISR+0xbc>
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	2b02      	cmp	r3, #2
 800bf2a:	d12c      	bne.n	800bf86 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bf2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bf36:	683a      	ldr	r2, [r7, #0]
 800bf38:	68b9      	ldr	r1, [r7, #8]
 800bf3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf3c:	f000 f910 	bl	800c160 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bf40:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800bf44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf48:	d112      	bne.n	800bf70 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d016      	beq.n	800bf80 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf54:	3324      	adds	r3, #36	; 0x24
 800bf56:	4618      	mov	r0, r3
 800bf58:	f001 fa60 	bl	800d41c <xTaskRemoveFromEventList>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d00e      	beq.n	800bf80 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d00b      	beq.n	800bf80 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	601a      	str	r2, [r3, #0]
 800bf6e:	e007      	b.n	800bf80 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bf70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bf74:	3301      	adds	r3, #1
 800bf76:	b2db      	uxtb	r3, r3
 800bf78:	b25a      	sxtb	r2, r3
 800bf7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bf80:	2301      	movs	r3, #1
 800bf82:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800bf84:	e001      	b.n	800bf8a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bf86:	2300      	movs	r3, #0
 800bf88:	637b      	str	r3, [r7, #52]	; 0x34
 800bf8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf8c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bf94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bf96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3738      	adds	r7, #56	; 0x38
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b08c      	sub	sp, #48	; 0x30
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	60f8      	str	r0, [r7, #12]
 800bfa8:	60b9      	str	r1, [r7, #8]
 800bfaa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bfac:	2300      	movs	r3, #0
 800bfae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bfb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d10a      	bne.n	800bfd0 <xQueueReceive+0x30>
	__asm volatile
 800bfba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfbe:	f383 8811 	msr	BASEPRI, r3
 800bfc2:	f3bf 8f6f 	isb	sy
 800bfc6:	f3bf 8f4f 	dsb	sy
 800bfca:	623b      	str	r3, [r7, #32]
}
 800bfcc:	bf00      	nop
 800bfce:	e7fe      	b.n	800bfce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d103      	bne.n	800bfde <xQueueReceive+0x3e>
 800bfd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d101      	bne.n	800bfe2 <xQueueReceive+0x42>
 800bfde:	2301      	movs	r3, #1
 800bfe0:	e000      	b.n	800bfe4 <xQueueReceive+0x44>
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d10a      	bne.n	800bffe <xQueueReceive+0x5e>
	__asm volatile
 800bfe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfec:	f383 8811 	msr	BASEPRI, r3
 800bff0:	f3bf 8f6f 	isb	sy
 800bff4:	f3bf 8f4f 	dsb	sy
 800bff8:	61fb      	str	r3, [r7, #28]
}
 800bffa:	bf00      	nop
 800bffc:	e7fe      	b.n	800bffc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bffe:	f001 fc01 	bl	800d804 <xTaskGetSchedulerState>
 800c002:	4603      	mov	r3, r0
 800c004:	2b00      	cmp	r3, #0
 800c006:	d102      	bne.n	800c00e <xQueueReceive+0x6e>
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d101      	bne.n	800c012 <xQueueReceive+0x72>
 800c00e:	2301      	movs	r3, #1
 800c010:	e000      	b.n	800c014 <xQueueReceive+0x74>
 800c012:	2300      	movs	r3, #0
 800c014:	2b00      	cmp	r3, #0
 800c016:	d10a      	bne.n	800c02e <xQueueReceive+0x8e>
	__asm volatile
 800c018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c01c:	f383 8811 	msr	BASEPRI, r3
 800c020:	f3bf 8f6f 	isb	sy
 800c024:	f3bf 8f4f 	dsb	sy
 800c028:	61bb      	str	r3, [r7, #24]
}
 800c02a:	bf00      	nop
 800c02c:	e7fe      	b.n	800c02c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800c02e:	f002 fa8d 	bl	800e54c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c036:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d01f      	beq.n	800c07e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c03e:	68b9      	ldr	r1, [r7, #8]
 800c040:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c042:	f000 f8f7 	bl	800c234 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c048:	1e5a      	subs	r2, r3, #1
 800c04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c04c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c050:	691b      	ldr	r3, [r3, #16]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d00f      	beq.n	800c076 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c058:	3310      	adds	r3, #16
 800c05a:	4618      	mov	r0, r3
 800c05c:	f001 f9de 	bl	800d41c <xTaskRemoveFromEventList>
 800c060:	4603      	mov	r3, r0
 800c062:	2b00      	cmp	r3, #0
 800c064:	d007      	beq.n	800c076 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c066:	4b3d      	ldr	r3, [pc, #244]	; (800c15c <xQueueReceive+0x1bc>)
 800c068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c06c:	601a      	str	r2, [r3, #0]
 800c06e:	f3bf 8f4f 	dsb	sy
 800c072:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c076:	f002 fa99 	bl	800e5ac <vPortExitCritical>
				return pdPASS;
 800c07a:	2301      	movs	r3, #1
 800c07c:	e069      	b.n	800c152 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d103      	bne.n	800c08c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c084:	f002 fa92 	bl	800e5ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c088:	2300      	movs	r3, #0
 800c08a:	e062      	b.n	800c152 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d106      	bne.n	800c0a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c092:	f107 0310 	add.w	r3, r7, #16
 800c096:	4618      	mov	r0, r3
 800c098:	f001 fa48 	bl	800d52c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c09c:	2301      	movs	r3, #1
 800c09e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c0a0:	f002 fa84 	bl	800e5ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c0a4:	f000 ff88 	bl	800cfb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c0a8:	f002 fa50 	bl	800e54c <vPortEnterCritical>
 800c0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c0b2:	b25b      	sxtb	r3, r3
 800c0b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0b8:	d103      	bne.n	800c0c2 <xQueueReceive+0x122>
 800c0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0bc:	2200      	movs	r2, #0
 800c0be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0c8:	b25b      	sxtb	r3, r3
 800c0ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ce:	d103      	bne.n	800c0d8 <xQueueReceive+0x138>
 800c0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c0d8:	f002 fa68 	bl	800e5ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c0dc:	1d3a      	adds	r2, r7, #4
 800c0de:	f107 0310 	add.w	r3, r7, #16
 800c0e2:	4611      	mov	r1, r2
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f001 fa37 	bl	800d558 <xTaskCheckForTimeOut>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d123      	bne.n	800c138 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c0f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0f2:	f000 f917 	bl	800c324 <prvIsQueueEmpty>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d017      	beq.n	800c12c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0fe:	3324      	adds	r3, #36	; 0x24
 800c100:	687a      	ldr	r2, [r7, #4]
 800c102:	4611      	mov	r1, r2
 800c104:	4618      	mov	r0, r3
 800c106:	f001 f939 	bl	800d37c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c10a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c10c:	f000 f8b8 	bl	800c280 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c110:	f000 ff60 	bl	800cfd4 <xTaskResumeAll>
 800c114:	4603      	mov	r3, r0
 800c116:	2b00      	cmp	r3, #0
 800c118:	d189      	bne.n	800c02e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c11a:	4b10      	ldr	r3, [pc, #64]	; (800c15c <xQueueReceive+0x1bc>)
 800c11c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c120:	601a      	str	r2, [r3, #0]
 800c122:	f3bf 8f4f 	dsb	sy
 800c126:	f3bf 8f6f 	isb	sy
 800c12a:	e780      	b.n	800c02e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c12c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c12e:	f000 f8a7 	bl	800c280 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c132:	f000 ff4f 	bl	800cfd4 <xTaskResumeAll>
 800c136:	e77a      	b.n	800c02e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c13a:	f000 f8a1 	bl	800c280 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c13e:	f000 ff49 	bl	800cfd4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c144:	f000 f8ee 	bl	800c324 <prvIsQueueEmpty>
 800c148:	4603      	mov	r3, r0
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	f43f af6f 	beq.w	800c02e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c150:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800c152:	4618      	mov	r0, r3
 800c154:	3730      	adds	r7, #48	; 0x30
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}
 800c15a:	bf00      	nop
 800c15c:	e000ed04 	.word	0xe000ed04

0800c160 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b086      	sub	sp, #24
 800c164:	af00      	add	r7, sp, #0
 800c166:	60f8      	str	r0, [r7, #12]
 800c168:	60b9      	str	r1, [r7, #8]
 800c16a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c16c:	2300      	movs	r3, #0
 800c16e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c174:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d10d      	bne.n	800c19a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d14d      	bne.n	800c222 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	685b      	ldr	r3, [r3, #4]
 800c18a:	4618      	mov	r0, r3
 800c18c:	f001 fb58 	bl	800d840 <xTaskPriorityDisinherit>
 800c190:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2200      	movs	r2, #0
 800c196:	605a      	str	r2, [r3, #4]
 800c198:	e043      	b.n	800c222 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d119      	bne.n	800c1d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	6898      	ldr	r0, [r3, #8]
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	68b9      	ldr	r1, [r7, #8]
 800c1ac:	f002 fd00 	bl	800ebb0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	689a      	ldr	r2, [r3, #8]
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1b8:	441a      	add	r2, r3
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	689a      	ldr	r2, [r3, #8]
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d32b      	bcc.n	800c222 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681a      	ldr	r2, [r3, #0]
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	609a      	str	r2, [r3, #8]
 800c1d2:	e026      	b.n	800c222 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	68d8      	ldr	r0, [r3, #12]
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1dc:	461a      	mov	r2, r3
 800c1de:	68b9      	ldr	r1, [r7, #8]
 800c1e0:	f002 fce6 	bl	800ebb0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	68da      	ldr	r2, [r3, #12]
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ec:	425b      	negs	r3, r3
 800c1ee:	441a      	add	r2, r3
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	68da      	ldr	r2, [r3, #12]
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d207      	bcs.n	800c210 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	685a      	ldr	r2, [r3, #4]
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c208:	425b      	negs	r3, r3
 800c20a:	441a      	add	r2, r3
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2b02      	cmp	r3, #2
 800c214:	d105      	bne.n	800c222 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d002      	beq.n	800c222 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	3b01      	subs	r3, #1
 800c220:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	1c5a      	adds	r2, r3, #1
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c22a:	697b      	ldr	r3, [r7, #20]
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3718      	adds	r7, #24
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}

0800c234 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b082      	sub	sp, #8
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c242:	2b00      	cmp	r3, #0
 800c244:	d018      	beq.n	800c278 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	68da      	ldr	r2, [r3, #12]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c24e:	441a      	add	r2, r3
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	68da      	ldr	r2, [r3, #12]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	685b      	ldr	r3, [r3, #4]
 800c25c:	429a      	cmp	r2, r3
 800c25e:	d303      	bcc.n	800c268 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681a      	ldr	r2, [r3, #0]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	68d9      	ldr	r1, [r3, #12]
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c270:	461a      	mov	r2, r3
 800c272:	6838      	ldr	r0, [r7, #0]
 800c274:	f002 fc9c 	bl	800ebb0 <memcpy>
	}
}
 800c278:	bf00      	nop
 800c27a:	3708      	adds	r7, #8
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}

0800c280 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b084      	sub	sp, #16
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c288:	f002 f960 	bl	800e54c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c292:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c294:	e011      	b.n	800c2ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d012      	beq.n	800c2c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	3324      	adds	r3, #36	; 0x24
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f001 f8ba 	bl	800d41c <xTaskRemoveFromEventList>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d001      	beq.n	800c2b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c2ae:	f001 f9b5 	bl	800d61c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c2b2:	7bfb      	ldrb	r3, [r7, #15]
 800c2b4:	3b01      	subs	r3, #1
 800c2b6:	b2db      	uxtb	r3, r3
 800c2b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c2ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	dce9      	bgt.n	800c296 <prvUnlockQueue+0x16>
 800c2c2:	e000      	b.n	800c2c6 <prvUnlockQueue+0x46>
					break;
 800c2c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	22ff      	movs	r2, #255	; 0xff
 800c2ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c2ce:	f002 f96d 	bl	800e5ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c2d2:	f002 f93b 	bl	800e54c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c2dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c2de:	e011      	b.n	800c304 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	691b      	ldr	r3, [r3, #16]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d012      	beq.n	800c30e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	3310      	adds	r3, #16
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f001 f895 	bl	800d41c <xTaskRemoveFromEventList>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d001      	beq.n	800c2fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c2f8:	f001 f990 	bl	800d61c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c2fc:	7bbb      	ldrb	r3, [r7, #14]
 800c2fe:	3b01      	subs	r3, #1
 800c300:	b2db      	uxtb	r3, r3
 800c302:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c304:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	dce9      	bgt.n	800c2e0 <prvUnlockQueue+0x60>
 800c30c:	e000      	b.n	800c310 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c30e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	22ff      	movs	r2, #255	; 0xff
 800c314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c318:	f002 f948 	bl	800e5ac <vPortExitCritical>
}
 800c31c:	bf00      	nop
 800c31e:	3710      	adds	r7, #16
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}

0800c324 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c32c:	f002 f90e 	bl	800e54c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c334:	2b00      	cmp	r3, #0
 800c336:	d102      	bne.n	800c33e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c338:	2301      	movs	r3, #1
 800c33a:	60fb      	str	r3, [r7, #12]
 800c33c:	e001      	b.n	800c342 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c33e:	2300      	movs	r3, #0
 800c340:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c342:	f002 f933 	bl	800e5ac <vPortExitCritical>

	return xReturn;
 800c346:	68fb      	ldr	r3, [r7, #12]
}
 800c348:	4618      	mov	r0, r3
 800c34a:	3710      	adds	r7, #16
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}

0800c350 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b084      	sub	sp, #16
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c358:	f002 f8f8 	bl	800e54c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c364:	429a      	cmp	r2, r3
 800c366:	d102      	bne.n	800c36e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c368:	2301      	movs	r3, #1
 800c36a:	60fb      	str	r3, [r7, #12]
 800c36c:	e001      	b.n	800c372 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c36e:	2300      	movs	r3, #0
 800c370:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c372:	f002 f91b 	bl	800e5ac <vPortExitCritical>

	return xReturn;
 800c376:	68fb      	ldr	r3, [r7, #12]
}
 800c378:	4618      	mov	r0, r3
 800c37a:	3710      	adds	r7, #16
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}

0800c380 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c380:	b480      	push	{r7}
 800c382:	b085      	sub	sp, #20
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
 800c388:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c38a:	2300      	movs	r3, #0
 800c38c:	60fb      	str	r3, [r7, #12]
 800c38e:	e014      	b.n	800c3ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c390:	4a0e      	ldr	r2, [pc, #56]	; (800c3cc <vQueueAddToRegistry+0x4c>)
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d10b      	bne.n	800c3b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c39c:	490b      	ldr	r1, [pc, #44]	; (800c3cc <vQueueAddToRegistry+0x4c>)
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	683a      	ldr	r2, [r7, #0]
 800c3a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c3a6:	4a09      	ldr	r2, [pc, #36]	; (800c3cc <vQueueAddToRegistry+0x4c>)
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	00db      	lsls	r3, r3, #3
 800c3ac:	4413      	add	r3, r2
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c3b2:	e006      	b.n	800c3c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	60fb      	str	r3, [r7, #12]
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	2b07      	cmp	r3, #7
 800c3be:	d9e7      	bls.n	800c390 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c3c0:	bf00      	nop
 800c3c2:	bf00      	nop
 800c3c4:	3714      	adds	r7, #20
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bc80      	pop	{r7}
 800c3ca:	4770      	bx	lr
 800c3cc:	20003b4c 	.word	0x20003b4c

0800c3d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b086      	sub	sp, #24
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	60f8      	str	r0, [r7, #12]
 800c3d8:	60b9      	str	r1, [r7, #8]
 800c3da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c3e0:	f002 f8b4 	bl	800e54c <vPortEnterCritical>
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c3ea:	b25b      	sxtb	r3, r3
 800c3ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3f0:	d103      	bne.n	800c3fa <vQueueWaitForMessageRestricted+0x2a>
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c400:	b25b      	sxtb	r3, r3
 800c402:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c406:	d103      	bne.n	800c410 <vQueueWaitForMessageRestricted+0x40>
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	2200      	movs	r2, #0
 800c40c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c410:	f002 f8cc 	bl	800e5ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c414:	697b      	ldr	r3, [r7, #20]
 800c416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d106      	bne.n	800c42a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	3324      	adds	r3, #36	; 0x24
 800c420:	687a      	ldr	r2, [r7, #4]
 800c422:	68b9      	ldr	r1, [r7, #8]
 800c424:	4618      	mov	r0, r3
 800c426:	f000 ffcd 	bl	800d3c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c42a:	6978      	ldr	r0, [r7, #20]
 800c42c:	f7ff ff28 	bl	800c280 <prvUnlockQueue>
	}
 800c430:	bf00      	nop
 800c432:	3718      	adds	r7, #24
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}

0800c438 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b08a      	sub	sp, #40	; 0x28
 800c43c:	af02      	add	r7, sp, #8
 800c43e:	60f8      	str	r0, [r7, #12]
 800c440:	60b9      	str	r1, [r7, #8]
 800c442:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	2b04      	cmp	r3, #4
 800c448:	d80a      	bhi.n	800c460 <xStreamBufferGenericCreate+0x28>
	__asm volatile
 800c44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c44e:	f383 8811 	msr	BASEPRI, r3
 800c452:	f3bf 8f6f 	isb	sy
 800c456:	f3bf 8f4f 	dsb	sy
 800c45a:	61bb      	str	r3, [r7, #24]
}
 800c45c:	bf00      	nop
 800c45e:	e7fe      	b.n	800c45e <xStreamBufferGenericCreate+0x26>
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800c460:	68ba      	ldr	r2, [r7, #8]
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	429a      	cmp	r2, r3
 800c466:	d90a      	bls.n	800c47e <xStreamBufferGenericCreate+0x46>
	__asm volatile
 800c468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c46c:	f383 8811 	msr	BASEPRI, r3
 800c470:	f3bf 8f6f 	isb	sy
 800c474:	f3bf 8f4f 	dsb	sy
 800c478:	617b      	str	r3, [r7, #20]
}
 800c47a:	bf00      	nop
 800c47c:	e7fe      	b.n	800c47c <xStreamBufferGenericCreate+0x44>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d101      	bne.n	800c488 <xStreamBufferGenericCreate+0x50>
		{
			xTriggerLevelBytes = ( size_t ) 1; /*lint !e9044 Parameter modified to ensure it doesn't have a dangerous value. */
 800c484:	2301      	movs	r3, #1
 800c486:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	3301      	adds	r3, #1
 800c48c:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	3320      	adds	r3, #32
 800c492:	4618      	mov	r0, r3
 800c494:	f002 f95a 	bl	800e74c <pvPortMalloc>
 800c498:	61f8      	str	r0, [r7, #28]

		if( pucAllocatedMemory != NULL )
 800c49a:	69fb      	ldr	r3, [r7, #28]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d009      	beq.n	800c4b4 <xStreamBufferGenericCreate+0x7c>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 800c4a0:	69fb      	ldr	r3, [r7, #28]
 800c4a2:	f103 0120 	add.w	r1, r3, #32
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	9300      	str	r3, [sp, #0]
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	68fa      	ldr	r2, [r7, #12]
 800c4ae:	69f8      	ldr	r0, [r7, #28]
 800c4b0:	f000 fb1c 	bl	800caec <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t * ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 800c4b4:	69fb      	ldr	r3, [r7, #28]
	}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3720      	adds	r7, #32
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}

0800c4be <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 800c4be:	b480      	push	{r7}
 800c4c0:	b087      	sub	sp, #28
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d10a      	bne.n	800c4e6 <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 800c4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d4:	f383 8811 	msr	BASEPRI, r3
 800c4d8:	f3bf 8f6f 	isb	sy
 800c4dc:	f3bf 8f4f 	dsb	sy
 800c4e0:	60fb      	str	r3, [r7, #12]
}
 800c4e2:	bf00      	nop
 800c4e4:	e7fe      	b.n	800c4e4 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	689a      	ldr	r2, [r3, #8]
 800c4ea:	693b      	ldr	r3, [r7, #16]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	4413      	add	r3, r2
 800c4f0:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	685b      	ldr	r3, [r3, #4]
 800c4f6:	697a      	ldr	r2, [r7, #20]
 800c4f8:	1ad3      	subs	r3, r2, r3
 800c4fa:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	3b01      	subs	r3, #1
 800c500:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 800c502:	693b      	ldr	r3, [r7, #16]
 800c504:	689b      	ldr	r3, [r3, #8]
 800c506:	697a      	ldr	r2, [r7, #20]
 800c508:	429a      	cmp	r2, r3
 800c50a:	d304      	bcc.n	800c516 <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	689b      	ldr	r3, [r3, #8]
 800c510:	697a      	ldr	r2, [r7, #20]
 800c512:	1ad3      	subs	r3, r2, r3
 800c514:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 800c516:	697b      	ldr	r3, [r7, #20]
}
 800c518:	4618      	mov	r0, r3
 800c51a:	371c      	adds	r7, #28
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bc80      	pop	{r7}
 800c520:	4770      	bx	lr

0800c522 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 800c522:	b580      	push	{r7, lr}
 800c524:	b090      	sub	sp, #64	; 0x40
 800c526:	af02      	add	r7, sp, #8
 800c528:	60f8      	str	r0, [r7, #12]
 800c52a:	60b9      	str	r1, [r7, #8]
 800c52c:	607a      	str	r2, [r7, #4]
 800c52e:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 800c534:	2300      	movs	r3, #0
 800c536:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d10a      	bne.n	800c558 <xStreamBufferSend+0x36>
	__asm volatile
 800c542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c546:	f383 8811 	msr	BASEPRI, r3
 800c54a:	f3bf 8f6f 	isb	sy
 800c54e:	f3bf 8f4f 	dsb	sy
 800c552:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c554:	bf00      	nop
 800c556:	e7fe      	b.n	800c556 <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 800c558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d10a      	bne.n	800c574 <xStreamBufferSend+0x52>
	__asm volatile
 800c55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c562:	f383 8811 	msr	BASEPRI, r3
 800c566:	f3bf 8f6f 	isb	sy
 800c56a:	f3bf 8f4f 	dsb	sy
 800c56e:	623b      	str	r3, [r7, #32]
}
 800c570:	bf00      	nop
 800c572:	e7fe      	b.n	800c572 <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800c574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c576:	7f1b      	ldrb	r3, [r3, #28]
 800c578:	f003 0301 	and.w	r3, r3, #1
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d002      	beq.n	800c586 <xStreamBufferSend+0x64>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800c580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c582:	3304      	adds	r3, #4
 800c584:	633b      	str	r3, [r7, #48]	; 0x30
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d03f      	beq.n	800c60c <xStreamBufferSend+0xea>
	{
		vTaskSetTimeOutState( &xTimeOut );
 800c58c:	f107 0314 	add.w	r3, r7, #20
 800c590:	4618      	mov	r0, r3
 800c592:	f000 ffa5 	bl	800d4e0 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 800c596:	f001 ffd9 	bl	800e54c <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800c59a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c59c:	f7ff ff8f 	bl	800c4be <xStreamBufferSpacesAvailable>
 800c5a0:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 800c5a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d217      	bcs.n	800c5da <xStreamBufferSend+0xb8>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 800c5aa:	2000      	movs	r0, #0
 800c5ac:	f001 facc 	bl	800db48 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 800c5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5b2:	695b      	ldr	r3, [r3, #20]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d00a      	beq.n	800c5ce <xStreamBufferSend+0xac>
	__asm volatile
 800c5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5bc:	f383 8811 	msr	BASEPRI, r3
 800c5c0:	f3bf 8f6f 	isb	sy
 800c5c4:	f3bf 8f4f 	dsb	sy
 800c5c8:	61fb      	str	r3, [r7, #28]
}
 800c5ca:	bf00      	nop
 800c5cc:	e7fe      	b.n	800c5cc <xStreamBufferSend+0xaa>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 800c5ce:	f001 f90b 	bl	800d7e8 <xTaskGetCurrentTaskHandle>
 800c5d2:	4602      	mov	r2, r0
 800c5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d6:	615a      	str	r2, [r3, #20]
 800c5d8:	e002      	b.n	800c5e0 <xStreamBufferSend+0xbe>
				}
				else
				{
					taskEXIT_CRITICAL();
 800c5da:	f001 ffe7 	bl	800e5ac <vPortExitCritical>
					break;
 800c5de:	e015      	b.n	800c60c <xStreamBufferSend+0xea>
				}
			}
			taskEXIT_CRITICAL();
 800c5e0:	f001 ffe4 	bl	800e5ac <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, UINT32_MAX, NULL, xTicksToWait );
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	f04f 31ff 	mov.w	r1, #4294967295
 800c5ec:	2000      	movs	r0, #0
 800c5ee:	f001 f9ad 	bl	800d94c <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 800c5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 800c5f8:	463a      	mov	r2, r7
 800c5fa:	f107 0314 	add.w	r3, r7, #20
 800c5fe:	4611      	mov	r1, r2
 800c600:	4618      	mov	r0, r3
 800c602:	f000 ffa9 	bl	800d558 <xTaskCheckForTimeOut>
 800c606:	4603      	mov	r3, r0
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d0c4      	beq.n	800c596 <xStreamBufferSend+0x74>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 800c60c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d103      	bne.n	800c61a <xStreamBufferSend+0xf8>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800c612:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c614:	f7ff ff53 	bl	800c4be <xStreamBufferSpacesAvailable>
 800c618:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 800c61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c61c:	9300      	str	r3, [sp, #0]
 800c61e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c620:	687a      	ldr	r2, [r7, #4]
 800c622:	68b9      	ldr	r1, [r7, #8]
 800c624:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c626:	f000 f823 	bl	800c670 <prvWriteMessageToBuffer>
 800c62a:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 800c62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d019      	beq.n	800c666 <xStreamBufferSend+0x144>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 800c632:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c634:	f000 fa3b 	bl	800caae <prvBytesInBuffer>
 800c638:	4602      	mov	r2, r0
 800c63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c63c:	68db      	ldr	r3, [r3, #12]
 800c63e:	429a      	cmp	r2, r3
 800c640:	d311      	bcc.n	800c666 <xStreamBufferSend+0x144>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 800c642:	f000 fcb9 	bl	800cfb8 <vTaskSuspendAll>
 800c646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c648:	691b      	ldr	r3, [r3, #16]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d009      	beq.n	800c662 <xStreamBufferSend+0x140>
 800c64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c650:	6918      	ldr	r0, [r3, #16]
 800c652:	2300      	movs	r3, #0
 800c654:	2200      	movs	r2, #0
 800c656:	2100      	movs	r1, #0
 800c658:	f001 f9d2 	bl	800da00 <xTaskGenericNotify>
 800c65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c65e:	2200      	movs	r2, #0
 800c660:	611a      	str	r2, [r3, #16]
 800c662:	f000 fcb7 	bl	800cfd4 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 800c666:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800c668:	4618      	mov	r0, r3
 800c66a:	3738      	adds	r7, #56	; 0x38
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}

0800c670 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b086      	sub	sp, #24
 800c674:	af00      	add	r7, sp, #0
 800c676:	60f8      	str	r0, [r7, #12]
 800c678:	60b9      	str	r1, [r7, #8]
 800c67a:	607a      	str	r2, [r7, #4]
 800c67c:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d102      	bne.n	800c68a <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 800c684:	2300      	movs	r3, #0
 800c686:	617b      	str	r3, [r7, #20]
 800c688:	e01d      	b.n	800c6c6 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	7f1b      	ldrb	r3, [r3, #28]
 800c68e:	f003 0301 	and.w	r3, r3, #1
 800c692:	2b00      	cmp	r3, #0
 800c694:	d108      	bne.n	800c6a8 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 800c696:	2301      	movs	r3, #1
 800c698:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace ); /*lint !e9044 Function parameter modified to ensure it is capped to available space. */
 800c69a:	687a      	ldr	r2, [r7, #4]
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	bf28      	it	cs
 800c6a2:	4613      	movcs	r3, r2
 800c6a4:	607b      	str	r3, [r7, #4]
 800c6a6:	e00e      	b.n	800c6c6 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 800c6a8:	683a      	ldr	r2, [r7, #0]
 800c6aa:	6a3b      	ldr	r3, [r7, #32]
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	d308      	bcc.n	800c6c2 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800c6b4:	1d3b      	adds	r3, r7, #4
 800c6b6:	2204      	movs	r2, #4
 800c6b8:	4619      	mov	r1, r3
 800c6ba:	68f8      	ldr	r0, [r7, #12]
 800c6bc:	f000 f90b 	bl	800c8d6 <prvWriteBytesToBuffer>
 800c6c0:	e001      	b.n	800c6c6 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d007      	beq.n	800c6dc <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	68b9      	ldr	r1, [r7, #8]
 800c6d2:	68f8      	ldr	r0, [r7, #12]
 800c6d4:	f000 f8ff 	bl	800c8d6 <prvWriteBytesToBuffer>
 800c6d8:	6138      	str	r0, [r7, #16]
 800c6da:	e001      	b.n	800c6e0 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 800c6e0:	693b      	ldr	r3, [r7, #16]
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	3718      	adds	r7, #24
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}

0800c6ea <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 800c6ea:	b580      	push	{r7, lr}
 800c6ec:	b08e      	sub	sp, #56	; 0x38
 800c6ee:	af02      	add	r7, sp, #8
 800c6f0:	60f8      	str	r0, [r7, #12]
 800c6f2:	60b9      	str	r1, [r7, #8]
 800c6f4:	607a      	str	r2, [r7, #4]
 800c6f6:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d10a      	bne.n	800c71c <xStreamBufferReceive+0x32>
	__asm volatile
 800c706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c70a:	f383 8811 	msr	BASEPRI, r3
 800c70e:	f3bf 8f6f 	isb	sy
 800c712:	f3bf 8f4f 	dsb	sy
 800c716:	61fb      	str	r3, [r7, #28]
}
 800c718:	bf00      	nop
 800c71a:	e7fe      	b.n	800c71a <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 800c71c:	6a3b      	ldr	r3, [r7, #32]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d10a      	bne.n	800c738 <xStreamBufferReceive+0x4e>
	__asm volatile
 800c722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c726:	f383 8811 	msr	BASEPRI, r3
 800c72a:	f3bf 8f6f 	isb	sy
 800c72e:	f3bf 8f4f 	dsb	sy
 800c732:	61bb      	str	r3, [r7, #24]
}
 800c734:	bf00      	nop
 800c736:	e7fe      	b.n	800c736 <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800c738:	6a3b      	ldr	r3, [r7, #32]
 800c73a:	7f1b      	ldrb	r3, [r3, #28]
 800c73c:	f003 0301 	and.w	r3, r3, #1
 800c740:	2b00      	cmp	r3, #0
 800c742:	d002      	beq.n	800c74a <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800c744:	2304      	movs	r3, #4
 800c746:	627b      	str	r3, [r7, #36]	; 0x24
 800c748:	e001      	b.n	800c74e <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 800c74a:	2300      	movs	r3, #0
 800c74c:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d035      	beq.n	800c7c0 <xStreamBufferReceive+0xd6>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 800c754:	f001 fefa 	bl	800e54c <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800c758:	6a38      	ldr	r0, [r7, #32]
 800c75a:	f000 f9a8 	bl	800caae <prvBytesInBuffer>
 800c75e:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 800c760:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c764:	429a      	cmp	r2, r3
 800c766:	d816      	bhi.n	800c796 <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 800c768:	2000      	movs	r0, #0
 800c76a:	f001 f9ed 	bl	800db48 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 800c76e:	6a3b      	ldr	r3, [r7, #32]
 800c770:	691b      	ldr	r3, [r3, #16]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d00a      	beq.n	800c78c <xStreamBufferReceive+0xa2>
	__asm volatile
 800c776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77a:	f383 8811 	msr	BASEPRI, r3
 800c77e:	f3bf 8f6f 	isb	sy
 800c782:	f3bf 8f4f 	dsb	sy
 800c786:	617b      	str	r3, [r7, #20]
}
 800c788:	bf00      	nop
 800c78a:	e7fe      	b.n	800c78a <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 800c78c:	f001 f82c 	bl	800d7e8 <xTaskGetCurrentTaskHandle>
 800c790:	4602      	mov	r2, r0
 800c792:	6a3b      	ldr	r3, [r7, #32]
 800c794:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c796:	f001 ff09 	bl	800e5ac <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 800c79a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d812      	bhi.n	800c7c8 <xStreamBufferReceive+0xde>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, UINT32_MAX, NULL, xTicksToWait );
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	f04f 31ff 	mov.w	r1, #4294967295
 800c7aa:	2000      	movs	r0, #0
 800c7ac:	f001 f8ce 	bl	800d94c <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 800c7b0:	6a3b      	ldr	r3, [r7, #32]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800c7b6:	6a38      	ldr	r0, [r7, #32]
 800c7b8:	f000 f979 	bl	800caae <prvBytesInBuffer>
 800c7bc:	62b8      	str	r0, [r7, #40]	; 0x28
 800c7be:	e003      	b.n	800c7c8 <xStreamBufferReceive+0xde>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800c7c0:	6a38      	ldr	r0, [r7, #32]
 800c7c2:	f000 f974 	bl	800caae <prvBytesInBuffer>
 800c7c6:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 800c7c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d91d      	bls.n	800c80c <xStreamBufferReceive+0x122>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 800c7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d2:	9300      	str	r3, [sp, #0]
 800c7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d6:	687a      	ldr	r2, [r7, #4]
 800c7d8:	68b9      	ldr	r1, [r7, #8]
 800c7da:	6a38      	ldr	r0, [r7, #32]
 800c7dc:	f000 f81b 	bl	800c816 <prvReadMessageFromBuffer>
 800c7e0:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 800c7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d011      	beq.n	800c80c <xStreamBufferReceive+0x122>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 800c7e8:	f000 fbe6 	bl	800cfb8 <vTaskSuspendAll>
 800c7ec:	6a3b      	ldr	r3, [r7, #32]
 800c7ee:	695b      	ldr	r3, [r3, #20]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d009      	beq.n	800c808 <xStreamBufferReceive+0x11e>
 800c7f4:	6a3b      	ldr	r3, [r7, #32]
 800c7f6:	6958      	ldr	r0, [r3, #20]
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	2100      	movs	r1, #0
 800c7fe:	f001 f8ff 	bl	800da00 <xTaskGenericNotify>
 800c802:	6a3b      	ldr	r3, [r7, #32]
 800c804:	2200      	movs	r2, #0
 800c806:	615a      	str	r2, [r3, #20]
 800c808:	f000 fbe4 	bl	800cfd4 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 800c80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3730      	adds	r7, #48	; 0x30
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}

0800c816 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 800c816:	b580      	push	{r7, lr}
 800c818:	b088      	sub	sp, #32
 800c81a:	af00      	add	r7, sp, #0
 800c81c:	60f8      	str	r0, [r7, #12]
 800c81e:	60b9      	str	r1, [r7, #8]
 800c820:	607a      	str	r2, [r7, #4]
 800c822:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 800c824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c826:	2b00      	cmp	r3, #0
 800c828:	d017      	beq.n	800c85a <prvReadMessageFromBuffer+0x44>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	61fb      	str	r3, [r7, #28]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 800c830:	f107 0114 	add.w	r1, r7, #20
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c838:	68f8      	ldr	r0, [r7, #12]
 800c83a:	f000 f8be 	bl	800c9ba <prvReadBytesFromBuffer>

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 800c83e:	683a      	ldr	r2, [r7, #0]
 800c840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c842:	1ad3      	subs	r3, r2, r3
 800c844:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	687a      	ldr	r2, [r7, #4]
 800c84a:	429a      	cmp	r2, r3
 800c84c:	d207      	bcs.n	800c85e <prvReadMessageFromBuffer+0x48>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	69fa      	ldr	r2, [r7, #28]
 800c852:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 800c854:	2300      	movs	r3, #0
 800c856:	617b      	str	r3, [r7, #20]
 800c858:	e001      	b.n	800c85e <prvReadMessageFromBuffer+0x48>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	617b      	str	r3, [r7, #20]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 800c85e:	697a      	ldr	r2, [r7, #20]
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	68b9      	ldr	r1, [r7, #8]
 800c864:	68f8      	ldr	r0, [r7, #12]
 800c866:	f000 f8a8 	bl	800c9ba <prvReadBytesFromBuffer>
 800c86a:	61b8      	str	r0, [r7, #24]

	return xReceivedLength;
 800c86c:	69bb      	ldr	r3, [r7, #24]
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3720      	adds	r7, #32
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}

0800c876 <xStreamBufferIsFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )
{
 800c876:	b580      	push	{r7, lr}
 800c878:	b086      	sub	sp, #24
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
size_t xBytesToStoreMessageLength;
const StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) xStreamBuffer; /*lint !e9087 !e9079 Safe cast as StreamBufferHandle_t is opaque Streambuffer_t. */
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	60fb      	str	r3, [r7, #12]

	configASSERT( pxStreamBuffer );
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d10a      	bne.n	800c89e <xStreamBufferIsFull+0x28>
	__asm volatile
 800c888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c88c:	f383 8811 	msr	BASEPRI, r3
 800c890:	f3bf 8f6f 	isb	sy
 800c894:	f3bf 8f4f 	dsb	sy
 800c898:	60bb      	str	r3, [r7, #8]
}
 800c89a:	bf00      	nop
 800c89c:	e7fe      	b.n	800c89c <xStreamBufferIsFull+0x26>

	/* This generic version of the receive function is used by both message
	buffers, which store discrete messages, and stream buffers, which store a
	continuous stream of bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	7f1b      	ldrb	r3, [r3, #28]
 800c8a2:	f003 0301 	and.w	r3, r3, #1
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d002      	beq.n	800c8b0 <xStreamBufferIsFull+0x3a>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800c8aa:	2304      	movs	r3, #4
 800c8ac:	613b      	str	r3, [r7, #16]
 800c8ae:	e001      	b.n	800c8b4 <xStreamBufferIsFull+0x3e>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	613b      	str	r3, [r7, #16]
	}

	/* True if the available space equals zero. */
	if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f7ff fe02 	bl	800c4be <xStreamBufferSpacesAvailable>
 800c8ba:	4602      	mov	r2, r0
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d302      	bcc.n	800c8c8 <xStreamBufferIsFull+0x52>
	{
		xReturn = pdTRUE;
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	617b      	str	r3, [r7, #20]
 800c8c6:	e001      	b.n	800c8cc <xStreamBufferIsFull+0x56>
	}
	else
	{
		xReturn = pdFALSE;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c8cc:	697b      	ldr	r3, [r7, #20]
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3718      	adds	r7, #24
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}

0800c8d6 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 800c8d6:	b580      	push	{r7, lr}
 800c8d8:	b08a      	sub	sp, #40	; 0x28
 800c8da:	af00      	add	r7, sp, #0
 800c8dc:	60f8      	str	r0, [r7, #12]
 800c8de:	60b9      	str	r1, [r7, #8]
 800c8e0:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d10a      	bne.n	800c8fe <prvWriteBytesToBuffer+0x28>
	__asm volatile
 800c8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ec:	f383 8811 	msr	BASEPRI, r3
 800c8f0:	f3bf 8f6f 	isb	sy
 800c8f4:	f3bf 8f4f 	dsb	sy
 800c8f8:	61fb      	str	r3, [r7, #28]
}
 800c8fa:	bf00      	nop
 800c8fc:	e7fe      	b.n	800c8fc <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	685b      	ldr	r3, [r3, #4]
 800c902:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	689a      	ldr	r2, [r3, #8]
 800c908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90a:	1ad3      	subs	r3, r2, r3
 800c90c:	687a      	ldr	r2, [r7, #4]
 800c90e:	4293      	cmp	r3, r2
 800c910:	bf28      	it	cs
 800c912:	4613      	movcs	r3, r2
 800c914:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 800c916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c918:	6a3b      	ldr	r3, [r7, #32]
 800c91a:	441a      	add	r2, r3
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	689b      	ldr	r3, [r3, #8]
 800c920:	429a      	cmp	r2, r3
 800c922:	d90a      	bls.n	800c93a <prvWriteBytesToBuffer+0x64>
	__asm volatile
 800c924:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c928:	f383 8811 	msr	BASEPRI, r3
 800c92c:	f3bf 8f6f 	isb	sy
 800c930:	f3bf 8f4f 	dsb	sy
 800c934:	61bb      	str	r3, [r7, #24]
}
 800c936:	bf00      	nop
 800c938:	e7fe      	b.n	800c938 <prvWriteBytesToBuffer+0x62>
	memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	699a      	ldr	r2, [r3, #24]
 800c93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c940:	4413      	add	r3, r2
 800c942:	6a3a      	ldr	r2, [r7, #32]
 800c944:	68b9      	ldr	r1, [r7, #8]
 800c946:	4618      	mov	r0, r3
 800c948:	f002 f932 	bl	800ebb0 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 800c94c:	687a      	ldr	r2, [r7, #4]
 800c94e:	6a3b      	ldr	r3, [r7, #32]
 800c950:	429a      	cmp	r2, r3
 800c952:	d91c      	bls.n	800c98e <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 800c954:	687a      	ldr	r2, [r7, #4]
 800c956:	6a3b      	ldr	r3, [r7, #32]
 800c958:	1ad2      	subs	r2, r2, r3
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	689b      	ldr	r3, [r3, #8]
 800c95e:	429a      	cmp	r2, r3
 800c960:	d90a      	bls.n	800c978 <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 800c962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c966:	f383 8811 	msr	BASEPRI, r3
 800c96a:	f3bf 8f6f 	isb	sy
 800c96e:	f3bf 8f4f 	dsb	sy
 800c972:	617b      	str	r3, [r7, #20]
}
 800c974:	bf00      	nop
 800c976:	e7fe      	b.n	800c976 <prvWriteBytesToBuffer+0xa0>
		memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	6998      	ldr	r0, [r3, #24]
 800c97c:	68ba      	ldr	r2, [r7, #8]
 800c97e:	6a3b      	ldr	r3, [r7, #32]
 800c980:	18d1      	adds	r1, r2, r3
 800c982:	687a      	ldr	r2, [r7, #4]
 800c984:	6a3b      	ldr	r3, [r7, #32]
 800c986:	1ad3      	subs	r3, r2, r3
 800c988:	461a      	mov	r2, r3
 800c98a:	f002 f911 	bl	800ebb0 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 800c98e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	4413      	add	r3, r2
 800c994:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	689b      	ldr	r3, [r3, #8]
 800c99a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c99c:	429a      	cmp	r2, r3
 800c99e:	d304      	bcc.n	800c9aa <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	689b      	ldr	r3, [r3, #8]
 800c9a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9a6:	1ad3      	subs	r3, r2, r3
 800c9a8:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9ae:	605a      	str	r2, [r3, #4]

	return xCount;
 800c9b0:	687b      	ldr	r3, [r7, #4]
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3728      	adds	r7, #40	; 0x28
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}

0800c9ba <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 800c9ba:	b580      	push	{r7, lr}
 800c9bc:	b08a      	sub	sp, #40	; 0x28
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	60f8      	str	r0, [r7, #12]
 800c9c2:	60b9      	str	r1, [r7, #8]
 800c9c4:	607a      	str	r2, [r7, #4]
 800c9c6:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800c9c8:	687a      	ldr	r2, [r7, #4]
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	bf28      	it	cs
 800c9d0:	4613      	movcs	r3, r2
 800c9d2:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 800c9d4:	6a3b      	ldr	r3, [r7, #32]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d064      	beq.n	800caa4 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	689a      	ldr	r2, [r3, #8]
 800c9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e6:	1ad3      	subs	r3, r2, r3
 800c9e8:	6a3a      	ldr	r2, [r7, #32]
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	bf28      	it	cs
 800c9ee:	4613      	movcs	r3, r2
 800c9f0:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 800c9f2:	69fa      	ldr	r2, [r7, #28]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	429a      	cmp	r2, r3
 800c9f8:	d90a      	bls.n	800ca10 <prvReadBytesFromBuffer+0x56>
	__asm volatile
 800c9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9fe:	f383 8811 	msr	BASEPRI, r3
 800ca02:	f3bf 8f6f 	isb	sy
 800ca06:	f3bf 8f4f 	dsb	sy
 800ca0a:	61bb      	str	r3, [r7, #24]
}
 800ca0c:	bf00      	nop
 800ca0e:	e7fe      	b.n	800ca0e <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 800ca10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca12:	69fb      	ldr	r3, [r7, #28]
 800ca14:	441a      	add	r2, r3
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	689b      	ldr	r3, [r3, #8]
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	d90a      	bls.n	800ca34 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 800ca1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca22:	f383 8811 	msr	BASEPRI, r3
 800ca26:	f3bf 8f6f 	isb	sy
 800ca2a:	f3bf 8f4f 	dsb	sy
 800ca2e:	617b      	str	r3, [r7, #20]
}
 800ca30:	bf00      	nop
 800ca32:	e7fe      	b.n	800ca32 <prvReadBytesFromBuffer+0x78>
		memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	699a      	ldr	r2, [r3, #24]
 800ca38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca3a:	4413      	add	r3, r2
 800ca3c:	69fa      	ldr	r2, [r7, #28]
 800ca3e:	4619      	mov	r1, r3
 800ca40:	68b8      	ldr	r0, [r7, #8]
 800ca42:	f002 f8b5 	bl	800ebb0 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 800ca46:	6a3a      	ldr	r2, [r7, #32]
 800ca48:	69fb      	ldr	r3, [r7, #28]
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	d919      	bls.n	800ca82 <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 800ca4e:	6a3a      	ldr	r2, [r7, #32]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d90a      	bls.n	800ca6c <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 800ca56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca5a:	f383 8811 	msr	BASEPRI, r3
 800ca5e:	f3bf 8f6f 	isb	sy
 800ca62:	f3bf 8f4f 	dsb	sy
 800ca66:	613b      	str	r3, [r7, #16]
}
 800ca68:	bf00      	nop
 800ca6a:	e7fe      	b.n	800ca6a <prvReadBytesFromBuffer+0xb0>
			memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800ca6c:	68ba      	ldr	r2, [r7, #8]
 800ca6e:	69fb      	ldr	r3, [r7, #28]
 800ca70:	18d0      	adds	r0, r2, r3
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	6999      	ldr	r1, [r3, #24]
 800ca76:	6a3a      	ldr	r2, [r7, #32]
 800ca78:	69fb      	ldr	r3, [r7, #28]
 800ca7a:	1ad3      	subs	r3, r2, r3
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	f002 f897 	bl	800ebb0 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 800ca82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca84:	6a3b      	ldr	r3, [r7, #32]
 800ca86:	4413      	add	r3, r2
 800ca88:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	689b      	ldr	r3, [r3, #8]
 800ca8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca90:	429a      	cmp	r2, r3
 800ca92:	d304      	bcc.n	800ca9e <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	689b      	ldr	r3, [r3, #8]
 800ca98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca9a:	1ad3      	subs	r3, r2, r3
 800ca9c:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800caa2:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800caa4:	6a3b      	ldr	r3, [r7, #32]
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3728      	adds	r7, #40	; 0x28
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}

0800caae <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 800caae:	b480      	push	{r7}
 800cab0:	b085      	sub	sp, #20
 800cab2:	af00      	add	r7, sp, #0
 800cab4:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	689a      	ldr	r2, [r3, #8]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	685b      	ldr	r3, [r3, #4]
 800cabe:	4413      	add	r3, r2
 800cac0:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	68fa      	ldr	r2, [r7, #12]
 800cac8:	1ad3      	subs	r3, r2, r3
 800caca:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	689b      	ldr	r3, [r3, #8]
 800cad0:	68fa      	ldr	r2, [r7, #12]
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d304      	bcc.n	800cae0 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	689b      	ldr	r3, [r3, #8]
 800cada:	68fa      	ldr	r2, [r7, #12]
 800cadc:	1ad3      	subs	r3, r2, r3
 800cade:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800cae0:	68fb      	ldr	r3, [r7, #12]
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3714      	adds	r7, #20
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bc80      	pop	{r7}
 800caea:	4770      	bx	lr

0800caec <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  BaseType_t xIsMessageBuffer )
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b086      	sub	sp, #24
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	60f8      	str	r0, [r7, #12]
 800caf4:	60b9      	str	r1, [r7, #8]
 800caf6:	607a      	str	r2, [r7, #4]
 800caf8:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 800cafa:	2355      	movs	r3, #85	; 0x55
 800cafc:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800cafe:	687a      	ldr	r2, [r7, #4]
 800cb00:	6979      	ldr	r1, [r7, #20]
 800cb02:	68b8      	ldr	r0, [r7, #8]
 800cb04:	f002 f862 	bl	800ebcc <memset>
 800cb08:	4602      	mov	r2, r0
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d00a      	beq.n	800cb26 <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 800cb10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb14:	f383 8811 	msr	BASEPRI, r3
 800cb18:	f3bf 8f6f 	isb	sy
 800cb1c:	f3bf 8f4f 	dsb	sy
 800cb20:	613b      	str	r3, [r7, #16]
}
 800cb22:	bf00      	nop
 800cb24:	e7fe      	b.n	800cb24 <prvInitialiseNewStreamBuffer+0x38>
	}
	#endif

	memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800cb26:	2220      	movs	r2, #32
 800cb28:	2100      	movs	r1, #0
 800cb2a:	68f8      	ldr	r0, [r7, #12]
 800cb2c:	f002 f84e 	bl	800ebcc <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	68ba      	ldr	r2, [r7, #8]
 800cb34:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	687a      	ldr	r2, [r7, #4]
 800cb3a:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	683a      	ldr	r2, [r7, #0]
 800cb40:	60da      	str	r2, [r3, #12]

	if( xIsMessageBuffer != pdFALSE )
 800cb42:	6a3b      	ldr	r3, [r7, #32]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d006      	beq.n	800cb56 <prvInitialiseNewStreamBuffer+0x6a>
	{
		pxStreamBuffer->ucFlags |= sbFLAGS_IS_MESSAGE_BUFFER;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	7f1b      	ldrb	r3, [r3, #28]
 800cb4c:	f043 0301 	orr.w	r3, r3, #1
 800cb50:	b2da      	uxtb	r2, r3
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	771a      	strb	r2, [r3, #28]
	}
}
 800cb56:	bf00      	nop
 800cb58:	3718      	adds	r7, #24
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cb5e:	b580      	push	{r7, lr}
 800cb60:	b08e      	sub	sp, #56	; 0x38
 800cb62:	af04      	add	r7, sp, #16
 800cb64:	60f8      	str	r0, [r7, #12]
 800cb66:	60b9      	str	r1, [r7, #8]
 800cb68:	607a      	str	r2, [r7, #4]
 800cb6a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cb6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d10a      	bne.n	800cb88 <xTaskCreateStatic+0x2a>
	__asm volatile
 800cb72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb76:	f383 8811 	msr	BASEPRI, r3
 800cb7a:	f3bf 8f6f 	isb	sy
 800cb7e:	f3bf 8f4f 	dsb	sy
 800cb82:	623b      	str	r3, [r7, #32]
}
 800cb84:	bf00      	nop
 800cb86:	e7fe      	b.n	800cb86 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d10a      	bne.n	800cba4 <xTaskCreateStatic+0x46>
	__asm volatile
 800cb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb92:	f383 8811 	msr	BASEPRI, r3
 800cb96:	f3bf 8f6f 	isb	sy
 800cb9a:	f3bf 8f4f 	dsb	sy
 800cb9e:	61fb      	str	r3, [r7, #28]
}
 800cba0:	bf00      	nop
 800cba2:	e7fe      	b.n	800cba2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cba4:	2354      	movs	r3, #84	; 0x54
 800cba6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	2b54      	cmp	r3, #84	; 0x54
 800cbac:	d00a      	beq.n	800cbc4 <xTaskCreateStatic+0x66>
	__asm volatile
 800cbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb2:	f383 8811 	msr	BASEPRI, r3
 800cbb6:	f3bf 8f6f 	isb	sy
 800cbba:	f3bf 8f4f 	dsb	sy
 800cbbe:	61bb      	str	r3, [r7, #24]
}
 800cbc0:	bf00      	nop
 800cbc2:	e7fe      	b.n	800cbc2 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d01e      	beq.n	800cc08 <xTaskCreateStatic+0xaa>
 800cbca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d01b      	beq.n	800cc08 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbd8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbdc:	2202      	movs	r2, #2
 800cbde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	9303      	str	r3, [sp, #12]
 800cbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe8:	9302      	str	r3, [sp, #8]
 800cbea:	f107 0314 	add.w	r3, r7, #20
 800cbee:	9301      	str	r3, [sp, #4]
 800cbf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf2:	9300      	str	r3, [sp, #0]
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	687a      	ldr	r2, [r7, #4]
 800cbf8:	68b9      	ldr	r1, [r7, #8]
 800cbfa:	68f8      	ldr	r0, [r7, #12]
 800cbfc:	f000 f850 	bl	800cca0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc02:	f000 f8d5 	bl	800cdb0 <prvAddNewTaskToReadyList>
 800cc06:	e001      	b.n	800cc0c <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cc0c:	697b      	ldr	r3, [r7, #20]
	}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3728      	adds	r7, #40	; 0x28
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}

0800cc16 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cc16:	b580      	push	{r7, lr}
 800cc18:	b08c      	sub	sp, #48	; 0x30
 800cc1a:	af04      	add	r7, sp, #16
 800cc1c:	60f8      	str	r0, [r7, #12]
 800cc1e:	60b9      	str	r1, [r7, #8]
 800cc20:	603b      	str	r3, [r7, #0]
 800cc22:	4613      	mov	r3, r2
 800cc24:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc26:	88fb      	ldrh	r3, [r7, #6]
 800cc28:	009b      	lsls	r3, r3, #2
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f001 fd8e 	bl	800e74c <pvPortMalloc>
 800cc30:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d00e      	beq.n	800cc56 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800cc38:	2054      	movs	r0, #84	; 0x54
 800cc3a:	f001 fd87 	bl	800e74c <pvPortMalloc>
 800cc3e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cc40:	69fb      	ldr	r3, [r7, #28]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d003      	beq.n	800cc4e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cc46:	69fb      	ldr	r3, [r7, #28]
 800cc48:	697a      	ldr	r2, [r7, #20]
 800cc4a:	631a      	str	r2, [r3, #48]	; 0x30
 800cc4c:	e005      	b.n	800cc5a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cc4e:	6978      	ldr	r0, [r7, #20]
 800cc50:	f001 fe40 	bl	800e8d4 <vPortFree>
 800cc54:	e001      	b.n	800cc5a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cc56:	2300      	movs	r3, #0
 800cc58:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cc5a:	69fb      	ldr	r3, [r7, #28]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d017      	beq.n	800cc90 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cc60:	69fb      	ldr	r3, [r7, #28]
 800cc62:	2200      	movs	r2, #0
 800cc64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cc68:	88fa      	ldrh	r2, [r7, #6]
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	9303      	str	r3, [sp, #12]
 800cc6e:	69fb      	ldr	r3, [r7, #28]
 800cc70:	9302      	str	r3, [sp, #8]
 800cc72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc74:	9301      	str	r3, [sp, #4]
 800cc76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc78:	9300      	str	r3, [sp, #0]
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	68b9      	ldr	r1, [r7, #8]
 800cc7e:	68f8      	ldr	r0, [r7, #12]
 800cc80:	f000 f80e 	bl	800cca0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc84:	69f8      	ldr	r0, [r7, #28]
 800cc86:	f000 f893 	bl	800cdb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	61bb      	str	r3, [r7, #24]
 800cc8e:	e002      	b.n	800cc96 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cc90:	f04f 33ff 	mov.w	r3, #4294967295
 800cc94:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cc96:	69bb      	ldr	r3, [r7, #24]
	}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3720      	adds	r7, #32
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}

0800cca0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b088      	sub	sp, #32
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	60f8      	str	r0, [r7, #12]
 800cca8:	60b9      	str	r1, [r7, #8]
 800ccaa:	607a      	str	r2, [r7, #4]
 800ccac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ccae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	009b      	lsls	r3, r3, #2
 800ccb6:	461a      	mov	r2, r3
 800ccb8:	21a5      	movs	r1, #165	; 0xa5
 800ccba:	f001 ff87 	bl	800ebcc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800ccbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ccc8:	3b01      	subs	r3, #1
 800ccca:	009b      	lsls	r3, r3, #2
 800cccc:	4413      	add	r3, r2
 800ccce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800ccd0:	69bb      	ldr	r3, [r7, #24]
 800ccd2:	f023 0307 	bic.w	r3, r3, #7
 800ccd6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ccd8:	69bb      	ldr	r3, [r7, #24]
 800ccda:	f003 0307 	and.w	r3, r3, #7
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d00a      	beq.n	800ccf8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800cce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce6:	f383 8811 	msr	BASEPRI, r3
 800ccea:	f3bf 8f6f 	isb	sy
 800ccee:	f3bf 8f4f 	dsb	sy
 800ccf2:	617b      	str	r3, [r7, #20]
}
 800ccf4:	bf00      	nop
 800ccf6:	e7fe      	b.n	800ccf6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	61fb      	str	r3, [r7, #28]
 800ccfc:	e012      	b.n	800cd24 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ccfe:	68ba      	ldr	r2, [r7, #8]
 800cd00:	69fb      	ldr	r3, [r7, #28]
 800cd02:	4413      	add	r3, r2
 800cd04:	7819      	ldrb	r1, [r3, #0]
 800cd06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd08:	69fb      	ldr	r3, [r7, #28]
 800cd0a:	4413      	add	r3, r2
 800cd0c:	3334      	adds	r3, #52	; 0x34
 800cd0e:	460a      	mov	r2, r1
 800cd10:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800cd12:	68ba      	ldr	r2, [r7, #8]
 800cd14:	69fb      	ldr	r3, [r7, #28]
 800cd16:	4413      	add	r3, r2
 800cd18:	781b      	ldrb	r3, [r3, #0]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d006      	beq.n	800cd2c <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd1e:	69fb      	ldr	r3, [r7, #28]
 800cd20:	3301      	adds	r3, #1
 800cd22:	61fb      	str	r3, [r7, #28]
 800cd24:	69fb      	ldr	r3, [r7, #28]
 800cd26:	2b0f      	cmp	r3, #15
 800cd28:	d9e9      	bls.n	800ccfe <prvInitialiseNewTask+0x5e>
 800cd2a:	e000      	b.n	800cd2e <prvInitialiseNewTask+0x8e>
		{
			break;
 800cd2c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd30:	2200      	movs	r2, #0
 800cd32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd38:	2b06      	cmp	r3, #6
 800cd3a:	d901      	bls.n	800cd40 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cd3c:	2306      	movs	r3, #6
 800cd3e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cd40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd44:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd4a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800cd4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd4e:	2200      	movs	r2, #0
 800cd50:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd54:	3304      	adds	r3, #4
 800cd56:	4618      	mov	r0, r3
 800cd58:	f7fe fdbf 	bl	800b8da <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cd5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd5e:	3318      	adds	r3, #24
 800cd60:	4618      	mov	r0, r3
 800cd62:	f7fe fdba 	bl	800b8da <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd6e:	f1c3 0207 	rsb	r2, r3, #7
 800cd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd7a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7e:	2200      	movs	r2, #0
 800cd80:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cd82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd84:	2200      	movs	r2, #0
 800cd86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cd8a:	683a      	ldr	r2, [r7, #0]
 800cd8c:	68f9      	ldr	r1, [r7, #12]
 800cd8e:	69b8      	ldr	r0, [r7, #24]
 800cd90:	f001 faee 	bl	800e370 <pxPortInitialiseStack>
 800cd94:	4602      	mov	r2, r0
 800cd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd98:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800cd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d002      	beq.n	800cda6 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cda0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cda2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cda4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cda6:	bf00      	nop
 800cda8:	3720      	adds	r7, #32
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}
	...

0800cdb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cdb8:	f001 fbc8 	bl	800e54c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cdbc:	4b2a      	ldr	r3, [pc, #168]	; (800ce68 <prvAddNewTaskToReadyList+0xb8>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	3301      	adds	r3, #1
 800cdc2:	4a29      	ldr	r2, [pc, #164]	; (800ce68 <prvAddNewTaskToReadyList+0xb8>)
 800cdc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cdc6:	4b29      	ldr	r3, [pc, #164]	; (800ce6c <prvAddNewTaskToReadyList+0xbc>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d109      	bne.n	800cde2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cdce:	4a27      	ldr	r2, [pc, #156]	; (800ce6c <prvAddNewTaskToReadyList+0xbc>)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cdd4:	4b24      	ldr	r3, [pc, #144]	; (800ce68 <prvAddNewTaskToReadyList+0xb8>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	2b01      	cmp	r3, #1
 800cdda:	d110      	bne.n	800cdfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cddc:	f000 fc42 	bl	800d664 <prvInitialiseTaskLists>
 800cde0:	e00d      	b.n	800cdfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cde2:	4b23      	ldr	r3, [pc, #140]	; (800ce70 <prvAddNewTaskToReadyList+0xc0>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d109      	bne.n	800cdfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cdea:	4b20      	ldr	r3, [pc, #128]	; (800ce6c <prvAddNewTaskToReadyList+0xbc>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	d802      	bhi.n	800cdfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cdf8:	4a1c      	ldr	r2, [pc, #112]	; (800ce6c <prvAddNewTaskToReadyList+0xbc>)
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cdfe:	4b1d      	ldr	r3, [pc, #116]	; (800ce74 <prvAddNewTaskToReadyList+0xc4>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	3301      	adds	r3, #1
 800ce04:	4a1b      	ldr	r2, [pc, #108]	; (800ce74 <prvAddNewTaskToReadyList+0xc4>)
 800ce06:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce0c:	2201      	movs	r2, #1
 800ce0e:	409a      	lsls	r2, r3
 800ce10:	4b19      	ldr	r3, [pc, #100]	; (800ce78 <prvAddNewTaskToReadyList+0xc8>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	4313      	orrs	r3, r2
 800ce16:	4a18      	ldr	r2, [pc, #96]	; (800ce78 <prvAddNewTaskToReadyList+0xc8>)
 800ce18:	6013      	str	r3, [r2, #0]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce1e:	4613      	mov	r3, r2
 800ce20:	009b      	lsls	r3, r3, #2
 800ce22:	4413      	add	r3, r2
 800ce24:	009b      	lsls	r3, r3, #2
 800ce26:	4a15      	ldr	r2, [pc, #84]	; (800ce7c <prvAddNewTaskToReadyList+0xcc>)
 800ce28:	441a      	add	r2, r3
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	3304      	adds	r3, #4
 800ce2e:	4619      	mov	r1, r3
 800ce30:	4610      	mov	r0, r2
 800ce32:	f7fe fd5e 	bl	800b8f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ce36:	f001 fbb9 	bl	800e5ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ce3a:	4b0d      	ldr	r3, [pc, #52]	; (800ce70 <prvAddNewTaskToReadyList+0xc0>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d00e      	beq.n	800ce60 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ce42:	4b0a      	ldr	r3, [pc, #40]	; (800ce6c <prvAddNewTaskToReadyList+0xbc>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d207      	bcs.n	800ce60 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ce50:	4b0b      	ldr	r3, [pc, #44]	; (800ce80 <prvAddNewTaskToReadyList+0xd0>)
 800ce52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce56:	601a      	str	r2, [r3, #0]
 800ce58:	f3bf 8f4f 	dsb	sy
 800ce5c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce60:	bf00      	nop
 800ce62:	3708      	adds	r7, #8
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}
 800ce68:	20001758 	.word	0x20001758
 800ce6c:	20001658 	.word	0x20001658
 800ce70:	20001764 	.word	0x20001764
 800ce74:	20001774 	.word	0x20001774
 800ce78:	20001760 	.word	0x20001760
 800ce7c:	2000165c 	.word	0x2000165c
 800ce80:	e000ed04 	.word	0xe000ed04

0800ce84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b084      	sub	sp, #16
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d017      	beq.n	800cec6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ce96:	4b13      	ldr	r3, [pc, #76]	; (800cee4 <vTaskDelay+0x60>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d00a      	beq.n	800ceb4 <vTaskDelay+0x30>
	__asm volatile
 800ce9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea2:	f383 8811 	msr	BASEPRI, r3
 800cea6:	f3bf 8f6f 	isb	sy
 800ceaa:	f3bf 8f4f 	dsb	sy
 800ceae:	60bb      	str	r3, [r7, #8]
}
 800ceb0:	bf00      	nop
 800ceb2:	e7fe      	b.n	800ceb2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ceb4:	f000 f880 	bl	800cfb8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ceb8:	2100      	movs	r1, #0
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f000 fe6a 	bl	800db94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cec0:	f000 f888 	bl	800cfd4 <xTaskResumeAll>
 800cec4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d107      	bne.n	800cedc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cecc:	4b06      	ldr	r3, [pc, #24]	; (800cee8 <vTaskDelay+0x64>)
 800cece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ced2:	601a      	str	r2, [r3, #0]
 800ced4:	f3bf 8f4f 	dsb	sy
 800ced8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cedc:	bf00      	nop
 800cede:	3710      	adds	r7, #16
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}
 800cee4:	20001780 	.word	0x20001780
 800cee8:	e000ed04 	.word	0xe000ed04

0800ceec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b08a      	sub	sp, #40	; 0x28
 800cef0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cef2:	2300      	movs	r3, #0
 800cef4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cef6:	2300      	movs	r3, #0
 800cef8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cefa:	463a      	mov	r2, r7
 800cefc:	1d39      	adds	r1, r7, #4
 800cefe:	f107 0308 	add.w	r3, r7, #8
 800cf02:	4618      	mov	r0, r3
 800cf04:	f7f7 fd48 	bl	8004998 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cf08:	6839      	ldr	r1, [r7, #0]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	68ba      	ldr	r2, [r7, #8]
 800cf0e:	9202      	str	r2, [sp, #8]
 800cf10:	9301      	str	r3, [sp, #4]
 800cf12:	2300      	movs	r3, #0
 800cf14:	9300      	str	r3, [sp, #0]
 800cf16:	2300      	movs	r3, #0
 800cf18:	460a      	mov	r2, r1
 800cf1a:	4921      	ldr	r1, [pc, #132]	; (800cfa0 <vTaskStartScheduler+0xb4>)
 800cf1c:	4821      	ldr	r0, [pc, #132]	; (800cfa4 <vTaskStartScheduler+0xb8>)
 800cf1e:	f7ff fe1e 	bl	800cb5e <xTaskCreateStatic>
 800cf22:	4603      	mov	r3, r0
 800cf24:	4a20      	ldr	r2, [pc, #128]	; (800cfa8 <vTaskStartScheduler+0xbc>)
 800cf26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cf28:	4b1f      	ldr	r3, [pc, #124]	; (800cfa8 <vTaskStartScheduler+0xbc>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d002      	beq.n	800cf36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cf30:	2301      	movs	r3, #1
 800cf32:	617b      	str	r3, [r7, #20]
 800cf34:	e001      	b.n	800cf3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cf36:	2300      	movs	r3, #0
 800cf38:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	2b01      	cmp	r3, #1
 800cf3e:	d102      	bne.n	800cf46 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cf40:	f000 fe8e 	bl	800dc60 <xTimerCreateTimerTask>
 800cf44:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	2b01      	cmp	r3, #1
 800cf4a:	d116      	bne.n	800cf7a <vTaskStartScheduler+0x8e>
	__asm volatile
 800cf4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf50:	f383 8811 	msr	BASEPRI, r3
 800cf54:	f3bf 8f6f 	isb	sy
 800cf58:	f3bf 8f4f 	dsb	sy
 800cf5c:	613b      	str	r3, [r7, #16]
}
 800cf5e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cf60:	4b12      	ldr	r3, [pc, #72]	; (800cfac <vTaskStartScheduler+0xc0>)
 800cf62:	f04f 32ff 	mov.w	r2, #4294967295
 800cf66:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cf68:	4b11      	ldr	r3, [pc, #68]	; (800cfb0 <vTaskStartScheduler+0xc4>)
 800cf6a:	2201      	movs	r2, #1
 800cf6c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800cf6e:	4b11      	ldr	r3, [pc, #68]	; (800cfb4 <vTaskStartScheduler+0xc8>)
 800cf70:	2200      	movs	r2, #0
 800cf72:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cf74:	f001 fa78 	bl	800e468 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cf78:	e00e      	b.n	800cf98 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf80:	d10a      	bne.n	800cf98 <vTaskStartScheduler+0xac>
	__asm volatile
 800cf82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf86:	f383 8811 	msr	BASEPRI, r3
 800cf8a:	f3bf 8f6f 	isb	sy
 800cf8e:	f3bf 8f4f 	dsb	sy
 800cf92:	60fb      	str	r3, [r7, #12]
}
 800cf94:	bf00      	nop
 800cf96:	e7fe      	b.n	800cf96 <vTaskStartScheduler+0xaa>
}
 800cf98:	bf00      	nop
 800cf9a:	3718      	adds	r7, #24
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}
 800cfa0:	08013648 	.word	0x08013648
 800cfa4:	0800d635 	.word	0x0800d635
 800cfa8:	2000177c 	.word	0x2000177c
 800cfac:	20001778 	.word	0x20001778
 800cfb0:	20001764 	.word	0x20001764
 800cfb4:	2000175c 	.word	0x2000175c

0800cfb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cfb8:	b480      	push	{r7}
 800cfba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800cfbc:	4b04      	ldr	r3, [pc, #16]	; (800cfd0 <vTaskSuspendAll+0x18>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	3301      	adds	r3, #1
 800cfc2:	4a03      	ldr	r2, [pc, #12]	; (800cfd0 <vTaskSuspendAll+0x18>)
 800cfc4:	6013      	str	r3, [r2, #0]
}
 800cfc6:	bf00      	nop
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bc80      	pop	{r7}
 800cfcc:	4770      	bx	lr
 800cfce:	bf00      	nop
 800cfd0:	20001780 	.word	0x20001780

0800cfd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b084      	sub	sp, #16
 800cfd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cfe2:	4b41      	ldr	r3, [pc, #260]	; (800d0e8 <xTaskResumeAll+0x114>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d10a      	bne.n	800d000 <xTaskResumeAll+0x2c>
	__asm volatile
 800cfea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfee:	f383 8811 	msr	BASEPRI, r3
 800cff2:	f3bf 8f6f 	isb	sy
 800cff6:	f3bf 8f4f 	dsb	sy
 800cffa:	603b      	str	r3, [r7, #0]
}
 800cffc:	bf00      	nop
 800cffe:	e7fe      	b.n	800cffe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d000:	f001 faa4 	bl	800e54c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d004:	4b38      	ldr	r3, [pc, #224]	; (800d0e8 <xTaskResumeAll+0x114>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	3b01      	subs	r3, #1
 800d00a:	4a37      	ldr	r2, [pc, #220]	; (800d0e8 <xTaskResumeAll+0x114>)
 800d00c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d00e:	4b36      	ldr	r3, [pc, #216]	; (800d0e8 <xTaskResumeAll+0x114>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d161      	bne.n	800d0da <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d016:	4b35      	ldr	r3, [pc, #212]	; (800d0ec <xTaskResumeAll+0x118>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d05d      	beq.n	800d0da <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d01e:	e02e      	b.n	800d07e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800d020:	4b33      	ldr	r3, [pc, #204]	; (800d0f0 <xTaskResumeAll+0x11c>)
 800d022:	68db      	ldr	r3, [r3, #12]
 800d024:	68db      	ldr	r3, [r3, #12]
 800d026:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	3318      	adds	r3, #24
 800d02c:	4618      	mov	r0, r3
 800d02e:	f7fe fcbb 	bl	800b9a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	3304      	adds	r3, #4
 800d036:	4618      	mov	r0, r3
 800d038:	f7fe fcb6 	bl	800b9a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d040:	2201      	movs	r2, #1
 800d042:	409a      	lsls	r2, r3
 800d044:	4b2b      	ldr	r3, [pc, #172]	; (800d0f4 <xTaskResumeAll+0x120>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	4313      	orrs	r3, r2
 800d04a:	4a2a      	ldr	r2, [pc, #168]	; (800d0f4 <xTaskResumeAll+0x120>)
 800d04c:	6013      	str	r3, [r2, #0]
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d052:	4613      	mov	r3, r2
 800d054:	009b      	lsls	r3, r3, #2
 800d056:	4413      	add	r3, r2
 800d058:	009b      	lsls	r3, r3, #2
 800d05a:	4a27      	ldr	r2, [pc, #156]	; (800d0f8 <xTaskResumeAll+0x124>)
 800d05c:	441a      	add	r2, r3
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	3304      	adds	r3, #4
 800d062:	4619      	mov	r1, r3
 800d064:	4610      	mov	r0, r2
 800d066:	f7fe fc44 	bl	800b8f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d06e:	4b23      	ldr	r3, [pc, #140]	; (800d0fc <xTaskResumeAll+0x128>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d074:	429a      	cmp	r2, r3
 800d076:	d302      	bcc.n	800d07e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d078:	4b21      	ldr	r3, [pc, #132]	; (800d100 <xTaskResumeAll+0x12c>)
 800d07a:	2201      	movs	r2, #1
 800d07c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d07e:	4b1c      	ldr	r3, [pc, #112]	; (800d0f0 <xTaskResumeAll+0x11c>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d1cc      	bne.n	800d020 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d001      	beq.n	800d090 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d08c:	f000 fb88 	bl	800d7a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d090:	4b1c      	ldr	r3, [pc, #112]	; (800d104 <xTaskResumeAll+0x130>)
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d010      	beq.n	800d0be <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d09c:	f000 f856 	bl	800d14c <xTaskIncrementTick>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d002      	beq.n	800d0ac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d0a6:	4b16      	ldr	r3, [pc, #88]	; (800d100 <xTaskResumeAll+0x12c>)
 800d0a8:	2201      	movs	r2, #1
 800d0aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	3b01      	subs	r3, #1
 800d0b0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d1f1      	bne.n	800d09c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800d0b8:	4b12      	ldr	r3, [pc, #72]	; (800d104 <xTaskResumeAll+0x130>)
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d0be:	4b10      	ldr	r3, [pc, #64]	; (800d100 <xTaskResumeAll+0x12c>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d009      	beq.n	800d0da <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d0ca:	4b0f      	ldr	r3, [pc, #60]	; (800d108 <xTaskResumeAll+0x134>)
 800d0cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0d0:	601a      	str	r2, [r3, #0]
 800d0d2:	f3bf 8f4f 	dsb	sy
 800d0d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d0da:	f001 fa67 	bl	800e5ac <vPortExitCritical>

	return xAlreadyYielded;
 800d0de:	68bb      	ldr	r3, [r7, #8]
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3710      	adds	r7, #16
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}
 800d0e8:	20001780 	.word	0x20001780
 800d0ec:	20001758 	.word	0x20001758
 800d0f0:	20001718 	.word	0x20001718
 800d0f4:	20001760 	.word	0x20001760
 800d0f8:	2000165c 	.word	0x2000165c
 800d0fc:	20001658 	.word	0x20001658
 800d100:	2000176c 	.word	0x2000176c
 800d104:	20001768 	.word	0x20001768
 800d108:	e000ed04 	.word	0xe000ed04

0800d10c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d10c:	b480      	push	{r7}
 800d10e:	b083      	sub	sp, #12
 800d110:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d112:	4b04      	ldr	r3, [pc, #16]	; (800d124 <xTaskGetTickCount+0x18>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d118:	687b      	ldr	r3, [r7, #4]
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	370c      	adds	r7, #12
 800d11e:	46bd      	mov	sp, r7
 800d120:	bc80      	pop	{r7}
 800d122:	4770      	bx	lr
 800d124:	2000175c 	.word	0x2000175c

0800d128 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b082      	sub	sp, #8
 800d12c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d12e:	f001 facf 	bl	800e6d0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d132:	2300      	movs	r3, #0
 800d134:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d136:	4b04      	ldr	r3, [pc, #16]	; (800d148 <xTaskGetTickCountFromISR+0x20>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d13c:	683b      	ldr	r3, [r7, #0]
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3708      	adds	r7, #8
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}
 800d146:	bf00      	nop
 800d148:	2000175c 	.word	0x2000175c

0800d14c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b086      	sub	sp, #24
 800d150:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d152:	2300      	movs	r3, #0
 800d154:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d156:	4b51      	ldr	r3, [pc, #324]	; (800d29c <xTaskIncrementTick+0x150>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	f040 808d 	bne.w	800d27a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d160:	4b4f      	ldr	r3, [pc, #316]	; (800d2a0 <xTaskIncrementTick+0x154>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	3301      	adds	r3, #1
 800d166:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d168:	4a4d      	ldr	r2, [pc, #308]	; (800d2a0 <xTaskIncrementTick+0x154>)
 800d16a:	693b      	ldr	r3, [r7, #16]
 800d16c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d120      	bne.n	800d1b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d174:	4b4b      	ldr	r3, [pc, #300]	; (800d2a4 <xTaskIncrementTick+0x158>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d00a      	beq.n	800d194 <xTaskIncrementTick+0x48>
	__asm volatile
 800d17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d182:	f383 8811 	msr	BASEPRI, r3
 800d186:	f3bf 8f6f 	isb	sy
 800d18a:	f3bf 8f4f 	dsb	sy
 800d18e:	603b      	str	r3, [r7, #0]
}
 800d190:	bf00      	nop
 800d192:	e7fe      	b.n	800d192 <xTaskIncrementTick+0x46>
 800d194:	4b43      	ldr	r3, [pc, #268]	; (800d2a4 <xTaskIncrementTick+0x158>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	60fb      	str	r3, [r7, #12]
 800d19a:	4b43      	ldr	r3, [pc, #268]	; (800d2a8 <xTaskIncrementTick+0x15c>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	4a41      	ldr	r2, [pc, #260]	; (800d2a4 <xTaskIncrementTick+0x158>)
 800d1a0:	6013      	str	r3, [r2, #0]
 800d1a2:	4a41      	ldr	r2, [pc, #260]	; (800d2a8 <xTaskIncrementTick+0x15c>)
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	6013      	str	r3, [r2, #0]
 800d1a8:	4b40      	ldr	r3, [pc, #256]	; (800d2ac <xTaskIncrementTick+0x160>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	3301      	adds	r3, #1
 800d1ae:	4a3f      	ldr	r2, [pc, #252]	; (800d2ac <xTaskIncrementTick+0x160>)
 800d1b0:	6013      	str	r3, [r2, #0]
 800d1b2:	f000 faf5 	bl	800d7a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d1b6:	4b3e      	ldr	r3, [pc, #248]	; (800d2b0 <xTaskIncrementTick+0x164>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	693a      	ldr	r2, [r7, #16]
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d34d      	bcc.n	800d25c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1c0:	4b38      	ldr	r3, [pc, #224]	; (800d2a4 <xTaskIncrementTick+0x158>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d101      	bne.n	800d1ce <xTaskIncrementTick+0x82>
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	e000      	b.n	800d1d0 <xTaskIncrementTick+0x84>
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d004      	beq.n	800d1de <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1d4:	4b36      	ldr	r3, [pc, #216]	; (800d2b0 <xTaskIncrementTick+0x164>)
 800d1d6:	f04f 32ff 	mov.w	r2, #4294967295
 800d1da:	601a      	str	r2, [r3, #0]
					break;
 800d1dc:	e03e      	b.n	800d25c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d1de:	4b31      	ldr	r3, [pc, #196]	; (800d2a4 <xTaskIncrementTick+0x158>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	68db      	ldr	r3, [r3, #12]
 800d1e4:	68db      	ldr	r3, [r3, #12]
 800d1e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	685b      	ldr	r3, [r3, #4]
 800d1ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d1ee:	693a      	ldr	r2, [r7, #16]
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d203      	bcs.n	800d1fe <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d1f6:	4a2e      	ldr	r2, [pc, #184]	; (800d2b0 <xTaskIncrementTick+0x164>)
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6013      	str	r3, [r2, #0]
						break;
 800d1fc:	e02e      	b.n	800d25c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	3304      	adds	r3, #4
 800d202:	4618      	mov	r0, r3
 800d204:	f7fe fbd0 	bl	800b9a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d004      	beq.n	800d21a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	3318      	adds	r3, #24
 800d214:	4618      	mov	r0, r3
 800d216:	f7fe fbc7 	bl	800b9a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d21e:	2201      	movs	r2, #1
 800d220:	409a      	lsls	r2, r3
 800d222:	4b24      	ldr	r3, [pc, #144]	; (800d2b4 <xTaskIncrementTick+0x168>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	4313      	orrs	r3, r2
 800d228:	4a22      	ldr	r2, [pc, #136]	; (800d2b4 <xTaskIncrementTick+0x168>)
 800d22a:	6013      	str	r3, [r2, #0]
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d230:	4613      	mov	r3, r2
 800d232:	009b      	lsls	r3, r3, #2
 800d234:	4413      	add	r3, r2
 800d236:	009b      	lsls	r3, r3, #2
 800d238:	4a1f      	ldr	r2, [pc, #124]	; (800d2b8 <xTaskIncrementTick+0x16c>)
 800d23a:	441a      	add	r2, r3
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	3304      	adds	r3, #4
 800d240:	4619      	mov	r1, r3
 800d242:	4610      	mov	r0, r2
 800d244:	f7fe fb55 	bl	800b8f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d24c:	4b1b      	ldr	r3, [pc, #108]	; (800d2bc <xTaskIncrementTick+0x170>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d252:	429a      	cmp	r2, r3
 800d254:	d3b4      	bcc.n	800d1c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d256:	2301      	movs	r3, #1
 800d258:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d25a:	e7b1      	b.n	800d1c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d25c:	4b17      	ldr	r3, [pc, #92]	; (800d2bc <xTaskIncrementTick+0x170>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d262:	4915      	ldr	r1, [pc, #84]	; (800d2b8 <xTaskIncrementTick+0x16c>)
 800d264:	4613      	mov	r3, r2
 800d266:	009b      	lsls	r3, r3, #2
 800d268:	4413      	add	r3, r2
 800d26a:	009b      	lsls	r3, r3, #2
 800d26c:	440b      	add	r3, r1
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	2b01      	cmp	r3, #1
 800d272:	d907      	bls.n	800d284 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800d274:	2301      	movs	r3, #1
 800d276:	617b      	str	r3, [r7, #20]
 800d278:	e004      	b.n	800d284 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d27a:	4b11      	ldr	r3, [pc, #68]	; (800d2c0 <xTaskIncrementTick+0x174>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	3301      	adds	r3, #1
 800d280:	4a0f      	ldr	r2, [pc, #60]	; (800d2c0 <xTaskIncrementTick+0x174>)
 800d282:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d284:	4b0f      	ldr	r3, [pc, #60]	; (800d2c4 <xTaskIncrementTick+0x178>)
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d001      	beq.n	800d290 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800d28c:	2301      	movs	r3, #1
 800d28e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d290:	697b      	ldr	r3, [r7, #20]
}
 800d292:	4618      	mov	r0, r3
 800d294:	3718      	adds	r7, #24
 800d296:	46bd      	mov	sp, r7
 800d298:	bd80      	pop	{r7, pc}
 800d29a:	bf00      	nop
 800d29c:	20001780 	.word	0x20001780
 800d2a0:	2000175c 	.word	0x2000175c
 800d2a4:	20001710 	.word	0x20001710
 800d2a8:	20001714 	.word	0x20001714
 800d2ac:	20001770 	.word	0x20001770
 800d2b0:	20001778 	.word	0x20001778
 800d2b4:	20001760 	.word	0x20001760
 800d2b8:	2000165c 	.word	0x2000165c
 800d2bc:	20001658 	.word	0x20001658
 800d2c0:	20001768 	.word	0x20001768
 800d2c4:	2000176c 	.word	0x2000176c

0800d2c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b087      	sub	sp, #28
 800d2cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d2ce:	4b26      	ldr	r3, [pc, #152]	; (800d368 <vTaskSwitchContext+0xa0>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d003      	beq.n	800d2de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d2d6:	4b25      	ldr	r3, [pc, #148]	; (800d36c <vTaskSwitchContext+0xa4>)
 800d2d8:	2201      	movs	r2, #1
 800d2da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d2dc:	e03f      	b.n	800d35e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800d2de:	4b23      	ldr	r3, [pc, #140]	; (800d36c <vTaskSwitchContext+0xa4>)
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800d2e4:	4b22      	ldr	r3, [pc, #136]	; (800d370 <vTaskSwitchContext+0xa8>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	fab3 f383 	clz	r3, r3
 800d2f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d2f2:	7afb      	ldrb	r3, [r7, #11]
 800d2f4:	f1c3 031f 	rsb	r3, r3, #31
 800d2f8:	617b      	str	r3, [r7, #20]
 800d2fa:	491e      	ldr	r1, [pc, #120]	; (800d374 <vTaskSwitchContext+0xac>)
 800d2fc:	697a      	ldr	r2, [r7, #20]
 800d2fe:	4613      	mov	r3, r2
 800d300:	009b      	lsls	r3, r3, #2
 800d302:	4413      	add	r3, r2
 800d304:	009b      	lsls	r3, r3, #2
 800d306:	440b      	add	r3, r1
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d10a      	bne.n	800d324 <vTaskSwitchContext+0x5c>
	__asm volatile
 800d30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d312:	f383 8811 	msr	BASEPRI, r3
 800d316:	f3bf 8f6f 	isb	sy
 800d31a:	f3bf 8f4f 	dsb	sy
 800d31e:	607b      	str	r3, [r7, #4]
}
 800d320:	bf00      	nop
 800d322:	e7fe      	b.n	800d322 <vTaskSwitchContext+0x5a>
 800d324:	697a      	ldr	r2, [r7, #20]
 800d326:	4613      	mov	r3, r2
 800d328:	009b      	lsls	r3, r3, #2
 800d32a:	4413      	add	r3, r2
 800d32c:	009b      	lsls	r3, r3, #2
 800d32e:	4a11      	ldr	r2, [pc, #68]	; (800d374 <vTaskSwitchContext+0xac>)
 800d330:	4413      	add	r3, r2
 800d332:	613b      	str	r3, [r7, #16]
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	685b      	ldr	r3, [r3, #4]
 800d338:	685a      	ldr	r2, [r3, #4]
 800d33a:	693b      	ldr	r3, [r7, #16]
 800d33c:	605a      	str	r2, [r3, #4]
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	685a      	ldr	r2, [r3, #4]
 800d342:	693b      	ldr	r3, [r7, #16]
 800d344:	3308      	adds	r3, #8
 800d346:	429a      	cmp	r2, r3
 800d348:	d104      	bne.n	800d354 <vTaskSwitchContext+0x8c>
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	685b      	ldr	r3, [r3, #4]
 800d34e:	685a      	ldr	r2, [r3, #4]
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	605a      	str	r2, [r3, #4]
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	685b      	ldr	r3, [r3, #4]
 800d358:	68db      	ldr	r3, [r3, #12]
 800d35a:	4a07      	ldr	r2, [pc, #28]	; (800d378 <vTaskSwitchContext+0xb0>)
 800d35c:	6013      	str	r3, [r2, #0]
}
 800d35e:	bf00      	nop
 800d360:	371c      	adds	r7, #28
 800d362:	46bd      	mov	sp, r7
 800d364:	bc80      	pop	{r7}
 800d366:	4770      	bx	lr
 800d368:	20001780 	.word	0x20001780
 800d36c:	2000176c 	.word	0x2000176c
 800d370:	20001760 	.word	0x20001760
 800d374:	2000165c 	.word	0x2000165c
 800d378:	20001658 	.word	0x20001658

0800d37c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b084      	sub	sp, #16
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d10a      	bne.n	800d3a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d390:	f383 8811 	msr	BASEPRI, r3
 800d394:	f3bf 8f6f 	isb	sy
 800d398:	f3bf 8f4f 	dsb	sy
 800d39c:	60fb      	str	r3, [r7, #12]
}
 800d39e:	bf00      	nop
 800d3a0:	e7fe      	b.n	800d3a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d3a2:	4b07      	ldr	r3, [pc, #28]	; (800d3c0 <vTaskPlaceOnEventList+0x44>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	3318      	adds	r3, #24
 800d3a8:	4619      	mov	r1, r3
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f7fe fac4 	bl	800b938 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d3b0:	2101      	movs	r1, #1
 800d3b2:	6838      	ldr	r0, [r7, #0]
 800d3b4:	f000 fbee 	bl	800db94 <prvAddCurrentTaskToDelayedList>
}
 800d3b8:	bf00      	nop
 800d3ba:	3710      	adds	r7, #16
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}
 800d3c0:	20001658 	.word	0x20001658

0800d3c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b086      	sub	sp, #24
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	60f8      	str	r0, [r7, #12]
 800d3cc:	60b9      	str	r1, [r7, #8]
 800d3ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d10a      	bne.n	800d3ec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3da:	f383 8811 	msr	BASEPRI, r3
 800d3de:	f3bf 8f6f 	isb	sy
 800d3e2:	f3bf 8f4f 	dsb	sy
 800d3e6:	617b      	str	r3, [r7, #20]
}
 800d3e8:	bf00      	nop
 800d3ea:	e7fe      	b.n	800d3ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d3ec:	4b0a      	ldr	r3, [pc, #40]	; (800d418 <vTaskPlaceOnEventListRestricted+0x54>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	3318      	adds	r3, #24
 800d3f2:	4619      	mov	r1, r3
 800d3f4:	68f8      	ldr	r0, [r7, #12]
 800d3f6:	f7fe fa7c 	bl	800b8f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d002      	beq.n	800d406 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d400:	f04f 33ff 	mov.w	r3, #4294967295
 800d404:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d406:	6879      	ldr	r1, [r7, #4]
 800d408:	68b8      	ldr	r0, [r7, #8]
 800d40a:	f000 fbc3 	bl	800db94 <prvAddCurrentTaskToDelayedList>
	}
 800d40e:	bf00      	nop
 800d410:	3718      	adds	r7, #24
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}
 800d416:	bf00      	nop
 800d418:	20001658 	.word	0x20001658

0800d41c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b086      	sub	sp, #24
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	68db      	ldr	r3, [r3, #12]
 800d428:	68db      	ldr	r3, [r3, #12]
 800d42a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d42c:	693b      	ldr	r3, [r7, #16]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d10a      	bne.n	800d448 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d436:	f383 8811 	msr	BASEPRI, r3
 800d43a:	f3bf 8f6f 	isb	sy
 800d43e:	f3bf 8f4f 	dsb	sy
 800d442:	60fb      	str	r3, [r7, #12]
}
 800d444:	bf00      	nop
 800d446:	e7fe      	b.n	800d446 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	3318      	adds	r3, #24
 800d44c:	4618      	mov	r0, r3
 800d44e:	f7fe faab 	bl	800b9a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d452:	4b1d      	ldr	r3, [pc, #116]	; (800d4c8 <xTaskRemoveFromEventList+0xac>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d11c      	bne.n	800d494 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d45a:	693b      	ldr	r3, [r7, #16]
 800d45c:	3304      	adds	r3, #4
 800d45e:	4618      	mov	r0, r3
 800d460:	f7fe faa2 	bl	800b9a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d468:	2201      	movs	r2, #1
 800d46a:	409a      	lsls	r2, r3
 800d46c:	4b17      	ldr	r3, [pc, #92]	; (800d4cc <xTaskRemoveFromEventList+0xb0>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	4313      	orrs	r3, r2
 800d472:	4a16      	ldr	r2, [pc, #88]	; (800d4cc <xTaskRemoveFromEventList+0xb0>)
 800d474:	6013      	str	r3, [r2, #0]
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d47a:	4613      	mov	r3, r2
 800d47c:	009b      	lsls	r3, r3, #2
 800d47e:	4413      	add	r3, r2
 800d480:	009b      	lsls	r3, r3, #2
 800d482:	4a13      	ldr	r2, [pc, #76]	; (800d4d0 <xTaskRemoveFromEventList+0xb4>)
 800d484:	441a      	add	r2, r3
 800d486:	693b      	ldr	r3, [r7, #16]
 800d488:	3304      	adds	r3, #4
 800d48a:	4619      	mov	r1, r3
 800d48c:	4610      	mov	r0, r2
 800d48e:	f7fe fa30 	bl	800b8f2 <vListInsertEnd>
 800d492:	e005      	b.n	800d4a0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d494:	693b      	ldr	r3, [r7, #16]
 800d496:	3318      	adds	r3, #24
 800d498:	4619      	mov	r1, r3
 800d49a:	480e      	ldr	r0, [pc, #56]	; (800d4d4 <xTaskRemoveFromEventList+0xb8>)
 800d49c:	f7fe fa29 	bl	800b8f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4a4:	4b0c      	ldr	r3, [pc, #48]	; (800d4d8 <xTaskRemoveFromEventList+0xbc>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d905      	bls.n	800d4ba <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d4b2:	4b0a      	ldr	r3, [pc, #40]	; (800d4dc <xTaskRemoveFromEventList+0xc0>)
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	601a      	str	r2, [r3, #0]
 800d4b8:	e001      	b.n	800d4be <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800d4be:	697b      	ldr	r3, [r7, #20]
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	3718      	adds	r7, #24
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}
 800d4c8:	20001780 	.word	0x20001780
 800d4cc:	20001760 	.word	0x20001760
 800d4d0:	2000165c 	.word	0x2000165c
 800d4d4:	20001718 	.word	0x20001718
 800d4d8:	20001658 	.word	0x20001658
 800d4dc:	2000176c 	.word	0x2000176c

0800d4e0 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b084      	sub	sp, #16
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d10a      	bne.n	800d504 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800d4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f2:	f383 8811 	msr	BASEPRI, r3
 800d4f6:	f3bf 8f6f 	isb	sy
 800d4fa:	f3bf 8f4f 	dsb	sy
 800d4fe:	60fb      	str	r3, [r7, #12]
}
 800d500:	bf00      	nop
 800d502:	e7fe      	b.n	800d502 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800d504:	f001 f822 	bl	800e54c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d508:	4b06      	ldr	r3, [pc, #24]	; (800d524 <vTaskSetTimeOutState+0x44>)
 800d50a:	681a      	ldr	r2, [r3, #0]
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800d510:	4b05      	ldr	r3, [pc, #20]	; (800d528 <vTaskSetTimeOutState+0x48>)
 800d512:	681a      	ldr	r2, [r3, #0]
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800d518:	f001 f848 	bl	800e5ac <vPortExitCritical>
}
 800d51c:	bf00      	nop
 800d51e:	3710      	adds	r7, #16
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}
 800d524:	20001770 	.word	0x20001770
 800d528:	2000175c 	.word	0x2000175c

0800d52c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d52c:	b480      	push	{r7}
 800d52e:	b083      	sub	sp, #12
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d534:	4b06      	ldr	r3, [pc, #24]	; (800d550 <vTaskInternalSetTimeOutState+0x24>)
 800d536:	681a      	ldr	r2, [r3, #0]
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d53c:	4b05      	ldr	r3, [pc, #20]	; (800d554 <vTaskInternalSetTimeOutState+0x28>)
 800d53e:	681a      	ldr	r2, [r3, #0]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	605a      	str	r2, [r3, #4]
}
 800d544:	bf00      	nop
 800d546:	370c      	adds	r7, #12
 800d548:	46bd      	mov	sp, r7
 800d54a:	bc80      	pop	{r7}
 800d54c:	4770      	bx	lr
 800d54e:	bf00      	nop
 800d550:	20001770 	.word	0x20001770
 800d554:	2000175c 	.word	0x2000175c

0800d558 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b088      	sub	sp, #32
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
 800d560:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d10a      	bne.n	800d57e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d56c:	f383 8811 	msr	BASEPRI, r3
 800d570:	f3bf 8f6f 	isb	sy
 800d574:	f3bf 8f4f 	dsb	sy
 800d578:	613b      	str	r3, [r7, #16]
}
 800d57a:	bf00      	nop
 800d57c:	e7fe      	b.n	800d57c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d10a      	bne.n	800d59a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d588:	f383 8811 	msr	BASEPRI, r3
 800d58c:	f3bf 8f6f 	isb	sy
 800d590:	f3bf 8f4f 	dsb	sy
 800d594:	60fb      	str	r3, [r7, #12]
}
 800d596:	bf00      	nop
 800d598:	e7fe      	b.n	800d598 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d59a:	f000 ffd7 	bl	800e54c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d59e:	4b1d      	ldr	r3, [pc, #116]	; (800d614 <xTaskCheckForTimeOut+0xbc>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	685b      	ldr	r3, [r3, #4]
 800d5a8:	69ba      	ldr	r2, [r7, #24]
 800d5aa:	1ad3      	subs	r3, r2, r3
 800d5ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5b6:	d102      	bne.n	800d5be <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	61fb      	str	r3, [r7, #28]
 800d5bc:	e023      	b.n	800d606 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681a      	ldr	r2, [r3, #0]
 800d5c2:	4b15      	ldr	r3, [pc, #84]	; (800d618 <xTaskCheckForTimeOut+0xc0>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d007      	beq.n	800d5da <xTaskCheckForTimeOut+0x82>
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	685b      	ldr	r3, [r3, #4]
 800d5ce:	69ba      	ldr	r2, [r7, #24]
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d302      	bcc.n	800d5da <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	61fb      	str	r3, [r7, #28]
 800d5d8:	e015      	b.n	800d606 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	697a      	ldr	r2, [r7, #20]
 800d5e0:	429a      	cmp	r2, r3
 800d5e2:	d20b      	bcs.n	800d5fc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	681a      	ldr	r2, [r3, #0]
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	1ad2      	subs	r2, r2, r3
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f7ff ff9b 	bl	800d52c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	61fb      	str	r3, [r7, #28]
 800d5fa:	e004      	b.n	800d606 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	2200      	movs	r2, #0
 800d600:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d602:	2301      	movs	r3, #1
 800d604:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d606:	f000 ffd1 	bl	800e5ac <vPortExitCritical>

	return xReturn;
 800d60a:	69fb      	ldr	r3, [r7, #28]
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3720      	adds	r7, #32
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}
 800d614:	2000175c 	.word	0x2000175c
 800d618:	20001770 	.word	0x20001770

0800d61c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d61c:	b480      	push	{r7}
 800d61e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d620:	4b03      	ldr	r3, [pc, #12]	; (800d630 <vTaskMissedYield+0x14>)
 800d622:	2201      	movs	r2, #1
 800d624:	601a      	str	r2, [r3, #0]
}
 800d626:	bf00      	nop
 800d628:	46bd      	mov	sp, r7
 800d62a:	bc80      	pop	{r7}
 800d62c:	4770      	bx	lr
 800d62e:	bf00      	nop
 800d630:	2000176c 	.word	0x2000176c

0800d634 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b082      	sub	sp, #8
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d63c:	f000 f852 	bl	800d6e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d640:	4b06      	ldr	r3, [pc, #24]	; (800d65c <prvIdleTask+0x28>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	2b01      	cmp	r3, #1
 800d646:	d9f9      	bls.n	800d63c <prvIdleTask+0x8>
			{
				taskYIELD();
 800d648:	4b05      	ldr	r3, [pc, #20]	; (800d660 <prvIdleTask+0x2c>)
 800d64a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d64e:	601a      	str	r2, [r3, #0]
 800d650:	f3bf 8f4f 	dsb	sy
 800d654:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d658:	e7f0      	b.n	800d63c <prvIdleTask+0x8>
 800d65a:	bf00      	nop
 800d65c:	2000165c 	.word	0x2000165c
 800d660:	e000ed04 	.word	0xe000ed04

0800d664 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b082      	sub	sp, #8
 800d668:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d66a:	2300      	movs	r3, #0
 800d66c:	607b      	str	r3, [r7, #4]
 800d66e:	e00c      	b.n	800d68a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d670:	687a      	ldr	r2, [r7, #4]
 800d672:	4613      	mov	r3, r2
 800d674:	009b      	lsls	r3, r3, #2
 800d676:	4413      	add	r3, r2
 800d678:	009b      	lsls	r3, r3, #2
 800d67a:	4a12      	ldr	r2, [pc, #72]	; (800d6c4 <prvInitialiseTaskLists+0x60>)
 800d67c:	4413      	add	r3, r2
 800d67e:	4618      	mov	r0, r3
 800d680:	f7fe f90c 	bl	800b89c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	3301      	adds	r3, #1
 800d688:	607b      	str	r3, [r7, #4]
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2b06      	cmp	r3, #6
 800d68e:	d9ef      	bls.n	800d670 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d690:	480d      	ldr	r0, [pc, #52]	; (800d6c8 <prvInitialiseTaskLists+0x64>)
 800d692:	f7fe f903 	bl	800b89c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d696:	480d      	ldr	r0, [pc, #52]	; (800d6cc <prvInitialiseTaskLists+0x68>)
 800d698:	f7fe f900 	bl	800b89c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d69c:	480c      	ldr	r0, [pc, #48]	; (800d6d0 <prvInitialiseTaskLists+0x6c>)
 800d69e:	f7fe f8fd 	bl	800b89c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d6a2:	480c      	ldr	r0, [pc, #48]	; (800d6d4 <prvInitialiseTaskLists+0x70>)
 800d6a4:	f7fe f8fa 	bl	800b89c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d6a8:	480b      	ldr	r0, [pc, #44]	; (800d6d8 <prvInitialiseTaskLists+0x74>)
 800d6aa:	f7fe f8f7 	bl	800b89c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d6ae:	4b0b      	ldr	r3, [pc, #44]	; (800d6dc <prvInitialiseTaskLists+0x78>)
 800d6b0:	4a05      	ldr	r2, [pc, #20]	; (800d6c8 <prvInitialiseTaskLists+0x64>)
 800d6b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d6b4:	4b0a      	ldr	r3, [pc, #40]	; (800d6e0 <prvInitialiseTaskLists+0x7c>)
 800d6b6:	4a05      	ldr	r2, [pc, #20]	; (800d6cc <prvInitialiseTaskLists+0x68>)
 800d6b8:	601a      	str	r2, [r3, #0]
}
 800d6ba:	bf00      	nop
 800d6bc:	3708      	adds	r7, #8
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}
 800d6c2:	bf00      	nop
 800d6c4:	2000165c 	.word	0x2000165c
 800d6c8:	200016e8 	.word	0x200016e8
 800d6cc:	200016fc 	.word	0x200016fc
 800d6d0:	20001718 	.word	0x20001718
 800d6d4:	2000172c 	.word	0x2000172c
 800d6d8:	20001744 	.word	0x20001744
 800d6dc:	20001710 	.word	0x20001710
 800d6e0:	20001714 	.word	0x20001714

0800d6e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b082      	sub	sp, #8
 800d6e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d6ea:	e019      	b.n	800d720 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d6ec:	f000 ff2e 	bl	800e54c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800d6f0:	4b10      	ldr	r3, [pc, #64]	; (800d734 <prvCheckTasksWaitingTermination+0x50>)
 800d6f2:	68db      	ldr	r3, [r3, #12]
 800d6f4:	68db      	ldr	r3, [r3, #12]
 800d6f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	3304      	adds	r3, #4
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f7fe f953 	bl	800b9a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d702:	4b0d      	ldr	r3, [pc, #52]	; (800d738 <prvCheckTasksWaitingTermination+0x54>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	3b01      	subs	r3, #1
 800d708:	4a0b      	ldr	r2, [pc, #44]	; (800d738 <prvCheckTasksWaitingTermination+0x54>)
 800d70a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d70c:	4b0b      	ldr	r3, [pc, #44]	; (800d73c <prvCheckTasksWaitingTermination+0x58>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	3b01      	subs	r3, #1
 800d712:	4a0a      	ldr	r2, [pc, #40]	; (800d73c <prvCheckTasksWaitingTermination+0x58>)
 800d714:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d716:	f000 ff49 	bl	800e5ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f000 f810 	bl	800d740 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d720:	4b06      	ldr	r3, [pc, #24]	; (800d73c <prvCheckTasksWaitingTermination+0x58>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d1e1      	bne.n	800d6ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d728:	bf00      	nop
 800d72a:	bf00      	nop
 800d72c:	3708      	adds	r7, #8
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}
 800d732:	bf00      	nop
 800d734:	2000172c 	.word	0x2000172c
 800d738:	20001758 	.word	0x20001758
 800d73c:	20001740 	.word	0x20001740

0800d740 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d740:	b580      	push	{r7, lr}
 800d742:	b084      	sub	sp, #16
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d108      	bne.n	800d764 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d756:	4618      	mov	r0, r3
 800d758:	f001 f8bc 	bl	800e8d4 <vPortFree>
				vPortFree( pxTCB );
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f001 f8b9 	bl	800e8d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d762:	e018      	b.n	800d796 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d76a:	2b01      	cmp	r3, #1
 800d76c:	d103      	bne.n	800d776 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f001 f8b0 	bl	800e8d4 <vPortFree>
	}
 800d774:	e00f      	b.n	800d796 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d77c:	2b02      	cmp	r3, #2
 800d77e:	d00a      	beq.n	800d796 <prvDeleteTCB+0x56>
	__asm volatile
 800d780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d784:	f383 8811 	msr	BASEPRI, r3
 800d788:	f3bf 8f6f 	isb	sy
 800d78c:	f3bf 8f4f 	dsb	sy
 800d790:	60fb      	str	r3, [r7, #12]
}
 800d792:	bf00      	nop
 800d794:	e7fe      	b.n	800d794 <prvDeleteTCB+0x54>
	}
 800d796:	bf00      	nop
 800d798:	3710      	adds	r7, #16
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}
	...

0800d7a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b083      	sub	sp, #12
 800d7a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d7a6:	4b0e      	ldr	r3, [pc, #56]	; (800d7e0 <prvResetNextTaskUnblockTime+0x40>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d101      	bne.n	800d7b4 <prvResetNextTaskUnblockTime+0x14>
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	e000      	b.n	800d7b6 <prvResetNextTaskUnblockTime+0x16>
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d004      	beq.n	800d7c4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d7ba:	4b0a      	ldr	r3, [pc, #40]	; (800d7e4 <prvResetNextTaskUnblockTime+0x44>)
 800d7bc:	f04f 32ff 	mov.w	r2, #4294967295
 800d7c0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d7c2:	e008      	b.n	800d7d6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d7c4:	4b06      	ldr	r3, [pc, #24]	; (800d7e0 <prvResetNextTaskUnblockTime+0x40>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	68db      	ldr	r3, [r3, #12]
 800d7ca:	68db      	ldr	r3, [r3, #12]
 800d7cc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	685b      	ldr	r3, [r3, #4]
 800d7d2:	4a04      	ldr	r2, [pc, #16]	; (800d7e4 <prvResetNextTaskUnblockTime+0x44>)
 800d7d4:	6013      	str	r3, [r2, #0]
}
 800d7d6:	bf00      	nop
 800d7d8:	370c      	adds	r7, #12
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bc80      	pop	{r7}
 800d7de:	4770      	bx	lr
 800d7e0:	20001710 	.word	0x20001710
 800d7e4:	20001778 	.word	0x20001778

0800d7e8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800d7e8:	b480      	push	{r7}
 800d7ea:	b083      	sub	sp, #12
 800d7ec:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800d7ee:	4b04      	ldr	r3, [pc, #16]	; (800d800 <xTaskGetCurrentTaskHandle+0x18>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	607b      	str	r3, [r7, #4]

		return xReturn;
 800d7f4:	687b      	ldr	r3, [r7, #4]
	}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	370c      	adds	r7, #12
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bc80      	pop	{r7}
 800d7fe:	4770      	bx	lr
 800d800:	20001658 	.word	0x20001658

0800d804 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d804:	b480      	push	{r7}
 800d806:	b083      	sub	sp, #12
 800d808:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d80a:	4b0b      	ldr	r3, [pc, #44]	; (800d838 <xTaskGetSchedulerState+0x34>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d102      	bne.n	800d818 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d812:	2301      	movs	r3, #1
 800d814:	607b      	str	r3, [r7, #4]
 800d816:	e008      	b.n	800d82a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d818:	4b08      	ldr	r3, [pc, #32]	; (800d83c <xTaskGetSchedulerState+0x38>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d102      	bne.n	800d826 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d820:	2302      	movs	r3, #2
 800d822:	607b      	str	r3, [r7, #4]
 800d824:	e001      	b.n	800d82a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d826:	2300      	movs	r3, #0
 800d828:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d82a:	687b      	ldr	r3, [r7, #4]
	}
 800d82c:	4618      	mov	r0, r3
 800d82e:	370c      	adds	r7, #12
 800d830:	46bd      	mov	sp, r7
 800d832:	bc80      	pop	{r7}
 800d834:	4770      	bx	lr
 800d836:	bf00      	nop
 800d838:	20001764 	.word	0x20001764
 800d83c:	20001780 	.word	0x20001780

0800d840 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d840:	b580      	push	{r7, lr}
 800d842:	b086      	sub	sp, #24
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d84c:	2300      	movs	r3, #0
 800d84e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d06e      	beq.n	800d934 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d856:	4b3a      	ldr	r3, [pc, #232]	; (800d940 <xTaskPriorityDisinherit+0x100>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	693a      	ldr	r2, [r7, #16]
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d00a      	beq.n	800d876 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d864:	f383 8811 	msr	BASEPRI, r3
 800d868:	f3bf 8f6f 	isb	sy
 800d86c:	f3bf 8f4f 	dsb	sy
 800d870:	60fb      	str	r3, [r7, #12]
}
 800d872:	bf00      	nop
 800d874:	e7fe      	b.n	800d874 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d876:	693b      	ldr	r3, [r7, #16]
 800d878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d10a      	bne.n	800d894 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d882:	f383 8811 	msr	BASEPRI, r3
 800d886:	f3bf 8f6f 	isb	sy
 800d88a:	f3bf 8f4f 	dsb	sy
 800d88e:	60bb      	str	r3, [r7, #8]
}
 800d890:	bf00      	nop
 800d892:	e7fe      	b.n	800d892 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d894:	693b      	ldr	r3, [r7, #16]
 800d896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d898:	1e5a      	subs	r2, r3, #1
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8a2:	693b      	ldr	r3, [r7, #16]
 800d8a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8a6:	429a      	cmp	r2, r3
 800d8a8:	d044      	beq.n	800d934 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d8aa:	693b      	ldr	r3, [r7, #16]
 800d8ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d140      	bne.n	800d934 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8b2:	693b      	ldr	r3, [r7, #16]
 800d8b4:	3304      	adds	r3, #4
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f7fe f876 	bl	800b9a8 <uxListRemove>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d115      	bne.n	800d8ee <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d8c2:	693b      	ldr	r3, [r7, #16]
 800d8c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8c6:	491f      	ldr	r1, [pc, #124]	; (800d944 <xTaskPriorityDisinherit+0x104>)
 800d8c8:	4613      	mov	r3, r2
 800d8ca:	009b      	lsls	r3, r3, #2
 800d8cc:	4413      	add	r3, r2
 800d8ce:	009b      	lsls	r3, r3, #2
 800d8d0:	440b      	add	r3, r1
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d10a      	bne.n	800d8ee <xTaskPriorityDisinherit+0xae>
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8dc:	2201      	movs	r2, #1
 800d8de:	fa02 f303 	lsl.w	r3, r2, r3
 800d8e2:	43da      	mvns	r2, r3
 800d8e4:	4b18      	ldr	r3, [pc, #96]	; (800d948 <xTaskPriorityDisinherit+0x108>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	4013      	ands	r3, r2
 800d8ea:	4a17      	ldr	r2, [pc, #92]	; (800d948 <xTaskPriorityDisinherit+0x108>)
 800d8ec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d8f2:	693b      	ldr	r3, [r7, #16]
 800d8f4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8fa:	f1c3 0207 	rsb	r2, r3, #7
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d906:	2201      	movs	r2, #1
 800d908:	409a      	lsls	r2, r3
 800d90a:	4b0f      	ldr	r3, [pc, #60]	; (800d948 <xTaskPriorityDisinherit+0x108>)
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	4313      	orrs	r3, r2
 800d910:	4a0d      	ldr	r2, [pc, #52]	; (800d948 <xTaskPriorityDisinherit+0x108>)
 800d912:	6013      	str	r3, [r2, #0]
 800d914:	693b      	ldr	r3, [r7, #16]
 800d916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d918:	4613      	mov	r3, r2
 800d91a:	009b      	lsls	r3, r3, #2
 800d91c:	4413      	add	r3, r2
 800d91e:	009b      	lsls	r3, r3, #2
 800d920:	4a08      	ldr	r2, [pc, #32]	; (800d944 <xTaskPriorityDisinherit+0x104>)
 800d922:	441a      	add	r2, r3
 800d924:	693b      	ldr	r3, [r7, #16]
 800d926:	3304      	adds	r3, #4
 800d928:	4619      	mov	r1, r3
 800d92a:	4610      	mov	r0, r2
 800d92c:	f7fd ffe1 	bl	800b8f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d930:	2301      	movs	r3, #1
 800d932:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d934:	697b      	ldr	r3, [r7, #20]
	}
 800d936:	4618      	mov	r0, r3
 800d938:	3718      	adds	r7, #24
 800d93a:	46bd      	mov	sp, r7
 800d93c:	bd80      	pop	{r7, pc}
 800d93e:	bf00      	nop
 800d940:	20001658 	.word	0x20001658
 800d944:	2000165c 	.word	0x2000165c
 800d948:	20001760 	.word	0x20001760

0800d94c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b086      	sub	sp, #24
 800d950:	af00      	add	r7, sp, #0
 800d952:	60f8      	str	r0, [r7, #12]
 800d954:	60b9      	str	r1, [r7, #8]
 800d956:	607a      	str	r2, [r7, #4]
 800d958:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800d95a:	f000 fdf7 	bl	800e54c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d95e:	4b26      	ldr	r3, [pc, #152]	; (800d9f8 <xTaskNotifyWait+0xac>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d966:	b2db      	uxtb	r3, r3
 800d968:	2b02      	cmp	r3, #2
 800d96a:	d01a      	beq.n	800d9a2 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800d96c:	4b22      	ldr	r3, [pc, #136]	; (800d9f8 <xTaskNotifyWait+0xac>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d972:	68fa      	ldr	r2, [r7, #12]
 800d974:	43d2      	mvns	r2, r2
 800d976:	400a      	ands	r2, r1
 800d978:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d97a:	4b1f      	ldr	r3, [pc, #124]	; (800d9f8 <xTaskNotifyWait+0xac>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	2201      	movs	r2, #1
 800d980:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d00b      	beq.n	800d9a2 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d98a:	2101      	movs	r1, #1
 800d98c:	6838      	ldr	r0, [r7, #0]
 800d98e:	f000 f901 	bl	800db94 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d992:	4b1a      	ldr	r3, [pc, #104]	; (800d9fc <xTaskNotifyWait+0xb0>)
 800d994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d998:	601a      	str	r2, [r3, #0]
 800d99a:	f3bf 8f4f 	dsb	sy
 800d99e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d9a2:	f000 fe03 	bl	800e5ac <vPortExitCritical>

		taskENTER_CRITICAL();
 800d9a6:	f000 fdd1 	bl	800e54c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d004      	beq.n	800d9ba <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800d9b0:	4b11      	ldr	r3, [pc, #68]	; (800d9f8 <xTaskNotifyWait+0xac>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d9ba:	4b0f      	ldr	r3, [pc, #60]	; (800d9f8 <xTaskNotifyWait+0xac>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d9c2:	b2db      	uxtb	r3, r3
 800d9c4:	2b02      	cmp	r3, #2
 800d9c6:	d002      	beq.n	800d9ce <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	617b      	str	r3, [r7, #20]
 800d9cc:	e008      	b.n	800d9e0 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800d9ce:	4b0a      	ldr	r3, [pc, #40]	; (800d9f8 <xTaskNotifyWait+0xac>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d9d4:	68ba      	ldr	r2, [r7, #8]
 800d9d6:	43d2      	mvns	r2, r2
 800d9d8:	400a      	ands	r2, r1
 800d9da:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 800d9dc:	2301      	movs	r3, #1
 800d9de:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d9e0:	4b05      	ldr	r3, [pc, #20]	; (800d9f8 <xTaskNotifyWait+0xac>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 800d9ea:	f000 fddf 	bl	800e5ac <vPortExitCritical>

		return xReturn;
 800d9ee:	697b      	ldr	r3, [r7, #20]
	}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	3718      	adds	r7, #24
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}
 800d9f8:	20001658 	.word	0x20001658
 800d9fc:	e000ed04 	.word	0xe000ed04

0800da00 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800da00:	b580      	push	{r7, lr}
 800da02:	b08a      	sub	sp, #40	; 0x28
 800da04:	af00      	add	r7, sp, #0
 800da06:	60f8      	str	r0, [r7, #12]
 800da08:	60b9      	str	r1, [r7, #8]
 800da0a:	603b      	str	r3, [r7, #0]
 800da0c:	4613      	mov	r3, r2
 800da0e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800da10:	2301      	movs	r3, #1
 800da12:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d10a      	bne.n	800da30 <xTaskGenericNotify+0x30>
	__asm volatile
 800da1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da1e:	f383 8811 	msr	BASEPRI, r3
 800da22:	f3bf 8f6f 	isb	sy
 800da26:	f3bf 8f4f 	dsb	sy
 800da2a:	61bb      	str	r3, [r7, #24]
}
 800da2c:	bf00      	nop
 800da2e:	e7fe      	b.n	800da2e <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800da34:	f000 fd8a 	bl	800e54c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d003      	beq.n	800da46 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800da3e:	6a3b      	ldr	r3, [r7, #32]
 800da40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800da46:	6a3b      	ldr	r3, [r7, #32]
 800da48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800da4c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800da4e:	6a3b      	ldr	r3, [r7, #32]
 800da50:	2202      	movs	r2, #2
 800da52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 800da56:	79fb      	ldrb	r3, [r7, #7]
 800da58:	2b04      	cmp	r3, #4
 800da5a:	d828      	bhi.n	800daae <xTaskGenericNotify+0xae>
 800da5c:	a201      	add	r2, pc, #4	; (adr r2, 800da64 <xTaskGenericNotify+0x64>)
 800da5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da62:	bf00      	nop
 800da64:	0800daaf 	.word	0x0800daaf
 800da68:	0800da79 	.word	0x0800da79
 800da6c:	0800da87 	.word	0x0800da87
 800da70:	0800da93 	.word	0x0800da93
 800da74:	0800da9b 	.word	0x0800da9b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800da78:	6a3b      	ldr	r3, [r7, #32]
 800da7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	431a      	orrs	r2, r3
 800da80:	6a3b      	ldr	r3, [r7, #32]
 800da82:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800da84:	e013      	b.n	800daae <xTaskGenericNotify+0xae>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800da86:	6a3b      	ldr	r3, [r7, #32]
 800da88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da8a:	1c5a      	adds	r2, r3, #1
 800da8c:	6a3b      	ldr	r3, [r7, #32]
 800da8e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800da90:	e00d      	b.n	800daae <xTaskGenericNotify+0xae>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800da92:	6a3b      	ldr	r3, [r7, #32]
 800da94:	68ba      	ldr	r2, [r7, #8]
 800da96:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800da98:	e009      	b.n	800daae <xTaskGenericNotify+0xae>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800da9a:	7ffb      	ldrb	r3, [r7, #31]
 800da9c:	2b02      	cmp	r3, #2
 800da9e:	d003      	beq.n	800daa8 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800daa0:	6a3b      	ldr	r3, [r7, #32]
 800daa2:	68ba      	ldr	r2, [r7, #8]
 800daa4:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800daa6:	e001      	b.n	800daac <xTaskGenericNotify+0xac>
						xReturn = pdFAIL;
 800daa8:	2300      	movs	r3, #0
 800daaa:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800daac:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800daae:	7ffb      	ldrb	r3, [r7, #31]
 800dab0:	2b01      	cmp	r3, #1
 800dab2:	d139      	bne.n	800db28 <xTaskGenericNotify+0x128>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dab4:	6a3b      	ldr	r3, [r7, #32]
 800dab6:	3304      	adds	r3, #4
 800dab8:	4618      	mov	r0, r3
 800daba:	f7fd ff75 	bl	800b9a8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800dabe:	6a3b      	ldr	r3, [r7, #32]
 800dac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dac2:	2201      	movs	r2, #1
 800dac4:	409a      	lsls	r2, r3
 800dac6:	4b1c      	ldr	r3, [pc, #112]	; (800db38 <xTaskGenericNotify+0x138>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	4313      	orrs	r3, r2
 800dacc:	4a1a      	ldr	r2, [pc, #104]	; (800db38 <xTaskGenericNotify+0x138>)
 800dace:	6013      	str	r3, [r2, #0]
 800dad0:	6a3b      	ldr	r3, [r7, #32]
 800dad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dad4:	4613      	mov	r3, r2
 800dad6:	009b      	lsls	r3, r3, #2
 800dad8:	4413      	add	r3, r2
 800dada:	009b      	lsls	r3, r3, #2
 800dadc:	4a17      	ldr	r2, [pc, #92]	; (800db3c <xTaskGenericNotify+0x13c>)
 800dade:	441a      	add	r2, r3
 800dae0:	6a3b      	ldr	r3, [r7, #32]
 800dae2:	3304      	adds	r3, #4
 800dae4:	4619      	mov	r1, r3
 800dae6:	4610      	mov	r0, r2
 800dae8:	f7fd ff03 	bl	800b8f2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800daec:	6a3b      	ldr	r3, [r7, #32]
 800daee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d00a      	beq.n	800db0a <xTaskGenericNotify+0x10a>
	__asm volatile
 800daf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daf8:	f383 8811 	msr	BASEPRI, r3
 800dafc:	f3bf 8f6f 	isb	sy
 800db00:	f3bf 8f4f 	dsb	sy
 800db04:	617b      	str	r3, [r7, #20]
}
 800db06:	bf00      	nop
 800db08:	e7fe      	b.n	800db08 <xTaskGenericNotify+0x108>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800db0a:	6a3b      	ldr	r3, [r7, #32]
 800db0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db0e:	4b0c      	ldr	r3, [pc, #48]	; (800db40 <xTaskGenericNotify+0x140>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db14:	429a      	cmp	r2, r3
 800db16:	d907      	bls.n	800db28 <xTaskGenericNotify+0x128>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800db18:	4b0a      	ldr	r3, [pc, #40]	; (800db44 <xTaskGenericNotify+0x144>)
 800db1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db1e:	601a      	str	r2, [r3, #0]
 800db20:	f3bf 8f4f 	dsb	sy
 800db24:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800db28:	f000 fd40 	bl	800e5ac <vPortExitCritical>

		return xReturn;
 800db2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800db2e:	4618      	mov	r0, r3
 800db30:	3728      	adds	r7, #40	; 0x28
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}
 800db36:	bf00      	nop
 800db38:	20001760 	.word	0x20001760
 800db3c:	2000165c 	.word	0x2000165c
 800db40:	20001658 	.word	0x20001658
 800db44:	e000ed04 	.word	0xe000ed04

0800db48 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b084      	sub	sp, #16
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d102      	bne.n	800db5c <xTaskNotifyStateClear+0x14>
 800db56:	4b0e      	ldr	r3, [pc, #56]	; (800db90 <xTaskNotifyStateClear+0x48>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	e000      	b.n	800db5e <xTaskNotifyStateClear+0x16>
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800db60:	f000 fcf4 	bl	800e54c <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800db6a:	b2db      	uxtb	r3, r3
 800db6c:	2b02      	cmp	r3, #2
 800db6e:	d106      	bne.n	800db7e <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	2200      	movs	r2, #0
 800db74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				xReturn = pdPASS;
 800db78:	2301      	movs	r3, #1
 800db7a:	60fb      	str	r3, [r7, #12]
 800db7c:	e001      	b.n	800db82 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800db7e:	2300      	movs	r3, #0
 800db80:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800db82:	f000 fd13 	bl	800e5ac <vPortExitCritical>

		return xReturn;
 800db86:	68fb      	ldr	r3, [r7, #12]
	}
 800db88:	4618      	mov	r0, r3
 800db8a:	3710      	adds	r7, #16
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}
 800db90:	20001658 	.word	0x20001658

0800db94 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b084      	sub	sp, #16
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800db9e:	4b29      	ldr	r3, [pc, #164]	; (800dc44 <prvAddCurrentTaskToDelayedList+0xb0>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dba4:	4b28      	ldr	r3, [pc, #160]	; (800dc48 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	3304      	adds	r3, #4
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f7fd fefc 	bl	800b9a8 <uxListRemove>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d10b      	bne.n	800dbce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800dbb6:	4b24      	ldr	r3, [pc, #144]	; (800dc48 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbbc:	2201      	movs	r2, #1
 800dbbe:	fa02 f303 	lsl.w	r3, r2, r3
 800dbc2:	43da      	mvns	r2, r3
 800dbc4:	4b21      	ldr	r3, [pc, #132]	; (800dc4c <prvAddCurrentTaskToDelayedList+0xb8>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	4013      	ands	r3, r2
 800dbca:	4a20      	ldr	r2, [pc, #128]	; (800dc4c <prvAddCurrentTaskToDelayedList+0xb8>)
 800dbcc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbd4:	d10a      	bne.n	800dbec <prvAddCurrentTaskToDelayedList+0x58>
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d007      	beq.n	800dbec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbdc:	4b1a      	ldr	r3, [pc, #104]	; (800dc48 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	3304      	adds	r3, #4
 800dbe2:	4619      	mov	r1, r3
 800dbe4:	481a      	ldr	r0, [pc, #104]	; (800dc50 <prvAddCurrentTaskToDelayedList+0xbc>)
 800dbe6:	f7fd fe84 	bl	800b8f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dbea:	e026      	b.n	800dc3a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dbec:	68fa      	ldr	r2, [r7, #12]
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	4413      	add	r3, r2
 800dbf2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dbf4:	4b14      	ldr	r3, [pc, #80]	; (800dc48 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	68ba      	ldr	r2, [r7, #8]
 800dbfa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dbfc:	68ba      	ldr	r2, [r7, #8]
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	429a      	cmp	r2, r3
 800dc02:	d209      	bcs.n	800dc18 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc04:	4b13      	ldr	r3, [pc, #76]	; (800dc54 <prvAddCurrentTaskToDelayedList+0xc0>)
 800dc06:	681a      	ldr	r2, [r3, #0]
 800dc08:	4b0f      	ldr	r3, [pc, #60]	; (800dc48 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	3304      	adds	r3, #4
 800dc0e:	4619      	mov	r1, r3
 800dc10:	4610      	mov	r0, r2
 800dc12:	f7fd fe91 	bl	800b938 <vListInsert>
}
 800dc16:	e010      	b.n	800dc3a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc18:	4b0f      	ldr	r3, [pc, #60]	; (800dc58 <prvAddCurrentTaskToDelayedList+0xc4>)
 800dc1a:	681a      	ldr	r2, [r3, #0]
 800dc1c:	4b0a      	ldr	r3, [pc, #40]	; (800dc48 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	3304      	adds	r3, #4
 800dc22:	4619      	mov	r1, r3
 800dc24:	4610      	mov	r0, r2
 800dc26:	f7fd fe87 	bl	800b938 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dc2a:	4b0c      	ldr	r3, [pc, #48]	; (800dc5c <prvAddCurrentTaskToDelayedList+0xc8>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	68ba      	ldr	r2, [r7, #8]
 800dc30:	429a      	cmp	r2, r3
 800dc32:	d202      	bcs.n	800dc3a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800dc34:	4a09      	ldr	r2, [pc, #36]	; (800dc5c <prvAddCurrentTaskToDelayedList+0xc8>)
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	6013      	str	r3, [r2, #0]
}
 800dc3a:	bf00      	nop
 800dc3c:	3710      	adds	r7, #16
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}
 800dc42:	bf00      	nop
 800dc44:	2000175c 	.word	0x2000175c
 800dc48:	20001658 	.word	0x20001658
 800dc4c:	20001760 	.word	0x20001760
 800dc50:	20001744 	.word	0x20001744
 800dc54:	20001714 	.word	0x20001714
 800dc58:	20001710 	.word	0x20001710
 800dc5c:	20001778 	.word	0x20001778

0800dc60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b08a      	sub	sp, #40	; 0x28
 800dc64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dc66:	2300      	movs	r3, #0
 800dc68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dc6a:	f000 fb41 	bl	800e2f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dc6e:	4b1c      	ldr	r3, [pc, #112]	; (800dce0 <xTimerCreateTimerTask+0x80>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d021      	beq.n	800dcba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dc76:	2300      	movs	r3, #0
 800dc78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dc7e:	1d3a      	adds	r2, r7, #4
 800dc80:	f107 0108 	add.w	r1, r7, #8
 800dc84:	f107 030c 	add.w	r3, r7, #12
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f7f6 fe9d 	bl	80049c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dc8e:	6879      	ldr	r1, [r7, #4]
 800dc90:	68bb      	ldr	r3, [r7, #8]
 800dc92:	68fa      	ldr	r2, [r7, #12]
 800dc94:	9202      	str	r2, [sp, #8]
 800dc96:	9301      	str	r3, [sp, #4]
 800dc98:	2302      	movs	r3, #2
 800dc9a:	9300      	str	r3, [sp, #0]
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	460a      	mov	r2, r1
 800dca0:	4910      	ldr	r1, [pc, #64]	; (800dce4 <xTimerCreateTimerTask+0x84>)
 800dca2:	4811      	ldr	r0, [pc, #68]	; (800dce8 <xTimerCreateTimerTask+0x88>)
 800dca4:	f7fe ff5b 	bl	800cb5e <xTaskCreateStatic>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	4a10      	ldr	r2, [pc, #64]	; (800dcec <xTimerCreateTimerTask+0x8c>)
 800dcac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dcae:	4b0f      	ldr	r3, [pc, #60]	; (800dcec <xTimerCreateTimerTask+0x8c>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d001      	beq.n	800dcba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dcb6:	2301      	movs	r3, #1
 800dcb8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dcba:	697b      	ldr	r3, [r7, #20]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d10a      	bne.n	800dcd6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800dcc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcc4:	f383 8811 	msr	BASEPRI, r3
 800dcc8:	f3bf 8f6f 	isb	sy
 800dccc:	f3bf 8f4f 	dsb	sy
 800dcd0:	613b      	str	r3, [r7, #16]
}
 800dcd2:	bf00      	nop
 800dcd4:	e7fe      	b.n	800dcd4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dcd6:	697b      	ldr	r3, [r7, #20]
}
 800dcd8:	4618      	mov	r0, r3
 800dcda:	3718      	adds	r7, #24
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}
 800dce0:	200017b4 	.word	0x200017b4
 800dce4:	08013650 	.word	0x08013650
 800dce8:	0800df2d 	.word	0x0800df2d
 800dcec:	200017b8 	.word	0x200017b8

0800dcf0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b088      	sub	sp, #32
 800dcf4:	af02      	add	r7, sp, #8
 800dcf6:	60f8      	str	r0, [r7, #12]
 800dcf8:	60b9      	str	r1, [r7, #8]
 800dcfa:	607a      	str	r2, [r7, #4]
 800dcfc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800dcfe:	202c      	movs	r0, #44	; 0x2c
 800dd00:	f000 fd24 	bl	800e74c <pvPortMalloc>
 800dd04:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d00d      	beq.n	800dd28 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800dd0c:	697b      	ldr	r3, [r7, #20]
 800dd0e:	9301      	str	r3, [sp, #4]
 800dd10:	6a3b      	ldr	r3, [r7, #32]
 800dd12:	9300      	str	r3, [sp, #0]
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	687a      	ldr	r2, [r7, #4]
 800dd18:	68b9      	ldr	r1, [r7, #8]
 800dd1a:	68f8      	ldr	r0, [r7, #12]
 800dd1c:	f000 f846 	bl	800ddac <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	2200      	movs	r2, #0
 800dd24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800dd28:	697b      	ldr	r3, [r7, #20]
	}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	3718      	adds	r7, #24
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}

0800dd32 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800dd32:	b580      	push	{r7, lr}
 800dd34:	b08a      	sub	sp, #40	; 0x28
 800dd36:	af02      	add	r7, sp, #8
 800dd38:	60f8      	str	r0, [r7, #12]
 800dd3a:	60b9      	str	r1, [r7, #8]
 800dd3c:	607a      	str	r2, [r7, #4]
 800dd3e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800dd40:	232c      	movs	r3, #44	; 0x2c
 800dd42:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800dd44:	693b      	ldr	r3, [r7, #16]
 800dd46:	2b2c      	cmp	r3, #44	; 0x2c
 800dd48:	d00a      	beq.n	800dd60 <xTimerCreateStatic+0x2e>
	__asm volatile
 800dd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd4e:	f383 8811 	msr	BASEPRI, r3
 800dd52:	f3bf 8f6f 	isb	sy
 800dd56:	f3bf 8f4f 	dsb	sy
 800dd5a:	61bb      	str	r3, [r7, #24]
}
 800dd5c:	bf00      	nop
 800dd5e:	e7fe      	b.n	800dd5e <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800dd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d10a      	bne.n	800dd7c <xTimerCreateStatic+0x4a>
	__asm volatile
 800dd66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd6a:	f383 8811 	msr	BASEPRI, r3
 800dd6e:	f3bf 8f6f 	isb	sy
 800dd72:	f3bf 8f4f 	dsb	sy
 800dd76:	617b      	str	r3, [r7, #20]
}
 800dd78:	bf00      	nop
 800dd7a:	e7fe      	b.n	800dd7a <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dd7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd7e:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800dd80:	69fb      	ldr	r3, [r7, #28]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d00d      	beq.n	800dda2 <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800dd86:	69fb      	ldr	r3, [r7, #28]
 800dd88:	9301      	str	r3, [sp, #4]
 800dd8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd8c:	9300      	str	r3, [sp, #0]
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	687a      	ldr	r2, [r7, #4]
 800dd92:	68b9      	ldr	r1, [r7, #8]
 800dd94:	68f8      	ldr	r0, [r7, #12]
 800dd96:	f000 f809 	bl	800ddac <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800dd9a:	69fb      	ldr	r3, [r7, #28]
 800dd9c:	2201      	movs	r2, #1
 800dd9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800dda2:	69fb      	ldr	r3, [r7, #28]
	}
 800dda4:	4618      	mov	r0, r3
 800dda6:	3720      	adds	r7, #32
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}

0800ddac <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b086      	sub	sp, #24
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	60f8      	str	r0, [r7, #12]
 800ddb4:	60b9      	str	r1, [r7, #8]
 800ddb6:	607a      	str	r2, [r7, #4]
 800ddb8:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d10a      	bne.n	800ddd6 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800ddc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddc4:	f383 8811 	msr	BASEPRI, r3
 800ddc8:	f3bf 8f6f 	isb	sy
 800ddcc:	f3bf 8f4f 	dsb	sy
 800ddd0:	617b      	str	r3, [r7, #20]
}
 800ddd2:	bf00      	nop
 800ddd4:	e7fe      	b.n	800ddd4 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800ddd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d015      	beq.n	800de08 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800dddc:	f000 fa88 	bl	800e2f0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800dde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde2:	68fa      	ldr	r2, [r7, #12]
 800dde4:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800dde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde8:	68ba      	ldr	r2, [r7, #8]
 800ddea:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800ddec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddee:	687a      	ldr	r2, [r7, #4]
 800ddf0:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800ddf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf4:	683a      	ldr	r2, [r7, #0]
 800ddf6:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ddf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddfa:	6a3a      	ldr	r2, [r7, #32]
 800ddfc:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800ddfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de00:	3304      	adds	r3, #4
 800de02:	4618      	mov	r0, r3
 800de04:	f7fd fd69 	bl	800b8da <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800de08:	bf00      	nop
 800de0a:	3718      	adds	r7, #24
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}

0800de10 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b08a      	sub	sp, #40	; 0x28
 800de14:	af00      	add	r7, sp, #0
 800de16:	60f8      	str	r0, [r7, #12]
 800de18:	60b9      	str	r1, [r7, #8]
 800de1a:	607a      	str	r2, [r7, #4]
 800de1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800de1e:	2300      	movs	r3, #0
 800de20:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d10a      	bne.n	800de3e <xTimerGenericCommand+0x2e>
	__asm volatile
 800de28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de2c:	f383 8811 	msr	BASEPRI, r3
 800de30:	f3bf 8f6f 	isb	sy
 800de34:	f3bf 8f4f 	dsb	sy
 800de38:	623b      	str	r3, [r7, #32]
}
 800de3a:	bf00      	nop
 800de3c:	e7fe      	b.n	800de3c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800de3e:	4b1a      	ldr	r3, [pc, #104]	; (800dea8 <xTimerGenericCommand+0x98>)
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d02a      	beq.n	800de9c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800de46:	68bb      	ldr	r3, [r7, #8]
 800de48:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	2b05      	cmp	r3, #5
 800de56:	dc18      	bgt.n	800de8a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800de58:	f7ff fcd4 	bl	800d804 <xTaskGetSchedulerState>
 800de5c:	4603      	mov	r3, r0
 800de5e:	2b02      	cmp	r3, #2
 800de60:	d109      	bne.n	800de76 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800de62:	4b11      	ldr	r3, [pc, #68]	; (800dea8 <xTimerGenericCommand+0x98>)
 800de64:	6818      	ldr	r0, [r3, #0]
 800de66:	f107 0114 	add.w	r1, r7, #20
 800de6a:	2300      	movs	r3, #0
 800de6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de6e:	f7fd ff01 	bl	800bc74 <xQueueGenericSend>
 800de72:	6278      	str	r0, [r7, #36]	; 0x24
 800de74:	e012      	b.n	800de9c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800de76:	4b0c      	ldr	r3, [pc, #48]	; (800dea8 <xTimerGenericCommand+0x98>)
 800de78:	6818      	ldr	r0, [r3, #0]
 800de7a:	f107 0114 	add.w	r1, r7, #20
 800de7e:	2300      	movs	r3, #0
 800de80:	2200      	movs	r2, #0
 800de82:	f7fd fef7 	bl	800bc74 <xQueueGenericSend>
 800de86:	6278      	str	r0, [r7, #36]	; 0x24
 800de88:	e008      	b.n	800de9c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800de8a:	4b07      	ldr	r3, [pc, #28]	; (800dea8 <xTimerGenericCommand+0x98>)
 800de8c:	6818      	ldr	r0, [r3, #0]
 800de8e:	f107 0114 	add.w	r1, r7, #20
 800de92:	2300      	movs	r3, #0
 800de94:	683a      	ldr	r2, [r7, #0]
 800de96:	f7fd ffeb 	bl	800be70 <xQueueGenericSendFromISR>
 800de9a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800de9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	3728      	adds	r7, #40	; 0x28
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}
 800dea6:	bf00      	nop
 800dea8:	200017b4 	.word	0x200017b4

0800deac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b088      	sub	sp, #32
 800deb0:	af02      	add	r7, sp, #8
 800deb2:	6078      	str	r0, [r7, #4]
 800deb4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800deb6:	4b1c      	ldr	r3, [pc, #112]	; (800df28 <prvProcessExpiredTimer+0x7c>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	68db      	ldr	r3, [r3, #12]
 800debc:	68db      	ldr	r3, [r3, #12]
 800debe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dec0:	697b      	ldr	r3, [r7, #20]
 800dec2:	3304      	adds	r3, #4
 800dec4:	4618      	mov	r0, r3
 800dec6:	f7fd fd6f 	bl	800b9a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	69db      	ldr	r3, [r3, #28]
 800dece:	2b01      	cmp	r3, #1
 800ded0:	d122      	bne.n	800df18 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	699a      	ldr	r2, [r3, #24]
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	18d1      	adds	r1, r2, r3
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	683a      	ldr	r2, [r7, #0]
 800dede:	6978      	ldr	r0, [r7, #20]
 800dee0:	f000 f8c8 	bl	800e074 <prvInsertTimerInActiveList>
 800dee4:	4603      	mov	r3, r0
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d016      	beq.n	800df18 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800deea:	2300      	movs	r3, #0
 800deec:	9300      	str	r3, [sp, #0]
 800deee:	2300      	movs	r3, #0
 800def0:	687a      	ldr	r2, [r7, #4]
 800def2:	2100      	movs	r1, #0
 800def4:	6978      	ldr	r0, [r7, #20]
 800def6:	f7ff ff8b 	bl	800de10 <xTimerGenericCommand>
 800defa:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800defc:	693b      	ldr	r3, [r7, #16]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d10a      	bne.n	800df18 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800df02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df06:	f383 8811 	msr	BASEPRI, r3
 800df0a:	f3bf 8f6f 	isb	sy
 800df0e:	f3bf 8f4f 	dsb	sy
 800df12:	60fb      	str	r3, [r7, #12]
}
 800df14:	bf00      	nop
 800df16:	e7fe      	b.n	800df16 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800df18:	697b      	ldr	r3, [r7, #20]
 800df1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df1c:	6978      	ldr	r0, [r7, #20]
 800df1e:	4798      	blx	r3
}
 800df20:	bf00      	nop
 800df22:	3718      	adds	r7, #24
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}
 800df28:	200017ac 	.word	0x200017ac

0800df2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b084      	sub	sp, #16
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800df34:	f107 0308 	add.w	r3, r7, #8
 800df38:	4618      	mov	r0, r3
 800df3a:	f000 f857 	bl	800dfec <prvGetNextExpireTime>
 800df3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	4619      	mov	r1, r3
 800df44:	68f8      	ldr	r0, [r7, #12]
 800df46:	f000 f803 	bl	800df50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800df4a:	f000 f8d5 	bl	800e0f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800df4e:	e7f1      	b.n	800df34 <prvTimerTask+0x8>

0800df50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b084      	sub	sp, #16
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
 800df58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800df5a:	f7ff f82d 	bl	800cfb8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800df5e:	f107 0308 	add.w	r3, r7, #8
 800df62:	4618      	mov	r0, r3
 800df64:	f000 f866 	bl	800e034 <prvSampleTimeNow>
 800df68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800df6a:	68bb      	ldr	r3, [r7, #8]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d130      	bne.n	800dfd2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d10a      	bne.n	800df8c <prvProcessTimerOrBlockTask+0x3c>
 800df76:	687a      	ldr	r2, [r7, #4]
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	429a      	cmp	r2, r3
 800df7c:	d806      	bhi.n	800df8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800df7e:	f7ff f829 	bl	800cfd4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800df82:	68f9      	ldr	r1, [r7, #12]
 800df84:	6878      	ldr	r0, [r7, #4]
 800df86:	f7ff ff91 	bl	800deac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800df8a:	e024      	b.n	800dfd6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d008      	beq.n	800dfa4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800df92:	4b13      	ldr	r3, [pc, #76]	; (800dfe0 <prvProcessTimerOrBlockTask+0x90>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	bf0c      	ite	eq
 800df9c:	2301      	moveq	r3, #1
 800df9e:	2300      	movne	r3, #0
 800dfa0:	b2db      	uxtb	r3, r3
 800dfa2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dfa4:	4b0f      	ldr	r3, [pc, #60]	; (800dfe4 <prvProcessTimerOrBlockTask+0x94>)
 800dfa6:	6818      	ldr	r0, [r3, #0]
 800dfa8:	687a      	ldr	r2, [r7, #4]
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	1ad3      	subs	r3, r2, r3
 800dfae:	683a      	ldr	r2, [r7, #0]
 800dfb0:	4619      	mov	r1, r3
 800dfb2:	f7fe fa0d 	bl	800c3d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dfb6:	f7ff f80d 	bl	800cfd4 <xTaskResumeAll>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d10a      	bne.n	800dfd6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dfc0:	4b09      	ldr	r3, [pc, #36]	; (800dfe8 <prvProcessTimerOrBlockTask+0x98>)
 800dfc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfc6:	601a      	str	r2, [r3, #0]
 800dfc8:	f3bf 8f4f 	dsb	sy
 800dfcc:	f3bf 8f6f 	isb	sy
}
 800dfd0:	e001      	b.n	800dfd6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dfd2:	f7fe ffff 	bl	800cfd4 <xTaskResumeAll>
}
 800dfd6:	bf00      	nop
 800dfd8:	3710      	adds	r7, #16
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}
 800dfde:	bf00      	nop
 800dfe0:	200017b0 	.word	0x200017b0
 800dfe4:	200017b4 	.word	0x200017b4
 800dfe8:	e000ed04 	.word	0xe000ed04

0800dfec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dfec:	b480      	push	{r7}
 800dfee:	b085      	sub	sp, #20
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dff4:	4b0e      	ldr	r3, [pc, #56]	; (800e030 <prvGetNextExpireTime+0x44>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	bf0c      	ite	eq
 800dffe:	2301      	moveq	r3, #1
 800e000:	2300      	movne	r3, #0
 800e002:	b2db      	uxtb	r3, r3
 800e004:	461a      	mov	r2, r3
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d105      	bne.n	800e01e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e012:	4b07      	ldr	r3, [pc, #28]	; (800e030 <prvGetNextExpireTime+0x44>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	68db      	ldr	r3, [r3, #12]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	60fb      	str	r3, [r7, #12]
 800e01c:	e001      	b.n	800e022 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e01e:	2300      	movs	r3, #0
 800e020:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e022:	68fb      	ldr	r3, [r7, #12]
}
 800e024:	4618      	mov	r0, r3
 800e026:	3714      	adds	r7, #20
 800e028:	46bd      	mov	sp, r7
 800e02a:	bc80      	pop	{r7}
 800e02c:	4770      	bx	lr
 800e02e:	bf00      	nop
 800e030:	200017ac 	.word	0x200017ac

0800e034 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b084      	sub	sp, #16
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e03c:	f7ff f866 	bl	800d10c <xTaskGetTickCount>
 800e040:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e042:	4b0b      	ldr	r3, [pc, #44]	; (800e070 <prvSampleTimeNow+0x3c>)
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	68fa      	ldr	r2, [r7, #12]
 800e048:	429a      	cmp	r2, r3
 800e04a:	d205      	bcs.n	800e058 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e04c:	f000 f8ee 	bl	800e22c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2201      	movs	r2, #1
 800e054:	601a      	str	r2, [r3, #0]
 800e056:	e002      	b.n	800e05e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2200      	movs	r2, #0
 800e05c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e05e:	4a04      	ldr	r2, [pc, #16]	; (800e070 <prvSampleTimeNow+0x3c>)
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e064:	68fb      	ldr	r3, [r7, #12]
}
 800e066:	4618      	mov	r0, r3
 800e068:	3710      	adds	r7, #16
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}
 800e06e:	bf00      	nop
 800e070:	200017bc 	.word	0x200017bc

0800e074 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b086      	sub	sp, #24
 800e078:	af00      	add	r7, sp, #0
 800e07a:	60f8      	str	r0, [r7, #12]
 800e07c:	60b9      	str	r1, [r7, #8]
 800e07e:	607a      	str	r2, [r7, #4]
 800e080:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e082:	2300      	movs	r3, #0
 800e084:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	68ba      	ldr	r2, [r7, #8]
 800e08a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	68fa      	ldr	r2, [r7, #12]
 800e090:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e092:	68ba      	ldr	r2, [r7, #8]
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	429a      	cmp	r2, r3
 800e098:	d812      	bhi.n	800e0c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e09a:	687a      	ldr	r2, [r7, #4]
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	1ad2      	subs	r2, r2, r3
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	699b      	ldr	r3, [r3, #24]
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	d302      	bcc.n	800e0ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	617b      	str	r3, [r7, #20]
 800e0ac:	e01b      	b.n	800e0e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e0ae:	4b10      	ldr	r3, [pc, #64]	; (800e0f0 <prvInsertTimerInActiveList+0x7c>)
 800e0b0:	681a      	ldr	r2, [r3, #0]
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	3304      	adds	r3, #4
 800e0b6:	4619      	mov	r1, r3
 800e0b8:	4610      	mov	r0, r2
 800e0ba:	f7fd fc3d 	bl	800b938 <vListInsert>
 800e0be:	e012      	b.n	800e0e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e0c0:	687a      	ldr	r2, [r7, #4]
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	429a      	cmp	r2, r3
 800e0c6:	d206      	bcs.n	800e0d6 <prvInsertTimerInActiveList+0x62>
 800e0c8:	68ba      	ldr	r2, [r7, #8]
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	429a      	cmp	r2, r3
 800e0ce:	d302      	bcc.n	800e0d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e0d0:	2301      	movs	r3, #1
 800e0d2:	617b      	str	r3, [r7, #20]
 800e0d4:	e007      	b.n	800e0e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e0d6:	4b07      	ldr	r3, [pc, #28]	; (800e0f4 <prvInsertTimerInActiveList+0x80>)
 800e0d8:	681a      	ldr	r2, [r3, #0]
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	3304      	adds	r3, #4
 800e0de:	4619      	mov	r1, r3
 800e0e0:	4610      	mov	r0, r2
 800e0e2:	f7fd fc29 	bl	800b938 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e0e6:	697b      	ldr	r3, [r7, #20]
}
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	3718      	adds	r7, #24
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}
 800e0f0:	200017b0 	.word	0x200017b0
 800e0f4:	200017ac 	.word	0x200017ac

0800e0f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b08c      	sub	sp, #48	; 0x30
 800e0fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e0fe:	e081      	b.n	800e204 <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	2b00      	cmp	r3, #0
 800e104:	db7d      	blt.n	800e202 <prvProcessReceivedCommands+0x10a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e10c:	695b      	ldr	r3, [r3, #20]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d004      	beq.n	800e11c <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e114:	3304      	adds	r3, #4
 800e116:	4618      	mov	r0, r3
 800e118:	f7fd fc46 	bl	800b9a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e11c:	1d3b      	adds	r3, r7, #4
 800e11e:	4618      	mov	r0, r3
 800e120:	f7ff ff88 	bl	800e034 <prvSampleTimeNow>
 800e124:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	2b09      	cmp	r3, #9
 800e12a:	d86b      	bhi.n	800e204 <prvProcessReceivedCommands+0x10c>
 800e12c:	a201      	add	r2, pc, #4	; (adr r2, 800e134 <prvProcessReceivedCommands+0x3c>)
 800e12e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e132:	bf00      	nop
 800e134:	0800e15d 	.word	0x0800e15d
 800e138:	0800e15d 	.word	0x0800e15d
 800e13c:	0800e15d 	.word	0x0800e15d
 800e140:	0800e205 	.word	0x0800e205
 800e144:	0800e1b9 	.word	0x0800e1b9
 800e148:	0800e1f1 	.word	0x0800e1f1
 800e14c:	0800e15d 	.word	0x0800e15d
 800e150:	0800e15d 	.word	0x0800e15d
 800e154:	0800e205 	.word	0x0800e205
 800e158:	0800e1b9 	.word	0x0800e1b9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e15c:	68fa      	ldr	r2, [r7, #12]
 800e15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e160:	699b      	ldr	r3, [r3, #24]
 800e162:	18d1      	adds	r1, r2, r3
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	6a3a      	ldr	r2, [r7, #32]
 800e168:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e16a:	f7ff ff83 	bl	800e074 <prvInsertTimerInActiveList>
 800e16e:	4603      	mov	r3, r0
 800e170:	2b00      	cmp	r3, #0
 800e172:	d047      	beq.n	800e204 <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e178:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e17a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e17e:	69db      	ldr	r3, [r3, #28]
 800e180:	2b01      	cmp	r3, #1
 800e182:	d13f      	bne.n	800e204 <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e184:	68fa      	ldr	r2, [r7, #12]
 800e186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e188:	699b      	ldr	r3, [r3, #24]
 800e18a:	441a      	add	r2, r3
 800e18c:	2300      	movs	r3, #0
 800e18e:	9300      	str	r3, [sp, #0]
 800e190:	2300      	movs	r3, #0
 800e192:	2100      	movs	r1, #0
 800e194:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e196:	f7ff fe3b 	bl	800de10 <xTimerGenericCommand>
 800e19a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800e19c:	69fb      	ldr	r3, [r7, #28]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d130      	bne.n	800e204 <prvProcessReceivedCommands+0x10c>
	__asm volatile
 800e1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1a6:	f383 8811 	msr	BASEPRI, r3
 800e1aa:	f3bf 8f6f 	isb	sy
 800e1ae:	f3bf 8f4f 	dsb	sy
 800e1b2:	61bb      	str	r3, [r7, #24]
}
 800e1b4:	bf00      	nop
 800e1b6:	e7fe      	b.n	800e1b6 <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e1b8:	68fa      	ldr	r2, [r7, #12]
 800e1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1bc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c0:	699b      	ldr	r3, [r3, #24]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d10a      	bne.n	800e1dc <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800e1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ca:	f383 8811 	msr	BASEPRI, r3
 800e1ce:	f3bf 8f6f 	isb	sy
 800e1d2:	f3bf 8f4f 	dsb	sy
 800e1d6:	617b      	str	r3, [r7, #20]
}
 800e1d8:	bf00      	nop
 800e1da:	e7fe      	b.n	800e1da <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1de:	699a      	ldr	r2, [r3, #24]
 800e1e0:	6a3b      	ldr	r3, [r7, #32]
 800e1e2:	18d1      	adds	r1, r2, r3
 800e1e4:	6a3b      	ldr	r3, [r7, #32]
 800e1e6:	6a3a      	ldr	r2, [r7, #32]
 800e1e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1ea:	f7ff ff43 	bl	800e074 <prvInsertTimerInActiveList>
					break;
 800e1ee:	e009      	b.n	800e204 <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d104      	bne.n	800e204 <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 800e1fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1fc:	f000 fb6a 	bl	800e8d4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e200:	e000      	b.n	800e204 <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e202:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e204:	4b08      	ldr	r3, [pc, #32]	; (800e228 <prvProcessReceivedCommands+0x130>)
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	f107 0108 	add.w	r1, r7, #8
 800e20c:	2200      	movs	r2, #0
 800e20e:	4618      	mov	r0, r3
 800e210:	f7fd fec6 	bl	800bfa0 <xQueueReceive>
 800e214:	4603      	mov	r3, r0
 800e216:	2b00      	cmp	r3, #0
 800e218:	f47f af72 	bne.w	800e100 <prvProcessReceivedCommands+0x8>
	}
}
 800e21c:	bf00      	nop
 800e21e:	bf00      	nop
 800e220:	3728      	adds	r7, #40	; 0x28
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
 800e226:	bf00      	nop
 800e228:	200017b4 	.word	0x200017b4

0800e22c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b088      	sub	sp, #32
 800e230:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e232:	e045      	b.n	800e2c0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e234:	4b2c      	ldr	r3, [pc, #176]	; (800e2e8 <prvSwitchTimerLists+0xbc>)
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	68db      	ldr	r3, [r3, #12]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e23e:	4b2a      	ldr	r3, [pc, #168]	; (800e2e8 <prvSwitchTimerLists+0xbc>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	68db      	ldr	r3, [r3, #12]
 800e244:	68db      	ldr	r3, [r3, #12]
 800e246:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	3304      	adds	r3, #4
 800e24c:	4618      	mov	r0, r3
 800e24e:	f7fd fbab 	bl	800b9a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e256:	68f8      	ldr	r0, [r7, #12]
 800e258:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	69db      	ldr	r3, [r3, #28]
 800e25e:	2b01      	cmp	r3, #1
 800e260:	d12e      	bne.n	800e2c0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	699b      	ldr	r3, [r3, #24]
 800e266:	693a      	ldr	r2, [r7, #16]
 800e268:	4413      	add	r3, r2
 800e26a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e26c:	68ba      	ldr	r2, [r7, #8]
 800e26e:	693b      	ldr	r3, [r7, #16]
 800e270:	429a      	cmp	r2, r3
 800e272:	d90e      	bls.n	800e292 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	68ba      	ldr	r2, [r7, #8]
 800e278:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	68fa      	ldr	r2, [r7, #12]
 800e27e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e280:	4b19      	ldr	r3, [pc, #100]	; (800e2e8 <prvSwitchTimerLists+0xbc>)
 800e282:	681a      	ldr	r2, [r3, #0]
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	3304      	adds	r3, #4
 800e288:	4619      	mov	r1, r3
 800e28a:	4610      	mov	r0, r2
 800e28c:	f7fd fb54 	bl	800b938 <vListInsert>
 800e290:	e016      	b.n	800e2c0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e292:	2300      	movs	r3, #0
 800e294:	9300      	str	r3, [sp, #0]
 800e296:	2300      	movs	r3, #0
 800e298:	693a      	ldr	r2, [r7, #16]
 800e29a:	2100      	movs	r1, #0
 800e29c:	68f8      	ldr	r0, [r7, #12]
 800e29e:	f7ff fdb7 	bl	800de10 <xTimerGenericCommand>
 800e2a2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d10a      	bne.n	800e2c0 <prvSwitchTimerLists+0x94>
	__asm volatile
 800e2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ae:	f383 8811 	msr	BASEPRI, r3
 800e2b2:	f3bf 8f6f 	isb	sy
 800e2b6:	f3bf 8f4f 	dsb	sy
 800e2ba:	603b      	str	r3, [r7, #0]
}
 800e2bc:	bf00      	nop
 800e2be:	e7fe      	b.n	800e2be <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e2c0:	4b09      	ldr	r3, [pc, #36]	; (800e2e8 <prvSwitchTimerLists+0xbc>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d1b4      	bne.n	800e234 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e2ca:	4b07      	ldr	r3, [pc, #28]	; (800e2e8 <prvSwitchTimerLists+0xbc>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e2d0:	4b06      	ldr	r3, [pc, #24]	; (800e2ec <prvSwitchTimerLists+0xc0>)
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	4a04      	ldr	r2, [pc, #16]	; (800e2e8 <prvSwitchTimerLists+0xbc>)
 800e2d6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e2d8:	4a04      	ldr	r2, [pc, #16]	; (800e2ec <prvSwitchTimerLists+0xc0>)
 800e2da:	697b      	ldr	r3, [r7, #20]
 800e2dc:	6013      	str	r3, [r2, #0]
}
 800e2de:	bf00      	nop
 800e2e0:	3718      	adds	r7, #24
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}
 800e2e6:	bf00      	nop
 800e2e8:	200017ac 	.word	0x200017ac
 800e2ec:	200017b0 	.word	0x200017b0

0800e2f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b082      	sub	sp, #8
 800e2f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e2f6:	f000 f929 	bl	800e54c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e2fa:	4b15      	ldr	r3, [pc, #84]	; (800e350 <prvCheckForValidListAndQueue+0x60>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d120      	bne.n	800e344 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e302:	4814      	ldr	r0, [pc, #80]	; (800e354 <prvCheckForValidListAndQueue+0x64>)
 800e304:	f7fd faca 	bl	800b89c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e308:	4813      	ldr	r0, [pc, #76]	; (800e358 <prvCheckForValidListAndQueue+0x68>)
 800e30a:	f7fd fac7 	bl	800b89c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e30e:	4b13      	ldr	r3, [pc, #76]	; (800e35c <prvCheckForValidListAndQueue+0x6c>)
 800e310:	4a10      	ldr	r2, [pc, #64]	; (800e354 <prvCheckForValidListAndQueue+0x64>)
 800e312:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e314:	4b12      	ldr	r3, [pc, #72]	; (800e360 <prvCheckForValidListAndQueue+0x70>)
 800e316:	4a10      	ldr	r2, [pc, #64]	; (800e358 <prvCheckForValidListAndQueue+0x68>)
 800e318:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e31a:	2300      	movs	r3, #0
 800e31c:	9300      	str	r3, [sp, #0]
 800e31e:	4b11      	ldr	r3, [pc, #68]	; (800e364 <prvCheckForValidListAndQueue+0x74>)
 800e320:	4a11      	ldr	r2, [pc, #68]	; (800e368 <prvCheckForValidListAndQueue+0x78>)
 800e322:	210c      	movs	r1, #12
 800e324:	200a      	movs	r0, #10
 800e326:	f7fd fbd1 	bl	800bacc <xQueueGenericCreateStatic>
 800e32a:	4603      	mov	r3, r0
 800e32c:	4a08      	ldr	r2, [pc, #32]	; (800e350 <prvCheckForValidListAndQueue+0x60>)
 800e32e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e330:	4b07      	ldr	r3, [pc, #28]	; (800e350 <prvCheckForValidListAndQueue+0x60>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d005      	beq.n	800e344 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e338:	4b05      	ldr	r3, [pc, #20]	; (800e350 <prvCheckForValidListAndQueue+0x60>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	490b      	ldr	r1, [pc, #44]	; (800e36c <prvCheckForValidListAndQueue+0x7c>)
 800e33e:	4618      	mov	r0, r3
 800e340:	f7fe f81e 	bl	800c380 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e344:	f000 f932 	bl	800e5ac <vPortExitCritical>
}
 800e348:	bf00      	nop
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}
 800e34e:	bf00      	nop
 800e350:	200017b4 	.word	0x200017b4
 800e354:	20001784 	.word	0x20001784
 800e358:	20001798 	.word	0x20001798
 800e35c:	200017ac 	.word	0x200017ac
 800e360:	200017b0 	.word	0x200017b0
 800e364:	20001838 	.word	0x20001838
 800e368:	200017c0 	.word	0x200017c0
 800e36c:	08013658 	.word	0x08013658

0800e370 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e370:	b480      	push	{r7}
 800e372:	b085      	sub	sp, #20
 800e374:	af00      	add	r7, sp, #0
 800e376:	60f8      	str	r0, [r7, #12]
 800e378:	60b9      	str	r1, [r7, #8]
 800e37a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	3b04      	subs	r3, #4
 800e380:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e388:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	3b04      	subs	r3, #4
 800e38e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e390:	68bb      	ldr	r3, [r7, #8]
 800e392:	f023 0201 	bic.w	r2, r3, #1
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	3b04      	subs	r3, #4
 800e39e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e3a0:	4a08      	ldr	r2, [pc, #32]	; (800e3c4 <pxPortInitialiseStack+0x54>)
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	3b14      	subs	r3, #20
 800e3aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e3ac:	687a      	ldr	r2, [r7, #4]
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	3b20      	subs	r3, #32
 800e3b6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
}
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	3714      	adds	r7, #20
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bc80      	pop	{r7}
 800e3c2:	4770      	bx	lr
 800e3c4:	0800e3c9 	.word	0x0800e3c9

0800e3c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b085      	sub	sp, #20
 800e3cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e3d2:	4b12      	ldr	r3, [pc, #72]	; (800e41c <prvTaskExitError+0x54>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3da:	d00a      	beq.n	800e3f2 <prvTaskExitError+0x2a>
	__asm volatile
 800e3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3e0:	f383 8811 	msr	BASEPRI, r3
 800e3e4:	f3bf 8f6f 	isb	sy
 800e3e8:	f3bf 8f4f 	dsb	sy
 800e3ec:	60fb      	str	r3, [r7, #12]
}
 800e3ee:	bf00      	nop
 800e3f0:	e7fe      	b.n	800e3f0 <prvTaskExitError+0x28>
	__asm volatile
 800e3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3f6:	f383 8811 	msr	BASEPRI, r3
 800e3fa:	f3bf 8f6f 	isb	sy
 800e3fe:	f3bf 8f4f 	dsb	sy
 800e402:	60bb      	str	r3, [r7, #8]
}
 800e404:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e406:	bf00      	nop
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d0fc      	beq.n	800e408 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e40e:	bf00      	nop
 800e410:	bf00      	nop
 800e412:	3714      	adds	r7, #20
 800e414:	46bd      	mov	sp, r7
 800e416:	bc80      	pop	{r7}
 800e418:	4770      	bx	lr
 800e41a:	bf00      	nop
 800e41c:	20000060 	.word	0x20000060

0800e420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e420:	4b07      	ldr	r3, [pc, #28]	; (800e440 <pxCurrentTCBConst2>)
 800e422:	6819      	ldr	r1, [r3, #0]
 800e424:	6808      	ldr	r0, [r1, #0]
 800e426:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800e42a:	f380 8809 	msr	PSP, r0
 800e42e:	f3bf 8f6f 	isb	sy
 800e432:	f04f 0000 	mov.w	r0, #0
 800e436:	f380 8811 	msr	BASEPRI, r0
 800e43a:	f04e 0e0d 	orr.w	lr, lr, #13
 800e43e:	4770      	bx	lr

0800e440 <pxCurrentTCBConst2>:
 800e440:	20001658 	.word	0x20001658
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e444:	bf00      	nop
 800e446:	bf00      	nop

0800e448 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800e448:	4806      	ldr	r0, [pc, #24]	; (800e464 <prvPortStartFirstTask+0x1c>)
 800e44a:	6800      	ldr	r0, [r0, #0]
 800e44c:	6800      	ldr	r0, [r0, #0]
 800e44e:	f380 8808 	msr	MSP, r0
 800e452:	b662      	cpsie	i
 800e454:	b661      	cpsie	f
 800e456:	f3bf 8f4f 	dsb	sy
 800e45a:	f3bf 8f6f 	isb	sy
 800e45e:	df00      	svc	0
 800e460:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e462:	bf00      	nop
 800e464:	e000ed08 	.word	0xe000ed08

0800e468 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b084      	sub	sp, #16
 800e46c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e46e:	4b32      	ldr	r3, [pc, #200]	; (800e538 <xPortStartScheduler+0xd0>)
 800e470:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	781b      	ldrb	r3, [r3, #0]
 800e476:	b2db      	uxtb	r3, r3
 800e478:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	22ff      	movs	r2, #255	; 0xff
 800e47e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	781b      	ldrb	r3, [r3, #0]
 800e484:	b2db      	uxtb	r3, r3
 800e486:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e488:	78fb      	ldrb	r3, [r7, #3]
 800e48a:	b2db      	uxtb	r3, r3
 800e48c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e490:	b2da      	uxtb	r2, r3
 800e492:	4b2a      	ldr	r3, [pc, #168]	; (800e53c <xPortStartScheduler+0xd4>)
 800e494:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e496:	4b2a      	ldr	r3, [pc, #168]	; (800e540 <xPortStartScheduler+0xd8>)
 800e498:	2207      	movs	r2, #7
 800e49a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e49c:	e009      	b.n	800e4b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e49e:	4b28      	ldr	r3, [pc, #160]	; (800e540 <xPortStartScheduler+0xd8>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	3b01      	subs	r3, #1
 800e4a4:	4a26      	ldr	r2, [pc, #152]	; (800e540 <xPortStartScheduler+0xd8>)
 800e4a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e4a8:	78fb      	ldrb	r3, [r7, #3]
 800e4aa:	b2db      	uxtb	r3, r3
 800e4ac:	005b      	lsls	r3, r3, #1
 800e4ae:	b2db      	uxtb	r3, r3
 800e4b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e4b2:	78fb      	ldrb	r3, [r7, #3]
 800e4b4:	b2db      	uxtb	r3, r3
 800e4b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4ba:	2b80      	cmp	r3, #128	; 0x80
 800e4bc:	d0ef      	beq.n	800e49e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e4be:	4b20      	ldr	r3, [pc, #128]	; (800e540 <xPortStartScheduler+0xd8>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	f1c3 0307 	rsb	r3, r3, #7
 800e4c6:	2b04      	cmp	r3, #4
 800e4c8:	d00a      	beq.n	800e4e0 <xPortStartScheduler+0x78>
	__asm volatile
 800e4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ce:	f383 8811 	msr	BASEPRI, r3
 800e4d2:	f3bf 8f6f 	isb	sy
 800e4d6:	f3bf 8f4f 	dsb	sy
 800e4da:	60bb      	str	r3, [r7, #8]
}
 800e4dc:	bf00      	nop
 800e4de:	e7fe      	b.n	800e4de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e4e0:	4b17      	ldr	r3, [pc, #92]	; (800e540 <xPortStartScheduler+0xd8>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	021b      	lsls	r3, r3, #8
 800e4e6:	4a16      	ldr	r2, [pc, #88]	; (800e540 <xPortStartScheduler+0xd8>)
 800e4e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e4ea:	4b15      	ldr	r3, [pc, #84]	; (800e540 <xPortStartScheduler+0xd8>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e4f2:	4a13      	ldr	r2, [pc, #76]	; (800e540 <xPortStartScheduler+0xd8>)
 800e4f4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	b2da      	uxtb	r2, r3
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e4fe:	4b11      	ldr	r3, [pc, #68]	; (800e544 <xPortStartScheduler+0xdc>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	4a10      	ldr	r2, [pc, #64]	; (800e544 <xPortStartScheduler+0xdc>)
 800e504:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e508:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e50a:	4b0e      	ldr	r3, [pc, #56]	; (800e544 <xPortStartScheduler+0xdc>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	4a0d      	ldr	r2, [pc, #52]	; (800e544 <xPortStartScheduler+0xdc>)
 800e510:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e514:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e516:	f000 f8b9 	bl	800e68c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e51a:	4b0b      	ldr	r3, [pc, #44]	; (800e548 <xPortStartScheduler+0xe0>)
 800e51c:	2200      	movs	r2, #0
 800e51e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e520:	f7ff ff92 	bl	800e448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e524:	f7fe fed0 	bl	800d2c8 <vTaskSwitchContext>
	prvTaskExitError();
 800e528:	f7ff ff4e 	bl	800e3c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e52c:	2300      	movs	r3, #0
}
 800e52e:	4618      	mov	r0, r3
 800e530:	3710      	adds	r7, #16
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}
 800e536:	bf00      	nop
 800e538:	e000e400 	.word	0xe000e400
 800e53c:	20001880 	.word	0x20001880
 800e540:	20001884 	.word	0x20001884
 800e544:	e000ed20 	.word	0xe000ed20
 800e548:	20000060 	.word	0x20000060

0800e54c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e54c:	b480      	push	{r7}
 800e54e:	b083      	sub	sp, #12
 800e550:	af00      	add	r7, sp, #0
	__asm volatile
 800e552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e556:	f383 8811 	msr	BASEPRI, r3
 800e55a:	f3bf 8f6f 	isb	sy
 800e55e:	f3bf 8f4f 	dsb	sy
 800e562:	607b      	str	r3, [r7, #4]
}
 800e564:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e566:	4b0f      	ldr	r3, [pc, #60]	; (800e5a4 <vPortEnterCritical+0x58>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	3301      	adds	r3, #1
 800e56c:	4a0d      	ldr	r2, [pc, #52]	; (800e5a4 <vPortEnterCritical+0x58>)
 800e56e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e570:	4b0c      	ldr	r3, [pc, #48]	; (800e5a4 <vPortEnterCritical+0x58>)
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	2b01      	cmp	r3, #1
 800e576:	d10f      	bne.n	800e598 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e578:	4b0b      	ldr	r3, [pc, #44]	; (800e5a8 <vPortEnterCritical+0x5c>)
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	b2db      	uxtb	r3, r3
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d00a      	beq.n	800e598 <vPortEnterCritical+0x4c>
	__asm volatile
 800e582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e586:	f383 8811 	msr	BASEPRI, r3
 800e58a:	f3bf 8f6f 	isb	sy
 800e58e:	f3bf 8f4f 	dsb	sy
 800e592:	603b      	str	r3, [r7, #0]
}
 800e594:	bf00      	nop
 800e596:	e7fe      	b.n	800e596 <vPortEnterCritical+0x4a>
	}
}
 800e598:	bf00      	nop
 800e59a:	370c      	adds	r7, #12
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bc80      	pop	{r7}
 800e5a0:	4770      	bx	lr
 800e5a2:	bf00      	nop
 800e5a4:	20000060 	.word	0x20000060
 800e5a8:	e000ed04 	.word	0xe000ed04

0800e5ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e5ac:	b480      	push	{r7}
 800e5ae:	b083      	sub	sp, #12
 800e5b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e5b2:	4b11      	ldr	r3, [pc, #68]	; (800e5f8 <vPortExitCritical+0x4c>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d10a      	bne.n	800e5d0 <vPortExitCritical+0x24>
	__asm volatile
 800e5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5be:	f383 8811 	msr	BASEPRI, r3
 800e5c2:	f3bf 8f6f 	isb	sy
 800e5c6:	f3bf 8f4f 	dsb	sy
 800e5ca:	607b      	str	r3, [r7, #4]
}
 800e5cc:	bf00      	nop
 800e5ce:	e7fe      	b.n	800e5ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e5d0:	4b09      	ldr	r3, [pc, #36]	; (800e5f8 <vPortExitCritical+0x4c>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	3b01      	subs	r3, #1
 800e5d6:	4a08      	ldr	r2, [pc, #32]	; (800e5f8 <vPortExitCritical+0x4c>)
 800e5d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e5da:	4b07      	ldr	r3, [pc, #28]	; (800e5f8 <vPortExitCritical+0x4c>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d105      	bne.n	800e5ee <vPortExitCritical+0x42>
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	f383 8811 	msr	BASEPRI, r3
}
 800e5ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e5ee:	bf00      	nop
 800e5f0:	370c      	adds	r7, #12
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bc80      	pop	{r7}
 800e5f6:	4770      	bx	lr
 800e5f8:	20000060 	.word	0x20000060
 800e5fc:	00000000 	.word	0x00000000

0800e600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e600:	f3ef 8009 	mrs	r0, PSP
 800e604:	f3bf 8f6f 	isb	sy
 800e608:	4b0d      	ldr	r3, [pc, #52]	; (800e640 <pxCurrentTCBConst>)
 800e60a:	681a      	ldr	r2, [r3, #0]
 800e60c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800e610:	6010      	str	r0, [r2, #0]
 800e612:	e92d 4008 	stmdb	sp!, {r3, lr}
 800e616:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e61a:	f380 8811 	msr	BASEPRI, r0
 800e61e:	f7fe fe53 	bl	800d2c8 <vTaskSwitchContext>
 800e622:	f04f 0000 	mov.w	r0, #0
 800e626:	f380 8811 	msr	BASEPRI, r0
 800e62a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e62e:	6819      	ldr	r1, [r3, #0]
 800e630:	6808      	ldr	r0, [r1, #0]
 800e632:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800e636:	f380 8809 	msr	PSP, r0
 800e63a:	f3bf 8f6f 	isb	sy
 800e63e:	4770      	bx	lr

0800e640 <pxCurrentTCBConst>:
 800e640:	20001658 	.word	0x20001658
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e644:	bf00      	nop
 800e646:	bf00      	nop

0800e648 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b082      	sub	sp, #8
 800e64c:	af00      	add	r7, sp, #0
	__asm volatile
 800e64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e652:	f383 8811 	msr	BASEPRI, r3
 800e656:	f3bf 8f6f 	isb	sy
 800e65a:	f3bf 8f4f 	dsb	sy
 800e65e:	607b      	str	r3, [r7, #4]
}
 800e660:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e662:	f7fe fd73 	bl	800d14c <xTaskIncrementTick>
 800e666:	4603      	mov	r3, r0
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d003      	beq.n	800e674 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e66c:	4b06      	ldr	r3, [pc, #24]	; (800e688 <SysTick_Handler+0x40>)
 800e66e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e672:	601a      	str	r2, [r3, #0]
 800e674:	2300      	movs	r3, #0
 800e676:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	f383 8811 	msr	BASEPRI, r3
}
 800e67e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e680:	bf00      	nop
 800e682:	3708      	adds	r7, #8
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}
 800e688:	e000ed04 	.word	0xe000ed04

0800e68c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e68c:	b480      	push	{r7}
 800e68e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e690:	4b0a      	ldr	r3, [pc, #40]	; (800e6bc <vPortSetupTimerInterrupt+0x30>)
 800e692:	2200      	movs	r2, #0
 800e694:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e696:	4b0a      	ldr	r3, [pc, #40]	; (800e6c0 <vPortSetupTimerInterrupt+0x34>)
 800e698:	2200      	movs	r2, #0
 800e69a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e69c:	4b09      	ldr	r3, [pc, #36]	; (800e6c4 <vPortSetupTimerInterrupt+0x38>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	4a09      	ldr	r2, [pc, #36]	; (800e6c8 <vPortSetupTimerInterrupt+0x3c>)
 800e6a2:	fba2 2303 	umull	r2, r3, r2, r3
 800e6a6:	099b      	lsrs	r3, r3, #6
 800e6a8:	4a08      	ldr	r2, [pc, #32]	; (800e6cc <vPortSetupTimerInterrupt+0x40>)
 800e6aa:	3b01      	subs	r3, #1
 800e6ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e6ae:	4b03      	ldr	r3, [pc, #12]	; (800e6bc <vPortSetupTimerInterrupt+0x30>)
 800e6b0:	2207      	movs	r2, #7
 800e6b2:	601a      	str	r2, [r3, #0]
}
 800e6b4:	bf00      	nop
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bc80      	pop	{r7}
 800e6ba:	4770      	bx	lr
 800e6bc:	e000e010 	.word	0xe000e010
 800e6c0:	e000e018 	.word	0xe000e018
 800e6c4:	20000054 	.word	0x20000054
 800e6c8:	10624dd3 	.word	0x10624dd3
 800e6cc:	e000e014 	.word	0xe000e014

0800e6d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e6d0:	b480      	push	{r7}
 800e6d2:	b085      	sub	sp, #20
 800e6d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e6d6:	f3ef 8305 	mrs	r3, IPSR
 800e6da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	2b0f      	cmp	r3, #15
 800e6e0:	d914      	bls.n	800e70c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e6e2:	4a16      	ldr	r2, [pc, #88]	; (800e73c <vPortValidateInterruptPriority+0x6c>)
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	4413      	add	r3, r2
 800e6e8:	781b      	ldrb	r3, [r3, #0]
 800e6ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e6ec:	4b14      	ldr	r3, [pc, #80]	; (800e740 <vPortValidateInterruptPriority+0x70>)
 800e6ee:	781b      	ldrb	r3, [r3, #0]
 800e6f0:	7afa      	ldrb	r2, [r7, #11]
 800e6f2:	429a      	cmp	r2, r3
 800e6f4:	d20a      	bcs.n	800e70c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e6f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6fa:	f383 8811 	msr	BASEPRI, r3
 800e6fe:	f3bf 8f6f 	isb	sy
 800e702:	f3bf 8f4f 	dsb	sy
 800e706:	607b      	str	r3, [r7, #4]
}
 800e708:	bf00      	nop
 800e70a:	e7fe      	b.n	800e70a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e70c:	4b0d      	ldr	r3, [pc, #52]	; (800e744 <vPortValidateInterruptPriority+0x74>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e714:	4b0c      	ldr	r3, [pc, #48]	; (800e748 <vPortValidateInterruptPriority+0x78>)
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	429a      	cmp	r2, r3
 800e71a:	d90a      	bls.n	800e732 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e720:	f383 8811 	msr	BASEPRI, r3
 800e724:	f3bf 8f6f 	isb	sy
 800e728:	f3bf 8f4f 	dsb	sy
 800e72c:	603b      	str	r3, [r7, #0]
}
 800e72e:	bf00      	nop
 800e730:	e7fe      	b.n	800e730 <vPortValidateInterruptPriority+0x60>
	}
 800e732:	bf00      	nop
 800e734:	3714      	adds	r7, #20
 800e736:	46bd      	mov	sp, r7
 800e738:	bc80      	pop	{r7}
 800e73a:	4770      	bx	lr
 800e73c:	e000e3f0 	.word	0xe000e3f0
 800e740:	20001880 	.word	0x20001880
 800e744:	e000ed0c 	.word	0xe000ed0c
 800e748:	20001884 	.word	0x20001884

0800e74c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b08a      	sub	sp, #40	; 0x28
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e754:	2300      	movs	r3, #0
 800e756:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e758:	f7fe fc2e 	bl	800cfb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e75c:	4b58      	ldr	r3, [pc, #352]	; (800e8c0 <pvPortMalloc+0x174>)
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d101      	bne.n	800e768 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e764:	f000 f910 	bl	800e988 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e768:	4b56      	ldr	r3, [pc, #344]	; (800e8c4 <pvPortMalloc+0x178>)
 800e76a:	681a      	ldr	r2, [r3, #0]
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	4013      	ands	r3, r2
 800e770:	2b00      	cmp	r3, #0
 800e772:	f040 808e 	bne.w	800e892 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d01d      	beq.n	800e7b8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e77c:	2208      	movs	r2, #8
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	4413      	add	r3, r2
 800e782:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f003 0307 	and.w	r3, r3, #7
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d014      	beq.n	800e7b8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f023 0307 	bic.w	r3, r3, #7
 800e794:	3308      	adds	r3, #8
 800e796:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f003 0307 	and.w	r3, r3, #7
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d00a      	beq.n	800e7b8 <pvPortMalloc+0x6c>
	__asm volatile
 800e7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7a6:	f383 8811 	msr	BASEPRI, r3
 800e7aa:	f3bf 8f6f 	isb	sy
 800e7ae:	f3bf 8f4f 	dsb	sy
 800e7b2:	617b      	str	r3, [r7, #20]
}
 800e7b4:	bf00      	nop
 800e7b6:	e7fe      	b.n	800e7b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d069      	beq.n	800e892 <pvPortMalloc+0x146>
 800e7be:	4b42      	ldr	r3, [pc, #264]	; (800e8c8 <pvPortMalloc+0x17c>)
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	687a      	ldr	r2, [r7, #4]
 800e7c4:	429a      	cmp	r2, r3
 800e7c6:	d864      	bhi.n	800e892 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e7c8:	4b40      	ldr	r3, [pc, #256]	; (800e8cc <pvPortMalloc+0x180>)
 800e7ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e7cc:	4b3f      	ldr	r3, [pc, #252]	; (800e8cc <pvPortMalloc+0x180>)
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e7d2:	e004      	b.n	800e7de <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7e0:	685b      	ldr	r3, [r3, #4]
 800e7e2:	687a      	ldr	r2, [r7, #4]
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d903      	bls.n	800e7f0 <pvPortMalloc+0xa4>
 800e7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d1f1      	bne.n	800e7d4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e7f0:	4b33      	ldr	r3, [pc, #204]	; (800e8c0 <pvPortMalloc+0x174>)
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7f6:	429a      	cmp	r2, r3
 800e7f8:	d04b      	beq.n	800e892 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e7fa:	6a3b      	ldr	r3, [r7, #32]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	2208      	movs	r2, #8
 800e800:	4413      	add	r3, r2
 800e802:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e806:	681a      	ldr	r2, [r3, #0]
 800e808:	6a3b      	ldr	r3, [r7, #32]
 800e80a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e80e:	685a      	ldr	r2, [r3, #4]
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	1ad2      	subs	r2, r2, r3
 800e814:	2308      	movs	r3, #8
 800e816:	005b      	lsls	r3, r3, #1
 800e818:	429a      	cmp	r2, r3
 800e81a:	d91f      	bls.n	800e85c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e81c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	4413      	add	r3, r2
 800e822:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e824:	69bb      	ldr	r3, [r7, #24]
 800e826:	f003 0307 	and.w	r3, r3, #7
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d00a      	beq.n	800e844 <pvPortMalloc+0xf8>
	__asm volatile
 800e82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e832:	f383 8811 	msr	BASEPRI, r3
 800e836:	f3bf 8f6f 	isb	sy
 800e83a:	f3bf 8f4f 	dsb	sy
 800e83e:	613b      	str	r3, [r7, #16]
}
 800e840:	bf00      	nop
 800e842:	e7fe      	b.n	800e842 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e846:	685a      	ldr	r2, [r3, #4]
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	1ad2      	subs	r2, r2, r3
 800e84c:	69bb      	ldr	r3, [r7, #24]
 800e84e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e852:	687a      	ldr	r2, [r7, #4]
 800e854:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e856:	69b8      	ldr	r0, [r7, #24]
 800e858:	f000 f8f8 	bl	800ea4c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e85c:	4b1a      	ldr	r3, [pc, #104]	; (800e8c8 <pvPortMalloc+0x17c>)
 800e85e:	681a      	ldr	r2, [r3, #0]
 800e860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e862:	685b      	ldr	r3, [r3, #4]
 800e864:	1ad3      	subs	r3, r2, r3
 800e866:	4a18      	ldr	r2, [pc, #96]	; (800e8c8 <pvPortMalloc+0x17c>)
 800e868:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e86a:	4b17      	ldr	r3, [pc, #92]	; (800e8c8 <pvPortMalloc+0x17c>)
 800e86c:	681a      	ldr	r2, [r3, #0]
 800e86e:	4b18      	ldr	r3, [pc, #96]	; (800e8d0 <pvPortMalloc+0x184>)
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	429a      	cmp	r2, r3
 800e874:	d203      	bcs.n	800e87e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e876:	4b14      	ldr	r3, [pc, #80]	; (800e8c8 <pvPortMalloc+0x17c>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	4a15      	ldr	r2, [pc, #84]	; (800e8d0 <pvPortMalloc+0x184>)
 800e87c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e880:	685a      	ldr	r2, [r3, #4]
 800e882:	4b10      	ldr	r3, [pc, #64]	; (800e8c4 <pvPortMalloc+0x178>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	431a      	orrs	r2, r3
 800e888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e88a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e88e:	2200      	movs	r2, #0
 800e890:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e892:	f7fe fb9f 	bl	800cfd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e896:	69fb      	ldr	r3, [r7, #28]
 800e898:	f003 0307 	and.w	r3, r3, #7
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d00a      	beq.n	800e8b6 <pvPortMalloc+0x16a>
	__asm volatile
 800e8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8a4:	f383 8811 	msr	BASEPRI, r3
 800e8a8:	f3bf 8f6f 	isb	sy
 800e8ac:	f3bf 8f4f 	dsb	sy
 800e8b0:	60fb      	str	r3, [r7, #12]
}
 800e8b2:	bf00      	nop
 800e8b4:	e7fe      	b.n	800e8b4 <pvPortMalloc+0x168>
	return pvReturn;
 800e8b6:	69fb      	ldr	r3, [r7, #28]
}
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	3728      	adds	r7, #40	; 0x28
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}
 800e8c0:	20003890 	.word	0x20003890
 800e8c4:	2000389c 	.word	0x2000389c
 800e8c8:	20003894 	.word	0x20003894
 800e8cc:	20003888 	.word	0x20003888
 800e8d0:	20003898 	.word	0x20003898

0800e8d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b086      	sub	sp, #24
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d048      	beq.n	800e978 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e8e6:	2308      	movs	r3, #8
 800e8e8:	425b      	negs	r3, r3
 800e8ea:	697a      	ldr	r2, [r7, #20]
 800e8ec:	4413      	add	r3, r2
 800e8ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e8f0:	697b      	ldr	r3, [r7, #20]
 800e8f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e8f4:	693b      	ldr	r3, [r7, #16]
 800e8f6:	685a      	ldr	r2, [r3, #4]
 800e8f8:	4b21      	ldr	r3, [pc, #132]	; (800e980 <vPortFree+0xac>)
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	4013      	ands	r3, r2
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d10a      	bne.n	800e918 <vPortFree+0x44>
	__asm volatile
 800e902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e906:	f383 8811 	msr	BASEPRI, r3
 800e90a:	f3bf 8f6f 	isb	sy
 800e90e:	f3bf 8f4f 	dsb	sy
 800e912:	60fb      	str	r3, [r7, #12]
}
 800e914:	bf00      	nop
 800e916:	e7fe      	b.n	800e916 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e918:	693b      	ldr	r3, [r7, #16]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d00a      	beq.n	800e936 <vPortFree+0x62>
	__asm volatile
 800e920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e924:	f383 8811 	msr	BASEPRI, r3
 800e928:	f3bf 8f6f 	isb	sy
 800e92c:	f3bf 8f4f 	dsb	sy
 800e930:	60bb      	str	r3, [r7, #8]
}
 800e932:	bf00      	nop
 800e934:	e7fe      	b.n	800e934 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e936:	693b      	ldr	r3, [r7, #16]
 800e938:	685a      	ldr	r2, [r3, #4]
 800e93a:	4b11      	ldr	r3, [pc, #68]	; (800e980 <vPortFree+0xac>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	4013      	ands	r3, r2
 800e940:	2b00      	cmp	r3, #0
 800e942:	d019      	beq.n	800e978 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e944:	693b      	ldr	r3, [r7, #16]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d115      	bne.n	800e978 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e94c:	693b      	ldr	r3, [r7, #16]
 800e94e:	685a      	ldr	r2, [r3, #4]
 800e950:	4b0b      	ldr	r3, [pc, #44]	; (800e980 <vPortFree+0xac>)
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	43db      	mvns	r3, r3
 800e956:	401a      	ands	r2, r3
 800e958:	693b      	ldr	r3, [r7, #16]
 800e95a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e95c:	f7fe fb2c 	bl	800cfb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e960:	693b      	ldr	r3, [r7, #16]
 800e962:	685a      	ldr	r2, [r3, #4]
 800e964:	4b07      	ldr	r3, [pc, #28]	; (800e984 <vPortFree+0xb0>)
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	4413      	add	r3, r2
 800e96a:	4a06      	ldr	r2, [pc, #24]	; (800e984 <vPortFree+0xb0>)
 800e96c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e96e:	6938      	ldr	r0, [r7, #16]
 800e970:	f000 f86c 	bl	800ea4c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e974:	f7fe fb2e 	bl	800cfd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e978:	bf00      	nop
 800e97a:	3718      	adds	r7, #24
 800e97c:	46bd      	mov	sp, r7
 800e97e:	bd80      	pop	{r7, pc}
 800e980:	2000389c 	.word	0x2000389c
 800e984:	20003894 	.word	0x20003894

0800e988 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e988:	b480      	push	{r7}
 800e98a:	b085      	sub	sp, #20
 800e98c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e98e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e992:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e994:	4b27      	ldr	r3, [pc, #156]	; (800ea34 <prvHeapInit+0xac>)
 800e996:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	f003 0307 	and.w	r3, r3, #7
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d00c      	beq.n	800e9bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	3307      	adds	r3, #7
 800e9a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	f023 0307 	bic.w	r3, r3, #7
 800e9ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e9b0:	68ba      	ldr	r2, [r7, #8]
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	1ad3      	subs	r3, r2, r3
 800e9b6:	4a1f      	ldr	r2, [pc, #124]	; (800ea34 <prvHeapInit+0xac>)
 800e9b8:	4413      	add	r3, r2
 800e9ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e9c0:	4a1d      	ldr	r2, [pc, #116]	; (800ea38 <prvHeapInit+0xb0>)
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e9c6:	4b1c      	ldr	r3, [pc, #112]	; (800ea38 <prvHeapInit+0xb0>)
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	68ba      	ldr	r2, [r7, #8]
 800e9d0:	4413      	add	r3, r2
 800e9d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e9d4:	2208      	movs	r2, #8
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	1a9b      	subs	r3, r3, r2
 800e9da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	f023 0307 	bic.w	r3, r3, #7
 800e9e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	4a15      	ldr	r2, [pc, #84]	; (800ea3c <prvHeapInit+0xb4>)
 800e9e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e9ea:	4b14      	ldr	r3, [pc, #80]	; (800ea3c <prvHeapInit+0xb4>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e9f2:	4b12      	ldr	r3, [pc, #72]	; (800ea3c <prvHeapInit+0xb4>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	68fa      	ldr	r2, [r7, #12]
 800ea02:	1ad2      	subs	r2, r2, r3
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ea08:	4b0c      	ldr	r3, [pc, #48]	; (800ea3c <prvHeapInit+0xb4>)
 800ea0a:	681a      	ldr	r2, [r3, #0]
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	685b      	ldr	r3, [r3, #4]
 800ea14:	4a0a      	ldr	r2, [pc, #40]	; (800ea40 <prvHeapInit+0xb8>)
 800ea16:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	685b      	ldr	r3, [r3, #4]
 800ea1c:	4a09      	ldr	r2, [pc, #36]	; (800ea44 <prvHeapInit+0xbc>)
 800ea1e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ea20:	4b09      	ldr	r3, [pc, #36]	; (800ea48 <prvHeapInit+0xc0>)
 800ea22:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ea26:	601a      	str	r2, [r3, #0]
}
 800ea28:	bf00      	nop
 800ea2a:	3714      	adds	r7, #20
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bc80      	pop	{r7}
 800ea30:	4770      	bx	lr
 800ea32:	bf00      	nop
 800ea34:	20001888 	.word	0x20001888
 800ea38:	20003888 	.word	0x20003888
 800ea3c:	20003890 	.word	0x20003890
 800ea40:	20003898 	.word	0x20003898
 800ea44:	20003894 	.word	0x20003894
 800ea48:	2000389c 	.word	0x2000389c

0800ea4c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ea4c:	b480      	push	{r7}
 800ea4e:	b085      	sub	sp, #20
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ea54:	4b27      	ldr	r3, [pc, #156]	; (800eaf4 <prvInsertBlockIntoFreeList+0xa8>)
 800ea56:	60fb      	str	r3, [r7, #12]
 800ea58:	e002      	b.n	800ea60 <prvInsertBlockIntoFreeList+0x14>
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	60fb      	str	r3, [r7, #12]
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	687a      	ldr	r2, [r7, #4]
 800ea66:	429a      	cmp	r2, r3
 800ea68:	d8f7      	bhi.n	800ea5a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	685b      	ldr	r3, [r3, #4]
 800ea72:	68ba      	ldr	r2, [r7, #8]
 800ea74:	4413      	add	r3, r2
 800ea76:	687a      	ldr	r2, [r7, #4]
 800ea78:	429a      	cmp	r2, r3
 800ea7a:	d108      	bne.n	800ea8e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	685a      	ldr	r2, [r3, #4]
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	685b      	ldr	r3, [r3, #4]
 800ea84:	441a      	add	r2, r3
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	685b      	ldr	r3, [r3, #4]
 800ea96:	68ba      	ldr	r2, [r7, #8]
 800ea98:	441a      	add	r2, r3
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	d118      	bne.n	800ead4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	681a      	ldr	r2, [r3, #0]
 800eaa6:	4b14      	ldr	r3, [pc, #80]	; (800eaf8 <prvInsertBlockIntoFreeList+0xac>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	d00d      	beq.n	800eaca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	685a      	ldr	r2, [r3, #4]
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	685b      	ldr	r3, [r3, #4]
 800eab8:	441a      	add	r2, r3
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	681a      	ldr	r2, [r3, #0]
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	601a      	str	r2, [r3, #0]
 800eac8:	e008      	b.n	800eadc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800eaca:	4b0b      	ldr	r3, [pc, #44]	; (800eaf8 <prvInsertBlockIntoFreeList+0xac>)
 800eacc:	681a      	ldr	r2, [r3, #0]
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	601a      	str	r2, [r3, #0]
 800ead2:	e003      	b.n	800eadc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	681a      	ldr	r2, [r3, #0]
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800eadc:	68fa      	ldr	r2, [r7, #12]
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	429a      	cmp	r2, r3
 800eae2:	d002      	beq.n	800eaea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	687a      	ldr	r2, [r7, #4]
 800eae8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eaea:	bf00      	nop
 800eaec:	3714      	adds	r7, #20
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bc80      	pop	{r7}
 800eaf2:	4770      	bx	lr
 800eaf4:	20003888 	.word	0x20003888
 800eaf8:	20003890 	.word	0x20003890

0800eafc <__assert_func>:
 800eafc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eafe:	4614      	mov	r4, r2
 800eb00:	461a      	mov	r2, r3
 800eb02:	4b09      	ldr	r3, [pc, #36]	; (800eb28 <__assert_func+0x2c>)
 800eb04:	4605      	mov	r5, r0
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	68d8      	ldr	r0, [r3, #12]
 800eb0a:	b14c      	cbz	r4, 800eb20 <__assert_func+0x24>
 800eb0c:	4b07      	ldr	r3, [pc, #28]	; (800eb2c <__assert_func+0x30>)
 800eb0e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eb12:	9100      	str	r1, [sp, #0]
 800eb14:	462b      	mov	r3, r5
 800eb16:	4906      	ldr	r1, [pc, #24]	; (800eb30 <__assert_func+0x34>)
 800eb18:	f000 f814 	bl	800eb44 <fiprintf>
 800eb1c:	f000 ff4c 	bl	800f9b8 <abort>
 800eb20:	4b04      	ldr	r3, [pc, #16]	; (800eb34 <__assert_func+0x38>)
 800eb22:	461c      	mov	r4, r3
 800eb24:	e7f3      	b.n	800eb0e <__assert_func+0x12>
 800eb26:	bf00      	nop
 800eb28:	20000064 	.word	0x20000064
 800eb2c:	08014301 	.word	0x08014301
 800eb30:	0801430e 	.word	0x0801430e
 800eb34:	0801433c 	.word	0x0801433c

0800eb38 <__errno>:
 800eb38:	4b01      	ldr	r3, [pc, #4]	; (800eb40 <__errno+0x8>)
 800eb3a:	6818      	ldr	r0, [r3, #0]
 800eb3c:	4770      	bx	lr
 800eb3e:	bf00      	nop
 800eb40:	20000064 	.word	0x20000064

0800eb44 <fiprintf>:
 800eb44:	b40e      	push	{r1, r2, r3}
 800eb46:	b503      	push	{r0, r1, lr}
 800eb48:	4601      	mov	r1, r0
 800eb4a:	ab03      	add	r3, sp, #12
 800eb4c:	4805      	ldr	r0, [pc, #20]	; (800eb64 <fiprintf+0x20>)
 800eb4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb52:	6800      	ldr	r0, [r0, #0]
 800eb54:	9301      	str	r3, [sp, #4]
 800eb56:	f000 f869 	bl	800ec2c <_vfiprintf_r>
 800eb5a:	b002      	add	sp, #8
 800eb5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb60:	b003      	add	sp, #12
 800eb62:	4770      	bx	lr
 800eb64:	20000064 	.word	0x20000064

0800eb68 <__libc_init_array>:
 800eb68:	b570      	push	{r4, r5, r6, lr}
 800eb6a:	2600      	movs	r6, #0
 800eb6c:	4d0c      	ldr	r5, [pc, #48]	; (800eba0 <__libc_init_array+0x38>)
 800eb6e:	4c0d      	ldr	r4, [pc, #52]	; (800eba4 <__libc_init_array+0x3c>)
 800eb70:	1b64      	subs	r4, r4, r5
 800eb72:	10a4      	asrs	r4, r4, #2
 800eb74:	42a6      	cmp	r6, r4
 800eb76:	d109      	bne.n	800eb8c <__libc_init_array+0x24>
 800eb78:	f003 feb8 	bl	80128ec <_init>
 800eb7c:	2600      	movs	r6, #0
 800eb7e:	4d0a      	ldr	r5, [pc, #40]	; (800eba8 <__libc_init_array+0x40>)
 800eb80:	4c0a      	ldr	r4, [pc, #40]	; (800ebac <__libc_init_array+0x44>)
 800eb82:	1b64      	subs	r4, r4, r5
 800eb84:	10a4      	asrs	r4, r4, #2
 800eb86:	42a6      	cmp	r6, r4
 800eb88:	d105      	bne.n	800eb96 <__libc_init_array+0x2e>
 800eb8a:	bd70      	pop	{r4, r5, r6, pc}
 800eb8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb90:	4798      	blx	r3
 800eb92:	3601      	adds	r6, #1
 800eb94:	e7ee      	b.n	800eb74 <__libc_init_array+0xc>
 800eb96:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb9a:	4798      	blx	r3
 800eb9c:	3601      	adds	r6, #1
 800eb9e:	e7f2      	b.n	800eb86 <__libc_init_array+0x1e>
 800eba0:	08014730 	.word	0x08014730
 800eba4:	08014730 	.word	0x08014730
 800eba8:	08014730 	.word	0x08014730
 800ebac:	08014734 	.word	0x08014734

0800ebb0 <memcpy>:
 800ebb0:	440a      	add	r2, r1
 800ebb2:	4291      	cmp	r1, r2
 800ebb4:	f100 33ff 	add.w	r3, r0, #4294967295
 800ebb8:	d100      	bne.n	800ebbc <memcpy+0xc>
 800ebba:	4770      	bx	lr
 800ebbc:	b510      	push	{r4, lr}
 800ebbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ebc2:	4291      	cmp	r1, r2
 800ebc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ebc8:	d1f9      	bne.n	800ebbe <memcpy+0xe>
 800ebca:	bd10      	pop	{r4, pc}

0800ebcc <memset>:
 800ebcc:	4603      	mov	r3, r0
 800ebce:	4402      	add	r2, r0
 800ebd0:	4293      	cmp	r3, r2
 800ebd2:	d100      	bne.n	800ebd6 <memset+0xa>
 800ebd4:	4770      	bx	lr
 800ebd6:	f803 1b01 	strb.w	r1, [r3], #1
 800ebda:	e7f9      	b.n	800ebd0 <memset+0x4>

0800ebdc <__sfputc_r>:
 800ebdc:	6893      	ldr	r3, [r2, #8]
 800ebde:	b410      	push	{r4}
 800ebe0:	3b01      	subs	r3, #1
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	6093      	str	r3, [r2, #8]
 800ebe6:	da07      	bge.n	800ebf8 <__sfputc_r+0x1c>
 800ebe8:	6994      	ldr	r4, [r2, #24]
 800ebea:	42a3      	cmp	r3, r4
 800ebec:	db01      	blt.n	800ebf2 <__sfputc_r+0x16>
 800ebee:	290a      	cmp	r1, #10
 800ebf0:	d102      	bne.n	800ebf8 <__sfputc_r+0x1c>
 800ebf2:	bc10      	pop	{r4}
 800ebf4:	f000 be20 	b.w	800f838 <__swbuf_r>
 800ebf8:	6813      	ldr	r3, [r2, #0]
 800ebfa:	1c58      	adds	r0, r3, #1
 800ebfc:	6010      	str	r0, [r2, #0]
 800ebfe:	7019      	strb	r1, [r3, #0]
 800ec00:	4608      	mov	r0, r1
 800ec02:	bc10      	pop	{r4}
 800ec04:	4770      	bx	lr

0800ec06 <__sfputs_r>:
 800ec06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec08:	4606      	mov	r6, r0
 800ec0a:	460f      	mov	r7, r1
 800ec0c:	4614      	mov	r4, r2
 800ec0e:	18d5      	adds	r5, r2, r3
 800ec10:	42ac      	cmp	r4, r5
 800ec12:	d101      	bne.n	800ec18 <__sfputs_r+0x12>
 800ec14:	2000      	movs	r0, #0
 800ec16:	e007      	b.n	800ec28 <__sfputs_r+0x22>
 800ec18:	463a      	mov	r2, r7
 800ec1a:	4630      	mov	r0, r6
 800ec1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec20:	f7ff ffdc 	bl	800ebdc <__sfputc_r>
 800ec24:	1c43      	adds	r3, r0, #1
 800ec26:	d1f3      	bne.n	800ec10 <__sfputs_r+0xa>
 800ec28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ec2c <_vfiprintf_r>:
 800ec2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec30:	460d      	mov	r5, r1
 800ec32:	4614      	mov	r4, r2
 800ec34:	4698      	mov	r8, r3
 800ec36:	4606      	mov	r6, r0
 800ec38:	b09d      	sub	sp, #116	; 0x74
 800ec3a:	b118      	cbz	r0, 800ec44 <_vfiprintf_r+0x18>
 800ec3c:	6983      	ldr	r3, [r0, #24]
 800ec3e:	b90b      	cbnz	r3, 800ec44 <_vfiprintf_r+0x18>
 800ec40:	f001 fe56 	bl	80108f0 <__sinit>
 800ec44:	4b89      	ldr	r3, [pc, #548]	; (800ee6c <_vfiprintf_r+0x240>)
 800ec46:	429d      	cmp	r5, r3
 800ec48:	d11b      	bne.n	800ec82 <_vfiprintf_r+0x56>
 800ec4a:	6875      	ldr	r5, [r6, #4]
 800ec4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ec4e:	07d9      	lsls	r1, r3, #31
 800ec50:	d405      	bmi.n	800ec5e <_vfiprintf_r+0x32>
 800ec52:	89ab      	ldrh	r3, [r5, #12]
 800ec54:	059a      	lsls	r2, r3, #22
 800ec56:	d402      	bmi.n	800ec5e <_vfiprintf_r+0x32>
 800ec58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ec5a:	f001 feec 	bl	8010a36 <__retarget_lock_acquire_recursive>
 800ec5e:	89ab      	ldrh	r3, [r5, #12]
 800ec60:	071b      	lsls	r3, r3, #28
 800ec62:	d501      	bpl.n	800ec68 <_vfiprintf_r+0x3c>
 800ec64:	692b      	ldr	r3, [r5, #16]
 800ec66:	b9eb      	cbnz	r3, 800eca4 <_vfiprintf_r+0x78>
 800ec68:	4629      	mov	r1, r5
 800ec6a:	4630      	mov	r0, r6
 800ec6c:	f000 fe36 	bl	800f8dc <__swsetup_r>
 800ec70:	b1c0      	cbz	r0, 800eca4 <_vfiprintf_r+0x78>
 800ec72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ec74:	07dc      	lsls	r4, r3, #31
 800ec76:	d50e      	bpl.n	800ec96 <_vfiprintf_r+0x6a>
 800ec78:	f04f 30ff 	mov.w	r0, #4294967295
 800ec7c:	b01d      	add	sp, #116	; 0x74
 800ec7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec82:	4b7b      	ldr	r3, [pc, #492]	; (800ee70 <_vfiprintf_r+0x244>)
 800ec84:	429d      	cmp	r5, r3
 800ec86:	d101      	bne.n	800ec8c <_vfiprintf_r+0x60>
 800ec88:	68b5      	ldr	r5, [r6, #8]
 800ec8a:	e7df      	b.n	800ec4c <_vfiprintf_r+0x20>
 800ec8c:	4b79      	ldr	r3, [pc, #484]	; (800ee74 <_vfiprintf_r+0x248>)
 800ec8e:	429d      	cmp	r5, r3
 800ec90:	bf08      	it	eq
 800ec92:	68f5      	ldreq	r5, [r6, #12]
 800ec94:	e7da      	b.n	800ec4c <_vfiprintf_r+0x20>
 800ec96:	89ab      	ldrh	r3, [r5, #12]
 800ec98:	0598      	lsls	r0, r3, #22
 800ec9a:	d4ed      	bmi.n	800ec78 <_vfiprintf_r+0x4c>
 800ec9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ec9e:	f001 fecb 	bl	8010a38 <__retarget_lock_release_recursive>
 800eca2:	e7e9      	b.n	800ec78 <_vfiprintf_r+0x4c>
 800eca4:	2300      	movs	r3, #0
 800eca6:	9309      	str	r3, [sp, #36]	; 0x24
 800eca8:	2320      	movs	r3, #32
 800ecaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ecae:	2330      	movs	r3, #48	; 0x30
 800ecb0:	f04f 0901 	mov.w	r9, #1
 800ecb4:	f8cd 800c 	str.w	r8, [sp, #12]
 800ecb8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ee78 <_vfiprintf_r+0x24c>
 800ecbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ecc0:	4623      	mov	r3, r4
 800ecc2:	469a      	mov	sl, r3
 800ecc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ecc8:	b10a      	cbz	r2, 800ecce <_vfiprintf_r+0xa2>
 800ecca:	2a25      	cmp	r2, #37	; 0x25
 800eccc:	d1f9      	bne.n	800ecc2 <_vfiprintf_r+0x96>
 800ecce:	ebba 0b04 	subs.w	fp, sl, r4
 800ecd2:	d00b      	beq.n	800ecec <_vfiprintf_r+0xc0>
 800ecd4:	465b      	mov	r3, fp
 800ecd6:	4622      	mov	r2, r4
 800ecd8:	4629      	mov	r1, r5
 800ecda:	4630      	mov	r0, r6
 800ecdc:	f7ff ff93 	bl	800ec06 <__sfputs_r>
 800ece0:	3001      	adds	r0, #1
 800ece2:	f000 80aa 	beq.w	800ee3a <_vfiprintf_r+0x20e>
 800ece6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ece8:	445a      	add	r2, fp
 800ecea:	9209      	str	r2, [sp, #36]	; 0x24
 800ecec:	f89a 3000 	ldrb.w	r3, [sl]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	f000 80a2 	beq.w	800ee3a <_vfiprintf_r+0x20e>
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	f04f 32ff 	mov.w	r2, #4294967295
 800ecfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed00:	f10a 0a01 	add.w	sl, sl, #1
 800ed04:	9304      	str	r3, [sp, #16]
 800ed06:	9307      	str	r3, [sp, #28]
 800ed08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed0c:	931a      	str	r3, [sp, #104]	; 0x68
 800ed0e:	4654      	mov	r4, sl
 800ed10:	2205      	movs	r2, #5
 800ed12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed16:	4858      	ldr	r0, [pc, #352]	; (800ee78 <_vfiprintf_r+0x24c>)
 800ed18:	f001 fefc 	bl	8010b14 <memchr>
 800ed1c:	9a04      	ldr	r2, [sp, #16]
 800ed1e:	b9d8      	cbnz	r0, 800ed58 <_vfiprintf_r+0x12c>
 800ed20:	06d1      	lsls	r1, r2, #27
 800ed22:	bf44      	itt	mi
 800ed24:	2320      	movmi	r3, #32
 800ed26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed2a:	0713      	lsls	r3, r2, #28
 800ed2c:	bf44      	itt	mi
 800ed2e:	232b      	movmi	r3, #43	; 0x2b
 800ed30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed34:	f89a 3000 	ldrb.w	r3, [sl]
 800ed38:	2b2a      	cmp	r3, #42	; 0x2a
 800ed3a:	d015      	beq.n	800ed68 <_vfiprintf_r+0x13c>
 800ed3c:	4654      	mov	r4, sl
 800ed3e:	2000      	movs	r0, #0
 800ed40:	f04f 0c0a 	mov.w	ip, #10
 800ed44:	9a07      	ldr	r2, [sp, #28]
 800ed46:	4621      	mov	r1, r4
 800ed48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed4c:	3b30      	subs	r3, #48	; 0x30
 800ed4e:	2b09      	cmp	r3, #9
 800ed50:	d94e      	bls.n	800edf0 <_vfiprintf_r+0x1c4>
 800ed52:	b1b0      	cbz	r0, 800ed82 <_vfiprintf_r+0x156>
 800ed54:	9207      	str	r2, [sp, #28]
 800ed56:	e014      	b.n	800ed82 <_vfiprintf_r+0x156>
 800ed58:	eba0 0308 	sub.w	r3, r0, r8
 800ed5c:	fa09 f303 	lsl.w	r3, r9, r3
 800ed60:	4313      	orrs	r3, r2
 800ed62:	46a2      	mov	sl, r4
 800ed64:	9304      	str	r3, [sp, #16]
 800ed66:	e7d2      	b.n	800ed0e <_vfiprintf_r+0xe2>
 800ed68:	9b03      	ldr	r3, [sp, #12]
 800ed6a:	1d19      	adds	r1, r3, #4
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	9103      	str	r1, [sp, #12]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	bfbb      	ittet	lt
 800ed74:	425b      	neglt	r3, r3
 800ed76:	f042 0202 	orrlt.w	r2, r2, #2
 800ed7a:	9307      	strge	r3, [sp, #28]
 800ed7c:	9307      	strlt	r3, [sp, #28]
 800ed7e:	bfb8      	it	lt
 800ed80:	9204      	strlt	r2, [sp, #16]
 800ed82:	7823      	ldrb	r3, [r4, #0]
 800ed84:	2b2e      	cmp	r3, #46	; 0x2e
 800ed86:	d10c      	bne.n	800eda2 <_vfiprintf_r+0x176>
 800ed88:	7863      	ldrb	r3, [r4, #1]
 800ed8a:	2b2a      	cmp	r3, #42	; 0x2a
 800ed8c:	d135      	bne.n	800edfa <_vfiprintf_r+0x1ce>
 800ed8e:	9b03      	ldr	r3, [sp, #12]
 800ed90:	3402      	adds	r4, #2
 800ed92:	1d1a      	adds	r2, r3, #4
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	9203      	str	r2, [sp, #12]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	bfb8      	it	lt
 800ed9c:	f04f 33ff 	movlt.w	r3, #4294967295
 800eda0:	9305      	str	r3, [sp, #20]
 800eda2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ee88 <_vfiprintf_r+0x25c>
 800eda6:	2203      	movs	r2, #3
 800eda8:	4650      	mov	r0, sl
 800edaa:	7821      	ldrb	r1, [r4, #0]
 800edac:	f001 feb2 	bl	8010b14 <memchr>
 800edb0:	b140      	cbz	r0, 800edc4 <_vfiprintf_r+0x198>
 800edb2:	2340      	movs	r3, #64	; 0x40
 800edb4:	eba0 000a 	sub.w	r0, r0, sl
 800edb8:	fa03 f000 	lsl.w	r0, r3, r0
 800edbc:	9b04      	ldr	r3, [sp, #16]
 800edbe:	3401      	adds	r4, #1
 800edc0:	4303      	orrs	r3, r0
 800edc2:	9304      	str	r3, [sp, #16]
 800edc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edc8:	2206      	movs	r2, #6
 800edca:	482c      	ldr	r0, [pc, #176]	; (800ee7c <_vfiprintf_r+0x250>)
 800edcc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800edd0:	f001 fea0 	bl	8010b14 <memchr>
 800edd4:	2800      	cmp	r0, #0
 800edd6:	d03f      	beq.n	800ee58 <_vfiprintf_r+0x22c>
 800edd8:	4b29      	ldr	r3, [pc, #164]	; (800ee80 <_vfiprintf_r+0x254>)
 800edda:	bb1b      	cbnz	r3, 800ee24 <_vfiprintf_r+0x1f8>
 800eddc:	9b03      	ldr	r3, [sp, #12]
 800edde:	3307      	adds	r3, #7
 800ede0:	f023 0307 	bic.w	r3, r3, #7
 800ede4:	3308      	adds	r3, #8
 800ede6:	9303      	str	r3, [sp, #12]
 800ede8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edea:	443b      	add	r3, r7
 800edec:	9309      	str	r3, [sp, #36]	; 0x24
 800edee:	e767      	b.n	800ecc0 <_vfiprintf_r+0x94>
 800edf0:	460c      	mov	r4, r1
 800edf2:	2001      	movs	r0, #1
 800edf4:	fb0c 3202 	mla	r2, ip, r2, r3
 800edf8:	e7a5      	b.n	800ed46 <_vfiprintf_r+0x11a>
 800edfa:	2300      	movs	r3, #0
 800edfc:	f04f 0c0a 	mov.w	ip, #10
 800ee00:	4619      	mov	r1, r3
 800ee02:	3401      	adds	r4, #1
 800ee04:	9305      	str	r3, [sp, #20]
 800ee06:	4620      	mov	r0, r4
 800ee08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee0c:	3a30      	subs	r2, #48	; 0x30
 800ee0e:	2a09      	cmp	r2, #9
 800ee10:	d903      	bls.n	800ee1a <_vfiprintf_r+0x1ee>
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d0c5      	beq.n	800eda2 <_vfiprintf_r+0x176>
 800ee16:	9105      	str	r1, [sp, #20]
 800ee18:	e7c3      	b.n	800eda2 <_vfiprintf_r+0x176>
 800ee1a:	4604      	mov	r4, r0
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee22:	e7f0      	b.n	800ee06 <_vfiprintf_r+0x1da>
 800ee24:	ab03      	add	r3, sp, #12
 800ee26:	9300      	str	r3, [sp, #0]
 800ee28:	462a      	mov	r2, r5
 800ee2a:	4630      	mov	r0, r6
 800ee2c:	4b15      	ldr	r3, [pc, #84]	; (800ee84 <_vfiprintf_r+0x258>)
 800ee2e:	a904      	add	r1, sp, #16
 800ee30:	f000 f8ca 	bl	800efc8 <_printf_float>
 800ee34:	4607      	mov	r7, r0
 800ee36:	1c78      	adds	r0, r7, #1
 800ee38:	d1d6      	bne.n	800ede8 <_vfiprintf_r+0x1bc>
 800ee3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee3c:	07d9      	lsls	r1, r3, #31
 800ee3e:	d405      	bmi.n	800ee4c <_vfiprintf_r+0x220>
 800ee40:	89ab      	ldrh	r3, [r5, #12]
 800ee42:	059a      	lsls	r2, r3, #22
 800ee44:	d402      	bmi.n	800ee4c <_vfiprintf_r+0x220>
 800ee46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee48:	f001 fdf6 	bl	8010a38 <__retarget_lock_release_recursive>
 800ee4c:	89ab      	ldrh	r3, [r5, #12]
 800ee4e:	065b      	lsls	r3, r3, #25
 800ee50:	f53f af12 	bmi.w	800ec78 <_vfiprintf_r+0x4c>
 800ee54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ee56:	e711      	b.n	800ec7c <_vfiprintf_r+0x50>
 800ee58:	ab03      	add	r3, sp, #12
 800ee5a:	9300      	str	r3, [sp, #0]
 800ee5c:	462a      	mov	r2, r5
 800ee5e:	4630      	mov	r0, r6
 800ee60:	4b08      	ldr	r3, [pc, #32]	; (800ee84 <_vfiprintf_r+0x258>)
 800ee62:	a904      	add	r1, sp, #16
 800ee64:	f000 fb4c 	bl	800f500 <_printf_i>
 800ee68:	e7e4      	b.n	800ee34 <_vfiprintf_r+0x208>
 800ee6a:	bf00      	nop
 800ee6c:	08014440 	.word	0x08014440
 800ee70:	08014460 	.word	0x08014460
 800ee74:	08014420 	.word	0x08014420
 800ee78:	08014344 	.word	0x08014344
 800ee7c:	0801434e 	.word	0x0801434e
 800ee80:	0800efc9 	.word	0x0800efc9
 800ee84:	0800ec07 	.word	0x0800ec07
 800ee88:	0801434a 	.word	0x0801434a

0800ee8c <__cvt>:
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee92:	461f      	mov	r7, r3
 800ee94:	bfbb      	ittet	lt
 800ee96:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800ee9a:	461f      	movlt	r7, r3
 800ee9c:	2300      	movge	r3, #0
 800ee9e:	232d      	movlt	r3, #45	; 0x2d
 800eea0:	b088      	sub	sp, #32
 800eea2:	4614      	mov	r4, r2
 800eea4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800eea6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800eea8:	7013      	strb	r3, [r2, #0]
 800eeaa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eeac:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800eeb0:	f023 0820 	bic.w	r8, r3, #32
 800eeb4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800eeb8:	d005      	beq.n	800eec6 <__cvt+0x3a>
 800eeba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800eebe:	d100      	bne.n	800eec2 <__cvt+0x36>
 800eec0:	3501      	adds	r5, #1
 800eec2:	2302      	movs	r3, #2
 800eec4:	e000      	b.n	800eec8 <__cvt+0x3c>
 800eec6:	2303      	movs	r3, #3
 800eec8:	aa07      	add	r2, sp, #28
 800eeca:	9204      	str	r2, [sp, #16]
 800eecc:	aa06      	add	r2, sp, #24
 800eece:	e9cd a202 	strd	sl, r2, [sp, #8]
 800eed2:	e9cd 3500 	strd	r3, r5, [sp]
 800eed6:	4622      	mov	r2, r4
 800eed8:	463b      	mov	r3, r7
 800eeda:	f000 fe01 	bl	800fae0 <_dtoa_r>
 800eede:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800eee2:	4606      	mov	r6, r0
 800eee4:	d102      	bne.n	800eeec <__cvt+0x60>
 800eee6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eee8:	07db      	lsls	r3, r3, #31
 800eeea:	d522      	bpl.n	800ef32 <__cvt+0xa6>
 800eeec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800eef0:	eb06 0905 	add.w	r9, r6, r5
 800eef4:	d110      	bne.n	800ef18 <__cvt+0x8c>
 800eef6:	7833      	ldrb	r3, [r6, #0]
 800eef8:	2b30      	cmp	r3, #48	; 0x30
 800eefa:	d10a      	bne.n	800ef12 <__cvt+0x86>
 800eefc:	2200      	movs	r2, #0
 800eefe:	2300      	movs	r3, #0
 800ef00:	4620      	mov	r0, r4
 800ef02:	4639      	mov	r1, r7
 800ef04:	f7f1 fdca 	bl	8000a9c <__aeabi_dcmpeq>
 800ef08:	b918      	cbnz	r0, 800ef12 <__cvt+0x86>
 800ef0a:	f1c5 0501 	rsb	r5, r5, #1
 800ef0e:	f8ca 5000 	str.w	r5, [sl]
 800ef12:	f8da 3000 	ldr.w	r3, [sl]
 800ef16:	4499      	add	r9, r3
 800ef18:	2200      	movs	r2, #0
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	4620      	mov	r0, r4
 800ef1e:	4639      	mov	r1, r7
 800ef20:	f7f1 fdbc 	bl	8000a9c <__aeabi_dcmpeq>
 800ef24:	b108      	cbz	r0, 800ef2a <__cvt+0x9e>
 800ef26:	f8cd 901c 	str.w	r9, [sp, #28]
 800ef2a:	2230      	movs	r2, #48	; 0x30
 800ef2c:	9b07      	ldr	r3, [sp, #28]
 800ef2e:	454b      	cmp	r3, r9
 800ef30:	d307      	bcc.n	800ef42 <__cvt+0xb6>
 800ef32:	4630      	mov	r0, r6
 800ef34:	9b07      	ldr	r3, [sp, #28]
 800ef36:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ef38:	1b9b      	subs	r3, r3, r6
 800ef3a:	6013      	str	r3, [r2, #0]
 800ef3c:	b008      	add	sp, #32
 800ef3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef42:	1c59      	adds	r1, r3, #1
 800ef44:	9107      	str	r1, [sp, #28]
 800ef46:	701a      	strb	r2, [r3, #0]
 800ef48:	e7f0      	b.n	800ef2c <__cvt+0xa0>

0800ef4a <__exponent>:
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef4e:	2900      	cmp	r1, #0
 800ef50:	f803 2b02 	strb.w	r2, [r3], #2
 800ef54:	bfb6      	itet	lt
 800ef56:	222d      	movlt	r2, #45	; 0x2d
 800ef58:	222b      	movge	r2, #43	; 0x2b
 800ef5a:	4249      	neglt	r1, r1
 800ef5c:	2909      	cmp	r1, #9
 800ef5e:	7042      	strb	r2, [r0, #1]
 800ef60:	dd2b      	ble.n	800efba <__exponent+0x70>
 800ef62:	f10d 0407 	add.w	r4, sp, #7
 800ef66:	46a4      	mov	ip, r4
 800ef68:	270a      	movs	r7, #10
 800ef6a:	fb91 f6f7 	sdiv	r6, r1, r7
 800ef6e:	460a      	mov	r2, r1
 800ef70:	46a6      	mov	lr, r4
 800ef72:	fb07 1516 	mls	r5, r7, r6, r1
 800ef76:	2a63      	cmp	r2, #99	; 0x63
 800ef78:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800ef7c:	4631      	mov	r1, r6
 800ef7e:	f104 34ff 	add.w	r4, r4, #4294967295
 800ef82:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ef86:	dcf0      	bgt.n	800ef6a <__exponent+0x20>
 800ef88:	3130      	adds	r1, #48	; 0x30
 800ef8a:	f1ae 0502 	sub.w	r5, lr, #2
 800ef8e:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ef92:	4629      	mov	r1, r5
 800ef94:	1c44      	adds	r4, r0, #1
 800ef96:	4561      	cmp	r1, ip
 800ef98:	d30a      	bcc.n	800efb0 <__exponent+0x66>
 800ef9a:	f10d 0209 	add.w	r2, sp, #9
 800ef9e:	eba2 020e 	sub.w	r2, r2, lr
 800efa2:	4565      	cmp	r5, ip
 800efa4:	bf88      	it	hi
 800efa6:	2200      	movhi	r2, #0
 800efa8:	4413      	add	r3, r2
 800efaa:	1a18      	subs	r0, r3, r0
 800efac:	b003      	add	sp, #12
 800efae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efb0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800efb4:	f804 2f01 	strb.w	r2, [r4, #1]!
 800efb8:	e7ed      	b.n	800ef96 <__exponent+0x4c>
 800efba:	2330      	movs	r3, #48	; 0x30
 800efbc:	3130      	adds	r1, #48	; 0x30
 800efbe:	7083      	strb	r3, [r0, #2]
 800efc0:	70c1      	strb	r1, [r0, #3]
 800efc2:	1d03      	adds	r3, r0, #4
 800efc4:	e7f1      	b.n	800efaa <__exponent+0x60>
	...

0800efc8 <_printf_float>:
 800efc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efcc:	b091      	sub	sp, #68	; 0x44
 800efce:	460c      	mov	r4, r1
 800efd0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800efd4:	4616      	mov	r6, r2
 800efd6:	461f      	mov	r7, r3
 800efd8:	4605      	mov	r5, r0
 800efda:	f001 fd27 	bl	8010a2c <_localeconv_r>
 800efde:	6803      	ldr	r3, [r0, #0]
 800efe0:	4618      	mov	r0, r3
 800efe2:	9309      	str	r3, [sp, #36]	; 0x24
 800efe4:	f7f1 f92e 	bl	8000244 <strlen>
 800efe8:	2300      	movs	r3, #0
 800efea:	930e      	str	r3, [sp, #56]	; 0x38
 800efec:	f8d8 3000 	ldr.w	r3, [r8]
 800eff0:	900a      	str	r0, [sp, #40]	; 0x28
 800eff2:	3307      	adds	r3, #7
 800eff4:	f023 0307 	bic.w	r3, r3, #7
 800eff8:	f103 0208 	add.w	r2, r3, #8
 800effc:	f894 9018 	ldrb.w	r9, [r4, #24]
 800f000:	f8d4 b000 	ldr.w	fp, [r4]
 800f004:	f8c8 2000 	str.w	r2, [r8]
 800f008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f00c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f010:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800f014:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800f018:	930b      	str	r3, [sp, #44]	; 0x2c
 800f01a:	f04f 32ff 	mov.w	r2, #4294967295
 800f01e:	4640      	mov	r0, r8
 800f020:	4b9c      	ldr	r3, [pc, #624]	; (800f294 <_printf_float+0x2cc>)
 800f022:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f024:	f7f1 fd6c 	bl	8000b00 <__aeabi_dcmpun>
 800f028:	bb70      	cbnz	r0, 800f088 <_printf_float+0xc0>
 800f02a:	f04f 32ff 	mov.w	r2, #4294967295
 800f02e:	4640      	mov	r0, r8
 800f030:	4b98      	ldr	r3, [pc, #608]	; (800f294 <_printf_float+0x2cc>)
 800f032:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f034:	f7f1 fd46 	bl	8000ac4 <__aeabi_dcmple>
 800f038:	bb30      	cbnz	r0, 800f088 <_printf_float+0xc0>
 800f03a:	2200      	movs	r2, #0
 800f03c:	2300      	movs	r3, #0
 800f03e:	4640      	mov	r0, r8
 800f040:	4651      	mov	r1, sl
 800f042:	f7f1 fd35 	bl	8000ab0 <__aeabi_dcmplt>
 800f046:	b110      	cbz	r0, 800f04e <_printf_float+0x86>
 800f048:	232d      	movs	r3, #45	; 0x2d
 800f04a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f04e:	4b92      	ldr	r3, [pc, #584]	; (800f298 <_printf_float+0x2d0>)
 800f050:	4892      	ldr	r0, [pc, #584]	; (800f29c <_printf_float+0x2d4>)
 800f052:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800f056:	bf94      	ite	ls
 800f058:	4698      	movls	r8, r3
 800f05a:	4680      	movhi	r8, r0
 800f05c:	2303      	movs	r3, #3
 800f05e:	f04f 0a00 	mov.w	sl, #0
 800f062:	6123      	str	r3, [r4, #16]
 800f064:	f02b 0304 	bic.w	r3, fp, #4
 800f068:	6023      	str	r3, [r4, #0]
 800f06a:	4633      	mov	r3, r6
 800f06c:	4621      	mov	r1, r4
 800f06e:	4628      	mov	r0, r5
 800f070:	9700      	str	r7, [sp, #0]
 800f072:	aa0f      	add	r2, sp, #60	; 0x3c
 800f074:	f000 f9d4 	bl	800f420 <_printf_common>
 800f078:	3001      	adds	r0, #1
 800f07a:	f040 8090 	bne.w	800f19e <_printf_float+0x1d6>
 800f07e:	f04f 30ff 	mov.w	r0, #4294967295
 800f082:	b011      	add	sp, #68	; 0x44
 800f084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f088:	4642      	mov	r2, r8
 800f08a:	4653      	mov	r3, sl
 800f08c:	4640      	mov	r0, r8
 800f08e:	4651      	mov	r1, sl
 800f090:	f7f1 fd36 	bl	8000b00 <__aeabi_dcmpun>
 800f094:	b148      	cbz	r0, 800f0aa <_printf_float+0xe2>
 800f096:	f1ba 0f00 	cmp.w	sl, #0
 800f09a:	bfb8      	it	lt
 800f09c:	232d      	movlt	r3, #45	; 0x2d
 800f09e:	4880      	ldr	r0, [pc, #512]	; (800f2a0 <_printf_float+0x2d8>)
 800f0a0:	bfb8      	it	lt
 800f0a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f0a6:	4b7f      	ldr	r3, [pc, #508]	; (800f2a4 <_printf_float+0x2dc>)
 800f0a8:	e7d3      	b.n	800f052 <_printf_float+0x8a>
 800f0aa:	6863      	ldr	r3, [r4, #4]
 800f0ac:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800f0b0:	1c5a      	adds	r2, r3, #1
 800f0b2:	d142      	bne.n	800f13a <_printf_float+0x172>
 800f0b4:	2306      	movs	r3, #6
 800f0b6:	6063      	str	r3, [r4, #4]
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	9206      	str	r2, [sp, #24]
 800f0bc:	aa0e      	add	r2, sp, #56	; 0x38
 800f0be:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800f0c2:	aa0d      	add	r2, sp, #52	; 0x34
 800f0c4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800f0c8:	9203      	str	r2, [sp, #12]
 800f0ca:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800f0ce:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f0d2:	6023      	str	r3, [r4, #0]
 800f0d4:	6863      	ldr	r3, [r4, #4]
 800f0d6:	4642      	mov	r2, r8
 800f0d8:	9300      	str	r3, [sp, #0]
 800f0da:	4628      	mov	r0, r5
 800f0dc:	4653      	mov	r3, sl
 800f0de:	910b      	str	r1, [sp, #44]	; 0x2c
 800f0e0:	f7ff fed4 	bl	800ee8c <__cvt>
 800f0e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f0e6:	4680      	mov	r8, r0
 800f0e8:	2947      	cmp	r1, #71	; 0x47
 800f0ea:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f0ec:	d108      	bne.n	800f100 <_printf_float+0x138>
 800f0ee:	1cc8      	adds	r0, r1, #3
 800f0f0:	db02      	blt.n	800f0f8 <_printf_float+0x130>
 800f0f2:	6863      	ldr	r3, [r4, #4]
 800f0f4:	4299      	cmp	r1, r3
 800f0f6:	dd40      	ble.n	800f17a <_printf_float+0x1b2>
 800f0f8:	f1a9 0902 	sub.w	r9, r9, #2
 800f0fc:	fa5f f989 	uxtb.w	r9, r9
 800f100:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800f104:	d81f      	bhi.n	800f146 <_printf_float+0x17e>
 800f106:	464a      	mov	r2, r9
 800f108:	3901      	subs	r1, #1
 800f10a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f10e:	910d      	str	r1, [sp, #52]	; 0x34
 800f110:	f7ff ff1b 	bl	800ef4a <__exponent>
 800f114:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f116:	4682      	mov	sl, r0
 800f118:	1813      	adds	r3, r2, r0
 800f11a:	2a01      	cmp	r2, #1
 800f11c:	6123      	str	r3, [r4, #16]
 800f11e:	dc02      	bgt.n	800f126 <_printf_float+0x15e>
 800f120:	6822      	ldr	r2, [r4, #0]
 800f122:	07d2      	lsls	r2, r2, #31
 800f124:	d501      	bpl.n	800f12a <_printf_float+0x162>
 800f126:	3301      	adds	r3, #1
 800f128:	6123      	str	r3, [r4, #16]
 800f12a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d09b      	beq.n	800f06a <_printf_float+0xa2>
 800f132:	232d      	movs	r3, #45	; 0x2d
 800f134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f138:	e797      	b.n	800f06a <_printf_float+0xa2>
 800f13a:	2947      	cmp	r1, #71	; 0x47
 800f13c:	d1bc      	bne.n	800f0b8 <_printf_float+0xf0>
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d1ba      	bne.n	800f0b8 <_printf_float+0xf0>
 800f142:	2301      	movs	r3, #1
 800f144:	e7b7      	b.n	800f0b6 <_printf_float+0xee>
 800f146:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800f14a:	d118      	bne.n	800f17e <_printf_float+0x1b6>
 800f14c:	2900      	cmp	r1, #0
 800f14e:	6863      	ldr	r3, [r4, #4]
 800f150:	dd0b      	ble.n	800f16a <_printf_float+0x1a2>
 800f152:	6121      	str	r1, [r4, #16]
 800f154:	b913      	cbnz	r3, 800f15c <_printf_float+0x194>
 800f156:	6822      	ldr	r2, [r4, #0]
 800f158:	07d0      	lsls	r0, r2, #31
 800f15a:	d502      	bpl.n	800f162 <_printf_float+0x19a>
 800f15c:	3301      	adds	r3, #1
 800f15e:	440b      	add	r3, r1
 800f160:	6123      	str	r3, [r4, #16]
 800f162:	f04f 0a00 	mov.w	sl, #0
 800f166:	65a1      	str	r1, [r4, #88]	; 0x58
 800f168:	e7df      	b.n	800f12a <_printf_float+0x162>
 800f16a:	b913      	cbnz	r3, 800f172 <_printf_float+0x1aa>
 800f16c:	6822      	ldr	r2, [r4, #0]
 800f16e:	07d2      	lsls	r2, r2, #31
 800f170:	d501      	bpl.n	800f176 <_printf_float+0x1ae>
 800f172:	3302      	adds	r3, #2
 800f174:	e7f4      	b.n	800f160 <_printf_float+0x198>
 800f176:	2301      	movs	r3, #1
 800f178:	e7f2      	b.n	800f160 <_printf_float+0x198>
 800f17a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800f17e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f180:	4299      	cmp	r1, r3
 800f182:	db05      	blt.n	800f190 <_printf_float+0x1c8>
 800f184:	6823      	ldr	r3, [r4, #0]
 800f186:	6121      	str	r1, [r4, #16]
 800f188:	07d8      	lsls	r0, r3, #31
 800f18a:	d5ea      	bpl.n	800f162 <_printf_float+0x19a>
 800f18c:	1c4b      	adds	r3, r1, #1
 800f18e:	e7e7      	b.n	800f160 <_printf_float+0x198>
 800f190:	2900      	cmp	r1, #0
 800f192:	bfcc      	ite	gt
 800f194:	2201      	movgt	r2, #1
 800f196:	f1c1 0202 	rsble	r2, r1, #2
 800f19a:	4413      	add	r3, r2
 800f19c:	e7e0      	b.n	800f160 <_printf_float+0x198>
 800f19e:	6823      	ldr	r3, [r4, #0]
 800f1a0:	055a      	lsls	r2, r3, #21
 800f1a2:	d407      	bmi.n	800f1b4 <_printf_float+0x1ec>
 800f1a4:	6923      	ldr	r3, [r4, #16]
 800f1a6:	4642      	mov	r2, r8
 800f1a8:	4631      	mov	r1, r6
 800f1aa:	4628      	mov	r0, r5
 800f1ac:	47b8      	blx	r7
 800f1ae:	3001      	adds	r0, #1
 800f1b0:	d12b      	bne.n	800f20a <_printf_float+0x242>
 800f1b2:	e764      	b.n	800f07e <_printf_float+0xb6>
 800f1b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800f1b8:	f240 80dd 	bls.w	800f376 <_printf_float+0x3ae>
 800f1bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	f7f1 fc6a 	bl	8000a9c <__aeabi_dcmpeq>
 800f1c8:	2800      	cmp	r0, #0
 800f1ca:	d033      	beq.n	800f234 <_printf_float+0x26c>
 800f1cc:	2301      	movs	r3, #1
 800f1ce:	4631      	mov	r1, r6
 800f1d0:	4628      	mov	r0, r5
 800f1d2:	4a35      	ldr	r2, [pc, #212]	; (800f2a8 <_printf_float+0x2e0>)
 800f1d4:	47b8      	blx	r7
 800f1d6:	3001      	adds	r0, #1
 800f1d8:	f43f af51 	beq.w	800f07e <_printf_float+0xb6>
 800f1dc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800f1e0:	429a      	cmp	r2, r3
 800f1e2:	db02      	blt.n	800f1ea <_printf_float+0x222>
 800f1e4:	6823      	ldr	r3, [r4, #0]
 800f1e6:	07d8      	lsls	r0, r3, #31
 800f1e8:	d50f      	bpl.n	800f20a <_printf_float+0x242>
 800f1ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f1ee:	4631      	mov	r1, r6
 800f1f0:	4628      	mov	r0, r5
 800f1f2:	47b8      	blx	r7
 800f1f4:	3001      	adds	r0, #1
 800f1f6:	f43f af42 	beq.w	800f07e <_printf_float+0xb6>
 800f1fa:	f04f 0800 	mov.w	r8, #0
 800f1fe:	f104 091a 	add.w	r9, r4, #26
 800f202:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f204:	3b01      	subs	r3, #1
 800f206:	4543      	cmp	r3, r8
 800f208:	dc09      	bgt.n	800f21e <_printf_float+0x256>
 800f20a:	6823      	ldr	r3, [r4, #0]
 800f20c:	079b      	lsls	r3, r3, #30
 800f20e:	f100 8102 	bmi.w	800f416 <_printf_float+0x44e>
 800f212:	68e0      	ldr	r0, [r4, #12]
 800f214:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f216:	4298      	cmp	r0, r3
 800f218:	bfb8      	it	lt
 800f21a:	4618      	movlt	r0, r3
 800f21c:	e731      	b.n	800f082 <_printf_float+0xba>
 800f21e:	2301      	movs	r3, #1
 800f220:	464a      	mov	r2, r9
 800f222:	4631      	mov	r1, r6
 800f224:	4628      	mov	r0, r5
 800f226:	47b8      	blx	r7
 800f228:	3001      	adds	r0, #1
 800f22a:	f43f af28 	beq.w	800f07e <_printf_float+0xb6>
 800f22e:	f108 0801 	add.w	r8, r8, #1
 800f232:	e7e6      	b.n	800f202 <_printf_float+0x23a>
 800f234:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f236:	2b00      	cmp	r3, #0
 800f238:	dc38      	bgt.n	800f2ac <_printf_float+0x2e4>
 800f23a:	2301      	movs	r3, #1
 800f23c:	4631      	mov	r1, r6
 800f23e:	4628      	mov	r0, r5
 800f240:	4a19      	ldr	r2, [pc, #100]	; (800f2a8 <_printf_float+0x2e0>)
 800f242:	47b8      	blx	r7
 800f244:	3001      	adds	r0, #1
 800f246:	f43f af1a 	beq.w	800f07e <_printf_float+0xb6>
 800f24a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800f24e:	4313      	orrs	r3, r2
 800f250:	d102      	bne.n	800f258 <_printf_float+0x290>
 800f252:	6823      	ldr	r3, [r4, #0]
 800f254:	07d9      	lsls	r1, r3, #31
 800f256:	d5d8      	bpl.n	800f20a <_printf_float+0x242>
 800f258:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f25c:	4631      	mov	r1, r6
 800f25e:	4628      	mov	r0, r5
 800f260:	47b8      	blx	r7
 800f262:	3001      	adds	r0, #1
 800f264:	f43f af0b 	beq.w	800f07e <_printf_float+0xb6>
 800f268:	f04f 0900 	mov.w	r9, #0
 800f26c:	f104 0a1a 	add.w	sl, r4, #26
 800f270:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f272:	425b      	negs	r3, r3
 800f274:	454b      	cmp	r3, r9
 800f276:	dc01      	bgt.n	800f27c <_printf_float+0x2b4>
 800f278:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f27a:	e794      	b.n	800f1a6 <_printf_float+0x1de>
 800f27c:	2301      	movs	r3, #1
 800f27e:	4652      	mov	r2, sl
 800f280:	4631      	mov	r1, r6
 800f282:	4628      	mov	r0, r5
 800f284:	47b8      	blx	r7
 800f286:	3001      	adds	r0, #1
 800f288:	f43f aef9 	beq.w	800f07e <_printf_float+0xb6>
 800f28c:	f109 0901 	add.w	r9, r9, #1
 800f290:	e7ee      	b.n	800f270 <_printf_float+0x2a8>
 800f292:	bf00      	nop
 800f294:	7fefffff 	.word	0x7fefffff
 800f298:	08014355 	.word	0x08014355
 800f29c:	08014359 	.word	0x08014359
 800f2a0:	08014361 	.word	0x08014361
 800f2a4:	0801435d 	.word	0x0801435d
 800f2a8:	08014365 	.word	0x08014365
 800f2ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f2ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f2b0:	429a      	cmp	r2, r3
 800f2b2:	bfa8      	it	ge
 800f2b4:	461a      	movge	r2, r3
 800f2b6:	2a00      	cmp	r2, #0
 800f2b8:	4691      	mov	r9, r2
 800f2ba:	dc37      	bgt.n	800f32c <_printf_float+0x364>
 800f2bc:	f04f 0b00 	mov.w	fp, #0
 800f2c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f2c4:	f104 021a 	add.w	r2, r4, #26
 800f2c8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800f2cc:	ebaa 0309 	sub.w	r3, sl, r9
 800f2d0:	455b      	cmp	r3, fp
 800f2d2:	dc33      	bgt.n	800f33c <_printf_float+0x374>
 800f2d4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	db3b      	blt.n	800f354 <_printf_float+0x38c>
 800f2dc:	6823      	ldr	r3, [r4, #0]
 800f2de:	07da      	lsls	r2, r3, #31
 800f2e0:	d438      	bmi.n	800f354 <_printf_float+0x38c>
 800f2e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f2e4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f2e6:	eba2 030a 	sub.w	r3, r2, sl
 800f2ea:	eba2 0901 	sub.w	r9, r2, r1
 800f2ee:	4599      	cmp	r9, r3
 800f2f0:	bfa8      	it	ge
 800f2f2:	4699      	movge	r9, r3
 800f2f4:	f1b9 0f00 	cmp.w	r9, #0
 800f2f8:	dc34      	bgt.n	800f364 <_printf_float+0x39c>
 800f2fa:	f04f 0800 	mov.w	r8, #0
 800f2fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f302:	f104 0a1a 	add.w	sl, r4, #26
 800f306:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800f30a:	1a9b      	subs	r3, r3, r2
 800f30c:	eba3 0309 	sub.w	r3, r3, r9
 800f310:	4543      	cmp	r3, r8
 800f312:	f77f af7a 	ble.w	800f20a <_printf_float+0x242>
 800f316:	2301      	movs	r3, #1
 800f318:	4652      	mov	r2, sl
 800f31a:	4631      	mov	r1, r6
 800f31c:	4628      	mov	r0, r5
 800f31e:	47b8      	blx	r7
 800f320:	3001      	adds	r0, #1
 800f322:	f43f aeac 	beq.w	800f07e <_printf_float+0xb6>
 800f326:	f108 0801 	add.w	r8, r8, #1
 800f32a:	e7ec      	b.n	800f306 <_printf_float+0x33e>
 800f32c:	4613      	mov	r3, r2
 800f32e:	4631      	mov	r1, r6
 800f330:	4642      	mov	r2, r8
 800f332:	4628      	mov	r0, r5
 800f334:	47b8      	blx	r7
 800f336:	3001      	adds	r0, #1
 800f338:	d1c0      	bne.n	800f2bc <_printf_float+0x2f4>
 800f33a:	e6a0      	b.n	800f07e <_printf_float+0xb6>
 800f33c:	2301      	movs	r3, #1
 800f33e:	4631      	mov	r1, r6
 800f340:	4628      	mov	r0, r5
 800f342:	920b      	str	r2, [sp, #44]	; 0x2c
 800f344:	47b8      	blx	r7
 800f346:	3001      	adds	r0, #1
 800f348:	f43f ae99 	beq.w	800f07e <_printf_float+0xb6>
 800f34c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f34e:	f10b 0b01 	add.w	fp, fp, #1
 800f352:	e7b9      	b.n	800f2c8 <_printf_float+0x300>
 800f354:	4631      	mov	r1, r6
 800f356:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f35a:	4628      	mov	r0, r5
 800f35c:	47b8      	blx	r7
 800f35e:	3001      	adds	r0, #1
 800f360:	d1bf      	bne.n	800f2e2 <_printf_float+0x31a>
 800f362:	e68c      	b.n	800f07e <_printf_float+0xb6>
 800f364:	464b      	mov	r3, r9
 800f366:	4631      	mov	r1, r6
 800f368:	4628      	mov	r0, r5
 800f36a:	eb08 020a 	add.w	r2, r8, sl
 800f36e:	47b8      	blx	r7
 800f370:	3001      	adds	r0, #1
 800f372:	d1c2      	bne.n	800f2fa <_printf_float+0x332>
 800f374:	e683      	b.n	800f07e <_printf_float+0xb6>
 800f376:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f378:	2a01      	cmp	r2, #1
 800f37a:	dc01      	bgt.n	800f380 <_printf_float+0x3b8>
 800f37c:	07db      	lsls	r3, r3, #31
 800f37e:	d537      	bpl.n	800f3f0 <_printf_float+0x428>
 800f380:	2301      	movs	r3, #1
 800f382:	4642      	mov	r2, r8
 800f384:	4631      	mov	r1, r6
 800f386:	4628      	mov	r0, r5
 800f388:	47b8      	blx	r7
 800f38a:	3001      	adds	r0, #1
 800f38c:	f43f ae77 	beq.w	800f07e <_printf_float+0xb6>
 800f390:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f394:	4631      	mov	r1, r6
 800f396:	4628      	mov	r0, r5
 800f398:	47b8      	blx	r7
 800f39a:	3001      	adds	r0, #1
 800f39c:	f43f ae6f 	beq.w	800f07e <_printf_float+0xb6>
 800f3a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	f7f1 fb78 	bl	8000a9c <__aeabi_dcmpeq>
 800f3ac:	b9d8      	cbnz	r0, 800f3e6 <_printf_float+0x41e>
 800f3ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f3b0:	f108 0201 	add.w	r2, r8, #1
 800f3b4:	3b01      	subs	r3, #1
 800f3b6:	4631      	mov	r1, r6
 800f3b8:	4628      	mov	r0, r5
 800f3ba:	47b8      	blx	r7
 800f3bc:	3001      	adds	r0, #1
 800f3be:	d10e      	bne.n	800f3de <_printf_float+0x416>
 800f3c0:	e65d      	b.n	800f07e <_printf_float+0xb6>
 800f3c2:	2301      	movs	r3, #1
 800f3c4:	464a      	mov	r2, r9
 800f3c6:	4631      	mov	r1, r6
 800f3c8:	4628      	mov	r0, r5
 800f3ca:	47b8      	blx	r7
 800f3cc:	3001      	adds	r0, #1
 800f3ce:	f43f ae56 	beq.w	800f07e <_printf_float+0xb6>
 800f3d2:	f108 0801 	add.w	r8, r8, #1
 800f3d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f3d8:	3b01      	subs	r3, #1
 800f3da:	4543      	cmp	r3, r8
 800f3dc:	dcf1      	bgt.n	800f3c2 <_printf_float+0x3fa>
 800f3de:	4653      	mov	r3, sl
 800f3e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f3e4:	e6e0      	b.n	800f1a8 <_printf_float+0x1e0>
 800f3e6:	f04f 0800 	mov.w	r8, #0
 800f3ea:	f104 091a 	add.w	r9, r4, #26
 800f3ee:	e7f2      	b.n	800f3d6 <_printf_float+0x40e>
 800f3f0:	2301      	movs	r3, #1
 800f3f2:	4642      	mov	r2, r8
 800f3f4:	e7df      	b.n	800f3b6 <_printf_float+0x3ee>
 800f3f6:	2301      	movs	r3, #1
 800f3f8:	464a      	mov	r2, r9
 800f3fa:	4631      	mov	r1, r6
 800f3fc:	4628      	mov	r0, r5
 800f3fe:	47b8      	blx	r7
 800f400:	3001      	adds	r0, #1
 800f402:	f43f ae3c 	beq.w	800f07e <_printf_float+0xb6>
 800f406:	f108 0801 	add.w	r8, r8, #1
 800f40a:	68e3      	ldr	r3, [r4, #12]
 800f40c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f40e:	1a5b      	subs	r3, r3, r1
 800f410:	4543      	cmp	r3, r8
 800f412:	dcf0      	bgt.n	800f3f6 <_printf_float+0x42e>
 800f414:	e6fd      	b.n	800f212 <_printf_float+0x24a>
 800f416:	f04f 0800 	mov.w	r8, #0
 800f41a:	f104 0919 	add.w	r9, r4, #25
 800f41e:	e7f4      	b.n	800f40a <_printf_float+0x442>

0800f420 <_printf_common>:
 800f420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f424:	4616      	mov	r6, r2
 800f426:	4699      	mov	r9, r3
 800f428:	688a      	ldr	r2, [r1, #8]
 800f42a:	690b      	ldr	r3, [r1, #16]
 800f42c:	4607      	mov	r7, r0
 800f42e:	4293      	cmp	r3, r2
 800f430:	bfb8      	it	lt
 800f432:	4613      	movlt	r3, r2
 800f434:	6033      	str	r3, [r6, #0]
 800f436:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f43a:	460c      	mov	r4, r1
 800f43c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f440:	b10a      	cbz	r2, 800f446 <_printf_common+0x26>
 800f442:	3301      	adds	r3, #1
 800f444:	6033      	str	r3, [r6, #0]
 800f446:	6823      	ldr	r3, [r4, #0]
 800f448:	0699      	lsls	r1, r3, #26
 800f44a:	bf42      	ittt	mi
 800f44c:	6833      	ldrmi	r3, [r6, #0]
 800f44e:	3302      	addmi	r3, #2
 800f450:	6033      	strmi	r3, [r6, #0]
 800f452:	6825      	ldr	r5, [r4, #0]
 800f454:	f015 0506 	ands.w	r5, r5, #6
 800f458:	d106      	bne.n	800f468 <_printf_common+0x48>
 800f45a:	f104 0a19 	add.w	sl, r4, #25
 800f45e:	68e3      	ldr	r3, [r4, #12]
 800f460:	6832      	ldr	r2, [r6, #0]
 800f462:	1a9b      	subs	r3, r3, r2
 800f464:	42ab      	cmp	r3, r5
 800f466:	dc28      	bgt.n	800f4ba <_printf_common+0x9a>
 800f468:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f46c:	1e13      	subs	r3, r2, #0
 800f46e:	6822      	ldr	r2, [r4, #0]
 800f470:	bf18      	it	ne
 800f472:	2301      	movne	r3, #1
 800f474:	0692      	lsls	r2, r2, #26
 800f476:	d42d      	bmi.n	800f4d4 <_printf_common+0xb4>
 800f478:	4649      	mov	r1, r9
 800f47a:	4638      	mov	r0, r7
 800f47c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f480:	47c0      	blx	r8
 800f482:	3001      	adds	r0, #1
 800f484:	d020      	beq.n	800f4c8 <_printf_common+0xa8>
 800f486:	6823      	ldr	r3, [r4, #0]
 800f488:	68e5      	ldr	r5, [r4, #12]
 800f48a:	f003 0306 	and.w	r3, r3, #6
 800f48e:	2b04      	cmp	r3, #4
 800f490:	bf18      	it	ne
 800f492:	2500      	movne	r5, #0
 800f494:	6832      	ldr	r2, [r6, #0]
 800f496:	f04f 0600 	mov.w	r6, #0
 800f49a:	68a3      	ldr	r3, [r4, #8]
 800f49c:	bf08      	it	eq
 800f49e:	1aad      	subeq	r5, r5, r2
 800f4a0:	6922      	ldr	r2, [r4, #16]
 800f4a2:	bf08      	it	eq
 800f4a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f4a8:	4293      	cmp	r3, r2
 800f4aa:	bfc4      	itt	gt
 800f4ac:	1a9b      	subgt	r3, r3, r2
 800f4ae:	18ed      	addgt	r5, r5, r3
 800f4b0:	341a      	adds	r4, #26
 800f4b2:	42b5      	cmp	r5, r6
 800f4b4:	d11a      	bne.n	800f4ec <_printf_common+0xcc>
 800f4b6:	2000      	movs	r0, #0
 800f4b8:	e008      	b.n	800f4cc <_printf_common+0xac>
 800f4ba:	2301      	movs	r3, #1
 800f4bc:	4652      	mov	r2, sl
 800f4be:	4649      	mov	r1, r9
 800f4c0:	4638      	mov	r0, r7
 800f4c2:	47c0      	blx	r8
 800f4c4:	3001      	adds	r0, #1
 800f4c6:	d103      	bne.n	800f4d0 <_printf_common+0xb0>
 800f4c8:	f04f 30ff 	mov.w	r0, #4294967295
 800f4cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4d0:	3501      	adds	r5, #1
 800f4d2:	e7c4      	b.n	800f45e <_printf_common+0x3e>
 800f4d4:	2030      	movs	r0, #48	; 0x30
 800f4d6:	18e1      	adds	r1, r4, r3
 800f4d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f4dc:	1c5a      	adds	r2, r3, #1
 800f4de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f4e2:	4422      	add	r2, r4
 800f4e4:	3302      	adds	r3, #2
 800f4e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f4ea:	e7c5      	b.n	800f478 <_printf_common+0x58>
 800f4ec:	2301      	movs	r3, #1
 800f4ee:	4622      	mov	r2, r4
 800f4f0:	4649      	mov	r1, r9
 800f4f2:	4638      	mov	r0, r7
 800f4f4:	47c0      	blx	r8
 800f4f6:	3001      	adds	r0, #1
 800f4f8:	d0e6      	beq.n	800f4c8 <_printf_common+0xa8>
 800f4fa:	3601      	adds	r6, #1
 800f4fc:	e7d9      	b.n	800f4b2 <_printf_common+0x92>
	...

0800f500 <_printf_i>:
 800f500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f504:	460c      	mov	r4, r1
 800f506:	7e27      	ldrb	r7, [r4, #24]
 800f508:	4691      	mov	r9, r2
 800f50a:	2f78      	cmp	r7, #120	; 0x78
 800f50c:	4680      	mov	r8, r0
 800f50e:	469a      	mov	sl, r3
 800f510:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f512:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f516:	d807      	bhi.n	800f528 <_printf_i+0x28>
 800f518:	2f62      	cmp	r7, #98	; 0x62
 800f51a:	d80a      	bhi.n	800f532 <_printf_i+0x32>
 800f51c:	2f00      	cmp	r7, #0
 800f51e:	f000 80d9 	beq.w	800f6d4 <_printf_i+0x1d4>
 800f522:	2f58      	cmp	r7, #88	; 0x58
 800f524:	f000 80a4 	beq.w	800f670 <_printf_i+0x170>
 800f528:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f52c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f530:	e03a      	b.n	800f5a8 <_printf_i+0xa8>
 800f532:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f536:	2b15      	cmp	r3, #21
 800f538:	d8f6      	bhi.n	800f528 <_printf_i+0x28>
 800f53a:	a001      	add	r0, pc, #4	; (adr r0, 800f540 <_printf_i+0x40>)
 800f53c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f540:	0800f599 	.word	0x0800f599
 800f544:	0800f5ad 	.word	0x0800f5ad
 800f548:	0800f529 	.word	0x0800f529
 800f54c:	0800f529 	.word	0x0800f529
 800f550:	0800f529 	.word	0x0800f529
 800f554:	0800f529 	.word	0x0800f529
 800f558:	0800f5ad 	.word	0x0800f5ad
 800f55c:	0800f529 	.word	0x0800f529
 800f560:	0800f529 	.word	0x0800f529
 800f564:	0800f529 	.word	0x0800f529
 800f568:	0800f529 	.word	0x0800f529
 800f56c:	0800f6bb 	.word	0x0800f6bb
 800f570:	0800f5dd 	.word	0x0800f5dd
 800f574:	0800f69d 	.word	0x0800f69d
 800f578:	0800f529 	.word	0x0800f529
 800f57c:	0800f529 	.word	0x0800f529
 800f580:	0800f6dd 	.word	0x0800f6dd
 800f584:	0800f529 	.word	0x0800f529
 800f588:	0800f5dd 	.word	0x0800f5dd
 800f58c:	0800f529 	.word	0x0800f529
 800f590:	0800f529 	.word	0x0800f529
 800f594:	0800f6a5 	.word	0x0800f6a5
 800f598:	680b      	ldr	r3, [r1, #0]
 800f59a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f59e:	1d1a      	adds	r2, r3, #4
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	600a      	str	r2, [r1, #0]
 800f5a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	e0a4      	b.n	800f6f6 <_printf_i+0x1f6>
 800f5ac:	6825      	ldr	r5, [r4, #0]
 800f5ae:	6808      	ldr	r0, [r1, #0]
 800f5b0:	062e      	lsls	r6, r5, #24
 800f5b2:	f100 0304 	add.w	r3, r0, #4
 800f5b6:	d50a      	bpl.n	800f5ce <_printf_i+0xce>
 800f5b8:	6805      	ldr	r5, [r0, #0]
 800f5ba:	600b      	str	r3, [r1, #0]
 800f5bc:	2d00      	cmp	r5, #0
 800f5be:	da03      	bge.n	800f5c8 <_printf_i+0xc8>
 800f5c0:	232d      	movs	r3, #45	; 0x2d
 800f5c2:	426d      	negs	r5, r5
 800f5c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f5c8:	230a      	movs	r3, #10
 800f5ca:	485e      	ldr	r0, [pc, #376]	; (800f744 <_printf_i+0x244>)
 800f5cc:	e019      	b.n	800f602 <_printf_i+0x102>
 800f5ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f5d2:	6805      	ldr	r5, [r0, #0]
 800f5d4:	600b      	str	r3, [r1, #0]
 800f5d6:	bf18      	it	ne
 800f5d8:	b22d      	sxthne	r5, r5
 800f5da:	e7ef      	b.n	800f5bc <_printf_i+0xbc>
 800f5dc:	680b      	ldr	r3, [r1, #0]
 800f5de:	6825      	ldr	r5, [r4, #0]
 800f5e0:	1d18      	adds	r0, r3, #4
 800f5e2:	6008      	str	r0, [r1, #0]
 800f5e4:	0628      	lsls	r0, r5, #24
 800f5e6:	d501      	bpl.n	800f5ec <_printf_i+0xec>
 800f5e8:	681d      	ldr	r5, [r3, #0]
 800f5ea:	e002      	b.n	800f5f2 <_printf_i+0xf2>
 800f5ec:	0669      	lsls	r1, r5, #25
 800f5ee:	d5fb      	bpl.n	800f5e8 <_printf_i+0xe8>
 800f5f0:	881d      	ldrh	r5, [r3, #0]
 800f5f2:	2f6f      	cmp	r7, #111	; 0x6f
 800f5f4:	bf0c      	ite	eq
 800f5f6:	2308      	moveq	r3, #8
 800f5f8:	230a      	movne	r3, #10
 800f5fa:	4852      	ldr	r0, [pc, #328]	; (800f744 <_printf_i+0x244>)
 800f5fc:	2100      	movs	r1, #0
 800f5fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f602:	6866      	ldr	r6, [r4, #4]
 800f604:	2e00      	cmp	r6, #0
 800f606:	bfa8      	it	ge
 800f608:	6821      	ldrge	r1, [r4, #0]
 800f60a:	60a6      	str	r6, [r4, #8]
 800f60c:	bfa4      	itt	ge
 800f60e:	f021 0104 	bicge.w	r1, r1, #4
 800f612:	6021      	strge	r1, [r4, #0]
 800f614:	b90d      	cbnz	r5, 800f61a <_printf_i+0x11a>
 800f616:	2e00      	cmp	r6, #0
 800f618:	d04d      	beq.n	800f6b6 <_printf_i+0x1b6>
 800f61a:	4616      	mov	r6, r2
 800f61c:	fbb5 f1f3 	udiv	r1, r5, r3
 800f620:	fb03 5711 	mls	r7, r3, r1, r5
 800f624:	5dc7      	ldrb	r7, [r0, r7]
 800f626:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f62a:	462f      	mov	r7, r5
 800f62c:	42bb      	cmp	r3, r7
 800f62e:	460d      	mov	r5, r1
 800f630:	d9f4      	bls.n	800f61c <_printf_i+0x11c>
 800f632:	2b08      	cmp	r3, #8
 800f634:	d10b      	bne.n	800f64e <_printf_i+0x14e>
 800f636:	6823      	ldr	r3, [r4, #0]
 800f638:	07df      	lsls	r7, r3, #31
 800f63a:	d508      	bpl.n	800f64e <_printf_i+0x14e>
 800f63c:	6923      	ldr	r3, [r4, #16]
 800f63e:	6861      	ldr	r1, [r4, #4]
 800f640:	4299      	cmp	r1, r3
 800f642:	bfde      	ittt	le
 800f644:	2330      	movle	r3, #48	; 0x30
 800f646:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f64a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f64e:	1b92      	subs	r2, r2, r6
 800f650:	6122      	str	r2, [r4, #16]
 800f652:	464b      	mov	r3, r9
 800f654:	4621      	mov	r1, r4
 800f656:	4640      	mov	r0, r8
 800f658:	f8cd a000 	str.w	sl, [sp]
 800f65c:	aa03      	add	r2, sp, #12
 800f65e:	f7ff fedf 	bl	800f420 <_printf_common>
 800f662:	3001      	adds	r0, #1
 800f664:	d14c      	bne.n	800f700 <_printf_i+0x200>
 800f666:	f04f 30ff 	mov.w	r0, #4294967295
 800f66a:	b004      	add	sp, #16
 800f66c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f670:	4834      	ldr	r0, [pc, #208]	; (800f744 <_printf_i+0x244>)
 800f672:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f676:	680e      	ldr	r6, [r1, #0]
 800f678:	6823      	ldr	r3, [r4, #0]
 800f67a:	f856 5b04 	ldr.w	r5, [r6], #4
 800f67e:	061f      	lsls	r7, r3, #24
 800f680:	600e      	str	r6, [r1, #0]
 800f682:	d514      	bpl.n	800f6ae <_printf_i+0x1ae>
 800f684:	07d9      	lsls	r1, r3, #31
 800f686:	bf44      	itt	mi
 800f688:	f043 0320 	orrmi.w	r3, r3, #32
 800f68c:	6023      	strmi	r3, [r4, #0]
 800f68e:	b91d      	cbnz	r5, 800f698 <_printf_i+0x198>
 800f690:	6823      	ldr	r3, [r4, #0]
 800f692:	f023 0320 	bic.w	r3, r3, #32
 800f696:	6023      	str	r3, [r4, #0]
 800f698:	2310      	movs	r3, #16
 800f69a:	e7af      	b.n	800f5fc <_printf_i+0xfc>
 800f69c:	6823      	ldr	r3, [r4, #0]
 800f69e:	f043 0320 	orr.w	r3, r3, #32
 800f6a2:	6023      	str	r3, [r4, #0]
 800f6a4:	2378      	movs	r3, #120	; 0x78
 800f6a6:	4828      	ldr	r0, [pc, #160]	; (800f748 <_printf_i+0x248>)
 800f6a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f6ac:	e7e3      	b.n	800f676 <_printf_i+0x176>
 800f6ae:	065e      	lsls	r6, r3, #25
 800f6b0:	bf48      	it	mi
 800f6b2:	b2ad      	uxthmi	r5, r5
 800f6b4:	e7e6      	b.n	800f684 <_printf_i+0x184>
 800f6b6:	4616      	mov	r6, r2
 800f6b8:	e7bb      	b.n	800f632 <_printf_i+0x132>
 800f6ba:	680b      	ldr	r3, [r1, #0]
 800f6bc:	6826      	ldr	r6, [r4, #0]
 800f6be:	1d1d      	adds	r5, r3, #4
 800f6c0:	6960      	ldr	r0, [r4, #20]
 800f6c2:	600d      	str	r5, [r1, #0]
 800f6c4:	0635      	lsls	r5, r6, #24
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	d501      	bpl.n	800f6ce <_printf_i+0x1ce>
 800f6ca:	6018      	str	r0, [r3, #0]
 800f6cc:	e002      	b.n	800f6d4 <_printf_i+0x1d4>
 800f6ce:	0671      	lsls	r1, r6, #25
 800f6d0:	d5fb      	bpl.n	800f6ca <_printf_i+0x1ca>
 800f6d2:	8018      	strh	r0, [r3, #0]
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	4616      	mov	r6, r2
 800f6d8:	6123      	str	r3, [r4, #16]
 800f6da:	e7ba      	b.n	800f652 <_printf_i+0x152>
 800f6dc:	680b      	ldr	r3, [r1, #0]
 800f6de:	1d1a      	adds	r2, r3, #4
 800f6e0:	600a      	str	r2, [r1, #0]
 800f6e2:	681e      	ldr	r6, [r3, #0]
 800f6e4:	2100      	movs	r1, #0
 800f6e6:	4630      	mov	r0, r6
 800f6e8:	6862      	ldr	r2, [r4, #4]
 800f6ea:	f001 fa13 	bl	8010b14 <memchr>
 800f6ee:	b108      	cbz	r0, 800f6f4 <_printf_i+0x1f4>
 800f6f0:	1b80      	subs	r0, r0, r6
 800f6f2:	6060      	str	r0, [r4, #4]
 800f6f4:	6863      	ldr	r3, [r4, #4]
 800f6f6:	6123      	str	r3, [r4, #16]
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6fe:	e7a8      	b.n	800f652 <_printf_i+0x152>
 800f700:	4632      	mov	r2, r6
 800f702:	4649      	mov	r1, r9
 800f704:	4640      	mov	r0, r8
 800f706:	6923      	ldr	r3, [r4, #16]
 800f708:	47d0      	blx	sl
 800f70a:	3001      	adds	r0, #1
 800f70c:	d0ab      	beq.n	800f666 <_printf_i+0x166>
 800f70e:	6823      	ldr	r3, [r4, #0]
 800f710:	079b      	lsls	r3, r3, #30
 800f712:	d413      	bmi.n	800f73c <_printf_i+0x23c>
 800f714:	68e0      	ldr	r0, [r4, #12]
 800f716:	9b03      	ldr	r3, [sp, #12]
 800f718:	4298      	cmp	r0, r3
 800f71a:	bfb8      	it	lt
 800f71c:	4618      	movlt	r0, r3
 800f71e:	e7a4      	b.n	800f66a <_printf_i+0x16a>
 800f720:	2301      	movs	r3, #1
 800f722:	4632      	mov	r2, r6
 800f724:	4649      	mov	r1, r9
 800f726:	4640      	mov	r0, r8
 800f728:	47d0      	blx	sl
 800f72a:	3001      	adds	r0, #1
 800f72c:	d09b      	beq.n	800f666 <_printf_i+0x166>
 800f72e:	3501      	adds	r5, #1
 800f730:	68e3      	ldr	r3, [r4, #12]
 800f732:	9903      	ldr	r1, [sp, #12]
 800f734:	1a5b      	subs	r3, r3, r1
 800f736:	42ab      	cmp	r3, r5
 800f738:	dcf2      	bgt.n	800f720 <_printf_i+0x220>
 800f73a:	e7eb      	b.n	800f714 <_printf_i+0x214>
 800f73c:	2500      	movs	r5, #0
 800f73e:	f104 0619 	add.w	r6, r4, #25
 800f742:	e7f5      	b.n	800f730 <_printf_i+0x230>
 800f744:	08014367 	.word	0x08014367
 800f748:	08014378 	.word	0x08014378

0800f74c <iprintf>:
 800f74c:	b40f      	push	{r0, r1, r2, r3}
 800f74e:	4b0a      	ldr	r3, [pc, #40]	; (800f778 <iprintf+0x2c>)
 800f750:	b513      	push	{r0, r1, r4, lr}
 800f752:	681c      	ldr	r4, [r3, #0]
 800f754:	b124      	cbz	r4, 800f760 <iprintf+0x14>
 800f756:	69a3      	ldr	r3, [r4, #24]
 800f758:	b913      	cbnz	r3, 800f760 <iprintf+0x14>
 800f75a:	4620      	mov	r0, r4
 800f75c:	f001 f8c8 	bl	80108f0 <__sinit>
 800f760:	ab05      	add	r3, sp, #20
 800f762:	4620      	mov	r0, r4
 800f764:	9a04      	ldr	r2, [sp, #16]
 800f766:	68a1      	ldr	r1, [r4, #8]
 800f768:	9301      	str	r3, [sp, #4]
 800f76a:	f7ff fa5f 	bl	800ec2c <_vfiprintf_r>
 800f76e:	b002      	add	sp, #8
 800f770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f774:	b004      	add	sp, #16
 800f776:	4770      	bx	lr
 800f778:	20000064 	.word	0x20000064

0800f77c <putchar>:
 800f77c:	b538      	push	{r3, r4, r5, lr}
 800f77e:	4b08      	ldr	r3, [pc, #32]	; (800f7a0 <putchar+0x24>)
 800f780:	4605      	mov	r5, r0
 800f782:	681c      	ldr	r4, [r3, #0]
 800f784:	b124      	cbz	r4, 800f790 <putchar+0x14>
 800f786:	69a3      	ldr	r3, [r4, #24]
 800f788:	b913      	cbnz	r3, 800f790 <putchar+0x14>
 800f78a:	4620      	mov	r0, r4
 800f78c:	f001 f8b0 	bl	80108f0 <__sinit>
 800f790:	4629      	mov	r1, r5
 800f792:	4620      	mov	r0, r4
 800f794:	68a2      	ldr	r2, [r4, #8]
 800f796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f79a:	f001 bf9b 	b.w	80116d4 <_putc_r>
 800f79e:	bf00      	nop
 800f7a0:	20000064 	.word	0x20000064

0800f7a4 <sniprintf>:
 800f7a4:	b40c      	push	{r2, r3}
 800f7a6:	b530      	push	{r4, r5, lr}
 800f7a8:	4b17      	ldr	r3, [pc, #92]	; (800f808 <sniprintf+0x64>)
 800f7aa:	1e0c      	subs	r4, r1, #0
 800f7ac:	681d      	ldr	r5, [r3, #0]
 800f7ae:	b09d      	sub	sp, #116	; 0x74
 800f7b0:	da08      	bge.n	800f7c4 <sniprintf+0x20>
 800f7b2:	238b      	movs	r3, #139	; 0x8b
 800f7b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f7b8:	602b      	str	r3, [r5, #0]
 800f7ba:	b01d      	add	sp, #116	; 0x74
 800f7bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f7c0:	b002      	add	sp, #8
 800f7c2:	4770      	bx	lr
 800f7c4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f7c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f7cc:	bf0c      	ite	eq
 800f7ce:	4623      	moveq	r3, r4
 800f7d0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f7d4:	9304      	str	r3, [sp, #16]
 800f7d6:	9307      	str	r3, [sp, #28]
 800f7d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f7dc:	9002      	str	r0, [sp, #8]
 800f7de:	9006      	str	r0, [sp, #24]
 800f7e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f7e4:	4628      	mov	r0, r5
 800f7e6:	ab21      	add	r3, sp, #132	; 0x84
 800f7e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f7ea:	a902      	add	r1, sp, #8
 800f7ec:	9301      	str	r3, [sp, #4]
 800f7ee:	f001 fe71 	bl	80114d4 <_svfiprintf_r>
 800f7f2:	1c43      	adds	r3, r0, #1
 800f7f4:	bfbc      	itt	lt
 800f7f6:	238b      	movlt	r3, #139	; 0x8b
 800f7f8:	602b      	strlt	r3, [r5, #0]
 800f7fa:	2c00      	cmp	r4, #0
 800f7fc:	d0dd      	beq.n	800f7ba <sniprintf+0x16>
 800f7fe:	2200      	movs	r2, #0
 800f800:	9b02      	ldr	r3, [sp, #8]
 800f802:	701a      	strb	r2, [r3, #0]
 800f804:	e7d9      	b.n	800f7ba <sniprintf+0x16>
 800f806:	bf00      	nop
 800f808:	20000064 	.word	0x20000064

0800f80c <strcpy>:
 800f80c:	4603      	mov	r3, r0
 800f80e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f812:	f803 2b01 	strb.w	r2, [r3], #1
 800f816:	2a00      	cmp	r2, #0
 800f818:	d1f9      	bne.n	800f80e <strcpy+0x2>
 800f81a:	4770      	bx	lr

0800f81c <strnlen>:
 800f81c:	4602      	mov	r2, r0
 800f81e:	b510      	push	{r4, lr}
 800f820:	4401      	add	r1, r0
 800f822:	428a      	cmp	r2, r1
 800f824:	4613      	mov	r3, r2
 800f826:	d101      	bne.n	800f82c <strnlen+0x10>
 800f828:	1a18      	subs	r0, r3, r0
 800f82a:	bd10      	pop	{r4, pc}
 800f82c:	781c      	ldrb	r4, [r3, #0]
 800f82e:	3201      	adds	r2, #1
 800f830:	2c00      	cmp	r4, #0
 800f832:	d1f6      	bne.n	800f822 <strnlen+0x6>
 800f834:	e7f8      	b.n	800f828 <strnlen+0xc>
	...

0800f838 <__swbuf_r>:
 800f838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f83a:	460e      	mov	r6, r1
 800f83c:	4614      	mov	r4, r2
 800f83e:	4605      	mov	r5, r0
 800f840:	b118      	cbz	r0, 800f84a <__swbuf_r+0x12>
 800f842:	6983      	ldr	r3, [r0, #24]
 800f844:	b90b      	cbnz	r3, 800f84a <__swbuf_r+0x12>
 800f846:	f001 f853 	bl	80108f0 <__sinit>
 800f84a:	4b21      	ldr	r3, [pc, #132]	; (800f8d0 <__swbuf_r+0x98>)
 800f84c:	429c      	cmp	r4, r3
 800f84e:	d12b      	bne.n	800f8a8 <__swbuf_r+0x70>
 800f850:	686c      	ldr	r4, [r5, #4]
 800f852:	69a3      	ldr	r3, [r4, #24]
 800f854:	60a3      	str	r3, [r4, #8]
 800f856:	89a3      	ldrh	r3, [r4, #12]
 800f858:	071a      	lsls	r2, r3, #28
 800f85a:	d52f      	bpl.n	800f8bc <__swbuf_r+0x84>
 800f85c:	6923      	ldr	r3, [r4, #16]
 800f85e:	b36b      	cbz	r3, 800f8bc <__swbuf_r+0x84>
 800f860:	6923      	ldr	r3, [r4, #16]
 800f862:	6820      	ldr	r0, [r4, #0]
 800f864:	b2f6      	uxtb	r6, r6
 800f866:	1ac0      	subs	r0, r0, r3
 800f868:	6963      	ldr	r3, [r4, #20]
 800f86a:	4637      	mov	r7, r6
 800f86c:	4283      	cmp	r3, r0
 800f86e:	dc04      	bgt.n	800f87a <__swbuf_r+0x42>
 800f870:	4621      	mov	r1, r4
 800f872:	4628      	mov	r0, r5
 800f874:	f000 ffa8 	bl	80107c8 <_fflush_r>
 800f878:	bb30      	cbnz	r0, 800f8c8 <__swbuf_r+0x90>
 800f87a:	68a3      	ldr	r3, [r4, #8]
 800f87c:	3001      	adds	r0, #1
 800f87e:	3b01      	subs	r3, #1
 800f880:	60a3      	str	r3, [r4, #8]
 800f882:	6823      	ldr	r3, [r4, #0]
 800f884:	1c5a      	adds	r2, r3, #1
 800f886:	6022      	str	r2, [r4, #0]
 800f888:	701e      	strb	r6, [r3, #0]
 800f88a:	6963      	ldr	r3, [r4, #20]
 800f88c:	4283      	cmp	r3, r0
 800f88e:	d004      	beq.n	800f89a <__swbuf_r+0x62>
 800f890:	89a3      	ldrh	r3, [r4, #12]
 800f892:	07db      	lsls	r3, r3, #31
 800f894:	d506      	bpl.n	800f8a4 <__swbuf_r+0x6c>
 800f896:	2e0a      	cmp	r6, #10
 800f898:	d104      	bne.n	800f8a4 <__swbuf_r+0x6c>
 800f89a:	4621      	mov	r1, r4
 800f89c:	4628      	mov	r0, r5
 800f89e:	f000 ff93 	bl	80107c8 <_fflush_r>
 800f8a2:	b988      	cbnz	r0, 800f8c8 <__swbuf_r+0x90>
 800f8a4:	4638      	mov	r0, r7
 800f8a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8a8:	4b0a      	ldr	r3, [pc, #40]	; (800f8d4 <__swbuf_r+0x9c>)
 800f8aa:	429c      	cmp	r4, r3
 800f8ac:	d101      	bne.n	800f8b2 <__swbuf_r+0x7a>
 800f8ae:	68ac      	ldr	r4, [r5, #8]
 800f8b0:	e7cf      	b.n	800f852 <__swbuf_r+0x1a>
 800f8b2:	4b09      	ldr	r3, [pc, #36]	; (800f8d8 <__swbuf_r+0xa0>)
 800f8b4:	429c      	cmp	r4, r3
 800f8b6:	bf08      	it	eq
 800f8b8:	68ec      	ldreq	r4, [r5, #12]
 800f8ba:	e7ca      	b.n	800f852 <__swbuf_r+0x1a>
 800f8bc:	4621      	mov	r1, r4
 800f8be:	4628      	mov	r0, r5
 800f8c0:	f000 f80c 	bl	800f8dc <__swsetup_r>
 800f8c4:	2800      	cmp	r0, #0
 800f8c6:	d0cb      	beq.n	800f860 <__swbuf_r+0x28>
 800f8c8:	f04f 37ff 	mov.w	r7, #4294967295
 800f8cc:	e7ea      	b.n	800f8a4 <__swbuf_r+0x6c>
 800f8ce:	bf00      	nop
 800f8d0:	08014440 	.word	0x08014440
 800f8d4:	08014460 	.word	0x08014460
 800f8d8:	08014420 	.word	0x08014420

0800f8dc <__swsetup_r>:
 800f8dc:	4b32      	ldr	r3, [pc, #200]	; (800f9a8 <__swsetup_r+0xcc>)
 800f8de:	b570      	push	{r4, r5, r6, lr}
 800f8e0:	681d      	ldr	r5, [r3, #0]
 800f8e2:	4606      	mov	r6, r0
 800f8e4:	460c      	mov	r4, r1
 800f8e6:	b125      	cbz	r5, 800f8f2 <__swsetup_r+0x16>
 800f8e8:	69ab      	ldr	r3, [r5, #24]
 800f8ea:	b913      	cbnz	r3, 800f8f2 <__swsetup_r+0x16>
 800f8ec:	4628      	mov	r0, r5
 800f8ee:	f000 ffff 	bl	80108f0 <__sinit>
 800f8f2:	4b2e      	ldr	r3, [pc, #184]	; (800f9ac <__swsetup_r+0xd0>)
 800f8f4:	429c      	cmp	r4, r3
 800f8f6:	d10f      	bne.n	800f918 <__swsetup_r+0x3c>
 800f8f8:	686c      	ldr	r4, [r5, #4]
 800f8fa:	89a3      	ldrh	r3, [r4, #12]
 800f8fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f900:	0719      	lsls	r1, r3, #28
 800f902:	d42c      	bmi.n	800f95e <__swsetup_r+0x82>
 800f904:	06dd      	lsls	r5, r3, #27
 800f906:	d411      	bmi.n	800f92c <__swsetup_r+0x50>
 800f908:	2309      	movs	r3, #9
 800f90a:	6033      	str	r3, [r6, #0]
 800f90c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f910:	f04f 30ff 	mov.w	r0, #4294967295
 800f914:	81a3      	strh	r3, [r4, #12]
 800f916:	e03e      	b.n	800f996 <__swsetup_r+0xba>
 800f918:	4b25      	ldr	r3, [pc, #148]	; (800f9b0 <__swsetup_r+0xd4>)
 800f91a:	429c      	cmp	r4, r3
 800f91c:	d101      	bne.n	800f922 <__swsetup_r+0x46>
 800f91e:	68ac      	ldr	r4, [r5, #8]
 800f920:	e7eb      	b.n	800f8fa <__swsetup_r+0x1e>
 800f922:	4b24      	ldr	r3, [pc, #144]	; (800f9b4 <__swsetup_r+0xd8>)
 800f924:	429c      	cmp	r4, r3
 800f926:	bf08      	it	eq
 800f928:	68ec      	ldreq	r4, [r5, #12]
 800f92a:	e7e6      	b.n	800f8fa <__swsetup_r+0x1e>
 800f92c:	0758      	lsls	r0, r3, #29
 800f92e:	d512      	bpl.n	800f956 <__swsetup_r+0x7a>
 800f930:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f932:	b141      	cbz	r1, 800f946 <__swsetup_r+0x6a>
 800f934:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f938:	4299      	cmp	r1, r3
 800f93a:	d002      	beq.n	800f942 <__swsetup_r+0x66>
 800f93c:	4630      	mov	r0, r6
 800f93e:	f001 fca1 	bl	8011284 <_free_r>
 800f942:	2300      	movs	r3, #0
 800f944:	6363      	str	r3, [r4, #52]	; 0x34
 800f946:	89a3      	ldrh	r3, [r4, #12]
 800f948:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f94c:	81a3      	strh	r3, [r4, #12]
 800f94e:	2300      	movs	r3, #0
 800f950:	6063      	str	r3, [r4, #4]
 800f952:	6923      	ldr	r3, [r4, #16]
 800f954:	6023      	str	r3, [r4, #0]
 800f956:	89a3      	ldrh	r3, [r4, #12]
 800f958:	f043 0308 	orr.w	r3, r3, #8
 800f95c:	81a3      	strh	r3, [r4, #12]
 800f95e:	6923      	ldr	r3, [r4, #16]
 800f960:	b94b      	cbnz	r3, 800f976 <__swsetup_r+0x9a>
 800f962:	89a3      	ldrh	r3, [r4, #12]
 800f964:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f96c:	d003      	beq.n	800f976 <__swsetup_r+0x9a>
 800f96e:	4621      	mov	r1, r4
 800f970:	4630      	mov	r0, r6
 800f972:	f001 f887 	bl	8010a84 <__smakebuf_r>
 800f976:	89a0      	ldrh	r0, [r4, #12]
 800f978:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f97c:	f010 0301 	ands.w	r3, r0, #1
 800f980:	d00a      	beq.n	800f998 <__swsetup_r+0xbc>
 800f982:	2300      	movs	r3, #0
 800f984:	60a3      	str	r3, [r4, #8]
 800f986:	6963      	ldr	r3, [r4, #20]
 800f988:	425b      	negs	r3, r3
 800f98a:	61a3      	str	r3, [r4, #24]
 800f98c:	6923      	ldr	r3, [r4, #16]
 800f98e:	b943      	cbnz	r3, 800f9a2 <__swsetup_r+0xc6>
 800f990:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f994:	d1ba      	bne.n	800f90c <__swsetup_r+0x30>
 800f996:	bd70      	pop	{r4, r5, r6, pc}
 800f998:	0781      	lsls	r1, r0, #30
 800f99a:	bf58      	it	pl
 800f99c:	6963      	ldrpl	r3, [r4, #20]
 800f99e:	60a3      	str	r3, [r4, #8]
 800f9a0:	e7f4      	b.n	800f98c <__swsetup_r+0xb0>
 800f9a2:	2000      	movs	r0, #0
 800f9a4:	e7f7      	b.n	800f996 <__swsetup_r+0xba>
 800f9a6:	bf00      	nop
 800f9a8:	20000064 	.word	0x20000064
 800f9ac:	08014440 	.word	0x08014440
 800f9b0:	08014460 	.word	0x08014460
 800f9b4:	08014420 	.word	0x08014420

0800f9b8 <abort>:
 800f9b8:	2006      	movs	r0, #6
 800f9ba:	b508      	push	{r3, lr}
 800f9bc:	f001 ff0a 	bl	80117d4 <raise>
 800f9c0:	2001      	movs	r0, #1
 800f9c2:	f7f5 fd66 	bl	8005492 <_exit>

0800f9c6 <quorem>:
 800f9c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9ca:	6903      	ldr	r3, [r0, #16]
 800f9cc:	690c      	ldr	r4, [r1, #16]
 800f9ce:	4607      	mov	r7, r0
 800f9d0:	42a3      	cmp	r3, r4
 800f9d2:	f2c0 8083 	blt.w	800fadc <quorem+0x116>
 800f9d6:	3c01      	subs	r4, #1
 800f9d8:	f100 0514 	add.w	r5, r0, #20
 800f9dc:	f101 0814 	add.w	r8, r1, #20
 800f9e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f9e4:	9301      	str	r3, [sp, #4]
 800f9e6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f9ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f9ee:	3301      	adds	r3, #1
 800f9f0:	429a      	cmp	r2, r3
 800f9f2:	fbb2 f6f3 	udiv	r6, r2, r3
 800f9f6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f9fa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f9fe:	d332      	bcc.n	800fa66 <quorem+0xa0>
 800fa00:	f04f 0e00 	mov.w	lr, #0
 800fa04:	4640      	mov	r0, r8
 800fa06:	46ac      	mov	ip, r5
 800fa08:	46f2      	mov	sl, lr
 800fa0a:	f850 2b04 	ldr.w	r2, [r0], #4
 800fa0e:	b293      	uxth	r3, r2
 800fa10:	fb06 e303 	mla	r3, r6, r3, lr
 800fa14:	0c12      	lsrs	r2, r2, #16
 800fa16:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fa1a:	fb06 e202 	mla	r2, r6, r2, lr
 800fa1e:	b29b      	uxth	r3, r3
 800fa20:	ebaa 0303 	sub.w	r3, sl, r3
 800fa24:	f8dc a000 	ldr.w	sl, [ip]
 800fa28:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fa2c:	fa1f fa8a 	uxth.w	sl, sl
 800fa30:	4453      	add	r3, sl
 800fa32:	fa1f fa82 	uxth.w	sl, r2
 800fa36:	f8dc 2000 	ldr.w	r2, [ip]
 800fa3a:	4581      	cmp	r9, r0
 800fa3c:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800fa40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fa44:	b29b      	uxth	r3, r3
 800fa46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa4a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fa4e:	f84c 3b04 	str.w	r3, [ip], #4
 800fa52:	d2da      	bcs.n	800fa0a <quorem+0x44>
 800fa54:	f855 300b 	ldr.w	r3, [r5, fp]
 800fa58:	b92b      	cbnz	r3, 800fa66 <quorem+0xa0>
 800fa5a:	9b01      	ldr	r3, [sp, #4]
 800fa5c:	3b04      	subs	r3, #4
 800fa5e:	429d      	cmp	r5, r3
 800fa60:	461a      	mov	r2, r3
 800fa62:	d32f      	bcc.n	800fac4 <quorem+0xfe>
 800fa64:	613c      	str	r4, [r7, #16]
 800fa66:	4638      	mov	r0, r7
 800fa68:	f001 faf6 	bl	8011058 <__mcmp>
 800fa6c:	2800      	cmp	r0, #0
 800fa6e:	db25      	blt.n	800fabc <quorem+0xf6>
 800fa70:	4628      	mov	r0, r5
 800fa72:	f04f 0c00 	mov.w	ip, #0
 800fa76:	3601      	adds	r6, #1
 800fa78:	f858 1b04 	ldr.w	r1, [r8], #4
 800fa7c:	f8d0 e000 	ldr.w	lr, [r0]
 800fa80:	b28b      	uxth	r3, r1
 800fa82:	ebac 0303 	sub.w	r3, ip, r3
 800fa86:	fa1f f28e 	uxth.w	r2, lr
 800fa8a:	4413      	add	r3, r2
 800fa8c:	0c0a      	lsrs	r2, r1, #16
 800fa8e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fa92:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fa96:	b29b      	uxth	r3, r3
 800fa98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa9c:	45c1      	cmp	r9, r8
 800fa9e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800faa2:	f840 3b04 	str.w	r3, [r0], #4
 800faa6:	d2e7      	bcs.n	800fa78 <quorem+0xb2>
 800faa8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800faac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fab0:	b922      	cbnz	r2, 800fabc <quorem+0xf6>
 800fab2:	3b04      	subs	r3, #4
 800fab4:	429d      	cmp	r5, r3
 800fab6:	461a      	mov	r2, r3
 800fab8:	d30a      	bcc.n	800fad0 <quorem+0x10a>
 800faba:	613c      	str	r4, [r7, #16]
 800fabc:	4630      	mov	r0, r6
 800fabe:	b003      	add	sp, #12
 800fac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fac4:	6812      	ldr	r2, [r2, #0]
 800fac6:	3b04      	subs	r3, #4
 800fac8:	2a00      	cmp	r2, #0
 800faca:	d1cb      	bne.n	800fa64 <quorem+0x9e>
 800facc:	3c01      	subs	r4, #1
 800face:	e7c6      	b.n	800fa5e <quorem+0x98>
 800fad0:	6812      	ldr	r2, [r2, #0]
 800fad2:	3b04      	subs	r3, #4
 800fad4:	2a00      	cmp	r2, #0
 800fad6:	d1f0      	bne.n	800faba <quorem+0xf4>
 800fad8:	3c01      	subs	r4, #1
 800fada:	e7eb      	b.n	800fab4 <quorem+0xee>
 800fadc:	2000      	movs	r0, #0
 800fade:	e7ee      	b.n	800fabe <quorem+0xf8>

0800fae0 <_dtoa_r>:
 800fae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fae4:	4616      	mov	r6, r2
 800fae6:	461f      	mov	r7, r3
 800fae8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800faea:	b099      	sub	sp, #100	; 0x64
 800faec:	4605      	mov	r5, r0
 800faee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800faf2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800faf6:	b974      	cbnz	r4, 800fb16 <_dtoa_r+0x36>
 800faf8:	2010      	movs	r0, #16
 800fafa:	f001 f803 	bl	8010b04 <malloc>
 800fafe:	4602      	mov	r2, r0
 800fb00:	6268      	str	r0, [r5, #36]	; 0x24
 800fb02:	b920      	cbnz	r0, 800fb0e <_dtoa_r+0x2e>
 800fb04:	21ea      	movs	r1, #234	; 0xea
 800fb06:	4bae      	ldr	r3, [pc, #696]	; (800fdc0 <_dtoa_r+0x2e0>)
 800fb08:	48ae      	ldr	r0, [pc, #696]	; (800fdc4 <_dtoa_r+0x2e4>)
 800fb0a:	f7fe fff7 	bl	800eafc <__assert_func>
 800fb0e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fb12:	6004      	str	r4, [r0, #0]
 800fb14:	60c4      	str	r4, [r0, #12]
 800fb16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fb18:	6819      	ldr	r1, [r3, #0]
 800fb1a:	b151      	cbz	r1, 800fb32 <_dtoa_r+0x52>
 800fb1c:	685a      	ldr	r2, [r3, #4]
 800fb1e:	2301      	movs	r3, #1
 800fb20:	4093      	lsls	r3, r2
 800fb22:	604a      	str	r2, [r1, #4]
 800fb24:	608b      	str	r3, [r1, #8]
 800fb26:	4628      	mov	r0, r5
 800fb28:	f001 f85c 	bl	8010be4 <_Bfree>
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fb30:	601a      	str	r2, [r3, #0]
 800fb32:	1e3b      	subs	r3, r7, #0
 800fb34:	bfaf      	iteee	ge
 800fb36:	2300      	movge	r3, #0
 800fb38:	2201      	movlt	r2, #1
 800fb3a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fb3e:	9305      	strlt	r3, [sp, #20]
 800fb40:	bfa8      	it	ge
 800fb42:	f8c8 3000 	strge.w	r3, [r8]
 800fb46:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800fb4a:	4b9f      	ldr	r3, [pc, #636]	; (800fdc8 <_dtoa_r+0x2e8>)
 800fb4c:	bfb8      	it	lt
 800fb4e:	f8c8 2000 	strlt.w	r2, [r8]
 800fb52:	ea33 0309 	bics.w	r3, r3, r9
 800fb56:	d119      	bne.n	800fb8c <_dtoa_r+0xac>
 800fb58:	f242 730f 	movw	r3, #9999	; 0x270f
 800fb5c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800fb5e:	6013      	str	r3, [r2, #0]
 800fb60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fb64:	4333      	orrs	r3, r6
 800fb66:	f000 8580 	beq.w	801066a <_dtoa_r+0xb8a>
 800fb6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fb6c:	b953      	cbnz	r3, 800fb84 <_dtoa_r+0xa4>
 800fb6e:	4b97      	ldr	r3, [pc, #604]	; (800fdcc <_dtoa_r+0x2ec>)
 800fb70:	e022      	b.n	800fbb8 <_dtoa_r+0xd8>
 800fb72:	4b97      	ldr	r3, [pc, #604]	; (800fdd0 <_dtoa_r+0x2f0>)
 800fb74:	9308      	str	r3, [sp, #32]
 800fb76:	3308      	adds	r3, #8
 800fb78:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800fb7a:	6013      	str	r3, [r2, #0]
 800fb7c:	9808      	ldr	r0, [sp, #32]
 800fb7e:	b019      	add	sp, #100	; 0x64
 800fb80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb84:	4b91      	ldr	r3, [pc, #580]	; (800fdcc <_dtoa_r+0x2ec>)
 800fb86:	9308      	str	r3, [sp, #32]
 800fb88:	3303      	adds	r3, #3
 800fb8a:	e7f5      	b.n	800fb78 <_dtoa_r+0x98>
 800fb8c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800fb90:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800fb94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fb98:	2200      	movs	r2, #0
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	f7f0 ff7e 	bl	8000a9c <__aeabi_dcmpeq>
 800fba0:	4680      	mov	r8, r0
 800fba2:	b158      	cbz	r0, 800fbbc <_dtoa_r+0xdc>
 800fba4:	2301      	movs	r3, #1
 800fba6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800fba8:	6013      	str	r3, [r2, #0]
 800fbaa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	f000 8559 	beq.w	8010664 <_dtoa_r+0xb84>
 800fbb2:	4888      	ldr	r0, [pc, #544]	; (800fdd4 <_dtoa_r+0x2f4>)
 800fbb4:	6018      	str	r0, [r3, #0]
 800fbb6:	1e43      	subs	r3, r0, #1
 800fbb8:	9308      	str	r3, [sp, #32]
 800fbba:	e7df      	b.n	800fb7c <_dtoa_r+0x9c>
 800fbbc:	ab16      	add	r3, sp, #88	; 0x58
 800fbbe:	9301      	str	r3, [sp, #4]
 800fbc0:	ab17      	add	r3, sp, #92	; 0x5c
 800fbc2:	9300      	str	r3, [sp, #0]
 800fbc4:	4628      	mov	r0, r5
 800fbc6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fbca:	f001 faf1 	bl	80111b0 <__d2b>
 800fbce:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800fbd2:	4682      	mov	sl, r0
 800fbd4:	2c00      	cmp	r4, #0
 800fbd6:	d07e      	beq.n	800fcd6 <_dtoa_r+0x1f6>
 800fbd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fbdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fbde:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800fbe2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fbe6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800fbea:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800fbee:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	4b78      	ldr	r3, [pc, #480]	; (800fdd8 <_dtoa_r+0x2f8>)
 800fbf6:	f7f0 fb31 	bl	800025c <__aeabi_dsub>
 800fbfa:	a36b      	add	r3, pc, #428	; (adr r3, 800fda8 <_dtoa_r+0x2c8>)
 800fbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc00:	f7f0 fce4 	bl	80005cc <__aeabi_dmul>
 800fc04:	a36a      	add	r3, pc, #424	; (adr r3, 800fdb0 <_dtoa_r+0x2d0>)
 800fc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc0a:	f7f0 fb29 	bl	8000260 <__adddf3>
 800fc0e:	4606      	mov	r6, r0
 800fc10:	4620      	mov	r0, r4
 800fc12:	460f      	mov	r7, r1
 800fc14:	f7f0 fc70 	bl	80004f8 <__aeabi_i2d>
 800fc18:	a367      	add	r3, pc, #412	; (adr r3, 800fdb8 <_dtoa_r+0x2d8>)
 800fc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc1e:	f7f0 fcd5 	bl	80005cc <__aeabi_dmul>
 800fc22:	4602      	mov	r2, r0
 800fc24:	460b      	mov	r3, r1
 800fc26:	4630      	mov	r0, r6
 800fc28:	4639      	mov	r1, r7
 800fc2a:	f7f0 fb19 	bl	8000260 <__adddf3>
 800fc2e:	4606      	mov	r6, r0
 800fc30:	460f      	mov	r7, r1
 800fc32:	f7f0 ff7b 	bl	8000b2c <__aeabi_d2iz>
 800fc36:	2200      	movs	r2, #0
 800fc38:	4681      	mov	r9, r0
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	4630      	mov	r0, r6
 800fc3e:	4639      	mov	r1, r7
 800fc40:	f7f0 ff36 	bl	8000ab0 <__aeabi_dcmplt>
 800fc44:	b148      	cbz	r0, 800fc5a <_dtoa_r+0x17a>
 800fc46:	4648      	mov	r0, r9
 800fc48:	f7f0 fc56 	bl	80004f8 <__aeabi_i2d>
 800fc4c:	4632      	mov	r2, r6
 800fc4e:	463b      	mov	r3, r7
 800fc50:	f7f0 ff24 	bl	8000a9c <__aeabi_dcmpeq>
 800fc54:	b908      	cbnz	r0, 800fc5a <_dtoa_r+0x17a>
 800fc56:	f109 39ff 	add.w	r9, r9, #4294967295
 800fc5a:	f1b9 0f16 	cmp.w	r9, #22
 800fc5e:	d857      	bhi.n	800fd10 <_dtoa_r+0x230>
 800fc60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fc64:	4b5d      	ldr	r3, [pc, #372]	; (800fddc <_dtoa_r+0x2fc>)
 800fc66:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800fc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc6e:	f7f0 ff1f 	bl	8000ab0 <__aeabi_dcmplt>
 800fc72:	2800      	cmp	r0, #0
 800fc74:	d04e      	beq.n	800fd14 <_dtoa_r+0x234>
 800fc76:	2300      	movs	r3, #0
 800fc78:	f109 39ff 	add.w	r9, r9, #4294967295
 800fc7c:	930f      	str	r3, [sp, #60]	; 0x3c
 800fc7e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800fc80:	1b1c      	subs	r4, r3, r4
 800fc82:	1e63      	subs	r3, r4, #1
 800fc84:	9309      	str	r3, [sp, #36]	; 0x24
 800fc86:	bf49      	itett	mi
 800fc88:	f1c4 0301 	rsbmi	r3, r4, #1
 800fc8c:	2300      	movpl	r3, #0
 800fc8e:	9306      	strmi	r3, [sp, #24]
 800fc90:	2300      	movmi	r3, #0
 800fc92:	bf54      	ite	pl
 800fc94:	9306      	strpl	r3, [sp, #24]
 800fc96:	9309      	strmi	r3, [sp, #36]	; 0x24
 800fc98:	f1b9 0f00 	cmp.w	r9, #0
 800fc9c:	db3c      	blt.n	800fd18 <_dtoa_r+0x238>
 800fc9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fca0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800fca4:	444b      	add	r3, r9
 800fca6:	9309      	str	r3, [sp, #36]	; 0x24
 800fca8:	2300      	movs	r3, #0
 800fcaa:	930a      	str	r3, [sp, #40]	; 0x28
 800fcac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fcae:	2b09      	cmp	r3, #9
 800fcb0:	d86c      	bhi.n	800fd8c <_dtoa_r+0x2ac>
 800fcb2:	2b05      	cmp	r3, #5
 800fcb4:	bfc4      	itt	gt
 800fcb6:	3b04      	subgt	r3, #4
 800fcb8:	9322      	strgt	r3, [sp, #136]	; 0x88
 800fcba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fcbc:	bfc8      	it	gt
 800fcbe:	2400      	movgt	r4, #0
 800fcc0:	f1a3 0302 	sub.w	r3, r3, #2
 800fcc4:	bfd8      	it	le
 800fcc6:	2401      	movle	r4, #1
 800fcc8:	2b03      	cmp	r3, #3
 800fcca:	f200 808b 	bhi.w	800fde4 <_dtoa_r+0x304>
 800fcce:	e8df f003 	tbb	[pc, r3]
 800fcd2:	4f2d      	.short	0x4f2d
 800fcd4:	5b4d      	.short	0x5b4d
 800fcd6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800fcda:	441c      	add	r4, r3
 800fcdc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800fce0:	2b20      	cmp	r3, #32
 800fce2:	bfc3      	ittte	gt
 800fce4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fce8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800fcec:	fa09 f303 	lslgt.w	r3, r9, r3
 800fcf0:	f1c3 0320 	rsble	r3, r3, #32
 800fcf4:	bfc6      	itte	gt
 800fcf6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800fcfa:	4318      	orrgt	r0, r3
 800fcfc:	fa06 f003 	lslle.w	r0, r6, r3
 800fd00:	f7f0 fbea 	bl	80004d8 <__aeabi_ui2d>
 800fd04:	2301      	movs	r3, #1
 800fd06:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800fd0a:	3c01      	subs	r4, #1
 800fd0c:	9313      	str	r3, [sp, #76]	; 0x4c
 800fd0e:	e770      	b.n	800fbf2 <_dtoa_r+0x112>
 800fd10:	2301      	movs	r3, #1
 800fd12:	e7b3      	b.n	800fc7c <_dtoa_r+0x19c>
 800fd14:	900f      	str	r0, [sp, #60]	; 0x3c
 800fd16:	e7b2      	b.n	800fc7e <_dtoa_r+0x19e>
 800fd18:	9b06      	ldr	r3, [sp, #24]
 800fd1a:	eba3 0309 	sub.w	r3, r3, r9
 800fd1e:	9306      	str	r3, [sp, #24]
 800fd20:	f1c9 0300 	rsb	r3, r9, #0
 800fd24:	930a      	str	r3, [sp, #40]	; 0x28
 800fd26:	2300      	movs	r3, #0
 800fd28:	930e      	str	r3, [sp, #56]	; 0x38
 800fd2a:	e7bf      	b.n	800fcac <_dtoa_r+0x1cc>
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	930b      	str	r3, [sp, #44]	; 0x2c
 800fd30:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	dc59      	bgt.n	800fdea <_dtoa_r+0x30a>
 800fd36:	f04f 0b01 	mov.w	fp, #1
 800fd3a:	465b      	mov	r3, fp
 800fd3c:	f8cd b008 	str.w	fp, [sp, #8]
 800fd40:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800fd44:	2200      	movs	r2, #0
 800fd46:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800fd48:	6042      	str	r2, [r0, #4]
 800fd4a:	2204      	movs	r2, #4
 800fd4c:	f102 0614 	add.w	r6, r2, #20
 800fd50:	429e      	cmp	r6, r3
 800fd52:	6841      	ldr	r1, [r0, #4]
 800fd54:	d94f      	bls.n	800fdf6 <_dtoa_r+0x316>
 800fd56:	4628      	mov	r0, r5
 800fd58:	f000 ff04 	bl	8010b64 <_Balloc>
 800fd5c:	9008      	str	r0, [sp, #32]
 800fd5e:	2800      	cmp	r0, #0
 800fd60:	d14d      	bne.n	800fdfe <_dtoa_r+0x31e>
 800fd62:	4602      	mov	r2, r0
 800fd64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fd68:	4b1d      	ldr	r3, [pc, #116]	; (800fde0 <_dtoa_r+0x300>)
 800fd6a:	e6cd      	b.n	800fb08 <_dtoa_r+0x28>
 800fd6c:	2301      	movs	r3, #1
 800fd6e:	e7de      	b.n	800fd2e <_dtoa_r+0x24e>
 800fd70:	2300      	movs	r3, #0
 800fd72:	930b      	str	r3, [sp, #44]	; 0x2c
 800fd74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fd76:	eb09 0b03 	add.w	fp, r9, r3
 800fd7a:	f10b 0301 	add.w	r3, fp, #1
 800fd7e:	2b01      	cmp	r3, #1
 800fd80:	9302      	str	r3, [sp, #8]
 800fd82:	bfb8      	it	lt
 800fd84:	2301      	movlt	r3, #1
 800fd86:	e7dd      	b.n	800fd44 <_dtoa_r+0x264>
 800fd88:	2301      	movs	r3, #1
 800fd8a:	e7f2      	b.n	800fd72 <_dtoa_r+0x292>
 800fd8c:	2401      	movs	r4, #1
 800fd8e:	2300      	movs	r3, #0
 800fd90:	940b      	str	r4, [sp, #44]	; 0x2c
 800fd92:	9322      	str	r3, [sp, #136]	; 0x88
 800fd94:	f04f 3bff 	mov.w	fp, #4294967295
 800fd98:	2200      	movs	r2, #0
 800fd9a:	2312      	movs	r3, #18
 800fd9c:	f8cd b008 	str.w	fp, [sp, #8]
 800fda0:	9223      	str	r2, [sp, #140]	; 0x8c
 800fda2:	e7cf      	b.n	800fd44 <_dtoa_r+0x264>
 800fda4:	f3af 8000 	nop.w
 800fda8:	636f4361 	.word	0x636f4361
 800fdac:	3fd287a7 	.word	0x3fd287a7
 800fdb0:	8b60c8b3 	.word	0x8b60c8b3
 800fdb4:	3fc68a28 	.word	0x3fc68a28
 800fdb8:	509f79fb 	.word	0x509f79fb
 800fdbc:	3fd34413 	.word	0x3fd34413
 800fdc0:	08014396 	.word	0x08014396
 800fdc4:	080143ad 	.word	0x080143ad
 800fdc8:	7ff00000 	.word	0x7ff00000
 800fdcc:	08014392 	.word	0x08014392
 800fdd0:	08014389 	.word	0x08014389
 800fdd4:	08014366 	.word	0x08014366
 800fdd8:	3ff80000 	.word	0x3ff80000
 800fddc:	08014508 	.word	0x08014508
 800fde0:	0801440c 	.word	0x0801440c
 800fde4:	2301      	movs	r3, #1
 800fde6:	930b      	str	r3, [sp, #44]	; 0x2c
 800fde8:	e7d4      	b.n	800fd94 <_dtoa_r+0x2b4>
 800fdea:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800fdee:	465b      	mov	r3, fp
 800fdf0:	f8cd b008 	str.w	fp, [sp, #8]
 800fdf4:	e7a6      	b.n	800fd44 <_dtoa_r+0x264>
 800fdf6:	3101      	adds	r1, #1
 800fdf8:	6041      	str	r1, [r0, #4]
 800fdfa:	0052      	lsls	r2, r2, #1
 800fdfc:	e7a6      	b.n	800fd4c <_dtoa_r+0x26c>
 800fdfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fe00:	9a08      	ldr	r2, [sp, #32]
 800fe02:	601a      	str	r2, [r3, #0]
 800fe04:	9b02      	ldr	r3, [sp, #8]
 800fe06:	2b0e      	cmp	r3, #14
 800fe08:	f200 80a8 	bhi.w	800ff5c <_dtoa_r+0x47c>
 800fe0c:	2c00      	cmp	r4, #0
 800fe0e:	f000 80a5 	beq.w	800ff5c <_dtoa_r+0x47c>
 800fe12:	f1b9 0f00 	cmp.w	r9, #0
 800fe16:	dd34      	ble.n	800fe82 <_dtoa_r+0x3a2>
 800fe18:	4a9a      	ldr	r2, [pc, #616]	; (8010084 <_dtoa_r+0x5a4>)
 800fe1a:	f009 030f 	and.w	r3, r9, #15
 800fe1e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fe22:	f419 7f80 	tst.w	r9, #256	; 0x100
 800fe26:	e9d3 3400 	ldrd	r3, r4, [r3]
 800fe2a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800fe2e:	ea4f 1429 	mov.w	r4, r9, asr #4
 800fe32:	d016      	beq.n	800fe62 <_dtoa_r+0x382>
 800fe34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fe38:	4b93      	ldr	r3, [pc, #588]	; (8010088 <_dtoa_r+0x5a8>)
 800fe3a:	2703      	movs	r7, #3
 800fe3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fe40:	f7f0 fcee 	bl	8000820 <__aeabi_ddiv>
 800fe44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fe48:	f004 040f 	and.w	r4, r4, #15
 800fe4c:	4e8e      	ldr	r6, [pc, #568]	; (8010088 <_dtoa_r+0x5a8>)
 800fe4e:	b954      	cbnz	r4, 800fe66 <_dtoa_r+0x386>
 800fe50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fe54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fe58:	f7f0 fce2 	bl	8000820 <__aeabi_ddiv>
 800fe5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fe60:	e029      	b.n	800feb6 <_dtoa_r+0x3d6>
 800fe62:	2702      	movs	r7, #2
 800fe64:	e7f2      	b.n	800fe4c <_dtoa_r+0x36c>
 800fe66:	07e1      	lsls	r1, r4, #31
 800fe68:	d508      	bpl.n	800fe7c <_dtoa_r+0x39c>
 800fe6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fe6e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fe72:	f7f0 fbab 	bl	80005cc <__aeabi_dmul>
 800fe76:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800fe7a:	3701      	adds	r7, #1
 800fe7c:	1064      	asrs	r4, r4, #1
 800fe7e:	3608      	adds	r6, #8
 800fe80:	e7e5      	b.n	800fe4e <_dtoa_r+0x36e>
 800fe82:	f000 80a5 	beq.w	800ffd0 <_dtoa_r+0x4f0>
 800fe86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fe8a:	f1c9 0400 	rsb	r4, r9, #0
 800fe8e:	4b7d      	ldr	r3, [pc, #500]	; (8010084 <_dtoa_r+0x5a4>)
 800fe90:	f004 020f 	and.w	r2, r4, #15
 800fe94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe9c:	f7f0 fb96 	bl	80005cc <__aeabi_dmul>
 800fea0:	2702      	movs	r7, #2
 800fea2:	2300      	movs	r3, #0
 800fea4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fea8:	4e77      	ldr	r6, [pc, #476]	; (8010088 <_dtoa_r+0x5a8>)
 800feaa:	1124      	asrs	r4, r4, #4
 800feac:	2c00      	cmp	r4, #0
 800feae:	f040 8084 	bne.w	800ffba <_dtoa_r+0x4da>
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d1d2      	bne.n	800fe5c <_dtoa_r+0x37c>
 800feb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800feb8:	2b00      	cmp	r3, #0
 800feba:	f000 808b 	beq.w	800ffd4 <_dtoa_r+0x4f4>
 800febe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800fec2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800fec6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800feca:	2200      	movs	r2, #0
 800fecc:	4b6f      	ldr	r3, [pc, #444]	; (801008c <_dtoa_r+0x5ac>)
 800fece:	f7f0 fdef 	bl	8000ab0 <__aeabi_dcmplt>
 800fed2:	2800      	cmp	r0, #0
 800fed4:	d07e      	beq.n	800ffd4 <_dtoa_r+0x4f4>
 800fed6:	9b02      	ldr	r3, [sp, #8]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d07b      	beq.n	800ffd4 <_dtoa_r+0x4f4>
 800fedc:	f1bb 0f00 	cmp.w	fp, #0
 800fee0:	dd38      	ble.n	800ff54 <_dtoa_r+0x474>
 800fee2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fee6:	2200      	movs	r2, #0
 800fee8:	4b69      	ldr	r3, [pc, #420]	; (8010090 <_dtoa_r+0x5b0>)
 800feea:	f7f0 fb6f 	bl	80005cc <__aeabi_dmul>
 800feee:	465c      	mov	r4, fp
 800fef0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fef4:	f109 38ff 	add.w	r8, r9, #4294967295
 800fef8:	3701      	adds	r7, #1
 800fefa:	4638      	mov	r0, r7
 800fefc:	f7f0 fafc 	bl	80004f8 <__aeabi_i2d>
 800ff00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff04:	f7f0 fb62 	bl	80005cc <__aeabi_dmul>
 800ff08:	2200      	movs	r2, #0
 800ff0a:	4b62      	ldr	r3, [pc, #392]	; (8010094 <_dtoa_r+0x5b4>)
 800ff0c:	f7f0 f9a8 	bl	8000260 <__adddf3>
 800ff10:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ff14:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ff18:	9611      	str	r6, [sp, #68]	; 0x44
 800ff1a:	2c00      	cmp	r4, #0
 800ff1c:	d15d      	bne.n	800ffda <_dtoa_r+0x4fa>
 800ff1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ff22:	2200      	movs	r2, #0
 800ff24:	4b5c      	ldr	r3, [pc, #368]	; (8010098 <_dtoa_r+0x5b8>)
 800ff26:	f7f0 f999 	bl	800025c <__aeabi_dsub>
 800ff2a:	4602      	mov	r2, r0
 800ff2c:	460b      	mov	r3, r1
 800ff2e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ff32:	4633      	mov	r3, r6
 800ff34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ff36:	f7f0 fdd9 	bl	8000aec <__aeabi_dcmpgt>
 800ff3a:	2800      	cmp	r0, #0
 800ff3c:	f040 829e 	bne.w	801047c <_dtoa_r+0x99c>
 800ff40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ff44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ff46:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ff4a:	f7f0 fdb1 	bl	8000ab0 <__aeabi_dcmplt>
 800ff4e:	2800      	cmp	r0, #0
 800ff50:	f040 8292 	bne.w	8010478 <_dtoa_r+0x998>
 800ff54:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800ff58:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ff5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	f2c0 8153 	blt.w	801020a <_dtoa_r+0x72a>
 800ff64:	f1b9 0f0e 	cmp.w	r9, #14
 800ff68:	f300 814f 	bgt.w	801020a <_dtoa_r+0x72a>
 800ff6c:	4b45      	ldr	r3, [pc, #276]	; (8010084 <_dtoa_r+0x5a4>)
 800ff6e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800ff72:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ff76:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800ff7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	f280 80db 	bge.w	8010138 <_dtoa_r+0x658>
 800ff82:	9b02      	ldr	r3, [sp, #8]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	f300 80d7 	bgt.w	8010138 <_dtoa_r+0x658>
 800ff8a:	f040 8274 	bne.w	8010476 <_dtoa_r+0x996>
 800ff8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ff92:	2200      	movs	r2, #0
 800ff94:	4b40      	ldr	r3, [pc, #256]	; (8010098 <_dtoa_r+0x5b8>)
 800ff96:	f7f0 fb19 	bl	80005cc <__aeabi_dmul>
 800ff9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff9e:	f7f0 fd9b 	bl	8000ad8 <__aeabi_dcmpge>
 800ffa2:	9c02      	ldr	r4, [sp, #8]
 800ffa4:	4626      	mov	r6, r4
 800ffa6:	2800      	cmp	r0, #0
 800ffa8:	f040 824a 	bne.w	8010440 <_dtoa_r+0x960>
 800ffac:	2331      	movs	r3, #49	; 0x31
 800ffae:	9f08      	ldr	r7, [sp, #32]
 800ffb0:	f109 0901 	add.w	r9, r9, #1
 800ffb4:	f807 3b01 	strb.w	r3, [r7], #1
 800ffb8:	e246      	b.n	8010448 <_dtoa_r+0x968>
 800ffba:	07e2      	lsls	r2, r4, #31
 800ffbc:	d505      	bpl.n	800ffca <_dtoa_r+0x4ea>
 800ffbe:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ffc2:	f7f0 fb03 	bl	80005cc <__aeabi_dmul>
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	3701      	adds	r7, #1
 800ffca:	1064      	asrs	r4, r4, #1
 800ffcc:	3608      	adds	r6, #8
 800ffce:	e76d      	b.n	800feac <_dtoa_r+0x3cc>
 800ffd0:	2702      	movs	r7, #2
 800ffd2:	e770      	b.n	800feb6 <_dtoa_r+0x3d6>
 800ffd4:	46c8      	mov	r8, r9
 800ffd6:	9c02      	ldr	r4, [sp, #8]
 800ffd8:	e78f      	b.n	800fefa <_dtoa_r+0x41a>
 800ffda:	9908      	ldr	r1, [sp, #32]
 800ffdc:	4b29      	ldr	r3, [pc, #164]	; (8010084 <_dtoa_r+0x5a4>)
 800ffde:	4421      	add	r1, r4
 800ffe0:	9112      	str	r1, [sp, #72]	; 0x48
 800ffe2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ffe4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ffe8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ffec:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fff0:	2900      	cmp	r1, #0
 800fff2:	d055      	beq.n	80100a0 <_dtoa_r+0x5c0>
 800fff4:	2000      	movs	r0, #0
 800fff6:	4929      	ldr	r1, [pc, #164]	; (801009c <_dtoa_r+0x5bc>)
 800fff8:	f7f0 fc12 	bl	8000820 <__aeabi_ddiv>
 800fffc:	463b      	mov	r3, r7
 800fffe:	4632      	mov	r2, r6
 8010000:	f7f0 f92c 	bl	800025c <__aeabi_dsub>
 8010004:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010008:	9f08      	ldr	r7, [sp, #32]
 801000a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801000e:	f7f0 fd8d 	bl	8000b2c <__aeabi_d2iz>
 8010012:	4604      	mov	r4, r0
 8010014:	f7f0 fa70 	bl	80004f8 <__aeabi_i2d>
 8010018:	4602      	mov	r2, r0
 801001a:	460b      	mov	r3, r1
 801001c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010020:	f7f0 f91c 	bl	800025c <__aeabi_dsub>
 8010024:	4602      	mov	r2, r0
 8010026:	460b      	mov	r3, r1
 8010028:	3430      	adds	r4, #48	; 0x30
 801002a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801002e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010032:	f807 4b01 	strb.w	r4, [r7], #1
 8010036:	f7f0 fd3b 	bl	8000ab0 <__aeabi_dcmplt>
 801003a:	2800      	cmp	r0, #0
 801003c:	d174      	bne.n	8010128 <_dtoa_r+0x648>
 801003e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010042:	2000      	movs	r0, #0
 8010044:	4911      	ldr	r1, [pc, #68]	; (801008c <_dtoa_r+0x5ac>)
 8010046:	f7f0 f909 	bl	800025c <__aeabi_dsub>
 801004a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801004e:	f7f0 fd2f 	bl	8000ab0 <__aeabi_dcmplt>
 8010052:	2800      	cmp	r0, #0
 8010054:	f040 80b6 	bne.w	80101c4 <_dtoa_r+0x6e4>
 8010058:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801005a:	429f      	cmp	r7, r3
 801005c:	f43f af7a 	beq.w	800ff54 <_dtoa_r+0x474>
 8010060:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010064:	2200      	movs	r2, #0
 8010066:	4b0a      	ldr	r3, [pc, #40]	; (8010090 <_dtoa_r+0x5b0>)
 8010068:	f7f0 fab0 	bl	80005cc <__aeabi_dmul>
 801006c:	2200      	movs	r2, #0
 801006e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010072:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010076:	4b06      	ldr	r3, [pc, #24]	; (8010090 <_dtoa_r+0x5b0>)
 8010078:	f7f0 faa8 	bl	80005cc <__aeabi_dmul>
 801007c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010080:	e7c3      	b.n	801000a <_dtoa_r+0x52a>
 8010082:	bf00      	nop
 8010084:	08014508 	.word	0x08014508
 8010088:	080144e0 	.word	0x080144e0
 801008c:	3ff00000 	.word	0x3ff00000
 8010090:	40240000 	.word	0x40240000
 8010094:	401c0000 	.word	0x401c0000
 8010098:	40140000 	.word	0x40140000
 801009c:	3fe00000 	.word	0x3fe00000
 80100a0:	4630      	mov	r0, r6
 80100a2:	4639      	mov	r1, r7
 80100a4:	f7f0 fa92 	bl	80005cc <__aeabi_dmul>
 80100a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80100aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80100ae:	9c08      	ldr	r4, [sp, #32]
 80100b0:	9314      	str	r3, [sp, #80]	; 0x50
 80100b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80100b6:	f7f0 fd39 	bl	8000b2c <__aeabi_d2iz>
 80100ba:	9015      	str	r0, [sp, #84]	; 0x54
 80100bc:	f7f0 fa1c 	bl	80004f8 <__aeabi_i2d>
 80100c0:	4602      	mov	r2, r0
 80100c2:	460b      	mov	r3, r1
 80100c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80100c8:	f7f0 f8c8 	bl	800025c <__aeabi_dsub>
 80100cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80100ce:	4606      	mov	r6, r0
 80100d0:	3330      	adds	r3, #48	; 0x30
 80100d2:	f804 3b01 	strb.w	r3, [r4], #1
 80100d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80100d8:	460f      	mov	r7, r1
 80100da:	429c      	cmp	r4, r3
 80100dc:	f04f 0200 	mov.w	r2, #0
 80100e0:	d124      	bne.n	801012c <_dtoa_r+0x64c>
 80100e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80100e6:	4bb3      	ldr	r3, [pc, #716]	; (80103b4 <_dtoa_r+0x8d4>)
 80100e8:	f7f0 f8ba 	bl	8000260 <__adddf3>
 80100ec:	4602      	mov	r2, r0
 80100ee:	460b      	mov	r3, r1
 80100f0:	4630      	mov	r0, r6
 80100f2:	4639      	mov	r1, r7
 80100f4:	f7f0 fcfa 	bl	8000aec <__aeabi_dcmpgt>
 80100f8:	2800      	cmp	r0, #0
 80100fa:	d162      	bne.n	80101c2 <_dtoa_r+0x6e2>
 80100fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010100:	2000      	movs	r0, #0
 8010102:	49ac      	ldr	r1, [pc, #688]	; (80103b4 <_dtoa_r+0x8d4>)
 8010104:	f7f0 f8aa 	bl	800025c <__aeabi_dsub>
 8010108:	4602      	mov	r2, r0
 801010a:	460b      	mov	r3, r1
 801010c:	4630      	mov	r0, r6
 801010e:	4639      	mov	r1, r7
 8010110:	f7f0 fcce 	bl	8000ab0 <__aeabi_dcmplt>
 8010114:	2800      	cmp	r0, #0
 8010116:	f43f af1d 	beq.w	800ff54 <_dtoa_r+0x474>
 801011a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801011c:	1e7b      	subs	r3, r7, #1
 801011e:	9314      	str	r3, [sp, #80]	; 0x50
 8010120:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8010124:	2b30      	cmp	r3, #48	; 0x30
 8010126:	d0f8      	beq.n	801011a <_dtoa_r+0x63a>
 8010128:	46c1      	mov	r9, r8
 801012a:	e03a      	b.n	80101a2 <_dtoa_r+0x6c2>
 801012c:	4ba2      	ldr	r3, [pc, #648]	; (80103b8 <_dtoa_r+0x8d8>)
 801012e:	f7f0 fa4d 	bl	80005cc <__aeabi_dmul>
 8010132:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010136:	e7bc      	b.n	80100b2 <_dtoa_r+0x5d2>
 8010138:	9f08      	ldr	r7, [sp, #32]
 801013a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801013e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010142:	f7f0 fb6d 	bl	8000820 <__aeabi_ddiv>
 8010146:	f7f0 fcf1 	bl	8000b2c <__aeabi_d2iz>
 801014a:	4604      	mov	r4, r0
 801014c:	f7f0 f9d4 	bl	80004f8 <__aeabi_i2d>
 8010150:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010154:	f7f0 fa3a 	bl	80005cc <__aeabi_dmul>
 8010158:	f104 0630 	add.w	r6, r4, #48	; 0x30
 801015c:	460b      	mov	r3, r1
 801015e:	4602      	mov	r2, r0
 8010160:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010164:	f7f0 f87a 	bl	800025c <__aeabi_dsub>
 8010168:	f807 6b01 	strb.w	r6, [r7], #1
 801016c:	9e08      	ldr	r6, [sp, #32]
 801016e:	9b02      	ldr	r3, [sp, #8]
 8010170:	1bbe      	subs	r6, r7, r6
 8010172:	42b3      	cmp	r3, r6
 8010174:	d13a      	bne.n	80101ec <_dtoa_r+0x70c>
 8010176:	4602      	mov	r2, r0
 8010178:	460b      	mov	r3, r1
 801017a:	f7f0 f871 	bl	8000260 <__adddf3>
 801017e:	4602      	mov	r2, r0
 8010180:	460b      	mov	r3, r1
 8010182:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010186:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801018a:	f7f0 fcaf 	bl	8000aec <__aeabi_dcmpgt>
 801018e:	bb58      	cbnz	r0, 80101e8 <_dtoa_r+0x708>
 8010190:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010194:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010198:	f7f0 fc80 	bl	8000a9c <__aeabi_dcmpeq>
 801019c:	b108      	cbz	r0, 80101a2 <_dtoa_r+0x6c2>
 801019e:	07e1      	lsls	r1, r4, #31
 80101a0:	d422      	bmi.n	80101e8 <_dtoa_r+0x708>
 80101a2:	4628      	mov	r0, r5
 80101a4:	4651      	mov	r1, sl
 80101a6:	f000 fd1d 	bl	8010be4 <_Bfree>
 80101aa:	2300      	movs	r3, #0
 80101ac:	703b      	strb	r3, [r7, #0]
 80101ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80101b0:	f109 0001 	add.w	r0, r9, #1
 80101b4:	6018      	str	r0, [r3, #0]
 80101b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	f43f acdf 	beq.w	800fb7c <_dtoa_r+0x9c>
 80101be:	601f      	str	r7, [r3, #0]
 80101c0:	e4dc      	b.n	800fb7c <_dtoa_r+0x9c>
 80101c2:	4627      	mov	r7, r4
 80101c4:	463b      	mov	r3, r7
 80101c6:	461f      	mov	r7, r3
 80101c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80101cc:	2a39      	cmp	r2, #57	; 0x39
 80101ce:	d107      	bne.n	80101e0 <_dtoa_r+0x700>
 80101d0:	9a08      	ldr	r2, [sp, #32]
 80101d2:	429a      	cmp	r2, r3
 80101d4:	d1f7      	bne.n	80101c6 <_dtoa_r+0x6e6>
 80101d6:	2230      	movs	r2, #48	; 0x30
 80101d8:	9908      	ldr	r1, [sp, #32]
 80101da:	f108 0801 	add.w	r8, r8, #1
 80101de:	700a      	strb	r2, [r1, #0]
 80101e0:	781a      	ldrb	r2, [r3, #0]
 80101e2:	3201      	adds	r2, #1
 80101e4:	701a      	strb	r2, [r3, #0]
 80101e6:	e79f      	b.n	8010128 <_dtoa_r+0x648>
 80101e8:	46c8      	mov	r8, r9
 80101ea:	e7eb      	b.n	80101c4 <_dtoa_r+0x6e4>
 80101ec:	2200      	movs	r2, #0
 80101ee:	4b72      	ldr	r3, [pc, #456]	; (80103b8 <_dtoa_r+0x8d8>)
 80101f0:	f7f0 f9ec 	bl	80005cc <__aeabi_dmul>
 80101f4:	4602      	mov	r2, r0
 80101f6:	460b      	mov	r3, r1
 80101f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80101fc:	2200      	movs	r2, #0
 80101fe:	2300      	movs	r3, #0
 8010200:	f7f0 fc4c 	bl	8000a9c <__aeabi_dcmpeq>
 8010204:	2800      	cmp	r0, #0
 8010206:	d098      	beq.n	801013a <_dtoa_r+0x65a>
 8010208:	e7cb      	b.n	80101a2 <_dtoa_r+0x6c2>
 801020a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801020c:	2a00      	cmp	r2, #0
 801020e:	f000 80cd 	beq.w	80103ac <_dtoa_r+0x8cc>
 8010212:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010214:	2a01      	cmp	r2, #1
 8010216:	f300 80af 	bgt.w	8010378 <_dtoa_r+0x898>
 801021a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801021c:	2a00      	cmp	r2, #0
 801021e:	f000 80a7 	beq.w	8010370 <_dtoa_r+0x890>
 8010222:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010226:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010228:	9f06      	ldr	r7, [sp, #24]
 801022a:	9a06      	ldr	r2, [sp, #24]
 801022c:	2101      	movs	r1, #1
 801022e:	441a      	add	r2, r3
 8010230:	9206      	str	r2, [sp, #24]
 8010232:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010234:	4628      	mov	r0, r5
 8010236:	441a      	add	r2, r3
 8010238:	9209      	str	r2, [sp, #36]	; 0x24
 801023a:	f000 fd8d 	bl	8010d58 <__i2b>
 801023e:	4606      	mov	r6, r0
 8010240:	2f00      	cmp	r7, #0
 8010242:	dd0c      	ble.n	801025e <_dtoa_r+0x77e>
 8010244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010246:	2b00      	cmp	r3, #0
 8010248:	dd09      	ble.n	801025e <_dtoa_r+0x77e>
 801024a:	42bb      	cmp	r3, r7
 801024c:	bfa8      	it	ge
 801024e:	463b      	movge	r3, r7
 8010250:	9a06      	ldr	r2, [sp, #24]
 8010252:	1aff      	subs	r7, r7, r3
 8010254:	1ad2      	subs	r2, r2, r3
 8010256:	9206      	str	r2, [sp, #24]
 8010258:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801025a:	1ad3      	subs	r3, r2, r3
 801025c:	9309      	str	r3, [sp, #36]	; 0x24
 801025e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010260:	b1f3      	cbz	r3, 80102a0 <_dtoa_r+0x7c0>
 8010262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010264:	2b00      	cmp	r3, #0
 8010266:	f000 80a9 	beq.w	80103bc <_dtoa_r+0x8dc>
 801026a:	2c00      	cmp	r4, #0
 801026c:	dd10      	ble.n	8010290 <_dtoa_r+0x7b0>
 801026e:	4631      	mov	r1, r6
 8010270:	4622      	mov	r2, r4
 8010272:	4628      	mov	r0, r5
 8010274:	f000 fe2a 	bl	8010ecc <__pow5mult>
 8010278:	4652      	mov	r2, sl
 801027a:	4601      	mov	r1, r0
 801027c:	4606      	mov	r6, r0
 801027e:	4628      	mov	r0, r5
 8010280:	f000 fd80 	bl	8010d84 <__multiply>
 8010284:	4680      	mov	r8, r0
 8010286:	4651      	mov	r1, sl
 8010288:	4628      	mov	r0, r5
 801028a:	f000 fcab 	bl	8010be4 <_Bfree>
 801028e:	46c2      	mov	sl, r8
 8010290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010292:	1b1a      	subs	r2, r3, r4
 8010294:	d004      	beq.n	80102a0 <_dtoa_r+0x7c0>
 8010296:	4651      	mov	r1, sl
 8010298:	4628      	mov	r0, r5
 801029a:	f000 fe17 	bl	8010ecc <__pow5mult>
 801029e:	4682      	mov	sl, r0
 80102a0:	2101      	movs	r1, #1
 80102a2:	4628      	mov	r0, r5
 80102a4:	f000 fd58 	bl	8010d58 <__i2b>
 80102a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80102aa:	4604      	mov	r4, r0
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	f340 8087 	ble.w	80103c0 <_dtoa_r+0x8e0>
 80102b2:	461a      	mov	r2, r3
 80102b4:	4601      	mov	r1, r0
 80102b6:	4628      	mov	r0, r5
 80102b8:	f000 fe08 	bl	8010ecc <__pow5mult>
 80102bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80102be:	4604      	mov	r4, r0
 80102c0:	2b01      	cmp	r3, #1
 80102c2:	f340 8080 	ble.w	80103c6 <_dtoa_r+0x8e6>
 80102c6:	f04f 0800 	mov.w	r8, #0
 80102ca:	6923      	ldr	r3, [r4, #16]
 80102cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80102d0:	6918      	ldr	r0, [r3, #16]
 80102d2:	f000 fcf3 	bl	8010cbc <__hi0bits>
 80102d6:	f1c0 0020 	rsb	r0, r0, #32
 80102da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102dc:	4418      	add	r0, r3
 80102de:	f010 001f 	ands.w	r0, r0, #31
 80102e2:	f000 8092 	beq.w	801040a <_dtoa_r+0x92a>
 80102e6:	f1c0 0320 	rsb	r3, r0, #32
 80102ea:	2b04      	cmp	r3, #4
 80102ec:	f340 808a 	ble.w	8010404 <_dtoa_r+0x924>
 80102f0:	f1c0 001c 	rsb	r0, r0, #28
 80102f4:	9b06      	ldr	r3, [sp, #24]
 80102f6:	4407      	add	r7, r0
 80102f8:	4403      	add	r3, r0
 80102fa:	9306      	str	r3, [sp, #24]
 80102fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102fe:	4403      	add	r3, r0
 8010300:	9309      	str	r3, [sp, #36]	; 0x24
 8010302:	9b06      	ldr	r3, [sp, #24]
 8010304:	2b00      	cmp	r3, #0
 8010306:	dd05      	ble.n	8010314 <_dtoa_r+0x834>
 8010308:	4651      	mov	r1, sl
 801030a:	461a      	mov	r2, r3
 801030c:	4628      	mov	r0, r5
 801030e:	f000 fe37 	bl	8010f80 <__lshift>
 8010312:	4682      	mov	sl, r0
 8010314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010316:	2b00      	cmp	r3, #0
 8010318:	dd05      	ble.n	8010326 <_dtoa_r+0x846>
 801031a:	4621      	mov	r1, r4
 801031c:	461a      	mov	r2, r3
 801031e:	4628      	mov	r0, r5
 8010320:	f000 fe2e 	bl	8010f80 <__lshift>
 8010324:	4604      	mov	r4, r0
 8010326:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010328:	2b00      	cmp	r3, #0
 801032a:	d070      	beq.n	801040e <_dtoa_r+0x92e>
 801032c:	4621      	mov	r1, r4
 801032e:	4650      	mov	r0, sl
 8010330:	f000 fe92 	bl	8011058 <__mcmp>
 8010334:	2800      	cmp	r0, #0
 8010336:	da6a      	bge.n	801040e <_dtoa_r+0x92e>
 8010338:	2300      	movs	r3, #0
 801033a:	4651      	mov	r1, sl
 801033c:	220a      	movs	r2, #10
 801033e:	4628      	mov	r0, r5
 8010340:	f000 fc72 	bl	8010c28 <__multadd>
 8010344:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010346:	4682      	mov	sl, r0
 8010348:	f109 39ff 	add.w	r9, r9, #4294967295
 801034c:	2b00      	cmp	r3, #0
 801034e:	f000 8193 	beq.w	8010678 <_dtoa_r+0xb98>
 8010352:	4631      	mov	r1, r6
 8010354:	2300      	movs	r3, #0
 8010356:	220a      	movs	r2, #10
 8010358:	4628      	mov	r0, r5
 801035a:	f000 fc65 	bl	8010c28 <__multadd>
 801035e:	f1bb 0f00 	cmp.w	fp, #0
 8010362:	4606      	mov	r6, r0
 8010364:	f300 8093 	bgt.w	801048e <_dtoa_r+0x9ae>
 8010368:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801036a:	2b02      	cmp	r3, #2
 801036c:	dc57      	bgt.n	801041e <_dtoa_r+0x93e>
 801036e:	e08e      	b.n	801048e <_dtoa_r+0x9ae>
 8010370:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010372:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010376:	e756      	b.n	8010226 <_dtoa_r+0x746>
 8010378:	9b02      	ldr	r3, [sp, #8]
 801037a:	1e5c      	subs	r4, r3, #1
 801037c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801037e:	42a3      	cmp	r3, r4
 8010380:	bfb7      	itett	lt
 8010382:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010384:	1b1c      	subge	r4, r3, r4
 8010386:	1ae2      	sublt	r2, r4, r3
 8010388:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801038a:	bfbe      	ittt	lt
 801038c:	940a      	strlt	r4, [sp, #40]	; 0x28
 801038e:	189b      	addlt	r3, r3, r2
 8010390:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010392:	9b02      	ldr	r3, [sp, #8]
 8010394:	bfb8      	it	lt
 8010396:	2400      	movlt	r4, #0
 8010398:	2b00      	cmp	r3, #0
 801039a:	bfbb      	ittet	lt
 801039c:	9b06      	ldrlt	r3, [sp, #24]
 801039e:	9a02      	ldrlt	r2, [sp, #8]
 80103a0:	9f06      	ldrge	r7, [sp, #24]
 80103a2:	1a9f      	sublt	r7, r3, r2
 80103a4:	bfac      	ite	ge
 80103a6:	9b02      	ldrge	r3, [sp, #8]
 80103a8:	2300      	movlt	r3, #0
 80103aa:	e73e      	b.n	801022a <_dtoa_r+0x74a>
 80103ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80103ae:	9f06      	ldr	r7, [sp, #24]
 80103b0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80103b2:	e745      	b.n	8010240 <_dtoa_r+0x760>
 80103b4:	3fe00000 	.word	0x3fe00000
 80103b8:	40240000 	.word	0x40240000
 80103bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80103be:	e76a      	b.n	8010296 <_dtoa_r+0x7b6>
 80103c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80103c2:	2b01      	cmp	r3, #1
 80103c4:	dc19      	bgt.n	80103fa <_dtoa_r+0x91a>
 80103c6:	9b04      	ldr	r3, [sp, #16]
 80103c8:	b9bb      	cbnz	r3, 80103fa <_dtoa_r+0x91a>
 80103ca:	9b05      	ldr	r3, [sp, #20]
 80103cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80103d0:	b99b      	cbnz	r3, 80103fa <_dtoa_r+0x91a>
 80103d2:	9b05      	ldr	r3, [sp, #20]
 80103d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80103d8:	0d1b      	lsrs	r3, r3, #20
 80103da:	051b      	lsls	r3, r3, #20
 80103dc:	b183      	cbz	r3, 8010400 <_dtoa_r+0x920>
 80103de:	f04f 0801 	mov.w	r8, #1
 80103e2:	9b06      	ldr	r3, [sp, #24]
 80103e4:	3301      	adds	r3, #1
 80103e6:	9306      	str	r3, [sp, #24]
 80103e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103ea:	3301      	adds	r3, #1
 80103ec:	9309      	str	r3, [sp, #36]	; 0x24
 80103ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	f47f af6a 	bne.w	80102ca <_dtoa_r+0x7ea>
 80103f6:	2001      	movs	r0, #1
 80103f8:	e76f      	b.n	80102da <_dtoa_r+0x7fa>
 80103fa:	f04f 0800 	mov.w	r8, #0
 80103fe:	e7f6      	b.n	80103ee <_dtoa_r+0x90e>
 8010400:	4698      	mov	r8, r3
 8010402:	e7f4      	b.n	80103ee <_dtoa_r+0x90e>
 8010404:	f43f af7d 	beq.w	8010302 <_dtoa_r+0x822>
 8010408:	4618      	mov	r0, r3
 801040a:	301c      	adds	r0, #28
 801040c:	e772      	b.n	80102f4 <_dtoa_r+0x814>
 801040e:	9b02      	ldr	r3, [sp, #8]
 8010410:	2b00      	cmp	r3, #0
 8010412:	dc36      	bgt.n	8010482 <_dtoa_r+0x9a2>
 8010414:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010416:	2b02      	cmp	r3, #2
 8010418:	dd33      	ble.n	8010482 <_dtoa_r+0x9a2>
 801041a:	f8dd b008 	ldr.w	fp, [sp, #8]
 801041e:	f1bb 0f00 	cmp.w	fp, #0
 8010422:	d10d      	bne.n	8010440 <_dtoa_r+0x960>
 8010424:	4621      	mov	r1, r4
 8010426:	465b      	mov	r3, fp
 8010428:	2205      	movs	r2, #5
 801042a:	4628      	mov	r0, r5
 801042c:	f000 fbfc 	bl	8010c28 <__multadd>
 8010430:	4601      	mov	r1, r0
 8010432:	4604      	mov	r4, r0
 8010434:	4650      	mov	r0, sl
 8010436:	f000 fe0f 	bl	8011058 <__mcmp>
 801043a:	2800      	cmp	r0, #0
 801043c:	f73f adb6 	bgt.w	800ffac <_dtoa_r+0x4cc>
 8010440:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010442:	9f08      	ldr	r7, [sp, #32]
 8010444:	ea6f 0903 	mvn.w	r9, r3
 8010448:	f04f 0800 	mov.w	r8, #0
 801044c:	4621      	mov	r1, r4
 801044e:	4628      	mov	r0, r5
 8010450:	f000 fbc8 	bl	8010be4 <_Bfree>
 8010454:	2e00      	cmp	r6, #0
 8010456:	f43f aea4 	beq.w	80101a2 <_dtoa_r+0x6c2>
 801045a:	f1b8 0f00 	cmp.w	r8, #0
 801045e:	d005      	beq.n	801046c <_dtoa_r+0x98c>
 8010460:	45b0      	cmp	r8, r6
 8010462:	d003      	beq.n	801046c <_dtoa_r+0x98c>
 8010464:	4641      	mov	r1, r8
 8010466:	4628      	mov	r0, r5
 8010468:	f000 fbbc 	bl	8010be4 <_Bfree>
 801046c:	4631      	mov	r1, r6
 801046e:	4628      	mov	r0, r5
 8010470:	f000 fbb8 	bl	8010be4 <_Bfree>
 8010474:	e695      	b.n	80101a2 <_dtoa_r+0x6c2>
 8010476:	2400      	movs	r4, #0
 8010478:	4626      	mov	r6, r4
 801047a:	e7e1      	b.n	8010440 <_dtoa_r+0x960>
 801047c:	46c1      	mov	r9, r8
 801047e:	4626      	mov	r6, r4
 8010480:	e594      	b.n	800ffac <_dtoa_r+0x4cc>
 8010482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010484:	f8dd b008 	ldr.w	fp, [sp, #8]
 8010488:	2b00      	cmp	r3, #0
 801048a:	f000 80fc 	beq.w	8010686 <_dtoa_r+0xba6>
 801048e:	2f00      	cmp	r7, #0
 8010490:	dd05      	ble.n	801049e <_dtoa_r+0x9be>
 8010492:	4631      	mov	r1, r6
 8010494:	463a      	mov	r2, r7
 8010496:	4628      	mov	r0, r5
 8010498:	f000 fd72 	bl	8010f80 <__lshift>
 801049c:	4606      	mov	r6, r0
 801049e:	f1b8 0f00 	cmp.w	r8, #0
 80104a2:	d05c      	beq.n	801055e <_dtoa_r+0xa7e>
 80104a4:	4628      	mov	r0, r5
 80104a6:	6871      	ldr	r1, [r6, #4]
 80104a8:	f000 fb5c 	bl	8010b64 <_Balloc>
 80104ac:	4607      	mov	r7, r0
 80104ae:	b928      	cbnz	r0, 80104bc <_dtoa_r+0x9dc>
 80104b0:	4602      	mov	r2, r0
 80104b2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80104b6:	4b7e      	ldr	r3, [pc, #504]	; (80106b0 <_dtoa_r+0xbd0>)
 80104b8:	f7ff bb26 	b.w	800fb08 <_dtoa_r+0x28>
 80104bc:	6932      	ldr	r2, [r6, #16]
 80104be:	f106 010c 	add.w	r1, r6, #12
 80104c2:	3202      	adds	r2, #2
 80104c4:	0092      	lsls	r2, r2, #2
 80104c6:	300c      	adds	r0, #12
 80104c8:	f7fe fb72 	bl	800ebb0 <memcpy>
 80104cc:	2201      	movs	r2, #1
 80104ce:	4639      	mov	r1, r7
 80104d0:	4628      	mov	r0, r5
 80104d2:	f000 fd55 	bl	8010f80 <__lshift>
 80104d6:	46b0      	mov	r8, r6
 80104d8:	4606      	mov	r6, r0
 80104da:	9b08      	ldr	r3, [sp, #32]
 80104dc:	3301      	adds	r3, #1
 80104de:	9302      	str	r3, [sp, #8]
 80104e0:	9b08      	ldr	r3, [sp, #32]
 80104e2:	445b      	add	r3, fp
 80104e4:	930a      	str	r3, [sp, #40]	; 0x28
 80104e6:	9b04      	ldr	r3, [sp, #16]
 80104e8:	f003 0301 	and.w	r3, r3, #1
 80104ec:	9309      	str	r3, [sp, #36]	; 0x24
 80104ee:	9b02      	ldr	r3, [sp, #8]
 80104f0:	4621      	mov	r1, r4
 80104f2:	4650      	mov	r0, sl
 80104f4:	f103 3bff 	add.w	fp, r3, #4294967295
 80104f8:	f7ff fa65 	bl	800f9c6 <quorem>
 80104fc:	4603      	mov	r3, r0
 80104fe:	4641      	mov	r1, r8
 8010500:	3330      	adds	r3, #48	; 0x30
 8010502:	9004      	str	r0, [sp, #16]
 8010504:	4650      	mov	r0, sl
 8010506:	930b      	str	r3, [sp, #44]	; 0x2c
 8010508:	f000 fda6 	bl	8011058 <__mcmp>
 801050c:	4632      	mov	r2, r6
 801050e:	9006      	str	r0, [sp, #24]
 8010510:	4621      	mov	r1, r4
 8010512:	4628      	mov	r0, r5
 8010514:	f000 fdbc 	bl	8011090 <__mdiff>
 8010518:	68c2      	ldr	r2, [r0, #12]
 801051a:	4607      	mov	r7, r0
 801051c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801051e:	bb02      	cbnz	r2, 8010562 <_dtoa_r+0xa82>
 8010520:	4601      	mov	r1, r0
 8010522:	4650      	mov	r0, sl
 8010524:	f000 fd98 	bl	8011058 <__mcmp>
 8010528:	4602      	mov	r2, r0
 801052a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801052c:	4639      	mov	r1, r7
 801052e:	4628      	mov	r0, r5
 8010530:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8010534:	f000 fb56 	bl	8010be4 <_Bfree>
 8010538:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801053a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801053c:	9f02      	ldr	r7, [sp, #8]
 801053e:	ea43 0102 	orr.w	r1, r3, r2
 8010542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010544:	430b      	orrs	r3, r1
 8010546:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010548:	d10d      	bne.n	8010566 <_dtoa_r+0xa86>
 801054a:	2b39      	cmp	r3, #57	; 0x39
 801054c:	d027      	beq.n	801059e <_dtoa_r+0xabe>
 801054e:	9a06      	ldr	r2, [sp, #24]
 8010550:	2a00      	cmp	r2, #0
 8010552:	dd01      	ble.n	8010558 <_dtoa_r+0xa78>
 8010554:	9b04      	ldr	r3, [sp, #16]
 8010556:	3331      	adds	r3, #49	; 0x31
 8010558:	f88b 3000 	strb.w	r3, [fp]
 801055c:	e776      	b.n	801044c <_dtoa_r+0x96c>
 801055e:	4630      	mov	r0, r6
 8010560:	e7b9      	b.n	80104d6 <_dtoa_r+0x9f6>
 8010562:	2201      	movs	r2, #1
 8010564:	e7e2      	b.n	801052c <_dtoa_r+0xa4c>
 8010566:	9906      	ldr	r1, [sp, #24]
 8010568:	2900      	cmp	r1, #0
 801056a:	db04      	blt.n	8010576 <_dtoa_r+0xa96>
 801056c:	9822      	ldr	r0, [sp, #136]	; 0x88
 801056e:	4301      	orrs	r1, r0
 8010570:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010572:	4301      	orrs	r1, r0
 8010574:	d120      	bne.n	80105b8 <_dtoa_r+0xad8>
 8010576:	2a00      	cmp	r2, #0
 8010578:	ddee      	ble.n	8010558 <_dtoa_r+0xa78>
 801057a:	4651      	mov	r1, sl
 801057c:	2201      	movs	r2, #1
 801057e:	4628      	mov	r0, r5
 8010580:	9302      	str	r3, [sp, #8]
 8010582:	f000 fcfd 	bl	8010f80 <__lshift>
 8010586:	4621      	mov	r1, r4
 8010588:	4682      	mov	sl, r0
 801058a:	f000 fd65 	bl	8011058 <__mcmp>
 801058e:	2800      	cmp	r0, #0
 8010590:	9b02      	ldr	r3, [sp, #8]
 8010592:	dc02      	bgt.n	801059a <_dtoa_r+0xaba>
 8010594:	d1e0      	bne.n	8010558 <_dtoa_r+0xa78>
 8010596:	07da      	lsls	r2, r3, #31
 8010598:	d5de      	bpl.n	8010558 <_dtoa_r+0xa78>
 801059a:	2b39      	cmp	r3, #57	; 0x39
 801059c:	d1da      	bne.n	8010554 <_dtoa_r+0xa74>
 801059e:	2339      	movs	r3, #57	; 0x39
 80105a0:	f88b 3000 	strb.w	r3, [fp]
 80105a4:	463b      	mov	r3, r7
 80105a6:	461f      	mov	r7, r3
 80105a8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80105ac:	3b01      	subs	r3, #1
 80105ae:	2a39      	cmp	r2, #57	; 0x39
 80105b0:	d050      	beq.n	8010654 <_dtoa_r+0xb74>
 80105b2:	3201      	adds	r2, #1
 80105b4:	701a      	strb	r2, [r3, #0]
 80105b6:	e749      	b.n	801044c <_dtoa_r+0x96c>
 80105b8:	2a00      	cmp	r2, #0
 80105ba:	dd03      	ble.n	80105c4 <_dtoa_r+0xae4>
 80105bc:	2b39      	cmp	r3, #57	; 0x39
 80105be:	d0ee      	beq.n	801059e <_dtoa_r+0xabe>
 80105c0:	3301      	adds	r3, #1
 80105c2:	e7c9      	b.n	8010558 <_dtoa_r+0xa78>
 80105c4:	9a02      	ldr	r2, [sp, #8]
 80105c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80105c8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80105cc:	428a      	cmp	r2, r1
 80105ce:	d02a      	beq.n	8010626 <_dtoa_r+0xb46>
 80105d0:	4651      	mov	r1, sl
 80105d2:	2300      	movs	r3, #0
 80105d4:	220a      	movs	r2, #10
 80105d6:	4628      	mov	r0, r5
 80105d8:	f000 fb26 	bl	8010c28 <__multadd>
 80105dc:	45b0      	cmp	r8, r6
 80105de:	4682      	mov	sl, r0
 80105e0:	f04f 0300 	mov.w	r3, #0
 80105e4:	f04f 020a 	mov.w	r2, #10
 80105e8:	4641      	mov	r1, r8
 80105ea:	4628      	mov	r0, r5
 80105ec:	d107      	bne.n	80105fe <_dtoa_r+0xb1e>
 80105ee:	f000 fb1b 	bl	8010c28 <__multadd>
 80105f2:	4680      	mov	r8, r0
 80105f4:	4606      	mov	r6, r0
 80105f6:	9b02      	ldr	r3, [sp, #8]
 80105f8:	3301      	adds	r3, #1
 80105fa:	9302      	str	r3, [sp, #8]
 80105fc:	e777      	b.n	80104ee <_dtoa_r+0xa0e>
 80105fe:	f000 fb13 	bl	8010c28 <__multadd>
 8010602:	4631      	mov	r1, r6
 8010604:	4680      	mov	r8, r0
 8010606:	2300      	movs	r3, #0
 8010608:	220a      	movs	r2, #10
 801060a:	4628      	mov	r0, r5
 801060c:	f000 fb0c 	bl	8010c28 <__multadd>
 8010610:	4606      	mov	r6, r0
 8010612:	e7f0      	b.n	80105f6 <_dtoa_r+0xb16>
 8010614:	f1bb 0f00 	cmp.w	fp, #0
 8010618:	bfcc      	ite	gt
 801061a:	465f      	movgt	r7, fp
 801061c:	2701      	movle	r7, #1
 801061e:	f04f 0800 	mov.w	r8, #0
 8010622:	9a08      	ldr	r2, [sp, #32]
 8010624:	4417      	add	r7, r2
 8010626:	4651      	mov	r1, sl
 8010628:	2201      	movs	r2, #1
 801062a:	4628      	mov	r0, r5
 801062c:	9302      	str	r3, [sp, #8]
 801062e:	f000 fca7 	bl	8010f80 <__lshift>
 8010632:	4621      	mov	r1, r4
 8010634:	4682      	mov	sl, r0
 8010636:	f000 fd0f 	bl	8011058 <__mcmp>
 801063a:	2800      	cmp	r0, #0
 801063c:	dcb2      	bgt.n	80105a4 <_dtoa_r+0xac4>
 801063e:	d102      	bne.n	8010646 <_dtoa_r+0xb66>
 8010640:	9b02      	ldr	r3, [sp, #8]
 8010642:	07db      	lsls	r3, r3, #31
 8010644:	d4ae      	bmi.n	80105a4 <_dtoa_r+0xac4>
 8010646:	463b      	mov	r3, r7
 8010648:	461f      	mov	r7, r3
 801064a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801064e:	2a30      	cmp	r2, #48	; 0x30
 8010650:	d0fa      	beq.n	8010648 <_dtoa_r+0xb68>
 8010652:	e6fb      	b.n	801044c <_dtoa_r+0x96c>
 8010654:	9a08      	ldr	r2, [sp, #32]
 8010656:	429a      	cmp	r2, r3
 8010658:	d1a5      	bne.n	80105a6 <_dtoa_r+0xac6>
 801065a:	2331      	movs	r3, #49	; 0x31
 801065c:	f109 0901 	add.w	r9, r9, #1
 8010660:	7013      	strb	r3, [r2, #0]
 8010662:	e6f3      	b.n	801044c <_dtoa_r+0x96c>
 8010664:	4b13      	ldr	r3, [pc, #76]	; (80106b4 <_dtoa_r+0xbd4>)
 8010666:	f7ff baa7 	b.w	800fbb8 <_dtoa_r+0xd8>
 801066a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801066c:	2b00      	cmp	r3, #0
 801066e:	f47f aa80 	bne.w	800fb72 <_dtoa_r+0x92>
 8010672:	4b11      	ldr	r3, [pc, #68]	; (80106b8 <_dtoa_r+0xbd8>)
 8010674:	f7ff baa0 	b.w	800fbb8 <_dtoa_r+0xd8>
 8010678:	f1bb 0f00 	cmp.w	fp, #0
 801067c:	dc03      	bgt.n	8010686 <_dtoa_r+0xba6>
 801067e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010680:	2b02      	cmp	r3, #2
 8010682:	f73f aecc 	bgt.w	801041e <_dtoa_r+0x93e>
 8010686:	9f08      	ldr	r7, [sp, #32]
 8010688:	4621      	mov	r1, r4
 801068a:	4650      	mov	r0, sl
 801068c:	f7ff f99b 	bl	800f9c6 <quorem>
 8010690:	9a08      	ldr	r2, [sp, #32]
 8010692:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010696:	f807 3b01 	strb.w	r3, [r7], #1
 801069a:	1aba      	subs	r2, r7, r2
 801069c:	4593      	cmp	fp, r2
 801069e:	ddb9      	ble.n	8010614 <_dtoa_r+0xb34>
 80106a0:	4651      	mov	r1, sl
 80106a2:	2300      	movs	r3, #0
 80106a4:	220a      	movs	r2, #10
 80106a6:	4628      	mov	r0, r5
 80106a8:	f000 fabe 	bl	8010c28 <__multadd>
 80106ac:	4682      	mov	sl, r0
 80106ae:	e7eb      	b.n	8010688 <_dtoa_r+0xba8>
 80106b0:	0801440c 	.word	0x0801440c
 80106b4:	08014365 	.word	0x08014365
 80106b8:	08014389 	.word	0x08014389

080106bc <__sflush_r>:
 80106bc:	898a      	ldrh	r2, [r1, #12]
 80106be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106c2:	4605      	mov	r5, r0
 80106c4:	0710      	lsls	r0, r2, #28
 80106c6:	460c      	mov	r4, r1
 80106c8:	d458      	bmi.n	801077c <__sflush_r+0xc0>
 80106ca:	684b      	ldr	r3, [r1, #4]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	dc05      	bgt.n	80106dc <__sflush_r+0x20>
 80106d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	dc02      	bgt.n	80106dc <__sflush_r+0x20>
 80106d6:	2000      	movs	r0, #0
 80106d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80106de:	2e00      	cmp	r6, #0
 80106e0:	d0f9      	beq.n	80106d6 <__sflush_r+0x1a>
 80106e2:	2300      	movs	r3, #0
 80106e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80106e8:	682f      	ldr	r7, [r5, #0]
 80106ea:	602b      	str	r3, [r5, #0]
 80106ec:	d032      	beq.n	8010754 <__sflush_r+0x98>
 80106ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80106f0:	89a3      	ldrh	r3, [r4, #12]
 80106f2:	075a      	lsls	r2, r3, #29
 80106f4:	d505      	bpl.n	8010702 <__sflush_r+0x46>
 80106f6:	6863      	ldr	r3, [r4, #4]
 80106f8:	1ac0      	subs	r0, r0, r3
 80106fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80106fc:	b10b      	cbz	r3, 8010702 <__sflush_r+0x46>
 80106fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010700:	1ac0      	subs	r0, r0, r3
 8010702:	2300      	movs	r3, #0
 8010704:	4602      	mov	r2, r0
 8010706:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010708:	4628      	mov	r0, r5
 801070a:	6a21      	ldr	r1, [r4, #32]
 801070c:	47b0      	blx	r6
 801070e:	1c43      	adds	r3, r0, #1
 8010710:	89a3      	ldrh	r3, [r4, #12]
 8010712:	d106      	bne.n	8010722 <__sflush_r+0x66>
 8010714:	6829      	ldr	r1, [r5, #0]
 8010716:	291d      	cmp	r1, #29
 8010718:	d82c      	bhi.n	8010774 <__sflush_r+0xb8>
 801071a:	4a2a      	ldr	r2, [pc, #168]	; (80107c4 <__sflush_r+0x108>)
 801071c:	40ca      	lsrs	r2, r1
 801071e:	07d6      	lsls	r6, r2, #31
 8010720:	d528      	bpl.n	8010774 <__sflush_r+0xb8>
 8010722:	2200      	movs	r2, #0
 8010724:	6062      	str	r2, [r4, #4]
 8010726:	6922      	ldr	r2, [r4, #16]
 8010728:	04d9      	lsls	r1, r3, #19
 801072a:	6022      	str	r2, [r4, #0]
 801072c:	d504      	bpl.n	8010738 <__sflush_r+0x7c>
 801072e:	1c42      	adds	r2, r0, #1
 8010730:	d101      	bne.n	8010736 <__sflush_r+0x7a>
 8010732:	682b      	ldr	r3, [r5, #0]
 8010734:	b903      	cbnz	r3, 8010738 <__sflush_r+0x7c>
 8010736:	6560      	str	r0, [r4, #84]	; 0x54
 8010738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801073a:	602f      	str	r7, [r5, #0]
 801073c:	2900      	cmp	r1, #0
 801073e:	d0ca      	beq.n	80106d6 <__sflush_r+0x1a>
 8010740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010744:	4299      	cmp	r1, r3
 8010746:	d002      	beq.n	801074e <__sflush_r+0x92>
 8010748:	4628      	mov	r0, r5
 801074a:	f000 fd9b 	bl	8011284 <_free_r>
 801074e:	2000      	movs	r0, #0
 8010750:	6360      	str	r0, [r4, #52]	; 0x34
 8010752:	e7c1      	b.n	80106d8 <__sflush_r+0x1c>
 8010754:	6a21      	ldr	r1, [r4, #32]
 8010756:	2301      	movs	r3, #1
 8010758:	4628      	mov	r0, r5
 801075a:	47b0      	blx	r6
 801075c:	1c41      	adds	r1, r0, #1
 801075e:	d1c7      	bne.n	80106f0 <__sflush_r+0x34>
 8010760:	682b      	ldr	r3, [r5, #0]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d0c4      	beq.n	80106f0 <__sflush_r+0x34>
 8010766:	2b1d      	cmp	r3, #29
 8010768:	d001      	beq.n	801076e <__sflush_r+0xb2>
 801076a:	2b16      	cmp	r3, #22
 801076c:	d101      	bne.n	8010772 <__sflush_r+0xb6>
 801076e:	602f      	str	r7, [r5, #0]
 8010770:	e7b1      	b.n	80106d6 <__sflush_r+0x1a>
 8010772:	89a3      	ldrh	r3, [r4, #12]
 8010774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010778:	81a3      	strh	r3, [r4, #12]
 801077a:	e7ad      	b.n	80106d8 <__sflush_r+0x1c>
 801077c:	690f      	ldr	r7, [r1, #16]
 801077e:	2f00      	cmp	r7, #0
 8010780:	d0a9      	beq.n	80106d6 <__sflush_r+0x1a>
 8010782:	0793      	lsls	r3, r2, #30
 8010784:	bf18      	it	ne
 8010786:	2300      	movne	r3, #0
 8010788:	680e      	ldr	r6, [r1, #0]
 801078a:	bf08      	it	eq
 801078c:	694b      	ldreq	r3, [r1, #20]
 801078e:	eba6 0807 	sub.w	r8, r6, r7
 8010792:	600f      	str	r7, [r1, #0]
 8010794:	608b      	str	r3, [r1, #8]
 8010796:	f1b8 0f00 	cmp.w	r8, #0
 801079a:	dd9c      	ble.n	80106d6 <__sflush_r+0x1a>
 801079c:	4643      	mov	r3, r8
 801079e:	463a      	mov	r2, r7
 80107a0:	4628      	mov	r0, r5
 80107a2:	6a21      	ldr	r1, [r4, #32]
 80107a4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80107a6:	47b0      	blx	r6
 80107a8:	2800      	cmp	r0, #0
 80107aa:	dc06      	bgt.n	80107ba <__sflush_r+0xfe>
 80107ac:	89a3      	ldrh	r3, [r4, #12]
 80107ae:	f04f 30ff 	mov.w	r0, #4294967295
 80107b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80107b6:	81a3      	strh	r3, [r4, #12]
 80107b8:	e78e      	b.n	80106d8 <__sflush_r+0x1c>
 80107ba:	4407      	add	r7, r0
 80107bc:	eba8 0800 	sub.w	r8, r8, r0
 80107c0:	e7e9      	b.n	8010796 <__sflush_r+0xda>
 80107c2:	bf00      	nop
 80107c4:	20400001 	.word	0x20400001

080107c8 <_fflush_r>:
 80107c8:	b538      	push	{r3, r4, r5, lr}
 80107ca:	690b      	ldr	r3, [r1, #16]
 80107cc:	4605      	mov	r5, r0
 80107ce:	460c      	mov	r4, r1
 80107d0:	b913      	cbnz	r3, 80107d8 <_fflush_r+0x10>
 80107d2:	2500      	movs	r5, #0
 80107d4:	4628      	mov	r0, r5
 80107d6:	bd38      	pop	{r3, r4, r5, pc}
 80107d8:	b118      	cbz	r0, 80107e2 <_fflush_r+0x1a>
 80107da:	6983      	ldr	r3, [r0, #24]
 80107dc:	b90b      	cbnz	r3, 80107e2 <_fflush_r+0x1a>
 80107de:	f000 f887 	bl	80108f0 <__sinit>
 80107e2:	4b14      	ldr	r3, [pc, #80]	; (8010834 <_fflush_r+0x6c>)
 80107e4:	429c      	cmp	r4, r3
 80107e6:	d11b      	bne.n	8010820 <_fflush_r+0x58>
 80107e8:	686c      	ldr	r4, [r5, #4]
 80107ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d0ef      	beq.n	80107d2 <_fflush_r+0xa>
 80107f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80107f4:	07d0      	lsls	r0, r2, #31
 80107f6:	d404      	bmi.n	8010802 <_fflush_r+0x3a>
 80107f8:	0599      	lsls	r1, r3, #22
 80107fa:	d402      	bmi.n	8010802 <_fflush_r+0x3a>
 80107fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80107fe:	f000 f91a 	bl	8010a36 <__retarget_lock_acquire_recursive>
 8010802:	4628      	mov	r0, r5
 8010804:	4621      	mov	r1, r4
 8010806:	f7ff ff59 	bl	80106bc <__sflush_r>
 801080a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801080c:	4605      	mov	r5, r0
 801080e:	07da      	lsls	r2, r3, #31
 8010810:	d4e0      	bmi.n	80107d4 <_fflush_r+0xc>
 8010812:	89a3      	ldrh	r3, [r4, #12]
 8010814:	059b      	lsls	r3, r3, #22
 8010816:	d4dd      	bmi.n	80107d4 <_fflush_r+0xc>
 8010818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801081a:	f000 f90d 	bl	8010a38 <__retarget_lock_release_recursive>
 801081e:	e7d9      	b.n	80107d4 <_fflush_r+0xc>
 8010820:	4b05      	ldr	r3, [pc, #20]	; (8010838 <_fflush_r+0x70>)
 8010822:	429c      	cmp	r4, r3
 8010824:	d101      	bne.n	801082a <_fflush_r+0x62>
 8010826:	68ac      	ldr	r4, [r5, #8]
 8010828:	e7df      	b.n	80107ea <_fflush_r+0x22>
 801082a:	4b04      	ldr	r3, [pc, #16]	; (801083c <_fflush_r+0x74>)
 801082c:	429c      	cmp	r4, r3
 801082e:	bf08      	it	eq
 8010830:	68ec      	ldreq	r4, [r5, #12]
 8010832:	e7da      	b.n	80107ea <_fflush_r+0x22>
 8010834:	08014440 	.word	0x08014440
 8010838:	08014460 	.word	0x08014460
 801083c:	08014420 	.word	0x08014420

08010840 <std>:
 8010840:	2300      	movs	r3, #0
 8010842:	b510      	push	{r4, lr}
 8010844:	4604      	mov	r4, r0
 8010846:	e9c0 3300 	strd	r3, r3, [r0]
 801084a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801084e:	6083      	str	r3, [r0, #8]
 8010850:	8181      	strh	r1, [r0, #12]
 8010852:	6643      	str	r3, [r0, #100]	; 0x64
 8010854:	81c2      	strh	r2, [r0, #14]
 8010856:	6183      	str	r3, [r0, #24]
 8010858:	4619      	mov	r1, r3
 801085a:	2208      	movs	r2, #8
 801085c:	305c      	adds	r0, #92	; 0x5c
 801085e:	f7fe f9b5 	bl	800ebcc <memset>
 8010862:	4b05      	ldr	r3, [pc, #20]	; (8010878 <std+0x38>)
 8010864:	6224      	str	r4, [r4, #32]
 8010866:	6263      	str	r3, [r4, #36]	; 0x24
 8010868:	4b04      	ldr	r3, [pc, #16]	; (801087c <std+0x3c>)
 801086a:	62a3      	str	r3, [r4, #40]	; 0x28
 801086c:	4b04      	ldr	r3, [pc, #16]	; (8010880 <std+0x40>)
 801086e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010870:	4b04      	ldr	r3, [pc, #16]	; (8010884 <std+0x44>)
 8010872:	6323      	str	r3, [r4, #48]	; 0x30
 8010874:	bd10      	pop	{r4, pc}
 8010876:	bf00      	nop
 8010878:	0801180d 	.word	0x0801180d
 801087c:	0801182f 	.word	0x0801182f
 8010880:	08011867 	.word	0x08011867
 8010884:	0801188b 	.word	0x0801188b

08010888 <_cleanup_r>:
 8010888:	4901      	ldr	r1, [pc, #4]	; (8010890 <_cleanup_r+0x8>)
 801088a:	f000 b8af 	b.w	80109ec <_fwalk_reent>
 801088e:	bf00      	nop
 8010890:	080107c9 	.word	0x080107c9

08010894 <__sfmoreglue>:
 8010894:	b570      	push	{r4, r5, r6, lr}
 8010896:	2568      	movs	r5, #104	; 0x68
 8010898:	1e4a      	subs	r2, r1, #1
 801089a:	4355      	muls	r5, r2
 801089c:	460e      	mov	r6, r1
 801089e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80108a2:	f000 fd3b 	bl	801131c <_malloc_r>
 80108a6:	4604      	mov	r4, r0
 80108a8:	b140      	cbz	r0, 80108bc <__sfmoreglue+0x28>
 80108aa:	2100      	movs	r1, #0
 80108ac:	e9c0 1600 	strd	r1, r6, [r0]
 80108b0:	300c      	adds	r0, #12
 80108b2:	60a0      	str	r0, [r4, #8]
 80108b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80108b8:	f7fe f988 	bl	800ebcc <memset>
 80108bc:	4620      	mov	r0, r4
 80108be:	bd70      	pop	{r4, r5, r6, pc}

080108c0 <__sfp_lock_acquire>:
 80108c0:	4801      	ldr	r0, [pc, #4]	; (80108c8 <__sfp_lock_acquire+0x8>)
 80108c2:	f000 b8b8 	b.w	8010a36 <__retarget_lock_acquire_recursive>
 80108c6:	bf00      	nop
 80108c8:	20003b94 	.word	0x20003b94

080108cc <__sfp_lock_release>:
 80108cc:	4801      	ldr	r0, [pc, #4]	; (80108d4 <__sfp_lock_release+0x8>)
 80108ce:	f000 b8b3 	b.w	8010a38 <__retarget_lock_release_recursive>
 80108d2:	bf00      	nop
 80108d4:	20003b94 	.word	0x20003b94

080108d8 <__sinit_lock_acquire>:
 80108d8:	4801      	ldr	r0, [pc, #4]	; (80108e0 <__sinit_lock_acquire+0x8>)
 80108da:	f000 b8ac 	b.w	8010a36 <__retarget_lock_acquire_recursive>
 80108de:	bf00      	nop
 80108e0:	20003b8f 	.word	0x20003b8f

080108e4 <__sinit_lock_release>:
 80108e4:	4801      	ldr	r0, [pc, #4]	; (80108ec <__sinit_lock_release+0x8>)
 80108e6:	f000 b8a7 	b.w	8010a38 <__retarget_lock_release_recursive>
 80108ea:	bf00      	nop
 80108ec:	20003b8f 	.word	0x20003b8f

080108f0 <__sinit>:
 80108f0:	b510      	push	{r4, lr}
 80108f2:	4604      	mov	r4, r0
 80108f4:	f7ff fff0 	bl	80108d8 <__sinit_lock_acquire>
 80108f8:	69a3      	ldr	r3, [r4, #24]
 80108fa:	b11b      	cbz	r3, 8010904 <__sinit+0x14>
 80108fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010900:	f7ff bff0 	b.w	80108e4 <__sinit_lock_release>
 8010904:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010908:	6523      	str	r3, [r4, #80]	; 0x50
 801090a:	4b13      	ldr	r3, [pc, #76]	; (8010958 <__sinit+0x68>)
 801090c:	4a13      	ldr	r2, [pc, #76]	; (801095c <__sinit+0x6c>)
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	62a2      	str	r2, [r4, #40]	; 0x28
 8010912:	42a3      	cmp	r3, r4
 8010914:	bf08      	it	eq
 8010916:	2301      	moveq	r3, #1
 8010918:	4620      	mov	r0, r4
 801091a:	bf08      	it	eq
 801091c:	61a3      	streq	r3, [r4, #24]
 801091e:	f000 f81f 	bl	8010960 <__sfp>
 8010922:	6060      	str	r0, [r4, #4]
 8010924:	4620      	mov	r0, r4
 8010926:	f000 f81b 	bl	8010960 <__sfp>
 801092a:	60a0      	str	r0, [r4, #8]
 801092c:	4620      	mov	r0, r4
 801092e:	f000 f817 	bl	8010960 <__sfp>
 8010932:	2200      	movs	r2, #0
 8010934:	2104      	movs	r1, #4
 8010936:	60e0      	str	r0, [r4, #12]
 8010938:	6860      	ldr	r0, [r4, #4]
 801093a:	f7ff ff81 	bl	8010840 <std>
 801093e:	2201      	movs	r2, #1
 8010940:	2109      	movs	r1, #9
 8010942:	68a0      	ldr	r0, [r4, #8]
 8010944:	f7ff ff7c 	bl	8010840 <std>
 8010948:	2202      	movs	r2, #2
 801094a:	2112      	movs	r1, #18
 801094c:	68e0      	ldr	r0, [r4, #12]
 801094e:	f7ff ff77 	bl	8010840 <std>
 8010952:	2301      	movs	r3, #1
 8010954:	61a3      	str	r3, [r4, #24]
 8010956:	e7d1      	b.n	80108fc <__sinit+0xc>
 8010958:	08014340 	.word	0x08014340
 801095c:	08010889 	.word	0x08010889

08010960 <__sfp>:
 8010960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010962:	4607      	mov	r7, r0
 8010964:	f7ff ffac 	bl	80108c0 <__sfp_lock_acquire>
 8010968:	4b1e      	ldr	r3, [pc, #120]	; (80109e4 <__sfp+0x84>)
 801096a:	681e      	ldr	r6, [r3, #0]
 801096c:	69b3      	ldr	r3, [r6, #24]
 801096e:	b913      	cbnz	r3, 8010976 <__sfp+0x16>
 8010970:	4630      	mov	r0, r6
 8010972:	f7ff ffbd 	bl	80108f0 <__sinit>
 8010976:	3648      	adds	r6, #72	; 0x48
 8010978:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801097c:	3b01      	subs	r3, #1
 801097e:	d503      	bpl.n	8010988 <__sfp+0x28>
 8010980:	6833      	ldr	r3, [r6, #0]
 8010982:	b30b      	cbz	r3, 80109c8 <__sfp+0x68>
 8010984:	6836      	ldr	r6, [r6, #0]
 8010986:	e7f7      	b.n	8010978 <__sfp+0x18>
 8010988:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801098c:	b9d5      	cbnz	r5, 80109c4 <__sfp+0x64>
 801098e:	4b16      	ldr	r3, [pc, #88]	; (80109e8 <__sfp+0x88>)
 8010990:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010994:	60e3      	str	r3, [r4, #12]
 8010996:	6665      	str	r5, [r4, #100]	; 0x64
 8010998:	f000 f84c 	bl	8010a34 <__retarget_lock_init_recursive>
 801099c:	f7ff ff96 	bl	80108cc <__sfp_lock_release>
 80109a0:	2208      	movs	r2, #8
 80109a2:	4629      	mov	r1, r5
 80109a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80109a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80109ac:	6025      	str	r5, [r4, #0]
 80109ae:	61a5      	str	r5, [r4, #24]
 80109b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80109b4:	f7fe f90a 	bl	800ebcc <memset>
 80109b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80109bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80109c0:	4620      	mov	r0, r4
 80109c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109c4:	3468      	adds	r4, #104	; 0x68
 80109c6:	e7d9      	b.n	801097c <__sfp+0x1c>
 80109c8:	2104      	movs	r1, #4
 80109ca:	4638      	mov	r0, r7
 80109cc:	f7ff ff62 	bl	8010894 <__sfmoreglue>
 80109d0:	4604      	mov	r4, r0
 80109d2:	6030      	str	r0, [r6, #0]
 80109d4:	2800      	cmp	r0, #0
 80109d6:	d1d5      	bne.n	8010984 <__sfp+0x24>
 80109d8:	f7ff ff78 	bl	80108cc <__sfp_lock_release>
 80109dc:	230c      	movs	r3, #12
 80109de:	603b      	str	r3, [r7, #0]
 80109e0:	e7ee      	b.n	80109c0 <__sfp+0x60>
 80109e2:	bf00      	nop
 80109e4:	08014340 	.word	0x08014340
 80109e8:	ffff0001 	.word	0xffff0001

080109ec <_fwalk_reent>:
 80109ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109f0:	4606      	mov	r6, r0
 80109f2:	4688      	mov	r8, r1
 80109f4:	2700      	movs	r7, #0
 80109f6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80109fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80109fe:	f1b9 0901 	subs.w	r9, r9, #1
 8010a02:	d505      	bpl.n	8010a10 <_fwalk_reent+0x24>
 8010a04:	6824      	ldr	r4, [r4, #0]
 8010a06:	2c00      	cmp	r4, #0
 8010a08:	d1f7      	bne.n	80109fa <_fwalk_reent+0xe>
 8010a0a:	4638      	mov	r0, r7
 8010a0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a10:	89ab      	ldrh	r3, [r5, #12]
 8010a12:	2b01      	cmp	r3, #1
 8010a14:	d907      	bls.n	8010a26 <_fwalk_reent+0x3a>
 8010a16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010a1a:	3301      	adds	r3, #1
 8010a1c:	d003      	beq.n	8010a26 <_fwalk_reent+0x3a>
 8010a1e:	4629      	mov	r1, r5
 8010a20:	4630      	mov	r0, r6
 8010a22:	47c0      	blx	r8
 8010a24:	4307      	orrs	r7, r0
 8010a26:	3568      	adds	r5, #104	; 0x68
 8010a28:	e7e9      	b.n	80109fe <_fwalk_reent+0x12>
	...

08010a2c <_localeconv_r>:
 8010a2c:	4800      	ldr	r0, [pc, #0]	; (8010a30 <_localeconv_r+0x4>)
 8010a2e:	4770      	bx	lr
 8010a30:	200001b8 	.word	0x200001b8

08010a34 <__retarget_lock_init_recursive>:
 8010a34:	4770      	bx	lr

08010a36 <__retarget_lock_acquire_recursive>:
 8010a36:	4770      	bx	lr

08010a38 <__retarget_lock_release_recursive>:
 8010a38:	4770      	bx	lr

08010a3a <__swhatbuf_r>:
 8010a3a:	b570      	push	{r4, r5, r6, lr}
 8010a3c:	460e      	mov	r6, r1
 8010a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a42:	4614      	mov	r4, r2
 8010a44:	2900      	cmp	r1, #0
 8010a46:	461d      	mov	r5, r3
 8010a48:	b096      	sub	sp, #88	; 0x58
 8010a4a:	da07      	bge.n	8010a5c <__swhatbuf_r+0x22>
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	602b      	str	r3, [r5, #0]
 8010a50:	89b3      	ldrh	r3, [r6, #12]
 8010a52:	061a      	lsls	r2, r3, #24
 8010a54:	d410      	bmi.n	8010a78 <__swhatbuf_r+0x3e>
 8010a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a5a:	e00e      	b.n	8010a7a <__swhatbuf_r+0x40>
 8010a5c:	466a      	mov	r2, sp
 8010a5e:	f000 ff3b 	bl	80118d8 <_fstat_r>
 8010a62:	2800      	cmp	r0, #0
 8010a64:	dbf2      	blt.n	8010a4c <__swhatbuf_r+0x12>
 8010a66:	9a01      	ldr	r2, [sp, #4]
 8010a68:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010a6c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010a70:	425a      	negs	r2, r3
 8010a72:	415a      	adcs	r2, r3
 8010a74:	602a      	str	r2, [r5, #0]
 8010a76:	e7ee      	b.n	8010a56 <__swhatbuf_r+0x1c>
 8010a78:	2340      	movs	r3, #64	; 0x40
 8010a7a:	2000      	movs	r0, #0
 8010a7c:	6023      	str	r3, [r4, #0]
 8010a7e:	b016      	add	sp, #88	; 0x58
 8010a80:	bd70      	pop	{r4, r5, r6, pc}
	...

08010a84 <__smakebuf_r>:
 8010a84:	898b      	ldrh	r3, [r1, #12]
 8010a86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010a88:	079d      	lsls	r5, r3, #30
 8010a8a:	4606      	mov	r6, r0
 8010a8c:	460c      	mov	r4, r1
 8010a8e:	d507      	bpl.n	8010aa0 <__smakebuf_r+0x1c>
 8010a90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010a94:	6023      	str	r3, [r4, #0]
 8010a96:	6123      	str	r3, [r4, #16]
 8010a98:	2301      	movs	r3, #1
 8010a9a:	6163      	str	r3, [r4, #20]
 8010a9c:	b002      	add	sp, #8
 8010a9e:	bd70      	pop	{r4, r5, r6, pc}
 8010aa0:	466a      	mov	r2, sp
 8010aa2:	ab01      	add	r3, sp, #4
 8010aa4:	f7ff ffc9 	bl	8010a3a <__swhatbuf_r>
 8010aa8:	9900      	ldr	r1, [sp, #0]
 8010aaa:	4605      	mov	r5, r0
 8010aac:	4630      	mov	r0, r6
 8010aae:	f000 fc35 	bl	801131c <_malloc_r>
 8010ab2:	b948      	cbnz	r0, 8010ac8 <__smakebuf_r+0x44>
 8010ab4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ab8:	059a      	lsls	r2, r3, #22
 8010aba:	d4ef      	bmi.n	8010a9c <__smakebuf_r+0x18>
 8010abc:	f023 0303 	bic.w	r3, r3, #3
 8010ac0:	f043 0302 	orr.w	r3, r3, #2
 8010ac4:	81a3      	strh	r3, [r4, #12]
 8010ac6:	e7e3      	b.n	8010a90 <__smakebuf_r+0xc>
 8010ac8:	4b0d      	ldr	r3, [pc, #52]	; (8010b00 <__smakebuf_r+0x7c>)
 8010aca:	62b3      	str	r3, [r6, #40]	; 0x28
 8010acc:	89a3      	ldrh	r3, [r4, #12]
 8010ace:	6020      	str	r0, [r4, #0]
 8010ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ad4:	81a3      	strh	r3, [r4, #12]
 8010ad6:	9b00      	ldr	r3, [sp, #0]
 8010ad8:	6120      	str	r0, [r4, #16]
 8010ada:	6163      	str	r3, [r4, #20]
 8010adc:	9b01      	ldr	r3, [sp, #4]
 8010ade:	b15b      	cbz	r3, 8010af8 <__smakebuf_r+0x74>
 8010ae0:	4630      	mov	r0, r6
 8010ae2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ae6:	f000 ff09 	bl	80118fc <_isatty_r>
 8010aea:	b128      	cbz	r0, 8010af8 <__smakebuf_r+0x74>
 8010aec:	89a3      	ldrh	r3, [r4, #12]
 8010aee:	f023 0303 	bic.w	r3, r3, #3
 8010af2:	f043 0301 	orr.w	r3, r3, #1
 8010af6:	81a3      	strh	r3, [r4, #12]
 8010af8:	89a0      	ldrh	r0, [r4, #12]
 8010afa:	4305      	orrs	r5, r0
 8010afc:	81a5      	strh	r5, [r4, #12]
 8010afe:	e7cd      	b.n	8010a9c <__smakebuf_r+0x18>
 8010b00:	08010889 	.word	0x08010889

08010b04 <malloc>:
 8010b04:	4b02      	ldr	r3, [pc, #8]	; (8010b10 <malloc+0xc>)
 8010b06:	4601      	mov	r1, r0
 8010b08:	6818      	ldr	r0, [r3, #0]
 8010b0a:	f000 bc07 	b.w	801131c <_malloc_r>
 8010b0e:	bf00      	nop
 8010b10:	20000064 	.word	0x20000064

08010b14 <memchr>:
 8010b14:	4603      	mov	r3, r0
 8010b16:	b510      	push	{r4, lr}
 8010b18:	b2c9      	uxtb	r1, r1
 8010b1a:	4402      	add	r2, r0
 8010b1c:	4293      	cmp	r3, r2
 8010b1e:	4618      	mov	r0, r3
 8010b20:	d101      	bne.n	8010b26 <memchr+0x12>
 8010b22:	2000      	movs	r0, #0
 8010b24:	e003      	b.n	8010b2e <memchr+0x1a>
 8010b26:	7804      	ldrb	r4, [r0, #0]
 8010b28:	3301      	adds	r3, #1
 8010b2a:	428c      	cmp	r4, r1
 8010b2c:	d1f6      	bne.n	8010b1c <memchr+0x8>
 8010b2e:	bd10      	pop	{r4, pc}

08010b30 <memmove>:
 8010b30:	4288      	cmp	r0, r1
 8010b32:	b510      	push	{r4, lr}
 8010b34:	eb01 0402 	add.w	r4, r1, r2
 8010b38:	d902      	bls.n	8010b40 <memmove+0x10>
 8010b3a:	4284      	cmp	r4, r0
 8010b3c:	4623      	mov	r3, r4
 8010b3e:	d807      	bhi.n	8010b50 <memmove+0x20>
 8010b40:	1e43      	subs	r3, r0, #1
 8010b42:	42a1      	cmp	r1, r4
 8010b44:	d008      	beq.n	8010b58 <memmove+0x28>
 8010b46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010b4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010b4e:	e7f8      	b.n	8010b42 <memmove+0x12>
 8010b50:	4601      	mov	r1, r0
 8010b52:	4402      	add	r2, r0
 8010b54:	428a      	cmp	r2, r1
 8010b56:	d100      	bne.n	8010b5a <memmove+0x2a>
 8010b58:	bd10      	pop	{r4, pc}
 8010b5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010b5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010b62:	e7f7      	b.n	8010b54 <memmove+0x24>

08010b64 <_Balloc>:
 8010b64:	b570      	push	{r4, r5, r6, lr}
 8010b66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010b68:	4604      	mov	r4, r0
 8010b6a:	460d      	mov	r5, r1
 8010b6c:	b976      	cbnz	r6, 8010b8c <_Balloc+0x28>
 8010b6e:	2010      	movs	r0, #16
 8010b70:	f7ff ffc8 	bl	8010b04 <malloc>
 8010b74:	4602      	mov	r2, r0
 8010b76:	6260      	str	r0, [r4, #36]	; 0x24
 8010b78:	b920      	cbnz	r0, 8010b84 <_Balloc+0x20>
 8010b7a:	2166      	movs	r1, #102	; 0x66
 8010b7c:	4b17      	ldr	r3, [pc, #92]	; (8010bdc <_Balloc+0x78>)
 8010b7e:	4818      	ldr	r0, [pc, #96]	; (8010be0 <_Balloc+0x7c>)
 8010b80:	f7fd ffbc 	bl	800eafc <__assert_func>
 8010b84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010b88:	6006      	str	r6, [r0, #0]
 8010b8a:	60c6      	str	r6, [r0, #12]
 8010b8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010b8e:	68f3      	ldr	r3, [r6, #12]
 8010b90:	b183      	cbz	r3, 8010bb4 <_Balloc+0x50>
 8010b92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b94:	68db      	ldr	r3, [r3, #12]
 8010b96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010b9a:	b9b8      	cbnz	r0, 8010bcc <_Balloc+0x68>
 8010b9c:	2101      	movs	r1, #1
 8010b9e:	fa01 f605 	lsl.w	r6, r1, r5
 8010ba2:	1d72      	adds	r2, r6, #5
 8010ba4:	4620      	mov	r0, r4
 8010ba6:	0092      	lsls	r2, r2, #2
 8010ba8:	f000 fb5e 	bl	8011268 <_calloc_r>
 8010bac:	b160      	cbz	r0, 8010bc8 <_Balloc+0x64>
 8010bae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010bb2:	e00e      	b.n	8010bd2 <_Balloc+0x6e>
 8010bb4:	2221      	movs	r2, #33	; 0x21
 8010bb6:	2104      	movs	r1, #4
 8010bb8:	4620      	mov	r0, r4
 8010bba:	f000 fb55 	bl	8011268 <_calloc_r>
 8010bbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010bc0:	60f0      	str	r0, [r6, #12]
 8010bc2:	68db      	ldr	r3, [r3, #12]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d1e4      	bne.n	8010b92 <_Balloc+0x2e>
 8010bc8:	2000      	movs	r0, #0
 8010bca:	bd70      	pop	{r4, r5, r6, pc}
 8010bcc:	6802      	ldr	r2, [r0, #0]
 8010bce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010bd8:	e7f7      	b.n	8010bca <_Balloc+0x66>
 8010bda:	bf00      	nop
 8010bdc:	08014396 	.word	0x08014396
 8010be0:	08014480 	.word	0x08014480

08010be4 <_Bfree>:
 8010be4:	b570      	push	{r4, r5, r6, lr}
 8010be6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010be8:	4605      	mov	r5, r0
 8010bea:	460c      	mov	r4, r1
 8010bec:	b976      	cbnz	r6, 8010c0c <_Bfree+0x28>
 8010bee:	2010      	movs	r0, #16
 8010bf0:	f7ff ff88 	bl	8010b04 <malloc>
 8010bf4:	4602      	mov	r2, r0
 8010bf6:	6268      	str	r0, [r5, #36]	; 0x24
 8010bf8:	b920      	cbnz	r0, 8010c04 <_Bfree+0x20>
 8010bfa:	218a      	movs	r1, #138	; 0x8a
 8010bfc:	4b08      	ldr	r3, [pc, #32]	; (8010c20 <_Bfree+0x3c>)
 8010bfe:	4809      	ldr	r0, [pc, #36]	; (8010c24 <_Bfree+0x40>)
 8010c00:	f7fd ff7c 	bl	800eafc <__assert_func>
 8010c04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010c08:	6006      	str	r6, [r0, #0]
 8010c0a:	60c6      	str	r6, [r0, #12]
 8010c0c:	b13c      	cbz	r4, 8010c1e <_Bfree+0x3a>
 8010c0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010c10:	6862      	ldr	r2, [r4, #4]
 8010c12:	68db      	ldr	r3, [r3, #12]
 8010c14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010c18:	6021      	str	r1, [r4, #0]
 8010c1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010c1e:	bd70      	pop	{r4, r5, r6, pc}
 8010c20:	08014396 	.word	0x08014396
 8010c24:	08014480 	.word	0x08014480

08010c28 <__multadd>:
 8010c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c2c:	4698      	mov	r8, r3
 8010c2e:	460c      	mov	r4, r1
 8010c30:	2300      	movs	r3, #0
 8010c32:	690e      	ldr	r6, [r1, #16]
 8010c34:	4607      	mov	r7, r0
 8010c36:	f101 0014 	add.w	r0, r1, #20
 8010c3a:	6805      	ldr	r5, [r0, #0]
 8010c3c:	3301      	adds	r3, #1
 8010c3e:	b2a9      	uxth	r1, r5
 8010c40:	fb02 8101 	mla	r1, r2, r1, r8
 8010c44:	0c2d      	lsrs	r5, r5, #16
 8010c46:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8010c4a:	fb02 c505 	mla	r5, r2, r5, ip
 8010c4e:	b289      	uxth	r1, r1
 8010c50:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8010c54:	429e      	cmp	r6, r3
 8010c56:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8010c5a:	f840 1b04 	str.w	r1, [r0], #4
 8010c5e:	dcec      	bgt.n	8010c3a <__multadd+0x12>
 8010c60:	f1b8 0f00 	cmp.w	r8, #0
 8010c64:	d022      	beq.n	8010cac <__multadd+0x84>
 8010c66:	68a3      	ldr	r3, [r4, #8]
 8010c68:	42b3      	cmp	r3, r6
 8010c6a:	dc19      	bgt.n	8010ca0 <__multadd+0x78>
 8010c6c:	6861      	ldr	r1, [r4, #4]
 8010c6e:	4638      	mov	r0, r7
 8010c70:	3101      	adds	r1, #1
 8010c72:	f7ff ff77 	bl	8010b64 <_Balloc>
 8010c76:	4605      	mov	r5, r0
 8010c78:	b928      	cbnz	r0, 8010c86 <__multadd+0x5e>
 8010c7a:	4602      	mov	r2, r0
 8010c7c:	21b5      	movs	r1, #181	; 0xb5
 8010c7e:	4b0d      	ldr	r3, [pc, #52]	; (8010cb4 <__multadd+0x8c>)
 8010c80:	480d      	ldr	r0, [pc, #52]	; (8010cb8 <__multadd+0x90>)
 8010c82:	f7fd ff3b 	bl	800eafc <__assert_func>
 8010c86:	6922      	ldr	r2, [r4, #16]
 8010c88:	f104 010c 	add.w	r1, r4, #12
 8010c8c:	3202      	adds	r2, #2
 8010c8e:	0092      	lsls	r2, r2, #2
 8010c90:	300c      	adds	r0, #12
 8010c92:	f7fd ff8d 	bl	800ebb0 <memcpy>
 8010c96:	4621      	mov	r1, r4
 8010c98:	4638      	mov	r0, r7
 8010c9a:	f7ff ffa3 	bl	8010be4 <_Bfree>
 8010c9e:	462c      	mov	r4, r5
 8010ca0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010ca4:	3601      	adds	r6, #1
 8010ca6:	f8c3 8014 	str.w	r8, [r3, #20]
 8010caa:	6126      	str	r6, [r4, #16]
 8010cac:	4620      	mov	r0, r4
 8010cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cb2:	bf00      	nop
 8010cb4:	0801440c 	.word	0x0801440c
 8010cb8:	08014480 	.word	0x08014480

08010cbc <__hi0bits>:
 8010cbc:	0c02      	lsrs	r2, r0, #16
 8010cbe:	0412      	lsls	r2, r2, #16
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	b9ca      	cbnz	r2, 8010cf8 <__hi0bits+0x3c>
 8010cc4:	0403      	lsls	r3, r0, #16
 8010cc6:	2010      	movs	r0, #16
 8010cc8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010ccc:	bf04      	itt	eq
 8010cce:	021b      	lsleq	r3, r3, #8
 8010cd0:	3008      	addeq	r0, #8
 8010cd2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8010cd6:	bf04      	itt	eq
 8010cd8:	011b      	lsleq	r3, r3, #4
 8010cda:	3004      	addeq	r0, #4
 8010cdc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8010ce0:	bf04      	itt	eq
 8010ce2:	009b      	lsleq	r3, r3, #2
 8010ce4:	3002      	addeq	r0, #2
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	db05      	blt.n	8010cf6 <__hi0bits+0x3a>
 8010cea:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8010cee:	f100 0001 	add.w	r0, r0, #1
 8010cf2:	bf08      	it	eq
 8010cf4:	2020      	moveq	r0, #32
 8010cf6:	4770      	bx	lr
 8010cf8:	2000      	movs	r0, #0
 8010cfa:	e7e5      	b.n	8010cc8 <__hi0bits+0xc>

08010cfc <__lo0bits>:
 8010cfc:	6803      	ldr	r3, [r0, #0]
 8010cfe:	4602      	mov	r2, r0
 8010d00:	f013 0007 	ands.w	r0, r3, #7
 8010d04:	d00b      	beq.n	8010d1e <__lo0bits+0x22>
 8010d06:	07d9      	lsls	r1, r3, #31
 8010d08:	d422      	bmi.n	8010d50 <__lo0bits+0x54>
 8010d0a:	0798      	lsls	r0, r3, #30
 8010d0c:	bf49      	itett	mi
 8010d0e:	085b      	lsrmi	r3, r3, #1
 8010d10:	089b      	lsrpl	r3, r3, #2
 8010d12:	2001      	movmi	r0, #1
 8010d14:	6013      	strmi	r3, [r2, #0]
 8010d16:	bf5c      	itt	pl
 8010d18:	2002      	movpl	r0, #2
 8010d1a:	6013      	strpl	r3, [r2, #0]
 8010d1c:	4770      	bx	lr
 8010d1e:	b299      	uxth	r1, r3
 8010d20:	b909      	cbnz	r1, 8010d26 <__lo0bits+0x2a>
 8010d22:	2010      	movs	r0, #16
 8010d24:	0c1b      	lsrs	r3, r3, #16
 8010d26:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010d2a:	bf04      	itt	eq
 8010d2c:	0a1b      	lsreq	r3, r3, #8
 8010d2e:	3008      	addeq	r0, #8
 8010d30:	0719      	lsls	r1, r3, #28
 8010d32:	bf04      	itt	eq
 8010d34:	091b      	lsreq	r3, r3, #4
 8010d36:	3004      	addeq	r0, #4
 8010d38:	0799      	lsls	r1, r3, #30
 8010d3a:	bf04      	itt	eq
 8010d3c:	089b      	lsreq	r3, r3, #2
 8010d3e:	3002      	addeq	r0, #2
 8010d40:	07d9      	lsls	r1, r3, #31
 8010d42:	d403      	bmi.n	8010d4c <__lo0bits+0x50>
 8010d44:	085b      	lsrs	r3, r3, #1
 8010d46:	f100 0001 	add.w	r0, r0, #1
 8010d4a:	d003      	beq.n	8010d54 <__lo0bits+0x58>
 8010d4c:	6013      	str	r3, [r2, #0]
 8010d4e:	4770      	bx	lr
 8010d50:	2000      	movs	r0, #0
 8010d52:	4770      	bx	lr
 8010d54:	2020      	movs	r0, #32
 8010d56:	4770      	bx	lr

08010d58 <__i2b>:
 8010d58:	b510      	push	{r4, lr}
 8010d5a:	460c      	mov	r4, r1
 8010d5c:	2101      	movs	r1, #1
 8010d5e:	f7ff ff01 	bl	8010b64 <_Balloc>
 8010d62:	4602      	mov	r2, r0
 8010d64:	b928      	cbnz	r0, 8010d72 <__i2b+0x1a>
 8010d66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010d6a:	4b04      	ldr	r3, [pc, #16]	; (8010d7c <__i2b+0x24>)
 8010d6c:	4804      	ldr	r0, [pc, #16]	; (8010d80 <__i2b+0x28>)
 8010d6e:	f7fd fec5 	bl	800eafc <__assert_func>
 8010d72:	2301      	movs	r3, #1
 8010d74:	6144      	str	r4, [r0, #20]
 8010d76:	6103      	str	r3, [r0, #16]
 8010d78:	bd10      	pop	{r4, pc}
 8010d7a:	bf00      	nop
 8010d7c:	0801440c 	.word	0x0801440c
 8010d80:	08014480 	.word	0x08014480

08010d84 <__multiply>:
 8010d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d88:	4614      	mov	r4, r2
 8010d8a:	690a      	ldr	r2, [r1, #16]
 8010d8c:	6923      	ldr	r3, [r4, #16]
 8010d8e:	460d      	mov	r5, r1
 8010d90:	429a      	cmp	r2, r3
 8010d92:	bfbe      	ittt	lt
 8010d94:	460b      	movlt	r3, r1
 8010d96:	4625      	movlt	r5, r4
 8010d98:	461c      	movlt	r4, r3
 8010d9a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8010d9e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010da2:	68ab      	ldr	r3, [r5, #8]
 8010da4:	6869      	ldr	r1, [r5, #4]
 8010da6:	eb0a 0709 	add.w	r7, sl, r9
 8010daa:	42bb      	cmp	r3, r7
 8010dac:	b085      	sub	sp, #20
 8010dae:	bfb8      	it	lt
 8010db0:	3101      	addlt	r1, #1
 8010db2:	f7ff fed7 	bl	8010b64 <_Balloc>
 8010db6:	b930      	cbnz	r0, 8010dc6 <__multiply+0x42>
 8010db8:	4602      	mov	r2, r0
 8010dba:	f240 115d 	movw	r1, #349	; 0x15d
 8010dbe:	4b41      	ldr	r3, [pc, #260]	; (8010ec4 <__multiply+0x140>)
 8010dc0:	4841      	ldr	r0, [pc, #260]	; (8010ec8 <__multiply+0x144>)
 8010dc2:	f7fd fe9b 	bl	800eafc <__assert_func>
 8010dc6:	f100 0614 	add.w	r6, r0, #20
 8010dca:	4633      	mov	r3, r6
 8010dcc:	2200      	movs	r2, #0
 8010dce:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8010dd2:	4543      	cmp	r3, r8
 8010dd4:	d31e      	bcc.n	8010e14 <__multiply+0x90>
 8010dd6:	f105 0c14 	add.w	ip, r5, #20
 8010dda:	f104 0314 	add.w	r3, r4, #20
 8010dde:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8010de2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8010de6:	9202      	str	r2, [sp, #8]
 8010de8:	ebac 0205 	sub.w	r2, ip, r5
 8010dec:	3a15      	subs	r2, #21
 8010dee:	f022 0203 	bic.w	r2, r2, #3
 8010df2:	3204      	adds	r2, #4
 8010df4:	f105 0115 	add.w	r1, r5, #21
 8010df8:	458c      	cmp	ip, r1
 8010dfa:	bf38      	it	cc
 8010dfc:	2204      	movcc	r2, #4
 8010dfe:	9201      	str	r2, [sp, #4]
 8010e00:	9a02      	ldr	r2, [sp, #8]
 8010e02:	9303      	str	r3, [sp, #12]
 8010e04:	429a      	cmp	r2, r3
 8010e06:	d808      	bhi.n	8010e1a <__multiply+0x96>
 8010e08:	2f00      	cmp	r7, #0
 8010e0a:	dc55      	bgt.n	8010eb8 <__multiply+0x134>
 8010e0c:	6107      	str	r7, [r0, #16]
 8010e0e:	b005      	add	sp, #20
 8010e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e14:	f843 2b04 	str.w	r2, [r3], #4
 8010e18:	e7db      	b.n	8010dd2 <__multiply+0x4e>
 8010e1a:	f8b3 a000 	ldrh.w	sl, [r3]
 8010e1e:	f1ba 0f00 	cmp.w	sl, #0
 8010e22:	d020      	beq.n	8010e66 <__multiply+0xe2>
 8010e24:	46b1      	mov	r9, r6
 8010e26:	2200      	movs	r2, #0
 8010e28:	f105 0e14 	add.w	lr, r5, #20
 8010e2c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8010e30:	f8d9 b000 	ldr.w	fp, [r9]
 8010e34:	b2a1      	uxth	r1, r4
 8010e36:	fa1f fb8b 	uxth.w	fp, fp
 8010e3a:	fb0a b101 	mla	r1, sl, r1, fp
 8010e3e:	4411      	add	r1, r2
 8010e40:	f8d9 2000 	ldr.w	r2, [r9]
 8010e44:	0c24      	lsrs	r4, r4, #16
 8010e46:	0c12      	lsrs	r2, r2, #16
 8010e48:	fb0a 2404 	mla	r4, sl, r4, r2
 8010e4c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8010e50:	b289      	uxth	r1, r1
 8010e52:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010e56:	45f4      	cmp	ip, lr
 8010e58:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8010e5c:	f849 1b04 	str.w	r1, [r9], #4
 8010e60:	d8e4      	bhi.n	8010e2c <__multiply+0xa8>
 8010e62:	9901      	ldr	r1, [sp, #4]
 8010e64:	5072      	str	r2, [r6, r1]
 8010e66:	9a03      	ldr	r2, [sp, #12]
 8010e68:	3304      	adds	r3, #4
 8010e6a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010e6e:	f1b9 0f00 	cmp.w	r9, #0
 8010e72:	d01f      	beq.n	8010eb4 <__multiply+0x130>
 8010e74:	46b6      	mov	lr, r6
 8010e76:	f04f 0a00 	mov.w	sl, #0
 8010e7a:	6834      	ldr	r4, [r6, #0]
 8010e7c:	f105 0114 	add.w	r1, r5, #20
 8010e80:	880a      	ldrh	r2, [r1, #0]
 8010e82:	f8be b002 	ldrh.w	fp, [lr, #2]
 8010e86:	b2a4      	uxth	r4, r4
 8010e88:	fb09 b202 	mla	r2, r9, r2, fp
 8010e8c:	4492      	add	sl, r2
 8010e8e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8010e92:	f84e 4b04 	str.w	r4, [lr], #4
 8010e96:	f851 4b04 	ldr.w	r4, [r1], #4
 8010e9a:	f8be 2000 	ldrh.w	r2, [lr]
 8010e9e:	0c24      	lsrs	r4, r4, #16
 8010ea0:	fb09 2404 	mla	r4, r9, r4, r2
 8010ea4:	458c      	cmp	ip, r1
 8010ea6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8010eaa:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010eae:	d8e7      	bhi.n	8010e80 <__multiply+0xfc>
 8010eb0:	9a01      	ldr	r2, [sp, #4]
 8010eb2:	50b4      	str	r4, [r6, r2]
 8010eb4:	3604      	adds	r6, #4
 8010eb6:	e7a3      	b.n	8010e00 <__multiply+0x7c>
 8010eb8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d1a5      	bne.n	8010e0c <__multiply+0x88>
 8010ec0:	3f01      	subs	r7, #1
 8010ec2:	e7a1      	b.n	8010e08 <__multiply+0x84>
 8010ec4:	0801440c 	.word	0x0801440c
 8010ec8:	08014480 	.word	0x08014480

08010ecc <__pow5mult>:
 8010ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ed0:	4615      	mov	r5, r2
 8010ed2:	f012 0203 	ands.w	r2, r2, #3
 8010ed6:	4606      	mov	r6, r0
 8010ed8:	460f      	mov	r7, r1
 8010eda:	d007      	beq.n	8010eec <__pow5mult+0x20>
 8010edc:	4c25      	ldr	r4, [pc, #148]	; (8010f74 <__pow5mult+0xa8>)
 8010ede:	3a01      	subs	r2, #1
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010ee6:	f7ff fe9f 	bl	8010c28 <__multadd>
 8010eea:	4607      	mov	r7, r0
 8010eec:	10ad      	asrs	r5, r5, #2
 8010eee:	d03d      	beq.n	8010f6c <__pow5mult+0xa0>
 8010ef0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010ef2:	b97c      	cbnz	r4, 8010f14 <__pow5mult+0x48>
 8010ef4:	2010      	movs	r0, #16
 8010ef6:	f7ff fe05 	bl	8010b04 <malloc>
 8010efa:	4602      	mov	r2, r0
 8010efc:	6270      	str	r0, [r6, #36]	; 0x24
 8010efe:	b928      	cbnz	r0, 8010f0c <__pow5mult+0x40>
 8010f00:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010f04:	4b1c      	ldr	r3, [pc, #112]	; (8010f78 <__pow5mult+0xac>)
 8010f06:	481d      	ldr	r0, [pc, #116]	; (8010f7c <__pow5mult+0xb0>)
 8010f08:	f7fd fdf8 	bl	800eafc <__assert_func>
 8010f0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010f10:	6004      	str	r4, [r0, #0]
 8010f12:	60c4      	str	r4, [r0, #12]
 8010f14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010f18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010f1c:	b94c      	cbnz	r4, 8010f32 <__pow5mult+0x66>
 8010f1e:	f240 2171 	movw	r1, #625	; 0x271
 8010f22:	4630      	mov	r0, r6
 8010f24:	f7ff ff18 	bl	8010d58 <__i2b>
 8010f28:	2300      	movs	r3, #0
 8010f2a:	4604      	mov	r4, r0
 8010f2c:	f8c8 0008 	str.w	r0, [r8, #8]
 8010f30:	6003      	str	r3, [r0, #0]
 8010f32:	f04f 0900 	mov.w	r9, #0
 8010f36:	07eb      	lsls	r3, r5, #31
 8010f38:	d50a      	bpl.n	8010f50 <__pow5mult+0x84>
 8010f3a:	4639      	mov	r1, r7
 8010f3c:	4622      	mov	r2, r4
 8010f3e:	4630      	mov	r0, r6
 8010f40:	f7ff ff20 	bl	8010d84 <__multiply>
 8010f44:	4680      	mov	r8, r0
 8010f46:	4639      	mov	r1, r7
 8010f48:	4630      	mov	r0, r6
 8010f4a:	f7ff fe4b 	bl	8010be4 <_Bfree>
 8010f4e:	4647      	mov	r7, r8
 8010f50:	106d      	asrs	r5, r5, #1
 8010f52:	d00b      	beq.n	8010f6c <__pow5mult+0xa0>
 8010f54:	6820      	ldr	r0, [r4, #0]
 8010f56:	b938      	cbnz	r0, 8010f68 <__pow5mult+0x9c>
 8010f58:	4622      	mov	r2, r4
 8010f5a:	4621      	mov	r1, r4
 8010f5c:	4630      	mov	r0, r6
 8010f5e:	f7ff ff11 	bl	8010d84 <__multiply>
 8010f62:	6020      	str	r0, [r4, #0]
 8010f64:	f8c0 9000 	str.w	r9, [r0]
 8010f68:	4604      	mov	r4, r0
 8010f6a:	e7e4      	b.n	8010f36 <__pow5mult+0x6a>
 8010f6c:	4638      	mov	r0, r7
 8010f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f72:	bf00      	nop
 8010f74:	080145d0 	.word	0x080145d0
 8010f78:	08014396 	.word	0x08014396
 8010f7c:	08014480 	.word	0x08014480

08010f80 <__lshift>:
 8010f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f84:	460c      	mov	r4, r1
 8010f86:	4607      	mov	r7, r0
 8010f88:	4691      	mov	r9, r2
 8010f8a:	6923      	ldr	r3, [r4, #16]
 8010f8c:	6849      	ldr	r1, [r1, #4]
 8010f8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010f92:	68a3      	ldr	r3, [r4, #8]
 8010f94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010f98:	f108 0601 	add.w	r6, r8, #1
 8010f9c:	42b3      	cmp	r3, r6
 8010f9e:	db0b      	blt.n	8010fb8 <__lshift+0x38>
 8010fa0:	4638      	mov	r0, r7
 8010fa2:	f7ff fddf 	bl	8010b64 <_Balloc>
 8010fa6:	4605      	mov	r5, r0
 8010fa8:	b948      	cbnz	r0, 8010fbe <__lshift+0x3e>
 8010faa:	4602      	mov	r2, r0
 8010fac:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010fb0:	4b27      	ldr	r3, [pc, #156]	; (8011050 <__lshift+0xd0>)
 8010fb2:	4828      	ldr	r0, [pc, #160]	; (8011054 <__lshift+0xd4>)
 8010fb4:	f7fd fda2 	bl	800eafc <__assert_func>
 8010fb8:	3101      	adds	r1, #1
 8010fba:	005b      	lsls	r3, r3, #1
 8010fbc:	e7ee      	b.n	8010f9c <__lshift+0x1c>
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	f100 0114 	add.w	r1, r0, #20
 8010fc4:	f100 0210 	add.w	r2, r0, #16
 8010fc8:	4618      	mov	r0, r3
 8010fca:	4553      	cmp	r3, sl
 8010fcc:	db33      	blt.n	8011036 <__lshift+0xb6>
 8010fce:	6920      	ldr	r0, [r4, #16]
 8010fd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010fd4:	f104 0314 	add.w	r3, r4, #20
 8010fd8:	f019 091f 	ands.w	r9, r9, #31
 8010fdc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010fe0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010fe4:	d02b      	beq.n	801103e <__lshift+0xbe>
 8010fe6:	468a      	mov	sl, r1
 8010fe8:	2200      	movs	r2, #0
 8010fea:	f1c9 0e20 	rsb	lr, r9, #32
 8010fee:	6818      	ldr	r0, [r3, #0]
 8010ff0:	fa00 f009 	lsl.w	r0, r0, r9
 8010ff4:	4302      	orrs	r2, r0
 8010ff6:	f84a 2b04 	str.w	r2, [sl], #4
 8010ffa:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ffe:	459c      	cmp	ip, r3
 8011000:	fa22 f20e 	lsr.w	r2, r2, lr
 8011004:	d8f3      	bhi.n	8010fee <__lshift+0x6e>
 8011006:	ebac 0304 	sub.w	r3, ip, r4
 801100a:	3b15      	subs	r3, #21
 801100c:	f023 0303 	bic.w	r3, r3, #3
 8011010:	3304      	adds	r3, #4
 8011012:	f104 0015 	add.w	r0, r4, #21
 8011016:	4584      	cmp	ip, r0
 8011018:	bf38      	it	cc
 801101a:	2304      	movcc	r3, #4
 801101c:	50ca      	str	r2, [r1, r3]
 801101e:	b10a      	cbz	r2, 8011024 <__lshift+0xa4>
 8011020:	f108 0602 	add.w	r6, r8, #2
 8011024:	3e01      	subs	r6, #1
 8011026:	4638      	mov	r0, r7
 8011028:	4621      	mov	r1, r4
 801102a:	612e      	str	r6, [r5, #16]
 801102c:	f7ff fdda 	bl	8010be4 <_Bfree>
 8011030:	4628      	mov	r0, r5
 8011032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011036:	f842 0f04 	str.w	r0, [r2, #4]!
 801103a:	3301      	adds	r3, #1
 801103c:	e7c5      	b.n	8010fca <__lshift+0x4a>
 801103e:	3904      	subs	r1, #4
 8011040:	f853 2b04 	ldr.w	r2, [r3], #4
 8011044:	459c      	cmp	ip, r3
 8011046:	f841 2f04 	str.w	r2, [r1, #4]!
 801104a:	d8f9      	bhi.n	8011040 <__lshift+0xc0>
 801104c:	e7ea      	b.n	8011024 <__lshift+0xa4>
 801104e:	bf00      	nop
 8011050:	0801440c 	.word	0x0801440c
 8011054:	08014480 	.word	0x08014480

08011058 <__mcmp>:
 8011058:	4603      	mov	r3, r0
 801105a:	690a      	ldr	r2, [r1, #16]
 801105c:	6900      	ldr	r0, [r0, #16]
 801105e:	b530      	push	{r4, r5, lr}
 8011060:	1a80      	subs	r0, r0, r2
 8011062:	d10d      	bne.n	8011080 <__mcmp+0x28>
 8011064:	3314      	adds	r3, #20
 8011066:	3114      	adds	r1, #20
 8011068:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801106c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011070:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011074:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011078:	4295      	cmp	r5, r2
 801107a:	d002      	beq.n	8011082 <__mcmp+0x2a>
 801107c:	d304      	bcc.n	8011088 <__mcmp+0x30>
 801107e:	2001      	movs	r0, #1
 8011080:	bd30      	pop	{r4, r5, pc}
 8011082:	42a3      	cmp	r3, r4
 8011084:	d3f4      	bcc.n	8011070 <__mcmp+0x18>
 8011086:	e7fb      	b.n	8011080 <__mcmp+0x28>
 8011088:	f04f 30ff 	mov.w	r0, #4294967295
 801108c:	e7f8      	b.n	8011080 <__mcmp+0x28>
	...

08011090 <__mdiff>:
 8011090:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011094:	460c      	mov	r4, r1
 8011096:	4606      	mov	r6, r0
 8011098:	4611      	mov	r1, r2
 801109a:	4620      	mov	r0, r4
 801109c:	4692      	mov	sl, r2
 801109e:	f7ff ffdb 	bl	8011058 <__mcmp>
 80110a2:	1e05      	subs	r5, r0, #0
 80110a4:	d111      	bne.n	80110ca <__mdiff+0x3a>
 80110a6:	4629      	mov	r1, r5
 80110a8:	4630      	mov	r0, r6
 80110aa:	f7ff fd5b 	bl	8010b64 <_Balloc>
 80110ae:	4602      	mov	r2, r0
 80110b0:	b928      	cbnz	r0, 80110be <__mdiff+0x2e>
 80110b2:	f240 2132 	movw	r1, #562	; 0x232
 80110b6:	4b3c      	ldr	r3, [pc, #240]	; (80111a8 <__mdiff+0x118>)
 80110b8:	483c      	ldr	r0, [pc, #240]	; (80111ac <__mdiff+0x11c>)
 80110ba:	f7fd fd1f 	bl	800eafc <__assert_func>
 80110be:	2301      	movs	r3, #1
 80110c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80110c4:	4610      	mov	r0, r2
 80110c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110ca:	bfa4      	itt	ge
 80110cc:	4653      	movge	r3, sl
 80110ce:	46a2      	movge	sl, r4
 80110d0:	4630      	mov	r0, r6
 80110d2:	f8da 1004 	ldr.w	r1, [sl, #4]
 80110d6:	bfa6      	itte	ge
 80110d8:	461c      	movge	r4, r3
 80110da:	2500      	movge	r5, #0
 80110dc:	2501      	movlt	r5, #1
 80110de:	f7ff fd41 	bl	8010b64 <_Balloc>
 80110e2:	4602      	mov	r2, r0
 80110e4:	b918      	cbnz	r0, 80110ee <__mdiff+0x5e>
 80110e6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80110ea:	4b2f      	ldr	r3, [pc, #188]	; (80111a8 <__mdiff+0x118>)
 80110ec:	e7e4      	b.n	80110b8 <__mdiff+0x28>
 80110ee:	f100 0814 	add.w	r8, r0, #20
 80110f2:	f8da 7010 	ldr.w	r7, [sl, #16]
 80110f6:	60c5      	str	r5, [r0, #12]
 80110f8:	f04f 0c00 	mov.w	ip, #0
 80110fc:	f10a 0514 	add.w	r5, sl, #20
 8011100:	f10a 0010 	add.w	r0, sl, #16
 8011104:	46c2      	mov	sl, r8
 8011106:	6926      	ldr	r6, [r4, #16]
 8011108:	f104 0914 	add.w	r9, r4, #20
 801110c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8011110:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011114:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8011118:	f859 3b04 	ldr.w	r3, [r9], #4
 801111c:	fa1f f18b 	uxth.w	r1, fp
 8011120:	4461      	add	r1, ip
 8011122:	fa1f fc83 	uxth.w	ip, r3
 8011126:	0c1b      	lsrs	r3, r3, #16
 8011128:	eba1 010c 	sub.w	r1, r1, ip
 801112c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011130:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8011134:	b289      	uxth	r1, r1
 8011136:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801113a:	454e      	cmp	r6, r9
 801113c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011140:	f84a 3b04 	str.w	r3, [sl], #4
 8011144:	d8e6      	bhi.n	8011114 <__mdiff+0x84>
 8011146:	1b33      	subs	r3, r6, r4
 8011148:	3b15      	subs	r3, #21
 801114a:	f023 0303 	bic.w	r3, r3, #3
 801114e:	3415      	adds	r4, #21
 8011150:	3304      	adds	r3, #4
 8011152:	42a6      	cmp	r6, r4
 8011154:	bf38      	it	cc
 8011156:	2304      	movcc	r3, #4
 8011158:	441d      	add	r5, r3
 801115a:	4443      	add	r3, r8
 801115c:	461e      	mov	r6, r3
 801115e:	462c      	mov	r4, r5
 8011160:	4574      	cmp	r4, lr
 8011162:	d30e      	bcc.n	8011182 <__mdiff+0xf2>
 8011164:	f10e 0103 	add.w	r1, lr, #3
 8011168:	1b49      	subs	r1, r1, r5
 801116a:	f021 0103 	bic.w	r1, r1, #3
 801116e:	3d03      	subs	r5, #3
 8011170:	45ae      	cmp	lr, r5
 8011172:	bf38      	it	cc
 8011174:	2100      	movcc	r1, #0
 8011176:	4419      	add	r1, r3
 8011178:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 801117c:	b18b      	cbz	r3, 80111a2 <__mdiff+0x112>
 801117e:	6117      	str	r7, [r2, #16]
 8011180:	e7a0      	b.n	80110c4 <__mdiff+0x34>
 8011182:	f854 8b04 	ldr.w	r8, [r4], #4
 8011186:	fa1f f188 	uxth.w	r1, r8
 801118a:	4461      	add	r1, ip
 801118c:	1408      	asrs	r0, r1, #16
 801118e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8011192:	b289      	uxth	r1, r1
 8011194:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011198:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801119c:	f846 1b04 	str.w	r1, [r6], #4
 80111a0:	e7de      	b.n	8011160 <__mdiff+0xd0>
 80111a2:	3f01      	subs	r7, #1
 80111a4:	e7e8      	b.n	8011178 <__mdiff+0xe8>
 80111a6:	bf00      	nop
 80111a8:	0801440c 	.word	0x0801440c
 80111ac:	08014480 	.word	0x08014480

080111b0 <__d2b>:
 80111b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80111b4:	2101      	movs	r1, #1
 80111b6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80111ba:	4690      	mov	r8, r2
 80111bc:	461d      	mov	r5, r3
 80111be:	f7ff fcd1 	bl	8010b64 <_Balloc>
 80111c2:	4604      	mov	r4, r0
 80111c4:	b930      	cbnz	r0, 80111d4 <__d2b+0x24>
 80111c6:	4602      	mov	r2, r0
 80111c8:	f240 310a 	movw	r1, #778	; 0x30a
 80111cc:	4b24      	ldr	r3, [pc, #144]	; (8011260 <__d2b+0xb0>)
 80111ce:	4825      	ldr	r0, [pc, #148]	; (8011264 <__d2b+0xb4>)
 80111d0:	f7fd fc94 	bl	800eafc <__assert_func>
 80111d4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80111d8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80111dc:	bb2d      	cbnz	r5, 801122a <__d2b+0x7a>
 80111de:	9301      	str	r3, [sp, #4]
 80111e0:	f1b8 0300 	subs.w	r3, r8, #0
 80111e4:	d026      	beq.n	8011234 <__d2b+0x84>
 80111e6:	4668      	mov	r0, sp
 80111e8:	9300      	str	r3, [sp, #0]
 80111ea:	f7ff fd87 	bl	8010cfc <__lo0bits>
 80111ee:	9900      	ldr	r1, [sp, #0]
 80111f0:	b1f0      	cbz	r0, 8011230 <__d2b+0x80>
 80111f2:	9a01      	ldr	r2, [sp, #4]
 80111f4:	f1c0 0320 	rsb	r3, r0, #32
 80111f8:	fa02 f303 	lsl.w	r3, r2, r3
 80111fc:	430b      	orrs	r3, r1
 80111fe:	40c2      	lsrs	r2, r0
 8011200:	6163      	str	r3, [r4, #20]
 8011202:	9201      	str	r2, [sp, #4]
 8011204:	9b01      	ldr	r3, [sp, #4]
 8011206:	2b00      	cmp	r3, #0
 8011208:	bf14      	ite	ne
 801120a:	2102      	movne	r1, #2
 801120c:	2101      	moveq	r1, #1
 801120e:	61a3      	str	r3, [r4, #24]
 8011210:	6121      	str	r1, [r4, #16]
 8011212:	b1c5      	cbz	r5, 8011246 <__d2b+0x96>
 8011214:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011218:	4405      	add	r5, r0
 801121a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801121e:	603d      	str	r5, [r7, #0]
 8011220:	6030      	str	r0, [r6, #0]
 8011222:	4620      	mov	r0, r4
 8011224:	b002      	add	sp, #8
 8011226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801122a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801122e:	e7d6      	b.n	80111de <__d2b+0x2e>
 8011230:	6161      	str	r1, [r4, #20]
 8011232:	e7e7      	b.n	8011204 <__d2b+0x54>
 8011234:	a801      	add	r0, sp, #4
 8011236:	f7ff fd61 	bl	8010cfc <__lo0bits>
 801123a:	2101      	movs	r1, #1
 801123c:	9b01      	ldr	r3, [sp, #4]
 801123e:	6121      	str	r1, [r4, #16]
 8011240:	6163      	str	r3, [r4, #20]
 8011242:	3020      	adds	r0, #32
 8011244:	e7e5      	b.n	8011212 <__d2b+0x62>
 8011246:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801124a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801124e:	6038      	str	r0, [r7, #0]
 8011250:	6918      	ldr	r0, [r3, #16]
 8011252:	f7ff fd33 	bl	8010cbc <__hi0bits>
 8011256:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 801125a:	6031      	str	r1, [r6, #0]
 801125c:	e7e1      	b.n	8011222 <__d2b+0x72>
 801125e:	bf00      	nop
 8011260:	0801440c 	.word	0x0801440c
 8011264:	08014480 	.word	0x08014480

08011268 <_calloc_r>:
 8011268:	b538      	push	{r3, r4, r5, lr}
 801126a:	fb02 f501 	mul.w	r5, r2, r1
 801126e:	4629      	mov	r1, r5
 8011270:	f000 f854 	bl	801131c <_malloc_r>
 8011274:	4604      	mov	r4, r0
 8011276:	b118      	cbz	r0, 8011280 <_calloc_r+0x18>
 8011278:	462a      	mov	r2, r5
 801127a:	2100      	movs	r1, #0
 801127c:	f7fd fca6 	bl	800ebcc <memset>
 8011280:	4620      	mov	r0, r4
 8011282:	bd38      	pop	{r3, r4, r5, pc}

08011284 <_free_r>:
 8011284:	b538      	push	{r3, r4, r5, lr}
 8011286:	4605      	mov	r5, r0
 8011288:	2900      	cmp	r1, #0
 801128a:	d043      	beq.n	8011314 <_free_r+0x90>
 801128c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011290:	1f0c      	subs	r4, r1, #4
 8011292:	2b00      	cmp	r3, #0
 8011294:	bfb8      	it	lt
 8011296:	18e4      	addlt	r4, r4, r3
 8011298:	f000 fb64 	bl	8011964 <__malloc_lock>
 801129c:	4a1e      	ldr	r2, [pc, #120]	; (8011318 <_free_r+0x94>)
 801129e:	6813      	ldr	r3, [r2, #0]
 80112a0:	4610      	mov	r0, r2
 80112a2:	b933      	cbnz	r3, 80112b2 <_free_r+0x2e>
 80112a4:	6063      	str	r3, [r4, #4]
 80112a6:	6014      	str	r4, [r2, #0]
 80112a8:	4628      	mov	r0, r5
 80112aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80112ae:	f000 bb5f 	b.w	8011970 <__malloc_unlock>
 80112b2:	42a3      	cmp	r3, r4
 80112b4:	d90a      	bls.n	80112cc <_free_r+0x48>
 80112b6:	6821      	ldr	r1, [r4, #0]
 80112b8:	1862      	adds	r2, r4, r1
 80112ba:	4293      	cmp	r3, r2
 80112bc:	bf01      	itttt	eq
 80112be:	681a      	ldreq	r2, [r3, #0]
 80112c0:	685b      	ldreq	r3, [r3, #4]
 80112c2:	1852      	addeq	r2, r2, r1
 80112c4:	6022      	streq	r2, [r4, #0]
 80112c6:	6063      	str	r3, [r4, #4]
 80112c8:	6004      	str	r4, [r0, #0]
 80112ca:	e7ed      	b.n	80112a8 <_free_r+0x24>
 80112cc:	461a      	mov	r2, r3
 80112ce:	685b      	ldr	r3, [r3, #4]
 80112d0:	b10b      	cbz	r3, 80112d6 <_free_r+0x52>
 80112d2:	42a3      	cmp	r3, r4
 80112d4:	d9fa      	bls.n	80112cc <_free_r+0x48>
 80112d6:	6811      	ldr	r1, [r2, #0]
 80112d8:	1850      	adds	r0, r2, r1
 80112da:	42a0      	cmp	r0, r4
 80112dc:	d10b      	bne.n	80112f6 <_free_r+0x72>
 80112de:	6820      	ldr	r0, [r4, #0]
 80112e0:	4401      	add	r1, r0
 80112e2:	1850      	adds	r0, r2, r1
 80112e4:	4283      	cmp	r3, r0
 80112e6:	6011      	str	r1, [r2, #0]
 80112e8:	d1de      	bne.n	80112a8 <_free_r+0x24>
 80112ea:	6818      	ldr	r0, [r3, #0]
 80112ec:	685b      	ldr	r3, [r3, #4]
 80112ee:	4401      	add	r1, r0
 80112f0:	6011      	str	r1, [r2, #0]
 80112f2:	6053      	str	r3, [r2, #4]
 80112f4:	e7d8      	b.n	80112a8 <_free_r+0x24>
 80112f6:	d902      	bls.n	80112fe <_free_r+0x7a>
 80112f8:	230c      	movs	r3, #12
 80112fa:	602b      	str	r3, [r5, #0]
 80112fc:	e7d4      	b.n	80112a8 <_free_r+0x24>
 80112fe:	6820      	ldr	r0, [r4, #0]
 8011300:	1821      	adds	r1, r4, r0
 8011302:	428b      	cmp	r3, r1
 8011304:	bf01      	itttt	eq
 8011306:	6819      	ldreq	r1, [r3, #0]
 8011308:	685b      	ldreq	r3, [r3, #4]
 801130a:	1809      	addeq	r1, r1, r0
 801130c:	6021      	streq	r1, [r4, #0]
 801130e:	6063      	str	r3, [r4, #4]
 8011310:	6054      	str	r4, [r2, #4]
 8011312:	e7c9      	b.n	80112a8 <_free_r+0x24>
 8011314:	bd38      	pop	{r3, r4, r5, pc}
 8011316:	bf00      	nop
 8011318:	200038a0 	.word	0x200038a0

0801131c <_malloc_r>:
 801131c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801131e:	1ccd      	adds	r5, r1, #3
 8011320:	f025 0503 	bic.w	r5, r5, #3
 8011324:	3508      	adds	r5, #8
 8011326:	2d0c      	cmp	r5, #12
 8011328:	bf38      	it	cc
 801132a:	250c      	movcc	r5, #12
 801132c:	2d00      	cmp	r5, #0
 801132e:	4606      	mov	r6, r0
 8011330:	db01      	blt.n	8011336 <_malloc_r+0x1a>
 8011332:	42a9      	cmp	r1, r5
 8011334:	d903      	bls.n	801133e <_malloc_r+0x22>
 8011336:	230c      	movs	r3, #12
 8011338:	6033      	str	r3, [r6, #0]
 801133a:	2000      	movs	r0, #0
 801133c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801133e:	f000 fb11 	bl	8011964 <__malloc_lock>
 8011342:	4921      	ldr	r1, [pc, #132]	; (80113c8 <_malloc_r+0xac>)
 8011344:	680a      	ldr	r2, [r1, #0]
 8011346:	4614      	mov	r4, r2
 8011348:	b99c      	cbnz	r4, 8011372 <_malloc_r+0x56>
 801134a:	4f20      	ldr	r7, [pc, #128]	; (80113cc <_malloc_r+0xb0>)
 801134c:	683b      	ldr	r3, [r7, #0]
 801134e:	b923      	cbnz	r3, 801135a <_malloc_r+0x3e>
 8011350:	4621      	mov	r1, r4
 8011352:	4630      	mov	r0, r6
 8011354:	f000 fa06 	bl	8011764 <_sbrk_r>
 8011358:	6038      	str	r0, [r7, #0]
 801135a:	4629      	mov	r1, r5
 801135c:	4630      	mov	r0, r6
 801135e:	f000 fa01 	bl	8011764 <_sbrk_r>
 8011362:	1c43      	adds	r3, r0, #1
 8011364:	d123      	bne.n	80113ae <_malloc_r+0x92>
 8011366:	230c      	movs	r3, #12
 8011368:	4630      	mov	r0, r6
 801136a:	6033      	str	r3, [r6, #0]
 801136c:	f000 fb00 	bl	8011970 <__malloc_unlock>
 8011370:	e7e3      	b.n	801133a <_malloc_r+0x1e>
 8011372:	6823      	ldr	r3, [r4, #0]
 8011374:	1b5b      	subs	r3, r3, r5
 8011376:	d417      	bmi.n	80113a8 <_malloc_r+0x8c>
 8011378:	2b0b      	cmp	r3, #11
 801137a:	d903      	bls.n	8011384 <_malloc_r+0x68>
 801137c:	6023      	str	r3, [r4, #0]
 801137e:	441c      	add	r4, r3
 8011380:	6025      	str	r5, [r4, #0]
 8011382:	e004      	b.n	801138e <_malloc_r+0x72>
 8011384:	6863      	ldr	r3, [r4, #4]
 8011386:	42a2      	cmp	r2, r4
 8011388:	bf0c      	ite	eq
 801138a:	600b      	streq	r3, [r1, #0]
 801138c:	6053      	strne	r3, [r2, #4]
 801138e:	4630      	mov	r0, r6
 8011390:	f000 faee 	bl	8011970 <__malloc_unlock>
 8011394:	f104 000b 	add.w	r0, r4, #11
 8011398:	1d23      	adds	r3, r4, #4
 801139a:	f020 0007 	bic.w	r0, r0, #7
 801139e:	1ac2      	subs	r2, r0, r3
 80113a0:	d0cc      	beq.n	801133c <_malloc_r+0x20>
 80113a2:	1a1b      	subs	r3, r3, r0
 80113a4:	50a3      	str	r3, [r4, r2]
 80113a6:	e7c9      	b.n	801133c <_malloc_r+0x20>
 80113a8:	4622      	mov	r2, r4
 80113aa:	6864      	ldr	r4, [r4, #4]
 80113ac:	e7cc      	b.n	8011348 <_malloc_r+0x2c>
 80113ae:	1cc4      	adds	r4, r0, #3
 80113b0:	f024 0403 	bic.w	r4, r4, #3
 80113b4:	42a0      	cmp	r0, r4
 80113b6:	d0e3      	beq.n	8011380 <_malloc_r+0x64>
 80113b8:	1a21      	subs	r1, r4, r0
 80113ba:	4630      	mov	r0, r6
 80113bc:	f000 f9d2 	bl	8011764 <_sbrk_r>
 80113c0:	3001      	adds	r0, #1
 80113c2:	d1dd      	bne.n	8011380 <_malloc_r+0x64>
 80113c4:	e7cf      	b.n	8011366 <_malloc_r+0x4a>
 80113c6:	bf00      	nop
 80113c8:	200038a0 	.word	0x200038a0
 80113cc:	200038a4 	.word	0x200038a4

080113d0 <_realloc_r>:
 80113d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113d2:	4607      	mov	r7, r0
 80113d4:	4614      	mov	r4, r2
 80113d6:	460e      	mov	r6, r1
 80113d8:	b921      	cbnz	r1, 80113e4 <_realloc_r+0x14>
 80113da:	4611      	mov	r1, r2
 80113dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80113e0:	f7ff bf9c 	b.w	801131c <_malloc_r>
 80113e4:	b922      	cbnz	r2, 80113f0 <_realloc_r+0x20>
 80113e6:	f7ff ff4d 	bl	8011284 <_free_r>
 80113ea:	4625      	mov	r5, r4
 80113ec:	4628      	mov	r0, r5
 80113ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113f0:	f000 fac4 	bl	801197c <_malloc_usable_size_r>
 80113f4:	42a0      	cmp	r0, r4
 80113f6:	d20f      	bcs.n	8011418 <_realloc_r+0x48>
 80113f8:	4621      	mov	r1, r4
 80113fa:	4638      	mov	r0, r7
 80113fc:	f7ff ff8e 	bl	801131c <_malloc_r>
 8011400:	4605      	mov	r5, r0
 8011402:	2800      	cmp	r0, #0
 8011404:	d0f2      	beq.n	80113ec <_realloc_r+0x1c>
 8011406:	4631      	mov	r1, r6
 8011408:	4622      	mov	r2, r4
 801140a:	f7fd fbd1 	bl	800ebb0 <memcpy>
 801140e:	4631      	mov	r1, r6
 8011410:	4638      	mov	r0, r7
 8011412:	f7ff ff37 	bl	8011284 <_free_r>
 8011416:	e7e9      	b.n	80113ec <_realloc_r+0x1c>
 8011418:	4635      	mov	r5, r6
 801141a:	e7e7      	b.n	80113ec <_realloc_r+0x1c>

0801141c <__ssputs_r>:
 801141c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011420:	688e      	ldr	r6, [r1, #8]
 8011422:	4682      	mov	sl, r0
 8011424:	429e      	cmp	r6, r3
 8011426:	460c      	mov	r4, r1
 8011428:	4690      	mov	r8, r2
 801142a:	461f      	mov	r7, r3
 801142c:	d838      	bhi.n	80114a0 <__ssputs_r+0x84>
 801142e:	898a      	ldrh	r2, [r1, #12]
 8011430:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011434:	d032      	beq.n	801149c <__ssputs_r+0x80>
 8011436:	6825      	ldr	r5, [r4, #0]
 8011438:	6909      	ldr	r1, [r1, #16]
 801143a:	3301      	adds	r3, #1
 801143c:	eba5 0901 	sub.w	r9, r5, r1
 8011440:	6965      	ldr	r5, [r4, #20]
 8011442:	444b      	add	r3, r9
 8011444:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011448:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801144c:	106d      	asrs	r5, r5, #1
 801144e:	429d      	cmp	r5, r3
 8011450:	bf38      	it	cc
 8011452:	461d      	movcc	r5, r3
 8011454:	0553      	lsls	r3, r2, #21
 8011456:	d531      	bpl.n	80114bc <__ssputs_r+0xa0>
 8011458:	4629      	mov	r1, r5
 801145a:	f7ff ff5f 	bl	801131c <_malloc_r>
 801145e:	4606      	mov	r6, r0
 8011460:	b950      	cbnz	r0, 8011478 <__ssputs_r+0x5c>
 8011462:	230c      	movs	r3, #12
 8011464:	f04f 30ff 	mov.w	r0, #4294967295
 8011468:	f8ca 3000 	str.w	r3, [sl]
 801146c:	89a3      	ldrh	r3, [r4, #12]
 801146e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011472:	81a3      	strh	r3, [r4, #12]
 8011474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011478:	464a      	mov	r2, r9
 801147a:	6921      	ldr	r1, [r4, #16]
 801147c:	f7fd fb98 	bl	800ebb0 <memcpy>
 8011480:	89a3      	ldrh	r3, [r4, #12]
 8011482:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801148a:	81a3      	strh	r3, [r4, #12]
 801148c:	6126      	str	r6, [r4, #16]
 801148e:	444e      	add	r6, r9
 8011490:	6026      	str	r6, [r4, #0]
 8011492:	463e      	mov	r6, r7
 8011494:	6165      	str	r5, [r4, #20]
 8011496:	eba5 0509 	sub.w	r5, r5, r9
 801149a:	60a5      	str	r5, [r4, #8]
 801149c:	42be      	cmp	r6, r7
 801149e:	d900      	bls.n	80114a2 <__ssputs_r+0x86>
 80114a0:	463e      	mov	r6, r7
 80114a2:	4632      	mov	r2, r6
 80114a4:	4641      	mov	r1, r8
 80114a6:	6820      	ldr	r0, [r4, #0]
 80114a8:	f7ff fb42 	bl	8010b30 <memmove>
 80114ac:	68a3      	ldr	r3, [r4, #8]
 80114ae:	6822      	ldr	r2, [r4, #0]
 80114b0:	1b9b      	subs	r3, r3, r6
 80114b2:	4432      	add	r2, r6
 80114b4:	2000      	movs	r0, #0
 80114b6:	60a3      	str	r3, [r4, #8]
 80114b8:	6022      	str	r2, [r4, #0]
 80114ba:	e7db      	b.n	8011474 <__ssputs_r+0x58>
 80114bc:	462a      	mov	r2, r5
 80114be:	f7ff ff87 	bl	80113d0 <_realloc_r>
 80114c2:	4606      	mov	r6, r0
 80114c4:	2800      	cmp	r0, #0
 80114c6:	d1e1      	bne.n	801148c <__ssputs_r+0x70>
 80114c8:	4650      	mov	r0, sl
 80114ca:	6921      	ldr	r1, [r4, #16]
 80114cc:	f7ff feda 	bl	8011284 <_free_r>
 80114d0:	e7c7      	b.n	8011462 <__ssputs_r+0x46>
	...

080114d4 <_svfiprintf_r>:
 80114d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114d8:	4698      	mov	r8, r3
 80114da:	898b      	ldrh	r3, [r1, #12]
 80114dc:	4607      	mov	r7, r0
 80114de:	061b      	lsls	r3, r3, #24
 80114e0:	460d      	mov	r5, r1
 80114e2:	4614      	mov	r4, r2
 80114e4:	b09d      	sub	sp, #116	; 0x74
 80114e6:	d50e      	bpl.n	8011506 <_svfiprintf_r+0x32>
 80114e8:	690b      	ldr	r3, [r1, #16]
 80114ea:	b963      	cbnz	r3, 8011506 <_svfiprintf_r+0x32>
 80114ec:	2140      	movs	r1, #64	; 0x40
 80114ee:	f7ff ff15 	bl	801131c <_malloc_r>
 80114f2:	6028      	str	r0, [r5, #0]
 80114f4:	6128      	str	r0, [r5, #16]
 80114f6:	b920      	cbnz	r0, 8011502 <_svfiprintf_r+0x2e>
 80114f8:	230c      	movs	r3, #12
 80114fa:	603b      	str	r3, [r7, #0]
 80114fc:	f04f 30ff 	mov.w	r0, #4294967295
 8011500:	e0d1      	b.n	80116a6 <_svfiprintf_r+0x1d2>
 8011502:	2340      	movs	r3, #64	; 0x40
 8011504:	616b      	str	r3, [r5, #20]
 8011506:	2300      	movs	r3, #0
 8011508:	9309      	str	r3, [sp, #36]	; 0x24
 801150a:	2320      	movs	r3, #32
 801150c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011510:	2330      	movs	r3, #48	; 0x30
 8011512:	f04f 0901 	mov.w	r9, #1
 8011516:	f8cd 800c 	str.w	r8, [sp, #12]
 801151a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80116c0 <_svfiprintf_r+0x1ec>
 801151e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011522:	4623      	mov	r3, r4
 8011524:	469a      	mov	sl, r3
 8011526:	f813 2b01 	ldrb.w	r2, [r3], #1
 801152a:	b10a      	cbz	r2, 8011530 <_svfiprintf_r+0x5c>
 801152c:	2a25      	cmp	r2, #37	; 0x25
 801152e:	d1f9      	bne.n	8011524 <_svfiprintf_r+0x50>
 8011530:	ebba 0b04 	subs.w	fp, sl, r4
 8011534:	d00b      	beq.n	801154e <_svfiprintf_r+0x7a>
 8011536:	465b      	mov	r3, fp
 8011538:	4622      	mov	r2, r4
 801153a:	4629      	mov	r1, r5
 801153c:	4638      	mov	r0, r7
 801153e:	f7ff ff6d 	bl	801141c <__ssputs_r>
 8011542:	3001      	adds	r0, #1
 8011544:	f000 80aa 	beq.w	801169c <_svfiprintf_r+0x1c8>
 8011548:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801154a:	445a      	add	r2, fp
 801154c:	9209      	str	r2, [sp, #36]	; 0x24
 801154e:	f89a 3000 	ldrb.w	r3, [sl]
 8011552:	2b00      	cmp	r3, #0
 8011554:	f000 80a2 	beq.w	801169c <_svfiprintf_r+0x1c8>
 8011558:	2300      	movs	r3, #0
 801155a:	f04f 32ff 	mov.w	r2, #4294967295
 801155e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011562:	f10a 0a01 	add.w	sl, sl, #1
 8011566:	9304      	str	r3, [sp, #16]
 8011568:	9307      	str	r3, [sp, #28]
 801156a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801156e:	931a      	str	r3, [sp, #104]	; 0x68
 8011570:	4654      	mov	r4, sl
 8011572:	2205      	movs	r2, #5
 8011574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011578:	4851      	ldr	r0, [pc, #324]	; (80116c0 <_svfiprintf_r+0x1ec>)
 801157a:	f7ff facb 	bl	8010b14 <memchr>
 801157e:	9a04      	ldr	r2, [sp, #16]
 8011580:	b9d8      	cbnz	r0, 80115ba <_svfiprintf_r+0xe6>
 8011582:	06d0      	lsls	r0, r2, #27
 8011584:	bf44      	itt	mi
 8011586:	2320      	movmi	r3, #32
 8011588:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801158c:	0711      	lsls	r1, r2, #28
 801158e:	bf44      	itt	mi
 8011590:	232b      	movmi	r3, #43	; 0x2b
 8011592:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011596:	f89a 3000 	ldrb.w	r3, [sl]
 801159a:	2b2a      	cmp	r3, #42	; 0x2a
 801159c:	d015      	beq.n	80115ca <_svfiprintf_r+0xf6>
 801159e:	4654      	mov	r4, sl
 80115a0:	2000      	movs	r0, #0
 80115a2:	f04f 0c0a 	mov.w	ip, #10
 80115a6:	9a07      	ldr	r2, [sp, #28]
 80115a8:	4621      	mov	r1, r4
 80115aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80115ae:	3b30      	subs	r3, #48	; 0x30
 80115b0:	2b09      	cmp	r3, #9
 80115b2:	d94e      	bls.n	8011652 <_svfiprintf_r+0x17e>
 80115b4:	b1b0      	cbz	r0, 80115e4 <_svfiprintf_r+0x110>
 80115b6:	9207      	str	r2, [sp, #28]
 80115b8:	e014      	b.n	80115e4 <_svfiprintf_r+0x110>
 80115ba:	eba0 0308 	sub.w	r3, r0, r8
 80115be:	fa09 f303 	lsl.w	r3, r9, r3
 80115c2:	4313      	orrs	r3, r2
 80115c4:	46a2      	mov	sl, r4
 80115c6:	9304      	str	r3, [sp, #16]
 80115c8:	e7d2      	b.n	8011570 <_svfiprintf_r+0x9c>
 80115ca:	9b03      	ldr	r3, [sp, #12]
 80115cc:	1d19      	adds	r1, r3, #4
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	9103      	str	r1, [sp, #12]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	bfbb      	ittet	lt
 80115d6:	425b      	neglt	r3, r3
 80115d8:	f042 0202 	orrlt.w	r2, r2, #2
 80115dc:	9307      	strge	r3, [sp, #28]
 80115de:	9307      	strlt	r3, [sp, #28]
 80115e0:	bfb8      	it	lt
 80115e2:	9204      	strlt	r2, [sp, #16]
 80115e4:	7823      	ldrb	r3, [r4, #0]
 80115e6:	2b2e      	cmp	r3, #46	; 0x2e
 80115e8:	d10c      	bne.n	8011604 <_svfiprintf_r+0x130>
 80115ea:	7863      	ldrb	r3, [r4, #1]
 80115ec:	2b2a      	cmp	r3, #42	; 0x2a
 80115ee:	d135      	bne.n	801165c <_svfiprintf_r+0x188>
 80115f0:	9b03      	ldr	r3, [sp, #12]
 80115f2:	3402      	adds	r4, #2
 80115f4:	1d1a      	adds	r2, r3, #4
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	9203      	str	r2, [sp, #12]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	bfb8      	it	lt
 80115fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8011602:	9305      	str	r3, [sp, #20]
 8011604:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80116d0 <_svfiprintf_r+0x1fc>
 8011608:	2203      	movs	r2, #3
 801160a:	4650      	mov	r0, sl
 801160c:	7821      	ldrb	r1, [r4, #0]
 801160e:	f7ff fa81 	bl	8010b14 <memchr>
 8011612:	b140      	cbz	r0, 8011626 <_svfiprintf_r+0x152>
 8011614:	2340      	movs	r3, #64	; 0x40
 8011616:	eba0 000a 	sub.w	r0, r0, sl
 801161a:	fa03 f000 	lsl.w	r0, r3, r0
 801161e:	9b04      	ldr	r3, [sp, #16]
 8011620:	3401      	adds	r4, #1
 8011622:	4303      	orrs	r3, r0
 8011624:	9304      	str	r3, [sp, #16]
 8011626:	f814 1b01 	ldrb.w	r1, [r4], #1
 801162a:	2206      	movs	r2, #6
 801162c:	4825      	ldr	r0, [pc, #148]	; (80116c4 <_svfiprintf_r+0x1f0>)
 801162e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011632:	f7ff fa6f 	bl	8010b14 <memchr>
 8011636:	2800      	cmp	r0, #0
 8011638:	d038      	beq.n	80116ac <_svfiprintf_r+0x1d8>
 801163a:	4b23      	ldr	r3, [pc, #140]	; (80116c8 <_svfiprintf_r+0x1f4>)
 801163c:	bb1b      	cbnz	r3, 8011686 <_svfiprintf_r+0x1b2>
 801163e:	9b03      	ldr	r3, [sp, #12]
 8011640:	3307      	adds	r3, #7
 8011642:	f023 0307 	bic.w	r3, r3, #7
 8011646:	3308      	adds	r3, #8
 8011648:	9303      	str	r3, [sp, #12]
 801164a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801164c:	4433      	add	r3, r6
 801164e:	9309      	str	r3, [sp, #36]	; 0x24
 8011650:	e767      	b.n	8011522 <_svfiprintf_r+0x4e>
 8011652:	460c      	mov	r4, r1
 8011654:	2001      	movs	r0, #1
 8011656:	fb0c 3202 	mla	r2, ip, r2, r3
 801165a:	e7a5      	b.n	80115a8 <_svfiprintf_r+0xd4>
 801165c:	2300      	movs	r3, #0
 801165e:	f04f 0c0a 	mov.w	ip, #10
 8011662:	4619      	mov	r1, r3
 8011664:	3401      	adds	r4, #1
 8011666:	9305      	str	r3, [sp, #20]
 8011668:	4620      	mov	r0, r4
 801166a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801166e:	3a30      	subs	r2, #48	; 0x30
 8011670:	2a09      	cmp	r2, #9
 8011672:	d903      	bls.n	801167c <_svfiprintf_r+0x1a8>
 8011674:	2b00      	cmp	r3, #0
 8011676:	d0c5      	beq.n	8011604 <_svfiprintf_r+0x130>
 8011678:	9105      	str	r1, [sp, #20]
 801167a:	e7c3      	b.n	8011604 <_svfiprintf_r+0x130>
 801167c:	4604      	mov	r4, r0
 801167e:	2301      	movs	r3, #1
 8011680:	fb0c 2101 	mla	r1, ip, r1, r2
 8011684:	e7f0      	b.n	8011668 <_svfiprintf_r+0x194>
 8011686:	ab03      	add	r3, sp, #12
 8011688:	9300      	str	r3, [sp, #0]
 801168a:	462a      	mov	r2, r5
 801168c:	4638      	mov	r0, r7
 801168e:	4b0f      	ldr	r3, [pc, #60]	; (80116cc <_svfiprintf_r+0x1f8>)
 8011690:	a904      	add	r1, sp, #16
 8011692:	f7fd fc99 	bl	800efc8 <_printf_float>
 8011696:	1c42      	adds	r2, r0, #1
 8011698:	4606      	mov	r6, r0
 801169a:	d1d6      	bne.n	801164a <_svfiprintf_r+0x176>
 801169c:	89ab      	ldrh	r3, [r5, #12]
 801169e:	065b      	lsls	r3, r3, #25
 80116a0:	f53f af2c 	bmi.w	80114fc <_svfiprintf_r+0x28>
 80116a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80116a6:	b01d      	add	sp, #116	; 0x74
 80116a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116ac:	ab03      	add	r3, sp, #12
 80116ae:	9300      	str	r3, [sp, #0]
 80116b0:	462a      	mov	r2, r5
 80116b2:	4638      	mov	r0, r7
 80116b4:	4b05      	ldr	r3, [pc, #20]	; (80116cc <_svfiprintf_r+0x1f8>)
 80116b6:	a904      	add	r1, sp, #16
 80116b8:	f7fd ff22 	bl	800f500 <_printf_i>
 80116bc:	e7eb      	b.n	8011696 <_svfiprintf_r+0x1c2>
 80116be:	bf00      	nop
 80116c0:	08014344 	.word	0x08014344
 80116c4:	0801434e 	.word	0x0801434e
 80116c8:	0800efc9 	.word	0x0800efc9
 80116cc:	0801141d 	.word	0x0801141d
 80116d0:	0801434a 	.word	0x0801434a

080116d4 <_putc_r>:
 80116d4:	b570      	push	{r4, r5, r6, lr}
 80116d6:	460d      	mov	r5, r1
 80116d8:	4614      	mov	r4, r2
 80116da:	4606      	mov	r6, r0
 80116dc:	b118      	cbz	r0, 80116e6 <_putc_r+0x12>
 80116de:	6983      	ldr	r3, [r0, #24]
 80116e0:	b90b      	cbnz	r3, 80116e6 <_putc_r+0x12>
 80116e2:	f7ff f905 	bl	80108f0 <__sinit>
 80116e6:	4b1c      	ldr	r3, [pc, #112]	; (8011758 <_putc_r+0x84>)
 80116e8:	429c      	cmp	r4, r3
 80116ea:	d124      	bne.n	8011736 <_putc_r+0x62>
 80116ec:	6874      	ldr	r4, [r6, #4]
 80116ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80116f0:	07d8      	lsls	r0, r3, #31
 80116f2:	d405      	bmi.n	8011700 <_putc_r+0x2c>
 80116f4:	89a3      	ldrh	r3, [r4, #12]
 80116f6:	0599      	lsls	r1, r3, #22
 80116f8:	d402      	bmi.n	8011700 <_putc_r+0x2c>
 80116fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80116fc:	f7ff f99b 	bl	8010a36 <__retarget_lock_acquire_recursive>
 8011700:	68a3      	ldr	r3, [r4, #8]
 8011702:	3b01      	subs	r3, #1
 8011704:	2b00      	cmp	r3, #0
 8011706:	60a3      	str	r3, [r4, #8]
 8011708:	da05      	bge.n	8011716 <_putc_r+0x42>
 801170a:	69a2      	ldr	r2, [r4, #24]
 801170c:	4293      	cmp	r3, r2
 801170e:	db1c      	blt.n	801174a <_putc_r+0x76>
 8011710:	b2eb      	uxtb	r3, r5
 8011712:	2b0a      	cmp	r3, #10
 8011714:	d019      	beq.n	801174a <_putc_r+0x76>
 8011716:	6823      	ldr	r3, [r4, #0]
 8011718:	1c5a      	adds	r2, r3, #1
 801171a:	6022      	str	r2, [r4, #0]
 801171c:	701d      	strb	r5, [r3, #0]
 801171e:	b2ed      	uxtb	r5, r5
 8011720:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011722:	07da      	lsls	r2, r3, #31
 8011724:	d405      	bmi.n	8011732 <_putc_r+0x5e>
 8011726:	89a3      	ldrh	r3, [r4, #12]
 8011728:	059b      	lsls	r3, r3, #22
 801172a:	d402      	bmi.n	8011732 <_putc_r+0x5e>
 801172c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801172e:	f7ff f983 	bl	8010a38 <__retarget_lock_release_recursive>
 8011732:	4628      	mov	r0, r5
 8011734:	bd70      	pop	{r4, r5, r6, pc}
 8011736:	4b09      	ldr	r3, [pc, #36]	; (801175c <_putc_r+0x88>)
 8011738:	429c      	cmp	r4, r3
 801173a:	d101      	bne.n	8011740 <_putc_r+0x6c>
 801173c:	68b4      	ldr	r4, [r6, #8]
 801173e:	e7d6      	b.n	80116ee <_putc_r+0x1a>
 8011740:	4b07      	ldr	r3, [pc, #28]	; (8011760 <_putc_r+0x8c>)
 8011742:	429c      	cmp	r4, r3
 8011744:	bf08      	it	eq
 8011746:	68f4      	ldreq	r4, [r6, #12]
 8011748:	e7d1      	b.n	80116ee <_putc_r+0x1a>
 801174a:	4629      	mov	r1, r5
 801174c:	4622      	mov	r2, r4
 801174e:	4630      	mov	r0, r6
 8011750:	f7fe f872 	bl	800f838 <__swbuf_r>
 8011754:	4605      	mov	r5, r0
 8011756:	e7e3      	b.n	8011720 <_putc_r+0x4c>
 8011758:	08014440 	.word	0x08014440
 801175c:	08014460 	.word	0x08014460
 8011760:	08014420 	.word	0x08014420

08011764 <_sbrk_r>:
 8011764:	b538      	push	{r3, r4, r5, lr}
 8011766:	2300      	movs	r3, #0
 8011768:	4d05      	ldr	r5, [pc, #20]	; (8011780 <_sbrk_r+0x1c>)
 801176a:	4604      	mov	r4, r0
 801176c:	4608      	mov	r0, r1
 801176e:	602b      	str	r3, [r5, #0]
 8011770:	f7f3 ff02 	bl	8005578 <_sbrk>
 8011774:	1c43      	adds	r3, r0, #1
 8011776:	d102      	bne.n	801177e <_sbrk_r+0x1a>
 8011778:	682b      	ldr	r3, [r5, #0]
 801177a:	b103      	cbz	r3, 801177e <_sbrk_r+0x1a>
 801177c:	6023      	str	r3, [r4, #0]
 801177e:	bd38      	pop	{r3, r4, r5, pc}
 8011780:	20003b98 	.word	0x20003b98

08011784 <_raise_r>:
 8011784:	291f      	cmp	r1, #31
 8011786:	b538      	push	{r3, r4, r5, lr}
 8011788:	4604      	mov	r4, r0
 801178a:	460d      	mov	r5, r1
 801178c:	d904      	bls.n	8011798 <_raise_r+0x14>
 801178e:	2316      	movs	r3, #22
 8011790:	6003      	str	r3, [r0, #0]
 8011792:	f04f 30ff 	mov.w	r0, #4294967295
 8011796:	bd38      	pop	{r3, r4, r5, pc}
 8011798:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801179a:	b112      	cbz	r2, 80117a2 <_raise_r+0x1e>
 801179c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80117a0:	b94b      	cbnz	r3, 80117b6 <_raise_r+0x32>
 80117a2:	4620      	mov	r0, r4
 80117a4:	f000 f830 	bl	8011808 <_getpid_r>
 80117a8:	462a      	mov	r2, r5
 80117aa:	4601      	mov	r1, r0
 80117ac:	4620      	mov	r0, r4
 80117ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80117b2:	f000 b817 	b.w	80117e4 <_kill_r>
 80117b6:	2b01      	cmp	r3, #1
 80117b8:	d00a      	beq.n	80117d0 <_raise_r+0x4c>
 80117ba:	1c59      	adds	r1, r3, #1
 80117bc:	d103      	bne.n	80117c6 <_raise_r+0x42>
 80117be:	2316      	movs	r3, #22
 80117c0:	6003      	str	r3, [r0, #0]
 80117c2:	2001      	movs	r0, #1
 80117c4:	e7e7      	b.n	8011796 <_raise_r+0x12>
 80117c6:	2400      	movs	r4, #0
 80117c8:	4628      	mov	r0, r5
 80117ca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80117ce:	4798      	blx	r3
 80117d0:	2000      	movs	r0, #0
 80117d2:	e7e0      	b.n	8011796 <_raise_r+0x12>

080117d4 <raise>:
 80117d4:	4b02      	ldr	r3, [pc, #8]	; (80117e0 <raise+0xc>)
 80117d6:	4601      	mov	r1, r0
 80117d8:	6818      	ldr	r0, [r3, #0]
 80117da:	f7ff bfd3 	b.w	8011784 <_raise_r>
 80117de:	bf00      	nop
 80117e0:	20000064 	.word	0x20000064

080117e4 <_kill_r>:
 80117e4:	b538      	push	{r3, r4, r5, lr}
 80117e6:	2300      	movs	r3, #0
 80117e8:	4d06      	ldr	r5, [pc, #24]	; (8011804 <_kill_r+0x20>)
 80117ea:	4604      	mov	r4, r0
 80117ec:	4608      	mov	r0, r1
 80117ee:	4611      	mov	r1, r2
 80117f0:	602b      	str	r3, [r5, #0]
 80117f2:	f7f3 fe3e 	bl	8005472 <_kill>
 80117f6:	1c43      	adds	r3, r0, #1
 80117f8:	d102      	bne.n	8011800 <_kill_r+0x1c>
 80117fa:	682b      	ldr	r3, [r5, #0]
 80117fc:	b103      	cbz	r3, 8011800 <_kill_r+0x1c>
 80117fe:	6023      	str	r3, [r4, #0]
 8011800:	bd38      	pop	{r3, r4, r5, pc}
 8011802:	bf00      	nop
 8011804:	20003b98 	.word	0x20003b98

08011808 <_getpid_r>:
 8011808:	f7f3 be2c 	b.w	8005464 <_getpid>

0801180c <__sread>:
 801180c:	b510      	push	{r4, lr}
 801180e:	460c      	mov	r4, r1
 8011810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011814:	f000 f8ba 	bl	801198c <_read_r>
 8011818:	2800      	cmp	r0, #0
 801181a:	bfab      	itete	ge
 801181c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801181e:	89a3      	ldrhlt	r3, [r4, #12]
 8011820:	181b      	addge	r3, r3, r0
 8011822:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011826:	bfac      	ite	ge
 8011828:	6563      	strge	r3, [r4, #84]	; 0x54
 801182a:	81a3      	strhlt	r3, [r4, #12]
 801182c:	bd10      	pop	{r4, pc}

0801182e <__swrite>:
 801182e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011832:	461f      	mov	r7, r3
 8011834:	898b      	ldrh	r3, [r1, #12]
 8011836:	4605      	mov	r5, r0
 8011838:	05db      	lsls	r3, r3, #23
 801183a:	460c      	mov	r4, r1
 801183c:	4616      	mov	r6, r2
 801183e:	d505      	bpl.n	801184c <__swrite+0x1e>
 8011840:	2302      	movs	r3, #2
 8011842:	2200      	movs	r2, #0
 8011844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011848:	f000 f868 	bl	801191c <_lseek_r>
 801184c:	89a3      	ldrh	r3, [r4, #12]
 801184e:	4632      	mov	r2, r6
 8011850:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011854:	81a3      	strh	r3, [r4, #12]
 8011856:	4628      	mov	r0, r5
 8011858:	463b      	mov	r3, r7
 801185a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801185e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011862:	f000 b817 	b.w	8011894 <_write_r>

08011866 <__sseek>:
 8011866:	b510      	push	{r4, lr}
 8011868:	460c      	mov	r4, r1
 801186a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801186e:	f000 f855 	bl	801191c <_lseek_r>
 8011872:	1c43      	adds	r3, r0, #1
 8011874:	89a3      	ldrh	r3, [r4, #12]
 8011876:	bf15      	itete	ne
 8011878:	6560      	strne	r0, [r4, #84]	; 0x54
 801187a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801187e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011882:	81a3      	strheq	r3, [r4, #12]
 8011884:	bf18      	it	ne
 8011886:	81a3      	strhne	r3, [r4, #12]
 8011888:	bd10      	pop	{r4, pc}

0801188a <__sclose>:
 801188a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801188e:	f000 b813 	b.w	80118b8 <_close_r>
	...

08011894 <_write_r>:
 8011894:	b538      	push	{r3, r4, r5, lr}
 8011896:	4604      	mov	r4, r0
 8011898:	4608      	mov	r0, r1
 801189a:	4611      	mov	r1, r2
 801189c:	2200      	movs	r2, #0
 801189e:	4d05      	ldr	r5, [pc, #20]	; (80118b4 <_write_r+0x20>)
 80118a0:	602a      	str	r2, [r5, #0]
 80118a2:	461a      	mov	r2, r3
 80118a4:	f7f3 fe1c 	bl	80054e0 <_write>
 80118a8:	1c43      	adds	r3, r0, #1
 80118aa:	d102      	bne.n	80118b2 <_write_r+0x1e>
 80118ac:	682b      	ldr	r3, [r5, #0]
 80118ae:	b103      	cbz	r3, 80118b2 <_write_r+0x1e>
 80118b0:	6023      	str	r3, [r4, #0]
 80118b2:	bd38      	pop	{r3, r4, r5, pc}
 80118b4:	20003b98 	.word	0x20003b98

080118b8 <_close_r>:
 80118b8:	b538      	push	{r3, r4, r5, lr}
 80118ba:	2300      	movs	r3, #0
 80118bc:	4d05      	ldr	r5, [pc, #20]	; (80118d4 <_close_r+0x1c>)
 80118be:	4604      	mov	r4, r0
 80118c0:	4608      	mov	r0, r1
 80118c2:	602b      	str	r3, [r5, #0]
 80118c4:	f7f3 fe28 	bl	8005518 <_close>
 80118c8:	1c43      	adds	r3, r0, #1
 80118ca:	d102      	bne.n	80118d2 <_close_r+0x1a>
 80118cc:	682b      	ldr	r3, [r5, #0]
 80118ce:	b103      	cbz	r3, 80118d2 <_close_r+0x1a>
 80118d0:	6023      	str	r3, [r4, #0]
 80118d2:	bd38      	pop	{r3, r4, r5, pc}
 80118d4:	20003b98 	.word	0x20003b98

080118d8 <_fstat_r>:
 80118d8:	b538      	push	{r3, r4, r5, lr}
 80118da:	2300      	movs	r3, #0
 80118dc:	4d06      	ldr	r5, [pc, #24]	; (80118f8 <_fstat_r+0x20>)
 80118de:	4604      	mov	r4, r0
 80118e0:	4608      	mov	r0, r1
 80118e2:	4611      	mov	r1, r2
 80118e4:	602b      	str	r3, [r5, #0]
 80118e6:	f7f3 fe22 	bl	800552e <_fstat>
 80118ea:	1c43      	adds	r3, r0, #1
 80118ec:	d102      	bne.n	80118f4 <_fstat_r+0x1c>
 80118ee:	682b      	ldr	r3, [r5, #0]
 80118f0:	b103      	cbz	r3, 80118f4 <_fstat_r+0x1c>
 80118f2:	6023      	str	r3, [r4, #0]
 80118f4:	bd38      	pop	{r3, r4, r5, pc}
 80118f6:	bf00      	nop
 80118f8:	20003b98 	.word	0x20003b98

080118fc <_isatty_r>:
 80118fc:	b538      	push	{r3, r4, r5, lr}
 80118fe:	2300      	movs	r3, #0
 8011900:	4d05      	ldr	r5, [pc, #20]	; (8011918 <_isatty_r+0x1c>)
 8011902:	4604      	mov	r4, r0
 8011904:	4608      	mov	r0, r1
 8011906:	602b      	str	r3, [r5, #0]
 8011908:	f7f3 fe20 	bl	800554c <_isatty>
 801190c:	1c43      	adds	r3, r0, #1
 801190e:	d102      	bne.n	8011916 <_isatty_r+0x1a>
 8011910:	682b      	ldr	r3, [r5, #0]
 8011912:	b103      	cbz	r3, 8011916 <_isatty_r+0x1a>
 8011914:	6023      	str	r3, [r4, #0]
 8011916:	bd38      	pop	{r3, r4, r5, pc}
 8011918:	20003b98 	.word	0x20003b98

0801191c <_lseek_r>:
 801191c:	b538      	push	{r3, r4, r5, lr}
 801191e:	4604      	mov	r4, r0
 8011920:	4608      	mov	r0, r1
 8011922:	4611      	mov	r1, r2
 8011924:	2200      	movs	r2, #0
 8011926:	4d05      	ldr	r5, [pc, #20]	; (801193c <_lseek_r+0x20>)
 8011928:	602a      	str	r2, [r5, #0]
 801192a:	461a      	mov	r2, r3
 801192c:	f7f3 fe18 	bl	8005560 <_lseek>
 8011930:	1c43      	adds	r3, r0, #1
 8011932:	d102      	bne.n	801193a <_lseek_r+0x1e>
 8011934:	682b      	ldr	r3, [r5, #0]
 8011936:	b103      	cbz	r3, 801193a <_lseek_r+0x1e>
 8011938:	6023      	str	r3, [r4, #0]
 801193a:	bd38      	pop	{r3, r4, r5, pc}
 801193c:	20003b98 	.word	0x20003b98

08011940 <__ascii_mbtowc>:
 8011940:	b082      	sub	sp, #8
 8011942:	b901      	cbnz	r1, 8011946 <__ascii_mbtowc+0x6>
 8011944:	a901      	add	r1, sp, #4
 8011946:	b142      	cbz	r2, 801195a <__ascii_mbtowc+0x1a>
 8011948:	b14b      	cbz	r3, 801195e <__ascii_mbtowc+0x1e>
 801194a:	7813      	ldrb	r3, [r2, #0]
 801194c:	600b      	str	r3, [r1, #0]
 801194e:	7812      	ldrb	r2, [r2, #0]
 8011950:	1e10      	subs	r0, r2, #0
 8011952:	bf18      	it	ne
 8011954:	2001      	movne	r0, #1
 8011956:	b002      	add	sp, #8
 8011958:	4770      	bx	lr
 801195a:	4610      	mov	r0, r2
 801195c:	e7fb      	b.n	8011956 <__ascii_mbtowc+0x16>
 801195e:	f06f 0001 	mvn.w	r0, #1
 8011962:	e7f8      	b.n	8011956 <__ascii_mbtowc+0x16>

08011964 <__malloc_lock>:
 8011964:	4801      	ldr	r0, [pc, #4]	; (801196c <__malloc_lock+0x8>)
 8011966:	f7ff b866 	b.w	8010a36 <__retarget_lock_acquire_recursive>
 801196a:	bf00      	nop
 801196c:	20003b90 	.word	0x20003b90

08011970 <__malloc_unlock>:
 8011970:	4801      	ldr	r0, [pc, #4]	; (8011978 <__malloc_unlock+0x8>)
 8011972:	f7ff b861 	b.w	8010a38 <__retarget_lock_release_recursive>
 8011976:	bf00      	nop
 8011978:	20003b90 	.word	0x20003b90

0801197c <_malloc_usable_size_r>:
 801197c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011980:	1f18      	subs	r0, r3, #4
 8011982:	2b00      	cmp	r3, #0
 8011984:	bfbc      	itt	lt
 8011986:	580b      	ldrlt	r3, [r1, r0]
 8011988:	18c0      	addlt	r0, r0, r3
 801198a:	4770      	bx	lr

0801198c <_read_r>:
 801198c:	b538      	push	{r3, r4, r5, lr}
 801198e:	4604      	mov	r4, r0
 8011990:	4608      	mov	r0, r1
 8011992:	4611      	mov	r1, r2
 8011994:	2200      	movs	r2, #0
 8011996:	4d05      	ldr	r5, [pc, #20]	; (80119ac <_read_r+0x20>)
 8011998:	602a      	str	r2, [r5, #0]
 801199a:	461a      	mov	r2, r3
 801199c:	f7f3 fd83 	bl	80054a6 <_read>
 80119a0:	1c43      	adds	r3, r0, #1
 80119a2:	d102      	bne.n	80119aa <_read_r+0x1e>
 80119a4:	682b      	ldr	r3, [r5, #0]
 80119a6:	b103      	cbz	r3, 80119aa <_read_r+0x1e>
 80119a8:	6023      	str	r3, [r4, #0]
 80119aa:	bd38      	pop	{r3, r4, r5, pc}
 80119ac:	20003b98 	.word	0x20003b98

080119b0 <__ascii_wctomb>:
 80119b0:	4603      	mov	r3, r0
 80119b2:	4608      	mov	r0, r1
 80119b4:	b141      	cbz	r1, 80119c8 <__ascii_wctomb+0x18>
 80119b6:	2aff      	cmp	r2, #255	; 0xff
 80119b8:	d904      	bls.n	80119c4 <__ascii_wctomb+0x14>
 80119ba:	228a      	movs	r2, #138	; 0x8a
 80119bc:	f04f 30ff 	mov.w	r0, #4294967295
 80119c0:	601a      	str	r2, [r3, #0]
 80119c2:	4770      	bx	lr
 80119c4:	2001      	movs	r0, #1
 80119c6:	700a      	strb	r2, [r1, #0]
 80119c8:	4770      	bx	lr
	...

080119cc <pow>:
 80119cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119d0:	461f      	mov	r7, r3
 80119d2:	4680      	mov	r8, r0
 80119d4:	4689      	mov	r9, r1
 80119d6:	4616      	mov	r6, r2
 80119d8:	f000 f8a6 	bl	8011b28 <__ieee754_pow>
 80119dc:	4b4d      	ldr	r3, [pc, #308]	; (8011b14 <pow+0x148>)
 80119de:	4604      	mov	r4, r0
 80119e0:	f993 3000 	ldrsb.w	r3, [r3]
 80119e4:	460d      	mov	r5, r1
 80119e6:	3301      	adds	r3, #1
 80119e8:	d015      	beq.n	8011a16 <pow+0x4a>
 80119ea:	4632      	mov	r2, r6
 80119ec:	463b      	mov	r3, r7
 80119ee:	4630      	mov	r0, r6
 80119f0:	4639      	mov	r1, r7
 80119f2:	f7ef f885 	bl	8000b00 <__aeabi_dcmpun>
 80119f6:	b970      	cbnz	r0, 8011a16 <pow+0x4a>
 80119f8:	4642      	mov	r2, r8
 80119fa:	464b      	mov	r3, r9
 80119fc:	4640      	mov	r0, r8
 80119fe:	4649      	mov	r1, r9
 8011a00:	f7ef f87e 	bl	8000b00 <__aeabi_dcmpun>
 8011a04:	2200      	movs	r2, #0
 8011a06:	2300      	movs	r3, #0
 8011a08:	b148      	cbz	r0, 8011a1e <pow+0x52>
 8011a0a:	4630      	mov	r0, r6
 8011a0c:	4639      	mov	r1, r7
 8011a0e:	f7ef f845 	bl	8000a9c <__aeabi_dcmpeq>
 8011a12:	2800      	cmp	r0, #0
 8011a14:	d17b      	bne.n	8011b0e <pow+0x142>
 8011a16:	4620      	mov	r0, r4
 8011a18:	4629      	mov	r1, r5
 8011a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a1e:	4640      	mov	r0, r8
 8011a20:	4649      	mov	r1, r9
 8011a22:	f7ef f83b 	bl	8000a9c <__aeabi_dcmpeq>
 8011a26:	b1e0      	cbz	r0, 8011a62 <pow+0x96>
 8011a28:	2200      	movs	r2, #0
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	4630      	mov	r0, r6
 8011a2e:	4639      	mov	r1, r7
 8011a30:	f7ef f834 	bl	8000a9c <__aeabi_dcmpeq>
 8011a34:	2800      	cmp	r0, #0
 8011a36:	d16a      	bne.n	8011b0e <pow+0x142>
 8011a38:	4630      	mov	r0, r6
 8011a3a:	4639      	mov	r1, r7
 8011a3c:	f000 fe39 	bl	80126b2 <finite>
 8011a40:	2800      	cmp	r0, #0
 8011a42:	d0e8      	beq.n	8011a16 <pow+0x4a>
 8011a44:	2200      	movs	r2, #0
 8011a46:	2300      	movs	r3, #0
 8011a48:	4630      	mov	r0, r6
 8011a4a:	4639      	mov	r1, r7
 8011a4c:	f7ef f830 	bl	8000ab0 <__aeabi_dcmplt>
 8011a50:	2800      	cmp	r0, #0
 8011a52:	d0e0      	beq.n	8011a16 <pow+0x4a>
 8011a54:	f7fd f870 	bl	800eb38 <__errno>
 8011a58:	2321      	movs	r3, #33	; 0x21
 8011a5a:	2400      	movs	r4, #0
 8011a5c:	6003      	str	r3, [r0, #0]
 8011a5e:	4d2e      	ldr	r5, [pc, #184]	; (8011b18 <pow+0x14c>)
 8011a60:	e7d9      	b.n	8011a16 <pow+0x4a>
 8011a62:	4620      	mov	r0, r4
 8011a64:	4629      	mov	r1, r5
 8011a66:	f000 fe24 	bl	80126b2 <finite>
 8011a6a:	bba8      	cbnz	r0, 8011ad8 <pow+0x10c>
 8011a6c:	4640      	mov	r0, r8
 8011a6e:	4649      	mov	r1, r9
 8011a70:	f000 fe1f 	bl	80126b2 <finite>
 8011a74:	b380      	cbz	r0, 8011ad8 <pow+0x10c>
 8011a76:	4630      	mov	r0, r6
 8011a78:	4639      	mov	r1, r7
 8011a7a:	f000 fe1a 	bl	80126b2 <finite>
 8011a7e:	b358      	cbz	r0, 8011ad8 <pow+0x10c>
 8011a80:	4622      	mov	r2, r4
 8011a82:	462b      	mov	r3, r5
 8011a84:	4620      	mov	r0, r4
 8011a86:	4629      	mov	r1, r5
 8011a88:	f7ef f83a 	bl	8000b00 <__aeabi_dcmpun>
 8011a8c:	b160      	cbz	r0, 8011aa8 <pow+0xdc>
 8011a8e:	f7fd f853 	bl	800eb38 <__errno>
 8011a92:	2321      	movs	r3, #33	; 0x21
 8011a94:	2200      	movs	r2, #0
 8011a96:	6003      	str	r3, [r0, #0]
 8011a98:	2300      	movs	r3, #0
 8011a9a:	4610      	mov	r0, r2
 8011a9c:	4619      	mov	r1, r3
 8011a9e:	f7ee febf 	bl	8000820 <__aeabi_ddiv>
 8011aa2:	4604      	mov	r4, r0
 8011aa4:	460d      	mov	r5, r1
 8011aa6:	e7b6      	b.n	8011a16 <pow+0x4a>
 8011aa8:	f7fd f846 	bl	800eb38 <__errno>
 8011aac:	2322      	movs	r3, #34	; 0x22
 8011aae:	2200      	movs	r2, #0
 8011ab0:	6003      	str	r3, [r0, #0]
 8011ab2:	4649      	mov	r1, r9
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	4640      	mov	r0, r8
 8011ab8:	f7ee fffa 	bl	8000ab0 <__aeabi_dcmplt>
 8011abc:	2400      	movs	r4, #0
 8011abe:	b148      	cbz	r0, 8011ad4 <pow+0x108>
 8011ac0:	4630      	mov	r0, r6
 8011ac2:	4639      	mov	r1, r7
 8011ac4:	f000 fe02 	bl	80126cc <rint>
 8011ac8:	4632      	mov	r2, r6
 8011aca:	463b      	mov	r3, r7
 8011acc:	f7ee ffe6 	bl	8000a9c <__aeabi_dcmpeq>
 8011ad0:	2800      	cmp	r0, #0
 8011ad2:	d0c4      	beq.n	8011a5e <pow+0x92>
 8011ad4:	4d11      	ldr	r5, [pc, #68]	; (8011b1c <pow+0x150>)
 8011ad6:	e79e      	b.n	8011a16 <pow+0x4a>
 8011ad8:	2200      	movs	r2, #0
 8011ada:	2300      	movs	r3, #0
 8011adc:	4620      	mov	r0, r4
 8011ade:	4629      	mov	r1, r5
 8011ae0:	f7ee ffdc 	bl	8000a9c <__aeabi_dcmpeq>
 8011ae4:	2800      	cmp	r0, #0
 8011ae6:	d096      	beq.n	8011a16 <pow+0x4a>
 8011ae8:	4640      	mov	r0, r8
 8011aea:	4649      	mov	r1, r9
 8011aec:	f000 fde1 	bl	80126b2 <finite>
 8011af0:	2800      	cmp	r0, #0
 8011af2:	d090      	beq.n	8011a16 <pow+0x4a>
 8011af4:	4630      	mov	r0, r6
 8011af6:	4639      	mov	r1, r7
 8011af8:	f000 fddb 	bl	80126b2 <finite>
 8011afc:	2800      	cmp	r0, #0
 8011afe:	d08a      	beq.n	8011a16 <pow+0x4a>
 8011b00:	f7fd f81a 	bl	800eb38 <__errno>
 8011b04:	2322      	movs	r3, #34	; 0x22
 8011b06:	2400      	movs	r4, #0
 8011b08:	2500      	movs	r5, #0
 8011b0a:	6003      	str	r3, [r0, #0]
 8011b0c:	e783      	b.n	8011a16 <pow+0x4a>
 8011b0e:	2400      	movs	r4, #0
 8011b10:	4d03      	ldr	r5, [pc, #12]	; (8011b20 <pow+0x154>)
 8011b12:	e780      	b.n	8011a16 <pow+0x4a>
 8011b14:	20000234 	.word	0x20000234
 8011b18:	fff00000 	.word	0xfff00000
 8011b1c:	7ff00000 	.word	0x7ff00000
 8011b20:	3ff00000 	.word	0x3ff00000
 8011b24:	00000000 	.word	0x00000000

08011b28 <__ieee754_pow>:
 8011b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b2c:	b093      	sub	sp, #76	; 0x4c
 8011b2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011b32:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8011b36:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8011b3a:	ea55 0302 	orrs.w	r3, r5, r2
 8011b3e:	4607      	mov	r7, r0
 8011b40:	4688      	mov	r8, r1
 8011b42:	f000 84bf 	beq.w	80124c4 <__ieee754_pow+0x99c>
 8011b46:	4b7e      	ldr	r3, [pc, #504]	; (8011d40 <__ieee754_pow+0x218>)
 8011b48:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8011b4c:	429c      	cmp	r4, r3
 8011b4e:	4689      	mov	r9, r1
 8011b50:	4682      	mov	sl, r0
 8011b52:	dc09      	bgt.n	8011b68 <__ieee754_pow+0x40>
 8011b54:	d103      	bne.n	8011b5e <__ieee754_pow+0x36>
 8011b56:	b978      	cbnz	r0, 8011b78 <__ieee754_pow+0x50>
 8011b58:	42a5      	cmp	r5, r4
 8011b5a:	dd02      	ble.n	8011b62 <__ieee754_pow+0x3a>
 8011b5c:	e00c      	b.n	8011b78 <__ieee754_pow+0x50>
 8011b5e:	429d      	cmp	r5, r3
 8011b60:	dc02      	bgt.n	8011b68 <__ieee754_pow+0x40>
 8011b62:	429d      	cmp	r5, r3
 8011b64:	d10e      	bne.n	8011b84 <__ieee754_pow+0x5c>
 8011b66:	b16a      	cbz	r2, 8011b84 <__ieee754_pow+0x5c>
 8011b68:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011b6c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011b70:	ea54 030a 	orrs.w	r3, r4, sl
 8011b74:	f000 84a6 	beq.w	80124c4 <__ieee754_pow+0x99c>
 8011b78:	4872      	ldr	r0, [pc, #456]	; (8011d44 <__ieee754_pow+0x21c>)
 8011b7a:	b013      	add	sp, #76	; 0x4c
 8011b7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b80:	f000 bd9e 	b.w	80126c0 <nan>
 8011b84:	f1b9 0f00 	cmp.w	r9, #0
 8011b88:	da39      	bge.n	8011bfe <__ieee754_pow+0xd6>
 8011b8a:	4b6f      	ldr	r3, [pc, #444]	; (8011d48 <__ieee754_pow+0x220>)
 8011b8c:	429d      	cmp	r5, r3
 8011b8e:	dc54      	bgt.n	8011c3a <__ieee754_pow+0x112>
 8011b90:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8011b94:	429d      	cmp	r5, r3
 8011b96:	f340 84a6 	ble.w	80124e6 <__ieee754_pow+0x9be>
 8011b9a:	152b      	asrs	r3, r5, #20
 8011b9c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011ba0:	2b14      	cmp	r3, #20
 8011ba2:	dd0f      	ble.n	8011bc4 <__ieee754_pow+0x9c>
 8011ba4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011ba8:	fa22 f103 	lsr.w	r1, r2, r3
 8011bac:	fa01 f303 	lsl.w	r3, r1, r3
 8011bb0:	4293      	cmp	r3, r2
 8011bb2:	f040 8498 	bne.w	80124e6 <__ieee754_pow+0x9be>
 8011bb6:	f001 0101 	and.w	r1, r1, #1
 8011bba:	f1c1 0302 	rsb	r3, r1, #2
 8011bbe:	9300      	str	r3, [sp, #0]
 8011bc0:	b182      	cbz	r2, 8011be4 <__ieee754_pow+0xbc>
 8011bc2:	e05e      	b.n	8011c82 <__ieee754_pow+0x15a>
 8011bc4:	2a00      	cmp	r2, #0
 8011bc6:	d15a      	bne.n	8011c7e <__ieee754_pow+0x156>
 8011bc8:	f1c3 0314 	rsb	r3, r3, #20
 8011bcc:	fa45 f103 	asr.w	r1, r5, r3
 8011bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8011bd4:	42ab      	cmp	r3, r5
 8011bd6:	f040 8483 	bne.w	80124e0 <__ieee754_pow+0x9b8>
 8011bda:	f001 0101 	and.w	r1, r1, #1
 8011bde:	f1c1 0302 	rsb	r3, r1, #2
 8011be2:	9300      	str	r3, [sp, #0]
 8011be4:	4b59      	ldr	r3, [pc, #356]	; (8011d4c <__ieee754_pow+0x224>)
 8011be6:	429d      	cmp	r5, r3
 8011be8:	d130      	bne.n	8011c4c <__ieee754_pow+0x124>
 8011bea:	2e00      	cmp	r6, #0
 8011bec:	f280 8474 	bge.w	80124d8 <__ieee754_pow+0x9b0>
 8011bf0:	463a      	mov	r2, r7
 8011bf2:	4643      	mov	r3, r8
 8011bf4:	2000      	movs	r0, #0
 8011bf6:	4955      	ldr	r1, [pc, #340]	; (8011d4c <__ieee754_pow+0x224>)
 8011bf8:	f7ee fe12 	bl	8000820 <__aeabi_ddiv>
 8011bfc:	e02f      	b.n	8011c5e <__ieee754_pow+0x136>
 8011bfe:	2300      	movs	r3, #0
 8011c00:	9300      	str	r3, [sp, #0]
 8011c02:	2a00      	cmp	r2, #0
 8011c04:	d13d      	bne.n	8011c82 <__ieee754_pow+0x15a>
 8011c06:	4b4e      	ldr	r3, [pc, #312]	; (8011d40 <__ieee754_pow+0x218>)
 8011c08:	429d      	cmp	r5, r3
 8011c0a:	d1eb      	bne.n	8011be4 <__ieee754_pow+0xbc>
 8011c0c:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011c10:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011c14:	ea53 030a 	orrs.w	r3, r3, sl
 8011c18:	f000 8454 	beq.w	80124c4 <__ieee754_pow+0x99c>
 8011c1c:	4b4c      	ldr	r3, [pc, #304]	; (8011d50 <__ieee754_pow+0x228>)
 8011c1e:	429c      	cmp	r4, r3
 8011c20:	dd0d      	ble.n	8011c3e <__ieee754_pow+0x116>
 8011c22:	2e00      	cmp	r6, #0
 8011c24:	f280 8454 	bge.w	80124d0 <__ieee754_pow+0x9a8>
 8011c28:	f04f 0b00 	mov.w	fp, #0
 8011c2c:	f04f 0c00 	mov.w	ip, #0
 8011c30:	4658      	mov	r0, fp
 8011c32:	4661      	mov	r1, ip
 8011c34:	b013      	add	sp, #76	; 0x4c
 8011c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c3a:	2302      	movs	r3, #2
 8011c3c:	e7e0      	b.n	8011c00 <__ieee754_pow+0xd8>
 8011c3e:	2e00      	cmp	r6, #0
 8011c40:	daf2      	bge.n	8011c28 <__ieee754_pow+0x100>
 8011c42:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8011c46:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8011c4a:	e7f1      	b.n	8011c30 <__ieee754_pow+0x108>
 8011c4c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8011c50:	d108      	bne.n	8011c64 <__ieee754_pow+0x13c>
 8011c52:	463a      	mov	r2, r7
 8011c54:	4643      	mov	r3, r8
 8011c56:	4638      	mov	r0, r7
 8011c58:	4641      	mov	r1, r8
 8011c5a:	f7ee fcb7 	bl	80005cc <__aeabi_dmul>
 8011c5e:	4683      	mov	fp, r0
 8011c60:	468c      	mov	ip, r1
 8011c62:	e7e5      	b.n	8011c30 <__ieee754_pow+0x108>
 8011c64:	4b3b      	ldr	r3, [pc, #236]	; (8011d54 <__ieee754_pow+0x22c>)
 8011c66:	429e      	cmp	r6, r3
 8011c68:	d10b      	bne.n	8011c82 <__ieee754_pow+0x15a>
 8011c6a:	f1b9 0f00 	cmp.w	r9, #0
 8011c6e:	db08      	blt.n	8011c82 <__ieee754_pow+0x15a>
 8011c70:	4638      	mov	r0, r7
 8011c72:	4641      	mov	r1, r8
 8011c74:	b013      	add	sp, #76	; 0x4c
 8011c76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c7a:	f000 bc6b 	b.w	8012554 <__ieee754_sqrt>
 8011c7e:	2300      	movs	r3, #0
 8011c80:	9300      	str	r3, [sp, #0]
 8011c82:	4638      	mov	r0, r7
 8011c84:	4641      	mov	r1, r8
 8011c86:	f000 fd11 	bl	80126ac <fabs>
 8011c8a:	4683      	mov	fp, r0
 8011c8c:	468c      	mov	ip, r1
 8011c8e:	f1ba 0f00 	cmp.w	sl, #0
 8011c92:	d129      	bne.n	8011ce8 <__ieee754_pow+0x1c0>
 8011c94:	b124      	cbz	r4, 8011ca0 <__ieee754_pow+0x178>
 8011c96:	4b2d      	ldr	r3, [pc, #180]	; (8011d4c <__ieee754_pow+0x224>)
 8011c98:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8011c9c:	429a      	cmp	r2, r3
 8011c9e:	d123      	bne.n	8011ce8 <__ieee754_pow+0x1c0>
 8011ca0:	2e00      	cmp	r6, #0
 8011ca2:	da07      	bge.n	8011cb4 <__ieee754_pow+0x18c>
 8011ca4:	465a      	mov	r2, fp
 8011ca6:	4663      	mov	r3, ip
 8011ca8:	2000      	movs	r0, #0
 8011caa:	4928      	ldr	r1, [pc, #160]	; (8011d4c <__ieee754_pow+0x224>)
 8011cac:	f7ee fdb8 	bl	8000820 <__aeabi_ddiv>
 8011cb0:	4683      	mov	fp, r0
 8011cb2:	468c      	mov	ip, r1
 8011cb4:	f1b9 0f00 	cmp.w	r9, #0
 8011cb8:	daba      	bge.n	8011c30 <__ieee754_pow+0x108>
 8011cba:	9b00      	ldr	r3, [sp, #0]
 8011cbc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011cc0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011cc4:	4323      	orrs	r3, r4
 8011cc6:	d108      	bne.n	8011cda <__ieee754_pow+0x1b2>
 8011cc8:	465a      	mov	r2, fp
 8011cca:	4663      	mov	r3, ip
 8011ccc:	4658      	mov	r0, fp
 8011cce:	4661      	mov	r1, ip
 8011cd0:	f7ee fac4 	bl	800025c <__aeabi_dsub>
 8011cd4:	4602      	mov	r2, r0
 8011cd6:	460b      	mov	r3, r1
 8011cd8:	e78e      	b.n	8011bf8 <__ieee754_pow+0xd0>
 8011cda:	9b00      	ldr	r3, [sp, #0]
 8011cdc:	2b01      	cmp	r3, #1
 8011cde:	d1a7      	bne.n	8011c30 <__ieee754_pow+0x108>
 8011ce0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8011ce4:	469c      	mov	ip, r3
 8011ce6:	e7a3      	b.n	8011c30 <__ieee754_pow+0x108>
 8011ce8:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8011cec:	3b01      	subs	r3, #1
 8011cee:	930c      	str	r3, [sp, #48]	; 0x30
 8011cf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011cf2:	9b00      	ldr	r3, [sp, #0]
 8011cf4:	4313      	orrs	r3, r2
 8011cf6:	d104      	bne.n	8011d02 <__ieee754_pow+0x1da>
 8011cf8:	463a      	mov	r2, r7
 8011cfa:	4643      	mov	r3, r8
 8011cfc:	4638      	mov	r0, r7
 8011cfe:	4641      	mov	r1, r8
 8011d00:	e7e6      	b.n	8011cd0 <__ieee754_pow+0x1a8>
 8011d02:	4b15      	ldr	r3, [pc, #84]	; (8011d58 <__ieee754_pow+0x230>)
 8011d04:	429d      	cmp	r5, r3
 8011d06:	f340 80f9 	ble.w	8011efc <__ieee754_pow+0x3d4>
 8011d0a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011d0e:	429d      	cmp	r5, r3
 8011d10:	4b0f      	ldr	r3, [pc, #60]	; (8011d50 <__ieee754_pow+0x228>)
 8011d12:	dd09      	ble.n	8011d28 <__ieee754_pow+0x200>
 8011d14:	429c      	cmp	r4, r3
 8011d16:	dc0c      	bgt.n	8011d32 <__ieee754_pow+0x20a>
 8011d18:	2e00      	cmp	r6, #0
 8011d1a:	da85      	bge.n	8011c28 <__ieee754_pow+0x100>
 8011d1c:	a306      	add	r3, pc, #24	; (adr r3, 8011d38 <__ieee754_pow+0x210>)
 8011d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d22:	4610      	mov	r0, r2
 8011d24:	4619      	mov	r1, r3
 8011d26:	e798      	b.n	8011c5a <__ieee754_pow+0x132>
 8011d28:	429c      	cmp	r4, r3
 8011d2a:	dbf5      	blt.n	8011d18 <__ieee754_pow+0x1f0>
 8011d2c:	4b07      	ldr	r3, [pc, #28]	; (8011d4c <__ieee754_pow+0x224>)
 8011d2e:	429c      	cmp	r4, r3
 8011d30:	dd14      	ble.n	8011d5c <__ieee754_pow+0x234>
 8011d32:	2e00      	cmp	r6, #0
 8011d34:	dcf2      	bgt.n	8011d1c <__ieee754_pow+0x1f4>
 8011d36:	e777      	b.n	8011c28 <__ieee754_pow+0x100>
 8011d38:	8800759c 	.word	0x8800759c
 8011d3c:	7e37e43c 	.word	0x7e37e43c
 8011d40:	7ff00000 	.word	0x7ff00000
 8011d44:	0801433c 	.word	0x0801433c
 8011d48:	433fffff 	.word	0x433fffff
 8011d4c:	3ff00000 	.word	0x3ff00000
 8011d50:	3fefffff 	.word	0x3fefffff
 8011d54:	3fe00000 	.word	0x3fe00000
 8011d58:	41e00000 	.word	0x41e00000
 8011d5c:	4661      	mov	r1, ip
 8011d5e:	2200      	movs	r2, #0
 8011d60:	4658      	mov	r0, fp
 8011d62:	4b61      	ldr	r3, [pc, #388]	; (8011ee8 <__ieee754_pow+0x3c0>)
 8011d64:	f7ee fa7a 	bl	800025c <__aeabi_dsub>
 8011d68:	a355      	add	r3, pc, #340	; (adr r3, 8011ec0 <__ieee754_pow+0x398>)
 8011d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d6e:	4604      	mov	r4, r0
 8011d70:	460d      	mov	r5, r1
 8011d72:	f7ee fc2b 	bl	80005cc <__aeabi_dmul>
 8011d76:	a354      	add	r3, pc, #336	; (adr r3, 8011ec8 <__ieee754_pow+0x3a0>)
 8011d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d7c:	4606      	mov	r6, r0
 8011d7e:	460f      	mov	r7, r1
 8011d80:	4620      	mov	r0, r4
 8011d82:	4629      	mov	r1, r5
 8011d84:	f7ee fc22 	bl	80005cc <__aeabi_dmul>
 8011d88:	2200      	movs	r2, #0
 8011d8a:	4682      	mov	sl, r0
 8011d8c:	468b      	mov	fp, r1
 8011d8e:	4620      	mov	r0, r4
 8011d90:	4629      	mov	r1, r5
 8011d92:	4b56      	ldr	r3, [pc, #344]	; (8011eec <__ieee754_pow+0x3c4>)
 8011d94:	f7ee fc1a 	bl	80005cc <__aeabi_dmul>
 8011d98:	4602      	mov	r2, r0
 8011d9a:	460b      	mov	r3, r1
 8011d9c:	a14c      	add	r1, pc, #304	; (adr r1, 8011ed0 <__ieee754_pow+0x3a8>)
 8011d9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011da2:	f7ee fa5b 	bl	800025c <__aeabi_dsub>
 8011da6:	4622      	mov	r2, r4
 8011da8:	462b      	mov	r3, r5
 8011daa:	f7ee fc0f 	bl	80005cc <__aeabi_dmul>
 8011dae:	4602      	mov	r2, r0
 8011db0:	460b      	mov	r3, r1
 8011db2:	2000      	movs	r0, #0
 8011db4:	494e      	ldr	r1, [pc, #312]	; (8011ef0 <__ieee754_pow+0x3c8>)
 8011db6:	f7ee fa51 	bl	800025c <__aeabi_dsub>
 8011dba:	4622      	mov	r2, r4
 8011dbc:	462b      	mov	r3, r5
 8011dbe:	4680      	mov	r8, r0
 8011dc0:	4689      	mov	r9, r1
 8011dc2:	4620      	mov	r0, r4
 8011dc4:	4629      	mov	r1, r5
 8011dc6:	f7ee fc01 	bl	80005cc <__aeabi_dmul>
 8011dca:	4602      	mov	r2, r0
 8011dcc:	460b      	mov	r3, r1
 8011dce:	4640      	mov	r0, r8
 8011dd0:	4649      	mov	r1, r9
 8011dd2:	f7ee fbfb 	bl	80005cc <__aeabi_dmul>
 8011dd6:	a340      	add	r3, pc, #256	; (adr r3, 8011ed8 <__ieee754_pow+0x3b0>)
 8011dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ddc:	f7ee fbf6 	bl	80005cc <__aeabi_dmul>
 8011de0:	4602      	mov	r2, r0
 8011de2:	460b      	mov	r3, r1
 8011de4:	4650      	mov	r0, sl
 8011de6:	4659      	mov	r1, fp
 8011de8:	f7ee fa38 	bl	800025c <__aeabi_dsub>
 8011dec:	f04f 0a00 	mov.w	sl, #0
 8011df0:	4602      	mov	r2, r0
 8011df2:	460b      	mov	r3, r1
 8011df4:	4604      	mov	r4, r0
 8011df6:	460d      	mov	r5, r1
 8011df8:	4630      	mov	r0, r6
 8011dfa:	4639      	mov	r1, r7
 8011dfc:	f7ee fa30 	bl	8000260 <__adddf3>
 8011e00:	4632      	mov	r2, r6
 8011e02:	463b      	mov	r3, r7
 8011e04:	4650      	mov	r0, sl
 8011e06:	468b      	mov	fp, r1
 8011e08:	f7ee fa28 	bl	800025c <__aeabi_dsub>
 8011e0c:	4602      	mov	r2, r0
 8011e0e:	460b      	mov	r3, r1
 8011e10:	4620      	mov	r0, r4
 8011e12:	4629      	mov	r1, r5
 8011e14:	f7ee fa22 	bl	800025c <__aeabi_dsub>
 8011e18:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011e1c:	9b00      	ldr	r3, [sp, #0]
 8011e1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011e20:	3b01      	subs	r3, #1
 8011e22:	4313      	orrs	r3, r2
 8011e24:	f04f 0600 	mov.w	r6, #0
 8011e28:	f04f 0200 	mov.w	r2, #0
 8011e2c:	bf0c      	ite	eq
 8011e2e:	4b31      	ldreq	r3, [pc, #196]	; (8011ef4 <__ieee754_pow+0x3cc>)
 8011e30:	4b2d      	ldrne	r3, [pc, #180]	; (8011ee8 <__ieee754_pow+0x3c0>)
 8011e32:	4604      	mov	r4, r0
 8011e34:	460d      	mov	r5, r1
 8011e36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e3a:	e9cd 2300 	strd	r2, r3, [sp]
 8011e3e:	4632      	mov	r2, r6
 8011e40:	463b      	mov	r3, r7
 8011e42:	f7ee fa0b 	bl	800025c <__aeabi_dsub>
 8011e46:	4652      	mov	r2, sl
 8011e48:	465b      	mov	r3, fp
 8011e4a:	f7ee fbbf 	bl	80005cc <__aeabi_dmul>
 8011e4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011e52:	4680      	mov	r8, r0
 8011e54:	4689      	mov	r9, r1
 8011e56:	4620      	mov	r0, r4
 8011e58:	4629      	mov	r1, r5
 8011e5a:	f7ee fbb7 	bl	80005cc <__aeabi_dmul>
 8011e5e:	4602      	mov	r2, r0
 8011e60:	460b      	mov	r3, r1
 8011e62:	4640      	mov	r0, r8
 8011e64:	4649      	mov	r1, r9
 8011e66:	f7ee f9fb 	bl	8000260 <__adddf3>
 8011e6a:	4632      	mov	r2, r6
 8011e6c:	463b      	mov	r3, r7
 8011e6e:	4680      	mov	r8, r0
 8011e70:	4689      	mov	r9, r1
 8011e72:	4650      	mov	r0, sl
 8011e74:	4659      	mov	r1, fp
 8011e76:	f7ee fba9 	bl	80005cc <__aeabi_dmul>
 8011e7a:	4604      	mov	r4, r0
 8011e7c:	460d      	mov	r5, r1
 8011e7e:	460b      	mov	r3, r1
 8011e80:	4602      	mov	r2, r0
 8011e82:	4649      	mov	r1, r9
 8011e84:	4640      	mov	r0, r8
 8011e86:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8011e8a:	f7ee f9e9 	bl	8000260 <__adddf3>
 8011e8e:	4b1a      	ldr	r3, [pc, #104]	; (8011ef8 <__ieee754_pow+0x3d0>)
 8011e90:	4682      	mov	sl, r0
 8011e92:	4299      	cmp	r1, r3
 8011e94:	460f      	mov	r7, r1
 8011e96:	460e      	mov	r6, r1
 8011e98:	f340 82ed 	ble.w	8012476 <__ieee754_pow+0x94e>
 8011e9c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8011ea0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8011ea4:	4303      	orrs	r3, r0
 8011ea6:	f000 81e7 	beq.w	8012278 <__ieee754_pow+0x750>
 8011eaa:	a30d      	add	r3, pc, #52	; (adr r3, 8011ee0 <__ieee754_pow+0x3b8>)
 8011eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011eb4:	f7ee fb8a 	bl	80005cc <__aeabi_dmul>
 8011eb8:	a309      	add	r3, pc, #36	; (adr r3, 8011ee0 <__ieee754_pow+0x3b8>)
 8011eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ebe:	e6cc      	b.n	8011c5a <__ieee754_pow+0x132>
 8011ec0:	60000000 	.word	0x60000000
 8011ec4:	3ff71547 	.word	0x3ff71547
 8011ec8:	f85ddf44 	.word	0xf85ddf44
 8011ecc:	3e54ae0b 	.word	0x3e54ae0b
 8011ed0:	55555555 	.word	0x55555555
 8011ed4:	3fd55555 	.word	0x3fd55555
 8011ed8:	652b82fe 	.word	0x652b82fe
 8011edc:	3ff71547 	.word	0x3ff71547
 8011ee0:	8800759c 	.word	0x8800759c
 8011ee4:	7e37e43c 	.word	0x7e37e43c
 8011ee8:	3ff00000 	.word	0x3ff00000
 8011eec:	3fd00000 	.word	0x3fd00000
 8011ef0:	3fe00000 	.word	0x3fe00000
 8011ef4:	bff00000 	.word	0xbff00000
 8011ef8:	408fffff 	.word	0x408fffff
 8011efc:	4bd4      	ldr	r3, [pc, #848]	; (8012250 <__ieee754_pow+0x728>)
 8011efe:	2200      	movs	r2, #0
 8011f00:	ea09 0303 	and.w	r3, r9, r3
 8011f04:	b943      	cbnz	r3, 8011f18 <__ieee754_pow+0x3f0>
 8011f06:	4658      	mov	r0, fp
 8011f08:	4661      	mov	r1, ip
 8011f0a:	4bd2      	ldr	r3, [pc, #840]	; (8012254 <__ieee754_pow+0x72c>)
 8011f0c:	f7ee fb5e 	bl	80005cc <__aeabi_dmul>
 8011f10:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8011f14:	4683      	mov	fp, r0
 8011f16:	460c      	mov	r4, r1
 8011f18:	1523      	asrs	r3, r4, #20
 8011f1a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011f1e:	4413      	add	r3, r2
 8011f20:	930b      	str	r3, [sp, #44]	; 0x2c
 8011f22:	4bcd      	ldr	r3, [pc, #820]	; (8012258 <__ieee754_pow+0x730>)
 8011f24:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011f28:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011f2c:	429c      	cmp	r4, r3
 8011f2e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011f32:	dd08      	ble.n	8011f46 <__ieee754_pow+0x41e>
 8011f34:	4bc9      	ldr	r3, [pc, #804]	; (801225c <__ieee754_pow+0x734>)
 8011f36:	429c      	cmp	r4, r3
 8011f38:	f340 819c 	ble.w	8012274 <__ieee754_pow+0x74c>
 8011f3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f3e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011f42:	3301      	adds	r3, #1
 8011f44:	930b      	str	r3, [sp, #44]	; 0x2c
 8011f46:	2600      	movs	r6, #0
 8011f48:	00f3      	lsls	r3, r6, #3
 8011f4a:	930d      	str	r3, [sp, #52]	; 0x34
 8011f4c:	4bc4      	ldr	r3, [pc, #784]	; (8012260 <__ieee754_pow+0x738>)
 8011f4e:	4658      	mov	r0, fp
 8011f50:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011f54:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011f58:	4629      	mov	r1, r5
 8011f5a:	461a      	mov	r2, r3
 8011f5c:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8011f60:	4623      	mov	r3, r4
 8011f62:	f7ee f97b 	bl	800025c <__aeabi_dsub>
 8011f66:	46da      	mov	sl, fp
 8011f68:	462b      	mov	r3, r5
 8011f6a:	4652      	mov	r2, sl
 8011f6c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8011f70:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011f74:	f7ee f974 	bl	8000260 <__adddf3>
 8011f78:	4602      	mov	r2, r0
 8011f7a:	460b      	mov	r3, r1
 8011f7c:	2000      	movs	r0, #0
 8011f7e:	49b9      	ldr	r1, [pc, #740]	; (8012264 <__ieee754_pow+0x73c>)
 8011f80:	f7ee fc4e 	bl	8000820 <__aeabi_ddiv>
 8011f84:	4602      	mov	r2, r0
 8011f86:	460b      	mov	r3, r1
 8011f88:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8011f8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8011f90:	f7ee fb1c 	bl	80005cc <__aeabi_dmul>
 8011f94:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011f98:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8011f9c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	46ab      	mov	fp, r5
 8011fa6:	106d      	asrs	r5, r5, #1
 8011fa8:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011fac:	9304      	str	r3, [sp, #16]
 8011fae:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8011fb2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8011fb6:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8011fba:	4640      	mov	r0, r8
 8011fbc:	4649      	mov	r1, r9
 8011fbe:	4614      	mov	r4, r2
 8011fc0:	461d      	mov	r5, r3
 8011fc2:	f7ee fb03 	bl	80005cc <__aeabi_dmul>
 8011fc6:	4602      	mov	r2, r0
 8011fc8:	460b      	mov	r3, r1
 8011fca:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8011fce:	f7ee f945 	bl	800025c <__aeabi_dsub>
 8011fd2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011fd6:	4606      	mov	r6, r0
 8011fd8:	460f      	mov	r7, r1
 8011fda:	4620      	mov	r0, r4
 8011fdc:	4629      	mov	r1, r5
 8011fde:	f7ee f93d 	bl	800025c <__aeabi_dsub>
 8011fe2:	4602      	mov	r2, r0
 8011fe4:	460b      	mov	r3, r1
 8011fe6:	4650      	mov	r0, sl
 8011fe8:	4659      	mov	r1, fp
 8011fea:	f7ee f937 	bl	800025c <__aeabi_dsub>
 8011fee:	4642      	mov	r2, r8
 8011ff0:	464b      	mov	r3, r9
 8011ff2:	f7ee faeb 	bl	80005cc <__aeabi_dmul>
 8011ff6:	4602      	mov	r2, r0
 8011ff8:	460b      	mov	r3, r1
 8011ffa:	4630      	mov	r0, r6
 8011ffc:	4639      	mov	r1, r7
 8011ffe:	f7ee f92d 	bl	800025c <__aeabi_dsub>
 8012002:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012006:	f7ee fae1 	bl	80005cc <__aeabi_dmul>
 801200a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801200e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012012:	4610      	mov	r0, r2
 8012014:	4619      	mov	r1, r3
 8012016:	f7ee fad9 	bl	80005cc <__aeabi_dmul>
 801201a:	a37b      	add	r3, pc, #492	; (adr r3, 8012208 <__ieee754_pow+0x6e0>)
 801201c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012020:	4604      	mov	r4, r0
 8012022:	460d      	mov	r5, r1
 8012024:	f7ee fad2 	bl	80005cc <__aeabi_dmul>
 8012028:	a379      	add	r3, pc, #484	; (adr r3, 8012210 <__ieee754_pow+0x6e8>)
 801202a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801202e:	f7ee f917 	bl	8000260 <__adddf3>
 8012032:	4622      	mov	r2, r4
 8012034:	462b      	mov	r3, r5
 8012036:	f7ee fac9 	bl	80005cc <__aeabi_dmul>
 801203a:	a377      	add	r3, pc, #476	; (adr r3, 8012218 <__ieee754_pow+0x6f0>)
 801203c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012040:	f7ee f90e 	bl	8000260 <__adddf3>
 8012044:	4622      	mov	r2, r4
 8012046:	462b      	mov	r3, r5
 8012048:	f7ee fac0 	bl	80005cc <__aeabi_dmul>
 801204c:	a374      	add	r3, pc, #464	; (adr r3, 8012220 <__ieee754_pow+0x6f8>)
 801204e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012052:	f7ee f905 	bl	8000260 <__adddf3>
 8012056:	4622      	mov	r2, r4
 8012058:	462b      	mov	r3, r5
 801205a:	f7ee fab7 	bl	80005cc <__aeabi_dmul>
 801205e:	a372      	add	r3, pc, #456	; (adr r3, 8012228 <__ieee754_pow+0x700>)
 8012060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012064:	f7ee f8fc 	bl	8000260 <__adddf3>
 8012068:	4622      	mov	r2, r4
 801206a:	462b      	mov	r3, r5
 801206c:	f7ee faae 	bl	80005cc <__aeabi_dmul>
 8012070:	a36f      	add	r3, pc, #444	; (adr r3, 8012230 <__ieee754_pow+0x708>)
 8012072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012076:	f7ee f8f3 	bl	8000260 <__adddf3>
 801207a:	4622      	mov	r2, r4
 801207c:	4606      	mov	r6, r0
 801207e:	460f      	mov	r7, r1
 8012080:	462b      	mov	r3, r5
 8012082:	4620      	mov	r0, r4
 8012084:	4629      	mov	r1, r5
 8012086:	f7ee faa1 	bl	80005cc <__aeabi_dmul>
 801208a:	4602      	mov	r2, r0
 801208c:	460b      	mov	r3, r1
 801208e:	4630      	mov	r0, r6
 8012090:	4639      	mov	r1, r7
 8012092:	f7ee fa9b 	bl	80005cc <__aeabi_dmul>
 8012096:	4604      	mov	r4, r0
 8012098:	460d      	mov	r5, r1
 801209a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801209e:	4642      	mov	r2, r8
 80120a0:	464b      	mov	r3, r9
 80120a2:	f7ee f8dd 	bl	8000260 <__adddf3>
 80120a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80120aa:	f7ee fa8f 	bl	80005cc <__aeabi_dmul>
 80120ae:	4622      	mov	r2, r4
 80120b0:	462b      	mov	r3, r5
 80120b2:	f7ee f8d5 	bl	8000260 <__adddf3>
 80120b6:	4642      	mov	r2, r8
 80120b8:	4606      	mov	r6, r0
 80120ba:	460f      	mov	r7, r1
 80120bc:	464b      	mov	r3, r9
 80120be:	4640      	mov	r0, r8
 80120c0:	4649      	mov	r1, r9
 80120c2:	f7ee fa83 	bl	80005cc <__aeabi_dmul>
 80120c6:	2200      	movs	r2, #0
 80120c8:	4b67      	ldr	r3, [pc, #412]	; (8012268 <__ieee754_pow+0x740>)
 80120ca:	4682      	mov	sl, r0
 80120cc:	468b      	mov	fp, r1
 80120ce:	f7ee f8c7 	bl	8000260 <__adddf3>
 80120d2:	4632      	mov	r2, r6
 80120d4:	463b      	mov	r3, r7
 80120d6:	f7ee f8c3 	bl	8000260 <__adddf3>
 80120da:	9c04      	ldr	r4, [sp, #16]
 80120dc:	460d      	mov	r5, r1
 80120de:	4622      	mov	r2, r4
 80120e0:	460b      	mov	r3, r1
 80120e2:	4640      	mov	r0, r8
 80120e4:	4649      	mov	r1, r9
 80120e6:	f7ee fa71 	bl	80005cc <__aeabi_dmul>
 80120ea:	2200      	movs	r2, #0
 80120ec:	4680      	mov	r8, r0
 80120ee:	4689      	mov	r9, r1
 80120f0:	4620      	mov	r0, r4
 80120f2:	4629      	mov	r1, r5
 80120f4:	4b5c      	ldr	r3, [pc, #368]	; (8012268 <__ieee754_pow+0x740>)
 80120f6:	f7ee f8b1 	bl	800025c <__aeabi_dsub>
 80120fa:	4652      	mov	r2, sl
 80120fc:	465b      	mov	r3, fp
 80120fe:	f7ee f8ad 	bl	800025c <__aeabi_dsub>
 8012102:	4602      	mov	r2, r0
 8012104:	460b      	mov	r3, r1
 8012106:	4630      	mov	r0, r6
 8012108:	4639      	mov	r1, r7
 801210a:	f7ee f8a7 	bl	800025c <__aeabi_dsub>
 801210e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012112:	f7ee fa5b 	bl	80005cc <__aeabi_dmul>
 8012116:	4622      	mov	r2, r4
 8012118:	4606      	mov	r6, r0
 801211a:	460f      	mov	r7, r1
 801211c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012120:	462b      	mov	r3, r5
 8012122:	f7ee fa53 	bl	80005cc <__aeabi_dmul>
 8012126:	4602      	mov	r2, r0
 8012128:	460b      	mov	r3, r1
 801212a:	4630      	mov	r0, r6
 801212c:	4639      	mov	r1, r7
 801212e:	f7ee f897 	bl	8000260 <__adddf3>
 8012132:	4606      	mov	r6, r0
 8012134:	460f      	mov	r7, r1
 8012136:	4602      	mov	r2, r0
 8012138:	460b      	mov	r3, r1
 801213a:	4640      	mov	r0, r8
 801213c:	4649      	mov	r1, r9
 801213e:	f7ee f88f 	bl	8000260 <__adddf3>
 8012142:	a33d      	add	r3, pc, #244	; (adr r3, 8012238 <__ieee754_pow+0x710>)
 8012144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012148:	9c04      	ldr	r4, [sp, #16]
 801214a:	460d      	mov	r5, r1
 801214c:	4620      	mov	r0, r4
 801214e:	f7ee fa3d 	bl	80005cc <__aeabi_dmul>
 8012152:	4642      	mov	r2, r8
 8012154:	464b      	mov	r3, r9
 8012156:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801215a:	4620      	mov	r0, r4
 801215c:	4629      	mov	r1, r5
 801215e:	f7ee f87d 	bl	800025c <__aeabi_dsub>
 8012162:	4602      	mov	r2, r0
 8012164:	460b      	mov	r3, r1
 8012166:	4630      	mov	r0, r6
 8012168:	4639      	mov	r1, r7
 801216a:	f7ee f877 	bl	800025c <__aeabi_dsub>
 801216e:	a334      	add	r3, pc, #208	; (adr r3, 8012240 <__ieee754_pow+0x718>)
 8012170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012174:	f7ee fa2a 	bl	80005cc <__aeabi_dmul>
 8012178:	a333      	add	r3, pc, #204	; (adr r3, 8012248 <__ieee754_pow+0x720>)
 801217a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801217e:	4606      	mov	r6, r0
 8012180:	460f      	mov	r7, r1
 8012182:	4620      	mov	r0, r4
 8012184:	4629      	mov	r1, r5
 8012186:	f7ee fa21 	bl	80005cc <__aeabi_dmul>
 801218a:	4602      	mov	r2, r0
 801218c:	460b      	mov	r3, r1
 801218e:	4630      	mov	r0, r6
 8012190:	4639      	mov	r1, r7
 8012192:	f7ee f865 	bl	8000260 <__adddf3>
 8012196:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012198:	4b34      	ldr	r3, [pc, #208]	; (801226c <__ieee754_pow+0x744>)
 801219a:	4413      	add	r3, r2
 801219c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121a0:	f7ee f85e 	bl	8000260 <__adddf3>
 80121a4:	4680      	mov	r8, r0
 80121a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80121a8:	4689      	mov	r9, r1
 80121aa:	f7ee f9a5 	bl	80004f8 <__aeabi_i2d>
 80121ae:	4604      	mov	r4, r0
 80121b0:	460d      	mov	r5, r1
 80121b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80121b4:	4b2e      	ldr	r3, [pc, #184]	; (8012270 <__ieee754_pow+0x748>)
 80121b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80121ba:	4413      	add	r3, r2
 80121bc:	e9d3 6700 	ldrd	r6, r7, [r3]
 80121c0:	4642      	mov	r2, r8
 80121c2:	464b      	mov	r3, r9
 80121c4:	f7ee f84c 	bl	8000260 <__adddf3>
 80121c8:	4632      	mov	r2, r6
 80121ca:	463b      	mov	r3, r7
 80121cc:	f7ee f848 	bl	8000260 <__adddf3>
 80121d0:	4622      	mov	r2, r4
 80121d2:	462b      	mov	r3, r5
 80121d4:	f7ee f844 	bl	8000260 <__adddf3>
 80121d8:	f8dd a010 	ldr.w	sl, [sp, #16]
 80121dc:	4622      	mov	r2, r4
 80121de:	462b      	mov	r3, r5
 80121e0:	4650      	mov	r0, sl
 80121e2:	468b      	mov	fp, r1
 80121e4:	f7ee f83a 	bl	800025c <__aeabi_dsub>
 80121e8:	4632      	mov	r2, r6
 80121ea:	463b      	mov	r3, r7
 80121ec:	f7ee f836 	bl	800025c <__aeabi_dsub>
 80121f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80121f4:	f7ee f832 	bl	800025c <__aeabi_dsub>
 80121f8:	4602      	mov	r2, r0
 80121fa:	460b      	mov	r3, r1
 80121fc:	4640      	mov	r0, r8
 80121fe:	4649      	mov	r1, r9
 8012200:	e608      	b.n	8011e14 <__ieee754_pow+0x2ec>
 8012202:	bf00      	nop
 8012204:	f3af 8000 	nop.w
 8012208:	4a454eef 	.word	0x4a454eef
 801220c:	3fca7e28 	.word	0x3fca7e28
 8012210:	93c9db65 	.word	0x93c9db65
 8012214:	3fcd864a 	.word	0x3fcd864a
 8012218:	a91d4101 	.word	0xa91d4101
 801221c:	3fd17460 	.word	0x3fd17460
 8012220:	518f264d 	.word	0x518f264d
 8012224:	3fd55555 	.word	0x3fd55555
 8012228:	db6fabff 	.word	0xdb6fabff
 801222c:	3fdb6db6 	.word	0x3fdb6db6
 8012230:	33333303 	.word	0x33333303
 8012234:	3fe33333 	.word	0x3fe33333
 8012238:	e0000000 	.word	0xe0000000
 801223c:	3feec709 	.word	0x3feec709
 8012240:	dc3a03fd 	.word	0xdc3a03fd
 8012244:	3feec709 	.word	0x3feec709
 8012248:	145b01f5 	.word	0x145b01f5
 801224c:	be3e2fe0 	.word	0xbe3e2fe0
 8012250:	7ff00000 	.word	0x7ff00000
 8012254:	43400000 	.word	0x43400000
 8012258:	0003988e 	.word	0x0003988e
 801225c:	000bb679 	.word	0x000bb679
 8012260:	080146e8 	.word	0x080146e8
 8012264:	3ff00000 	.word	0x3ff00000
 8012268:	40080000 	.word	0x40080000
 801226c:	08014708 	.word	0x08014708
 8012270:	080146f8 	.word	0x080146f8
 8012274:	2601      	movs	r6, #1
 8012276:	e667      	b.n	8011f48 <__ieee754_pow+0x420>
 8012278:	a39d      	add	r3, pc, #628	; (adr r3, 80124f0 <__ieee754_pow+0x9c8>)
 801227a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801227e:	4640      	mov	r0, r8
 8012280:	4649      	mov	r1, r9
 8012282:	f7ed ffed 	bl	8000260 <__adddf3>
 8012286:	4622      	mov	r2, r4
 8012288:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801228c:	462b      	mov	r3, r5
 801228e:	4650      	mov	r0, sl
 8012290:	4639      	mov	r1, r7
 8012292:	f7ed ffe3 	bl	800025c <__aeabi_dsub>
 8012296:	4602      	mov	r2, r0
 8012298:	460b      	mov	r3, r1
 801229a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801229e:	f7ee fc25 	bl	8000aec <__aeabi_dcmpgt>
 80122a2:	2800      	cmp	r0, #0
 80122a4:	f47f ae01 	bne.w	8011eaa <__ieee754_pow+0x382>
 80122a8:	4aa5      	ldr	r2, [pc, #660]	; (8012540 <__ieee754_pow+0xa18>)
 80122aa:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80122ae:	4293      	cmp	r3, r2
 80122b0:	f340 8103 	ble.w	80124ba <__ieee754_pow+0x992>
 80122b4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80122b8:	2000      	movs	r0, #0
 80122ba:	151b      	asrs	r3, r3, #20
 80122bc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80122c0:	fa4a f303 	asr.w	r3, sl, r3
 80122c4:	4433      	add	r3, r6
 80122c6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80122ca:	4f9e      	ldr	r7, [pc, #632]	; (8012544 <__ieee754_pow+0xa1c>)
 80122cc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80122d0:	4117      	asrs	r7, r2
 80122d2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80122d6:	ea23 0107 	bic.w	r1, r3, r7
 80122da:	f1c2 0214 	rsb	r2, r2, #20
 80122de:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80122e2:	460b      	mov	r3, r1
 80122e4:	fa4a fa02 	asr.w	sl, sl, r2
 80122e8:	2e00      	cmp	r6, #0
 80122ea:	4602      	mov	r2, r0
 80122ec:	4629      	mov	r1, r5
 80122ee:	4620      	mov	r0, r4
 80122f0:	bfb8      	it	lt
 80122f2:	f1ca 0a00 	rsblt	sl, sl, #0
 80122f6:	f7ed ffb1 	bl	800025c <__aeabi_dsub>
 80122fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80122fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012302:	2400      	movs	r4, #0
 8012304:	4642      	mov	r2, r8
 8012306:	464b      	mov	r3, r9
 8012308:	f7ed ffaa 	bl	8000260 <__adddf3>
 801230c:	a37a      	add	r3, pc, #488	; (adr r3, 80124f8 <__ieee754_pow+0x9d0>)
 801230e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012312:	4620      	mov	r0, r4
 8012314:	460d      	mov	r5, r1
 8012316:	f7ee f959 	bl	80005cc <__aeabi_dmul>
 801231a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801231e:	4606      	mov	r6, r0
 8012320:	460f      	mov	r7, r1
 8012322:	4620      	mov	r0, r4
 8012324:	4629      	mov	r1, r5
 8012326:	f7ed ff99 	bl	800025c <__aeabi_dsub>
 801232a:	4602      	mov	r2, r0
 801232c:	460b      	mov	r3, r1
 801232e:	4640      	mov	r0, r8
 8012330:	4649      	mov	r1, r9
 8012332:	f7ed ff93 	bl	800025c <__aeabi_dsub>
 8012336:	a372      	add	r3, pc, #456	; (adr r3, 8012500 <__ieee754_pow+0x9d8>)
 8012338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801233c:	f7ee f946 	bl	80005cc <__aeabi_dmul>
 8012340:	a371      	add	r3, pc, #452	; (adr r3, 8012508 <__ieee754_pow+0x9e0>)
 8012342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012346:	4680      	mov	r8, r0
 8012348:	4689      	mov	r9, r1
 801234a:	4620      	mov	r0, r4
 801234c:	4629      	mov	r1, r5
 801234e:	f7ee f93d 	bl	80005cc <__aeabi_dmul>
 8012352:	4602      	mov	r2, r0
 8012354:	460b      	mov	r3, r1
 8012356:	4640      	mov	r0, r8
 8012358:	4649      	mov	r1, r9
 801235a:	f7ed ff81 	bl	8000260 <__adddf3>
 801235e:	4604      	mov	r4, r0
 8012360:	460d      	mov	r5, r1
 8012362:	4602      	mov	r2, r0
 8012364:	460b      	mov	r3, r1
 8012366:	4630      	mov	r0, r6
 8012368:	4639      	mov	r1, r7
 801236a:	f7ed ff79 	bl	8000260 <__adddf3>
 801236e:	4632      	mov	r2, r6
 8012370:	463b      	mov	r3, r7
 8012372:	4680      	mov	r8, r0
 8012374:	4689      	mov	r9, r1
 8012376:	f7ed ff71 	bl	800025c <__aeabi_dsub>
 801237a:	4602      	mov	r2, r0
 801237c:	460b      	mov	r3, r1
 801237e:	4620      	mov	r0, r4
 8012380:	4629      	mov	r1, r5
 8012382:	f7ed ff6b 	bl	800025c <__aeabi_dsub>
 8012386:	4642      	mov	r2, r8
 8012388:	4606      	mov	r6, r0
 801238a:	460f      	mov	r7, r1
 801238c:	464b      	mov	r3, r9
 801238e:	4640      	mov	r0, r8
 8012390:	4649      	mov	r1, r9
 8012392:	f7ee f91b 	bl	80005cc <__aeabi_dmul>
 8012396:	a35e      	add	r3, pc, #376	; (adr r3, 8012510 <__ieee754_pow+0x9e8>)
 8012398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801239c:	4604      	mov	r4, r0
 801239e:	460d      	mov	r5, r1
 80123a0:	f7ee f914 	bl	80005cc <__aeabi_dmul>
 80123a4:	a35c      	add	r3, pc, #368	; (adr r3, 8012518 <__ieee754_pow+0x9f0>)
 80123a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123aa:	f7ed ff57 	bl	800025c <__aeabi_dsub>
 80123ae:	4622      	mov	r2, r4
 80123b0:	462b      	mov	r3, r5
 80123b2:	f7ee f90b 	bl	80005cc <__aeabi_dmul>
 80123b6:	a35a      	add	r3, pc, #360	; (adr r3, 8012520 <__ieee754_pow+0x9f8>)
 80123b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123bc:	f7ed ff50 	bl	8000260 <__adddf3>
 80123c0:	4622      	mov	r2, r4
 80123c2:	462b      	mov	r3, r5
 80123c4:	f7ee f902 	bl	80005cc <__aeabi_dmul>
 80123c8:	a357      	add	r3, pc, #348	; (adr r3, 8012528 <__ieee754_pow+0xa00>)
 80123ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ce:	f7ed ff45 	bl	800025c <__aeabi_dsub>
 80123d2:	4622      	mov	r2, r4
 80123d4:	462b      	mov	r3, r5
 80123d6:	f7ee f8f9 	bl	80005cc <__aeabi_dmul>
 80123da:	a355      	add	r3, pc, #340	; (adr r3, 8012530 <__ieee754_pow+0xa08>)
 80123dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123e0:	f7ed ff3e 	bl	8000260 <__adddf3>
 80123e4:	4622      	mov	r2, r4
 80123e6:	462b      	mov	r3, r5
 80123e8:	f7ee f8f0 	bl	80005cc <__aeabi_dmul>
 80123ec:	4602      	mov	r2, r0
 80123ee:	460b      	mov	r3, r1
 80123f0:	4640      	mov	r0, r8
 80123f2:	4649      	mov	r1, r9
 80123f4:	f7ed ff32 	bl	800025c <__aeabi_dsub>
 80123f8:	4604      	mov	r4, r0
 80123fa:	460d      	mov	r5, r1
 80123fc:	4602      	mov	r2, r0
 80123fe:	460b      	mov	r3, r1
 8012400:	4640      	mov	r0, r8
 8012402:	4649      	mov	r1, r9
 8012404:	f7ee f8e2 	bl	80005cc <__aeabi_dmul>
 8012408:	2200      	movs	r2, #0
 801240a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801240e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012412:	4620      	mov	r0, r4
 8012414:	4629      	mov	r1, r5
 8012416:	f7ed ff21 	bl	800025c <__aeabi_dsub>
 801241a:	4602      	mov	r2, r0
 801241c:	460b      	mov	r3, r1
 801241e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012422:	f7ee f9fd 	bl	8000820 <__aeabi_ddiv>
 8012426:	4632      	mov	r2, r6
 8012428:	4604      	mov	r4, r0
 801242a:	460d      	mov	r5, r1
 801242c:	463b      	mov	r3, r7
 801242e:	4640      	mov	r0, r8
 8012430:	4649      	mov	r1, r9
 8012432:	f7ee f8cb 	bl	80005cc <__aeabi_dmul>
 8012436:	4632      	mov	r2, r6
 8012438:	463b      	mov	r3, r7
 801243a:	f7ed ff11 	bl	8000260 <__adddf3>
 801243e:	4602      	mov	r2, r0
 8012440:	460b      	mov	r3, r1
 8012442:	4620      	mov	r0, r4
 8012444:	4629      	mov	r1, r5
 8012446:	f7ed ff09 	bl	800025c <__aeabi_dsub>
 801244a:	4642      	mov	r2, r8
 801244c:	464b      	mov	r3, r9
 801244e:	f7ed ff05 	bl	800025c <__aeabi_dsub>
 8012452:	4602      	mov	r2, r0
 8012454:	460b      	mov	r3, r1
 8012456:	2000      	movs	r0, #0
 8012458:	493b      	ldr	r1, [pc, #236]	; (8012548 <__ieee754_pow+0xa20>)
 801245a:	f7ed feff 	bl	800025c <__aeabi_dsub>
 801245e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8012462:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8012466:	da2b      	bge.n	80124c0 <__ieee754_pow+0x998>
 8012468:	4652      	mov	r2, sl
 801246a:	f000 f9b9 	bl	80127e0 <scalbn>
 801246e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012472:	f7ff bbf2 	b.w	8011c5a <__ieee754_pow+0x132>
 8012476:	4b35      	ldr	r3, [pc, #212]	; (801254c <__ieee754_pow+0xa24>)
 8012478:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 801247c:	429f      	cmp	r7, r3
 801247e:	f77f af13 	ble.w	80122a8 <__ieee754_pow+0x780>
 8012482:	4b33      	ldr	r3, [pc, #204]	; (8012550 <__ieee754_pow+0xa28>)
 8012484:	440b      	add	r3, r1
 8012486:	4303      	orrs	r3, r0
 8012488:	d00b      	beq.n	80124a2 <__ieee754_pow+0x97a>
 801248a:	a32b      	add	r3, pc, #172	; (adr r3, 8012538 <__ieee754_pow+0xa10>)
 801248c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012490:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012494:	f7ee f89a 	bl	80005cc <__aeabi_dmul>
 8012498:	a327      	add	r3, pc, #156	; (adr r3, 8012538 <__ieee754_pow+0xa10>)
 801249a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801249e:	f7ff bbdc 	b.w	8011c5a <__ieee754_pow+0x132>
 80124a2:	4622      	mov	r2, r4
 80124a4:	462b      	mov	r3, r5
 80124a6:	f7ed fed9 	bl	800025c <__aeabi_dsub>
 80124aa:	4642      	mov	r2, r8
 80124ac:	464b      	mov	r3, r9
 80124ae:	f7ee fb13 	bl	8000ad8 <__aeabi_dcmpge>
 80124b2:	2800      	cmp	r0, #0
 80124b4:	f43f aef8 	beq.w	80122a8 <__ieee754_pow+0x780>
 80124b8:	e7e7      	b.n	801248a <__ieee754_pow+0x962>
 80124ba:	f04f 0a00 	mov.w	sl, #0
 80124be:	e71e      	b.n	80122fe <__ieee754_pow+0x7d6>
 80124c0:	4621      	mov	r1, r4
 80124c2:	e7d4      	b.n	801246e <__ieee754_pow+0x946>
 80124c4:	f04f 0b00 	mov.w	fp, #0
 80124c8:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012548 <__ieee754_pow+0xa20>
 80124cc:	f7ff bbb0 	b.w	8011c30 <__ieee754_pow+0x108>
 80124d0:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80124d4:	f7ff bbac 	b.w	8011c30 <__ieee754_pow+0x108>
 80124d8:	4638      	mov	r0, r7
 80124da:	4641      	mov	r1, r8
 80124dc:	f7ff bbbf 	b.w	8011c5e <__ieee754_pow+0x136>
 80124e0:	9200      	str	r2, [sp, #0]
 80124e2:	f7ff bb7f 	b.w	8011be4 <__ieee754_pow+0xbc>
 80124e6:	2300      	movs	r3, #0
 80124e8:	f7ff bb69 	b.w	8011bbe <__ieee754_pow+0x96>
 80124ec:	f3af 8000 	nop.w
 80124f0:	652b82fe 	.word	0x652b82fe
 80124f4:	3c971547 	.word	0x3c971547
 80124f8:	00000000 	.word	0x00000000
 80124fc:	3fe62e43 	.word	0x3fe62e43
 8012500:	fefa39ef 	.word	0xfefa39ef
 8012504:	3fe62e42 	.word	0x3fe62e42
 8012508:	0ca86c39 	.word	0x0ca86c39
 801250c:	be205c61 	.word	0xbe205c61
 8012510:	72bea4d0 	.word	0x72bea4d0
 8012514:	3e663769 	.word	0x3e663769
 8012518:	c5d26bf1 	.word	0xc5d26bf1
 801251c:	3ebbbd41 	.word	0x3ebbbd41
 8012520:	af25de2c 	.word	0xaf25de2c
 8012524:	3f11566a 	.word	0x3f11566a
 8012528:	16bebd93 	.word	0x16bebd93
 801252c:	3f66c16c 	.word	0x3f66c16c
 8012530:	5555553e 	.word	0x5555553e
 8012534:	3fc55555 	.word	0x3fc55555
 8012538:	c2f8f359 	.word	0xc2f8f359
 801253c:	01a56e1f 	.word	0x01a56e1f
 8012540:	3fe00000 	.word	0x3fe00000
 8012544:	000fffff 	.word	0x000fffff
 8012548:	3ff00000 	.word	0x3ff00000
 801254c:	4090cbff 	.word	0x4090cbff
 8012550:	3f6f3400 	.word	0x3f6f3400

08012554 <__ieee754_sqrt>:
 8012554:	f8df c150 	ldr.w	ip, [pc, #336]	; 80126a8 <__ieee754_sqrt+0x154>
 8012558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801255c:	ea3c 0c01 	bics.w	ip, ip, r1
 8012560:	460b      	mov	r3, r1
 8012562:	4606      	mov	r6, r0
 8012564:	460d      	mov	r5, r1
 8012566:	460a      	mov	r2, r1
 8012568:	4607      	mov	r7, r0
 801256a:	4604      	mov	r4, r0
 801256c:	d10e      	bne.n	801258c <__ieee754_sqrt+0x38>
 801256e:	4602      	mov	r2, r0
 8012570:	f7ee f82c 	bl	80005cc <__aeabi_dmul>
 8012574:	4602      	mov	r2, r0
 8012576:	460b      	mov	r3, r1
 8012578:	4630      	mov	r0, r6
 801257a:	4629      	mov	r1, r5
 801257c:	f7ed fe70 	bl	8000260 <__adddf3>
 8012580:	4606      	mov	r6, r0
 8012582:	460d      	mov	r5, r1
 8012584:	4630      	mov	r0, r6
 8012586:	4629      	mov	r1, r5
 8012588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801258c:	2900      	cmp	r1, #0
 801258e:	dc0d      	bgt.n	80125ac <__ieee754_sqrt+0x58>
 8012590:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8012594:	ea5c 0707 	orrs.w	r7, ip, r7
 8012598:	d0f4      	beq.n	8012584 <__ieee754_sqrt+0x30>
 801259a:	b139      	cbz	r1, 80125ac <__ieee754_sqrt+0x58>
 801259c:	4602      	mov	r2, r0
 801259e:	f7ed fe5d 	bl	800025c <__aeabi_dsub>
 80125a2:	4602      	mov	r2, r0
 80125a4:	460b      	mov	r3, r1
 80125a6:	f7ee f93b 	bl	8000820 <__aeabi_ddiv>
 80125aa:	e7e9      	b.n	8012580 <__ieee754_sqrt+0x2c>
 80125ac:	1512      	asrs	r2, r2, #20
 80125ae:	d074      	beq.n	801269a <__ieee754_sqrt+0x146>
 80125b0:	2000      	movs	r0, #0
 80125b2:	07d5      	lsls	r5, r2, #31
 80125b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80125b8:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 80125bc:	bf5e      	ittt	pl
 80125be:	0fe3      	lsrpl	r3, r4, #31
 80125c0:	0064      	lslpl	r4, r4, #1
 80125c2:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 80125c6:	0fe3      	lsrs	r3, r4, #31
 80125c8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80125cc:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80125d0:	2516      	movs	r5, #22
 80125d2:	4601      	mov	r1, r0
 80125d4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80125d8:	1076      	asrs	r6, r6, #1
 80125da:	0064      	lsls	r4, r4, #1
 80125dc:	188f      	adds	r7, r1, r2
 80125de:	429f      	cmp	r7, r3
 80125e0:	bfde      	ittt	le
 80125e2:	1bdb      	suble	r3, r3, r7
 80125e4:	18b9      	addle	r1, r7, r2
 80125e6:	1880      	addle	r0, r0, r2
 80125e8:	005b      	lsls	r3, r3, #1
 80125ea:	3d01      	subs	r5, #1
 80125ec:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80125f0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80125f4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80125f8:	d1f0      	bne.n	80125dc <__ieee754_sqrt+0x88>
 80125fa:	462a      	mov	r2, r5
 80125fc:	f04f 0e20 	mov.w	lr, #32
 8012600:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8012604:	428b      	cmp	r3, r1
 8012606:	eb07 0c05 	add.w	ip, r7, r5
 801260a:	dc02      	bgt.n	8012612 <__ieee754_sqrt+0xbe>
 801260c:	d113      	bne.n	8012636 <__ieee754_sqrt+0xe2>
 801260e:	45a4      	cmp	ip, r4
 8012610:	d811      	bhi.n	8012636 <__ieee754_sqrt+0xe2>
 8012612:	f1bc 0f00 	cmp.w	ip, #0
 8012616:	eb0c 0507 	add.w	r5, ip, r7
 801261a:	da43      	bge.n	80126a4 <__ieee754_sqrt+0x150>
 801261c:	2d00      	cmp	r5, #0
 801261e:	db41      	blt.n	80126a4 <__ieee754_sqrt+0x150>
 8012620:	f101 0801 	add.w	r8, r1, #1
 8012624:	1a5b      	subs	r3, r3, r1
 8012626:	4641      	mov	r1, r8
 8012628:	45a4      	cmp	ip, r4
 801262a:	bf88      	it	hi
 801262c:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8012630:	eba4 040c 	sub.w	r4, r4, ip
 8012634:	443a      	add	r2, r7
 8012636:	005b      	lsls	r3, r3, #1
 8012638:	f1be 0e01 	subs.w	lr, lr, #1
 801263c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8012640:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8012644:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8012648:	d1dc      	bne.n	8012604 <__ieee754_sqrt+0xb0>
 801264a:	4323      	orrs	r3, r4
 801264c:	d006      	beq.n	801265c <__ieee754_sqrt+0x108>
 801264e:	1c54      	adds	r4, r2, #1
 8012650:	bf0b      	itete	eq
 8012652:	4672      	moveq	r2, lr
 8012654:	3201      	addne	r2, #1
 8012656:	3001      	addeq	r0, #1
 8012658:	f022 0201 	bicne.w	r2, r2, #1
 801265c:	1043      	asrs	r3, r0, #1
 801265e:	07c1      	lsls	r1, r0, #31
 8012660:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8012664:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8012668:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801266c:	bf48      	it	mi
 801266e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8012672:	4610      	mov	r0, r2
 8012674:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8012678:	e782      	b.n	8012580 <__ieee754_sqrt+0x2c>
 801267a:	0ae3      	lsrs	r3, r4, #11
 801267c:	3915      	subs	r1, #21
 801267e:	0564      	lsls	r4, r4, #21
 8012680:	2b00      	cmp	r3, #0
 8012682:	d0fa      	beq.n	801267a <__ieee754_sqrt+0x126>
 8012684:	02de      	lsls	r6, r3, #11
 8012686:	d50a      	bpl.n	801269e <__ieee754_sqrt+0x14a>
 8012688:	f1c2 0020 	rsb	r0, r2, #32
 801268c:	fa24 f000 	lsr.w	r0, r4, r0
 8012690:	1e55      	subs	r5, r2, #1
 8012692:	4094      	lsls	r4, r2
 8012694:	4303      	orrs	r3, r0
 8012696:	1b4a      	subs	r2, r1, r5
 8012698:	e78a      	b.n	80125b0 <__ieee754_sqrt+0x5c>
 801269a:	4611      	mov	r1, r2
 801269c:	e7f0      	b.n	8012680 <__ieee754_sqrt+0x12c>
 801269e:	005b      	lsls	r3, r3, #1
 80126a0:	3201      	adds	r2, #1
 80126a2:	e7ef      	b.n	8012684 <__ieee754_sqrt+0x130>
 80126a4:	4688      	mov	r8, r1
 80126a6:	e7bd      	b.n	8012624 <__ieee754_sqrt+0xd0>
 80126a8:	7ff00000 	.word	0x7ff00000

080126ac <fabs>:
 80126ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80126b0:	4770      	bx	lr

080126b2 <finite>:
 80126b2:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80126b6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80126ba:	0fc0      	lsrs	r0, r0, #31
 80126bc:	4770      	bx	lr
	...

080126c0 <nan>:
 80126c0:	2000      	movs	r0, #0
 80126c2:	4901      	ldr	r1, [pc, #4]	; (80126c8 <nan+0x8>)
 80126c4:	4770      	bx	lr
 80126c6:	bf00      	nop
 80126c8:	7ff80000 	.word	0x7ff80000

080126cc <rint>:
 80126cc:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 80126d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80126d2:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 80126d6:	2f13      	cmp	r7, #19
 80126d8:	4602      	mov	r2, r0
 80126da:	460b      	mov	r3, r1
 80126dc:	460c      	mov	r4, r1
 80126de:	4605      	mov	r5, r0
 80126e0:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 80126e4:	dc59      	bgt.n	801279a <rint+0xce>
 80126e6:	2f00      	cmp	r7, #0
 80126e8:	da2a      	bge.n	8012740 <rint+0x74>
 80126ea:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80126ee:	4301      	orrs	r1, r0
 80126f0:	d022      	beq.n	8012738 <rint+0x6c>
 80126f2:	f3c3 0113 	ubfx	r1, r3, #0, #20
 80126f6:	4301      	orrs	r1, r0
 80126f8:	424d      	negs	r5, r1
 80126fa:	430d      	orrs	r5, r1
 80126fc:	4936      	ldr	r1, [pc, #216]	; (80127d8 <rint+0x10c>)
 80126fe:	0c5c      	lsrs	r4, r3, #17
 8012700:	0b2d      	lsrs	r5, r5, #12
 8012702:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 8012706:	0464      	lsls	r4, r4, #17
 8012708:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801270c:	ea45 0304 	orr.w	r3, r5, r4
 8012710:	e9d1 4500 	ldrd	r4, r5, [r1]
 8012714:	4620      	mov	r0, r4
 8012716:	4629      	mov	r1, r5
 8012718:	f7ed fda2 	bl	8000260 <__adddf3>
 801271c:	e9cd 0100 	strd	r0, r1, [sp]
 8012720:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012724:	462b      	mov	r3, r5
 8012726:	4622      	mov	r2, r4
 8012728:	f7ed fd98 	bl	800025c <__aeabi_dsub>
 801272c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012730:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 8012734:	4602      	mov	r2, r0
 8012736:	460b      	mov	r3, r1
 8012738:	4610      	mov	r0, r2
 801273a:	4619      	mov	r1, r3
 801273c:	b003      	add	sp, #12
 801273e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012740:	4926      	ldr	r1, [pc, #152]	; (80127dc <rint+0x110>)
 8012742:	4139      	asrs	r1, r7
 8012744:	ea03 0001 	and.w	r0, r3, r1
 8012748:	4310      	orrs	r0, r2
 801274a:	d0f5      	beq.n	8012738 <rint+0x6c>
 801274c:	084b      	lsrs	r3, r1, #1
 801274e:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 8012752:	ea52 0501 	orrs.w	r5, r2, r1
 8012756:	d00c      	beq.n	8012772 <rint+0xa6>
 8012758:	ea24 0303 	bic.w	r3, r4, r3
 801275c:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8012760:	2f13      	cmp	r7, #19
 8012762:	bf0c      	ite	eq
 8012764:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8012768:	2500      	movne	r5, #0
 801276a:	fa44 f707 	asr.w	r7, r4, r7
 801276e:	ea43 0407 	orr.w	r4, r3, r7
 8012772:	4919      	ldr	r1, [pc, #100]	; (80127d8 <rint+0x10c>)
 8012774:	4623      	mov	r3, r4
 8012776:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 801277a:	462a      	mov	r2, r5
 801277c:	e9d6 4500 	ldrd	r4, r5, [r6]
 8012780:	4620      	mov	r0, r4
 8012782:	4629      	mov	r1, r5
 8012784:	f7ed fd6c 	bl	8000260 <__adddf3>
 8012788:	e9cd 0100 	strd	r0, r1, [sp]
 801278c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012790:	4622      	mov	r2, r4
 8012792:	462b      	mov	r3, r5
 8012794:	f7ed fd62 	bl	800025c <__aeabi_dsub>
 8012798:	e7cc      	b.n	8012734 <rint+0x68>
 801279a:	2f33      	cmp	r7, #51	; 0x33
 801279c:	dd05      	ble.n	80127aa <rint+0xde>
 801279e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 80127a2:	d1c9      	bne.n	8012738 <rint+0x6c>
 80127a4:	f7ed fd5c 	bl	8000260 <__adddf3>
 80127a8:	e7c4      	b.n	8012734 <rint+0x68>
 80127aa:	f04f 31ff 	mov.w	r1, #4294967295
 80127ae:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 80127b2:	fa21 f10c 	lsr.w	r1, r1, ip
 80127b6:	4208      	tst	r0, r1
 80127b8:	d0be      	beq.n	8012738 <rint+0x6c>
 80127ba:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 80127be:	bf18      	it	ne
 80127c0:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 80127c4:	ea4f 0351 	mov.w	r3, r1, lsr #1
 80127c8:	bf1e      	ittt	ne
 80127ca:	ea20 0303 	bicne.w	r3, r0, r3
 80127ce:	fa45 fc0c 	asrne.w	ip, r5, ip
 80127d2:	ea43 050c 	orrne.w	r5, r3, ip
 80127d6:	e7cc      	b.n	8012772 <rint+0xa6>
 80127d8:	08014718 	.word	0x08014718
 80127dc:	000fffff 	.word	0x000fffff

080127e0 <scalbn>:
 80127e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127e2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80127e6:	4604      	mov	r4, r0
 80127e8:	460d      	mov	r5, r1
 80127ea:	4617      	mov	r7, r2
 80127ec:	460b      	mov	r3, r1
 80127ee:	b996      	cbnz	r6, 8012816 <scalbn+0x36>
 80127f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80127f4:	4303      	orrs	r3, r0
 80127f6:	d039      	beq.n	801286c <scalbn+0x8c>
 80127f8:	4b35      	ldr	r3, [pc, #212]	; (80128d0 <scalbn+0xf0>)
 80127fa:	2200      	movs	r2, #0
 80127fc:	f7ed fee6 	bl	80005cc <__aeabi_dmul>
 8012800:	4b34      	ldr	r3, [pc, #208]	; (80128d4 <scalbn+0xf4>)
 8012802:	4604      	mov	r4, r0
 8012804:	429f      	cmp	r7, r3
 8012806:	460d      	mov	r5, r1
 8012808:	da0f      	bge.n	801282a <scalbn+0x4a>
 801280a:	a32d      	add	r3, pc, #180	; (adr r3, 80128c0 <scalbn+0xe0>)
 801280c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012810:	f7ed fedc 	bl	80005cc <__aeabi_dmul>
 8012814:	e006      	b.n	8012824 <scalbn+0x44>
 8012816:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801281a:	4296      	cmp	r6, r2
 801281c:	d10a      	bne.n	8012834 <scalbn+0x54>
 801281e:	4602      	mov	r2, r0
 8012820:	f7ed fd1e 	bl	8000260 <__adddf3>
 8012824:	4604      	mov	r4, r0
 8012826:	460d      	mov	r5, r1
 8012828:	e020      	b.n	801286c <scalbn+0x8c>
 801282a:	460b      	mov	r3, r1
 801282c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8012830:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8012834:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8012838:	19b9      	adds	r1, r7, r6
 801283a:	4291      	cmp	r1, r2
 801283c:	dd0e      	ble.n	801285c <scalbn+0x7c>
 801283e:	a322      	add	r3, pc, #136	; (adr r3, 80128c8 <scalbn+0xe8>)
 8012840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012844:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8012848:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 801284c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8012850:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8012854:	4820      	ldr	r0, [pc, #128]	; (80128d8 <scalbn+0xf8>)
 8012856:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 801285a:	e7d9      	b.n	8012810 <scalbn+0x30>
 801285c:	2900      	cmp	r1, #0
 801285e:	dd08      	ble.n	8012872 <scalbn+0x92>
 8012860:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012864:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012868:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 801286c:	4620      	mov	r0, r4
 801286e:	4629      	mov	r1, r5
 8012870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012872:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8012876:	da16      	bge.n	80128a6 <scalbn+0xc6>
 8012878:	f24c 3350 	movw	r3, #50000	; 0xc350
 801287c:	429f      	cmp	r7, r3
 801287e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8012882:	dd08      	ble.n	8012896 <scalbn+0xb6>
 8012884:	4c15      	ldr	r4, [pc, #84]	; (80128dc <scalbn+0xfc>)
 8012886:	4814      	ldr	r0, [pc, #80]	; (80128d8 <scalbn+0xf8>)
 8012888:	f363 74df 	bfi	r4, r3, #31, #1
 801288c:	a30e      	add	r3, pc, #56	; (adr r3, 80128c8 <scalbn+0xe8>)
 801288e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012892:	4621      	mov	r1, r4
 8012894:	e7bc      	b.n	8012810 <scalbn+0x30>
 8012896:	4c12      	ldr	r4, [pc, #72]	; (80128e0 <scalbn+0x100>)
 8012898:	4812      	ldr	r0, [pc, #72]	; (80128e4 <scalbn+0x104>)
 801289a:	f363 74df 	bfi	r4, r3, #31, #1
 801289e:	a308      	add	r3, pc, #32	; (adr r3, 80128c0 <scalbn+0xe0>)
 80128a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128a4:	e7f5      	b.n	8012892 <scalbn+0xb2>
 80128a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80128aa:	3136      	adds	r1, #54	; 0x36
 80128ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80128b0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80128b4:	4620      	mov	r0, r4
 80128b6:	4629      	mov	r1, r5
 80128b8:	2200      	movs	r2, #0
 80128ba:	4b0b      	ldr	r3, [pc, #44]	; (80128e8 <scalbn+0x108>)
 80128bc:	e7a8      	b.n	8012810 <scalbn+0x30>
 80128be:	bf00      	nop
 80128c0:	c2f8f359 	.word	0xc2f8f359
 80128c4:	01a56e1f 	.word	0x01a56e1f
 80128c8:	8800759c 	.word	0x8800759c
 80128cc:	7e37e43c 	.word	0x7e37e43c
 80128d0:	43500000 	.word	0x43500000
 80128d4:	ffff3cb0 	.word	0xffff3cb0
 80128d8:	8800759c 	.word	0x8800759c
 80128dc:	7e37e43c 	.word	0x7e37e43c
 80128e0:	01a56e1f 	.word	0x01a56e1f
 80128e4:	c2f8f359 	.word	0xc2f8f359
 80128e8:	3c900000 	.word	0x3c900000

080128ec <_init>:
 80128ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128ee:	bf00      	nop
 80128f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128f2:	bc08      	pop	{r3}
 80128f4:	469e      	mov	lr, r3
 80128f6:	4770      	bx	lr

080128f8 <_fini>:
 80128f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128fa:	bf00      	nop
 80128fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128fe:	bc08      	pop	{r3}
 8012900:	469e      	mov	lr, r3
 8012902:	4770      	bx	lr
